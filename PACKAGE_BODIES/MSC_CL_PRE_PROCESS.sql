--------------------------------------------------------
--  DDL for Package Body MSC_CL_PRE_PROCESS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."MSC_CL_PRE_PROCESS" AS -- body
/* $Header: MSCCLPPB.pls 120.27.12010000.35 2010/03/19 12:58:45 vsiyer ship $ */

  -- ========= Global Parameters ===========

   --Instance --

   v_apps_ver                  	NUMBER;
   v_supply_id_c                NUMBER ;
   v_supply_id_n               	NUMBER ;
   v_supply_id                  NUMBER ;
   v_source_organization_id    	NUMBER ;
   v_source_sr_instance_id      NUMBER ;
   v_discrete_flag              NUMBER:= SYS_NO;
   v_process_flag               NUMBER:= SYS_NO;
   --v_debug			BOOLEAN := FALSE;
   v_req_data                   varchar2(10);
   v_cal_build                  boolean := False;
   v_MSC_CONFIGURATION 		VARCHAR2(10) := nvl(fnd_profile.value('MSC_X_CONFIGURATION'), 1);
   v_my_company                 VARCHAR2(1000) := MSC_ST_UTIL.GET_MY_COMPANY;


   -- User Environment --
   -- v_current_date               DATE := sysdate;
   -- v_current_user               NUMBER;
   v_applsys_schema             VARCHAR2(32);
   prec                         MSC_UTIL.CollParamREC;

   -- Pre Process Program --
   --v_batch_size               NUMBER := 1000;
   v_last_collection_id         NUMBER;
   v_is_complete_refresh        BOOLEAN;
   v_is_incremental_refresh     BOOLEAN;
   v_is_so_complete_refresh     BOOLEAN;
   v_is_so_incremental_refresh  BOOLEAN;
   v_cp_enabled                 NUMBER;
   v_recalc_nra                 NUMBER;
   v_recalc_sh                  NUMBER;
   v_exchange_mode              NUMBER:= SYS_NO;  -- default to SYS_NO
   v_so_exchange_mode           NUMBER:= SYS_NO;  -- default to SYS_NO
   v_monitor_request_id         NUMBER;
   v_error_no_begin             PLS_INTEGER;
   v_error_no_end               PLS_INTEGER;
   v_sce_installed              BOOLEAN;

   v_res_dmd_enabled            NUMBER;
   v_mat_dmd_enabled            NUMBER;
   v_reserve_enabled            NUMBER;
   v_mat_sup_enabled            NUMBER;
   v_rtg_enabled                NUMBER;
   v_bom_enabled                NUMBER;
   v_resources_enabled          NUMBER;
   v_sourcing_enabled           NUMBER;
   v_ctg_enabled                NUMBER;
   v_sup_cap_enabled            NUMBER;
   v_safety_stk_enabled         NUMBER;
   v_item_enabled               NUMBER;
   v_tp_enabled                 NUMBER;
   v_dmd_class_enabled          NUMBER;
   v_uom_enabled                NUMBER;
   v_desig_enabled              NUMBER;
   v_project_enabled            NUMBER;
   v_cal_enabled                NUMBER;
   v_item_cat_enabled           NUMBER;
   v_uom_class_enabled          NUMBER;
   v_ship_mthd_enabled          NUMBER;
   v_item_cst_enabled           NUMBER;
   v_parent_request_id          PLS_INTEGER;
   v_request_id                 PLS_INTEGER; -- added to identify the set of records loaded at a time.
   v_second_pass                BOOLEAN := FALSE;
   v_fiscal_cal_enabled         NUMBER;
   v_comp_cal_enabled           NUMBER;
   v_setup_enabled              NUMBER;
   v_item_rollup                NUMBER;
   v_level_value_enabled        NUMBER;
   v_level_assoc_enabled        NUMBER;
   v_booking_enabled            NUMBER;
   v_shipment_enabled           NUMBER;
   v_mfg_fct_enabled            NUMBER;
   v_list_price_enabled         NUMBER;
   v_cs_data_enabled            NUMBER;
   v_cs_refresh                 NUMBER;
   v_curr_conv_enabled          NUMBER;
   v_uom_conv_enabled           NUMBER;
   v_comp_users_enabled         NUMBER;
   v_item_substitute_enabled    NUMBER;
   v_planners_enabled           NUMBER;
   v_profile_enabled            NUMBER;
   v_cal_assignment_enabled     NUMBER;
   v_iro_enabled                NUMBER;
   v_ero_enabled                NUMBER;
   v_sales_channel_enabled      NUMBER;
   v_fiscal_calendar_enabled    NUMBER;
   v_CMRO_enabled             NUMBER;  --- CMRO Proj bug 9135694
  /*  v_cs_batches_launched       NUMBER := 0; S_OP*/

   --  status --
   v_warning_flag               NUMBER:= SYS_NO;

   -- Task Control --
   v_pipe_task_que              VARCHAR2(32);
   v_pipe_wm                    VARCHAR2(32);
   v_pipe_mw                    VARCHAR2(32);
   v_pipe_status                VARCHAR2(32);

   -- Misc --

   PBS                          NUMBER;   -- purge batch size
   v_sourcing                   NUMBER;   -- sourcing rule flag
   v_cal_worker                 NumTblTyp:= NumTblTyp(0);-- Calendar Build
   v_total_worker_num           Number;

  -- ODP(Oracle Demand Planning) Changes-----------
  v_install_msd                 BOOLEAN;
  v_install_msc                 BOOLEAN;
-----------------------------
  -- ========== Declare Local Procedures ==============

  PROCEDURE LOAD_SUPPLIER_CAPACITY;
  PROCEDURE LOAD_SAFETY_STOCK;
  PROCEDURE LOAD_ITEM (p_batch_id  NUMBER);
  PROCEDURE LOAD_ITEM_SUBSTITUTES; -- Product item substitute
  PROCEDURE LOAD_CATEGORIES_SOURCING;
  PROCEDURE LOAD_DEPT_RESOURCES;
  PROCEDURE LOAD_RESOURCE_SETUPS;
  PROCEDURE LOAD_SETUP_TRANSITIONS;
  PROCEDURE LOAD_MATERIAL_SUPPLY(p_batch_id  NUMBER);
  PROCEDURE LOAD_MATERIAL_DEMAND(p_batch_id  NUMBER);
  PROCEDURE LOAD_SO_DEMAND(p_batch_id  NUMBER);
  PROCEDURE LOAD_RESERVATION;
  PROCEDURE LOAD_BOM_ROUTING;
  PROCEDURE LOAD_RESOURCE_DEMAND;
  PROCEDURE LOAD_ITEM_CST;
-- Added for the bug fix 2191021
  PROCEDURE LOAD_ITEM_ABC_CLASSES;
  PROCEDURE LOAD_COMPANY_USER;
  PROCEDURE LOAD_ITEM_SUBSTITUTE;
  PROCEDURE LOAD_CAL_ASSIGNMENTS;
  PROCEDURE LOAD_SALES_CHNL;
  PROCEDURE LOAD_FISCAL;
  PROCEDURE LOAD_CMRO; --- CMRO Proj bug 9135694

  -- ========= Declare DP local Procedure ===============
  PROCEDURE  LOAD_LEVEL_VALUE (p_batch_id   NUMBER );
  PROCEDURE  LOAD_LEVEL_ASSOCIATION (p_batch_id   NUMBER );
  PROCEDURE  LOAD_BOOKING_DATA (p_batch_id   NUMBER );
  PROCEDURE  LOAD_SHIPMENT_DATA (p_batch_id   NUMBER );
  PROCEDURE  LOAD_MFG_FORECAST (p_batch_id   NUMBER );
  PROCEDURE  LOAD_PRICE_LIST(p_batch_id   NUMBER );
  -- PROCEDURE  LOAD_ITEM_LIST_PRICE(p_batch_id   NUMBER );
  PROCEDURE  LOAD_CS_DATA (p_batch_id NUMBER);
  PROCEDURE  LOAD_CURR_CONV (p_batch_id   NUMBER );
  PROCEDURE  LOAD_UOM_CONV (p_batch_id   NUMBER );
  PROCEDURE  LOAD_SETUP_PARAMETER;
  PROCEDURE  LOAD_FISCAL_TIME;
  PROCEDURE  LOAD_COMPOSITE_TIME;
  PROCEDURE  LOAD_IRO_SUPPLY_DEMAND;
  PROCEDURE  LOAD_ERO_SUPPLY_DEMAND;


  --==Send Error/ Warning Email for XML Transactions having Errors/ Warnings ==

/*
  PROCEDURE SEND_ERROR
  IS
	TYPE MailCurTyp IS REF CURSOR;
	c_email                 MailCurTyp;
	lv_errbuf               varchar2(4000):='';
	lv_protocol_type        varchar2(30) := 'SMTP';
	lv_protocol_address     varchar2(4000);
	lv_clob                 CLOB;
	lv_message              system.ecxevtmsg;
	lv_messageproperties    dbms_aq.message_properties_t;
	lv_msgid                raw(16);
	lv_enqueueoptions       dbms_aq.enqueue_options_t;
	lv_amount               pls_integer;
	lv_pointer              pls_integer;
	lv_party_id             pls_integer;

	cursor c_err is select
	ed.document_number,
	ed.transaction_type,
	ed.transaction_subtype,
	ed.party_site_id,
	err.error_id,
	err.error_text,
	err.severity,
	err.table_name,
	err.rrow
	from msc_errors err,
	ecx_doclogs ed
	where err.message_id = ed.internal_control_number
	and err.instance_code = v_instance_code
	and nvl(err.message_sent,SYS_NO) <> SYS_YES;

  BEGIN
        FOR c in c_err loop

        lv_errbuf:= '';

        lv_pointer:= 1;
	  OPEN c_email FOR
		'select hdr.company_admin_email, hdr.tp_header_id '
              ||' from ecx_tp_headers hdr, ecx_tp_details det'
              ||' where hdr.tp_header_id = det.tp_header_id'
              ||' and hdr.company_admin_email IS NOT NULL'
              ||' and det.source_tp_location_code = :loc' USING c.party_site_id;
                                 -- party_site_id actually contains the loc code
	  FETCH c_email into lv_protocol_address, lv_party_id;
        CLOSE c_email;

        lv_pointer:= 2;
        IF lv_protocol_address IS NULL THEN
               fnd_message.set_name ('ECX', 'ECX_TP_ADMIN_EMAIL_NOT_FOUND');
               fnd_message.set_token ('TP_ID', c.party_site_id);
               lv_errbuf := fnd_message.get;
               LOG_MESSAGE( lv_errbuf);
               fnd_profile.get('ECX_SYS_ADMIN_EMAIL',lv_protocol_address);
        END IF;

        lv_pointer:= 3;
        IF lv_protocol_address IS NULL THEN
               fnd_message.set_name ('ECX', 'ECX_SYS_ADMIN_EMAIL_NOT_FOUND');
               LOG_MESSAGE(fnd_message.get);
        ELSE
               IF v_debug THEN
                   LOG_MESSAGE('lv_protocol_address: '||lv_protocol_address);
               END IF;
               IF c.severity = 1 THEN
                   fnd_message.set_name ('MSC', 'MSC_PP_ERROR_EMAIL');
               ELSE
                   fnd_message.set_name ('MSC', 'MSC_PP_WARN_EMAIL');
               END IF;

               lv_pointer:= 4;
               fnd_message.set_token ('TRANSACTION_TYPE', c.transaction_type);
               fnd_message.set_token ('TRANSACTION_SUB_TYPE', c.transaction_subtype);
               fnd_message.set_token ('DOCUMENT_NUMBER', c.document_number);
               lv_errbuf := lv_errbuf ||fnd_message.get;
               lv_errbuf := lv_errbuf ||c.error_text;

               IF v_debug THEN
                   LOG_MESSAGE('lv_errbuf : '||lv_errbuf );
               END IF;

               lv_pointer:= 5;
               lv_amount := length(lv_errbuf);
               dbms_lob.createtemporary(lv_clob,TRUE,DBMS_LOB.SESSION);
               dbms_lob.write(lv_clob,lv_amount,1,lv_errbuf);

               lv_pointer:= 6;
               lv_message := system.ecxevtmsg( c.document_number,
                                               lv_party_id,
                                               c.transaction_type,
                                               lv_clob,
                                               'USER',
                                               'ERROR',
                                               lv_protocol_address,
                                               null,
                                               null,
                                               null);

               lv_pointer:= 7;
               -- Enqueue
               dbms_aq.enqueue
               (
               queue_name=>'ECXEVENTQ',
               enqueue_options=>lv_enqueueoptions,
               message_properties=>lv_messageproperties,
               payload=>lv_message,
               msgid=>lv_msgid
               );

               lv_pointer:= 8;
               -- Start the Workflow process
               wf_xmlnotify.startprocess(lv_msgid);

               lv_pointer:= 9;
               update msc_errors set message_sent = SYS_YES
               where error_id = c.error_id;

               END IF;
               END LOOP;

  EXCEPTION
  when others then
  LOG_MESSAGE('MSC_CL_PRE_PROCESS.SEND_ERROR ('||lv_pointer||'): '||SQLERRM);
  END;
*/

-- WRITE_ERROR_SUMM_LOG ===========
PROCEDURE WRITE_ERROR_SUMM_LOG (p_parent_req_id number DEFAULT -1 ) IS
  CURSOR   c_error IS
    SELECT table_name, error_text, count(*) occur
    FROM   msc_errors
    WHERE  instance_code = v_instance_code
    AND    error_id between (v_error_no_begin + 1) and v_error_no_end
    AND    severity = 1
    GROUP BY table_name, error_text;

  CURSOR   c_error_by_req(p_request_id number) IS
    SELECT table_name, error_text, count(*) occur
    FROM   msc_errors
    WHERE  instance_code = v_instance_code
    AND    request_id = p_request_id
    AND    severity = 1
    GROUP BY table_name, error_text;

  CURSOR   c_warning IS
    SELECT table_name, error_text, count(*) occur
    FROM   msc_errors
    WHERE  instance_code = v_instance_code
    AND    error_id between (v_error_no_begin +1) and v_error_no_end
    AND    severity = 2
    GROUP BY table_name, error_text;

  CURSOR   c_warning_by_req(p_request_id number) IS
    SELECT table_name, error_text, count(*) occur
    FROM   msc_errors
    WHERE  instance_code = v_instance_code
    AND    request_id = p_request_id
    AND    severity = 2
    GROUP BY table_name, error_text;

  lv_count     PLS_INTEGER := 0;

BEGIN

IF nvl(p_parent_req_id,-1) < 1 THEN
  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'*************** DATA ERRORS DURING PRE-PROCESSING ****************');

  FOR cur in c_error LOOP

    lv_count:= lv_count + 1;

    MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_count||'. Table Name: '||cur.table_name||', Number of Occurences: '|| cur.occur||', Error: '|| cur.error_text);

  END LOOP;

  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'                 **********************');
  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,' ');

MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'*************** WARNINGS DURING PRE-PROCESSING ****************');

    lv_count := 0;

    FOR cur in c_warning LOOP

      lv_count:= lv_count + 1;

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_count||'. Table Name: '||cur.table_name||', Number of Occurences: '|| cur.occur||', Warning: '|| cur.error_text);

    END LOOP;

  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'                 **********************');
  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,' ');

ELSE
  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'*************** DATA ERRORS DURING PRE-PROCESSING ****************');

  FOR cur in c_error_by_req(p_parent_req_id) LOOP

    lv_count:= lv_count + 1;

    MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_count||'. Table Name: '||cur.table_name||', Number of Occurences: '|| cur.occur||', Error: '|| cur.error_text);

  END LOOP;

  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'                 **********************');
  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,' ');

  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'*************** WARNINGS DURING PRE-PROCESSING ****************');

    lv_count := 0;

    FOR cur in c_warning_by_req(p_parent_req_id) LOOP

      lv_count:= lv_count + 1;

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_count||'. Table Name: '||cur.table_name||', Number of Occurences: '|| cur.occur||', Warning: '|| cur.error_text);

    END LOOP;

  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'                 **********************');
  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,' ');

END IF;

EXCEPTION
when others then
 MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error in WRITE_ERROR_SUMM_LOG: '||dbms_utility.format_error_stack );

END;

--

--Launch DP Pull -------------
   --Launch DP Pull -------------
  PROCEDURE LAUNCH_DP_PULL (ERRBUF   OUT NOCOPY VARCHAR2,
                            RETCODE  OUT NOCOPY NUMBER)
  IS
  lv_direct_load_profile       BOOLEAN ;
  lv_launch_lvalue     NUMBER := SYS_NO;
  lv_launch_time       NUMBER := SYS_NO;
  lv_sql_stmt          VARCHAR2(4000);
  lv_error_text        VARCHAR2(250);

  BEGIN

  IF (v_install_msd) THEN

     lv_direct_load_profile := (fnd_profile.value('MSD_ONE_STEP_COLLECTION')='Y');

   --IF ((v_level_assoc_enabled = SYS_YES) OR (v_item_rollup = SYS_YES) ) THEN
     IF ((v_level_assoc_enabled = SYS_YES) OR (v_level_value_enabled = SYS_YES) OR (v_item_rollup = SYS_YES) ) THEN
         lv_launch_lvalue := SYS_YES;
     END IF;


     IF ((v_cal_enabled = SYS_YES)  OR (v_fiscal_cal_enabled = SYS_YES) OR (v_comp_cal_enabled=SYS_YES)) THEN
       lv_launch_time  := SYS_YES ;
     END IF ;

     IF(lv_direct_load_profile) THEN
         lv_sql_stmt :=  ' DECLARE errbuf varchar2(250);'
                       ||' retcode  number ;'
                       ||' BEGIN '
                       ||' MSD_CL_PRE_PROCESS.LAUNCH_PULL_PROGRAM'
                       ||' (ERRBUF             =>  errbuf ,'
                       ||'  RETCODE            =>  retcode ,'
                       ||'  p_instance_id      => :v_instance_id,'
                       ||'  p_request_id       => :v_request_id,'
                       ||'  p_launch_lvalue    => :lv_launch_lvalue,'
                       ||'  p_launch_booking   => :v_booking_enabled,'
                       ||'  p_launch_shipment  => :v_shipment_enabled,'
                       ||'  p_launch_forecast  => :v_mfg_fct_enabled,'
                       ||'  p_launch_time      => :lv_launch_time,'
                       ||'  p_launch_pricing   => :v_list_price_enabled,'
                       ||'  p_launch_curr_conv => :v_curr_conv_enabled ,'
                       ||'  p_launch_uom_conv  => :v_uom_conv_enabled,'
                       ||'  p_launch_cs_data   => :v_cs_data_enabled,'
                       ||'  p_cs_refresh       => :v_cs_refresh);'
                       ||'  END ;';

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,lv_sql_stmt);

        EXECUTE IMMEDIATE lv_sql_stmt
                USING     v_instance_id,
                          v_request_id,
                          lv_launch_lvalue,
                          v_booking_enabled,
                          v_shipment_enabled,
                          v_mfg_fct_enabled,
                          lv_launch_time,
                          v_list_price_enabled,
                          v_curr_conv_enabled ,
                          v_uom_conv_enabled,
                          v_cs_data_enabled,
                          v_cs_refresh ;

      END IF; -- One step collection
   END IF ;-- v_install_msd

  EXCEPTION

   WHEN OTHERS THEN
    lv_error_text := substr('MSC_CL_PRE_PROCESS.LAUNCH_DP_PULL'||SQLERRM,1,240);
    MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
    RETCODE := G_WARNING;
    ERRBUF  := lv_error_text;

  END LAUNCH_DP_PULL ;

  PROCEDURE LAUNCH_DELETE_DUPLICATES (ERRBUF   OUT NOCOPY VARCHAR2,
                            RETCODE  OUT NOCOPY NUMBER)
  IS

  lv_sql_stmt          VARCHAR2(4000);
  lv_error_text        VARCHAR2(250);

  BEGIN

  IF (v_install_msd) THEN

       lv_sql_stmt :=  ' DECLARE errbuf varchar2(250);'
                       ||' retcode  number ;'
                       ||' BEGIN '
                       ||' MSD_CL_PRE_PROCESS.LAUNCH_DELETE_DUPLICATES'
                       ||' (ERRBUF             =>  errbuf ,'
                       ||'  RETCODE            =>  retcode ,'
                       ||'  p_instance_id      => :v_instance_id);'
                       ||'  END ;';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,lv_sql_stmt);

        EXECUTE IMMEDIATE lv_sql_stmt
                USING     v_instance_id;


   END IF ;-- v_install_msd

  EXCEPTION

   WHEN OTHERS THEN
    lv_error_text := substr('MSC_CL_PRE_PROCESS.LAUNCH_DELETE_DUPLICATES'||SQLERRM,1,240);
    MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
    RETCODE := G_WARNING;
    ERRBUF  := lv_error_text;

  END LAUNCH_DELETE_DUPLICATES ;

-- =====Local Procedures =========
   FUNCTION GET_MY_COMPANY return VARCHAR2 IS
       p_my_company    msc_companies.company_name%TYPE;
   BEGIN

      /* Get the name of the own Company */
      /* This name is seeded with company_is = 1 in msc_companies */
      BEGIN
         select company_name into p_my_company
         from msc_companies
         where company_id = 1;
      EXCEPTION
         WHEN OTHERS THEN
         return 'My Company';
      END;

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'The name in GET_MY_COMPANY :'||p_my_company);
      return p_my_company;

   END GET_MY_COMPANY;

-- ===== CREATE_INDEXES ==========
PROCEDURE CREATE_INDEXES (p_batch_index   VARCHAR2 DEFAULT NULL) IS
BEGIN

IF p_batch_index IS NULL THEN

  IF v_item_enabled = SYS_YES THEN

    BEGIN

    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_SYSTEM_ITEMS_N1_'||v_instance_code
              ||' on MSC_ST_SYSTEM_ITEMS '
              ||'(item_name, sr_instance_code, organization_code, company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_SYSTEM_ITEMS_N1_'||v_instance_code);

    MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Created Index MSC_ST_SYSTEM_ITEMS_N1_'||v_instance_code);


    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_SYSTEM_ITEMS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_SYSTEM_ITEMS', v_instance_id, -1);

  END IF;

  IF v_mat_sup_enabled = SYS_YES THEN

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_SUPPLIES_N1_'||v_instance_code
              ||' on MSC_ST_SUPPLIES '
              ||'(SR_INSTANCE_CODE, ORDER_NUMBER, PURCH_LINE_NUM, ORDER_TYPE, COMPANY_NAME) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_SUPPLIES_N1_'||v_instance_code);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Created Index MSC_ST_SUPPLIES_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Error creating Index MSC_ST_SUPPLIES_N1_'||v_instance_code ||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_SUPPLIES_N2_'||v_instance_code
              ||' on MSC_ST_SUPPLIES '
              ||'(sr_instance_code, schedule_line_num, schedule_designator, organization_code, order_type, company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_SUPPLIES_N2_'||v_instance_code);
          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Created Index MSC_ST_SUPPLIES_N2_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Error creating Index MSC_ST_SUPPLIES_N2_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_SUPPLIES_N3_'||v_instance_code
              ||' on MSC_ST_SUPPLIES '
              ||'(sr_instance_code, item_name, organization_code, order_type, company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_SUPPLIES_N3_'||v_instance_code);

    MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_SUPPLIES_N3_'||v_instance_code);


    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_SUPPLIES_N3_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_SUPPLIES_N4_'||v_instance_code
              ||' on MSC_ST_SUPPLIES '
              ||'(sr_instance_code,wip_entity_name, organization_code,order_type,  company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_SUPPLIES_N4_'||v_instance_code);
    MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_SUPPLIES_N4_'||v_instance_code);


    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_SUPPLIES_N4_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_SUPPLIES', v_instance_id, -1);

  END IF;

  IF v_mat_dmd_enabled = SYS_YES THEN

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_DEMANDS_N1_'||v_instance_code
              ||' on MSC_ST_DEMANDS '
              ||'(sr_instance_code, schedule_date, item_name, organization_code, forecast_designator, company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_DEMANDS_N1_'||v_instance_code);
    MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_DEMANDS_N1_'||v_instance_code);


    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_DEMANDS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_DEMANDS_N2_'||v_instance_code
              ||' on MSC_ST_DEMANDS '
              ||'(SR_INSTANCE_CODE, ITEM_NAME,WIP_ENTITY_NAME, ORGANIZATION_CODE, ORIGINATION_TYPE, OPERATION_SEQ_CODE, COMPANY_NAME) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_DEMANDS_N2_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_DEMANDS_N2_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_DEMANDS_N2_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_SO_N1_'||v_instance_code
              ||' on MSC_ST_SALES_ORDERS '
              ||'(sr_instance_code, sales_order_number, line_num, organization_code, company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_SO_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_SO_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_SO_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_DEMANDS', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_SALES_ORDERS', v_instance_id, -1);

  END IF;

   IF v_reserve_enabled = SYS_YES THEN

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_RESERVE_N1_'||v_instance_code
              ||' on MSC_ST_RESERVATIONS '
              ||'(sr_instance_code,sales_order_number, line_num,organization_code,company_name ) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_RESERVE_N1_'||v_instance_code);


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_RESERVE_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_RESERVE_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_RESERVATIONS', v_instance_id, -1);

  END IF;


  IF v_bom_enabled = SYS_YES THEN

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_BOMS_N1_'||v_instance_code
              ||' on MSC_ST_BOMS '
              ||'(sr_instance_code, assembly_name, organization_code, company_name, bom_name, alternate_bom_designator) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_BOMS_N1_'||v_instance_code);
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_BOMS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_BOMS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_BOM_COMP_N1_'||v_instance_code
              ||' on MSC_ST_BOM_COMPONENTS '
              ||'(sr_instance_code, assembly_name, component_name, effectivity_date, operation_seq_code, organization_code, company_name, bom_name, alternate_bom_designator) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_BOM_COMP_N1_'||v_instance_code);
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_BOM_COMP_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_BOM_COMP_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_COMP_SUB_N1_'||v_instance_code
              ||' on MSC_ST_COMPONENT_SUBSTITUTES '
              ||'(sr_instance_code, assembly_name, component_name, sub_item_name, effectivity_date, operation_seq_code, organization_code,company_name, bom_name, alternate_bom_designator) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_COMP_SUB_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_COMP_SUB_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_COMP_SUB_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

     -- Added for Co Products (OSFM Integration) --
    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_CO_PRODUCTS_N1_'||v_instance_code
              ||' on MSC_ST_CO_PRODUCTS '
              ||'(co_product_name,component_name,sr_instance_code,company_name ) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_CO_PRODUCTS_N1_'||v_instance_code);
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_CO_PRODUCTS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_CO_PRODUCTS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_BOMS', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_BOM_COMPONENTS', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_COMPONENT_SUBSTITUTES', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_CO_PRODUCTS', v_instance_id, -1);


  END IF;

  IF v_rtg_enabled = SYS_YES THEN

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_ROUTINGS_N1_'||v_instance_code
              ||' on MSC_ST_ROUTINGS '
              ||'(sr_instance_code, assembly_name, organization_code,  company_name, routing_name, alternate_routing_designator) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_ROUTINGS_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_ROUTINGS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_ROUTINGS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_ROUTING_OPER_N1_'||v_instance_code
              ||' on MSC_ST_ROUTING_OPERATIONS '
              ||'( sr_instance_code, assembly_name, operation_seq_code, organization_code, company_name, routing_name, alternate_routing_designator) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_ROUTING_OPER_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_ROUTING_OPER_N1_'||v_instance_code);


    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_ROUTING_OPER_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_OPER_RES_N1_'||v_instance_code
              ||' on MSC_ST_OPERATION_RESOURCES '
              ||'(sr_instance_code,  assembly_name, resource_code, organization_code, company_name, alternate_number, operation_seq_code, resource_seq_code, routing_name, alternate_routing_designator) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_OPER_RES_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_OPER_RES_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_OPER_RES_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    -- Added for Operation Networks (OSFM Integration )
    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_OPER_NTWK_N1_'||v_instance_code
              ||' on MSC_ST_OPERATION_NETWORKS '
              ||'(assembly_name, organization_code,FROM_OPERATION_SEQ_CODE, TO_OPERATION_SEQ_CODE,sr_instance_code, company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_OPER_NTWK_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_OPER_NTWK_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_OPER_NTWK_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_ROUTINGS', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_OPERATION_RESOURCES', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_ROUTING_OPERATIONS', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_OPERATION_NETWORKS', v_instance_id, -1);


  END IF;

  IF v_item_cat_enabled = SYS_YES THEN

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_ITEM_CAT_N1_'||v_instance_code
              ||' on MSC_ST_ITEM_CATEGORIES '
              ||'(sr_instance_code,item_name, category_name, category_set_name, organization_code, company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_ITEM_CAT_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_ITEM_CAT_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_ITEM_CAT_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_ITEM_CAT_N2_'||v_instance_code
              ||' on MSC_ST_ITEM_CATEGORIES '
              ||'(sr_instance_code,batch_id) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_ITEM_CAT_N2_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_ITEM_CAT_N2_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_ITEM_CAT_N2_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_ITEM_CATEGORIES', v_instance_id, -1);

  END IF;

  IF v_resources_enabled = SYS_YES THEN
    BEGIN

    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_RESOURCE_GROUPS_N1_'||v_instance_code
              ||' on MSC_ST_RESOURCE_GROUPS '
              ||'(sr_instance_code, group_code, company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_RESOURCE_GROUPS_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_RESOURCE_GROUPS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_RESOURCE_GROUPS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_DEPT_RES_N1_'||v_instance_code
              ||' on MSC_ST_DEPARTMENT_RESOURCES '
              ||'(sr_instance_code, resource_code, department_code, organization_code,  company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_DEPT_RES_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_DEPT_RES_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_DEPT_RES_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_RES_SHIFTS_N1_'||v_instance_code
              ||' on MSC_ST_RESOURCE_SHIFTS '
              ||'(sr_instance_code, resource_code, department_code, shift_name,  organization_code, company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_RES_SHIFTS_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_RES_SHIFTS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_RES_SHIFTS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_RES_CHANGES_N1_'||v_instance_code
              ||' on MSC_ST_RESOURCE_CHANGES '
              ||'(sr_instance_code, simulation_set, resource_code, department_code, from_date, shift_name,  organization_code, company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_RES_CHANGES_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_RES_CHANGES_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_RES_CHANGES_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_RESOURCE_GROUPS', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_DEPARTMENT_RESOURCES', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_RESOURCE_SHIFTS', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_RESOURCE_CHANGES', v_instance_id, -1);

  END IF;

  IF v_project_enabled = SYS_YES THEN

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_PROJECT_TASKS_N1_'||v_instance_code
              ||' on MSC_ST_PROJECT_TASKS '
              ||'(sr_instance_code, project_number, task_number, organization_code,  company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_PROJECT_TASKS_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_PROJECT_TASKS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_PROJECT_TASKS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_PROJECT_TASKS', v_instance_id, -1);

  END IF;

  IF v_dmd_class_enabled = SYS_YES THEN

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_DMD_CLASS_N1_'||v_instance_code
              ||' on MSC_ST_DEMAND_CLASSES '
              ||'(sr_instance_code,demand_class,company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_DMD_CLASS_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_DMD_CLASS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_DMD_CLASS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_DEMAND_CLASSES', v_instance_id, -1);

  END IF;

  IF v_tp_enabled = SYS_YES THEN

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_TRADING_PART_N1_'||v_instance_code
              ||' on MSC_ST_TRADING_PARTNERS '
              ||'(sr_instance_code, partner_name, partner_type, company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_TRADING_PART_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_TRADING_PART_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_TRADING_PART_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_TRADING_PART_N2_'||v_instance_code
              ||' on MSC_ST_TRADING_PARTNERS '
              ||'(sr_instance_code, organization_code, partner_type, company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_TRADING_PART_N2_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_TRADING_PART_N2_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_TRADING_PART_N2_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_TRD_PART_SITES_N1_'||v_instance_code
              ||' on MSC_ST_TRADING_PARTNER_SITES '
              ||'(sr_instance_code ,tp_site_code, partner_name, partner_type) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_TRD_PART_SITES_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_TRD_PART_SITES_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_TRD_PART_SITES_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_SUB_INV_N1_'||v_instance_code
              ||' on MSC_ST_SUB_INVENTORIES '
              ||'( sr_instance_code, sub_inventory_code, organization_code ) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_SUB_INV_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_SUB_INV_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_SUB_INV_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_LOC_ASC_N1_'||v_instance_code
              ||' on MSC_ST_LOCATION_ASSOCIATIONS '
              ||'(sr_instance_code, location_code, tp_site_code, partner_name, partner_type,  company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_LOC_ASC_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_LOC_ASC_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_LOC_ASC_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_PART_CONT_N1_'||v_instance_code
              ||' on MSC_ST_PARTNER_CONTACTS '
              ||'(sr_instance_code,tp_site_code, partner_name, partner_type, company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_PART_CONT_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_PART_CONT_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_PART_CONT_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    --For Aeroexchange
    --Added for MSC_ST_GROUPS
    BEGIN
      ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_GROUPS_N1_'||v_instance_code
              ||' on MSC_ST_GROUPS '
              ||'(GROUP_NAME) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_GROUPS_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_GROUPS_N1_'||v_instance_code);

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_GROUPS', v_instance_id, -1);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_GROUPS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_GROUP_COMPANIES_N1_'||v_instance_code
              ||' on MSC_ST_GROUP_COMPANIES '
              ||'(group_name,company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_GROUP_COMPANIES_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_GROUP_COMPANIES_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_GROUP_COMPANIES_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;



    msc_analyse_tables_pk.analyse_table( 'MSC_ST_TRADING_PARTNERS', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_TRADING_PARTNER_SITES', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_SUB_INVENTORIES', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_LOCATION_ASSOCIATIONS', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_PARTNER_CONTACTS', v_instance_id, -1);

  END IF;

  IF v_item_cst_enabled = SYS_YES THEN

    BEGIN

    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_ITEM_CUSTOMERS_N1_'||v_instance_code
              ||' on MSC_ST_ITEM_CUSTOMERS '
              ||'(ITEM_NAME, CUSTOMER_NAME, SR_INSTANCE_CODE, COMPANY_NAME, CUSTOMER_SITE_NAME) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_ITEM_CUSTOMERS_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_ITEM_CUSTOMERS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_ITEM_CUSTOMERS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN

    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_ITEM_CUSTOMERS_N2_'||v_instance_code
              ||' on MSC_ST_ITEM_CUSTOMERS '
              ||'(CUSTOMER_ITEM_NAME, CUSTOMER_NAME, SR_INSTANCE_CODE, COMPANY_NAME, CUSTOMER_SITE_NAME) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_ITEM_CUSTOMERS_N2_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_ITEM_CUSTOMERS_N2_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_ITEM_CUSTOMERS_N2_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_ITEM_CUSTOMERS', v_instance_id, -1);

  END IF;

  IF v_ship_mthd_enabled = SYS_YES THEN

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_INTERORG_SHIP_N1_'||v_instance_code
              ||' on MSC_ST_INTERORG_SHIP_METHODS '
              ||'(sr_instance_code,from_organization_code,to_organization_code,ship_method,company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_INTERORG_SHIP_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_INTERORG_SHIP_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_INTERORG_SHIP_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_INTERORG_SHIP_METHODS', v_instance_id, -1);

   END IF;

  IF v_sourcing_enabled = SYS_YES THEN

   BEGIN

    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_ITEM_SRC_N1_'||v_instance_code
              ||' on MSC_ST_ITEM_SOURCING '
              ||'(sr_instance_code, sourcing_rule_name, assignment_set_name, organization_code, company_name, receipt_organization_code, source_organization_code) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_ITEM_SRC_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_ITEM_SRC_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_ITEM_SRC_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN

    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_REGIONS_N1_'||v_instance_code
              ||' on MSC_ST_REGIONS '
              ||'(sr_instance_code, country, state, city, postal_code_from, postal_code_to, zone ) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_REGIONS_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_REGIONS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_REGIONS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN

    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_ZONE_REGIONS_N1_'||v_instance_code
              ||' on MSC_ST_ZONE_REGIONS '
              ||'(sr_instance_code, country, state, city, postal_code_from, postal_code_to, zone ) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_ZONE_REGIONS_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_ZONE_REGIONS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_ZONE_REGIONS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

   BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_REGION_LOC_N1_'||v_instance_code
              ||' on MSC_ST_REGION_LOCATIONS '
              ||'(sr_instance_code, country, state, city, postal_code_from, postal_code_to, location_code ) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_REGION_LOC_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_REGION_LOC_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_REGION_LOC_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_REGION_SITE_N1_'||v_instance_code
              ||' on MSC_ST_REGION_SITES '
              ||'(sr_instance_code, country, state, city, postal_code_from, postal_code_to, vendor_name, vendor_site_code ) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_REGION_SITE_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_REGION_SITE_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_REGION_SITE_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_ITEM_SOURCING', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_REGIONS', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_ZONE_REGIONS', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_REGION_LOCATIONS', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_REGION_SITES', v_instance_id, -1);

  END IF;

  IF v_res_dmd_enabled = SYS_YES THEN

   BEGIN

    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_RES_REQ_N1_'||v_instance_code
              ||' on MSC_ST_RESOURCE_REQUIREMENTS '
              ||'(sr_instance_code, resource_code, wip_entity_name, operation_seq_code, organization_code, company_name, resource_seq_code) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_RES_REQ_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_RES_REQ_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_RES_REQ_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_RESOURCE_REQUIREMENTS', v_instance_id, -1);

  END IF;

  IF v_uom_class_enabled = SYS_YES THEN

   BEGIN

    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_UOM_CLS_CONV_N1_'||v_instance_code
              ||' on MSC_ST_UOM_CLASS_CONVERSIONS '
              ||'( from_uom_code, to_uom_code, item_name, company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_UOM_CLS_CONV_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_UOM_CLS_CONV_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_UOM_CLS_CONV_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_UOM_CLASS_CONVERSIONS', v_instance_id, -1);

  END IF;

  IF v_sup_cap_enabled = SYS_YES THEN

     BEGIN
     ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_ITEM_SUP_N1_'||v_instance_code
              ||' on MSC_ST_ITEM_SUPPLIERS '
              ||'(sr_instance_code, item_name, vendor_name, organization_code, company_name, vendor_site_code) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_ITEM_SUP_N1_'||v_instance_code);


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_ITEM_SUP_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_ITEM_SUP_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_SUP_CAP_N1_'||v_instance_code
              ||' on MSC_ST_SUPPLIER_CAPACITIES '
              ||'(sr_instance_code, item_name, vendor_name, from_date,organization_code,company_name,vendor_site_code) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_SUP_CAP_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_SUP_CAP_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_SUP_CAP_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_SUP_FENCES_N1_'||v_instance_code
              ||' on MSC_ST_SUPPLIER_FLEX_FENCES '
              ||'(sr_instance_code, item_name,vendor_name,fence_days,organization_code,company_name,vendor_site_code) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_SUP_FENCES_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_SUP_FENCES_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_SUP_FENCES_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_ITEM_SUPPLIERS', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_SUPPLIER_CAPACITIES', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_SUPPLIER_FLEX_FENCES', v_instance_id, -1);

  END IF;

  IF v_safety_stk_enabled = SYS_YES THEN

    BEGIN

    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_SAFETY_STOCKS_N1_'||v_instance_code
              ||' on MSC_ST_SAFETY_STOCKS '
              ||'(sr_instance_code,organization_code,item_name,period_start_date,company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_SAFETY_STOCKS_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_SAFETY_STOCKS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_SAFETY_STOCKS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;
  END IF;

  IF v_item_substitute_enabled = SYS_YES THEN

    BEGIN

    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_ITEM_SUBSTITUTES_N1_'||v_instance_code
              ||' on MSC_ST_ITEM_SUBSTITUTES '
              ||' (sr_instance_code,item_name,substitute_item_name,customer_name,'
              ||' customer_site_code,substitution_set,company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_SAFETY_STOCKS_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_ITEM_SUBSTITUTES_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_ITEM_SUBSTITUTES_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_SAFETY_STOCKS', v_instance_id, -1);
    msc_analyse_tables_pk.analyse_table( 'MSC_ST_ITEM_SUBSTITUTES', v_instance_id, -1);

  END IF;

  IF v_planners_enabled = SYS_YES THEN

    BEGIN

    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_PLANNERS_N1_'||v_instance_code
              ||' on MSC_ST_PLANNERS '
              ||'(sr_instance_code,organization_code,planner_code,company_name) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_PLANNERS_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_PLANNERS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_PLANNERS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_PLANNERS', v_instance_id, -1);

  END IF;

  IF v_mat_sup_enabled = SYS_YES THEN

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_JOB_OP_NETWORKS_N1_'||v_instance_code
              ||' on MSC_ST_JOB_OPERATION_NETWORKS '
              ||'(SR_INSTANCE_CODE, WIP_ENTITY_NAME, FROM_OPERATION_SEQ_CODE, TO_OPERATION_SEQ_CODE) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_JOB_OP_NETWORKS_N1_'||v_instance_code);
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_JOB_OP_NETWORKS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_JOB_OP_NETWORKS_N1_'||v_instance_code ||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_JOB_OPERATIONS_N1_'||v_instance_code
              ||' on MSC_ST_JOB_OPERATIONS '
              ||'(SR_INSTANCE_CODE, ORGANIZATION_CODE, WIP_ENTITY_NAME, OPERATION_SEQ_CODE ) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_JOB_OPERATIONS_N1_'||v_instance_code);
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_JOB_OPERATIONS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_JOB_OPERATIONS_N1_'||v_instance_code ||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_JOB_REQ_OPS_N1_'||v_instance_code
              ||' on MSC_ST_JOB_REQUIREMENT_OPS '
              ||'(SR_INSTANCE_CODE, ORGANIZATION_CODE, WIP_ENTITY_NAME, OPERATION_SEQ_CODE, COMPONENT_NAME, PRIMARY_COMPONENT_NAME ) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_JOB_REQ_OPS_N1_'||v_instance_code);
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_JOB_REQ_OPS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_JOB_REQ_OPS_N1_'||v_instance_code ||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_JOB_OP_RESOURCES_N1_'||v_instance_code
              ||' on MSC_ST_JOB_OP_RESOURCES '
              ||'(SR_INSTANCE_CODE, ORGANIZATION_CODE, WIP_ENTITY_NAME, OPERATION_SEQ_CODE, RESOURCE_SEQ_CODE, ALTERNATE_NUM, RESOURCE_CODE ) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_JOB_OP_RESOURCES_N1_'||v_instance_code);
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_JOB_OP_RESOURCES_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_JOB_OP_RESOURCES_N1_'||v_instance_code ||'. Error:'||substr(SQLERRM,1,240));
    END;

  END IF;

  IF v_cal_assignment_enabled = SYS_YES THEN

    BEGIN

    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_CAL_ASSIGNMENTS_N1_'||v_instance_code
              ||' on MSC_ST_CALENDAR_ASSIGNMENTS '
              ||'(sr_instance_code,association_type, calendar_code, calendar_type, partner_name, partner_site_code, organization_code, ship_method_code) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name =>'MSC_ST_CAL_ASSIGNMENTS_N1_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_CAL_ASSIGNMENTS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_CAL_ASSIGNMENTS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_CALENDAR_ASSIGNMENTS', v_instance_id, -1);

  END IF;


ELSIF p_batch_index = 'ITEM' THEN

    BEGIN

    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_SYSTEM_ITEMS_N2_'||v_instance_code
              ||' on MSC_ST_SYSTEM_ITEMS '
              ||' (sr_instance_code,batch_id,sr_inventory_item_id, deleted_flag) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name => 'MSC_ST_SYSTEM_ITEMS_N2_'||v_instance_code);


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_SYSTEM_ITEMS_N2_'||v_instance_code);

        EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_SYSTEM_ITEMS_N2_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_SYSTEM_ITEMS', v_instance_id, -1);

ELSIF p_batch_index = 'SUPPLY' THEN

    BEGIN

    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_SUPPLIES_N5_'||v_instance_code
              ||' on MSC_ST_SUPPLIES '
              ||' (batch_id, order_type, sr_instance_code, deleted_flag) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name => 'MSC_ST_SUPPLIES_N5_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_SUPPLIES_N5_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_SUPPLIES_N5_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_SUPPLIES', v_instance_id, -1);

ELSIF p_batch_index = 'DEMAND' THEN

    BEGIN

    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_DEMANDS_N3_'||v_instance_code
              ||' on MSC_ST_DEMANDS '
              ||' (batch_id, origination_type, sr_instance_code, deleted_flag) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name => 'MSC_ST_DEMANDS_N3_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_DEMANDS_N3_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_DEMANDS_N3_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_DEMANDS', v_instance_id, -1);

ELSIF p_batch_index = 'SO' THEN

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_SO_N2_'||v_instance_code
              ||' on MSC_ST_SALES_ORDERS '
              ||' (sales_order_number, batch_id ,sr_instance_code, deleted_flag) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name => 'MSC_ST_SO_N2_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_SO_N2_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_SO_N2_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
    ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                           application_short_name => 'MSC',
                           statement_type => AD_DDL.CREATE_INDEX,
                           statement =>
                 'create index MSC_ST_SO_N3_'||v_instance_code
              ||' on MSC_ST_SALES_ORDERS '
              ||' (sr_instance_code, batch_id , deleted_flag) '
              ||' STORAGE (INITIAL 100K NEXT 1M PCTINCREASE 0) ',
                           object_name => 'MSC_ST_SO_N3_'||v_instance_code);

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Created Index MSC_ST_SO_N3_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error creating Index MSC_ST_SO_N3_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_SALES_ORDERS', v_instance_id, -1);

END IF;

EXCEPTION
when others then
MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'CREATE_INDEXES: '||dbms_utility.format_error_stack );
END CREATE_INDEXES;

-- ===== DROP_INDEXES================
PROCEDURE DROP_INDEXES IS
BEGIN

  IF v_item_enabled = SYS_YES THEN

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_SYSTEM_ITEMS_N1_'||v_instance_code,
                         object_name => 'MSC_ST_SYSTEM_ITEMS_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_SYSTEM_ITEMS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_SYSTEM_ITEMS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_SYSTEM_ITEMS_N2_'||v_instance_code,
                         object_name => 'MSC_ST_SYSTEM_ITEMS_N2_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_SYSTEM_ITEMS_N2_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_SYSTEM_ITEMS_N2_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_LOCAL_ID_ITEM', v_instance_id, -1);

  END IF;

  IF v_mat_sup_enabled = SYS_YES THEN

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_SUPPLIES_N1_'||v_instance_code,
                         object_name => 'MSC_ST_SUPPLIES_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_SUPPLIES_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_SUPPLIES_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_SUPPLIES_N2_'||v_instance_code,
                         object_name => 'MSC_ST_SUPPLIES_N2_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_SUPPLIES_N2_'||v_instance_code);
    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_SUPPLIES_N2_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_SUPPLIES_N3_'||v_instance_code,
                         object_name => 'MSC_ST_SUPPLIES_N3_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_SUPPLIES_N3_'||v_instance_code);
    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_SUPPLIES_N3_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_SUPPLIES_N4_'||v_instance_code,
                         object_name => 'MSC_ST_SUPPLIES_N4_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_SUPPLIES_N4_'||v_instance_code);
    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_SUPPLIES_N4_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_SUPPLIES_N5_'||v_instance_code,
                         object_name => 'MSC_ST_SUPPLIES_N5_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_SUPPLIES_N5_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_SUPPLIES_N5_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

     msc_analyse_tables_pk.analyse_table( 'MSC_LOCAL_ID_SUPPLY', v_instance_id, -1);

  END IF;

  IF v_mat_dmd_enabled = SYS_YES THEN

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_DEMANDS_N1_'||v_instance_code,
                         object_name => 'MSC_ST_DEMANDS_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_DEMANDS_N1_'||v_instance_code);
    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_DEMANDS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_DEMANDS_N2_'||v_instance_code,
                         object_name => 'MSC_ST_DEMANDS_N2_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_DEMANDS_N2_'||v_instance_code);
    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_DEMANDS_N2_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_DEMANDS_N3_'||v_instance_code,
                         object_name => 'MSC_ST_DEMANDS_N3_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_DEMANDS_N3_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_DEMANDS_N3_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_SO_N1_'||v_instance_code,
                         object_name => 'MSC_ST_SO_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_SO_N1_'||v_instance_code);
    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_SO_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_SO_N2_'||v_instance_code,
                         object_name => 'MSC_ST_SO_N2_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_SO_N2_'||v_instance_code);
    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_SO_N2_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_SO_N3_'||v_instance_code,
                         object_name => 'MSC_ST_SO_N3_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_SO_N3_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_SO_N3_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_LOCAL_ID_DEMAND', v_instance_id, -1);

  END IF;

 IF v_reserve_enabled = SYS_YES THEN
    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_RESERVE_N1_'||v_instance_code,
                         object_name => 'MSC_ST_RESERVE_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_RESERVE_N1_'||v_instance_code);
    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_RESERVE_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;
  END IF;

  IF v_bom_enabled = SYS_YES THEN

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_BOMS_N1_'||v_instance_code,
                         object_name => 'MSC_ST_BOMS_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_BOMS_N1_'||v_instance_code);
    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_BOMS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_BOM_COMP_N1_'||v_instance_code,
                         object_name => 'MSC_ST_BOM_COMP_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_BOM_COMP_N1_'||v_instance_code);
    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_BOM_COMP_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_COMP_SUB_N1_'||v_instance_code,
                         object_name => 'MSC_ST_COMP_SUB_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_COMP_SUB_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_COMP_SUB_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

     --  Added for Co Products (OSFM Integration --
    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_CO_PRODUCTS_N1_'||v_instance_code,
                         object_name => 'MSC_ST_CO_PRODUCTS_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_CO_PRODUCTS_N1_'||v_instance_code);
    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_CO_PRODUCTS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

  END IF;

  IF v_rtg_enabled = SYS_YES THEN

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_ROUTINGS_N1_'||v_instance_code,
                         object_name => 'MSC_ST_ROUTINGS_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_ROUTINGS_N1_'||v_instance_code);
    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_ROUTINGS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_ROUTING_OPER_N1_'||v_instance_code,
                         object_name => 'MSC_ST_ROUTING_OPER_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_ROUTING_OPER_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_ROUTING_OPER_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_OPER_RES_N1_'||v_instance_code,
                         object_name => 'MSC_ST_OPER_RES_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_OPER_RES_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_OPER_RES_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

     -- Added for Operation Networks (OSFM Integration)--
    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_OPER_NTWK_N1_'||v_instance_code,
                         object_name => 'MSC_ST_OPER_NTWK_N1_'||v_instance_code);


                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_OPER_NTWK_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_OPER_NTWK_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

  END IF;

  IF v_item_cat_enabled = SYS_YES THEN

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_ITEM_CAT_N1_'||v_instance_code,
                         object_name => 'MSC_ST_ITEM_CAT_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_ITEM_CAT_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_ITEM_CAT_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_ITEM_CAT_N2_'||v_instance_code,
                         object_name => 'MSC_ST_ITEM_CAT_N2_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_ITEM_CAT_N2_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_ITEM_CAT_N2_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;
  END IF;


  IF v_resources_enabled = SYS_YES THEN

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_RESOURCE_GROUPS_N1_'||v_instance_code,
                         object_name => 'MSC_ST_RESOURCE_GROUPS_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_RESOURCE_GROUPS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_RESOURCE_GROUPS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_DEPT_RES_N1_'||v_instance_code,
                         object_name => 'MSC_ST_DEPT_RES_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_DEPT_RES_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_DEPT_RES_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_RES_SHIFTS_N1_'||v_instance_code,
                         object_name => 'MSC_ST_RES_SHIFTS_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_RES_SHIFTS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_RES_SHIFTS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_RES_CHANGES_N1_'||v_instance_code,
                         object_name => 'MSC_ST_RES_CHANGES_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_RES_CHANGES_N1_'||v_instance_code);


    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_RES_CHANGES_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

  END IF;


  IF v_project_enabled = SYS_YES THEN

    BEGIN

          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_PROJECT_TASKS_N1_'||v_instance_code,
                         object_name => 'MSC_ST_PROJECT_TASKS_N1_'||v_instance_code);

                 MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_PROJECT_TASKS_N1_'||v_instance_code);


    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_PROJECT_TASKS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

  END IF;

  IF v_dmd_class_enabled = SYS_YES THEN

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_DMD_CLASS_N1_'||v_instance_code,
                         object_name => 'MSC_ST_DMD_CLASS_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_DMD_CLASS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_DMD_CLASS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;
  END IF;

  IF v_tp_enabled = SYS_YES THEN

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_TRADING_PART_N1_'||v_instance_code,
                         object_name => 'MSC_ST_TRADING_PART_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_TRADING_PART_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_TRADING_PART_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_TRADING_PART_N2_'||v_instance_code,
                         object_name => 'MSC_ST_TRADING_PART_N2_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_TRADING_PART_N2_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_TRADING_PART_N2_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_TRD_PART_SITES_N1_'||v_instance_code,
                         object_name => 'MSC_ST_TRD_PART_SITES_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_TRD_PART_SITES_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_TRD_PART_SITES_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_SUB_INV_N1_'||v_instance_code,
                         object_name => 'MSC_ST_SUB_INV_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_SUB_INV_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_SUB_INV_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_LOC_ASC_N1_'||v_instance_code,
                         object_name => 'MSC_ST_LOC_ASC_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_LOC_ASC_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_LOC_ASC_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_PART_CONT_N1_'||v_instance_code,
                         object_name => 'MSC_ST_PART_CONT_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_PART_CONT_N1_'||v_instance_code);
    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_PART_CONT_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    -- For Aeroexchange
    -- Drop index of MSC_ST_GROUP_COMPANIES

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_GROUP_COMPANIES_N1_'||v_instance_code,
                         object_name => 'MSC_ST_GROUP_COMPANIES_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_GROUP_COMPANIES_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_GROUP_COMPANIES_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;


    ---- Drop index of MSC_ST_GROUPS
    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_GROUPS_N1_'||v_instance_code,
                         object_name => 'MSC_ST_GROUPS_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_GROUPS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_GROUPS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;


  END IF;

  -- For bug fix 2379391, dropping the indexes for MSC_ST_ITEM_CUSTOMERS
  IF v_item_cst_enabled = SYS_YES THEN

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_ITEM_CUSTOMERS_N1_'||v_instance_code,
                         object_name => 'MSC_ST_ITEM_CUSTOMERS_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_ITEM_CUSTOMERS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_ITEM_CUSTOMERS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_ITEM_CUSTOMERS_N2_'||v_instance_code,
                         object_name => 'MSC_ST_ITEM_CUSTOMERS_N2_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_ITEM_CUSTOMERS_N2_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_ITEM_CUSTOMERS_N2_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    msc_analyse_tables_pk.analyse_table( 'MSC_ST_ITEM_CUSTOMERS', v_instance_id, -1);

  END IF;

  IF v_ship_mthd_enabled = SYS_YES THEN

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_INTERORG_SHIP_N1_'||v_instance_code,
                         object_name => 'MSC_ST_INTERORG_SHIP_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_INTERORG_SHIP_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_INTERORG_SHIP_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;
END IF;

  IF v_sourcing_enabled = SYS_YES THEN

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_ITEM_SRC_N1_'||v_instance_code,
                         object_name => 'MSC_ST_ITEM_SRC_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_ITEM_SRC_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_ITEM_SRC_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_REGIONS_N1_'||v_instance_code,
                         object_name => 'MSC_ST_REGIONS_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_REGIONS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_REGIONS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_REGIONS_N1_'||v_instance_code,
                         object_name => 'MSC_ST_ZONE_REGIONS_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_ZONE_REGIONS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_ZONE_REGIONS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_REGION_LOC_N1_'||v_instance_code,
                         object_name => 'MSC_ST_REGION_LOC_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_REGION_LOC_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_REGION_LOC_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_REGION_SITE_N1_'||v_instance_code,
                         object_name => 'MSC_ST_REGION_SITE_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_REGION_SITE_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_REGION_SITE_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

  END IF;

  IF v_res_dmd_enabled = SYS_YES THEN

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_RES_REQ_N1_'||v_instance_code,
                         object_name => 'MSC_ST_RES_REQ_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_RES_REQ_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_RES_REQ_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;
  END IF;

  IF v_sup_cap_enabled = SYS_YES THEN

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_ITEM_SUP_N1_'||v_instance_code,
                         object_name => 'MSC_ST_ITEM_SUP_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_ITEM_SUP_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_ITEM_SUP_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_SUP_CAP_N1_'||v_instance_code,
                         object_name => 'MSC_ST_SUP_CAP_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_SUP_CAP_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_SUP_CAP_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_SUP_FENCES_N1_'||v_instance_code,
                         object_name => 'MSC_ST_SUP_FENCES_N1_'||v_instance_code);


                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_SUP_FENCES_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_SUP_FENCES_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

  END IF;

  IF v_safety_stk_enabled = SYS_YES THEN

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_SAFETY_STOCKS_N1_'||v_instance_code,
                         object_name => 'MSC_ST_SAFETY_STOCKS_N1_'||v_instance_code);


                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_SAFETY_STOCKS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_SAFETY_STOCKS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

  END IF;

  IF v_item_substitute_enabled = SYS_YES THEN

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_ITEM_SUBSTITUTES_N1_'||v_instance_code,
                         object_name => 'MSC_ST_ITEM_SUBSTITUTES_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_ITEM_SUBSTITUTES_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_ITEM_SUBSTITUTES_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

  END IF;

  IF v_planners_enabled = SYS_YES THEN

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_PLANNERS_N1_'||v_instance_code,
                         object_name => 'MSC_ST_PLANNERS_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_PLANNERS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_PLANNERS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

  END IF;

  IF v_uom_class_enabled = SYS_YES THEN

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_UOM_CLS_CONV_N1_'||v_instance_code,
                         object_name => 'MSC_ST_UOM_CLS_CONV_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_UOM_CLS_CONV_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_UOM_CLS_CONV_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

  END IF;

  IF v_mat_sup_enabled = SYS_YES THEN

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_JOB_OP_NETWORKS_N1_'||v_instance_code,
                         object_name => 'MSC_ST_JOB_OP_NETWORKS_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_JOB_OP_NETWORKS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_JOB_OP_NETWORKS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_JOB_OPERATIONS_N1_'||v_instance_code,
                         object_name => 'MSC_ST_JOB_OPERATIONS_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_JOB_OPERATIONS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_JOB_OPERATIONS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_JOB_REQ_OPS_N1_'||v_instance_code,
                         object_name => 'MSC_ST_JOB_REQ_OPS_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_JOB_REQ_OPS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_JOB_REQ_OPS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_JOB_OP_RESOURCES_N1_'||v_instance_code,
                         object_name => 'MSC_ST_JOB_OP_RESOURCES_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_JOB_OP_RESOURCES_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_JOB_OP_RESOURCES_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

  END IF;

  IF v_cal_assignment_enabled = SYS_YES THEN

    BEGIN
          ad_ddl.do_ddl( applsys_schema => v_applsys_schema,
                         application_short_name => 'MSC',
                         statement_type => AD_DDL.DROP_INDEX,
                         statement =>
                'drop index MSC_ST_CAL_ASSIGNMENTS_N1_'||v_instance_code,
                         object_name => 'MSC_ST_CAL_ASSIGNMENTS_N1_'||v_instance_code);

                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Dropped Index MSC_ST_CAL_ASSIGNMENTS_N1_'||v_instance_code);

    EXCEPTION
    WHEN OTHERS THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error dropping Index MSC_ST_CAL_ASSIGNMENTS_N1_'||v_instance_code||'. Error:'||substr(SQLERRM,1,240));
    END;

  END IF;

  msc_analyse_tables_pk.analyse_table( 'MSC_LOCAL_ID_SETUP', v_instance_id, -1);
  msc_analyse_tables_pk.analyse_table( 'MSC_LOCAL_ID_MISC', v_instance_id, -1);


EXCEPTION
  when others then
  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'DROP_INDEXES: '||sqlerrm);
END DROP_INDEXES;


--========= Get Task Number =================
   FUNCTION GET_TASK_NUM(p_message VARCHAR2) RETURN NUMBER
   IS
	lv_comma_pos       number:= 0;
	lv_length                 number:= 0;
	lv_task_num           number:= 0;
   BEGIN
      -- The message in the pipe could be of the form 'task_num,batch_id'
      -- or just 'task_num'. The comma should be in 2nd place or higher if present.
      -- to get the task num we find the length till the comma and then
      -- extract the task number

	lv_comma_pos:= INSTR(p_message,',');
	IF lv_comma_pos > 1 THEN
		lv_length       := lv_comma_pos - 1;
		lv_task_num := to_number(substr(p_message,1,lv_length));
	ELSE
		lv_task_num := to_number(p_message);
	END IF;

	RETURN lv_task_num;

   exception
   when others then
	RETURN -1;
   end;


   FUNCTION GET_BATCH_ID(p_message VARCHAR2) RETURN NUMBER
   IS
	lv_comma_pos   number := 0;
	lv_start_pos        number := 0;
	lv_batch_id         number := 0;
   BEGIN
      -- The message in the pipe would be of the form 'task_num,batch_id'
      -- or just 'task_num'. The comma should be in 2nd place or higher if present.
      -- to get the batch id we find the postion of  the comma and then
      -- extract the batch id

	lv_comma_pos:= INSTR(p_message,',');
	IF lv_comma_pos > 1 THEN
		lv_start_pos:= lv_comma_pos + 1;
		lv_batch_id := to_number(substr(p_message,lv_start_pos));
	ELSE
		lv_batch_id := -1;
	END IF;

	RETURN lv_batch_id;

   exception
   when others then
	RETURN -1;
   end;

   PROCEDURE INITIALIZE( p_instance_id NUMBER)
   IS
      lv_last_refresh_type                VARCHAR2(1)  := '';
      lv_so_last_refresh_type             VARCHAR2(1)  := '';
      lv_retval                           BOOLEAN;
      lv_dummy1                           VARCHAR2(32) := '';
      lv_dummy2                           VARCHAR2(32) := '';
      lv_msc_config                       NUMBER := 1;
   BEGIN

      SELECT LRTYPE,
             SO_LRTYPE,
             APPS_VER,
             SYSDATE,
             SYSDATE,
             LRID,                     -- gets current refresh id
             FND_GLOBAL.USER_ID,
             SYSDATE,
             FND_GLOBAL.USER_ID,
             INSTANCE_CODE,
             INSTANCE_TYPE             -- OPM
        INTO lv_last_refresh_type,
             lv_so_last_refresh_type,
             v_apps_ver,
             START_TIME,
             v_current_date,
             v_refresh_id,
             v_current_user,
             v_current_date,
             v_current_user,
             v_instance_code,
             v_instance_type           -- OPM
        FROM MSC_APPS_INSTANCES
       WHERE INSTANCE_ID= p_instance_id;


      -- check whether SCE is installed
      BEGIN
         lv_msc_config := FND_PROFILE.VALUE('MSC_X_CONFIGURATION');

      EXCEPTION
         when others then
            lv_msc_config := 1;
      END;

      IF lv_msc_config IN (2,3) THEN
         v_sce_installed := true;
      ELSIF lv_msc_config = 1 THEN
         v_sce_installed := false;
      END IF;

/*
      IF lv_last_refresh_type= 'C' THEN
         v_is_complete_refresh       := TRUE;
         v_is_incremental_refresh    := FALSE;
      ELSE
         v_is_complete_refresh       := FALSE;
         v_is_incremental_refresh    := TRUE;
      END IF;

      IF lv_so_last_refresh_type= 'C' THEN
         v_is_so_complete_refresh    := TRUE;
         v_is_so_incremental_refresh := FALSE;
      ELSE
         v_is_so_complete_refresh    := FALSE;
         v_is_so_incremental_refresh := TRUE;
      END IF;
*/

    v_pipe_task_que    := 'MSC_CL_PRE_TQ'||TO_CHAR(p_instance_id);
    v_pipe_wm          := 'MSC_CL_PRE_WM'||TO_CHAR(p_instance_id);
    v_pipe_mw          := 'MSC_CL_PRE_MW'||TO_CHAR(p_instance_id);
    v_pipe_status      := 'MSC_CL_PRE_ST'||TO_CHAR(p_instance_id);
    v_instance_id      :=  p_instance_id;

    MSC_ST_UTIL.v_instance_type := v_instance_type;
    MSC_ST_UTIL.v_instance_id := v_instance_id;

    --------------  Get current ERROR_ID from MSC_ERRORS ---
    -- SELECT max(ERROR_ID) INTO v_error_no_begin FROM MSC_ERRORS;

    ---------------- Set Flags -----------------------------
    -- set the flags as to whether discrete and/or process
    -- manufacturing are being used in the same instance

    v_discrete_flag  := SYS_NO;
    v_process_flag   := SYS_NO;

    IF v_instance_type = G_INS_DISCRETE OR
       v_instance_type = G_INS_MIXED    THEN
       v_discrete_flag := SYS_YES;
    END IF;

    IF v_instance_type = G_INS_PROCESS OR
       v_instance_type = G_INS_MIXED   THEN
       v_process_flag  := SYS_YES;
    END IF;

   --------- Get the Application Information ---------------------
    -- Get the aplication info, whether MSD(ODP) is installed or not

    lv_retval := FND_INSTALLATION.GET_APP_INFO(
                   'MSD', lv_dummy1,lv_dummy2, v_applsys_schema);

    IF (lv_dummy1 = 'I' OR lv_dummy1 = 'S')THEN
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Oracle Demand Planning Installed');
            v_install_msd := TRUE ;
    END IF;

   -- Get the aplication info, whether MSC(ASCP) is installed or not
    lv_retval := FND_INSTALLATION.GET_APP_INFO(
                   'MSC', lv_dummy1,lv_dummy2, v_applsys_schema);

    IF (lv_dummy1 = 'I' OR lv_dummy1 = 'S')THEN
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Oracle ASCP Installed');
            v_install_msc := TRUE ;
    END IF;

    -- set thr v_applsys_schema properly

    lv_retval := FND_INSTALLATION.GET_APP_INFO(
                   'FND', lv_dummy1,lv_dummy2, v_applsys_schema);

   EXCEPTION
   WHEN NO_DATA_FOUND THEN
     FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_INVALID_INSTANCE_ID');
     FND_MESSAGE.SET_TOKEN('INSTANCE_ID', v_pipe_wm);
     raise_application_error(-20101,FND_MESSAGE.GET);
   END INITIALIZE;


   PROCEDURE FINAL
   IS
     lv_param_rec_count           PLS_INTEGER; -- for L flow
   BEGIN

      UPDATE MSC_APPS_INSTANCES mai
         SET LAST_UPDATE_DATE = v_current_date,
             LAST_UPDATED_BY  = v_current_user,
             LRID= v_refresh_id,
             LRTYPE= 'L',
             SO_LRTYPE= 'I',
             CLEANSED_FLAG= SYS_NO,
             REQUEST_ID = FND_GLOBAL.CONC_REQUEST_ID
       WHERE mai.INSTANCE_ID = v_instance_id;

       -- Legacy Net Change Perf L flow changes

          SELECT count(*)
            INTO lv_param_rec_count
             FROM msc_coll_parameters
          WHERE instance_id = v_instance_id;

          IF lv_param_rec_count > 0 THEN
             DELETE FROM msc_coll_parameters
              WHERE instance_id = v_instance_id;
          END IF;

          INSERT INTO msc_coll_parameters
             (INSTANCE_ID, delete_ods_data, supplier_capacity, atp_rules,
              bom, bor, calendar_check, demand_class, forecast, item,
              kpi_targets_bis, mds, mps, oh, parameter, planners,
              item_substitutes, projects, po, reservations, nra, safety_stock,
              sales_order, sourcing_history, sourcing, sub_inventories,
              customer, supplier, unit_numbers, uom, user_supply_demand, wip, user_comp_association,
              INTERNAL_REPAIR,EXTERNAL_REPAIR,sales_channel,fiscal_calendar,CMRO,LAST_UPDATE_DATE, LAST_UPDATED_BY, CREATION_DATE, CREATED_BY)
           VALUES (v_instance_id, prec.purge_ods_flag, prec.app_supp_cap_flag,
              prec.atp_rules_flag, prec.bom_flag,
              prec.bor_flag, prec.calendar_flag,
              prec.demand_class_flag, prec.forecast_flag,
              prec.item_flag, prec.kpi_bis_flag,
              prec.mds_flag, prec.mps_flag,
              prec.oh_flag, prec.parameter_flag,
              prec.planner_flag,prec.item_subst_flag, prec.project_flag,
              prec.po_flag, prec.reserves_flag,
              prec.resource_nra_flag, prec.saf_stock_flag,
              prec.sales_order_flag, prec.source_hist_flag,
              prec.sourcing_rule_flag, prec.sub_inventory_flag,
              prec.tp_customer_flag, prec.tp_vendor_flag,
              prec.unit_number_flag, prec.uom_flag,
              prec.user_supply_demand_flag, prec.wip_flag, prec.user_company_flag,
              prec.internal_repair_flag,prec.external_repair_flag,prec.sales_channel_flag,prec.fiscal_calendar_flag,prec.CMRO_flag,sysdate, v_current_user, sysdate, v_current_user);

          -- End L Flow changes

   END FINAL;

   FUNCTION is_monitor_status_running RETURN NUMBER
   IS
      l_call_status      boolean;
      l_phase            varchar2(80);
      l_status           varchar2(80);
      l_dev_phase        varchar2(80);
      l_dev_status       varchar2(80);
      l_message          varchar2(2048);

   BEGIN

      IF v_cp_enabled= SYS_NO THEN
         RETURN SYS_YES;
      END IF;

       l_call_status:= FND_CONCURRENT.GET_REQUEST_STATUS
                                ( v_monitor_request_id,
                                NULL,
                                NULL,
                                l_phase,
                                l_status,
                                l_dev_phase,
                                l_dev_status,
                                l_message);

       IF l_call_status=FALSE THEN
          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS, l_message);
          RETURN SYS_NO;
       END IF;

       IF l_dev_phase='RUNNING' THEN
          RETURN SYS_YES;
       ELSE
          RETURN SYS_NO;
       END IF;

   END is_monitor_status_running;

   FUNCTION is_request_status_running RETURN NUMBER
   IS
      l_call_status           boolean;
      l_phase                 varchar2(80);
      l_status                varchar2(80);
      l_dev_phase             varchar2(80);
      l_dev_status            varchar2(80);
      l_message               varchar2(2048);

      l_request_id            NUMBER;

   BEGIN

      IF v_cp_enabled= SYS_NO THEN
         RETURN SYS_YES;
      END IF;

      l_request_id := FND_GLOBAL.CONC_REQUEST_ID;

      l_call_status:= FND_CONCURRENT.GET_REQUEST_STATUS
                              ( l_request_id,
                                NULL,
                                NULL,
                                l_phase,
                                l_status,
                                l_dev_phase,
                                l_dev_status,
                                l_message);

      IF l_call_status=FALSE THEN
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS, l_message);
         RETURN SYS_NO;
      END IF;

      IF l_dev_phase='RUNNING' THEN
         RETURN SYS_YES;
      ELSE
         RETURN SYS_NO;
      END IF;

   END is_request_status_running;

   FUNCTION is_worker_status_valid( ps_request_id      IN NumTblTyp)
     RETURN NUMBER
   IS
      l_call_status      boolean;
      l_phase            varchar2(80);
      l_status           varchar2(80);
      l_dev_phase        varchar2(80);
      l_dev_status       varchar2(80);
      l_message          varchar2(2048);

      l_request_id       NUMBER;
   BEGIN

      IF v_cp_enabled= SYS_NO THEN
         RETURN SYS_YES;
      END IF;

      FOR lc_i IN 1..(ps_request_id.COUNT-1) LOOP

          l_request_id := ps_request_id(lc_i);

          l_call_status:= FND_CONCURRENT.GET_REQUEST_STATUS
                              ( l_request_id,
                                NULL,
                                NULL,
                                l_phase,
                                l_status,
                                l_dev_phase,
                                l_dev_status,
                                l_message);

           IF l_call_status=FALSE THEN
              MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS, l_message);
              RETURN SYS_NO;
           END IF;

           IF l_dev_phase NOT IN ( 'PENDING','RUNNING') THEN
              RETURN SYS_NO;
           END IF;

       END LOOP;

       RETURN SYS_YES;

   END is_worker_status_valid;


   -- Fix for 2788719.
   -- Returns 1 if bis periods has to be updated else 2.
   FUNCTION is_bis_periods_load_reqd RETURN NUMBER
   IS
      lv_rec_count_cal   NUMBER:=0;
      lv_rec_count_mtp   NUMBER:=0;
  BEGIN

    BEGIN
      SELECT 	1
      INTO      lv_rec_count_cal
      FROM      dual
      WHERE     EXISTS(SELECT 1
                         FROM 	msc_st_calendars
                         WHERE  sr_instance_id = v_instance_id
                         AND    process_flag = G_VALID);

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        lv_rec_count_cal := 0;
    END;

    BEGIN
      SELECT 	1
      INTO      lv_rec_count_mtp
      FROM      dual
      WHERE     EXISTS(SELECT 1
                         FROM 	msc_st_trading_partners
                         WHERE  sr_instance_id = v_instance_id
                         AND    process_flag = G_VALID);

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        lv_rec_count_mtp := 0;
    END;
    IF (lv_rec_count_cal > 0 OR lv_rec_count_mtp > 0) THEN
        RETURN SYS_YES;
    ELSE
        RETURN SYS_NO;

    END IF;

   END is_bis_periods_load_reqd;

  ----- ============== BO VALIDATIONS START HERE ========

  --+===========================================================================+
  --| DESCRIPTION  : This Procedure derives the modeled partner id and          |
  --|                site id for those partners and partner sites which is      |
  --|                modeled as inventory organization.                         |
  --+===========================================================================+

  PROCEDURE MODEL_ORG_SUPPLIER_CUSTOMER IS
  lv_error_text         VARCHAR2(250);
  lv_return             NUMBER;
  lv_message_text       msc_errors.error_text%TYPE;
  ex_logging_err        EXCEPTION;

  BEGIN

    v_sql_stmt := 1;
    UPDATE msc_st_trading_partners
    SET    modeled_customer_id =
          (SELECT local_id
          FROM    msc_local_id_setup
          WHERE  char1                = sr_instance_code
          AND    NVL(char2,NULL_CHAR) = NVL(company_name,NULL_CHAR)
          AND    char3                = modeled_customer_name
          AND    number1              = G_CUSTOMER
          AND    entity_name          = 'SR_TP_ID' )
    WHERE  sr_instance_code = v_instance_code
    AND    modeled_customer_name IS NOT NULL
    AND    process_flag     = G_VALID
    AND    partner_type     = G_ORGANIZATION;

    v_sql_stmt := 2;
    UPDATE msc_st_trading_partners
    SET    modeled_supplier_id =
           (SELECT local_id
           FROM    msc_local_id_setup
           WHERE  char1                = sr_instance_code
           AND    NVL(char2,NULL_CHAR) = NVL(company_name,NULL_CHAR)
           AND    char3                = modeled_supplier_name
           AND    number1              = G_VENDOR
           AND    entity_name          = 'SR_TP_ID' )
    WHERE  sr_instance_code = v_instance_code
    AND    modeled_supplier_name IS NOT NULL
    AND    process_flag     = G_VALID
    AND    partner_type     = G_ORGANIZATION;

    v_sql_stmt := 3;
    UPDATE msc_st_trading_partners
    SET    modeled_customer_site_id =
           (SELECT local_id
           FROM    msc_local_id_setup
           WHERE   char1                = sr_instance_code
           AND     NVL(char2,NULL_CHAR) = NVL(company_name,NULL_CHAR)
           AND     char3                = modeled_customer_name
           AND     char4                = modeled_customer_site_code
           AND     number1              = G_CUSTOMER
           AND     entity_name          = 'SR_TP_SITE_ID')
    WHERE  sr_instance_code = v_instance_code
    AND    modeled_customer_site_code IS NOT NULL
    AND    process_flag     = G_VALID
    AND    partner_type     = G_ORGANIZATION;

    v_sql_stmt := 4;
    UPDATE msc_st_trading_partners
    SET    modeled_supplier_site_id =
           (SELECT local_id
           FROM    msc_local_id_setup
           WHERE   char1                = sr_instance_code
           AND     NVL(char2,NULL_CHAR) = NVL(company_name,NULL_CHAR)
           AND     char3                = modeled_supplier_name
           AND     char4                = modeled_supplier_site_code
           AND     number1              = G_VENDOR
           AND     entity_name          = 'SR_TP_SITE_ID')
    WHERE  sr_instance_code = v_instance_code
    AND    modeled_supplier_site_code  IS NOT NULL
    AND    process_flag     = G_VALID
    AND    partner_type     = G_ORGANIZATION;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'MODELED_CUSTOMER_NAME OR MODELED_SUPPLIER_NAME OR '
                                             ||'MODELED_CUSTOMER_SITE_CODE OR MODELED_SUPPLIER_SITE_CODE');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    v_sql_stmt := 5;
    UPDATE msc_st_trading_partners
    SET    error_text       = lv_message_text
    WHERE  sr_instance_code = v_instance_code
    AND    partner_type     = G_ORGANIZATION
    AND    process_flag     = G_VALID
    AND    ((modeled_customer_id IS NULL
           AND    modeled_customer_name IS NOT NULL)
    OR     (modeled_supplier_id  IS NULL
           AND    modeled_supplier_name IS NOT NULL)
    OR     (modeled_customer_site_id IS NULL
           AND    modeled_customer_site_code IS NOT NULL)
    OR     (modeled_supplier_site_id IS NULL
           AND    modeled_supplier_site_code IS NOT NULL));

   v_sql_stmt := 6;
  -- bug 2774016 (validation for master organization code)

   UPDATE msc_st_trading_partners
    SET   master_organization =
          (SELECT local_id
          FROM   msc_local_id_setup
          WHERE  char1                = sr_instance_code
          AND    NVL(char2,NULL_CHAR) = NVL(company_name,NULL_CHAR)
          AND    char3                = master_organization_code
          AND    number1              = G_ORGANIZATION
          AND    entity_name          = 'SR_TP_ID' )
    WHERE  sr_instance_code = v_instance_code
    AND    master_organization_code IS NOT NULL
    AND    process_flag     = G_VALID
    AND    partner_type     = G_ORGANIZATION;

   lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'MASTER_ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


  INSERT INTO msc_errors
    ( error_id,
     transaction_id,
     message_id,
     instance_code,
     table_name,
     propagated,
     source,
     rrow,
     severity,
     message_sent,
     last_update_date,
     last_updated_by,
     creation_date,
     created_by,
     last_update_login,
     request_id,
     program_application_id,
     program_id,
     program_update_date,
      error_text)
     SELECT
     msc_errors_s.NEXTVAL,
     st_transaction_id,
     message_id,
     sr_instance_code,
    'MSC_ST_TRADING_PARTNERS',
    'N',
    data_source_type,
    'MASTER_ORGANIZATION_CODE',
    G_SEV_WARNING,
    SYS_NO,
    last_update_date,
    last_updated_by,
    creation_date,
    created_by,
    last_update_login,
    request_id,
    program_application_id,
    program_id,
    program_update_date,
    lv_message_text
    FROM
    MSC_ST_TRADING_PARTNERS
    WHERE  sr_instance_code = v_instance_code
    AND    partner_type     = G_ORGANIZATION
    AND    process_flag     = G_VALID
    AND    (master_organization IS NULL
           AND  master_organization_code IS NOT NULL);


    commit;

  EXCEPTION
    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.MODEL_ORG_SUPPLIER_CUSTOMER'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
     MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END MODEL_ORG_SUPPLIER_CUSTOMER;


/*==========================================================================+
| DESCRIPTION  : This function errors out the record for which the          |
|                validation failed and inserts a record into the error      |
|                table. And then this error is propagated to the remaining  |
|                calendar summary tables(with the process_flag = 4)         |
+==========================================================================*/
  FUNCTION PROPAGATE_CAL_ERROR
           (p_table_name           VARCHAR2,
            p_transaction_id       NUMBER,
            p_calendar_code        VARCHAR2,
            p_message_text         VARCHAR2,
            p_column_names         VARCHAR2,
            p_error_text     OUT NOCOPY  VARCHAR2)
  RETURN NUMBER IS
  lv_sql_stmt           VARCHAR2(5000);
  lv_status             NUMBER := 0;
  lv_column_names       VARCHAR2(5000);       --stores concatenated column names
  lv_error_type         NUMBER;

  BEGIN

    IF    p_table_name = 'MSC_ST_CALENDARS' THEN
      v_sql_stmt  := 1;
      lv_sql_stmt :=
      'UPDATE   msc_st_calendars'
      ||' set   process_flag      = '||G_ERROR_FLG||','
      ||'       error_text        = :p_message_text'
      ||' WHERE st_transaction_id = :p_transaction_id'
      ||' AND   sr_instance_code  = :instance_code'
      ||' AND   process_flag      = '||G_IN_PROCESS
      ||' AND   calendar_code     = :calendar_code';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
            USING       p_message_text,
                        p_transaction_id,
                        v_instance_code,
                        p_calendar_code;

    ELSIF p_table_name = 'MSC_ST_WORKDAY_PATTERNS' THEN

      v_sql_stmt  := 2;
      lv_sql_stmt :=
      'UPDATE   msc_st_workday_patterns'
      ||' set   process_flag      = '||G_ERROR_FLG||','
      ||'       error_text        = :p_message_text'
      ||' WHERE st_transaction_id = :p_transaction_id'
      ||' AND   sr_instance_code  = :instance_code'
      ||' AND   process_flag      = '||G_IN_PROCESS
      ||' AND   calendar_code     = :calendar_code';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     p_message_text,
                        p_transaction_id,
                        v_instance_code,
                        p_calendar_code;

    ELSIF p_table_name = 'MSC_ST_SHIFT_TIMES' THEN

      v_sql_stmt  := 3;
      lv_sql_stmt :=
      'UPDATE   msc_st_shift_times'
      ||' set   process_flag      = '||G_ERROR_FLG||','
      ||'       error_text        = :p_message_text'
      ||' WHERE st_transaction_id = :p_transaction_id'
      ||' AND   sr_instance_code  = :instance_code'
      ||' AND   process_flag      = '||G_IN_PROCESS
      ||' AND   calendar_code     = :calendar_code';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
            USING       p_message_text,
                        p_transaction_id,
                        v_instance_code,
                        p_calendar_code;


    ELSIF p_table_name = 'MSC_ST_CALENDAR_EXCEPTIONS' THEN

      v_sql_stmt  := 4;
      lv_sql_stmt :=
      'UPDATE   msc_st_calendar_exceptions'
      ||' set   process_flag      = '||G_ERROR_FLG||','
      ||'       error_text        = :p_message_text'
      ||' WHERE st_transaction_id = :p_transaction_id'
      ||' AND   sr_instance_code  = :instance_code'
      ||' AND   process_flag      = '||G_IN_PROCESS
      ||' AND   calendar_code     = :calendar_code';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
            USING       p_message_text,
                        p_transaction_id,
                        v_instance_code,
                        p_calendar_code;

    ELSIF p_table_name = 'MSC_ST_SHIFT_EXCEPTIONS' THEN

      v_sql_stmt  := 5;
      lv_sql_stmt :=
      'UPDATE   msc_st_shift_exceptions'
      ||' set   process_flag      = '||G_ERROR_FLG||','
      ||'       error_text        = :p_message_text'
      ||' WHERE st_transaction_id = :p_transaction_id'
      ||' AND   sr_instance_code  = :instance_code'
      ||' AND   process_flag      = '||G_IN_PROCESS
      ||' AND   calendar_code     = :calendar_code';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE   lv_sql_stmt
              USING       p_message_text,
                          p_transaction_id,
                          v_instance_code,
                          p_calendar_code;

    END IF;

    IF    p_table_name <> 'MSC_ST_CALENDARS' THEN
      v_sql_stmt  := 6;
      lv_sql_stmt :=
      'UPDATE   msc_st_calendars'
      ||' set   process_flag = '||G_PROPAGATION
      ||' WHERE sr_instance_code = :instance_code'
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND   calendar_code    = :calendar_code';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        p_calendar_code;

    END IF;

    v_sql_stmt  := 7;
    lv_sql_stmt :=
    'UPDATE   msc_st_workday_patterns'
    ||' set   process_flag = '||G_PROPAGATION
    ||' WHERE sr_instance_code = :instance_code'
    ||' AND   process_flag     = '||G_IN_PROCESS
    ||' AND   calendar_code    = :calendar_code';

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code,
                      p_calendar_code;

    v_sql_stmt  := 8;
    lv_sql_stmt :=
    'UPDATE   msc_st_calendar_shifts'
    ||' set   process_flag = '||G_PROPAGATION
    ||' WHERE sr_instance_code = :instance_code'
    ||' AND   process_flag     = '||G_IN_PROCESS
    ||' AND   calendar_code    = :calendar_code';

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code,
                      p_calendar_code;

    v_sql_stmt  := 9;
    lv_sql_stmt :=
    'UPDATE   msc_st_shift_times'
    ||' set   process_flag = '||G_PROPAGATION
    ||' WHERE sr_instance_code = :instance_code'
    ||' AND   process_flag     = '||G_IN_PROCESS
    ||' AND   calendar_code    = :calendar_code';

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code,
                      p_calendar_code;


    v_sql_stmt  := 10;
    lv_sql_stmt :=
    'UPDATE   msc_st_calendar_exceptions'
    ||' set   process_flag = '||G_PROPAGATION
    ||' WHERE sr_instance_code = :instance_code'
    ||' AND   process_flag     = '||G_IN_PROCESS
    ||' AND   calendar_code    = :calendar_code';

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code,
                      p_calendar_code;

    v_sql_stmt  := 11;
    lv_sql_stmt :=
    'UPDATE   msc_st_shift_exceptions'
    ||' set   process_flag = '||G_PROPAGATION
    ||' WHERE sr_instance_code = :instance_code'
    ||' AND   process_flag     = '||G_IN_PROCESS
    ||' AND   calendar_code    = :calendar_code';

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code,
                      p_calendar_code;


    lv_status := MSC_ST_UTIL.LOG_ERROR
                 (p_table_name        => p_table_name,
                  p_instance_code     => v_instance_code,
                  p_row               => p_column_names,
                  p_severity          => G_SEV_ERROR,
                  p_message_text      => NULL,
                  p_error_text        => p_error_text,
                  p_debug             => v_debug,
                  p_propagated        => 'Y');

    RETURN(lv_status);
  EXCEPTION
    WHEN OTHERS THEN
      p_error_text := substr('MSC_CL_PRE_PROCESS.PROPAGATE_CAL_ERROR'
                            ||'('||v_sql_stmt||')'|| SQLERRM, 1, 240);
      return(SQLCODE);

  END PROPAGATE_CAL_ERROR;

/*==========================================================================+
| DESCRIPTION  : This function inserts a record into the LID table for the  |
|                new shifts, derives the shift information from the         |
|                workday pattern table and updates the shift_num in the     |
|                tables msc_st_shift_exceptions and msc_st_shift_times      |
+==========================================================================*/
  FUNCTION derive_shift_details
           (p_transaction_id     NUMBER,
            p_company_name       VARCHAR2,
            p_calendar_code      VARCHAR2,
            p_shift_name         VARCHAR2,
            p_error_text     OUT NOCOPY VARCHAR2,
            P_shift_num          NUMBER DEFAULT NULL_VALUE,
            p_shift_exist        NUMBER DEFAULT NULL_VALUE)
  RETURN NUMBER IS
  lv_sql_stmt             VARCHAR2(5000);
  lv_shift_num msc_st_calendar_shifts.shift_num%TYPE;

  BEGIN
    lv_shift_num := p_shift_num;

    IF p_shift_exist = SYS_NO THEN
      v_sql_stmt  := 2;
      lv_sql_stmt :=
      'INSERT INTO msc_local_id_setup'
      ||'  (local_id, '
      ||'   st_transaction_id,'
      ||'   instance_id,'
      ||'   entity_name,'
      ||'   char1,'
      ||'   char2,'
      ||'   char3,'
      ||'   char4,'
      ||'   last_update_date,'
      ||'   last_updated_by,'
      ||'   creation_date,'
      ||'   created_by)'
      ||' VALUES'
      ||'   (:lv_shift_num,'
      ||'   :p_transaction_id,'
      ||'   :v_instance_id,'
      ||'   ''SHIFT_NUM'','
      ||'   :v_instance_code,'
      ||'   :company_name,'
      ||'   :p_calendar_code,'
      ||'   :p_shift_name,'
      ||'   :v_current_date,'
      ||'   :v_current_user,'
      ||'   :v_current_date,'
      ||'   :v_current_user)';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_shift_num,
                        p_transaction_id,
                        v_instance_id,
                        v_instance_code,
                        p_company_name,
                        p_calendar_code,
                        p_shift_name,
                        v_current_date,
                        v_current_user,
                        v_current_date,
                        v_current_user;
    END IF;

    v_sql_stmt  := 3;
    lv_sql_stmt :=
    'UPDATE msc_st_workday_patterns'
    ||' SET    shift_num         = :lv_shift_num'
    ||' WHERE  st_transaction_id = :p_transaction_id'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    sr_instance_code  = :v_instance_code';

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    EXECUTE IMMEDIATE lv_sql_stmt
            USING     lv_shift_num,
                      p_transaction_id,
                      v_instance_code;

    v_sql_stmt  := 4;
    lv_sql_stmt :=
    'UPDATE msc_st_shift_times '
    ||' SET    shift_num        = :lv_shift_num'
    ||' WHERE  calendar_code    = :p_calendar_code'
    ||' AND    shift_name       = :p_shift_name'
    ||' AND    process_flag     = '||G_IN_PROCESS
    ||' AND    sr_instance_code = :v_instance_code';

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    EXECUTE IMMEDIATE lv_sql_stmt
            USING     lv_shift_num,
                      p_calendar_code,
                      p_shift_name,
                      v_instance_code;

    v_sql_stmt  := 5;
    lv_sql_stmt :=
    'UPDATE msc_st_shift_exceptions '
    ||' SET    shift_num        = :lv_shift_num'
    ||' WHERE  calendar_code    = :p_calendar_code'
    ||' AND    shift_name       = :p_shift_name'
    ||' AND    process_flag     = '||G_IN_PROCESS
    ||' AND    sr_instance_code = :v_instance_code';

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    EXECUTE IMMEDIATE lv_sql_stmt
            USING     lv_shift_num,
                      p_calendar_code,
                      p_shift_name,
                      v_instance_code;

    v_sql_stmt  := 6;
    lv_sql_stmt :=
    'INSERT INTO msc_st_calendar_shifts '
    ||'   (calendar_code,'
    ||'   shift_name,'
    ||'   shift_num,'
    ||'   sr_instance_code,'
    ||'   company_name,'
    ||'   sr_instance_id,'
    ||'   last_update_date,'
    ||'   last_updated_by,'
    ||'   creation_date,'
    ||'   created_by,'
    ||'   message_id,'
    ||'   process_flag,'
    ||'   data_source_type)'
    ||' SELECT'
    ||'   calendar_code,'
    ||'   shift_name,'
    ||'   shift_num,'
    ||'   :v_instance_code,'
    ||'   company_name,'
    ||    0||','
    ||'   last_update_date,'
    ||'   last_updated_by,'
    ||'   creation_date,'
    ||'   created_by,'
    ||'   message_id,'
    ||'   process_flag,'
    ||'   data_source_type'
    ||' FROM   msc_st_workday_patterns mwp'
    ||' WHERE  st_transaction_id = :p_transaction_id'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    sr_instance_code  = :instance_code'
    ||' AND    NOT EXISTS( SELECT 1 '
    ||'                    FROM   MSC_ST_CALENDAR_SHIFTS mcs'
    ||'                    where  mcs.calendar_code  =  mwp.calendar_code'
    ||'                    AND    mcs.shift_name     =  mwp.shift_name'
    ||'                    AND    mcs.shift_num      =  mwp.shift_num'
    ||'                    AND    mcs.sr_instance_code = :v_instance_code'
    ||'        AND   NVL(mwp.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mcs.company_name,  '||''''||NULL_CHAR||''''||'))';



      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code,
                      p_transaction_id,
                      v_instance_code,
                      v_instance_code;
    RETURN(0);
  EXCEPTION
    WHEN OTHERS THEN
	p_error_text := substr('MSC_CL_PRE_PROCESS.DERIVE_SHIFT_DETAILS'
                            ||'('||v_sql_stmt||')'|| SQLERRM, 1, 240);
	return(SQLCODE);

  END derive_shift_details;

/*==========================================================================+
| DESCRIPTION  : This procedure validates the summary information from the  |
|                legacy systems, inserts/updates the validated information  |
|                into the ODS tables and spawns the calendar build program  |
|                which populates the calendar details into the ODS tables.  |
+==========================================================================*/
  PROCEDURE LOAD_CALENDAR IS
  lv_rec_no               NUMBER;
  lv_return               NUMBER;
  lv_request_id           Number;
  lv_shift_num_gen        NUMBER;
  lv_shift_dup            NUMBER;
  lv_error_text           VARCHAR2(250);
  lv_sql_stmt             VARCHAR2(5000);
  lv_where_str            VARCHAR2(5000);
  lv_table_name           VARCHAR2(32);
  lv_column_names         VARCHAR2(5000);       --stores concatenated column names

  lv_calendar_code        msc_st_calendars.calendar_code%TYPE;
  lv_transaction_id       msc_st_calendars.st_transaction_id%TYPE;
  lv_calendar_start_date  msc_st_calendars.calendar_start_date%TYPE;
  lv_calendar_end_date    msc_st_calendars.calendar_end_date%TYPE;
  lv_seq_num              msc_st_workday_patterns.seq_num%TYPE := 0;
  lv_message_text         msc_errors.error_text%TYPE;
  lv_shift_num            msc_st_calendar_shifts.shift_num%TYPE;

  ex_logging_err          EXCEPTION;
  ex_critical_err         EXCEPTION;

  CURSOR   c1 IS
    SELECT rowid,
           calendar_code,
           calendar_start_date,
           calendar_end_date,
           quarterly_calendar_type,
           week_start_day,
           overwrite_flag,
           deleted_flag
    FROM   msc_st_calendars
    WHERE  sr_instance_code = v_instance_code
    AND    process_flag     = G_IN_PROCESS;

  CURSOR c2(p_calendar_code VARCHAR2) IS
    SELECT rowid,
           company_name,
           shift_name,
           seq_num,
           days_on,
           days_off,
           deleted_flag
    FROM   msc_st_workday_patterns
    WHERE  sr_instance_code = v_instance_code
    AND    calendar_code    = p_calendar_code
    AND    process_flag     = G_IN_PROCESS;

  CURSOR c3(p_calendar_code VARCHAR2) IS
    SELECT rowid,
           shift_name,
           shift_num,
           from_time,
           to_time,
           deleted_flag
    FROM   msc_st_shift_times
    WHERE  sr_instance_code = v_instance_code
    AND    calendar_code    = p_calendar_code
    AND    process_flag     = G_IN_PROCESS;

  CURSOR c4(p_calendar_code VARCHAR2) IS
    SELECT rowid,
           exception_date,
           exception_type,
           deleted_flag
    FROM   msc_st_calendar_exceptions
    WHERE  sr_instance_code = v_instance_code
    AND    calendar_code    = p_calendar_code
    AND    process_flag     = G_IN_PROCESS;

  CURSOR c5(p_calendar_code VARCHAR2) IS
    SELECT rowid,
           shift_name,
           exception_date,
           exception_type,
           deleted_flag
    FROM   msc_st_shift_exceptions
    WHERE  sr_instance_code = v_instance_code
    AND    calendar_code    = p_calendar_code
    AND    process_flag     = G_IN_PROCESS;

  BEGIN
    --Calendar summary information is processed calendar by calendar.
    v_cal_build := False;

    --Added to fix the bug#2748859
    --Getting the error message text
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML

    UPDATE  msc_st_calendars mc1
    SET     process_flag = G_ERROR_FLG,
            error_text   = lv_message_text
    WHERE   message_id <  (SELECT MAX(message_id)
                           FROM   msc_st_calendars mc2
                           WHERE  mc2.sr_instance_code  = mc1.sr_instance_code
                           AND    mc2.calendar_code     = mc1.calendar_code
                           AND    mc2.process_flag      = G_IN_PROCESS
                           AND    NVL(mc2.message_id,NULL_VALUE) <>NULL_VALUE)
    AND     mc1.process_flag             = G_IN_PROCESS
    AND     mc1.sr_instance_code         = v_instance_code
    AND     NVL(mc1.message_id,NULL_VALUE) <> NULL_VALUE;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    UPDATE  msc_st_calendars mc1
    SET     process_flag = G_ERROR_FLG,
            error_text   = lv_message_text
    WHERE   EXISTS( SELECT 1
                    FROM   msc_st_calendars mc2
                    WHERE  mc2.sr_instance_code  = mc1.sr_instance_code
                    AND    mc2.calendar_code     = mc1.calendar_code
                    AND    mc2.process_flag      = G_IN_PROCESS
                    AND    NVL(mc2.message_id,NULL_VALUE) = NULL_VALUE
                    GROUP BY sr_instance_code,company_name,calendar_code
                    HAVING COUNT(*) > 1)
    AND     mc1.process_flag             = G_IN_PROCESS
    AND     mc1.sr_instance_code         = v_instance_code
    AND     NVL(mc1.message_id,NULL_VALUE) = NULL_VALUE;
    --Added to fix the bug#2748859

    FOR rec1 IN c1
    LOOP
     BEGIN

      lv_calendar_code := rec1.calendar_code;--used for error propagation
      lv_table_name    := 'MSC_ST_CALENDARS';--used for error propagation

      lv_column_names :=
      'CALENDAR_CODE            ||''~''||'
      ||'CALENDAR_START_DATE    ||''~''||'
      ||'CALENDAR_END_DATE      ||''~''||'
      ||'QUARTERLY_CALENDAR_TYPE||''~''||'
      ||'SR_INSTANCE_CODE       ||''~''||'
      ||'DESCRIPTION            ||''~''||'
      ||'WEEK_START_DAY         ||''~''||'
      ||'OVERWRITE_FLAG         ||''~''||'
      ||'COMPANY_NAME           ||''~''||'
      ||'DAYS_ON                ||''~''||'
      ||'DAYS_OFF               ||''~''||'
      ||'DELETED_FLAG';

      v_sql_stmt  := 1;
      SELECT msc_st_calendars_s.NEXTVAL
      INTO   lv_transaction_id
      FROM   dual;

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,'Refresh ID: '||v_refresh_id);

      --Update the transaction_id and the who columns
      v_sql_stmt  := 2;
      lv_sql_stmt :=
      'UPDATE   msc_st_calendars '
      ||' SET   st_transaction_id = :lv_transaction_id,'
      ||'       refresh_id        = '||v_refresh_id ||','
      ||'       last_update_date  = :v_current_date,'
      ||'       last_updated_by   = :v_current_user,'
      ||'       creation_date     = :v_current_date,'
      ||'       created_by        = :v_current_user'
      ||' WHERE nvl(calendar_code, '||''''||NULL_CHAR||''''||') ='
      ||'       nvl(:calendar_code,'||''''||NULL_CHAR||''''||') '
      ||' AND   sr_instance_code  = :v_instance_code';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_transaction_id,
                        v_current_date,
                        v_current_user,
                        v_current_date,
                        v_current_user,
                        rec1.calendar_code,
                        v_instance_code;

      IF (rec1.calendar_code       IS NULL OR
          rec1.calendar_start_date IS NULL OR
          rec1.calendar_end_date   IS NULL) THEN

        lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                       (p_app_short_name    => 'MSC',
                        p_error_code        => 'MSC_PP_COL_VAL_NULL',
                        p_message_text      => lv_message_text,
                        p_error_text        => lv_error_text,
                        p_token1            => 'COLUMN_NAME',
                        p_token_value1      => 'CALENDAR_CODE OR '
                                               ||'CALENDAR_START_DATE OR '
                                               ||'CALENDAR_END_DATE ');

        IF lv_return <> 0 THEN
          RAISE ex_logging_err;
        END IF;

        RAISE ex_critical_err;

      ELSIF rec1.deleted_flag = SYS_YES THEN

        lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                       (p_app_short_name    => 'MSC',
                        p_error_code        => 'MSC_PP_NO_DELETION',
                        p_message_text      => lv_message_text,
                        p_error_text        => lv_error_text,
                        p_token1            => 'TABLE_NAME',
                        p_token_value1      => 'MSC_ST_CALENDARS');

        IF lv_return <> 0 THEN
          RAISE ex_logging_err;
        END IF;
        RAISE ex_critical_err;

      ELSIF (rec1.week_start_day           NOT IN(1,2)      OR
             rec1.quarterly_calendar_type  NOT IN(1,2,3,4)  OR
             NVL(rec1.overwrite_flag,'N')  NOT IN('Y','N')) THEN

        lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                       (p_app_short_name    => 'MSC',
                        p_error_code        => 'MSC_PP_INVALID_VALUE',
                        p_message_text      => lv_message_text,
                        p_error_text        => lv_error_text,
                        p_token1            => 'COLUMN_NAME',
                        p_token_value1      => 'WEEK_START_DAY OR'
                                               ||' QUARTERLY_CALENDAR_TYPE OR'
                                               ||' OVERWRITE_FLAG');

        IF lv_return <> 0 THEN
          RAISE ex_logging_err;
        END IF;
        RAISE ex_critical_err;

      ELSIF rec1.calendar_end_date <= rec1.calendar_start_date THEN

        lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                       (p_app_short_name    => 'MSC',
                        p_error_code        => 'MSC_PP_END_GT_ST_DATE',
                        p_message_text      => lv_message_text,
                        p_error_text        => lv_error_text);

        IF lv_return <> 0 THEN
          RAISE ex_logging_err;
        END IF;
        RAISE ex_critical_err;

      END IF;

      --Calendar is a global entity. Hence checking for the similar calendar
      --existence in other instances. Check is done in msc_calendar_dates
      --because 'ERP collections' does'nt collect the calendar header informations
      --like msc_Calendars, msc_workday_patterns etc.,
      v_sql_stmt  := 2;  /*Bug 2424200*/
      lv_sql_stmt :=
      'SELECT   count(*)'
      ||' FROM  msc_calendar_dates'
      ||' WHERE calendar_code   =  :calendar_code'
      ||' AND   sr_instance_id  <> :instance_id';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              INTO      lv_rec_no
              USING     rec1.calendar_code,
                        v_instance_id;

      IF lv_rec_no > 0 THEN

        lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_CAL_ALREADY_EXISTS',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text);

        IF lv_return <> 0 THEN
          RAISE ex_logging_err;
        END IF;
        RAISE ex_critical_err;
      END IF;

      --If the overwrite_flag is 'N' and the calendar is already existing
      --in the ODS table then the calendar will be errored out and also if
      --if the overwrite_flag is 'Y' and if the calendar  does'nt exist
      --in the ODS table then the calendar will be errored out. And also, if
      --all the existing shifts(in ODS) is not provided, then the calendar
      --will be errored out.
      BEGIN
        v_sql_stmt  := 3;  /*Bug 2172537*/
        lv_sql_stmt :=
        'SELECT   calendar_start_date,'
        ||'       calendar_end_date'
        ||' FROM  msc_calendars'
        ||' WHERE calendar_code   =  :calendar_code'
        ||' AND   sr_instance_id   = :instance_id'
        ||' FOR   UPDATE NOWAIT';

          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
        EXECUTE IMMEDIATE lv_sql_stmt
                INTO      lv_calendar_start_date,
                          lv_calendar_end_date
                USING     rec1.calendar_code,
                          v_instance_id;

        IF NVL(rec1.overwrite_flag,'N')     = 'N' THEN

          lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                       (p_app_short_name    => 'MSC',
                        p_error_code        => 'MSC_PP_CAL_ALREADY_EXISTS',
                        p_message_text      => lv_message_text,
                        p_error_text        => lv_error_text);

          IF lv_return <> 0 THEN
            RAISE ex_logging_err;
          END IF;
          RAISE ex_critical_err;

        ELSIF  NVL(rec1.overwrite_flag,'N') = 'Y' AND
              (rec1.calendar_start_date > lv_calendar_start_date OR
               rec1.calendar_end_date   < lv_calendar_end_date) THEN

           lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                        (p_app_short_name    => 'MSC',
                         p_error_code        => 'MSC_PP_CAL_PERIOD_INVALID',
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text);

           IF lv_return <> 0 THEN
             RAISE ex_logging_err;
           END IF;
           RAISE ex_critical_err;

        END IF;

      EXCEPTION
        WHEN no_data_found THEN
          IF NVL(rec1.overwrite_flag,'N') = 'Y' THEN

             lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                          (p_app_short_name    => 'MSC',
                           p_error_code        => 'MSC_PP_CAL_UPDATE_NOT_ALLOWED',
                           p_message_text      => lv_message_text,
                           p_error_text        => lv_error_text);

             IF lv_return <> 0 THEN
               RAISE ex_logging_err;
             END IF;
             RAISE ex_critical_err;
          END IF;
     END;

      IF NVL(rec1.overwrite_flag,'N') = 'Y' THEN
        BEGIN
          v_sql_stmt  := 4;  /*Bug 2172537*/
          lv_sql_stmt :=
          'SELECT 1'
          ||' FROM   msc_calendar_shifts mcs, msc_apps_instances mai '
          ||' WHERE  NOT EXISTS(SELECT 1 '
          ||'        FROM  msc_st_workday_patterns mwp '
          ||'        WHERE mwp.shift_name       = mcs.shift_name'
          ||'        AND   mcs.calendar_code =    mwp.calendar_code'
          ||'        AND   mwp.sr_instance_code = mai.instance_code'
          ||'        AND   mwp.process_flag     = '||G_IN_PROCESS||')'
          ||' AND    calendar_code    =  :calendar_code'
          ||' AND    mai.instance_code = :instance_code'
          ||' AND    mcs.sr_instance_id = mai.instance_id'
          ||' FOR   UPDATE NOWAIT';

            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
          EXECUTE IMMEDIATE lv_sql_stmt
                  INTO      lv_rec_no
                  USING     rec1.calendar_code,
                            v_instance_code;

          IF lv_rec_no =1 THEN

             lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                          (p_app_short_name    => 'MSC',
                           p_error_code        => 'MSC_PP_SHIFT_NOT_EXIST',
                           p_message_text      => lv_message_text,
                           p_error_text        => lv_error_text);

             IF lv_return <> 0 THEN
               RAISE ex_logging_err;
             END IF;
             RAISE ex_critical_err;
          END IF;
        EXCEPTION
          WHEN no_data_found THEN
            NULL;

          WHEN too_many_rows THEN
             lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                          (p_app_short_name    => 'MSC',
                           p_error_code        => 'MSC_PP_SHIFT_NOT_EXIST',
                           p_message_text      => lv_message_text,
                           p_error_text        => lv_error_text);

             IF lv_return <> 0 THEN
               RAISE ex_logging_err;
             END IF;
            RAISE ex_critical_err;
        END;
      END IF;

      v_sql_stmt  := 7;
      lv_sql_stmt :=
      'SELECT   nvl(SUM(nvl(days_on,0) + nvl(days_off,0)),0)'
      ||' FROM  msc_st_workday_patterns'
      ||' WHERE calendar_code = :calendar_code'
      ||' AND   NVL(shift_name,'||''''||NULL_CHAR||''''||')'
      ||'       =              '||''''||NULL_CHAR||''''
      ||' AND   deleted_flag <> '||SYS_YES
      ||' AND   process_flag = '||G_IN_PROCESS
      ||' AND   sr_instance_code = :instance_code';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE   lv_sql_stmt
                INTO      lv_rec_no
                USING     rec1.calendar_code,
                          v_instance_code;

      IF lv_rec_no <= 0 THEN
        lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_WORKDAY_PAT_INVALID',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text);

        IF lv_return <> 0 THEN
          RAISE ex_logging_err;
        END IF;

        RAISE ex_critical_err;
      END IF;

      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => null,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_CALENDARS',
         pInstanceID    => v_instance_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      IF rec1.deleted_flag NOT IN(1,2) THEN
        lv_where_str :=   ' AND   calendar_code      = '||''''||rec1.calendar_code||''''
                        ||' AND     sr_instance_code = '||''''||v_instance_code   ||'''';

        --Logging a warning for those records where the deleted_flag value
        --is other than Yes/No.
        lv_return := MSC_ST_UTIL.LOG_ERROR
                       (p_table_name        => 'MSC_ST_CALENDARS',
                        p_instance_code     => v_instance_code,
                        p_row               => lv_column_names,
                        p_severity          => G_SEV_WARNING,
                        p_message_text      => lv_message_text,
                        p_error_text        => lv_error_text,
                        p_where_str         => lv_where_str,
                        p_col_name          => 'DELETED_FLAG',
                        p_debug             => v_debug,
                        p_default_value     => SYS_NO);

        IF lv_return <> 0 THEN
          RAISE ex_logging_err;
        END IF;
      END IF;

      SELECT MIN(to_number(decode(length(rtrim(shift_name,'0123456789')),
      NULL,shift_name,'0')))
      INTO   lv_shift_num_gen
      FROM   msc_st_workday_patterns
      WHERE  sr_instance_code = v_instance_code
      AND    calendar_code    = rec1.calendar_code
      AND    process_flag     = G_IN_PROCESS
      AND    shift_name IS NOT NULL;

      --Workday Pattern is validated for a calendar.
      FOR rec2 IN c2(rec1.calendar_code)
      LOOP
        lv_table_name := 'MSC_ST_WORKDAY_PATTERNS';
        lv_seq_num    := lv_seq_num + 1;

        lv_column_names :=
        'CALENDAR_CODE      ||''~''||'
        ||'DAYS_ON          ||''~''||'
        ||'DAYS_OFF         ||''~''||'
        ||'SR_INSTANCE_CODE ||''~''||'
        ||'SHIFT_NUM        ||''~''||'
        ||'SHIFT_NAME       ||''~''||'
        ||'DESCRIPTION      ||''~''||'
        ||'COMPANY_NAME     ||''~''||'
        ||'DELETED_FLAG';

        v_sql_stmt  := 8;
        SELECT msc_st_workday_patterns_s.NEXTVAL
        INTO   lv_transaction_id
        FROM   dual;

        v_sql_stmt  := 9;
        UPDATE   msc_st_workday_patterns
        SET      st_transaction_id  = lv_transaction_id,
                 refresh_id         = v_refresh_id,
                 seq_num            = lv_seq_num,
                 last_update_date   = v_current_date,
                 last_updated_by    = v_current_user,
                 creation_date      = v_current_date,
                 created_by         = v_current_user
        WHERE    rowid              = rec2.rowid;

        IF rec2.deleted_flag = SYS_YES THEN

          lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                       (p_app_short_name    => 'MSC',
                        p_error_code        => 'MSC_PP_NO_DELETION',
                        p_message_text      => lv_message_text,
                        p_error_text        => lv_error_text,
                        p_token1            => 'TABLE_NAME',
                        p_token_value1      => 'MSC_ST_WORKDAY_PATTERNS');

          IF lv_return <> 0 THEN
            RAISE ex_logging_err;
          END IF;
          RAISE ex_critical_err;

        ELSIF (rec2.days_on  < 0 OR
               rec2.days_off < 0) THEN

          lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                       (p_app_short_name    => 'MSC',
                        p_error_code        => 'MSC_PP_CONV_RT_NEG',
                        p_message_text      => lv_message_text,
                        p_error_text        => lv_error_text,
                        p_token1            => 'COLUMN_NAME',
                        p_token_value1      => 'DAYS_ON AND DAYS_OFF');

          IF lv_return <> 0 THEN
            RAISE ex_logging_err;
          END IF;
          RAISE ex_critical_err;

        END IF;

        IF rec2.deleted_flag NOT IN(1,2) THEN

           lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                       (p_app_short_name    => 'MSC',
                        p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                        p_message_text      => lv_message_text,
                        p_error_text        => lv_error_text,
                        p_token1            => 'COLUMN_NAME',
                        p_token_value1      => 'DELETED_FLAG',
                        p_token2            => 'DEFAULT_VALUE',
                        p_token_value2      => SYS_NO);

          lv_where_str := ' AND st_transaction_id = '||lv_transaction_id;

          --Logging a warning for those records where the deleted_flag value
          --is other than Yes/No.
          lv_return := MSC_ST_UTIL.LOG_ERROR
                       (p_table_name        => 'MSC_ST_WORKDAY_PATTERNS',
                        p_instance_code     => v_instance_code,
                        p_row               => lv_column_names,
                        p_severity          => G_SEV_WARNING,
                        p_message_text      => lv_message_text,
                        p_error_text        => lv_error_text,
                        p_where_str         => lv_where_str,
                        p_col_name          => 'DELETED_FLAG',
                        p_debug             => v_debug,
                        p_default_value     => SYS_NO);

        IF lv_return <> 0 THEN
          RAISE ex_logging_err;
        END IF;
      END IF;

        --Call to customised validation.
        MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
          (ERRBUF         => lv_error_text,
           RETCODE        => lv_return,
           pBatchID       => null,
           pInstanceCode  => v_instance_code,
           pEntityName    => 'MSC_ST_WORKDAY_PATTERNS',
           pInstanceID    => v_instance_id);

        IF lv_return <> 0 THEN
          RAISE ex_logging_err;
        END IF;

      --If the workday pattern definition is for the shifts, then the
      --shift details are derived here.
      IF rec2.shift_name IS NOT NULL THEN

        BEGIN
            v_sql_stmt  := 12;
            lv_sql_stmt :=
            'SELECT    local_id '
            ||' FROM   msc_local_id_setup'
            ||' WHERE  char1 = :v_instance_code'
            ||' AND    NVL(char2,       '||''''||NULL_CHAR||''''||') = '
            ||'        NVL(:company_name,'||''''||NULL_CHAR||''''||') '
            ||' AND    char3 = :calendar_code'
            ||' AND    char4 = :shift_name'
            ||' AND    entity_name = ''SHIFT_NUM'' ';

              MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
            EXECUTE IMMEDIATE lv_sql_stmt
                    INTO      lv_shift_num
                    USING     v_instance_code,
                              rec2.company_name,
                              rec1.calendar_code,
                              rec2.shift_name;

            lv_return := derive_shift_details
	                 (p_transaction_id => lv_transaction_id,
                          p_company_name   => rec2.company_name,
                          p_calendar_code  => rec1.calendar_code,
                          p_shift_name     => rec2.shift_name,
                          p_error_text     => lv_error_text,
                          p_shift_num      => lv_shift_num,
                          p_shift_exist    => SYS_YES);

            IF lv_return <> 0 THEN
              RAISE ex_logging_err;
            END IF;

          EXCEPTION
            WHEN no_data_found THEN

              IF lv_shift_num_gen > 0 THEN
                 lv_shift_num := rec2.shift_name;
              ELSE
                 SELECT msc_st_shift_num_s.NEXTVAL
                 INTO   lv_shift_num
                 FROM   dual;
              END IF;

              lv_return := derive_shift_details
                          (p_transaction_id => lv_transaction_id,
                           p_company_name   => rec2.company_name,
                           p_calendar_code  => rec1.calendar_code,
                           p_shift_name     => rec2.shift_name,
                           p_error_text     => lv_error_text,
                           p_shift_num      => lv_shift_num,
                           p_shift_exist    => SYS_NO);

              IF lv_return <> 0 THEN
                RAISE ex_logging_err;
              END IF;
          END;
        END IF;

      END LOOP;

     --Validation for shift times table.
      FOR rec3 IN c3(rec1.calendar_code)
      LOOP
        lv_table_name    := 'MSC_ST_SHIFT_TIMES';
        lv_column_names :=
        'CALENDAR_CODE      ||''~''||'
        ||'SHIFT_NAME       ||''~''||'
        ||'SHIFT_NUM        ||''~''||'
        ||'SR_INSTANCE_CODE ||''~''||'
        ||'FROM_TIME        ||''~''||'
        ||'TO_TIME          ||''~''||'
        ||'COMPANY_NAME     ||''~''||'
        ||'DELETED_FLAG';

        v_sql_stmt  := 13;
        SELECT msc_st_shift_times_s.NEXTVAL
        INTO   lv_transaction_id
        FROM   dual;

        v_sql_stmt  := 14;
        UPDATE msc_st_shift_times
        SET    st_transaction_id = lv_transaction_id,
               refresh_id        = v_refresh_id,
               last_update_date  = v_current_date,
               last_updated_by   = v_current_user,
               creation_date     = v_current_date,
               created_by        = v_current_user
        WHERE  rowid             = rec3.rowid;

        IF    (rec3.shift_name IS NULL OR
               rec3.shift_num  IS NULL) THEN

          lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                       (p_app_short_name    => 'MSC',
                        p_error_code        => 'MSC_PP_COL_VAL_NULL',
                        p_message_text      => lv_message_text,
                        p_error_text        => lv_error_text,
                        p_token1            => 'COLUMN_NAME',
                        p_token_value1      => 'SHIFT_NAME OR SHIFT_NUM ');
          RAISE ex_critical_err;

        ELSIF rec3.deleted_flag = SYS_YES THEN

          lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                       (p_app_short_name    => 'MSC',
                        p_error_code        => 'MSC_PP_NO_DELETION',
                        p_message_text      => lv_message_text,
                        p_error_text        => lv_error_text,
                        p_token1            => 'TABLE_NAME',
                        p_token_value1      => lv_table_name);

          IF lv_return <> 0 THEN
            RAISE ex_logging_err;
          END IF;
          RAISE ex_critical_err;

        END IF;

        IF rec3.deleted_flag NOT IN(1,2) THEN
          lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                         (p_app_short_name    => 'MSC',
                          p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                          p_message_text      => lv_message_text,
                          p_error_text        => lv_error_text,
                          p_token1            => 'COLUMN_NAME',
                          p_token_value1      => 'DELETED_FLAG',
                          p_token2            => 'DEFAULT_VALUE',
                          p_token_value2      => SYS_NO);

          lv_where_str := ' AND st_transaction_id = '||lv_transaction_id;

          --Logging a warning for those records where the deleted_flag value
          --is other than Yes/No.
          lv_return := MSC_ST_UTIL.LOG_ERROR
                       (p_table_name        => 'MSC_ST_SHIFT_TIMES',
                        p_instance_code     => v_instance_code,
                        p_row               => lv_column_names,
                        p_severity          => G_SEV_WARNING,
                        p_message_text      => lv_message_text,
                        p_error_text        => lv_error_text,
                        p_where_str         => lv_where_str,
                        p_col_name          => 'DELETED_FLAG',
                        p_debug             => v_debug,
                        p_default_value     => SYS_NO);

          IF lv_return <> 0 THEN
            RAISE ex_logging_err;
          END IF;
        END IF;

        BEGIN
          v_sql_stmt  := 17; /*Bug 2172537-Modified the satement*/
          lv_sql_stmt :=
          'SELECT 1'
          ||' FROM   DUAL'
          ||' WHERE  NOT EXISTS(SELECT 1'
          ||'        FROM  msc_st_shift_times'
          ||'        WHERE sr_instance_code  =  :sr_instance_code'
          ||'        AND   process_flag      =  '||G_IN_PROCESS
          ||'        AND   deleted_flag      =  '||SYS_NO
          ||'        AND   calendar_code     =  :calendar_code'
          ||'        AND   shift_name        =  :shift_name'
          ||'        AND   from_time         =  :from_time'
          ||'        AND   to_time           =  :to_time'
          ||'        AND   st_transaction_id <> :lv_transaction_id'
          ||'        UNION'
          ||'        SELECT 1'
          ||'        FROM   msc_st_shift_times'
          ||'        WHERE sr_instance_code  =  :sr_instance_code'
          ||'        AND   process_flag      =  '||G_IN_PROCESS
          ||'        AND   deleted_flag      =  '||SYS_NO
          ||'        AND   calendar_code     =  :calendar_code'
          ||'        AND   shift_name        =  :shift_name'
          ||'        AND   from_time         >  :from_time'
          ||'        AND   from_time         <  :to_time'
          ||'        AND   st_transaction_id <> :lv_transaction_id'
          ||'        UNION'
          ||'        SELECT 1'
          ||'        FROM   msc_st_shift_times'
          ||'        WHERE sr_instance_code  =  :sr_instance_code'
          ||'        AND   process_flag      =  '||G_IN_PROCESS
          ||'        AND   deleted_flag      =  '||SYS_NO
          ||'        AND   calendar_code     =  :calendar_code'
          ||'        AND   shift_name        =  :shift_name'
          ||'        AND   to_time            > :from_time'
          ||'        AND   to_time           <  :to_time'
          ||'        AND   st_transaction_id <> :lv_transaction_id)';

            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
          EXECUTE IMMEDIATE lv_sql_stmt
                  INTO      lv_rec_no
                  USING     v_instance_code,
                            rec1.calendar_code,
                            rec3.shift_name,
                            rec3.from_time,
                            rec3.to_time,
                            lv_transaction_id,
                            v_instance_code,
                            rec1.calendar_code,
                            rec3.shift_name,
                            rec3.from_time,
                            rec3.to_time,
                            lv_transaction_id,
                            v_instance_code,
                            rec1.calendar_code,
                            rec3.shift_name,
                            rec3.from_time,
                            rec3.to_time,
                            lv_transaction_id;

        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                         (p_app_short_name    => 'MSC',
                          p_error_code        => 'MSC_PP_SHIFT_TIME_OVERLAP',
                          p_message_text      => lv_message_text,
                          p_error_text        => lv_error_text);

            IF lv_return <> 0 THEN
              RAISE ex_logging_err;
            END IF;
            RAISE ex_critical_err;
        END;

        --Call to customised validation.
        MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
          (ERRBUF         => lv_error_text,
           RETCODE        => lv_return,
           pBatchID       => null,
           pInstanceCode  => v_instance_code,
           pEntityName    => 'MSC_ST_SHIFT_TIMES',
           pInstanceID    => v_instance_id);

        IF lv_return <> 0 THEN
          RAISE ex_logging_err;
        END IF;

      END LOOP;

      --validation for the table msc_st_Calendar_exceptions.
      --Added to fix the bug#2748859

      --Getting the error message text
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Duplicate records check for the records whose source is XML

      UPDATE  msc_st_calendar_exceptions mc1
      SET     process_flag = G_ERROR_FLG,
              error_text   = lv_message_text
      WHERE   message_id <  (SELECT MAX(message_id)
                             FROM   msc_st_calendar_exceptions mc2
                             WHERE  mc2.sr_instance_code  = mc1.sr_instance_code
                             AND    mc2.calendar_code     = mc1.calendar_code
                             AND    mc2.exception_date    = mc1.exception_date
                             AND    mc2.process_flag      = G_IN_PROCESS
                             AND    NVL(mc2.message_id,NULL_VALUE) <>NULL_VALUE)
      AND     mc1.calendar_code            = rec1.calendar_code
      AND     mc1.process_flag             = G_IN_PROCESS
      AND     mc1.sr_instance_code         = v_instance_code
      AND     NVL(mc1.message_id,NULL_VALUE) <> NULL_VALUE;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Duplicate records check for the records whose source is other than XML
      --Different SQL is used because in XML we can identify the latest records
      --whereas in batch load we cannot.

      UPDATE  msc_st_calendar_exceptions mc1
      SET     process_flag = G_ERROR_FLG,
              error_text   = lv_message_text
      WHERE   EXISTS( SELECT 1
                      FROM   msc_st_calendar_exceptions mc2
                      WHERE  mc2.sr_instance_code  = mc1.sr_instance_code
                      AND    mc2.calendar_code     = mc1.calendar_code
                      AND    mc2.exception_date    = mc1.exception_date
                      AND    mc2.process_flag      = G_IN_PROCESS
                      AND    NVL(mc2.message_id,NULL_VALUE) = NULL_VALUE
                      GROUP BY sr_instance_code,company_name,calendar_code,exception_date
                      HAVING COUNT(*) > 1)
      AND     mc1.calendar_code            = rec1.calendar_code
      AND     mc1.process_flag             = G_IN_PROCESS
      AND     mc1.sr_instance_code         = v_instance_code
      AND     NVL(mc1.message_id,NULL_VALUE) = NULL_VALUE;

      --Added to fix the bug#2748859

      FOR rec4 IN c4(rec1.calendar_code)
      LOOP
        lv_table_name    := 'MSC_ST_CALENDAR_EXCEPTIONS';
        lv_column_names :=
        'CALENDAR_CODE      ||''~''||'
        ||'EXCEPTION_DATE   ||''~''||'
        ||'EXCEPTION_TYPE   ||''~''||'
        ||'SR_INSTANCE_CODE ||''~''||'
        ||'COMPANY_NAME     ||''~''||'
        ||'EXCEPTION_SET_ID ||''~''||'
        ||'DELETED_FLAG';

        v_sql_stmt  := 18;
        SELECT msc_st_calendar_exceptions_s.NEXTVAL
        INTO   lv_transaction_id
        FROM   dual;

        v_sql_stmt  := 19;
        UPDATE  msc_st_calendar_exceptions
        SET     st_transaction_id = lv_transaction_id,
                refresh_id        = v_refresh_id,
                exception_set_id  = -1,
                last_update_date  = v_current_date,
                last_updated_by   = v_current_user,
                creation_date     = v_current_date,
                created_by        = v_current_user
        WHERE   rowid             = rec4.rowid;

        IF rec4.deleted_flag = SYS_YES THEN
          lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                         (p_app_short_name    => 'MSC',
                          p_error_code        => 'MSC_PP_NO_DELETION',
                          p_message_text      => lv_message_text,
                          p_error_text        => lv_error_text,
                          p_token1            => 'TABLE_NAME',
                          p_token_value1      => lv_table_name);

          IF lv_return <> 0 THEN
            RAISE ex_logging_err;
          END IF;
          RAISE ex_critical_err;

        ELSIF rec4.exception_date IS NULL THEN

          lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                         (p_app_short_name    => 'MSC',
                          p_error_code        => 'MSC_PP_COL_VAL_NULL',
                          p_message_text      => lv_message_text,
                          p_error_text        => lv_error_text,
                          p_token1            => 'COLUMN_NAME',
                          p_token_value1      => 'EXCEPTION_DATE ');

          IF lv_return <> 0 THEN
            RAISE ex_logging_err;
          END IF;
          RAISE ex_critical_err;

        ELSIF (rec4.exception_date < rec1.calendar_start_date OR
               rec4.exception_date > rec1.calendar_end_date) THEN
          lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                         (p_app_short_name    => 'MSC',
                          p_error_code        => 'MSC_PP_EXCEP_DATE_INVALID',
                          p_message_text      => lv_message_text,
                          p_error_text        => lv_error_text);

          IF lv_return <> 0 THEN
            RAISE ex_logging_err;
          END IF;
          RAISE ex_critical_err;

        ELSIF rec4.exception_type NOT IN(1,2) THEN
          lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                         (p_app_short_name    => 'MSC',
                          p_error_code        => 'MSC_PP_INVALID_VALUE',
                          p_message_text      => lv_message_text,
                          p_error_text        => lv_error_text,
                          p_token1            => 'COLUMN_NAME',
                          p_token_value1      => 'EXCEPTION_TYPE');

          IF lv_return <> 0 THEN
            RAISE ex_logging_err;
          END IF;
          RAISE ex_critical_err;
        END IF;

        IF v_instance_type = G_SCE then
          v_sql_stmt  := 20;
          lv_sql_stmt :=
          '   UPDATE  msc_st_calendar_exceptions mc'
          ||' SET     company_id = (SELECT party_id '
          ||'         FROM   hz_parties hp'
          ||'         WHERE  hp.party_name = mc.company_name)'
          ||' WHERE   st_transaction_id    = :lv_transaction_id';

            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
          EXECUTE IMMEDIATE lv_sql_stmt
                  USING     lv_transaction_id;

          IF SQL%NOTFOUND THEN
            lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                           (p_app_short_name    => 'MSC',
                            p_error_code        => 'MSC_PP_INVALID_VALUE',
                            p_message_text      => lv_message_text,
                            p_error_text        => lv_error_text,
                            p_token1            => 'COLUMN_NAME',
                            p_token_value1      => 'COMPANY_NAME');

            IF lv_return <> 0 THEN
              RAISE ex_logging_err;
            END IF;
            RAISE ex_critical_err;
          END IF;
        ELSE
          v_sql_stmt  := 21;
          lv_sql_stmt :=
          '   UPDATE msc_st_calendar_exceptions '
          ||' SET    company_id        = '||G_COMPANY_ID
          ||' WHERE  st_transaction_id = :lv_transaction_id';

            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
          EXECUTE IMMEDIATE lv_sql_stmt
                  USING     lv_transaction_id;

        END IF;

        IF rec4.deleted_flag NOT IN(1,2) THEN
          lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                         (p_app_short_name    => 'MSC',
                          p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                          p_message_text      => lv_message_text,
                          p_error_text        => lv_error_text,
                          p_token1            => 'COLUMN_NAME',
                          p_token_value1      => 'DELETED_FLAG',
                          p_token2            => 'DEFAULT_VALUE',
                          p_token_value2      => SYS_NO);

          lv_where_str := ' AND st_transaction_id = '||lv_transaction_id;

          --Logging a warning for those records where the deleted_flag value
          --is other than Yes/No.
          lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_CALENDAR_EXCEPTIONS',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'DELETED_FLAG',
                         p_debug             => v_debug,
                         p_default_value     => SYS_NO);

          IF lv_return <> 0 THEN
            RAISE ex_logging_err;
          END IF;
        END IF;

        --Call to customised validation.
        MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
          (ERRBUF         => lv_error_text,
           RETCODE        => lv_return,
           pBatchID       => null,
           pInstanceCode  => v_instance_code,
           pEntityName    => 'MSC_ST_CALENDAR_EXCEPTIONS',
           pInstanceID    => v_instance_id);

        IF lv_return <> 0 THEN
          RAISE ex_logging_err;
        END IF;

      END LOOP;

      --validation for the table msc_st_shift_exceptions.
      --Added to fix the bug#2748859

      --Getting the error message text
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Duplicate records check for the records whose source is XML

      UPDATE  msc_st_shift_exceptions mc1
      SET     process_flag = G_ERROR_FLG,
              error_text   = lv_message_text
      WHERE   message_id <  (SELECT MAX(message_id)
                           FROM   msc_st_shift_exceptions mc2
                           WHERE  mc2.sr_instance_code          = mc1.sr_instance_code
                           AND    mc2.calendar_code             = mc1.calendar_code
                           AND    mc2.exception_date            = mc1.exception_date
                           AND    nvl(mc2.shift_name,NULL_CHAR) = nvl(mc1.shift_name,NULL_CHAR)
                           AND    nvl(mc2.shift_num,NULL_VALUE) = nvl(mc1.shift_num,NULL_VALUE)
                           AND    mc2.process_flag              = G_IN_PROCESS
                           AND    NVL(mc2.message_id,NULL_VALUE) <>NULL_VALUE)
      AND     mc1.calendar_code            = rec1.calendar_code
      AND     mc1.process_flag             = G_IN_PROCESS
      AND     mc1.sr_instance_code         = v_instance_code
      AND     NVL(mc1.message_id,NULL_VALUE) <> NULL_VALUE;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Duplicate records check for the records whose source is other than XML
      --Different SQL is used because in XML we can identify the latest records
      --whereas in batch load we cannot.

      UPDATE  msc_st_shift_exceptions mc1
      SET     process_flag = G_ERROR_FLG,
              error_text   = lv_message_text
      WHERE   EXISTS( SELECT 1
                    FROM   msc_st_shift_exceptions mc2
                    WHERE  mc2.sr_instance_code           = mc1.sr_instance_code
                    AND    mc2.calendar_code              = mc1.calendar_code
                    AND    mc2.exception_date             = mc1.exception_date
                    AND    nvl(mc2.shift_name,NULL_CHAR)  = nvl(mc1.shift_name,NULL_CHAR)
                    AND    nvl(mc2.shift_num,NULL_VALUE)  = nvl(mc1.shift_num,NULL_VALUE)
                    AND    mc2.process_flag               = G_IN_PROCESS
                    AND    NVL(mc2.message_id,NULL_VALUE) = NULL_VALUE
                    GROUP BY sr_instance_code,company_name,calendar_code,exception_date
                    HAVING COUNT(*) > 1)
      AND     mc1.calendar_code            = rec1.calendar_code
      AND     mc1.process_flag             = G_IN_PROCESS
      AND     mc1.sr_instance_code         = v_instance_code
      AND     NVL(mc1.message_id,NULL_VALUE) = NULL_VALUE;
      --Added to fix the bug#2748859

      FOR rec5 IN c5(rec1.calendar_code)
      LOOP
        lv_table_name    := 'MSC_ST_SHIFT_EXCEPTIONS';
        lv_column_names :=
        'CALENDAR_CODE     ||''~''||'
        ||'EXCEPTION_DATE  ||''~''||'
        ||'EXCEPTION_TYPE  ||''~''||'
        ||'SR_INSTANCE_CODE||''~''||'
        ||'SHIFT_NUM       ||''~''||'
        ||'SHIFT_NAME      ||''~''||'
        ||'COMPANY_NAME    ||''~''||'
        ||'EXCEPTION_SET_ID||''~''||'
        ||'DELETED_FLAG';

        v_sql_stmt  := 22;
        SELECT msc_st_shift_exceptions_s.NEXTVAL
        INTO   lv_transaction_id
        FROM   dual;

        v_sql_stmt  := 23;
        UPDATE  msc_st_shift_exceptions
        SET     st_transaction_id = lv_transaction_id,
                refresh_id        = v_refresh_id,
                exception_set_id  = -1,
                last_update_date  = v_current_date,
                last_updated_by   = v_current_user,
                creation_date     = v_current_date,
                created_by        = v_current_user
        WHERE   rowid             = rec5.rowid;

        IF rec5.deleted_flag = SYS_YES THEN
          lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                         (p_app_short_name    => 'MSC',
                          p_error_code        => 'MSC_PP_NO_DELETION',
                          p_message_text      => lv_message_text,
                          p_error_text        => lv_error_text,
                          p_token1            => 'TABLE_NAME',
                          p_token_value1      => 'MSC_ST_SHIFT_EXCEPTIONS');

          IF lv_return <> 0 THEN
            RAISE ex_logging_err;
          END IF;
          RAISE ex_critical_err;

        ELSIF rec5.exception_date IS NULL THEN
          lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                         (p_app_short_name    => 'MSC',
                          p_error_code        => 'MSC_PP_COL_VAL_NULL',
                          p_message_text      => lv_message_text,
                          p_error_text        => lv_error_text,
                          p_token1            => 'COLUMN_NAME',
                          p_token_value1      => 'EXCEPTION_DATE ');

          IF lv_return <> 0 THEN
            RAISE ex_logging_err;
          END IF;
          RAISE ex_critical_err;

        ELSIF (rec5.exception_date < rec1.calendar_start_date OR
               rec5.exception_date > rec1.calendar_end_date) THEN
          lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                        (p_app_short_name    => 'MSC',
                         p_error_code        => 'MSC_PP_EXCEP_DATE_INVALID',
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text);

          IF lv_return <> 0 THEN
            RAISE ex_logging_err;
          END IF;
          RAISE ex_critical_err;

        ELSIF rec5.exception_type NOT IN(1,2) THEN
          lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                         (p_app_short_name    => 'MSC',
                          p_error_code        => 'MSC_PP_INVALID_VALUE',
                          p_message_text      => lv_message_text,
                          p_error_text        => lv_error_text,
                          p_token1            => 'COLUMN_NAME',
                          p_token_value1      => 'EXCEPTION_TYPE');

          IF lv_return <> 0 THEN
            RAISE ex_logging_err;
          END IF;
          RAISE ex_critical_err;

        ELSIF rec5.shift_name IS NULL THEN
          lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                         (p_app_short_name    => 'MSC',
                          p_error_code        => 'MSC_PP_COL_VAL_NULL',
                          p_message_text      => lv_message_text,
                          p_error_text        => lv_error_text,
                          p_token1            => 'COLUMN_NAME',
                          p_token_value1      => 'SHIFT_NAME');

           IF lv_return <> 0 THEN
             RAISE ex_logging_err;
           END IF;
           RAISE ex_critical_err;

        END IF;

        IF v_instance_type = G_SCE then
          v_sql_stmt  := 24;
          lv_sql_stmt :=
          '   UPDATE  msc_st_shift_exceptions mc'
          ||' SET     company_id = (SELECT party_id '
          ||'         FROM   hz_parties hp'
          ||'         WHERE  hp.party_name = mc.company_name)'
          ||' WHERE st_transaction_id = :lv_transaction_id ';

            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
          EXECUTE IMMEDIATE lv_sql_stmt
                  USING     lv_transaction_id;

          IF SQL%NOTFOUND THEN
            lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                           (p_app_short_name    => 'MSC',
                            p_error_code        => 'MSC_PP_INVALID_VALUE',
                            p_message_text      => lv_message_text,
                            p_error_text        => lv_error_text,
                            p_token1            => 'COLUMN_NAME',
                            p_token_value1      => 'COMPANY_NAME');

            IF lv_return <> 0 THEN
              RAISE ex_logging_err;
            END IF;
            RAISE ex_critical_err;
          END IF;
        ELSE
          v_sql_stmt  := 25;
          lv_sql_stmt :=
          '   UPDATE msc_st_shift_exceptions'
          ||' SET    company_id = '||G_COMPANY_ID
          ||' WHERE  st_transaction_id  = :lv_transaction_id ';

            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
          EXECUTE IMMEDIATE lv_sql_stmt
                  USING     lv_transaction_id;

        END IF;

        IF rec5.deleted_flag NOT IN(1,2) THEN
          lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                         (p_app_short_name    => 'MSC',
                          p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                          p_message_text      => lv_message_text,
                          p_error_text        => lv_error_text,
                          p_token1            => 'COLUMN_NAME',
                          p_token_value1      => 'DELETED_FLAG',
                          p_token2            => 'DEFAULT_VALUE',
                          p_token_value2      => SYS_NO);

          lv_where_str := ' AND st_transaction_id = '||lv_transaction_id;

          --Logging a warning for those records where the deleted_flag value
          --is other than Yes/No.
          lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_SHIFT_EXCEPTIONS',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'DELETED_FLAG',
                         p_debug             => v_debug,
                         p_default_value     => SYS_NO);

          IF lv_return <> 0 THEN
            RAISE ex_logging_err;
          END IF;
        END IF;

        --Call to customised validation.
        MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
          (ERRBUF         => lv_error_text,
           RETCODE        => lv_return,
           pBatchID       => null,
           pInstanceCode  => v_instance_code,
           pEntityName    => 'MSC_ST_SHIFT_EXCEPTIONS',
           pInstanceID    => v_instance_id);

        IF lv_return <> 0 THEN
          RAISE ex_logging_err;
        END IF;

      END LOOP;

      lv_where_str :=
      ' AND   calendar_code      = '||''''||rec1.calendar_code||'''';
      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                     (p_table_name     => 'MSC_ST_CALENDARS',
                      p_instance_id    => v_instance_id,
                      p_instance_code  => v_instance_code,
                      p_process_flag   => G_VALID,
                      p_where_str      => lv_where_str,
                      p_debug          => v_debug,
                      p_error_text     => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                     (p_table_name     => 'MSC_ST_WORKDAY_PATTERNS',
                      p_instance_id    => v_instance_id,
                      p_instance_code  => v_instance_code,
                      p_process_flag   => G_VALID,
                      p_where_str      => lv_where_str,
                      p_debug          => v_debug,
                      p_error_text     => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                   (p_table_name     => 'MSC_ST_CALENDAR_SHIFTS',
                    p_instance_id    => v_instance_id,
                    p_instance_code  => v_instance_code,
                    p_process_flag   => G_VALID,
                    p_where_str      => lv_where_str,
                    p_debug          => v_debug,
                    p_error_text     => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                   (p_table_name     => 'MSC_ST_SHIFT_TIMES',
                    p_instance_id    => v_instance_id,
                    p_instance_code  => v_instance_code,
                    p_process_flag   => G_VALID,
                    p_where_str      => lv_where_str,
                    p_debug          => v_debug,
                    p_error_text     => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                     (p_table_name     => 'MSC_ST_CALENDAR_EXCEPTIONS',
                      p_instance_id    => v_instance_id,
                      p_instance_code  => v_instance_code,
                      p_process_flag   => G_VALID,
                      p_where_str      => lv_where_str,
                      p_debug          => v_debug,
                      p_error_text     => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                     (p_table_name     => 'MSC_ST_SHIFT_EXCEPTIONS',
                      p_instance_id    => v_instance_id,
                      p_instance_code  => v_instance_code,
                      p_process_flag   => G_VALID,
                      p_where_str      => lv_where_str,
                      p_debug          => v_debug,
                      p_error_text     => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      IF rec1.overwrite_flag = 'Y' THEN
        v_sql_stmt  := 26;  /*Bug 2172537*/
        lv_sql_stmt :=
        'UPDATE    msc_calendars '
        ||' SET    calendar_start_date     = :calendar_start_date,'
        ||'        calendar_end_date       = :calendar_end_date,'
        ||'        quarterly_calendar_type = :quarterly_calendar_type,'
        ||'        week_start_day          = :week_start_day,'
        ||'        creation_date           = :v_current_date,'
        ||'        created_by              = :v_current_user,'
        ||'        last_update_date        = :v_current_date,'
        ||'        last_updated_by         = :v_current_user'
        ||' WHERE  calendar_code           = :calendar_code'
        ||' AND    sr_instance_id          = :instance_id';

          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
        EXECUTE IMMEDIATE lv_sql_stmt
                USING     rec1.calendar_start_date,
                          rec1.calendar_end_date,
                          rec1.quarterly_calendar_type,
                          rec1.week_start_day,
                          v_current_date,
                          v_current_user,
                          v_current_date,
                          v_current_user,
                          rec1.calendar_code,
                          v_instance_id;

      ELSE
        v_sql_stmt  := 27;
        lv_sql_stmt :=
        'DELETE FROM msc_calendars '
        ||' WHERE calendar_code    = :calendar_code';

          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
        EXECUTE IMMEDIATE lv_sql_stmt
                USING     rec1.calendar_code;

        v_sql_stmt  := 28;   /*Bug 2172537*/
        lv_sql_stmt :=
        'INSERT INTO msc_calendars '
        ||' (calendar_code,'
        ||'  description,'
        ||'  days_on,'
        ||'  days_off,'
        ||'  calendar_start_date,'
        ||'  calendar_end_date,'
        ||'  quarterly_calendar_type,'
        ||'  sr_instance_id,'
        ||'  last_update_date,'
        ||'  last_updated_by,'
        ||'  creation_date,'
        ||'  created_by,'
        ||'  last_update_login,'
        ||'  request_id,'
        ||'  program_application_id,'
        ||'  program_id,'
        ||'  program_update_date,'
        ||'  refresh_id,'
        ||'  overwrite_flag,'
        ||'  week_start_day)'
        ||'  SELECT '
        ||'  calendar_code,'
        ||'  description,'
        ||'  days_on,'
        ||'  days_off,'
        ||'  calendar_start_date,'
        ||'  calendar_end_date,'
        ||'  quarterly_calendar_type,'
        ||'  sr_instance_id,'
        ||'  last_update_date,'
        ||'  last_updated_by,'
        ||'  creation_date,'
        ||'  created_by,'
        ||'  last_update_login,'
        ||'  request_id,'
        ||'  program_application_id,'
        ||'  program_id,'
        ||'  program_update_date,'
        ||'  refresh_id,'
        ||'  overwrite_flag,'
        ||'  week_start_day'
        ||' FROM  msc_st_calendars'
        ||' WHERE calendar_code    = :calendar_code'
        ||' AND   sr_instance_code = :sr_instance_code'
        ||' AND   process_flag      = '||G_VALID;


          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
        EXECUTE IMMEDIATE lv_sql_stmt
                USING     rec1.calendar_code,
                          v_instance_code;
      END IF;

      v_sql_stmt  := 29; /*Bug 2172537*/
      lv_sql_stmt :=
      'DELETE FROM msc_workday_patterns '
      ||' WHERE calendar_code    = :calendar_code';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     rec1.calendar_code;

      v_sql_stmt  := 30; /*Bug 2172537*/
      lv_sql_stmt :=
      'INSERT INTO msc_workday_patterns '
      ||' (calendar_code,'
      ||'  description,'
      ||'  sr_instance_id,'
      ||'  shift_num,'
      ||'  seq_num,'
      ||'  last_update_date,'
      ||'  last_updated_by,'
      ||'  creation_date,'
      ||'  created_by,'
      ||'  last_update_login,'
      ||'  days_on,'
      ||'  days_off,'
      ||'  request_id,'
      ||'  program_application_id,'
      ||'  program_id,'
      ||'  program_update_date,'
      ||'  refresh_id)'
      ||' SELECT '
      ||' calendar_code,'
      ||'  description,'
      ||'  sr_instance_id,'
      ||'  shift_num,'
      ||'  seq_num,'
      ||'  last_update_date,'
      ||'  last_updated_by,'
      ||'  creation_date,'
      ||'  created_by,'
      ||'  last_update_login,'
      ||'  days_on,'
      ||'  days_off,'
      ||'  request_id,'
      ||'  program_application_id,'
      ||'  program_id,'
      ||'  program_update_date,'
      ||'  refresh_id'
      ||' FROM  msc_st_workday_patterns'
      ||' WHERE calendar_code    = :calendar_code'
      ||' AND   sr_instance_code = :sr_instance_code'
      ||' AND   process_flag      = '||G_VALID;

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     rec1.calendar_code,
                        v_instance_code;

      v_sql_stmt  := 31; /*Bug 2172537*/
      lv_sql_stmt :=
      'DELETE FROM msc_calendar_exceptions '
      ||' WHERE calendar_code    = :calendar_code';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     rec1.calendar_code;


      v_sql_stmt  := 32; /*Bug 2172537*/
      lv_sql_stmt :=
      'INSERT INTO msc_calendar_exceptions'
      ||' (calendar_code,'
      ||'  exception_date,'
      ||'  exception_type,'
      ||'  sr_instance_id,'
      ||'  last_update_date,'
      ||'  last_updated_by,'
      ||'  creation_date,'
      ||'  created_by,'
      ||'  last_update_login,'
      ||'  request_id,'
      ||'  program_application_id,'
      ||'  program_id,'
      ||'  program_update_date,'
      ||'  refresh_id,'
      ||'  exception_set_id)'
      ||' SELECT '
      ||'  calendar_code,'
      ||'  exception_date,'
      ||'  exception_type,'
      ||'  sr_instance_id,'
      ||'  last_update_date,'
      ||'  last_updated_by,'
      ||'  creation_date,'
      ||'  created_by,'
      ||'  last_update_login,'
      ||'  request_id,'
      ||'  program_application_id,'
      ||'  program_id,'
      ||'  program_update_date,'
      ||'  refresh_id,'
      ||'  exception_set_id'
      ||' FROM  msc_st_calendar_exceptions'
      ||' WHERE calendar_code    = :calendar_code'
      ||' AND   sr_instance_code = :sr_instance_code'
      ||' AND   process_flag      = '||G_VALID ;

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     rec1.calendar_code,
                        v_instance_code;

      v_sql_stmt  := 33;  /*Bug 2172537*/
      lv_sql_stmt :=
      'DELETE FROM msc_calendar_shifts '
      ||' WHERE calendar_code  = :calendar_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     rec1.calendar_code;

      v_sql_stmt  := 34;  /*Bug 2172537*/
      lv_sql_stmt :=
      'INSERT INTO msc_calendar_shifts '
      ||' (calendar_code,'
      ||'  sr_instance_id,'
      ||'  shift_name,'
      ||'  shift_num,'
      ||'  days_on,'
      ||'  days_off,'
      ||'  description,'
      ||'  refresh_number,'
      ||'  last_update_date,'
      ||'  last_updated_by,'
      ||'  last_update_login,'
      ||'  creation_date,'
      ||'  created_by,'
      ||'  request_id,'
      ||'  program_application_id,'
      ||'  program_id,'
      ||'  program_update_date)'
      ||' SELECT '
      ||'  calendar_code,'
      ||'  sr_instance_id,'
      ||'  shift_name,'
      ||'  shift_num, '
      ||'  days_on,'
      ||'  days_off,'
      ||'  description,'
      ||'  refresh_id,'
      ||'  last_update_date,'
      ||'  last_updated_by,'
      ||'  last_update_login,'
      ||'  creation_date,'
      ||'  created_by,'
      ||'  request_id,'
      ||'  program_application_id,'
      ||'  program_id,'
      ||'  program_update_date'
      ||' FROM  msc_st_calendar_shifts '
      ||' WHERE calendar_code    = :calendar_code'
      ||' AND   sr_instance_code = :sr_instance_code'
      ||' AND   process_flag      = '||G_VALID;

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     rec1.calendar_code,
                        v_instance_code;

      v_sql_stmt  := 35;/*Bug 2172537*/
      lv_sql_stmt :=
      'DELETE FROM msc_shift_times '
      ||' WHERE calendar_code    = :calendar_code';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     rec1.calendar_code;


      v_sql_stmt  := 36; /*Bug 2172537*/
      lv_sql_stmt :=
      'INSERT INTO msc_shift_times '
      ||' (calendar_code,'
      ||'  sr_instance_id,'
      ||'  shift_num,'
      ||'  from_time,'
      ||'  to_time,'
      ||'  refresh_number,'
      ||'  last_update_date,'
      ||'  last_updated_by,'
      ||'  last_update_login,'
      ||'  creation_date,'
      ||'  created_by,'
      ||'  request_id,'
      ||'  program_application_id,'
      ||'  program_id,'
      ||'  program_update_date)'
      ||' SELECT '
      ||'  calendar_code,'
      ||'  sr_instance_id,'
      ||'  shift_num,'
      ||'  from_time,'
      ||'  to_time,'
      ||'  refresh_id,'
      ||'  last_update_date,'
      ||'  last_updated_by,'
      ||'  last_update_login,'
      ||'  creation_date,'
      ||'  created_by,'
      ||'  request_id,'
      ||'  program_application_id,'
      ||'  program_id,'
      ||'  program_update_date'
      ||' FROM  msc_st_shift_times '
      ||' WHERE calendar_code    = :calendar_code'
      ||' AND   sr_instance_code = :sr_instance_code'
      ||' AND   process_flag      = '||G_VALID;

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     rec1.calendar_code,
                        v_instance_code;

      v_sql_stmt  := 37;/*Bug 2172537*/
      lv_sql_stmt :=
      'DELETE FROM msc_shift_exceptions '
      ||' WHERE calendar_code  = :calendar_code';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     rec1.calendar_code;


      v_sql_stmt  := 38; /*Bug 2172537*/
      lv_sql_stmt :=
      'INSERT INTO msc_shift_exceptions'
      ||' (calendar_code,'
      ||'  shift_num,'
      ||'  exception_date,'
      ||'  exception_type,'
      ||'  sr_instance_id,'
      ||'  last_update_date,'
      ||'  last_updated_by,'
      ||'  creation_date,'
      ||'  created_by,'
      ||'  last_update_login,'
      ||'  request_id,'
      ||'  program_application_id,'
      ||'  program_id,'
      ||'  program_update_date,'
      ||'  refresh_number,'
      ||'  exception_set_id)'
      ||' SELECT '
      ||'  calendar_code,'
      ||'  shift_num,'
      ||'  exception_date,'
      ||'  exception_type,'
      ||'  sr_instance_id,'
      ||'  last_update_date,'
      ||'  last_updated_by,'
      ||'  creation_date,'
      ||'  created_by,'
      ||'  last_update_login,'
      ||'  request_id,'
      ||'  program_application_id,'
      ||'  program_id,'
      ||'  program_update_date,'
      ||'  refresh_id,'
      ||'  exception_set_id'
      ||' FROM  msc_st_shift_exceptions'
      ||' WHERE calendar_code    = :calendar_code'
      ||' AND   sr_instance_code = :sr_instance_code'
      ||' AND   process_flag      = '||G_VALID;

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     rec1.calendar_code,
                        v_instance_code;

  -- Delete those tables that is collected by collections
      v_sql_stmt  := 39;

     lv_sql_stmt :=
      ' DELETE FROM msc_st_calendar_shifts '
      ||' WHERE calendar_code    = :calendar_code'
      ||' AND   sr_instance_code = :sr_instance_code'
      ||' AND   process_flag      = '||G_VALID;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     rec1.calendar_code,
                        v_instance_code;

      v_sql_stmt  := 40;

     lv_sql_stmt :=
      ' DELETE FROM msc_st_shift_times '
      ||' WHERE calendar_code    = :calendar_code'
      ||' AND   sr_instance_code = :sr_instance_code'
      ||' AND   process_flag      = '||G_VALID;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     rec1.calendar_code,
                        v_instance_code;

      v_sql_stmt  := 41;

     lv_sql_stmt :=
      ' DELETE FROM msc_st_shift_exceptions '
      ||' WHERE calendar_code    = :calendar_code'
      ||' AND   sr_instance_code = :sr_instance_code'
      ||' AND   process_flag      = '||G_VALID;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     rec1.calendar_code,
                        v_instance_code;



      COMMIT;
      lv_request_id := fnd_request.submit_request('MSC','MSCPCL',
                       '','',TRUE,
                       rec1.calendar_code,
                       v_instance_id);
      v_cal_build := true;
      IF lv_request_id <> 0 THEN
        fnd_conc_global.set_req_globals(conc_status => 'PAUSED',
                                     request_data => to_char(G_CAL_REQ_DATA)) ;
        FND_MESSAGE.SET_NAME('MSC', 'MSC_PP_WORKER_REQUEST_ID');
        FND_MESSAGE.SET_TOKEN('REQUEST_ID', lv_request_id);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
      END IF;

     EXCEPTION
       WHEN too_many_rows THEN
        lv_error_text  := substr('MSC_CL_PRE_PROCESS.LOAD_CALENDAR'||'('
                        ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
        ROLLBACK;

      WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
        ROLLBACK;

      WHEN ex_critical_err THEN
        lv_return := PROPAGATE_CAL_ERROR
                     (p_table_name      => lv_table_name,
                      p_transaction_id  => lv_transaction_id,
                      p_calendar_code   => lv_calendar_code,
                      p_message_text    => lv_message_text,
                      p_column_names    => lv_column_names,
                      p_error_text      => lv_error_text);

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
        IF lv_return <> 0 THEN
          ROLLBACK;
        ELSE
          COMMIT;
       END IF;

      WHEN OTHERS THEN
        lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_CALENDAR'||'('
                         ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);

        ROLLBACK;
     END;

    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_CALENDAR'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);

      ROLLBACK;

  END LOAD_CALENDAR;
/*==========================================================================+
| DESCRIPTION  : This function performs the validation and loads the data   |
|                for business object demand class                           |
+==========================================================================*/
  PROCEDURE  LOAD_DEMAND_CLASS  IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid          RowidTab; --bulk collects rowid
  lv_return         NUMBER;
  lv_batch_id       NUMBER;
  lv_error_text     VARCHAR2(250);
  lv_where_str      VARCHAR2(5000);
  lv_sql_stmt       VARCHAR2(5000);
  lv_column_names   VARCHAR2(5000);     --stores concatenated column names
  lv_message_text   msc_errors.error_text%TYPE;

  ex_logging_err        EXCEPTION;

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_demand_classes
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code          = v_instance_code
    AND    batch_id                  = p_batch_id;

  BEGIN

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Validation check for the table MSC_ST_DEMAND_CLASSES

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE    msc_st_demand_classes msd1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 FROM msc_st_demand_classes msd2 '
    ||'        WHERE msd2.sr_instance_code  = msd1.sr_instance_code'
    ||'        AND   msd2.demand_class      = msd1.demand_class'
    ||'        AND   NVL(msd2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msd1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   msd2.process_flag      = msd1.process_flag'
    ||'        AND   NVL(msd2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'        GROUP BY sr_instance_code,demand_class,company_name '
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    msd1.process_flag              = '||G_IN_PROCESS
    ||' AND    msd1.sr_instance_code          = :v_instance_code'
    ||' AND    NVL(msd1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE   msc_st_demand_classes msd1 '
    ||' SET   process_flag = '||G_ERROR_FLG||','
    ||'       error_text   = '||''''||lv_message_text||''''
    ||' WHERE message_id   < ( SELECT max(message_id) '
    ||'       FROM  msc_st_demand_classes msd2'
    ||'       WHERE msd2.sr_instance_code  = msd1.sr_instance_code'
    ||'        AND   msd2.demand_class      = msd1.demand_class'
    ||'       AND   NVL(msd2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'             NVL(msd1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'       AND   msd2.process_flag      = msd1.process_flag'
    ||'       AND   NVL(msd2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND   msd1.process_flag            = '||G_IN_PROCESS
    ||' AND   msd1.sr_instance_code        = :v_instance_code '
    ||' AND   NVL(msd1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    lv_column_names :=
    '   DEMAND_CLASS      ||''~''||'
    ||' MEANING           ||''~''||'
    ||' DESCRIPTION       ||''~''||'
    ||' FROM_DATE         ||''~''||'
    ||' TO_DATE           ||''~''||'
    ||' ENABLED_FLAG      ||''~''||'
    ||' SR_INSTANCE_CODE  ||''~''||'
    ||' COMPANY_NAME      ||''~''||'
    ||' DELETED_FLAG ';


    -- Dividing records in batches based on batchsize
    LOOP
      v_sql_stmt := 03;
      SELECT       msc_st_batch_id_s.NEXTVAL
      INTO         lv_batch_id
      FROM         DUAL;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      'UPDATE   msc_st_demand_classes '
      ||' SET   batch_id                       = :lv_batch_id '
      ||' WHERE process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND   sr_instance_code               = :v_instance_code'
      ||' AND   NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND ;

      OPEN  c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_demand_classes
      SET  st_transaction_id = msc_st_demand_classes_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_DEMAND_CLASSES');

      -- Deletion is not allowed for this table
      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE      msc_st_demand_classes '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         = :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DEMAND_CLASS OR MEANING');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where demand_class or meaning  is NULL

      v_sql_stmt := 07;
      lv_sql_stmt :=
      'UPDATE    msc_st_demand_classes'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text      = '||''''||lv_message_text||''''
      ||' WHERE  (NVL(demand_class, '||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''
      ||' OR    NVL(meaning, '||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''||') '
      ||' AND    batch_id                = :lv_batch_id'
      ||' AND    process_flag            = '||G_IN_PROCESS
      ||' AND    sr_instance_code        = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_UPDATION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_DEMAND_CLASSES');


    -- Error out the record if same demand class already exists in ODS
    -- As we do not allow demand_class incremental update
    -- It has to be purged before laoded again

     -- bug# 3807591
      /* v_sql_stmt := 08;
      lv_sql_stmt :=
      'UPDATE      msc_st_demand_classes mstd'
      ||' SET      mstd.process_flag     = '||G_ERROR_FLG||','
      ||'          mstd.error_text       = '||''''||lv_message_text||''''
      ||' WHERE    mstd.batch_id         = :lv_batch_id'
      ||' AND      mstd.sr_instance_code = :v_instance_code'
      ||' AND      EXISTS ( SELECT 1'
      ||'          FROM     msc_demand_classes msd'
      ||'          WHERE    mstd.demand_class = msd.demand_class'
      ||'          AND      msd.sr_instance_id = :v_instance_id)';
      IF V_DEBUG THEN
        msc_st_util.log_message(lv_sql_stmt);
      END IF;

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code,
                        v_instance_id; */


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check DELETE_FLAG column has valid value or not and if not set it to SYS_NO
      -- Log error procedure inserts warning and also defaults the delete flag

      lv_where_str := ' AND NVL(deleted_flag,'||NULL_VALUE||') '
                      ||' NOT IN(1,2)';

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_DEMAND_CLASSES',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'DELETED_FLAG',
                         p_debug             => v_debug,
                         p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ENABLED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check ENABLED_FLAG column has valid value or not and if not set it to SYS_NO
      -- Log error procedure inserts warning and also defaults the delete flag

      lv_where_str := ' AND NVL(enabled_flag,'||NULL_VALUE||') '
                      ||' NOT IN(1,2)';

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_DEMAND_CLASSES',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'ENABLED_FLAG',
                         p_debug             => v_debug,
                         p_default_value     => SYS_YES);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

        lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                       (p_app_short_name    => 'MSC',
                        p_error_code        => 'MSC_PP_INVALID_VALUE',
                        p_message_text      => lv_message_text,
                        p_error_text        => lv_error_text,
                        p_token1            => 'COLUMN_NAME',
                        p_token_value1      => 'FROM_DATE OR'
                                               ||' TO_DATE');

        IF lv_return <> 0 THEN
          RAISE ex_logging_err;
        END IF;


     -- Validate that from_date is greater than to_date

      v_sql_stmt := 08;

      lv_sql_stmt :=
      'UPDATE    msc_st_demand_classes'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text      = '||''''||lv_message_text||''''
      ||' WHERE  NVL(from_date,SYSDATE-365000 ) '
      ||'  >    NVL(to_date, SYSDATE+365000) '
      ||' AND    batch_id                = :lv_batch_id'
      ||' AND    process_flag            = '||G_IN_PROCESS
      ||' AND    sr_instance_code        = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_TRADING_PARTNERS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      -- Set the process flag as Valid and populate instance_id
      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                        (p_table_name   => 'MSC_ST_DEMAND_CLASSES',
                         p_instance_id    => v_instance_id,
                         p_instance_code  => v_instance_code,
                         p_process_flag   => G_VALID,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug,
                         p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- At the end calling  the LOG_ERROR for logging all
      -- errored out records.

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name    => 'MSC_ST_DEMAND_CLASSES',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug,
                         p_batch_id      => lv_batch_id  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     v_sql_stmt := 09;

     -- bug# 3807591 (code is moved to MSCCLBAB.pls)
    /* lv_sql_stmt :=
       ' INSERT INTO MSC_DEMAND_CLASSES '
       ||' ( DEMAND_CLASS, '
       ||' MEANING, '
       ||' DESCRIPTION, '
       ||' FROM_DATE, '
       ||' TO_DATE, '
       ||' ENABLED_FLAG, '
       ||' SR_INSTANCE_ID, '
       ||' LAST_UPDATE_DATE, '
       ||' LAST_UPDATED_BY, '
       ||' CREATION_DATE, '
       ||' CREATED_BY) '
       ||' SELECT distinct '
       ||' mstd.demand_class,'
       ||' mstd.meaning,'
       ||' mstd.description,'
       ||' mstd.from_date,'
       ||' mstd.to_date,'
       ||' mstd.enabled_flag,'
       ||  v_instance_id ||','
       ||' mstd.last_update_date,'
       ||' mstd.last_updated_by,'
       ||' mstd.creation_date,'
       ||' mstd.created_by '
       ||' FROM   MSC_ST_DEMAND_CLASSES mstd'
       ||' WHERE  mstd.batch_id         = :lv_batch_id'
       ||' AND    mstd.sr_instance_code = :v_instance_code'
       ||' AND    mstd.process_flag    = '||G_VALID ;

      IF V_DEBUG THEN
        msc_st_util.log_message(lv_sql_stmt);
      END IF;

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code; */

     COMMIT;

      -- ODP change
      -- Call the procedure to insert categories into msd_st_level_values
      IF(v_install_msd) THEN

        lv_sql_stmt := ' DECLARE errbuf varchar2(250);'
                 ||' retcode  number ;'
                 || ' BEGIN '
                 ||'  MSD_CL_PRE_PROCESS.LOAD_DEMAND_CLASS'
                 ||'  (ERRBUF         =>  errbuf ,'
                 ||'  RETCODE        =>  retcode ,'
                 ||'  p_instance_code => :v_instance_code, '
                 ||'  p_instance_id => :v_instance_id,'
                 ||'  p_batch_id    => :lv_batch_id);'
                 ||'  IF ( retcode = '||G_WARNING||') THEN'
                 ||'  MSC_CL_PRE_PROCESS.v_flag := '||SYS_YES||';'
                 ||'  END IF;'
                 ||'  END ;';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


        EXECUTE IMMEDIATE lv_sql_stmt
                USING     v_instance_code,
                          v_instance_id,
                          lv_batch_id;

      END IF ;

     COMMIT;

    END LOOP;

  EXCEPTION

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);

      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_DEMAND_CLASS '||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);

      ROLLBACK;

  END LOAD_DEMAND_CLASS ;


/*==========================================================================+
| DESCRIPTION  : This function performs the validation and loads the data   |
|                for business object trading partners                       |
+==========================================================================*/
  PROCEDURE  LOAD_TRADING_PARTNERS  IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid          RowidTab; --bulk collects rowid
  lv_return         NUMBER;
  lv_batch_id       NUMBER;
  lv_error_text     VARCHAR2(250);
  lv_where_str      VARCHAR2(5000);
  lv_sql_stmt       VARCHAR2(5000);
  lv_column_names   VARCHAR2(5000);     --stores concatenated column names
  lv_message_text   msc_errors.error_text%TYPE;
  lv_my_company     msc_companies.company_name%TYPE;
  lv_user_id        NUMBER;

  TYPE CharTblTyp IS TABLE OF VARCHAR2(240);
  TYPE NumTblTyp  IS TABLE OF NUMBER;
  TYPE DateTblTyp IS TABLE OF DATE;
  lb_GROUP_ID           NumTblTyp;
  lb_GROUP_NAME         CharTblTyp;
  lb_DESCRIPTION        CharTblTyp;
  lb_GROUP_TYPE         NumTblTyp;
  lb_GROUP_OWNER_ID     NumTblTyp;
  lb_CONTACT_USER_NAME  CharTblTyp;
  lb_CONTACT_USER_ID    NumTblTyp;
  lb_CONTRACT_DOC_URL   CharTblTyp;
  lb_EFFECTIVE_DATE     DateTblTyp;
  lb_DISABLE_DATE       DateTblTyp;
  lb_CONTEXT            CharTblTyp;
  lb_ATTRIBUTE1         CharTblTyp;
  lb_ATTRIBUTE2         CharTblTyp;
  lb_ATTRIBUTE3         CharTblTyp;
  lb_ATTRIBUTE4         CharTblTyp;
  lb_ATTRIBUTE5         CharTblTyp;
  lb_ATTRIBUTE6         CharTblTyp;
  lb_ATTRIBUTE7         CharTblTyp;
  lb_ATTRIBUTE8         CharTblTyp;
  lb_ATTRIBUTE9         CharTblTyp;
  lb_ATTRIBUTE10        CharTblTyp;
  lb_ATTRIBUTE11        CharTblTyp;
  lb_ATTRIBUTE12        CharTblTyp;
  lb_ATTRIBUTE13        CharTblTyp;
  lb_ATTRIBUTE14        CharTblTyp;
  lb_ATTRIBUTE15        CharTblTyp;
  lb_OWNER_CONTACT      CharTblTyp;
  lb_LAST_UPDATE_DATE   DateTblTyp;
  lb_LAST_UPDATED_BY    CharTblTyp;
  lb_LAST_UPDATE_LOGIN  CharTblTyp;
  lb_COMPANY_ID		NumTblTyp;


  ex_logging_err        EXCEPTION;

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_trading_partners
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code          = v_instance_code
    AND    batch_id                  = p_batch_id;

  CURSOR c2(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_trading_partners
    WHERE  process_flag             = G_IN_PROCESS
    AND    sr_instance_code         = v_instance_code
    AND    batch_id                 = p_batch_id
    AND    NVL(sr_tp_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag             = SYS_NO;

  CURSOR c3(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_trading_partner_sites
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code         = v_instance_code
    AND    batch_id                 = p_batch_id;

  CURSOR c4(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_trading_partner_sites
    WHERE  process_flag                  = G_IN_PROCESS
    AND    sr_instance_code              = v_instance_code
    AND    batch_id                      = p_batch_id
    AND    NVL(sr_tp_site_id,NULL_VALUE) = NULL_VALUE
    AND    partner_type  IN (1,2)
    AND    deleted_flag                  = SYS_NO;

  CURSOR c5(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_sub_inventories
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code  = v_instance_code
    AND    batch_id          = p_batch_id;

  CURSOR c6(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_location_associations
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code  = v_instance_code
    AND    batch_id          = p_batch_id;

  CURSOR c7(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_trading_partner_sites
    WHERE  process_flag                = G_IN_PROCESS
    AND    deleted_flag                = SYS_NO
    AND    NVL(sr_tp_site_id,NULL_VALUE) = NULL_VALUE
    AND    partner_type                = 3
    AND    sr_instance_code            = v_instance_code
    AND    batch_id                    = p_batch_id
    GROUP BY location;

  CURSOR c8(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_partner_contacts
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code  = v_instance_code
    AND    batch_id          = p_batch_id;

   CURSOR c9(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   MSC_ST_GROUPS
    WHERE  process_flag     IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    batch_id         = p_batch_id
    AND    sr_instance_code = v_instance_code;

   CURSOR c10(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   MSC_ST_GROUPS
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(group_id,NULL_VALUE) = NULL_VALUE;

   CURSOR c11(p_batch_id NUMBER) IS
    SELECT
    	   msg.GROUP_ID,
	   msg.GROUP_NAME,
    	   msg.DESCRIPTION,
           msg.GROUP_TYPE,
           msg.GROUP_OWNER_ID,
           msg.CONTACT_USER_ID,
           msg.CONTRACT_DOC_URL,
           msg.EFFECTIVE_DATE,
           msg.DISABLE_DATE,
           msg.LAST_UPDATE_DATE,
           msg.LAST_UPDATED_BY,
           msg.LAST_UPDATE_LOGIN,
           msg.CONTEXT,
           msg.ATTRIBUTE1,
           msg.ATTRIBUTE2,
           msg.ATTRIBUTE3,
           msg.ATTRIBUTE4,
           msg.ATTRIBUTE5,
           msg.ATTRIBUTE6,
           msg.ATTRIBUTE7,
           msg.ATTRIBUTE8,
           msg.ATTRIBUTE9,
           msg.ATTRIBUTE10,
           msg.ATTRIBUTE11,
           msg.ATTRIBUTE12,
           msg.ATTRIBUTE13,
           msg.ATTRIBUTE14,
           msg.ATTRIBUTE15
    FROM   msc_st_groups msg,msc_groups mg
    WHERE  msg.process_flag      = G_VALID
    AND    msg.sr_instance_code  = v_instance_code
    AND    msg.batch_id          = p_batch_id
    AND    msg.group_id          = mg.group_id;

    --------
    CURSOR c12(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_group_companies
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code          = v_instance_code
    AND    batch_id                  = p_batch_id;

   CURSOR c13(p_batch_id NUMBER) IS
    SELECT msg.group_id,
           msg.company_id,
           msg.CONTACT_USER_ID,
           msg.EFFECTIVE_DATE,
           msg.DISABLE_DATE,
           msg.CONTEXT,
           msg.ATTRIBUTE1,
           msg.ATTRIBUTE2,
           msg.ATTRIBUTE3,
           msg.ATTRIBUTE4,
           msg.ATTRIBUTE5,
           msg.ATTRIBUTE6,
           msg.ATTRIBUTE7,
           msg.ATTRIBUTE8,
           msg.ATTRIBUTE9,
           msg.ATTRIBUTE10,
           msg.ATTRIBUTE11,
           msg.ATTRIBUTE12,
           msg.ATTRIBUTE13,
           msg.ATTRIBUTE14,
           msg.ATTRIBUTE15
    FROM   msc_st_group_companies msg,msc_group_companies mg
    WHERE  msg.process_flag      = G_VALID
    AND    msg.sr_instance_code  = v_instance_code
    AND    msg.batch_id          = p_batch_id
    AND    msg.group_id          = mg.group_id
    AND    msg.company_id        = mg.company_id;

    ----

    CURSOR c14(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_location_associations
    WHERE  process_flag                = G_IN_PROCESS
    AND    deleted_flag                = SYS_NO
    AND    NVL(location_id,NULL_VALUE) = NULL_VALUE
    AND    sr_instance_code            = v_instance_code
    AND    batch_id                    = p_batch_id
    GROUP BY location_code;

  CURSOR c15(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_trading_partner_sites
    WHERE  process_flag                = G_IN_PROCESS
    AND    deleted_flag                = SYS_NO
    AND    NVL(location_id,NULL_VALUE) = NULL_VALUE
    AND    partner_type                = 2
    AND    sr_instance_code            = v_instance_code
    AND    batch_id                    = p_batch_id
    GROUP BY location;

  BEGIN

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Validation check for the table MSC_ST_TRADING_PARTNERS

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE    msc_st_trading_partners mstp1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 FROM msc_st_trading_partners mstp2 '
    ||'        WHERE mstp2.sr_instance_code  = mstp1.sr_instance_code'
    ||'        AND   NVL(mstp2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mstp1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   mstp2.partner_name      = mstp1.partner_name'
    ||'        AND   mstp2.partner_type      = mstp1.partner_type'
    ||'        AND   mstp2.cust_account_number  = mstp1.cust_account_number'
    ||'        AND   mstp2.process_flag      = mstp1.process_flag'
    ||'        AND   NVL(mstp2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'        GROUP BY sr_instance_code,company_name,partner_name,partner_type,cust_account_number '
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    mstp1.process_flag              = '||G_IN_PROCESS
    -- ssurendr - bug 2647423: partner name should be unique for orgs as well.
    --||' AND    mstp1.partner_type              <>'||G_ORGANIZATION
    ||' AND    mstp1.sr_instance_code          = :v_instance_code'
    ||' AND    NVL(mstp1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    IF v_MSC_CONFIGURATION = 3 THEN            -- For SCE Standalone add company in udk
    v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE    msc_st_trading_partners mstp1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 FROM msc_st_trading_partners mstp2 '
    ||'        WHERE mstp2.sr_instance_code  = mstp1.sr_instance_code'
    ||'        AND   NVL(mstp2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mstp1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   mstp2.organization_code      = mstp1.organization_code'
    ||'        AND   mstp2.partner_type      = mstp1.partner_type'
    ||'        AND   mstp2.process_flag      = mstp1.process_flag'
    ||'        AND   NVL(mstp2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'        GROUP BY sr_instance_code,company_name,organization_code,partner_type '
    -- ||'        GROUP BY sr_instance_code,organization_code,partner_type '
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    mstp1.process_flag              = '||G_IN_PROCESS
    ||' AND    mstp1.partner_type              = '||G_ORGANIZATION
    ||' AND    mstp1.sr_instance_code          = :v_instance_code'
    ||' AND    NVL(mstp1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;

    ELSE
     v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE    msc_st_trading_partners mstp1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 FROM msc_st_trading_partners mstp2 '
    ||'        WHERE mstp2.sr_instance_code  = mstp1.sr_instance_code'
    -- ||'        AND   NVL(mstp2.company_name,  '||''''||NULL_CHAR||''''||') = '
    -- ||'              NVL(mstp1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   mstp2.organization_code      = mstp1.organization_code'
    ||'        AND   mstp2.partner_type      = mstp1.partner_type'
    ||'        AND   mstp2.process_flag      = mstp1.process_flag'
    ||'        AND   NVL(mstp2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    -- ||'        GROUP BY sr_instance_code,company_name,organization_code,partner_type '
    ||'        GROUP BY sr_instance_code,organization_code,partner_type '
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    mstp1.process_flag              = '||G_IN_PROCESS
    ||' AND    mstp1.partner_type              = '||G_ORGANIZATION
    ||' AND    mstp1.sr_instance_code          = :v_instance_code'
    ||' AND    NVL(mstp1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;
    END IF;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;



    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 03;
    lv_sql_stmt :=
    'UPDATE   msc_st_trading_partners mstp1 '
    ||' SET   process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE message_id   < ( SELECT max(message_id) '
    ||'       FROM  msc_st_trading_partners mstp2'
    ||'       WHERE mstp2.sr_instance_code  = mstp1.sr_instance_code'
    ||'       AND   NVL(mstp2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'             NVL(mstp1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'       AND   mstp2.partner_name      = mstp1.partner_name'
    ||'       AND   mstp2.partner_type      = mstp1.partner_type'
    ||'       AND   mstp2.cust_account_number  = mstp1.cust_account_number'
    ||'       AND   mstp2.process_flag      = mstp1.process_flag'
    ||'       AND   mstp2.process_flag      = '||G_IN_PROCESS
    ||'       AND   NVL(mstp2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND   mstp1.process_flag            = '||G_IN_PROCESS
    -- ssurendr - bug 2647423: partner name should be unique for orgs as well.
    --||' AND   mstp1.partner_type            <> '||G_ORGANIZATION
    ||' AND   mstp1.sr_instance_code        = :v_instance_code '
    ||' AND   NVL(mstp1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    v_sql_stmt := 04;
    lv_sql_stmt :=
    'UPDATE   msc_st_trading_partners mstp1 '
    ||' SET   process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE message_id   < ( SELECT max(message_id) '
    ||'       FROM  msc_st_trading_partners mstp2'
    ||'       WHERE mstp2.sr_instance_code  = mstp1.sr_instance_code'
    -- ||'       AND   NVL(mstp2.company_name,  '||''''||NULL_CHAR||''''||') = '
    -- ||'             NVL(mstp1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'       AND   mstp2.organization_code      = mstp1.organization_code'
    ||'       AND   mstp2.partner_type      = mstp1.partner_type'
    ||'       AND   mstp2.process_flag      = mstp1.process_flag'
    ||'       AND   mstp2.process_flag      = '||G_IN_PROCESS
    ||'       AND   NVL(mstp2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND   mstp1.process_flag            = '||G_IN_PROCESS
    ||' AND   mstp1.partner_type            = '||G_ORGANIZATION
    ||' AND   mstp1.sr_instance_code        = :v_instance_code '
    ||' AND   NVL(mstp1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_column_names :=
    'PARTNER_TYPE                  ||''~''||'
    ||'PARTNER_NAME                ||''~''||'
    ||'SR_INSTANCE_CODE            ||''~''||'
    ||'ORGANIZATION_CODE           ||''~''||'
    ||'DISABLE_DATE                ||''~''||'
    ||'STATUS                      ||''~''||'
    ||'MASTER_ORGANIZATION         ||''~''||'
    ||'PARTNER_NUMBER              ||''~''||'
    ||'CALENDAR_CODE               ||''~''||'
    ||'MAXIMUM_WEIGHT              ||''~''||'
    ||'MAXIMUM_VOLUME              ||''~''||'
    ||'WEIGHT_UOM                  ||''~''||'
    ||'VOLUME_UOM                  ||''~''||'
    ||'PROJECT_REFERENCE_ENABLED   ||''~''||'
    ||'PROJECT_CONTROL_LEVEL       ||''~''||'
    ||'DEMAND_LATENESS_COST        ||''~''||'
    ||'SUPPLIER_CAP_OVERUTIL_COST  ||''~''||'
    ||'RESOURCE_CAP_OVERUTIL_COST  ||''~''||'
    ||'TRANSPORT_CAP_OVER_UTIL_COST||''~''||'
    ||'USE_PHANTOM_ROUTINGS        ||''~''||'
    ||'INHERIT_PHANTOM_OP_SEQ      ||''~''||'
    ||'DEFAULT_ATP_RULE_NAME       ||''~''||'
    ||'DEFAULT_DEMAND_CLASS        ||''~''||'
    ||'MATERIAL_ACCOUNT            ||''~''||'
    ||'EXPENSE_ACCOUNT             ||''~''||'
    ||'ORGANIZATION_TYPE           ||''~''||'
    ||'SERVICE_LEVEL               ||''~''||'
    ||'COMPANY_NAME                ||''~''||'
    ||'CALENDAR_EXCEPTION_SET_ID   ||''~''||'
    ||'DELETED_FLAG';

    -- Dividing records in batches based on batchsize
    LOOP
      v_sql_stmt := 05;
      SELECT       msc_st_batch_id_s.NEXTVAL
      INTO         lv_batch_id
      FROM         DUAL;

      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE   msc_st_trading_partners '
      ||' SET   batch_id                       = :lv_batch_id '
      ||' WHERE process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND   sr_instance_code               = :v_instance_code'
      ||' AND   NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND ;

      OPEN  c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      v_sql_stmt := 07;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_trading_partners
      SET  st_transaction_id = msc_st_trading_partners_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_TRADING_PARTNERS');

      -- Deletion is not allowed for this table
      v_sql_stmt := 08;
      lv_sql_stmt :=
      'UPDATE      msc_st_trading_partners '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         = :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check DELETE_FLAG column has valid value or not and if not set it to SYS_NO
      -- Log error procedure inserts warning and also defaults the delete flag

      lv_where_str := ' AND NVL(deleted_flag,'||NULL_VALUE||') '
                      ||' NOT IN(1,2)';

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_TRADING_PARTNERS',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'DELETED_FLAG',
                         p_debug             => v_debug,
                         p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where partner_name is NULL
      v_sql_stmt := 09;
      lv_sql_stmt :=
      'UPDATE    msc_st_trading_partners'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text      = '||''''||lv_message_text||''''
      ||' WHERE  NVL(partner_name, '||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''
      ||' AND    batch_id                = :lv_batch_id'
      ||' AND    process_flag            = '||G_IN_PROCESS
      ||' AND    sr_instance_code        = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_TYPE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where partner_type NOT in (1,2,3,4)
      v_sql_stmt := 10;
      lv_sql_stmt :=
      'UPDATE    msc_st_trading_partners'
      ||' SET    process_flag       = '||G_ERROR_FLG||','
      ||'        error_text         = '||''''||lv_message_text||''''
      ||' WHERE  sr_instance_code   = :v_instance_code'
      ||' AND    batch_id           = :lv_batch_id'
      ||' AND    process_flag       = '||G_IN_PROCESS
      ||' AND    partner_type NOT IN (1,2,3,4)' ;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where organization_code is NULL for partner_type = 3
      v_sql_stmt := 11;
      lv_sql_stmt :=
      'UPDATE    msc_st_trading_partners '
      ||' SET    process_flag                  = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE  sr_instance_code              = :v_instance_code'
      ||' AND    batch_id                      = :lv_batch_id'
      ||' AND    process_flag                  = '||G_IN_PROCESS
      ||' AND    NVL(organization_code,    '||''''||NULL_CHAR||''''||')'
      ||'        =                      '||''''||NULL_CHAR||''''
      ||' AND    partner_type                  ='||G_ORGANIZATION;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;

--- changes for SRP

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'RESOURCE_TYPE');

      -- Resource type validation
      v_sql_stmt := 11.1;
      lv_sql_stmt :=
      'UPDATE      msc_st_trading_partners '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         = :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code'
      ||' AND      partner_type     =  2'
      ||' AND      (resource_type IS NOT NULL AND resource_type <>1)';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      v_sql_stmt := 11.2;
      lv_sql_stmt :=
      'UPDATE      msc_st_trading_partners '
      	||' SET    RESOURCE_TYPE ='''''
      	||' WHERE  process_flag       = '||G_IN_PROCESS
      	||' AND    batch_id           = :lv_batch_id'
      	||' AND    sr_instance_code   = :v_instance_code'
        ||' AND    PARTNER_TYPE       in (1,3,4) '
        ||' AND (resource_type is not null and resource_type <>1)';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

        -- bug# 2385805: dont allow dup orgs to go through
        -- unless these belong to this company - to allow updation
        -- Bypass this check if it is SCE Standalone

        IF v_MSC_CONFIGURATION <> 3 THEN
        lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                      (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

        IF lv_return <> 0 THEN
          RAISE ex_logging_err;
        END IF;

        UPDATE msc_st_trading_partners mstp
        SET    process_flag = G_ERROR_FLG,
               error_text   = lv_message_text
        WHERE  mstp.process_flag      = G_IN_PROCESS
        AND    mstp.sr_instance_code  = v_instance_code
        AND    mstp.batch_id          = lv_batch_id
        AND    mstp.partner_type           = G_ORGANIZATION
        AND    EXISTS -- check against those orgs which do not belong to this company
               (SELECT mtp.organization_code from msc_trading_partners mtp
                WHERE  mstp.organization_code = mtp.organization_code
                AND    mtp.sr_instance_id = v_instance_id
                AND    mtp.partner_type = G_ORGANIZATION
                MINUS
                SELECT mlis.char3 from msc_local_id_setup mlis
                WHERE  mlis.entity_name = 'SR_TP_ID'
                AND    mlis.char1       =  mstp.sr_instance_code
                AND    mlis.number1     =  mstp.partner_type
                AND    nvl(mlis.char2, NULL_CHAR)       = nvl(mstp.company_name,NULL_CHAR));
        END IF;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CALENDAR_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where calendar_code is NULL for partner_type = 3
      -- This validation is not required if MSC not installed(ODP standalone)

      IF (v_install_msc) THEN
      v_sql_stmt := 11;
      lv_sql_stmt :=
      'UPDATE    msc_st_trading_partners '
      ||' SET    process_flag                  = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE  sr_instance_code              = :v_instance_code'
      ||' AND    batch_id                      = :lv_batch_id'
      ||' AND    process_flag                  = '||G_IN_PROCESS
      ||' AND    NVL(calendar_code,    '||''''||NULL_CHAR||''''||')'
      ||'        =                      '||''''||NULL_CHAR||''''
      ||' AND    partner_type                  ='||G_ORGANIZATION;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;


     /* Bug 2172537 - Do not prefix the instance code
      -- Update  all partner_name and calendar_code as instance_code concatenated with name
      -- Where partner_type = 3 (organization)
      v_sql_stmt := 12;
      lv_sql_stmt :=
      'UPDATE   msc_st_trading_partners '
      ||' SET   partner_name      = sr_instance_code'||'||'':''||'||'partner_name,'
      ||'       calendar_code     = sr_instance_code'||'||'':''||'||'calendar_code'
      ||' WHERE partner_type      = '||G_ORGANIZATION
      ||' AND   sr_instance_code  = :v_instance_code'
      ||' AND   batch_id          = :lv_batch_id'
      ||' AND   process_flag      = '||G_IN_PROCESS;

      IF V_DEBUG THEN
        msc_st_util.log_message(lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;               */

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_ID AND CALENDAR_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_CALENDARS',
                      p_token3            => 'CHILD_TABLE',
                      p_token_value3      => 'MSC_ST_TRADING_PARTNERS');
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Validate the calendar code for org
      v_sql_stmt := 14;
      lv_sql_stmt :=
      'UPDATE    msc_st_trading_partners   mstp'
      ||' SET    process_flag             =  '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE  NOT EXISTS ( SELECT 1 '
      ||'        FROM   msc_calendars mc '
      ||'        WHERE  mc.calendar_code  = mstp.calendar_code '
      ||'        AND    mc.sr_instance_id = :v_instance_id )'
      ||' AND    partner_type             = '||G_ORGANIZATION
      ||' AND    sr_instance_code         = :v_instance_code'
      ||' AND    batch_id                 = :lv_batch_id'
      ||' AND    process_flag             = '||G_IN_PROCESS;



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,
                        v_instance_code,
                        lv_batch_id;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CALENDAR_EXCEPTION_SET_ID');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Default calendar exception set id as -1 always for legacy
      lv_where_str :=
      ' AND   calendar_exception_set_id <> -1 '
      ||' AND partner_type = '||G_ORGANIZATION ;

      lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_TRADING_PARTNERS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'CALENDAR_EXCEPTION_SET_ID',
                     p_debug             => v_debug,
                     p_default_value     => G_CAL_EXCEP_SET_ID);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE OR WEIGHT_UOM',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_UNITS_OF_MEASURE',
                      p_token3            => 'CHILD_TABLE',
                      p_token_value3      => 'MSC_ST_TRADING_PARTNERS');
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Validate all UOM code  both Weight/Volume
      v_sql_stmt := 15;
      lv_sql_stmt :=
      'UPDATE   msc_st_trading_partners mstp'
      ||' SET   process_flag = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE NOT EXISTS(SELECT 1 '
      ||'       FROM msc_units_of_measure muom '
      ||'       WHERE NVL(muom.uom_code,  '||''''||NULL_CHAR||''''||') = '
      ||'             NVL(mstp.weight_uom,'||''''||NULL_CHAR||''''||')'
      ||'       UNION '
      ||'       SELECT 1 FROM msc_st_units_of_measure msuom'
      ||'       WHERE NVL(msuom.uom_code, '||''''||NULL_CHAR||''''||') = '
      ||'             NVL(mstp.weight_uom,'||''''||NULL_CHAR||''''||')'
      ||'       AND   msuom.sr_instance_id = :v_instance_id'
      ||'       AND   msuom.process_flag   = '||G_VALID||' ) '
      ||' AND NVL(mstp.weight_uom,'||''''||NULL_CHAR||''''||') '
      ||'     <> '||''''||NULL_CHAR||''''
      ||' AND partner_type                 = '||G_ORGANIZATION
      ||' AND mstp.sr_instance_code        = :v_instance_code'
      ||' AND mstp.batch_id                = :lv_batch_id'
      ||' AND mstp.process_flag            = '||G_IN_PROCESS ;



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,
                        v_instance_code,
                        lv_batch_id;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE OR VOLUME_UOM',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_UNITS_OF_MEASURE',
                      p_token3            => 'CHILD_TABLE',
                      p_token_value3      => 'MSC_ST_TRADING_PARTNERS');
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 16;
      lv_sql_stmt :=
      'UPDATE   msc_st_trading_partners mstp'
      ||' SET   process_flag                   = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE NOT EXISTS(SELECT 1 '
      ||'       FROM  msc_units_of_measure muom'
      ||'       WHERE NVL(muom.uom_code,  '||''''||NULL_CHAR||''''||') = '
      ||'             NVL(mstp.volume_uom,'||''''||NULL_CHAR||''''||')'
      ||'       UNION '
      ||'       SELECT 1 FROM msc_st_units_of_measure msuom'
      ||'       WHERE NVL(msuom.uom_code,' ||''''||NULL_CHAR||''''||') = '
      ||'             NVL(mstp.volume_uom,'||''''||NULL_CHAR||''''||')'
      ||'       AND   msuom.sr_instance_id     = :v_instance_id'
      ||'       AND   msuom.process_flag       = '||G_VALID||' )'
      ||' AND   NVL(mstp.volume_uom,'||''''||NULL_CHAR||''''||')'
      ||'       <> '||''''||NULL_CHAR||''''
      ||' AND   mstp.partner_type              ='||G_ORGANIZATION
      ||' AND   mstp.sr_instance_code          = :v_instance_code'
      ||' AND   mstp.batch_id                  = :lv_batch_id'
      ||' AND   mstp.process_flag              = '||G_IN_PROCESS ;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,
                        v_instance_code,
                        lv_batch_id;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'COMPANY_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DEFAULT_DEMAND_CLASS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      -- Validate Demand Class, if value provided it should exists
      -- in ODS or staging table

     lv_return :=
     MSC_ST_UTIL.VALIDATE_DMD_CLASS(p_table_name       => 'MSC_ST_TRADING_PARTNERS',
                                    p_dmd_class_column => 'DEFAULT_DEMAND_CLASS',
                                    p_instance_id      => v_instance_id,
                                    p_instance_code    => v_instance_code,
                                    p_severity         => G_SEV3_ERROR,
                                    p_message_text     => lv_message_text,
                                    p_batch_id         => lv_batch_id,
                                    p_debug            => v_debug,
                                    p_error_text       => lv_error_text);

     if(lv_return <> 0) then
        RAISE ex_logging_err;
     end if;


    IF v_sce_installed THEN
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                      (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'COMPANY_NAME');

     IF lv_return <> 0 THEN
          RAISE ex_logging_err;
     END IF;

      --Derive company_id
      lv_return := MSC_ST_UTIL.DERIVE_COMPANY_ID
                        (p_table_name     => 'MSC_ST_TRADING_PARTNERS',
                         p_company_name   => 'COMPANY_NAME',
                         p_company_id     => 'COMPANY_ID',
                         p_instance_code  => v_instance_code,
                         p_error_text     => lv_error_text,
                         p_batch_id       => lv_batch_id,
                         p_message_text   => lv_message_text,
                         p_debug          => v_debug);


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    END IF;

/*          Moved the code to MSCSUTLB.pls

    --Modified to fix the bug#2336975

    IF v_sce_installed THEN
      lv_my_company := GET_MY_COMPANY;
      -- if record is for OEM's partners, company name will be null or 'My Company'

      UPDATE msc_st_trading_partners mscu
      SET    company_id = -1
      WHERE  exists( SELECT 1
                     FROM   msc_companies mc
                     WHERE  mc.company_name                = nvl(mscu.company_name,lv_my_company)
                     AND    mc.company_id                  = 1
                     AND    NVL(mc.disable_date,sysdate+1) > sysdate)
      AND    mscu.process_flag      = G_IN_PROCESS
      AND    mscu.sr_instance_code  = v_instance_code
      AND    mscu.batch_id          = lv_batch_id;

      -- if not 'My Company' then get the first occurence of sr_tp_id for this company_name

      UPDATE msc_st_trading_partners mscu
      SET    company_id = (SELECT local_id from MSC_LOCAL_ID_SETUP
              WHERE char1           = mscu.sr_instance_code
              and   NVL(char3,NULL_CHAR) = NVL(mscu.company_name,NULL_CHAR)
              and   entity_name     = 'SR_TP_ID'
              and   rownum          = 1) -- we need the first occurence of sr_tp_id
      WHERE   mscu.company_id        IS NULL
      AND    mscu.process_flag      = G_IN_PROCESS
      AND    mscu.sr_instance_code  = v_instance_code
      AND    mscu.batch_id          = lv_batch_id;

        -- Set the  message

        lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                      (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'COMPANY_NAME');

        IF lv_return <> 0 THEN
          RAISE ex_logging_err;
        END IF;

        UPDATE msc_st_trading_partners mscu
        SET    process_flag = G_ERROR_FLG,
               error_text   = lv_message_text
        WHERE  mscu.company_id        IS NULL
        AND    mscu.process_flag      = G_IN_PROCESS
        AND    mscu.sr_instance_code  = v_instance_code
        AND    mscu.batch_id          = lv_batch_id;

      END IF;
*/

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SOURCE_ORG_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Derive source_org_id
      lv_return :=msc_st_util.derive_partner_org_id
                       (p_table_name        => 'MSC_ST_TRADING_PARTNERS',
                        p_org_partner_name  => 'SOURCE_ORG_CODE',
                        p_org_partner_id    => 'SOURCE_ORG_ID',
                        p_instance_code     => v_instance_code,
                        p_partner_type      => G_ORGANIZATION,
                        p_error_text        => lv_error_text,
                        p_batch_id          => lv_batch_id,
                        p_severity          => G_SEV3_ERROR,
                        p_debug             => v_debug,
                        p_message_text      => lv_message_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
   END IF; --v_msc_installed

    -- ssurendr - bug 2647423: check for partner name - org code mismatch with respect to ODS - begin.
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                 p_error_code        => 'MSC_PP_INVALID_VALUE',
                 p_message_text      => lv_message_text,
                 p_error_text        => lv_error_text,
                 p_token1            => 'COLUMN_NAME',
                 p_token_value1      => 'PARTNER_NAME');

    IF lv_return <> 0 THEN
    RAISE ex_logging_err;
    END IF;

    v_sql_stmt := 16.1;
    lv_sql_stmt :=
    'UPDATE  msc_st_trading_partners mstp'
    ||' SET  process_flag                  = '||G_ERROR_FLG||','
    ||'      error_text  = '||''''||lv_message_text||''''
    ||' WHERE EXISTS(SELECT 1 '
    ||'      FROM  msc_trading_partners mtp,'
    ||'            msc_company_id_lid mcil'
    ||'      WHERE mtp.partner_name = mstp.partner_name'
    ||'      AND  mtp.partner_type = mstp.partner_type'
    ||'      AND  mtp.organization_code <> mstp.organization_code'
    ||'      AND  mcil.sr_company_id = mstp.company_id'
    ||'      AND  mcil.partner_type = mstp.partner_type'
    ||'      AND  mcil.company_id = mtp.company_id'
    ||'      AND  mcil.sr_instance_id = :v_instance_id)'
    ||' AND  mstp.partner_type              ='||G_ORGANIZATION
    ||' AND  nvl(mstp.company_id,-1)        <> -1'
    ||' AND  mstp.sr_instance_code          = :v_instance_code'
    ||' AND  mstp.batch_id                  = :lv_batch_id'
    ||' AND  mstp.process_flag              = '||G_IN_PROCESS ;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


    EXECUTE IMMEDIATE lv_sql_stmt
        USING   v_instance_id,
                v_instance_code,
                lv_batch_id;

    v_sql_stmt := 16.2;
    lv_sql_stmt :=
    'UPDATE  msc_st_trading_partners mstp'
    ||' SET  process_flag                  = '||G_ERROR_FLG||','
    ||'      error_text  = '||''''||lv_message_text||''''
    ||' WHERE EXISTS(SELECT 1 '
    ||'      FROM  msc_trading_partners mtp'
    ||'      WHERE mtp.partner_name = mstp.partner_name'
    ||'      AND  mtp.partner_type = mstp.partner_type'
    ||'      AND  mtp.organization_code <> mstp.organization_code'
    ||'      AND  nvl(mtp.company_id,1) = 1)'
    ||' AND  mstp.partner_type              ='||G_ORGANIZATION
    ||' AND  nvl(mstp.company_id,-1)        = -1'
    ||' AND  mstp.sr_instance_code          = :v_instance_code'
    ||' AND  mstp.batch_id                  = :lv_batch_id'
    ||' AND  mstp.process_flag              = '||G_IN_PROCESS ;


    MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


    EXECUTE IMMEDIATE lv_sql_stmt
         USING    v_instance_code,
                   lv_batch_id;
    -- ssurendr - bug 2647423: check for partner name - org code mismatch with respect to ODS - end.

      -- Derive sr_tp_id(Organization)
      lv_return :=msc_st_util.derive_partner_org_id
                       (p_table_name        => 'MSC_ST_TRADING_PARTNERS',
                        p_org_partner_name  => 'ORGANIZATION_CODE',
                        p_org_partner_id    => 'SR_TP_ID',
                        p_instance_code     => v_instance_code,
                        p_partner_type      => G_ORGANIZATION,
                        p_error_text        => lv_error_text,
                        p_debug             => v_debug,
                        p_batch_id          => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Derive sr_tp_id(Customer)
      lv_return :=msc_st_util.derive_partner_org_id
                       (p_table_name        => 'MSC_ST_TRADING_PARTNERS',
                        p_org_partner_name  => 'PARTNER_NAME',
                        p_cust_account_number=>'CUST_ACCOUNT_NUMBER',
                        p_org_partner_id    => 'SR_TP_ID',
                        p_instance_code     => v_instance_code,
                        p_partner_type      => G_CUSTOMER,
                        p_error_text        => lv_error_text,
                        p_debug             => v_debug,
                        p_batch_id          => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Derive sr_tp_id(Supplier).
      lv_return :=msc_st_util.derive_partner_org_id
                       (p_table_name        => 'MSC_ST_TRADING_PARTNERS',
                        p_org_partner_name  => 'PARTNER_NAME',
                        p_org_partner_id    => 'SR_TP_ID',
                        p_instance_code     => v_instance_code,
                        p_partner_type      => G_VENDOR,
                        p_error_text        => lv_error_text,
                        p_debug             => v_debug,
                        p_batch_id          => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

       -- Derive sr_tp_id(Carrier).
      lv_return :=msc_st_util.derive_partner_org_id
                       (p_table_name        => 'MSC_ST_TRADING_PARTNERS',
                        p_org_partner_name  => 'PARTNER_NAME',
                        p_org_partner_id    => 'SR_TP_ID',
                        p_instance_code     => v_instance_code,
                        p_partner_type      => G_CARRIER,
                        p_error_text        => lv_error_text,
                        p_debug             => v_debug,
                        p_batch_id          => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'INHERIT_OC_OP_SEQ_NUM',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => 2);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check INHERIT_OC_OP_SEQ_NUM column has valid value or not and if not set it to 2
      -- Log error procedure inserts warning and also defaults the INHERIT_OC_OP_SEQ_NUM

      lv_where_str := ' AND NVL(INHERIT_OC_OP_SEQ_NUM,'||NULL_VALUE||') '
                      ||' NOT IN(1,2)'
                      ||' AND partner_type = '||G_ORGANIZATION ;

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_TRADING_PARTNERS',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'INHERIT_OC_OP_SEQ_NUM',
                         p_debug             => v_debug,
                         p_default_value     => 2);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_TRADING_PARTNERS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      OPEN  c2(lv_batch_id);
      FETCH c2 BULK COLLECT INTO lb_rowid ;

      IF c2%ROWCOUNT > 0  THEN
        v_sql_stmt := 17;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        UPDATE msc_st_trading_partners
        SET    sr_tp_id  =  msc_st_sr_tp_id_s.NEXTVAL
        WHERE  rowid     =  lb_rowid(j);

        -- Insert into the LID table this new partner with the
        -- user defined key

        v_sql_stmt := 18;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        INSERT INTO  msc_local_id_setup
          (local_id,
           st_transaction_id,
           instance_id,
           entity_name,
           data_source_type,
           char1,
           char2,
           char3,
           number1,
           char4,
           SOURCE_SOURCE_ORG_ID,
           SOURCE_SR_TP_ID,
           last_update_date,
           last_updated_by,
           creation_date,
           created_by  )
        SELECT
           sr_tp_id,
           st_transaction_id,
           v_instance_id,
           'SR_TP_ID',
           data_source_type,
           v_instance_code,
           company_name,
           DECODE(partner_type,G_ORGANIZATION,organization_code,partner_name),
           partner_type,
           CUST_ACCOUNT_NUMBER,
           SOURCE_SOURCE_ORG_ID,
           SOURCE_SR_TP_ID,
           v_current_date,
           v_current_user,
           v_current_date,
           v_current_user
        FROM  msc_st_trading_partners
        WHERE rowid  = lb_rowid(j);

      END IF;
      CLOSE c2 ;
     /* Removed this prefixing of instance to org code bug 2172537
      -- Update  all organization_code as instance_code concatenated with org_code
      -- Where partner_type = 3 (organization)
      v_sql_stmt := 19;
      lv_sql_stmt :=
      'UPDATE   msc_st_trading_partners '
      ||' SET   organization_code   = sr_instance_code'||'||'':''||'||'organization_code,'
      ||'       master_organization = sr_tp_id'
      ||' WHERE partner_type        = '||G_ORGANIZATION
      ||' AND   sr_instance_code    = :v_instance_code'
      ||' AND   batch_id            = :lv_batch_id'
      ||' AND   process_flag        = '||G_IN_PROCESS;

      IF V_DEBUG THEN
        msc_st_util.log_message(lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;        */

      -- Set the process flag as Valid and populate instance_id
      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                        (p_table_name   => 'MSC_ST_TRADING_PARTNERS',
                         p_instance_id    => v_instance_id,
                         p_instance_code  => v_instance_code,
                         p_process_flag   => G_VALID,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug,
                         p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- At the end calling  the LOG_ERROR for logging all
      -- errored out records.

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name    => 'MSC_ST_TRADING_PARTNERS',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug,
                         p_batch_id      => lv_batch_id  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
    COMMIT;

      -- ODP change
      -- Call the procedure to insert all org/customer into the msd_st_level_values
      IF(v_install_msd) THEN
        lv_sql_stmt := 'DECLARE errbuf varchar2(250);'
                 ||' retcode number;'
                 ||' BEGIN '
                 ||' MSD_CL_PRE_PROCESS.LOAD_ORG_CUST'
                 ||' (ERRBUF        => errbuf,'
                 ||'  RETCODE       => retcode,'
                 ||'  p_instance_id => :v_instance_id,'
                 ||'  p_batch_id    => :lv_batch_id);'
                 ||'  IF ( retcode = '||G_WARNING||') THEN '
                 ||' update msc_apps_instances'
                 ||' set dbs_ver = '||SYS_YES
                 ||' where instance_id='||v_instance_id||';'
                 ||'  END IF;'
                 ||'  END ;';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

        EXECUTE IMMEDIATE lv_sql_stmt
                USING     v_instance_id,
                          lv_batch_id ;
      END IF ;
      COMMIT;
    END LOOP;

    --Validation for MSC_ST_TRADING_PARTNER_SITES

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;
/*
    -- UDK validations
    v_sql_stmt := 19;
    lv_sql_stmt :=
    '   UPDATE msc_st_trading_partner_sites mstp1'
    ||' SET    process_flag = '||G_ERROR_FLG||', '
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 '
    ||'        FROM  msc_st_trading_partner_sites mstp2 '
    ||'        WHERE mstp2.sr_instance_code  = mstp1.sr_instance_code '
    ||'        AND    NVL(mstp2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(mstp1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   mstp2.partner_name      = mstp1.partner_name  '
    ||'        AND   NVL(mstp2.tp_site_code,mstp2.location)   = NVL(mstp1.tp_site_code,mstp1.location) '
    ||'        AND   mstp2.partner_type      = mstp1.partner_type  '
    ||'        AND   mstp2.process_flag      = mstp1.process_flag  '
    ||'        AND   NVL(mstp2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'        GROUP BY sr_instance_code,partner_name,tp_site_code,'
    ||'                 partner_type '
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    mstp1.process_flag            = '||G_IN_PROCESS
    ||' AND    mstp1.sr_instance_code        = :v_instance_code '
    ||' AND    NVL(mstp1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;

    IF V_DEBUG THEN
      msc_st_util.log_message(lv_sql_stmt);
    END IF;

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;
*/

    -- UDK validations for locations
    v_sql_stmt := 19;
    lv_sql_stmt :=
    '   UPDATE msc_st_trading_partner_sites mstp1'
    ||' SET    process_flag = '||G_ERROR_FLG||', '
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 '
    ||'        FROM  msc_st_trading_partner_sites mstp2 '
    ||'        WHERE mstp2.sr_instance_code  = mstp1.sr_instance_code '
    ||'        AND    NVL(mstp2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(mstp1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   mstp2.partner_name      = mstp1.partner_name  '
    ||'        AND   mstp2.partner_type      = mstp1.partner_type  '
    ||'        AND   mstp2.process_flag      = mstp1.process_flag  '
    ||'        AND   NVL(mstp2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'        GROUP BY sr_instance_code,partner_name,company_name,'
    ||'                 partner_type '
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    mstp1.process_flag            = '||G_IN_PROCESS
    ||' AND    mstp1.sr_instance_code        = :v_instance_code '
    ||' AND    mstp1.partner_type = 3'
    ||' AND    NVL(mstp1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    -- UDK validations for tp sites
    v_sql_stmt := 19;
    lv_sql_stmt :=
    '   UPDATE msc_st_trading_partner_sites mstp1'
    ||' SET    process_flag = '||G_ERROR_FLG||', '
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 '
    ||'        FROM  msc_st_trading_partner_sites mstp2 '
    ||'        WHERE mstp2.sr_instance_code  = mstp1.sr_instance_code '
    ||'        AND    NVL(mstp2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(mstp1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   mstp2.partner_name      = mstp1.partner_name  '
    ||'        AND   mstp2.tp_site_code      = mstp1.tp_site_code  '
    ||'        AND   mstp2.partner_type      = mstp1.partner_type  '
    ||'        AND   mstp2.CUST_ACCOUNT_NUMBER      = mstp1.CUST_ACCOUNT_NUMBER  '
    ||'        AND   mstp2.process_flag      = mstp1.process_flag  '
    ||'        AND   NVL(mstp2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'        GROUP BY sr_instance_code,partner_name,tp_site_code,'
    ||'                 partner_type,CUST_ACCOUNT_NUMBER'
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    mstp1.process_flag            = '||G_IN_PROCESS
    ||' AND    mstp1.sr_instance_code        = :v_instance_code '
    ||' AND    mstp1.partner_type            IN (1,2) '
    ||' AND    NVL(mstp1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    -- Duplicate UDK validation for XML message
    v_sql_stmt := 20;
    lv_sql_stmt :=
    '   UPDATE msc_st_trading_partner_sites mstp1'
    ||' SET    process_flag  = '||G_ERROR_FLG||', '
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  message_id    < ( SELECT max(message_id) '
    ||'        FROM  msc_st_trading_partner_sites mstp2 '
    ||'        WHERE mstp2.sr_instance_code  = mstp1.sr_instance_code '
    ||'        AND   NVL(mstp2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mstp1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   mstp2.partner_name      = mstp1.partner_name '
    ||'        AND   mstp2.partner_type      = mstp1.partner_type '
    ||'        AND   mstp2.process_flag      = mstp1.process_flag '
    ||'        AND   mstp2.process_flag      = '||G_IN_PROCESS
    ||'        AND   NVL(mstp2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND    mstp1.process_flag            = '||G_IN_PROCESS
    ||' AND    mstp1.sr_instance_code        = :v_instance_code '
    ||' AND    mstp1.partner_type = 3'
    ||' AND    NVL(mstp1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_column_names :=
    'PARTNER_NAME            ||''~''||'
    ||'TP_SITE_CODE          ||''~''||'
    ||'PARTNER_TYPE          ||''~''||'
    ||'PARTNER_ADDRESS       ||''~''||'
    ||'LOCATION              ||''~''||'
    ||'LONGITUDE             ||''~''||'
    ||'LATITUDE              ||''~''||'
    ||'SR_INSTANCE_CODE      ||''~''||'
    ||'COMPANY_NAME          ||''~''||'
    ||'DELETED_FLAG';

    -- Dividing records in batches based on batchsize

    LOOP
      v_sql_stmt := 21;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   DUAL;

      v_sql_stmt := 22;
      lv_sql_stmt :=
      'UPDATE    msc_st_trading_partner_sites '
      ||' SET    batch_id                       = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND ;

      OPEN c3(lv_batch_id);
      FETCH c3 BULK COLLECT INTO lb_rowid;
      CLOSE c3;

      -- Populate the st_transaction_id and WHO columns
      v_sql_stmt := 23;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE   msc_st_trading_partner_sites
      SET      st_transaction_id =  msc_st_trading_partner_sites_s.NEXTVAL ,
               refresh_id        = v_refresh_id,
               last_update_date  = v_current_date,
               last_updated_by   = v_current_user,
               creation_date     = v_current_date,
               created_by        = v_current_user
      WHERE  rowid               = lb_rowid(j);

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_TRADING_PARTNER_SITES');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Deletion is not allowed for this table
      v_sql_stmt := 24;
      lv_sql_stmt :=
      'UPDATE      msc_st_trading_partner_sites '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check DELETE_FLAG column has valid value or not and if not set it to SYS_NO
      -- Log error procedure inserts warning and also defaults the delete flag

      lv_where_str := ' AND NVL(deleted_flag,'||NULL_VALUE||') '
                      ||' NOT IN(1,2)';

      lv_return := MSC_ST_UTIL.LOG_ERROR
                       (p_table_name        => 'MSC_ST_TRADING_PARTNER_SITES',
                        p_instance_code     => v_instance_code,
                        p_row               => lv_column_names,
                        p_severity          => G_SEV_WARNING,
                        p_message_text      => lv_message_text,
                        p_error_text        => lv_error_text,
                        p_batch_id          => lv_batch_id,
                        p_where_str         => lv_where_str,
                        p_col_name          => 'DELETED_FLAG',
                        p_debug             => v_debug,
                        p_default_value     => SYS_NO);


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_TYPE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where partner_type NOT in (1,2,3)
      v_sql_stmt := 25;
      lv_sql_stmt :=
      'UPDATE      msc_st_trading_partner_sites '
      ||' SET   process_flag        = '||G_ERROR_FLG||', '
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE sr_instance_code    =  :v_instance_code'
      ||' AND   batch_id            =  :lv_batch_id'
      ||' AND   process_flag        = '||G_IN_PROCESS
      ||' AND   NVL(partner_type,'||NULL_VALUE||') NOT IN (1,2,3)';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;

    -- ODP changes , error out the record if only DP is installed
    -- then only partner_type = 2 (customer ) should come in

    IF (NOT v_install_msc) THEN
            lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_TYPE');

        IF lv_return <> 0 THEN
            RAISE ex_logging_err;
        END IF;

          -- Error out records where partner_type NOT in (2)
          v_sql_stmt := 25;
         lv_sql_stmt :=
         'UPDATE      msc_st_trading_partner_sites '
         ||' SET   process_flag        = '||G_ERROR_FLG||', '
         ||'         error_text   = '||''''||lv_message_text||''''
         ||' WHERE sr_instance_code    =  :v_instance_code'
         ||' AND   batch_id            =  :lv_batch_id'
         ||' AND   process_flag        = '||G_IN_PROCESS
        ||' AND   NVL(partner_type,'||NULL_VALUE||') <> 2';


           MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;
      END IF ; --v_msc_install



      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_NAME OR TP_SITE_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where partner_name/tp_site_code is NULL
      -- For partner type 1 and 2
      v_sql_stmt := 26;
      lv_sql_stmt :=
      'UPDATE    msc_st_trading_partner_sites '
      ||' SET    process_flag     = '||G_ERROR_FLG||','
      ||'        error_text   = '||''''||lv_message_text||''''
      ||' WHERE  sr_instance_code =  :v_instance_code'
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    process_flag     = '||G_IN_PROCESS
      ||' AND    partner_type IN (1,2)'
      ||' AND    (NVL(partner_name,'||''''||NULL_CHAR||''''||')'
      ||'        = '||''''||NULL_CHAR||''''
      ||' OR     NVL(tp_site_code,'||''''||NULL_CHAR||''''||') '
      ||'        = '||''''||NULL_CHAR||''''||')';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;

    IF (v_install_msc) THEN
        lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_NAME OR LOCATION');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where partner_name/location is NULL
      -- For partner type 3
      v_sql_stmt := 27;
      lv_sql_stmt :=
      'UPDATE    msc_st_trading_partner_sites '
      ||' SET    process_flag     = '||G_ERROR_FLG||','
      ||'        error_text   = '||''''||lv_message_text||''''
      ||' WHERE  sr_instance_code =  :v_instance_code'
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    process_flag     = '||G_IN_PROCESS
      ||' AND    partner_type  = 3'
      ||' AND    (NVL(partner_name,'||''''||NULL_CHAR||''''||')'
      ||'        = '||''''||NULL_CHAR||''''
      ||' OR     NVL(location,'||''''||NULL_CHAR||''''||') '
      ||'        = '||''''||NULL_CHAR||''''||')';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Update sr_tp_id(customer)
     lv_return :=msc_st_util.derive_partner_org_id
                      (p_table_name        =>'MSC_ST_TRADING_PARTNER_SITES',
                       p_org_partner_name  =>'PARTNER_NAME',
                       p_cust_account_number=>'CUST_ACCOUNT_NUMBER',
                       p_org_partner_id    =>'SR_TP_ID',
                       p_instance_code     => v_instance_code,
                       p_partner_type      => G_CUSTOMER,
                       p_batch_id          =>lv_batch_id,
                       p_debug             => v_debug,
                       p_error_text        =>lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Update  sr_tp_id(Organization)
      lv_return :=msc_st_util.derive_partner_org_id
                       (p_table_name        => 'MSC_ST_TRADING_PARTNER_SITES',
                        p_org_partner_name  => 'PARTNER_NAME',
                        p_org_partner_id    => 'SR_TP_ID',
                        p_instance_code     => v_instance_code,
                        p_partner_type      => G_ORGANIZATION,
                        p_error_text        => lv_error_text,
                        p_debug             => v_debug,
                        p_batch_id          => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
    END IF ; --v_install_msc

      -- Update sr_tp_id(supplier)
     lv_return :=msc_st_util.derive_partner_org_id
                      (p_table_name        =>'MSC_ST_TRADING_PARTNER_SITES',
                       p_org_partner_name  =>'PARTNER_NAME',
                       p_org_partner_id    =>'SR_TP_ID',
                       p_instance_code     => v_instance_code,
                       p_partner_type      => G_VENDOR,
                       p_message_text      => lv_message_text,
                       p_batch_id          =>lv_batch_id,
                       p_debug             => v_debug,
                       p_error_text        =>lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


   -- Error out the record if sr_tp_id is NULL
       v_sql_stmt := 28;
      lv_sql_stmt :=
      'UPDATE    msc_st_trading_partner_sites'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text   =   '||''''||lv_message_text||''''
      ||' WHERE  NVL(sr_tp_id,'||NULL_VALUE||')= '||NULL_VALUE
      ||' AND    batch_id                = :lv_batch_id'
      ||' AND    process_flag            = '||G_IN_PROCESS
      ||' AND    sr_instance_code        = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'TP_SITE_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Update sr_tp_site_id(Vendor)
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                       (p_table_name        => 'MSC_ST_TRADING_PARTNER_SITES',
                        p_partner_name      => 'PARTNER_NAME',
                        p_partner_site_code => 'TP_SITE_CODE',
                        p_partner_site_id   => 'SR_TP_SITE_ID',
                        p_instance_code     => v_instance_code,
                        p_partner_type      => G_VENDOR,
                        p_error_text        => lv_error_text,
                        p_batch_id          => lv_batch_id,
                        p_debug             => v_debug,
                        p_row               => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    IF(v_install_msc) THEN
       -- Update sr_tp_site_id(Customer)
       lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                       (p_table_name        => 'MSC_ST_TRADING_PARTNER_SITES',
                        p_partner_name      => 'PARTNER_NAME',
                        p_partner_site_code => 'TP_SITE_CODE',
                        p_CUST_ACCOUNT_NUMBER =>'CUST_ACCOUNT_NUMBER',
                        p_partner_site_id   => 'SR_TP_SITE_ID',
                        p_instance_code     => v_instance_code,
                        p_partner_type      => G_CUSTOMER,
                        p_error_text        => lv_error_text,
                        p_batch_id          => lv_batch_id,
                        p_debug             => v_debug,
                        p_row               => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Update sr_tp_site_id(Organization)
      -- location_id goes into sr_tp_site_id
      v_sql_stmt := 28;
      lv_sql_stmt :=
      'UPDATE msc_st_trading_partner_sites mts'
      ||' SET sr_tp_site_id              = (SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1       = mts.sr_instance_code'
      ||'       AND    mls.char3       = mts.location'
      ||'       AND    mls.entity_name = ''LOCATION_ID'' )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    partner_type                   = 3'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;



     /* not required anymore for bug fix 2748525. locations are not specific to orgs

     -- If we get a location code for the same org
     -- We will update the location_code in LID and won't generate a new location_id
     -- This will ensure that we will have just one location for the organization

      v_sql_stmt := 29;
      v_sql_stmt := 29;
      lv_sql_stmt :=
      'UPDATE msc_local_id_setup mls'
      ||' SET mls.char4    =  NVL( (select mts.location '
      ||'     FROM msc_st_trading_partner_sites mts'
      ||'     WHERE mls.char1        = mts.sr_instance_code'
      ||'     AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
      ||'            NVL(mts.company_name,'||''''||NULL_CHAR||''''||') '
      ||'     AND   mls.char3       = mts.partner_name'
      ||'     AND   mts.process_flag                   = '||G_IN_PROCESS
      ||'     AND   mts.partner_type                   = '||G_ORGANIZATION
      ||'     AND   NVL(mts.batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||'     AND   mts.sr_instance_code               = :v_instance_code),mls.char4)'
      ||'     WHERE   mls.entity_name = ''LOCATION_ID'' '
      ||'     AND   mls.instance_id = :v_instance_id' ;

      IF V_DEBUG THEN
        msc_st_util.log_message(lv_sql_stmt);
      END IF;

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code,v_instance_id;
    */

    END IF ; -- v_install_msc

      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_TRADING_PARTNER_SITES',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      OPEN  c4(lv_batch_id);
      FETCH c4 BULK COLLECT INTO lb_rowid ;

      IF c4%ROWCOUNT > 0  THEN
        v_sql_stmt := 29;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        UPDATE msc_st_trading_partner_sites
        SET    sr_tp_site_id  = msc_st_sr_tp_site_id_s.NEXTVAL
        WHERE  rowid          = lb_rowid(j);

        -- Insert record in LID
        v_sql_stmt := 30;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        INSERT INTO msc_local_id_setup
         (local_id,
          st_transaction_id,
          instance_id,
          entity_name,
          data_source_type,
          char1,
          char2,
          char3,
          char4,
          number1,
          SOURCE_SR_TP_ID,
          SOURCE_SR_TP_SITE_ID,
          char5,
          last_update_date,
          last_updated_by,
          creation_date,
          created_by)
        SELECT
          sr_tp_site_id,
          st_transaction_id,
          v_instance_id,
          'SR_TP_SITE_ID',
          data_source_type,
          v_instance_code,
          company_name,
          partner_name,
          tp_site_code,
          partner_type,
          SOURCE_SR_TP_ID,
          SOURCE_SR_TP_SITE_ID,
          CUST_ACCOUNT_NUMBER,
          v_current_date,
          v_current_user,
          v_current_date,
          v_current_user
        FROM  msc_st_trading_partner_sites
        WHERE rowid            = lb_rowid(j);
      END IF;
      CLOSE C4;

    IF (v_install_msc) THEN   -- IF MSC installed then only do this
      OPEN  c7(lv_batch_id);
      FETCH c7 BULK COLLECT INTO lb_rowid ;

      IF c7%ROWCOUNT > 0  THEN
        v_sql_stmt := 31;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        UPDATE msc_st_trading_partner_sites
        SET    sr_tp_site_id  = msc_st_location_id_s.NEXTVAL
        WHERE  rowid          = lb_rowid(j);

        -- Insert record in LID
        v_sql_stmt := 32;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        INSERT INTO msc_local_id_setup
         (local_id,
          st_transaction_id,
          instance_id,
          entity_name,
          data_source_type,
          char1,
          char3,
          SOURCE_SR_TP_ID,
	  SOURCE_SR_TP_SITE_ID,
          last_update_date,
          last_updated_by,
          creation_date,
          created_by)
        SELECT
          sr_tp_site_id,
          st_transaction_id,
          v_instance_id,
          'LOCATION_ID',
          data_source_type,
          v_instance_code,
          location,
          SOURCE_SR_TP_ID,
	  SOURCE_SR_TP_SITE_ID,
          v_current_date,
          v_current_user,
          v_current_date,
          v_current_user
        FROM  msc_st_trading_partner_sites
        WHERE rowid            = lb_rowid(j);
      END IF;
      CLOSE C7;

      --Deriving location_id
      v_sql_stmt := 32.1;
      lv_sql_stmt :=
      'UPDATE msc_st_trading_partner_sites mts'
      ||' SET sr_tp_site_id              = (SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1       = mts.sr_instance_code'
      ||'       AND    mls.char3       = mts.location'
      ||'       AND    mls.entity_name = ''LOCATION_ID'' )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    partner_type                   = 3'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

    END IF ; -- v_install_msc

     -- fix for 2409667
      -- Populating TP_SITE_CODE into LOCATION for Customer sites because in case
      -- of Customer Sites SCE would pick LOCATION as the COMPANY_SITE_NAME for MSC_COMPANY_SITES.

      v_sql_stmt := 33;
      lv_sql_stmt :=
      'UPDATE msc_st_trading_partner_sites '
      ||' SET LOCATION                          =  TP_SITE_CODE '
      ||' WHERE  process_flag                   = '|| G_IN_PROCESS
      ||' AND    partner_type                   = '|| G_CUSTOMER
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;



      --Deriving location_id for G_CUSTOMERS --- for E1 integration 8651763 .
      v_sql_stmt := 32.2;
      lv_sql_stmt :=
      'UPDATE msc_st_trading_partner_sites mts'
      ||' SET location_id              = (SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1       = mts.sr_instance_code'
      ||'       AND    mls.char3       = mts.location'
      ||'       AND    mls.entity_name = ''LOCATION_ID'' )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    partner_type                   = 2'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;



 ----------------For E1 integ-- populating the location_id in case of customer-- bug # 8651763

      OPEN  c15(lv_batch_id);
      FETCH c15 BULK COLLECT INTO lb_rowid ;

      IF c15%ROWCOUNT > 0  THEN
        v_sql_stmt := 32.3;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        UPDATE msc_st_trading_partner_sites
        SET    location_id  = msc_st_location_id_s.NEXTVAL
        WHERE  rowid          = lb_rowid(j);

        -- Insert record in LID
        v_sql_stmt := 32.4;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        INSERT INTO msc_local_id_setup
         (local_id,
          st_transaction_id,
          instance_id,
          entity_name,
          data_source_type,
          char1,
          char3,
          SOURCE_SR_TP_ID,
	  SOURCE_SR_TP_SITE_ID,
          last_update_date,
          last_updated_by,
          creation_date,
          created_by)
        SELECT
          location_id,
          st_transaction_id,
          v_instance_id,
          'LOCATION_ID',
          data_source_type,
          v_instance_code,
          location,
          SOURCE_SR_TP_ID,
	  SOURCE_SR_TP_SITE_ID,
          v_current_date,
          v_current_user,
          v_current_date,
          v_current_user
        FROM  msc_st_trading_partner_sites
        WHERE rowid            = lb_rowid(j);
      END IF;
      CLOSE C15;

      --Deriving location_id
      v_sql_stmt := 32.5;
      lv_sql_stmt :=
      'UPDATE msc_st_trading_partner_sites mts'
      ||' SET location_id              = (SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1       = mts.sr_instance_code'
      ||'       AND    mls.char3       = mts.location'
      ||'       AND    mls.entity_name = ''LOCATION_ID'' )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    partner_type                   = 2'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;
 ----------------For E1 integ-- populating the location_id in case of customer-- bug # 8651763



      -- Set the process flag as Valid and poulate instance_id
      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                        (p_table_name     => 'MSC_ST_TRADING_PARTNER_SITES',
                         p_instance_id    => v_instance_id,
                         p_instance_code  => v_instance_code,
                         p_process_flag   => G_VALID,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug,
                         p_batch_id       => lv_batch_id);

      IF lv_return < 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- At the end calling  the LOG_ERROR for logging all errored out records

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name     => 'MSC_ST_TRADING_PARTNER_SITES',
                         p_instance_code  => v_instance_code,
                         p_row            => lv_column_names,
                         p_severity       => G_SEV_ERROR,
                         p_message_text   => NULL,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug,
                         p_batch_id       => lv_batch_id  );

      IF lv_return < 0 THEN
        RAISE ex_logging_err;
      END IF;
      COMMIT;


      -- ODP change
      -- Call the procedure to insert site into the msd_st_level_values
      IF(v_install_msd) THEN
        lv_sql_stmt :=  ' DECLARE errbuf varchar2(250);'
                 ||' retcode  number ;'
                 ||' BEGIN '
                 ||' MSD_CL_PRE_PROCESS.LOAD_SITE'
                 ||' (ERRBUF         =>  errbuf ,'
                 ||'  RETCODE        =>  retcode ,'
                 ||'  p_instance_id => :v_instance_id,'
                 ||'  p_batch_id    => :lv_batch_id);'
                 ||'  IF ( retcode = '||G_WARNING||') THEN '
                 ||'  update msc_apps_instances'
                 ||'  set dbs_ver = '||SYS_YES
                 ||'  where instance_id='||v_instance_id||';'
                 ||'  END IF;'
                 ||'  END ;';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

        EXECUTE IMMEDIATE lv_sql_stmt
                USING     v_instance_id,
                          lv_batch_id ;
     END IF ; -- v_install_msd
      COMMIT;
   END LOOP;

    --Validation for MSC_ST_SUB_INVENTORIES


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    -- UDK validations
    v_sql_stmt := 29;
    lv_sql_stmt :=
    'UPDATE   msc_st_sub_inventories mssi1 '
    ||' SET   process_flag  = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE EXISTS( SELECT 1 '
    ||'       FROM  msc_st_sub_inventories mssi2 '
    ||'       WHERE mssi2.sr_instance_code   = mssi1.sr_instance_code'
    ||'       AND   NVL(mssi2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'             NVL(mssi1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'       AND   mssi2.organization_code  = mssi1.organization_code'
    ||'       AND   mssi2.sub_inventory_code = mssi1.sub_inventory_code'
    ||'       AND   NVL(mssi2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'       GROUP BY sr_instance_code,organization_code,sub_inventory_code'
    ||'       HAVING COUNT(*) >1 )'
    ||' AND   mssi1.process_flag           = '||G_IN_PROCESS
    ||' AND   mssi1.sr_instance_code       = :v_instance_code'
    ||' AND   NVL(mssi1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    -- Duplicate UDK validation for XML message
    v_sql_stmt := 28;
    lv_sql_stmt :=
    'UPDATE    msc_st_sub_inventories mssi1 '
    ||' SET    process_flag  = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  message_id    < (SELECT MAX(message_id)'
    ||'        FROM  msc_st_sub_inventories mssi2'
    ||'        WHERE mssi2.sr_instance_code   = mssi1.sr_instance_code '
    ||'        AND   NVL(mssi2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mssi1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   mssi2.organization_code  = mssi1.organization_code'
    ||'        AND   mssi2.sub_inventory_code = mssi1.sub_inventory_code'
    ||'        AND   mssi2.process_flag       = '||G_IN_PROCESS
    ||'        AND   NVL(mssi2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND    mssi1.process_flag      = '||G_IN_PROCESS
    ||' AND    mssi1.sr_instance_code  = :v_instance_code'
    ||' AND    NVL(mssi1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    lv_column_names :=
    'ORGANIZATION_CODE   ||''~''||'
    ||'SUB_INVENTORY_CODE||''~''||'
    ||'SR_INSTANCE_CODE  ||''~''||'
    ||'DESCRIPTION       ||''~''||'
    ||'DISABLE_DATE      ||''~''||'
    ||'NETTING_TYPE      ||''~''||'
    ||'DEMAND_CLASS      ||''~''||'
    ||'PROJECT_NUMBER    ||''~''||'
    ||'TASK_NUMBER       ||''~''||'
    ||'INVENTORY_ATP_CODE||''~''||'
    ||'COMPANY_NAME      ||''~''||'
    ||'DELETED_FLAG';


    -- Dividing records in batches based on batchsize

    LOOP
      v_sql_stmt := 29;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   DUAL;

      v_sql_stmt := 30;
      lv_sql_stmt :=
      'UPDATE msc_st_sub_inventories '
      ||' SET    batch_id                       = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN  c5(lv_batch_id);
      FETCH c5 BULK COLLECT INTO lb_rowid;
      CLOSE c5;

      v_sql_stmt := 31;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        UPDATE msc_st_sub_inventories
        SET    st_transaction_id =  msc_st_sub_inventories_s.NEXTVAL ,
               refresh_id        = v_refresh_id,
               last_update_date  = v_current_date,
               last_updated_by   = v_current_user,
               creation_date     = v_current_date,
               created_by        = v_current_user
        WHERE  rowid             = lb_rowid(j);


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_SUB_INVENTORIES');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Deletion is not allowed for this table
      v_sql_stmt := 32;
      lv_sql_stmt :=
      'UPDATE       msc_st_sub_inventories '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check DELETE_FLAG column has valid value or not and if not set it to SYS_NO
      -- Log error procedure inserts warning and also defaults the delete flag

      lv_where_str := ' AND NVL(deleted_flag,'||NULL_VALUE||') '
                      ||' NOT IN(1,2)';

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_SUB_INVENTORIES',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'DELETED_FLAG',
                         p_debug             => v_debug,
                         p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SUB_INVENTORY_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where subinventory_code is NULL
      v_sql_stmt := 33;
      lv_sql_stmt :=
      'UPDATE    msc_st_sub_inventories '
      ||' SET    process_flag      = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE  sr_instance_code  = :v_instance_code'
      ||' AND    batch_id          = :lv_batch_id'
      ||' AND    process_flag      = '||G_IN_PROCESS
      ||' AND    NVL(sub_inventory_code,'||''''||NULL_CHAR||''''||')'
      ||'        = '||''''||NULL_CHAR||'''';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Update organization_id
      lv_return := msc_st_util.derive_partner_org_id
                        (p_table_name        => 'MSC_ST_SUB_INVENTORIES',
                         p_org_partner_name  => 'ORGANIZATION_CODE',
                         p_org_partner_id    => 'ORGANIZATION_ID',
                         p_instance_code     => v_instance_code,
                         p_partner_type      => G_ORGANIZATION,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_severity          => G_SEV_ERROR,
                         p_message_text      => lv_message_text,
                         p_debug             => v_debug,
                         p_row               => lv_column_names);

      if(lv_return <> 0) then
        RAISE ex_logging_err;
      end if;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'NETTING_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => 1);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Default netting_type  as 2 if NOT IN (1,2)
      lv_where_str := ' AND nvl(netting_type,'||NULL_VALUE||') NOT IN (1,2)';
      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_SUB_INVENTORIES',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'NETTING_TYPE',
                         p_debug             => v_debug,
                         p_default_value     => 1);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_SUB_INVENTORIES',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Set the processf flag as Valid and poulate instance_id
      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                        (p_table_name     => 'MSC_ST_SUB_INVENTORIES',
                         p_instance_id    => v_instance_id,
                         p_instance_code  => v_instance_code,
                         p_process_flag   => G_VALID,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug,
                         p_batch_id       => lv_batch_id);

      IF lv_return < 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- At the end calling  the LOG_ERROR for logging all errored out records

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name    =>'MSC_ST_SUB_INVENTORIES',
                         p_instance_code =>v_instance_code,
                         p_row           =>lv_column_names,
                         p_severity      =>G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    =>lv_error_text,
                         p_debug         => v_debug,
                         p_batch_id      => lv_batch_id  );

      IF(lv_return <> 0) then
        RAISE ex_logging_err;
      END IF;
      COMMIT;
    END LOOP;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Validation check for the table MSC_ST_LOCATION_ASSOCIATIONS

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    v_sql_stmt := 34;
    lv_sql_stmt :=
    'UPDATE    msc_st_location_associations mla1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 FROM msc_st_location_associations mla2 '
    ||'        WHERE mla2.sr_instance_code  = mla1.sr_instance_code'
    ||'        AND   NVL(mla2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mla1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   mla2.partner_name     = mla1.partner_name  '
    ||'        AND   mla2.partner_type     = mla1.partner_type  '
    ||'        AND   mla2.tp_site_code     = mla1.tp_site_code  '
    ||'        AND   mla2.location_code    = mla1.location_code'
    ||'        AND   mla2.organization_code = mla1.organization_code'
    ||'        AND   mla2.process_flag     = mla1.process_flag  '
    ||'        AND   NVL(mla2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'        GROUP BY sr_instance_code,company_name,partner_name,'
    ||'              tp_site_code,location_code,partner_type,organization_code '
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    mla1.process_flag              = '||G_IN_PROCESS
    ||' AND    mla1.sr_instance_code          = :v_instance_code'
    ||' AND    NVL(mla1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 35;
    lv_sql_stmt :=
    'UPDATE    msc_st_location_associations mla1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  message_id   < ( SELECT max(message_id) '
    ||'        FROM msc_st_location_associations mla2 '
    ||'        WHERE mla2.sr_instance_code  = mla1.sr_instance_code'
    ||'        AND   NVL(mla2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mla1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   mla2.partner_name     = mla1.partner_name  '
    ||'        AND   mla2.partner_type     = mla1.partner_type  '
    ||'        AND   mla2.tp_site_code     = mla1.tp_site_code  '
    ||'        AND   mla2.location_code    = mla1.location_code'
    ||'        AND   mla2.organization_code = mla1.organization_code'
    ||'        AND   mla2.process_flag     = mla1.process_flag  '
    ||'        AND   NVL(mla2.message_id,'||NULL_VALUE||') <> '||NULL_VALUE||')'
    ||' AND   mla1.process_flag            = '||G_IN_PROCESS
    ||' AND   mla1.sr_instance_code        = :v_instance_code '
    ||' AND   NVL(mla1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_column_names :=
    'LOCATION_CODE       ||''~''||'
    ||'PARTNER_NAME      ||''~''||'
    ||'TP_SITE_CODE      ||''~''||'
    ||'PARTNER_TYPE      ||''~''||'
    ||'SR_INSTANCE_CODE  ||''~''||'
    ||'ORGANIZATION_CODE ||''~''||'
    ||'DELETED_FLAG      ||''~''||'
    ||'COMPANY_NAME ';


    -- Dividing records in batches based on batchsize
    LOOP
      v_sql_stmt := 36;
      SELECT       msc_st_batch_id_s.NEXTVAL
      INTO         lv_batch_id
      FROM         DUAL;

      v_sql_stmt := 37;
      lv_sql_stmt :=
      'UPDATE   msc_st_location_associations '
      ||' SET   batch_id                       = :lv_batch_id '
      ||' WHERE process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND   sr_instance_code               = :v_instance_code'
      ||' AND   NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND ;

      OPEN  c6(lv_batch_id);
      FETCH c6 BULK COLLECT INTO lb_rowid;
      CLOSE c6;

      v_sql_stmt := 38;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_location_associations
      SET  st_transaction_id = msc_st_location_associations_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_LOCATION_ASSOCIATIONS');

      -- Deletion is not allowed for this table
      v_sql_stmt := 39;
      lv_sql_stmt :=
      'UPDATE      msc_st_location_associations '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code =  :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check DELETE_FLAG column has valid value or not and if not set it to SYS_NO
      -- Log error procedure inserts warning and also defaults the delete flag

      lv_where_str := ' AND NVL(deleted_flag,'||NULL_VALUE||') '
                      ||' NOT IN(1,2)';

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_LOCATION_ASSOCIATIONS',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'DELETED_FLAG',
                         p_debug             => v_debug,
                         p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_NAME OR TP_SITE_CODE OR LOCATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where partner_name/tp_site_code/location_code is NULL
      v_sql_stmt := 40;
      lv_sql_stmt :=
      'UPDATE    msc_st_location_associations'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'         error_text   =   '||''''||lv_message_text||''''
      ||' WHERE  (NVL(partner_name,'||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''
      ||' OR     (partner_type <> 3 AND NVL(tp_site_code, '||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''||' ) '
      ||' OR     NVL(location_code, '||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''||' ) '
      ||' AND    batch_id                = :lv_batch_id'
      ||' AND    process_flag            = '||G_IN_PROCESS
      ||' AND    deleted_flag            = '||SYS_NO
      ||' AND    sr_instance_code        = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_TYPE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where partner_type NOT in (1,2,3)
      v_sql_stmt := 41;
      lv_sql_stmt :=
      'UPDATE    msc_st_location_associations'
      ||' SET    process_flag       = '||G_ERROR_FLG||','
      ||'        error_text   = '||''''||lv_message_text||''''
      ||' WHERE  sr_instance_code   = :v_instance_code'
      ||' AND    batch_id           = :lv_batch_id'
      ||' AND    process_flag       = '||G_IN_PROCESS
      ||' AND    partner_type NOT IN (1,2,3)' ;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Update organization_id
     lv_return :=msc_st_util.derive_partner_org_id
                      (p_table_name        =>'MSC_ST_LOCATION_ASSOCIATIONS',
                       p_org_partner_name  =>'ORGANIZATION_CODE',
                       p_org_partner_id    =>'ORGANIZATION_ID',
                       p_instance_code     => v_instance_code,
                       p_partner_type      => G_ORGANIZATION,
                       p_severity          => G_SEV_ERROR,
                       p_message_text      => lv_message_text,
                       p_batch_id          =>lv_batch_id,
                       p_debug             => v_debug,
                       p_error_text        =>lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     --Update sr_tp_id (organizations)
      v_sql_stmt := 41.1;
      lv_sql_stmt :=
      'UPDATE msc_st_location_associations mla'
      ||' SET    SR_TP_ID                       = ORGANIZATION_ID'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    partner_type                   = '||G_ORGANIZATION
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;





      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Update sr_tp_id(customer)
     lv_return :=msc_st_util.derive_partner_org_id
                      (p_table_name        =>'MSC_ST_LOCATION_ASSOCIATIONS',
                       p_org_partner_name  =>'PARTNER_NAME',
                       p_org_partner_id    =>'SR_TP_ID',
                       p_instance_code     => v_instance_code,
                       p_partner_type      => G_CUSTOMER,
                       p_batch_id          =>lv_batch_id,
                       p_debug             => v_debug,
                       p_error_text        =>lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Update sr_tp_id(supplier)
     lv_return :=msc_st_util.derive_partner_org_id
                      (p_table_name        =>'MSC_ST_LOCATION_ASSOCIATIONS',
                       p_org_partner_name  =>'PARTNER_NAME',
                       p_org_partner_id    =>'SR_TP_ID',
                       p_instance_code     => v_instance_code,
                       p_partner_type      => G_VENDOR,
                       p_severity          => G_SEV_ERROR,
                       p_message_text      => lv_message_text,
                       p_batch_id          => lv_batch_id,
                       p_debug             => v_debug,
                       p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'TP_SITE_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Derive sr_tp_site_id(Customer)
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                       (p_table_name        => 'MSC_ST_LOCATION_ASSOCIATIONS',
                        p_partner_name      => 'PARTNER_NAME',
                        p_partner_site_code => 'TP_SITE_CODE',
                        p_partner_site_id   => 'SR_TP_SITE_ID',
                        p_instance_code     => v_instance_code,
                        p_partner_type      => G_CUSTOMER,
                        p_severity          => G_SEV_ERROR,
                        p_message_text      => lv_message_text,
                        p_error_text        => lv_error_text,
                        p_batch_id          => lv_batch_id,
                        p_debug             => v_debug,
                        p_row               => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Derive sr_tp_site_id(Supplier)
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                       (p_table_name        => 'MSC_ST_LOCATION_ASSOCIATIONS',
                        p_partner_name      => 'PARTNER_NAME',
                        p_partner_site_code => 'TP_SITE_CODE',
                        p_partner_site_id   => 'SR_TP_SITE_ID',
                        p_instance_code     => v_instance_code,
                        p_partner_type      => G_VENDOR,
                        p_severity          => G_SEV_ERROR,
                        p_message_text      => lv_message_text,
                        p_error_text        => lv_error_text,
                        p_batch_id          => lv_batch_id,
                        p_debug             => v_debug,
                        p_row               => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      --Deriving location_id
      v_sql_stmt := 42;
      lv_sql_stmt :=
      'UPDATE msc_st_location_associations mla'
      ||' SET   location_id              = (SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1       = mla.sr_instance_code'
      ||'       AND    mls.char3       = mla.location_code'
      ||'       AND    mls.entity_name = ''LOCATION_ID'' )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

/*
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE AND LOCATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Error out the record if location_id is NULL
       v_sql_stmt := 43;
      lv_sql_stmt :=
      'UPDATE    msc_st_location_associations'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text   =   '||''''||lv_message_text||''''
      ||' WHERE  NVL(location_id,'||NULL_VALUE||')= '||NULL_VALUE
      ||' AND    batch_id                = :lv_batch_id'
      ||' AND    process_flag            = '||G_IN_PROCESS
      ||' AND    sr_instance_code        = :v_instance_code';

      IF V_DEBUG THEN
        msc_st_util.log_message(lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

  */





      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_LOCATION_ASSOCIATIONS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- generation location id's for new locations

      IF (v_install_msc) THEN   -- IF MSC installed then only do this
      OPEN  c14(lv_batch_id);
      FETCH c14 BULK COLLECT INTO lb_rowid ;

      IF c14%ROWCOUNT > 0  THEN
        v_sql_stmt := 43.1;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        UPDATE msc_st_location_associations
        SET    location_id  = msc_st_location_id_s.NEXTVAL
        WHERE  rowid          = lb_rowid(j);

        -- Insert record in LID
        v_sql_stmt := 43.2;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        INSERT INTO msc_local_id_setup
         (local_id,
          st_transaction_id,
          instance_id,
          entity_name,
          data_source_type,
          char1,
          char3,
          SOURCE_SR_TP_ID,
	  SOURCE_SR_TP_SITE_ID,
          last_update_date,
          last_updated_by,
          creation_date,
          created_by)
        SELECT
          location_id,
          st_transaction_id,
          v_instance_id,
          'LOCATION_ID',
          data_source_type,
          v_instance_code,
          location_code,
          SOURCE_SR_TP_ID,
	  SOURCE_SR_TP_SITE_ID,
          v_current_date,
          v_current_user,
          v_current_date,
          v_current_user
        FROM  msc_st_location_associations
        WHERE rowid            = lb_rowid(j);
      END IF;
      CLOSE C14;

      --Deriving location_id
      v_sql_stmt := 43.3;
      lv_sql_stmt :=
      'UPDATE msc_st_location_associations mla'
      ||' SET   location_id              = (SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1       = mla.sr_instance_code'
      ||'       AND    mls.char3       = mla.location_code'
      ||'       AND    mls.entity_name = ''LOCATION_ID'' )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

    END IF ; -- v_install_msc


      -- Update partner_site_id with location id for orgs
       v_sql_stmt := 43.4;
      lv_sql_stmt :=
      'UPDATE    msc_st_location_associations'
      ||' SET    partner_site_id            =  location_id'
      ||' WHERE  NVL(partner_site_id,'||NULL_VALUE||')= '||NULL_VALUE
      ||' AND    batch_id                = :lv_batch_id'
      ||' AND    partner_type            = '||G_ORGANIZATION
      ||' AND    process_flag            = '||G_IN_PROCESS
      ||' AND    sr_instance_code        = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      -- Set the process flag as Valid and populate instance_id
      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                        (p_table_name     => 'MSC_ST_LOCATION_ASSOCIATIONS',
                         p_instance_id    => v_instance_id,
                         p_instance_code  => v_instance_code,
                         p_process_flag   => G_VALID,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug,
                         p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- At the end calling  the LOG_ERROR for logging all
      -- errored out records.
      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name     => 'MSC_ST_LOCATION_ASSOCIATIONS',
                         p_instance_code  => v_instance_code,
                         p_row            => lv_column_names,
                         p_severity       => G_SEV_ERROR,
                         p_message_text   => NULL,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug,
                         p_batch_id       => lv_batch_id  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      COMMIT;
    END LOOP;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Validation check for the table MSC_ST_PARTNER_CONTACTS

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    v_sql_stmt := 45;
    lv_sql_stmt :=
    'UPDATE    msc_st_partner_contacts mpc1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 FROM msc_st_partner_contacts mpc2 '
    ||'        WHERE mpc2.sr_instance_code  = mpc1.sr_instance_code'
    ||'        AND   NVL(mpc2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mpc1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   mpc2.partner_name     = mpc1.partner_name  '
    ||'        AND   mpc2.partner_type     = mpc1.partner_type  '
    ||'        AND   mpc2.tp_site_code     = mpc1.tp_site_code  '
    ||'        AND   mpc2.process_flag     = mpc1.process_flag  '
    ||'        AND   NVL(mpc2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'        GROUP BY sr_instance_code,company_name,partner_name,'
    ||'              tp_site_code,partner_type '
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    mpc1.process_flag              = '||G_IN_PROCESS
    ||' AND    mpc1.sr_instance_code          = :v_instance_code'
    ||' AND    NVL(mpc1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 46;
    lv_sql_stmt :=
    'UPDATE    msc_st_partner_contacts mpc1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  message_id   < ( SELECT max(message_id) '
    ||'        FROM msc_st_partner_contacts mpc2 '
    ||'        WHERE mpc2.sr_instance_code  = mpc1.sr_instance_code'
    ||'        AND   NVL(mpc2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mpc1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   mpc2.partner_name     = mpc1.partner_name  '
    ||'        AND   mpc2.partner_type     = mpc1.partner_type  '
    ||'        AND   mpc2.tp_site_code     = mpc1.tp_site_code  '
    ||'        AND   mpc2.process_flag     = mpc1.process_flag  '
    ||'        AND   NVL(mpc2.message_id,'||NULL_VALUE||') <> '||NULL_VALUE||')'
    ||' AND   mpc1.process_flag            = '||G_IN_PROCESS
    ||' AND   mpc1.sr_instance_code        = :v_instance_code '
    ||' AND   NVL(mpc1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_column_names :=
    'PARTNER_NAME       ||''~''||'
    ||'TP_SITE_CODE     ||''~''||'
    ||'PARTNER_TYPE     ||''~''||'
    ||'NAME             ||''~''||'
    ||'SR_INSTANCE_CODE ||''~''||'
    ||'DISPLAY_NAME     ||''~''||'
    ||'EMAIL            ||''~''||'
    ||'FAX              ||''~''||'
    ||'DELETED_FLAG     ||''~''||'
    ||'COMPANY_NAME     ||''~''||'
    ||'ENABLED_FLAG ';


    -- Dividing records in batches based on batchsize
    LOOP
      v_sql_stmt := 47;
      SELECT       msc_st_batch_id_s.NEXTVAL
      INTO         lv_batch_id
      FROM         DUAL;

      v_sql_stmt := 48;
      lv_sql_stmt :=
      'UPDATE   msc_st_partner_contacts '
      ||' SET   batch_id                       = :lv_batch_id '
      ||' WHERE process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND   sr_instance_code               = :v_instance_code'
      ||' AND   NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND   rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND ;

      OPEN  c8(lv_batch_id);
      FETCH c8 BULK COLLECT INTO lb_rowid;
      CLOSE c8;

      v_sql_stmt := 49;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_partner_contacts
      SET  st_transaction_id = msc_st_partner_contacts_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);

/*
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_PARTNER_CONTACTS');

      -- Deletion is not allowed for this table
      v_sql_stmt := 50;
      lv_sql_stmt :=
      'UPDATE      msc_st_partner_contacts '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code =  :v_instance_code';

      IF V_DEBUG THEN
        msc_st_util.log_message(lv_sql_stmt);
      END IF;

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

  */


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check DELETE_FLAG column has valid value or not and if not set it to SYS_NO
      -- Log error procedure inserts warning and also defaults the delete flag

      lv_where_str := ' AND NVL(deleted_flag,'||NULL_VALUE||') '
                      ||' NOT IN(1,2)';

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_PARTNER_CONTACTS',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'DELETED_FLAG',
                         p_debug             => v_debug,
                         p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_NAME OR '
                                             ||'TP_SITE_CODE OR '
                                             ||'NAME ');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where partner_name/tp_site_code/name is NULL
      v_sql_stmt := 51;
      lv_sql_stmt :=
      'UPDATE    msc_st_partner_contacts'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'         error_text   =   '||''''||lv_message_text||''''
      ||' WHERE  (NVL(partner_name,'||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''
      ||' OR     NVL(tp_site_code, '||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''
      ||' OR     NVL(name,         '||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''||') '
      ||' AND    batch_id                = :lv_batch_id'
      ||' AND    process_flag            = '||G_IN_PROCESS
      ||' AND    deleted_flag            = '||SYS_NO
      ||' AND    sr_instance_code        = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_TYPE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where partner_type NOT in (1,2)
      v_sql_stmt := 52;
      lv_sql_stmt :=
      'UPDATE    msc_st_partner_contacts'
      ||' SET    process_flag       = '||G_ERROR_FLG||','
      ||'        error_text   = '||''''||lv_message_text||''''
      ||' WHERE  sr_instance_code   = :v_instance_code'
      ||' AND    batch_id           = :lv_batch_id'
      ||' AND    process_flag       = '||G_IN_PROCESS
      ||' AND    partner_type NOT IN (1,2)' ;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Update sr_tp_id(customer)
     lv_return :=msc_st_util.derive_partner_org_id
                      (p_table_name        =>'MSC_ST_PARTNER_CONTACTS',
                       p_org_partner_name  =>'PARTNER_NAME',
                       p_org_partner_id    =>'PARTNER_ID',
                       p_instance_code     => v_instance_code,
                       p_partner_type      => G_CUSTOMER,
                       p_batch_id          =>lv_batch_id,
                       p_debug             => v_debug,
                       p_error_text        =>lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Update sr_tp_id(supplier)
     lv_return :=msc_st_util.derive_partner_org_id
                      (p_table_name        =>'MSC_ST_PARTNER_CONTACTS',
                       p_org_partner_name  =>'PARTNER_NAME',
                       p_org_partner_id    =>'PARTNER_ID',
                       p_instance_code     => v_instance_code,
                       p_partner_type      => G_VENDOR,
                       p_severity          => G_SEV_ERROR,
                       p_message_text      => lv_message_text,
                       p_batch_id          => lv_batch_id,
                       p_debug             => v_debug,
                       p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'TP_SITE_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Derive sr_tp_site_id(Customer)
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                       (p_table_name        => 'MSC_ST_PARTNER_CONTACTS',
                        p_partner_name      => 'PARTNER_NAME',
                        p_partner_site_code => 'TP_SITE_CODE',
                        p_partner_site_id   => 'PARTNER_SITE_ID',
                        p_instance_code     => v_instance_code,
                        p_partner_type      => G_CUSTOMER,
                        p_error_text        => lv_error_text,
                        p_batch_id          => lv_batch_id,
                        p_debug             => v_debug,
                        p_row               => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Derive sr_tp_site_id(Supplier)
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                       (p_table_name        => 'MSC_ST_PARTNER_CONTACTS',
                        p_partner_name      => 'PARTNER_NAME',
                        p_partner_site_code => 'TP_SITE_CODE',
                        p_partner_site_id   => 'PARTNER_SITE_ID',
                        p_instance_code     => v_instance_code,
                        p_partner_type      => G_VENDOR,
                        p_severity          => G_SEV_ERROR,
                        p_message_text      => lv_message_text,
                        p_error_text        => lv_error_text,
                        p_batch_id          => lv_batch_id,
                        p_debug             => v_debug,
                        p_row               => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_PARTNER_CONTACTS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Set the process flag as Valid and populate instance_id
      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                        (p_table_name     => 'MSC_ST_PARTNER_CONTACTS',
                         p_instance_id    => v_instance_id,
                         p_instance_code  => v_instance_code,
                         p_process_flag   => G_VALID,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug,
                         p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- At the end calling  the LOG_ERROR for logging all
      -- errored out records.
      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name     => 'MSC_ST_PARTNER_CONTACTS',
                         p_instance_code  => v_instance_code,
                         p_row            => lv_column_names,
                         p_severity       => G_SEV_ERROR,
                         p_message_text   => NULL,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug,
                         p_batch_id       => lv_batch_id  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      COMMIT;
    END LOOP;


    --Validation for GROUPS IS

    lv_return := MSC_ST_util.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 52;
    lv_sql_stmt :=
    ' UPDATE   MSC_ST_GROUPS msu1'
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  message_id <  (SELECT MAX(message_id)'
    ||'        FROM  MSC_ST_GROUPS msu2'
    ||'        where msu2.group_name        = msu1.group_name '
    ||'        AND   msu2.process_flag      <> '||G_ERROR_FLG
    ||'        AND   NVL(msu2.message_id,'||NULL_VALUE||')<>'||NULL_VALUE||')'
    ||' AND    msu1.process_flag     = '||G_IN_PROCESS
    ||' AND    msu1.sr_instance_code = :v_instance_code'
    ||' AND    NVL(msu1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_return := MSC_ST_util.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    v_sql_stmt := 53;
    lv_sql_stmt :=
    ' UPDATE   MSC_ST_GROUPS msu1'
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS( SELECT 1 '
    ||'        FROM   MSC_ST_GROUPS msu2'
    ||'        WHERE  msu2.group_name                       =  msu1.group_name'
    ||'        AND    msu2.process_flag                     <> '||G_ERROR_FLG
    ||'        AND    NVL(msu2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'        AND    msu2.rowid                            <> msu1.rowid)'
    ||' AND    msu1.process_flag     = '||G_IN_PROCESS
    ||' AND    msu1.sr_instance_code = :v_instance_code '
    ||' AND    NVL(msu1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_column_names :=
    'GROUP_NAME	                ||''~''||'
    ||'	DESCRIPTION             ||''~''||'
    ||'	GROUP_TYPE              ||''~''||'
    ||'	CONTACT_USER_NAME       ||''~''||'
    ||'	CONTRACT_DOC_URL        ||''~''||'
    ||'	EFFECTIVE_DATE	        ||''~''||'
    ||'	DISABLE_DATE	        ||''~''||'
    ||'	CONTEXT		        ||''~''||'
    ||'	ATTRIBUTE1              ||''~''||'
    ||'	ATTRIBUTE2              ||''~''||'
    ||'	ATTRIBUTE3              ||''~''||'
    ||'	ATTRIBUTE4              ||''~''||'
    ||'	ATTRIBUTE5              ||''~''||'
    ||'	ATTRIBUTE6              ||''~''||'
    ||'	ATTRIBUTE7              ||''~''||'
    ||'	ATTRIBUTE8              ||''~''||'
    ||'	ATTRIBUTE9              ||''~''||'
    ||'	ATTRIBUTE10             ||''~''||'
    ||'	ATTRIBUTE11             ||''~''||'
    ||'	ATTRIBUTE12             ||''~''||'
    ||'	ATTRIBUTE13             ||''~''||'
    ||'	ATTRIBUTE14             ||''~''||'
    ||'	ATTRIBUTE15             ||''~''||'
    ||'	SR_INSTANCE_CODE        ||''~''||'
    ||'	DELETED_FLAG  '          ;


    -- Dividing records in batches based on batchsize
    LOOP
      v_sql_stmt := 54;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 55;
      lv_sql_stmt :=
      ' UPDATE   MSC_ST_GROUPS '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

	-- updation of WHO columns

      OPEN  c9(lv_batch_id);
      FETCH c9 BULK COLLECT INTO lb_rowid;
      CLOSE c9;

      v_sql_stmt := 56;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE MSC_ST_GROUPS
      SET  st_transaction_id = msc_st_groups_s.NEXTVAL,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);

      -- Set the  message
      lv_return := MSC_ST_util.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_GROUPS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
       END IF;

      --Deletion is not allowed on this table.
      v_sql_stmt := 57;
      lv_sql_stmt :=
      ' UPDATE     msc_st_groups '
      ||' SET      process_flag     ='||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      -- Set the message for deleted flag

      lv_return :=    MSC_ST_util.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check DELETED_FLAG column has valid value or not and
      -- if not set it to SYS_NO

      lv_where_str :=
      ' AND NVL(deleted_flag,'||NULL_VALUE||') NOT IN(1,2)';

      lv_return := MSC_ST_util.LOG_ERROR
                    (p_table_name        => 'MSC_ST_GROUPS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DELETED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Set the error message for invalid group type

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'GROUP_TYPE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      -- error out record with GROUP_TYPE NOT IN (1,2)

      v_sql_stmt := 58;

      lv_sql_Stmt:=
      'UPDATE    msc_st_groups '
      ||' SET    process_flag        ='||G_ERROR_FLG||','
      ||'        error_text          = '||''''||lv_message_text||''''
      ||' WHERE  NVL(group_type,'||NULL_VALUE||')  NOT IN (1,2) '
      ||' AND    sr_instance_code    = :v_instance_code'
      ||' AND    process_flag        ='|| G_IN_PROCESS
      ||' AND    batch_id            = :lv_batch_id';


           MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


      -- The following values are mandatory in MSC_GROUPS
      -- 1.Group name
      -- 2.Effective Date
      -- 3.Contact Doc URL
      -- 4.Group Owner Id.

      lv_return :=
      MSC_ST_util.GET_ERROR_MESSAGE (p_app_short_name    => 'MSC',
                                         p_error_code        => 'MSC_PP_COL_VAL_NULL',
               	                         p_message_text      => lv_message_text,
                                   	 p_error_text        => lv_error_text,
                      	                 p_token1            => 'COLUMN_NAME',
                                         p_token_value1      => 'GROUP_NAME OR '
                                                             ||' EFFECTIVE_DATE OR '
                                                             ||' CONTRACT_DOC_URL OR '
                                                             ||' GROUP_OWNER_ID ');

       IF lv_return <> 0 THEN
         RAISE ex_logging_err;
       END IF;


      v_sql_stmt := 59;

      lv_sql_stmt :=
      ' UPDATE  MSC_ST_GROUPS '
      ||' SET   process_flag        = '||G_ERROR_FLG||','
      ||'       error_text          = '||''''||lv_message_text||''''
      ||' WHERE (effective_date IS NULL  '
      ||' OR    group_name      IS NULL  '
      ||' OR    contract_doc_url IS NULL  '
      ||' OR    group_owner_id  IS NULL) '
      ||' AND   batch_id            = :lv_batch_id'
      ||' AND   process_flag        = '||G_IN_PROCESS
      ||' AND   sr_instance_code    = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      -- Set the error message for  DISABLE_DATE should be greater than EFFECTIVE_DATE

      lv_return := MSC_ST_util.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_END_GT_ST_DATE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     v_sql_stmt := 60;

     lv_sql_stmt :=
      ' UPDATE  MSC_ST_GROUPS '
      ||' SET   process_flag        = '||G_ERROR_FLG||','
      ||'       error_text          = '||''''||lv_message_text||''''
      ||' WHERE effective_date      > disable_date'
      ||' AND   disable_date        IS NOT NULL'
      ||' AND   batch_id            = :lv_batch_id'
      ||' AND   process_flag        = '||G_IN_PROCESS
      ||' AND   sr_instance_code    = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;



    --Derive contact_user_id

      v_sql_stmt := 61;
      lv_sql_stmt :=
      'UPDATE    msc_st_groups msg'
      ||' SET    contact_user_id  = (select user_id '
      ||'                        from   fnd_user fu'
      ||'                        where  UPPER(fu.user_name) = UPPER(msg.contact_user_name)) '
      ||' WHERE  contact_user_name IS NOT NULL'
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    sr_instance_code =  :v_instance_code'
      ||' AND    process_flag     = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      -- Error out the invalid Contact User Name

      lv_return := MSC_ST_util.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CONTACT_USER_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Update the record as errored out record

      v_sql_stmt := 62;
      lv_sql_stmt :=
      'UPDATE    MSC_ST_GROUPS '
      ||' SET    process_flag  = '||G_ERROR_FLG||','
      ||'        error_text    = '||''''||lv_message_text||''''
      ||' WHERE  contact_user_name IS NOT NULL '
      ||' AND    contact_user_id   IS NULL '
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    sr_instance_code =  :v_instance_code'
      ||' AND    process_flag     = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      --DERIVE GROUP_ID

      lv_return :=  MSC_ST_util.DERIVE_GROUP_ID
                     (p_table_name    =>'MSC_ST_GROUPS',
                      p_grp_col_name  => 'GROUP_NAME',
                      p_grp_col_id   => 'GROUP_ID',
                      p_instance_code => v_instance_code,
                      p_instance_id   => v_instance_id,
                      p_batch_id      => lv_batch_id,
                      p_debug         => v_debug,
                      p_severity      => G_SEV_ERROR,
                      p_error_text    => lv_error_text,
                      p_row           => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      select fnd_global.user_id into lv_user_id from dual;

    IF NOT MSC_ST_util.IS_OPERATOR(lv_user_id) THEN
      lv_return := MSC_ST_util.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'GROUP_OWNER_ID');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 63;
      lv_sql_stmt :=
      'UPDATE    MSC_ST_GROUPS msg'
      ||' SET    process_flag  = '||G_ERROR_FLG||','
      ||'        error_text    = '||''''||lv_message_text||''''
      ||' WHERE  EXISTS(SELECT 1 '
      ||'               FROM MSC_GROUPS mg'
      ||'               where  mg.GROUP_OWNER_ID <> msg.GROUP_OWNER_ID '
      ||'               AND    mg.group_id       =  msg.group_id )'
      ||' AND    group_id IS NOT NULL'
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    sr_instance_code =  :v_instance_code'
      ||' AND    process_flag     = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;
    END IF;

      --Call to customised validation.

      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_GROUPS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Generate group_id for the first time

      OPEN c10(lv_batch_id);
      FETCH c10 BULK COLLECT INTO lb_rowid ;

      IF c10%ROWCOUNT > 0  THEN
        v_sql_stmt := 64;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        UPDATE MSC_ST_GROUPS
        SET    group_id    = msc_st_group_id_s.NEXTVAL
        WHERE  rowid        = lb_rowid(j);

        v_sql_stmt := 65;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        INSERT INTO msc_local_id_setup
        (local_id,
         st_transaction_id,
         instance_id,
         entity_name,
         data_source_type,
         char1,
         last_update_date,
         last_updated_by,
         creation_date,
         created_by)
        SELECT
         group_id,
         st_transaction_id,
         v_instance_id,
         'GROUP_ID',
         data_source_type,
         group_name,
         v_current_date,
         v_current_user,
         v_current_date,
         v_current_user
        FROM  MSC_ST_GROUPS
        WHERE rowid = lb_rowid(j);

      END IF;
      CLOSE c10 ;


      -- Set the process flag as Valid and derive sr_instance_id

      lv_return := MSC_ST_util.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_GROUPS',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Inserting all the errored out records into MSC_ERRORS

      lv_return := MSC_ST_util.LOG_ERROR
                   (p_table_name        => 'MSC_ST_GROUPS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_error_text        => lv_error_text,
                    p_message_text      => NULL,
                    p_batch_id          => lv_batch_id);


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      OPEN  c11(lv_batch_id);
      FETCH c11 BULK COLLECT INTO
                  lb_GROUP_ID,
                  lb_GROUP_NAME,
                  lb_DESCRIPTION,
                  lb_GROUP_TYPE,
                  lb_GROUP_OWNER_ID,
                  lb_CONTACT_USER_ID,
                  lb_CONTRACT_DOC_URL,
                  lb_EFFECTIVE_DATE,
                  lb_DISABLE_DATE,
                  lb_LAST_UPDATE_DATE,
                  lb_LAST_UPDATED_BY,
                  lb_LAST_UPDATE_LOGIN,
                  lb_CONTEXT,
                  lb_ATTRIBUTE1,
                  lb_ATTRIBUTE2,
                  lb_ATTRIBUTE3,
                  lb_ATTRIBUTE4,
                  lb_ATTRIBUTE5,
                  lb_ATTRIBUTE6,
                  lb_ATTRIBUTE7,
                  lb_ATTRIBUTE8,
                  lb_ATTRIBUTE9,
                  lb_ATTRIBUTE10,
                  lb_ATTRIBUTE11,
                  lb_ATTRIBUTE12,
                  lb_ATTRIBUTE13,
                  lb_ATTRIBUTE14,
                  lb_ATTRIBUTE15;



      IF c11%ROWCOUNT > 0  THEN
        v_sql_stmt := 66;

      FORALL j IN lb_GROUP_ID.FIRST..lb_GROUP_ID.LAST
        UPDATE msc_groups
        SET    description      = lb_description(j),
               group_type = lb_group_type(j),
               owner_contact	= lb_contact_user_id(j),
               contract_doc_url = lb_contract_doc_url(j),
               effective_date = lb_effective_date(j),
               disable_date	= lb_disable_date(j),
               last_update_date = v_current_date,
               last_updated_by	= v_current_user,
               context	        = lb_context(j),
               attribute1       = lb_attribute1(j),
               attribute2       = lb_attribute2(j),
               attribute3       = lb_attribute3(j),
               attribute4       = lb_attribute4(j),
               attribute5       = lb_attribute5(j),
               attribute6       = lb_attribute6(j),
               attribute7       = lb_attribute7(j),
               attribute8       = lb_attribute8(j),
               attribute9       = lb_attribute9(j),
               attribute10      = lb_attribute10(j),
               attribute11      = lb_attribute11(j),
               attribute12      = lb_attribute12(j),
               attribute13      = lb_attribute13(j),
               attribute14      = lb_attribute14(j),
               attribute15      = lb_attribute15(j)
        WHERE  group_id         = lb_group_id(j);
	end if;
CLOSE c11;

    --Inserts the valid records into the ODS table, Since the collection program
     --doesn't collect this entity incrementally and whereras post-processor always
     --runs in the incremental mode.

     v_sql_stmt := 67;
     lv_sql_stmt :=
		     'INSERT INTO MSC_GROUPS'
		||'(	GROUP_ID	,'
		||'	GROUP_NAME	,'
		||'	DESCRIPTION	,'
		||'	GROUP_TYPE	,'
		||'	GROUP_OWNER_ID	,'
		||'	OWNER_CONTACT	,'
		||'	CONTRACT_DOC_URL,'
		||'	EFFECTIVE_DATE	,'
		||'	DISABLE_DATE	,'
		||'	CREATION_DATE	,'
		||'	CREATED_BY	,'
		||'	LAST_UPDATE_DATE,'
		||'	LAST_UPDATED_BY	,'
		||'	LAST_UPDATE_LOGIN,'
		||'	CONTEXT	,'
		||'	ATTRIBUTE1	,'
		||'	ATTRIBUTE2	,'
		||'	ATTRIBUTE3	,'
		||'	ATTRIBUTE4	,'
		||'	ATTRIBUTE5	,'
		||'	ATTRIBUTE6	,'
		||'	ATTRIBUTE7	,'
		||'	ATTRIBUTE8	,'
		||'	ATTRIBUTE9	,'
		||'	ATTRIBUTE10	,'
		||'	ATTRIBUTE11	,'
		||'	ATTRIBUTE12	,'
		||'	ATTRIBUTE13	,'
		||'	ATTRIBUTE14	,'
		||'	ATTRIBUTE15	)'
		||' SELECT'
		||'	GROUP_ID	,'
		||'	GROUP_NAME	,'
		||'	DESCRIPTION	,'
		||'	GROUP_TYPE	,'
		||'	GROUP_OWNER_ID	,'
		--||'	CONTACT_USER_NAME,'
		||'	CONTACT_USER_ID	,'
		||'	CONTRACT_DOC_URL,'
		||'	EFFECTIVE_DATE	,'
		||'	DISABLE_DATE	,'
		||'	CREATION_DATE	,'
		||'	CREATED_BY	,'
		||'	LAST_UPDATE_DATE,'
		||'	LAST_UPDATED_BY	,'
		||'	LAST_UPDATE_LOGIN,'
		||'	CONTEXT	,'
		||'	ATTRIBUTE1	,'
		||'	ATTRIBUTE2	,'
		||'	ATTRIBUTE3	,'
		||'	ATTRIBUTE4	,'
		||'	ATTRIBUTE5	,'
		||'	ATTRIBUTE6	,'
		||'	ATTRIBUTE7	,'
		||'	ATTRIBUTE8	,'
		||'	ATTRIBUTE9	,'
		||'	ATTRIBUTE10	,'
		||'	ATTRIBUTE11	,'
		||'	ATTRIBUTE12	,'
		||'	ATTRIBUTE13	,'
		||'	ATTRIBUTE14	,'
		||'	ATTRIBUTE15	'
		||' FROM   MSC_ST_GROUPS msg'
		||' WHERE  sr_instance_code = :sr_instance_code'
		||' AND    batch_id         = :lv_batch_id'
		||' AND    process_flag     = '||G_VALID
                ||' AND    NOT EXISTS( SELECT 1 '
                ||'                    FROM   MSC_GROUPS mg'
                ||'                    WHERE  mg.group_id = msg.group_id)';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;
      COMMIT;
    END LOOP;

        --Validation for GROUP COMPANIES IS

    lv_return := MSC_ST_util.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 68;
    lv_sql_stmt :=
    ' UPDATE   msc_st_group_companies mgc1'
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  message_id <  (SELECT MAX(message_id)'
    ||'                       FROM   msc_st_group_companies mgc2'
    ||'                       WHERE  mgc2.group_name    = mgc1.group_name '
    ||'                       AND    mgc2.company_name  = mgc1.company_name '
    ||'                       AND    mgc2.process_flag  <> '||G_ERROR_FLG
    ||'                       AND    NVL(mgc2.message_id,'||NULL_VALUE||')<>'||NULL_VALUE||')'
    ||' AND    mgc1.process_flag                     =  '||G_IN_PROCESS
    ||' AND    mgc1.sr_instance_code                 = :v_instance_code'
    ||' AND    NVL(mgc1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_return := MSC_ST_util.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    v_sql_stmt := 69;

    lv_sql_stmt :=
    ' UPDATE   msc_st_group_companies mgc1'
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS( SELECT 1 '
    ||'        FROM   msc_st_group_companies mgc2'
    ||'        WHERE  mgc2.group_name    = mgc1.group_name '
    ||'        AND    mgc2.company_name  = mgc1.company_name '
    ||'        AND    mgc2.process_flag  <> '||G_ERROR_FLG
    ||'        AND    NVL(mgc2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'        AND    mgc2.rowid         <> mgc1.rowid)'
    ||' AND    mgc1.process_flag                     = '||G_IN_PROCESS
    ||' AND    mgc1.sr_instance_code                 = :v_instance_code '
    ||' AND    NVL(mgc1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_column_names :=
    '	GROUP_NAME            ||''~''||'
    ||'	 COMPANY_NAME         ||''~''||'
    ||'	 EFFECTIVE_DATE       ||''~''||'
    ||'	 DISABLE_DATE         ||''~''||'
    ||'	 CONTACT_USER_NAME    ||''~''||'
    ||'	 CONTEXT              ||''~''||'
    ||'	 ATTRIBUTE1           ||''~''||'
    ||'	 ATTRIBUTE2           ||''~''||'
    ||'	 ATTRIBUTE3           ||''~''||'
    ||'	 ATTRIBUTE4           ||''~''||'
    ||'	 ATTRIBUTE5           ||''~''||'
    ||'	 ATTRIBUTE6           ||''~''||'
    ||'	 ATTRIBUTE7           ||''~''||'
    ||'	 ATTRIBUTE8           ||''~''||'
    ||'	 ATTRIBUTE9           ||''~''||'
    ||'	 ATTRIBUTE10          ||''~''||'
    ||'	 ATTRIBUTE11          ||''~''||'
    ||'	 ATTRIBUTE12          ||''~''||'
    ||'	 ATTRIBUTE13          ||''~''||'
    ||'	 ATTRIBUTE14          ||''~''||'
    ||'	 ATTRIBUTE15          ||''~''||'
    ||'	 SR_INSTANCE_CODE';

    -- Dividing records in batches based on batchsize

    LOOP
      v_sql_stmt := 70;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   DUAL;

      v_sql_stmt := 71;
      lv_sql_stmt :=
      'UPDATE    msc_st_group_companies '
      ||' SET    batch_id                       = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND ;

      -- Updation of WHO columns

      OPEN  c12(lv_batch_id);
      FETCH c12 BULK COLLECT INTO lb_rowid;
      CLOSE c12;

      v_sql_stmt := 72;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_group_companies
      SET  st_transaction_id = msc_st_group_companies_s.NEXTVAL,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);


      -- Set the  message for no deletion is  allowed.

      lv_return := MSC_ST_util.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_GROUP_COMPANIES');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
       END IF;

      --Deletion is not allowed on this table.
      v_sql_stmt := 73;
      lv_sql_stmt :=
      ' UPDATE     msc_st_group_companies '
      ||' SET      process_flag     ='||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      -- Set the message for deleted flag

      lv_return :=    MSC_ST_util.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check DELETED_FLAG column has valid value or not and
      -- if not set it to SYS_NO

      lv_where_str :=
      ' AND NVL(deleted_flag,'||NULL_VALUE||') NOT IN(1,2)';

      lv_return := MSC_ST_util.LOG_ERROR
                    (p_table_name        => 'MSC_ST_GROUP_COMPANIES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DELETED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Effective Date is a mandatory column in MSC_GROUP_COMPANIES , set error message
      lv_return :=
      MSC_ST_util.GET_ERROR_MESSAGE (p_app_short_name    => 'MSC',
                                         p_error_code        => 'MSC_PP_COL_VAL_NULL',
               	                         p_message_text      => lv_message_text,
                                   	 p_error_text        => lv_error_text,
                      	                 p_token1            => 'COLUMN_NAME',
                                         p_token_value1      => 'EFFECTIVE_DATE');

       IF lv_return <> 0 THEN
         RAISE ex_logging_err;
       END IF;


      v_sql_stmt := 74;

      lv_sql_stmt :=
      ' UPDATE  msc_st_group_companies '
      ||' SET   process_flag        = '||G_ERROR_FLG||','
      ||'       error_text          = '||''''||lv_message_text||''''
      ||' WHERE effective_date IS NULL  '
      ||' AND   batch_id            = :lv_batch_id'
      ||' AND   process_flag        = '||G_IN_PROCESS
      ||' AND   sr_instance_code    = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      -- Set the error message for  DISABLE_DATE should be greater than EFFECTIVE_DATE

      lv_return := MSC_ST_util.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_END_GT_ST_DATE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 75;

      lv_sql_stmt :=
      ' UPDATE  msc_st_group_companies '
      ||' SET   process_flag        = '||G_ERROR_FLG||','
      ||'       error_text          = '||''''||lv_message_text||''''
      ||' WHERE effective_date      > disable_date'
      ||' AND   disable_date        IS NOT NULL'
      ||' AND   batch_id            = :lv_batch_id'
      ||' AND   process_flag        = '||G_IN_PROCESS
      ||' AND   sr_instance_code    = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      --DERIVE GROUP_ID

      lv_return := MSC_ST_util.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'GROUP_NAME');


	 lv_return :=  MSC_ST_util.DERIVE_GROUP_ID
	                     (p_table_name    =>'MSC_ST_GROUP_COMPANIES',
	                      p_grp_col_name  => 'GROUP_NAME',
	                      p_grp_col_id   => 'GROUP_ID',
	                      p_instance_code => v_instance_code,
	                      p_instance_id   => v_instance_id,
	                      p_batch_id      => lv_batch_id,
	                      p_debug         => v_debug,
	                      p_severity      => G_SEV_ERROR,
	                      p_error_text    => lv_error_text,
	                      p_row           => lv_column_names);

	    IF lv_return <> 0 THEN
	        RAISE ex_logging_err;
	    END IF;



      -- Only group owner or operator can update

     select fnd_global.user_id into lv_user_id from dual;

      lv_return := MSC_ST_util.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'Posting_party_id');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

-- changes

    IF NOT MSC_ST_util.IS_OPERATOR(lv_user_id) THEN

      v_sql_stmt := 76;
      lv_sql_stmt :=
      'UPDATE    msc_st_group_companies msg'
      ||' SET    process_flag  = '||G_ERROR_FLG||','
      ||'        error_text    = '||''''||lv_message_text||''''
      ||' WHERE  NOT EXISTS(SELECT 1 '
      ||'               FROM msc_groups mg'
      ||'               where  mg.group_owner_id = msg.posting_party_id '
      ||'               AND    mg.group_id       =  msg.group_id '
      ||'               UNION '
      ||'               SELECT 1 '
      ||'               FROM   msc_st_groups ms'
      ||'               where  ms.group_owner_id = msg.posting_party_id '
      ||'               AND    ms.group_id       =  msg.group_id '
      ||'               AND    ms.process_flag   = '||G_VALID ||')'
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    sr_instance_code =  :v_instance_code'
      ||' AND    process_flag     = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;
  END IF;
    --Derive company_id

      v_sql_stmt := 77;
      lv_sql_stmt :=
      'UPDATE msc_st_group_companies msg '
      ||' SET    company_id = ( SELECT mc.company_id '
      ||'        FROM   msc_companies mc '
      ||'        WHERE  mc.company_name = msg.company_name  '
      ||'        AND    NVL(mc.disable_date,sysdate+1) > sysdate) '
      ||' WHERE  msg.sr_instance_code  = :v_instance_code'
      ||' AND    msg.batch_id          = :lv_batch_id'
      ||' AND    msg.process_flag      = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;

      -- Error out the invalid company Name

      lv_return := MSC_ST_util.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'COMPANY_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --Derive contact_user_id

      v_sql_stmt := 78;
      lv_sql_stmt :=
      'UPDATE    msc_st_group_companies msg'
      ||' SET    contact_user_id  = (select user_id '
      ||'                        from   fnd_user fu'
      ||'                        where  UPPER(fu.user_name) =UPPER( msg.contact_user_name)) '
      ||' WHERE  batch_id         =  :lv_batch_id'
      ||' AND    sr_instance_code =  :v_instance_code'
      ||' AND    process_flag     = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

-- Error out the invalid Contact User Name

      lv_return := MSC_ST_util.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CONTACT_USER_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Update the record as errored out record

	      v_sql_stmt := 79;
	      lv_sql_stmt :=
	      'UPDATE    msc_st_group_companies '
	      ||' SET    process_flag  = '||G_ERROR_FLG||','
	      ||'        error_text    = '||''''||lv_message_text||''''
	      ||' WHERE  contact_user_id   IS NULL '
	      ||' AND    batch_id         =  :lv_batch_id'
	      ||' AND    sr_instance_code =  :v_instance_code'
	      ||' AND    process_flag     = '||G_IN_PROCESS;

 lv_return := MSC_ST_util.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'CONTACT_USER_NAME,COMPANY_NAME',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_COMPANY_USERS',
                      p_token3            => 'CHILD_TABLE',
                      p_token_value3      => 'MSC_ST_GROUP_COMPANIES');

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Populating valid Contact user id

	    v_sql_stmt := 80;
	    lv_sql_stmt :=
	    '   UPDATE      msc_st_group_companies mgc'
	    ||' SET         process_flag = '||G_ERROR_FLG||','
	    ||'             error_text   = '||''''||lv_message_text||''''
	    ||' WHERE       NOT EXISTS (SELECT 1 '
	    ||'             FROM  msc_company_users mcu '
	    ||'             WHERE mcu.company_id  = mgc.company_id'
	    ||'             AND   mcu.user_id     = mgc.contact_user_id)'
	    ||' AND mgc.sr_instance_code   = :v_instance_code'
	    ||' AND mgc.batch_id           = :lv_batch_id'
	    ||' AND mgc.process_flag       = '||G_IN_PROCESS ;


          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code,
                      lv_batch_id;

      --Call to customised validation.

      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_GROUP_COMPANIES',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Set the process flag as Valid and derive sr_instance_id

      lv_return := MSC_ST_util.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_GROUP_COMPANIES',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Inserting all the errored out records into MSC_ERRORS

      lv_return := MSC_ST_util.LOG_ERROR
                   (p_table_name        => 'MSC_ST_GROUP_COMPANIES',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_error_text        => lv_error_text,
                    p_message_text      => NULL,
                    p_batch_id          => lv_batch_id);


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Updation of the record in msc_group_companies
      OPEN  c13(lv_batch_id);
      FETCH c13 BULK COLLECT INTO
                  lb_group_id,
                  lb_company_id,
                  lb_CONTACT_USER_ID,
                  lb_EFFECTIVE_DATE,
                  lb_DISABLE_DATE,
                  lb_CONTEXT,
                  lb_ATTRIBUTE1,
                  lb_ATTRIBUTE2,
                  lb_ATTRIBUTE3,
                  lb_ATTRIBUTE4,
                  lb_ATTRIBUTE5,
                  lb_ATTRIBUTE6,
                  lb_ATTRIBUTE7,
                  lb_ATTRIBUTE8,
                  lb_ATTRIBUTE9,
                  lb_ATTRIBUTE10,
                  lb_ATTRIBUTE11,
                  lb_ATTRIBUTE12,
                  lb_ATTRIBUTE13,
                  lb_ATTRIBUTE14,
                  lb_ATTRIBUTE15;

      IF c13%ROWCOUNT > 0  THEN
      v_sql_stmt := 81;
      FORALL j IN lb_GROUP_ID.FIRST..lb_GROUP_ID.LAST

        UPDATE msc_group_companies
        SET    contact_user	= lb_contact_user_id(j),
               effective_date	= lb_effective_date(j),
               disable_date	= lb_disable_date(j),
               last_update_date = v_current_date,
               last_updated_by	= v_current_user,
               context	        = lb_context(j),
               attribute1       = lb_attribute1(j),
               attribute2       = lb_attribute2(j),
               attribute3       = lb_attribute3(j),
               attribute4       = lb_attribute4(j),
               attribute5       = lb_attribute5(j),
               attribute6       = lb_attribute6(j),
               attribute7       = lb_attribute7(j),
               attribute8       = lb_attribute8(j),
               attribute9       = lb_attribute9(j),
               attribute10      = lb_attribute10(j),
               attribute11      = lb_attribute11(j),
               attribute12      = lb_attribute12(j),
               attribute13      = lb_attribute13(j),
               attribute14      = lb_attribute14(j),
               attribute15      = lb_attribute15(j)
        WHERE  group_id         = lb_group_id(J)
        AND    company_id       = lb_company_id(J);
	end if;
	CLOSE c13;

      --Inserts the valid records into the ODS table, Since the collection program
      --doesn't collect this entity incrementally and whereras post-processor always
      --runs in the incremental mode.

      v_sql_stmt := 82;
      lv_sql_stmt :=
		'INSERT INTO MSC_GROUP_COMPANIES'
		||'(	GROUP_ID	,'
		||'	COMPANY_ID	,'
		||'	EFFECTIVE_DATE	,'
		||'	DISABLE_DATE	,'
		||'	CONTACT_USER	,'
		||'	CREATION_DATE	,'
		||'	CREATED_BY	,'
		||'	LAST_UPDATE_DATE,'
		||'	LAST_UPDATED_BY	,'
		||'	LAST_UPDATE_LOGIN,'
		||'	CONTEXT	,'
		||'	ATTRIBUTE1	,'
		||'	ATTRIBUTE2	,'
		||'	ATTRIBUTE3	,'
		||'	ATTRIBUTE4	,'
		||'	ATTRIBUTE5	,'
		||'	ATTRIBUTE6	,'
		||'	ATTRIBUTE7	,'
		||'	ATTRIBUTE8	,'
		||'	ATTRIBUTE9	,'
		||'	ATTRIBUTE10	,'
		||'	ATTRIBUTE11	,'
		||'	ATTRIBUTE12	,'
		||'	ATTRIBUTE13	,'
		||'	ATTRIBUTE14	,'
		||'	ATTRIBUTE15	)'
		||'     SELECT'
		||'	GROUP_ID	,'
		||'	COMPANY_ID	,'
		||'	EFFECTIVE_DATE	,'
		||'	DISABLE_DATE	,'
		||'	CONTACT_USER_id ,'
		||'	CREATION_DATE	,'
		||'	CREATED_BY	,'
		||'	LAST_UPDATE_DATE,'
		||'	LAST_UPDATED_BY	,'
		||'	LAST_UPDATE_LOGIN,'
		||'	CONTEXT	,'
		||'	ATTRIBUTE1	,'
		||'	ATTRIBUTE2	,'
		||'	ATTRIBUTE3	,'
		||'	ATTRIBUTE4	,'
		||'	ATTRIBUTE5	,'
		||'	ATTRIBUTE6	,'
		||'	ATTRIBUTE7	,'
		||'	ATTRIBUTE8	,'
		||'	ATTRIBUTE9	,'
		||'	ATTRIBUTE10	,'
		||'	ATTRIBUTE11	,'
		||'	ATTRIBUTE12	,'
		||'	ATTRIBUTE13	,'
		||'	ATTRIBUTE14	,'
		||'	ATTRIBUTE15	'
		||' FROM   msc_st_group_companies msg'
		||' WHERE  sr_instance_code = :sr_instance_code'
		||' AND    batch_id         = :lv_batch_id'
		||' AND    process_flag     = '||G_VALID
                ||' AND    NOT EXISTS( SELECT 1 '
                ||'                    FROM   msc_group_companies mgc'
                ||'                    WHERE  mgc.group_id   = msg.group_id '
                ||'                    AND    mgc.company_id = msg.company_id)';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;

      COMMIT;
   END LOOP;

   MODEL_ORG_SUPPLIER_CUSTOMER;

  EXCEPTION
    WHEN too_many_rows THEN
      lv_error_text  := substr('MSC_CL_PRE_PROCESS.LOAD_TRADING_PARTNERS '||'('
                      ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);

      ROLLBACK;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);

      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_TRADING_PARTNERS '||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);

      ROLLBACK;

  END LOAD_TRADING_PARTNERS ;

   /*==========================================================================+
  | DESCRIPTION  : This procedure performs validation and loads data into the |
  |                table msc_st_calendar_assignments.                         |
  +==========================================================================*/


  PROCEDURE LOAD_CALENDAR_ASSIGNMENTS IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid           RowidTab;
  lv_return          NUMBER;
  lv_error_text      VARCHAR2(250);
  lv_where_str       VARCHAR2(5000);
  lv_sql_stmt        VARCHAR2(5000);
  lv_column_names    VARCHAR2(5000);
  lv_batch_id        msc_st_calendar_assignments.batch_id%TYPE;
  lv_message_text    msc_errors.error_text%TYPE;

  ex_logging_err     EXCEPTION;

  CURSOR    c1(p_batch_id NUMBER) IS
    SELECT  rowid
    FROM    msc_st_calendar_assignments
    WHERE   process_flag     IN (G_IN_PROCESS,G_ERROR_FLG)
    AND     batch_id         = p_batch_id
    AND     sr_instance_code = v_instance_code;

 BEGIN

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;


    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 01;
    lv_sql_stmt :=
    ' UPDATE   msc_st_calendar_assignments msp1'
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  message_id <  (SELECT MAX(message_id)'
    ||'        FROM  msc_st_calendar_assignments msp2'
    ||'        WHERE msp2.sr_instance_code  = msp1.sr_instance_code'
    ||'        AND   NVL(msp2.company_name,  '   ||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msp1.company_name,  '   ||''''||NULL_CHAR||''''||')'
    ||'        AND   NVL(msp2.organization_code,  '   ||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msp1.organization_code,  '   ||''''||NULL_CHAR||''''||')'
    ||'        AND   NVL(msp2.partner_name,  '   ||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msp1.partner_name,  '   ||''''||NULL_CHAR||''''||')'
    ||'        AND   NVL(msp2.partner_site_code,  '   ||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msp1.partner_site_code,  '   ||''''||NULL_CHAR||''''||')'
    ||'        AND   NVL(msp2.carrier_partner_code,  '   ||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msp1.carrier_partner_code,  '   ||''''||NULL_CHAR||''''||')'
    ||'        AND   NVL(msp2.ship_method_code,  '   ||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msp1.ship_method_code,  '   ||''''||NULL_CHAR||''''||')'
    ||'        AND   msp2.calendar_type = msp1.calendar_type'
    ||'        AND   msp2.calendar_code = msp1.calendar_code'
    ||'        AND   NVL(msp2.partner_type,'||NULL_VALUE||') = NVL(msp1.partner_type,'||NULL_VALUE||')'
    ||'        AND   msp2.association_type = msp1.association_type'
    ||'        AND   msp2.process_flag = '||G_IN_PROCESS
    ||'        AND   NVL(msp2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND    msp1.process_flag     = '||G_IN_PROCESS
    ||' AND    msp1.sr_instance_code = :v_instance_code'
    ||' AND    NVL(msp1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;



      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

   lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.
    v_sql_stmt := 02;
    lv_sql_stmt :=
    ' UPDATE  msc_st_calendar_assignments msp1'
    ||' SET   process_flag  = '||G_ERROR_FLG||','
    ||'       error_text    = '||''''||lv_message_text||''''
    ||' WHERE EXISTS( SELECT 1 '
    ||'         FROM  msc_st_calendar_assignments msp2'
    ||'         WHERE msp2.sr_instance_code  = msp1.sr_instance_code'
    ||'        AND   NVL(msp2.company_name,  '   ||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msp1.company_name,  '   ||''''||NULL_CHAR||''''||')'
    ||'        AND   NVL(msp2.organization_code,  '   ||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msp1.organization_code,  '   ||''''||NULL_CHAR||''''||')'
    ||'        AND   NVL(msp2.partner_name,  '   ||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msp1.partner_name,  '   ||''''||NULL_CHAR||''''||')'
    ||'        AND   NVL(msp2.partner_site_code,  '   ||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msp1.partner_site_code,  '   ||''''||NULL_CHAR||''''||')'
    ||'        AND   NVL(msp2.carrier_partner_code,  '   ||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msp1.carrier_partner_code,  '   ||''''||NULL_CHAR||''''||')'
    ||'        AND   NVL(msp2.ship_method_code,  '   ||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msp1.ship_method_code,  '   ||''''||NULL_CHAR||''''||')'
    ||'        AND   msp2.calendar_type = msp1.calendar_type'
    ||'        AND   msp2.calendar_code = msp1.calendar_code'
    ||'        AND   NVL(msp2.partner_type,'||NULL_VALUE||') = NVL(msp1.partner_type,'||NULL_VALUE||')'
    ||'        AND   msp2.association_type = msp1.association_type'
    ||'        AND   msp2.process_flag = '||G_IN_PROCESS
    ||'        AND   NVL(msp2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'        AND   msp2.rowid <> msp1.rowid)'
    ||' AND   msp1.process_flag     = '||G_IN_PROCESS
    ||' AND   msp1.sr_instance_code = :v_instance_code'
    ||' AND   NVL(msp1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;



      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_column_names :=
    'CALENDAR_CODE             ||''~''||'
    ||'ORGANIZATION_CODE       ||''~''||'
    ||'ASSOCIATION_TYPE        ||''~''||'
    ||'CALENDAR_TYPE           ||''~''||'
    ||'PARTNER_NAME            ||''~''||'
    ||'PARTNER_SITE_CODE       ||''~''||'
    ||'CARRIER_PARTNER_CODE    ||''~''||'
    ||'SR_INSTANCE_CODE        ||''~''||'
    ||'COMPANY_NAME';

    LOOP
      v_sql_stmt := 03;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      'UPDATE msc_st_calendar_assignments '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_calendar_assignments
      SET    st_transaction_id   = msc_st_calendar_assignments_s.NEXTVAL,
             refresh_id          = v_refresh_id,
             last_update_date    = v_current_date,
             last_updated_by     = v_current_user,
             creation_date       = v_current_date,
             created_by          = v_current_user
      WHERE  rowid           = lb_rowid(j);

      -- set the error message

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      ' AND NVL(deleted_flag,'||NULL_VALUE||') '
      ||' NOT IN(1,2)';
      --Log a warning for those records where the deleted_flag has a value other
      --than SYS_NO
      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_CALENDAR_ASSIGNMENTS',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'DELETED_FLAG',
                      p_debug             => v_debug,
                      p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CALENDAR_TYPE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_sql_stmt :=
      'UPDATE    msc_st_calendar_assignments '
      ||' SET    process_flag  = '||G_ERROR_FLG||','
      ||'        error_text    = '||''''||lv_message_text||''''
      ||' WHERE  NVL(calendar_type,'||''''||NULL_CHAR||''''||') '
      ||'        NOT IN(''RECEIVING'',''SHIPPING'', ''CARRIER'' )'
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    sr_instance_code =  :v_instance_code'
      ||' AND    process_flag     = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
               USING     lv_batch_id,
                        v_instance_code;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ASSOCIATION_TYPE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- error out the records where association_type is not correct

      lv_sql_stmt :=
      'UPDATE    msc_st_calendar_assignments '
      ||' SET    process_flag  = '||G_ERROR_FLG||','
      ||'        error_text    = '||''''||lv_message_text||''''
      ||' WHERE  association_type '
      ||'        NOT IN (SELECT lookup_code FROM mfg_lookups where lookup_type = ''MSC_UI_ASSIGNMENT_TYPE'')'
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    sr_instance_code =  :v_instance_code'
      ||' AND    process_flag     = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
               USING     lv_batch_id,
                        v_instance_code;


     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_TYPE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where partner_type NOT in (1,2,3,4)
      v_sql_stmt := 10;
      lv_sql_stmt :=
      'UPDATE    msc_st_calendar_assignments'
      ||' SET    process_flag       = '||G_ERROR_FLG||','
      ||'        error_text         = '||''''||lv_message_text||''''
      ||' WHERE  sr_instance_code   = :v_instance_code'
      ||' AND    batch_id           = :lv_batch_id'
      ||' AND    process_flag       = '||G_IN_PROCESS
      ||' AND    partner_type NOT IN (1,2,3,4)' ;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ASSOCIATION_LEVEL');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where ASSOCIATION_LEVEL NOT in (1,2,3,4)
      v_sql_stmt := 11;
      lv_sql_stmt :=
      'UPDATE    msc_st_calendar_assignments'
      ||' SET    process_flag       = '||G_ERROR_FLG||','
      ||'        error_text         = '||''''||lv_message_text||''''
      ||' WHERE  sr_instance_code   = :v_instance_code'
      ||' AND    batch_id           = :lv_batch_id'
      ||' AND    process_flag       = '||G_IN_PROCESS
      ||' AND    association_level NOT IN (1,2,3,4)' ;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;


  lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CALENDAR_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where calendar_code is NULL

      lv_sql_stmt :=
      'UPDATE    msc_st_calendar_assignments '
      ||' SET    process_flag                  = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE  sr_instance_code              = :v_instance_code'
      ||' AND    batch_id                      = :lv_batch_id'
      ||' AND    process_flag                  = '||G_IN_PROCESS
      ||' AND    NVL(calendar_code,    '||''''||NULL_CHAR||''''||')'
      ||'        =                      '||''''||NULL_CHAR||'''' ;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;


   -- We need to check correct association_type is attached to that particular record.
   -- For example if association_type is CARRIER_VENDOR_SITE, then for that particular record partner_name, partner_site_code and carrier_code should not be null


   lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVAL_ASSO_COMB',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_NAME OR PARTNER_SITE_CODE OR'
                                             ||'CARRIER_PARTNER_CODE');


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_sql_stmt :=
      'UPDATE    msc_st_calendar_assignments '
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text   = '||''''||lv_message_text||''''
      ||' WHERE  sr_instance_code              = :v_instance_code'
      ||' AND    batch_id                      = :lv_batch_id'
      ||' AND    process_flag                  = '||G_IN_PROCESS
      ||' AND   association_type IN (10,11)'
      ||' AND   (NVL(PARTNER_NAME, '||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''
      ||' OR     NVL(PARTNER_SITE_CODE, '||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''
      ||' OR    NVL(CARRIER_PARTNER_CODE, '||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''||') ';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

         EXECUTE IMMEDIATE lv_sql_stmt
         USING     v_instance_code,
                   lv_batch_id;



   lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVAL_ASSO_COMB',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_NAME OR CARRIER_PARTNER_CODE');



      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_sql_stmt :=
      'UPDATE    msc_st_calendar_assignments '
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text   = '||''''||lv_message_text||''''
      ||' WHERE  sr_instance_code              = :v_instance_code'
      ||' AND    batch_id                      = :lv_batch_id'
      ||' AND    process_flag                  = '||G_IN_PROCESS
      ||' AND    association_type IN (7,8)'
      ||' AND   (NVL(PARTNER_NAME, '||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''
      ||' OR    NVL(CARRIER_PARTNER_CODE, '||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''||') ';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
      USING     v_instance_code,
                lv_batch_id;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVAL_ASSO_COMB',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE OR CARRIER_PARTNER_CODE');


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_sql_stmt :=
      'UPDATE    msc_st_calendar_assignments '
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text   = '||''''||lv_message_text||''''
      ||' WHERE  sr_instance_code              = :v_instance_code'
      ||' AND    batch_id                      = :lv_batch_id'
      ||' AND    process_flag                  = '||G_IN_PROCESS
      ||' AND    association_type = 9 '
      ||' AND   (NVL(ORGANIZATION_CODE, '||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''
      ||' OR    NVL(CARRIER_PARTNER_CODE, '||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''||') ';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
      USING     v_instance_code,
                lv_batch_id;


     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVAL_ASSO_COMB',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_NAME OR PARTNER_SITE_CODE');


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_sql_stmt :=
      'UPDATE    msc_st_calendar_assignments '
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text   = '||''''||lv_message_text||''''
      ||' WHERE  sr_instance_code              = :v_instance_code'
      ||' AND    batch_id                      = :lv_batch_id'
      ||' AND    process_flag                  = '||G_IN_PROCESS
      ||' AND    association_type IN( 5,6 )'
      ||' AND   (NVL(PARTNER_NAME, '||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''
      ||' OR    NVL(PARTNER_SITE_CODE, '||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''||') ';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
      USING     v_instance_code,
                lv_batch_id;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVAL_ASSO_COMB',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_NAME OR ORGANIZATION_CODE OR CARRIER_PARTNER_CODE');


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_sql_stmt :=
      'UPDATE    msc_st_calendar_assignments '
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text   = '||''''||lv_message_text||''''
      ||' WHERE  sr_instance_code              = :v_instance_code'
      ||' AND    batch_id                      = :lv_batch_id'
      ||' AND    process_flag                  = '||G_IN_PROCESS
      ||' AND    ((association_type IN( 1,2 )'
      ||' AND    NVL(PARTNER_NAME, '||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''||') '
      ||' OR    (association_type =3 '
      ||' AND    NVL(ORGANIZATION_CODE, '||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''||') '
      ||' OR    (association_type =4 '
      ||' AND    NVL(CARRIER_PARTNER_CODE, '||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''||')) '   ;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
      USING     v_instance_code,
                lv_batch_id;



      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'CALENDAR_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_CALENDARS',
                      p_token3            => 'CHILD_TABLE',
                      p_token_value3      => 'MSC_ST_CALENDAR_ASSIGNMENTS');
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_sql_stmt :=
      'UPDATE    msc_st_calendar_assignments   msca'
      ||' SET    process_flag             =  '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE  NOT EXISTS ( SELECT 1 '
      ||'        FROM   msc_calendars mc '
      ||'        WHERE  mc.calendar_code  = msca.calendar_code '
      ||'        AND    mc.sr_instance_id = :v_instance_id )'
      ||' AND    sr_instance_code         = :v_instance_code'
      ||' AND    batch_id                 = :lv_batch_id'
      ||' AND    process_flag             = '||G_IN_PROCESS;



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,
                        v_instance_code,
                        lv_batch_id;


     -- Derive partner_id (supplier)

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_CALENDAR_ASSIGNMENTS',
                      p_org_partner_name => 'PARTNER_NAME',
                      p_org_partner_id   => 'PARTNER_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_VENDOR,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  -- Derive partner_id (Customer)

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_CALENDAR_ASSIGNMENTS',
                      p_org_partner_name => 'PARTNER_NAME',
                      p_org_partner_id   => 'PARTNER_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_CUSTOMER,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --Derive Organization_id
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_CALENDAR_ASSIGNMENTS',
                      p_org_partner_name => 'ORGANIZATION_CODE',
                      p_org_partner_id   => 'ORGANIZATION_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_ORGANIZATION,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV3_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Derive carrier_partner_id (Carrier)

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CARRIER_PARTNER_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_CALENDAR_ASSIGNMENTS',
                      p_org_partner_name => 'CARRIER_PARTNER_CODE',
                      p_org_partner_id   => 'CARRIER_PARTNER_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_CARRIER,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV3_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_SITE_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive partner_site_id (Supplier)
       lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                     (p_table_name        => 'MSC_ST_CALENDAR_ASSIGNMENTS',
                      p_partner_name      => 'PARTNER_NAME',
                      p_partner_site_code => 'PARTNER_SITE_CODE',
                      p_partner_site_id   => 'PARTNER_SITE_ID',
                      p_instance_code     => v_instance_code,
                      p_partner_type      => G_VENDOR,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_severity          => G_SEV3_ERROR,
                      p_message_text      => lv_message_text,
                      p_debug             => v_debug,
                      p_row               => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTNER_SITE_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive partner_site_id (Customer)
       lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                     (p_table_name        => 'MSC_ST_CALENDAR_ASSIGNMENTS',
                      p_partner_name      => 'PARTNER_NAME',
                      p_partner_site_code => 'PARTNER_SITE_CODE',
                      p_partner_site_id   => 'PARTNER_SITE_ID',
                      p_instance_code     => v_instance_code,
                      p_partner_type      => G_CUSTOMER,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_severity          => G_SEV3_ERROR,
                      p_message_text      => lv_message_text,
                      p_debug             => v_debug,
                      p_row               => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_CALENDAR_ASSIGNMENTS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_CALENDAR_ASSIGNMENTS',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_CALENDAR_ASSIGNMENTS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_message_text      => NULL,
                    p_error_text        => lv_error_text,
                    p_debug             => v_debug,
                    p_batch_id          => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      COMMIT;
    END LOOP;

   EXCEPTION

    WHEN too_many_rows THEN
      lv_error_text := substr('MSC_CL_PRE_PROCESS.MSC_ST_CALENDAR_ASSIGNMENTS'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      ROLLBACK ;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.MSC_ST_CALENDAR_ASSIGNMENTS '||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END LOAD_CALENDAR_ASSIGNMENTS;


------------------7704614-----------------------------------------------------
PROCEDURE LOAD_SALES_CHANNEL  IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid          RowidTab; --bulk collects rowid
  lv_return         NUMBER;
  lv_error_text     VARCHAR2(250);
  lv_where_str      VARCHAR2(5000);
  lv_sql_stmt       VARCHAR2(5000);
  lv_column_names   VARCHAR2(5000);     --stores concatenated column names
  lv_message_text   msc_errors.error_text%TYPE;

  ex_logging_err        EXCEPTION;

  CURSOR c1 IS
    SELECT rowid
    FROM   msc_st_sr_lookups
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code          = v_instance_code;

  BEGIN

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Validation check for the table msc_st_sr_lookups

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE    msc_st_sr_lookups mssc1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 FROM msc_st_sr_lookups mssc2 '
    ||'        WHERE mssc2.sr_instance_code  = mssc1.sr_instance_code'
    ||'        AND   mssc2.lookup_code      = mssc1.lookup_code'
    ||'        AND   NVL(mssc2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mssc1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   mssc2.process_flag      = mssc1.process_flag'
    ||'        AND   NVL(mssc2.message_id,NULL) IS NULL'
    ||'        GROUP BY sr_instance_code,lookup_code,company_name '
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    mssc1.process_flag              = '||G_IN_PROCESS
    ||' AND    mssc1.sr_instance_code          = :v_instance_code'
    ||' AND    NVL(mssc1.message_id,NULL) IS NULL';

    IF V_DEBUG THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    END IF;


    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE   msc_st_sr_lookups mssc1 '
    ||' SET   process_flag = '||G_ERROR_FLG||','
    ||'       error_text   = '||''''||lv_message_text||''''
    ||' WHERE message_id   < ( SELECT max(message_id) '
    ||'       FROM  msc_st_sr_lookups mssc2'
    ||'       WHERE mssc2.sr_instance_code  = mssc1.sr_instance_code'
    ||'        AND   mssc2.lookup_code      = mssc1.lookup_code'
    ||'       AND   NVL(mssc2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'             NVL(mssc1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'       AND   mssc2.process_flag      = mssc1.process_flag'
    ||'       AND   NVL(mssc2.message_id,NULL) IS NOT NULL) '
    ||' AND   mssc1.process_flag            = '||G_IN_PROCESS
    ||' AND   mssc1.sr_instance_code        = :v_instance_code '
    ||' AND   NVL(mssc1.message_id,NULL) IS NOT NULL';

    IF V_DEBUG THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    END IF;

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    lv_column_names :=
    '   LOOKUP_CODE       ||''~''||'
    ||' MEANING           ||''~''||'
    ||' DESCRIPTION       ||''~''||'
    ||' FROM_DATE         ||''~''||'
    ||' TO_DATE           ||''~''||'
    ||' ENABLED_FLAG      ||''~''||'
    ||' SR_INSTANCE_CODE  ||''~''||'
    ||' COMPANY_NAME      ||''~''||'
    ||' DELETED_FLAG ';


      v_sql_stmt := 04;

      OPEN  c1;
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_sr_lookups
      SET  st_transaction_id = MSC_ST_SALES_CHANNEL_S.nextval,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);



      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_SR_LOOKUPS');

      -- Deletion is not allowed for this table
      v_sql_stmt := 05;
      lv_sql_stmt :=
      'UPDATE      msc_st_sr_lookups '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      sr_instance_code = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'LOOKUP_CODE OR MEANING');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where sales_channel or meaning  is NULL

      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE    msc_st_sr_lookups'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text      = '||''''||lv_message_text||''''
      ||' WHERE  (NVL(lookup_code,NULL) IS NULL '
      ||' OR    NVL(meaning,NULL) IS NULL) '
      ||' AND    process_flag            = '||G_IN_PROCESS
      ||' AND    sr_instance_code        = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_UPDATION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_SR_LOOKUPS');


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ENABLED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check ENABLED_FLAG column has valid value or not and if not set it to SYS_NO
      -- Log error procedure inserts warning and also defaults the delete flag

      lv_where_str := ' AND NVL(enabled_flag,'||NULL_VALUE||') '
                      ||' NOT IN(1,2)';

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_SR_LOOKUPS',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'ENABLED_FLAG',
                         p_debug             => v_debug,
                         p_default_value     => SYS_YES);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

        lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                       (p_app_short_name    => 'MSC',
                        p_error_code        => 'MSC_PP_INVALID_VALUE',
                        p_message_text      => lv_message_text,
                        p_error_text        => lv_error_text,
                        p_token1            => 'COLUMN_NAME',
                        p_token_value1      => 'FROM_DATE OR'
                                               ||' TO_DATE');

        IF lv_return <> 0 THEN
          RAISE ex_logging_err;
        END IF;


     -- Validate that from_date is greater than to_date

      v_sql_stmt := 07;
      lv_sql_stmt :=
      'UPDATE    msc_st_sr_lookups'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text      = '||''''||lv_message_text||''''
      ||' WHERE  NVL(from_date,SYSDATE-365000 ) '
      ||'  >    NVL(to_date, SYSDATE+365000) '
      ||' AND    process_flag            = '||G_IN_PROCESS
      ||' AND    sr_instance_code        = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code;

        --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => NULL,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_SR_LOOKUPS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      -- Set the process flag as Valid and populate instance_id
     lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                        (p_table_name   => 'MSC_ST_SR_LOOKUPS',
                         p_instance_id    => v_instance_id,
                         p_instance_code  => v_instance_code,
                         p_process_flag   => G_VALID,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- At the end calling  the LOG_ERROR for logging all
      -- errored out records.

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name    => 'MSC_ST_SR_LOOKUPS',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


     COMMIT;
   EXCEPTION

    WHEN ex_logging_err THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_error_text);
   --   G_WARNING_FLAG := 1;
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_SALES_CHANNEL '||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_error_text);
--      G_WARNING_FLAG := 1;
      ROLLBACK;

  END LOAD_SALES_CHANNEL;

  PROCEDURE LOAD_FISCAL_CALENDAR
  IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;

   lb_rowid          RowidTab;
   lv_sql_stmt       VARCHAR2(4000);
   lv_message_text   msc_errors.error_text%TYPE;
   lv_error_text     VARCHAR2(250);
   lv_debug          BOOLEAN   := msc_cl_pre_process.v_debug;
   lv_current_user   NUMBER    := msc_cl_pre_process.v_current_user;
   lv_current_date   DATE      := msc_cl_pre_process.v_current_date;
   lv_return         NUMBER := 0;
   lv_instance_code  VARCHAR2(3);

  ex_logging_err    EXCEPTION;
  lv_column_names   VARCHAR2(5000);

   CURSOR c1 IS
    SELECT rowid
    FROM   msc_st_calendar_months
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code;


   BEGIN

     lv_column_names :=
	'       SR_INSTANCE_CODE	||''~''||'
	||'	CALENDAR_CODE		||''~''||'
	||'	YEAR			||''~''||'
	||'	YEAR_DESCRIPTION	||''~''||'
	||'	YEAR_START_DATE		||''~''||'
	||'	YEAR_END_DATE		||''~''||'
	||'	QUARTER			||''~''||'
	||'	QUARTER_DESCRIPTION	||''~''||'
	||'	QUARTER_START_DATE	||''~''||'
	||'	QUARTER_END_DATE	||''~''||'
	||'	MONTH			||''~''||'
	||'	MONTH_DESCRIPTION	||''~''||'
	||'	MONTH_START_DATE	||''~''||'
	||'	MONTH_END_DATE ';


      OPEN  c1;
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      v_sql_stmt := 01;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_calendar_months
      SET  st_transaction_id = msc_st_calendar_months_s.NEXTVAL,
           last_update_date  = lv_current_date,
           last_updated_by   = lv_current_user,
           creation_date     = lv_current_date,
           created_by        = lv_current_user
      WHERE  rowid           = lb_rowid(j);



       -- set the message

        lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      =>   'YEAR OR '
                                             ||'YEAR_DESCRIPTION OR '
                                             ||'YEAR_START_DATE OR '
                                             ||'YEAR_END_DATE OR '
                                             ||'QUARTER OR '
                                             ||'QUARTER_DESCRIPTION OR '
                                             ||'QUARTER_START_DATE OR '
                                             ||'QUARTER_END_DATE OR '
                                             ||'MONTH OR '
                                             ||'MONTH_DESCRIPTION OR '
                                             ||'MONTH_ START DATE OR '
                                             ||'MONTH END DATE ');


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out the records if any of the details regarding Month, Year or
      -- Date is not provided.

      v_sql_stmt := 02;
      lv_sql_stmt :=
      'UPDATE    msc_st_calendar_months'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text      = '||''''||lv_message_text||''''
      ||' WHERE  ( year IS NULL'
      ||' OR    year_description IS NULL'
      ||' OR    year_start_date IS NULL'
      ||' OR    year_end_date   IS NULL'
      ||' OR    quarter IS NULL'
      ||' OR    quarter_description IS NULL'
      ||' OR    quarter_start_date  IS NULL'
      ||' OR    quarter_end_date   IS NULL'
      ||' OR    month IS NULL'
      ||' OR    month_description IS NULL'
      ||' OR    month_start_date IS NULL'
      ||' OR    month_end_date   IS NULL)'
      ||' AND    process_flag            = '||G_IN_PROCESS
      ||' AND    sr_instance_code        = :v_instance_code';

      IF lv_debug THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING    v_instance_code;

     -- set the message

        lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_END_GT_ST_DATE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text  );


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- All the start date should be less than end date

      v_sql_stmt := 03;
      lv_sql_stmt :=
      'UPDATE    msc_st_calendar_months'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text      = '||''''||lv_message_text||''''
      ||' WHERE  (year_start_date    >= year_end_date'
      ||' OR      quarter_start_date >= quarter_end_date'
      ||' OR      month_start_date   >= month_end_date)'
      ||' AND    process_flag            = '||G_IN_PROCESS
      ||' AND    sr_instance_code        = :v_instance_code';

      IF lv_debug THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code;

      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => NULL,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_CALENDAR_MONTHS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;
    -- Set the process flag as Valid and populate instance_id
      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                        (p_table_name     => 'MSC_ST_CALENDAR_MONTHS',
                         p_instance_id    => v_instance_id,
                         p_instance_code  => v_instance_code,
                         p_process_flag   => G_VALID,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   	-- Inserting all the errored out records into MSC_ERRORS:

      lv_return := MSC_ST_UTIL.LOG_ERROR
	                   (p_table_name        => 'MSC_ST_CALENDAR_MONTHS',
	                    p_instance_code     => v_instance_code,
	                    p_row               => lv_column_names,
	                    p_severity          => G_SEV_ERROR,
	                    p_error_text        => lv_error_text,
	                    p_message_text      => NULL);

      IF(lv_return <> 0) THEN
	       RAISE ex_logging_err;
      END IF;

   COMMIT;
   EXCEPTION
     WHEN ex_logging_err THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_error_text);
--      G_WARNING_FLAG := 1;
      ROLLBACK;

     WHEN OTHERS THEN
      ROLLBACK;

      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_FISCAL_CALENDAR '||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_error_text);
--      G_WARNING_FLAG := 1;
      ROLLBACK;

  END LOAD_FISCAL_CALENDAR;
------------------7704614-----------------------------------------------------
--- CMRO Proj bug 9135694
PROCEDURE LOAD_VISITS  IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid          RowidTab; --bulk collects rowid
  lv_return         NUMBER;
  lv_error_text     VARCHAR2(250);
  lv_where_str      VARCHAR2(5000);
  lv_sql_stmt       VARCHAR2(5000);
  lv_column_names   VARCHAR2(5000);     --stores concatenated column names
  lv_batch_id       msc_st_visits.batch_id%TYPE;
  lv_message_text   msc_errors.error_text%TYPE;

  ex_logging_err        EXCEPTION;

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_visits
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    batch_id          = p_batch_id
    AND    sr_instance_code  = v_instance_code;

  CURSOR C2(p_batch_id NUMBER) IS
     SELECT max(rowid)
     FROM   msc_st_visits
     WHERE  process_flag     = G_IN_PROCESS
     AND    sr_instance_code = v_instance_code
     AND    batch_id         = p_batch_id
     AND    NVL(visit_id,NULL_VALUE) = NULL_VALUE
     GROUP BY sr_instance_code,visit_name;

  BEGIN
  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'IN LOAD VISIT ');
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Validation check for the table msc_st_visits

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE    msc_st_visits mssc1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 FROM msc_st_visits mssc2 '
    ||'        WHERE mssc2.sr_instance_code  = mssc1.sr_instance_code'
    ||'        AND   mssc2.visit_name      = mssc1.visit_name'
    ||'        AND   mssc2.process_flag      = mssc1.process_flag'
    ||'        AND   NVL(mssc2.message_id,NULL) IS NULL'
    ||'        GROUP BY sr_instance_code,visit_name'
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    mssc1.process_flag              = '||G_IN_PROCESS
    ||' AND    mssc1.sr_instance_code          = :v_instance_code'
    ||' AND    NVL(mssc1.message_id,NULL) IS NULL';

    IF V_DEBUG THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    END IF;


    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE   msc_st_visits mssc1 '
    ||' SET   process_flag = '||G_ERROR_FLG||','
    ||'       error_text   = '||''''||lv_message_text||''''
    ||' WHERE message_id   < ( SELECT max(message_id) '
    ||'       FROM  msc_st_visits mssc2'
    ||'       WHERE mssc2.sr_instance_code  = mssc1.sr_instance_code'
    ||'        AND   mssc2.visit_name      = mssc1.visit_name'
    ||'       AND   mssc2.process_flag      = mssc1.process_flag'
    ||'       AND   NVL(mssc2.message_id,NULL) IS NOT NULL) '
    ||' AND   mssc1.process_flag            = '||G_IN_PROCESS
    ||' AND   mssc1.sr_instance_code        = :v_instance_code '
    ||' AND   NVL(mssc1.message_id,NULL) IS NOT NULL';

    IF V_DEBUG THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    END IF;

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    lv_column_names :=
	' VISIT_NAME	||''~''||'
	||'	VISIT_DESC		||''~''||'
	||'	VISIT_START_DATE			||''~''||'
	||'	VISIT_END_DATE	||''~''||'
	||'	SR_INSTANCE_CODE    ||''~''||'
  ||' DELETED_FLAG ';


    LOOP
      v_sql_stmt := 03;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      'UPDATE msc_st_visits '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN  c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_visits
      SET  st_transaction_id = msc_st_visits_s.nextval,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      ' AND NVL(deleted_flag,'||NULL_VALUE||') '
      ||' NOT IN(1,2)';
      --Log a warning for those records where the deleted_flag has a value other
      --than SYS_NO
      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_VISITS',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'DELETED_FLAG',
                      p_debug             => v_debug,
                      p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1     =>   'VISIT_NAME OR '
                                             ||'VISIT_START_DATE OR '
                                             ||'VISIT_END_DATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where visit_name, visit start/end date is NULL

      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE    msc_st_visits'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text      = '||''''||lv_message_text||''''
      ||' WHERE  ( VISIT_NAME IS NULL'
      ||' OR    VISIT_START_DATE IS NULL'
      ||' OR    VISIT_END_DATE IS NULL)'
      ||' AND    process_flag        = '||G_IN_PROCESS
      ||' AND    batch_id            =  :lv_batch_id'
      ||' AND    sr_instance_code    = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;



        lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_END_GT_ST_DATE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text  );

        IF lv_return <> 0 THEN
          RAISE ex_logging_err;
        END IF;

     -- Validate that start_date is greater than end_date

      v_sql_stmt := 07;
      lv_sql_stmt :=
      'UPDATE    msc_st_visits'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text      = '||''''||lv_message_text||''''
      ||' WHERE  (VISIT_START_DATE   >= VISIT_END_DATE)'
      ||' AND    process_flag         = '||G_IN_PROCESS
      ||' AND    batch_id             = :lv_batch_id'
      ||' AND    sr_instance_code     = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;

     -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Populate  organization id

     lv_return :=
     MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name     => 'MSC_ST_VISITS',
                                    p_org_partner_name  => 'ORGANIZATION_CODE',
                                    p_org_partner_id    => 'ORGANIZATION_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_ORGANIZATION,
                                    p_severity          => G_SEV_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_batch_id          => lv_batch_id,
                                    p_debug             => v_debug,
                                    p_error_text        => lv_error_text,
                                    p_company_name_col  => FALSE);

     if(lv_return <> 0) then
        RAISE ex_logging_err;
     end if;

      --Deriving visit_id
      v_sql_stmt := 08;
      lv_sql_stmt :=
      'UPDATE msc_st_visits msv'
      ||' SET visit_id              = (SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1       = msv.sr_instance_code'
      ||'       AND    mls.char4       = msv.visit_name'
      ||'       AND    mls.entity_name = ''VISIT'' )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


   -- Genearte visit_id
     v_sql_stmt := 09;

     OPEN c2(lv_batch_id);
     FETCH c2 BULK COLLECT INTO lb_rowid ;

     IF c2%ROWCOUNT > 0  THEN
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_visits
        SET    visit_id       = msc_st_visit_id_s.NEXTVAL
        WHERE  rowid                  = lb_rowid(j);

    v_sql_stmt := 10;

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

    -- Insert into the LID table

        INSERT INTO  msc_local_id_setup
          (local_id,
           st_transaction_id,
           instance_id,
           entity_name,
           data_source_type,
           char1,
           char4,
           last_update_date,
           last_updated_by,
           creation_date,
           created_by  )
        SELECT
           visit_id,
           st_transaction_id,
           v_instance_id,
           'VISIT',
           data_source_type,
           v_instance_code,
           visit_name,
           v_current_date,
           v_current_user,
           v_current_date,
           v_current_user
        FROM  msc_st_visits
        WHERE rowid  = lb_rowid(j);

   END IF;
   CLOSE c2;
   --  Udpate visit_id
   v_sql_stmt := 11;

  lv_sql_stmt:=
  'UPDATE        MSC_ST_VISITS  msv'
  ||' SET        visit_id = (SELECT  local_id '
  ||'            FROM  msc_local_id_setup mlis'
  ||'            WHERE    mlis.entity_name= ''VISIT'' '
  ||'            AND      mlis.char1 =  msv.sr_instance_code'
  ||'            AND      mlis.char4 =  msv.visit_name)'
  ||' WHERE      sr_instance_code = :v_instance_code'
  ||' AND        NVL(visit_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||' AND        process_flag     = '||G_IN_PROCESS
  ||' AND        batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


        --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => NULL,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_VISITS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      -- Set the process flag as Valid and populate instance_id
     lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                        (p_table_name   => 'MSC_ST_VISITS',
                         p_instance_id    => v_instance_id,
                         p_instance_code  => v_instance_code,
                         p_process_flag   => G_VALID,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- At the end calling  the LOG_ERROR for logging all
      -- errored out records.

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name    => 'MSC_ST_VISITS',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      COMMIT;
    END LOOP;

   EXCEPTION  WHEN ex_logging_err THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_error_text);
   --   G_WARNING_FLAG := 1;
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_VISITS '||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_error_text);
--      G_WARNING_FLAG := 1;
      ROLLBACK;

  END LOAD_VISITS;


PROCEDURE LOAD_MILESTONES  IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid          RowidTab; --bulk collects rowid
  lv_return         NUMBER;
  lv_error_text     VARCHAR2(250);
  lv_where_str      VARCHAR2(5000);
  lv_sql_stmt       VARCHAR2(5000);
  lv_column_names   VARCHAR2(5000);     --stores concatenated column names
  lv_batch_id       msc_st_wo_milestones.batch_id%TYPE;
  lv_message_text   msc_errors.error_text%TYPE;

  ex_logging_err        EXCEPTION;

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_wo_milestones
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    batch_id          = p_batch_id
    AND    sr_instance_code  = v_instance_code;

 BEGIN
  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'IN LOAD MILESTONES ');

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Validation check for the table msc_st_wo_milestones

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE    msc_st_wo_milestones mswm1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 FROM msc_st_wo_milestones mswm2 '
    ||'        WHERE mswm2.sr_instance_code  = mswm1.sr_instance_code'
    ||'        AND   mswm2.visit_name      = mswm1.visit_name'
    ||'        AND   mswm2.milestone       = mswm1.milestone'
    ||'        AND   mswm2.process_flag      = mswm1.process_flag'
    ||'        AND   NVL(mswm2.message_id,NULL) IS NULL'
    ||'        GROUP BY sr_instance_code,visit_name'
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    mswm1.process_flag              = '||G_IN_PROCESS
    ||' AND    mswm1.sr_instance_code          = :v_instance_code'
    ||' AND    NVL(mswm1.message_id,NULL) IS NULL';

    IF V_DEBUG THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    END IF;


    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE   msc_st_wo_milestones mswm1 '
    ||' SET   process_flag = '||G_ERROR_FLG||','
    ||'       error_text   = '||''''||lv_message_text||''''
    ||' WHERE message_id   < ( SELECT max(message_id) '
    ||'       FROM  msc_st_wo_milestones mswm2'
    ||'       WHERE mswm2.sr_instance_code  = mswm1.sr_instance_code'
    ||'        AND   mswm2.visit_name      = mswm1.visit_name'
    ||'        AND   mswm2.milestone       = mswm1.milestone'
    ||'       AND   mswm2.process_flag      = mswm1.process_flag'
    ||'       AND   NVL(mswm2.message_id,NULL) IS NOT NULL) '
    ||' AND   mswm1.process_flag            = '||G_IN_PROCESS
    ||' AND   mswm1.sr_instance_code        = :v_instance_code '
    ||' AND   NVL(mswm1.message_id,NULL) IS NOT NULL';

    IF V_DEBUG THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    END IF;

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    lv_column_names :=
	' MILESTONE	||''~''||'
	||'	MILESTONE_DESC		||''~''||'
	||'	VISIT_NAME			||''~''||'
	||'	ORGANIZATION_CODE	||''~''||'
	||'	SR_INSTANCE_CODE    ||''~''||'
  ||' DELETED_FLAG ';


    LOOP
      v_sql_stmt := 03;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      'UPDATE msc_st_wo_milestones '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;
     EXIT WHEN SQL%NOTFOUND;

      OPEN  c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_wo_milestones
      SET  st_transaction_id = msc_st_wo_milestone_s.nextval,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);


     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      ' AND NVL(deleted_flag,'||NULL_VALUE||') '
      ||' NOT IN(1,2)';
      --Log a warning for those records where the deleted_flag has a value other
      --than SYS_NO
      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_WO_MILESTONES',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'DELETED_FLAG',
                      p_debug             => v_debug,
                      p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1     =>   'MILESTONE OR '
                                             ||'VISIT_NAME ');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where milestone or visit_name is NULL
      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE    msc_st_wo_milestones'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text      = '||''''||lv_message_text||''''
      ||' WHERE  ( VISIT_NAME IS NULL'
      ||' OR    MILESTONE IS NULL)'
      ||' AND    process_flag        = '||G_IN_PROCESS
      ||' AND    batch_id            =  :lv_batch_id'
      ||' AND    sr_instance_code    = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;


     -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Populate  organization id

     lv_return :=
     MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name     => 'MSC_ST_WO_MILESTONES',
                                    p_org_partner_name  => 'ORGANIZATION_CODE',
                                    p_org_partner_id    => 'ORGANIZATION_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_ORGANIZATION,
                                    p_severity          => G_SEV_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_batch_id          => lv_batch_id,
                                    p_debug             => v_debug,
                                    p_error_text        => lv_error_text,
                                    p_company_name_col  => FALSE);

     if(lv_return <> 0) then
        RAISE ex_logging_err;
     end if;

      --Deriving visit_id
      v_sql_stmt := 07;
      lv_sql_stmt :=
      'UPDATE msc_st_wo_milestones msv'
      ||' SET visit_id              = (SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1       = msv.sr_instance_code'
      ||'       AND    mls.char4       = msv.visit_name'
      ||'       AND    mls.entity_name = ''VISIT'' )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'VISIT_NAME');

      -- Validate the visit name with data in msc_local_id_setup
      v_sql_stmt := 08;
      lv_sql_stmt :=
      'UPDATE      msc_st_wo_milestones '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE  VISIT_ID IS NULL'
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;


        --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => NULL,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_WO_MILESTONES',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      -- Set the process flag as Valid and populate instance_id
     lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                        (p_table_name   => 'MSC_ST_WO_MILESTONES',
                         p_instance_id    => v_instance_id,
                         p_instance_code  => v_instance_code,
                         p_process_flag   => G_VALID,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- At the end calling  the LOG_ERROR for logging all
      -- errored out records.

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name    => 'MSC_ST_WO_MILESTONES',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      COMMIT;
    END LOOP;

   EXCEPTION  WHEN ex_logging_err THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_error_text);
   --   G_WARNING_FLAG := 1;
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_MILESTONES '||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_error_text);
--      G_WARNING_FLAG := 1;
      ROLLBACK;

  END LOAD_MILESTONES;

PROCEDURE LOAD_WBS  IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid          RowidTab; --bulk collects rowid
  lv_return         NUMBER;
  lv_error_text     VARCHAR2(250);
  lv_where_str      VARCHAR2(5000);
  lv_sql_stmt       VARCHAR2(5000);
  lv_column_names   VARCHAR2(5000);     --stores concatenated column names
  lv_message_text   msc_errors.error_text%TYPE;

  ex_logging_err        EXCEPTION;

  CURSOR c1 IS
    SELECT rowid
    FROM   msc_st_work_breakdown_struct
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code  = v_instance_code;

 BEGIN
  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'IN LOAD WBS ');

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Validation check for the table msc_st_work_breakdown_struct

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE    msc_st_work_breakdown_struct mswbs1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 FROM msc_st_work_breakdown_struct mswbs2 '
    ||'        WHERE mswbs2.parameter_name  = mswbs1.parameter_name'
    ||'        AND mswbs2.organization_code  = mswbs1.organization_code'
    ||'        AND mswbs2.display_name  = mswbs1.display_name'
    ||'        AND mswbs2.sr_instance_code  = mswbs1.sr_instance_code'
    ||'        AND   mswbs2.process_flag      = mswbs1.process_flag'
    ||'        AND   NVL(mswbs2.message_id,NULL) IS NULL'
    ||'        GROUP BY sr_instance_code'
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    mswbs1.process_flag              = '||G_IN_PROCESS
    ||' AND    mswbs1.sr_instance_code          = :v_instance_code'
    ||' AND    NVL(mswbs1.message_id,NULL) IS NULL';

    IF V_DEBUG THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    END IF;


    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE   msc_st_work_breakdown_struct mswbs1 '
    ||' SET   process_flag = '||G_ERROR_FLG||','
    ||'       error_text   = '||''''||lv_message_text||''''
    ||' WHERE message_id   < ( SELECT max(message_id) '
    ||'       FROM  msc_st_work_breakdown_struct mswbs2'
    ||'        WHERE mswbs2.parameter_name  = mswbs1.parameter_name'
    ||'        AND mswbs2.display_name  = mswbs1.display_name'
    ||'       AND mswbs2.sr_instance_code  = mswbs1.sr_instance_code'
    ||'       AND   mswbs2.process_flag      = mswbs1.process_flag'
    ||'       AND   NVL(mswbs2.message_id,NULL) IS NOT NULL) '
    ||' AND   mswbs1.process_flag            = '||G_IN_PROCESS
    ||' AND   mswbs1.sr_instance_code        = :v_instance_code '
    ||' AND   NVL(mswbs1.message_id,NULL) IS NOT NULL';

    IF V_DEBUG THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    END IF;

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    lv_column_names :=
	' PARAMETER_NAME	||''~''||'
	||'	DISPLAY_NAME		||''~''||'
	||'	ORGANIZATION_CODE		||''~''||'
	||'	SR_INSTANCE_CODE    ||''~''||'
  ||' DELETED_FLAG ';


    v_sql_stmt := 03;

      OPEN  c1;
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_work_breakdown_struct
      SET  st_transaction_id = msc_st_work_breakdown_struct_s.nextval,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      ' AND NVL(deleted_flag,'||NULL_VALUE||') '
      ||' NOT IN(1,2)';
      --Log a warning for those records where the deleted_flag has a value other
      --than SYS_NO
      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_WORK_BREAKDOWN_STRUCT',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'DELETED_FLAG',
                      p_debug             => v_debug,
                      p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
     -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Populate  organization id

     lv_return :=
     MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name     => 'MSC_ST_WORK_BREAKDOWN_STRUCT',
                                    p_org_partner_name  => 'ORGANIZATION_CODE',
                                    p_org_partner_id    => 'ORGANIZATION_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_ORGANIZATION,
                                    p_severity          => G_SEV_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_debug             => v_debug,
                                    p_error_text        => lv_error_text,
                                    p_company_name_col  => FALSE);

     if(lv_return <> 0) then
        RAISE ex_logging_err;
     end if;

        --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => NULL,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_WORK_BREAKDOWN_STRUCT',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      -- Set the process flag as Valid and populate instance_id
     lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                        (p_table_name   => 'MSC_ST_WORK_BREAKDOWN_STRUCT',
                         p_instance_id    => v_instance_id,
                         p_instance_code  => v_instance_code,
                         p_process_flag   => G_VALID,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- At the end calling  the LOG_ERROR for logging all
      -- errored out records.

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name    => 'MSC_ST_WORK_BREAKDOWN_STRUCT',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      COMMIT;


   EXCEPTION  WHEN ex_logging_err THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_error_text);
   --   G_WARNING_FLAG := 1;
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_WBS '||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_error_text);
--      G_WARNING_FLAG := 1;
      ROLLBACK;

  END LOAD_WBS;

PROCEDURE LOAD_WOATTRIBUTES  IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid          RowidTab; --bulk collects rowid
  lv_return         NUMBER;
  lv_error_text     VARCHAR2(250);
  lv_where_str      VARCHAR2(5000);
  lv_sql_stmt       VARCHAR2(5000);
  lv_column_names   VARCHAR2(5000);     --stores concatenated column names
  lv_batch_id       msc_st_wo_attributes.batch_id%TYPE;
  lv_message_text   msc_errors.error_text%TYPE;

  ex_logging_err        EXCEPTION;

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_wo_attributes
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    batch_id          = p_batch_id
    AND    sr_instance_code  = v_instance_code;

 BEGIN
  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'IN LOAD WO Attributes ');

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Validation check for the table msc_st_wo_attributes

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE    msc_st_wo_attributes mswoa1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 FROM msc_st_wo_attributes mswoa2 '
    ||'        WHERE mswoa2.sr_instance_code  = mswoa1.sr_instance_code'
    ||'        AND   mswoa2.wip_entity_code   = mswoa1.wip_entity_code'
    ||'        AND   mswoa2.organization_code = mswoa1.organization_code'
    ||'        AND   mswoa2.visit_name        = mswoa1.visit_name'
    ||'        AND   mswoa2.prev_milestone    = mswoa1.prev_milestone'
    ||'        AND   mswoa2.next_milestone    = mswoa1.next_milestone'
    ||'        AND   mswoa2.process_flag      = mswoa1.process_flag'
    ||'        AND   NVL(mswoa2.message_id,NULL) IS NULL'
    ||'        GROUP BY sr_instance_code,visit_name'
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    mswoa1.process_flag              = '||G_IN_PROCESS
    ||' AND    mswoa1.sr_instance_code          = :v_instance_code'
    ||' AND    NVL(mswoa1.message_id,NULL) IS NULL';

    IF V_DEBUG THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    END IF;


    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE   msc_st_wo_attributes mswoa1 '
    ||' SET   process_flag = '||G_ERROR_FLG||','
    ||'       error_text   = '||''''||lv_message_text||''''
    ||' WHERE message_id   < ( SELECT max(message_id) '
    ||'       FROM  msc_st_wo_attributes mswoa2'
    ||'       WHERE mswoa2.sr_instance_code  = mswoa1.sr_instance_code'
    ||'        AND   mswoa2.wip_entity_code   = mswoa1.wip_entity_code'
    ||'        AND   mswoa2.organization_code = mswoa1.organization_code'
    ||'        AND   mswoa2.visit_name        = mswoa1.visit_name'
    ||'        AND   mswoa2.prev_milestone    = mswoa1.prev_milestone'
    ||'        AND   mswoa2.next_milestone    = mswoa1.next_milestone'
    ||'       AND   mswoa2.process_flag      = mswoa1.process_flag'
    ||'       AND   NVL(mswoa2.message_id,NULL) IS NOT NULL) '
    ||' AND   mswoa1.process_flag            = '||G_IN_PROCESS
    ||' AND   mswoa1.sr_instance_code        = :v_instance_code '
    ||' AND   NVL(mswoa1.message_id,NULL) IS NOT NULL';

    IF V_DEBUG THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    END IF;

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    lv_column_names :=
	' WIP_ENTITY_CODE	||''~''||'
	||'	PRODUCES_TO_STOCK		||''~''||'
	||'	SERIAL_NUM	||''~''||'
	||'	VISIT_NAME	||''~''||'
	||'	ORGANIZATION_CODE	||''~''||'
	||'	PARAMETER1	||''~''||'
	||'	PARAMETER2	||''~''||'
	||'	PARAMETER3	||''~''||'
	||'	PARAMETER4	||''~''||'
	||'	PARAMETER5	||''~''||'
	||'	PARAMETER6	||''~''||'
	||'	PARAMETER7	||''~''||'
	||'	PARAMETER8	||''~''||'
	||'	PARAMETER9	||''~''||'
	||'	MASTER_WO	||''~''||'
	||'	PREV_MILESTONE	||''~''||'
	||'	NEXT_MILESTONE	||''~''||'
	||'	SR_INSTANCE_CODE    ||''~''||'
  ||' DELETED_FLAG ';


    LOOP
      v_sql_stmt := 03;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      'UPDATE msc_st_wo_attributes '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;
     EXIT WHEN SQL%NOTFOUND;

      OPEN  c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_wo_attributes
      SET  st_transaction_id = msc_st_wo_attributes_s.nextval,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      ' AND NVL(deleted_flag,'||NULL_VALUE||') '
      ||' NOT IN(1,2)';
      --Log a warning for those records where the deleted_flag has a value other
      --than SYS_NO
      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_WO_ATTRIBUTES',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'DELETED_FLAG',
                      p_debug             => v_debug,
                      p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1     =>   'WIP_ENTITY_CODE OR '
                                             ||'VISIT_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where milestone or visit_name is NULL
      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE    msc_st_wo_attributes'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text      = '||''''||lv_message_text||''''
      ||' WHERE  ( VISIT_NAME IS NULL'
      ||' OR    WIP_ENTITY_CODE IS NULL )'
      ||' AND    process_flag        = '||G_IN_PROCESS
      ||' AND    batch_id            =  :lv_batch_id'
      ||' AND    sr_instance_code    = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;


    -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Populate  organization id

     lv_return :=
     MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name     => 'MSC_ST_WO_ATTRIBUTES',
                                    p_org_partner_name  => 'ORGANIZATION_CODE',
                                    p_org_partner_id    => 'ORGANIZATION_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_ORGANIZATION,
                                    p_severity          => G_SEV_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_batch_id          => lv_batch_id,
                                    p_debug             => v_debug,
                                    p_error_text        => lv_error_text,
                                    p_company_name_col  => FALSE);

     if(lv_return <> 0) then
        RAISE ex_logging_err;
     end if;

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PRODUCES_TO_STOCK',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check PRODUCES_TO_STOCK column has valid value or not and if not set it to SYS_NO
      -- Log error procedure inserts warning and also defaults the value

      lv_where_str := ' AND NVL(PRODUCES_TO_STOCK,'||NULL_VALUE||') '
                      ||' NOT IN(1,2)';

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_WO_ATTRIBUTES',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'PRODUCES_TO_STOCK',
                         p_debug             => v_debug,
                         p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'MASTER_WO');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Valid value for MASTER_WO  is 1,2

    v_sql_stmt := 07;
     lv_sql_stmt :=

        ' UPDATE   msc_st_wo_attributes '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    nvl(MASTER_WO,'||NULL_VALUE||')  not in(1,2)'
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         = :lv_batch_id'
      ||' AND      sr_instance_code =  :v_instance_code';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE   lv_sql_stmt
            USING       lv_batch_id,
                        v_instance_code;

  --Deriving visit_id
      v_sql_stmt := 08;
      lv_sql_stmt :=
      'UPDATE msc_st_wo_attributes mswa'
      ||' SET visit_id              = (SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1       = mswa.sr_instance_code'
      ||'       AND    mls.char4       = mswa.visit_name'
      ||'       AND    mls.entity_name = ''VISIT'' )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'VISIT_NAME');

      -- Validate the visit name with data in msc_local_id_setup
      v_sql_stmt := 09;
      lv_sql_stmt :=
      'UPDATE      msc_st_wo_attributes '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE  VISIT_ID IS NULL'
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;

    -- Set the error message
    -- Value for PREVIOUS_MILESTONE  is validated from msc_wo_milestones table.

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PREV_MILESTONE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Validate
      v_sql_stmt := 10;
      lv_sql_stmt :=
      'UPDATE   msc_st_wo_attributes mswa'
      ||' SET   process_flag = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE NOT EXISTS(SELECT 1 '
      ||'       FROM msc_wo_milestones mwm '
      ||'       WHERE NVL(mwm.milestone,  '||''''||NULL_CHAR||''''||') = '
      ||'             NVL(mswa.prev_milestone,'||''''||NULL_CHAR||''''||')'
      ||'             AND mwm.organization_id = mswa.organization_id'
      ||'             AND mwm.visit_id = mswa.visit_id'
      ||'       UNION '
      ||'       SELECT 1 FROM msc_st_wo_milestones mswm'
      ||'       WHERE NVL(mswm.milestone, '||''''||NULL_CHAR||''''||') = '
      ||'             NVL(mswa.prev_milestone,'||''''||NULL_CHAR||''''||')'
      ||'             AND mswm.organization_id = mswa.organization_id'
      ||'             AND mswm.visit_id = mswa.visit_id'
      ||'       AND   mswm.sr_instance_id = :v_instance_id'
      ||'       AND   mswm.process_flag   = '||G_VALID||' ) '
      ||' AND NVL(mswa.prev_milestone,'||''''||NULL_CHAR||''''||') '
      ||'     <> '||''''||NULL_CHAR||''''
      ||' AND mswa.sr_instance_code        = :v_instance_code'
      ||' AND mswa.batch_id                = :lv_batch_id'
      ||' AND mswa.process_flag            = '||G_IN_PROCESS ;



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,
                        v_instance_code,
                        lv_batch_id;
-- next milestone

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'NEXT_MILESTONE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Value for NEXT_MILESTONE  is validated from msc_wo_milestones table.

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'NEXT_MILESTONE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Validate
      v_sql_stmt := 11;
      lv_sql_stmt :=
      'UPDATE   msc_st_wo_attributes mswa'
      ||' SET   process_flag = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE NOT EXISTS(SELECT 1 '
      ||'       FROM msc_wo_milestones mwm '
      ||'       WHERE NVL(mwm.milestone,  '||''''||NULL_CHAR||''''||') = '
      ||'             NVL(mswa.next_milestone,'||''''||NULL_CHAR||''''||')'
      ||'             AND mwm.organization_id = mswa.organization_id'
      ||'             AND mwm.visit_id = mswa.visit_id'
      ||'       UNION '
      ||'       SELECT 1 FROM msc_st_wo_milestones mswm'
      ||'       WHERE NVL(mswm.milestone, '||''''||NULL_CHAR||''''||') = '
      ||'             NVL(mswa.next_milestone,'||''''||NULL_CHAR||''''||')'
      ||'             AND mswm.organization_id = mswa.organization_id'
      ||'             AND mswm.visit_id = mswa.visit_id'
      ||'       AND   mswm.sr_instance_id = :v_instance_id'
      ||'       AND   mswm.process_flag   = '||G_VALID||' ) '
      ||' AND NVL(mswa.next_milestone,'||''''||NULL_CHAR||''''||') '
      ||'     <> '||''''||NULL_CHAR||''''
      ||' AND mswa.sr_instance_code        = :v_instance_code'
      ||' AND mswa.batch_id                = :lv_batch_id'
      ||' AND mswa.process_flag            = '||G_IN_PROCESS ;



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,
                        v_instance_code,
                        lv_batch_id;
    v_sql_stmt := 12;
     lv_sql_stmt :=

        ' UPDATE   msc_st_wo_attributes '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    nvl(MASTER_WO,'||NULL_VALUE||')  not in(1,2)'
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         = :lv_batch_id'
      ||' AND      sr_instance_code =  :v_instance_code';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE   lv_sql_stmt
            USING       lv_batch_id,
                        v_instance_code;

   --Deriving supply_id
      v_sql_stmt := 13;
      lv_sql_stmt :=
      'UPDATE msc_st_wo_attributes mswa'
      ||' SET supply_id              = (SELECT transaction_id'
      ||'       FROM   msc_supplies ms'
      ||'       WHERE  ms.sr_instance_id       = :v_instance_id'
      ||'       AND    ms.order_number       = mswa.wip_entity_code'
      ||'       AND    ms.organization_id = mswa.organization_id '
      ||'       AND    ms.order_type = 70 )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,lv_batch_id,
                        v_instance_code;

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'WIP_ENTITY_CODE');

        v_sql_stmt := 14;
      lv_sql_stmt :=
      'UPDATE      msc_st_wo_attributes '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    SUPPLY_ID IS NULL'
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;



        --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => NULL,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_WO_ATTRIBUTES',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      -- Set the process flag as Valid and populate instance_id
     lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                        (p_table_name   => 'MSC_ST_WO_ATTRIBUTES',
                         p_instance_id    => v_instance_id,
                         p_instance_code  => v_instance_code,
                         p_process_flag   => G_VALID,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- At the end calling  the LOG_ERROR for logging all
      -- errored out records.

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name    => 'MSC_ST_WO_ATTRIBUTES',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      COMMIT;
    END LOOP;

   EXCEPTION  WHEN ex_logging_err THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_error_text);
   --   G_WARNING_FLAG := 1;
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_WOATTRIBUTES '||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_error_text);
--      G_WARNING_FLAG := 1;
      ROLLBACK;

  END LOAD_WOATTRIBUTES;

PROCEDURE LOAD_WO_TASK_HIERARCHY  IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid          RowidTab; --bulk collects rowid
  lv_return         NUMBER;
  lv_error_text     VARCHAR2(250);
  lv_where_str      VARCHAR2(5000);
  lv_sql_stmt       VARCHAR2(5000);
  lv_column_names   VARCHAR2(5000);     --stores concatenated column names
  lv_batch_id       msc_st_wo_task_hierarchy.batch_id%TYPE;
  lv_message_text   msc_errors.error_text%TYPE;

  ex_logging_err        EXCEPTION;

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_wo_task_hierarchy
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    batch_id          = p_batch_id
    AND    sr_instance_code  = v_instance_code;

 BEGIN
  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'IN LOAD WO TASK hierarchy ');

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Validation check for the table msc_st_wo_task_hierarchy

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE    msc_st_wo_task_hierarchy mswth1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 FROM msc_st_wo_task_hierarchy mswth2 '
    ||'        WHERE mswth2.sr_instance_code  = mswth1.sr_instance_code'
    ||'        AND   mswth2.organization_code   = mswth1.organization_code'
    ||'        AND   mswth2.curr_wip_entity_code   = mswth1.curr_wip_entity_code'
    ||'        AND   mswth2.next_wip_entity_code = mswth1.next_wip_entity_code'
    ||'        AND   mswth2.process_flag      = mswth1.process_flag'
    ||'        AND   NVL(mswth2.message_id,NULL) IS NULL'
    ||'        GROUP BY sr_instance_code'
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    mswth1.process_flag              = '||G_IN_PROCESS
    ||' AND    mswth1.sr_instance_code          = :v_instance_code'
    ||' AND    NVL(mswth1.message_id,NULL) IS NULL';

    IF V_DEBUG THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    END IF;


    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE   msc_st_wo_task_hierarchy mswth1 '
    ||' SET   process_flag = '||G_ERROR_FLG||','
    ||'       error_text   = '||''''||lv_message_text||''''
    ||' WHERE message_id   < ( SELECT max(message_id) '
    ||'       FROM  msc_st_wo_task_hierarchy mswth2'
    ||'       WHERE mswth2.sr_instance_code  = mswth1.sr_instance_code'
    ||'        AND   mswth2.curr_wip_entity_code   = mswth1.curr_wip_entity_code'
    ||'        AND   mswth2.next_wip_entity_code = mswth1.next_wip_entity_code'
    ||'       AND   mswth2.process_flag      = mswth1.process_flag'
    ||'       AND   NVL(mswth2.message_id,NULL) IS NOT NULL) '
    ||' AND   mswth1.process_flag            = '||G_IN_PROCESS
    ||' AND   mswth1.sr_instance_code        = :v_instance_code '
    ||' AND   NVL(mswth1.message_id,NULL) IS NOT NULL';

    IF V_DEBUG THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    END IF;

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    lv_column_names :=
	' CURR_WIP_ENTITY_CODE	||''~''||'
	||'	NEXT_WIP_ENTITY_CODE		||''~''||'
	||'	PRECEDENCE_CONSTRAINT	||''~''||'
	||'	MIN_SEPARATION	||''~''||'
	||'	MIN_SEP_TIME_UNIT	||''~''||'
	||'	MAX_SEPARATION	||''~''||'
	||'	MAX_SEP_TIME_UNIT	||''~''||'
	||'	ORGANIZATION_CODE		||''~''||'
	||'	SR_INSTANCE_CODE    ||''~''||'
  ||' DELETED_FLAG ';


    LOOP
      v_sql_stmt := 03;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      'UPDATE msc_st_wo_task_hierarchy '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;
     EXIT WHEN SQL%NOTFOUND;

      OPEN  c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_wo_task_hierarchy
      SET  st_transaction_id = msc_st_wo_task_hierarchy_s.nextval,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      ' AND NVL(deleted_flag,'||NULL_VALUE||') '
      ||' NOT IN(1,2)';
      --Log a warning for those records where the deleted_flag has a value other
      --than SYS_NO
      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_WO_TASK_HIERARCHY',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'DELETED_FLAG',
                      p_debug             => v_debug,
                      p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1     =>   'CURR_WIP_ENTITY_CODE OR '
                                             ||'NEXT_WIP_ENTITY_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where NEXT_WIP_ENTITY_CODE or CURR_WIP_ENTITY_CODE is NULL
      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE    msc_st_wo_task_hierarchy'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text      = '||''''||lv_message_text||''''
      ||' WHERE  ( CURR_WIP_ENTITY_CODE IS NULL'
      ||' OR    NEXT_WIP_ENTITY_CODE IS NULL )'
      ||' AND    process_flag        = '||G_IN_PROCESS
      ||' AND    batch_id            =  :lv_batch_id'
      ||' AND    sr_instance_code    = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;


            EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;


    -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'MIN_SEP_TIME_UNIT');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- validate  time unit

      v_sql_stmt := 07;
      lv_sql_stmt :=
      'UPDATE    msc_st_wo_task_hierarchy'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text      = '||''''||lv_message_text||''''
      ||' WHERE  upper(MIN_SEP_TIME_UNIT) NOT IN (''S'',''M'',''H'',''D'',''W'') '
      ||' AND    process_flag        = '||G_IN_PROCESS
      ||' AND    batch_id            =  :lv_batch_id'
      ||' AND    sr_instance_code    = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;

      v_sql_stmt := 8;
      lv_sql_stmt :=
      'UPDATE    msc_st_wo_task_hierarchy'
      ||' SET    MIN_SEP_TIME_UNIT   = (select meaning from fnd_lookup_values lv'
      ||' WHERE LV.LANGUAGE            = userenv(''lang'') '
      ||' AND LV.ENABLED_FLAG        = ''Y'''
      ||' and lookup_type = ''MSC_TIME_UNIT'''
      ||' and lookup_code = upper(min_sep_time_unit))'
      ||' WHERE  NVL(upper(MIN_SEP_TIME_UNIT),-1) IN (''S'',''M'',''H'',''D'',''W'')'
      ||' AND    process_flag        = '||G_IN_PROCESS
      ||' AND    batch_id            =  :lv_batch_id'
      ||' AND    sr_instance_code    = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;

    -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'MAX_SEP_TIME_UNIT');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      v_sql_stmt := 09;
      lv_sql_stmt :=
      'UPDATE    msc_st_wo_task_hierarchy'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text      = '||''''||lv_message_text||''''
      ||' WHERE  upper(MAX_SEP_TIME_UNIT) NOT IN (''S'',''M'',''H'',''D'',''W'') '
      ||' AND    process_flag        = '||G_IN_PROCESS
      ||' AND    batch_id            =  :lv_batch_id'
      ||' AND    sr_instance_code    = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;

      v_sql_stmt := 10;
      lv_sql_stmt :=
      'UPDATE    msc_st_wo_task_hierarchy'
      ||' SET    MAX_SEP_TIME_UNIT   = (select meaning from fnd_lookup_values lv'
      ||' WHERE LV.LANGUAGE            = userenv(''lang'') '
      ||' AND LV.ENABLED_FLAG        = ''Y'''
      ||' and lookup_type = ''MSC_TIME_UNIT'''
      ||' and lookup_code = upper(max_sep_time_unit))'
      ||' WHERE  NVL(upper(MAX_SEP_TIME_UNIT),-1) IN (''S'',''M'',''H'',''D'',''W'')'
      ||' AND    process_flag        = '||G_IN_PROCESS
      ||' AND    batch_id            =  :lv_batch_id'
      ||' AND    sr_instance_code    = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;

    -- Set the message

/*    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PRECEDENCE_CONSTRAINT',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF; */

      -- Check PRECEDENCE_CONSTRAINT column has valid value or not and if not set it to 1- Starts after end
      -- Log error procedure inserts warning and also defaults the value

      lv_where_str := ' AND NVL(PRECEDENCE_CONSTRAINT,'||NULL_VALUE||') '
                      ||' NOT IN(1,2,3)';

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_WO_TASK_HIERARCHY',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'PRECEDENCE_CONSTRAINT',
                         p_debug             => v_debug,
                         p_default_value     => 1);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 11;
      lv_sql_stmt :=
      'UPDATE    msc_st_wo_task_hierarchy'
      ||' SET    PRECEDENCE_CONSTRAINT   = (select meaning from fnd_lookup_values lv'
      ||' WHERE LV.LANGUAGE            = userenv(''lang'') '
      ||' AND LV.ENABLED_FLAG        = ''Y'''
      ||' and lookup_type = ''MSC_PRECEDENCE_CONSTRAINT'''
      ||' and lookup_code = precedence_constraint)'
      ||' WHERE  NVL(PRECEDENCE_CONSTRAINT,-1) IN (1,2,3)'
      ||' AND    process_flag        = '||G_IN_PROCESS
      ||' AND    batch_id            =  :lv_batch_id'
      ||' AND    sr_instance_code    = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;


   --Deriving supply_id
      v_sql_stmt := 12;
      lv_sql_stmt :=
      'UPDATE msc_st_wo_task_hierarchy mswth'
      ||' SET curr_supply_id              = (SELECT transaction_id'
      ||'       FROM   msc_supplies ms'
      ||'       WHERE  ms.sr_instance_id     = :v_instance_id'
      ||'       AND    ms.order_number       = mswth.curr_wip_entity_code'
      ||'       AND    ms.order_type = 70 )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,lv_batch_id,
                        v_instance_code;

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CURR_WIP_ENTITY_CODE');

        v_sql_stmt := 13;
      lv_sql_stmt :=
      'UPDATE      msc_st_wo_task_hierarchy '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    CURR_SUPPLY_ID IS NULL'
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;

 -- next_supply_id

    --Deriving supply_id
      v_sql_stmt := 14;
      lv_sql_stmt :=
      'UPDATE msc_st_wo_task_hierarchy mswth'
      ||' SET next_supply_id              = (SELECT transaction_id'
      ||'       FROM   msc_supplies ms'
      ||'       WHERE  ms.sr_instance_id     = :v_instance_id'
      ||'       AND    ms.order_number       = mswth.next_wip_entity_code'
      ||'       AND    ms.order_type = 70 )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,lv_batch_id,
                        v_instance_code;

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'NEXT_WIP_ENTITY_CODE');

        v_sql_stmt := 15;
      lv_sql_stmt :=
      'UPDATE      msc_st_wo_task_hierarchy '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    NEXT_SUPPLY_ID IS NULL'
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;

     -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Populate  organization id

     lv_return :=
     MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name     => 'MSC_ST_WO_TASK_HIERARCHY',
                                    p_org_partner_name  => 'ORGANIZATION_CODE',
                                    p_org_partner_id    => 'ORGANIZATION_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_ORGANIZATION,
                                    p_severity          => G_SEV_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_batch_id          => lv_batch_id,
                                    p_debug             => v_debug,
                                    p_error_text        => lv_error_text,
                                    p_company_name_col  => FALSE);

     if(lv_return <> 0) then
        RAISE ex_logging_err;
     end if;

        --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => NULL,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_WO_TASK_HIERARCHY',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      -- Set the process flag as Valid and populate instance_id
     lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                        (p_table_name   => 'MSC_ST_WO_TASK_HIERARCHY',
                         p_instance_id    => v_instance_id,
                         p_instance_code  => v_instance_code,
                         p_process_flag   => G_VALID,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- At the end calling  the LOG_ERROR for logging all
      -- errored out records.

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name    => 'MSC_ST_WO_TASK_HIERARCHY',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      COMMIT;
    END LOOP;

   EXCEPTION  WHEN ex_logging_err THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_error_text);
   --   G_WARNING_FLAG := 1;
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_WO_TASK_HIERARCHY '||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_error_text);
--      G_WARNING_FLAG := 1;
      ROLLBACK;

  END LOAD_WO_TASK_HIERARCHY;

PROCEDURE LOAD_WO_OPERATION_REL  IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid          RowidTab; --bulk collects rowid
  lv_return         NUMBER;
  lv_error_text     VARCHAR2(250);
  lv_where_str      VARCHAR2(5000);
  lv_sql_stmt       VARCHAR2(5000);
  lv_column_names   VARCHAR2(5000);     --stores concatenated column names
  lv_batch_id       msc_st_wo_operation_rel.batch_id%TYPE;
  lv_message_text   msc_errors.error_text%TYPE;

  ex_logging_err        EXCEPTION;

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_wo_operation_rel
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    batch_id          = p_batch_id
    AND    sr_instance_code  = v_instance_code;

 BEGIN
  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'IN LOAD WO OPERATION REL -');

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Validation check for the table msc_st_wo_operation_rel

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE    msc_st_wo_operation_rel mswor1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 FROM msc_st_wo_operation_rel mswor2 '
    ||'        WHERE mswor2.sr_instance_code  = mswor1.sr_instance_code'
    ||'        AND   mswor2.organization_code   = mswor1.organization_code'
    ||'        AND   mswor2.wip_entity_code   = mswor1.wip_entity_code'
    ||'        AND   mswor2.from_op_seq_num   = mswor1.from_op_seq_num'
    ||'        AND   mswor2.from_op_res_seq_num   = mswor1.from_op_res_seq_num'
    ||'        AND   mswor2.to_op_seq_num   = mswor1.to_op_seq_num'
    ||'        AND   mswor2.to_op_res_seq_num   = mswor1.to_op_res_seq_num'
    ||'        AND   mswor2.process_flag      = mswor1.process_flag'
    ||'        AND   NVL(mswor2.message_id,NULL) IS NULL'
    ||'        GROUP BY sr_instance_code'
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    mswor1.process_flag              = '||G_IN_PROCESS
    ||' AND    mswor1.sr_instance_code          = :v_instance_code'
    ||' AND    NVL(mswor1.message_id,NULL) IS NULL';

    IF V_DEBUG THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    END IF;


    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE   msc_st_wo_operation_rel mswor1 '
    ||' SET   process_flag = '||G_ERROR_FLG||','
    ||'       error_text   = '||''''||lv_message_text||''''
    ||' WHERE message_id   < ( SELECT max(message_id) '
    ||'       FROM  msc_st_wo_operation_rel mswor2'
    ||'       WHERE mswor2.sr_instance_code  = mswor1.sr_instance_code'
    ||'        AND   mswor2.wip_entity_code   = mswor1.wip_entity_code'
    ||'        AND   mswor2.from_op_seq_num   = mswor1.from_op_seq_num'
    ||'        AND   mswor2.from_op_res_seq_num   = mswor1.from_op_res_seq_num'
    ||'        AND   mswor2.to_op_seq_num   = mswor1.to_op_seq_num'
    ||'        AND   mswor2.to_op_res_seq_num   = mswor1.to_op_res_seq_num'
    ||'       AND   mswor2.process_flag      = mswor1.process_flag'
    ||'       AND   NVL(mswor2.message_id,NULL) IS NOT NULL) '
    ||' AND   mswor1.process_flag            = '||G_IN_PROCESS
    ||' AND   mswor1.sr_instance_code        = :v_instance_code '
    ||' AND   NVL(mswor1.message_id,NULL) IS NOT NULL';

    IF V_DEBUG THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    END IF;

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    lv_column_names :=
	' WIP_ENTITY_CODE	||''~''||'
	||'	FROM_OP_SEQ_NUM	||''~''||'
	||'	FROM_OP_RES_SEQ_NUM	||''~''||'
	||'	FROM_OP_DESC	||''~''||'
	||'	TO_OP_SEQ_NUM	||''~''||'
	||'	TO_OP_RES_SEQ_NUM	||''~''||'
	||'	TO_OP_DESC	||''~''||'
	||'	PRECEDENCE_CONSTRAINT	||''~''||'
	||'	MIN_SEPARATION	||''~''||'
	||'	MIN_SEP_TIME_UNIT	||''~''||'
	||'	MAX_SEPARATION	||''~''||'
	||'	MAX_SEP_TIME_UNIT	||''~''||'
	||'	ORGANIZATION_CODE		||''~''||'
	||'	SR_INSTANCE_CODE    ||''~''||'
  ||' DELETED_FLAG ';


    LOOP
      v_sql_stmt := 03;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      'UPDATE msc_st_wo_operation_rel '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;
     EXIT WHEN SQL%NOTFOUND;

      OPEN  c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_wo_operation_rel
      SET  st_transaction_id = msc_st_wo_operation_rel_s.nextval,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      ' AND NVL(deleted_flag,'||NULL_VALUE||') '
      ||' NOT IN(1,2)';
      --Log a warning for those records where the deleted_flag has a value other
      --than SYS_NO
      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_WO_OPERATION_REL',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'DELETED_FLAG',
                      p_debug             => v_debug,
                      p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1     =>   'WIP_ENTITY_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where wip_entity_code is NULL
      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE    msc_st_wo_operation_rel'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text      = '||''''||lv_message_text||''''
      ||' WHERE  ( WIP_ENTITY_CODE IS NULL )'
      ||' AND    process_flag        = '||G_IN_PROCESS
      ||' AND    batch_id            =  :lv_batch_id'
      ||' AND    sr_instance_code    = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;


    -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'MIN_SEP_TIME_UNIT');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- validate time unit

      v_sql_stmt := 07;
      lv_sql_stmt :=
      'UPDATE    msc_st_wo_operation_rel'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text      = '||''''||lv_message_text||''''
      ||' WHERE  upper(MIN_SEP_TIME_UNIT) NOT IN (''S'',''M'',''H'',''D'',''W'') '
      ||' AND    process_flag        = '||G_IN_PROCESS
      ||' AND    batch_id            =  :lv_batch_id'
      ||' AND    sr_instance_code    = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;

      v_sql_stmt := 08;
      lv_sql_stmt :=
      'UPDATE    msc_st_wo_operation_rel'
      ||' SET    MIN_SEP_TIME_UNIT   = (select meaning from fnd_lookup_values lv'
      ||' WHERE LV.LANGUAGE            = userenv(''lang'') '
      ||' AND LV.ENABLED_FLAG        = ''Y'''
      ||' and lookup_type = ''MSC_TIME_UNIT'''
      ||' and lookup_code = upper(min_sep_time_unit))'
      ||' WHERE  NVL(upper(MIN_SEP_TIME_UNIT),-1) IN (''S'',''M'',''H'',''D'',''W'')'
      ||' AND    process_flag        = '||G_IN_PROCESS
      ||' AND    batch_id            =  :lv_batch_id'
      ||' AND    sr_instance_code    = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;

    -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'MAX_SEP_TIME_UNIT');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      v_sql_stmt := 09;
      lv_sql_stmt :=
      'UPDATE    msc_st_wo_operation_rel'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text      = '||''''||lv_message_text||''''
      ||' WHERE  upper(MAX_SEP_TIME_UNIT) NOT IN (''S'',''M'',''H'',''D'',''W'') '
      ||' AND    process_flag        = '||G_IN_PROCESS
      ||' AND    batch_id            =  :lv_batch_id'
      ||' AND    sr_instance_code    = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;
      v_sql_stmt := 10;
      lv_sql_stmt :=
      'UPDATE    msc_st_wo_operation_rel'
      ||' SET    MAX_SEP_TIME_UNIT   = (select meaning from fnd_lookup_values lv'
      ||' WHERE LV.LANGUAGE            = userenv(''lang'') '
      ||' AND LV.ENABLED_FLAG        = ''Y'''
      ||' and lookup_type = ''MSC_TIME_UNIT'''
      ||' and lookup_code = upper(max_sep_time_unit))'
      ||' WHERE  NVL(upper(MAX_SEP_TIME_UNIT),-1) IN (''S'',''M'',''H'',''D'',''W'')'
      ||' AND    process_flag        = '||G_IN_PROCESS
      ||' AND    batch_id            =  :lv_batch_id'
      ||' AND    sr_instance_code    = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;

/*    -- Set the message
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PRECEDENCE_CONSTRAINT',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF; */

      -- Check PRECEDENCE_CONSTRAINT column has valid value or not and if not set it to 1- Starts after end
      -- Log error procedure inserts warning and also defaults the value

      lv_where_str := ' AND NVL(PRECEDENCE_CONSTRAINT,'||NULL_VALUE||') '
                      ||' NOT IN(1,2,3)';

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_WO_OPERATION_REL',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'PRECEDENCE_CONSTRAINT',
                         p_debug             => v_debug,
                         p_default_value     => 1);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 11;
      lv_sql_stmt :=
      'UPDATE    msc_st_wo_operation_rel'
      ||' SET    PRECEDENCE_CONSTRAINT   = (select meaning from fnd_lookup_values lv'
      ||' WHERE LV.LANGUAGE            = userenv(''lang'') '
      ||' AND LV.ENABLED_FLAG        = ''Y'''
      ||' and lookup_type = ''MSC_PRECEDENCE_CONSTRAINT'''
      ||' and lookup_code = precedence_constraint)'
      ||' WHERE  NVL(PRECEDENCE_CONSTRAINT,-1) IN (1,2,3)'
      ||' AND    process_flag        = '||G_IN_PROCESS
      ||' AND    batch_id            =  :lv_batch_id'
      ||' AND    sr_instance_code    = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;
      -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Populate  organization id

     lv_return :=
     MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name     => 'MSC_ST_WO_OPERATION_REL',
                                    p_org_partner_name  => 'ORGANIZATION_CODE',
                                    p_org_partner_id    => 'ORGANIZATION_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_ORGANIZATION,
                                    p_severity          => G_SEV_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_batch_id          => lv_batch_id,
                                    p_debug             => v_debug,
                                    p_error_text        => lv_error_text,
                                    p_company_name_col  => FALSE);

     if(lv_return <> 0) then
        RAISE ex_logging_err;
     end if;

   --Deriving supply_id
      v_sql_stmt := 12;
      lv_sql_stmt :=
      'UPDATE msc_st_wo_operation_rel mswth'
      ||' SET supply_id              = (SELECT transaction_id'
      ||'       FROM   msc_supplies ms'
      ||'       WHERE  ms.sr_instance_id     = :v_instance_id'
      ||'       AND    ms.organization_id    = mswth.organization_id'
      ||'       AND    ms.order_number       = mswth.wip_entity_code'
      ||'       AND    ms.order_type = 70 )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,lv_batch_id,
                        v_instance_code;

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'WIP_ENTITY_CODE');

        v_sql_stmt := 13;
      lv_sql_stmt :=
      'UPDATE      msc_st_wo_operation_rel '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    SUPPLY_ID IS NULL'
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,v_instance_code;

--OP code validations

    -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'FROM_OP_SEQ_NUM');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- validate from_op_seq_num

      v_sql_stmt := 14;
      lv_sql_stmt :=
      'UPDATE msc_st_wo_operation_rel mswth'
      ||' SET    process_flag             =  '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE  NOT EXISTS ( SELECT 1 '
      ||'       FROM   msc_resource_requirements mrr'
      ||'       WHERE  mrr.sr_instance_id     = :v_instance_id'
      ||'       AND    mrr.organization_id    = mswth.organization_id'
      ||'       AND    mrr.supply_id          = mswth.supply_id'
      ||'       AND    mrr.operation_seq_num  = mswth.from_op_seq_num ) '
      ||' AND   process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,lv_batch_id,v_instance_code;

   -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'FROM_OP_RES_SEQ_NUM');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- validate from_op_res_seq_num

      v_sql_stmt := 15;
      lv_sql_stmt :=
      'UPDATE msc_st_wo_operation_rel mswth'
      ||' SET    process_flag             =  '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE  NOT EXISTS ( SELECT 1 '
      ||'       FROM   msc_resource_requirements mrr'
      ||'       WHERE  mrr.sr_instance_id     = :v_instance_id'
      ||'       AND    mrr.organization_id    = mswth.organization_id'
      ||'       AND    mrr.supply_id          = mswth.supply_id'
      ||'       AND    mrr.resource_seq_num  = mswth.from_op_res_seq_num ) '
      ||' AND    process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(from_op_res_seq_num,'||NULL_VALUE||') <> '||NULL_VALUE
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,lv_batch_id,v_instance_code;

    -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'TO_OP_SEQ_NUM');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- validate to_op_seq_num

      v_sql_stmt := 16;
      lv_sql_stmt :=
      'UPDATE msc_st_wo_operation_rel mswth'
      ||' SET    process_flag             =  '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE  NOT EXISTS ( SELECT 1 '
      ||'       FROM   msc_resource_requirements mrr'
      ||'       WHERE  mrr.sr_instance_id     = :v_instance_id'
      ||'       AND    mrr.organization_id    = mswth.organization_id'
      ||'       AND    mrr.supply_id          = mswth.supply_id'
      ||'       AND    mrr.operation_seq_num  = mswth.to_op_seq_num ) '
      ||' AND  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,lv_batch_id,v_instance_code;

   -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'TO_OP_RES_SEQ_NUM');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- validate to_op_res_seq_num

      v_sql_stmt := 17;
      lv_sql_stmt :=
      'UPDATE msc_st_wo_operation_rel mswth'
      ||' SET    process_flag             =  '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE  NOT EXISTS ( SELECT 1 '
      ||'       FROM   msc_resource_requirements mrr'
      ||'       WHERE  mrr.sr_instance_id     = :v_instance_id'
      ||'       AND    mrr.organization_id    = mswth.organization_id'
      ||'       AND    mrr.supply_id          = mswth.supply_id'
      ||'       AND    mrr.resource_seq_num  = mswth.to_op_res_seq_num ) '
      ||' AND    process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(to_op_res_seq_num,'||NULL_VALUE||') <> '||NULL_VALUE
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,lv_batch_id,v_instance_code;

        --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => NULL,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_WO_OPERATION_REL',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      -- Set the process flag as Valid and populate instance_id
     lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                        (p_table_name   => 'MSC_ST_WO_OPERATION_REL',
                         p_instance_id    => v_instance_id,
                         p_instance_code  => v_instance_code,
                         p_process_flag   => G_VALID,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- At the end calling  the LOG_ERROR for logging all
      -- errored out records.

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name    => 'MSC_ST_WO_OPERATION_REL',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      COMMIT;
    END LOOP;

   EXCEPTION  WHEN ex_logging_err THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_error_text);
   --   G_WARNING_FLAG := 1;
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_WO_OPERATION_REL '||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_error_text);
--      G_WARNING_FLAG := 1;
      ROLLBACK;

  END LOAD_WO_OPERATION_REL;

  /*==========================================================================+
  | DESCRIPTION  : This procedure performs validation and loads data into the |
  |                table msc_st_planners.                                     |
  +==========================================================================*/
  PROCEDURE LOAD_planners IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid           RowidTab;
  lv_return          NUMBER;
  lv_error_text      VARCHAR2(250);
  lv_where_str       VARCHAR2(5000);
  lv_sql_stmt        VARCHAR2(5000);
  lv_column_names    VARCHAR2(5000);
  lv_batch_id        msc_st_planners.batch_id%TYPE;
  lv_message_text    msc_errors.error_text%TYPE;

  ex_logging_err     EXCEPTION;

  CURSOR    c1(p_batch_id NUMBER) IS
    SELECT  rowid
    FROM    msc_st_planners
    WHERE   process_flag     IN (G_IN_PROCESS,G_ERROR_FLG)
    AND     batch_id         = p_batch_id
    AND     sr_instance_code = v_instance_code;

    CURSOR c2(p_batch_id NUMBER)IS
	   SELECT
	   x.PLANNER_CODE,
	   x.ORGANIZATION_ID,
	   x.DESCRIPTION,
	   x.DISABLE_DATE,
	   x.ELECTRONIC_MAIL_ADDRESS,
	   x.EMPLOYEE_ID,
	   x.CURRENT_EMPLOYEE_FLAG,
	   x.USER_NAME,
	   x.sr_instance_id,
	   x.LAST_UPDATE_DATE,
	   x.LAST_UPDATED_BY,
	   x.CREATION_DATE,
	   x.CREATED_BY,
	   x.deleted_flag
	  FROM MSC_ST_PLANNERS x
	 WHERE x.sr_instance_code = v_instance_code
	 and   x.batch_id         =p_batch_id
	 and   x.process_flag     = G_VALID;

  BEGIN

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 01;
    lv_sql_stmt :=
    ' UPDATE   msc_st_planners msp1'
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  message_id <  (SELECT MAX(message_id)'
    ||'        FROM  msc_st_planners msp2'
    ||'        WHERE msp2.sr_instance_code  = msp1.sr_instance_code'
    ||'        AND   NVL(msp2.company_name,  '   ||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msp1.company_name,  '   ||''''||NULL_CHAR||''''||')'
    ||'        AND   msp2.organization_code = msp1.organization_code'
    ||'        AND   msp2.planner_code = msp1.planner_code'
    ||'        AND   msp2.process_flag = '||G_IN_PROCESS
    ||'        AND   NVL(msp2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND    msp1.process_flag     = '||G_IN_PROCESS
    ||' AND    msp1.sr_instance_code = :v_instance_code'
    ||' AND    NVL(msp1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;



      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.
    v_sql_stmt := 02;
    lv_sql_stmt :=
    ' UPDATE  msc_st_planners msp1'
    ||' SET   process_flag  = '||G_ERROR_FLG||','
    ||'       error_text    = '||''''||lv_message_text||''''
    ||' WHERE EXISTS( SELECT 1 '
    ||'         FROM  msc_st_planners msp2'
    ||'         WHERE msp2.sr_instance_code  = msp1.sr_instance_code'
    ||'         AND   NVL(msp2.company_name,  '   ||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msp1.company_name,  '   ||''''||NULL_CHAR||''''||')'
    ||'         AND   msp2.organization_code = msp1.organization_code'
    ||'         AND   msp2.planner_code = msp1.planner_code'
    ||'         AND   msp2.process_flag = '||G_IN_PROCESS
    ||'         AND   NVL(msp2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'         AND   msp2.rowid <> msp1.rowid)'
    ||' AND   msp1.process_flag     = '||G_IN_PROCESS
    ||' AND   msp1.sr_instance_code = :v_instance_code'
    ||' AND   NVL(msp1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;



      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_column_names :=
    'PLANNER_CODE              ||''~''||'
    ||'ORGANIZATION_CODE       ||''~''||'
    ||'DESCRIPTION             ||''~''||'
    ||'DISABLE_DATE            ||''~''||'
    ||'ELECTRONIC_MAIL_ADDRESS ||''~''||'
    ||'CURRENT_EMPLOYEE_FLAG   ||''~''||'
    ||'USER_NAME               ||''~''||'
    ||'SR_INSTANCE_CODE        ||''~''||'
    ||'COMPANY_NAME';


    LOOP
      v_sql_stmt := 03;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      'UPDATE msc_st_planners '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_planners
      SET    st_transaction_id   = msc_st_planners_s.NEXTVAL,
             refresh_id          = v_refresh_id,
             last_update_date    = v_current_date,
             last_updated_by     = v_current_user,
             creation_date       = v_current_date,
             created_by          = v_current_user
      WHERE  rowid           = lb_rowid(j);

 /*     --Deletion is not allowed on this table.
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_PLANNERS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE    msc_st_planners '
      ||' SET    process_flag        = '||G_ERROR_FLG||','
      ||'        error_text          = '||''''||lv_message_text||''''
      ||' WHERE  deleted_flag        = '||SYS_YES
      ||' AND    process_flag        = '||G_IN_PROCESS
      ||' AND    batch_id            =  :lv_batch_id'
      ||' AND    sr_instance_code    = :v_instance_code';


        msc_st_util.log_message(lv_sql_stmt);
      END IF;

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;
  */

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      ' AND NVL(deleted_flag,'||NULL_VALUE||') '
      ||' NOT IN(1,2)';
      --Log a warning for those records where the deleted_flag has a value other
      --than SYS_NO
      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_PLANNERS',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'DELETED_FLAG',
                      p_debug             => v_debug,
                      p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PLANNER_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 07;
      lv_sql_stmt :=
      'UPDATE    msc_st_planners '
      ||' SET    process_flag  = '||G_ERROR_FLG||','
      ||'        error_text    = '||''''||lv_message_text||''''
      ||' WHERE  NVL(planner_code,  '||''''||NULL_CHAR||''''||') '
      ||'        =               '||''''||NULL_CHAR||''''
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    sr_instance_code =  :v_instance_code'
      ||' AND    process_flag     = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CURRENT_EMPLOYEE_FLAG');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 07;
      lv_sql_stmt :=
      'UPDATE    msc_st_planners '
      ||' SET    process_flag  = '||G_ERROR_FLG||','
      ||'        error_text    = '||''''||lv_message_text||''''
      ||' WHERE  NVL(current_employee_flag,'||NULL_VALUE||') NOT IN(1,2) '
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    sr_instance_code =  :v_instance_code'
      ||' AND    process_flag     = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
               USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'USER_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 07;
      lv_sql_stmt :=
      'UPDATE    msc_st_planners msp'
      ||' SET    process_flag  = '||G_ERROR_FLG||','
      ||'        error_text    = '||''''||lv_message_text||''''
      ||' WHERE  NOT EXISTS(SELECT 1 '
      ||'        FROM fnd_user fu'
      ||'        where  fu.user_name =UPPER(msp.user_name))'
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    sr_instance_code =  :v_instance_code'
      ||' AND    process_flag     = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      -- Set the message

     lv_return :=  MSC_ST_UTIL.GET_ERROR_MESSAGE
                      (p_app_short_name    => 'MSC',
                       p_error_code        => 'MSC_PP_INVALID_VALUE',
                       p_message_text      => lv_message_text,
                       p_error_text        => lv_error_text,
                       p_token1            => 'COLUMN_NAME',
                       p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Derive organization_id

    lv_return :=  MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_PLANNERS',
                      p_org_partner_name  => 'ORGANIZATION_CODE',
                      p_org_partner_id    => 'ORGANIZATION_ID',
                      p_instance_code     => v_instance_code,
                      p_partner_type      => G_ORGANIZATION,
                      p_severity          => G_SEV_ERROR,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_debug             => v_debug,
                      p_message_text      => lv_message_text);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;
/*
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_UPDATION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_PLANNERS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Updation is not allowed on this entity(this is done to make the
      --Post-Processor in sync with the collection program).
      v_sql_stmt := 09;
      lv_sql_stmt :=
      ' UPDATE   msc_st_planners msp1'
      ||' SET    process_flag     = '||G_ERROR_FLG||','
      ||'        error_text       = '||''''||lv_message_text||''''
      ||' WHERE  process_flag     = '||G_IN_PROCESS
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    sr_instance_code =  :v_instance_code'
      ||' AND    EXISTS'
      ||'        (SELECT 1 FROM msc_planners msp2'
      ||'        WHERE   msp2.organization_id      = msp1.organization_id'
      ||'        AND     msp2.planner_code         = msp1.planner_code'
      ||'        AND     msp2.sr_instance_id       = ' ||v_instance_id ||')';


        msc_st_util.log_message(lv_sql_stmt);
      END IF;

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

*/
    --Derive employee_id

      v_sql_stmt := 07;
      lv_sql_stmt :=
      'UPDATE    msc_st_planners msp'
      ||' SET    employee_id  = (select employee_id '
      ||'                        from   fnd_user fu'
      ||'                        where  fu.user_name = UPPER(msp.user_name)) '
      ||' WHERE  batch_id         =  :lv_batch_id'
      ||' AND    sr_instance_code =  :v_instance_code'
      ||' AND    process_flag     = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_PLANNERS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_PLANNERS',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_PLANNERS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_message_text      => NULL,
                    p_error_text        => lv_error_text,
                    p_debug             => v_debug,
                    p_batch_id          => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     --Inserts the valid records into the ODS table, Since the collection program
     --doesn't collect this entity incrementally and whereras post-processor always
     --runs in the incremental mode.

     v_sql_stmt := 10;
    FOR c_rec IN c2(lv_batch_id) LOOP

  BEGIN

  if (c_rec.deleted_flag= SYS_YES) then
    DELETE from MSC_PLANNERS x where
    x.PLANNER_CODE  = c_rec.PLANNER_CODE
    AND x.ORGANIZATION_ID = c_rec.ORGANIZATION_ID
    AND x.SR_INSTANCE_ID = v_instance_id
    AND c_rec.deleted_flag= SYS_YES;


  else

     UPDATE MSC_PLANNERS x set
     DESCRIPTION =c_rec.DESCRIPTION,
     DISABLE_DATE =c_rec.DISABLE_DATE,
     ELECTRONIC_MAIL_ADDRESS =c_rec.ELECTRONIC_MAIL_ADDRESS,
     EMPLOYEE_ID =c_rec.EMPLOYEE_ID,
     CURRENT_EMPLOYEE_FLAG =c_rec.CURRENT_EMPLOYEE_FLAG,
     USER_NAME =c_rec.USER_NAME,
     LAST_UPDATE_DATE = c_rec.LAST_UPDATE_DATE,
     LAST_UPDATED_BY = c_rec.LAST_UPDATED_BY,
     CREATION_DATE = c_rec.CREATION_DATE,
     CREATED_BY = c_rec.CREATED_BY
     where x.PLANNER_CODE  = c_rec.PLANNER_CODE
     and x.ORGANIZATION_ID = c_rec.ORGANIZATION_ID
     and x.SR_INSTANCE_ID = v_instance_id;


   IF SQL%NOTFOUND THEN

     INSERT INTO MSC_PLANNERS
     ( PLANNER_CODE,
       ORGANIZATION_ID,
       DESCRIPTION,
       DISABLE_DATE,
       ELECTRONIC_MAIL_ADDRESS,
       EMPLOYEE_ID,
       CURRENT_EMPLOYEE_FLAG,
       USER_NAME,
       SR_INSTANCE_ID,
       LAST_UPDATE_DATE,
       LAST_UPDATED_BY,
       CREATION_DATE,
       CREATED_BY)
       VALUES
       (
       c_rec.PLANNER_CODE,
       c_rec.ORGANIZATION_ID,
       c_rec.DESCRIPTION,
       c_rec.DISABLE_DATE,
       c_rec.ELECTRONIC_MAIL_ADDRESS,
       c_rec.EMPLOYEE_ID,
       c_rec.CURRENT_EMPLOYEE_FLAG,
       c_rec.USER_NAME,
       v_instance_id,
       c_rec.LAST_UPDATE_DATE,
       c_rec.LAST_UPDATED_BY,
       c_rec.CREATION_DATE,
       c_rec.CREATED_BY
       );
   END IF;
end if;

  EXCEPTION
    WHEN OTHERS THEN
    lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_PLANNERS'||
                       'Error in Inserting or Updating into MSC_PLANNERS'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;
  END;
END LOOP;

      UPDATE FND_USER y
      SET    EMAIL_ADDRESS = (select  ELECTRONIC_MAIL_ADDRESS
                              from    msc_st_planners z
                               WHERE   UPPER(z.USER_NAME) = y.USER_NAME
                              AND     z.process_flag     = G_VALID
                              AND     z.CURRENT_EMPLOYEE_FLAG = 1
                              AND     z.EMPLOYEE_ID IS NOT NULL
                              AND     z.ELECTRONIC_MAIL_ADDRESS IS NOT NULL
                              AND     z.SR_INSTANCE_ID = v_instance_id
                              AND     rownum=1)
      WHERE  exists (SELECT 1
             from   msc_st_planners x
             WHERE  x.USER_NAME = y.USER_NAME
             AND    x.CURRENT_EMPLOYEE_FLAG = 1
             AND    x.EMPLOYEE_ID IS NOT NULL
             AND    x.ELECTRONIC_MAIL_ADDRESS IS NOT NULL
             AND    x.SR_INSTANCE_ID = v_instance_id
             AND    x.batch_id       = lv_batch_id);


      COMMIT;
     END LOOP;

  EXCEPTION
    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_PLANNERS'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END LOAD_PLANNERS;


/*==========================================================================+
| DESCRIPTION  : This procedure validates the data for inter org shipping   |
|                methods for table MSC_ST_INTERORG_SHIP_METHODS             |
+==========================================================================*/
  PROCEDURE LOAD_SHIP_METHODS IS

  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid          RowidTab; --bulk collects rowid
  lv_return         NUMBER;
  lv_batch_id       NUMBER;
  lv_error_text     VARCHAR2(250);
  lv_where_str      VARCHAR2(5000);
  lv_sql_stmt       VARCHAR2(5000);
  lv_column_names   VARCHAR2(5000);     --stores concatenated column names
  lv_message_text   msc_errors.error_text%TYPE;

  ex_logging_err        EXCEPTION;

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_interorg_ship_methods
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code          = v_instance_code
    AND    batch_id                  = p_batch_id;

  BEGIN

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;


    -- duplicate key validation changed for the bug fix 2748525.
    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE    msc_st_interorg_ship_methods msis1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 FROM msc_st_interorg_ship_methods msis2 '
    ||'        WHERE msis2.sr_instance_code  = msis1.sr_instance_code'
    ||'        AND   NVL(msis2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msis1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   NVL(msis2.from_organization_code,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msis1.from_organization_code,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   NVL(msis2.to_organization_code,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msis1.to_organization_code,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   NVL(msis2.from_location_code,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msis1.from_location_code,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   NVL(msis2.to_location_code,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msis1.to_location_code,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   msis2.ship_method       = msis1.ship_method'
    ||'        AND   msis2.process_flag      = msis1.process_flag'
    ||'        AND   NVL(msis2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'        AND    NVL(msis2.to_region_type, '||NULL_VALUE||')= NVL(msis1.to_region_type, '||NULL_VALUE||')'
    ||'        AND    NVL(msis2.to_country,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.to_country,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.to_country_code,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.to_country_code,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.to_state,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.to_state,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.to_state_code,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.to_state_code,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.to_city,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.to_city,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.to_city_code,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.to_city_code,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.to_postal_code_from,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.to_postal_code_from,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.to_postal_code_to,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.to_postal_code_to,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.to_zone,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.to_zone,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.from_region_type, '||NULL_VALUE||')= NVL(msis1.from_region_type, '||NULL_VALUE||')'
    ||'        AND    NVL(msis2.from_country,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.from_country,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.from_country_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msis1.from_country_code,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.from_state,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.from_state,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.from_state_code,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.from_state_code,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.from_city,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.from_city,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.from_city_code,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.from_city_code,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.from_postal_code_from,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.from_postal_code_from,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.from_postal_code_to,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.from_postal_code_to,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.from_zone,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.from_zone,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   msis2.rowid <> msis1.rowid)'
    ||' AND    msis1.process_flag              = '||G_IN_PROCESS
    ||' AND    msis1.sr_instance_code          = :v_instance_code'
    ||' AND    NVL(msis1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE    msc_st_interorg_ship_methods msis1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE message_id   < ( SELECT max(message_id) '
    ||'        FROM msc_st_interorg_ship_methods msis2 '
    ||'        WHERE msis2.sr_instance_code  = msis1.sr_instance_code'
    ||'        AND   NVL(msis2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msis1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   NVL(msis2.from_organization_code,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msis1.from_organization_code,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   NVL(msis2.to_organization_code,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msis1.to_organization_code,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   NVL(msis2.from_location_code,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msis1.from_location_code,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   NVL(msis2.to_location_code,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msis1.to_location_code,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   msis2.ship_method       = msis1.ship_method'
    ||'        AND    NVL(msis2.to_region_type, '||NULL_VALUE||')= NVL(msis1.to_region_type, '||NULL_VALUE||')'
    ||'        AND    NVL(msis2.to_country,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.to_country,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.to_country_code,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.to_country_code,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.to_state,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.to_state,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.to_state_code,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.to_state_code,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.to_city,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.to_city,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.to_city_code,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.to_city_code,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.to_postal_code_from,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.to_postal_code_from,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.to_postal_code_to,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.to_postal_code_to,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.to_zone,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.to_zone,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.from_region_type, '||NULL_VALUE||')= NVL(msis1.from_region_type, '||NULL_VALUE||')'
    ||'        AND    NVL(msis2.from_country,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.from_country,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.from_country_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msis1.from_country_code,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.from_state,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.from_state,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.from_state_code,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.from_state_code,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.from_city,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.from_city,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.from_city_code,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.from_city_code,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.from_postal_code_from,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.from_postal_code_from,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.from_postal_code_to,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.from_postal_code_to,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msis2.from_zone,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msis1.from_zone,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   msis2.process_flag      = msis1.process_flag'
    ||'        AND   NVL(msis2.message_id,'||NULL_VALUE||') <> '||NULL_VALUE||')'
    ||' AND    msis1.process_flag              = '||G_IN_PROCESS
    ||' AND    msis1.sr_instance_code          = :v_instance_code'
    ||' AND    NVL(msis1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

  lv_column_names :=
  'FROM_ORGANIZATION_CODE       ||''~''||'
  ||'TO_ORGANIZATION_CODE          ||''~''||'
  ||'SR_INSTANCE_CODE              ||''~''||'
  ||'SHIP_METHOD                   ||''~''||'
  ||'DEFAULT_FLAG                  ||''~''||'
  ||'INTRANSIT_TIME               ||''~''||'
  ||'TIME_UOM_CODE                 ||''~''||'
  ||'WEIGHT_CAPACITY               ||''~''||'
  ||'WEIGHT_UOM                    ||''~''||'
  ||'VOLUME_CAPACITY               ||''~''||'
  ||'VOLUME_UOM                    ||''~''||'
  ||'COST_PER_WEIGHT_UNIT          ||''~''||'
  ||'COST_PER_VOLUME_UNIT          ||''~''||'
  ||'TRANSPORT_CAP_OVER_UTIL_COST  ||''~''||'
  ||'COMPANY_NAME                  ||''~''||'
  ||'FROM_LOCATION_CODE            ||''~''||'
  ||'TO_LOCATION_CODE              ||''~''||'
  ||'DELETED_FLAG' ;

    -- Dividing records in batches based on batchsize
    LOOP
      v_sql_stmt := 03;
      SELECT       msc_st_batch_id_s.NEXTVAL
      INTO         lv_batch_id
      FROM         DUAL;

    v_sql_stmt := 04;
      lv_sql_stmt :=
      'UPDATE   msc_st_interorg_ship_methods '
      ||' SET   batch_id                       = :lv_batch_id '
      ||' WHERE process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND   sr_instance_code               = :v_instance_code'
      ||' AND   NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND ;

      OPEN  c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_interorg_ship_methods
      SET  st_transaction_id = msc_st_interorg_ship_methods_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_INTERORG_SHIP_METHODS');


      -- Deletion is not allowed for this table
      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE      msc_st_interorg_ship_methods '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         = :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

     -- set the message

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check DELETE_FLAG column has valid value or not and if not set it to SYS_NO
      -- Log error procedure inserts warning and also defaults the delete flag

      lv_where_str := ' AND NVL(deleted_flag,'||NULL_VALUE||') '
                      ||' NOT IN(1,2)';

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_INTERORG_SHIP_METHODS',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'DELETED_FLAG',
                         p_debug             => v_debug,
                         p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SHIP_METHOD');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where ship_method is NULL
      v_sql_stmt := 07;
      lv_sql_stmt :=
      'UPDATE    msc_st_interorg_ship_methods'
      ||' SET    process_flag            = '||G_ERROR_FLG||','
      ||'        error_text      = '||''''||lv_message_text||''''
      ||' WHERE  NVL(ship_method, '||''''||NULL_CHAR||''''||') '
      ||'        =                 '||''''||NULL_CHAR||''''
      ||' AND    batch_id                = :lv_batch_id'
      ||' AND    process_flag            = '||G_IN_PROCESS
      ||' AND    sr_instance_code        = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      -- Set the message

     lv_return :=  MSC_ST_UTIL.GET_ERROR_MESSAGE
                      (p_app_short_name    => 'MSC',
                       p_error_code        => 'MSC_PP_INVALID_VALUE',
                       p_message_text      => lv_message_text,
                       p_error_text        => lv_error_text,
                       p_token1            => 'COLUMN_NAME',
                       p_token_value1      => 'FROM_ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Derive from_organization_id

    lv_return :=  MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_INTERORG_SHIP_METHODS',
                      p_org_partner_name  => 'FROM_ORGANIZATION_CODE',
                      p_org_partner_id    => 'FROM_ORGANIZATION_ID',
                      p_instance_code     => v_instance_code,
                      p_partner_type      => G_ORGANIZATION,
                      p_severity          => G_SEV3_ERROR,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_debug             => v_debug,
                      p_message_text      => lv_message_text);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    lv_sql_stmt :=
      'UPDATE msc_st_interorg_ship_methods '
      ||' SET   FROM_ORGANIZATION_ID = -1 '
      ||' WHERE NVL(FROM_ORGANIZATION_ID,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND   NVL(FROM_ORGANIZATION_CODE,'||''''||NULL_CHAR||''''||')'
      ||'       = '||''''||NULL_CHAR||''''
      ||' AND   process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      -- Set the message

     lv_return :=  MSC_ST_UTIL.GET_ERROR_MESSAGE
                      (p_app_short_name    => 'MSC',
                       p_error_code        => 'MSC_PP_INVALID_VALUE',
                       p_message_text      => lv_message_text,
                       p_error_text        => lv_error_text,
                       p_token1            => 'COLUMN_NAME',
                       p_token_value1      => 'TO_ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Derive to_organization_id

    lv_return :=  MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_INTERORG_SHIP_METHODS',
                      p_org_partner_name  => 'TO_ORGANIZATION_CODE',
                      p_org_partner_id    => 'TO_ORGANIZATION_ID',
                      p_instance_code     => v_instance_code,
                      p_partner_type      => G_ORGANIZATION,
                      p_severity          => G_SEV3_ERROR,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_debug             => v_debug,
                      p_message_text      => lv_message_text);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    lv_sql_stmt :=
      'UPDATE msc_st_interorg_ship_methods '
      ||' SET   TO_ORGANIZATION_ID = -1 '
      ||' WHERE NVL(TO_ORGANIZATION_ID,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND   NVL(TO_ORGANIZATION_CODE,'||''''||NULL_CHAR||''''||')'
      ||'       = '||''''||NULL_CHAR||''''
      ||' AND   process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

    -- Update FROM_LOCATION_ID
      v_sql_stmt  := 08;
      lv_sql_stmt :=
      'UPDATE msc_st_interorg_ship_methods msis'
      ||' SET   from_location_id              = (SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1       = msis.sr_instance_code'
      ||'       AND    mls.char3       = msis.from_location_code'
      ||'       AND    mls.entity_name = ''LOCATION_ID'' )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


    -- Update TO_LOCATION_ID

      v_sql_stmt  := 09;
      lv_sql_stmt :=
      'UPDATE msc_st_interorg_ship_methods msis'
      ||' SET   to_location_id              = (SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1       = msis.sr_instance_code'
      ||'       AND    mls.char3       = msis.to_location_code'
      ||'       AND    mls.entity_name = ''LOCATION_ID'' )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


   -- if from or to location code was provided, error out if doesn't exists in local id.

      lv_return :=  MSC_ST_UTIL.GET_ERROR_MESSAGE
                      (p_app_short_name    => 'MSC',
                       p_error_code        => 'MSC_PP_INVALID_VALUE',
                       p_message_text      => lv_message_text,
                       p_error_text        => lv_error_text,
                       p_token1            => 'COLUMN_NAME',
                       p_token_value1      => 'TO_LOCATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt  := 9.1;
      lv_sql_stmt :=
      'UPDATE msc_st_interorg_ship_methods '
      ||' SET   error_text   = '||''''||lv_error_text||''''||','
      ||'       process_flag = '||G_ERROR
      ||' WHERE NVL(to_location_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND   NVL(to_location_code,'||''''||NULL_CHAR||''''||')'
      ||'       <> '||''''||NULL_CHAR||''''
      ||' AND   process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return :=  MSC_ST_UTIL.GET_ERROR_MESSAGE
                      (p_app_short_name    => 'MSC',
                       p_error_code        => 'MSC_PP_INVALID_VALUE',
                       p_message_text      => lv_message_text,
                       p_error_text        => lv_error_text,
                       p_token1            => 'COLUMN_NAME',
                       p_token_value1      => 'FROM_LOCATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt  := 9.2;
      lv_sql_stmt :=
      'UPDATE msc_st_interorg_ship_methods '
      ||' SET   error_text   = '||''''||lv_error_text||''''||','
      ||'       process_flag = '||G_ERROR
      ||' WHERE NVL(from_location_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND   NVL(from_location_code,'||''''||NULL_CHAR||''''||')'
      ||'       <> '||''''||NULL_CHAR||''''
      ||' AND   process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_sql_stmt :=
      'UPDATE msc_st_interorg_ship_methods '
      ||' SET   from_location_id = -1'
      ||' WHERE NVL(from_location_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND   NVL(from_location_code,'||''''||NULL_CHAR||''''||')'
      ||'       = '||''''||NULL_CHAR||''''
      ||' AND   process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

   lv_sql_stmt :=
      'UPDATE msc_st_interorg_ship_methods '
      ||' SET   to_location_id = -1'
      ||' WHERE NVL(to_location_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND   NVL(to_location_code,'||''''||NULL_CHAR||''''||')'
      ||'       = '||''''||NULL_CHAR||''''
      ||' AND   process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

     -- Derive from_region_id

      lv_sql_stmt :=
      'UPDATE msc_st_interorg_ship_methods msr'
      ||' SET from_region_id     = (SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1 = msr.sr_instance_code'
      ||'       AND    mls.number1 = nvl(msr.from_region_type,'||NULL_VALUE||')'
      ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.from_country,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char3,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.from_country_code,    '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char4,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.from_state,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char5,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.from_state_code,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char6,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.from_city,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char7,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.from_city_code,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char8,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.from_postal_code_from,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char9,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.from_postal_code_to,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char10,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.from_zone,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.entity_name = ''REGION_ID'' )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :lv_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

    -- Derive to_region_id

      lv_sql_stmt :=
      'UPDATE msc_st_interorg_ship_methods msr'
      ||' SET   to_region_id     = (SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1 = msr.sr_instance_code'
      ||'       AND    mls.number1 = nvl(msr.to_region_type,'||NULL_VALUE||')'
      ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.to_country,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char3,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.to_country_code,    '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char4,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.to_state,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char5,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.to_state_code,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char6,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.to_city,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char7,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.to_city_code,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char8,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.to_postal_code_from,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char9,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.to_postal_code_to,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char10,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.to_zone,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.entity_name = ''REGION_ID'' )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :lv_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


   -- records should either have organization id's populated or location id's populated or both.

   -- Set the message

     lv_return :=  MSC_ST_UTIL.GET_ERROR_MESSAGE
                      (p_app_short_name    => 'MSC',
                       p_error_code        => 'MSC_PP_INVALID_VALUE',
                       p_message_text      => lv_message_text,
                       p_error_text        => lv_error_text,
                       p_token1            => 'COLUMN_NAME',
                       p_token_value1      =>  'TO_ORGANIZATION_CODE OR '
                                             ||'FROM_ORGANIZATION_CODE OR '
                                             ||'TO_LOCATION_CODE OR '
                                             ||'FROM_LOCATION_CODE OR '
                                             ||'TO_REGION_CODE OR '
                                             ||'FROM_REGION_CODE ');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      v_sql_stmt := 9.1;
      lv_sql_stmt :=
      'UPDATE     msc_st_interorg_ship_methods msis1'
      ||' SET     process_flag     = '||G_ERROR_FLG||','
      ||'         error_text       = '||''''||lv_message_text||''''
      ||' WHERE   (msis1.to_location_id is NULL OR msis1.from_location_id is NULL) '
      ||' AND     (msis1.to_organization_id is NULL OR msis1.from_organization_id is NULL) '
      ||' AND     (msis1.to_region_id is NULL OR msis1.from_region_id is NULL) '
      ||' AND     msis1.batch_id                 = :lv_batch_id'
      ||' AND     msis1.process_flag             = '||G_IN_PROCESS
      ||' AND     msis1.sr_instance_code         = :v_instance_code' ;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,
                                          v_instance_code;


   -- Set the message
          lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                         (p_app_short_name    => 'MSC',
                          p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                          p_message_text      => lv_message_text,
                          p_error_text        => lv_error_text,
                          p_token1            => 'COLUMN_NAME',
                          p_token_value1      => 'DEFAULT_FLAG',
                          p_token2            => 'DEFAULT_VALUE',
                          p_token_value2      => SYS_NO);
      -- Check DEFAULT_FLAG column has valid value or not and if not set it to SYS_NO

      lv_where_str := ' AND NVL(default_flag,'||NULL_VALUE||') '
                      ||' NOT IN(1,2)';

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_INTERORG_SHIP_METHODS',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'DEFAULT_FLAG',
                         p_debug             => v_debug,
                         p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_DEFAULT_SHIP_METHOD',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'FROM_ORGANIZATION',
                      p_token_value1      => 'FROM_ORGANIZATION_CODE, FROM_LOCATION_CODE, FROM_REGION_CODE',
                      p_token2            => 'TO_ORGANIZATION',
                      p_token_value2      => 'TO_ORGANIZATION, TO_LOCATION_CODE, TO_REGION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Check that only one ship method has default flag set as yes
    -- in ODS as well as staging
    -- forward ported 2767559

      v_sql_stmt := 12;
      lv_sql_stmt :=
      'UPDATE     msc_st_interorg_ship_methods msis1'
      ||' SET     process_flag     = '||G_ERROR_FLG||','
      ||'         error_text       = '||''''||lv_message_text||''''
      ||' WHERE   EXISTS( SELECT 1 '
      ||'         FROM    msc_st_interorg_ship_methods msis2'
      ||'         WHERE   msis2.sr_instance_code = msis1.sr_instance_code'
      ||'         AND     nvl(msis2.from_organization_code, '||''''||NULL_CHAR||''''||') = '
      ||'		  nvl(msis1.from_organization_code, '||''''||NULL_CHAR||''''||')'
      ||'         AND     nvl(msis2.to_organization_code, '||''''||NULL_CHAR||''''||') = '
      ||'		  nvl(msis1.to_organization_code, '||''''||NULL_CHAR||''''||')'
      ||'         AND     nvl(msis2.from_location_code, '||''''||NULL_CHAR||''''||') = '
      ||'		  nvl(msis1.from_location_code, '||''''||NULL_CHAR||''''||')'
      ||'         AND     nvl(msis2.to_location_code, '||''''||NULL_CHAR||''''||') = '
      ||'		  nvl(msis1.to_location_code, '||''''||NULL_CHAR||''''||')'
      ||'         AND     nvl(msis2.from_region_id, '||NULL_VALUE||') = '
      ||'		  nvl(msis1.from_region_id, '||NULL_VALUE||')'
      ||'         AND     nvl(msis2.to_region_id, '||NULL_VALUE||') = '
      ||'		  nvl(msis1.to_region_id, '||NULL_VALUE||')'
      ||'         AND     msis2.process_flag IN (2,5)'
      ||'         AND     msis2.default_flag = '||SYS_YES
      ||'         AND     msis2.rowid <> msis1.rowid'
      ||'         UNION'
      ||'         SELECT 1 '
      ||'         FROM   msc_interorg_ship_methods msis3 '
      ||'         WHERE  msis3.sr_instance_id = :v_instance_id'
      ||'         AND    nvl(msis3.from_organization_id, '||''''||NULL_CHAR||''''||') = '
      ||'		 nvl(msis1.from_organization_id, '||''''||NULL_CHAR||''''||')'
      ||'         AND    nvl(msis3.to_organization_id, '||''''||NULL_CHAR||''''||') = '
      ||'		 nvl(msis1.to_organization_id, '||''''||NULL_CHAR||''''||')'
      ||'         AND    nvl(msis3.from_location_id, '||''''||NULL_CHAR||''''||') = '
      ||'		 nvl(msis1.from_location_id, '||''''||NULL_CHAR||''''||')'
      ||'         AND    nvl(msis3.to_location_id, '||''''||NULL_CHAR||''''||') = '
      ||'		 nvl(msis1.to_location_id, '||''''||NULL_CHAR||''''||')'
      ||'         AND    nvl(msis3.from_region_id, '||''''||NULL_CHAR||''''||') = '
      ||'		 nvl(msis1.from_region_id, '||''''||NULL_CHAR||''''||')'
      ||'         AND    nvl(msis3.to_region_id, '||''''||NULL_CHAR||''''||') = '
      ||'		 nvl(msis1.to_region_id, '||''''||NULL_CHAR||''''||')'
      ||'         AND    msis3.plan_id  = -1 '
      ||'         AND    msis3.default_flag = '||SYS_YES||')'
      ||' AND     msis1.default_flag             = '||SYS_YES
      ||' AND     msis1.batch_id                 = :lv_batch_id'
      ||' AND     msis1.process_flag             = '||G_IN_PROCESS
      ||' AND     msis1.sr_instance_code         = :v_instance_code' ;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_id,
                                          lv_batch_id,
                                          v_instance_code;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'VOLUME_UOM');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Validate Volume UOM

     lv_return :=
     MSC_ST_UTIL.VALIDATE_UOM      (p_table_name     => 'MSC_ST_INTERORG_SHIP_METHODS',
                                    p_uom_col_name   => 'VOLUME_UOM',
                                    p_instance_id    => v_instance_id,
                                    p_instance_code  => v_instance_code,
                                    p_severity       => G_SEV3_ERROR,
                                    p_message_text   => lv_message_text,
                                    p_batch_id       => lv_batch_id,
                                    p_debug          => v_debug,
                                    p_error_text     => lv_error_text);

     if(lv_return <> 0) then
        RAISE ex_logging_err;
     end if;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'WEIGHT_UOM');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Validate Weight UOM

     lv_return :=
     MSC_ST_UTIL.VALIDATE_UOM      (p_table_name     => 'MSC_ST_INTERORG_SHIP_METHODS',
                                    p_uom_col_name   => 'WEIGHT_UOM',
                                    p_instance_id    => v_instance_id,
                                    p_instance_code  => v_instance_code,
                                    p_severity       => G_SEV3_ERROR,
                                    p_message_text   => lv_message_text,
                                    p_batch_id       => lv_batch_id,
                                    p_debug          => v_debug,
                                    p_error_text     => lv_error_text);

     if(lv_return <> 0) then
        RAISE ex_logging_err;
     end if;


      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_INTERORG_SHIP_METHODS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
     END IF;


      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                     (p_table_name     => 'MSC_ST_INTERORG_SHIP_METHODS',
                      p_instance_id    => v_instance_id,
                      p_instance_code  => v_instance_code,
                      p_process_flag   => G_VALID,
                      p_error_text     => lv_error_text,
                      p_debug          => v_debug,
                      p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  v_sql_stmt := 13;
   lv_sql_stmt :=
   'UPDATE      msc_st_interorg_ship_methods'
   ||' SET      sr_instance_id2 = '||v_instance_id
   ||' WHERE    sr_instance_code    = :v_instance_code'
   ||' AND      process_flag        ='|| G_VALID
   ||' AND      batch_id            = :lv_batch_id' ;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_INTERORG_SHIP_METHODS',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_ERROR,
                      p_message_text      => NULL,
                      p_error_text        => lv_error_text,
                      p_debug             => v_debug,
                      p_batch_id          => lv_batch_id);
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      COMMIT;
    END LOOP;

  EXCEPTION
    WHEN too_many_rows THEN
      lv_error_text  := substr('MSC_CL_PRE_PROCESS.LOAD_SHIP_METHODS'||'('
                      ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_SHIP_METHODS'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END LOAD_SHIP_METHODS ;


/*=============================================================================+
| DESCRIPTION  : This procedure validates the data for REGIONS, ZONES, Region   |
|                locations and region sites                                     |
+==============================================================================*/

  PROCEDURE LOAD_REGIONS IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  TYPE CurTyp       IS REF CURSOR;
  c1                CurTyp;
  lb_rowid              RowidTab;   --bulk collects rowid
  lv_return             NUMBER;
  lv_error_text         VARCHAR2(250);
  lv_where_str          VARCHAR2(5000);
  lv_sql_stmt           VARCHAR2(5000);
  lv_column_names       VARCHAR2(5000);       --stores concatenated column names
  lv_batch_id           msc_st_regions.batch_id%TYPE;
  lv_message_text       msc_errors.error_text%TYPE;
  lv_cursor_stmt        VARCHAR2(5000);

  ex_logging_err        EXCEPTION;

  CURSOR c2(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_regions
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;


 CURSOR c3(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_regions
    WHERE  NVL(region_id,NULL_VALUE) = NULL_VALUE
    AND    process_flag                  = G_IN_PROCESS
    AND    NVL(batch_id,NULL_VALUE)      =p_batch_id
    AND    sr_instance_code              = v_instance_code;

 CURSOR c4(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_zone_regions
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

 CURSOR c5(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_zone_regions
    WHERE  NVL(zone_region_id,NULL_VALUE) = NULL_VALUE
    AND    process_flag                  = G_IN_PROCESS
    AND    NVL(batch_id,NULL_VALUE)      =p_batch_id
    AND    sr_instance_code              = v_instance_code;

 CURSOR c6(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_region_locations
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

 CURSOR c7(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_region_locations
    WHERE  process_flag                = G_IN_PROCESS
    AND    deleted_flag                = SYS_NO
    AND    NVL(location_id,NULL_VALUE) = NULL_VALUE
    AND    sr_instance_code            = v_instance_code
    AND    batch_id                    = p_batch_id
    GROUP BY location_code;

 CURSOR c8(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_region_sites
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

  BEGIN

    --Getting the error message text
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE     msc_st_regions msr1 '
    ||' SET     process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   message_id <  (SELECT MAX(message_id)'
    ||'         FROM   msc_st_regions msr2'
    ||'         WHERE  msr2.sr_instance_code  = msr1.sr_instance_code'
    ||'         AND    msr2.region_type = msr1.region_type'
    ||'         AND    NVL(msr2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.country,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.country,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.country_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.country_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.state,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.state,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.state_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.state_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.city,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.city,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.city_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.city_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.postal_code_from,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.postal_code_from,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.postal_code_to,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.postal_code_to,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.zone,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.zone,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    msr2.process_flag      ='|| G_IN_PROCESS
    ||'         AND    NVL(msr2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND     msr1.process_flag             = '||G_IN_PROCESS
    ||' AND     msr1.sr_instance_code         = :v_instance_code'
    ||' AND     NVL(msr1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


   /* v_sql_stmt := 1.1;
    lv_sql_stmt :=
    'UPDATE     msc_st_regions msr1 '
    ||' SET     process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   message_id <  (SELECT MAX(message_id)'
    ||'         FROM   msc_st_regions msr2'
    ||'         WHERE  msr2.sr_instance_code  = msr1.sr_instance_code'
    ||'         AND    msr2.region_type = msr1.region_type'
    ||'         AND    NVL(msr2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.zone,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.zone,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    msr2.process_flag      ='|| G_IN_PROCESS
    ||'         AND    msr2.region_type in  (10,11) '
    ||'         AND    NVL(msr2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND     msr1.process_flag             = '||G_IN_PROCESS
    ||' AND     msr1.sr_instance_code         = :v_instance_code'
    ||' AND    msr1.region_type in  (10,11) '
    ||' AND     NVL(msr1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;

    IF V_DEBUG THEN
      msc_st_util.log_message(lv_sql_stmt);
    END IF;

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code; */


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.
    v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE  msc_st_regions msr1'
    ||' SET     process_flag  = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   EXISTS( SELECT 1 '
    ||'         FROM   msc_st_regions msr2'
    ||'         WHERE  msr2.sr_instance_code           = msr1.sr_instance_code'
    ||'         AND    msr2.region_type = msr1.region_type'
    ||'         AND    NVL(msr2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.country,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.country,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.country_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.country_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.state,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.state,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.state_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.state_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.city,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.city,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.city_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.city_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.postal_code_from,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.postal_code_from,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.postal_code_to,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.postal_code_to,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.zone,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.zone,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    msr2.process_flag               = '||G_IN_PROCESS
    ||'         GROUP BY sr_instance_code, region_type, company_name,country,country_code, state, state_code, city, city_code, postal_code_from, postal_code_to, zone'
    ||'         HAVING COUNT(*) > 1)'
    ||' AND     msr1.process_flag     = '||G_IN_PROCESS
    ||' AND     msr1.sr_instance_code = :v_instance_code'
    ||' AND     NVL(msr1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;



    lv_column_names :=
  'REGION_TYPE                    ||''~''||'
  ||' COUNTRY                     ||''~''||'
  ||' COUNTRY_CODE                ||''~''||'
  ||' STATE_CODE            	  ||''~''||'
  ||' SR_INSTANCE_CODE            ||''~''||'
  ||' STATE                       ||''~''||'
  ||' CITY              	  ||''~''||'
  ||' CITY_CODE 		  ||''~''||'
  ||' POSTAL_CODE_FROM            ||''~''||'
  ||' POSTAL_CODE_TO              ||''~''||'
  ||' ZONE                        ||''~''||'
  ||' DELETED_FLAG                ||''~''||'
  ||' COMPANY_NAME ' ;

  -- Now processing by batch
   LOOP
      v_sql_stmt := 03;
      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      ' UPDATE msc_st_regions '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c2(lv_batch_id);
      FETCH c2 BULK COLLECT INTO lb_rowid;
      CLOSE c2;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_regions
      SET  st_transaction_id = msc_st_regions_s.NEXTVAL,
           refresh_number    = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_REGIONS');


      -- Deletion is not allowed for this table
      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE      msc_st_regions '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         = :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

     -- set the message

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check DELETED_FLAG column has valid value or not and if not set it to SYS_NO
      -- Log error procedure inserts warning and also defaults the deleted flag

      lv_where_str := ' AND NVL(deleted_flag,'||NULL_VALUE||') '
                      ||' NOT IN(1,2)';

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_REGIONS',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'DELETED_FLAG',
                         p_debug             => v_debug,
                         p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'REGION_TYPE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    lv_sql_stmt :=
    'UPDATE    msc_st_regions'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  region_type   NOT IN (0,1,2,3,10) '
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    lv_sql_stmt :=
      ' UPDATE msc_st_regions '
      ||' SET    parent_region_id  = -1'
      ||' WHERE  process_flag   = '||G_IN_PROCESS
      ||' AND    sr_instance_code  = :v_instance_code'
      ||' AND    region_type in (0,10) '
      ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code, lv_batch_id;


    -- write message text here

    /* lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                         (p_app_short_name    => 'MSC',
                          p_error_code        => 'MSC_PP_POSTAL_CODE_OVERLAP',
                          p_message_text      => lv_message_text,
                          p_error_text        => lv_error_text);

            IF lv_return <> 0 THEN
              RAISE ex_logging_err;
            END IF;

    lv_sql_stmt :=
    'UPDATE  msc_st_regions msr1'
    ||' SET     process_flag  = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   EXISTS( SELECT 1 '
    ||'         FROM   msc_st_regions msr2'
    ||'         WHERE  msr2.sr_instance_code           = msr1.sr_instance_code'
    ||'         AND    msr2.region_type = msr1.region_type'
    ||'         AND    NVL(msr2.country,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.country,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.country_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.country_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    ((NVL(msr2.postal_code_from,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.postal_code_from,  '||''''||NULL_CHAR||''''||')'
    ||'                AND    NVL(msr2.postal_code_to,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.postal_code_to,  '||''''||NULL_CHAR||''''||'))'
    ||'            OR (NVL(msr2.postal_code_from,  '||''''||NULL_CHAR||''''||') > '
    ||'                NVL(msr1.postal_code_from,  '||''''||NULL_CHAR||''''||')'
    ||'                AND    NVL(msr2.postal_code_from,  '||''''||NULL_CHAR||''''||') < '
    ||'                NVL(msr1.postal_code_to,  '||''''||NULL_CHAR||''''||'))'
    ||'            OR (NVL(msr2.postal_code_to,  '||''''||NULL_CHAR||''''||') > '
    ||'                NVL(msr1.postal_code_from,  '||''''||NULL_CHAR||''''||')'
    ||'                AND    NVL(msr2.postal_code_to,  '||''''||NULL_CHAR||''''||') < '
    ||'                NVL(msr1.postal_code_to,  '||''''||NULL_CHAR||''''||')))'
    ||'         AND    msr2.process_flag               = '||G_IN_PROCESS
    ||'         AND    NVL(msr2.postal_code_from,  '||''''||NULL_CHAR||''''||')'
    ||'                <> '||''''||NULL_CHAR||''''
    ||'         AND    NVL(msr1.postal_code_from,  '||''''||NULL_CHAR||''''||')'
    ||'                <> '||''''||NULL_CHAR||''''
    ||'         AND    msr2.region_type in  (0,1,2,3) '
    ||' AND     msr1.rowid <> msr2.rowid)'
    ||' AND     msr1.process_flag     = '||G_IN_PROCESS
    ||' AND     msr1.sr_instance_code = :v_instance_code'
    ||' AND     msr1.region_type in  (0,1,2,3) ';



      msc_st_util.log_message(lv_sql_stmt);


    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    */

     --Deriving region_id

      lv_sql_stmt :=
      'UPDATE msc_st_regions msr'
      ||' SET region_id      = nvl((SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1 = msr.sr_instance_code'
      ||'       AND    mls.number1 = msr.region_type'
      ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.country,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char3,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.country_code,    '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char4,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.state,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char5,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.state_code,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char6,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.city,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char7,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.city_code,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char8,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.postal_code_from,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char9,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.postal_code_to,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char10,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.zone,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.entity_name = ''REGION_ID'' ), ' ||NULL_VALUE|| ')'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :lv_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_UPDATION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_REGIONS');


    -- Error out the record if same region already exists in ODS
    -- As we do not allow regions incremental update
    -- It has to be purged before loaded again

      lv_sql_stmt :=
      'UPDATE      msc_st_regions msr'
      ||' SET      msr.process_flag     = '||G_ERROR_FLG||','
      ||'          msr.error_text       = '||''''||lv_message_text||''''
      ||' WHERE    msr.batch_id         = :lv_batch_id'
      ||' AND      msr.sr_instance_code = :v_instance_code'
      ||' AND      EXISTS ( SELECT 1'
      ||'          FROM     msc_regions mr'
      ||'          WHERE    nvl(msr.region_id,'||NULL_VALUE||') = mr.region_id'
      ||'          AND      mr.sr_instance_id = :v_instance_id)';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code,
                        v_instance_id;


     --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_REGIONS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Generation of region_id
      OPEN  c3(lv_batch_id);
      FETCH c3 BULK COLLECT INTO lb_rowid ;

      IF c3%ROWCOUNT > 0  THEN
        v_sql_stmt := 12;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        UPDATE  msc_st_regions
        SET     region_id = msc_st_region_id_s.NEXTVAL
        WHERE rowid           = lb_rowid(j);

      v_sql_stmt := 13;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        INSERT INTO msc_local_id_setup
          (local_id,
           st_transaction_id,
           instance_id,
           entity_name,
           data_source_type,
           char1,
           char2,
           char3,
           char4,
           char5,
           char6,
           char7,
           char8,
           char9,
           char10,
           number1,
           last_update_date,
           last_updated_by,
           creation_date,
           created_by)
        SELECT
            region_id,
            st_transaction_id,
            v_instance_id,
            'REGION_ID',
            data_source_type,
            v_instance_code,
            country,
            country_code,
            state,
            state_code,
            city,
            city_code,
            postal_code_from,
            postal_code_to,
            zone,
            region_type,
            v_current_date,
            v_current_user,
            v_current_date,
            v_current_user
        FROM msc_st_regions
        WHERE  rowid            = lb_rowid(j);

      END IF;
      CLOSE c3 ;

      lv_sql_stmt :=
      ' UPDATE msc_st_regions msr1 '
      ||' SET    parent_region_id  = (SELECT msr2.region_id'
      ||' FROM   msc_st_regions msr2'
      ||' WHERE  msr2.sr_instance_code = msr1.sr_instance_code '
      ||' AND    msr2.region_type      = msr1.region_type - 1 '
      ||' AND    NVL(msr2.country,   NVL(msr1.country,    '||''''||NULL_CHAR||''''||')) = '
      ||'              NVL(msr1.country,     '||''''||NULL_CHAR||''''||') '
      ||' AND    NVL(msr2.country_code,  NVL(msr1.country_code,   '||''''||NULL_CHAR||''''||')) = '
      ||'             NVL(msr1.country_code,    '||''''||NULL_CHAR||''''||') '
      ||' AND    NVL(msr2.state,  NVL(msr1.state,  '||''''||NULL_CHAR||''''||')) = '
      ||'            NVL(msr1.state,     '||''''||NULL_CHAR||''''||') '
      ||' AND    NVL(msr2.state_code, NVL(msr1.state_code,  '||''''||NULL_CHAR||''''||')) = '
      ||'              NVL(msr1.state_code,     '||''''||NULL_CHAR||''''||') '
      ||' AND    NVL(msr2.city,  NVL(msr1.city,  '||''''||NULL_CHAR||''''||')) = '
      ||'              NVL(msr1.city,     '||''''||NULL_CHAR||''''||') '
      ||' AND    NVL(msr2.city_code, NVL(msr1.city_code,  '||''''||NULL_CHAR||''''||')) = '
      ||'              NVL(msr1.city_code,     '||''''||NULL_CHAR||''''||') '
      ||' AND    msr2.process_flag   = '||G_IN_PROCESS
      ||' AND    msr2.region_type in (0,1,2)) '
      ||' WHERE  msr1.process_flag   = '||G_IN_PROCESS
      ||' AND    sr_instance_code  = :v_instance_code'
      ||' AND    region_type in (1,2,3) '
      ||' AND    NVL(parent_region_id, '||NULL_VALUE||')= '|| NULL_VALUE
      ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code, lv_batch_id;

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_REGIONS',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_REGIONS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_message_text      => NULL,
                    p_error_text        => lv_error_text,
                    p_debug             => v_debug,
                    p_batch_id          => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   lv_sql_stmt :=
   ' INSERT INTO MSC_REGIONS '
  ||' (REGION_ID,'
  ||' REGION_TYPE,'
  ||' PARENT_REGION_ID,'
  ||' COUNTRY_CODE,'
  ||' COUNTRY_REGION_CODE,'
  ||' STATE_CODE,'
  ||' CITY_CODE,'
  ||' PORT_FLAG,'
  ||' AIRPORT_FLAG,'
  ||' ROAD_TERMINAL_FLAG,'
  ||' RAIL_TERMINAL_FLAG,'
  ||' LONGITUDE,'
  ||' LATITUDE,'
  ||' TIMEZONE,'
  ||' CONTINENT,'
  ||' COUNTRY,'
  ||' COUNTRY_REGION,'
  ||' STATE,'
  ||' CITY,'
  ||' ZONE,'
  ||' ZONE_LEVEL,'
  ||' POSTAL_CODE_FROM,'
  ||' POSTAL_CODE_TO,'
  ||' ALTERNATE_NAME,'
  ||' COUNTY,'
  ||' SR_INSTANCE_ID,'
  ||' ZONE_USAGE,'
  ||' CREATED_BY,'
  ||' CREATION_DATE,'
  ||' LAST_UPDATED_BY,'
  ||' LAST_UPDATE_DATE)'
  ||' SELECT distinct '
  ||' msr.REGION_ID,'
  ||' msr.REGION_TYPE,'
  ||' msr.PARENT_REGION_ID,'
  ||' msr.COUNTRY_CODE,'
  ||' msr.COUNTRY_REGION_CODE,'
  ||' msr.STATE_CODE,'
  ||' msr.CITY_CODE,'
  ||' msr.PORT_FLAG,'
  ||' msr.AIRPORT_FLAG,'
  ||' msr.ROAD_TERMINAL_FLAG,'
  ||' msr.RAIL_TERMINAL_FLAG,'
  ||' msr.LONGITUDE,'
  ||' msr.LATITUDE,'
  ||' msr.TIMEZONE,'
  ||' msr.CONTINENT,'
  ||' msr.COUNTRY,'
  ||' msr.COUNTRY_REGION,'
  ||' msr.STATE,'
  ||' msr.CITY,'
  ||' msr.ZONE,'
  ||' msr.ZONE_LEVEL,'
  ||' msr.POSTAL_CODE_FROM,'
  ||' msr.POSTAL_CODE_TO,'
  ||' msr.ALTERNATE_NAME,'
  ||' msr.COUNTY,'
  ||' msr.SR_INSTANCE_ID,'
  ||' msr.ZONE_USAGE,'
  ||' msr.CREATED_BY,'
  ||' msr.CREATION_DATE,'
  ||' msr.LAST_UPDATED_BY,'
  ||' msr.LAST_UPDATE_DATE'
  ||' FROM   MSC_ST_REGIONS msr'
  ||' WHERE  msr.batch_id         = :lv_batch_id'
  ||' AND    msr.sr_instance_code = :v_instance_code'
  ||' AND    msr.process_flag    = '||G_VALID ;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


   COMMIT;
  END LOOP;

  -- Validation for Zone Regions

  --Getting the error message text
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE     msc_st_zone_regions mszr1 '
    ||' SET     process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   message_id <  (SELECT MAX(message_id)'
    ||'         FROM   msc_st_zone_regions mszr2'
    ||'         WHERE  mszr2.sr_instance_code  = mszr1.sr_instance_code'
    ||'         AND    mszr2.zone = mszr1.zone'
    ||'         AND    NVL(mszr2.country, NVL(mszr1.country, '||''''||NULL_CHAR||''''||')) = '
    ||'                NVL(mszr1.country, NVL(mszr2.country, '||''''||NULL_CHAR||''''||'))'
    ||'         AND    NVL(mszr2.country_code, NVL(mszr1.country_code, '||''''||NULL_CHAR||''''||')) = '
    ||'                NVL(mszr1.country_code, NVL(mszr2.country_code, '||''''||NULL_CHAR||''''||'))'
    ||'         AND    NVL(mszr2.state, NVL(mszr1.state, '||''''||NULL_CHAR||''''||')) = '
    ||'                NVL(mszr1.state, NVL(mszr2.state, '||''''||NULL_CHAR||''''||'))'
    ||'         AND    NVL(mszr2.state_code, NVL(mszr1.state_code, '||''''||NULL_CHAR||''''||')) = '
    ||'                NVL(mszr1.state_code, NVL(mszr2.state_code, '||''''||NULL_CHAR||''''||'))'
    ||'         AND    NVL(mszr2.city, NVL(mszr1.city, '||''''||NULL_CHAR||''''||')) = '
    ||'                NVL(mszr1.city, NVL(mszr2.city, '||''''||NULL_CHAR||''''||'))'
    ||'         AND    NVL(mszr2.city_code, NVL(mszr1.city_code, '||''''||NULL_CHAR||''''||')) = '
    ||'                NVL(mszr1.city_code, NVL(mszr2.city_code, '||''''||NULL_CHAR||''''||'))'
    ||'         AND    NVL(mszr2.postal_code_from, NVL(mszr1.postal_code_from, '||''''||NULL_CHAR||''''||')) = '
    ||'                NVL(mszr1.postal_code_from, NVL(mszr2.postal_code_from, '||''''||NULL_CHAR||''''||'))'
    ||'         AND    NVL(mszr2.postal_code_to, NVL(mszr1.postal_code_to, '||''''||NULL_CHAR||''''||')) = '
    ||'                NVL(mszr1.postal_code_to, NVL(mszr2.postal_code_to, '||''''||NULL_CHAR||''''||'))'
    ||'         AND    mszr2.process_flag      ='|| G_IN_PROCESS
    ||'         AND    NVL(mszr2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND     mszr1.process_flag             = '||G_IN_PROCESS
    ||' AND     mszr1.sr_instance_code         = :v_instance_code'
    ||' AND     NVL(mszr1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

   lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.
    v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE  msc_st_zone_regions mszr1'
    ||' SET     process_flag  = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   EXISTS( SELECT 1 '
    ||'         FROM   msc_st_zone_regions mszr2'
    ||'         WHERE  mszr2.sr_instance_code  = mszr1.sr_instance_code'
    ||'         AND    mszr2.zone = mszr1.zone'
    ||'         AND    NVL(mszr2.country, NVL(mszr1.country, '||''''||NULL_CHAR||''''||')) = '
    ||'                NVL(mszr1.country, NVL(mszr2.country, '||''''||NULL_CHAR||''''||'))'
    ||'         AND    NVL(mszr2.country_code, NVL(mszr1.country_code, '||''''||NULL_CHAR||''''||')) = '
    ||'                NVL(mszr1.country_code, NVL(mszr2.country_code, '||''''||NULL_CHAR||''''||'))'
    ||'         AND    NVL(mszr2.state, NVL(mszr1.state, '||''''||NULL_CHAR||''''||')) = '
    ||'                NVL(mszr1.state, NVL(mszr2.state, '||''''||NULL_CHAR||''''||'))'
    ||'         AND    NVL(mszr2.state_code, NVL(mszr1.state_code, '||''''||NULL_CHAR||''''||')) = '
    ||'                NVL(mszr1.state_code, NVL(mszr2.state_code, '||''''||NULL_CHAR||''''||'))'
    ||'         AND    NVL(mszr2.city, NVL(mszr1.city, '||''''||NULL_CHAR||''''||')) = '
    ||'                NVL(mszr1.city, NVL(mszr2.city, '||''''||NULL_CHAR||''''||'))'
    ||'         AND    NVL(mszr2.city_code, NVL(mszr1.city_code, '||''''||NULL_CHAR||''''||')) = '
    ||'                NVL(mszr1.city_code, NVL(mszr2.city_code, '||''''||NULL_CHAR||''''||'))'
    ||'         AND    NVL(mszr2.postal_code_from, NVL(mszr1.postal_code_from, '||''''||NULL_CHAR||''''||')) = '
    ||'                NVL(mszr1.postal_code_from, NVL(mszr2.postal_code_from, '||''''||NULL_CHAR||''''||'))'
    ||'         AND    NVL(mszr2.postal_code_to, NVL(mszr1.postal_code_to, '||''''||NULL_CHAR||''''||')) = '
    ||'                NVL(mszr1.postal_code_to, NVL(mszr2.postal_code_to, '||''''||NULL_CHAR||''''||'))'
    ||'         AND    mszr2.process_flag               = '||G_IN_PROCESS
    ||'         GROUP BY sr_instance_code, zone, country,country_code, state, state_code, city, city_code, postal_code_from, postal_code_to'
    ||'         HAVING COUNT(*) > 1)'
    ||' AND     mszr1.process_flag     = '||G_IN_PROCESS
    ||' AND     mszr1.sr_instance_code = :v_instance_code'
    ||' AND     NVL(mszr1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

  lv_column_names :=
  'ZONE                           ||''~''||'
  ||' COUNTRY                     ||''~''||'
  ||' COUNTRY_CODE                ||''~''||'
  ||' STATE_CODE            	  ||''~''||'
  ||' SR_INSTANCE_CODE            ||''~''||'
  ||' STATE                       ||''~''||'
  ||' CITY              	  ||''~''||'
  ||' CITY_CODE 		  ||''~''||'
  ||' POSTAL_CODE_FROM            ||''~''||'
  ||' POSTAL_CODE_TO              ||''~''||'
  ||'DELETED_FLAG';

  LOOP

      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   DUAL;

      lv_sql_stmt :=
      'UPDATE    msc_st_zone_regions '
      ||' SET    batch_id                       = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND ;


      OPEN c4(lv_batch_id);
      FETCH c4 BULK COLLECT INTO lb_rowid;
      CLOSE c4;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_zone_regions
      SET  st_transaction_id = msc_st_zone_regions_s.NEXTVAL,
           refresh_number    = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_ZONE_REGIONS');


      -- Deletion is not allowed for this table
      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE      msc_st_zone_regions '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         = :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

     -- set the message

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check DELETED_FLAG column has valid value or not and if not set it to SYS_NO
      -- Log error procedure inserts warning and also defaults the deleted flag

      lv_where_str := ' AND NVL(deleted_flag,'||NULL_VALUE||') '
                      ||' NOT IN(1,2)';

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_ZONE_REGIONS',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'DELETED_FLAG',
                         p_debug             => v_debug,
                         p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ZONE OR COUNTRY OR COUNTRY_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where zone/country/country_code is NULL

      lv_sql_stmt :=
      'UPDATE    msc_st_zone_regions '
      ||' SET    process_flag     = '||G_ERROR_FLG||','
      ||'        error_text   = '||''''||lv_message_text||''''
      ||' WHERE  sr_instance_code =  :v_instance_code'
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    process_flag     = '||G_IN_PROCESS
      ||' AND    (NVL(zone,'||''''||NULL_CHAR||''''||')'
      ||'        = '||''''||NULL_CHAR||''''
      ||' OR     NVL(country,'||''''||NULL_CHAR||''''||') '
      ||'        = '||''''||NULL_CHAR||''''
      ||' OR     NVL(country_code,'||''''||NULL_CHAR||''''||') '
      ||'        = '||''''||NULL_CHAR||''''||')';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;



     lv_sql_stmt :=
      'UPDATE msc_st_zone_regions mszr'
      ||' SET region_id     = nvl((SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1 = mszr.sr_instance_code'
      ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mszr.country,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char3,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mszr.country_code,    '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char4,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mszr.state,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char5,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mszr.state_code,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char6,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mszr.city,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char7,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mszr.city_code,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char8,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mszr.postal_code_from,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char9,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mszr.postal_code_to,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.number1 in (0,1,2,3) '
      ||'       AND    mls.entity_name = ''REGION_ID'' ), ' ||NULL_VALUE|| ')'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(region_id,'||NULL_VALUE||')= '||NULL_VALUE
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :lv_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'REGION_ID');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where region_id is null

      lv_sql_stmt :=
      'UPDATE    msc_st_zone_regions '
      ||' SET    process_flag     = '||G_ERROR_FLG||','
      ||'        error_text   = '||''''||lv_message_text||''''
      ||' WHERE  sr_instance_code =  :v_instance_code'
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    process_flag     = '||G_IN_PROCESS
      ||' AND    NVL(region_id,'||NULL_VALUE||')= '||NULL_VALUE  ;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;

    lv_sql_stmt :=
      'UPDATE msc_st_zone_regions mszr'
      ||' SET parent_region_id     = nvl((SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1 = mszr.sr_instance_code'
      ||'       AND    NVL(mls.char10,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mszr.zone,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.number1 = 10 '
      ||'       AND    mls.entity_name = ''REGION_ID'' ), ' ||NULL_VALUE|| ')'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :lv_batch_id'
      ||' AND    NVL(parent_region_id,'||NULL_VALUE||')= '||NULL_VALUE
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARENT_REGION_ID');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where parent_region_id is null

      lv_sql_stmt :=
      'UPDATE    msc_st_zone_regions '
      ||' SET    process_flag     = '||G_ERROR_FLG||','
      ||'        error_text   = '||''''||lv_message_text||''''
      ||' WHERE  sr_instance_code =  :v_instance_code'
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    process_flag     = '||G_IN_PROCESS
      ||' AND    NVL(parent_region_id,'||NULL_VALUE||')= '||NULL_VALUE  ;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;

     -- set the default value of party_id to -1

     lv_sql_stmt :=
      'UPDATE    msc_st_zone_regions '
      ||' SET    party_id     = -1 '
      ||' WHERE  sr_instance_code =  :v_instance_code'
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    process_flag     = '||G_IN_PROCESS
      ||' AND    NVL(party_id,'||NULL_VALUE||')= '||NULL_VALUE  ;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;


    -- Deriving zone_region_id

      lv_sql_stmt :=
      'UPDATE msc_st_zone_regions mszr'
      ||' SET zone_region_id     = nvl((SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1 = mszr.sr_instance_code'
      ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mszr.country,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char3,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mszr.country_code,    '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char4,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mszr.state,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char5,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mszr.state_code,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char6,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mszr.city,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char7,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mszr.city_code,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char8,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mszr.postal_code_from,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char9,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mszr.postal_code_to,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char10,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mszr.zone,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.entity_name = ''ZONE_REGION_ID'' ), ' ||NULL_VALUE|| ')'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :lv_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


     --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_ZONE_REGIONS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Generation of zone_region_id
      OPEN  c5(lv_batch_id);
      FETCH c5 BULK COLLECT INTO lb_rowid ;

      IF c5%ROWCOUNT > 0  THEN
        v_sql_stmt := 12;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        UPDATE  msc_st_zone_regions
        SET     zone_region_id = msc_st_zone_region_id_s.NEXTVAL
        WHERE rowid           = lb_rowid(j);

      v_sql_stmt := 13;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        INSERT INTO msc_local_id_setup
          (local_id,
           st_transaction_id,
           instance_id,
           entity_name,
           data_source_type,
           char1,
           char2,
           char3,
           char4,
           char5,
           char6,
           char7,
           char8,
           char9,
           char10,
           last_update_date,
           last_updated_by,
           creation_date,
           created_by)
        SELECT
            zone_region_id,
            st_transaction_id,
            v_instance_id,
            'ZONE_REGION_ID',
            data_source_type,
            v_instance_code,
            country,
            country_code,
            state,
            state_code,
            city,
            city_code,
            postal_code_from,
            postal_code_to,
            zone,
            v_current_date,
            v_current_user,
            v_current_date,
            v_current_user
        FROM msc_st_zone_regions
        WHERE  rowid            = lb_rowid(j);

      END IF;
      CLOSE c5 ;

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_ZONE_REGIONS',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_ZONE_REGIONS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_message_text      => NULL,
                    p_error_text        => lv_error_text,
                    p_debug             => v_debug,
                    p_batch_id          => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_sql_stmt :=
   ' INSERT INTO MSC_ZONE_REGIONS '
  ||' (ZONE_REGION_ID,'
  ||' REGION_ID,'
  ||' PARENT_REGION_ID,'
  ||' PARTY_ID,'
  ||' SR_INSTANCE_ID,'
  ||' CREATED_BY,'
  ||' CREATION_DATE,'
  ||' LAST_UPDATED_BY,'
  ||' LAST_UPDATE_DATE)'
  ||' SELECT distinct '
  ||' msr.ZONE_REGION_ID,'
  ||' msr.REGION_ID,'
  ||' msr.PARENT_REGION_ID,'
  ||' msr.PARTY_ID, '
  ||' msr.SR_INSTANCE_ID,'
  ||' msr.CREATED_BY,'
  ||' msr.CREATION_DATE,'
  ||' msr.LAST_UPDATED_BY,'
  ||' msr.LAST_UPDATE_DATE'
  ||' FROM   MSC_ST_ZONE_REGIONS msr'
  ||' WHERE  msr.batch_id         = :lv_batch_id'
  ||' AND    msr.sr_instance_code = :v_instance_code'
  ||' AND    msr.process_flag    = '||G_VALID
  ||' AND    NOT EXISTS'
  ||'            ( SELECT 1 FROM MSC_ZONE_REGIONS mzr'
  ||'              WHERE  mzr.zone_region_id = msr.zone_region_id'
  ||'              AND    mzr.sr_instance_id = ' ||v_instance_id ||')';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

   COMMIT;
   END LOOP;

   -- validation for Region Locations

    --Getting the error message text
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE     msc_st_region_locations msr1 '
    ||' SET     process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   message_id <  (SELECT MAX(message_id)'
    ||'         FROM   msc_st_region_locations msr2'
    ||'         WHERE  msr2.sr_instance_code  = msr1.sr_instance_code'
    ||'         AND    NVL(msr2.region_type, '||NULL_VALUE||') = NVL(msr1.region_type, '||NULL_VALUE||')'
    ||'         AND    NVL(msr2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.country,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.country,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.country_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.country_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.state,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.state,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.state_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.state_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.city,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.city,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.city_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.city_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.postal_code_from,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.postal_code_from,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.postal_code_to,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.postal_code_to,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.location_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.location_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    msr2.process_flag      ='|| G_IN_PROCESS
    ||'         AND    NVL(msr2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND     msr1.process_flag             = '||G_IN_PROCESS
    ||' AND     msr1.sr_instance_code         = :v_instance_code'
    ||' AND     NVL(msr1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


   lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.
    v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE  msc_st_region_locations msr1'
    ||' SET     process_flag  = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   EXISTS( SELECT 1 '
    ||'         FROM   msc_st_region_locations msr2'
    ||'         WHERE  msr2.sr_instance_code           = msr1.sr_instance_code'
    ||'         AND    NVL(msr2.region_type, '||NULL_VALUE||') = NVL(msr1.region_type,'||NULL_VALUE||')'
    ||'         AND    NVL(msr2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.country,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.country,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.country_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.country_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.state,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.state,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.state_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.state_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.city,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.city,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.city_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.city_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.postal_code_from,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.postal_code_from,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.postal_code_to,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.postal_code_to,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.location_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.location_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    msr2.process_flag               = '||G_IN_PROCESS
    ||'         GROUP BY sr_instance_code, region_type, company_name,country,country_code, state, state_code, city, city_code, postal_code_from, postal_code_to, location_code'
    ||'         HAVING COUNT(*) > 1)'
    ||' AND     msr1.process_flag     = '||G_IN_PROCESS
    ||' AND     msr1.sr_instance_code = :v_instance_code'
    ||' AND     NVL(msr1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;



    lv_column_names :=
  'REGION_TYPE                    ||''~''||'
  ||' COUNTRY                     ||''~''||'
  ||' COUNTRY_CODE                ||''~''||'
  ||' STATE_CODE            	  ||''~''||'
  ||' SR_INSTANCE_CODE            ||''~''||'
  ||' STATE                       ||''~''||'
  ||' CITY              	  ||''~''||'
  ||' CITY_CODE 		  ||''~''||'
  ||' POSTAL_CODE_FROM            ||''~''||'
  ||' POSTAL_CODE_TO              ||''~''||'
  ||' LOCATION_CODE               ||''~''||'
  ||' DELETED_FLAG                ||''~''||'
  ||' COMPANY_NAME ' ;

  -- Now processing by batch
   LOOP
      v_sql_stmt := 03;
      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;

      lv_sql_stmt :=
      ' UPDATE msc_st_region_locations '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c6(lv_batch_id);
      FETCH c6 BULK COLLECT INTO lb_rowid;
      CLOSE c6;


      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_region_locations
      SET  st_transaction_id = msc_st_region_locations_s.NEXTVAL,
           refresh_number    = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_REGION_LOCATIONS');


      -- Deletion is not allowed for this table
      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE      msc_st_region_locations '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         = :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

     -- set the message

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check DELETED_FLAG column has valid value or not and if not set it to SYS_NO
      -- Log error procedure inserts warning and also defaults the deleted flag

      lv_where_str := ' AND NVL(deleted_flag,'||NULL_VALUE||') '
                      ||' NOT IN(1,2)';

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_REGION_LOCATIONS',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'DELETED_FLAG',
                         p_debug             => v_debug,
                         p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'LOCATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Error out records where location_code is NULL

      lv_sql_stmt :=
      'UPDATE    msc_st_region_locations '
      ||' SET    process_flag     = '||G_ERROR_FLG||','
      ||'        error_text   = '||''''||lv_message_text||''''
      ||' WHERE  sr_instance_code =  :v_instance_code'
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    process_flag     = '||G_IN_PROCESS
      ||' AND    NVL(location_code,'||''''||NULL_CHAR||''''||') '
      ||'        =  '||''''||NULL_CHAR||'''';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;


    -- Derive region_id

    lv_sql_stmt :=
      'UPDATE msc_st_region_locations msr'
      ||' SET region_id     = (SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1 = msr.sr_instance_code'
      ||'       AND    NVL(mls.number1, '||NULL_VALUE||') = NVL(msr.region_type,'||NULL_VALUE||')'
      ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.country,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char3,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.country_code,    '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char4,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.state,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char5,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.state_code,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char6,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.city,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char7,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.city_code,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char8,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.postal_code_from,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char9,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.postal_code_to,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.number1 in (0,1,2,3) '
      ||'       AND    mls.entity_name = ''REGION_ID'' )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :lv_batch_id'
      ||' AND    msr.region_type in (0,1,2,3) '
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      --Deriving location_id
      lv_sql_stmt :=
      'UPDATE msc_st_region_locations msr'
      ||' SET   location_id              = nvl((SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1       = msr.sr_instance_code'
      ||'       AND    mls.char3       = msr.location_code'
      ||'       AND    mls.entity_name = ''LOCATION_ID'' ), ' ||NULL_VALUE|| ')'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_UPDATION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_REGION_LOCATIONS');


    -- Error out the record if same region locations already exists in ODS
    -- As we do not allow region locations incremental update
    -- It has to be purged before laoded again

      lv_sql_stmt :=
      'UPDATE      msc_st_region_locations msrl'
      ||' SET      msrl.process_flag     = '||G_ERROR_FLG||','
      ||'          msrl.error_text       = '||''''||lv_message_text||''''
      ||' WHERE    msrl.batch_id         = :lv_batch_id'
      ||' AND      msrl.sr_instance_code = :v_instance_code'
      ||' AND      EXISTS ( SELECT 1'
      ||'          FROM     msc_region_locations mrl'
      ||'          WHERE    mrl.location_id = nvl(msrl.location_id ,'||NULL_VALUE||') '
      ||'          AND      nvl(mrl.region_id, '||NULL_VALUE||') = nvl(msrl.region_id, '||NULL_VALUE||')'
      ||'          AND      mrl.sr_instance_id = :v_instance_id)';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code,
                        v_instance_id;

       --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_REGION_LOCATIONS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      OPEN  c7(lv_batch_id);
      FETCH c7 BULK COLLECT INTO lb_rowid ;

      IF c7%ROWCOUNT > 0  THEN
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        UPDATE msc_st_region_locations
        SET    location_id  = msc_st_location_id_s.NEXTVAL
        WHERE  rowid          = lb_rowid(j);

        -- Insert record in LID
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        INSERT INTO msc_local_id_setup
         (local_id,
          st_transaction_id,
          instance_id,
          entity_name,
          data_source_type,
          char1,
          char3,
          last_update_date,
          last_updated_by,
          creation_date,
          created_by)
        SELECT
          location_id,
          st_transaction_id,
          v_instance_id,
          'LOCATION_ID',
          data_source_type,
          v_instance_code,
          location_code,
          v_current_date,
          v_current_user,
          v_current_date,
          v_current_user
        FROM  msc_st_region_locations
        WHERE rowid            = lb_rowid(j);
      END IF;
      CLOSE c7;

      --Deriving location_id

      lv_sql_stmt :=
      'UPDATE msc_st_region_locations msr'
      ||' SET   location_id              = nvl((SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1       = msr.sr_instance_code'
      ||'       AND    mls.char3       = msr.location_code'
      ||'       AND    mls.entity_name = ''LOCATION_ID'' ), ' ||NULL_VALUE|| ')'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

       -- Set the process flag as Valid and populate instance_id
      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                        (p_table_name     => 'MSC_ST_REGION_LOCATIONS',
                         p_instance_id    => v_instance_id,
                         p_instance_code  => v_instance_code,
                         p_process_flag   => G_VALID,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug,
                         p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- At the end calling  the LOG_ERROR for logging all
      -- errored out records.
      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name     => 'MSC_ST_REGION_LOCATIONS',
                         p_instance_code  => v_instance_code,
                         p_row            => lv_column_names,
                         p_severity       => G_SEV_ERROR,
                         p_message_text   => NULL,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug,
                         p_batch_id       => lv_batch_id  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   lv_sql_stmt :=
   ' INSERT INTO MSC_REGION_LOCATIONS '
  ||' (REGION_ID,'
  ||' LOCATION_ID,'
  ||' REGION_TYPE,'
  ||' PARENT_REGION_FLAG,'
  ||' LOCATION_SOURCE,'
  ||' EXCEPTION_TYPE,'
  ||' SR_INSTANCE_ID,'
  ||' CREATED_BY,'
  ||' CREATION_DATE,'
  ||' LAST_UPDATED_BY,'
  ||' LAST_UPDATE_DATE,'
  ||' LAST_UPDATE_LOGIN)'
  ||' SELECT distinct '
  ||' REGION_ID,'
  ||' LOCATION_ID,'
  ||' REGION_TYPE,'
  ||' PARENT_REGION_FLAG,'
  ||' LOCATION_SOURCE,'
  ||' EXCEPTION_TYPE,'
  ||' SR_INSTANCE_ID,'
  ||' CREATED_BY,'
  ||' CREATION_DATE,'
  ||' LAST_UPDATED_BY,'
  ||' LAST_UPDATE_DATE,'
  ||' LAST_UPDATE_LOGIN'
  ||' FROM   MSC_ST_REGION_LOCATIONS msrl'
  ||' WHERE  msrl.batch_id         = :lv_batch_id'
  ||' AND    msrl.sr_instance_code = :v_instance_code'
  ||' AND    msrl.process_flag    = '||G_VALID ;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      COMMIT;
    END LOOP;

    -- validation for region sites

     --Getting the error message text
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML

    lv_sql_stmt :=
    'UPDATE     msc_st_region_sites msr1 '
    ||' SET     process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   message_id <  (SELECT MAX(message_id)'
    ||'         FROM   msc_st_region_sites msr2'
    ||'         WHERE  msr2.sr_instance_code  = msr1.sr_instance_code'
    ||'         AND    NVL(msr2.country,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.country,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.country_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.country_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.state,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.state,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.state_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.state_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.city,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.city,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.city_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.city_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.postal_code_from,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.postal_code_from,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.postal_code_to,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.postal_code_to,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.zone,   '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.zone,   '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.vendor_name,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.vendor_name,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.vendor_site_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.vendor_site_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    msr2.process_flag      ='|| G_IN_PROCESS
    ||'         AND    NVL(msr2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND     msr1.process_flag             = '||G_IN_PROCESS
    ||' AND     msr1.sr_instance_code         = :v_instance_code'
    ||' AND     NVL(msr1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    lv_sql_stmt :=
    'UPDATE  msc_st_region_sites msr1'
    ||' SET     process_flag  = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   EXISTS( SELECT 1 '
    ||'         FROM   msc_st_region_sites msr2'
    ||'         WHERE  msr2.sr_instance_code           = msr1.sr_instance_code'
    ||'         AND    NVL(msr2.country,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.country,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.country_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.country_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.state,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.state,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.state_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.state_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.city,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.city,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.city_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.city_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.postal_code_from,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.postal_code_from,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.postal_code_to,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.postal_code_to,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.zone,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.zone,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.vendor_name,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.vendor_name,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(msr2.vendor_site_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msr1.vendor_site_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    msr2.process_flag               = '||G_IN_PROCESS
    ||'         GROUP BY sr_instance_code,country,country_code, state, state_code, city, city_code, postal_code_from, postal_code_to, zone, vendor_name, vendor_site_code'
    ||'         HAVING COUNT(*) > 1)'
    ||' AND     msr1.process_flag     = '||G_IN_PROCESS
    ||' AND     msr1.sr_instance_code = :v_instance_code'
    ||' AND     NVL(msr1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;



    lv_column_names :=
  'REGION_TYPE                    ||''~''||'
  ||' COUNTRY                     ||''~''||'
  ||' COUNTRY_CODE                ||''~''||'
  ||' STATE_CODE            	  ||''~''||'
  ||' SR_INSTANCE_CODE            ||''~''||'
  ||' STATE                       ||''~''||'
  ||' CITY              	  ||''~''||'
  ||' CITY_CODE 		  ||''~''||'
  ||' POSTAL_CODE_FROM            ||''~''||'
  ||' POSTAL_CODE_TO              ||''~''||'
  ||' ZONE                        ||''~''||'
  ||' DELETED_FLAG                ||''~''||'
  ||' VENDOR_NAME ' ;

  -- Now processing by batch
   LOOP

      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;

      lv_sql_stmt :=
      ' UPDATE msc_st_region_sites '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c8(lv_batch_id);
      FETCH c8 BULK COLLECT INTO lb_rowid;
      CLOSE c8;

      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_region_sites
      SET  st_transaction_id = msc_st_region_sites_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_REGION_SITES');


      -- Deletion is not allowed for this table
      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE      msc_st_region_sites '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         = :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

     -- set the message

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check DELETED_FLAG column has valid value or not and if not set it to SYS_NO
      -- Log error procedure inserts warning and also defaults the deleted flag

      lv_where_str := ' AND NVL(deleted_flag,'||NULL_VALUE||') '
                      ||' NOT IN(1,2)';

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_REGION_SITES',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'DELETED_FLAG',
                         p_debug             => v_debug,
                         p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Deriving region_id

      lv_sql_stmt :=
      'UPDATE msc_st_region_sites msr'
      ||' SET region_id     = (SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char1 = msr.sr_instance_code'
      ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.country,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char3,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.country_code,    '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char4,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.state,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char5,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.state_code,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char6,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.city,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char7,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.city_code,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char8,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.postal_code_from,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char9,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.postal_code_to,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    NVL(mls.char10,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.zone,     '||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.entity_name = ''REGION_ID'' )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :lv_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'VENDOR_SITE_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive vendor_site_id
       lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                     (p_table_name        => 'MSC_ST_REGION_SITES',
                      p_partner_name      => 'VENDOR_NAME',
                      p_partner_site_code => 'VENDOR_SITE_CODE',
                      p_partner_site_id   => 'VENDOR_SITE_ID',
                      p_instance_code     => v_instance_code,
                      p_partner_type      => G_VENDOR,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_severity          => G_SEV3_ERROR,
                      p_message_text      => lv_message_text,
                      p_debug             => v_debug,
                      p_row               => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_UPDATION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_REGION_SITES');


    -- Error out the record if same region_site already exists in ODS
    -- As we do not allow region_site incremental update
    -- It has to be purged before loaded again

      lv_sql_stmt :=
      'UPDATE      msc_st_region_sites msrs'
      ||' SET      msrs.process_flag     = '||G_ERROR_FLG||','
      ||'          msrs.error_text       = '||''''||lv_message_text||''''
      ||' WHERE    msrs.batch_id         = :lv_batch_id'
      ||' AND      msrs.sr_instance_code = :v_instance_code'
      ||' AND      EXISTS ( SELECT 1'
      ||'          FROM     msc_region_sites mrs, MSC_TP_SITE_ID_LID mtsil'
      ||'          WHERE    msrs.vendor_site_id = mtsil.SR_TP_SITE_ID'
      ||'          AND      mtsil.sr_instance_id = :v_instance_id '
      ||'          AND      mtsil.Partner_Type = 1'
      ||'          AND      mtsil.TP_SITE_ID = mrs.vendor_site_id '
      ||'          AND      msrs.region_id = mrs.region_id'
      ||'          AND      mrs.sr_instance_id = :v_instance_id)';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code,
                        v_instance_id,
                        v_instance_id;

       --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_REGION_SITES',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

       -- Set the process flag as Valid and populate instance_id
      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                        (p_table_name     => 'MSC_ST_REGION_SITES',
                         p_instance_id    => v_instance_id,
                         p_instance_code  => v_instance_code,
                         p_process_flag   => G_VALID,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug,
                         p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- At the end calling  the LOG_ERROR for logging all
      -- errored out records.
      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name     => 'MSC_ST_REGION_SITES',
                         p_instance_code  => v_instance_code,
                         p_row            => lv_column_names,
                         p_severity       => G_SEV_ERROR,
                         p_message_text   => NULL,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug,
                         p_batch_id       => lv_batch_id  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    lv_sql_stmt :=
    ' INSERT INTO MSC_REGION_SITES '
  ||' (REGION_ID, '
  ||' VENDOR_SITE_ID,'
  ||' REGION_TYPE,'
  ||' ZONE_LEVEL,'
  ||' SR_INSTANCE_ID,'
  ||' CREATED_BY,'
  ||' CREATION_DATE,'
  ||' LAST_UPDATED_BY,'
  ||' LAST_UPDATE_DATE,'
  ||' LAST_UPDATE_LOGIN)'
  ||' SELECT distinct '
  ||' msrs.REGION_ID,'
  ||' mtsil.TP_SITE_ID,'
  ||' msrs.REGION_TYPE,'
  ||' msrs.ZONE_LEVEL,'
  ||' msrs.SR_INSTANCE_ID,'
  ||' msrs.CREATED_BY,'
  ||' msrs.CREATION_DATE,'
  ||' msrs.LAST_UPDATED_BY,'
  ||' msrs.LAST_UPDATE_DATE,'
  ||' msrs.LAST_UPDATE_LOGIN'
  ||' FROM  MSC_TP_SITE_ID_LID mtsil, MSC_ST_REGION_SITES msrs'
  ||' WHERE  msrs.batch_id         = :lv_batch_id'
  ||' AND    mtsil.SR_TP_SITE_ID = msrs.VENDOR_SITE_ID'
  ||' AND    mtsil.SR_Instance_ID = msrs.SR_INSTANCE_ID'
  ||' AND    mtsil.Partner_Type = 1 '
  ||' AND    msrs.sr_instance_code = :v_instance_code'
  ||' AND    msrs.process_flag    = '||G_VALID ;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      COMMIT;
    END LOOP;

    EXCEPTION
    WHEN too_many_rows THEN
      lv_error_text  := substr('MSC_CL_PRE_PROCESS.LOAD_REGIONS'||'('
                      ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_REGIONS'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;


  END LOAD_REGIONS;


/*==========================================================================+
| DESCRIPTION  : This procedure validates the data in MSC_ST_CATEGORY_SETS  |
|                table.                                                     |
+==========================================================================*/
  PROCEDURE LOAD_CATEGORY_SET IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid              RowidTab;   --bulk collects rowid
  lv_return             NUMBER;
  lv_error_text         VARCHAR2(250);
  lv_where_str          VARCHAR2(5000);
  lv_sql_stmt           VARCHAR2(5000);
  lv_column_names       VARCHAR2(5000);       --stores concatenated column names
  lv_batch_id           msc_st_category_sets.batch_id%TYPE;
  lv_message_text       msc_errors.error_text%TYPE;
  ex_logging_err        EXCEPTION;

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_category_sets
    WHERE  process_flag     IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    batch_id         = p_batch_id
    AND    sr_instance_code = v_instance_code;

  CURSOR c2(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_category_sets
    WHERE  NVL(sr_category_set_id,NULL_VALUE) = NULL_VALUE
    AND    process_flag          = G_IN_PROCESS
    AND    batch_id              = p_batch_id
    AND    sr_instance_code      = v_instance_code;

  BEGIN

    --Getting the error message text
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE     msc_st_category_sets mcs1 '
    ||' SET     process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   message_id <  (SELECT MAX(message_id)'
    ||'         FROM   msc_st_category_sets mcs2'
    ||'         WHERE  mcs2.sr_instance_code  = mcs1.sr_instance_code'
    ||'         AND    NVL(mcs2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mcs1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    mcs2.category_set_name = mcs1.category_set_name'
    ||'         AND    mcs2.process_flag      ='|| G_IN_PROCESS
    ||'         AND    NVL(mcs2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND     mcs1.process_flag             = '||G_IN_PROCESS
    ||' AND     mcs1.sr_instance_code         = :v_instance_code'
    ||' AND     NVL(mcs1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.
    v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE  msc_st_category_sets mcs1'
    ||' SET     process_flag  = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   EXISTS( SELECT 1 '
    ||'         FROM   msc_st_category_sets mcs2'
    ||'         WHERE  mcs2.sr_instance_code           = mcs1.sr_instance_code'
    ||'         AND    NVL(mcs2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mcs1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    mcs2.category_set_name          = mcs1.category_set_name'
    ||'         AND    mcs2.process_flag               = '||G_IN_PROCESS
    ||'         AND    NVL(mcs2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'         GROUP BY sr_instance_code,company_name,category_set_name'
    ||'         HAVING COUNT(*) > 1)'
    ||' AND     mcs1.process_flag     = '||G_IN_PROCESS
    ||' AND     mcs1.sr_instance_code = :v_instance_code'
    ||' AND     NVL(mcs1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_column_names :=
    'CATEGORY_SET_NAME ||''~''||'
    ||'CONTROL_LEVEL   ||''~''||'
    ||'SR_INSTANCE_CODE||''~''||'
    ||'DESCRIPTION     ||''~''||'
    ||'DEFAULT_FLAG    ||''~''||'
    ||'COMPANY_NAME    ||''~''||'
    ||'DELETED_FLAG ';

    LOOP
      v_sql_stmt := 03;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      ' UPDATE   msc_st_category_sets '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_category_sets
      SET  st_transaction_id = msc_st_category_sets_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_CATEGORY_SETS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Deletion is not allowed for this entity.
      v_sql_stmt := 06;
      lv_sql_stmt :=
      ' UPDATE     msc_st_category_sets '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      ' AND NVL(deleted_flag,'||NULL_VALUE||') '
      ||' NOT IN(1,2)';

      --Logging a warning for those records where the deleted_flag value
      --is other than Yes/No.
      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_CATEGORY_SETS',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'DELETED_FLAG',
                      p_debug             => v_debug,
                      p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CATEGORY_SET_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 07;
      lv_sql_stmt :=
      ' UPDATE  msc_st_category_sets '
      ||' SET   process_flag        = '||G_ERROR_FLG||','
      ||'       error_text          = '||''''||lv_message_text||''''
      ||' WHERE NVL(category_set_name,'||''''||NULL_CHAR||''''||')'
      ||'       =                     '||''''||NULL_CHAR||''''
      ||' AND   batch_id            = :lv_batch_id'
      ||' AND   process_flag        = '||G_IN_PROCESS
      ||' AND   sr_instance_code    = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CONTROL_LEVEL OR DEFAULT_FLAG');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 08;
      lv_sql_stmt :=
      ' UPDATE  msc_st_category_sets '
      ||' SET   process_flag     = '||G_ERROR_FLG||','
      ||'       error_text       = '||''''||lv_message_text||''''
      ||' WHERE (NVL(control_level,'||NULL_VALUE||')  NOT IN(1,2)'
      ||' OR    NVL(default_flag,'  ||NULL_VALUE||')  NOT IN(1,2))'
      ||' AND   batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND   sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_DEFAULT_FLG_INVALID',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --There can be only one record in the staging/ODS with the
      --default_flag = 'YES'
      v_sql_stmt := 09;
      lv_sql_stmt :=
      'UPDATE     msc_st_category_sets mcs1'
      ||' SET     process_flag     = '||G_ERROR_FLG||','
      ||'         error_text       = '||''''||lv_message_text||''''
      ||' WHERE   EXISTS( SELECT 1 '
      ||'         FROM   msc_st_category_sets mcs2'
      ||'         WHERE  mcs2.sr_instance_code  = mcs1.sr_instance_code'
      ||'         AND    mcs2.process_flag      IN(2,5)'
      ||'         AND    mcs2.default_flag      = '||SYS_YES
      ||'         GROUP BY sr_instance_code'
      ||'         HAVING COUNT(*) > 1'
      ||'         UNION'
      ||'         SELECT 1 '
      ||'         FROM   msc_category_sets mcs3'
      ||'         WHERE  mcs3.sr_instance_id    =  :v_instance_id'
      ||'         AND    mcs3.category_set_name <> mcs1.category_set_name'
      ||'         AND    mcs3.default_flag      = '||SYS_YES||')'
      ||' AND     mcs1.default_flag             = '||SYS_YES
      ||' AND     mcs1.batch_id                 = :lv_batch_id'
      ||' AND     mcs1.process_flag             = '||G_IN_PROCESS
      ||' AND     mcs1.sr_instance_code         = :v_instance_code'
      ||' AND     NVL(mcs1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_id,
                                          lv_batch_id,
                                          v_instance_code;


      --Derive sr_category_set_id.
      v_sql_stmt := 10;
      lv_sql_stmt :=
      ' UPDATE  msc_st_category_sets'
      ||' SET   sr_category_set_id = (SELECT local_id'
      ||'       FROM   msc_local_id_misc'
      ||'       WHERE  char1 =   sr_instance_code'
      ||'       AND    NVL(char2,       '||''''||NULL_CHAR||''''||')='
      ||'              NVL(company_name,'||''''||NULL_CHAR||''''||')'
      ||'       AND    char3 =   category_set_name'
      ||'       AND    entity_name = ''SR_CATEGORY_SET_ID'' )'
      ||' WHERE batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND   sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_CATEGORY_SETS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      OPEN c2(lv_batch_id);
      FETCH c2 BULK COLLECT INTO lb_rowid ;

      IF c2%ROWCOUNT > 0  THEN
        v_sql_stmt := 11;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        UPDATE msc_st_category_sets
        SET   sr_category_set_id = msc_st_sr_category_set_id_s.NEXTVAL
        WHERE rowid              = lb_rowid(j);

        v_sql_stmt := 12;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        INSERT INTO msc_local_id_misc
        (local_id,
         st_transaction_id,
         instance_id,
         entity_name,
         data_source_type,
         char1,
         char2,
         char3,
         SOURCE_SR_CATEGORY_SET_ID,
         last_update_date,
         last_updated_by,
         creation_date,
         created_by)
        SELECT
         sr_category_set_id,
         st_transaction_id,
         v_instance_id,
         'SR_CATEGORY_SET_ID',
         data_source_type,
         v_instance_code,
         company_name,
         category_set_name,
         SOURCE_SR_CATEGORY_SET_ID,
         v_current_date,
         v_current_user,
         v_current_date,
         v_current_user
         FROM msc_st_category_sets
         WHERE  rowid            = lb_rowid(j);

      END IF;
      CLOSE c2 ;

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                     (p_table_name     => 'MSC_ST_CATEGORY_SETS',
                      p_instance_id    => v_instance_id,
                      p_instance_code  => v_instance_code,
                      p_process_flag   => G_VALID,
                      p_error_text     => lv_error_text,
                      p_debug          => v_debug,
                      p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_CATEGORY_SETS',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_ERROR,
                      p_message_text      => NULL,
                      p_error_text        => lv_error_text,
                      p_debug             => v_debug,
                      p_batch_id          => lv_batch_id);
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      COMMIT;
    END LOOP;

  EXCEPTION
    WHEN too_many_rows THEN
      lv_error_text  := substr('MSC_CL_PRE_PROCESS.LOAD_CATEGORY_SET'||'('
                      ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_CATEGORY_SET'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END LOAD_CATEGORY_SET;

/*==========================================================================+
| DESCRIPTION  : This procedure performs validation and loads data into the |
|                table msc_st_units_of_measure.                             |
+==========================================================================*/
  PROCEDURE LOAD_UOM IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid           RowidTab;
  lv_return          NUMBER;
  lv_error_text      VARCHAR2(250);
  lv_where_str       VARCHAR2(5000);
  lv_sql_stmt        VARCHAR2(5000);
  lv_column_names    VARCHAR2(5000);
  lv_batch_id        msc_st_units_of_measure.batch_id%TYPE;
  lv_message_text    msc_errors.error_text%TYPE;

  ex_logging_err     EXCEPTION;

  CURSOR    c1(p_batch_id NUMBER) IS
    SELECT  rowid
    FROM    msc_st_units_of_measure
    WHERE   process_flag     IN (G_IN_PROCESS,G_ERROR_FLG)
    AND     batch_id         = p_batch_id
    AND     sr_instance_code = v_instance_code;

  BEGIN
    --*********Validation for msc_st_units_of_measure***********
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 01;
    lv_sql_stmt :=
    ' UPDATE   msc_st_units_of_measure mum1'
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  message_id <  (SELECT MAX(message_id)'
    ||'        FROM  msc_st_units_of_measure mum2'
    ||'        WHERE NVL(mum2.unit_of_measure,'  ||''''||NULL_CHAR||''''||') ='
    ||'              NVL(mum1.unit_of_measure,'  ||''''||NULL_CHAR||''''||') '
    ||'        AND   NVL(mum2.company_name,  '   ||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mum1.company_name,  '   ||''''||NULL_CHAR||''''||')'
    ||'        AND   mum2.uom_code = mum1.uom_code'
    ||'        AND   mum2.process_flag = '||G_IN_PROCESS
    ||'        AND   NVL(mum2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND    mum1.process_flag     = '||G_IN_PROCESS
    ||' AND    mum1.sr_instance_code = :v_instance_code'
    ||' AND    NVL(mum1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;



      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.
    v_sql_stmt := 02;
    lv_sql_stmt :=
    ' UPDATE  msc_st_units_of_measure mum1'
    ||' SET   process_flag  = '||G_ERROR_FLG||','
    ||'       error_text    = '||''''||lv_message_text||''''
    ||' WHERE EXISTS( SELECT 1 '
    ||'         FROM   msc_st_units_of_measure mum2'
    ||'         WHERE  NVL(mum2.unit_of_measure,   '||''''||NULL_CHAR||''''||')'
    ||'                 = NVL(mum1.unit_of_measure,'||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(mum2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mum1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    mum2.uom_code = mum1.uom_code'
    ||'         AND    mum2.process_flag     ='|| G_IN_PROCESS
    ||'         AND    NVL(mum2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'         GROUP BY uom_code,company_name,unit_of_measure'
    ||'         HAVING COUNT(*) > 1)'
    ||' AND   mum1.process_flag     = '||G_IN_PROCESS
    ||' AND   mum1.sr_instance_code = :v_instance_code'
    ||' AND   NVL(mum1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;



      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_column_names :=
    'UNIT_OF_MEASURE    ||''~''||'
    ||'UOM_CODE         ||''~''||'
    ||'UOM_CLASS        ||''~''||'
    ||'BASE_UOM_FLAG    ||''~''||'
    ||'SR_INSTANCE_CODE ||''~''||'
    ||'DISABLE_DATE     ||''~''||'
    ||'DESCRIPTION      ||''~''||'
    ||'COMPANY_NAME     ||''~''||'
    ||'DELETED_FLAG';

    LOOP
      v_sql_stmt := 03;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      'UPDATE msc_st_units_of_measure '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_units_of_measure
      SET    st_transaction_id   = msc_st_units_of_measure_s.NEXTVAL,
             refresh_id          = v_refresh_id,
             last_update_date    = v_current_date,
             last_updated_by     = v_current_user,
             creation_date       = v_current_date,
             created_by          = v_current_user
      WHERE  rowid           = lb_rowid(j);

      --Deletion is not allowed on this table.
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_UNITS_OF_MEASURE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE    msc_st_units_of_measure '
      ||' SET    process_flag     = '||G_ERROR_FLG||','
      ||'        error_text       = '||''''||lv_message_text||''''
      ||' WHERE  deleted_flag     = '||SYS_YES
      ||' AND    process_flag     = '||G_IN_PROCESS
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      ' AND NVL(deleted_flag,'||NULL_VALUE||') '
      ||' NOT IN(1,2)';
      --Log a warning for those records where the deleted_flag has a value other
      --than SYS_NO
      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_UNITS_OF_MEASURE',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'DELETED_FLAG',
                      p_debug             => v_debug,
                      p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'UOM_CODE OR UOM_CLASS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 07;
      lv_sql_stmt :=
      'UPDATE    msc_st_units_of_measure '
      ||' SET    process_flag  = '||G_ERROR_FLG||','
      ||'        error_text    = '||''''||lv_message_text||''''
      ||' WHERE  (NVL(uom_code,  '||''''||NULL_CHAR||''''||') '
      ||'        =               '||''''||NULL_CHAR||''''
      ||' OR     NVL(uom_class,  '||''''||NULL_CHAR||''''||')'
      ||'        =               '||''''||NULL_CHAR||''''
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    sr_instance_code =  :v_instance_code'
      ||' AND    process_flag     = '||G_IN_PROCESS||')';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      v_sql_stmt := 08;
      lv_sql_stmt :=
      'UPDATE    msc_st_units_of_measure '
      ||' SET    unit_of_measure  = uom_code'
      ||' WHERE  NVL(unit_of_measure,'||''''||NULL_CHAR||''''||') '
      ||'        = '||''''||NULL_CHAR||''''
      ||' AND    batch_id          =  :lv_batch_id'
      ||' AND    sr_instance_code  = :v_instance_code'
      ||' AND    process_flag      = '||G_IN_PROCESS;



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      --A UOM class can have one and only one base UOM.

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_BASE_UOM_INVALID',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 09;
      lv_sql_stmt :=
      'UPDATE   msc_st_units_of_measure mum1 '
      ||' SET   process_flag  = '||G_ERROR_FLG||','
      ||'       error_text    = '||''''||lv_message_text||''''
      ||' WHERE EXISTS(SELECT 1'
      ||'       FROM   msc_units_of_measure mum2'
      ||'       WHERE  mum2.unit_of_measure <> '
      ||'              NVL(mum1.unit_of_measure,'||''''||NULL_CHAR||''''||' )'
      ||'       AND    mum2.uom_code        <> '
      ||'              NVL(mum1.uom_code,       '||''''||NULL_CHAR||''''||' )'
      ||'       AND    mum2.uom_class        = '
      ||'              NVL(mum1.uom_class,       '||''''||NULL_CHAR||''''||' )'
      ||'       AND    mum2.base_uom_flag   = ''Y'' '
      ||'       UNION'
      ||'       SELECT 1'
      ||'       FROM   msc_st_units_of_measure mum3'
      ||'       WHERE  NVL(mum3.unit_of_measure,'||''''||NULL_CHAR||''''||') <> '
      ||'              NVL(mum1.unit_of_measure,'||''''||NULL_CHAR||''''||')'
      ||'       AND    NVL(mum3.uom_code,       '||''''||NULL_CHAR||''''||') <> '
      ||'              NVL(mum1.uom_code,       '||''''||NULL_CHAR||''''||')'
      ||'       AND    NVL(mum3.uom_class,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mum1.uom_class,       '||''''||NULL_CHAR||''''||')'
      ||'       AND    mum3.base_uom_flag     = ''Y'' '
      ||'       AND    mum3.process_flag      IN(2,5))'
      ||' AND   mum1.base_uom_flag   = ''Y'' '
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND    batch_id          =  :lv_batch_id'
      ||' AND   sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'BASE_UOM_FLAG');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      '   AND NVL(base_uom_flag,'||''''||NULL_CHAR||''''||') '
      ||' NOT IN(''Y'',''N'' )';
      --Log a warning for those records where the base_uom_flag has  value
      --other than('Y','N')

      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_UNITS_OF_MEASURE',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'BASE_UOM_FLAG',
                      p_debug             => v_debug,
                      p_default_value     => '''N''');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_UNTIS_OF_MEASURE',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_UNITS_OF_MEASURE',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_UNITS_OF_MEASURE',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_message_text      => NULL,
                    p_error_text        => lv_error_text,
                    p_debug             => v_debug,
                    p_batch_id          => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      COMMIT;
     END LOOP;

  EXCEPTION
    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_UOM'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END LOAD_UOM;

/*==========================================================================+
| DESCRIPTION  : This procedure performs validation and loads data into the |
|                tables msc_st_uom_class_conversions and                    |
|                msc_st_uom_conversions.                                    |
+==========================================================================*/
  PROCEDURE LOAD_UOM_CLASS_CONV IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  TYPE CharTblTyp IS TABLE OF VARCHAR2(1000);
  lb_rowid           RowidTab;
  lb_item            CharTblTyp;
  lb_from_uom_code   CharTblTyp;
  lb_to_uom_code     CharTblTyp;
  lb_org             CharTblTyp;
  lb_comp            CharTblTyp;
  lv_return          NUMBER;
  lv_error_text      VARCHAR2(250);
  lv_where_str       VARCHAR2(5000);
  lv_sql_stmt        VARCHAR2(5000);
  lv_column_names    VARCHAR2(5000);
  lv_batch_id        msc_st_uom_class_conversions.batch_id%TYPE;
  lv_message_text    msc_errors.error_text%TYPE;

  ex_logging_err     EXCEPTION;

  CURSOR    c_udk1 is
     SELECT from_uom_code,  to_uom_code, item_name, company_name
     FROM   msc_st_uom_class_conversions mcc2
     WHERE  mcc2.process_flag        = G_IN_PROCESS
     AND    item_name is not null
     AND    sr_instance_code = v_instance_code
     AND    NVL(mcc2.message_id, NULL_VALUE) = NULL_VALUE
     GROUP  BY from_uom_code,  to_uom_code, item_name, company_name
     HAVING COUNT(*) > 1;

  CURSOR    c_udk2 is select  from_uom_code,  to_uom_code, item_name, company_name
     FROM   msc_st_uom_class_conversions mcc2
     WHERE  mcc2.process_flag        = G_IN_PROCESS
     AND    item_name is null
     AND    sr_instance_code = v_instance_code
     AND    NVL(mcc2.message_id, NULL_VALUE) = NULL_VALUE
     GROUP  BY from_uom_code,  to_uom_code, item_name, company_name
     HAVING COUNT(*) > 1;

  CURSOR    c2(p_batch_id NUMBER) IS
    SELECT  rowid
    FROM    msc_st_uom_class_conversions
    WHERE   process_flag     IN (G_IN_PROCESS,G_ERROR_FLG)
    AND     batch_id         = p_batch_id
    AND     sr_instance_code = v_instance_code;

  CURSOR    c3(p_batch_id NUMBER) IS
    SELECT  rowid
    FROM    msc_st_uom_conversions
    WHERE   process_flag     IN (G_IN_PROCESS,G_ERROR_FLG)
    AND     batch_id         = p_batch_id
    AND     sr_instance_code = v_instance_code;

  BEGIN
    --*****Validation for the table msc_st_uom_class_conversions.*****

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

/*  --Remove organization code from records which have item name null

    UPDATE  msc_st_uom_class_conversions
    SET     organization_code = ''
    WHERE   sr_instance_code = v_instance_code
    AND     process_flag     = G_IN_PROCESS
    AND     item_name is null;*/

    --Duplicate records check for the records whose source is XML.
    v_sql_stmt := 10;
    lv_sql_stmt :=
    'UPDATE  msc_st_uom_class_conversions mcc1 '
    ||' SET     process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   message_id <  (SELECT MAX(message_id)'
    ||'         FROM   msc_st_uom_class_conversions mcc2'
    ||'         WHERE  NVL(mcc2.item_name,           '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mcc1.item_name,           '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(mcc2.from_uom_code,       '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mcc1.from_uom_code,       '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(mcc2.to_uom_code,         '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mcc1.to_uom_code,         '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(mcc2.company_name,        '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mcc1.company_name,        '||''''||NULL_CHAR||''''||')'
    ||'         AND    mcc2.process_flag      = '||G_IN_PROCESS
    ||'         AND    NVL(mcc2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND mcc1.process_flag                 = '||G_IN_PROCESS
    ||' AND mcc1.sr_instance_code             = :v_instance_code'
    ||' AND NVL(mcc1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;



      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.
    v_sql_stmt := 11;
/*
    lv_sql_stmt :=
    'UPDATE     msc_st_uom_class_conversions mcc1 '
    ||' SET     process_flag  = '||G_ERROR_FLG||','
    ||'         error_text    = '||''''||lv_message_text||''''
    ||' WHERE   EXISTS( SELECT 1 '
    ||'         FROM   msc_st_uom_class_conversions mcc2'
    ||'         WHERE  NVL(mcc2.item_name,           '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mcc1.item_name,           '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(mcc2.organization_code,   '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mcc1.organization_code,   '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(mcc2.from_uom_code,       '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mcc1.from_uom_code,       '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(mcc2.to_uom_code,         '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mcc1.to_uom_code,         '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(mcc2.company_name,        '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mcc1.company_name,        '||''''||NULL_CHAR||''''||')'
    ||'         AND    mcc2.process_flag      = '||G_IN_PROCESS
    ||'         AND    NVL(mcc2.message_id,          '||NULL_VALUE||') = '||NULL_VALUE
    ||' GROUP BY item_name,organization_code,company_name,'
    ||'          from_uom_code,to_uom_code'
    ||' HAVING COUNT(*) > 1)'
    ||' AND    mcc1.process_flag            = '||G_IN_PROCESS
    ||' AND    mcc1.sr_instance_code        = :v_instance_code'
    ||' AND     NVL(mcc1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      msc_st_util.log_message(lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;
*/

   BEGIN

     BEGIN
        OPEN c_udk1;
         FETCH c_udk1 BULK COLLECT INTO lb_from_uom_code,lb_to_uom_code, lb_item,lb_comp;
        CLOSE c_udk1;

        FORALL j IN lb_item.FIRST..lb_item.LAST
        UPDATE msc_st_uom_class_conversions  SET process_flag  = G_ERROR_FLG, error_text =lv_message_text
        WHERE  from_uom_code= lb_from_uom_code(j)
        AND    to_uom_code = lb_to_uom_code(j)
        AND    item_name= lb_item(j)
        AND    NVL(company_name,   NULL_CHAR) = NVL(lb_comp(j),   NULL_CHAR)
        AND    process_flag        = G_IN_PROCESS
        AND    sr_instance_code        = v_instance_code
        AND    NVL(message_id,  NULL_VALUE) = NULL_VALUE ;
     EXCEPTION
        when others then
        null;
     END;

     BEGIN
        lb_item.DELETE;
        lb_from_uom_code.DELETE;
        lb_to_uom_code.DELETE;
        lb_comp.DELETE;
        OPEN c_udk2;
         FETCH c_udk2 BULK COLLECT INTO lb_from_uom_code,lb_to_uom_code, lb_item,lb_comp;
        CLOSE c_udk2;

        FORALL j IN lb_item.FIRST..lb_item.LAST
        UPDATE msc_st_uom_class_conversions  SET  process_flag  = G_ERROR_FLG, error_text =lv_message_text
        WHERE  from_uom_code= lb_from_uom_code(j)
        AND    to_uom_code = lb_to_uom_code(j)
        AND    NVL(company_name,    NULL_CHAR) = NVL(lb_comp(j),   NULL_CHAR)
        AND    item_name is null
        AND    process_flag        = G_IN_PROCESS
        AND    sr_instance_code        = v_instance_code
        AND    NVL(message_id,    NULL_VALUE) = NULL_VALUE ;
     EXCEPTION
        when others then
        null;
     END;

    END;

    lv_column_names :=
    'FROM_UNIT_OF_MEASURE||''~''||'
    ||'FROM_UOM_CODE     ||''~''||'
    ||'FROM_UOM_CLASS    ||''~''||'
    ||'TO_UNIT_OF_MEASURE||''~''||'
    ||'TO_UOM_CODE       ||''~''||'
    ||'TO_UOM_CLASS      ||''~''||'
    ||'CONVERSION_RATE   ||''~''||'
    ||'SR_INSTANCE_CODE  ||''~''||'
    ||'DISABLE_DATE      ||''~''||'
    ||'ITEM_NAME         ||''~''||'
    ||'ORGANIZATION_CODE ||''~''||'
    ||'COMPANY_NAME      ||''~''||'
    ||'DELETED_FLAG';

    LOOP
      v_sql_stmt := 12;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 13;
      lv_sql_stmt :=
      'UPDATE msc_st_uom_class_conversions '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN  c2(lv_batch_id);
      FETCH c2 BULK COLLECT INTO lb_rowid;
      CLOSE c2;

      v_sql_stmt := 14;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_uom_class_conversions
      SET    st_transaction_id   = msc_st_uom_class_conversions_s.NEXTVAL,
             refresh_id          = v_refresh_id,
             last_update_date    = v_current_date,
             last_updated_by     = v_current_user,
             creation_date       = v_current_date,
             created_by          = v_current_user
      WHERE  rowid               = lb_rowid(j);

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_UOM_CLASS_CONVERSIONS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Deletion is not allowed on this table.
      v_sql_stmt := 15;
      lv_sql_stmt :=
      'UPDATE      msc_st_uom_class_conversions '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str := ' AND NVL(deleted_flag,'||NULL_VALUE||') '
                      ||' NOT IN(1,2)';

      --Log a warning for those records where the deleted_flag has a value other
      --than SYS_NO
      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_UOM_CLASS_CONVERSIONS',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'DELETED_FLAG',
                      p_debug             => v_debug,
                      p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'FROM_UOM_CODE OR FROM_UOM_CLASS OR'
                                             ||' TO_UOM_CODE OR TO_UOM_CLASS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 16;
      lv_sql_stmt :=
      'UPDATE msc_st_uom_class_conversions'
      ||' SET process_flag           = '||G_ERROR_FLG||','
      ||'         error_text         = '||''''||lv_message_text||''''
      ||' WHERE (NVL(from_uom_code,'||''''||NULL_CHAR||''''||') '
      ||'       =                  '||''''||NULL_CHAR||''''
      ||' OR    NVL(from_uom_class,'||''''||NULL_CHAR||''''||') '
      ||'       =                  '||''''||NULL_CHAR||''''
      ||' OR    NVL(to_uom_code,   '||''''||NULL_CHAR||''''||') '
      ||'       =                  '||''''||NULL_CHAR||''''
      ||' OR    NVL(to_uom_class,  '||''''||NULL_CHAR||''''||') '
      ||'       =                  '||''''||NULL_CHAR||''''||') '
      ||' AND   process_flag        = '||G_IN_PROCESS
      ||' AND   batch_id            = :lv_batch_id'
      ||' AND   sr_instance_code    = :v_instance_code';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      v_sql_stmt := 17;
      lv_sql_stmt :=
      'UPDATE   msc_st_uom_class_conversions'
      ||' SET   from_unit_of_measure          = from_uom_code'
      ||' WHERE NVL(from_unit_of_measure,'||''''||NULL_CHAR||''''||')'
      ||'       =                        '||''''||NULL_CHAR||''''
      ||' AND   process_flag                  = '||G_IN_PROCESS
      ||' AND   batch_id                      = :lv_batch_id'
      ||' AND   sr_instance_code              = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      v_sql_stmt := 18;
      lv_sql_stmt :=
      'UPDATE   msc_st_uom_class_conversions '
      ||' SET   to_unit_of_measure  = to_uom_code'
      ||' WHERE NVL(to_unit_of_measure,'||''''||NULL_CHAR||''''||')'
      ||'       =                      '||''''||NULL_CHAR||''''
      ||' AND   process_flag        = '||G_IN_PROCESS
      ||' AND   batch_id            = :lv_batch_id'
      ||' AND   sr_instance_code    = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'FROM_UOM_CODE, FROM_UOM_CLASS AND FROM_UNIT_OF_MEASURE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_UNITS_OF_MEASURE',
                      p_token3            => 'MASTER_TABLE',
                      p_token_value3      => 'MSC_ST_UNITS_OF_MEASURE',
                      p_token4            => 'CHILD_TABLE',
                      p_token_value4      => 'MSC_ST_UOM_CLASS_CONVERSIONS');
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 19;
      lv_sql_stmt :=
      'UPDATE    msc_st_uom_class_conversions mcc '
      ||' SET    process_flag  = '||G_ERROR_FLG||','
      ||'        error_text    = '||''''||lv_message_text||''''
      ||' WHERE  NOT EXISTS(SELECT 1'
      ||'        FROM   msc_units_of_measure mum'
      ||'        WHERE  mum.uom_code        = mcc.from_uom_code'
      ||'        AND    mum.uom_class       = mcc.from_uom_class'
      ||'        AND    mum.unit_of_measure = mcc.from_unit_of_measure'
      ||'        AND    mum.base_uom_flag   = ''Y'' '
      ||'        UNION'
      ||'        SELECT 1'
      ||'        FROM   msc_st_units_of_measure mum'
      ||'        WHERE  mum.uom_code          = mcc.from_uom_code'
      ||'        AND    mum.uom_class         = mcc.from_uom_class'
      ||'        AND    mum.unit_of_measure = mcc.from_unit_of_measure'
      ||'        AND    mum.base_uom_flag   = ''Y'' '
      ||'        AND    mum.process_flag      = '||G_VALID||')'
      ||' AND    mcc.batch_id         = :lv_batch_id'
      ||' AND    mcc.sr_instance_code = :v_instance_code'
      ||' AND    mcc.process_flag     = 2';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'TO_UOM_CODE, TO_UOM_CLASS'
                                             ||' AND TO_UNIT_OF_MEASURE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_UNITS_OF_MEASURE',
                      p_token3            => 'CHILD_TABLE',
                      p_token_value3      => 'MSC_ST_UOM_CLASS_CONVERSIONS');
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 20;
      lv_sql_stmt :=
      'UPDATE msc_st_uom_class_conversions mcc '
      ||' SET    process_flag  = '||G_ERROR_FLG||','
      ||'        error_text   = '||''''||lv_message_text||''''
      ||' WHERE  NOT EXISTS(SELECT 1'
      ||'        FROM   msc_units_of_measure mum '
      ||'        WHERE  mum.uom_code          = mcc.to_uom_code'
      ||'        AND    mum.uom_class         = mcc.to_uom_class'
      ||'        AND    mum.unit_of_measure   = mcc.to_unit_of_measure'
      ||'        AND    mum.base_uom_flag   = ''Y'' '
      ||'        UNION'
      ||'        SELECT 1'
      ||'        FROM   msc_st_units_of_measure mum'
      ||'        WHERE  mum.uom_code          = mcc.to_uom_code'
      ||'        AND    mum.uom_class         = mcc.to_uom_class'
      ||'        AND    mum.unit_of_measure   = mcc.to_unit_of_measure'
      ||'        AND    mum.base_uom_flag   = ''Y'' '
      ||'        AND    mum.process_flag      = '||G_VALID||') '
      ||' AND    mcc.batch_id         = :lv_batch_id'
      ||' AND    mcc.sr_instance_code = :v_instance_code'
      ||' AND    mcc.process_flag     = 2';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_CONV_RT_NEG',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CONVERSION_RATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 21;
      lv_sql_stmt :=
      ' UPDATE msc_st_uom_class_conversions'
      ||' SET    process_flag     = '||G_ERROR_FLG||', '
      ||'        error_text   = '||''''||lv_message_text||''''
      ||' WHERE  NVL(conversion_rate,'||NULL_VALUE||') <= 0'
      ||' AND    process_flag     = '||G_IN_PROCESS
      ||' AND    batch_id         = :lv_batch_id'
      ||' AND    sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


/*      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Org code is mandatory where item name is not null
      v_sql_stmt := 22;
      lv_sql_stmt :=
      ' UPDATE  msc_st_uom_class_conversions'
      ||' SET   process_flag   =      '||G_ERROR_FLG||', '
      ||'       error_text     =      '||''''||lv_message_text||''''
      ||' WHERE NVL(item_name,        '||''''||NULL_CHAR||''''||')'
      ||'       =                     '||''''||NULL_CHAR||''''
      ||' AND   NVL(ORGANIZATION_CODE,'||''''||NULL_CHAR||''''||') '
      ||'       =                     '||''''||NULL_CHAR||''''
      ||' AND   process_flag                  =  '||G_IN_PROCESS
      ||' AND   batch_id                      =  :lv_batch_id'
      ||' AND   sr_instance_code              =  :v_instance_code';


        msc_st_util.log_message(lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Organization_id
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_UOM_CLASS_CONVERSIONS',
                      p_org_partner_name => 'ORGANIZATION_CODE',
                      p_org_partner_id   => 'ORGANIZATION_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_ORGANIZATION,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV3_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF; */
      v_sql_stmt := 23;
      --Update inventory_item_id
      lv_sql_stmt :=
      'UPDATE msc_st_uom_class_conversions mcc '
      ||' SET inventory_item_id = (SELECT local_id'
      ||'     FROM   msc_local_id_item mli'
      ||'     WHERE  mli.char1         = mcc.sr_instance_code '
      ||'     AND    NVL(mli.char2,       '||''''||NULL_CHAR||''''||')='
      ||'            NVL(mcc.company_name,'||''''||NULL_CHAR||''''||')'
      ||'     AND    mli.char4         = mcc.item_name'
      ||'     AND    mli.entity_name   = ''SR_INVENTORY_ITEM_ID'' '
      ||'     AND    mli.instance_id   = :v_instance_id '
      ||'     AND    rownum < 2) '
      ||' WHERE  item_name IS NOT NULL'
      ||' AND    sr_instance_code      = :v_instance_code'
      ||' AND    batch_id              = :lv_batch_id'
      ||' AND    process_flag          = '||G_IN_PROCESS;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_id,
                      v_instance_code,
                      lv_batch_id;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      v_sql_stmt := 24;
      lv_sql_stmt :=
      'UPDATE msc_st_uom_class_conversions '
      ||' SET   error_text   = '||''''||lv_message_text||''''||','
      ||'       process_flag = '||g_error
      ||' WHERE inventory_item_id IS NULL '
      ||' AND   item_name IS NOT NULL '
      ||' AND   sr_instance_code       = :v_instance_code'
      ||' AND   batch_id               = :lv_batch_id'
      ||' AND   process_flag           = ' ||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;


      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_UOM_CLASS_CONVERSIONS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 25;
      --Fixed against the bug#2734588.

      UPDATE msc_st_uom_class_conversions
      SET    inventory_item_id   = 0
      WHERE  item_name IS NULL
      AND    process_flag        = G_IN_PROCESS
      AND    batch_id            = lv_batch_id
      AND    sr_instance_code    = v_instance_code;

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_UOM_CLASS_CONVERSIONS',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_UOM_CLASS_CONVERSIONS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_message_text      => NULL,
                    p_error_text        => lv_error_text,
                    p_debug             => v_debug,
                    p_batch_id          => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      COMMIT;
    END LOOP;

    --Validation check for the table msc_st_uom_class_conversions.

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML.
    v_sql_stmt := 23;
    lv_sql_stmt :=
    'UPDATE     msc_st_uom_conversions mcc1 '
    ||' SET     process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   message_id <  (SELECT MAX(message_id) '
    ||'         FROM   msc_st_uom_conversions mcc2 '
    ||'         WHERE  NVL(mcc2.item_name,        '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mcc1.item_name,        '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(mcc2.unit_of_measure,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mcc1.unit_of_measure,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(mcc2.company_name,     '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mcc1.company_name,     '||''''||NULL_CHAR||''''||')'
    ||'         AND    mcc2.process_flag =        '||G_IN_PROCESS
    ||'         AND    NVL(mcc2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND    mcc1.process_flag     = '||G_IN_PROCESS
    ||' AND    mcc1.sr_instance_code = :v_instance_code'
    ||' AND    NVL(mcc1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;



      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.
    v_sql_stmt := 24;
    lv_sql_stmt :=
    'UPDATE     msc_st_uom_conversions mcc1 '
    ||' SET     process_flag   = '||G_ERROR_FLG||','
    ||'         error_text     = '||''''||lv_message_text||''''
    ||' WHERE   EXISTS( SELECT 1 '
    ||'         FROM   msc_st_uom_conversions mcc2'
    ||'         WHERE  NVL(mcc2.item_name,         '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mcc1.item_name,         '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(mcc2.unit_of_measure,   '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mcc1.unit_of_measure,   '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(mcc2.company_name,      '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mcc1.company_name,      '||''''||NULL_CHAR||''''||')'
    ||'         AND    mcc2.process_flag      =     '||G_IN_PROCESS
    ||'         AND    NVL(mcc2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'         GROUP BY item_name,company_name,'
    ||'                unit_of_measure'
    ||'         HAVING COUNT(*) > 1)'
    ||' AND     mcc1.process_flag          = '||G_IN_PROCESS
    ||' AND     mcc1.sr_instance_code      = :v_instance_code'
    ||' AND     NVL(mcc1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_column_names :=
    'UNIT_OF_MEASURE          ||''~''||'
    ||'UOM_CODE                ||''~''||'
    ||'UOM_CLASS               ||''~''||'
    ||'INVENTORY_ITEM_ID       ||''~''||'
    ||'CONVERSION_RATE         ||''~''||'
    ||'DEFAULT_CONVERSION_FLAG ||''~''||'
    ||'SR_INSTANCE_CODE        ||''~''||'
    ||'DISABLE_DATE            ||''~''||'
    ||'ITEM_NAME               ||''~''||'
    ||'ORGANIZATION_CODE       ||''~''||'
    ||'COMPANY_NAME            ||''~''||'
    ||'DELETED_FLAG';

    LOOP
      v_sql_stmt := 25;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 26;
      lv_sql_stmt :=
      'UPDATE msc_st_uom_conversions '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c3(lv_batch_id);
      FETCH c3 BULK COLLECT INTO lb_rowid;
      CLOSE c3;

      v_sql_stmt := 27;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_uom_conversions
      SET    st_transaction_id = msc_st_uom_conversions_s.NEXTVAL,
             refresh_id        = v_refresh_id,
             last_update_date  = v_current_date,
             last_updated_by   = v_current_user,
             creation_date     = v_current_date,
             created_by        = v_current_user
      WHERE  rowid             = lb_rowid(j);

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_UOM_CONVERSIONS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Deletion is not allowed on this table.
      v_sql_stmt := 28;
      lv_sql_stmt :=
      'UPDATE      msc_st_uom_conversions'
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         = :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Item Name is mandatory if the Default Conversion Flag is set to 'Y' (fix for 2747791)
      v_sql_stmt := 29;
      lv_sql_stmt :=
      'UPDATE      msc_st_uom_conversions'
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    item_name IS NULL '
      ||' AND      default_conversion_flag     = ''Y'' '
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         = :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      ' AND NVL(deleted_flag,'||NULL_VALUE||') '
      ||' NOT IN(1,2)';

      --Log a warning for those records where the deleted_flag has a value other
      --than SYS_NO
      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_UOM_CONVERSIONS',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'DELETED_FLAG',
                      p_debug             => v_debug,
                      p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'UOM_CODE OR UOM_CLASS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 30;
      lv_sql_stmt :=
      'UPDATE   msc_st_uom_conversions'
      ||' SET   process_flag     = '||G_ERROR_FLG||','
      ||'         error_text     = '||''''||lv_message_text||''''
      ||' WHERE (NVL(uom_code,     '||''''||NULL_CHAR||''''||') '
      ||'       =                  '||''''||NULL_CHAR||''''
      ||' OR    NVL(uom_class,     '||''''||NULL_CHAR||''''||') '
      ||'       =                  '||''''||NULL_CHAR||''''||') '
      ||' AND   process_flag        = '||G_IN_PROCESS
      ||' AND   batch_id            = :lv_batch_id'
      ||' AND   sr_instance_code    = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      v_sql_stmt := 30;
      lv_sql_stmt :=
      'UPDATE   msc_st_uom_conversions'
      ||' SET   unit_of_measure     = uom_code'
      ||' WHERE NVL(unit_of_measure,'||''''||NULL_CHAR||''''||')'
      ||'        =                  '||''''||NULL_CHAR||''''
      ||' AND   process_flag               = '||G_IN_PROCESS
      ||' AND   batch_id                   = :lv_batch_id'
      ||' AND   sr_instance_code           = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'UOM_CODE, UOM_CLASS AND UNIT_OF_MEASURE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_UNITS_OF_MEASURE',
                      p_token3            => 'CHILD_TABLE',
                      p_token_value3      => 'MSC_ST_UOM_CONVERSIONS');
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 31;
      lv_sql_stmt :=
      ' UPDATE   msc_st_uom_conversions mcc'
      ||' SET    process_flag  = '||G_ERROR_FLG||','
      ||'        error_text    = '||''''||lv_message_text||''''
      ||' WHERE  NOT EXISTS(SELECT 1'
      ||'        FROM   msc_units_of_measure mum'
      ||'        WHERE  mum.uom_code        = mcc.uom_code'
      ||'        AND    mum.uom_class       = mcc.uom_class'
      ||'        AND    mum.unit_of_measure = mcc.unit_of_measure'
      ||'        UNION'
      ||'        SELECT 1'
      ||'        FROM   msc_st_units_of_measure mum'
      ||'        WHERE  mum.uom_code        = mcc.uom_code'
      ||'        AND    mum.uom_class       = mcc.uom_class'
      ||'        AND    mum.unit_of_measure = mcc.unit_of_measure'
      ||'        AND    mum.process_flag    = '||G_VALID||')'
      ||' AND   batch_id                    = :lv_batch_id'
      ||' AND    mcc.sr_instance_code       = :v_instance_code'
      ||' AND    mcc.process_flag           = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_CONV_RT_NEG',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CONVERSION_RATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 32;
      lv_sql_stmt :=
      'UPDATE    msc_st_uom_conversions'
      ||' SET    process_flag     = '||G_ERROR_FLG||','
      ||'        error_text       = '||''''||lv_message_text||''''
      ||' WHERE  NVL(conversion_rate,'||NULL_VALUE||')  <= 0'
      ||' AND    process_flag     = '||G_IN_PROCESS
      ||' AND    batch_id         = :lv_batch_id'
      ||' AND    sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

/*    --Org code is mandatory where item name is not null
      v_sql_stmt := 33;
      lv_sql_stmt :=
      'UPDATE    msc_st_uom_conversions'
      ||' SET    process_flag          = '||G_ERROR_FLG||','
      ||'        error_text            = '||''''||lv_message_text||''''
      ||' WHERE  NVL(item_name,          '||''''||NULL_CHAR||''''||') '
      ||'        <>                      '||''''||NULL_CHAR||''''
      ||' AND    NVL(ORGANIZATION_CODE,  '||''''||NULL_CHAR||''''||') '
      ||'        =                       '||''''||NULL_CHAR||''''
      ||' AND    process_flag        =   '||G_IN_PROCESS
      ||' AND    batch_id            = :lv_batch_id'
      ||' AND    sr_instance_code    = :v_instance_code';


        msc_st_util.log_message(lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Organization_id
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_UOM_CONVERSIONS',
                      p_org_partner_name => 'ORGANIZATION_CODE',
                      p_org_partner_id   => 'ORGANIZATION_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_ORGANIZATION,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV3_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF; */

      --Update inventory_item_id
      lv_sql_stmt :=
      'UPDATE msc_st_uom_conversions mcc '
      ||' SET inventory_item_id = (SELECT local_id'
      ||'     FROM   msc_local_id_item mli'
      ||'     WHERE  mli.char1         = mcc.sr_instance_code '
      ||'     AND    NVL(mli.char2,       '||''''||NULL_CHAR||''''||')='
      ||'            NVL(mcc.company_name,'||''''||NULL_CHAR||''''||')'
      ||'     AND    mli.char4         = mcc.item_name'
      ||'     AND    mli.entity_name   = ''SR_INVENTORY_ITEM_ID'' '
      ||'     AND    mli.instance_id   = :v_instance_id '
      ||'     AND    rownum < 2 )'
      ||' WHERE  item_name IS NOT NULL'
      ||' AND    sr_instance_code      = :v_instance_code'
      ||' AND    batch_id              = :lv_batch_id'
      ||' AND    process_flag          = '||G_IN_PROCESS;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_id,
                      v_instance_code,
                      lv_batch_id;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_sql_stmt :=
      'UPDATE msc_st_uom_class_conversions '
      ||' SET   error_text   = '||''''||lv_message_text||''''||','
      ||'       process_flag = '||g_error
      ||' WHERE inventory_item_id IS NULL '
      ||' AND   item_name IS NOT NULL '
      ||' AND   sr_instance_code       = :v_instance_code'
      ||' AND   batch_id               = :lv_batch_id'
      ||' AND   process_flag           = ' ||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;

      --Item id is set to 0 if the inventory_item_id is NULL
      v_sql_stmt := 34;
      lv_sql_stmt :=
      'UPDATE      msc_st_uom_conversions '
      ||' SET      inventory_item_id     = 0 '
      ||' WHERE    process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         = :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code'
      ||' AND      inventory_item_id IS NULL ';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_UOM_CONVERSIONS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_UOM_CONVERSIONS',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_UOM_CONVERSIONS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_message_text      => NULL,
                    p_error_text        => lv_error_text,
                    p_debug             => v_debug,
                    p_batch_id          => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      COMMIT;
    END LOOP;

  EXCEPTION
    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_UOM_CLASS_CONV'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END LOAD_UOM_CLASS_CONV;

/*==========================================================================+
| DESCRIPTION  : This procedure validates the records and updates the table |
|                msc_st_designators.                                        |
|                                                                           |
|                Designator Types                    Type Code              |
|                ---------------------------------------------------------- |
|                Manual MDS                          1                      |
|                Plan Orders                         2                      |
|                Forecast                            6                      |
+==========================================================================*/
  PROCEDURE LOAD_DESIGNATOR IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid          RowidTab;
  lv_error_text     VARCHAR2(250);
  lv_column_names   VARCHAR2(5000);--stores concatenated column names
  lv_where_str      VARCHAR2(5000);
  lv_sql_stmt       VARCHAR2(5000);
  lv_return         NUMBER;

  lv_batch_id       msc_st_designators.batch_id%TYPE;
  lv_message_text   msc_errors.error_text%TYPE;
  ex_logging_err    EXCEPTION;

  CURSOR c1(lv_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_designators
    WHERE  process_flag     IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = lv_batch_id;

  BEGIN

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML
    --Based on bug#2736771 UDK has been changed.
    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE     msc_st_designators msd1 '
    ||' SET     process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   message_id <  (SELECT MAX(message_id)'
    ||'         FROM   msc_st_designators msd2'
    ||'         WHERE  msd2.sr_instance_code      = msd1.sr_instance_code'
    ||'         AND    NVL(msd2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msd1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    msd2.organization_code     = msd1.organization_code'
    ||'         AND    msd2.designator            = msd1.designator'
    ||'         AND    msd2.process_flag          = '||G_IN_PROCESS
    ||'         AND    msd2.sr_instance_code      = msd1.sr_instance_code'
    ||'         AND    NVL(msd2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND    msd1.process_flag     = '||G_IN_PROCESS
    ||' AND    msd1.sr_instance_code = :v_instance_code'
    ||' AND    NVL(msd1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.
    v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE  msc_st_designators msd1'
    ||' SET     process_flag  = '||G_ERROR_FLG||','
    ||'      error_text   = '||''''||lv_message_text||''''
    ||' WHERE   EXISTS( SELECT 1 '
    ||'         FROM   msc_st_designators msd2'
    ||'         WHERE  msd2.sr_instance_code      = msd1.sr_instance_code'
    ||'         AND    NVL(msd2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msd1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    msd2.organization_code     = msd1.organization_code'
    ||'         AND    msd2.designator            = msd1.designator'
    ||'         AND    msd2.process_flag          = '||G_IN_PROCESS
    ||'         AND    msd2.sr_instance_code      = msd1.sr_instance_code'
    ||'         AND    NVL(msd2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'         GROUP BY sr_instance_code,organization_code,company_name,'
    ||'                designator'
    ||'         HAVING COUNT(*) > 1)'
    ||' AND     msd1.process_flag = '||G_IN_PROCESS
    ||' AND     msd1.sr_instance_code = :v_instance_code'
    ||' AND     NVL(msd1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_column_names :=
    'DESIGNATOR                    ||''~''||'
    ||'ORGANIZATION_CODE           ||''~''||'
    ||'MPS_RELIEF                  ||''~''||'
    ||'INVENTORY_ATP_FLAG          ||''~''||'
    ||'DESCRIPTION                 ||''~''||'
    ||'DISABLE_DATE                ||''~''||'
    ||'DEMAND_CLASS                ||''~''||'
    ||'ORGANIZATION_SELECTION      ||''~''||'
    ||'PRODUCTION                  ||''~''||'
    ||'SR_INSTANCE_CODE            ||''~''||'
    ||'DELETED_FLAG                ||''~''||'
    ||'BUCKET_TYPE                 ||''~''||'
    ||'RECOMMENDATION_RELEASE      ||''~''||'
    ||'CONSUME_FORECAST            ||''~''||'
    ||'UPDATE_TYPE                 ||''~''||'
    ||'FORWARD_UPDATE_TIME_FENCE   ||''~''||'
    ||'BACKWARD_UPDATE_TIME_FENCE  ||''~''||'
    ||'OUTLIER_UPDATE_PERCENTAGE   ||''~''||'
    ||'CUSTOMER_NAME               ||''~''||'
    ||'SHIP_TO_SITE_CODE           ||''~''||'
    ||'BILL_TO_SITE_CODE           ||''~''||'
    ||'FORECAST_SET                ||''~''||'
    ||'COMPANY_NAME                ||''~''||'
    ||'DESIGNATOR_TYPE             ||''~''||'
    ||'PROBABILITY';

    LOOP
      v_sql_stmt := 03;

      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      'UPDATE msc_st_designators '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_designators
      SET    st_transaction_id   = msc_st_designators_s.NEXTVAL,
             refresh_id          = v_refresh_id,
             last_update_date    = v_current_date,
             last_updated_by     = v_current_user,
             creation_date       = v_current_date,
             created_by          =  v_current_user
      WHERE  rowid               = lb_rowid(j);

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DESIGNATOR_TYPE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE   msc_st_designators '
      ||' SET   error_text   = '||''''||lv_message_text||''''||','
      ||'       process_flag = '||G_ERROR_FLG
      ||' WHERE nvl(designator_type,'||NULL_VALUE||') NOT IN(1,2,6)'
      ||' AND   deleted_flag     =  '||SYS_NO
      ||' AND   process_flag     =  '||G_IN_PROCESS
      ||' AND   batch_id         =  :lv_batch_id'
      ||' AND   sr_instance_code =  :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

     -- Set message

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_DESIGNATORS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Deletion is not allowed for this table
      v_sql_stmt := 07;
      lv_sql_stmt :=
      'UPDATE       msc_st_designators '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text   = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;



      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      ' AND NVL(deleted_flag,'||NULL_VALUE||') NOT IN(1,2)';

      --Log a warning for those records where the deleted_flag has a value other
      --SYS_NO
      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_DESIGNATORS',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'DELETED_FLAG',
                      p_debug             => v_debug,
                      p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Organization_id
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_DESIGNATORS',
                      p_org_partner_name => 'ORGANIZATION_CODE',
                      p_org_partner_id   => 'ORGANIZATION_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_ORGANIZATION,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DESIGNATOR');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 08;
      lv_sql_stmt :=
      'UPDATE   msc_st_designators '
      ||' SET   error_text   = '||''''||lv_message_text||''''||','
      ||'       process_flag = '||G_ERROR_FLG
      ||' WHERE NVL(designator,'||''''||NULL_CHAR||''''||')'
      ||'       = '||''''||NULL_CHAR||''''
      ||' AND   deleted_flag      = '||SYS_NO
      ||' AND   process_flag      = '||G_IN_PROCESS
      ||' AND   batch_id          = :lv_batch_id'
      ||' AND   sr_instance_code  = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DEMAND_CLASS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Validate Demand Class, if value provided it should exists
      -- in ODS or staging table
     lv_return :=
     MSC_ST_UTIL.VALIDATE_DMD_CLASS(p_table_name       => 'MSC_ST_DESIGNATORS',
                                    p_dmd_class_column => 'DEMAND_CLASS',
                                    p_instance_id      => v_instance_id,
                                    p_instance_code    => v_instance_code,
                                    p_severity         => G_SEV3_ERROR,
                                    p_message_text     => lv_message_text,
                                    p_batch_id         => lv_batch_id,
                                    p_debug            => v_debug,
                                    p_error_text       => lv_error_text);

     if(lv_return <> 0) then
        RAISE ex_logging_err;
     end if;


      v_sql_stmt := 10;
      lv_sql_stmt :=
      'UPDATE msc_st_designators '
      ||' SET inventory_atp_flag = '||G_FOR_INV_ATP_FLAG
      --||'     mps_relief         = '||G_FOR_MPS_RELIEF   ||','
      --||'     consume_forecast   = '||G_CONSUME_FORECAST ||','
      --||'     update_type        = '||G_UPDATE_TYPE
      ||' WHERE nvl(inventory_atp_flag,'||NULL_VALUE||') NOT IN(1,2)'
      ||' AND   designator_type        ='||G_FORECAST_DESIGNATOR
      ||' AND   process_flag           = '||G_IN_PROCESS
      ||' AND   batch_id               = :lv_batch_id'
      ||' AND   sr_instance_code       = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      v_sql_stmt := 11;
      lv_sql_stmt :=
      'UPDATE   msc_st_designators '
      ||' SET   inventory_atp_flag = '||G_INV_ATP_FLAG
      ||' WHERE NVL(inventory_atp_flag,'||NULL_VALUE||') NOT IN(1,2)'
      ||' AND   NVL(designator_type,'||NULL_VALUE||')        IN(1,2)'
      ||' AND   process_flag           = '||G_IN_PROCESS
      ||' AND   batch_id               = :lv_batch_id'
      ||' AND   sr_instance_code       = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      v_sql_stmt := 12;
      lv_sql_stmt :=
      'UPDATE   msc_st_designators '
      ||' SET   mps_relief             = '||G_MPS_RELIEF
      ||' WHERE designator_type        IN(1,2)'
      ||' AND   process_flag           ='|| G_IN_PROCESS
      ||' AND   batch_id               = :lv_batch_id'
      ||' AND   sr_instance_code       = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      v_sql_stmt := 13;
      lv_sql_stmt :=
      ' UPDATE  msc_st_designators '
      ||' SET   bucket_type       = '||G_BUCKET_TYPE
      ||' WHERE NVL(bucket_type,'||NULL_VALUE||') NOT IN(1,2,3,'||NULL_VALUE||')'
      ||' AND   designator_type   = 6'
      ||' AND   process_flag      = '||G_IN_PROCESS
      ||' AND   batch_id          = :lv_batch_id'
      ||' AND   sr_instance_code  = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME and CUSTOMER_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Customer_id
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_DESIGNATORS',
                      p_org_partner_name => 'CUSTOMER_NAME',
                      p_org_partner_id   => 'CUSTOMER_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_CUSTOMER,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_WARNING,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SR_INSTANCE_CODE, COMPANY_NAME, CUSTOMER_NAME and BILL_TO_SITE_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Bill_id
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                     (p_table_name        => 'MSC_ST_DESIGNATORS',
                      p_partner_name      => 'CUSTOMER_NAME',
                      p_partner_site_code => 'BILL_TO_SITE_CODE',
                      p_partner_site_id   => 'BILL_ID',
                      p_instance_code     => v_instance_code,
                      p_partner_type      => G_CUSTOMER,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_debug             => v_debug,
                      p_row               => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SR_INSTANCE_CODE, COMPANY_NAME, CUSTOMER_NAME and SHIP_TO_SITE_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Ship_id
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                     (p_table_name        => 'MSC_ST_DESIGNATORS',
                      p_partner_name      => 'CUSTOMER_NAME',
                      p_partner_site_code => 'SHIP_TO_SITE_CODE',
                      p_partner_site_id   => 'SHIP_ID',
                      p_instance_code     => v_instance_code,
                      p_partner_type      => G_CUSTOMER,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_debug             => v_debug,
                      p_row               => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_DESIGNATORS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;


     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_EXISTS',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME1',
                      p_token_value1      => 'DESIGNATOR',
                      p_token2            => 'COLUMN_NAME2',
                      p_token_value2      => 'DESIGNATOR_TYPE',
                      p_token3            => 'ODS_TABLE_NAME',
                      p_token_value3      => 'MSC_DESIGNATORS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      lv_sql_stmt :=
      'UPDATE   msc_st_designators msd'
      ||' SET   error_text   = '||''''||lv_message_text||''''||','
      ||'       process_flag = '||G_ERROR_FLG
      ||' WHERE EXISTS (SELECT 1 '
      ||' FROM  msc_designators md'
      ||' WHERE md.designator = msd.designator'
      ||' AND   md.sr_instance_id = :v_instance_id'
      ||' AND   md.organization_id= msd.organization_id'
      ||' AND   md.designator_type <> msd.designator_type)'
      ||' AND   msd.deleted_flag      = '||SYS_NO
      ||' AND   msd.process_flag      = '||G_IN_PROCESS
      ||' AND   msd.batch_id          = :lv_batch_id'
      ||' AND   msd.sr_instance_code  = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,
                        lv_batch_id,
                        v_instance_code;



    -- For forecast set we check in ODS if it does not exist then
    -- Insert record in staging for forecast set

    v_sql_stmt := 14;
    lv_sql_stmt :=
    'insert into MSC_ST_DESIGNATORS'
    ||'  ( DESIGNATOR,'
    ||'    FORECAST_SET,'
    ||'    COMPANY_ID,'
    ||'    ORGANIZATION_ID,'
    ||'    MPS_RELIEF,'
    ||'    INVENTORY_ATP_FLAG,'
    ||'    DESCRIPTION,'
    ||'    DISABLE_DATE,'
    ||'    DEMAND_CLASS,'
    ||'    CONSUME_FORECAST,'
    ||'    UPDATE_TYPE,'
    ||'    FORWARD_UPDATE_TIME_FENCE,'
    ||'    BACKWARD_UPDATE_TIME_FENCE,'
    ||'    OUTLIER_UPDATE_PERCENTAGE,'
    ||'    CUSTOMER_ID,'
    ||'    SHIP_ID,'
    ||'    BILL_ID,'
    ||'    BUCKET_TYPE,'
    ||'    DESIGNATOR_TYPE,'
    ||'    DELETED_FLAG,'
    ||'    REFRESH_ID,'
    ||'    ST_TRANSACTION_ID,'
    ||'    BATCH_ID,'
    ||'    MESSAGE_ID,'
    ||'    DATA_SOURCE_TYPE,'
    ||'    PROCESS_FLAG,'
    ||'    SR_INSTANCE_CODE)'
    ||'  select'
    ||'  FORECAST_SET,'
    ||'  NULL,'
    ||'  COMPANY_ID,'
    ||'  ORGANIZATION_ID,'
    ||'  MPS_RELIEF,'
    ||'  INVENTORY_ATP_FLAG,'
    ||'  DESCRIPTION,'
    ||'  DISABLE_DATE,'
    ||'  DEMAND_CLASS,'
    ||'  CONSUME_FORECAST,'
    ||'  UPDATE_TYPE,'
    ||'  FORWARD_UPDATE_TIME_FENCE,'
    ||'  BACKWARD_UPDATE_TIME_FENCE,'
    ||'  OUTLIER_UPDATE_PERCENTAGE,'
    ||'  CUSTOMER_ID,'
    ||'  SHIP_ID,'
    ||'  BILL_ID,'
    ||'  BUCKET_TYPE,'
    ||'  DESIGNATOR_TYPE,'
    ||'  DELETED_FLAG,'
    ||   v_refresh_id ||' , '
    ||'  ST_TRANSACTION_ID,'
    ||'  BATCH_ID,'
    ||'  MESSAGE_ID,'
    ||'  DATA_SOURCE_TYPE,'
    ||   G_IN_PROCESS||','
    ||'  SR_INSTANCE_CODE'
    ||'  from MSC_ST_DESIGNATORS msd'
    ||'  WHERE NOT EXISTS ('
    ||'  SELECT 1 FROM MSC_DESIGNATORS md'
    ||'  WHERE md.designator = msd.forecast_set'
    ||'  AND NVL(md.forecast_set_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'  AND md.organization_id   = msd.organization_id'
    ||'  AND md.sr_instance_id    = :v_instance_id'
    ||'  UNION'
    ||'  SELECT 1'
    ||'  FROM   msc_st_designators msd1'
    ||'  WHERE  msd.forecast_set = msd1.designator'
    ||'  AND    msd.organization_code = msd1.organization_code'
    ||'  AND    msd1.sr_instance_code = :v_instance_code'
    ||'  AND    msd1.designator_type = 6'
    ||'  AND    NVL(msd1.forecast_set,'||''''||NULL_CHAR||''''||')'
    ||'        =               '||''''||NULL_CHAR||''''
    ||'  AND    msd1.process_flag IN ('||G_IN_PROCESS||','||G_VALID||')'
    ||'  AND    msd.rowid  <> msd1.rowid)'
    ||'  AND NVL(msd.forecast_set,'||''''||NULL_CHAR||''''||')'
    ||'        <>               '||''''||NULL_CHAR||''''
    ||'  AND msd.designator_type  = 6'
    ||'  AND msd.batch_id         = :lv_batch_id'
    ||'  AND msd.process_flag     ='||G_IN_PROCESS
    ||'  AND msd.sr_instance_code = :v_instance_code' ;



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,
                        v_instance_code,
                        lv_batch_id,
                        v_instance_code;



      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                     (p_table_name     => 'MSC_ST_DESIGNATORS',
                      p_instance_id    => v_instance_id,
                      p_instance_code  => v_instance_code,
                      p_process_flag   => G_VALID,
                      p_error_text     => lv_error_text,
                      p_debug          => v_debug,
                      p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_DESIGNATORS',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_ERROR,
                      p_message_text      => NULL,
                      p_error_text        => lv_error_text,
                      p_debug             => v_debug,
                      p_batch_id          => lv_batch_id);
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      COMMIT;
    END LOOP;

  EXCEPTION
    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_DESIGNATOR'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END LOAD_DESIGNATOR;

  /*==========================================================================+
  | DESCRIPTION  : This function performs the validation and loads the data   |
  |                for business object item                                   |
  +==========================================================================*/
  PROCEDURE  LOAD_ITEMS(p_batch_id NUMBER)  IS

  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid          RowidTab;
  lb_rowid_abc      RowidTab;

  lv_column_names       VARCHAR2(5000);     -- Stores cocatenated column names
  lv_return             NUMBER;
  lv_error_text         VARCHAR2(250);
  lv_where_str          VARCHAR2(5000);
  lv_sql_stmt           VARCHAR2(5000);
  lv_batch_id           msc_st_system_items.batch_id%TYPE;
  lv_message_text       msc_errors.error_text%TYPE;

  ex_logging_err    EXCEPTION;
  busy              EXCEPTION;
  PRAGMA EXCEPTION_INIT(busy, -54);

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_system_items
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

  CURSOR c2(p_batch_id NUMBER) IS
    SELECT max(ROWID)
    FROM   msc_st_system_items
    WHERE  NVL(sr_inventory_item_id,NULL_VALUE) = NULL_VALUE
    AND    process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    GROUP BY item_name, sr_instance_code,company_name;

/**** Don't need this cursor anymore -- bug fix 2191021
  CURSOR c3(p_batch_id NUMBER) IS
    SELECT max(ROWID)
    FROM   msc_st_system_items
    WHERE  ABC_CLASS_ID IS NULL
    AND    ABC_CLASS_NAME IS NOT NULL
    AND    process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    GROUP BY ABC_CLASS_NAME, organization_code, sr_instance_code, company_name;
******/

  CURSOR c_lock(p_batch_id NUMBER)  IS
    SELECT  'X'
    FROM    msc_st_system_items msi1,
            msc_st_system_items msi2
    WHERE   msi1.batch_id         =  p_batch_id
    AND     msi1.batch_id        <>  nvl(msi2.batch_id,NULL_VALUE)
    AND     msi1.sr_inventory_item_id IS NULL
    AND     msi2.sr_inventory_item_id IS NULL
    AND     msi1.sr_instance_code =  msi2.sr_instance_code
    AND     msi1.item_name        =  msi2.item_name
    AND     NVL(msi1.company_name,NULL_CHAR)= NVL(msi2.company_name,NULL_CHAR)
    FOR UPDATE NOWAIT   ;

/**** Don't need this lock anymore -- bug fix 2191021
  CURSOR c_lock_abc(p_batch_id NUMBER)  IS
    SELECT  'X'
    FROM    msc_st_system_items msi1 ,
            msc_st_system_items msi2
    WHERE   msi1.batch_id                    =  p_batch_id
    AND     msi1.batch_id                   <>  nvl(msi2.batch_id,NULL_VALUE)
    AND     msi1.abc_class_id IS NULL
    AND     msi2.abc_class_id IS NULL
    AND     msi1.sr_instance_code            =  msi2.sr_instance_code
    AND     msi1.abc_class_name              =  msi2.abc_class_name
    AND     msi1.organization_code           =  msi2.organization_code
    AND     NVL(msi1.company_name,NULL_CHAR) = NVL(msi2.company_name,NULL_CHAR)
    FOR UPDATE NOWAIT   ;
*******/


  BEGIN

    -- Validation of table msc_st_system_items

    lv_column_names :=
    'ORGANIZATION_CODE             ||''~''||'
    ||'ITEM_NAME                   ||''~''||'
    ||'LOT_CONTROL_CODE            ||''~''||'
    ||'ROUNDING_CONTROL_TYPE       ||''~''||'
    ||'IN_SOURCE_PLAN              ||''~''||'
    ||'MRP_PLANNING_CODE           ||''~''||'
    ||'FULL_LEAD_TIME              ||''~''||'
    ||'UOM_CODE                    ||''~''||'
    ||'MRP_CALCULATE_ATP_FLAG      ||''~''||'
    ||'ATP_COMPONENTS_FLAG         ||''~''||'
    ||'BUILT_IN_WIP_FLAG           ||''~''||'
    ||'PURCHASING_ENABLED_FLAG     ||''~''||'
    ||'PLANNING_MAKE_BUY_CODE      ||''~''||'
    ||'REPETITIVE_TYPE             ||''~''||'
    ||'ENGINEERING_ITEM_FLAG       ||''~''||'
    ||'MRP_SAFETY_STOCK_CODE       ||''~''||'
    ||'EFFECTIVITY_CONTROL         ||''~''||'
    ||'INVENTORY_PLANNING_CODE     ||''~''||'
    ||'ATP_FLAG                    ||''~''||'
    ||'SR_INSTANCE_CODE            ||''~''||'
    ||'DESCRIPTION                 ||''~''||'
    ||'LOTS_EXPIRATION             ||''~''||'
    ||'SHRINKAGE_RATE              ||''~''||'
    ||'FIXED_DAYS_SUPPLY           ||''~''||'
    ||'FIXED_ORDER_QUANTITY        ||''~''||'
    ||'FIXED_LOT_MULTIPLIER        ||''~''||'
    ||'MINIMUM_ORDER_QUANTITY      ||''~''||'
    ||'MAXIMUM_ORDER_QUANTITY      ||''~''||'
    ||'PLANNING_TIME_FENCE_DAYS    ||''~''||'
    ||'DEMAND_TIME_FENCE_DAYS      ||''~''||'
    ||'RELEASE_TIME_FENCE_CODE     ||''~''||'
    ||'RELEASE_TIME_FENCE_DAYS     ||''~''||'
    ||'REVISION                    ||''~''||'
    ||'CATEGORY_NAME               ||''~''||'
    ||'ABC_CLASS_NAME              ||''~''||'
    ||'FIXED_LEAD_TIME             ||''~''||'
    ||'VARIABLE_LEAD_TIME          ||''~''||'
    ||'PREPROCESSING_LEAD_TIME     ||''~''||'
    ||'POSTPROCESSING_LEAD_TIME    ||''~''||'
    ||'CUMULATIVE_TOTAL_LEAD_TIME  ||''~''||'
    ||'CUM_MANUFACTURING_LEAD_TIME ||''~''||'
    ||'UNIT_WEIGHT                 ||''~''||'
    ||'UNIT_VOLUME                 ||''~''||'
    ||'WEIGHT_UOM                  ||''~''||'
    ||'VOLUME_UOM                  ||''~''||'
    ||'PRODUCT_FAMILY_ID           ||''~''||'
    ||'ATP_RULE_CODE               ||''~''||'
    ||'STANDARD_COST               ||''~''||'
    ||'CARRYING_COST               ||''~''||'
    ||'ORDER_COST                  ||''~''||'
    ||'DMD_LATENESS_COST           ||''~''||'
    ||'SS_PENALTY_COST             ||''~''||'
    ||'SUPPLIER_CAP_OVERUTIL_COST  ||''~''||'
    ||'LIST_PRICE                  ||''~''||'
    ||'AVERAGE_DISCOUNT            ||''~''||'
    ||'END_ASSEMBLY_PEGGING_FLAG   ||''~''||'
    ||'END_ASSEMBLY_PEGGING        ||''~''||'
    ||'FULL_PEGGING                ||''~''||'
    ||'WIP_SUPPLY_TYPE             ||''~''||'
    ||'MRP_SAFETY_STOCK_PERCENT    ||''~''||'
    ||'SAFETY_STOCK_BUCKET_DAYS    ||''~''||'
    ||'INVENTORY_USE_UP_DATE       ||''~''||'
    ||'BUYER_NAME                  ||''~''||'
    ||'PLANNER_CODE                ||''~''||'
    ||'PLANNING_EXCEPTION_SET      ||''~''||'
    ||'EXCESS_QUANTITY             ||''~''||'
    ||'EXCEPTION_SHORTAGE_DAYS     ||''~''||'
    ||'EXCEPTION_EXCESS_DAYS       ||''~''||'
    ||'EXCEPTION_OVERPROMISED_DAYS ||''~''||'
    ||'REPETITIVE_VARIANCE_DAYS    ||''~''||'
    ||'BASE_ITEM_NAME              ||''~''||'
    ||'BOM_ITEM_TYPE               ||''~''||'
    ||'ATO_FORECAST_CONTROL        ||''~''||'
    ||'ACCEPTABLE_EARLY_DELIVERY   ||''~''||'
    ||'ACCEPTABLE_RATE_INCREASE    ||''~''||'
    ||'ACCEPTABLE_RATE_DECREASE    ||''~''||'
    ||'PRIMARY_SUPPLIER_NAME       ||''~''||'
    ||'INVENTORY_ITEM_FLAG         ||''~''||'
    ||'REVISION_QTY_CONTROL_CODE   ||''~''||'
    ||'EXPENSE_ACCOUNT             ||''~''||'
    ||'INVENTORY_ASSET_FLAG        ||''~''||'
    ||'MATERIAL_COST               ||''~''||'
    ||'RESOURCE_COST               ||''~''||'
    ||'SOURCE_ORG_CODE             ||''~''||'
    ||'PICK_COMPONENTS_FLAG        ||''~''||'
    ||'ALLOWED_UNITS_LOOKUP_CODE   ||''~''||'
    ||'SERVICE_LEVEL               ||''~''||'
    ||'REPLENISH_TO_ORDER_FLAG     ||''~''||'
    ||'COMPANY_NAME                ||''~''||'
    ||'SERIAL_NUMBER_CONTROL_CODE  ||''~''||'
    ||'REPAIR_LEAD_TIME            ||''~''||'
    ||'PREPOSITION_POINT           ||''~''||'
    ||'REPAIR_YIELD                ||''~''||'
    ||'REPAIR_PROGRAM              ||''~''||'
    ||'DELETED_FLAG';




    lv_batch_id := p_batch_id;

    LOOP
      BEGIN
          v_sql_stmt := 01;
          OPEN c_lock(p_batch_id) ;
          EXIT;
       EXCEPTION
        WHEN busy THEN
           lv_error_text  := substr('MSC_CL_PRE_PROCESS.LOAD_ITEM'||'(' ||v_sql_stmt||')'|| SQLERRM, 1, 240);
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
            dbms_lock.sleep(5);
        WHEN OTHERS THEN
         lv_error_text  := substr('MSC_CL_PRE_PROCESS.LOAD_ITEM'||'(' ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);

       v_sql_stmt := 02;
       lv_sql_stmt :=
       'UPDATE msc_st_system_items '
       ||' SET process_flag = 1, '
       ||' batch_id = NULL'
       ||' WHERE batch_id        = :p_batch_id'
       ||' AND process_flag      = '||G_IN_PROCESS
       ||' AND sr_instance_code  = :v_instance_code';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;
      COMMIT;
      RETURN;
      END ;
    END LOOP ;

/************ No need to acquire this lock anymore -- bug fix for 2191021
    LOOP
      BEGIN
          v_sql_stmt := 01;
          OPEN c_lock_abc(p_batch_id) ;
          EXIT;
      EXCEPTION
        WHEN busy THEN
           lv_error_text  := substr('MSC_CL_PRE_PROCESS.LOAD_ITEM'||'(' ||v_sql_stmt||')'|| SQLERRM, 1, 240);
            msc_st_util.log_message(lv_error_text);
            dbms_lock.sleep(5);
        WHEN OTHERS THEN
          lv_error_text  := substr('MSC_CL_PRE_PROCESS.LOAD_ITEM'||'(' ||v_sql_stmt||')'|| SQLERRM, 1, 240);
          msc_st_util.log_message(lv_error_text);

          v_sql_stmt := 03;
          lv_sql_stmt :=
          'UPDATE msc_st_system_items '
          ||' SET process_flag = 1, '
          ||' batch_id = NULL'
          ||' WHERE batch_id        = :p_batch_id'
          ||' AND process_flag      = '||G_IN_PROCESS
          ||' AND sr_instance_code  = :v_instance_code';


            msc_st_util.log_message(lv_sql_stmt);

          EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;
          COMMIT;
          RETURN;
      END ;
    END LOOP ;
******/

    -- Update transaction id and WHO columns

    OPEN c1(lv_batch_id);

    v_sql_stmt := 01;

    FETCH c1 BULK COLLECT INTO lb_rowid;

       v_sql_stmt := 04;

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE   msc_st_system_items
      SET      st_transaction_id = msc_st_system_items_s.NEXTVAL,
               refresh_id        = v_refresh_id,
               last_update_date  = v_current_date,
               last_updated_by   = v_current_user,
               creation_date     = v_current_date,
               created_by        = v_current_user
      WHERE    rowid             = lb_rowid(j);


    -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Error out records where item_name  is NULL

     v_sql_stmt := 06;

     lv_sql_stmt :=
      ' UPDATE  msc_st_system_items '
      ||' SET   process_flag        = '||G_ERROR_FLG||','
      ||'       error_text          = '||''''||lv_message_text||''''
      ||' WHERE NVL(item_name,'||''''||NULL_CHAR||''''||')'
      ||'                   = '||''''||NULL_CHAR||''''
      ||' AND   batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND   sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

    -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_SYSTEM_ITEMS');

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

     --Deletion is not allowed on this table.

     v_sql_stmt := 07;
     lv_sql_stmt :=
      ' UPDATE   msc_st_system_items '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         = :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE   lv_sql_stmt
            USING       lv_batch_id,
                        v_instance_code;

    -- Set the error message , PIP FIX

     lv_return :=  MSC_ST_UTIL.GET_ERROR_MESSAGE
                      (p_app_short_name    => 'MSC',
                       p_error_code        => 'MSC_PP_INVALID_VALUE',
                       p_message_text      => lv_message_text,
                       p_error_text        => lv_error_text,
                       p_token1            => 'COLUMN_NAME',
                       p_token_value1      => 'PIP_FLAG');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     --Valid values for PIP_flag are 1 and 2.

     v_sql_stmt := 07;
     lv_sql_stmt :=
      ' UPDATE   msc_st_system_items '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    nvl(pip_flag,1)  not in(1,2)'
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         = :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE   lv_sql_stmt
            USING       lv_batch_id,
                        v_instance_code;

    -- create supply flag validation
    -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CREATE_SUPPLY_FLAG');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Valid value for CREATE_SUPPLY_FLAG are (1,2)

    v_sql_stmt := 97;
    lv_sql_stmt :=
        ' UPDATE   MSC_ST_SYSTEM_ITEMS '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    nvl(CREATE_SUPPLY_FLAG,1)  not in(1,2)'
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         = :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE   lv_sql_stmt
            USING       lv_batch_id,
                        v_instance_code;

      -- Set the message

     lv_return :=  MSC_ST_UTIL.GET_ERROR_MESSAGE
                      (p_app_short_name    => 'MSC',
                       p_error_code        => 'MSC_PP_INVALID_VALUE',
                       p_message_text      => lv_message_text,
                       p_error_text        => lv_error_text,
                       p_token1            => 'COLUMN_NAME',
                       p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Derive organization id
    lv_return :=  MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_SYSTEM_ITEMS',
                      p_org_partner_name  => 'ORGANIZATION_CODE',
                      p_org_partner_id    => 'ORGANIZATION_ID',
                      p_instance_code     => v_instance_code,
                      p_partner_type      => G_ORGANIZATION,
                      p_severity          => G_SEV_ERROR,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_debug             => v_debug,
                      p_message_text      => lv_message_text);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

   --Update sr_inventory_item_id if already exists
    v_sql_stmt := 08;
    lv_sql_stmt :=
    'UPDATE msc_st_system_items msi'
    ||' SET sr_inventory_item_id = (SELECT local_id'
    ||'     FROM   msc_local_id_item mli'
    ||'     WHERE  mli.char1         = msi.sr_instance_code '
    ||'     AND    NVL(mli.char2,       '||''''||NULL_CHAR||''''||')='
    ||'            NVL(msi.company_name,'||''''||NULL_CHAR||''''||')'
    ||'     AND    mli.char4         = msi.item_name'
    ||'     AND    mli.entity_name   = ''SR_INVENTORY_ITEM_ID'' '
    ||'     AND    mli.instance_id   = :v_instance_id'
    ||'     AND    rownum            < 2)'
    ||' WHERE  sr_instance_code      = :v_instance_code'
    ||' AND    batch_id              = :lv_batch_id'
    ||' AND    process_flag          = '||G_IN_PROCESS;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING      v_instance_id,
                       v_instance_code,
                      lv_batch_id;

---- Changes for SRP legacy collections -----

   --	Set the error message
	lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PREPOSITION_POINT');


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     --Valid values for Preposition_point are Y and N

     v_sql_stmt := 101;
     lv_sql_stmt :=
      ' UPDATE   msc_st_system_items '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    preposition_point  not in(''Y'',''N'')'
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         = :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


    EXECUTE IMMEDIATE   lv_sql_stmt
            USING       lv_batch_id,
                        v_instance_code;

  --	Set the error message
	lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'REPAIR_PROGRAM');



      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     --Valid values for repair_program are (1,2,3))

     v_sql_stmt := 102;
     lv_sql_stmt :=
      ' UPDATE   MSC_ST_SYSTEM_ITEMS '
        ||' SET      process_flag     = '||G_ERROR_FLG||','
    	  ||'          error_text       = '||''''||lv_message_text||''''
    	  ||' WHERE    REPAIR_PROGRAM  not in(1,2,3)'
     	  ||' AND      process_flag     = '||G_IN_PROCESS
    	  ||' AND      batch_id         = :lv_batch_id'
        ||' AND      sr_instance_code = :v_instance_code';



         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE   lv_sql_stmt
            USING       lv_batch_id,
                        v_instance_code;


  IF (v_install_msc) THEN

    -- Now check for UOM code if it is Invalid error out
    -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE ,UOM_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_UNITS_OF_MEASURE',
                      p_token3            => 'CHILD_TABLE',
                      p_token_value3      => 'MSC_ST_SYSTEM_ITEMS');
    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    v_sql_stmt := 09;

    lv_sql_stmt :=
    '   UPDATE      msc_st_system_items mssi'
    ||' SET         process_flag = '||G_ERROR_FLG||','
    ||'             error_text   = '||''''||lv_message_text||''''
    ||' WHERE       NOT EXISTS (SELECT 1 '
    ||'             FROM msc_units_of_measure muom'
    ||'             WHERE muom.uom_code       = mssi.uom_code'
    ||'             UNION'
    ||'             SELECT 1 FROM msc_st_units_of_measure msuom'
    ||'             WHERE msuom.uom_code       = mssi.uom_code'
    ||'             AND   msuom.sr_instance_id = :v_instance_id'
    ||'             AND   msuom.process_flag   = '||G_VALID||')'
    ||' AND mssi.sr_instance_code   = :v_instance_code'
    ||' AND mssi.batch_id           = :lv_batch_id'
    ||' AND mssi.process_flag       = '||G_IN_PROCESS ;


          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_id,
                      v_instance_code,
                      lv_batch_id;

    -- Set the message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE OR VOLUME_UOM',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_UNITS_OF_MEASURE',
                      p_token3            => 'CHILD_TABLE',
                      p_token_value3      => 'MSC_ST_SYSTEM_ITEMS');
    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    -- Validate volume uom if provided
    v_sql_stmt := 10;

    lv_sql_stmt :=
    '   UPDATE     msc_st_system_items mssi'
    ||' SET        process_flag = '||G_ERROR_FLG||','
    ||'            error_text   = '||''''||lv_message_text||''''
    ||' WHERE      NOT EXISTS( SELECT 1 '
    ||'            FROM    msc_units_of_measure muom'
    ||'            WHERE   muom.uom_code       = mssi.volume_uom'
    ||'            UNION'
    ||'            SELECT 1 '
    ||'            FROM   msc_st_units_of_measure msuom'
    ||'            WHERE  msuom.uom_code       = mssi.volume_uom'
    ||'            AND    msuom.sr_instance_id = :v_instance_id'
    ||'            AND    msuom.process_flag   = '||G_VALID||')'
    ||' AND  NVL(mssi.volume_uom,'||''''||NULL_CHAR||''''||') '
    ||'                       <> '||''''||NULL_CHAR||''''
    ||' AND mssi.sr_instance_code   = :v_instance_code'
    ||' AND mssi.batch_id           = :lv_batch_id'
    ||' AND mssi.process_flag       = '||G_IN_PROCESS ;


          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_id,
                      v_instance_code,
                      lv_batch_id;

    -- Set the message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE OR WEIGHT_UOM',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_UNITS_OF_MEASURE',
                      p_token3            => 'CHILD_TABLE',
                      p_token_value3      => 'MSC_ST_SYSTEM_ITEMS');
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Validate weight uom if provided

    v_sql_stmt := 12;

    lv_sql_stmt :=
    '   UPDATE     msc_st_system_items mssi'
    ||' SET        process_flag = '||G_ERROR_FLG||','
    ||'            error_text   = '||''''||lv_message_text||''''
    ||' WHERE      NOT EXISTS( SELECT 1 '
    ||'            FROM   msc_units_of_measure muom'
    ||'            WHERE  muom.uom_code       = mssi.weight_uom'
    ||'            UNION'
    ||'            SELECT 1 FROM msc_st_units_of_measure msuom'
    ||'            WHERE  msuom.uom_code       = mssi.weight_uom'
    ||'            AND    msuom.sr_instance_id = :v_instance_id'
    ||'            AND    msuom.process_flag   = '||G_VALID||')'
    ||' AND NVL(mssi.weight_uom,'||''''||NULL_CHAR||''''||') '
    ||'     <> '||''''||NULL_CHAR||''''
    ||' AND mssi.sr_instance_code   = :v_instance_code'
    ||' AND mssi.batch_id           = :lv_batch_id'
    ||' AND mssi.process_flag       = '||G_IN_PROCESS ;


          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,
                        v_instance_code,
                        lv_batch_id;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SOURCE_ORG_CODE');


    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;

    -- Update Source org id

    lv_return :=
     MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name     => 'MSC_ST_SYSTEM_ITEMS',
                                    p_org_partner_name  =>'SOURCE_ORG_CODE',
                                    p_org_partner_id    =>'SOURCE_ORG_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_ORGANIZATION,
                                    p_severity          => G_SEV3_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_batch_id          =>lv_batch_id,
                                    p_debug             => v_debug,
                                    p_error_text        =>lv_error_text);
    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PRIMARY_SUPPLIER_NAME');


    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;

    -- Update primary_supplier_name

    lv_return :=
     MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name     => 'MSC_ST_SYSTEM_ITEMS',
                                    p_org_partner_name  =>'PRIMARY_SUPPLIER_NAME',
                                    p_org_partner_id    =>'PRIMARY_SUPPLIER_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_VENDOR,
                                    p_severity          => G_SEV3_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_batch_id          =>lv_batch_id,
                                    p_debug             => v_debug,
                                    p_error_text        =>lv_error_text);
    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;

      -- Set the message

     lv_return :=  MSC_ST_UTIL.GET_ERROR_MESSAGE
                      (p_app_short_name    => 'MSC',
                       p_error_code        => 'MSC_PP_INVALID_VALUE',
                       p_message_text      => lv_message_text,
                       p_error_text        => lv_error_text,
                       p_token1            => 'COLUMN_NAME',
                       p_token_value1      => 'ATP_FLAG and MRP_PLANNING_CODE'
                                               ||' and ATP_COMPONENTS_FLAG');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- ERP collection does not handle
    -- Error out the record where atp_flag or atp_components_flag is N and
    -- MRP_PLANNING_CODE is 6 (not planned)

     v_sql_stmt := 13;

     lv_sql_stmt :=
      ' UPDATE  msc_st_system_items '
      ||' SET   process_flag        = '||G_ERROR_FLG||','
      ||'       error_text          = '||''''||lv_message_text||''''
      ||' WHERE mrp_planning_code = 6 '
      ||' AND   atp_flag = ''N'' '
      ||' AND   atp_components_flag = ''N'' '
      ||' AND   pick_components_flag <> ''Y'' '
      ||' AND   bom_item_type        <> 3 '
      ||' AND   batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND   sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


    END IF ; --v_install_msc

    --Call to customised validation.

      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_SYSTEM_ITEMS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;
/**** Transfering this piece of code to the Monitor -- bug fix 2191021
  IF(v_install_msc) THEN
    -- update ABC_CLASS_ID where it exists in the planning system
     v_sql_stmt := 14;
     lv_sql_stmt :=
      ' UPDATE  msc_st_system_items msi'
      ||' SET   abc_class_id        = (SELECT local_id from MSC_LOCAL_ID_MISC mac '
      ||'                              WHERE  mac.char1 = msi.sr_instance_code'
      ||'                              AND    mac.char3  = msi.organization_code  '
      ||'                              AND    mac.char4 = msi.abc_class_name '
      ||'                              AND    mac.ENTITY_NAME = ''ABC_CLASS_ID'''
      ||'                              AND    NVL(mac.char2,'||''''||NULL_CHAR||''''||') '
      ||'                                     =    NVL(msi.company_name,'||''''||NULL_CHAR||''''||')) '
      ||' WHERE batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND   sr_instance_code = :v_instance_code'
      ||' AND   abc_class_name is not null ';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

     OPEN c3(lv_batch_id);
     FETCH c3 BULK COLLECT INTO lb_rowid_abc ;

     IF c3%ROWCOUNT > 0  THEN

        FORALL j IN lb_rowid_abc.FIRST..lb_rowid_abc.LAST
        UPDATE msc_st_system_items msi
        SET    abc_class_id   = MSC_ST_ABC_CLASS_ID_S.nextval
        WHERE  rowid   = lb_rowid_abc(j);


       FORALL j IN lb_rowid_abc.FIRST..lb_rowid_abc.LAST
       INSERT INTO  msc_local_id_misc
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char3,
       char4,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
       SELECT
       abc_class_id,
       st_transaction_id,
       v_instance_id,
       'ABC_CLASS_ID',
       data_source_type,
       sr_instance_code,
       company_name,
       organization_code,
       ABC_CLASS_NAME,
       v_current_date,
       v_current_user,
       v_current_date,
       v_current_user
      FROM msc_st_system_items
      WHERE  rowid            = lb_rowid_abc(j);

     END IF;
   CLOSE c3;

     -- update ABC_CLASS_ID for ABC_CLASS_NAME for which we have just populated the local id
     v_sql_stmt := 15;
     lv_sql_stmt :=
      ' UPDATE  msc_st_system_items msi'
      ||' SET   abc_class_id        = (SELECT local_id from MSC_LOCAL_ID_MISC mac '
      ||'                              WHERE  mac.char1 = msi.sr_instance_code'
      ||'                              AND    mac.char3  = msi.organization_code  '
      ||'                              AND    mac.char4 = msi.abc_class_name '
      ||'                              AND    mac.ENTITY_NAME = ''ABC_CLASS_ID'''
      ||'                              AND    NVL(mac.char2,'||''''||NULL_CHAR||''''||') '
      ||'                                     =    NVL(msi.company_name,'||''''||NULL_CHAR||''''||')) '
      ||' WHERE batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND   sr_instance_code = :v_instance_code'
      ||' AND   abc_class_id  IS NULL'
      ||' AND   abc_class_name is not null ';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

     v_sql_stmt := 16;
     lv_sql_stmt :=
       ' INSERT INTO MSC_ABC_CLASSES '
       ||' ( ABC_CLASS_ID, '
       ||' ABC_CLASS_NAME, '
       ||' ORGANIZATION_ID, '
       ||' SR_INSTANCE_ID, '
       ||' LAST_UPDATE_DATE, '
       ||' LAST_UPDATED_BY, '
       ||' CREATION_DATE, '
       ||' CREATED_BY) '
       ||' SELECT distinct '
       ||' msi.abc_class_id,'
       ||' msi.abc_class_name,'
       ||' msi.organization_id,'
       ||  v_instance_id ||','
       ||' last_update_date,'
       ||' last_updated_by,'
       ||' creation_date,'
       ||' created_by '
       ||' FROM   MSC_ST_SYSTEM_ITEMS msi'
       ||' WHERE  batch_id         = :lv_batch_id'
       ||' AND    sr_instance_code = :v_instance_code'
       ||' AND    process_flag    = '||G_IN_PROCESS
       ||' AND    msi.abc_class_id is not null'
       ||' AND    msi.abc_class_name is not null'
       ||' AND    NOT EXISTS'
       ||'        ( SELECT 1 FROM MSC_ABC_CLASSES abc'
       ||'        WHERE  abc.abc_class_id = msi.abc_class_id'
       ||'        AND    abc.abc_class_name = msi.abc_class_name'
       ||'        AND    abc.organization_id = msi.organization_id'
       ||'        AND    abc.sr_instance_id = ' ||v_instance_id ||')';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;
  END IF; --v_install_msc

*******************/
     OPEN c2(lv_batch_id);
     FETCH c2 BULK COLLECT INTO lb_rowid ;

       IF c2%ROWCOUNT > 0  THEN

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_system_items
        SET    sr_inventory_item_id   = msc_st_sr_inventory_item_id_s.NEXTVAL
        WHERE  rowid                  = lb_rowid(j);

    v_sql_stmt := 10;

     FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
   INSERT INTO  msc_local_id_item
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char3,
       char4,
       SOURCE_SR_INVENTORY_ITEM_ID,
       SOURCE_SOURCE_ORG_ID,
       SOURCE_PRIMARY_SUPPLIER_ID,
       SOURCE_BASE_ITEM_ID,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
       SELECT
       sr_inventory_item_id,
       st_transaction_id,
       v_instance_id,
       'SR_INVENTORY_ITEM_ID',
       data_source_type,
       sr_instance_code,
       company_name,
       organization_code,
       item_name,
       SOURCE_SR_INVENTORY_ITEM_ID,
       SOURCE_SOURCE_ORG_ID,
       SOURCE_PRIMARY_SUPPLIER_ID,
       SOURCE_BASE_ITEM_ID,
       v_current_date,
       v_current_user,
       v_current_date,
       v_current_user
      FROM msc_st_system_items
      WHERE  rowid            = lb_rowid(j);

   END IF;
   CLOSE c2;

    v_sql_stmt := 17;
    lv_sql_stmt :=
    'UPDATE msc_st_system_items msi'
    ||' SET sr_inventory_item_id = (SELECT local_id'
    ||'     FROM   msc_local_id_item mli'
    ||'     WHERE  mli.char1         = msi.sr_instance_code '
    ||'     AND    NVL(mli.char2,       '||''''||NULL_CHAR||''''||')='
    ||'            NVL(msi.company_name,'||''''||NULL_CHAR||''''||')'
    ||'     AND    mli.char4         = msi.item_name'
    ||'     AND    mli.entity_name   = ''SR_INVENTORY_ITEM_ID'' '
    ||'     AND    mli.instance_id   = :v_instance_id'
    ||'     AND    rownum            < 2 )'
    ||' WHERE  sr_inventory_item_id IS NULL'
    ||' AND    sr_instance_code      = :v_instance_code'
    ||' AND    batch_id              = :lv_batch_id'
    ||' AND    process_flag          = '||G_IN_PROCESS;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING      v_instance_id,
                       v_instance_code,
                      lv_batch_id;

    v_sql_stmt := 18;
    lv_sql_stmt :=
    'INSERT INTO  msc_local_id_item '
    ||' (local_id,'
    ||' st_transaction_id,'
    ||' instance_id,'
    ||' entity_name,'
    ||' data_source_type,'
    ||' char1,'
    ||' char2,'
    ||' char3,'
    ||' char4,'
    ||' SOURCE_SR_INVENTORY_ITEM_ID,'
    ||' SOURCE_SOURCE_ORG_ID,'
    ||' SOURCE_PRIMARY_SUPPLIER_ID,'
    ||' SOURCE_BASE_ITEM_ID,'
    ||' last_update_date,'
    ||' last_updated_by,'
    ||' creation_date,'
    ||' created_by  )'
    ||' SELECT '
    ||' sr_inventory_item_id,'
    ||' st_transaction_id,'
    ||  v_instance_id||','
    ||' ''SR_INVENTORY_ITEM_ID'','
    ||' data_source_type,'
    ||' sr_instance_code,'
    ||' company_name,'
    ||' organization_code,'
    ||' item_name,'
    ||' SOURCE_SR_INVENTORY_ITEM_ID,'
    ||' SOURCE_SOURCE_ORG_ID,'
    ||' SOURCE_PRIMARY_SUPPLIER_ID,'
    ||' SOURCE_BASE_ITEM_ID,'
    ||' last_update_date,'
    ||' last_updated_by,'
    ||' creation_date,'
    ||' created_by '
    ||' FROM  msc_st_system_items'
    ||' WHERE NOT EXISTS( SELECT 1'
    ||'       FROM   msc_local_id_item'
    ||'       WHERE  char1         = sr_instance_code '
    ||'       AND    NVL(char2,       '||''''||NULL_CHAR||''''||')='
    ||'              NVL(company_name,'||''''||NULL_CHAR||''''||')'
    ||'       AND    char3          = organization_code'
    ||'       AND    char4          = item_name'
    ||'       AND    entity_name    = ''SR_INVENTORY_ITEM_ID'' )'
    ||' AND   sr_instance_code      = :v_instance_code'
    ||' AND   batch_id              = :lv_batch_id'
    ||' AND   process_flag          = '||G_IN_PROCESS;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code,
                      lv_batch_id;

   IF(v_install_msc) THEN
      -- Set the message

   /*  lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'BASE_ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Poplulate base item id
     lv_return :=
     MSC_ST_UTIL.DERIVE_ITEM_ID(p_table_name => 'MSC_ST_SYSTEM_ITEMS',
                             p_item_col_name => 'BASE_ITEM_NAME',
                             p_item_col_id   =>'BASE_ITEM_ID',
                             p_instance_code => v_instance_code,
                             p_instance_id   => v_instance_id,
                             p_severity      => G_SEV3_ERROR,
                             p_message_text  => lv_message_text,
                             p_batch_id      =>lv_batch_id,
                             p_debug          => v_debug,
                             p_error_text    =>lv_error_text);


    if(lv_return <> 0) then
         RAISE ex_logging_err;
    end if; */

   COMMIT;

    -- Set the message

    lv_return :=    MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Check DELETE_FLAG column has valid value or not and
    -- if not set it to SYS_NO

    lv_where_str :=
    ' AND NVL(deleted_flag,'||NULL_VALUE||') <>'||SYS_NO;

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DELETED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => SYS_NO);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;



    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'LOT_CONTROL_CODE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_LOT_CONTROL_CODE  );

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Valid value for Lot control code is 1,2  default it to 2

    lv_where_str :=
    '   AND   NVL(lot_control_code,'||NULL_VALUE||')'
    ||' NOT IN (1,2)';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'LOT_CONTROL_CODE',
                     p_debug             => v_debug,
                     p_default_value     => G_LOT_CONTROL_CODE);

    IF lv_return <> 0 THEN
         RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ROUNDING_CONTROL_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => G_ROUNDING_CONTROL_TYPE );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Valid value for rounding_control_type  is 1,2  default it to 2

    lv_where_str :=
    '   AND NVL(rounding_control_type,'||NULL_VALUE||')'
    ||' NOT IN (1,2)';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'ROUNDING_CONTROL_TYPE',
                     p_debug             => v_debug,
                     p_default_value     => G_ROUNDING_CONTROL_TYPE);

     IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'IN_SOURCE_PLAN',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => G_IN_SOURCE_PLAN );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Valid value for in_source_plan  is 1,2  default it to 2

    lv_where_str :=
    '   AND NVL(in_source_plan,'||NULL_VALUE||')'
    ||' NOT IN (1,2)';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'IN_SOURCE_PLAN',
                     p_debug             => v_debug,
                     p_default_value     => G_IN_SOURCE_PLAN);

     IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'MRP_PLANNING_CODE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => G_MRP_PLANNING_CODE );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Valid value for mrp_planning_code are (3,4,6,7,8,9),default it to 7

    lv_where_str :=
    '   AND NVL(mrp_planning_code,'||NULL_VALUE||')'
    ||' NOT IN (3,4,6,7,8,9)';


    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'mrp_planning_code',
                     p_debug             => v_debug,
                     p_default_value     => G_MRP_PLANNING_CODE);

    IF lv_return <> 0 THEN
         RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'MRP_CALCULATE_ATP_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => G_MRP_CALCULATE_ATP_FLAG );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Valid value for mrp_calculate_atp_flag are (1,2),default it to 2

    lv_where_str :=
    '   AND NVL(mrp_calculate_atp_flag,'||NULL_VALUE||')'
    ||' NOT IN (1,2)';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'MRP_CALCULATE_ATP_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => G_MRP_CALCULATE_ATP_FLAG);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ATP_COMPONENTS_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_ATP_COMPONENTS_FLAG );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Valid value for atp_components_flag are (Y,N),default it to 2

    lv_where_str :=
    '    AND NVL(atp_components_flag  ,'||''''||NULL_CHAR||''''||')'
    ||'  NOT IN (''Y'', ''N'')';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'ATP_COMPONENTS_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => '''N''');

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'BUILT_IN_WIP_FLAG',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     => G_BUILT_IN_WIP_FLAG );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Valid value for built_in_wip_flag are (1,2),default it to 1

    lv_where_str :=
    ' AND NVL(built_in_wip_flag ,'||NULL_VALUE||') NOT IN (1,2)';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'BUILT_IN_WIP_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => G_BUILT_IN_WIP_FLAG);

     IF lv_return <> 0 THEN
        RAISE ex_logging_err;
     END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PURCHASING_ENABLED_FLAG',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     => G_PURCHASING_ENABLED_FLAG );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Valid value for purchasing_enabled_flag are (1,2),default it to 2

    lv_where_str :=
    ' AND NVL(purchasing_enabled_flag,'||NULL_VALUE||') NOT IN (1,2) ';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'PURCHASING_ENABLED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => G_PURCHASING_ENABLED_FLAG);

    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PLANNING_MAKE_BUY_CODE',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     => G_PLANNING_MAKE_BUY_CODE );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


  -- Valid value for planning_make_buy_code are (1,2),default it to 2

    lv_where_str :=
    ' AND NVL(planning_make_buy_code,'||NULL_VALUE||') NOT IN (1,2)';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'PLANNING_MAKE_BUY_CODE',
                     p_debug             => v_debug,
                     p_default_value     => G_PLANNING_MAKE_BUY_CODE );

    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'INVENTORY_PLANNING_CODE',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     => G_INVENTORY_PLANNING_CODE );

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Valid value for inventory_planning_code are (1,2,6),default it to 6

    lv_where_str :=
    ' AND NVL(inventory_planning_code,'||NULL_VALUE||') NOT IN (1,2,6)';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'INVENTORY_PLANNING_CODE',
                     p_debug             => v_debug,
                     p_default_value     => G_INVENTORY_PLANNING_CODE);

    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'REPETITIVE_TYPE',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     => G_REPETITIVE_TYPE);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  -- Repetiitve type always default to 1

   lv_where_str :=
   ' AND NVL(repetitive_type,'||NULL_VALUE||') NOT IN (1,2)';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'repetitive_type',
                     p_debug             => v_debug,
                     p_default_value     => G_REPETITIVE_TYPE);

    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ENGINEERING_ITEM_FLAG',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     => G_ENGINEERING_ITEM_FLAG);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Valid value for engineering_item_flag are (1,2),default it to 2
    lv_where_str :=
    ' AND NVL(engineering_item_flag ,'||NULL_VALUE||') NOT IN (1,2)';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'ENGINEERING_ITEM_FLAG' ,
                     p_debug             => v_debug,
                     p_default_value     => G_ENGINEERING_ITEM_FLAG);

    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'MRP_SAFETY_STOCK_CODE',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     => 1);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    --   Valid value for mrp_safety_stock_code are (1,2),default it based on
    --   whether mrp_safety_stock_percent is NULL or Not

    lv_where_str :=
    '   AND NVL(mrp_safety_stock_code,'||NULL_VALUE||') <>'||' 1 AND'
    ||' NVL(mrp_safety_stock_percent,'||NULL_VALUE||')='||NULL_VALUE;

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'mrp_safety_stock_code' ,
                     p_debug             => v_debug,
                     p_default_value     => 1);

    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'MRP_SAFETY_STOCK_CODE',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     => 2);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    --   Valid value for mrp_safety_stock_code are (1,2),default it based on
    --   whether mrp_safety_stock_percent is NULL or Not

    lv_where_str :=
    '   AND NVL(mrp_safety_stock_code,'||NULL_VALUE||') <>'||' 2 AND'
    ||' NVL(mrp_safety_stock_percent,'||NULL_VALUE||')<>'||NULL_VALUE;

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'mrp_safety_stock_code' ,
                     p_debug             => v_debug,
                     p_default_value     => 1);

    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ATP_FLAG',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  G_ATP_FLAG);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Valid value for atp_flag are (Y,N,C),default it to N

    lv_where_str :=
    ' AND NVL(atp_flag  ,'||''''||NULL_CHAR||''''||')'
    ||'  NOT IN (''Y'', ''N'', ''C'')';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'ATP_FLAG' ,
                     p_debug             => v_debug,
                     p_default_value     => '''N''');

    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'INVENTORY_ASSET_FLAG',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  G_INVENTORY_ASSET_FLAG);

     IF lv_return <> 0 THEN
        RAISE ex_logging_err;
     END IF;

    -- Valid value for inventory_asset_flag are (Y,N),default it to N

    lv_where_str :=
    ' AND NVL(inventory_asset_flag,'||''''||NULL_CHAR||''''||')'
    ||' NOT IN (''Y'', ''N'')';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'INVENTORY_ASSET_FLAG' ,
                     p_debug             => v_debug,
                     p_default_value     => '''Y''');

    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'END_ASSEMBLY_PEGGING_FLAG',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  G_END_ASSEMBLY_PEGGING_FLAG);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


  --      Valid value for end_assembly_pegging_flag are
  --      ('A','B','I','N','X','Y'),default it to N

    lv_where_str :=
    ' AND end_assembly_pegging_flag NOT IN (''A'',''B'',''X'',''I'',''N'',''Y'')';
    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'END_ASSEMBLY_PEGGING_FLAG' ,
                     p_debug             => v_debug,
                     p_default_value     => '''N''');

    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'WIP_SUPPLY_TYPE',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  G_WIP_SUPPLY_TYPE);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


   -- Valid value for wip_supply_type are (1,2,3,4,5,6,7),default it to 1

    lv_where_str := ' AND NVL(wip_supply_type,'||NULL_VALUE||') NOT IN (1,2,3,4,5,6,7) ';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'WIP_SUPPLY_TYPE' ,
                     p_debug             => v_debug,
                     p_default_value     => G_WIP_SUPPLY_TYPE);

    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ATO_FORECAST_CONTROL',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  G_ATO_FORECAST_CONTROL);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default ato_forecast_control to 3 if NOT IN (1,2,3)

    lv_where_str := ' AND ato_forecast_control NOT IN (1,2,3) ';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'ATO_FORECAST_CONTROL' ,
                     p_debug             => v_debug,
                     p_default_value     => G_ATO_FORECAST_CONTROL);

    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'INVENTORY_ITEM_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_INVENTORY_ITEM_FLAG);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default inventory_item_flag  to 1 if NOT IN (1,2)

    lv_where_str := ' AND inventory_item_flag NOT IN (1,2) ';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'INVENTORY_ITEM_FLAG' ,
                     p_debug             => v_debug,
                     p_default_value     => G_INVENTORY_ITEM_FLAG);

    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'INVENTORY_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_INVENTORY_TYPE);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default inventory_item_flag  to 1 if NOT IN (1,2)

    lv_where_str := ' AND inventory_type NOT IN (1,2,3,4,5,6,7,8) ';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'INVENTORY_TYPE' ,
                     p_debug             => v_debug,
                     p_default_value     => G_INVENTORY_TYPE);

    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;
  END IF ; --v_install_msc
    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'BOM_ITEM_TYPE',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  G_BOM_ITEM_TYPE);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default BOM Item Type to 4 if NOT IN (1,2,3,4,5)

    lv_where_str := ' AND bom_item_type NOT IN (1,2,3,4,5) ';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'bom_item_type' ,
                     p_debug             => v_debug,
                     p_default_value     => G_BOM_ITEM_TYPE);

    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;


  -- Set the error message for DRP_PLANNED flag
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DRP_PLANNED',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => G_DRP_PLANNED);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Valid value for drp_planned is 1,2  default it to 2

    lv_where_str :=
    '   AND NVL(drp_planned,'||NULL_VALUE||')'
    ||' NOT IN (1,2)';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DRP_PLANNED',
                     p_debug             => v_debug,
                     p_default_value     => G_DRP_PLANNED);

     IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;


-- Set the error message for SERIAL_NUMBER_CONTROL_CODE

    lv_return := MSC_ST_util.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SERIAL_NUMBER_CONTROL_CODE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_SERIAL_NUMBER_CONTROL_CODE  );

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Valid values for SERIAL_NUMBER_CONTROL_CODE are 1,2  default it to 2

    lv_where_str :=
    '   AND   NVL(SERIAL_NUMBER_CONTROL_CODE,2)'
    ||' NOT IN (1,2)';

    lv_return := MSC_ST_util.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SYSTEM_ITEMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'SERIAL_NUMBER_CONTROL_CODE',
                     p_debug             => v_debug,
                     p_default_value     => G_SERIAL_NUMBER_CONTROL_CODE);

    IF lv_return <> 0 THEN
         RAISE ex_logging_err;
    END IF;

    -- If the Serial Number Validation is enabled.
    IF NVL(FND_PROFILE.VALUE('MSC_DEFAULT_SERIAL_CONTROL'),'Y') ='Y' THEN

    -- Assumes the org_id,inventory_item_id and sr_instance_id is derrived by now.
    -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_SERIAL_FLAG_NOT_CHANGED',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Error out record if supply/demand daa exists and serial_number_control_code flag is being set to no(2)

     v_sql_stmt := 100;

     lv_sql_stmt :=
      ' UPDATE  msc_st_system_items mssi '
      ||' SET   process_flag        = '||G_ERROR_FLG||','
      ||'       error_text          = '||''''||lv_message_text||''''
      ||' WHERE nvl(serial_number_control_code,2) = 2 '
      ||' AND   EXISTS (SELECT serial_number_control_code
                         FROM msc_system_items msi,
                              msc_item_id_lid miil,
                              msc_apps_instances mai
                        WHERE msi.plan_id = -1
                          AND msi.organization_id   = mssi.organization_id
                          AND msi.sr_instance_id    = mai.instance_id
                          AND msi.inventory_item_id = miil.inventory_item_id
                          AND miil.sr_instance_id   = mai.instance_id
                          AND mai.instance_code     = mssi.sr_instance_code
                          AND miil.sr_inventory_item_id = mssi.sr_inventory_item_id
                          AND msi.serial_number_control_code = 1
                      )'
      ||' AND   EXISTS (SELECT msn.serial_txn_id
                         FROM msc_serial_numbers msn,
                              msc_sup_dem_entries msde,
                              msc_trading_partner_maps mtpm,
                              msc_trading_partners mtp,
                              msc_item_id_lid miil,
                              msc_apps_instances mai
                        WHERE msde.inventory_item_id = miil.inventory_item_id
                          AND miil.sr_inventory_item_id = mssi.sr_inventory_item_id
                          AND miil.sr_instance_id = mai.instance_id
                          AND mai.instance_code     = mssi.sr_instance_code
                          AND msde.plan_id = -1
                          AND msde.publisher_site_id = mtpm.company_key
                          AND mtpm.map_type = 2
                          AND mtpm.tp_key = mtp.partner_id
                          AND mtp.partner_type = 3
                          AND mtp.sr_tp_id = mssi.organization_id
                          AND mtp.sr_instance_id = mai.instance_id
                          AND msde.transaction_id = msn.serial_txn_id
                          AND NVL(msn.disable_date,sysdate+1)>sysdate
                       )'
      ||' AND   batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND   sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;
      END IF;



  /* Bug 2172537 , do not prefix instance code before org code
     --Concatenating organization_code with instance_code
   v_sql_stmt := 19;
   lv_sql_stmt:=
   'UPDATE   msc_st_system_items '
      ||' SET      organization_code= sr_instance_code'||'||'':''||'||'organization_code'
      ||' WHERE    process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code; */

/*** Setting the process_flag to valid in LOAD_ITEM_ABC_CLASSES -- fix for the bug 2191021
    -- Set the process flag as Valid and populate instance_id */

    lv_return :=
    MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name   => 'MSC_ST_SYSTEM_ITEMS',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug,
                               p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      END IF;


    -- At the end calling  the LOG_ERROR for logging all errored out records

   lv_return :=
   MSC_ST_UTIL.LOG_ERROR(p_table_name    =>'MSC_ST_SYSTEM_ITEMS',
                         p_instance_code =>v_instance_code,
                         p_row           =>lv_column_names,
                         p_severity      =>G_SEV_ERROR,
                         p_message_text  =>NULL,
                         p_error_text    =>lv_error_text,
                         p_debug         => v_debug,
                         p_batch_id      => lv_batch_id  );

  IF(lv_return <> 0) THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
  END IF;
   COMMIT;


  IF c_lock%ISOPEN THEN
    CLOSE c_lock;
  END IF;

      -- ODP change
      -- Call the procedure to insert all items into the msd_st_level_values
      IF(v_install_msd) THEN
        lv_sql_stmt := ' DECLARE errbuf varchar2(250);'
                 ||' retcode  number ;'
                 ||' BEGIN '
                 ||' MSD_CL_PRE_PROCESS.LOAD_ITEMS'
                 ||' (ERRBUF         =>  errbuf ,'
                 ||'  RETCODE        =>  retcode ,'
                 ||'  p_instance_id => :v_instance_id,'
                 ||'  p_batch_id    => :lv_batch_id);'
                 ||'  IF ( retcode = '||G_WARNING||') THEN'
                 ||'  MSC_CL_PRE_PROCESS.v_flag := '||SYS_YES||';'
                 ||'  END IF;'
                 ||'  END ;';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
        EXECUTE IMMEDIATE lv_sql_stmt
                USING     v_instance_id,
                          lv_batch_id ;
      END IF ;
    COMMIT;


  EXCEPTION
    WHEN too_many_rows THEN
      lv_error_text := substr('MSC_CL_PRE_PROCESS.LOAD_ITEMS'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;
      IF c_lock%ISOPEN THEN
        CLOSE c_lock;
      END IF;
    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;
      IF c_lock%ISOPEN THEN
        CLOSE c_lock;
      END IF;
    WHEN OTHERS THEN
      lv_error_text :=substr('MSC_CL_PRE_PROCESS.LOAD_ITEMS'||'('
                      ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;
      IF c_lock%ISOPEN THEN
        CLOSE c_lock;
      END IF;
  END LOAD_ITEMS;


  /*===========================================================================+
  | DESCRIPTION  : This procedure validates the data in MSC_ST_ITEM_SUBSTITUTES|
  |                table and derives the id's from the local id's table.       |
  +===========================================================================*/
  PROCEDURE LOAD_ITEM_SUBSTITUTES IS

  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid              RowidTab;
  lv_return             NUMBER;
  lv_error_text         VARCHAR2(250);
  lv_where_str          VARCHAR2(5000);
  lv_sql_stmt           VARCHAR2(5000);
  lv_column_names       VARCHAR2(5000);          --stores concatenated column names
  lv_batch_id           msc_st_item_substitutes.batch_id%TYPE;
  lv_message_text       msc_errors.error_text%TYPE;

  ex_logging_err        EXCEPTION;

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_item_substitutes
    WHERE  process_flag     IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    batch_id         = p_batch_id
    AND    sr_instance_code = v_instance_code;

  BEGIN

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 01;
    lv_sql_stmt :=
    ' UPDATE   msc_st_item_substitutes msu1'
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  message_id <  (SELECT MAX(message_id)'
    ||'        FROM  msc_st_item_substitutes msu2'
    ||'        WHERE  msu2.sr_instance_code  = msu1.sr_instance_code'
    ||'        AND    NVL(msu2.RELATIONSHIP_TYPE,       '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msu1.RELATIONSHIP_TYPE,       '||''''||NULL_CHAR||''''||')'
    ||'        AND    msu2.ITEM_NAME = msu1.ITEM_NAME'
    ||'        AND    msu2.SUBSTITUTE_ITEM_NAME         = msu1.SUBSTITUTE_ITEM_NAME'
    ||'        AND    NVL(msu2.CUSTOMER_NAME,       '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msu1.CUSTOMER_NAME,       '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msu2.CUSTOMER_SITE_CODE,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msu1.CUSTOMER_SITE_CODE,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msu2.SUBSTITUTION_SET,    '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msu1.SUBSTITUTION_SET,    '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msu2.EFFECTIVE_DATE,sysdate) = NVL(msu1.EFFECTIVE_DATE,sysdate) '
    ||'        AND    NVL(msu2.DISABLE_DATE,sysdate)   = NVL(msu1.DISABLE_DATE,sysdate) '
    ||'        AND    NVL(msu2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msu1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'        AND   msu2.process_flag = msu1.process_flag'
    ||'        AND   NVL(msu2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND    msu1.process_flag     = '||G_IN_PROCESS
    ||' AND    msu1.sr_instance_code = :v_instance_code'
    ||' AND    NVL(msu1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    v_sql_stmt := 02;
    lv_sql_stmt :=
    ' UPDATE   msc_st_item_substitutes msu1'
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS( SELECT 1 '
    ||'        FROM   msc_st_item_substitutes msu2'
    ||'        WHERE  msu2.sr_instance_code  = msu1.sr_instance_code'
    ||'        AND    NVL(msu2.RELATIONSHIP_TYPE,       '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msu1.RELATIONSHIP_TYPE,       '||''''||NULL_CHAR||''''||')'
    ||'        AND    msu2.ITEM_NAME = msu1.ITEM_NAME'
    ||'        AND    msu2.SUBSTITUTE_ITEM_NAME         = msu1.SUBSTITUTE_ITEM_NAME'
    ||'        AND    NVL(msu2.CUSTOMER_NAME,       '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msu1.CUSTOMER_NAME,       '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msu2.CUSTOMER_SITE_CODE,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msu1.CUSTOMER_SITE_CODE,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msu2.SUBSTITUTION_SET,    '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msu1.SUBSTITUTION_SET,    '||''''||NULL_CHAR||''''||')'
    ||'        AND    NVL(msu2.EFFECTIVE_DATE,sysdate) = NVL(msu1.EFFECTIVE_DATE,sysdate) '
    ||'        AND    NVL(msu2.DISABLE_DATE,sysdate)   = NVL(msu1.DISABLE_DATE,sysdate) '
    ||'        AND    NVL(msu2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'               NVL(msu1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'        AND    msu2.process_flag = msu1.process_flag'
    ||'        AND    NVL(msu2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'        AND    msu2.rowid <> msu1.rowid)'
    ||' AND     msu1.process_flag     = '||G_IN_PROCESS
    ||' AND     msu1.sr_instance_code = :v_instance_code '
    ||' AND     NVL(msu1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_column_names :=
    'LOWER_ITEM_ID 	    		||''~''||'
    ||'HIGHER_ITEM_ID           	||''~''||'
    ||'HIGHEST_ITEM_ID       		||''~''||'
    ||'EFFECTIVE_DATE   		||''~''||'
    ||'DISABLE_DATE       		||''~''||'
    ||'RELATIONSHIP_TYPE     		||''~''||'
    ||'RECIPROCAL_FLAG     		||''~''||'
    ||'SUBSTITUTION_SET    		||''~''||'
    ||'PARTIAL_FULFILLMENT_FLAG         ||''~''||'
    ||'SUBSTITUTE_ITEM_NAME     	||''~''||'
    ||'ITEM_NAME      			||''~''||'
    ||'CUSTOMER_NAME        		||''~''||'
    ||'CUSTOMER_SITE_CODE     		||''~''||'
    ||'DELETED_FLAG ';

    LOOP
      v_sql_stmt := 03;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      ' UPDATE   msc_st_item_substitutes '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_item_substitutes
      SET  st_transaction_id = msc_st_item_substitute_s.NEXTVAL,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);

 /*     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_ITEM_SUBSTITUTES');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Deletion is not allowed for this entity.
      v_sql_stmt := 06;
      lv_sql_stmt :=
      ' UPDATE     msc_st_item_substitutes '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

*/

    -- RELATIONSHIP_TYPE default to 2

    lv_where_str :=    ' AND RELATIONSHIP_TYPE IS NULL';
    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'msc_st_item_substitutes',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'RELATIONSHIP_TYPE',
                     p_debug             => v_debug,
                     p_default_value     => G_RELATIONSHIP_TYPE);

    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'RECIPROCAL_FLAG');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Valid value for RECIPROCAL_FLAG  is 1 and 2

     v_sql_stmt := 99;
     lv_sql_stmt :=

        ' UPDATE   msc_st_item_substitutes '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    nvl(RECIPROCAL_FLAG,'||NULL_VALUE||')  not in(1,2)'
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         = :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE   lv_sql_stmt
            USING       lv_batch_id,
                        v_instance_code;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PARTIAL_FULFILLMENT_FLAG');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Valid value for PARTIAL_FULFILLMENT_FLAG  is 1,2

    v_sql_stmt := 98;
     lv_sql_stmt :=

        ' UPDATE   msc_st_item_substitutes '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    nvl(PARTIAL_FULFILLMENT_FLAG,'||NULL_VALUE||')  not in(1,2)'
      ||' AND      relationship_type = 2 '
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         = :lv_batch_id'
      ||' AND      sr_instance_code =  :v_instance_code';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE   lv_sql_stmt
            USING       lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Derive organization_id
      lv_return :=msc_st_util.derive_partner_org_id
                       (p_table_name        => 'MSC_ST_ITEM_SUBSTITUTES',
                        p_org_partner_name  => 'ORGANIZATION_CODE',
                        p_org_partner_id    => 'ORGANIZATION_ID',
                        p_instance_code     => v_instance_code,
                        p_partner_type      => G_ORGANIZATION,
                        p_error_text        => lv_error_text,
                        p_debug             => v_debug,
                        p_batch_id          => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CUSTOMER_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     lv_where_str :=   ' AND RELATIONSHIP_TYPE = 2';

    -- Derive sr_tp_id(Customer)
      lv_return :=msc_st_util.derive_partner_org_id
                       (p_table_name        => 'MSC_ST_ITEM_SUBSTITUTES',
                        p_org_partner_name  => 'CUSTOMER_NAME',
                        p_org_partner_id    => 'CUSTOMER_ID',
                        p_instance_code     => v_instance_code,
                        p_partner_type      => G_CUSTOMER,
                        p_error_text        => lv_error_text,
                        p_debug             => v_debug,
                        p_severity          => G_SEV3_ERROR,
                        p_message_text      => lv_message_text,
                        p_row               => lv_column_names,
                        p_batch_id          => lv_batch_id,
                        p_where_str         => lv_where_str);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CUSTOMER_SITE_CODE');

      lv_where_str :=   ' AND RELATIONSHIP_TYPE = 2';
    -- Derive sr_tp_site_id(Customer)
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                       (p_table_name        => 'MSC_ST_ITEM_SUBSTITUTES',
                        p_partner_name      => 'CUSTOMER_NAME',
                        p_partner_site_code => 'CUSTOMER_SITE_CODE',
                        p_partner_site_id   => 'CUSTOMER_SITE_ID',
                        p_instance_code     => v_instance_code,
                        p_partner_type      => G_CUSTOMER,
                        p_error_text        => lv_error_text,
                        p_batch_id          => lv_batch_id,
                        p_severity          => G_SEV3_ERROR,
                        p_debug             => v_debug,
                        p_row               => lv_column_names,
                        p_where_str         => lv_where_str);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --DERIVE LOWER_ITEM_ID

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ITEM_NAME');


   lv_return :=  MSC_ST_UTIL.DERIVE_ITEM_ID
                     (p_table_name =>'MSC_ST_ITEM_SUBSTITUTES',
                      p_item_col_name =>'ITEM_NAME',
                      p_item_col_id   =>'LOWER_ITEM_ID',
                      p_instance_code => v_instance_code,
                      p_instance_id   => v_instance_id,
                      p_batch_id      =>lv_batch_id,
                      p_debug         => v_debug,
                      p_severity      => G_SEV_ERROR,
                      p_message_text  =>lv_message_text,
                      p_error_text    =>lv_error_text,
                      p_row           => lv_column_names,
                      p_check_org        => FALSE);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;


    --DERIVE HIGHER_ITEM_ID

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SUBSTITUTE_ITEM_NAME');


   lv_return :=  MSC_ST_UTIL.DERIVE_ITEM_ID
                     (p_table_name =>'msc_st_item_substitutes',
                      p_item_col_name =>'SUBSTITUTE_ITEM_NAME',
                      p_item_col_id   =>'HIGHER_ITEM_ID',
                      p_instance_code => v_instance_code,
                      p_instance_id   => v_instance_id,
                      p_batch_id      =>lv_batch_id,
                      p_debug         => v_debug,
                      p_severity      => G_SEV_ERROR,
                      p_message_text  =>lv_message_text,
                      p_error_text    =>lv_error_text,
                      p_row           => lv_column_names,
                      p_check_org        => FALSE);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- SUBSTITUTION_SET always default to 'DEFAULT'

    lv_where_str :=
      ' AND NVL(SUBSTITUTION_SET,'||''''||NULL_CHAR||''''||') = '||''''||NULL_CHAR||'''';
    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'msc_st_item_substitutes',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'SUBSTITUTION_SET',
                     p_default_value     => '''DEFAULT''',
                     p_debug             => v_debug);

    IF lv_return <> 0 THEN
            RAISE ex_logging_err;
    END IF;

/* removed for SRP
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_UPDATION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_ITEM_SUBSTITUTES');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Updation is not allowed on this entity(this is done to make the
    --Post-Processor in sync with the collection program).

    v_sql_stmt := 09;
    lv_sql_stmt :=
    ' UPDATE   msc_st_item_substitutes mis1'
      ||' SET    process_flag     = '||G_ERROR_FLG||','
      ||'        error_text       = '||''''||lv_message_text||''''
      ||' WHERE  process_flag     = '||G_IN_PROCESS
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    sr_instance_code =  :v_instance_code'
      ||' AND    EXISTS'
      ||'        (SELECT 1 FROM msc_item_substitutes mis2'
      ||'        WHERE   mis2.higher_item_id        = mis1.higher_item_id'
      ||'        AND     mis2.lower_item_id         = mis1.lower_item_id'
      ||'        AND     nvl(mis2.customer_id, '||NULL_VALUE||') = nvl(mis1.customer_id,'||NULL_VALUE||')'
      ||'        AND     nvl(mis2.customer_site_id, '||NULL_VALUE||')  = nvl(mis1.customer_site_id,'||NULL_VALUE||')'
      ||'        AND     mis2.substitution_set      = mis1.substitution_set'
      ||'        AND     trunc(nvl(mis2.EFFECTIVE_DATE,SYSDATE+36500)) = trunc(nvl(mis1.EFFECTIVE_DATE, SYSDATE+36500))'
      ||'        AND     trunc(nvl(mis2.DISABLE_DATE, SYSDATE+36500))   = trunc(nvl(mis1.DISABLE_DATE, SYSDATE+36500))'
      ||'        AND     mis2.sr_instance_id        = ' ||v_instance_id ||')';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;
*/
------ Changes for SRP legacy collections

  ---set message
	lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'RELATIONSHIP_TYPE');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

-- check if relationship_type not in 2,5,8,18

    v_sql_stmt := 12;
	  lv_sql_stmt :=
	' UPDATE   msc_st_item_substitutes '
   	   ||' SET      process_flag     = '||G_ERROR_FLG||','
  	   ||'          error_text       = '||''''||lv_message_text||''''
     	 ||' WHERE   RELATIONSHIP_TYPE  not in(2,5,8,18)'
       ||' AND      process_flag     = '||G_IN_PROCESS
       ||' AND      batch_id         = :lv_batch_id'
       ||' AND      sr_instance_code =  :v_instance_code';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_ITEM_SUBSTITUTES',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Set the process flag as Valid and derive sr_instance_id

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_ITEM_SUBSTITUTES',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Inserting all the errored out records into MSC_ERRORS

      lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_ITEM_SUBSTITUTES',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_error_text        => lv_error_text,
                    p_message_text      => NULL,
                    p_batch_id          => lv_batch_id);


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


 /*
    --MSCCLBAB is modified to handle the legacy collection of item substitutes
    --Bug#2489334

    --Inserts the valid records into the ODS table, Since the collection program
     --doesn't collect this entity incrementally and whereras post-processor always
     --runs in the incremental mode.

     v_sql_stmt := 10;
     lv_sql_stmt :=
      'INSERT INTO msc_item_substitutes'
      ||'( PLAN_ID,'
      ||'  HIGHER_ITEM_ID,'
      ||'  LOWER_ITEM_ID,'
      ||'  RECIPROCAL_FLAG,'
      ||'  SUBSTITUTION_SET,'
      ||'  CUSTOMER_ID,'
      ||'  CUSTOMER_SITE_ID,'
      ||'  EFFECTIVE_DATE,'
      ||'  DISABLE_DATE,'
      ||'  RELATIONSHIP_TYPE,'
      ||'  PARTIAL_FULFILLMENT_FLAG,'
      ||'  SR_INSTANCE_ID,'
      ||'  LAST_UPDATE_DATE,'
      ||'  LAST_UPDATED_BY,'
      ||'  LAST_UPDATE_LOGIN,'
      ||'  CREATION_DATE,'
      ||'  CREATED_BY)'
      ||' SELECT'
      ||'   -1,'
      ||'  HIGHER_ITEM_ID,'
      ||'  LOWER_ITEM_ID,'
      ||'  RECIPROCAL_FLAG,'
      ||'  SUBSTITUTION_SET,'
      ||'  CUSTOMER_ID,'
      ||'  CUSTOMER_SITE_ID,'
      ||'  EFFECTIVE_DATE,'
      ||'  DISABLE_DATE,'
      ||'  RELATIONSHIP_TYPE,'
      ||'  PARTIAL_FULFILLMENT_FLAG,'
      ||'  SR_INSTANCE_ID,'
      ||'  LAST_UPDATE_DATE,'
      ||'  LAST_UPDATED_BY,'
      ||'  LAST_UPDATE_LOGIN,'
      ||'  CREATION_DATE,'
      ||'  CREATED_BY '
      ||' FROM   msc_st_item_substitutes'
      ||' WHERE  sr_instance_code = :sr_instance_code'
      ||' AND    batch_id         = :lv_batch_id'
      ||' AND    process_flag     = '||G_VALID;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;

      */

      COMMIT;
    END LOOP;

  EXCEPTION

    WHEN too_many_rows THEN
      lv_error_text  := substr('MSC_CL_PRE_PROCESS.LOAD_ITEM_SUBSTITUTES'||'('
                      ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_ITEM_SUBSTITUTES'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END LOAD_ITEM_SUBSTITUTES;


/*==========================================================================+
| DESCRIPTION  : This procedure validates the data in MSC_ST_ITEM_SUPPLIERS,|
|                MSC_ST_SUPPLIER_CAPACITIES and MSC_ST_SUPPLIER_FLEX_FENCES |
|                table.                                                     |
+==========================================================================*/
  PROCEDURE LOAD_SUPP_CAPACITY IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid          RowidTab;
  lv_error_text     VARCHAR2(250);
  lv_column_names   VARCHAR2(5000);--stores concatenated column names
  lv_where_str      VARCHAR2(5000);
  lv_sql_stmt       VARCHAR2(5000);
  lv_return         NUMBER;
  lv_batch_id       msc_st_item_suppliers.batch_id%TYPE;
  lv_message_text   msc_errors.error_text%TYPE;

  ex_logging_err    EXCEPTION;


  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_item_suppliers
    WHERE  process_flag     IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

  CURSOR c2(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_supplier_capacities
    WHERE  process_flag     IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

  CURSOR c3(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_supplier_flex_fences
    WHERE  process_flag     IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

  BEGIN

   --For local ASL's the organization code and the using organization code
   --will be one and the same

    v_sql_stmt := 00;

    lv_sql_stmt :=
      'UPDATE      msc_st_item_suppliers '
      ||' SET      using_organization_code = organization_code'
      ||' WHERE    asl_level        = 2'
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code;


    --Validation check fot the table MSC_ST_ITEM_SUPPLIERS.
    --Duplicate records check for the records whose source is XML

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE msc_st_item_suppliers mis1 '
    ||' SET process_flag = '||G_ERROR_FLG||','
    ||'      error_text   = '||''''||lv_message_text||''''
    ||' WHERE   message_id <  (SELECT MAX(message_id) '
    ||'         FROM   msc_st_item_suppliers mis2 '
    ||'         WHERE  mis2.sr_instance_code  = mis1.sr_instance_code'
    ||'         AND    mis2.vendor_name       = mis1.vendor_name'
    ||'         AND    mis2.organization_code  = mis1.organization_code'
    ||'         AND    mis2.vendor_site_code  = mis1.vendor_site_code'
    ||'         AND    mis2.item_name         = mis1.item_name'
    ||'         AND    NVL(mis2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mis1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(mis2.using_organization_code,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mis1.using_organization_code,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    mis2.process_flag      = '||G_IN_PROCESS
    ||'         AND    mis2.sr_instance_code  = mis1.sr_instance_code'
    ||'         AND    NVL(mis2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND     mis1.process_flag             ='||G_IN_PROCESS
    ||' AND     mis1.sr_instance_code         = :v_instance_code'
    ||' AND     NVL(mis1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE  msc_st_item_suppliers mis1 '
    ||' SET  process_flag  = '||G_ERROR_FLG||','
    ||'      error_text   = '||''''||lv_message_text||''''
    ||' WHERE EXISTS( SELECT 1 '
    ||'       FROM   msc_st_item_suppliers mis2'
    ||'       WHERE  mis2.sr_instance_code         = mis1.sr_instance_code'
    ||'       AND    mis2.vendor_name                = mis1.vendor_name'
    ||'       AND    mis2.organization_code          = mis1.organization_code'
    ||'       AND    mis2.vendor_site_code           = mis1.vendor_site_code'
    ||'       AND    mis2.item_name                  = mis1.item_name'
    ||'       AND    NVL(mis2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mis1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'       AND    NVL(mis2.using_organization_code,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mis1.using_organization_code,  '||''''||NULL_CHAR||''''||')'
    ||'       AND    mis2.process_flag = '||G_IN_PROCESS
    ||'       AND    mis2.sr_instance_code           = mis1.sr_instance_code'
    ||'       AND    NVL(mis2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'       GROUP BY sr_instance_code,organization_code,company_name,'
    ||'              item_name,vendor_name,vendor_site_code,using_organization_code'
    ||'       HAVING COUNT(*) > 1)'
    ||' AND   mis1.process_flag = '||G_IN_PROCESS
    ||' AND   mis1.sr_instance_code = :v_instance_code'
    ||' AND   NVL(mis1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;



      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_column_names :=
    'ITEM_NAME                     ||''~''||'
    ||'ORGANIZATION_CODE           ||''~''||'
    ||'VENDOR_NAME                 ||''~''||'
    ||'SR_INSTANCE_CODE            ||''~''||'
    ||'PROCESSING_LEAD_TIME        ||''~''||'
    ||'MINIMUM_ORDER_QUANTITY      ||''~''||'
    ||'FIXED_LOT_MULTIPLE          ||''~''||'
    ||'DELIVERY_CALENDAR_CODE      ||''~''||'
    ||'VENDOR_SITE_CODE            ||''~''||'
    ||'SUPPLIER_CAP_OVER_UTIL_COST ||''~''||'
    ||'COMPANY_NAME                ||''~''||'
    ||'PURCHASING_UNIT_OF_MEASURE  ||''~''||'
    ||'USING_ORGANIZATION_ID       ||''~''||'
    ||'DELETED_FLAG';

    LOOP
      v_sql_stmt := 03;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      'UPDATE msc_st_item_suppliers '
      ||' SET    batch_id         = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_item_suppliers
      SET    st_transaction_id   = msc_st_item_suppliers_s.NEXTVAL,
             last_update_date    = v_current_date,
             last_updated_by     = v_current_user,
             creation_date       = v_current_date,
             created_by          = v_current_user
      WHERE  rowid           = lb_rowid(j);

      --Deletion is not allowed on this table.

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_ITEM_SUPPLIERS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE      msc_st_item_suppliers '
      ||' SET      process_flag = '||G_ERROR_FLG||','
      ||'      error_text   = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ASL_LEVEL');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 06;

      lv_sql_stmt :=
      'UPDATE      msc_st_item_suppliers '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'      error_text           = '||''''||lv_message_text||''''
      ||' WHERE    asl_level        not in(1,2)'
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE OR'
                                             ||' PURCHASING_UNIT_OF_MEASURE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_UNITS_OF_MEASURE',
                      p_token3            => 'CHILD_TABLE',
                      p_token_value3      => 'MSC_ST_ITEM_SUPPLIERS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Validate all UOM code.
      v_sql_stmt := 07;
      lv_sql_stmt :=
      'UPDATE   msc_st_item_suppliers mstp'
      ||' SET   process_flag     = '||G_ERROR_FLG||','
      ||'       error_text       = '||''''||lv_message_text||''''
      ||' WHERE NOT EXISTS(SELECT 1 '
      ||'       FROM msc_units_of_measure muom '
      ||'       WHERE NVL(muom.unit_of_measure,           '||''''||NULL_CHAR||''''||') = '
      ||'             NVL(mstp.purchasing_unit_of_measure,'||''''||NULL_CHAR||''''||')'
      ||'       UNION '
      ||'       SELECT 1 FROM msc_st_units_of_measure msuom'
      ||'       WHERE NVL(msuom.unit_of_measure,          '||''''||NULL_CHAR||''''||') = '
      ||'             NVL(mstp.purchasing_unit_of_measure,'||''''||NULL_CHAR||''''||')'
      ||'       AND   msuom.sr_instance_id = :v_instance_id'
      ||'       AND   msuom.process_flag   = '||G_VALID||' ) '
      ||' AND NVL(mstp.purchasing_unit_of_measure,        '||''''||NULL_CHAR||''''||')'
      ||'     <> '||''''||NULL_CHAR||''''
      ||' AND mstp.sr_instance_code        = :v_instance_code'
      ||' AND mstp.batch_id                = :lv_batch_id'
      ||' AND mstp.process_flag            = '||G_IN_PROCESS ;



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,
                        v_instance_code,
                        lv_batch_id;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      ' AND NVL(deleted_flag,'||NULL_VALUE||') '
      ||' NOT IN(1,2)';
      --Log a warning for those records where the deleted_flag has a value other
      --than SYS_NO

      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_ITEM_SUPPLIERS',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'DELETED_FLAG',
                      p_debug             => v_debug,
                      p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Organization_id
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_ITEM_SUPPLIERS',
                      p_org_partner_name => 'ORGANIZATION_CODE',
                      p_org_partner_id   => 'ORGANIZATION_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_ORGANIZATION,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ITEM_NAME');

      --Derive Inventory_item_id
      lv_return := MSC_ST_UTIL.DERIVE_ITEM_ID
                     (p_table_name       => 'MSC_ST_ITEM_SUPPLIERS',
                      p_item_col_name    => 'ITEM_NAME',
                      p_item_col_id      => 'INVENTORY_ITEM_ID',
                      p_instance_id      => v_instance_id,
                      p_instance_code    => v_instance_code,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Supplier_id
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'VENDOR_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_ITEM_SUPPLIERS',
                      p_org_partner_name => 'VENDOR_NAME',
                      p_org_partner_id   => 'SUPPLIER_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_VENDOR,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'VENDOR_SITE_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Supplier_site_id
       lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                     (p_table_name        => 'MSC_ST_ITEM_SUPPLIERS',
                      p_partner_name      => 'VENDOR_NAME',
                      p_partner_site_code => 'VENDOR_SITE_CODE',
                      p_partner_site_id   => 'SUPPLIER_SITE_ID',
                      p_instance_code     => v_instance_code,
                      p_partner_type      => G_VENDOR,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_severity          => G_SEV3_ERROR,
                      p_message_text      => lv_message_text,
                      p_debug             => v_debug,
                      p_row               => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
     /* Bug 2172537
      -- Update  all calendar_code as instance_code concatenated with name
      v_sql_stmt := 12;
      lv_sql_stmt :=
      'UPDATE   msc_st_item_suppliers '
      ||' SET   delivery_calendar_code     = sr_instance_code'||'||'':''||'||'delivery_calendar_code'
      ||' WHERE delivery_calendar_code IS NOT NULL'
      ||' AND   sr_instance_code  = :v_instance_code'
      ||' AND   batch_id          = :lv_batch_id'
      ||' AND   process_flag      = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;  */


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_ID AND CALENDAR_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_CALENDARS',
                      p_token3            => 'CHILD_TABLE',
                      p_token_value3      => 'MSC_ST_ITEM_SUPPLIERS');
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Validate the calendar code for org
      v_sql_stmt := 14;
      lv_sql_stmt :=
      'UPDATE    msc_st_item_suppliers   mis'
      ||' SET    process_flag             =  '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE  NOT EXISTS ( SELECT 1 '
      ||'        FROM   msc_calendars mc '
      ||'        WHERE  mc.calendar_code  = mis.delivery_calendar_code '
      ||'        AND    mc.sr_instance_id = :v_instance_id )'
      ||' AND    delivery_calendar_code IS NOT NULL '
      ||' AND    sr_instance_code         = :v_instance_code'
      ||' AND    batch_id                 = :lv_batch_id'
      ||' AND    process_flag             = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,
                        v_instance_code,
                        lv_batch_id;

      --Setting using_organization_id to the default value -1 which is for the
      --globally valid supplier rules and to organization_id for the local ASL's.
      --Value of sr_instance_id2 should be same as sr_instance_id, Since, we are
      --always considering using_organization_id =-1.


      v_sql_stmt := 08;

      lv_sql_stmt :=
      'UPDATE  msc_st_item_suppliers mis '
      ||' SET  using_organization_id = decode(asl_level,1,'||G_USING_ORG_ID||',organization_id),'
      ||'      sr_instance_id2   = :v_instance_id'
      ||' WHERE sr_instance_code = :v_instance_code'
      ||' AND   batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,
                        v_instance_code,
                        lv_batch_id;

     -- validation for REPLENISHMENT_METHOD
     -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'REPLENISHMENT_METHOD',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  1  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Check whether REPLENISHMENT_METHOD value is in (1,2,3,4),if not default to 1 - MIN-MAX - QUANTITIES

   lv_where_str :=
   ' AND NVL(REPLENISHMENT_METHOD,'||NULL_VALUE||') NOT IN(1,2,3,4)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_ITEM_SUPPLIERS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'REPLENISHMENT_METHOD',
                     p_debug             => v_debug,
                     p_default_value     => 1);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;



      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_ITEM_SUPPLIERS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- SCE Changes Starts here

   IF v_sce_installed THEN

      -- company_id derivation
      -- derive the company_id . if not found then error out record

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'COMPANY_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.DERIVE_COMPANY_ID
                        (p_table_name     => 'MSC_ST_ITEM_SUPPLIERS',
                         p_company_name   => 'COMPANY_NAME',
                         p_company_id     => 'COMPANY_ID',
                         p_instance_code  => v_instance_code,
                         p_error_text     => lv_error_text,
                         p_batch_id       => lv_batch_id,
                         p_message_text   => lv_message_text,
                         p_debug          => v_debug);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

/*
      lv_sql_stmt :=
      ' UPDATE  MSC_ST_ITEM_SUPPLIERS mic '
      ||' SET   company_id        =   '
      ||'       (select company_id from msc_companies mc'
      ||'        where mic.company_name = mc.company_name) '
      ||' WHERE NVL(COMPANY_NAME,''-1'')   <> ''-1'''
      ||' AND   batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND   sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_sql_stmt :=
      ' UPDATE  MSC_ST_ITEM_SUPPLIERS '
      ||' SET   process_flag        = '||G_ERROR_FLG||','
      ||'       error_text          = '||''''||lv_message_text||''''
      ||' WHERE NVL(COMPANY_NAME,''-1'')   <> ''-1'''
      ||' AND   COMPANY_ID IS NULL '
      ||' AND   batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND   sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;
*/

   END IF; -- SCE installed

   -- SCE Changes end here

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_ITEM_SUPPLIERS',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_ITEM_SUPPLIERS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_message_text      => NULL,
                    p_error_text        => lv_error_text,
                    p_debug             => v_debug,
                    p_batch_id          => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      COMMIT;
    END LOOP;

    --******Validation for MSC_ST_SUPPLIER_CAPACITIES***********

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;
    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 09;
    lv_sql_stmt :=
    'UPDATE   msc_st_supplier_capacities msc1 '
    ||' SET   process_flag = '||G_ERROR_FLG||','
    ||'      error_text   = '||''''||lv_message_text||''''
    ||' WHERE message_id <  (SELECT MAX(message_id)'
    ||'       FROM   msc_st_supplier_capacities msc2'
    ||'       WHERE  msc2.sr_instance_code  = msc1.sr_instance_code'
    ||'       AND    msc2.organization_code = msc1.organization_code'
    ||'       AND    msc2.vendor_name       = msc1.vendor_name'
    ||'       AND    msc2.vendor_site_code  = msc1.vendor_site_code'
    ||'       AND    msc2.item_name         = msc1.item_name'
    ||'       AND    msc2.from_date         = msc1.from_date'
    ||'       AND    NVL(msc2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msc1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'       AND    msc2.process_flag      = '||G_IN_PROCESS
    ||'       AND    msc2.sr_instance_code  = msc1.sr_instance_code'
    ||'       AND    NVL(msc2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND   msc1.process_flag             = '||G_IN_PROCESS
    ||' AND   msc1.sr_instance_code         = :v_instance_code'
    ||' AND   NVL(msc1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;



      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    v_sql_stmt := 10;
    lv_sql_stmt :=
    ' UPDATE    msc_st_supplier_capacities msc1'
    ||' SET     process_flag  = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   EXISTS( SELECT 1 '
    ||'         FROM   msc_st_supplier_capacities msc2'
    ||'         WHERE  msc2.sr_instance_code      = msc1.sr_instance_code'
    ||'         AND    msc2.organization_code     = msc1.organization_code'
    ||'         AND    msc2.vendor_name           = msc1.vendor_name'
    ||'         AND    msc2.vendor_site_code      = msc1.vendor_site_code'
    ||'         AND    msc2.item_name             = msc1.item_name'
    ||'         AND    msc2.from_date             = msc1.from_date'
    ||'         AND    NVL(msc2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msc1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    msc2.process_flag      = '||G_IN_PROCESS
    ||'         AND    NVL(msc2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'         GROUP BY sr_instance_code,organization_code,company_name,'
    ||'                item_name,vendor_name,vendor_site_code,from_date'
    ||'         HAVING COUNT(*) > 1)'
    ||' AND     msc1.process_flag = '||G_IN_PROCESS
    ||' AND     msc1.sr_instance_code = :v_instance_code'
    ||' AND     NVL(msc1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_column_names :=
    'ORGANIZATION_CODE       ||''~''||'
    ||'ITEM_NAME             ||''~''||'
    ||'VENDOR_NAME           ||''~''||'
    ||'FROM_DATE             ||''~''||'
    ||'CAPACITY              ||''~''||'
    ||'SR_INSTANCE_CODE      ||''~''||'
    ||'VENDOR_SITE_CODE      ||''~''||'
    ||'TO_DATE               ||''~''||'
    ||'DELETED_FLAG          ||''~''||'
    ||'COMPANY_NAME          ||''~''||'
    ||'USING_ORGANIZATION_ID';

    LOOP
      v_sql_stmt := 11;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 12;
      lv_sql_stmt :=
      'UPDATE msc_st_supplier_capacities '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c2(lv_batch_id);
      FETCH c2 BULK COLLECT INTO lb_rowid;
      CLOSE c2;

      v_sql_stmt := 13;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_supplier_capacities
      SET    st_transaction_id   = msc_st_supplier_capacities_s.NEXTVAL,
             refresh_id          = v_refresh_id,
             last_update_date    = v_current_date,
             last_updated_by     = v_current_user,
             creation_date       = v_current_date,
             created_by          = v_current_user
      WHERE  rowid           = lb_rowid(j);


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      ' AND NVL(deleted_flag,'||NULL_VALUE||') '
      ||' NOT IN(1,2)';
      --Log a warning for those records where the deleted_flag has a value other
      --than SYS_NO
      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_SUPPLIER_CAPACITIES',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'DELETED_FLAG',
                      p_debug             => v_debug,
                      p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      --Derive Organization_id
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_SUPPLIER_CAPACITIES',
                      p_org_partner_name => 'ORGANIZATION_CODE',
                      p_org_partner_id   => 'ORGANIZATION_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_ORGANIZATION,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Inventory_item_id
      lv_return := MSC_ST_UTIL.DERIVE_ITEM_ID
                     (p_table_name       => 'MSC_ST_SUPPLIER_CAPACITIES',
                      p_item_col_name    => 'ITEM_NAME',
                      p_item_col_id      => 'INVENTORY_ITEM_ID',
                      p_instance_id      => v_instance_id,
                      p_instance_code    => v_instance_code,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'VENDOR_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Supplier_id
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_SUPPLIER_CAPACITIES',
                      p_org_partner_name => 'VENDOR_NAME',
                      p_org_partner_id   => 'SUPPLIER_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_VENDOR,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'VENDOR_SITE_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     --Derive Supplier_site_id
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                     (p_table_name        => 'MSC_ST_SUPPLIER_CAPACITIES',
                      p_partner_name      => 'VENDOR_NAME',
                      p_partner_site_code => 'VENDOR_SITE_CODE',
                      p_partner_site_id   => 'SUPPLIER_SITE_ID',
                      p_instance_code     => v_instance_code,
                      p_partner_type      => G_VENDOR,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_severity          => G_SEV_ERROR,
                      p_message_text      => lv_message_text,
                      p_debug             => v_debug,
                      p_row               => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_SUPP_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE, COMPANY_NAME, ORGANIZATION_CODE,'
                                             ||' ITEM_NAME, VENDOR_NAME AND VENDOR_SITE_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_ITEM_SUPPLIERS',
                      p_token3            => 'CHILD_TABLE',
                      p_token_value3      => 'MSC_ST_SUPPLIER_CAPACITIES',
                      p_token4            => 'VALUE',
                      p_token_value4      => 'ASL_LEVEL = 1');
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Checking for the referential integrity.
      v_sql_stmt := 14;
      lv_sql_stmt :=
      'UPDATE msc_st_supplier_capacities mis1 '
      ||' SET   error_text   = '||''''||lv_message_text||''''||','
      ||'     process_flag = '||G_ERROR_FLG
      ||' WHERE NOT EXISTS(SELECT 1'
      ||'       FROM   msc_item_suppliers mis2, MSC_TP_ID_LID mtil, MSC_TP_SITE_ID_LID mtsil, MSC_ITEM_ID_LID mil'
      ||'       WHERE  mtil.SR_TP_ID  = mis1.supplier_id'
      ||'       AND    mtil.TP_ID     = mis2.supplier_id'
      ||'       AND    mtil.sr_instance_id       = mis2.sr_instance_id'
      ||'       AND    mtil.PARTNER_TYPE         = 1'
      ||'       AND    mtsil.SR_TP_SITE_ID       = mis1.supplier_site_id'
      ||'       AND    mtsil.TP_SITE_ID          = mis2.supplier_site_id'
      ||'       AND    mtsil.sr_instance_id      = mis2.sr_instance_id'
      ||'       AND    mtsil.partner_type        = 1'
      ||'       AND    mil.sr_inventory_item_id  = mis1.inventory_item_id'
      ||'       AND    mil.inventory_item_id     = mis2.inventory_item_id'
      ||'       AND    mil.sr_instance_id        = mis2.sr_instance_id'
      ||'       AND    mis2.sr_instance_id       = :v_instance_id'
      ||'       AND    mis2.organization_id      = mis1.organization_id'
      ||'       AND    mis2.using_organization_id = -1'
      ||'       AND    mis2.plan_id              = -1'
      ||'       UNION'
      ||'       SELECT 1'
      ||'       FROM   msc_st_item_suppliers mis3'
      ||'       WHERE  mis3.vendor_name       = mis1.vendor_name'
      ||'       AND    mis3.vendor_site_code  = mis1.vendor_site_code'
      ||'       AND    mis3.item_name         = mis1.item_name'
      ||'       AND    mis3.sr_instance_code  = mis1.sr_instance_code'
      ||'       AND    NVL(mis3.company_name,'||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mis1.company_name,'||''''||NULL_CHAR||''''||') '
      ||'       AND    mis3.organization_code = mis1.organization_code'
      ||'       AND    mis3.using_organization_id = -1'
      ||'       AND    mis3.process_flag      = '||G_VALID||')'
      ||' AND    sr_instance_code       = :v_instance_code'
      ||' AND    batch_id               = :lv_batch_id'
      ||' AND    process_flag           = '||G_IN_PROCESS;



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,
                        v_instance_code,
                        lv_batch_id;

      --Setting using_organization_id to the default value -1 which is for the
      --globally valid supplier rules.
      v_sql_stmt := 15;

      lv_sql_stmt :=
      'UPDATE  msc_st_supplier_capacities mis '
      ||' SET     using_organization_id  = '||G_USING_ORG_ID
      ||' WHERE   sr_instance_code       = :v_instance_code'
      ||' AND     batch_id               = :lv_batch_id'
      ||' AND     process_flag           = '||G_IN_PROCESS
      ||' AND     deleted_flag           = '||SYS_NO;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'FROM_DATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --From_date cannot be null.
      v_sql_stmt := 16;

      lv_sql_stmt :=
      'UPDATE  msc_st_supplier_capacities mis '
      ||' SET   error_text   = '||''''||lv_message_text||''''||','
      ||'      process_flag      = '||G_ERROR_FLG
      ||' WHERE NVL(from_date,(sysdate-36500)) = (sysdate-36500)'
      ||' AND   deleted_flag     = '||SYS_NO
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND   batch_id         = :lv_batch_id'
      ||' AND   sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_SUPPLIER_CAPACITIES',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_SUPPLIER_CAPACITIES',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_SUPPLIER_CAPACITIES',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_message_text      => NULL,
                    p_error_text        => lv_error_text,
                    p_debug             => v_debug,
                    p_batch_id          => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      COMMIT;
    END LOOP;

    --*********Validation for MSC_ST_SUPPLIER_FLEX_FENCES***********

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 17;
    lv_sql_stmt :=
    'UPDATE  msc_st_supplier_flex_fences msf1 '
    ||' SET     process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   message_id <  (SELECT MAX(message_id)'
    ||'         FROM   msc_st_supplier_flex_fences msf2'
    ||'         WHERE  msf2.sr_instance_code  = msf1.sr_instance_code'
    ||'         AND    msf2.organization_code = msf1.organization_code'
    ||'         AND    NVL(msf2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(msf1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    msf2.vendor_name       = msf1.vendor_name'
    ||'         AND    msf2.vendor_site_code  = msf1.vendor_site_code'
    ||'         AND    msf2.item_name         = msf1.item_name'
    ||'         AND    msf2.fence_days        = msf1.fence_days'
    ||'         AND    msf2.process_flag      = '||G_IN_PROCESS
    ||'         AND    NVL(msf2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND     msf1.process_flag             = '||G_IN_PROCESS
    ||' AND     msf1.sr_instance_code         = :v_instance_code'
    ||' AND     NVL(msf1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    v_sql_stmt := 18;
    lv_sql_stmt :=
    'UPDATE   msc_st_supplier_flex_fences msf1 '
    ||' SET   process_flag  = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE EXISTS( SELECT 1 '
    ||'       FROM   msc_st_supplier_flex_fences msf2'
    ||'       WHERE  msf2.sr_instance_code    = msf1.sr_instance_code'
    ||'       AND    msf2.organization_code   = msf1.organization_code'
    ||'       AND    NVL(msf2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msf1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'       AND    msf2.vendor_name         = msf1.vendor_name'
    ||'       AND    msf2.vendor_site_code    = msf1.vendor_site_code'
    ||'       AND    msf2.item_name           = msf1.item_name'
    ||'       AND    msf2.fence_days          = msf1.fence_days'
    ||'       AND    msf2.process_flag      = '||G_IN_PROCESS
    ||'       AND    NVL(msf2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'       GROUP BY sr_instance_code,organization_code,company_name,'
    ||'              item_name,vendor_name,vendor_site_code,fence_days'
    ||'       HAVING COUNT(*) > 1)'
    ||' AND   msf1.process_flag             ='|| G_IN_PROCESS
    ||' AND   msf1.sr_instance_code         = :v_instance_code'
    ||' AND   NVL(msf1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_column_names :=
    'ORGANIZATION_CODE      ||''~''||'
    ||'VENDOR_NAME          ||''~''||'
    ||'FENCE_DAYS           ||''~''||'
    ||'SR_INSTANCE_CODE     ||''~''||'
    ||'ITEM_NAME            ||''~''||'
    ||'VENDOR_SITE_CODE     ||''~''||'
    ||'TOLERANCE_PERCENTAGE ||''~''||'
    ||'DELETED_FLAG         ||''~''||'
    ||'COMPANY_NAME         ||''~''||'
    ||'USING_ORGANIZATION_ID';

    LOOP
      v_sql_stmt := 19;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 20;
      lv_sql_stmt :=
      'UPDATE msc_st_supplier_flex_fences '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c3(lv_batch_id);
      FETCH c3 BULK COLLECT INTO lb_rowid;
      CLOSE c3;

      v_sql_stmt := 21;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_supplier_flex_fences
      SET    st_transaction_id   = msc_st_supplier_flex_fences_s.NEXTVAL,
             refresh_id          = v_refresh_id,
             last_update_date    = v_current_date,
             last_updated_by     = v_current_user,
             creation_date       = v_current_date,
             created_by          = v_current_user
      WHERE  rowid           = lb_rowid(j);


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_SUPPLIER_FLEX_FENCES');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Deletion is not allowed on this table.
      v_sql_stmt := 22;
      lv_sql_stmt :=
      'UPDATE    msc_st_supplier_flex_fences'
      ||' SET    process_flag      = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE  deleted_flag     = '||SYS_YES
      ||' AND    process_flag     = '||G_IN_PROCESS
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str := ' AND NVL(deleted_flag,'||NULL_VALUE||') '
                      ||' NOT IN(1,2)';

      --Log a warning for those records where the deleted_flag has a value other
      --than SYS_NO
      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_SUPPLIER_FLEX_FENCES',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'deleted_FLAG',
                      p_debug             => v_debug,
                      p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Organization_id
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_SUPPLIER_FLEX_FENCES',
                      p_org_partner_name => 'ORGANIZATION_CODE',
                      p_org_partner_id   => 'ORGANIZATION_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_ORGANIZATION,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Inventory_item_id
      lv_return := MSC_ST_UTIL.DERIVE_ITEM_ID
                     (p_table_name       => 'MSC_ST_SUPPLIER_FLEX_FENCES',
                      p_item_col_name    => 'ITEM_NAME',
                      p_item_col_id      => 'INVENTORY_ITEM_ID',
                      p_instance_id      => v_instance_id,
                      p_instance_code    => v_instance_code,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'VENDOR_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Supplier_id
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_SUPPLIER_FLEX_FENCES',
                      p_org_partner_name => 'VENDOR_NAME',
                      p_org_partner_id   => 'SUPPLIER_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_VENDOR,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'VENDOR_SITE_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Supplier_site_id
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                     (p_table_name       => 'MSC_ST_SUPPLIER_FLEX_FENCES',
                      p_partner_name     => 'VENDOR_NAME',
                      p_partner_site_code=> 'VENDOR_SITE_CODE',
                      p_partner_site_id  => 'SUPPLIER_SITE_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_VENDOR,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_SUPP_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE, COMPANY_NAME, ORGANIZATION_CODE,'
                                             ||' ITEM_NAME, VENDOR_NAME AND VENDOR_SITE_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_ITEM_SUPPLIERS',
                      p_token3            => 'CHILD_TABLE',
                      p_token_value3      => 'MSC_ST_SUPPLIER_FLEX_FENCES ',
                      p_token4            => 'VALUE',
                      p_token_value4      => 'ASL_LEVEL = 1');
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Checking for the referential integrity.
      v_sql_stmt := 23;
      lv_sql_stmt :=
      'UPDATE  msc_st_supplier_flex_fences msf1'
      ||' SET   error_text   = '||''''||lv_message_text||''''||','
      ||'      process_flag = '||G_ERROR_FLG
      ||' WHERE NOT EXISTS(SELECT 1'
      ||'       FROM   msc_item_suppliers msf2, MSC_TP_ID_LID mtil, MSC_TP_SITE_ID_LID mtsil, MSC_ITEM_ID_LID mil'
      ||'       WHERE  mtil.SR_TP_ID  = msf1.supplier_id'
      ||'       AND    mtil.TP_ID     = msf2.supplier_id'
      ||'       AND    mtil.sr_instance_id       = msf2.sr_instance_id'
      ||'       AND    mtil.PARTNER_TYPE         = 1'
      ||'       AND    mtsil.SR_TP_SITE_ID       = msf1.supplier_site_id'
      ||'       AND    mtsil.TP_SITE_ID          = msf2.supplier_site_id'
      ||'       AND    mtsil.sr_instance_id      = msf2.sr_instance_id'
      ||'       AND    mtsil.partner_type        = 1'
      ||'       AND    mil.sr_inventory_item_id  = msf1.inventory_item_id'
      ||'       AND    mil.inventory_item_id     = msf2.inventory_item_id'
      ||'       AND    mil.sr_instance_id        = msf2.sr_instance_id'
      ||'       AND    msf2.sr_instance_id       = :v_instance_id'
      ||'       AND    msf2.organization_id      = msf1.organization_id'
      ||'       AND    msf2.using_organization_id = -1'
      ||'       AND    msf2.plan_id              = -1'
      ||'       UNION'
      ||'       SELECT 1'
      ||'       FROM   msc_st_item_suppliers msf3'
      ||'       WHERE  msf3.vendor_name        = msf1.vendor_name'
      ||'       AND    msf3.vendor_site_code   = msf1.vendor_site_code'
      ||'       AND    msf3.item_name          = msf1.item_name'
      ||'       AND    msf3.sr_instance_code   = msf1.sr_instance_code'
      ||'       AND    NVL(msf3.company_name,'||G_COMPANY_ID||') = '
      ||'              NVL(msf1.company_name,'||G_COMPANY_ID||')'
      ||'       AND    msf3.organization_code  = msf1.organization_code'
      ||'       AND    msf3.using_organization_id = -1'
      ||'       AND    msf3.process_flag       = '||G_VALID||')'
      ||' AND   msf1.sr_instance_code          = :v_instance_code'
      ||' AND   msf1.batch_id                  = :lv_batch_id'
      ||' AND   msf1.process_flag              = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,
                        v_instance_code,
                        lv_batch_id;

      --Setting using_organization_id to the default value -1 which is for the
      --globally valid supplier rules.
      v_sql_stmt := 24;
      lv_sql_stmt :=
      'UPDATE    msc_st_supplier_flex_fences mis '
      ||' SET    using_organization_id  = '||G_USING_ORG_ID
      ||' WHERE  deleted_flag           = '||SYS_NO
      ||' AND    process_flag           = '||G_IN_PROCESS
      ||' AND    batch_id               = :lv_batch_id'
      ||' AND    sr_instance_code       = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'FENCE_DAYS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Fence days should not be null.
      v_sql_stmt := 25;
      lv_sql_stmt :=
      'UPDATE msc_st_supplier_flex_fences '
      ||' SET   error_text   = '||''''||lv_message_text||''''||','
      ||'     process_flag  = '||G_ERROR_FLG
      ||' WHERE  NVL(fence_days,'||NULL_VALUE||' )= '||NULL_VALUE
      ||' AND    deleted_flag     ='|| SYS_NO
      ||' AND    process_flag     ='|| G_IN_PROCESS
      ||' AND    batch_id         = :lv_batch_id'
      ||' AND    sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_SUPPLIER_FLEX_FENCES',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_SUPPLIER_FLEX_FENCES',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_SUPPLIER_FLEX_FENCES',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_ERROR_FLG,
                    p_message_text      => NULL,
                    p_error_text        => lv_error_text,
                    p_debug             => v_debug,
                    p_batch_id          => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      COMMIT;
    END LOOP;
  EXCEPTION
    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_SUPP_CAPACITY'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END LOAD_SUPP_CAPACITY;

/*==========================================================================+
| DESCRIPTION  : This procedure validates the data in MSC_ST_SAFETY_STOCKS  |
|                table and derives the id's from the local id's table.      |
+==========================================================================*/
  PROCEDURE LOAD_SAFETY_STOCKS IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid              RowidTab;
  lv_return             NUMBER;
  lv_error_text         VARCHAR2(250);
  lv_where_str          VARCHAR2(5000);
  lv_sql_stmt           VARCHAR2(5000);
  lv_column_names       VARCHAR2(5000);          --stores concatenated column names
  lv_batch_id           msc_st_safety_stocks.batch_id%TYPE;
  lv_message_text       msc_errors.error_text%TYPE;

  ex_logging_err        EXCEPTION;

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_safety_stocks
    WHERE  process_flag     IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    batch_id         = p_batch_id
    AND    sr_instance_code = v_instance_code;

  BEGIN

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 01;
    lv_sql_stmt :=
    ' UPDATE   msc_st_safety_stocks mss1'
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  message_id <  (SELECT MAX(message_id)'
    ||'        FROM  msc_st_safety_stocks mss2'
    ||'        WHERE  mss2.sr_instance_code  = mss1.sr_instance_code'
    ||'        AND    mss2.organization_code = mss1.organization_code'
    ||'        AND    mss2.item_name         = mss1.item_name'
    ||'        AND    mss2.period_start_date = mss1.period_start_date'
    ||'        AND   NVL(mss2.company_name,  '   ||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mss1.company_name,  '   ||''''||NULL_CHAR||''''||')'
    ||'        AND   mss2.process_flag = mss1.process_flag'
    ||'        AND   NVL(mss2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND    mss1.process_flag     = '||G_IN_PROCESS
    ||' AND    mss1.sr_instance_code = :v_instance_code'
    ||' AND    NVL(mss1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.
    v_sql_stmt := 02;
    lv_sql_stmt :=
    ' UPDATE   msc_st_safety_stocks mss1'
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS( SELECT 1 '
    ||'        FROM   msc_st_safety_stocks mss2'
    ||'        WHERE  mss2.sr_instance_code  = mss1.sr_instance_code'
    ||'        AND    mss2.organization_code = mss1.organization_code'
    ||'        AND    mss2.item_name         = mss1.item_name'
    ||'        AND    mss2.period_start_date = mss1.period_start_date'
    ||'        AND    NVL(mss2.company_name,  '   ||''''||NULL_CHAR||''''||') = '
    ||'               NVL(mss1.company_name,  '   ||''''||NULL_CHAR||''''||')'
    ||'        AND    mss2.process_flag = mss1.process_flag'
    ||'        AND    NVL(mss2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'        GROUP  BY sr_instance_code,organization_code,item_name,'
    ||'               period_start_date,company_name'
    ||'         HAVING COUNT(*) > 1)'
    ||' AND     mss1.process_flag     = '||G_IN_PROCESS
    ||' AND     mss1.sr_instance_code = :v_instance_code'
    ||' AND     NVL(mss1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_column_names :=
    'ORGANIZATION_CODE       ||''~''||'
    ||'ITEM_NAME             ||''~''||'
    ||'PERIOD_START_DATE     ||''~''||'
    ||'SAFETY_STOCK_QUANTITY ||''~''||'
    ||'COMPANY_NAME          ||''~''||'
    ||'SR_INSTANCE_CODE      ||''~''||'
    ||'DELETED_FLAG ';

    LOOP
      v_sql_stmt := 03;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      ' UPDATE   msc_st_safety_stocks '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_safety_stocks
      SET  st_transaction_id = msc_st_safety_stocks_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_SAFETY_STOCKS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Deletion is not allowed for this entity.
      v_sql_stmt := 06;
      lv_sql_stmt :=
      ' UPDATE     msc_st_safety_stocks '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SAFETY_STOCK_QUANTITY OR PERIOD_START_DATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 07;
      lv_sql_stmt :=
      ' UPDATE  msc_st_safety_stocks '
      ||' SET   process_flag        = '||G_ERROR_FLG||','
      ||'       error_text          = '||''''||lv_message_text||''''
      ||' WHERE (safety_stock_quantity IS NULL '
      ||' OR    period_start_date IS NULL) '
      ||' AND   batch_id            = :lv_batch_id'
      ||' AND   process_flag        = '||G_IN_PROCESS
      ||' AND   sr_instance_code    = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Organization_id
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_SAFETY_STOCKS',
                      p_org_partner_name => 'ORGANIZATION_CODE',
                      p_org_partner_id   => 'ORGANIZATION_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_ORGANIZATION,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Inventory_item_id
      lv_return := MSC_ST_UTIL.DERIVE_ITEM_ID
                     (p_table_name       => 'MSC_ST_SAFETY_STOCKS',
                      p_item_col_name    => 'ITEM_NAME',
                      p_item_col_id      => 'INVENTORY_ITEM_ID',
                      p_instance_id      => v_instance_id,
                      p_instance_code    => v_instance_code,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_SAFETY_STOCK_INVALID',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;


    v_sql_stmt := 08;
    lv_sql_stmt :=

    'UPDATE    msc_st_safety_stocks mss'
    ||' SET    process_flag        = '||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS (SELECT 1'
    ||'        FROM   msc_st_system_items msi'
    ||'        WHERE  msi.sr_instance_code  = mss.sr_instance_code '
    ||'        AND    msi.organization_code = mss.organization_code'
    ||'        AND    msi.item_name         = mss.item_name'
    ||'        AND   NVL(msi.company_name,'||''''||NULL_CHAR||''''||') '
    ||'             =    NVL(mss.company_name,'||''''||NULL_CHAR||''''||') '
    ||'        AND    msi.mrp_safety_stock_code <> 1'
    ||'        AND    msi.process_flag      = '||G_VALID
    ||'        UNION'
    ||'        SELECT 1'
    ||'        FROM   msc_system_items itm'
    ||'        WHERE  itm.sr_instance_id  = '||v_instance_id
    ||'        AND    itm.organization_id = mss.organization_id '
    ||'        AND    itm.item_name       = mss.item_name'
    ||'        AND    itm.safety_stock_code <> 1'
    ||'        AND    itm.plan_id         = -1 )'
    ||' AND deleted_flag  = '||SYS_NO
    ||' AND process_flag  = '||G_IN_PROCESS
    ||' AND  batch_id     = :lv_batch_id'
    ||' AND sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_FK_REF_NOT_EXIST',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAMES',
                    p_token_value1      => '  SR_INSTANCE_CODE, COMPANY_NAME,'
                                           ||' ORGANIZATION_CODE AND PROJECT_NUMBER',
                    p_token2            => 'MASTER_TABLE',
                    p_token_value2      => 'MSC_ST_PROJECT_TASKS');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Derive Project Id.
    lv_return := MSC_ST_UTIL.DERIVE_PROJ_TASK_ID
                           (p_table_name          => 'MSC_ST_SAFETY_STOCKS',
                            p_proj_col_name       => 'PROJECT_NUMBER',
                            p_proj_task_col_id    => 'PROJECT_ID',
                            p_instance_code       => v_instance_code,
                            p_entity_name         => 'PROJECT_ID',
                            p_error_text          => lv_error_text,
                            p_batch_id            => lv_batch_id,
                            p_severity            => G_SEV_WARNING,
                            p_message_text        => lv_message_text,
                            p_debug               => v_debug,
                            p_row                 => lv_column_names);
    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_FK_REF_NOT_EXIST',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAMES',
                    p_token_value1      => '  SR_INSTANCE_CODE, COMPANY_NAME,'
                                           ||' ORGANIZATION_CODE, PROJECT_NUMBER,'
                                           ||' TASK_NUMBER',
                    p_token2            => 'MASTER_TABLE',
                    p_token_value2      => 'MSC_ST_PROJECT_TASKS');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Derive Task Id.
    lv_return := MSC_ST_UTIL.DERIVE_PROJ_TASK_ID
                           (p_table_name          => 'MSC_ST_SAFETY_STOCKS',
                            p_proj_col_name       => 'PROJECT_NUMBER',
                            p_proj_task_col_id    => 'TASK_ID',
                            p_instance_code       => v_instance_code,
                            p_entity_name         => 'TASK_ID',
                            p_error_text          => lv_error_text,
                            p_task_col_name       => 'TASK_NUMBER',
                            p_batch_id            => lv_batch_id,
                            p_severity            => G_SEV_WARNING,
                            p_message_text        => lv_message_text,
                            p_debug               => v_debug,
                            p_row                 => lv_column_names);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_SAFETY_STOCKS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_SAFETY_STOCKS',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_SAFETY_STOCKS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_message_text      => NULL,
                    p_error_text        => lv_error_text,
                    p_debug             => v_debug,
                    p_batch_id          => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      COMMIT;
    END LOOP;

  EXCEPTION
    WHEN too_many_rows THEN
      lv_error_text  := substr('MSC_CL_PRE_PROCESS.LOAD_SAFETY_STOCKS'||'('
                      ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_SAFETY_STOCKS'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END LOAD_SAFETY_STOCKS;

/*==========================================================================+
| DESCRIPTION  : This procedure validates the data in MSC_ST_ITEM_CATEGORIES|
|                table.                                                     |
+==========================================================================*/
  PROCEDURE LOAD_CATEGORY IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid              RowidTab;
  lv_return             NUMBER;
  lv_error_text         VARCHAR2(250);
  lv_where_str          VARCHAR2(5000);
  lv_sql_stmt           VARCHAR2(5000);
  lv_column_names       VARCHAR2(5000);          --stores concatenated column names
  lv_batch_id           msc_st_item_categories.batch_id%TYPE;
  lv_message_text       msc_errors.error_text%TYPE;

  ex_logging_err        EXCEPTION;


  TYPE CharTblTyp IS TABLE OF VARCHAR2(1000);
  lb_item    CharTblTyp;
  lb_cat     CharTblTyp;
  lb_cat_set CharTblTyp;
  lb_org     CharTblTyp;
  lb_comp    CharTblTyp;

  CURSOR c_udk is
    SELECT item_name, category_name, category_set_name, organization_code, company_name
    FROM   msc_st_item_categories
    WHERE sr_instance_code = v_instance_code
    AND   process_flag= G_IN_PROCESS
    AND   NVL(message_id,NULL_VALUE) = NULL_VALUE
    GROUP BY sr_instance_code, item_name, category_name, category_set_name, organization_code, company_name
    HAVING COUNT(*) > 1;

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_item_categories
    WHERE  process_flag     IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    batch_id         = p_batch_id
    AND    sr_instance_code = v_instance_code;

  CURSOR c2(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_item_categories
    WHERE  NVL(sr_category_id,NULL_VALUE)    = NULL_VALUE
    AND    process_flag                   = G_IN_PROCESS
    AND    batch_id                       = p_batch_id
    AND    sr_instance_code               = v_instance_code
    GROUP BY sr_instance_code,company_name,category_name ;

  BEGIN

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE     msc_st_item_categories mic1 '
    ||' SET     process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   message_id <  (SELECT MAX(message_id)'
    ||'         FROM   msc_st_item_categories mic2'
    ||'         WHERE  mic2.sr_instance_code    = mic1.sr_instance_code'
    ||'         AND    mic2.organization_code   = mic1.organization_code'
    ||'         AND    NVL(mic2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mic1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    mic2.category_set_name   = mic1.category_set_name'
    ||'         AND    mic2.category_name       = mic1.category_name'
    ||'         AND    mic2.item_name = mic1.item_name '
    ||'         AND    mic2.process_flag        = '||G_IN_PROCESS
    ||'         AND    mic2.sr_instance_code    = mic1.sr_instance_code'
    ||'         AND    NVL(mic2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND  mic1.process_flag        = '||G_IN_PROCESS
    ||' AND  mic1.sr_instance_code    = :v_instance_code'
    ||' AND  NVL(mic1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;



      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.
/*
    v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE   msc_st_item_categories mic1 '
    ||' SET   process_flag  = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE EXISTS( SELECT 1 '
    ||'       FROM   msc_st_item_categories mic2'
    ||'       WHERE  mic2.sr_instance_code    = mic1.sr_instance_code'
    ||'       AND    mic2.organization_code   = mic1.organization_code'
    ||'       AND    NVL(mic2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mic1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'       AND    mic2.category_set_name   = mic1.category_set_name'
    ||'       AND    mic2.category_name       = mic1.category_name'
    ||'       AND    nvl(mic2.item_name,     '||''''||NULL_CHAR||''''||') = '
    ||'              nvl(mic1.item_name,     '||''''||NULL_CHAR||''''||') '
    ||'       AND    mic2.sr_instance_code    = mic1.sr_instance_code'
    ||'       AND    NVL(mic2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'       GROUP BY sr_instance_code,organization_code,category_set_name,'
    ||'              company_name,category_name,item_name'
    ||'       HAVING COUNT(*) > 1)'
    ||' AND   mic1.process_flag     = '||G_IN_PROCESS
    ||' AND   mic1.sr_instance_code = :v_instance_code'
    ||' AND   NVL(mic1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;
*/

    BEGIN
       OPEN c_udk;
         FETCH c_udk BULK COLLECT INTO lb_item, lb_cat, lb_cat_set, lb_org, lb_comp;
       CLOSE c_udk;

       FORALL j IN lb_item.FIRST..lb_item.LAST
       UPDATE msc_st_item_categories
       SET process_flag = G_ERROR_FLG, error_text   = lv_message_text
       WHERE  sr_instance_code = v_instance_code
       AND    item_name =   lb_item(j)
       AND    category_name       = lb_cat(j)
       AND    category_set_name   = lb_cat_set(j)
       AND    organization_code   = lb_org(j)
       AND    NVL(company_name,  NULL_CHAR) =   NVL(lb_comp(j),  NULL_CHAR)
       AND    NVL(message_id,NULL_VALUE) = NULL_VALUE
       AND    process_flag= G_IN_PROCESS;

    EXCEPTION
       WHEN OTHERS THEN
        null;
    END;

    lv_column_names :=
    'CATEGORY_NAME      ||''~''||'
    ||'SR_INSTANCE_CODE ||''~''||'
    ||'DESCRIPTION      ||''~''||'
    ||'DISABLE_DATE     ||''~''||'
    ||'START_DATE_ACTIVE||''~''||'
    ||'END_DATE_ACTIVE  ||''~''||'
    ||'ITEM_NAME        ||''~''||'
    ||'ORGANIZATION_CODE||''~''||'
    ||'CATEGORY_SET_NAME||''~''||'
    ||'COMPANY_NAME     ||''~''||'
    ||'SUMMARY_FLAG     ||''~''||'
    ||'ENABLED_FLAG     ||''~''||'
    ||'DELETED_FLAG';


    LOOP
      v_sql_stmt := 03;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      'UPDATE msc_st_item_categories '
      ||' SET    batch_id     = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    sr_instance_code         = :v_instance_code'
      ||' AND    rownum                  <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_item_categories
      SET    st_transaction_id = msc_st_item_categories_s.NEXTVAL,
             refresh_id        = v_refresh_id,
             last_update_date  = v_current_date,
             last_updated_by   = v_current_user,
             creation_date     = v_current_date,
             created_by        = v_current_user
      WHERE  rowid             = lb_rowid(j);

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_ITEM_CATEGORIES');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Deletion is not allowed on this table.
      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE   msc_st_item_categories '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      ' AND NVL(deleted_flag,'||NULL_VALUE||') '
      ||' NOT IN(1,2)';

      --Log a warning for those records where the deleted_flag has a value other
      --SYS_NO
      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_ITEM_CATEGORIES',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'DELETED_FLAG',
                      p_debug             => v_debug,
                      p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Organization_id
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_ITEM_CATEGORIES',
                      p_org_partner_name => 'ORGANIZATION_CODE',
                      p_org_partner_id   => 'ORGANIZATION_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_ORGANIZATION,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Inventory_item_id
      lv_return := MSC_ST_UTIL.DERIVE_ITEM_ID
                     (p_table_name       => 'MSC_ST_ITEM_CATEGORIES',
                      p_item_col_name    => 'ITEM_NAME',
                      p_item_col_id      => 'INVENTORY_ITEM_ID',
                      p_instance_id      => v_instance_id,
                      p_instance_code    => v_instance_code,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      --Derive sr_category_set_id
      v_sql_stmt := 07;
      lv_sql_stmt :=
      'UPDATE  msc_st_item_categories '
      ||' SET  sr_category_set_id = (SELECT local_id'
      ||'      FROM   msc_local_id_misc'
      ||'      WHERE  char1 =   sr_instance_code'
      ||'      AND    NVL(char2,       '||''''||NULL_CHAR||''''||') = '
      ||'             NVL(company_name,'||''''||NULL_CHAR||''''||') '
      ||'      AND    char3 =   category_set_name'
      ||'      AND    entity_name = ''SR_CATEGORY_SET_ID'' )'
      ||' WHERE sr_instance_code = :v_instance_code'
      ||' AND   batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS;



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;

      if(v_install_msc) THEN  -- category set should exists
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CATEGORY_SET_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 08;
      lv_sql_stmt :=
      'UPDATE msc_st_item_categories '
      ||' SET process_flag     = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE NVL(sr_category_set_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND   process_flag   = '||G_IN_PROCESS
      ||' AND   batch_id       = :lv_batch_id'
      ||' AND   sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;
      END IF ; -- v_install_msc

      --Derive sr_category_id
      v_sql_stmt := 09;
      lv_sql_stmt :=
      'UPDATE msc_st_item_categories '
      ||' SET sr_category_id = (SELECT local_id '
      ||'     FROM   msc_local_id_misc'
      ||'     WHERE  char1 =   sr_instance_code'
      ||'     AND    NVL(char2,       '||''''||NULL_CHAR||''''||') = '
      ||'            NVL(company_name,'||''''||NULL_CHAR||''''||') '
      ||'     AND    char3 =   category_name'
      ||'     AND    entity_name = ''SR_CATEGORY_ID'' )'
      ||' WHERE sr_instance_code = :v_instance_code'
      ||' AND   batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;

      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_ITEM_CATEGORIES',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      OPEN c2(lv_batch_id);
      FETCH c2 BULK COLLECT INTO lb_rowid ;

      IF c2%ROWCOUNT > 0  THEN

        v_sql_stmt := 10;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        UPDATE msc_st_item_categories
        SET    sr_category_id = msc_st_sr_category_id_s.NEXTVAL
        WHERE  rowid          = lb_rowid(j);

        v_sql_stmt := 11;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        INSERT INTO msc_local_id_misc
        (local_id,
         st_transaction_id,
         instance_id,
         entity_name,
         data_source_type,
         char1,
         char2,
         char3,
         SOURCE_ORG_ID,
         SOURCE_INVENTORY_ITEM_ID,
         SOURCE_CATEGORY_SET_ID,
         SOURCE_CATEGORY_ID,
         last_update_date,
         last_updated_by,
         creation_date,
         created_by)
        SELECT
         sr_category_id,
         st_transaction_id,
         v_instance_id,
         'SR_CATEGORY_ID',
         data_source_type,
         v_instance_code,
         company_name,
         category_name,
         SOURCE_ORG_ID,
 	 SOURCE_INVENTORY_ITEM_ID,
         SOURCE_SR_CATEGORY_SET_ID,
         SOURCE_SR_CATEGORY_ID,
         v_current_date,
         v_current_user,
         v_current_date,
         v_current_user
        FROM msc_st_item_categories
        WHERE  rowid            = lb_rowid(j);

      END IF;
      CLOSE c2 ;

      --Derive sr_category_id
      v_sql_stmt := 09;
      lv_sql_stmt :=
      'UPDATE msc_st_item_categories '
      ||' SET sr_category_id = (SELECT local_id '
      ||'     FROM   msc_local_id_misc'
      ||'     WHERE  char1 =   sr_instance_code'
      ||'     AND    NVL(char2,       '||''''||NULL_CHAR||''''||') = '
      ||'            NVL(company_name,'||''''||NULL_CHAR||''''||') '
      ||'     AND    char3 =   category_name'
      ||'     AND    entity_name = ''SR_CATEGORY_ID'' )'
      ||' WHERE sr_instance_code = :v_instance_code'
      ||' AND    NVL(sr_category_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND   batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;


      v_sql_stmt := 12;
      lv_sql_stmt :=
      'UPDATE   msc_st_item_categories '
      ||' SET   summary_flag = ''N'' '
      ||' WHERE process_flag = '||G_IN_PROCESS
      ||' AND   batch_id     = :lv_batch_id'
      ||' AND   sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_ITEM_CATEGORIES',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_ITEM_CATEGORIES',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_message_text      => NULL,
                    p_error_text        => lv_error_text,
                    p_debug             => v_debug,
                    p_batch_id          => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      COMMIT;

      -- ODP change
      -- Call the procedure to insert categories into msd_st_level_values
      IF(v_install_msd) THEN
        lv_sql_stmt := ' DECLARE errbuf varchar2(250);'
                 ||' retcode  number ;'
                 || ' BEGIN '
                 ||' MSD_CL_PRE_PROCESS.LOAD_CATEGORY'
                 ||' (ERRBUF         =>  errbuf ,'
                 ||'  RETCODE        =>  retcode ,'
                 ||'  p_instance_id => :v_instance_id,'
                 ||'  p_batch_id    => :lv_batch_id ,'
                 ||'  p_link        => :p_item_rollup);'
                 ||'  IF ( retcode = '||G_WARNING||') THEN'
                 ||'  MSC_CL_PRE_PROCESS.v_flag := '||SYS_YES||';'
                 ||'  END IF;'
                 ||'  END ;';

        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

        EXECUTE IMMEDIATE lv_sql_stmt
                USING     v_instance_id,
                          lv_batch_id,
                          v_item_rollup;
      END IF ;
      COMMIT;


    END LOOP;

  EXCEPTION
    WHEN too_many_rows THEN
      lv_error_text  := substr('MSC_CL_PRE_PROCESS.LOAD_CATEGORY'||'('
                      ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_CATEGORY'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END LOAD_CATEGORY;


 /*==========================================================================+
  | DESCRIPTION  : This function performs the validation and loads the data   |
  |                for business object Sourcing Rules.                        |
  +==========================================================================*/
  PROCEDURE  LOAD_SOURCING_RULE IS

 TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  TYPE CurTyp           IS REF CURSOR;
  c1                    CurTyp;
  lb_rowid              RowidTab;

  lv_column_names       VARCHAR2(5000);     -- Stores cocatenated column names
  lv_return             NUMBER;
  lv_error_text         VARCHAR2(250);
  lv_where_str          VARCHAR2(5000);
  lv_sql_stmt           VARCHAR2(5000);
  lv_cursor_stmt        VARCHAR2(5000);

  lv_default_sourcing_rule  msc_st_item_sourcing.sourcing_rule_name%TYPE
      := v_instance_code||':'||'SRULE' ;
  lv_default_assignment_set msc_st_item_sourcing.sourcing_rule_name%TYPE
      := 'ASET' ;
  lv_default_category_set  msc_st_category_sets.category_set_name%TYPE := NULL_CHAR ;
  lv_batch_id              msc_st_item_sourcing.batch_id%TYPE;
  lv_message_text          msc_errors.error_text%TYPE;

   ex_logging_err       EXCEPTION;


 CURSOR c2(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_item_sourcing
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

 CURSOR c3(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_item_sourcing
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(sourcing_rule_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag      = SYS_NO
   GROUP BY sr_instance_code,company_name,
            organization_code,sourcing_rule_name;

 CURSOR c4(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_item_sourcing
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(assignment_set_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag      = SYS_NO
    GROUP BY  sr_instance_code,company_name,
             assignment_set_name;

 CURSOR c5(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_item_sourcing
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(sr_receipt_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag      = SYS_NO
    GROUP BY  sr_instance_code,company_name,
           organization_code, sourcing_rule_name,
           receipt_organization_code,receipt_org_instance_code,effective_date;

 CURSOR c6(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_item_sourcing
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(sr_source_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag      = SYS_NO
    GROUP BY  sr_instance_code,company_name,
           organization_code, sourcing_rule_name,
           source_organization_code, source_org_instance_code,
           source_partner_site_code,source_partner_name,
           receipt_organization_code,receipt_org_instance_code,
           effective_date;

 CURSOR c7(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_item_sourcing
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(assignment_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag      = SYS_NO
    GROUP BY sr_instance_code,company_name,
             organization_code,assignment_set_name,
             item_name, category_name ;


  BEGIN

  --Duplicate records check for the records whose source is XML

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 01;

  lv_sql_stmt :=
  'UPDATE   msc_st_item_sourcing msis1'
  ||' SET      process_flag ='||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE     message_id < ( SELECT max(message_id) FROM msc_st_item_sourcing msis2'
  ||'                 WHERE msis2.sr_instance_code  = msis1.sr_instance_code'
  ||'         AND   NVL(msis2.organization_code,'||''''||NULL_CHAR||''''||') '
  ||'               = NVL(msis1.organization_code,'||''''||NULL_CHAR||''''||') '
  ||'         AND   NVL(msis2.sourcing_rule_name,'||''''||NULL_CHAR||''''||') '
  ||'               =  NVL(msis1.sourcing_rule_name,'||''''||NULL_CHAR||''''||') '
  ||'         AND   NVL(msis2.assignment_set_name,'||''''||NULL_CHAR||''''||') '
  ||'               = NVL(msis1.assignment_set_name,'||''''||NULL_CHAR||''''||') '
  ||'         AND   NVL(msis2.item_name,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msis1.item_name,'||''''||NULL_CHAR||''''||') '
  ||'         AND   NVL(msis2.category_name,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msis1.category_name,'||''''||NULL_CHAR||''''||') '
  ||'         AND   NVL(msis2.receipt_organization_code,'||''''||NULL_CHAR||''''||') '
  ||'               = NVL(msis1.receipt_organization_code,'||''''||NULL_CHAR||''''||') '
  ||'         AND   NVL(msis2.source_organization_code,'||''''||NULL_CHAR||''''||') '
  ||'               = NVL(msis1.source_organization_code,'||''''||NULL_CHAR||''''||') '
  ||'         AND   NVL(msis2.source_partner_name,'||''''||NULL_CHAR||''''||') '
  ||'               = NVL(msis1.source_partner_name,'||''''||NULL_CHAR||''''||') '
  ||'         AND   NVL(msis2.source_partner_site_code,'||''''||NULL_CHAR||''''||') '
  ||'               = NVL(msis1.source_partner_site_code,'||''''||NULL_CHAR||''''||') '
  ||'         AND   msis2.effective_date     = msis1.effective_date'
  ||'         AND   msis2.process_flag      = '||G_IN_PROCESS
  ||'         AND    NVL(msis2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
  ||'  AND       msis1.process_flag     = '||G_IN_PROCESS
  ||'  AND       msis1.sr_instance_code = :v_instance_code'
  ||'  AND     NVL(msis1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  --Duplicate records check for the records whose source is batch load

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 02;

  lv_sql_stmt :=
  'UPDATE   msc_st_item_sourcing msis1'
  ||' SET      process_flag ='||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||'  WHERE   EXISTS ( SELECT 1 FROM msc_st_item_sourcing msis2'
  ||'                 WHERE msis2.sr_instance_code  = msis1.sr_instance_code'
  ||'         AND   NVL(msis2.organization_code,'||''''||NULL_CHAR||''''||') '
  ||'               = NVL(msis1.organization_code,'||''''||NULL_CHAR||''''||') '
  ||'         AND   NVL(msis2.sourcing_rule_name,'||''''||NULL_CHAR||''''||') '
  ||'               =  NVL(msis1.sourcing_rule_name,'||''''||NULL_CHAR||''''||') '
  ||'         AND   NVL(msis2.assignment_set_name,'||''''||NULL_CHAR||''''||') '
  ||'               = NVL(msis1.assignment_set_name,'||''''||NULL_CHAR||''''||') '
  ||'         AND   NVL(msis2.item_name,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msis1.item_name,'||''''||NULL_CHAR||''''||') '
  ||'         AND   NVL(msis2.category_name,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msis1.category_name,'||''''||NULL_CHAR||''''||') '
  ||'         AND   NVL(msis2.receipt_organization_code,'||''''||NULL_CHAR||''''||') '
  ||'               = NVL(msis1.receipt_organization_code,'||''''||NULL_CHAR||''''||') '
  ||'         AND   NVL(msis2.source_organization_code,'||''''||NULL_CHAR||''''||') '
  ||'               = NVL(msis1.source_organization_code,'||''''||NULL_CHAR||''''||') '
  ||'         AND   NVL(msis2.source_partner_name,'||''''||NULL_CHAR||''''||') '
  ||'               = NVL(msis1.source_partner_name,'||''''||NULL_CHAR||''''||') '
  ||'         AND   NVL(msis2.source_partner_site_code,'||''''||NULL_CHAR||''''||') '
  ||'               = NVL(msis1.source_partner_site_code,'||''''||NULL_CHAR||''''||') '
  ||'         AND   msis2.effective_date     = msis1.effective_date'
  ||'         AND   msis2.process_flag      = '||G_IN_PROCESS
  ||'         AND NVL(msis2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||'         GROUP BY sr_instance_code,company_name,organization_code,sourcing_rule_name,'
  ||'         assignment_set_name,item_name, category_name,receipt_organization_code,'
  ||'         source_organization_code, source_partner_name, source_partner_site_code,effective_date'
  ||'         HAVING COUNT(*) >1 )'
  ||'  AND     msis1.process_flag              ='||G_IN_PROCESS
  ||'  AND     msis1.sr_instance_code          = :v_instance_code'
  ||'  AND     NVL(msis1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;


  lv_column_names :=
  'SOURCING_RULE_NAME              ||''~''||'
  ||'EFFECTIVE_DATE                ||''~''||'
  ||'ALLOCATION_PERCENT            ||''~''||'
  ||'SOURCE_TYPE                   ||''~''||'
  ||'PLANNING_ACTIVE               ||''~''||'
  ||'ASSIGNMENT_TYPE               ||''~''||'
  ||'ORGANIZATION_CODE             ||''~''||'
  ||'SR_INSTANCE_CODE              ||''~''||'
  ||'DISABLE_DATE                  ||''~''||'
  ||'RANK                          ||''~''||'
  ||'DESCRIPTION                   ||''~''||'
  ||'SHIP_METHOD                   ||''~''||'
  ||'ITEM_NAME                     ||''~''||'
  ||'CATEGORY_NAME                 ||''~''||'
  ||'RECEIPT_ORGANIZATION_CODE     ||''~''||'
  ||'RECEIPT_ORG_INSTANCE_CODE     ||''~''||'
  ||'SOURCE_ORGANIZATION_CODE      ||''~''||'
  ||'SOURCE_ORG_INSTANCE_CODE      ||''~''||'
  ||'SOURCE_PARTNER_NAME           ||''~''||'
  ||'SOURCE_PARTNER_SITE_CODE      ||''~''||'
  ||'COMPANY_NAME                  ||''~''||'
  ||'ASSIGNMENT_SET_NAME           ||''~''||'
  ||'DELETED_FLAG' ;

  BEGIN
     -- Get the default category set
       lv_sql_stmt := 01;
       lv_sql_stmt :=
       'SELECT     category_set_name'
       ||' FROM    msc_category_sets '
       ||' WHERE   sr_instance_id = :v_instance_id'
       ||' AND     default_flag   = 1' ;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

       EXECUTE IMMEDIATE lv_sql_stmt
               INTO      lv_default_category_set
               USING     v_instance_id;
       EXCEPTION
           WHEN NO_DATA_FOUND THEN
         BEGIN

         lv_sql_stmt := 13;
         lv_sql_stmt :=
         'SELECT     category_set_name '
         ||' FROM    msc_st_category_sets '
         ||' WHERE   sr_instance_id = :v_instance_id'
         ||' AND     default_flag   = 1'
         ||' AND     deleted_flag   = '||SYS_NO
         ||' AND     process_flag   ='|| G_VALID ;


             MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

         EXECUTE IMMEDIATE lv_sql_stmt
           INTO      lv_default_category_set
           USING     v_instance_id;
         EXCEPTION
           WHEN NO_DATA_FOUND THEN
           -- Set the  message
           lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_DEF_CAT_NOT_EXISTS',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text);

           IF lv_return <> 0 THEN
                RAISE ex_logging_err;
           END IF;
           WHEN OTHERS THEN
           lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_SOURCING_RULE'||'('
                             ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);

          END ;
    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_CATEGORY'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
     MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);

     END;



 -- Now processing by batch

  LOOP
      v_sql_stmt := 03;
      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      ' UPDATE msc_st_item_sourcing '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c2(lv_batch_id);
      FETCH c2 BULK COLLECT INTO lb_rowid;
      CLOSE c2;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_item_sourcing
      SET  st_transaction_id = msc_st_item_sourcing_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
     WHERE  rowid           = lb_rowid(j);

    -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_ITEM_SOURCING');

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

     --Deletion is not allowed on this table.

     v_sql_stmt := 06;
     lv_sql_stmt :=
      ' UPDATE   msc_st_item_sourcing '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         = :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE   lv_sql_stmt
            USING       lv_batch_id,
                        v_instance_code;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Check whether delete flag value is in (SYS_YES,SYS_NO),if not default to SYS_NO

     lv_where_str :=
     ' AND NVL(deleted_flag,'||NULL_VALUE||') NOT IN(1,2)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_ITEM_SOURCING',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DELETED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => SYS_NO);


      IF lv_return <> 0 THEN
          RAISE ex_logging_err;
      END IF;

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ASSIGNMENT_TYPE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Error out record where assignment_type is NOT IN (1,2,3,4,5,6)
     v_sql_stmt := 07;
     lv_sql_stmt:=
     'UPDATE          msc_st_item_sourcing'
     ||' SET          process_flag          = '||G_ERROR_FLG||','
     ||'              error_text   = '||''''||lv_message_text||''''
     ||' WHERE        sr_instance_code      = :v_instance_code'
     ||' AND          batch_id              = :lv_batch_id'
     ||' AND          process_flag          = '||G_IN_PROCESS
     ||' AND          NVL(assignment_type,'||NULL_VALUE||') NOT IN (1,2,3,4,5,6)' ;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SOURCE_TYPE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Error out record where source_type is NOT IN (1,2,3)

     v_sql_stmt := 08;
     lv_sql_stmt:=
     'UPDATE          msc_st_item_sourcing'
     ||' SET          process_flag          = '||G_ERROR_FLG||','
     ||'              error_text   = '||''''||lv_message_text||''''
     ||' WHERE        sr_instance_code      = :v_instance_code'
     ||' AND          batch_id              = :lv_batch_id'
     ||' AND          process_flag          = '||G_IN_PROCESS
     ||' AND          NVL(source_type,'||NULL_VALUE||') NOT IN (1,2,3)' ;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


      -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Udpate organization_id for all the records

     lv_return :=
     MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name     => 'MSC_ST_ITEM_SOURCING',
                                    p_org_partner_name  =>'ORGANIZATION_CODE',
                                    p_org_partner_id    =>'ORGANIZATION_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_ORGANIZATION,
                                    p_severity          => G_SEV3_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_batch_id          =>lv_batch_id,
                                    p_debug             => v_debug,
                                    p_error_text        =>lv_error_text);

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;

     -- Default sourcing rule

     v_sql_stmt := 09;

     lv_sql_stmt:=
     'UPDATE       msc_st_item_sourcing'
     ||' SET          sourcing_rule_name    = '||''''||lv_default_sourcing_rule||''''
     ||' WHERE        sr_instance_code      = :v_instance_code'
     ||' AND          batch_id              = :lv_batch_id'
     ||' AND          process_flag          ='||G_IN_PROCESS
     ||' AND          NVL(sourcing_rule_name,'||''''||NULL_CHAR||''''||') '
     ||'              =  '||''''||NULL_CHAR||''''                  ;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    -- Default assignment set name

     v_sql_stmt := 10;

     lv_sql_stmt:=
     'UPDATE          msc_st_item_sourcing'
     ||' SET          assignment_set_name    = '||''''||lv_default_assignment_set||''''
     ||' WHERE        sr_instance_code      = :v_instance_code'
     ||' AND          batch_id              = :lv_batch_id'
     ||' AND          process_flag          ='||G_IN_PROCESS
     ||' AND          NVL(assignment_set_name,'||''''||NULL_CHAR||''''||')'
     ||'              = '||''''||NULL_CHAR||''''  ;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PLANNING_ACTIVE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_YES  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


     -- Default planning_active as 1

     lv_where_str := ' AND NVL(planning_active,'||NULL_VALUE||') NOT IN (1,2)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_ITEM_SOURCING',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'PLANNING_ACTIVE',
                     p_debug             => v_debug,
                     p_default_value     => SYS_YES );


     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;

      -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'RECEIPT_ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Update receipt_organization_id
     -- As of now our assumption is that receipt_org_instance_code is same as
     -- v_instance_code ,

     lv_return :=
     MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name     => 'MSC_ST_ITEM_SOURCING',
                                    p_org_partner_name  =>'RECEIPT_ORGANIZATION_CODE',
                                    p_org_partner_id    =>'RECEIPT_ORGANIZATION_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_ORGANIZATION,
                                    p_severity          => G_SEV3_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_batch_id          =>lv_batch_id,
                                    p_debug             => v_debug,
                                    p_error_text        =>lv_error_text);

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;


   /*  -- Update sr_receipt_org_instance_id
      v_sql_stmt := 09;

     lv_sql_stmt:=
     'UPDATE          msc_st_item_sourcing  msis'
     ||' SET          receipt_org_instance_id = ( SELECT instance_id FROM msc_apps_instances mai'
     ||'                                          WHERE mai.instance_code =  msis.sr_instance_code)'
     ||' WHERE        sr_instance_code      = :v_instance_code'
     ||' AND          batch_id              = :lv_batch_id'
     ||' AND          process_flag          ='||G_IN_PROCESS
     ||' AND          NVL(receipt_org_instance_code,'||''''||NULL_CHAR||''''||')'
     ||'             <> '||''''||NULL_CHAR||'''' ;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;  */

     v_sql_stmt := 11;

     lv_sql_stmt:=
     'UPDATE          msc_st_item_sourcing  msis'
     ||' SET          receipt_org_instance_code  = :v_instance_code ,'
     ||'              source_org_instance_code   = :v_instance_code'
     ||' WHERE        sr_instance_code      = :v_instance_code'
     ||' AND          batch_id              = :lv_batch_id'
     ||' AND          process_flag          ='||G_IN_PROCESS  ;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,v_instance_code,
                                         v_instance_code,lv_batch_id;

      -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


   -- Derive inventory_item_id

     lv_return :=
     msc_st_util.derive_item_id(p_table_name => 'MSC_ST_ITEM_SOURCING',
                             p_item_col_name => 'ITEM_NAME',
                             p_item_col_id   => 'INVENTORY_ITEM_ID',
                             p_instance_code => v_instance_code,
                             p_instance_id   => v_instance_id,
                             p_severity      => G_SEV3_ERROR,
                             p_message_text  => lv_message_text,
                             p_batch_id      => lv_batch_id,
                             p_debug         => v_debug,
                             p_error_text    => lv_error_text,
                             p_check_org     => FALSE);

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;


   -- If assignment_type = 3 or 6 ITEM_NAME should be valid

    v_sql_stmt:= 12;
    lv_sql_stmt:=
    'UPDATE     msc_st_item_sourcing'
    ||'  SET    process_flag     = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||'  WHERE  (assignment_type IN (3,6)  '
    ||'  AND      NVL(inventory_item_id,'||NULL_VALUE||')'
    ||'           = '||NULL_VALUE||')'
    ||'  AND      sr_instance_code = :v_instance_code'
    ||'  AND      process_flag     = '||G_IN_PROCESS
    ||'  AND      batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

      -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CATEGORY_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- If assignment_type = 2 and 5 then category_name should not be NULL
    v_sql_stmt := 13;
    lv_sql_stmt :=
    'UPDATE      msc_st_item_sourcing '
    ||'  SET     process_flag     = '||G_ERROR_FLG||','
    ||'          error_text   = '||''''||lv_message_text||''''
    ||'  WHERE   NVL(category_name,'||''''||NULL_CHAR||''''||') '
    ||'          = '||''''||NULL_CHAR||''''
    ||'  AND     assignment_type IN (2,5) '
    ||'  AND     sr_instance_code = :v_instance_code '
    ||'  AND     process_flag     ='||G_IN_PROCESS
    ||'  AND     batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

 -- Update categroy_set_id

  v_sql_stmt :=14;

  lv_sql_stmt :=
  'UPDATE          MSC_ST_ITEM_SOURCING  msis'
  ||' SET           category_set_id = ( SELECT  local_id FROM  msc_local_id_misc mlim'
  ||'                              WHERE    entity_name = ''SR_CATEGORY_SET_ID'' '
  ||'                              AND      instance_id = '||v_instance_id
  ||'                              AND      mlim.char1 =  msis.sr_instance_code'
  ||'              AND   NVL(mlim.char2,'||''''||NULL_CHAR||''''||') '
  ||'              =    NVL(msis.company_name,'||''''||NULL_CHAR||''''||') '
  ||'              AND      mlim.char3 = '||''''||lv_default_category_set||''''||')'
  ||' WHERE        msis.assignment_type IN (2,5)'
  ||' AND          sr_instance_code = :v_instance_code'
  ||' AND          process_flag     = '||G_IN_PROCESS
  ||' AND          batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


 -- Now derive sr_category_id from LID table

  v_sql_stmt :=15;

  lv_sql_stmt :=
  'UPDATE          MSC_ST_ITEM_SOURCING  msis'
  ||' SET           category_id = ( SELECT  local_id FROM  msc_local_id_misc mlim'
  ||'                              WHERE    entity_name = ''SR_CATEGORY_ID'' '
  ||'                              AND      instance_id = '||v_instance_id
  ||'                              AND      mlim.char1 =  msis.sr_instance_code'
  ||'              AND   NVL(mlim.char2,'||''''||NULL_CHAR||''''||') '
  ||'              =    NVL(msis.company_name,'||''''||NULL_CHAR||''''||') '
  ||'              AND      mlim.char3 = msis.category_name )'
  ||' WHERE        msis.assignment_type IN (2,5)'
  ||' AND          NVL(category_name,'||''''||NULL_CHAR||''''||') '
  ||'                   <> '||''''||NULL_CHAR||''''
  ||' AND          sr_instance_code = :v_instance_code'
  ||' AND          process_flag     = '||G_IN_PROCESS
  ||' AND          batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CATEGORY_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Error our records if category_id/category_set_id  is NULL
   lv_sql_stmt :=
    'UPDATE     msc_st_item_sourcing '
    ||'  SET    process_flag     = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||'  WHERE  (NVL(category_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'  OR     NVL(category_set_id,'||NULL_VALUE||') = '||NULL_VALUE||')'
    ||'  AND    assignment_type IN (2,5) '
    ||'  AND    sr_instance_code = :v_instance_code '
    ||'  AND    process_flag     ='||G_IN_PROCESS
    ||'  AND    batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

 EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

     -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SOURCE_ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


   -- If source_type = 2(make at) then source_partner_name should be NULL
   -- And source_organization_code should be same as organization_code

   v_sql_stmt :=16;

   lv_sql_stmt :=
   'UPDATE        MSC_ST_ITEM_SOURCING  msis'
   ||'  SET       process_flag     ='||G_ERROR_FLG||','
   ||'            error_text   = '||''''||lv_message_text||''''
   ||'  WHERE     NVL(source_partner_name,'||''''||NULL_CHAR||''''||') '
   ||'            <> '||''''||NULL_CHAR||''''
   ||'  AND       NVL(source_organization_code,'||''''||NULL_CHAR||''''||') '
   ||'            <> NVL(organization_code,'||''''||NULL_CHAR||''''||') '
   ||'  AND       source_type      = 2 '
   ||'  AND       sr_instance_code = :v_instance_code '
   ||'  AND       process_flag     = '||G_IN_PROCESS
   ||'  AND       batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SOURCE_PARTNER_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


   -- If source_type = 3 then , source_partner_name should not be NULL

   v_sql_stmt :=17;

   lv_sql_stmt :=
   'UPDATE        MSC_ST_ITEM_SOURCING  msis'
   ||'  SET       process_flag     ='||G_ERROR_FLG||','
   ||'            error_text   = '||''''||lv_message_text||''''
   ||'  WHERE    NVL(source_partner_name,'||''''||NULL_CHAR||''''||') '
   ||'         = '||''''||NULL_CHAR||''''
   ||'  AND      source_type      = 3 '
   ||'  AND      sr_instance_code = :v_instance_code '
   ||'  AND      process_flag     = '||G_IN_PROCESS
   ||'  AND      batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

 -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SOURCE_PARTNER_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


   -- Now derive the source_partner_id
    lv_return :=
    msc_st_util.derive_partner_org_id(p_table_name      => 'MSC_ST_ITEM_SOURCING',
                                    p_org_partner_name  =>'SOURCE_PARTNER_NAME',
                                    p_org_partner_id    =>'SOURCE_PARTNER_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_VENDOR,
                                    p_severity          => G_SEV3_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_batch_id          => lv_batch_id,
                                    p_debug             => v_debug,
                                    p_error_text        => lv_error_text);

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;

     -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SOURCE_PARTNER_SITE_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


   -- Derive source_partner_site_id

     lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
            (p_table_name          => 'MSC_ST_ITEM_SOURCING',
            p_partner_name         => 'SOURCE_PARTNER_NAME',
            p_partner_site_code    => 'SOURCE_PARTNER_SITE_CODE',
            p_partner_site_id      => 'SOURCE_PARTNER_SITE_ID',
            p_instance_code        => v_instance_code,
            p_partner_type         => G_VENDOR,
            p_batch_id             => lv_batch_id ,
            p_severity             => G_SEV3_ERROR,
            p_message_text         => lv_message_text,
            p_debug                => v_debug,
            p_error_text           => lv_error_text);


     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;

    -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SOURCE_ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


   -- If source_type = 1 then , source_organization_code should not be NULL

   v_sql_stmt :=17;

   lv_sql_stmt :=
   'UPDATE        MSC_ST_ITEM_SOURCING  msis'
   ||'  SET       process_flag     ='||G_ERROR_FLG||','
   ||'            error_text   = '||''''||lv_message_text||''''
   ||'  WHERE    NVL(source_organization_code,'||''''||NULL_CHAR||''''||') '
   ||'         = '||''''||NULL_CHAR||''''
   ||'  AND      source_type      = 1 '
   ||'  AND      sr_instance_code = :v_instance_code '
   ||'  AND      process_flag     = '||G_IN_PROCESS
   ||'  AND      batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


     -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SOURCE_ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Derive source_organization_id

    lv_return :=
    msc_st_util.derive_partner_org_id(p_table_name     => 'MSC_ST_ITEM_SOURCING',
                                    p_org_partner_name  =>'SOURCE_ORGANIZATION_CODE',
                                    p_org_partner_id    =>'SOURCE_ORGANIZATION_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_ORGANIZATION,
                                    p_severity          => G_SEV3_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_batch_id          => lv_batch_id,
                                    p_debug             => v_debug,
                                    p_error_text        => lv_error_text);

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;

   --  Udpate SOURCING_RULE_ID
   v_sql_stmt := 18;

  lv_sql_stmt:=
  'UPDATE        MSC_ST_ITEM_SOURCING  msis'
  ||' SET        sourcing_rule_id = (SELECT  local_id '
  ||'            FROM  msc_local_id_misc mlim'
  ||'            WHERE    mlim.entity_name= ''SOURCING_RULE_ID'' '
  ||'            AND      mlim.char1 =  msis.sr_instance_code'
  ||'            AND   NVL(mlim.char2,'||''''||NULL_CHAR||''''||') '
  ||'             =    NVL(msis.company_name,'||''''||NULL_CHAR||''''||') '
  ||'            AND   NVL(mlim.char3,'||''''||NULL_CHAR||''''||') '
  ||'             =    NVL(msis.organization_code,'||''''||NULL_CHAR||''''||') '
  ||'            AND      mlim.char4 =  msis.sourcing_rule_name)'
  ||' WHERE      sr_instance_code = :v_instance_code'
  ||' AND        process_flag     = '||G_IN_PROCESS
  ||' AND        batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

  --  Udpate ASSIGNMENT_SET_ID
   v_sql_stmt := 19;
  lv_sql_stmt:=
  'UPDATE        MSC_ST_ITEM_SOURCING  msis'
  ||' SET        assignment_set_id = (SELECT  local_id'
  ||'            FROM  msc_local_id_misc mlim'
  ||'            WHERE    mlim.entity_name= ''ASSIGNMENT_SET_ID'' '
  ||'            AND      mlim.char1 =  msis.sr_instance_code'
  ||'            AND   NVL(mlim.char2,'||''''||NULL_CHAR||''''||') '
  ||'             =    NVL(msis.company_name,'||''''||NULL_CHAR||''''||') '
  ||'            AND      mlim.char3 =  msis.assignment_set_name)'
  ||' WHERE      sr_instance_code = :v_instance_code'
  ||' AND        process_flag     = '||G_IN_PROCESS
  ||' AND        batch_id         = :lv_batch_id';


           MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

  --  Udpate SR_RECEIPT_ID

  v_sql_stmt := 20;

  lv_sql_stmt:=
  'UPDATE        MSC_ST_ITEM_SOURCING  msis'
  ||' SET        sr_receipt_id = (SELECT  local_id'
  ||'               FROM  msc_local_id_misc mlim'
  ||'               WHERE    mlim.entity_name= ''SR_RECEIPT_ID'' '
  ||'               AND      mlim.char1 =  msis.sr_instance_code'
  ||'               AND      NVL(mlim.char2,'||''''||NULL_CHAR||''''||') '
  ||'                        =    NVL(msis.company_name,'||''''||NULL_CHAR||''''||') '
  ||'               AND      NVL(mlim.char3,'||''''||NULL_CHAR||''''||') '
  ||'                        =    NVL(msis.organization_code,'||''''||NULL_CHAR||''''||') '
  ||'               AND      mlim.char4 =  msis.sourcing_rule_name'
  ||'               AND      NVL(mlim.char5, '||''''||NULL_CHAR||''''||') '
  ||'                       = NVL(msis.receipt_organization_code,'||''''||NULL_CHAR||''''||') '
  ||'               AND     NVL(mlim.char6, '||''''||NULL_CHAR||''''||') '
  ||'                       = NVL(msis.receipt_org_instance_code,'||''''||NULL_CHAR||''''||') '
  ||'              AND      mlim.date1 =  msis.effective_date)'
  ||' WHERE        sr_instance_code = :v_instance_code'
  ||' AND          process_flag     = '||G_IN_PROCESS
  ||' AND          batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;



  --  Udpate SR_SOURCE_ID
  v_sql_stmt := 21;

  lv_sql_stmt:=
  'UPDATE        MSC_ST_ITEM_SOURCING  msis'
  ||' SET        sr_source_id = (SELECT  local_id'
  ||'             FROM  msc_local_id_misc mlim'
  ||'             WHERE    mlim.entity_name= ''SR_SOURCE_ID'' '
  ||'             AND      mlim.char1 =  msis.sr_instance_code'
  ||'             AND      NVL(mlim.char2,'||''''||NULL_CHAR||''''||') '
  ||'                        =    NVL(msis.company_name,'||''''||NULL_CHAR||''''||') '
  ||'             AND   NVL(mlim.char3,'||''''||NULL_CHAR||''''||') '
  ||'                        =    NVL(msis.organization_code,'||''''||NULL_CHAR||''''||') '
  ||'             AND      mlim.char4 =  msis.sourcing_rule_name'
  ||'             AND   NVL(mlim.char5,'||''''||NULL_CHAR||''''||') '
  ||'                    =  NVL(msis.source_organization_code,'||''''||NULL_CHAR||''''||') '
  ||'             AND   NVL(mlim.char6, '||''''||NULL_CHAR||''''||') '
  ||'                    = NVL(msis.source_org_instance_code,'||''''||NULL_CHAR||''''||') '
  ||'             AND   NVL(mlim.char7,'||''''||NULL_CHAR||''''||') '
  ||'                   =  NVL(msis.source_partner_site_code,'||''''||NULL_CHAR||''''||') '
  ||'             AND   NVL(mlim.char8, '||''''||NULL_CHAR||''''||') '
  ||'                    =  NVL(msis.source_partner_name,'||''''||NULL_CHAR||''''||') '
  ||'                     AND   NVL(mlim.char9, '||''''||NULL_CHAR||''''||') '
  ||'                    = NVL(msis.receipt_organization_code,'||''''||NULL_CHAR||''''||') '
  ||'              AND   NVL(mlim.char10,'||''''||NULL_CHAR||''''||') '
  ||'                    =  NVL(msis.receipt_org_instance_code,'||''''||NULL_CHAR||''''||') '
  ||'              AND      mlim.date1 =  msis.effective_date)'
  ||' WHERE        sr_instance_code = :v_instance_code'
  ||' AND          process_flag     ='||G_IN_PROCESS
  ||' AND          batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


  -- Udpate      assignment_id
   v_sql_stmt := 22;

  lv_sql_stmt:=
  'UPDATE        MSC_ST_ITEM_SOURCING  msis'
  ||' SET        assignment_id = (SELECT  local_id '
  ||'                     FROM  msc_local_id_misc mlim'
  ||'                     WHERE    mlim.entity_name= ''ASSIGNMENT_ID'' '
  ||'                     AND      mlim.instance_id = '||v_instance_id
  ||'                     AND      mlim.char1 =  msis.sr_instance_code'
  ||'                     AND      NVL(mlim.char2,'||''''||NULL_CHAR||''''||') '
  ||'                          =    NVL(msis.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                     AND      NVL(mlim.char3,'||''''||NULL_CHAR||''''||') '
  ||'                          =    NVL(msis.organization_code,'||''''||NULL_CHAR||''''||') '
  ||'                     AND      mlim.char4 =  msis.assignment_set_name'
  ||'                     AND      NVL(mlim.char5,'||''''||NULL_CHAR||''''||') '
  ||'                              = NVL(msis.category_name,'||''''||NULL_CHAR||''''||') '
  ||'                     AND      NVL(mlim.char6,'||''''||NULL_CHAR||''''||') '
  ||'                              = NVL(msis.item_name,'||''''||NULL_CHAR||''''||')) '
  ||' WHERE        sr_instance_code = :v_instance_code'
  ||' AND          process_flag     ='||G_IN_PROCESS
  ||' AND          batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

  -- Set the message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DELETE_FAIL',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

   -- Error out records if any id derivation fails and deleted_flag = 1
     v_sql_stmt := 23;
    lv_sql_stmt:=
    '   UPDATE        MSC_ST_ITEM_SOURCING  msis'
    ||' SET           process_flag   = '||G_ERROR_FLG||','
    ||'               error_text   = '||''''||lv_message_text||''''
    ||' WHERE        ( NVL(sourcing_rule_id,'||NULL_VALUE||') ='||NULL_VALUE
    ||' OR            NVL(sr_receipt_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' OR            NVL(sr_receipt_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' OR            NVL(sr_source_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' OR            NVL(assignment_id,'||NULL_VALUE||') = '||NULL_VALUE||')'
    ||' AND           sr_instance_code = :v_instance_code'
    ||' AND          deleted_flag    = '||SYS_YES
    ||' AND          process_flag     ='||G_IN_PROCESS
    ||' AND          batch_id         = :lv_batch_id';


   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   --Call to customised validation.

    MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_ITEM_SOURCING',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Genearte sourcing rule id
     v_sql_stmt := 24;

     OPEN c3(lv_batch_id);
     FETCH c3 BULK COLLECT INTO lb_rowid ;

     IF c3%ROWCOUNT > 0  THEN

     FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_item_sourcing
        SET    sourcing_rule_id       = msc_st_sourcing_rule_id_s.NEXTVAL
        WHERE  rowid                  = lb_rowid(j);

    v_sql_stmt := 25;

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

    -- Insert into the LID table

       INSERT INTO  msc_local_id_misc
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char3,
       char4,
       SOURCE_ORG_ID,
       SOURCE_ASSIGNMENT_SET_ID,
       SOURCE_INVENTORY_ITEM_ID,
       SOURCE_CATEGORY_SET_ID,
       SOURCE_ASSIGNMENT_ID,
       SOURCE_CATEGORY_ID,
       SOURCE_SOURCING_RULE_ID,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
      SELECT
       sourcing_rule_id,
       st_transaction_id,
       v_instance_id,
       'SOURCING_RULE_ID',
       data_source_type,
       sr_instance_code,
       company_name,
       organization_code,
       sourcing_rule_name,
       SOURCE_ORG_ID,
       SOURCE_ASSIGNMENT_SET_ID,
       SOURCE_INVENTORY_ITEM_ID,
       SOURCE_CATEGORY_SET_ID,
       SOURCE_ASSIGNMENT_ID,
       SOURCE_CATEGORY_ID,
       SOURCE_SOURCING_RULE_ID,
       v_current_date,
       v_current_user,
       v_current_date,
       v_current_user
      FROM  msc_st_item_sourcing
      WHERE rowid = lb_rowid(j);

   END IF;
   CLOSE c3;

   --  Udpate SOURCING_RULE_ID
   v_sql_stmt := 26;

  lv_sql_stmt:=
  'UPDATE        MSC_ST_ITEM_SOURCING  msis'
  ||' SET        sourcing_rule_id = (SELECT  local_id '
  ||'            FROM  msc_local_id_misc mlim'
  ||'            WHERE    mlim.entity_name= ''SOURCING_RULE_ID'' '
  ||'            AND      mlim.char1 =  msis.sr_instance_code'
  ||'            AND   NVL(mlim.char2,'||''''||NULL_CHAR||''''||') '
  ||'             =    NVL(msis.company_name,'||''''||NULL_CHAR||''''||') '
  ||'            AND   NVL(mlim.char3,'||''''||NULL_CHAR||''''||') '
  ||'             =    NVL(msis.organization_code,'||''''||NULL_CHAR||''''||') '
  ||'            AND      mlim.char4 =  msis.sourcing_rule_name)'
  ||' WHERE      sr_instance_code = :v_instance_code'
  ||' AND        NVL(sourcing_rule_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||' AND        process_flag     = '||G_IN_PROCESS
  ||' AND        batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


   -- Genearte assignment_set_id

     v_sql_stmt := 27;

     OPEN c4(lv_batch_id);
     FETCH c4 BULK COLLECT INTO lb_rowid ;

     IF c4%ROWCOUNT > 0  THEN

     FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_item_sourcing
        SET    assignment_set_id      = msc_st_assignment_set_id_s.NEXTVAL
        WHERE  rowid                  = lb_rowid(j);

    v_sql_stmt := 28;

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

    -- Insert into the LID table

       INSERT INTO  msc_local_id_misc
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char3,
       SOURCE_ASSIGNMENT_SET_ID,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
      SELECT
       assignment_set_id,
       st_transaction_id,
       v_instance_id,
       'ASSIGNMENT_SET_ID',
       data_source_type,
       sr_instance_code,
       company_name,
       assignment_set_name,
       SOURCE_ASSIGNMENT_SET_ID,
       v_current_date,
       v_current_user,
       v_current_date,
       v_current_user
      FROM  msc_st_item_sourcing
      WHERE rowid = lb_rowid(j);

   END IF;
   CLOSE c4;

  --  Udpate ASSIGNMENT_SET_ID
   v_sql_stmt := 29;
  lv_sql_stmt:=
  'UPDATE        MSC_ST_ITEM_SOURCING  msis'
  ||' SET        assignment_set_id = (SELECT  local_id'
  ||'            FROM  msc_local_id_misc mlim'
  ||'            WHERE    mlim.entity_name= ''ASSIGNMENT_SET_ID'' '
  ||'            AND      mlim.char1 =  msis.sr_instance_code'
  ||'            AND   NVL(mlim.char2,'||''''||NULL_CHAR||''''||') '
  ||'             =    NVL(msis.company_name,'||''''||NULL_CHAR||''''||') '
  ||'            AND      mlim.char3 =  msis.assignment_set_name)'
  ||' WHERE      sr_instance_code = :v_instance_code'
  ||' AND        NVL(assignment_set_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||' AND        process_flag     = '||G_IN_PROCESS
  ||' AND        batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   -- Genearte sr_receipt_id
     v_sql_stmt := 30;

     OPEN c5(lv_batch_id);
     FETCH c5 BULK COLLECT INTO lb_rowid ;

     IF c5%ROWCOUNT > 0  THEN

     FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_item_sourcing
        SET    sr_receipt_id      = msc_st_sr_receipt_id_s.NEXTVAL
        WHERE  rowid               = lb_rowid(j);

    v_sql_stmt := 31;

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

    -- Insert into the LID table

       INSERT INTO  msc_local_id_misc
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char3,
       char4,
       char5,
       char6,
       date1,
       SOURCE_ORG_ID,
       SOURCE_ASSIGNMENT_SET_ID,
       SOURCE_INVENTORY_ITEM_ID,
       SOURCE_CATEGORY_SET_ID,
       SOURCE_CATEGORY_ID,
       SOURCE_ASSIGNMENT_ID,
       SOURCE_SOURCING_RULE_ID,
       SOURCE_SR_RECEIPT_ID,
       SOURCE_RECEIPT_ORGANIZATION_ID,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
      SELECT
      sr_receipt_id,
      st_transaction_id,
      v_instance_id,
      'SR_RECEIPT_ID',
      data_source_type,
      v_instance_code,
      company_name,
      organization_code,
      sourcing_rule_name,
      receipt_organization_code,
      receipt_org_instance_code,
      effective_date,
      SOURCE_ORG_ID,
      SOURCE_ASSIGNMENT_SET_ID,
      SOURCE_INVENTORY_ITEM_ID,
      SOURCE_CATEGORY_SET_ID,
      SOURCE_CATEGORY_ID,
      SOURCE_ASSIGNMENT_ID,
      SOURCE_SOURCING_RULE_ID,
      SOURCE_SR_RECEIPT_ID,
      SOURCE_RECEIPT_ORGANIZATION_ID,
      v_current_date,
      v_current_user,
      v_current_date,
      v_current_user
     FROM  msc_st_item_sourcing
      WHERE rowid = lb_rowid(j);

   END IF;
   CLOSE c5;

  --  Udpate SR_RECEIPT_ID

  v_sql_stmt := 32;

  lv_sql_stmt:=
  'UPDATE        MSC_ST_ITEM_SOURCING  msis'
  ||' SET        sr_receipt_id = (SELECT  local_id'
  ||'               FROM  msc_local_id_misc mlim'
  ||'               WHERE    mlim.entity_name= ''SR_RECEIPT_ID'' '
  ||'               AND      mlim.char1 =  msis.sr_instance_code'
  ||'               AND      NVL(mlim.char2,'||''''||NULL_CHAR||''''||') '
  ||'                        =    NVL(msis.company_name,'||''''||NULL_CHAR||''''||') '
  ||'               AND   NVL(mlim.char3,'||''''||NULL_CHAR||''''||') '
  ||'                        =    NVL(msis.organization_code,'||''''||NULL_CHAR||''''||') '
  ||'               AND      mlim.char4 =  msis.sourcing_rule_name'
  ||'               AND      NVL(mlim.char5, '||''''||NULL_CHAR||''''||') '
  ||'                       = NVL(msis.receipt_organization_code,'||''''||NULL_CHAR||''''||') '
  ||'               AND     NVL(mlim.char6, '||''''||NULL_CHAR||''''||') '
  ||'                       = NVL(msis.receipt_org_instance_code,'||''''||NULL_CHAR||''''||') '
  ||'               AND      mlim.date1 =  msis.effective_date)'
  ||' WHERE        sr_instance_code = :v_instance_code'
  ||' AND          NVL(sr_receipt_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||' AND          process_flag     = '||G_IN_PROCESS
  ||' AND          batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


  -- Genearte sr_source_id

    v_sql_stmt := 33;

     OPEN c6(lv_batch_id);
     FETCH c6 BULK COLLECT INTO lb_rowid ;

     IF c6%ROWCOUNT > 0  THEN

     FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_item_sourcing
        SET    sr_source_id        = msc_st_sr_source_id_s.NEXTVAL
        WHERE  rowid               = lb_rowid(j);

    v_sql_stmt := 34;

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

    -- Insert into the LID table

       INSERT INTO  msc_local_id_misc
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char3,
       char4,
       char5,
       char6,
       char7,
       char8,
       char9,
       char10,
       date1,
       SOURCE_ORG_ID,
       SOURCE_ASSIGNMENT_SET_ID,
       SOURCE_INVENTORY_ITEM_ID,
       SOURCE_CATEGORY_SET_ID,
       SOURCE_CATEGORY_ID,
       SOURCE_ASSIGNMENT_ID,
       SOURCE_SOURCING_RULE_ID,
       SOURCE_SR_RECEIPT_ID,
       SOURCE_RECEIPT_ORGANIZATION_ID,
       SOURCE_SOURCE_PARTNER_ID,
       SOURCE_SOURCE_PARTNER_SITE_ID,
       SOURCE_SOURCE_ORGANIZATION_ID,
       SOURCE_SR_SOURCE_ID,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
      SELECT
       sr_source_id,
       st_transaction_id,
       v_instance_id,
       'SR_SOURCE_ID',
       data_source_type,
       sr_instance_code,
       company_name,
       organization_code,
       sourcing_rule_name,
       source_organization_code,
       source_org_instance_code,
       source_partner_site_code,
       source_partner_name,
       receipt_organization_code,
       receipt_org_instance_code,
       effective_date,
       SOURCE_ORG_ID,
       SOURCE_ASSIGNMENT_SET_ID,
       SOURCE_INVENTORY_ITEM_ID,
       SOURCE_CATEGORY_SET_ID,
       SOURCE_CATEGORY_ID,
       SOURCE_ASSIGNMENT_ID,
       SOURCE_SOURCING_RULE_ID,
       SOURCE_SR_RECEIPT_ID,
       SOURCE_RECEIPT_ORGANIZATION_ID,
       SOURCE_SOURCE_PARTNER_ID,
       SOURCE_SOURCE_PARTNER_SITE_ID,
       SOURCE_SOURCE_ORGANIZATION_ID,
       SOURCE_SR_SOURCE_ID,
       v_current_date,
       v_current_user,
       v_current_date,
       v_current_user
      FROM  msc_st_item_sourcing
      WHERE rowid = lb_rowid(j);

     END IF;
    CLOSE c6;

  --  Udpate SR_SOURCE_ID
  v_sql_stmt := 35;

  lv_sql_stmt:=
  'UPDATE        MSC_ST_ITEM_SOURCING  msis'
  ||' SET        sr_source_id = (SELECT  local_id'
  ||'             FROM  msc_local_id_misc mlim'
  ||'             WHERE    mlim.entity_name= ''SR_SOURCE_ID'' '
  ||'             AND      mlim.char1 =  msis.sr_instance_code'
  ||'             AND      NVL(mlim.char2,'||''''||NULL_CHAR||''''||') '
  ||'                        =    NVL(msis.company_name,'||''''||NULL_CHAR||''''||') '
  ||'             AND      NVL(mlim.char3,'||''''||NULL_CHAR||''''||') '
  ||'                        =    NVL(msis.organization_code,'||''''||NULL_CHAR||''''||') '
  ||'             AND      mlim.char4 =  msis.sourcing_rule_name'
  ||'             AND   NVL(mlim.char5,'||''''||NULL_CHAR||''''||') '
  ||'                    =  NVL(msis.source_organization_code,'||''''||NULL_CHAR||''''||') '
  ||'             AND   NVL(mlim.char6, '||''''||NULL_CHAR||''''||') '
  ||'                    = NVL(msis.source_org_instance_code,'||''''||NULL_CHAR||''''||') '
  ||'             AND   NVL(mlim.char7,'||''''||NULL_CHAR||''''||') '
  ||'                   =  NVL(msis.source_partner_site_code,'||''''||NULL_CHAR||''''||') '
  ||'             AND   NVL(mlim.char8, '||''''||NULL_CHAR||''''||') '
  ||'                    =  NVL(msis.source_partner_name,'||''''||NULL_CHAR||''''||') '
  ||'                     AND   NVL(mlim.char9, '||''''||NULL_CHAR||''''||') '
  ||'                    = NVL(msis.receipt_organization_code,'||''''||NULL_CHAR||''''||') '
  ||'              AND   NVL(mlim.char10,'||''''||NULL_CHAR||''''||') '
  ||'                    =  NVL(msis.receipt_org_instance_code,'||''''||NULL_CHAR||''''||') '
  ||'              AND      mlim.date1 =  msis.effective_date)'
  ||' WHERE        sr_instance_code = :v_instance_code'
  ||' AND          NVL(sr_source_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||' AND          process_flag     ='||G_IN_PROCESS
  ||' AND          batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;



   -- Genearte assignment id

    v_sql_stmt := 36;

     OPEN c7(lv_batch_id);
     FETCH c7 BULK COLLECT INTO lb_rowid ;

     IF c7%ROWCOUNT > 0  THEN

     FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_item_sourcing
        SET    assignment_id        = msc_st_assignment_id_s.NEXTVAL
        WHERE  rowid               = lb_rowid(j);

    v_sql_stmt := 37;

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
    -- Insert into the LID table

       INSERT INTO  msc_local_id_misc
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char3,
       char4,
       char5,
       char6,
       SOURCE_ORG_ID,
       SOURCE_ASSIGNMENT_SET_ID,
       SOURCE_INVENTORY_ITEM_ID,
       SOURCE_CATEGORY_SET_ID,
       SOURCE_CATEGORY_ID,
       SOURCE_ASSIGNMENT_ID,
       SOURCE_SOURCING_RULE_ID,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
      SELECT
       assignment_id,
       st_transaction_id,
       v_instance_id,
       'ASSIGNMENT_ID',
       data_source_type,
       sr_instance_code,
       company_name,
       organization_code,
       assignment_set_name,
       category_name,
       item_name,
       SOURCE_ORG_ID,
       SOURCE_ASSIGNMENT_SET_ID,
       SOURCE_INVENTORY_ITEM_ID,
       SOURCE_CATEGORY_SET_ID,
       SOURCE_CATEGORY_ID,
       SOURCE_ASSIGNMENT_ID,
       SOURCE_SOURCING_RULE_ID,
       v_current_date,
       v_current_user,
       v_current_date,
       v_current_user
      FROM  msc_st_item_sourcing
      WHERE rowid = lb_rowid(j);

     END IF;
    CLOSE c7;

  -- Update      assignment_id
   v_sql_stmt := 38;

  lv_sql_stmt:=
  'UPDATE        MSC_ST_ITEM_SOURCING  msis'
  ||' SET        assignment_id = (SELECT  local_id '
  ||'                     FROM  msc_local_id_misc mlim'
  ||'                     WHERE    mlim.entity_name= ''ASSIGNMENT_ID'' '
  ||'                     AND      mlim.instance_id = '||v_instance_id
  ||'                     AND      mlim.char1 =  msis.sr_instance_code'
  ||'                     AND      NVL(mlim.char2,'||''''||NULL_CHAR||''''||') '
  ||'                          =    NVL(msis.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                     AND      NVL(mlim.char3,'||''''||NULL_CHAR||''''||') '
  ||'                          =    NVL(msis.organization_code,'||''''||NULL_CHAR||''''||') '
  ||'                     AND      mlim.char4 =  msis.assignment_set_name'
  ||'                     AND      NVL(mlim.char5,'||''''||NULL_CHAR||''''||') '
  ||'                              = NVL(msis.category_name,'||''''||NULL_CHAR||''''||') '
  ||'                     AND      NVL(mlim.char6,'||''''||NULL_CHAR||''''||') '
  ||'                              = NVL(msis.item_name,'||''''||NULL_CHAR||''''||')) '
  ||' WHERE       sr_instance_code = :v_instance_code'
  ||' AND         NVL(assignment_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||' AND         process_flag     ='||G_IN_PROCESS
  ||' AND         batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


   v_sql_stmt := 39;
   lv_sql_stmt :=
   'INSERT INTO MSC_ST_SOURCING_RULES'
   ||' ( SR_SOURCING_RULE_ID,'
   ||' SOURCING_RULE_NAME,'
   ||' ORGANIZATION_ID,'
   ||' DESCRIPTION,'
   ||' STATUS,'
   ||' SOURCING_RULE_TYPE,'
   ||' PLANNING_ACTIVE,'
   ||' DELETED_FLAG,'
   ||' SR_INSTANCE_ID,'
   ||' REFRESH_ID,'
   ||' LAST_UPDATED_BY,'
   ||' LAST_UPDATE_DATE,'
   ||' CREATED_BY,'
   ||' CREATION_DATE)'
   ||' SELECT DISTINCT '
   ||' SOURCING_RULE_ID,'
   ||' SOURCING_RULE_NAME,'
   ||' ORGANIZATION_ID,'
   ||' DESCRIPTION,'
   ||' 1, '/* Hard coding as 1*/
   ||' 1, '/*Always as sourcing rule not Bill of Distribution*/
   ||' PLANNING_ACTIVE,'
   ||' DELETED_FLAG,'
   ||  v_instance_id||','
   ||' REFRESH_ID,'
   ||' LAST_UPDATED_BY,'
   ||' LAST_UPDATE_DATE,'
   ||' CREATED_BY,'
   ||' CREATION_DATE '
   ||' FROM MSC_ST_ITEM_SOURCING mis'
   ||' WHERE SR_INSTANCE_CODE = :v_instance_code'
   ||' AND   process_flag      = '||G_IN_PROCESS
   ||' AND   batch_id          = :lv_batch_id'
    ||' AND    (SOURCING_RULE_ID)' /* Added for Bug 8485612*/
    ||' NOT IN ( SELECT MSR.SR_SOURCING_RULE_ID'
    ||'                 FROM   MSC_ST_SOURCING_RULES msr'
    ||'               WHERE msr.SR_INSTANCE_ID='||v_instance_id||')'
   ;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   v_sql_stmt := 40;
   lv_sql_stmt :=
   'INSERT INTO MSC_ST_SR_RECEIPT_ORG'
   ||' ( SR_RECEIPT_ID,'
   ||' SR_SR_RECEIPT_ORG,'
   ||' RECEIPT_ORG_INSTANCE_ID,'
   ||' SOURCING_RULE_ID,'
   ||' EFFECTIVE_DATE,'
   ||' DISABLE_DATE,'
   ||' DELETED_FLAG,'
   ||' SR_INSTANCE_ID,'
   ||' REFRESH_ID,'
   ||' LAST_UPDATED_BY,'
   ||' LAST_UPDATE_DATE,'
   ||' CREATED_BY,'
   ||' CREATION_DATE)'
   ||' SELECT DISTINCT'
   ||' SR_RECEIPT_ID,'
   ||' RECEIPT_ORGANIZATION_ID,'
   ||  v_instance_id||','
   ||' SOURCING_RULE_ID,'
   ||' EFFECTIVE_DATE,'
   ||' DISABLE_DATE,'
   ||' DELETED_FLAG,'
   ||  v_instance_id||','
   ||' REFRESH_ID,'
   ||' LAST_UPDATED_BY,'
   ||' LAST_UPDATE_DATE,'
   ||' CREATED_BY,'
   ||' CREATION_DATE '
   ||' FROM MSC_ST_ITEM_SOURCING mis'
   ||' WHERE SR_INSTANCE_CODE = :v_instance_code'
   ||' AND   PROCESS_FLAG =    '||G_IN_PROCESS
   ||' AND   batch_id          = :lv_batch_id'
   ||' AND    (SR_RECEIPT_ID)'
   ||' NOT IN (SELECT MSR.SR_RECEIPT_ID '  /* Added for Bug 8485612*/
   ||'                    FROM   MSC_ST_SR_RECEIPT_ORG msr'
   ||'                    WHERE msr.RECEIPT_ORG_INSTANCE_ID= '||v_instance_id||')'
   ;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   v_sql_stmt := 41;

  lv_sql_stmt :=
  'INSERT INTO MSC_ST_SR_SOURCE_ORG'
  ||' ( SR_SR_SOURCE_ID,'
  ||'   SR_RECEIPT_ID,'
  ||'  SOURCE_ORGANIZATION_ID,'
  ||'  SOURCE_ORG_INSTANCE_ID,'
  ||'  ALLOCATION_PERCENT,'
  ||'  SOURCE_TYPE,'
  ||'  RANK,'
  ||'  SOURCE_PARTNER_ID,'
  ||'  SOURCE_PARTNER_SITE_ID,'
  ||'  SHIP_METHOD,'
  ||'  DELETED_FLAG,'
  ||'  SR_INSTANCE_ID,'
  ||' REFRESH_ID,'
  ||' LAST_UPDATED_BY,'
  ||' LAST_UPDATE_DATE,'
  ||' CREATED_BY,'
  ||' CREATION_DATE)'
  ||' select distinct'
  ||' SR_SOURCE_ID,'
  ||' SR_RECEIPT_ID,'
  ||' SOURCE_ORGANIZATION_ID,'
  ||  v_instance_id||','
  ||' ALLOCATION_PERCENT,'
  ||' SOURCE_TYPE,'
  ||' RANK,'
  ||' SOURCE_PARTNER_ID,'
  ||' SOURCE_PARTNER_SITE_ID,'
  ||' SHIP_METHOD,'
  ||' DELETED_FLAG,'
  ||  v_instance_id||','
  ||' REFRESH_ID,'
  ||' LAST_UPDATED_BY,'
  ||' LAST_UPDATE_DATE,'
  ||' CREATED_BY,'
  ||' CREATION_DATE '
  ||' FROM MSC_ST_ITEM_SOURCING mis'
  ||' where SR_INSTANCE_CODE = :v_instance_code'
  ||' AND PROCESS_FLAG       = '||G_IN_PROCESS
  ||' AND   batch_id         = :lv_batch_id'
  ||' AND   (SR_SOURCE_ID)'
  ||' NOT IN ( SELECT MSR.SR_SR_SOURCE_ID ' /* Added for Bug 8485612*/
  ||'                    FROM   MSC_ST_SR_SOURCE_ORG msr'
  ||'                    WHERE  msr.SOURCE_ORG_INSTANCE_ID= '||v_instance_id||')'
  ;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


  v_sql_stmt := 42;
  lv_sql_stmt :=
  'insert into MSC_ST_ASSIGNMENT_SETS'
   ||'(SR_ASSIGNMENT_SET_ID,'
   ||' ASSIGNMENT_SET_NAME,'
   /*||' DESCRIPTION,'*/
   ||' DELETED_FLAG,'
   ||' SR_INSTANCE_ID,'
   ||' REFRESH_ID,'
   ||' LAST_UPDATED_BY,'
   ||' LAST_UPDATE_DATE,'
   ||' CREATED_BY,'
   ||' CREATION_DATE)'
   ||' SELECT DISTINCT'
   ||'  ASSIGNMENT_SET_ID,'
   ||'  SR_INSTANCE_CODE||'':''||ASSIGNMENT_SET_NAME,'
  /* ||'  NULL,'  */
   ||'  DELETED_FLAG,'
   ||   v_instance_id||','
   ||' REFRESH_ID,'
   ||' LAST_UPDATED_BY,'
   ||' LAST_UPDATE_DATE,'
   ||' CREATED_BY,'
   ||' CREATION_DATE '
   ||'  FROM MSC_ST_ITEM_SOURCING mis'
   ||'  where SR_INSTANCE_CODE = :v_instance_code'
   ||' AND PROCESS_FLAG = '||G_IN_PROCESS
   ||' AND   batch_id   = :lv_batch_id'
    ||' AND    (ASSIGNMENT_SET_ID)'
    ||' NOT IN( SELECT MSR.SR_ASSIGNMENT_SET_ID ' /* Added for Bug 8485612*/
   ||'      FROM   MSC_ST_ASSIGNMENT_SETS msr'
   ||'      WHERE  msr.SR_INSTANCE_ID='||v_instance_id||')'
    ;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

  v_sql_stmt := 43;
  lv_sql_stmt :=
  'insert into MSC_ST_SR_ASSIGNMENTS'
  ||'  ( SR_ASSIGNMENT_ID,'
  ||'  ASSIGNMENT_TYPE,'
  ||'  SOURCING_RULE_ID,'
  ||'  SOURCING_RULE_TYPE,'
  ||'  ASSIGNMENT_SET_ID,'
  ||'  INVENTORY_ITEM_ID,'
  ||'  CATEGORY_NAME,'
  ||'  CATEGORY_SET_IDENTIFIER,'
  ||'  SR_ASSIGNMENT_INSTANCE_ID,'
  ||'  ORGANIZATION_ID,'
  ||'  SR_INSTANCE_ID,'
  ||'  DELETED_FLAG, '
  ||'  REFRESH_ID,'
  ||'  LAST_UPDATED_BY,'
  ||'  LAST_UPDATE_DATE,'
  ||'  CREATED_BY,'
  ||'  CREATION_DATE )'
  ||'select distinct '
  ||'  ASSIGNMENT_ID,'
  ||'  ASSIGNMENT_TYPE,'
  ||'  SOURCING_RULE_ID,'
  ||'  1,'
  ||'  ASSIGNMENT_SET_ID,'
  ||'  INVENTORY_ITEM_ID,'
  ||'  CATEGORY_NAME,'
  ||'  CATEGORY_SET_ID,'
  ||   v_instance_id||','
  ||'  ORGANIZATION_ID,'
  ||   v_instance_id||','
  ||'  DELETED_FLAG,'
  ||' REFRESH_ID,'
  ||' LAST_UPDATED_BY,'
  ||' LAST_UPDATE_DATE,'
  ||' CREATED_BY,'
  ||' CREATION_DATE '
  ||'  from MSC_ST_ITEM_SOURCING mis'
  ||'  where SR_INSTANCE_CODE = :v_instance_code'
  ||' AND PROCESS_FLAG = '||G_IN_PROCESS
  ||' AND   batch_id   = :lv_batch_id'
   ||' AND   (ASSIGNMENT_ID)'
   ||' NOT IN( SELECT MSR.SR_ASSIGNMENT_ID ' /* Added for Bug 8485612*/
   ||'                    FROM   MSC_ST_SR_ASSIGNMENTS msr'
    ||'                    WHERE  msr.SR_ASSIGNMENT_INSTANCE_ID='||v_instance_id||' )'
  ;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   -- Set the processf flag as Valid and poulate instance_id
    lv_return :=
    MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name     => 'MSC_ST_ITEM_SOURCING',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug,
                               p_batch_id       => lv_batch_id);

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;

    -- At the end calling  the LOG_ERROR for logging all errored out records

   lv_return :=
   msc_st_util.log_error(p_table_name    => 'MSC_ST_ITEM_SOURCING',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_error_text    => lv_error_text,
                         p_message_text  => NULL,
                         p_debug         => v_debug,
                         p_batch_id      => lv_batch_id  );

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;

    COMMIT;
   END LOOP;


 EXCEPTION
    WHEN too_many_rows THEN
         lv_error_text := substr('MSC_CL_PRE_PROCESS.LOAD_SOURCING_RULES'||'('
                        ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
         ROLLBACK ;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
        ROLLBACK;

   WHEN OTHERS THEN
       lv_error_text :=  substr('MSC_CL_PRE_PROCESS.LOAD_SOURCING_RULE'||'('
                        ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

   END LOAD_SOURCING_RULE;


  /*==========================================================================+
  | DESCRIPTION  : This function performs the validation and loads the data   |
  |                for business object Project and Task.                      |
  +==========================================================================*/
  PROCEDURE  LOAD_PROJ_TASK  IS

  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  TYPE CurTyp       IS REF CURSOR;
  c1                CurTyp;
  lb_rowid          RowidTab;

  lv_local_id       NUMBER;
  lv_column_names   VARCHAR2(5000);     -- Stores cocatenated column names
  lv_return         NUMBER;
  lv_error_text     VARCHAR2(250);
  lv_where_str      VARCHAR2(5000);
  lv_sql_stmt       VARCHAR2(5000);
  lv_cursor_stmt    VARCHAR2(5000);
  lv_batch_id       msc_st_project_tasks.batch_id%TYPE;
  lv_message_text   msc_errors.error_text%TYPE;

  ex_logging_err    EXCEPTION;

  CURSOR c2(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_project_tasks
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

    CURSOR c3(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_project_tasks
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(project_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag             = SYS_NO
    GROUP BY sr_instance_code,company_name,
             project_number  ;

    CURSOR c4(p_batch_id NUMBER) IS
    SELECT MAX(rowid)
    FROM   msc_st_project_tasks
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(task_id,NULL_VALUE) = NULL_VALUE
    AND    NVL(task_number,NULL_CHAR) <> NULL_CHAR
    AND    deleted_flag     = SYS_NO
    GROUP BY sr_instance_code,company_name,
             project_number,task_number ;


    CURSOR c5(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_project_tasks
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(costing_group_id,NULL_VALUE) = NULL_VALUE
    AND    NVL(costing_group_code,NULL_CHAR)  <> NULL_CHAR
    AND    deleted_flag     = SYS_NO
    GROUP BY sr_instance_code,company_name,
             costing_group_code  ;

  BEGIN


    --Duplicate records check for the records whose source is XML

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 01;
  lv_sql_stmt:=
  'UPDATE       msc_st_project_tasks mspt1 '
  ||' SET       process_flag ='||G_ERROR_FLG||','
  ||'           error_text   = '||''''||lv_message_text||''''
  ||' WHERE     message_id < ( SELECT max(message_id) FROM msc_st_project_tasks mspt2'
  ||'               WHERE mspt2.sr_instance_code   = mspt1.sr_instance_code'
  ||'               AND   NVL(mspt2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(mspt1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'               AND   mspt2.organization_code  = mspt1.organization_code'
  ||'               AND   mspt2.project_number     = mspt1.project_number'
  ||'               AND  NVL(mspt2.task_number, '||''''||NULL_CHAR||''''||') '
  ||'                    = NVL(mspt1.task_number, '||''''||NULL_CHAR||''''||') '
  ||'               AND   mspt2.process_flag        ='||G_IN_PROCESS
  ||'               AND    NVL(mspt2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
  ||'  AND     mspt1.process_flag ='|| G_IN_PROCESS
  ||'  AND     mspt1.sr_instance_code = :v_instance_code'
  ||'  AND     NVL(mspt1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

   --Duplicate records check for the records whose source is batch load

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 02;

  lv_sql_stmt :=
  'UPDATE      msc_st_project_tasks mspt1'
  ||' SET      process_flag ='|| G_ERROR_FLG||','
  ||'          error_text   = '||''''||lv_message_text||''''
  ||' WHERE    EXISTS ( SELECT 1 FROM msc_st_project_tasks mspt2'
  ||'               WHERE mspt2.sr_instance_code   = mspt1.sr_instance_code'
  ||'               AND   NVL(mspt2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(mspt1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'               AND   mspt2.organization_code  = mspt1.organization_code'
  ||'               AND   mspt2.project_number      = mspt1.project_number'
  ||'               AND   NVL(mspt2.task_number,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(mspt1.task_number, '||''''||NULL_CHAR||''''||') '
  ||'               AND   mspt2.process_flag        ='||G_IN_PROCESS
  ||'               AND NVL(mspt2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||'               GROUP BY sr_instance_code,organization_code,company_name,'
  ||'               project_number,task_number '
  ||'               HAVING COUNT(*) >1 )'
  ||' AND     mspt1.process_flag = '||G_IN_PROCESS
  ||' AND     mspt1.sr_instance_code = :v_instance_code'
  ||' AND     NVL(mspt1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  lv_column_names :=
  'PROJECT_NUMBER               ||''~''||'
  ||'SEIBAN_NUMBER_FLAG         ||''~''||'
  ||'ORGANIZATION_CODE          ||''~''||'
  ||'TASK_NUMBER                ||''~''||'
  ||'SR_INSTANCE_CODE           ||''~''||'
  ||'PROJECT_DESCRIPTION        ||''~''||'
  ||'PLANNING_GROUP             ||''~''||'
  ||'WIP_ACCT_CLASS_CODE        ||''~''||'
  ||'COSTING_GROUP_CODE         ||''~''||'
  ||'MATERIAL_ACCOUNT           ||''~''||'
  ||'PROJECT_START_DATE         ||''~''||'
  ||'PROJECT_COMPLETION_DATE    ||''~''||'
  ||'DESCRIPTION                ||''~''||'
  ||'MANAGER                    ||''~''||'
  ||'START_DATE                 ||''~''||'
  ||'END_DATE                   ||''~''||'
  ||'MANAGER_CONTACT            ||''~''||'
  ||' COMPANY_NAME              ||''~''||'
  ||' DELETED_FLAG ' ;


   LOOP
      v_sql_stmt := 03;
      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      ' UPDATE msc_st_project_tasks '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c2(lv_batch_id);
      FETCH c2 BULK COLLECT INTO lb_rowid;
      CLOSE c2;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_project_tasks
      SET  st_transaction_id = msc_st_project_tasks_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);


      -- Set the  message
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_PROJECT_TASKS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

       --Deletion is not allowed on this table.
      v_sql_stmt := 06;
      lv_sql_stmt :=
      ' UPDATE     msc_st_project_tasks '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

       -- Set the error message
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PROJECT_NUMBER');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out record if project_number is NULL

      v_sql_stmt := 07;
     lv_sql_stmt :=
      ' UPDATE  msc_st_project_tasks '
      ||' SET   process_flag        = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE NVL(project_number,'||''''||NULL_CHAR||''''||')'
      ||'       = '||''''||NULL_CHAR||''''
      ||' AND   batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND   sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


     -- Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Derive  organization id
     lv_return :=
     MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name     =>'MSC_ST_PROJECT_TASKS',
                                    p_org_partner_name  =>'ORGANIZATION_CODE',
                                    p_org_partner_id    =>'ORGANIZATION_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_ORGANIZATION,
                                    p_severity          => G_SEV_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_batch_id          => lv_batch_id,
                                    p_debug             => v_debug,
                                    p_error_text        => lv_error_text);

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check DELETE_FLAG column has valid value or not and if not set it to SYS_NO
      -- Log error procedure inserts warning and also defaults the delete flag

     lv_where_str :=
     ' AND NVL(deleted_flag,'||NULL_VALUE||') <>'||SYS_NO;

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_PROJECT_TASKS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DELETED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => SYS_NO);


      IF lv_return <> 0 THEN
          RAISE ex_logging_err;
      END IF;


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SEIBAN_NUMBER_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_SEIBAN_NUMBER_FLAG );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Default SEIBAN NUMBER FLAG as 2 if not in (1,2)

    lv_where_str := ' AND NVL(seiban_number_flag,'||NULL_VALUE||') NOT IN (1,2) ';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_PROJECT_TASKS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'SEIBAN_NUMBER_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => G_SEIBAN_NUMBER_FLAG);

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;

    -- Derive Project id
     lv_return :=
     MSC_ST_UTIL.DERIVE_PROJ_TASK_ID(p_table_name => 'MSC_ST_PROJECT_TASKS',
                             p_proj_col_name      => 'PROJECT_NUMBER',
                             p_proj_task_col_id   => 'PROJECT_ID',
                             p_instance_code      => v_instance_code,
                             p_entity_name        => 'PROJECT_ID',
                             p_batch_id           => lv_batch_id,
                             p_error_text         => lv_error_text,
                             p_debug              => v_debug,
                             p_row                => lv_column_names);

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;

     -- Derive task id
     lv_return :=
     MSC_ST_UTIL.DERIVE_PROJ_TASK_ID(p_table_name =>'MSC_ST_PROJECT_TASKS',
                             p_proj_col_name      =>'PROJECT_NUMBER',
                             p_proj_task_col_id   =>'TASK_ID',
                             p_task_col_name      =>'TASK_NUMBER',
                             p_instance_code      => v_instance_code,
                             p_entity_name        => 'TASK_ID',
                             p_batch_id           =>lv_batch_id,
                             p_error_text         =>lv_error_text,
                             p_debug              => v_debug,
                             p_row                =>lv_column_names);

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;

    -- UPdate task_name with the task_number

     v_sql_stmt := 07;
    lv_sql_stmt :=
    'UPDATE msc_st_project_tasks '
    ||' SET    task_name = task_number'
    ||' WHERE  sr_instance_code = :v_instance_code'
    ||' AND    process_flag = '||G_IN_PROCESS
    ||' AND    NVL(task_number,'||''''||NULL_CHAR||''''||') '
    ||'         <> '||''''||NULL_CHAR||''''
    ||' AND    batch_id = :lv_batch_id ';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    -- derive costing_group_id

     v_sql_stmt := 08;

     lv_sql_stmt :=
     'UPDATE        msc_st_project_tasks   mstp'
     ||' SET        costing_group_id   = ( SELECT local_id '
     ||'           FROM msc_local_id_misc mlim'
     ||'           WHERE     mlim.char1       = mstp.sr_instance_code'
     ||'           AND   NVL(mlim.char2,'||''''||NULL_CHAR||''''||') '
     ||'              =    NVL(mstp.company_name,'||''''||NULL_CHAR||''''||') '
/*     ||'           AND       mlim.char3       = mstp.organization_code'*/
     ||'           AND       mlim.char4       = mstp.costing_group_code'
     ||'           AND       mlim.entity_name = ''COSTING_GROUP_ID'')'
     ||' WHERE      sr_instance_code = :v_instance_code'
     ||' AND        NVL(costing_group_code, '||''''||NULL_CHAR||''''||') '
     ||'         <> '||''''||NULL_CHAR||''''
     ||' AND        process_flag     = '||G_IN_PROCESS
     ||' AND        batch_id         = :lv_batch_id' ;



            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   --Call to customised validation.
    MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_PROJECT_TASKS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Generate costing_group_id where cost group code is Not null but id is Null

     v_sql_stmt := 09;

     OPEN c5(lv_batch_id);
     FETCH c5 BULK COLLECT INTO lb_rowid ;

     IF c5%ROWCOUNT > 0  THEN

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_project_tasks
        SET    costing_group_id          = msc_st_costing_group_id_s.NEXTVAL
        WHERE  rowid                     = lb_rowid(j);


    v_sql_stmt := 10;

     FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
    -- Insert into the LID table  with the  user defined key

       INSERT INTO  msc_local_id_misc
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char3,
       char4,
       SOURCE_ORG_ID,
       SOURCE_COSTING_GROUP_ID,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
      SELECT
       costing_group_id,
       st_transaction_id,
       v_instance_id,
       'COSTING_GROUP_ID',
       data_source_type,
       sr_instance_code,
       company_name,
       organization_code,
       costing_group_code,
       SOURCE_ORG_ID,
       SOURCE_COSTING_GROUP_ID,
       v_current_date,
       v_current_user,
       v_current_date,
       v_current_user
      FROM msc_st_project_tasks
      WHERE rowid = lb_rowid(j);
   END IF;
   CLOSE c5;

    -- update costing_group_id

     v_sql_stmt := 11;

     lv_sql_stmt :=
     'UPDATE       msc_st_project_tasks   mstp'
     ||' SET       costing_group_id   = ( SELECT local_id '
     ||'           FROM msc_local_id_misc mlim'
     ||'           WHERE     mlim.char1       = mstp.sr_instance_code'
     ||'           AND   NVL(mlim.char2,'||''''||NULL_CHAR||''''||') '
     ||'              =    NVL(mstp.company_name,'||''''||NULL_CHAR||''''||') '
/*     ||'           AND       mlim.char3       = mstp.organization_code'*/
     ||'           AND       mlim.char4       = mstp.costing_group_code'
     ||'           AND       mlim.entity_name = ''COSTING_GROUP_ID'')'
     ||' WHERE      sr_instance_code = :v_instance_code'
     ||' AND        NVL(costing_group_code, '||''''||NULL_CHAR||''''||') '
     ||'            <> '||''''||NULL_CHAR||''''
     ||' AND    NVL(costing_group_id,'||NULL_VALUE||') = '||NULL_VALUE
     ||' AND        process_flag     = '||G_IN_PROCESS
     ||' AND        batch_id         = :lv_batch_id' ;



            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   -- Project id generation

    v_sql_stmt := 12;

     OPEN c3(lv_batch_id);
     FETCH c3 BULK COLLECT INTO lb_rowid ;

     IF c3%ROWCOUNT > 0  THEN

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_project_tasks
        SET    project_id             = msc_st_project_id_s.NEXTVAL
        WHERE  rowid                  = lb_rowid(j);


    v_sql_stmt := 13;

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

    -- Insert into the LID table  with the  user defined key
    INSERT INTO  msc_local_id_misc
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char3,
       char4,
       SOURCE_ORG_ID,
       SOURCE_COSTING_GROUP_ID,
       SOURCE_PROJECT_ID,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
      SELECT
       project_id,
       st_transaction_id,
       v_instance_id,
       'PROJECT_ID',
       data_source_type,
       sr_instance_code,
       company_name,
       organization_code,
       project_number,
       SOURCE_ORG_ID,
       SOURCE_COSTING_GROUP_ID,
       SOURCE_PROJECT_ID,
       v_current_date,
       v_current_user,
       v_current_date,
       v_current_user
      FROM msc_st_project_tasks
      WHERE rowid = lb_rowid(j);
     END IF;

   CLOSE c3;

    -- Derive Project id
     lv_return :=
     MSC_ST_UTIL.DERIVE_PROJ_TASK_ID(p_table_name => 'MSC_ST_PROJECT_TASKS',
                             p_proj_col_name      => 'PROJECT_NUMBER',
                             p_proj_task_col_id   => 'PROJECT_ID',
                             p_instance_code      => v_instance_code,
                             p_entity_name        => 'PROJECT_ID',
                             p_batch_id           => lv_batch_id,
                             p_error_text         => lv_error_text,
                             p_debug              => v_debug,
                             p_row                => lv_column_names);

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;

  -- Task Id generation

    v_sql_stmt := 14;

     OPEN c4(lv_batch_id);
     FETCH c4 BULK COLLECT INTO lb_rowid ;

     IF c4%ROWCOUNT > 0  THEN

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_project_tasks
        SET    task_id                = msc_st_task_id_s.NEXTVAL
        WHERE  rowid                  = lb_rowid(j);

    v_sql_stmt := 15;

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

    -- Insert into the LID table  with the  user defined key
    INSERT INTO  msc_local_id_misc
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char3,
       char4,
       char5,
       SOURCE_ORG_ID,
       SOURCE_COSTING_GROUP_ID,
       SOURCE_PROJECT_ID,
       SOURCE_TASK_ID,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
      SELECT
       task_id,
       st_transaction_id,
       v_instance_id,
       'TASK_ID',
       data_source_type,
       sr_instance_code,
       company_name,
       organization_code,
       project_number,
       task_number,
       SOURCE_ORG_ID,
       SOURCE_COSTING_GROUP_ID,
       SOURCE_PROJECT_ID,
       SOURCE_TASK_ID,
       v_current_date,
       v_current_user,
       v_current_date,
       v_current_user
      FROM msc_st_project_tasks
      WHERE rowid = lb_rowid(j);
     END IF;
  CLOSE c4;

-- Derive task id
     lv_return :=
     MSC_ST_UTIL.DERIVE_PROJ_TASK_ID(p_table_name =>'MSC_ST_PROJECT_TASKS',
                             p_proj_col_name      =>'PROJECT_NUMBER',
                             p_proj_task_col_id   =>'TASK_ID',
                             p_task_col_name      =>'TASK_NUMBER',
                             p_instance_code      => v_instance_code,
                             p_entity_name        => 'TASK_ID',
                             p_batch_id           =>lv_batch_id,
                             p_error_text         =>lv_error_text,
                             p_debug              => v_debug,
                             p_row                =>lv_column_names);

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;
  -- Insert records in MSC_ST_PROJECTS
 v_sql_stmt := 16;

 lv_sql_stmt:=
   'INSERT INTO msc_st_projects'
   ||' (project_id,'
   ||'  organization_id,'
   ||'  planning_group,'
   ||'  costing_group_id, '
   ||'  wip_acct_class_code, '
   ||'  seiban_number_flag, '
   ||'  project_name,'
   ||'  project_number, '
   ||'  project_description, '
   ||'  start_date, '
   ||'  completion_date, '
   ||'  material_account,'
   ||'  manager_contact,'
   ||'  sr_instance_id,'
   ||'  refresh_id, '
   ||'  last_update_date,'
   ||'  last_updated_by, '
   ||'  creation_date, '
   ||'  created_by ) '
   ||'   SELECT'
   ||'  project_id, '
   ||'  organization_id,'
   ||'  planning_group,'
   ||'  costing_group_id,'
   ||'  wip_acct_class_code,'
   ||'  seiban_number_flag,'
   ||'  project_number,'
   ||'  project_number,'
   ||'  project_description,'
   ||'  project_start_date,'
   ||'  project_completion_date, '
   ||'  material_account,'
   ||'  manager_contact,'
   ||   v_instance_id||','
   ||'  REFRESH_ID,'
   ||'  last_update_date,'
   ||'  last_updated_by,'
   ||'  creation_date,'
   ||'  created_by'
   ||' FROM msc_st_project_tasks'
   ||' WHERE sr_instance_code  = :v_instance_code'
   ||' AND   process_flag      = '||G_IN_PROCESS
   ||' AND   batch_id          = :lv_batch_id' ;

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

  -- Delete all the records from msc_st_projects_tasks where task number is NULL
  -- This is done as records with only task name is inserted in msc_st_projects_tasks

   lv_sql_stmt :=
   ' DELETE FROM msc_st_project_tasks '
   ||' WHERE        NVL(task_number, '||''''||NULL_CHAR||''''||') '
   ||'         = '||''''||NULL_CHAR||''''
   ||' AND   sr_instance_code  = :v_instance_code'
   ||' AND   process_flag      = '||G_IN_PROCESS
   ||' AND   batch_id          = :lv_batch_id' ;

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the process flag as Valid and poulate instance_id
    lv_return :=
    MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name   => 'MSC_ST_PROJECT_TASKS',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug,
                               p_batch_id       => lv_batch_id);

      IF lv_return < 0 THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      END IF;


    -- At the end calling  the LOG_ERROR for logging all errored out records

   lv_return :=
   MSC_ST_UTIL.LOG_ERROR(p_table_name    => 'MSC_ST_PROJECT_TASKS',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug,
                         p_batch_id      => lv_batch_id  );

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;

   COMMIT;
  END LOOP;

 EXCEPTION
    WHEN too_many_rows THEN
         lv_error_text := substr('MSC_CL_PRE_PROCESS.LOAD_PROJ_TASK'||'('
                        ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
         ROLLBACK ;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
        ROLLBACK;

   WHEN OTHERS THEN
       lv_error_text :=  substr('MSC_CL_PRE_PROCESS.LOAD_PROJ_TASK'||'('
                        ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

   END LOAD_PROJ_TASK;


  /*==========================================================================+
  | DESCRIPTION  : This function performs the validation and loads the data   |
  |                for business object Resource and Department.               |
  +==========================================================================*/
  PROCEDURE  LOAD_DEPT_RES IS

  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  TYPE CurTyp           IS REF CURSOR;
  c1                    CurTyp;
  lb_rowid              RowidTab;

  lv_column_names        VARCHAR2(5000);     -- Stores cocatenated column names
  lv_return              NUMBER;
  lv_error_text          VARCHAR2(250);
  lv_where_str           VARCHAR2(5000);
  lv_sql_stmt            VARCHAR2(5000);
  lv_cursor_stmt         VARCHAR2(5000);

  lv_simulation_set      msc_st_resource_changes.simulation_set%type;
  lv_batch_id            msc_st_department_resources.batch_id%TYPE;
  lv_message_text        msc_errors.error_text%TYPE;


  ex_logging_err    EXCEPTION;

  CURSOR c2(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_department_resources
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

 CURSOR c3(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_department_resources
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(department_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag      = SYS_NO
    AND    line_flag         = '2'
    GROUP BY sr_instance_code,company_name,
             organization_code,department_code  ;

 CURSOR c4(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_department_resources
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(resource_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag      = SYS_NO
    AND    line_flag         = '2'
    GROUP BY sr_instance_code,company_name,
             organization_code,resource_code  ;

 CURSOR c5 (p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_department_resources
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(department_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag      = SYS_NO
    AND    line_flag         = '1'   ;


  CURSOR c6(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_resource_shifts
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

 CURSOR c7(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_resource_changes
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

 CURSOR c8(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_resource_changes msrc
    WHERE  NOT EXISTS (SELECT 1 FROM msc_simulation_sets mss
                       WHERE msrc.simulation_set = mss.simulation_set
                       AND   msrc.sr_instance_id = mss.sr_instance_id
                       AND   msrc.organization_id = mss.organization_id)
    AND    msrc.process_flag     = G_VALID
    AND    msrc.sr_instance_code = v_instance_code
    AND    msrc.deleted_flag     = SYS_NO
    AND    msrc.batch_id         = p_batch_id
    GROUP BY simulation_set,sr_instance_code,
             company_name,organization_code ;

 CURSOR c9(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_resource_groups
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

BEGIN

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 01;
    lv_sql_stmt :=
    ' UPDATE   msc_st_resource_groups mrg1'
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  message_id <  (SELECT MAX(message_id)'
    ||'        FROM  msc_st_resource_groups mrg2'
    ||'        WHERE  mrg2.sr_instance_code  = mrg1.sr_instance_code'
    ||'        AND    mrg2.group_code        = mrg1.group_code'
    ||'        AND   NVL(mrg2.company_name,  '   ||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mrg1.company_name,  '   ||''''||NULL_CHAR||''''||')'
    ||'        AND   mrg2.process_flag = mrg1.process_flag'
    ||'        AND   NVL(mrg2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND    mrg1.process_flag     = '||G_IN_PROCESS
    ||' AND    mrg1.sr_instance_code = :v_instance_code'
    ||' AND    NVL(mrg1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.
    v_sql_stmt := 02;
    lv_sql_stmt :=
    ' UPDATE   msc_st_resource_groups mrg1'
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS( SELECT 1 '
    ||'        FROM  msc_st_resource_groups mrg2'
    ||'        WHERE mrg2.sr_instance_code  = mrg1.sr_instance_code'
    ||'        AND   mrg2.group_code        = mrg1.group_code'
    ||'        AND   NVL(mrg2.company_name,  '   ||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mrg1.company_name,  '   ||''''||NULL_CHAR||''''||')'
    ||'        AND   mrg2.process_flag      = mrg1.process_flag'
    ||'        AND   NVL(mrg2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'        GROUP BY sr_instance_code,group_code,company_name '
    ||'         HAVING COUNT(*) > 1)'
    ||' AND     mrg1.process_flag     = '||G_IN_PROCESS
    ||' AND     mrg1.sr_instance_code = :v_instance_code'
    ||' AND     NVL(mrg1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_column_names :=
    'GROUP_CODE         ||''~''||'
    ||'MEANING          ||''~''||'
    ||'DESCRIPTION      ||''~''||'
    ||'FROM_DATE        ||''~''||'
    ||'TO_DATE          ||''~''||'
    ||'ENABLED_FLAG     ||''~''||'
    ||'SR_INSTANCE_CODE ||''~''||'
    ||'COMPANY_NAME     ||''~''||'
    ||'DELETED_FLAG';

    LOOP
      v_sql_stmt := 03;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      ' UPDATE   msc_st_resource_groups '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c9(lv_batch_id);
      FETCH c9 BULK COLLECT INTO lb_rowid;
      CLOSE c9;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_resource_groups
      SET  st_transaction_id = msc_st_resource_groups_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_RESOURCE_GROUPS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Deletion is not allowed for this entity.
      v_sql_stmt := 06;
      lv_sql_stmt :=
      ' UPDATE     msc_st_resource_groups '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'GROUP_CODE OR MEANING');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 07;
      lv_sql_stmt :=
      ' UPDATE  msc_st_resource_groups '
      ||' SET   process_flag        = '||G_ERROR_FLG||','
      ||'       error_text          = '||''''||lv_message_text||''''
      ||' WHERE (group_code IS NULL '
      ||' OR    meaning IS NULL) '
      ||' AND   batch_id            = :lv_batch_id'
      ||' AND   process_flag        = '||G_IN_PROCESS
      ||' AND   sr_instance_code    = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'FROM_DATE AND TO_DATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 08;
      lv_sql_stmt :=
      ' UPDATE  msc_st_resource_groups '
      ||' SET   process_flag        = '||G_ERROR_FLG||','
      ||'       error_text          = '||''''||lv_message_text||''''
      ||' WHERE from_date           > to_date '
      ||' AND   batch_id            = :lv_batch_id'
      ||' AND   process_flag        = '||G_IN_PROCESS
      ||' AND   sr_instance_code    = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_UPDATION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_RESOURCE_GROUPS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Updation is not allowed on this entity(this is done to make the
      --Post-Processor in sync with the collection program).
      v_sql_stmt := 09;
      lv_sql_stmt :=
      ' UPDATE   msc_st_resource_groups mrg1'
      ||' SET    process_flag     = '||G_ERROR_FLG||','
      ||'        error_text       = '||''''||lv_message_text||''''
      ||' WHERE  process_flag     = '||G_IN_PROCESS
      ||' AND    batch_id         =  :lv_batch_id'
      ||' AND    sr_instance_code =  :v_instance_code'
      ||' AND    EXISTS'
      ||'        (SELECT 1 FROM msc_resource_groups mrg2'
      ||'        WHERE  mrg2.group_code = mrg1.group_code'
      ||'        AND    mrg2.sr_instance_id = ' ||v_instance_id ||')';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

     -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ENABLED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_YES );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Valid values for enabled_flag is 1(ie.,'Y') and 2('N'). For any other
      -- value generates a warning and defaults the value to 'Y'.

     lv_where_str :=
     '    AND NVL(enabled_flag,'||NULL_VALUE||') NOT IN (1,2) ';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_RESOURCE_GROUPS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'ENABLED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => SYS_YES);

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;

      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_RESOURCE_GROUPS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_RESOURCE_GROUPS',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_RESOURCE_GROUPS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_message_text      => NULL,
                    p_error_text        => lv_error_text,
                    p_debug             => v_debug,
                    p_batch_id          => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     --Inserts the valid records into the ODS table, Since the collection program
     --doesn't collect this entity incrementally and whereras post-processor always
     --runs in the incremental mode.

     v_sql_stmt := 10;
     lv_sql_stmt :=
      ' INSERT INTO msc_resource_groups '
      ||' ( group_code,'
      ||'   meaning,'
      ||'   description,'
      ||'   from_date,'
      ||'   to_date,'
      ||'   enabled_flag,'
      ||'   sr_instance_id,'
      ||'   last_update_date,'
      ||'   last_updated_by,'
      ||'   creation_date,'
      ||'   created_by)'
      ||' SELECT'
      ||'   group_code,'
      ||'   meaning,'
      ||'   description,'
      ||'   from_date,'
      ||'   to_date,'
      ||'   enabled_flag,'
      ||'   sr_instance_id,'
      ||'   last_update_date,'
      ||'   last_updated_by,'
      ||'   creation_date,'
      ||'   created_by '
      ||' FROM   msc_st_resource_groups'
      ||' WHERE  sr_instance_code = :sr_instance_code'
      ||' AND    batch_id         = :lv_batch_id'
      ||' AND    process_flag     = '||G_VALID;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;

      COMMIT;
    END LOOP;

  -- Before we start processing the record by group id( batch size ) we are going
  -- to check whether that there
  -- is any duplicates for user defined unique keys (UDKs,)


   --Duplicate records check for the records whose source is XML

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 01;
  lv_sql_stmt :=
  'UPDATE   msc_st_department_resources msdr1'
  ||' SET       process_flag = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE     message_id < ( SELECT max(message_id) FROM msc_st_department_resources msdr2'
  ||'                WHERE msdr2.sr_instance_code  = msdr1.sr_instance_code'
  ||'                AND   NVL(msdr2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                =    NVL(msdr1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                AND   msdr2.organization_code = msdr1.organization_code'
  ||'                AND   msdr2.department_code   = msdr1.department_code'
  ||'                AND   msdr2.resource_code     = msdr1.resource_code'
  ||'                AND   msdr2.process_flag      = '||G_IN_PROCESS
  ||'                AND   NVL(msdr2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
  ||' AND       msdr1.process_flag     = '|| G_IN_PROCESS
  ||' AND       msdr1.sr_instance_code = :v_instance_code '
  ||' AND       NVL(msdr1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;


    --Duplicate records check for the records whose source is batch load

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;
  lv_sql_stmt :=
  'UPDATE      msc_st_department_resources msdr1'
  ||' SET      process_flag ='|| G_ERROR_FLG||','
  ||'          error_text   = '||''''||lv_message_text||''''
  ||' WHERE    EXISTS ( SELECT 1 FROM msc_st_department_resources msdr2'
  ||'               WHERE msdr2.sr_instance_code  = msdr1.sr_instance_code'
  ||'          AND   NVL(msdr2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(msdr1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'               AND   msdr2.organization_code = msdr1.organization_code'
  ||'               AND   msdr2.department_code   = msdr1.department_code'
  ||'               AND   msdr2.resource_code     = msdr1.resource_code'
  ||'               AND   msdr2.process_flag      = '||G_IN_PROCESS
  ||'               AND NVL(msdr2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||'              GROUP BY sr_instance_code,company_name,organization_code,'
  ||'              department_code,resource_code'
  ||'              HAVING COUNT(*) >1 )'
  ||' AND      msdr1.process_flag           ='|| G_IN_PROCESS
  ||' AND      msdr1.sr_instance_code       = :v_instance_code'
  ||' AND      NVL(msdr1.message_id,'||NULL_VALUE||')= '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  -- Duplicate UDK validation for XML message

  v_sql_stmt := 02;

  lv_column_names :=
  'ORGANIZATION_CODE            ||''~''||'
  ||'LINE_FLAG                  ||''~''||'
  ||'AGGREGATED_RESOURCE_FLAG   ||''~''||'
  ||'AVAILABLE_24_HOURS_FLAG    ||''~''||'
  ||'SR_INSTANCE_CODE           ||''~''||'
  ||'RESOURCE_CODE              ||''~''||'
  ||'DEPARTMENT_CODE            ||''~''||'
  ||'DEPARTMENT_CLASS           ||''~''||'
  ||'OWNING_DEPARTMENT_CODE     ||''~''||'
  ||'CAPACITY_UNITS             ||''~''||'
  ||'MAX_RATE                   ||''~''||'
  ||'MIN_RATE                   ||''~''||'
  ||'RESOURCE_GROUP_NAME        ||''~''||'
  ||'RESOURCE_GROUP_CODE        ||''~''||'
  ||'RESOURCE_BALANCE_FLAG      ||''~''||'
  ||'BOTTLENECK_FLAG            ||''~''||'
  ||'START_TIME                 ||''~''||'
  ||'STOP_TIME                  ||''~''||'
  ||'DEPARTMENT_DESCRIPTION     ||''~''||'
  ||'RESOURCE_DESCRIPTION       ||''~''||'
  ||'OVER_UTILIZED_PERCENT      ||''~''||'
  ||'UNDER_UTILIZED_PERCENT     ||''~''||'
  ||'RESOURCE_SHORTAGE_TYPE     ||''~''||'
  ||'RESOURCE_EXCESS_TYPE       ||''~''||'
  ||'USER_TIME_FENCE            ||''~''||'
  ||'UTILIZATION                ||''~''||'
  ||'EFFICIENCY                 ||''~''||'
  ||'RESOURCE_INCLUDE_FLAG      ||''~''||'
  ||'CRITICAL_RESOURCE_FLAG     ||''~''||'
  ||'RESOURCE_TYPE              ||''~''||'
  ||'DISABLE_DATE               ||''~''||'
  ||'CTP_FLAG                   ||''~''||'
  ||'DEPT_OVERHEAD_COST         ||''~''||'
  ||'RESOURCE_COST              ||''~''||'
  ||'RESOURCE_OVER_UTIL_COST    ||''~''||'
  ||'PLANNING_EXCEPTION_SET     ||''~''||'
  ||'DELETED_FLAG               ||''~''||'
  ||'COMPANY_NAME';

 -- Now processing by batch

   LOOP
      v_sql_stmt := 03;
      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      ' UPDATE msc_st_department_resources '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c2(lv_batch_id);
      FETCH c2 BULK COLLECT INTO lb_rowid;
      CLOSE c2;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_department_resources
      SET  st_transaction_id = msc_st_department_resources_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);


     -- Set the message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_DEPARTMENT_RESOURCES');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
       --Deletion is not allowed on this table.
      v_sql_stmt := 06;
      lv_sql_stmt :=
      ' UPDATE     msc_st_department_resources '
      ||' SET      process_flag     ='||G_ERROR_FLG||','
      ||'          error_text   = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

-- bug 8310366 validate SCHEDULE_TO_INSTANCE(SDS Changes)
     -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SCHEDULE_TO_INSTANCE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Default SCHEDULE_TO_INSTANCE as 2 if not in (1,2)

     lv_where_str :=
     ' AND NVL(SCHEDULE_TO_INSTANCE,'||NULL_VALUE||')  NOT IN (''1'',''2'')';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_DEPARTMENT_RESOURCES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'SCHEDULE_TO_INSTANCE',
                     p_debug             => v_debug,
                     p_default_value     => SYS_NO );

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;




    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'RESOURCE_GROUP_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Resource group Name should refer to a valid group code
    -- in the msc_st_resource_groups entity.
     v_sql_stmt := 08;

     lv_sql_stmt :=
     '   UPDATE  msc_st_department_resources mdr'
     ||' SET     process_flag = '||G_ERROR_FLG||','
     ||'         error_text   = '||''''||lv_message_text||''''
     ||' WHERE   NOT   EXISTS (SELECT 1'
     ||'         FROM  msc_resource_groups mrg'
     ||'         WHERE mrg.group_code         = mdr.resource_group_name '
     ||'         AND   (trunc(mrg.from_date) <= trunc(sysdate) '
     ||'         OR    trunc(mrg.to_date)    >= trunc(sysdate)) '
     ||'         AND   mrg.enabled_flag       = '||SYS_YES
     ||'         AND   mrg.sr_instance_id     = :v_instance_id)'
     ||' AND mdr.resource_group_name IS NOT NULL'
     ||' AND mdr.sr_instance_code   = :v_instance_code'
     ||' AND mdr.batch_id           = :lv_batch_id'
     ||' AND mdr.process_flag       = '||G_IN_PROCESS ;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_id,
                      v_instance_code,
                      lv_batch_id;

      -- Set the error message

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DEPARTMENT_CODE OR RESOURCE_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Error out record if department_code is null/resource_code is NULL and line_flag=2

      v_sql_stmt := 07;
     lv_sql_stmt :=
      ' UPDATE  msc_st_department_resources '
      ||' SET   process_flag        = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE (NVL(department_code,'||''''||NULL_CHAR||''''||')'
      ||'       = '||''''||NULL_CHAR||''''
      ||' OR  (NVL(resource_code,'||''''||NULL_CHAR||''''||')'
      ||'       = '||''''||NULL_CHAR||''''||') AND LINE_FLAG=2 )'
      ||' AND   batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND   sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'MAX_RATE OR MIN_RATE'
                                              ||'OR START_TIME OR STOP_TIME' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Error out records for lines when
   -- max_rate, min_rate, start_time and stop_time is NULL

    v_sql_stmt:= 08;

    lv_sql_stmt :=
   'UPDATE    msc_st_department_resources '
   ||' SET    process_flag                     ='|| G_ERROR_FLG||','
   ||'        error_text                       ='||''''||lv_message_text||''''
   ||' WHERE  (NVL(max_rate,'||NULL_VALUE||') ='||NULL_VALUE
   ||' OR     NVL(min_rate,'||NULL_VALUE||')   ='|| NULL_VALUE
   ||' OR     NVL(start_time,'||NULL_VALUE||') ='|| NULL_VALUE
   ||' OR     NVL(stop_time,'||NULL_VALUE||')  ='|| NULL_VALUE||')'
   ||' AND    sr_instance_code                 = :v_instance_code'
   ||' AND    line_flag                        = ''1'' '
   ||' AND    process_flag                     ='|| G_IN_PROCESS
   ||' AND    batch_id                         = :lv_batch_id' ;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETE_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check DELETE_FLAG column has valid value or not and if not set it to SYS_NO
      -- Log error procedure inserts warning and also defaults the delete flag

     lv_where_str :=
     ' AND NVL(deleted_flag,'||NULL_VALUE||') <>'||SYS_NO;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_DEPARTMENT_RESOURCES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DELETED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => SYS_NO);


      IF lv_return <> 0 THEN
          RAISE ex_logging_err;
      END IF;

      -- Set the error message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Derive  organization id
     lv_return :=
     MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name     => 'MSC_ST_DEPARTMENT_RESOURCES',
                                    p_org_partner_name  => 'ORGANIZATION_CODE',
                                    p_org_partner_id    => 'ORGANIZATION_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_ORGANIZATION,
                                    p_severity          => G_SEV_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_batch_id          => lv_batch_id,
                                    p_debug             => v_debug,
                                    p_error_text        => lv_error_text);

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;

     -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'LINE_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_LINE_FLAG  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Default line_flag  as 2 (Dept is Not a line) if not in (1,2)

     lv_where_str :=
     ' AND NVL(line_flag,'||NULL_VALUE||')  NOT IN (''1'',''2'')';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_DEPARTMENT_RESOURCES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'LINE_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => G_LINE_FLAG );

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;

     -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'AVAILABLE_24_HOURS_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_AVAILABLE_24_HOURS_FLAG  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      -- Default available 24 hr as Yes (1) for dept/line

     lv_where_str :=
     ' AND NVL(available_24_hours_flag,'||NULL_VALUE||') NOT IN (1,2)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_DEPARTMENT_RESOURCES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'AVAILABLE_24_HOURS_FLAG',
                     p_debug             => v_debug,
                     p_default_value     =>  G_AVAILABLE_24_HOURS_FLAG);


     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;

     -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CTP_FLAG ',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => G_CTP_FLAG   );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Default CTP flag as 2 if NOT IN (1,2) for dept only

     lv_where_str :=
     ' AND NVL(ctp_flag,'||NULL_VALUE||') NOT IN (1,2) AND line_flag = ''2'' ';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_DEPARTMENT_RESOURCES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'CTP_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => G_CTP_FLAG );

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;

     -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'RESOURCE_TYPE ',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => G_RESOURCE_TYPE   );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Default resource_type as 1 (Machine) if not in (1,2,3,4,5)

     lv_where_str :=
     '      AND NVL(resource_type,'||NULL_VALUE||')'
     ||'    NOT IN (1,2,3,4,5) AND line_flag = ''2'' ';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_DEPARTMENT_RESOURCES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'RESOURCE_TYPE',
                     p_debug             => v_debug,
                     p_default_value     => G_RESOURCE_TYPE );


     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;

/* commented for Bug 2970460
     -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'RESOURCE_INCLUDE_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => G_RESOURCE_INCLUDE_FLAG );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Default resource_include_flag   as 1  if not in (1,2)

     lv_where_str :=
     '    AND NVL(resource_include_flag,'||NULL_VALUE||')'
     ||'  NOT IN (1,2) AND line_flag = 2';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_DEPARTMENT_RESOURCES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'RESOURCE_INCLUDE_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => G_RESOURCE_INCLUDE_FLAG);

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;
*/

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'AGGREGATED_RESOURCE_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => G_AGGREGATED_RESOURCE_FLAG);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Default aggregated_resource_flag  as
     -- 2(Resource is not aggregated one) if not in (1,2)

     lv_where_str :=
     '     AND NVL(aggregated_resource_flag,'||NULL_VALUE||')'
     ||'   NOT IN (1,2) AND LINE_FLAG = 2';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_DEPARTMENT_RESOURCES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'AGGREGATED_RESOURCE_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => G_AGGREGATED_RESOURCE_FLAG );

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;



    -- Now derive department id
     v_sql_stmt:= 10;

    lv_sql_stmt :=
    'UPDATE     msc_st_department_resources msdr'
    ||' SET     department_id=  (SELECT local_id'
    ||'                        FROM msc_local_id_setup mlis'
    ||'                        WHERE  mlis.char1 = msdr.sr_instance_code'
    ||'                        AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                        =    NVL(msdr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                        AND    mlis.char3 = msdr.organization_code'
    ||'                        AND    mlis.char4 = msdr.department_code'
    ||'                        AND    mlis.entity_name = ''DEPARTMENT_ID'')'
    ||' WHERE      msdr.sr_instance_code = :v_instance_code'
    ||' AND        msdr.line_flag        = ''2'' '
    ||' AND        msdr.process_flag     ='|| G_IN_PROCESS
    ||' AND        msdr.batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    -- Now derive line id
     v_sql_stmt:= 10;

    lv_sql_stmt :=
    'UPDATE     msc_st_department_resources msdr'
    ||' SET     department_id=    (SELECT local_id '
    ||'                        FROM msc_local_id_setup mlis'
    ||'                        WHERE  mlis.char1 = msdr.sr_instance_code'
    ||'                        AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                        =    NVL(msdr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                        AND    mlis.char3 = msdr.organization_code'
    ||'                        AND    mlis.char4 = msdr.department_code'
    ||'                        AND    mlis.entity_name = ''LINE_ID'')'
    ||' WHERE      msdr.sr_instance_code = :v_instance_code'
    ||' AND        msdr.line_flag        = ''1'' '
    ||' AND        msdr.process_flag     ='|| G_IN_PROCESS
    ||' AND        msdr.batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    -- Derive resource id

     v_sql_stmt:= 11;

    lv_sql_stmt :=
    'UPDATE     msc_st_department_resources msdr'
    ||' SET        resource_id=    (SELECT local_id'
    ||'                        FROM msc_local_id_setup mlis'
    ||'                        WHERE  mlis.char1 = msdr.sr_instance_code'
    ||'                        AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                        =    NVL(msdr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                        AND    mlis.char3 = msdr.organization_code'
    ||'                        AND    mlis.char4 = msdr.resource_code'
    ||'                        AND    mlis.entity_name = ''RESOURCE_ID'')'
    ||' WHERE      msdr.sr_instance_code = :v_instance_code'
    ||' AND        msdr.process_flag     ='|| G_IN_PROCESS
    ||' AND        msdr.batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

 -- Set resoure_id=-1 for line resources

 lv_sql_stmt :=
    'UPDATE     msc_st_department_resources msdr'
    ||' SET        resource_id=  -1 '
    ||' WHERE      msdr.sr_instance_code = :v_instance_code'
    ||' AND        msdr.process_flag     ='|| G_IN_PROCESS
    ||' AND        NVL(msdr.resource_code, '||''''||NULL_CHAR||''''||') '
    ||'            = '||''''||NULL_CHAR||''''
    ||' AND        line_flag             = ''1'' '
    ||' AND        msdr.batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    --Call to customised validation.

      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_DEPARTMENT_RESOURCES',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Now generate the department_id

     v_sql_stmt := 13;

     OPEN c3(lv_batch_id);
     FETCH c3 BULK COLLECT INTO lb_rowid ;

     IF c3%ROWCOUNT > 0  THEN

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_department_resources
        SET    department_id          = msc_st_sr_inventory_item_id_s.NEXTVAL
        WHERE  rowid                  = lb_rowid(j);


    v_sql_stmt := 14;

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

   -- Insert into the LID table this new department with the  user defined key

       INSERT INTO  msc_local_id_setup
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char3,
       char4,
       SOURCE_ORGANIZATION_ID,
       SOURCE_DEPARTMENT_ID,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
      SELECT
       department_id,
       st_transaction_id,
       v_instance_id,
       'DEPARTMENT_ID',
       data_source_type,
       sr_instance_code,
       company_name,
       organization_code,
       department_code,
       SOURCE_ORGANIZATION_ID,
       SOURCE_DEPARTMENT_ID,
       v_current_date,
       v_current_user,
       v_current_date,
       v_current_user
      FROM msc_st_department_resources
      WHERE rowid = lb_rowid(j);

   END IF;
   CLOSE c3;

    -- Now derive department id
     v_sql_stmt:= 15;

    lv_sql_stmt :=
    'UPDATE     msc_st_department_resources msdr'
    ||' SET     department_id=  (SELECT local_id'
    ||'                        FROM msc_local_id_setup mlis'
    ||'                        WHERE  mlis.char1 = msdr.sr_instance_code'
    ||'                        AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                        =    NVL(msdr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                        AND    mlis.char3 = msdr.organization_code'
    ||'                        AND    mlis.char4 = msdr.department_code'
    ||'                        AND    mlis.entity_name = ''DEPARTMENT_ID'')'
    ||' WHERE      msdr.sr_instance_code = :v_instance_code'
    ||' AND        NVL(msdr.department_id,'||NULL_VALUE||') ='|| NULL_VALUE
    ||' AND        msdr.line_flag        = ''2'' '
    ||' AND        msdr.process_flag     ='|| G_IN_PROCESS
    ||' AND        msdr.batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

  -- Update owning_department_code as department_code if that is NULL
   v_sql_stmt := 16;
   lv_sql_stmt  :=
   'UPDATE     msc_st_department_resources msdr'
    ||' SET    owning_department_code = department_code'
    ||' WHERE  NVL(owning_department_code,'||''''||NULL_CHAR||''''||') '
    ||'       = '||''''||NULL_CHAR||''''
    ||' AND    sr_instance_code = :v_instance_code'
    ||' AND    line_flag        = ''2'' '
    ||' AND    process_flag     ='|| G_IN_PROCESS
    ||' AND    batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Now derive owning_department id
     v_sql_stmt := 17;

    lv_sql_stmt :=
    'UPDATE     msc_st_department_resources msdr'
    ||' SET     owning_department_id=  (SELECT local_id'
    ||'                        FROM msc_local_id_setup mlis'
    ||'                        WHERE  mlis.char1 = msdr.sr_instance_code'
    ||'                        AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                        =    NVL(msdr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                        AND    mlis.char3 = msdr.organization_code'
    ||'                        AND    mlis.char4 = msdr.owning_department_code'
    ||'                        AND    mlis.entity_name = ''DEPARTMENT_ID'')'
    ||' WHERE      msdr.sr_instance_code = :v_instance_code'
    ||' AND        NVL(msdr.owning_department_code,'||''''||NULL_CHAR||''''||') '
    ||'            <> '||''''||NULL_CHAR||''''
    ||' AND        msdr.line_flag        = ''2'' '
    ||' AND        msdr.process_flag     ='|| G_IN_PROCESS
    ||' AND        msdr.batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   -- Error out if owning_department_id is NULL
  -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,OWNING_DEPARTMENT_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_DEPARTMENT_RESOURCES',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_DEPARTMENT_RESOURCES' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      v_sql_stmt := 18;

      lv_sql_stmt :=
      ' UPDATE     msc_st_department_resources '
      ||' SET      process_flag     ='||G_ERROR_FLG||','
      ||'          error_text   = '||''''||lv_message_text||''''
      ||' WHERE    NVL(owning_department_id,'||NULL_VALUE||') ='|| NULL_VALUE
      ||' AND      deleted_flag     = '||SYS_NO
      ||' AND      line_flag        = ''2'' '
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      sr_instance_code = :v_instance_code'
      ||' AND      batch_id         =  :lv_batch_id';



            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


  -- Now  generate the resource_id

     v_sql_stmt := 19;

     OPEN c4(lv_batch_id);
     FETCH c4 BULK COLLECT INTO lb_rowid ;

     IF c4%ROWCOUNT > 0  THEN

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_department_resources
        SET    resource_id            = msc_st_sr_inventory_item_id_s.NEXTVAL
        WHERE  rowid                  = lb_rowid(j);


    v_sql_stmt := 20;

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

   -- Insert into the LID table this new resource with the  user defined key

       INSERT INTO  msc_local_id_setup
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char3,
       char4,
       SOURCE_ORGANIZATION_ID,
       SOURCE_RESOURCE_ID,
       SOURCE_OWNING_DEPARTMENT_ID,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
      SELECT
       resource_id,
       st_transaction_id,
       v_instance_id,
       'RESOURCE_ID',
       data_source_type,
       sr_instance_code,
       company_name,
       organization_code,
       resource_code,
       SOURCE_ORGANIZATION_ID,
       SOURCE_RESOURCE_ID,
       SOURCE_OWNING_DEPARTMENT_ID,
       v_current_date,
       v_current_user,
       v_current_date,
       v_current_user
      FROM msc_st_department_resources
      WHERE rowid = lb_rowid(j);

   END IF;
   CLOSE c4;

    -- Derive resource id

     v_sql_stmt:= 21;

    lv_sql_stmt :=
    'UPDATE     msc_st_department_resources msdr'
    ||' SET        resource_id=    (SELECT local_id'
    ||'                        FROM msc_local_id_setup mlis'
    ||'                        WHERE  mlis.char1 = msdr.sr_instance_code'
    ||'                        AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                        =    NVL(msdr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                        AND    mlis.char3 = msdr.organization_code'
    ||'                        AND    mlis.char4 = msdr.resource_code'
    ||'                        AND    mlis.entity_name = ''RESOURCE_ID'')'
    ||' WHERE      msdr.sr_instance_code = :v_instance_code'
    ||' AND        NVL(msdr.resource_id,'||NULL_VALUE||') ='|| NULL_VALUE
    ||' AND        msdr.process_flag     ='|| G_IN_PROCESS
    ||' AND        msdr.batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


     v_sql_stmt := 22;

     OPEN c5(lv_batch_id);
     FETCH c5 BULK COLLECT INTO lb_rowid ;

     IF c5%ROWCOUNT > 0  THEN

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_department_resources
        SET    department_id          = msc_st_sr_inventory_item_id_s.NEXTVAL
        WHERE  rowid                  = lb_rowid(j);


    v_sql_stmt := 23;

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

   -- Insert into the LID table this new department with the  user defined key

       INSERT INTO  msc_local_id_setup
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char3,
       char4,
       SOURCE_ORGANIZATION_ID,
       SOURCE_DEPARTMENT_ID,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
      SELECT
       department_id,
       st_transaction_id,
       v_instance_id,
       'LINE_ID',
       data_source_type,
       sr_instance_code,
       company_name,
       organization_code,
       department_code,
       SOURCE_ORGANIZATION_ID,
       SOURCE_DEPARTMENT_ID,
       v_current_date,
       v_current_user,
       v_current_date,
       v_current_user
      FROM msc_st_department_resources
      WHERE rowid = lb_rowid(j);

   END IF;
   CLOSE c5;

   -- Set the process flag as Valid and poulate instance_id
    lv_return :=
    MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name   => 'MSC_ST_DEPARTMENT_RESOURCES',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug,
                               p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- At the end calling  the LOG_ERROR for logging all errored out records

   lv_return :=
   MSC_ST_UTIL.LOG_ERROR(p_table_name    => 'MSC_ST_DEPARTMENT_RESOURCES',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug,
                         p_batch_id      => lv_batch_id  );

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
   END IF;

   COMMIT;
  END LOOP;


   -- Validation for table MSC_ST_RESOURCE_SHIFTS

   --Duplicate records check for the records whose source is XML

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  -- UDK validations

  v_sql_stmt := 19;

  lv_sql_stmt:=
  'UPDATE   msc_st_resource_shifts msrs1'
  ||' SET     process_flag = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE     message_id < ( SELECT max(message_id)'
  ||'                 FROM msc_st_resource_shifts msrs2'
  ||'                 WHERE msrs2.sr_instance_code  = msrs1.sr_instance_code'
  ||'                 AND   NVL(msrs2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =  NVL(msrs1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 AND   msrs2.organization_code = msrs1.organization_code'
  ||'                 AND   msrs2.department_code   = msrs1.department_code'
  ||'                 AND   msrs2.resource_code     = msrs1.resource_code'
  ||'                 AND   msrs2.shift_name        = msrs1.shift_name'
  ||'                 AND   msrs2.process_flag      = '||G_IN_PROCESS
  ||'                 AND   NVL(msrs2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
  ||' AND       msrs1.process_flag             ='|| G_IN_PROCESS
  ||' AND       msrs1.sr_instance_code         = :v_instance_code'
  ||' AND     NVL(msrs1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;


  --Duplicate records check for the records whose source is batch load

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 20;

  lv_sql_stmt:=
  'UPDATE   msc_st_resource_shifts msrs1'
  ||' SET      process_flag ='||G_ERROR_FLG||','
  ||'         error_text    = '||''''||lv_message_text||''''
  ||' WHERE    EXISTS ( SELECT 1 FROM msc_st_resource_shifts msrs2'
  ||'               WHERE msrs2.sr_instance_code          = msrs1.sr_instance_code'
  ||'               AND   NVL(msrs2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(msrs1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'               AND   msrs2.organization_code         = msrs1.organization_code'
  ||'               AND   msrs2.department_code           = msrs1.department_code'
  ||'               AND   msrs2.resource_code             = msrs1.resource_code'
  ||'               AND   msrs2.shift_name                = msrs1.shift_name'
  ||'               AND   msrs2.process_flag              ='||G_IN_PROCESS
  ||'               AND NVL(msrs2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||'               GROUP BY sr_instance_code,organization_code,company_name,'
  ||'                      department_code,resource_code,shift_name '
  ||'                  HAVING COUNT(*) >1 )'
  ||' AND     msrs1.process_flag              ='|| G_IN_PROCESS
  ||' AND     msrs1.sr_instance_code          = :v_instance_code'
  ||' AND     NVL(msrs1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;


 lv_column_names :=
 'DEPARTMENT_CODE      ||''~''||'
 ||'RESOURCE_CODE      ||''~''||'
 ||'SHIFT_NAME         ||''~''||'
 ||'ORGANIZATION_CODE  ||''~''||'
 ||'SR_INSTANCE_CODE   ||''~''||'
 ||'DELETED_FLAG       ||''~''||'
 ||'COMPANY_NAME ';

   LOOP
      v_sql_stmt := 21;
      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;

      v_sql_stmt := 22;
      lv_sql_stmt :=
      ' UPDATE msc_st_resource_shifts '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c6(lv_batch_id);
      FETCH c6 BULK COLLECT INTO lb_rowid;
      CLOSE c6;

      v_sql_stmt := 23;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_resource_shifts
      SET  st_transaction_id = msc_st_resource_shifts_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);



      -- Set the error message

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'COMPANY_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


     -- Deletion is not allowed for this table

     v_sql_stmt := 24;

      lv_sql_stmt :=
      ' UPDATE     msc_st_resource_shifts '
      ||' SET      process_flag     ='||G_ERROR_FLG||','
      ||'          error_text        = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check DELETE_FLAG column has valid value or not and if not set it to SYS_NO
      -- Log error procedure inserts warning and also defaults the delete flag

     lv_where_str :=
     ' AND NVL(deleted_flag,'||NULL_VALUE||') <>'||SYS_NO;

       lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_RESOURCE_SHIFTS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DELETED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => SYS_NO);


      IF lv_return <> 0 THEN
          RAISE ex_logging_err;
      END IF;

     -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_RESOURCE_SHIFTS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Popluate the Department id from LOCAL_ID table

    v_sql_stmt := 25;
    lv_sql_stmt :=
    'UPDATE            msc_st_resource_shifts msrs'
    ||' SET            department_id = (SELECT local_id'
    ||'                     FROM msc_local_id_setup mlis'
    ||'                     WHERE  mlis.char1       = msrs.sr_instance_code'
    ||'                     AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                      =    NVL(msrs.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                     AND    mlis.char3       = msrs.organization_code'
    ||'                     AND    mlis.char4       = msrs.department_code'
    ||'                     AND    mlis.entity_name = ''DEPARTMENT_ID'' '
    ||'                     AND    mlis.instance_id = '||v_instance_id||')'
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        process_flag     = '|| G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME'
                                             ||' ORGANIZATION_CODE,DEPARTMENT_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_DEPARTMENT_RESOURCES',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_RESOURCE_SHIFTS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Error out the reords where department id is NULL

    v_sql_stmt := 26;
    lv_sql_stmt:=
    'UPDATE   msc_st_resource_shifts '
    ||' SET     process_flag            = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE    NVL(department_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND      sr_instance_code              = :v_instance_code'
    ||' AND      process_flag                  ='|| G_IN_PROCESS
    ||' AND      batch_id                      = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Popluate the  resource id from LOCAL_ID table
    v_sql_stmt := 27;
    lv_sql_stmt:=
    'UPDATE         msc_st_resource_shifts msrs'
    ||' SET            resource_id = (SELECT local_id FROM msc_local_id_setup mlis'
    ||'                             WHERE  mlis.char1       = msrs.sr_instance_code'
    ||'                             AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                             =    NVL(msrs.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                             AND    mlis.char3       = msrs.organization_code'
    ||'                             AND    mlis.char4       = msrs.resource_code'
    ||'                             AND    mlis.entity_name = ''RESOURCE_ID'' '
    ||'                             AND    mlis.instance_id = '||v_instance_id||')'
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        process_flag     = '|| G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||' ORGANIZATION_CODE,RESOURCE_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_DEPARTMENT_RESOURCES',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_RESOURCE_SHIFTS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Error out the records where resource id is NULL

    v_sql_stmt := 28;
    lv_sql_stmt:=
    'UPDATE     msc_st_resource_shifts '
    ||' SET     process_flag            = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   NVL(resource_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND     sr_instance_code              = :v_instance_code'
    ||' AND     process_flag                  ='|| G_IN_PROCESS
    ||' AND     batch_id                      = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


  /* Bug 2172537 ,instance code not prefixed in calendar and org*/
  -- Derive the SHIFT_NUM

   v_sql_stmt := 29;
   lv_sql_stmt :=
   'UPDATE    msc_st_resource_shifts msrs'
   ||' SET       shift_num =(SELECT    mlis.local_id'
   ||'                      FROM       msc_local_id_setup mlis, msc_st_trading_partners mtp '
   ||'                      WHERE      mtp.sr_instance_id      = '||v_instance_id
   ||'                      AND        mlis.char1              = msrs.sr_instance_code'
   ||'                             AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
   ||'                             =    NVL(msrs.company_name,'||''''||NULL_CHAR||''''||') '
   ||'                      AND        mtp.calendar_code       = mlis.char3'
   ||'                      AND        mlis.char4              = msrs.shift_name'
   ||'                      AND        mlis.entity_name        = ''SHIFT_NUM'' '
   ||'                      AND        mlis.instance_id        = '||v_instance_id
   ||'                      AND        mtp.organization_code   = msrs.organization_code'
   ||'                      AND        mtp.process_flag    = '||G_VALID
   ||'                      AND        mtp.partner_type    = 3 )'
   ||' WHERE    msrs.sr_instance_code          = :v_instance_code'
   ||' AND      msrs.process_flag              ='|| G_IN_PROCESS
   ||' AND      msrs.batch_id                  = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

  /* Bug 2172537 ,instance code not prefixed in calendar and org*/

   lv_sql_stmt :=
   'UPDATE    msc_st_resource_shifts msrs'
   ||' SET       shift_num =(SELECT    mlis.local_id'
   ||'                      FROM       msc_local_id_setup mlis, msc_trading_partners mtp '
   ||'                      WHERE      mtp.sr_instance_id      = '||v_instance_id
   ||'                      AND        mlis.char1              = msrs.sr_instance_code'
   ||'                             AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
   ||'                             =    NVL(msrs.company_name,'||''''||NULL_CHAR||''''||') '
   ||'                      AND        mtp.calendar_code       = mlis.char3'
   ||'                      AND        mlis.char4              = msrs.shift_name'
   ||'                      AND        mlis.entity_name        = ''SHIFT_NUM'' '
   ||'                      AND        mlis.instance_id        = '||v_instance_id
   ||'                      AND        mtp.organization_code   = msrs.organization_code'
   ||'                      AND        mtp.partner_type    = 3 )'
   ||' WHERE    msrs.sr_instance_code          = :v_instance_code'
   ||' AND      NVL(msrs.shift_num,'||NULL_VALUE||') = '||NULL_VALUE
   ||' AND      msrs.process_flag              ='|| G_IN_PROCESS
   ||' AND      msrs.batch_id                  = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,'
                                              ||' ORGANIZATION_CODE,SHIFT_NAME',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_CALENDAR_SHIFTS',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_RESOURCE_SHIFTS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Error out records where shift_num is NULL

    v_sql_stmt := 30;

    lv_sql_stmt:=
    'UPDATE   msc_st_resource_shifts '
    ||' SET     process_flag        = '||G_ERROR_FLG||','
    ||'         error_text          =  '||''''||lv_message_text||''''
    ||' WHERE    NVL(shift_num,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND      sr_instance_code              = :v_instance_code'
    ||' AND      process_flag                  ='|| G_IN_PROCESS
    ||' AND      batch_id                      = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


   --Call to customised validation.

      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_RESOURCE_SHIFTS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Set the process flag as Valid and populate instance_id
    lv_return :=
    MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name   => 'MSC_ST_RESOURCE_SHIFTS',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug,
                               p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
          RAISE ex_logging_err;
      END IF;

    -- At the end calling  the LOG_ERROR for logging all errored out records

   lv_return :=
   MSC_ST_UTIL.LOG_ERROR(p_table_name    =>'MSC_ST_RESOURCE_SHIFTS',
                         p_instance_code =>v_instance_code,
                         p_row           =>lv_column_names,
                         p_severity      =>G_ERROR_FLG,
                         p_message_text  =>NULL,
                         p_error_text    =>lv_error_text,
                         p_debug         => v_debug,
                         p_batch_id      => lv_batch_id  );

      IF lv_return <> 0 THEN
          RAISE ex_logging_err;
      END IF;

   COMMIT;
  END LOOP;


  -- Validation for table MSC_ST_RESOURCE_CHANGES

  --Duplicate records check for the records whose source is XML

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  -- Duplicate UDK validation for XML message

  v_sql_stmt := 31;
  lv_sql_stmt :=
  'UPDATE   msc_st_resource_changes msrc1'
  ||' SET       process_flag = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE     message_id < ( SELECT max(message_id)'
  ||'           FROM msc_st_resource_changes msrc2'
  ||'           WHERE msrc2.sr_instance_code '
  ||'                    = msrc1.sr_instance_code'
  ||'           AND   msrc2.organization_code '
  ||'                   = msrc1.organization_code'
  ||'           AND   NVL(msrc2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                    = NVL(msrc1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'           AND   msrc2.department_code '
  ||'                    = msrc1.department_code'
  ||'           AND   msrc2.resource_code '
  ||'                      = msrc1.resource_code'
  ||'           AND   msrc2.shift_name '
  ||'                      = msrc1.shift_name '
  ||'           AND   NVL(msrc2.simulation_set,'||''''||NULL_CHAR||''''||') '
  ||'                    = NVL(msrc1.simulation_set,'||''''||NULL_CHAR||''''||') '
  ||'           AND   msrc2.from_date    '
  ||'                    = msrc1.from_date'
  ||'           AND   NVL(msrc2.to_date,(sysdate-36500)) '
  ||'                    = NVL(msrc1.to_date,(sysdate-36500)) '
  ||'           AND   NVL(msrc2.from_time,'||NULL_VALUE||')'
  ||'                    = NVL(msrc1.from_time,'||NULL_VALUE||')'
  ||'           AND   NVL(msrc2.to_time,'||NULL_VALUE||')'
  ||'                    = NVL(msrc1.to_time,'||NULL_VALUE||')'
  ||'           AND   msrc2.action_type '
  ||'                     = msrc2.action_type'
  ||'           AND   msrc2.deleted_flag '
  ||'                      = msrc1.deleted_flag '
  ||'           AND   msrc2.process_flag                   ='||G_IN_PROCESS
  ||'           AND   NVL(msrc2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
  ||' AND       msrc1.process_flag             ='|| G_IN_PROCESS
  ||' AND       msrc1.sr_instance_code         = :v_instance_code '
  ||' AND     NVL(msrc1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  --Duplicate records check for the records whose source is batch load

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  LV_SQL_STMT :=
  'UPDATE      MSC_ST_RESOURCE_CHANGES MSRC1'
  ||' SET      PROCESS_FLAG = '||G_ERROR_FLG||','
  ||'          ERROR_TEXT   = '||''''||LV_MESSAGE_TEXT||''''
  ||' WHERE   '
  ||'      (SR_INSTANCE_CODE ,'
  ||'        ORGANIZATION_CODE,'
  ||'        COMPANY_NAME     ,'
  ||'        DEPARTMENT_CODE  ,'
  ||'        RESOURCE_CODE    ,'
  ||'        SHIFT_NAME       ,'
  ||'        SIMULATION_SET   ,'
  ||'        FROM_DATE        ,'
  ||'        TO_DATE          ,'
  ||'        FROM_TIME        ,'
  ||'        TO_TIME          ,'
  ||'        ACTION_TYPE      ,'
  ||'        DELETED_FLAG) IN'
  ||'      (SELECT '
  ||'       SR_INSTANCE_CODE ,'
  ||'        ORGANIZATION_CODE,'
  ||'        COMPANY_NAME     ,'
  ||'        DEPARTMENT_CODE  ,'
  ||'        RESOURCE_CODE    ,'
  ||'        SHIFT_NAME       ,'
  ||'        SIMULATION_SET   ,'
  ||'        FROM_DATE        ,'
  ||'        TO_DATE          ,'
  ||'        FROM_TIME        ,'
  ||'        TO_TIME          ,'
  ||'        ACTION_TYPE      ,'
  ||'        DELETED_FLAG '
  ||'           FROM MSC_ST_RESOURCE_CHANGES MSRC2'
  ||'           WHERE '
  ||'           MSRC2.PROCESS_FLAG                   ='||G_IN_PROCESS
  ||'           AND NVL(MSRC2.MESSAGE_ID,'||NULL_VALUE||') = '||NULL_VALUE
  ||'           GROUP BY SR_INSTANCE_CODE,ORGANIZATION_CODE,COMPANY_NAME,DEPARTMENT_CODE,'
  ||'           RESOURCE_CODE,SHIFT_NAME,SIMULATION_SET,FROM_DATE,'
  ||'           TO_DATE,FROM_TIME,TO_TIME,ACTION_TYPE,DELETED_FLAG'
  ||'           HAVING COUNT(*) >1 )'
  ||' AND     MSRC1.PROCESS_FLAG                   ='|| G_IN_PROCESS
  ||' AND     MSRC1.SR_INSTANCE_CODE               = :V_INSTANCE_CODE'
  ||' AND     NVL(MSRC1.MESSAGE_ID,'||NULL_VALUE||') = '||NULL_VALUE ;



         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;


  lv_column_names :=
   'DEPARTMENT_CODE     ||''~''||'
  ||'RESOURCE_CODE      ||''~''||'
  ||'SHIFT_NAME         ||''~''||'
  ||'FROM_DATE          ||''~''||'
  ||'SIMULATION_SET     ||''~''||'
  ||'ACTION_TYPE        ||''~''||'
  ||'ORGANIZATION_CODE  ||''~''||'
  ||'SR_INSTANCE_CODE   ||''~''||'
  ||'TO_DATE            ||''~''||'
  ||'FROM_TIME          ||''~''||'
  ||'TO_TIME            ||''~''||'
  ||'CAPACITY_CHANGE    ||''~''||'
  ||'DELETED_FLAG       ||''~''||'
  ||'COMPANY_NAME' ;



   LOOP
      v_sql_stmt := 33;
      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;

      v_sql_stmt := 34;
      lv_sql_stmt :=
      ' UPDATE msc_st_resource_changes '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c7(lv_batch_id);
      FETCH c7 BULK COLLECT INTO lb_rowid;
      CLOSE c7;

      v_sql_stmt := 35;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_resource_changes
      SET  st_transaction_id = msc_st_resource_changes_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);



    -- Set the error message

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'FROM_DATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out records where from_date is NULL

    v_sql_stmt := 37;
    lv_sql_Stmt:=
    'UPDATE     msc_st_resource_changes '
    ||' SET     process_flag              ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   NVL(from_date,(sysdate-36500))  = (sysdate-36500)'
    ||' AND     sr_instance_code          = :v_instance_code'
    ||' AND     process_flag              ='|| G_IN_PROCESS
    ||' AND     batch_id                  = :lv_batch_id';


           MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

        -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ACTION_TYPE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- error out record with ACTION_TYPE NOT IN (1,2,3)

    v_sql_stmt := 38;

    lv_sql_Stmt:=
    'UPDATE   msc_st_resource_changes '
    ||' SET     process_flag              ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE    NVL(action_type,'||NULL_VALUE||')  NOT IN (1,2,3) '
    ||' AND      sr_instance_code          = :v_instance_code'
    ||' AND      process_flag              ='|| G_IN_PROCESS
    ||' AND      batch_id                  = :lv_batch_id';


           MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    -- Set the error message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Check whether delete flag value is in (1,2),if not default to SYS_NO

     lv_where_str := ' AND NVL(deleted_flag,'||NULL_VALUE||')NOT IN (1,2)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_RESOURCE_CHANGES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DELETED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => SYS_NO);


      IF lv_return <> 0 THEN
         RAISE ex_logging_err;
      END IF;

     --Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Derive  organization id
     lv_return :=
     MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name     => 'MSC_ST_RESOURCE_CHANGES',
                                    p_org_partner_name  => 'ORGANIZATION_CODE',
                                    p_org_partner_id    => 'ORGANIZATION_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_ORGANIZATION,
                                    p_severity          => G_SEV_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_batch_id          => lv_batch_id,
                                    p_debug             => v_debug,
                                    p_error_text        => lv_error_text);

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;


   -- Popluate the Department id from LOCAL_ID table

    v_sql_stmt := 39;
    lv_sql_stmt :=
    'UPDATE         msc_st_resource_changes msrc'
    ||' SET         department_id = (SELECT local_id'
    ||'             FROM msc_local_id_setup mlis'
    ||'             WHERE  mlis.char1    = msrc.sr_instance_code'
    ||'             AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'             =    NVL(msrc.company_name,'||''''||NULL_CHAR||''''||') '
    ||'             AND    mlis.char3       = msrc.organization_code'
    ||'             AND    mlis.char4       = msrc.department_code'
    ||'             AND    mlis.entity_name = ''DEPARTMENT_ID'' '
    ||'             AND    mlis.instance_id = '||v_instance_id||')'
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        process_flag     = '|| G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code, lv_batch_id;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||' ORGANIZATION_CODE,DEPARTMENT_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_DEPARTMENT_RESOURCES',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_RESOURCE_CHANGES' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Error out the records where department id is NULL

    v_sql_stmt := 40;
    lv_sql_stmt:=
    'UPDATE   msc_st_resource_changes '
    ||' SET     process_flag            = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE    NVL(department_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND      sr_instance_code              = :v_instance_code'
    ||' AND      process_flag                  ='|| G_IN_PROCESS
    ||' AND      batch_id                      = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id ;


   -- Popluate the  resource id from LOCAL_ID table
    v_sql_stmt := 41;
    lv_sql_stmt:=
    'UPDATE         msc_st_resource_changes msrc'
    ||' SET         resource_id = (SELECT local_id'
    ||'             FROM msc_local_id_setup mlis'
    ||'             WHERE  mlis.char1       = msrc.sr_instance_code'
    ||'             AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'             =    NVL(msrc.company_name,'||''''||NULL_CHAR||''''||') '
    ||'             AND    mlis.char3       = msrc.organization_code'
    ||'             AND    mlis.char4       = msrc.resource_code'
    ||'             AND    mlis.entity_name = ''RESOURCE_ID'' '
    ||'             AND    mlis.instance_id = '||v_instance_id||')'
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        process_flag     = '|| G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||' ORGANIZATION_CODE,RESOURCE_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_DEPARTMENT_RESOURCES',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_RESOURCE_CHANGES' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Error out the records where resource id is NULL

    v_sql_stmt := 42;
    lv_sql_stmt:=
    'UPDATE     msc_st_resource_changes '
    ||' SET     process_flag            = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   NVL(resource_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND     sr_instance_code              = :v_instance_code'
    ||' AND     process_flag                  ='|| G_IN_PROCESS
    ||' AND     batch_id                      = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


  /* Bug 2172537 ,instance code not prefixed in calendar and org*/
   -- Populate the SHIFT_NUM
   v_sql_stmt := 43;

   lv_sql_stmt :=
   'UPDATE    msc_st_resource_changes msrc'
   ||' SET       shift_num =(SELECT    mlis.local_id'
   ||'                      FROM       msc_local_id_setup mlis, msc_st_trading_partners mtp '
   ||'                      WHERE      mtp.sr_instance_id      = '||v_instance_id
   ||'                      AND        mlis.char1              = msrc.sr_instance_code'
   ||'                             AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
   ||'                             =    NVL(msrc.company_name,'||''''||NULL_CHAR||''''||') '
   ||'                      AND        mtp.calendar_code       = mlis.char3'
   ||'                      AND        mlis.char4              = msrc.shift_name'
   ||'                      AND        mlis.entity_name        = ''SHIFT_NUM'' '
   ||'                      AND        mlis.instance_id        = '||v_instance_id
   ||'                      AND        mtp.organization_code   = msrc.organization_code'
   ||'                      AND        mtp.process_flag    = '||G_VALID
   ||'                      AND        mtp.partner_type    = 3 )'
   ||' WHERE    msrc.sr_instance_code          = :v_instance_code'
   ||' AND      msrc.process_flag              ='|| G_IN_PROCESS
   ||' AND      msrc.batch_id                  = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


   lv_sql_stmt :=
   'UPDATE    msc_st_resource_changes msrc'
   ||' SET       shift_num =(SELECT    mlis.local_id'
   ||'                      FROM       msc_local_id_setup mlis, msc_trading_partners mtp '
   ||'                      WHERE      mtp.sr_instance_id      = '||v_instance_id
   ||'                      AND        mlis.char1              = msrc.sr_instance_code'
   ||'                             AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
   ||'                             =    NVL(msrc.company_name,'||''''||NULL_CHAR||''''||') '
   ||'                      AND        mtp.calendar_code       = mlis.char3'
   ||'                      AND        mlis.char4              = msrc.shift_name'
   ||'                      AND        mlis.entity_name        = ''SHIFT_NUM'' '
   ||'                      AND        mlis.instance_id        = '||v_instance_id
   ||'                      AND        mtp.organization_code   = msrc.organization_code'
   ||'                      AND        mtp.partner_type    = 3 )'
   ||' WHERE    msrc.sr_instance_code          = :v_instance_code'
   ||' AND      NVL(msrc.shift_num,'||NULL_VALUE||') = '||NULL_VALUE
   ||' AND      msrc.process_flag              ='|| G_IN_PROCESS
   ||' AND      msrc.batch_id                  = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    -- Set the error message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SHIFT_NAME');
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


   -- Error out records where shift_num is NULL

    v_sql_stmt := 30;

    lv_sql_stmt:=
    'UPDATE      msc_st_resource_changes '
    ||' SET      process_flag            = '||G_ERROR_FLG||','
    ||'          error_text   = '||''''||lv_message_text||''''
    ||' WHERE    NVL(shift_num,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND      sr_instance_code              = :v_instance_code'
    ||' AND      process_flag                  ='|| G_IN_PROCESS
    ||' AND      batch_id                      = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    lv_simulation_set := v_instance_code||':'||'SIMSET'  ;

    v_sql_stmt := 31;

    lv_sql_stmt:=
    'UPDATE      msc_st_resource_changes '
    ||' SET      simulation_set = '||''''||lv_simulation_set||''''
    ||' WHERE     NVL(simulation_set,'||''''||NULL_CHAR||''''||') '
    ||'         = '||''''||NULL_CHAR||''''
    ||' AND      sr_instance_code              = :v_instance_code'
    ||' AND      process_flag                  ='|| G_IN_PROCESS
    ||' AND      batch_id                      = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


   --Call to customised validation.

      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_RESOURCE_CHANGES',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;


     -- Set the process flag as Valid and populate instance_id
    lv_return :=
    MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name   => 'MSC_ST_RESOURCE_CHANGES',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug,
                               p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
          RAISE ex_logging_err;
      END IF;

   -- Also insert the simulation set
     OPEN c8(lv_batch_id);
     FETCH c8 BULK COLLECT INTO lb_rowid ;

     IF c8%ROWCOUNT > 0  THEN

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

    INSERT INTO msc_st_simulation_sets
     ( ORGANIZATION_ID,
      SIMULATION_SET,
      DESCRIPTION,
      USE_IN_WIP_FLAG,
      DELETED_FLAG,
      REFRESH_ID,
      SR_INSTANCE_ID)
      SELECT
      ORGANIZATION_ID,
      SIMULATION_SET,
      NULL,
      NULL,
      DELETED_FLAG,
      v_refresh_id,
      SR_INSTANCE_ID
      FROM msc_st_resource_changes
      where rowid = lb_rowid(j) ;

      END IF;
      CLOSE c8;


    -- At the end calling  the LOG_ERROR for logging all errored out records

   lv_return :=
   MSC_ST_UTIL.LOG_ERROR(p_table_name    => 'MSC_ST_RESOURCE_CHANGES',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug,
                         p_batch_id      => lv_batch_id  );

      IF lv_return <> 0 THEN
          RAISE ex_logging_err;
      END IF;
  COMMIT;
  END LOOP;



  EXCEPTION
    WHEN too_many_rows THEN
      lv_error_text := substr('MSC_CL_PRE_PROCESS.LOAD_DEPT_RES'||'('
                        ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
         ROLLBACK ;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text :=  substr('MSC_CL_PRE_PROCESS.LOAD_DEPT_RES'||'('
                        ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END LOAD_DEPT_RES;

--bug 8310366 Validation of all columns for the RESOURCE_SETUP entity (SDS Changes)

  PROCEDURE LOAD_RESOURCE_SETUPS IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  TYPE SetupCode IS TABLE OF MSC_ST_RESOURCE_SETUPS.SETUP_CODE%TYPE INDEX BY BINARY_INTEGER;
  TYPE OrganizationCode is TABLE OF MSC_ST_RESOURCE_SETUPS.ORGANIZATION_CODE%TYPE INDEX BY BINARY_INTEGER;
  TYPE CompanyName is TABLE OF MSC_ST_RESOURCE_SETUPS.COMPANY_NAME%TYPE INDEX BY BINARY_INTEGER;
  TYPE CurTyp       IS REF CURSOR;
  c1                CurTyp;
  lb_rowid              RowidTab;   --bulk collects rowid
  stpCode            SetupCode;  --bulk collects setupcode
  orgCode               OrganizationCode;  -- bulk collects organization code
  compName		CompanyName; -- bulk collects company name
  lv_return             NUMBER;
  lv_error_text         VARCHAR2(250);
  lv_cursor_stmt        VARCHAR2(5000);
  lv_batch_id           msc_st_resource_setups.batch_id%TYPE;
  lv_sql_stmt           VARCHAR2(5000);
  lv_message_text       msc_errors.error_text%TYPE;
  lv_column_names       VARCHAR2(5000);       --stores concatenated column names
  CURSOR c2(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_resource_setups
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG) --Check the where  clause conditions. Look for any additions or deletions
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

CURSOR c3(p_batch_id NUMBER) IS
    SELECT max(rowid),setup_code,organization_code,company_name
    FROM   msc_st_resource_setups
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(setup_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag      = SYS_NO
    group by sr_instance_code,organization_code,company_name,setup_code;

  ex_logging_err        EXCEPTION;

     --query--
BEGIN
   LOOP

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    lv_sql_stmt :=
  'UPDATE      msc_st_resource_setups msrs1 '
||'SET      process_flag ='|| G_ERROR_FLG||','
||'          error_text   = '||''''||lv_message_text||''''
||' WHERE    EXISTS ( SELECT 1 FROM msc_st_resource_setups msrs2'
||'               WHERE msrs2.sr_instance_code  = msrs1.sr_instance_code'
||'         AND   NVL(msrs2.company_name,'||''''||NULL_CHAR||''''||') '
||'              =    NVL(msrs1.company_name,'||''''||NULL_CHAR||''''||') '
||'              AND   msrs2.organization_code = msrs1.organization_code'
||'             AND   msrs2.resource_code     = msrs1.resource_code'
||'             AND   msrs2.setup_code     = msrs1.setup_code'
||'               AND   msrs2.process_flag      = '||G_IN_PROCESS
||'          AND NVL(msrs2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
||'           GROUP BY sr_instance_code,company_name,organization_code,'
||'              resource_code,setup_code'
||'            HAVING COUNT(*) >1 )'
||' AND      msrs1.process_flag           ='|| G_IN_PROCESS
||' AND      msrs1.sr_instance_code       = :v_instance_code'
||' AND      NVL(msrs1.message_id,'||NULL_VALUE||')= '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

      v_sql_stmt := 01;
      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;

      v_sql_stmt := 02;
      lv_sql_stmt :=
      ' UPDATE msc_st_resource_setups '
     ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;


  lv_column_names :=
   'SR_INSTANCE_CODE     ||''~''||'
  ||'RESOURCE_CODE';


      OPEN c2(lv_batch_id);
      FETCH c2 BULK COLLECT INTO lb_rowid;
    CLOSE c2;
      v_sql_stmt := 03;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_resource_setups
           SET st_transaction_id =  msc_st_regions_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);


--  Populate the setup_id

     v_sql_stmt:= 04;

    lv_sql_stmt :=
    'UPDATE     msc_st_resource_setups msrs'
    ||' SET        setup_id=    (SELECT local_id'
    ||'                        FROM msc_local_id_setup mlis'
    ||'                        WHERE  mlis.char1 = msrs.sr_instance_code'
    ||'                        AND NVL(mlis.char2,'||''''||NULL_CHAR||''''||')'
    || '=NVL(msrs.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                        AND    mlis.char3 = msrs.organization_code'
    ||'                        AND    mlis.char4 = msrs.setup_code'
    ||'                        AND    mlis.entity_name = ''SETUP_ID'')'
    ||' WHERE      msrs.sr_instance_code = :v_instance_code'
    ||' AND        msrs.process_flag     ='|| G_IN_PROCESS
    ||' AND        msrs.batch_id         = :lv_batch_id';

            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

      -- Set the message for invalid Organization_code

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  -- Populate  organization id

     v_sql_stmt:= 05;

    lv_return :=
    MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name =>'MSC_ST_RESOURCE_SETUPS',
                                      p_org_partner_name =>'ORGANIZATION_CODE',
                                      p_org_partner_id     =>'ORGANIZATION_ID',
                                      p_instance_code      => v_instance_code,
                                      p_partner_type       => G_ORGANIZATION,
                                      p_severity           => G_SEV_ERROR,
                                      p_message_text       => lv_message_text,
                                      p_batch_id           =>lv_batch_id,
                                      p_debug              => v_debug,
                                      p_error_text         =>lv_error_text);

   if(lv_return <> 0) then
      RAISE ex_logging_err;
   end if;

    -- Derive resource id

     v_sql_stmt:= 06;

    lv_sql_stmt :=
    'UPDATE     msc_st_resource_setups msrs'
    ||' SET        resource_id=    (SELECT local_id'
    ||'                        FROM msc_local_id_setup mlis'
    ||'                        WHERE  mlis.char1 = msrs.sr_instance_code'
    ||'                        AND NVL(mlis.char2,'||''''||NULL_CHAR||''''||')'
    ||				'=NVL(msrs.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                        AND    mlis.char3 = msrs.organization_code'
    ||'                        AND    mlis.char4 = msrs.resource_code'
    ||'                        AND    mlis.entity_name = ''RESOURCE_ID'')'
    ||' WHERE      msrs.sr_instance_code = :v_instance_code'
    ||' AND        msrs.process_flag     ='|| G_IN_PROCESS
    ||' AND        msrs.batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

      -- Set the message for invalid resource_code

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'RESOURCE_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      lv_sql_stmt :=
      ' UPDATE     msc_st_resource_setups '
      ||' SET      process_flag     ='||G_ERROR_FLG||','
      ||'          error_text   = '||''''||lv_message_text||''''
      ||' WHERE    NVL(resource_id,'||NULL_VALUE||') ='|| NULL_VALUE
      ||' AND      deleted_flag     = '||SYS_NO
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      sr_instance_code = :v_instance_code'
      ||' AND      batch_id         =  :lv_batch_id';



            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


     v_sql_stmt := 07;

     OPEN c3(lv_batch_id);
     FETCH c3 BULK COLLECT INTO lb_rowid,stpCode,orgCode,compName ;

     IF c3%ROWCOUNT > 0  THEN

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        UPDATE msc_st_resource_setups
        SET    setup_id            = msc_st_resource_setups_s.NEXTVAL
        WHERE  rowid                  = lb_rowid(j);

   FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
	UPDATE msc_st_resource_setups
	SET setup_id =(select setup_id from msc_st_resource_setups where rowid = lb_rowid(j))
	WHERE setup_code=stpCode(j)
 	AND organization_code = orgCode(j)
	AND company_name = compName(j)
        AND process_flag = G_IN_PROCESS
	AND sr_instance_code = v_instance_code;

   v_sql_stmt := 08;

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
             INSERT INTO  msc_local_id_setup
             (local_id,
              st_transaction_id,
              instance_id,
              entity_name,
              data_source_type,
              char1,
              char2,
              char3,
              char4,
              char5,
--              char6,                  --Setup_id remains unique across all the resource in an instance_org
              last_update_date,
              last_updated_by,
              creation_date,
              created_by    )
              SELECT
              setup_id,
              st_transaction_id,
              v_instance_id,
              'SETUP_ID',
              data_source_type,
              sr_instance_code,
              company_name,
              organization_code,
              setup_code,
             setup_description,
 --             resource_code,
              v_current_date,
              v_current_user,
              v_current_date,
              v_current_user
              FROM msc_st_resource_setups
              WHERE rowid= lb_rowid(j) ;

   END IF;
   CLOSE c3;

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_RESOURCE_SETUPS',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Inserting all the errored out records into MSC_ERRORS

      lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_RESOURCE_SETUPS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_error_text        => lv_error_text,
                    p_message_text      => NULL,
                    p_batch_id          => lv_batch_id);


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   COMMIT;
END LOOP;
  EXCEPTION
    WHEN too_many_rows THEN
         lv_error_text := substr('MSC_CL_PRE_PROCESS.LOAD_RESOURCE_SETUPS'||'('
                        ||v_sql_stmt||')'|| SQLERRM, 1, 240);
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
         ROLLBACK ;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
        ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text :=substr('MSC_CL_PRE_PROCESS.LOAD_RESOURCE_SETUPS'||'('
                      ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

END LOAD_RESOURCE_SETUPS;


   PROCEDURE LOAD_SETUP_TRANSITIONS IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  TYPE CurTyp       IS REF CURSOR;
  c1                CurTyp;
  lv_return             NUMBER;
  lv_message_text       msc_errors.error_text%TYPE;
  lv_error_text         VARCHAR2(250);
  lv_sql_stmt           VARCHAR2(5000);
  lv_cursor_stmt        VARCHAR2(5000);
  lv_batch_id           msc_st_setup_transitions.batch_id%TYPE;
  lv_column_names       VARCHAR2(5000);       --stores concatenated column names
  CURSOR c2(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_setup_transitions
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

  ex_logging_err        EXCEPTION;

     --query--
BEGIN
   LOOP
      v_sql_stmt := 01;
      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;

      v_sql_stmt := 02;
      lv_sql_stmt :=
      ' UPDATE msc_st_setup_transitions '
     ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;
 lv_sql_stmt :=
  'UPDATE      msc_st_setup_transitions msst1 '
||'SET      process_flag ='|| G_ERROR_FLG||','
||'          error_text   = '||''''||lv_message_text||''''
||' WHERE    EXISTS ( SELECT 1 FROM msc_st_setup_transitions msst2'
||'               WHERE msst2.sr_instance_code  = msst1.sr_instance_code'
||'         AND   NVL(msst2.company_name,'||''''||NULL_CHAR||''''||') '
||'              =    NVL(msst1.company_name,'||''''||NULL_CHAR||''''||') '
||'              AND   msst2.organization_code = msst1.organization_code'
||'             AND   msst2.resource_code     = msst1.resource_code'
||'             AND   msst2.from_setup_code     = msst1.from_setup_code'
||'             AND   msst2.to_setup_code     = msst1.to_setup_code'
||'               AND   msst2.process_flag      = '||G_IN_PROCESS
||'          AND NVL(msst2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
||'           GROUP BY sr_instance_code,company_name,organization_code,'
||'              resource_code,from_setup_code,to_setup_code'
||'            HAVING COUNT(*) >1 )'
||' AND      msst1.process_flag           ='|| G_IN_PROCESS
||' AND      msst1.sr_instance_code       = :v_instance_code'
||' AND      NVL(msst1.message_id,'||NULL_VALUE||')= '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

      -- Set the message for invalid Organization_code

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  -- Populate  organization id
    lv_return :=
    MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name =>'MSC_ST_SETUP_TRANSITIONS',
                                      p_org_partner_name =>'ORGANIZATION_CODE',
                                      p_org_partner_id     =>'ORGANIZATION_ID',
                                      p_instance_code      => v_instance_code,
                                      p_partner_type       => G_ORGANIZATION,
                                      p_severity           => G_SEV_ERROR,
                                      p_message_text       => lv_message_text,
                                      p_batch_id           =>lv_batch_id,
                                      p_debug              => v_debug,
                                      p_error_text         =>lv_error_text);

   if(lv_return <> 0) then
      RAISE ex_logging_err;
   end if;



  lv_column_names :=
   'SR_INSTANCE_CODE     ||''~''||'
  ||'FROM_SETUP_CODE          ||''~''||'
  ||'TO_SETUP_CODE';

    -- Deriving the from_setup_id...
     v_sql_stmt := 03;

  lv_sql_stmt :=
    'UPDATE     msc_st_setup_transitions msst'
    ||' SET     from_setup_id=  (SELECT local_id'
    ||'                        FROM msc_local_id_setup mlis'
    ||'                        WHERE  mlis.char1 = msst.sr_instance_code'
    ||'                        AND NVL(mlis.char2,'||''''||NULL_CHAR||''''||')'
    ||' =NVL(msst.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                        AND    mlis.char3 = msst.organization_code'
    ||'                        AND    mlis.char4 = msst.from_setup_code'
    ||'                        AND    mlis.entity_name = ''SETUP_ID'')'
    ||' WHERE      msst.sr_instance_code = :v_instance_code'
    ||' AND        NVL(msst.from_setup_code,'||''''||NULL_CHAR||''''||')'
    ||'            <> '||''''||NULL_CHAR||''''
    ||' AND        msst.process_flag     ='|| G_IN_PROCESS
    ||' AND        msst.batch_id         = :lv_batch_id';

            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

  -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'FROM_SETUP_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_RESOURCE_SETUPS',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_RESOURCE_SETUPS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      v_sql_stmt := 04;

      lv_sql_stmt :=
      ' UPDATE     msc_st_setup_transitions '
      ||' SET      process_flag     ='||G_ERROR_FLG||','
      ||'          error_text   = '||''''||lv_message_text||''''
      ||' WHERE    NVL(from_setup_id,'||NULL_VALUE||') ='|| NULL_VALUE
      ||' AND      deleted_flag     = '||SYS_NO
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      sr_instance_code = :v_instance_code'
      ||' AND      batch_id         =  :lv_batch_id';



            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    -- Deriving the to_setup_id...
     v_sql_stmt := 05;
    lv_sql_stmt :=
    'UPDATE     msc_st_setup_transitions msst'
    ||'     SET  to_setup_id=  (SELECT local_id'
    ||'                        FROM msc_local_id_setup mlis'
    ||'                        WHERE  mlis.char1 = msst.sr_instance_code'
    ||'                        AND NVL(mlis.char2,'||''''||NULL_CHAR||''''||')'
    ||'				=NVL(msst.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                        AND    mlis.char3 = msst.organization_code'
    ||'                        AND    mlis.char4 = msst.to_setup_code'
    ||'                        AND    mlis.entity_name = ''SETUP_ID'')'
    ||' WHERE      msst.sr_instance_code = :v_instance_code'
    ||' AND        NVL(msst.to_setup_code,'||''''||NULL_CHAR||''''||')'
    ||'            <> '||''''||NULL_CHAR||''''
    ||' AND        msst.process_flag     ='|| G_IN_PROCESS
    ||' AND        msst.batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'TO_SETUP_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_RESOURCE_SETUPS',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_RESOURCE_SETUPS' );


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      v_sql_stmt := 06;

      lv_sql_stmt :=
      ' UPDATE     msc_st_setup_transitions '
      ||' SET      process_flag     ='||G_ERROR_FLG||','
      ||'          error_text   = '||''''||lv_message_text||''''
      ||' WHERE    NVL(to_setup_id,'||NULL_VALUE||') ='|| NULL_VALUE
      ||' AND      deleted_flag     = '||SYS_NO
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      sr_instance_code = :v_instance_code'
      ||' AND      batch_id         =  :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

      -- Populating standard_operation_id

     v_sql_stmt:= 07;

    lv_sql_stmt :=
    'UPDATE     msc_st_setup_transitions msst'
    ||' SET        standard_operation_id=    (SELECT local_id'
    ||'                        FROM msc_local_id_setup mlis'
    ||'                        WHERE  mlis.char1 = msst.sr_instance_code'
    ||'                        AND NVL(mlis.char2,'||''''||NULL_CHAR||''''||')'
    || '=NVL(msst.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                        AND    mlis.char3 = msst.organization_code'
    ||'                        AND    mlis.char4 = msst.standard_operation_code'
    ||'                        AND    mlis.entity_name = ''STANDARD_OPERATION_ID'')'
    ||' WHERE      msst.sr_instance_code = :v_instance_code'
    ||' AND        msst.process_flag     ='|| G_IN_PROCESS
    ||' AND        msst.batch_id         = :lv_batch_id';

            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

--- Deriving DeptID...
/*
    v_sql_stmt := 08;
    lv_sql_stmt :=
    'UPDATE         MSC_ST_SETUP_TRANSITIONS msrc'
    ||' SET         department_id = (SELECT local_id'
    ||'             FROM msc_local_id_setup mlis'
    ||'             WHERE  mlis.char1    = msrc.sr_instance_code'
    ||'             AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'             =    NVL(msrc.company_name,'||''''||NULL_CHAR||''''||') '
    ||'             AND    mlis.char3       = msrc.organization_code'
    ||'             AND    mlis.char4       = msrc.department_code'
    ||'             AND    mlis.entity_name = ''DEPARTMENT_ID'' '
    ||'             AND    mlis.instance_id = '||v_instance_id||')'
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        process_flag     = '|| G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code, lv_batch_id;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE

                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,DEPARTMENT_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_DEPARTMENT_RESOURCES',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_SETUP_TRANSITIONS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Error out the records where department id is NULL

    v_sql_stmt := 09;
    lv_sql_stmt:=
    'UPDATE   MSC_ST_SETUP_TRANSITIONS '
    ||' SET     process_flag            = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE    NVL(department_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND      sr_instance_code              = :v_instance_code'
    ||' AND      process_flag                  ='|| G_IN_PROCESS
    ||' AND      batch_id                      = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id ;
*/
    -- Now derive the resource_id
     v_sql_stmt := 10;
    lv_sql_stmt :=
    'UPDATE     msc_st_setup_transitions msst'
    ||' SET        resource_id=  (SELECT local_id'
    ||'                        FROM msc_local_id_setup mlis'
    ||'                        WHERE  mlis.char1 = msst.sr_instance_code'
    ||'                        AND NVL(mlis.char2,'||''''||NULL_CHAR||''''||')'
    ||' =NVL(msst.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                        AND    mlis.char3 = msst.organization_code'
    ||'                        AND    mlis.char4 = msst.resource_code'
    ||'                        AND    mlis.entity_name = ''RESOURCE_ID'')'
    ||' WHERE      msst.sr_instance_code = :v_instance_code'
    ||' AND        NVL(msst.resource_code,'||''''||NULL_CHAR||''''||')'
    ||'            <> '||''''||NULL_CHAR||''''
    ||' AND      msst.process_flag     ='|| G_IN_PROCESS
    ||' AND       msst.batch_id         = :lv_batch_id';

            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,OWNING_DEPARTMENT_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_DEPARTMENT_RESOURCES',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_DEPARTMENT_RESOURCES' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      v_sql_stmt := 11;

      lv_sql_stmt :=
      ' UPDATE     msc_st_setup_transitions '
      ||' SET      process_flag     ='||G_ERROR_FLG||','
      ||'          error_text   = '||''''||lv_message_text||''''
      ||' WHERE    NVL(resource_id,'||NULL_VALUE||') ='|| NULL_VALUE
      ||' AND      deleted_flag     = '||SYS_NO
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      sr_instance_code = :v_instance_code'
      ||' AND      batch_id         =  :lv_batch_id';

            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;



      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_SETUP_TRANSITIONS',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Inserting all the errored out records into MSC_ERRORS

      lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_SETUP_TRANSITIONS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_error_text        => lv_error_text,
                    p_message_text      => NULL,
                    p_batch_id          => lv_batch_id);


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   COMMIT;
END LOOP;
  EXCEPTION
    WHEN too_many_rows THEN
         lv_error_text :=
substr('MSC_CL_PRE_PROCESS.LOAD_SETUP_TRANSITIONS'||'('
                        ||v_sql_stmt||')'|| SQLERRM, 1, 240);
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
         ROLLBACK ;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
        ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text :=substr('MSC_CL_PRE_PROCESS.LOAD_SETUP_TRANSITIONS'||'('
                      ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

END LOAD_SETUP_TRANSITIONS;





/*==========================================================================+
| DESCRIPTION  : This procedure is called for validating supplies related   |
|                records from the msc_st_supplies table. The following      |
|                types are considered for the validation.                   |
|                Supply Source                    Order Type                |
|                --------------------------------------------               |
|                Purchase Order                   1                         |
|                Requisition                      2                         |
|                Plan Orders                      5                         |
|                PO Receiving                     8                         |
|                Intransit Shipment               11                        |
|                Intransit Receipt                12                        |
|                On-Hand Quantities               18                        |
+==========================================================================*/
  PROCEDURE LOAD_SUPPLY(p_batch_id IN NUMBER DEFAULT NULL_VALUE) IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid            RowidTab;
  lv_return           NUMBER;
  lv_return2           NUMBER;
  lv_planning_tp_type Number;
  lv_owning_tp_type   Number;
  lv_error_text       VARCHAR2(250);
  lv_where_str        VARCHAR2(5000);
  lv_sql_stmt         VARCHAR2(5000);
  lv_column_names     VARCHAR2(5000);               --stores concatenated column names
  lv_message_text     msc_errors.error_text%TYPE;
  ex_logging_err        EXCEPTION;
  busy EXCEPTION;
  PRAGMA EXCEPTION_INIT(busy, -54);

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_supplies
    WHERE  order_type              IN(1,2,5,8,11,12,18,73,74,87)
    AND    process_flag            IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    NVL(batch_id,NULL_VALUE)=p_batch_id
    AND    sr_instance_code        = v_instance_code;

  CURSOR c2(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_supplies
    WHERE  NVL(sr_mtl_supply_id,NULL_VALUE) = NULL_VALUE
    AND    order_type                       IN(1,2,8,11,12,73,74,87)
    AND    process_flag                     = G_IN_PROCESS
    AND    NVL(batch_id,NULL_VALUE)         =p_batch_id
    AND    sr_instance_code                 = v_instance_code;

  CURSOR c3(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_supplies
    WHERE  NVL(disposition_id,NULL_VALUE)   = NULL_VALUE
    AND    order_type                       IN(1,2,8,11,12,73,74,87)
    AND    deleted_flag                     = SYS_NO
    AND    process_flag                     = G_IN_PROCESS
    AND    NVL(batch_id,NULL_VALUE)         =p_batch_id
    AND    sr_instance_code                 = v_instance_code
    GROUP BY sr_instance_code,company_name,order_number,order_type;

  CURSOR c4(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_supplies
    WHERE  NVL(po_line_id,NULL_VALUE)   = NULL_VALUE
    AND    deleted_flag                 = SYS_NO
    AND    order_type                   IN(1,2,8,11,12,73,74,87)
    AND    process_flag                 = G_IN_PROCESS
    AND    NVL(batch_id,NULL_VALUE)     =p_batch_id
    AND    sr_instance_code             = v_instance_code;

  CURSOR c5(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_supplies
    WHERE  NVL(disposition_id,NULL_VALUE)   = NULL_VALUE
    AND    order_type                       = 5
    AND    process_flag                     = G_IN_PROCESS
    AND    NVL(batch_id,NULL_VALUE)         =p_batch_id
    AND    sr_instance_code                 = v_instance_code;

  CURSOR c6(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_supplies
    WHERE  order_type              = 18
    AND    process_flag            IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    NVL(batch_id,NULL_VALUE)=p_batch_id
    AND    sr_instance_code        = v_instance_code;

  CURSOR c_lock(p_batch_id NUMBER)  IS
    SELECT  'X'
    FROM    msc_st_supplies ms1 ,
            msc_st_supplies ms2
    WHERE   ms1.batch_id      = p_batch_id
    AND     ms1.batch_id     <>  nvl(ms2.batch_id,NULL_VALUE)
    AND     ms1.disposition_id IS NULL
    AND     ms2.disposition_id IS NULL
    AND     ms1.sr_instance_code   =  ms2.sr_instance_code
    AND     NVL(ms1.company_name,NULL_CHAR)= NVL(ms2.company_name,NULL_CHAR)
    AND     ms1.order_number  =  ms2.order_number
    AND     ms1.order_type    =  ms2.order_type
    AND     ms1.order_type  IN(1,2,8,11,12,73,74,87)
    FOR UPDATE NOWAIT   ;



  BEGIN

    lv_column_names :=
    'ITEM_NAME                ||''~''||'
    ||'ORGANIZATION_CODE      ||''~''||'
    ||'NEW_SCHEDULE_DATE      ||''~''||'
    ||'NEW_ORDER_QUANTITY     ||''~''||'
    ||'FIRM_PLANNED_TYPE      ||''~''||'
    ||'SUPPLIER_NAME          ||''~''||'
    ||'PURCH_LINE_NUM         ||''~''||'
    ||'ORDER_NUMBER           ||''~''||'
    ||'SUPPLIER_SITE_CODE     ||''~''||'
    ||'SR_INSTANCE_CODE       ||''~''||'
    ||'REVISION               ||''~''||'
    ||'UNIT_NUMBER            ||''~''||'
    ||'NEW_DOCK_DATE          ||''~''||'
    ||'PROJECT_NUMBER         ||''~''||'
    ||'TASK_NUMBER            ||''~''||'
    ||'PLANNING_GROUP         ||''~''||'
    ||'DELIVERY_PRICE         ||''~''||'
    ||'QTY_SCRAPPED           ||''~''||'
    ||'FROM_ORGANIZATION_CODE ||''~''||'
    ||'DELETED_FLAG           ||''~''||'
    ||'ORDER_TYPE             ||''~''||'
    ||'SUBINVENTORY_CODE      ||''~''||'
    ||'LOT_NUMBER             ||''~''||'
    ||'EXPIRATION_DATE        ||''~''||'
    ||'SCHEDULE_LINE_NUM      ||''~''||'
    ||'LAST_UNIT_START_DATE   ||''~''||'
    ||'SCHEDULE_DESIGNATOR    ||''~''||'
    ||'COMPANY_NAME           ||''~''||'
    ||'DAILY_RATE';

    LOOP
      BEGIN
          v_sql_stmt := 01;
          OPEN c_lock(p_batch_id) ;
          EXIT;
       EXCEPTION
        WHEN busy THEN
           lv_error_text  := substr('MSC_CL_PRE_PROCESS.LOAD_SUPPLY'||'(' ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
            dbms_lock.sleep(5);
        WHEN OTHERS THEN
         lv_error_text  := substr('MSC_CL_PRE_PROCESS.LOAD_SUPPLY'||'(' ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
       v_sql_stmt := 2.0;
       lv_sql_stmt :=
       'UPDATE msc_st_supplies '
       ||' SET process_flag = 1, '
       ||' batch_id = NULL'
       ||' WHERE batch_id = :p_batch_id'
       ||' AND  order_type IN(1,2,8,11,12,73,74,87)'
       ||' AND process_flag      = '||G_IN_PROCESS
       ||' AND sr_instance_code  =:v_instance_code';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;
      COMMIT;
      RETURN;
      END ;
    END LOOP ;

    v_sql_stmt := 2.1;
    lv_sql_stmt :=
    'UPDATE msc_st_supplies mss '
    ||' SET disposition_id = (SELECT local_id'
    ||'       FROM   msc_local_id_supply mls'
    ||'       WHERE  mls.char3       = mss.order_number'
    ||'       AND    mls.number1     = mss.order_type'
    ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mss.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mls.char1       = mss.sr_instance_code'
    ||'       AND    mls.entity_name = ''DISPOSITION_ID'' ) '
    ||' WHERE  order_type  IN(1,2,8,11,12,73,74,87)'
    ||' AND    NVL(disposition_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND    deleted_flag                   = '||SYS_NO
    ||' AND    process_flag                   = '||G_IN_PROCESS
    ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
    ||' AND    sr_instance_code               = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     p_batch_id,
                      v_instance_code;


    --Generation of disposition_id(PO, PO Req. and Intransit)
    OPEN  c3(p_batch_id);
    FETCH c3 BULK COLLECT INTO lb_rowid ;

    IF c3%ROWCOUNT > 0  THEN
      v_sql_stmt := 3.0;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_supplies
      SET    disposition_id = msc_st_disposition_id_s.NEXTVAL
      WHERE  rowid          = lb_rowid(j);

      v_sql_stmt := 3.1;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      INSERT INTO msc_local_id_supply
        (local_id,
         st_transaction_id,
         instance_id,
         entity_name,
         data_source_type,
         char1,
         char2,
         char3,
         number1,
         SOURCE_DISPOSITION_ID,
         last_update_date,
         last_updated_by,
         creation_date,
         created_by)
      SELECT
         disposition_id,
         st_transaction_id,
         v_instance_id,
         'DISPOSITION_ID',
         data_source_type,
         v_instance_code,
         company_name,
         order_number,
         order_type,
         SOURCE_DISPOSITION_ID,
         v_current_date,
         v_current_user,
         v_current_date,
         v_current_user
      FROM  msc_st_supplies
      WHERE rowid = lb_rowid(j);
    END IF;
    CLOSE c3 ;

    v_sql_stmt := 4.0;
    lv_sql_stmt :=
    'UPDATE msc_st_supplies mss '
    ||' SET disposition_id = (SELECT local_id'
    ||'       FROM   msc_local_id_supply mls'
    ||'       WHERE  mls.char3       = mss.order_number'
    ||'       AND    mls.number1     = mss.order_type'
    ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mss.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mls.char1       = mss.sr_instance_code'
    ||'       AND    mls.entity_name = ''DISPOSITION_ID'' ) '
    ||' WHERE  order_type  IN(1,2,8,11,12,73,74,87)'
    ||' AND    NVL(disposition_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND    deleted_flag                   = '||SYS_NO
    ||' AND    process_flag                   = '||G_IN_PROCESS
    ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
    ||' AND    sr_instance_code               = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     p_batch_id,
                     v_instance_code;


  COMMIT ;
  IF c_lock%ISOPEN THEN
    CLOSE c_lock;
  END IF;


    OPEN c1(p_batch_id);
    FETCH c1 BULK COLLECT INTO lb_rowid;
    IF c1%ROWCOUNT > 0  THEN

    v_sql_stmt := 5.0;
    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
    UPDATE msc_st_supplies
    SET    st_transaction_id   = msc_st_supplies_s.NEXTVAL,
           refresh_id          = v_refresh_id,
           last_update_date    = v_current_date,
           last_updated_by     = v_current_user,
           creation_date       = v_current_date,
           created_by          = v_current_user
    WHERE  rowid               = lb_rowid(j);

    END IF;
    CLOSE c1;

    lv_where_str :=
    '   AND NVL(deleted_flag,'||NULL_VALUE||') '
    ||' NOT IN(1,2)';

    --Log a warning for those records where the deleted_flag has a value other
    --SYS_NO
    lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_SUPPLIES',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => p_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'DELETED_FLAG',
                    p_debug             => v_debug,
                    p_default_value     => SYS_NO);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

--bug 2773881 (ssurendr) validation on need_by_date/promised_date -- changes begin

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_COL_VAL_NULL',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAME',
                    p_token_value1      => 'NEED_BY_DATE OR '
                                           ||' PROMISED_DATE');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    v_sql_stmt := 5.1;
    lv_sql_stmt :=
    'UPDATE   msc_st_supplies '
    ||' SET   error_text   = ''' || lv_message_text || ''','
    ||'       process_flag  = '||G_ERROR_FLG
    ||' WHERE NEED_BY_DATE                   is null '
    ||' AND   PROMISED_DATE                  is null '
    ||' AND   order_type                   in (1,74)  '
    ||' AND   process_flag                   = '||G_IN_PROCESS
    ||' AND   NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
    ||' AND   sr_instance_code               = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     p_batch_id,
                      v_instance_code;

--bug 2773881 (ssurendr) validation on need_by_date/promised_date -- changes end

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_INVALID_VALUE',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAME',
                    p_token_value1      => 'ORGANIZATION_CODE');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Derive Organization_id
    lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                   (p_table_name       => 'MSC_ST_SUPPLIES',
                    p_org_partner_name => 'ORGANIZATION_CODE',
                    p_org_partner_id   => 'ORGANIZATION_ID',
                    p_instance_code    => v_instance_code,
                    p_partner_type     => G_ORGANIZATION,
                    p_error_text       => lv_error_text,
                    p_batch_id         => p_batch_id,
                    p_severity         => G_SEV_ERROR,
                    p_message_text     => lv_message_text,
                    p_debug            => v_debug,
                    p_row              => lv_column_names);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -------- populate condition type


OPEN c6(p_batch_id);
    FETCH c6 BULK COLLECT INTO lb_rowid;
    IF c6%ROWCOUNT > 0  THEN

    v_sql_stmt := 2.2;
    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_supplies mss
      SET mss.condition_type = (SELECT nvl(msi.condition_type,'G' )
              FROM msc_sub_inventories msi
              WHERE msi.organization_id = mss.organization_id
              AND msi.plan_id = -1
              AND msi.sub_inventory_code = mss.subinventory_code
              AND msi.sr_instance_id = v_instance_id
              AND mss.sr_instance_code = v_instance_code
              UNION
              SELECT nvl(mssi.condition_type ,'G' ) from msc_st_sub_inventories mssi
              WHERE mssi.organization_code = mss.organization_code
              AND mssi.sub_inventory_code = mss.subinventory_code
              AND mssi.sr_instance_code = mss.sr_instance_code)
    WHERE  rowid          = lb_rowid(j);

  msc_util.initialize_common_globals (v_instance_id);

      v_sql_stmt := 2.3;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_supplies mss
      SET mss.ITEM_TYPE_ID = MSC_UTIL.G_PARTCONDN_ITEMTYPEID,
          mss.ITEM_TYPE_VALUE  =DECODE(mss.condition_type,'G',MSC_UTIL.G_PARTCONDN_GOOD,'B',MSC_UTIL.G_PARTCONDN_BAD,MSC_UTIL.G_PARTCONDN_GOOD)
      WHERE  rowid          = lb_rowid(j);

    END IF;
    CLOSE c6;

  IF v_instance_type = G_INS_OTHER THEN

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PLANNING_PARTNER_SITE_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      UPDATE  MSC_ST_SUPPLIES
       SET PLANNING_PARTNER_SITE_ID = (SELECT local_id
                                      FROM msc_local_id_setup
                                      WHERE  char1 = sr_instance_code
                                      AND    NVL(char2,NULL_CHAR) = NVL(company_name,NULL_CHAR)
                                      AND    char4            = PLANNING_PARTNER_SITE_CODE
                                      AND    number1          = G_VENDOR
                                      AND    entity_name      = 'SR_TP_SITE_ID' )
      WHERE  sr_instance_code = v_instance_code
       AND    NVL(PLANNING_PARTNER_SITE_ID,NULL_VALUE) = NULL_VALUE
      AND    NVL(batch_id,NULL_VALUE)= p_batch_id
      AND    process_flag     = G_IN_PROCESS
      AND    PLANNING_TP_TYPE = 1
      AND    ORDER_TYPE = 18;



      UPDATE  MSC_ST_SUPPLIES
       SET PLANNING_PARTNER_SITE_ID = (SELECT local_id
                                      FROM msc_local_id_setup
                                      WHERE  char1 = sr_instance_code
                                      AND    char3            = PLANNING_PARTNER_SITE_CODE
                                      AND    number1          = G_ORGANIZATION
                                      AND    entity_name      = 'SR_TP_ID' )
      WHERE  sr_instance_code = v_instance_code
       AND    NVL(PLANNING_PARTNER_SITE_ID,NULL_VALUE) = NULL_VALUE
      AND    NVL(batch_id,NULL_VALUE)= p_batch_id
      AND    process_flag     = G_IN_PROCESS
      AND    PLANNING_TP_TYPE = 2
      AND     ORDER_TYPE =18;

      UPDATE  MSC_ST_SUPPLIES mss1
      SET     process_flag = G_ERROR_FLG,
              error_text   = lv_message_text
      WHERE   EXISTS( SELECT 1
                      FROM   MSC_ST_SUPPLIES mss2
                      WHERE  mss2.sr_instance_code  = mss1.sr_instance_code
                      AND    mss2.process_flag      = G_IN_PROCESS
                      AND    NVL(mss2.planning_partner_site_id,NULL_VALUE) = NULL_VALUE
                      GROUP BY sr_instance_code HAVING COUNT(*) > 0)
      AND     mss1.process_flag             = G_IN_PROCESS
      AND     mss1.sr_instance_code            = v_instance_code
      AND     NVL(batch_id,NULL_VALUE)        = p_batch_id -- bug 8547376
      AND     NVL(mss1.planning_partner_site_id,NULL_VALUE) = NULL_VALUE
      AND     ORDER_TYPE=18;

      UPDATE  MSC_ST_SUPPLIES
       SET OWNING_PARTNER_SITE_ID = (SELECT local_id
                                      FROM msc_local_id_setup
                                      WHERE  char1 = sr_instance_code
                                      AND    NVL(char2,NULL_CHAR) = NVL(company_name,NULL_CHAR)
                                      AND    char4            = OWNING_PARTNER_SITE_CODE
                                      AND    number1          = G_VENDOR
                                      AND    entity_name      = 'SR_TP_SITE_ID' )
      WHERE  sr_instance_code = v_instance_code
       AND    NVL(OWNING_PARTNER_SITE_ID,NULL_VALUE) = NULL_VALUE
      AND    NVL(batch_id,NULL_VALUE)= p_batch_id
      AND    process_flag     = G_IN_PROCESS
      AND    OWNING_TP_TYPE = 1
      AND    ORDER_TYPE=18;

      UPDATE  MSC_ST_SUPPLIES
       SET OWNING_PARTNER_SITE_ID = (SELECT local_id
                                      FROM msc_local_id_setup
                                      WHERE  char1 = sr_instance_code
                                      AND    char3            = OWNING_PARTNER_SITE_CODE
                                      AND    number1          = G_ORGANIZATION
                                      AND    entity_name      = 'SR_TP_ID')
      WHERE  sr_instance_code = v_instance_code
       AND    NVL(OWNING_PARTNER_SITE_ID,NULL_VALUE) = NULL_VALUE
      AND    NVL(batch_id,NULL_VALUE)= p_batch_id
      AND    process_flag     = G_IN_PROCESS
      AND    OWNING_TP_TYPE = 2
      AND    ORDER_TYPE=18;

        lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'OWNING_PARTNER_SITE_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      UPDATE  MSC_ST_SUPPLIES mss1
      SET     process_flag = G_ERROR_FLG,
              error_text   = lv_message_text
      WHERE   EXISTS( SELECT 1
                      FROM   MSC_ST_SUPPLIES mss2
                      WHERE  mss2.sr_instance_code  = mss1.sr_instance_code
                      AND    mss2.process_flag      = G_IN_PROCESS
                      AND    NVL(mss2.owning_partner_site_id,NULL_VALUE) = NULL_VALUE
                      GROUP BY sr_instance_code HAVING COUNT(*) > 0)
      AND     mss1.process_flag             = G_IN_PROCESS
      AND     mss1.sr_instance_code            = v_instance_code
      AND     NVL(batch_id,NULL_VALUE)       = p_batch_id -- bug 8547376
      AND     NVL(mss1.owning_partner_site_id,NULL_VALUE) = NULL_VALUE
      AND     ORDER_TYPE =18 ;

    -----------------start of changes for flatfile load into ERP instance-----------------------

ELSE

   UPDATE MSC_ST_SUPPLIES t1
     SET PLANNING_PARTNER_SITE_ID =
          (SELECT mtps.sr_tp_site_id
           FROM    msc_trading_partner_sites mtps
           WHERE  mtps.partner_type = G_VENDOR
           AND    mtps.sr_instance_id = v_instance_id
           AND    mtps.tp_site_code = PLANNING_PARTNER_SITE_CODE
           AND rownum =1)
   WHERE  sr_instance_code = v_instance_code
    AND    NVL(PLANNING_PARTNER_SITE_ID,NULL_VALUE) = NULL_VALUE
    AND    NVL(batch_id,NULL_VALUE)= p_batch_id
    AND    process_flag     = G_IN_PROCESS
    AND    PLANNING_TP_TYPE = 1
    AND    order_type=18;

  UPDATE MSC_ST_SUPPLIES t1
   SET PLANNING_PARTNER_SITE_ID =
       (SELECT sr_tp_id
       FROM   msc_trading_partners mtp
       WHERE  mtp.partner_type     = G_ORGANIZATION
       AND    mtp.organization_code = v_instance_code||':'||t1.PLANNING_PARTNER_SITE_CODE
       AND    mtp.sr_instance_id  =v_instance_id)
    WHERE  t1.sr_instance_code = v_instance_code
    AND    NVL(t1.PLANNING_PARTNER_SITE_ID,NULL_VALUE) = NULL_VALUE
    AND    NVL(t1.batch_id,NULL_VALUE)= p_batch_id
    AND    t1.process_flag     = G_IN_PROCESS
    AND    t1.PLANNING_TP_TYPE = 2
    AND    t1.order_type=18;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
              (p_app_short_name    => 'MSC',
               p_error_code        => 'MSC_PP_INVALID_VALUE',
               p_message_text      => lv_message_text,
               p_error_text        => lv_error_text,
               p_token1            => 'COLUMN_NAME',
               p_token_value1      => 'PLANNING_PARTNER_SITE_CODE');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    UPDATE  MSC_ST_SUPPLIES mss1
    SET     process_flag = G_ERROR_FLG,
            error_text   = lv_message_text
    WHERE   mss1.process_flag             = G_IN_PROCESS
    AND     mss1.sr_instance_code         = v_instance_code
    AND     NVL(batch_id,NULL_VALUE)      = p_batch_id -- bug 8547376
    AND     NVL(mss1.planning_partner_site_id,NULL_VALUE) = NULL_VALUE
    AND     order_type=18 ;

   UPDATE MSC_ST_SUPPLIES t1
     SET OWNING_PARTNER_SITE_ID =
          (SELECT mtps.sr_tp_site_id
           FROM    msc_trading_partner_sites mtps
           WHERE  mtps.partner_type = G_VENDOR
           AND    mtps.sr_instance_id = v_instance_id
           AND    mtps.tp_site_code = OWNING_PARTNER_SITE_CODE
           AND rownum =1)
   WHERE  sr_instance_code = v_instance_code
    AND    NVL(OWNING_PARTNER_SITE_ID,NULL_VALUE) = NULL_VALUE
    AND    NVL(batch_id,NULL_VALUE)= p_batch_id
    AND    process_flag     = G_IN_PROCESS
    AND    OWNING_TP_TYPE = 1
    AND    order_type=18;

  UPDATE MSC_ST_SUPPLIES t1
   SET OWNING_PARTNER_SITE_ID =
       (SELECT sr_tp_id
       FROM   msc_trading_partners mtp
       WHERE  mtp.partner_type     = G_ORGANIZATION
       AND    mtp.organization_code = v_instance_code||':'||t1.OWNING_PARTNER_SITE_CODE
       AND    mtp.sr_instance_id  =v_instance_id)
    WHERE  t1.sr_instance_code = v_instance_code
    AND    NVL(t1.OWNING_PARTNER_SITE_ID,NULL_VALUE) = NULL_VALUE
    AND    NVL(t1.batch_id,NULL_VALUE)= p_batch_id
    AND    t1.process_flag     = G_IN_PROCESS
    AND    t1.OWNING_TP_TYPE = 2
    AND    t1.order_type=18;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
              (p_app_short_name    => 'MSC',
               p_error_code        => 'MSC_PP_INVALID_VALUE',
               p_message_text      => lv_message_text,
               p_error_text        => lv_error_text,
               p_token1            => 'COLUMN_NAME',
               p_token_value1      => 'OWNING_PARTNER_SITE_CODE');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    UPDATE  MSC_ST_SUPPLIES mss1
    SET     process_flag = G_ERROR_FLG,
            error_text   = lv_message_text
    WHERE   mss1.process_flag             = G_IN_PROCESS
    AND     mss1.sr_instance_code         = v_instance_code
    AND     NVL(batch_id,NULL_VALUE)      = p_batch_id -- bug 8547376
    AND     NVL(mss1.owning_partner_site_id,NULL_VALUE) = NULL_VALUE
    AND     order_type=18;				--7704629

END IF;

    -----------------end of changes for flatfile load into ERP instance-----------

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_INVALID_VALUE',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAME',
                    p_token_value1      => 'ITEM_NAME');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Derive Inventory_item_id
    lv_return := MSC_ST_UTIL.DERIVE_ITEM_ID
                   (p_table_name       => 'MSC_ST_SUPPLIES',
                    p_item_col_name    => 'ITEM_NAME',
                    p_item_col_id      => 'INVENTORY_ITEM_ID',
                    p_instance_id      => v_instance_id,
                    p_instance_code    => v_instance_code,
                    p_error_text       => lv_error_text,
                    p_batch_id         => p_batch_id,
                    p_severity         => G_SEV_ERROR,
                    p_message_text     => lv_message_text,
                    p_debug            => v_debug,
                    p_row              => lv_column_names);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_INVALID_VALUE',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAME',
                    p_token_value1      => 'SUPPLIER_NAME');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Derive Supplier_id
    lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                   (p_table_name       => 'MSC_ST_SUPPLIES',
                    p_org_partner_name => 'SUPPLIER_NAME',
                    p_org_partner_id   => 'SUPPLIER_ID',
                    p_instance_code    => v_instance_code,
                    p_partner_type     => G_VENDOR,
                    p_error_text       => lv_error_text,
                    p_batch_id         => p_batch_id,
                    p_severity         => G_SEV3_ERROR,
                    p_message_text     => lv_message_text,
                    p_debug            => v_debug,
                    p_row              => lv_column_names);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_INVALID_VALUE',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAME',
                    p_token_value1      => 'SUPPLIER_SITE_CODE');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Derive Supplier_site_id
    lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                   (p_table_name        => 'MSC_ST_SUPPLIES',
                    p_partner_name      => 'SUPPLIER_NAME',
                    p_partner_site_code => 'SUPPLIER_SITE_CODE',
                    p_partner_site_id   => 'SUPPLIER_SITE_ID',
                    p_instance_code     => v_instance_code,
                    p_partner_type      => G_VENDOR,
                    p_error_text        => lv_error_text,
                    p_batch_id          => p_batch_id,
                    p_severity          => G_SEV3_ERROR,
                    p_message_text      => lv_message_text,
                    p_debug             => v_debug,
                    p_row               => lv_column_names);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_COL_VAL_NULL',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAME',
                    p_token_value1      => 'ORDER_NUMBER OR '
                                           ||' PURCH_LINE_NUM OR '
                                           ||' SCHEDULE_DESIGNATOR OR '
                                           ||' SCHEDULE_LINE_NUM OR '
                                           ||' NEW_SCHEDULE_DATE OR '
                                           ||' NEW_ORDER_QUANTITY');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    v_sql_stmt := 10;
    lv_sql_stmt :=
    'UPDATE   msc_st_supplies '
    ||' SET   error_text   = '||''''||lv_message_text||''''||','
    ||'       process_flag  = '||G_ERROR_FLG
    ||' WHERE (((NVL(order_number,       '||''''||NULL_CHAR||''''||') '
    ||'       =                          '||''''||NULL_CHAR||''''
    ||' OR    NVL(purch_line_num, '||NULL_VALUE|| ') = '||NULL_VALUE||')'
    ||' AND   order_type       IN(1,2,8,11,12,73,74,87))'
    ||' OR    ((NVL(schedule_designator, '||''''||NULL_CHAR||''''||') '
    ||'       =                          '||''''||NULL_CHAR||''''
    ||' OR    NVL(schedule_line_num ,    '||''''||NULL_CHAR||''''||') '
    ||'       =                          '||''''||NULL_CHAR||''''||')'
    ||' AND   ORDER_TYPE  = 5)'
--bug 2773881 (ssurendr) new_schedule_date will not be provided for PO,ONHAND (bug 2903052)
    ||' OR    ((NVL(new_schedule_date,SYSDATE-36500 ) = SYSDATE-36500'
    ||' AND   ORDER_TYPE  NOT IN (1,18,74))'
    ||' OR    NVL(new_order_quantity,'||NULL_VALUE||') = '||NULL_VALUE||')'
    ||' AND   deleted_flag                   = '||SYS_NO||')'
    ||' AND   process_flag                   = '||G_IN_PROCESS
    ||' AND   NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
    ||' AND   sr_instance_code               = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     p_batch_id,
                      v_instance_code;


   -- bug 2903356

   lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_DOCK_INVALID_VAL',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAME1',
                    p_token_value1      => 'NEW_SCHEDULE_DATE',
                    p_token2            => 'COLUMN_NAME2',
                    p_token_value2      => 'NEW_DOCK_DATE');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --If NEW_DOCK_DATE is greater than NEW_SCHEDULE_DATE we will raise an error
-- start
    lv_where_str :=
    ' AND NVL(new_dock_date,SYSDATE-36500) > NVL(new_schedule_date,SYSDATE-36500)'
    ||' AND   deleted_flag        ='||SYS_NO
    ||' AND   order_type          IN(2,11,12,73,87)'
    ||' AND   process_flag        = '||G_IN_PROCESS;

    lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_SUPPLIES',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => p_batch_id,
                    p_where_str         => lv_where_str);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

-- end

/*
    lv_sql_stmt :=
    'UPDATE   msc_st_supplies '
    ||' SET   process_flag        = '||G_ERROR_FLG||','
    ||'       error_text   = '||''''||lv_message_text||''''
    ||' WHERE NVL(new_dock_date,SYSDATE-36500) > NVL(new_schedule_date,SYSDATE-36500)'
    ||' AND   deleted_flag        ='||SYS_NO
    ||' AND   order_type          IN(2,11,12,73,87)'
    ||' AND   process_flag        = '||G_IN_PROCESS
    ||' AND   NVL(batch_id,'||NULL_VALUE||')= :p_batch_id '
    ||' AND   sr_instance_code    =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     p_batch_id,
                      v_instance_code;
*/

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_POS_NON_ZERO',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAME',
                    p_token_value1      => 'NEW_ORDER_QUANTITY');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Negative quantities are allowed only for the order type On-Hand(18)
    v_sql_stmt := 11;
    lv_sql_stmt :=
    'UPDATE    msc_st_supplies'
    ||' SET    process_flag                   = '||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  new_order_quantity            <= 0'
    ||' AND    order_type                    <> 18'
    ||' AND    process_flag                   = '||G_IN_PROCESS
    ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
    ||' AND    sr_instance_code               = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     p_batch_id,
                      v_instance_code;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAMES',
                    p_token_value1      => 'SR_INSTANCE_CODE,'
                                           ||' COMPANY_NAME,'
                                           ||' ORGANIZATION_CODE,'
                                           ||' DESIGNATOR_TYPE AND'
                                           ||' DESIGNATOR',
                    p_token2            => 'MASTER_TABLE',
                    p_token_value2      => 'MSC_ST_DESIGNATORS',
                    p_token3            => 'CHILD_TABLE',
                    p_token_value3      => 'MSC_ST_SUPPLIES');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    v_sql_stmt := 12;
    lv_sql_stmt :=
    'UPDATE  msc_st_supplies mss'
    ||' SET  process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE NOT EXISTS(SELECT 1'
    ||'       FROM   msc_st_designators msd'
    ||'       WHERE  msd.designator        = mss.schedule_designator'
    ||'       AND    msd.organization_code = mss.organization_code'
    ||'       AND    NVL(msd.company_name,'||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mss.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    msd.sr_instance_code  = mss.sr_instance_code'
    ||'       AND    msd.process_flag      = '||G_VALID
    ||'       AND    msd.designator_type   = 2'
    ||'       AND    NVL(msd.disable_date, SYSDATE+1) > SYSDATE'
    ||'       UNION'
    ||'       SELECT 1'
    ||'       FROM   msc_designators md'
    ||'       WHERE  md.designator      = mss.schedule_designator'
    ||'       AND    md.organization_id = mss.organization_id '
    ||'       AND    md.sr_instance_id  = :v_instance_id '
    ||'       AND    md.designator_type = 2'
    ||'       AND    NVL(md.disable_date, SYSDATE+1) > SYSDATE)'
    ||' AND order_type    = 5'
    ||' AND deleted_flag  = '||SYS_NO
    ||' AND process_flag  = '||G_IN_PROCESS
    ||' AND NVL(batch_id,'||NULL_VALUE||')= :p_batch_id'
    ||' AND sr_instance_code = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_id,
                      p_batch_id,
                      v_instance_code;

    --Ship_to_party_name and ship_to_site_code validation is specific to
    --Supply chain exchange and the validation will be done only for PO's

    IF v_instance_type = G_SCE THEN

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAMES',
                    p_token_value1      => 'SHIP_TO_PARTY_NAME',
                    p_token2            => 'MASTER_TABLE',
                    p_token_value2      => 'MSC_ST_DESIGNATORS',
                    p_token3            => 'CHILD_TABLE',
                    p_token_value3      => 'MSC_ST_SUPPLIES');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 13;
      lv_sql_stmt :=
      'UPDATE    msc_st_supplies '
      ||' SET    process_flag        = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE  NOT EXISTS (SELECT 1'
      ||'        FROM  hz_parties '
      ||'        WHERE party_name = ship_to_party_name) '
      ||' AND    order_type       in (1,74)'
      ||' AND    process_flag     = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||')= :p_batch_id'
      ||' AND    sr_instance_code = :v_instance_code';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     p_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAMES',
                    p_token_value1      => 'SHIP_TO_PARTY_NAME AND'
                                           ||' SHIP_TO_SITE_CODE',
                    p_token2            => 'MASTER_TABLE',
                    p_token_value2      => 'MSC_ST_DESIGNATORS',
                    p_token3            => 'CHILD_TABLE',
                    p_token_value3      => 'MSC_ST_SUPPLIES');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 14;
      lv_sql_stmt :=
      'UPDATE    msc_st_supplies ms'
      ||' SET    process_flag        = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE  NOT EXISTS (SELECT 1'
      ||'        FROM  hz_parties hp,hz_party_sites hps'
      ||'        WHERE hp.party_name       = ms.ship_to_party_name '
      ||'        AND   hp.party_id         = hps.party_id '
      ||'        AND   hps.party_site_name = ms.ship_to_site_code )'
      ||' AND    order_type       in (1,74)'
      ||' AND    process_flag     = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||')= :p_batch_id'
      ||' AND    sr_instance_code = :v_instance_code';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     p_batch_id,
                        v_instance_code;

    END IF;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAME',
                    p_token_value1      => 'FIRM_PLANNED_TYPE',
                    p_token2            => 'DEFAULT_VALUE',
                    p_token_value2      => SYS_NO);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    lv_where_str :=  ' AND NVL(firm_planned_type, '||NULL_VALUE||') NOT IN(1,2)'
                   ||' AND deleted_flag = '||SYS_NO;

    --Log a warning for those records where the firm_planned_type has a value other
    --NOT IN (1,2)
    lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_SUPPLIES',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => p_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'FIRM_PLANNED_TYPE',
                    p_debug             => v_debug,
                    p_default_value     => SYS_NO);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_FK_REF_NOT_EXIST',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAMES',
                    p_token_value1      => '  SR_INSTANCE_CODE, COMPANY_NAME,'
                                           ||' ORGANIZATION_CODE AND PROJECT_NUMBER',
                    p_token2            => 'MASTER_TABLE',
                    p_token_value2      => 'MSC_ST_PROJECT_TASKS');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Derive Project Id.
    lv_return := MSC_ST_UTIL.DERIVE_PROJ_TASK_ID
                           (p_table_name          => 'MSC_ST_SUPPLIES',
                            p_proj_col_name       => 'PROJECT_NUMBER',
                            p_proj_task_col_id    => 'PROJECT_ID',
                            p_instance_code       => v_instance_code,
                            p_entity_name         => 'PROJECT_ID',
                            p_error_text          => lv_error_text,
                            p_batch_id            => p_batch_id,
                            p_severity            => G_SEV_WARNING,
                            p_message_text        => lv_message_text,
                            p_debug               => v_debug,
                            p_row                 => lv_column_names);
    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_FK_REF_NOT_EXIST',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAMES',
                    p_token_value1      => '  SR_INSTANCE_CODE, COMPANY_NAME,'
                                           ||' ORGANIZATION_CODE, PROJECT_NUMBER,'
                                           ||' TASK_NUMBER',
                    p_token2            => 'MASTER_TABLE',
                    p_token_value2      => 'MSC_ST_PROJECT_TASKS');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Derive Task Id.
    lv_return := MSC_ST_UTIL.DERIVE_PROJ_TASK_ID
                           (p_table_name          => 'MSC_ST_SUPPLIES',
                            p_proj_col_name       => 'PROJECT_NUMBER',
                            p_proj_task_col_id    => 'TASK_ID',
                            p_instance_code       => v_instance_code,
                            p_entity_name         => 'TASK_ID',
                            p_error_text          => lv_error_text,
                            p_task_col_name       => 'TASK_NUMBER',
                            p_batch_id            => p_batch_id,
                            p_severity            => G_SEV_WARNING,
                            p_message_text        => lv_message_text,
                            p_debug               => v_debug,
                            p_row                 => lv_column_names);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_INVALID_VALUE',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAME',
                    p_token_value1      => 'FROM_ORGANIZATION_CODE');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Derive FROM_ORGANIZATION_ID
    lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                   (p_table_name       => 'MSC_ST_SUPPLIES',
                    p_org_partner_name => 'FROM_ORGANIZATION_CODE',
                    p_org_partner_id   => 'FROM_ORGANIZATION_ID',
                    p_instance_code    => v_instance_code,
                    p_partner_type     => G_ORGANIZATION,
                    p_error_text       => lv_error_text,
                    p_batch_id         => p_batch_id,
                    p_severity         => G_SEV3_ERROR,
                    p_message_text     => lv_message_text,
                    p_debug            => v_debug,
                    p_row              => lv_column_names);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Derive source_Organization_id and source_sr_instance_id,
    v_sql_stmt := 15;
    lv_sql_stmt :=
    'UPDATE msc_st_supplies mss'
    ||' SET source_organization_id = from_organization_id,'
    ||'     source_sr_instance_id  = (select instance_id'
    ||'     FROM   msc_apps_instances mai'
    ||'     WHERE  mai.instance_code = mss.source_sr_instance_code)'
    ||' WHERE   deleted_flag       ='|| SYS_NO
    ||' AND     process_flag       ='|| G_IN_PROCESS
    ||' AND     NVL(batch_id,'||NULL_VALUE||')= :p_batch_id'
    ||' AND     sr_instance_code   = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     p_batch_id,
                      v_instance_code;

    --Deriving disposition_id and po_line_id for the supply type PO, Purchase
    --Req. and intransit supplies
    v_sql_stmt := 16;
    lv_sql_stmt :=
    'UPDATE msc_st_supplies mss '
    ||' SET disposition_id = (SELECT local_id'
    ||'       FROM   msc_local_id_supply mls'
    ||'       WHERE  mls.char3       = mss.order_number'
    ||'       AND    mls.number1     = mss.order_type'
    ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mss.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mls.char1       = mss.sr_instance_code'
    ||'       AND    mls.entity_name = ''DISPOSITION_ID'' ),'
    ||'     po_line_id     = (SELECT local_id'
    ||'       FROM   msc_local_id_supply mls'
    ||'       WHERE  mls.number1  = mss.purch_line_num'
    ||'       AND    mls.number2  = mss.order_type'
    ||'       AND    mls.char3    = mss.order_number'
    ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mss.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mls.char1 = mss.sr_instance_code'
    ||'       AND    mls.entity_name = ''PO_LINE_ID'')'
    ||' WHERE  order_type  IN(1,2,8,11,12,73,74,87)'
    ||' AND    deleted_flag     = '||SYS_NO
    ||' AND    process_flag     = '||G_IN_PROCESS
    ||' AND    NVL(batch_id,'||NULL_VALUE||')= :p_batch_id'
    ||' AND    sr_instance_code = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     p_batch_id,
                      v_instance_code;

    v_sql_stmt := 17;
    lv_sql_stmt :=
    'UPDATE msc_st_supplies mss'
    ||' SET sr_mtl_supply_id = (SELECT local_id'
    ||'       FROM   msc_local_id_supply mls'
    ||'       WHERE  mls.char4    = mss.order_number'
    ||'       AND    mls.number1  = mss.purch_line_num'
    ||'       AND    mls.number2  = mss.order_type'
    ||'       AND    mls.char3    = mss.organization_code'
    ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mss.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mls.char1    = mss.sr_instance_code'
    ||'       AND    mls.entity_name = ''SR_MTL_SUPPLY_ID'' )'
    ||' WHERE order_type      IN(1,2,8,11,12,73,74,87)'
    ||' AND   process_flag    = '||G_IN_PROCESS
    ||' AND   NVL(batch_id,'||NULL_VALUE||')= :p_batch_id'
    ||' AND   sr_instance_code = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     p_batch_id,
                      v_instance_code;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_DELETE_FAIL',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --If the deleted_flag is yes and the sr_mtl_supply_id(unique key)
    --derivation fails for the order_types po, req and intransit, then
    --the record will be errored out.
    v_sql_stmt := 18;

    lv_sql_stmt :=
    'UPDATE   msc_st_supplies '
    ||' SET   process_flag        = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE NVL(sr_mtl_supply_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND   deleted_flag        ='||SYS_YES
    ||' AND   order_type          IN(1,2,8,11,12,73,74,87)'
    ||' AND   process_flag        = '||G_IN_PROCESS
    ||' AND   NVL(batch_id,'||NULL_VALUE||')= :p_batch_id '
    ||' AND   sr_instance_code    =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     p_batch_id,
                      v_instance_code;

    --Deriving disposition_id for the Plan Orders.
    v_sql_stmt := 19;
    lv_sql_stmt :=
    'UPDATE msc_st_supplies mss'
    ||' SET disposition_id = (SELECT local_id'
    ||'       FROM   msc_local_id_supply mls'
    ||'       WHERE  mls.char4       = mss.schedule_designator'
    ||'       AND    mls.char5       = mss.schedule_line_num'
    ||'       AND    mls.number1     = mss.order_type'
    ||'       AND    mls.char1       = mss.sr_instance_code'
    ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mss.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mls.char3       = mss.organization_code'
    ||'       AND    mls.entity_name = ''DISPOSITION_ID_MPS'')'
    ||' WHERE  order_type             = 5'
    ||' AND    process_flag           = '||G_IN_PROCESS
    ||' AND   NVL(batch_id,'||NULL_VALUE||')= :p_batch_id'
    ||' AND    sr_instance_code       = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     p_batch_id,
                      v_instance_code;

    --If the deleted_flag is yes and the disposition_id(unique key)
    --derivation fails for the plan orders then the record will be
    --errored out.
    v_sql_stmt := 20;

    lv_sql_stmt :=
    'UPDATE   msc_st_supplies '
    ||' SET   process_flag        = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE NVL(disposition_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND   deleted_flag        ='||SYS_YES
    ||' AND   order_type          = 5'
    ||' AND   process_flag        = '||G_IN_PROCESS
    ||' AND   NVL(batch_id,'||NULL_VALUE||')= :p_batch_id '
    ||' AND   sr_instance_code    =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     p_batch_id,
                      v_instance_code;

    --Call to customised validation.
    MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
      (ERRBUF         => lv_error_text,
       RETCODE        => lv_return,
       pBatchID       => p_batch_id,
       pInstanceCode  => v_instance_code,
       pEntityName    => 'MSC_ST_SUPPLIES',
       pInstanceID    => v_instance_id);

    IF NVL(lv_return,0) <> 0 THEN
      RAISE ex_logging_err;
    END IF;


    --Generation of sr_mtl_supply_id
    OPEN  c2(p_batch_id);
    FETCH c2 BULK COLLECT INTO lb_rowid ;

    IF c2%ROWCOUNT > 0  THEN

      v_sql_stmt := 22;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_supplies
      SET    sr_mtl_supply_id = msc_st_sr_mtl_supply_id_s.NEXTVAL
      WHERE  rowid            = lb_rowid(j);

      v_sql_stmt := 23;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      INSERT INTO msc_local_id_supply
       (local_id,
        st_transaction_id,
        instance_id,
        entity_name,
        data_source_type,
        char1,
        char2,
        char3,
        char4,
        number1,
        number2,
        SOURCE_ORG_ID,
        SOURCE_INVENTORY_ITEM_ID,
        SOURCE_VENDOR_ID,
        SOURCE_VENDOR_SITE_ID,
        SOURCE_TASK_ID,
        SOURCE_FROM_ORGANIZATION_ID,
        SOURCE_SR_MTL_SUPPLY_ID,
        SOURCE_DISPOSITION_ID,
        SOURCE_PROJECT_ID,
        last_update_date,
        last_updated_by,
        creation_date,
        created_by)
      SELECT
        sr_mtl_supply_id,
        st_transaction_id,
        v_instance_id,
        'SR_MTL_SUPPLY_ID',
        data_source_type,
        v_instance_code,
        company_name,
        organization_code ,
        order_number,
        purch_line_num,
        order_type,
        SOURCE_ORG_ID,
        SOURCE_INVENTORY_ITEM_ID,
        SOURCE_VENDOR_ID,
        SOURCE_VENDOR_SITE_ID,
        SOURCE_TASK_ID,
        SOURCE_FROM_ORGANIZATION_ID,
        SOURCE_SR_MTL_SUPPLY_ID,
        SOURCE_DISPOSITION_ID,
        SOURCE_PROJECT_ID,
        v_current_date,
        v_current_user,
        v_current_date,
        v_current_user
      FROM  msc_st_supplies
      WHERE rowid = lb_rowid(j);
    END IF;
    CLOSE c2 ;


    --Generation of po_line_id
    OPEN c4(p_batch_id);
    FETCH c4 BULK COLLECT INTO lb_rowid ;

    IF c4%ROWCOUNT > 0  THEN
      v_sql_stmt := 26;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_supplies
      SET    po_line_id = msc_st_po_line_id_s.NEXTVAL
      WHERE  rowid      = lb_rowid(j);

      v_sql_stmt := 27;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      INSERT INTO msc_local_id_supply
        (local_id,
         st_transaction_id,
         instance_id,
         entity_name,
         data_source_type,
         char1,
         char2,
         char3,
         number1,
         number2,
         SOURCE_ORG_ID,
         SOURCE_INVENTORY_ITEM_ID,
         SOURCE_VENDOR_ID,
         SOURCE_VENDOR_SITE_ID,
         SOURCE_TASK_ID,
         SOURCE_FROM_ORGANIZATION_ID,
         SOURCE_SR_MTL_SUPPLY_ID,
         SOURCE_DISPOSITION_ID,
         SOURCE_PROJECT_ID,
         last_update_date,
         last_updated_by,
         creation_date,
         created_by)
      SELECT
         po_line_id,
         st_transaction_id,
         v_instance_id,
         'PO_LINE_ID',
         data_source_type,
         v_instance_code,
         company_name,
         order_number,
         purch_line_num,
         order_type,
         SOURCE_ORG_ID,
         SOURCE_INVENTORY_ITEM_ID,
         SOURCE_VENDOR_ID,
         SOURCE_VENDOR_SITE_ID,
         SOURCE_TASK_ID,
         SOURCE_FROM_ORGANIZATION_ID,
         SOURCE_SR_MTL_SUPPLY_ID,
         SOURCE_DISPOSITION_ID,
         SOURCE_PROJECT_ID,
         v_current_date,
         v_current_user,
         v_current_date,
         v_current_user
      FROM  msc_st_supplies
      WHERE rowid  = lb_rowid(j);

    END IF;
    CLOSE c4 ;

    --Generation of disposition_id(MPS)
    OPEN c5(p_batch_id);
    FETCH c5 BULK COLLECT INTO lb_rowid ;

    IF c5%ROWCOUNT > 0  THEN
      v_sql_stmt := 28;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_supplies
      SET    disposition_id  = msc_st_disposition_id_s.NEXTVAL
      WHERE  rowid           = lb_rowid(j);

      v_sql_stmt := 29;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      INSERT INTO msc_local_id_supply
        (local_id,
         st_transaction_id,
         instance_id,
         entity_name,
         data_source_type,
         char1,
         char2,
         char3,
         char4,
         char5,
         number1,
         SOURCE_ORG_ID,
         SOURCE_INVENTORY_ITEM_ID,
         SOURCE_VENDOR_ID,
         SOURCE_VENDOR_SITE_ID,
         SOURCE_TASK_ID,
         SOURCE_FROM_ORGANIZATION_ID,
         SOURCE_SR_MTL_SUPPLY_ID,
         SOURCE_DISPOSITION_ID,
         SOURCE_PROJECT_ID,
         last_update_date,
         last_updated_by,
         creation_date,
         created_by)
      SELECT
         disposition_id,
         st_transaction_id,
         v_instance_id,
         'DISPOSITION_ID_MPS',
         data_source_type,
         v_instance_code,
         company_name,
         organization_code,
         schedule_designator,
         schedule_line_num,
         order_type,
         SOURCE_ORG_ID,
         SOURCE_INVENTORY_ITEM_ID,
         SOURCE_VENDOR_ID,
         SOURCE_VENDOR_SITE_ID,
         SOURCE_TASK_ID,
         SOURCE_FROM_ORGANIZATION_ID,
         SOURCE_SR_MTL_SUPPLY_ID,
         SOURCE_DISPOSITION_ID,
         SOURCE_PROJECT_ID,
         v_current_date,
         v_current_user,
         v_current_date,
         v_current_user
      FROM  msc_st_supplies
      WHERE rowid = lb_rowid(j);

      END IF;
      CLOSE c5 ;


    --Updating line_id using disposition_id for the Plan Orders.
    v_sql_stmt := 30;
    lv_sql_stmt :=
    'UPDATE msc_st_supplies mss'
    ||' SET line_id = disposition_id'
    ||' WHERE  order_type             = 5'
    ||' AND    process_flag           = '||G_IN_PROCESS
    ||' AND   NVL(batch_id,'||NULL_VALUE||')= :p_batch_id'
    ||' AND    sr_instance_code       = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     p_batch_id,
                      v_instance_code;

    v_sql_stmt := 31;
    lv_sql_stmt :=
    'UPDATE msc_st_supplies mss '
    ||' SET disposition_id = (SELECT local_id'
    ||'       FROM   msc_local_id_supply mls'
    ||'       WHERE  mls.char3       = mss.order_number'
    ||'       AND    mls.number1     = mss.order_type'
    ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(mss.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mls.char1       = mss.sr_instance_code'
    ||'       AND    mls.entity_name = ''DISPOSITION_ID'' ) '
    ||' WHERE  order_type  IN(1,2,8,11,12,73,74,87)'
    ||' AND    NVL(disposition_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND    deleted_flag                   = '||SYS_NO
    ||' AND    process_flag                   = '||G_IN_PROCESS
    ||' AND    NVL(batch_id,'||NULL_VALUE||') = :p_batch_id'
    ||' AND    sr_instance_code               = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     p_batch_id,
                      v_instance_code;


    -- Bug 2821525
    -- Updating vmi_flag with 1 for Purchase orders ,ASN (Intransit shipments) ,
    -- Shipment Receipts and Requisitions if Item has record of approved supplier list
    -- in msc_item_suppliers and that particular ASL is VMI enabled

    v_sql_stmt := 32;
    lv_sql_stmt :=
      ' UPDATE msc_st_supplies mss '
    ||' SET vmi_flag = ''Y'''
    ||' WHERE   exists (SELECT 1 FROM MSC_TP_ID_LID mtil,'
    ||'                 MSC_TP_SITE_ID_LID mtsil,'
    ||'                 MSC_ITEM_ID_LID t1,'
    ||'                 MSC_ITEM_SUPPLIERS mis'
    ||'                 WHERE mis.organization_id = mss.organization_id '
    ||'                 AND t1.SR_INVENTORY_ITEM_ID= mss.inventory_item_id'
    ||'                 AND t1.sr_instance_id= :v_instance_id'
    ||'                 AND t1.INVENTORY_ITEM_ID =mis.INVENTORY_ITEM_ID'
    ||'                 AND mtil.SR_TP_ID = mss.SUPPLIER_ID'
    ||'                 AND mtil.SR_INSTANCE_ID = :v_instance_id'
    ||'                 AND mtil.PARTNER_TYPE = 1'
    ||'                 AND nvl(mtil.sr_company_id, -1) = nvl(mss.company_id, -1)'
    ||'                 AND mtil.TP_ID = mis.SUPPLIER_ID'
    ||'                 AND mis.SR_INSTANCE_ID = :v_instance_id'
    ||'                 AND mis.plan_id = -1 '
    ||'                 AND mtsil.SR_TP_SITE_ID = mss.Supplier_Site_ID'
    ||'                 AND mtsil.SR_INSTANCE_ID= :v_instance_id'
    ||'                 AND mtsil.Partner_Type = 1'
    ||'                 AND nvl(mtsil.sr_company_id, -1) = nvl(mss.company_id, -1)'
    ||'                 AND mss.Supplier_Site_ID is NOT NULL '
    ||'                 AND mis.SUPPLIER_SITE_ID is NOT NULL'
    ||'                 AND mtsil.TP_SITE_ID = mis.SUPPLIER_SITE_ID'
    ||'                 AND mis.VMI_FLAG           = 1'
    ||'                 UNION ALL '
    ||'                 SELECT 1 FROM MSC_TP_ID_LID mtil2,'
    ||'                 MSC_TP_SITE_ID_LID mtsil2,'
    ||'                 MSC_ITEM_ID_LID t2,'
    ||'                 MSC_ITEM_SUPPLIERS mis2'
    ||'                 WHERE mis2.organization_id = mss.organization_id '
    ||'                 AND t2.SR_INVENTORY_ITEM_ID= mss.inventory_item_id'
    ||'                 AND t2.sr_instance_id= :v_instance_id'
    ||'                 AND t2.INVENTORY_ITEM_ID =mis2.INVENTORY_ITEM_ID'
    ||'                 AND mtil2.SR_TP_ID = mss.SUPPLIER_ID'
    ||'                 AND mtil2.SR_INSTANCE_ID = :v_instance_id'
    ||'                 AND mtil2.PARTNER_TYPE = 1'
    ||'                 AND nvl(mtil2.sr_company_id, -1) = nvl(mss.company_id, -1)'
    ||'                 AND mtil2.TP_ID = mis2.SUPPLIER_ID'
    ||'                 AND mis2.SR_INSTANCE_ID = :v_instance_id'
    ||'                 AND mis2.plan_id = -1 '
    ||'                 AND mtsil2.SR_TP_SITE_ID = mss.Supplier_Site_ID'
    ||'                 AND mtsil2.SR_INSTANCE_ID= :v_instance_id'
    ||'                 AND mtsil2.Partner_Type = 1'
    ||'                 AND nvl(mtsil2.sr_company_id, -1) = nvl(mss.company_id, -1)'
    ||'                 AND mss.Supplier_Site_ID is NOT NULL '
    ||'                 AND mis2.SUPPLIER_SITE_ID is NULL'
    ||'                 AND mis2.VMI_FLAG           = 1 '
    ||'                 AND not exists ( SELECT 1 from MSC_ITEM_SUPPLIERS mis3'
    ||'                                  WHERE mtsil2.TP_SITE_ID = mis3.SUPPLIER_SITE_ID'
    ||'                                  AND mis3.organization_id = mss.organization_id '
    ||'                                  AND t2.SR_INVENTORY_ITEM_ID= mss.inventory_item_id'
    ||'                                  AND t2.sr_instance_id= :v_instance_id'
    ||'                                  AND t2.INVENTORY_ITEM_ID =mis3.INVENTORY_ITEM_ID'
    ||'                                  AND mtil2.SR_TP_ID = mss.SUPPLIER_ID'
    ||'                                  AND mtil2.SR_INSTANCE_ID = :v_instance_id'
    ||'                                  AND mtil2.PARTNER_TYPE = 1'
    ||'                                  AND nvl(mtil2.sr_company_id, -1) = nvl(mss.company_id, -1)'
    ||'                                  AND mtil2.TP_ID = mis3.SUPPLIER_ID '
    ||'                                  AND mis3.SR_INSTANCE_ID = :v_instance_id'
    ||'                                  AND mis3.plan_id = -1)'
    ||'                 UNION ALL '
    ||'                 SELECT 1 FROM MSC_TP_ID_LID mtil4,'
    ||'                 MSC_TP_SITE_ID_LID mtsil4,'
    ||'                 MSC_ITEM_ID_LID t4,'
    ||'                 MSC_ITEM_SUPPLIERS mis4'
    ||'                 WHERE mis4.organization_id = mss.organization_id '
    ||'                 AND t4.SR_INVENTORY_ITEM_ID= mss.inventory_item_id'
    ||'                 AND t4.sr_instance_id= :v_instance_id'
    ||'                 AND t4.INVENTORY_ITEM_ID =mis4.INVENTORY_ITEM_ID'
    ||'                 AND mtil4.SR_TP_ID = mss.SUPPLIER_ID'
    ||'                 AND mtil4.SR_INSTANCE_ID = :v_instance_id'
    ||'                 AND mtil4.PARTNER_TYPE = 1'
    ||'                 AND nvl(mtil4.sr_company_id, -1) = nvl(mss.company_id, -1)'
    ||'                 AND mtil4.TP_ID = mis4.SUPPLIER_ID'
    ||'                 AND mis4.SR_INSTANCE_ID = :v_instance_id'
    ||'                 AND mis4.plan_id = -1 '
    ||'                 AND mss.Supplier_Site_ID is NULL '
    ||'                 AND mis4.SUPPLIER_SITE_ID is NULL'
    ||'                 AND mis4.VMI_FLAG           = 1)'
    ||'  AND   order_type  IN (1,2,8,11,12,73,74,87) '
    ||'  AND   process_flag        = '||G_IN_PROCESS
    ||'  AND   NVL(batch_id,'||NULL_VALUE||')= :p_batch_id '
    ||'  AND   sr_instance_code    =:v_instance_code';




      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_id, v_instance_id, v_instance_id, v_instance_id, v_instance_id,
                      v_instance_id, v_instance_id,v_instance_id, v_instance_id, v_instance_id,
                      v_instance_id, v_instance_id, v_instance_id, v_instance_id, p_batch_id,
                      v_instance_code;


  -- bug 2903052 defaulting the new_schedule_date as sysdate for onhand supply

    lv_sql_stmt :=
    'UPDATE msc_st_supplies mss'
    ||' SET new_schedule_date = SYSDATE'
    ||' WHERE   deleted_flag       ='|| SYS_NO
    ||' AND     process_flag       ='|| G_IN_PROCESS
    ||' AND     order_type         = 18'
    ||' AND     NVL(batch_id,'||NULL_VALUE||')= :p_batch_id'
    ||' AND     sr_instance_code   = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     p_batch_id,
                      v_instance_code;




    lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_SUPPLIES',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                  p_debug           => v_debug,
                   p_batch_id       => p_batch_id);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_SUPPLIES',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_message_text      => NULL,
                    p_error_text        => lv_error_text,
                    p_debug             => v_debug,
                    p_batch_id          => p_batch_id);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    COMMIT;

  EXCEPTION
    WHEN too_many_rows THEN
      lv_error_text  := substr('MSC_CL_PRE_PROCESS.LOAD_SUPPLY'||'('
                      ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;
      IF c_lock%ISOPEN THEN
        CLOSE c_lock;
      END IF;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;
      IF c_lock%ISOPEN THEN
        CLOSE c_lock;
      END IF;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_SUPPLY'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;
      IF c_lock%ISOPEN THEN
        CLOSE c_lock;
      END IF;

  END LOAD_SUPPLY;

/*==========================================================================+
| DESCRIPTION  : This procedure is called for validating demand related     |
|                records from the msc_st_sales_orders table.                |
+==========================================================================*/
  PROCEDURE  LOAD_SALES_ORDER (p_batch_id  IN NUMBER ) IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;

  lb_rowid          RowidTab;

  lv_column_names   VARCHAR2(5000);     -- Stores cocatenated column names
  lv_return         NUMBER;
  lv_error_text     VARCHAR2(250);
  lv_where_str      VARCHAR2(5000);
  lv_sql_stmt       VARCHAR2(5000);
  lv_cursor_stmt    VARCHAR2(5000);
  lv_message_text   msc_errors.error_text%TYPE;
  lv_batch_id       NUMBER;

  ex_logging_err    EXCEPTION;
  busy EXCEPTION;
  PRAGMA EXCEPTION_INIT(busy, -54);

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_sales_orders
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    batch_id                = p_batch_id
    AND    sr_instance_code        = v_instance_code;

  CURSOR c2(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_sales_orders
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(demand_source_header_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag      = SYS_NO
    GROUP BY SR_INSTANCE_CODE,COMPANY_NAME,
             ORGANIZATION_CODE,SALES_ORDER_NUMBER;

  CURSOR c3(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_sales_orders
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(demand_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag      = SYS_NO;

  CURSOR c4(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_sales_orders
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(ship_set_id,NULL_VALUE) = NULL_VALUE
    AND    NVL(ship_set_name,NULL_CHAR) <> NULL_CHAR
    AND    deleted_flag      = SYS_NO
    GROUP BY SR_INSTANCE_CODE,COMPANY_NAME,
             ORGANIZATION_CODE,SALES_ORDER_NUMBER, SHIP_SET_NAME;

  CURSOR c5(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_sales_orders
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(arrival_set_id,NULL_VALUE) = NULL_VALUE
    AND    NVL(arrival_set_name,NULL_CHAR) <> NULL_CHAR
    AND    deleted_flag      = SYS_NO
    GROUP BY SR_INSTANCE_CODE,COMPANY_NAME,
             ORGANIZATION_CODE,SALES_ORDER_NUMBER, ARRIVAL_SET_NAME;

  CURSOR c_lock(p_batch_id NUMBER)  IS
    SELECT  'X'
    FROM    msc_st_sales_orders mso ,
            msc_st_sales_orders mcr
    WHERE   mso.batch_id           = p_batch_id
    AND     mso.batch_id          <>  nvl(mcr.batch_id,NULL_VALUE)
    AND     mso.demand_source_header_id IS NULL
    AND     mcr.demand_source_header_id IS NULL
    AND     NVL(mso.company_name,NULL_CHAR)= NVL(mcr.company_name,NULL_CHAR)
    AND     mso.organization_code  =  mcr.organization_code
    AND     mso.sales_order_number =  mcr.sales_order_number
    AND     mso.sr_instance_code   =  mcr.sr_instance_code
    AND     mso.batch_id           <> mcr.batch_id
    FOR UPDATE NOWAIT   ;

  BEGIN

  lv_column_names :=
  'ITEM_NAME                              ||''~''||'
  ||' ORGANIZATION_CODE                   ||''~''||'
  ||' PRIMARY_UOM_QUANTITY                ||''~''||'
  ||' COMPLETED_QUANTITY                  ||''~''||'
  ||' REQUIREMENT_DATE                    ||''~''||'
  ||' SALES_ORDER_NUMBER                  ||''~''||'
  ||' LINE_NUM                            ||''~''||'
  ||' SR_INSTANCE_CODE                    ||''~''||'
  ||' RESERVATION_TYPE                    ||''~''||'
  ||' RESERVATION_QUANTITY                ||''~''||'
  ||' SUBINVENTORY                        ||''~''||'
  ||' DEMAND_CLASS                        ||''~''||'
  ||' SALESREP_CONTACT                    ||''~''||'
  ||' ORDERED_ITEM_NAME                   ||''~''||'
  ||' AVAILABLE_TO_MRP                    ||''~''||'
  ||' CUSTOMER_NAME                       ||''~''||'
  ||' SHIP_TO_SITE_CODE                   ||''~''||'
  ||' BILL_TO_SITE_CODE                   ||''~''||'
  ||' PLANNING_GROUP                      ||''~''||'
  ||' DEMAND_PRIORITY                     ||''~''||'
  ||' REQUEST_DATE                        ||''~''||'
  ||' SELLING_PRICE                       ||''~''||'
  ||' DEMAND_VISIBLE                      ||''~''||'
  ||' FORECAST_VISIBLE                    ||''~''||'
  ||' CTO_FLAG                            ||''~''||'
  ||' ORIGINAL_SYSTEM_REFERENCE           ||''~''||'
  ||' ORIGINAL_SYSTEM_LINE_REFERENCE      ||''~''||'
  ||' COMPANY_NAME                         ||''~''||'
  ||' DELETED_FLAG                        ||''~''||'
  ||' PROJECT_NUMBER                      ||''~''||'
  ||' TASK_NUMBER                         ||''~''||'
  ||' DEMAND_SOURCE_TYPE';

    -- Derive demand source header id

    v_sql_stmt := 1.0;


    -- lock all the  sales order lines in this batch  that match the key .
    -- Vinay 15-NOV-2001.

    LOOP
        BEGIN
           OPEN c_lock(p_batch_id) ;
           EXIT;
        EXCEPTION
           WHEN busy THEN
             lv_error_text :=  substr('MSC_CL_PRE_PROCESS.LOAD_SALES_ORDER'||'('||v_sql_stmt||')'||'p_batch_id :'||p_batch_id|| SQLERRM, 1, 240);
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
             dbms_lock.sleep(5);
          WHEN OTHERS THEN
                 lv_error_text :=  substr('MSC_CL_PRE_PROCESS.LOAD_SALES_ORDER'||'('||v_sql_stmt||')'||'p_batch_id :'||p_batch_id|| SQLERRM, 1, 240);
                  MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);

       v_sql_stmt := 1.1;
       lv_sql_stmt :=
       'UPDATE msc_st_sales_orders '
       ||' SET process_flag = 1,'
       ||'     batch_id = NULL'
       ||' WHERE batch_id = :p_batch_id'
       ||' AND process_flag      = '||G_IN_PROCESS
       ||' AND sr_instance_code  =:v_instance_code';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;
      COMMIT;

      RETURN ;
      END;
    END LOOP;


    -- Generate demand_source_header_id

    v_sql_stmt := 2.0;
   lv_sql_stmt :=
   'UPDATE msc_st_sales_orders mso '
    ||'  SET  demand_source_header_id = (SELECT local_id'
    ||'       FROM   msc_local_id_demand mlid'
    ||'       WHERE  mlid.char1    = mso.sr_instance_code'
    ||'       AND   NVL(mlid.char2,'||''''||NULL_CHAR||''''||') '
    ||'       =     NVL(mso.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.char3    = mso.organization_code'
    ||'       AND    mlid.char4    = mso.sales_order_number'
    ||'       AND    mlid.instance_id = '||v_instance_id
    ||'       AND    mlid.entity_name = ''SALES_ORDER_ID'' )'
    ||' WHERE process_flag      = '||G_IN_PROCESS
    ||' AND   NVL(demand_source_header_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND   batch_id          = :p_batch_id '
    ||' AND   sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;
    OPEN c2(p_batch_id);
    FETCH c2 BULK COLLECT INTO lb_rowid ;

    IF c2%ROWCOUNT > 0  THEN
      v_sql_stmt := 2.1;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_sales_orders
      SET    demand_source_header_id  = msc_st_sales_order_id_s.NEXTVAL
      WHERE  rowid        = lb_rowid(j)
      AND demand_Source_header_id is null;

      v_sql_stmt := 2.2;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      INSERT INTO msc_local_id_demand
        (local_id,
         st_transaction_id,
         instance_id,
         entity_name,
         data_source_type,
         char1,
         char2,
         char3,
         char4,
         SOURCE_DEMAND_SOURCE_HEADER_ID,
         last_update_date,
         last_updated_by,
         creation_date,
         created_by)
      SELECT
         demand_source_header_id,
         st_transaction_id,
         v_instance_id,
         'SALES_ORDER_ID',
         data_source_type,
         sr_instance_code,
         company_name,
         organization_code,
         sales_order_number,
         SOURCE_DEMAND_SOURCE_HEADER_ID,
         v_current_date,
         v_current_user,
         v_current_date,
         v_current_user
      FROM  msc_st_sales_orders
      WHERE rowid = lb_rowid(j);

      END IF;
      CLOSE c2;

    -- Update demand source header id

    v_sql_stmt := 2.4;
   lv_sql_stmt :=
   'UPDATE msc_st_sales_orders mso '
    ||'  SET  demand_source_header_id = (SELECT local_id'
    ||'       FROM   msc_local_id_demand mlid'
    ||'       WHERE  mlid.char1    = mso.sr_instance_code'
    ||'       AND   NVL(mlid.char2,'||''''||NULL_CHAR||''''||') '
    ||'       =     NVL(mso.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.char3    = mso.organization_code'
    ||'       AND    mlid.char4    = mso.sales_order_number'
    ||'       AND    mlid.instance_id = '||v_instance_id
    ||'       AND    mlid.entity_name = ''SALES_ORDER_ID'' )'
    ||' WHERE process_flag      = '||G_IN_PROCESS
    ||' AND   NVL(demand_source_header_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND   batch_id          = :p_batch_id '
    ||' AND   sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;



    COMMIT;
    IF c_lock%ISOPEN THEN
      CLOSE c_lock;
    END IF;
-- release locks



    OPEN c1(p_batch_id);
    FETCH c1 BULK COLLECT INTO lb_rowid;
    IF c1%ROWCOUNT > 0  THEN
    v_sql_stmt := 03;
    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
    UPDATE msc_st_sales_orders
    SET    st_transaction_id   = msc_st_sales_orders_s.NEXTVAL,
           refresh_id          = v_refresh_id,
           last_update_date    = v_current_date,
           last_updated_by     = v_current_user,
           creation_date       = v_current_date,
           created_by          = v_current_user
    WHERE  rowid               = lb_rowid(j);

    END IF;
    CLOSE c1;


    -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SALES_ORDER_NUMBER'
                                              ||'OR LINE_NUM' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Error out records where NOT NULL columns are not present

    v_sql_stmt := 04;

    lv_sql_stmt :=
    'UPDATE    msc_st_sales_orders '
    ||' SET    process_flag  = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  ( NVL(line_num,'||NULL_VALUE||') = '||NULL_VALUE
    ||' OR     NVL(sales_order_number,'||''''||NULL_CHAR||''''||') '
    ||'         = '||''''||NULL_CHAR||''''||')'
    ||' AND   process_flag             = '||G_IN_PROCESS
    ||' AND   batch_id                 = :p_batch_id'
    ||' AND   sr_instance_code         = :v_instance_code';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    lv_where_str :=
    ' AND NVL(deleted_flag,'||NULL_VALUE||') NOT IN(1,2)';

    --Log a warning for those records where the deleted_flag has a value other
    --SYS_NO or SYS_YES
    lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_SALES_ORDERS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => p_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'DELETED_FLAG',
                    p_debug             => v_debug,
                    p_default_value     => SYS_NO);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

     -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     --Derive Organization_id
    lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                   (p_table_name       => 'MSC_ST_SALES_ORDERS',
                    p_org_partner_name => 'ORGANIZATION_CODE',
                    p_org_partner_id   => 'ORGANIZATION_ID',
                    p_instance_code    => v_instance_code,
                    p_partner_type     => G_ORGANIZATION,
                    p_error_text       => lv_error_text,
                    p_batch_id         => p_batch_id,
                    p_severity         => G_SEV_ERROR,
                    p_message_text     => lv_message_text,
                    p_debug            => v_debug,
                    p_row              => lv_column_names);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

     -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORIGINAL_ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --DERIVE ORIGINAL_ITEM_ID

   lv_return :=  MSC_ST_UTIL.DERIVE_ITEM_ID
                     (p_table_name    =>'MSC_ST_SALES_ORDERS',
                      p_item_col_name =>'ORIGINAL_ITEM_NAME',
                      p_item_col_id   =>'ORIGINAL_ITEM_ID',
                      p_instance_code => v_instance_code,
                      p_instance_id   => v_instance_id,
                      p_batch_id      => p_batch_id,
                      p_debug         => v_debug,
                      p_severity      => G_SEV3_ERROR,
                      p_message_text  => lv_message_text,
                      p_row           => lv_column_names,
                      p_error_text    =>lv_error_text);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -----------------------------------moved code from below to above demand_id generation E1----------------
        -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'RESERVATION_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_RESERVATION_TYPE );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   --  Default reservation_type
   lv_where_str :=
   '   AND NVL(reservation_type,'||NULL_VALUE||') NOT IN (1,2,3)'
   ||' AND deleted_flag = '||SYS_NO;


  lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_SALES_ORDERS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => p_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'RESERVATION_TYPE',
                    p_debug             => v_debug,
                    p_default_value     => G_RESERVATION_TYPE);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;
    -----------------------------------moved code from below to above demand_id generation E1----------------

   -- Derive Demand id

   v_sql_stmt := 06;
   lv_sql_stmt :=
   'UPDATE msc_st_sales_orders mso '
    ||'  SET  demand_id = (SELECT local_id'
    ||'       FROM   msc_local_id_demand mlid'
    ||'       WHERE  mlid.char1    = mso.sr_instance_code'
    ||'       AND   NVL(mlid.char2,'||''''||NULL_CHAR||''''||') '
    ||'       =     NVL(mso.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.char3    = mso.organization_code'
    ||'       AND    mlid.char4    = mso.sales_order_number'
    ||'       AND    nvl(mlid.number2,'||NULL_VALUE||') = nvl(mso.reservation_type,'||NULL_VALUE||')'
    ||'       AND   NVL(mlid.char5,'||''''||NULL_CHAR||''''||') '
    ||'       =     NVL(mso.SUBINVENTORY,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.number1     = mso.line_num'
    ||'       AND    mlid.entity_name = ''DEMAND_ID'' )'
    ||' WHERE process_flag      ='||G_IN_PROCESS
    ||' AND   batch_id          = :p_batch_id '
    ||' AND   sr_instance_code  =:v_instance_code';



      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DELETE_FAIL',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;
   -- Error out the records where deleted_flag = SYS_YES
   -- but NULL demand_id or demand_source_header_id

    v_sql_stmt := 07;

  lv_sql_stmt :=
  'UPDATE      msc_st_sales_orders '
  ||' SET      process_flag    ='||G_ERROR_FLG||','
  ||'          error_text   = '||''''||lv_message_text||''''
  ||' WHERE    (NVL(demand_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||' OR       NVL(demand_source_header_id,'||NULL_VALUE||') = '||NULL_VALUE||')'
  ||' AND      deleted_flag  ='||SYS_YES
  ||' AND      batch_id          = :p_batch_id '
  ||' AND      sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;


      -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ITEM_NAME OR PRIMARY_UOM_QUANTITY'
                                              ||' OR REQUIREMENT_DATE' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Error out records where NOT NULL columns are not present

    v_sql_stmt := 08;

    lv_sql_stmt :=
    'UPDATE    msc_st_sales_orders '
    ||' SET    process_flag  = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  ( NVL(primary_uom_quantity,'||NULL_VALUE||') = '||NULL_VALUE
    ||' OR     NVL(requirement_date,SYSDATE-36500 ) = SYSDATE-36500 '
    ||' OR     NVL(ITEM_NAME,'||''''||NULL_CHAR||''''||') '
    ||'         = '||''''||NULL_CHAR||''''||')'
    ||' AND   process_flag        = '||G_IN_PROCESS
    ||' AND   deleted_flag        = '||SYS_NO
    ||' AND   batch_id            = :p_batch_id'
    ||' AND   sr_instance_code    = :v_instance_code';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;


     -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --Derive Inventory_item_id
    lv_return := MSC_ST_UTIL.DERIVE_ITEM_ID
                   (p_table_name       => 'MSC_ST_SALES_ORDERS',
                    p_item_col_name    => 'ITEM_NAME',
                    p_item_col_id      => 'INVENTORY_ITEM_ID',
                    p_instance_id      => v_instance_id,
                    p_instance_code    => v_instance_code,
                    p_error_text       => lv_error_text,
                    p_batch_id         => p_batch_id,
                    p_severity         => G_SEV_ERROR,
                    p_message_text     => lv_message_text,
                    p_debug            => v_debug,
                    p_row              => lv_column_names);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'ORIGINAL_ITEM,ITEM_NAME,'
                                             ||'RECIPROCAL_FLAG,SR_INSTANCE_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_ITEM_SUBSTITUTES/MSC_ITEM_SUBSTITUTES',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_SALES_ORDERS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Validates the product substitution effectivity and directionality rules.

      UPDATE   msc_st_sales_orders
      SET      process_flag      = G_ERROR_FLG,
               error_text        = lv_message_text
      WHERE    original_item_name is not null
      AND      deleted_flag      = SYS_NO
      AND      NOT EXISTS(SELECT   1
                          FROM     msc_item_substitutes mis
                          WHERE  ((mis.reciprocal_flag              = 1
                          AND    ((mis.lower_item_id                = original_item_id
                          AND      mis.higher_item_id               = inventory_item_id )
                          OR      (mis.higher_item_id               = original_item_id
                          AND      mis.lower_item_id                = inventory_item_id )))
                          OR      (mis.reciprocal_flag              = 2
                          AND      mis.lower_item_id                = original_item_id
                          AND      mis.higher_item_id               = inventory_item_id ))
                          AND      nvl(mis.effective_date,sysdate)  <=sysdate
                          AND      nvl(mis.disable_date,sysdate+1)  > sysdate
                          AND      mis.sr_instance_id               = v_instance_id
                          AND      mis.plan_id                      = -1
                          UNION
                          SELECT 1
                          FROM     msc_st_item_substitutes mss
                          WHERE  ((mss.reciprocal_flag         = 1
                          AND    ((mss.lower_item_id           = original_item_id
                          AND      mss.higher_item_id          = inventory_item_id)
                          OR      (mss.higher_item_id          = original_item_id
                          AND      mss.lower_item_id           = inventory_item_id  )))
                          OR      (mss.reciprocal_flag         = 2
                          AND      mss.lower_item_id           = original_item_id
                          AND      mss.higher_item_id          = inventory_item_id ))
                          AND      nvl(effective_date,sysdate) <= sysdate
                          AND      nvl(disable_date,sysdate+1) >  sysdate
                          AND      mss.sr_instance_id          = v_instance_id
                          AND      mss.process_flag            = G_VALID )
      AND      process_flag     = G_IN_PROCESS
      AND      sr_instance_code = v_instance_code
      AND      batch_id         = p_batch_id;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DEMAND_CLASS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      -- Validate Demand Class, if value provided it should exists
      -- in ODS or staging table

     lv_return :=
     MSC_ST_UTIL.VALIDATE_DMD_CLASS(p_table_name       => 'MSC_ST_SALES_ORDERS',
                                    p_dmd_class_column => 'DEMAND_CLASS',
                                    p_instance_id      => v_instance_id,
                                    p_instance_code    => v_instance_code,
                                    p_severity         => G_SEV3_ERROR,
                                    p_message_text     => lv_message_text,
                                    p_batch_id         => p_batch_id,
                                    p_debug            => v_debug,
                                    p_error_text       => lv_error_text);

     if(lv_return <> 0) then
        RAISE ex_logging_err;
     end if;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL_DEFAULT',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'COMPLETED_QUANTITY',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_COMPLETED_QUANTITY  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  --  Default completed_quantity

  lv_where_str :=
  '   AND NVL(completed_quantity,'||NULL_VALUE||')'
  ||'  = '||NULL_VALUE;

  lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_SALES_ORDERS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => p_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'COMPLETED_QUANTITY',
                    p_debug             => v_debug,
                    p_default_value     => G_COMPLETED_QUANTITY);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DEMAND_SOURCE_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_SO_DEMAND_SOURCE_TYPE );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  -- Default demand_source_type

  lv_where_str :=
  '   AND NVL(demand_source_type ,'||NULL_VALUE||') NOT IN (2,8) '
  ||' AND deleted_flag = '||SYS_NO;

  lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_SALES_ORDERS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => p_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'DEMAND_SOURCE_TYPE',
                    p_debug             => v_debug,
                    p_default_value     => G_SO_DEMAND_SOURCE_TYPE);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'AVAILABLE_TO_MRP',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => G_AVAILABLE_TO_MRP);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  --  Default available_to_mrp

  lv_where_str :=
  '   AND NVL(available_to_mrp ,'||''''||NULL_CHAR||''''||') <> ''Y'' '
  ||' AND deleted_flag = '||SYS_NO;


  lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_SALES_ORDERS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => p_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'AVAILABLE_TO_MRP',
                    p_debug             => v_debug,
                    p_default_value     => '''Y''' );

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CTO_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_CTO_FLAG);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default cto_flag

  lv_where_str :=
  '   AND NVL(cto_flag,'||NULL_VALUE||') NOT IN (1,2)' ;

  lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_SALES_ORDERS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => p_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'CTO_FLAG',
                    p_debug             => v_debug,
                    p_default_value     => G_CTO_FLAG);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'FORECAST_VISIBLE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_FORECAST_VISIBLE);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  -- Default forecast_visible

  lv_where_str :=
  '    AND NVL(forecast_visible ,'||''''||NULL_CHAR||''''||')'
  ||'  NOT IN (''Y'', ''N'') AND deleted_flag = '||SYS_NO ;

  lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_SALES_ORDERS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        =>lv_error_text,
                    p_batch_id          => p_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'FORECAST_VISIBLE',
                    p_debug             => v_debug,
                    p_default_value     => '''Y''');

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DEMAND_VISIBLE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_DEMAND_VISIBLE);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  -- Default demand_visible

  lv_where_str :=
   '    AND NVL(demand_visible,'||''''||NULL_CHAR||''''||')'
  ||'   NOT IN (''Y'', ''N'') AND deleted_flag = '||SYS_NO ;

  lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_SALES_ORDERS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => p_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'DEMAND_VISIBLE',
                    p_debug             => v_debug,
                    p_default_value     => '''Y''');

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;


     -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CUSTOMER_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Derive customer_id

   lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_SALES_ORDERS',
                      p_org_partner_name => 'CUSTOMER_NAME',
                      p_org_partner_id   => 'CUSTOMER_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_CUSTOMER,
                      p_error_text       => lv_error_text,
                      p_batch_id         => p_batch_id,
                      p_severity         => G_SEV3_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'BILL_TO_SITE_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  -- Derive bill_to_site_id
  lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                     (p_table_name        => 'MSC_ST_SALES_ORDERS',
                      p_partner_name      => 'CUSTOMER_NAME',
                      p_partner_site_code => 'BILL_TO_SITE_CODE',
                      p_partner_site_id   => 'BILL_TO_SITE_USE_ID',
                      p_instance_code     => v_instance_code,
                      p_partner_type      => G_CUSTOMER,
                      p_error_text        => lv_error_text,
                      p_batch_id          => p_batch_id,
                      p_severity          => G_SEV3_ERROR,
                      p_message_text      => lv_message_text,
                      p_debug             => v_debug,
                      p_row               => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SHIP_TO_SITE_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  -- Derive ship_to_site_id
  lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                     (p_table_name        => 'MSC_ST_SALES_ORDERS',
                      p_partner_name      => 'CUSTOMER_NAME',
                      p_partner_site_code => 'SHIP_TO_SITE_CODE',
                      p_partner_site_id   => 'SHIP_TO_SITE_USE_ID',
                      p_instance_code     => v_instance_code,
                      p_partner_type      => G_CUSTOMER,
                      p_error_text        => lv_error_text,
                      p_batch_id          => p_batch_id,
                      p_severity          => G_SEV3_ERROR,
                      p_message_text      => lv_message_text,
                      p_debug             => v_debug,
                      p_row               => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
   -- Set the error message
   lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_FK_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,PROJECT_NUMBER',
                      p_token2            => 'MASTER_TABLE',
		      p_token_value2      =>  'MSC_ST_PROJECT_TASKS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   --Derive Project Id.
    lv_return:= MSC_ST_UTIL.DERIVE_PROJ_TASK_ID
                           (p_table_name          => 'MSC_ST_SALES_ORDERS',
                            p_proj_col_name       => 'PROJECT_NUMBER',
                            p_proj_task_col_id    => 'PROJECT_ID',
                            p_instance_code       =>  v_instance_code,
                            p_entity_name         => 'PROJECT_ID',
                            p_error_text          =>  lv_error_text,
                            p_batch_id            =>  p_batch_id,
                            p_severity            =>  G_SEV_WARNING,
                            p_message_text        =>  lv_message_text,
                            p_debug               => v_debug,
                            p_row                 =>  lv_column_names);
    IF lv_return<> 0 THEN
      RAISE ex_logging_err;
    END IF;

    -- Set the error message
   lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_FK_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,PROJECT_NUMBER,'
                                             ||'TASK_NUMBER' ,
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_PROJECT_TASKS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --Derive Task Id.
    lv_return:= MSC_ST_UTIL.DERIVE_PROJ_TASK_ID
                           (p_table_name          => 'MSC_ST_SALES_ORDERS',
                            p_proj_col_name       => 'PROJECT_NUMBER',
                            p_proj_task_col_id    => 'TASK_ID',
                            p_instance_code       => v_instance_code,
                            p_entity_name         => 'TASK_ID',
                            p_error_text          => lv_error_text,
                            p_task_col_name       => 'TASK_NUMBER',
                            p_batch_id            => p_batch_id,
                            p_severity            => G_SEV_WARNING,
                            p_message_text        => lv_message_text,
                            p_debug               => v_debug,
                            p_row                 => lv_column_names);

    IF lv_return<> 0 THEN
      RAISE ex_logging_err;
    END IF;
      -- ordered_item_id is null in ERP collection
/*    v_sql_stmt := 09;

    lv_sql_stmt :=

    'UPDATE msc_st_sales_orders  '
    ||' SET    ordered_item_id   = inventory_item_id'
    ||' WHERE  sr_instance_code    = :v_instance_code'
    ||' AND    deleted_flag        ='||SYS_NO
    ||' AND    process_flag        ='||G_IN_PROCESS
    ||' AND    batch_id            = :p_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,p_batch_id;
*/
  -- valid values for order_date_type_code are 'SHIP' and 'ARRIVE'
  -- Set the error message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORDER_DATE_TYPE_CODE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => 1);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    lv_where_str :=
    '    AND NVL(order_date_type_code  ,'||NULL_VALUE||') '
    ||'  NOT IN (1,2)';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_SALES_ORDERS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => p_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'ORDER_DATE_TYPE_CODE',
                     p_debug             => v_debug,
                     p_default_value     => 1);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    --Call to customised validation.
    MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
      (ERRBUF         => lv_error_text,
       RETCODE        => lv_return,
       pBatchID       => p_batch_id,
       pInstanceCode  => v_instance_code,
       pEntityName    => 'MSC_ST_SALES_ORDERS',
       pInstanceID    => v_instance_id);

    IF NVL(lv_return,0) <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  -- Generate demand_id

    OPEN c3(p_batch_id);
    FETCH c3 BULK COLLECT INTO lb_rowid ;

    IF c3%ROWCOUNT > 0  THEN
      v_sql_stmt := 13;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_sales_orders
      SET    demand_id    = msc_st_demand_id_s.NEXTVAL
      WHERE  rowid        = lb_rowid(j);

      v_sql_stmt := 14;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      INSERT INTO msc_local_id_demand
        (local_id,
         st_transaction_id,
         instance_id,
         entity_name,
         data_source_type,
         char1,
         char2,
         char3,
         char4,
         char5,
         number1,
         number2,
         SOURCE_DEMAND_SOURCE_HEADER_ID,
         SOURCE_ORG_ID,
         SOURCE_ORIGINAL_ITEM_ID,
         SOURCE_DEMAND_ID,
         SOURCE_INVENTORY_ITEM_ID,
         SOURCE_CUSTOMER_ID,
         SOURCE_BILL_TO_SITE_USE_ID,
         SOURCE_SHIP_TO_SITE_USE_ID,
         last_update_date,
         last_updated_by,
         creation_date,
         created_by)
      SELECT
         demand_id,
         st_transaction_id,
         v_instance_id,
         'DEMAND_ID',
         data_source_type,
         sr_instance_code,
         company_name,
         organization_code,
         sales_order_number,
         subinventory,
         line_num,
         decode(reservation_type,1,1,2,2,3,3,G_RESERVATION_TYPE),
         SOURCE_DEMAND_SOURCE_HEADER_ID,
         SOURCE_ORGANIZATION_ID,
         SOURCE_ORIGINAL_ITEM_ID,
         SOURCE_DEMAND_ID,
         SOURCE_INVENTORY_ITEM_ID,
         SOURCE_CUSTOMER_ID,
         SOURCE_BILL_TO_SITE_USE_ID,
         SOURCE_SHIP_TO_SITE_USE_ID,
         v_current_date,
         v_current_user,
         v_current_date,
         v_current_user
      FROM  msc_st_sales_orders
      WHERE rowid = lb_rowid(j);

      END IF;
      CLOSE c3 ;

    lv_sql_stmt :=

    'UPDATE msc_st_sales_orders  '
    ||' SET    demand_source_line  = demand_id,'
    ||'        atp_refresh_number  = '||v_refresh_id
    ||' WHERE  sr_instance_code    = :v_instance_code'
    ||' AND    deleted_flag        ='||SYS_NO
    ||' AND    process_flag        ='||G_IN_PROCESS
    ||' AND    batch_id            = :p_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,p_batch_id;

  -- Generate ship_set_id

   v_sql_stmt := 15;

   lv_sql_stmt :=
   'UPDATE msc_st_sales_orders mso '
    ||'  SET  ship_set_id = (SELECT local_id'
    ||'       FROM   msc_local_id_demand mlid'
    ||'       WHERE  mlid.char1    = mso.sr_instance_code'
    ||'       AND   NVL(mlid.char2,'||''''||NULL_CHAR||''''||') '
    ||'       =     NVL(mso.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.char3    = mso.organization_code'
    ||'       AND    mlid.char4    = mso.sales_order_number'
    ||'       AND    NVL(mlid.char5, '||''''||NULL_CHAR||''''||') '
    ||'       =     NVL(mso.ship_set_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.instance_id = '||v_instance_id
    ||'       AND    mlid.entity_name = ''SHIP_SET_ID'' )'
    ||' WHERE process_flag      = '||G_IN_PROCESS
    ||' AND   NVL(ship_set_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND   batch_id          = :p_batch_id '
    ||' AND   sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;
    OPEN c4(p_batch_id);
    FETCH c4 BULK COLLECT INTO lb_rowid ;

    IF c4%ROWCOUNT > 0  THEN
      v_sql_stmt := 15.1;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_sales_orders
      SET    ship_set_id  = msc_st_set_id_s.NEXTVAL
      WHERE  rowid        = lb_rowid(j)
      AND ship_set_id is null;

      v_sql_stmt := 15.2;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      INSERT INTO msc_local_id_demand
        (local_id,
         st_transaction_id,
         instance_id,
         entity_name,
         data_source_type,
         char1,
         char2,
         char3,
         char4,
         char5,
         last_update_date,
         last_updated_by,
         creation_date,
         created_by)
      SELECT
         ship_set_id,
         st_transaction_id,
         v_instance_id,
         'SHIP_SET_ID',
         data_source_type,
         sr_instance_code,
         company_name,
         organization_code,
         sales_order_number,
         ship_set_name,
         v_current_date,
         v_current_user,
         v_current_date,
         v_current_user
      FROM  msc_st_sales_orders
      WHERE rowid = lb_rowid(j);

      END IF;
      CLOSE c4;

    -- Update ship_set_id

   v_sql_stmt := 15.4;
   lv_sql_stmt :=
   'UPDATE msc_st_sales_orders mso '
    ||'  SET  ship_set_id = (SELECT local_id'
    ||'       FROM   msc_local_id_demand mlid'
    ||'       WHERE  mlid.char1    = mso.sr_instance_code'
    ||'       AND   NVL(mlid.char2,'||''''||NULL_CHAR||''''||') '
    ||'       =     NVL(mso.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.char3    = mso.organization_code'
    ||'       AND    mlid.char4    = mso.sales_order_number'
    ||'       AND    NVL(mlid.char5, '||''''||NULL_CHAR||''''||') '
    ||'       =     NVL(mso.ship_set_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.instance_id = '||v_instance_id
    ||'       AND    mlid.entity_name = ''SHIP_SET_ID'' )'
    ||' WHERE process_flag      = '||G_IN_PROCESS
    ||' AND   NVL(ship_set_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND   batch_id          = :p_batch_id '
    ||' AND   sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;


 -- Generate arrival_set_id

   v_sql_stmt := 16;

   lv_sql_stmt :=
   'UPDATE msc_st_sales_orders mso '
    ||'  SET  arrival_set_id = (SELECT local_id'
    ||'       FROM   msc_local_id_demand mlid'
    ||'       WHERE  mlid.char1    = mso.sr_instance_code'
    ||'       AND   NVL(mlid.char2,'||''''||NULL_CHAR||''''||') '
    ||'       =     NVL(mso.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.char3    = mso.organization_code'
    ||'       AND    mlid.char4    = mso.sales_order_number'
    ||'       AND    NVL(mlid.char5, '||''''||NULL_CHAR||''''||') '
    ||'       =     NVL(mso.arrival_set_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.instance_id = '||v_instance_id
    ||'       AND    mlid.entity_name = ''ARRIVAL_SET_ID'' )'
    ||' WHERE process_flag      = '||G_IN_PROCESS
    ||' AND   NVL(arrival_set_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND   batch_id          = :p_batch_id '
    ||' AND   sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;
    OPEN c5(p_batch_id);
    FETCH c5 BULK COLLECT INTO lb_rowid ;

    IF c5%ROWCOUNT > 0  THEN
      v_sql_stmt := 16.1;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_sales_orders
      SET    arrival_set_id  = msc_st_set_id_s.NEXTVAL
      WHERE  rowid        = lb_rowid(j)
      AND arrival_set_id is null;

      v_sql_stmt := 16.2;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      INSERT INTO msc_local_id_demand
        (local_id,
         st_transaction_id,
         instance_id,
         entity_name,
         data_source_type,
         char1,
         char2,
         char3,
         char4,
         char5,
         last_update_date,
         last_updated_by,
         creation_date,
         created_by)
      SELECT
         arrival_set_id,
         st_transaction_id,
         v_instance_id,
         'ARRIVAL_SET_ID',
         data_source_type,
         sr_instance_code,
         company_name,
         organization_code,
         sales_order_number,
         arrival_set_name,
         v_current_date,
         v_current_user,
         v_current_date,
         v_current_user
      FROM  msc_st_sales_orders
      WHERE rowid = lb_rowid(j);

      END IF;
      CLOSE c5;

    -- Update arrival_set_id

   v_sql_stmt := 16.4;
   lv_sql_stmt :=
   'UPDATE msc_st_sales_orders mso '
    ||'  SET  arrival_set_id = (SELECT local_id'
    ||'       FROM   msc_local_id_demand mlid'
    ||'       WHERE  mlid.char1    = mso.sr_instance_code'
    ||'       AND   NVL(mlid.char2,'||''''||NULL_CHAR||''''||') '
    ||'       =     NVL(mso.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.char3    = mso.organization_code'
    ||'       AND    mlid.char4    = mso.sales_order_number'
    ||'       AND    NVL(mlid.char5, '||''''||NULL_CHAR||''''||') '
    ||'       =     NVL(mso.arrival_set_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.instance_id = '||v_instance_id
    ||'       AND    mlid.entity_name = ''ARRIVAL_SET_ID'' )'
    ||' WHERE process_flag      = '||G_IN_PROCESS
    ||' AND   NVL(arrival_set_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND   batch_id          = :p_batch_id '
    ||' AND   sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;

        -- populate row_type

   v_sql_stmt := 17;
   lv_sql_stmt :=
   'UPDATE msc_st_sales_orders mso '
    ||'  SET  ROW_TYPE= decode(reservation_type,1,decode(AVAILABLE_TO_MRP,''N'',''3'',''1'')
                                               ,2,1
                                               ,3,1
                                               ,NULL)' -- resv tp already validated for 1,2,3 so this decode should never return NULL.
    ||' WHERE process_flag      = '||G_IN_PROCESS
    ||' AND   batch_id          = :p_batch_id '
    ||' AND   sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;

    lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_SALES_ORDERS',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => p_batch_id);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_SALES_ORDERS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_message_text      => NULL,
                    p_error_text        => lv_error_text,
                    p_debug             => v_debug,
                    p_batch_id          => p_batch_id);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    COMMIT;

 EXCEPTION
    WHEN too_many_rows THEN
      lv_error_text := substr('MSC_CL_PRE_PROCESS.LOAD_SALES_ORDER'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      ROLLBACK ;
      IF c_lock%ISOPEN THEN
        CLOSE c_lock;
      END IF;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);

      ROLLBACK;
      IF c_lock%ISOPEN THEN
        CLOSE c_lock;
      END IF;

    WHEN OTHERS THEN
      lv_error_text :=  substr('MSC_CL_PRE_PROCESS.LOAD_SALES_ORDER'||'('
                        ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);

      ROLLBACK;
      IF c_lock%ISOPEN THEN
       CLOSE c_lock;
      END IF;

  END LOAD_SALES_ORDER;

/*==========================================================================+
| DESCRIPTION  : This function performs the validation and loads the data   |
|                for business object Hard Reservations                      |
+==========================================================================*/
  PROCEDURE  LOAD_RESERVATIONS  IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid          RowidTab; --bulk collects rowid
  lv_return         NUMBER;
  lv_batch_id       NUMBER;
  lv_error_text     VARCHAR2(250);
  lv_where_str      VARCHAR2(5000);
  lv_sql_stmt       VARCHAR2(5000);
  lv_column_names   VARCHAR2(5000);     --stores concatenated column names
  lv_message_text   msc_errors.error_text%TYPE;

  ex_logging_err        EXCEPTION;

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_reservations
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code          = v_instance_code
    AND    batch_id                  = p_batch_id;

  BEGIN

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Validation check for the table MSC_ST_RESERVATIONS

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE    msc_st_reservations msr1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 FROM msc_st_reservations msr2 '
    ||'        WHERE msr2.sr_instance_code  = msr1.sr_instance_code'
    ||'       AND   msr2.sales_order_number = msr1.sales_order_number'
    ||'       AND   msr2.line_num           = msr1.line_num'
    ||'       AND   msr2.organization_code  = msr1.organization_code'
    ||'       AND   NVL(msr2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msr1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'       AND   msr2.process_flag       = msr1.process_flag'
    ||'       AND   NVL(msr2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'       GROUP BY sr_instance_code, sales_order_number,line_num,'
    ||'                organization_code,company_name '
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    msr1.process_flag              = '||G_IN_PROCESS
    ||' AND    msr1.sr_instance_code          = :v_instance_code'
    ||' AND    msr1.reservation_type          = 1'
    ||' AND    NVL(msr1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    --Duplicate records check for the records whose source is XML
    v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE    msc_st_reservations msr1 '
    ||' SET   process_flag = '||G_ERROR_FLG||','
    ||'       error_text   = '||''''||lv_message_text||''''
    ||' WHERE message_id   < ( SELECT max(message_id) '
    ||'       FROM  msc_st_reservations msr2'
    ||'       WHERE msr2.sr_instance_code  = msr1.sr_instance_code'
    ||'       AND   msr2.sales_order_number = msr1.sales_order_number'
    ||'       AND   msr2.line_num           = msr1.line_num'
    ||'       AND   msr2.organization_code  = msr1.organization_code'
    ||'       AND   NVL(msr2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msr1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'       AND   msr2.process_flag       = msr1.process_flag'
    ||'       AND   msr2.reservation_type   = msr1.reservation_type'
    ||'       AND   NVL(msr2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
    ||' AND   msr1.process_flag            = '||G_IN_PROCESS
    ||' AND   msr1.sr_instance_code        = :v_instance_code '
     ||' AND    msr1.reservation_type      = 1'
    ||' AND   NVL(msr1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    /*duplicate records for reservation_type =3 */
    lv_sql_stmt :=
    'UPDATE    msc_st_reservations msr1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 FROM msc_st_reservations msr2 '
    ||'        WHERE msr2.sr_instance_code  = msr1.sr_instance_code'
    ||'       AND   msr2.supply_order_number = msr1.supply_order_number'
    ||'       AND   msr2.organization_code  = msr1.organization_code'
    ||'       AND   msr2.process_flag       = msr1.process_flag'
    ||'       AND   NVL(msr2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'       AND   msr2.reservation_type = msr1.reservation_type '
    ||'       GROUP BY sr_instance_code, supply_order_number, '
    ||'                organization_code '
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    msr1.process_flag              = '||G_IN_PROCESS
    ||' AND    msr1.sr_instance_code          = :v_instance_code'
    ||' AND    msr1.reservation_type          = 3'
    ||' AND    NVL(msr1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

      /*duplicate records for reservation_type =4 */
    lv_sql_stmt :=
    'UPDATE    msc_st_reservations msr1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 FROM msc_st_reservations msr2 '
    ||'        WHERE msr2.sr_instance_code  = msr1.sr_instance_code'
    ||'       AND   msr2.supply_order_number = msr1.supply_order_number'
    ||'       AND   msr2.purch_line_num = msr1.purch_line_num'
    ||'       AND   msr2.organization_code  = msr1.organization_code'
    ||'       AND   msr2.process_flag       = msr1.process_flag'
    ||'       AND   NVL(msr2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
     ||'       AND   NVL(msr2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msr1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'       AND   msr2.reservation_type = msr1.reservation_type '
    ||'       GROUP BY sr_instance_code, supply_order_number,purch_line_num,'
    ||'                organization_code ,company_name'
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    msr1.process_flag              = '||G_IN_PROCESS
    ||' AND    msr1.sr_instance_code          = :v_instance_code'
    ||' AND    msr1.reservation_type          = 4'
    ||' AND    NVL(msr1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

      /*duplicate records for reservation_type =5 */
    lv_sql_stmt :=
    'UPDATE    msc_st_reservations msr1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 FROM msc_st_reservations msr2 '
    ||'        WHERE msr2.sr_instance_code  = msr1.sr_instance_code'
    ||'       AND   msr2.supply_order_number = msr1.supply_order_number'
    ||'       AND   msr2.organization_code  = msr1.organization_code'
    ||'       AND   msr2.supply_org_code  = msr1.supply_org_code'
    ||'       AND   msr2.process_flag       = msr1.process_flag'
    ||'       AND   NVL(msr2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
     ||'       AND   NVL(msr2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msr1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'       AND   msr2.reservation_type = msr1.reservation_type '
    ||'       GROUP BY sr_instance_code, supply_order_number,'
    ||'                organization_code ,supply_org_code,company_name'
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    msr1.process_flag              = '||G_IN_PROCESS
    ||' AND    msr1.sr_instance_code          = :v_instance_code'
    ||' AND    msr1.reservation_type          = 5'
    ||' AND    NVL(msr1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;




      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

     /*duplicate records for reservation_type = 7 */

    lv_sql_stmt :=
    'UPDATE    msc_st_reservations msr1 '
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 FROM msc_st_reservations msr2 '
    ||'        WHERE msr2.sr_instance_code  = msr1.sr_instance_code'
    ||'       AND   msr2.supply_order_number = msr1.supply_order_number'
    ||'       AND   msr2.organization_code  = msr1.organization_code'
    ||'       AND   msr2.process_flag       = msr1.process_flag'
    ||'       AND   NVL(msr2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
     ||'       AND   NVL(msr2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msr1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'       AND   msr2.reservation_type = msr1.reservation_type '
    ||'       GROUP BY sr_instance_code, supply_order_number,'
    ||'                organization_code ,company_name'
    ||'        HAVING COUNT(*) >1 )'
    ||' AND    msr1.process_flag              = '||G_IN_PROCESS
    ||' AND    msr1.sr_instance_code          = :v_instance_code'
    ||' AND    msr1.reservation_type          = 7'
    ||' AND    NVL(msr1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    lv_column_names :=
    '  ITEM_NAME                ||''~''||'
    ||' ORGANIZATION_CODE       ||''~''||'
    ||' SALES_ORDER_NUMBER      ||''~''||'
    ||' LINE_NUM                ||''~''||'
    ||' REQUIREMENT_DATE        ||''~''||'
    ||' RESERVED_QUANTITY       ||''~''||'
    ||' SUBINVENTORY            ||''~''||'
    ||' DEMAND_CLASS            ||''~''||'
    ||' PROJECT_NUMBER          ||''~''||'
    ||' TASK_NUMBER             ||''~''||'
    ||' PLANNING_GROUP          ||''~''||'
    ||' COMPANY_NAME            ||''~''||'
    ||' SR_INSTANCE_CODE        ||''~''||'
    ||' DELETED_FLAG  ';


    -- Dividing records in batches based on batchsize
    LOOP
      v_sql_stmt := 03;
      SELECT       msc_st_batch_id_s.NEXTVAL
      INTO         lv_batch_id
      FROM         DUAL;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      'UPDATE   msc_st_reservations '
      ||' SET   batch_id                       = :lv_batch_id '
      ||' WHERE process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND   sr_instance_code               = :v_instance_code'
      ||' AND   NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND ;

      OPEN  c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_reservations
      SET  st_transaction_id = msc_st_demand_classes_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SALE_ORDER_NUMBER OR LINE_NUM');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    v_sql_stmt := 04;

    lv_sql_stmt :=
    'UPDATE    msc_st_reservations '
    ||' SET    process_flag  = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  ( NVL(line_num,'||NULL_VALUE||') = '||NULL_VALUE
    ||' OR     NVL(sales_order_number,'||''''||NULL_CHAR||''''||') '
    ||'         = '||''''||NULL_CHAR||''''||')'
    ||' AND   process_flag             = '||G_IN_PROCESS
    ||' AND   batch_id                 = :lv_batch_id'
    ||' AND   reservation_type         =1 '
    ||' AND   sr_instance_code         = :v_instance_code';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

       lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SUPPLY_ORDER_NUMBER');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


     lv_sql_stmt :=
    'UPDATE    msc_st_reservations '
    ||' SET    process_flag  = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE   NVL(supply_order_number,'||''''||NULL_CHAR||''''||') = '||''''||NULL_CHAR||''''||''
    ||' AND   process_flag             = '||G_IN_PROCESS
    ||' AND   batch_id                 = :lv_batch_id'
    ||' AND   reservation_type         in (3,4,5,7) '
    ||' AND   sr_instance_code         = :v_instance_code';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

        lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PURCH_LINE_NUMBER');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      lv_sql_stmt :=
    'UPDATE    msc_st_reservations '
    ||' SET    process_flag  = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   NVL(purch_line_num,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND   process_flag             = '||G_IN_PROCESS
    ||' AND   batch_id                 = :lv_batch_id'
    ||' AND   reservation_type         = 4 '
    ||' AND   sr_instance_code         = :v_instance_code';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

        lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SUPPLY_ORG_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


        lv_sql_stmt :=
    'UPDATE    msc_st_reservations '
    ||' SET    process_flag  = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   NVL(supply_org_code,'||''''||NULL_CHAR||''''||') = '||''''||NULL_CHAR||''''||''
    ||' AND   process_flag             = '||G_IN_PROCESS
    ||' AND   batch_id                 = :lv_batch_id'
    ||' AND   reservation_type         = 5 '
    ||' AND   sr_instance_code         = :v_instance_code';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DEMAND_CLASS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      -- Validate Demand Class, if value provided it should exists
      -- in ODS or staging table

     lv_return :=
     MSC_ST_UTIL.VALIDATE_DMD_CLASS(p_table_name       => 'MSC_ST_RESERVATIONS',
                                    p_dmd_class_column => 'DEMAND_CLASS',
                                    p_instance_id      => v_instance_id,
                                    p_instance_code    => v_instance_code,
                                    p_severity         => G_SEV3_ERROR,
                                    p_message_text     => lv_message_text,
                                    p_batch_id         => lv_batch_id,
                                    p_debug            => v_debug,
                                    p_error_text       => lv_error_text);

     if(lv_return <> 0) then
        RAISE ex_logging_err;
     end if;



      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check DELETE_FLAG column has valid value or not and if not set it to SYS_NO
      -- Log error procedure inserts warning and also defaults the delete flag

      lv_where_str := ' AND NVL(deleted_flag,'||NULL_VALUE||') '
                      ||' NOT IN(1,2)';

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_RESERVATIONS',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'DELETED_FLAG',
                         p_debug             => v_debug,
                         p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;



    lv_sql_stmt :=
    'UPDATE    msc_st_reservations '
    ||' SET   supply_source_type_id = 200,'
    ||'       disposition_type =2 '
    ||' WHERE  process_flag             = '||G_IN_PROCESS
    ||' AND   batch_id                 = :lv_batch_id'
    ||' AND   reservation_type         = 3 '
    ||' AND   sr_instance_code         = :v_instance_code';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

       lv_sql_stmt :=
    'UPDATE    msc_st_reservations '
    ||' SET   supply_source_type_id = 7,'
    ||'       disposition_type =200 '
    ||' WHERE  process_flag             = '||G_IN_PROCESS
    ||' AND   batch_id                 = :lv_batch_id'
    ||' AND   reservation_type         = 4 '
    ||' AND   sr_instance_code         = :v_instance_code';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      lv_sql_stmt :=
    'UPDATE    msc_st_reservations '
    ||' SET   supply_source_type_id = 5,'
    ||'       disposition_type =1 '
    ||' WHERE  process_flag             = '||G_IN_PROCESS
    ||' AND   batch_id                 = :lv_batch_id'
    ||' AND   reservation_type         = 5 '
    ||' AND   sr_instance_code         = :v_instance_code';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

     lv_sql_stmt :=
    'UPDATE    msc_st_reservations '
    ||' SET   supply_source_type_id = 1,'
    ||'       disposition_type =2 '
    ||' WHERE  process_flag             = '||G_IN_PROCESS
    ||' AND   batch_id                 = :lv_batch_id'
    ||' AND   reservation_type         = 7 '
    ||' AND   sr_instance_code         = :v_instance_code';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      -- Check DISPOSITION_TYPE column has valid value or not and if not set it to 2
        lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DISPOSITION_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_DISPOSITION_TYPE);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str := ' AND NVL(disposition_type,'||NULL_VALUE||') '
                      ||' <> 2 AND RESERVATION_TYPE =1';

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_RESERVATIONS',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'DISPOSITION_TYPE',
                         p_debug             => v_debug,
                         p_default_value     => G_DISPOSITION_TYPE);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     /* lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'RESERVATION_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_RESERVATION_TYPE);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check RESERVATION_TYPE column has valid value or not and if not set it to 2

      lv_where_str := ' AND NVL(reservation_type,'||NULL_VALUE||') '
                      ||' <> 1 ';

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name        => 'MSC_ST_RESERVATIONS',
                         p_instance_code     => v_instance_code,
                         p_row               => lv_column_names,
                         p_severity          => G_SEV_WARNING,
                         p_message_text      => lv_message_text,
                         p_error_text        => lv_error_text,
                         p_batch_id          => lv_batch_id,
                         p_where_str         => lv_where_str,
                         p_col_name          => 'RESERVATION_TYPE',
                         p_debug             => v_debug,
                         p_default_value     => G_RESERVATION_TYPE);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
    */
     -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     --Derive Organization_id
    lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                   (p_table_name       => 'MSC_ST_RESERVATIONS',
                    p_org_partner_name => 'ORGANIZATION_CODE',
                    p_org_partner_id   => 'ORGANIZATION_ID',
                    p_instance_code    => v_instance_code,
                    p_partner_type     => G_ORGANIZATION,
                    p_error_text       => lv_error_text,
                    p_batch_id         => lv_batch_id,
                    p_severity         => G_SEV_ERROR,
                    p_message_text     => lv_message_text,
                    p_debug            => v_debug,
                    p_row              => lv_column_names);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;


     -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --Derive Inventory_item_id
    lv_return := MSC_ST_UTIL.DERIVE_ITEM_ID
                   (p_table_name       => 'MSC_ST_RESERVATIONS',
                    p_item_col_name    => 'ITEM_NAME',
                    p_item_col_id      => 'INVENTORY_ITEM_ID',
                    p_instance_id      => v_instance_id,
                    p_instance_code    => v_instance_code,
                    p_error_text       => lv_error_text,
                    p_batch_id         => lv_batch_id,
                    p_severity         => G_SEV_ERROR,
                    p_message_text     => lv_message_text,
                    p_debug            => v_debug,
                    p_row              => lv_column_names);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Derive dispostion id

    v_sql_stmt := 5.0;
   lv_sql_stmt :=
   'UPDATE msc_st_reservations msr '
    ||'  SET  disposition_id = (SELECT local_id'
    ||'       FROM   msc_local_id_demand mlid'
    ||'       WHERE  mlid.char1    = msr.sr_instance_code'
    ||'       AND   NVL(mlid.char2,'||''''||NULL_CHAR||''''||') '
    ||'       =     NVL(msr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.char3    = msr.organization_code'
    ||'       AND    mlid.char4    = msr.sales_order_number'
        ||'       AND    mlid.instance_id = '||v_instance_id
    ||'       AND    mlid.entity_name = ''SALES_ORDER_ID'' )'
    ||' WHERE process_flag      = '||G_IN_PROCESS
    ||' AND   NVL(disposition_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND   (RESERVATION_TYPE in (1,2) or RESERVATION_TYPE is null) '
    ||' AND   batch_id          = :lv_batch_id '
    ||' AND   sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

    /* derive disposition_id for reservation_type in (3,7) */
     v_sql_stmt := 5.1;
   lv_sql_stmt :=
   'UPDATE msc_st_reservations msr '
    ||'  SET  disposition_id = (SELECT local_id'
    ||'       FROM   msc_local_id_demand mlid'
    ||'       WHERE  mlid.char1    = msr.sr_instance_code'
    ||'       AND   NVL(mlid.char2,'||''''||NULL_CHAR||''''||') '
    ||'       =     NVL(msr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.char3    = msr.organization_code'
    ||'       AND    mlid.char4    = msr.sales_order_number'
    ||'       AND    nvl(mlid.number2,'||NULL_VALUE||') = 1'
    ||'       AND    mlid.number1     = msr.line_num'
    ||'       AND    mlid.entity_name = ''DEMAND_ID'' )'
    ||' WHERE process_flag      = '||G_IN_PROCESS
    ||' AND   NVL(disposition_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND   RESERVATION_TYPE in (3,7) '
    ||' AND   batch_id          = :lv_batch_id '
    ||' AND   sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

     /* derive disposition_id for reservation_type =4 */
     v_sql_stmt := 5.2;
   lv_sql_stmt :=
   'UPDATE msc_st_reservations msr '
    ||'  SET  disposition_id =(SELECT local_id'
    ||'       FROM   msc_local_id_supply mls'
    ||'       WHERE  mls.char4 = msr.demand_order_number'
    ||'       AND    mls.char3 = msr.organization_code'
    ||'       AND    mls.char1 = msr.sr_instance_code'
    ||'       AND    mls.entity_name = ''REPAIR_NUMBER'' )'
    ||' WHERE process_flag      = '||G_IN_PROCESS
    ||' AND   NVL(disposition_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND   RESERVATION_TYPE =4 '
    ||' AND   batch_id          = :lv_batch_id '
    ||' AND   sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

     /* derive disposition_id for reservation_type =5 */
     v_sql_stmt := 5.3;
   lv_sql_stmt :=
   'UPDATE msc_st_reservations msr '
    ||'  SET  disposition_id =(SELECT local_id'
    ||'       FROM   msc_local_id_supply mls'
    ||'       WHERE  mls.char3       = msr.demand_order_number'
    ||'       AND    mls.number1     = 74' -- order_type
    ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mls.char1       = msr.sr_instance_code'
    ||'       AND    mls.entity_name = ''DISPOSITION_ID'' ) '
    ||' WHERE process_flag      = '||G_IN_PROCESS
    ||' AND   NVL(disposition_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND   RESERVATION_TYPE =5 '
    ||' AND   batch_id          = :lv_batch_id '
    ||' AND   sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;


    /* derieve transaction_id for reservation_type =3 */
     v_sql_stmt := 5.5;
   lv_sql_stmt :=
   'UPDATE msc_st_reservations msr '
    ||'  SET  transaction_id =(SELECT local_id'
    ||'       FROM   msc_local_id_supply mls'
    ||'       WHERE  mls.char4 = msr.supply_order_number'
    ||'       AND    mls.char3 = msr.organization_code'
    ||'       AND    mls.char1 = msr.sr_instance_code'
    ||'       AND    mls.entity_name = ''REPAIR_NUMBER'' )'
    ||' WHERE process_flag      = '||G_IN_PROCESS
    ||' AND   NVL(transaction_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND   RESERVATION_TYPE =3 '
    ||' AND   batch_id          = :lv_batch_id '
    ||' AND   sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

    /* derieve transaction_id for reservation_type =4 */
     v_sql_stmt := 5.5;
   lv_sql_stmt :=
   'UPDATE msc_st_reservations msr '
    ||'  SET  transaction_id =(SELECT local_id'
    ||'       FROM   msc_local_id_supply mls'
    ||'       WHERE  mls.number1  = msr.purch_line_num'
    ||'       AND    mls.number2  =2' -- order_type
    ||'       AND    mls.char3    = msr.supply_order_number'
    ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mls.char1 = msr.sr_instance_code'
    ||'       AND    mls.entity_name = ''PO_LINE_ID'')'
    ||' WHERE process_flag      = '||G_IN_PROCESS
    ||' AND   NVL(transaction_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND   RESERVATION_TYPE =4 '
    ||' AND   batch_id          = :lv_batch_id '
    ||' AND   sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

     /* derieve transaction_id for reservation_type =5 */
     v_sql_stmt := 5.6;
   lv_sql_stmt :=
   'UPDATE msc_st_reservations msr '
    ||'  SET  transaction_id =(SELECT local_id'
      ||'       FROM   msc_local_id_supply mls'
      ||'       WHERE  mls.char4 = msr.supply_order_number'
      ||'       AND    mls.char3 = msr.supply_org_code'
      ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(msr.company_name,'||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.char1 = msr.sr_instance_code'
      ||'       AND    mls.entity_name = ''WIP_ENTITY_ID'' )'
    ||' WHERE process_flag      = '||G_IN_PROCESS
    ||' AND   NVL(transaction_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND   RESERVATION_TYPE =5 '
    ||' AND   batch_id          = :lv_batch_id '
    ||' AND   sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      /* derieve transaction_id for reservation_type =7*/
     v_sql_stmt := 5.6;
   lv_sql_stmt :=
   'UPDATE msc_st_reservations msr '
    ||'  SET  transaction_id =(SELECT local_id'
    ||'       FROM   msc_local_id_supply mls'
    ||'       WHERE  mls.char3       = msr.supply_order_number'
    ||'       AND    mls.number1     = 74' -- order_type
    ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
    ||'              NVL(msr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mls.char1       = msr.sr_instance_code'
    ||'       AND    mls.entity_name = ''DISPOSITION_ID'' ) '
    ||' WHERE process_flag      = '||G_IN_PROCESS
    ||' AND   NVL(transaction_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND   RESERVATION_TYPE =7'
    ||' AND   batch_id          = :lv_batch_id '
    ||' AND   sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

    -- Derive parent_demand_id

   v_sql_stmt := 06;
   lv_sql_stmt :=
   'UPDATE msc_st_reservations msr '
    ||'  SET  parent_demand_id = (SELECT local_id'
    ||'       FROM   msc_local_id_demand mlid'
    ||'       WHERE  mlid.char1    = msr.sr_instance_code'
    ||'       AND   NVL(mlid.char2,'||''''||NULL_CHAR||''''||') '
    ||'       =     NVL(msr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.char3    = msr.organization_code'
    ||'       AND    mlid.char4    = msr.sales_order_number'
    ||'       AND    nvl(mlid.number2,'||NULL_VALUE||') = nvl(msr.reservation_type,'||NULL_VALUE||')'
    ||'       AND   NVL(mlid.char5,'||''''||NULL_CHAR||''''||') '
    ||'       =     NVL(msr.SUBINVENTORY,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.number1     = msr.line_num'
    ||'       AND    mlid.entity_name = ''DEMAND_ID'' )'
    ||' WHERE process_flag      ='||G_IN_PROCESS
    ||' AND   batch_id          = :lv_batch_id '
    ||' AND   (RESERVATION_TYPE in (1,2) or RESERVATION_TYPE is null) '
    ||' AND   sr_instance_code  =:v_instance_code';



      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

    -- Error out the records if any parent_demand_id or dispostion id
    -- derivation fails

   -- Set the error message
   lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_FK_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,SALES_ORDER_NUMBER'
                                             ||' LINE_NUM',
                      p_token2            => 'MASTER_TABLE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     v_sql_stmt := 07;

   lv_sql_stmt :=
   'UPDATE      msc_st_reservations '
   ||' SET      process_flag    ='||G_ERROR_FLG||','
   ||'          error_text   = '||''''||lv_message_text||''''
   ||' WHERE    (NVL(disposition_id,'||NULL_VALUE||') = '||NULL_VALUE
   ||' OR       NVL(parent_demand_id,'||NULL_VALUE||') = '||NULL_VALUE||')'
   ||' AND      process_flag      ='||G_IN_PROCESS
   ||' AND      batch_id          = :lv_batch_id '
    ||' AND   (RESERVATION_TYPE in (1,2) or RESERVATION_TYPE is null) '
   ||' AND      sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

    v_sql_stmt := 07.1;
     lv_sql_stmt :=
   'UPDATE      msc_st_reservations '
   ||' SET      process_flag    ='||G_ERROR_FLG||','
   ||'          error_text   = '||''''||lv_message_text||''''
   ||' WHERE    (NVL(disposition_id,'||NULL_VALUE||') = '||NULL_VALUE
   ||' OR       NVL(transaction_id,'||NULL_VALUE||') = '||NULL_VALUE||')'
   ||' AND      process_flag      ='||G_IN_PROCESS
   ||' AND      batch_id          = :lv_batch_id '
    ||' AND   RESERVATION_TYPE in (3,4,5,7)  '
   ||' AND      sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

   -- Update transaction_id by parent_demand_id

     v_sql_stmt := 07;

   lv_sql_stmt :=
   'UPDATE      msc_st_reservations '
   ||' SET      transaction_id  = parent_demand_id'
   ||' WHERE    NVL(parent_demand_id,'||NULL_VALUE||') <> '||NULL_VALUE
   ||' AND      process_flag      ='||G_IN_PROCESS
   ||' AND      batch_id          = :lv_batch_id '
    ||' AND   (RESERVATION_TYPE in (1,2) or RESERVATION_TYPE is null) '
   ||' AND      sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;



   -- Set the error message
   lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_FK_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,PROJECT_NUMBER',
                      p_token2            => 'MASTER_TABLE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   --Derive Project Id.
    lv_return:= MSC_ST_UTIL.DERIVE_PROJ_TASK_ID
                           (p_table_name          => 'MSC_ST_RESERVATIONS',
                            p_proj_col_name       => 'PROJECT_NUMBER',
                            p_proj_task_col_id    => 'PROJECT_ID',
                            p_instance_code       =>  v_instance_code,
                            p_entity_name         => 'PROJECT_ID',
                            p_error_text          =>  lv_error_text,
                            p_batch_id            =>  lv_batch_id,
                            p_severity            =>  G_SEV_WARNING,
                            p_message_text        =>  lv_message_text,
                            p_debug               => v_debug,
                            p_row                 =>  lv_column_names);
    IF lv_return<> 0 THEN
      RAISE ex_logging_err;
    END IF;

    -- Set the error message
   lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_FK_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,PROJECT_NUMBER'
                                             ||'TASK_NUMBER' ,
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_PROJECT_TASKS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --Derive Task Id.
    lv_return:= MSC_ST_UTIL.DERIVE_PROJ_TASK_ID
                           (p_table_name          => 'MSC_ST_RESERVATIONS',
                            p_proj_col_name       => 'PROJECT_NUMBER',
                            p_proj_task_col_id    => 'TASK_ID',
                            p_instance_code       => v_instance_code,
                            p_entity_name         => 'TASK_ID',
                            p_error_text          => lv_error_text,
                            p_task_col_name       => 'TASK_NUMBER',
                            p_batch_id            => lv_batch_id,
                            p_severity            => G_SEV_WARNING,
                            p_message_text        => lv_message_text,
                            p_debug               => v_debug,
                            p_row                 => lv_column_names);

    IF lv_return<> 0 THEN
      RAISE ex_logging_err;
    END IF;



      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_RESERVATIONS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      -- Set the process flag as Valid and populate instance_id
      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                        (p_table_name   => 'MSC_ST_RESERVATIONS',
                         p_instance_id    => v_instance_id,
                         p_instance_code  => v_instance_code,
                         p_process_flag   => G_VALID,
                         p_error_text     => lv_error_text,
                         p_debug          => v_debug,
                         p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- At the end calling  the LOG_ERROR for logging all
      -- errored out records.

      lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name    => 'MSC_ST_RESERVATIONS',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug,
                         p_batch_id      => lv_batch_id  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     COMMIT;

    END LOOP;

  EXCEPTION

    WHEN too_many_rows THEN
      lv_error_text := substr('MSC_CL_PRE_PROCESS.LOAD_RESRVATIONS'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      ROLLBACK ;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);

      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_RESERVATIONS '||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);

      ROLLBACK;

  END LOAD_RESERVATIONS ;

/*==========================================================================+
| DESCRIPTION  : This procedure is called for validating demand related     |
|                records from the msc_st_demands table. The following       |
|                types are considered for the validation.                   |
|                Demand origination          Origination Type               |
|                -------------------------------------------------          |
|                MDS Demand                       8                         |
|                Forecast Demand                  29                        |
|	 	Forecast MDS             	   7	                    |
+==========================================================================*/
  PROCEDURE  LOAD_MDS_FORECAST (p_batch_id  IN NUMBER ) IS
  TYPE RowidTab      IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid           RowidTab;

  lv_column_names    VARCHAR2(5000);     -- Stores cocatenated column names
  lv_return          NUMBER;
  lv_error_text      VARCHAR2(250);
  lv_where_str       VARCHAR2(5000);
  lv_sql_stmt        VARCHAR2(5000);
  lv_cursor_stmt     VARCHAR2(5000);
  lv_message_text    msc_errors.error_text%TYPE;

  ex_logging_err     EXCEPTION;

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_demands
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    origination_type  IN (7,8,29)
    AND    batch_id                = p_batch_id
    AND    sr_instance_code        = v_instance_code ;

  CURSOR c2(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_demands
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(disposition_id,NULL_VALUE) = NULL_VALUE
    AND    origination_type in(7, 8)
    AND    deleted_flag     = SYS_NO;

  CURSOR c3(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_demands
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(sales_order_line_id,NULL_VALUE) = NULL_VALUE
    AND    origination_type = 29
    AND    deleted_flag     = SYS_NO;


  BEGIN

  lv_column_names :=
  'ITEM_NAME                        ||''~''||'
  ||' ORGANIZATION_CODE             ||''~''||'
  ||' USING_ASSEMBLY_ITEM_NAME      ||''~''||'
  ||' USING_ASSEMBLY_DEMAND_DATE    ||''~''||'
  ||' USING_REQUIREMENT_QUANTITY    ||''~''||'
  ||' SCHEDULE_DATE                 ||''~''||'
  ||' DAILY_DEMAND_RATE             ||''~''||'
  ||' DEMAND_TYPE                   ||''~''||'
  ||' SR_INSTANCE_CODE              ||''~''||'
  ||' ASSEMBLY_DEMAND_COMP_DATE     ||''~''||'
  ||' DEMAND_SCHEDULE_NAME          ||''~''||'
  ||' SCHEDULE_LINE_NUM             ||''~''||'
  ||' PROJECT_NUMBER                ||''~''||'
  ||' TASK_NUMBER                   ||''~''||'
  ||' DEMAND_CLASS                  ||''~''||'
  ||' DMD_LATENESS_COST             ||''~''||'
  ||' DMD_SATISFIED_DATE            ||''~''||'
  ||' DMD_SPLIT_FLAG                ||''~''||'
  ||' CONFIDENCE_PERCENTAGE         ||''~''||'
  ||' BUCKET_TYPE                   ||''~''||'
  ||' BILL_CODE                     ||''~''||'
  ||' FORECAST_DESIGNATOR           ||''~''||'
  ||' CUSTOMER_NAME                 ||''~''||'
  ||' FORECAST_MAD                  ||''~''||'
  ||' PROBABILITY                   ||''~''||'
  ||' ORIGINATION_TYPE              ||''~''||'
  ||' END_ITEM_UNIT_NUMBER          ||''~''||'
  ||' REQUEST_DATE                  ||''~''||'
  ||' DELETED_FLAG                  ||''~''||'
  ||'COMPANY_NAME'  ;

    OPEN c1(p_batch_id);
    FETCH c1 BULK COLLECT INTO lb_rowid;
    CLOSE c1;

    v_sql_stmt := 03;
    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
    UPDATE msc_st_demands
    SET    st_transaction_id   = msc_st_demands_s.NEXTVAL,
           refresh_id          = v_refresh_id,
           last_update_date    = v_current_date,
           last_updated_by     = v_current_user,
           creation_date       = v_current_date,
           created_by          = v_current_user
    WHERE  rowid               = lb_rowid(j);


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --Log a warning for those records where the deleted_flag has a value other
    --SYS_NO or SYS_YES
    lv_where_str :=
   ' AND NVL(deleted_flag,'||NULL_VALUE||') NOT IN(1,2)';

    lv_return:= MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_DEMANDS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => p_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'DELETED_FLAG',
                    p_debug             => v_debug,
                    p_default_value     =>  SYS_NO);

    IF lv_return<> 0 THEN
        RAISE ex_logging_err;
    END IF;



    -- USING_ASSEMBLY_DEMAND_DATE check
     -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'USING_ASSEMBLY_DEMAND_DATE');
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  -- Error out records where USING_ASSEMBLY_DEMAND_DATE is NULL

  v_sql_stmt := 04;
  lv_sql_stmt :=
  'UPDATE     msc_st_demands '
  ||' SET     process_flag    =  '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE NVL(using_assembly_demand_date,SYSDATE-36500) = SYSDATE-36500'
  ||' AND   process_flag      = '||G_IN_PROCESS
  ||' AND   origination_type  IN (7,8,29)'
  ||' AND   batch_id       = :p_batch_id'
  ||' AND   sr_instance_code  = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;

     -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'USING_REQUIREMENT_QUANTITY' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


  -- Error out if USING_REQUIREMENT_QUNATITY is NULL
  -- and deleted_flag = SYS_NO

  v_sql_stmt := 05;
  lv_sql_stmt :=
  'UPDATE     msc_st_demands '
  ||' SET     process_flag    =  '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE   NVL(using_requirement_quantity,'||NULL_VALUE||') ='||NULL_VALUE
  ||' AND     process_flag      = '||G_IN_PROCESS
  ||' AND     origination_type  IN (7,8,29)'
  ||' AND     deleted_flag   = '||SYS_NO
  ||' AND     batch_id       = :p_batch_id'
  ||' AND     sr_instance_code  = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;
    -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --Derive Organization_id
    lv_return:= MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                   (p_table_name       => 'MSC_ST_DEMANDS',
                    p_org_partner_name => 'ORGANIZATION_CODE',
                    p_org_partner_id   => 'ORGANIZATION_ID',
                    p_instance_code    => v_instance_code,
                    p_partner_type     => G_ORGANIZATION,
                    p_error_text       => lv_error_text,
                    p_batch_id         => p_batch_id,
                    p_severity         => G_SEV_ERROR,
                    p_message_text     => lv_message_text,
                    p_debug            => v_debug,
                    p_row              => lv_column_names);

    IF lv_return<> 0 THEN
        RAISE ex_logging_err;
    END IF;

      -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    --Derive Inventory_item_id
    lv_return:= MSC_ST_UTIL.DERIVE_ITEM_ID
                   (p_table_name       => 'MSC_ST_DEMANDS',
                    p_item_col_name    => 'ITEM_NAME',
                    p_item_col_id      => 'INVENTORY_ITEM_ID',
                    p_instance_id      => v_instance_id,
                    p_instance_code    => v_instance_code,
                    p_error_text       => lv_error_text,
                    p_batch_id         => p_batch_id,
                    p_severity         => G_SEV_ERROR,
                    p_message_text     => lv_message_text,
                    p_debug            => v_debug,
                    p_row              => lv_column_names);

    IF lv_return<> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'USING_ASSEMBLY_ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --Derive Inventory_item_id
    lv_return := MSC_ST_UTIL.DERIVE_ITEM_ID
                   (p_table_name       => 'MSC_ST_DEMANDS',
                    p_item_col_name    => 'USING_ASSEMBLY_ITEM_NAME',
                    p_item_col_id      => 'USING_ASSEMBLY_ITEM_ID',
                    p_instance_id      => v_instance_id,
                    p_instance_code    => v_instance_code,
                    p_error_text       => lv_error_text,
                    p_batch_id         => p_batch_id,
                    p_severity         => G_SEV3_ERROR,
                    p_message_text     => lv_message_text,
                    p_debug            => v_debug,
                    p_row              => lv_column_names);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DEMAND_CLASS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      -- Validate Demand Class, if value provided it should exists
      -- in ODS or staging table

     lv_return :=
     MSC_ST_UTIL.VALIDATE_DMD_CLASS(p_table_name       => 'MSC_ST_DEMANDS',
                                    p_dmd_class_column => 'DEMAND_CLASS',
                                    p_instance_id      => v_instance_id,
                                    p_instance_code    => v_instance_code,
                                    p_severity         => G_SEV3_ERROR,
                                    p_message_text     => lv_message_text,
                                    p_batch_id         => p_batch_id,
                                    p_debug            => v_debug,
                                    p_error_text       => lv_error_text);

     if(lv_return <> 0) then
        RAISE ex_logging_err;
     end if;



  -- Update using_assembly_item_id = inventory_item_id

  v_sql_stmt := 06;
  lv_sql_stmt :=
  ' UPDATE      msc_st_demands'
  ||' SET    using_assembly_item_id  =  inventory_item_id'
  ||' WHERE  process_flag  = '||G_IN_PROCESS
  ||' AND    NVL(using_assembly_item_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||' AND    deleted_flag   = '||SYS_NO
  ||' AND    process_flag  = '||G_IN_PROCESS
  ||' AND    origination_type IN (7,8,29)'
  ||' AND    deleted_flag   = '||SYS_NO
  ||' AND    batch_id       = :p_batch_id'
  ||' AND    sr_instance_code  = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;


  -- Update schedule_date = using_assembly_demand_date


  v_sql_stmt := 07;
  lv_sql_stmt :=
  ' UPDATE   msc_st_demands'
  ||' SET    schedule_date = using_assembly_demand_date '
  ||' WHERE  process_flag  = '||G_IN_PROCESS
  ||' AND    deleted_flag   = '||SYS_NO
  ||' AND    origination_type IN (7,8,29)'
  ||' AND    batch_id       = :p_batch_id'
  ||' AND    sr_instance_code  = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;

  -- Derive disposition_id for MDS

   v_sql_stmt := 08;
   lv_sql_stmt :=
   'UPDATE msc_st_demands msd '
    ||'  SET disposition_id = (SELECT local_id'
    ||'       FROM   msc_local_id_demand mlid'
    ||'       WHERE  mlid.char1    = msd.sr_instance_code'
    ||'       AND   NVL(mlid.char2,'||''''||NULL_CHAR||''''||') '
    ||'       =      NVL(msd.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.char3    = msd.organization_code'
    ||'       AND    mlid.char4    = msd.demand_schedule_name'
    ||'       AND    mlid.char5    = msd.item_name'
    ||'       AND    NVL(mlid.char6,'||''''||NULL_CHAR||''''||') '
    ||'       =      NVL(msd.schedule_line_num,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.date1    = msd.schedule_date'
    ||'       AND    mlid.number1  = msd.origination_type'
    ||'       AND    mlid.entity_name = ''DISPOSITION_ID_MDS'' )'
    ||'  WHERE origination_type in (7,8)'
    ||'  AND   process_flag     ='||G_IN_PROCESS
    ||'  AND   batch_id       = :p_batch_id'
    ||'  AND   sr_instance_code  =:v_instance_code' ;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;

   --   Set the message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DELETE_FAIL',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;
  -- Error out records with deleted flag = SYS_YES and NULL disposition_id

  v_sql_stmt := 09;

  lv_sql_stmt :=
  'UPDATE         msc_st_demands '
  ||' SET         process_flag    ='||G_ERROR_FLG||','
  ||'             error_text   = '||''''||lv_message_text||''''
  ||' WHERE  NVL(disposition_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||' AND    deleted_flag  ='||SYS_YES
  ||' AND    origination_type in  (7,8)'
  ||' AND    batch_id       = :p_batch_id'
  ||' AND    sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;


   -- Derive sales_order_line_id for forecast

   v_sql_stmt := 10;
   lv_sql_stmt :=
   'UPDATE msc_st_demands msd '
    ||'  SET  sales_order_line_id = (SELECT local_id'
    ||'       FROM   msc_local_id_demand mlid'
    ||'       WHERE  mlid.char1    = msd.sr_instance_code'
    ||'       AND   NVL(mlid.char2,'||''''||NULL_CHAR||''''||') '
    ||'       =      NVL(msd.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.char3    = msd.organization_code'
    ||'       AND    mlid.char4    = msd.forecast_designator'
    ||'       AND    mlid.char5    = msd.item_name'
    ||'       AND    NVL(mlid.char6,'||''''||NULL_CHAR||''''||') '
    ||'       =      NVL(msd.schedule_line_num,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.date1    = msd.schedule_date'
    ||'       AND    mlid.number1     = msd.origination_type'
    ||'       AND    mlid.entity_name = ''DISPOSITION_ID_FCT'' )'
    ||'  WHERE origination_type = 29'
    ||'  AND   process_flag     ='||G_IN_PROCESS
    ||'  AND   batch_id       = :p_batch_id'
    ||'  AND   sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;

   --   Set the message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DELETE_FAIL',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  -- Error out records with deleted flag = SYS_YES and NULL disposition_id

  v_sql_stmt := 11;

  lv_sql_stmt :=
  'UPDATE     msc_st_demands '
  ||' SET     process_flag    ='||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE   NVL(sales_order_line_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||' AND     deleted_flag  ='||SYS_YES
  ||' AND     origination_type = 29'
  ||' AND     batch_id       = :p_batch_id'
  ||' AND     sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;

   -- Set the error message
   lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_FK_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,PROJECT_NUMBER',
                      p_token2            => 'MASTER_TABLE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   --Derive Project Id.
    lv_return:= MSC_ST_UTIL.DERIVE_PROJ_TASK_ID
                           (p_table_name          => 'MSC_ST_DEMANDS',
                            p_proj_col_name       => 'PROJECT_NUMBER',
                            p_proj_task_col_id    => 'PROJECT_ID',
                            p_instance_code       =>  v_instance_code,
                            p_entity_name         => 'PROJECT_ID',
                            p_error_text          =>  lv_error_text,
                            p_batch_id            =>  p_batch_id,
                            p_severity            =>  G_SEV_WARNING,
                            p_message_text        =>  lv_message_text,
                            p_debug               => v_debug,
                            p_row                 =>  lv_column_names);
    IF lv_return<> 0 THEN
      RAISE ex_logging_err;
    END IF;

    -- Set the error message
   lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_FK_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,PROJECT_NUMBER'
                                             ||'TASK_NUMBER' ,
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_PROJECT_TASKS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --Derive Task Id.
    lv_return:= MSC_ST_UTIL.DERIVE_PROJ_TASK_ID
                           (p_table_name          => 'MSC_ST_DEMANDS',
                            p_proj_col_name       => 'PROJECT_NUMBER',
                            p_proj_task_col_id    => 'TASK_ID',
                            p_instance_code       => v_instance_code,
                            p_entity_name         => 'TASK_ID',
                            p_error_text          => lv_error_text,
                            p_task_col_name       => 'TASK_NUMBER',
                            p_batch_id            => p_batch_id,
                            p_severity            => G_SEV_WARNING,
                            p_message_text        => lv_message_text,
                            p_debug               => v_debug,
                            p_row                 => lv_column_names);

    IF lv_return<> 0 THEN
      RAISE ex_logging_err;
    END IF;

   -- Validations for MDS ( origination_type = 8)

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||' ORGANIZATION_CODE,'
                                             ||' DEMAND_SCHEDULE_NAME',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_DESIGNATORS',
                      p_token3            => 'CHILD_TABLE' ,
                      p_token_value3      => 'MSC_ST_DEMANDS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- For MDS check whether designator exists

     v_sql_stmt := 12;
    lv_sql_stmt :=
    'UPDATE  msc_st_demands msdm'
    ||' SET  process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE NOT EXISTS(SELECT 1'
    ||'       FROM   msc_st_designators msd'
    ||'       WHERE  msd.designator        = msdm.demand_schedule_name'
    ||'       AND   NVL(msd.company_name,'||''''||NULL_CHAR||''''||') '
    ||'             =    NVL(msdm.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    msd.organization_code = msdm.organization_code'
    ||'       AND    msd.sr_instance_code  = msdm.sr_instance_code'
    ||'       AND    msd.process_flag      = '||G_VALID
    ||'       AND    msd.designator_type   = 1'
    ||'       AND    NVL(msd.disable_date, SYSDATE+1) > SYSDATE'
    ||'       UNION'
    ||'       SELECT 1'
    ||'       FROM   msc_designators md'
    ||'       WHERE  md.designator         = msdm.demand_schedule_name'
    ||'       AND    md.organization_id    = msdm.organization_id '
    ||'       AND    md.sr_instance_id     = :v_instance_id '
    ||'       AND    md.designator_type    = 1'
    ||'       AND    NVL(md.disable_date, SYSDATE+1) > SYSDATE)'
    ||' AND origination_type   in (7,8)'
    ||' AND deleted_flag  = '||SYS_NO
    ||' AND process_flag  = '||G_IN_PROCESS
    ||' AND  batch_id       = :p_batch_id'
    ||' AND sr_instance_code = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_id,
                                        p_batch_id,
                                        v_instance_code;



    -- Repetitve planned items not supported
    -- So error out records with demand type = 2 ,or daily_demand_rate or
    -- assembly_demand_comp_date is NOT NULL for origination type = 8

      -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DEMAND_TYPE OR DAILY_DEMAND_RATE ,'
                                             ||' ASSEMBLY_DEMAND_COMP_DATE'	 );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  v_sql_stmt := 13;

  lv_sql_stmt :=
  'UPDATE       msc_st_demands '
  ||'  SET      process_flag    =  '||G_ERROR_FLG||','
  ||'           error_text   = '||''''||lv_message_text||''''
  ||' WHERE     (demand_type     = 2'
  ||' OR        assembly_demand_comp_date IS NOT NULL '
  ||' OR        daily_demand_rate         IS NOT NULL )  '
  ||' AND       deleted_flag   = '||SYS_NO
  ||' AND       origination_type in (7,8)'
  ||' AND       batch_id       = :p_batch_id'
  ||' AND       sr_instance_code  = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING p_batch_id,v_instance_code;

   -- Validations for Forecast ( origination_type = 29)

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,FORECAST_DESIGNATOR',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_DESIGNATORS',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_DEMANDS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  -- For Forecast,check whether designator exists

     v_sql_stmt := 14;
    lv_sql_stmt :=
    'UPDATE  msc_st_demands msdm'
    ||' SET  process_flag = '||G_ERROR_FLG||','
    ||'           error_text   = '||''''||lv_message_text||''''
    ||' WHERE NOT EXISTS(SELECT 1'
    ||'       FROM   msc_st_designators msd'
    ||'       WHERE  msd.designator        = msdm.forecast_designator'
    ||'       AND   NVL(msd.company_name,'||''''||NULL_CHAR||''''||') '
    ||'             =    NVL(msd.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    msd.organization_code = msdm.organization_code'
    ||'       AND    msd.sr_instance_code  = msdm.sr_instance_code'
    ||'       AND    msd.process_flag      = '||G_VALID
    ||'       AND    msd.designator_type   = 6'
    ||'       AND    NVL(msd.disable_date, SYSDATE+1) > SYSDATE'
    ||'       UNION'
    ||'       SELECT 1'
    ||'       FROM   msc_designators md'
    ||'       WHERE  md.designator      = msdm.forecast_designator'
    ||'       AND    md.organization_id = msdm.organization_id '
    ||'       AND    md.sr_instance_id  = :v_instance_id '
    ||'       AND    md.designator_type = 6'
    ||'       AND    NVL(md.disable_date, SYSDATE+1) > SYSDATE)'
    ||' AND origination_type   = 29'
    ||' AND deleted_flag  = '||SYS_NO
    ||' AND process_flag  = '||G_IN_PROCESS
    ||' AND  batch_id       = :p_batch_id'
    ||' AND sr_instance_code = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_id,
                                        p_batch_id,
                                        v_instance_code;


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DEMAND_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  1  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    --  Default demand_type to 1 if assembly_demand_comp_date is  NULL

    lv_where_str := '   AND NVL(assembly_demand_comp_date,SYSDATE-36500 ) = SYSDATE-36500'
                    ||' AND NVL(demand_type,'||NULL_VALUE||') <> 1'
                    ||' AND origination_type = 29 AND deleted_flag  ='||SYS_NO ;

    lv_return:= MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_DEMANDS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => p_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'DEMAND_TYPE',
                    p_debug             => v_debug,
                    p_default_value     => 1);

    IF lv_return<> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DEMAND_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  2  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --  Default demand_type as 2 if assembly_demand_comp_date is NOT NULL

    lv_where_str := '   AND NVL(assembly_demand_comp_date,SYSDATE-36500 ) <> SYSDATE-36500 '
                    ||' AND NVL(demand_type,'||NULL_VALUE||') <> 2'
                    ||' AND origination_type = 29 AND deleted_flag  ='||SYS_NO ;

    lv_return:= MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_DEMANDS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => p_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'DEMAND_TYPE',
                    p_debug             => v_debug,
                    p_default_value     => 2);

    IF lv_return<> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'BUCKET_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_BUCKET_TYPE );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Default bucket type to 1, if NOT IN (1 -days,2 - Weeks,3 - Periods)

    lv_where_str := '   AND  NVL(bucket_type,'||NULL_VALUE||') NOT IN (1,2,3)'
                    ||' AND origination_type = 29 AND deleted_flag  ='||SYS_NO ;

    lv_return:= MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_DEMANDS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => p_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'BUCKET_TYPE',
                    p_debug             => v_debug,
                    p_default_value     =>  G_BUCKET_TYPE);

    IF lv_return<> 0 THEN
        RAISE ex_logging_err;
    END IF;

      -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CUSTOMER_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Derive customer_id

   lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_DEMANDS',
                      p_org_partner_name => 'CUSTOMER_NAME',
                      p_org_partner_id   => 'CUSTOMER_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_CUSTOMER,
                      p_error_text       => lv_error_text,
                      p_batch_id         => p_batch_id,
                      p_severity         => G_SEV3_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CUSTOMER_SITE_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


  -- Derive customer_site_id

  lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                     (p_table_name        => 'MSC_ST_DEMANDS',
                      p_partner_name      => 'CUSTOMER_NAME',
                      p_partner_site_code => 'CUSTOMER_SITE_CODE',
                      p_partner_site_id   => 'CUSTOMER_SITE_ID',
                      p_instance_code     => v_instance_code,
                      p_partner_type      => G_CUSTOMER,
                      p_error_text        => lv_error_text,
                      p_batch_id          => p_batch_id,
                      p_severity          => G_SEV3_ERROR,
                      p_message_text      => lv_message_text,
                      p_debug             => v_debug,
                      p_row               => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'BILL_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


  -- Derive bill_to_site_id
  lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                     (p_table_name        => 'MSC_ST_DEMANDS',
                      p_partner_name      => 'CUSTOMER_NAME',
                      p_partner_site_code => 'BILL_CODE',
                      p_partner_site_id   => 'BILL_ID',
                      p_instance_code     => v_instance_code,
                      p_partner_type      => G_CUSTOMER,
                      p_error_text        => lv_error_text,
                      p_batch_id          => p_batch_id,
                      p_severity          => G_SEV3_ERROR,
                      p_message_text      => lv_message_text,
                      p_debug             => v_debug,
                      p_row               => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  -- valid values for order_date_type_code are 'SHIP' and 'ARRIVE'
  -- Set the error message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORDER_DATE_TYPE_CODE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => 1);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    lv_where_str :=
    '    AND NVL(order_date_type_code  ,'||NULL_VALUE||') '
    ||'  NOT IN (1,2) AND origination_type in (7, 8)'
    ||' AND     NVL(order_date_type_code,'||NULL_VALUE||')<> '||NULL_VALUE;

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_DEMANDS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => p_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'ORDER_DATE_TYPE_CODE',
                     p_debug             => v_debug,
                     p_default_value     => 1);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    --Call to customised validation.
    MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
      (ERRBUF         => lv_error_text,
       RETCODE        => lv_return,
       pBatchID       => p_batch_id,
       pInstanceCode  => v_instance_code,
       pEntityName    => 'MSC_ST_DEMANDS',
       pInstanceID    => v_instance_id);

    IF NVL(lv_return,0) <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  -- Generate disposition_id for MDS

    OPEN c2(p_batch_id);
    FETCH c2 BULK COLLECT INTO lb_rowid ;

    IF c2%ROWCOUNT > 0  THEN
      v_sql_stmt := 15;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_demands
      SET    disposition_id  = msc_st_demand_disposition_id_s.NEXTVAL
      WHERE  rowid           = lb_rowid(j);

      v_sql_stmt := 16;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      INSERT INTO msc_local_id_demand
        (local_id,
         st_transaction_id,
         instance_id,
         entity_name,
         data_source_type,
         char1,
         char2,
         char3,
         char4,
         char5,
         char6,
         number1,
         date1,
         SOURCE_ORG_ID,
         SOURCE_INVENTORY_ITEM_ID,
         SOURCE_USING_ASSEMBLY_ITEM_ID ,
         SOURCE_PROJECT_ID  ,
         SOURCE_TASK_ID,
         SOURCE_CUSTOMER_SITE_ID ,
         SOURCE_BILL_ID ,
         SOURCE_DISPOSITION_ID,
         SOURCE_CUSTOMER_ID,
         last_update_date,
         last_updated_by,
         creation_date,
         created_by)
      SELECT
         disposition_id,
         st_transaction_id,
         v_instance_id,
         'DISPOSITION_ID_MDS',
         data_source_type,
         sr_instance_code,
         company_name,
         organization_code,
         demand_schedule_name,
         item_name,
         schedule_line_num,
         origination_type,
         schedule_date,
         SOURCE_ORG_ID,
         SOURCE_INVENTORY_ITEM_ID,
         SOURCE_USING_ASSEMBLY_ITEM_ID ,
         SOURCE_PROJECT_ID  ,
         SOURCE_TASK_ID,
         SOURCE_CUSTOMER_SITE_ID ,
         SOURCE_BILL_ID ,
         SOURCE_DISPOSITION_ID,
         SOURCE_CUSTOMER_ID,
         v_current_date,
         v_current_user,
         v_current_date,
         v_current_user
      FROM  msc_st_demands
      WHERE rowid = lb_rowid(j);

      END IF;
      CLOSE c2 ;


  -- Generate sales_order_line_id for Forecast

    OPEN c3(p_batch_id);
    FETCH c3 BULK COLLECT INTO lb_rowid ;

    IF c3%ROWCOUNT > 0  THEN
      v_sql_stmt := 17;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_demands
      SET    sales_order_line_id  = msc_st_demand_disposition_id_s.NEXTVAL
      WHERE  rowid                = lb_rowid(j);

      v_sql_stmt := 18;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      INSERT INTO msc_local_id_demand
        (local_id,
         st_transaction_id,
         instance_id,
         entity_name,
         data_source_type,
         char1,
         char2,
         char3,
         char4,
         char5,
         char6,
         number1,
         date1,
         SOURCE_ORG_ID,
         SOURCE_INVENTORY_ITEM_ID,
         SOURCE_USING_ASSEMBLY_ITEM_ID ,
         SOURCE_SALES_ORDER_LINE_ID ,
         SOURCE_PROJECT_ID  ,
         SOURCE_TASK_ID,
         SOURCE_CUSTOMER_SITE_ID ,
         SOURCE_BILL_ID ,
         SOURCE_CUSTOMER_ID,
         last_update_date,
         last_updated_by,
         creation_date,
         created_by)
      SELECT
         sales_order_line_id,
         st_transaction_id,
         v_instance_id,
         'DISPOSITION_ID_FCT',
         data_source_type,
         sr_instance_code,
         company_name,
         organization_code,
         forecast_designator,
         item_name,
         schedule_line_num,
         origination_type,
         schedule_date,
         SOURCE_ORG_ID,
         SOURCE_INVENTORY_ITEM_ID,
         SOURCE_USING_ASSEMBLY_ITEM_ID ,
         SOURCE_SALES_ORDER_LINE_ID ,
         SOURCE_PROJECT_ID  ,
         SOURCE_TASK_ID,
         SOURCE_CUSTOMER_SITE_ID ,
         SOURCE_BILL_ID ,
         SOURCE_CUSTOMER_ID,
         v_current_date,
         v_current_user,
         v_current_date,
         v_current_user
      FROM  msc_st_demands
      WHERE rowid = lb_rowid(j);

      END IF;
      CLOSE c3 ;

    lv_return:= MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_DEMANDS',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => p_batch_id);

    IF lv_return<> 0 THEN
      RAISE ex_logging_err;
    END IF;

    lv_return:= MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_DEMANDS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_message_text      => NULL,
                    p_error_text        => lv_error_text,
                    p_debug             => v_debug,
                    p_batch_id          => p_batch_id);

    IF lv_return<> 0 THEN
      RAISE ex_logging_err;
    END IF;

    COMMIT;

 EXCEPTION

    WHEN too_many_rows THEN
      lv_error_text := substr('MSC_CL_PRE_PROCESS.LOAD_MDS_FORECAST'||'('
                      ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);

      ROLLBACK ;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);

      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text :=  substr('MSC_CL_PRE_PROCESS.LOAD_MDS_FORECAST'||'('
                        ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);

      ROLLBACK;

  END LOAD_MDS_FORECAST ;

  /*==========================================================================+
  | DESCRIPTION  : This procedure derives the sr_company_id and the partner   |
  |                type for the  business object Company users.               |
  +==========================================================================*/
  PROCEDURE  LOAD_COMPANY_USERS IS

  ex_logging_err        EXCEPTION;
  lv_return             NUMBER;
  lv_error_text         VARCHAR2(250);
  lv_sql_stmt           VARCHAR2(5000);
  lv_batch_id           msc_st_company_users.batch_id%TYPE;
  lv_message_text       msc_errors.error_text%TYPE;

  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid         RowidTab;

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT mscu.rowid
    FROM   MSC_ST_COMPANY_USERS mscu
    WHERE  mscu.process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    mscu.sr_instance_code  = v_instance_code
    AND    batch_id         = p_batch_id;

  BEGIN

    LOOP
      v_sql_stmt := 01;

      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   DUAL;

      v_sql_stmt := 02;
      lv_sql_stmt :=
      ' UPDATE   MSC_ST_COMPANY_USERS '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN  c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      v_sql_stmt := 03;

      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE MSC_ST_COMPANY_USERS
      SET    st_transaction_id = msc_st_company_users_s.NEXTVAL,
             refresh_id          = v_refresh_id,
             last_update_date    = v_current_date,
             last_update_login   = v_current_user,
             creation_date       = v_current_date,
             created_by          = v_current_user
      WHERE  rowid           = lb_rowid(j);

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'COMPANY_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      lv_return := MSC_ST_UTIL.DERIVE_COMPANY_ID
                        (p_table_name     => 'MSC_ST_COMPANY_USERS',
                         p_company_name   => 'COMPANY_NAME',
                         p_company_id     => 'SR_COMPANY_ID',
                         p_instance_code  => v_instance_code,
                         p_error_text     => lv_error_text,
                         p_batch_id       => lv_batch_id,
                         p_message_text   => lv_message_text,
                         p_debug          => v_debug);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

/*   Calling derive_company_id
      v_sql_stmt := 04;

      UPDATE MSC_ST_COMPANY_USERS mscu
      SET    SR_COMPANY_ID          = (SELECT local_id from MSC_LOCAL_ID_SETUP
              WHERE char1           = mscu.sr_instance_code
              and   NVL(char3,NULL_CHAR) = NVL(mscu.company_name,NULL_CHAR)
              and   entity_name     = 'SR_TP_ID'
              and   rownum          = 1) -- we need the first occurence of sr_tp_id
      WHERE  mscu.process_flag      = G_IN_PROCESS
      AND    mscu.sr_instance_code  = v_instance_code
      AND    mscu.batch_id          = lv_batch_id;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'COMPANY_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 05;

      UPDATE msc_st_company_users
      SET    process_flag     = G_ERROR_FLG,
             error_text       = lv_message_text
      WHERE NVL(sr_company_id,NULL_VALUE) = NULL_VALUE
      AND   NVL(company_name,'-1') <> '-1'
      AND   process_flag   = G_IN_PROCESS
      AND   batch_id       = lv_batch_id
      AND   sr_instance_code = v_instance_code;
*/
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'USER_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 05.1;


      UPDATE msc_st_company_users mscu
      SET    mscu.process_flag     = G_ERROR_FLG,
             mscu.error_text       = lv_message_text
      WHERE ( mscu.user_name IS NULL OR NOT EXISTS(select '1' from fnd_user fu where fu.user_name =UPPER(mscu.user_name)))
      AND   mscu.process_flag   = G_IN_PROCESS
      AND   mscu.batch_id       = lv_batch_id
      AND   mscu.sr_instance_code = v_instance_code;

      v_sql_stmt := 05;

      UPDATE MSC_ST_COMPANY_USERS mscu
      SET PARTNER_TYPE                = (SELECT number1 from MSC_LOCAL_ID_SETUP
                WHERE char1             = mscu.sr_instance_code
                and   NVL(char3,NULL_CHAR) = NVL(mscu.company_name,NULL_CHAR)
                and   entity_name       = 'SR_TP_ID'
                and   number1 in (1,2)
                and   rownum            = 1) -- we need the first occurence of sr_tp_id
      WHERE  mscu.process_flag        = G_IN_PROCESS
      AND    mscu.sr_instance_code    = v_instance_code
      AND    mscu.batch_id            = lv_batch_id;


      --Call to customised validation.

      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
          (ERRBUF         => lv_error_text,
           RETCODE        => lv_return,
           pBatchID       => lv_batch_id,
           pInstanceCode  => v_instance_code,
           pEntityName    => 'MSC_ST_COMPANY_USERS',
           pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Set the process flag as Valid and poulate instance_id
      lv_return :=
      MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name     => 'MSC_ST_COMPANY_USERS',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug,
                               p_batch_id       => lv_batch_id);

      IF lv_return < 0 THEN
        RAISE ex_logging_err;
      END IF;
      COMMIT;

    END LOOP;

  EXCEPTION
    WHEN too_many_rows THEN
      lv_error_text :=substr('MSC_CL_PRE_PROCESS.LOAD_COMPANY_USERS'||'('
                      ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);

      ROLLBACK ;

    WHEN ex_logging_err THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'MSC_CL_PRE_PROCESS.LOAD_COMPANY_USERS: '||lv_error_text);
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text :=  substr('MSC_CL_PRE_PROCESS.LOAD_COMPANY_USERS'||'('
                        ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END LOAD_COMPANY_USERS;

 /*==========================================================================+
  | DESCRIPTION  : This function performs insertion of co products records    |
  |                into msc_st_bom_componenets plus updates the records in    |
  |                msc_st_boms. Its called from LOAD_BOM after pre processing |
  |                CO PRODUCTS. Included for OSFM Integration                 |
  +==========================================================================*/

   PROCEDURE LOAD_CO_PRODUCT_BOMS IS

   TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
   lb_rowid               RowidTab;
   lv_sql_stmt            VARCHAR2(5000);
   v_query_str1           varchar2(6000);
   v_query_str2           varchar2(6000);
   v_query_str3           varchar2(6000);
   type cur_type is ref cursor;
   cur1 cur_type;
   cur2 cur_type;
   cur3 cur_type;
   l_co_product_id_cur1 	Number;
   l_component_id_cur1 		Number;
   l_split_cur1 		Number;
   l_primary_flag_cur1 		Number;
   l_bill_sequence_id_cur2	Number;
   l_rowid_cur2                 rowid;
   l_co_product_id_cur3		Number;
   l_component_id_cur3		Number;
   l_split_cur3			Number;
   l_primary_flag_cur3		Number;
   lv_return                    NUMBER;
   lv_error_text                VARCHAR2(250);
   lv_ODS_flag                  NUMBER; -- 1 if record from BOM ODS else 0.
   ex_logging_err               EXCEPTION;

 CURSOR c1 IS
    SELECT rowid
    FROM   msc_st_bom_components
    WHERE  process_flag          = G_IN_PROCESS
    AND    sr_instance_code      = v_instance_code
    AND    NVL(component_sequence_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag           = SYS_NO;



   BEGIN

    -- selecting all the valid Co Products in the table --
     v_query_str1 :=    ' select mcp.co_product_id,  '
                     || ' mcp.component_id,          '
                     || ' mcp.split,                 '
       		     || ' mcp.primary_flag           '
       		     || ' from msc_st_co_products mcp'
      		     || ' where process_flag = '|| G_VALID
      		     || ' and sr_instance_code = :v_instance_code ';


   -- selecting all the valid boms for the selected Co Product from staging table + ODS--
    v_query_str2 :=   ' select  msb.bill_sequence_id,msb.rowid,0 '
         	   || ' from msc_st_boms msb '
                   || ' where msb.assembly_item_id = :lv_assembly_item_id '
                   || ' AND msb.process_flag = '|| G_VALID
                   || ' and sr_instance_code = :v_instance_code '
                   || ' UNION '
                   || ' select  mb.bill_sequence_id,mb.rowid,1 '
                   || ' from msc_boms mb, MSC_ITEM_ID_LID lid '
                   || ' where mb.assembly_item_id = lid.INVENTORY_ITEM_ID '
                   || ' and mb.sr_instance_id= :v_instance_id '
                   || ' and lid.SR_INVENTORY_ITEM_ID = :lv_assembly_item_id '
                   || ' and lid.SR_INSTANCE_ID = :v_instance_id '
                   || ' and mb.bill_sequence_id not in '
                   || '   ( select  msb1.bill_sequence_id '
                   || '     from msc_st_boms msb1'
                   || '     where msb1.assembly_item_id = :lv_assembly_item_id '
                   || '     AND msb1.process_flag = '|| G_VALID
                   || '     and sr_instance_code = :v_instance_code )';



  -- selecting all the other valid Co products  for the selected Co Product and Component--
    v_query_str3 :=   ' select mcp.co_product_id,  '
                   || ' mcp.component_id,          '
                   || ' mcp.split,                 '
       		   || ' mcp.primary_flag           '
       		   || ' from msc_st_co_products mcp'
      		   || ' where process_flag = '|| G_VALID
      		   || ' and component_id   = :lv_assembly_item_id '
      		   || ' and co_product_id   <> :lv_co_product_id  ';





         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,v_query_str1);

    v_sql_stmt := 01;
    OPEN cur1 FOR v_query_str1 USING v_instance_code;
    LOOP

      FETCH cur1 INTO
      l_co_product_id_cur1,l_component_id_cur1,l_split_cur1,l_primary_flag_cur1;

      EXIT WHEN cur1%NOTFOUND;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,v_query_str2);


      v_sql_stmt := 02;
      OPEN cur2 FOR v_query_str2 USING l_co_product_id_cur1,v_instance_code,
      v_instance_id,l_co_product_id_cur1,v_instance_id,l_co_product_id_cur1,v_instance_code;

      LOOP

        FETCH cur2 INTO l_bill_sequence_id_cur2,l_rowid_cur2,lv_ODS_flag ;

        EXIT WHEN cur2%NOTFOUND;

    -- set the primary_flag for the actual component to "not a primary"    --
    -- this means whether a co product is primary or not would matter only --
    -- for the set of products not including the actual component          --
     v_sql_stmt := 03;
    lv_sql_stmt :=

       'update MSC_ST_BOM_COMPONENTS x'
    || ' set x.primary_flag = 2'
    || ' where x.bill_Sequence_id='||l_bill_sequence_id_cur2
    || ' and x.primary_flag is null '
    || ' and nvl(x.component_type,0) != 10 ' -- component_type is 10 for co products
    || ' and x.usage_quantity > 0 '
    || ' and x.inventory_item_id =' ||l_component_id_cur1;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt;
     OPEN cur3 FOR v_query_str3 USING l_component_id_cur1, l_co_product_id_cur1;

      LOOP


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,v_query_str3);

        v_sql_stmt := 04;
        FETCH cur3 INTO
        l_co_product_id_cur3,l_component_id_cur3,l_split_cur3,l_primary_flag_cur3;

        EXIT WHEN cur3%NOTFOUND;

        v_sql_stmt := 05;
        insert into MSC_ST_BOM_COMPONENTS
        ( INVENTORY_ITEM_ID,
          BILL_SEQUENCE_ID,
          COMPONENT_TYPE,
          USAGE_QUANTITY,
          COMPONENT_YIELD_FACTOR,
          EFFECTIVITY_DATE,
          DISABLE_DATE,
          OPERATION_OFFSET_PERCENT,
          OPTIONAL_COMPONENT,
          WIP_SUPPLY_TYPE,
          PLANNING_FACTOR,
          REVISED_ITEM_SEQUENCE_ID,
          ATP_FLAG,
          STATUS_TYPE,
          USE_UP_CODE,
          CHANGE_NOTICE,
          ORGANIZATION_ID,
          USING_ASSEMBLY_ID,
          FROM_UNIT_NUMBER,
          TO_UNIT_NUMBER,
          DRIVING_ITEM_ID,
          DELETED_FLAG,
          REFRESH_ID,
          SR_INSTANCE_CODE,
          PRIMARY_FLAG,
          ROUNDING_DIRECTION,
          process_flag)
          select
          l_co_product_id_cur3,
          l_bill_sequence_id_cur2,
          10,
          -(l_split_cur3/100),
          x.COMPONENT_YIELD_FACTOR,
          x.EFFECTIVITY_DATE,
          x.DISABLE_DATE,
          x.OPERATION_OFFSET_PERCENT,
          x.OPTIONAL_COMPONENT,
          x.WIP_SUPPLY_TYPE,
          x.PLANNING_FACTOR,
          x.REVISED_ITEM_SEQUENCE_ID,
          x.ATP_FLAG,
          x.STATUS_TYPE,
          x.USE_UP_CODE,
          x.CHANGE_NOTICE,
          x.ORGANIZATION_ID,
          l_co_product_id_cur1,
          x.FROM_UNIT_NUMBER,
          x.TO_UNIT_NUMBER,
          x.DRIVING_ITEM_ID,
          2,
          refresh_id,
          v_instance_code,
          l_primary_flag_cur3,
          3,
          2
        FROM MSC_ST_BOM_COMPONENTS x
        WHERE x.bill_Sequence_id = l_bill_sequence_id_cur2
        AND   x.sr_instance_id = v_instance_id
        AND rownum = 1; -- so that in the next loop only 1 record is inserted

      End loop;

  IF lv_ODS_flag = 0 THEN  -- if the BOM record is in the staging table

    v_sql_stmt := 06;
    update msc_st_boms
    set assembly_quantity = (l_split_cur1/100)
    where rowid = l_rowid_cur2 ;

  ELSE                    -- if the BOM record is in the ODS

      v_sql_stmt := 07;
      insert into MSC_ST_BOMS
       ( BILL_SEQUENCE_ID,
         ORGANIZATION_ID,
         ASSEMBLY_ITEM_ID,
         ASSEMBLY_TYPE,
         ALTERNATE_BOM_DESIGNATOR,
         SPECIFIC_ASSEMBLY_COMMENT,
         SCALING_TYPE,
         PENDING_FROM_ECN,
         UOM,
         ASSEMBLY_QUANTITY,
         DELETED_FLAG,
         REFRESH_ID,
         SR_INSTANCE_ID)
        SELECT
         msb.BILL_SEQUENCE_ID,
         msb.ORGANIZATION_ID,
         lid.SR_INVENTORY_ITEM_ID,
         msb.ASSEMBLY_TYPE,
         msb.ALTERNATE_BOM_DESIGNATOR,
         msb.SPECIFIC_ASSEMBLY_COMMENT,
         msb.SCALING_TYPE,
         msb.PENDING_FROM_ECN,
         msb.UOM,
         (l_split_cur1/100),
         2,
         v_refresh_id,
         v_instance_id
       -- note the join on MSC_ITEM_ID_LID because MSC_BOMS stores ASSEMBLY_ITEM_ID
       -- and MSC_ST_BOMS stores  SR_INVENTORY_ITEM_ID in ASSEMBLY_ITEM_ID
        FROM MSC_BOMS msb ,MSC_ITEM_ID_LID lid
        WHERE msb. BILL_SEQUENCE_ID = l_bill_sequence_id_cur2
        And lid.SR_INSTANCE_ID = msb.SR_INSTANCE_ID
        AND lid.INVENTORY_ITEM_ID = msb.ASSEMBLY_ITEM_ID ;

    END IF;


   ENd loop;

   v_sql_stmt := 08;
   -- Derive the component_sequence_id --
     lv_sql_stmt :=
     'UPDATE     msc_st_bom_components mbc'
     ||' SET     component_sequence_id=  (SELECT local_id '
     ||'         FROM msc_local_id_setup mlis'
     ||'         WHERE  mlis.char1 = mbc.sr_instance_code'
     ||'         AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
     ||'               =  NVL(mbc.company_name,'||''''||NULL_CHAR||''''||') '
     ||'         AND    mlis.char3 = mbc.organization_code'
     ||'         AND    mlis.char4 = mbc.bom_name'
     ||'         AND    mlis.char5 = mbc.component_name'
     ||'         AND   NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
     ||'               =  NVL(mbc.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
     ||'         AND    mlis.char7 = mbc.operation_seq_code'
     ||'         AND    mlis.date1 = mbc.effectivity_date'
     ||'         AND    mlis.entity_name = ''COMPONENT_SEQUENCE_ID'')'
     ||'   WHERE      mbc.sr_instance_code = :v_instance_code'
     ||'   AND        mbc.process_flag     ='|| G_IN_PROCESS ;




            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

   -- Generate the  component sequence id
      v_sql_stmt := 09;
      OPEN c1;
      FETCH c1 BULK COLLECT INTO lb_rowid ;

      IF c1%ROWCOUNT > 0  THEN
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

          UPDATE msc_st_bom_components
          SET    component_sequence_id   = msc_st_component_sequence_id_s.NEXTVAL
          WHERE  rowid                   = lb_rowid(j);


            FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

            -- Insert into the LID table

             INSERT INTO  msc_local_id_setup
	     (local_id,
	      st_transaction_id,
	      instance_id,
	      entity_name,
	      data_source_type,
	      char1,
	      char2,
	      char3,
	      char4,
	      char5,
	      char6,
	      char7,
	      date1,
	      date2,
	      last_update_date,
	      last_updated_by,
	      creation_date,
	      created_by    )
	      SELECT
	      component_sequence_id,
	      st_transaction_id,
	      v_instance_id,
	      'COMPONENT_SEQUENCE_ID',
	      data_source_type,
	      sr_instance_code,
	      company_name,
	      organization_code,
	      bom_name,
	      component_name,
	      alternate_bom_designator,
	      operation_seq_code,
	      effectivity_date,
	      disable_date,
	      v_current_date,
	      v_current_user,
	      v_current_date,
	      v_current_user
	      FROM msc_st_bom_components
	      WHERE rowid = lb_rowid(j) ;

	END IF;
       CLOSE c1;
       COMMIT;
   End Loop;

   -- Set the process flag as Valid and poulate instance_id
    lv_return :=
    MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name     => 'MSC_ST_BOM_COMPONENTS',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

 EXCEPTION

    WHEN OTHERS THEN
      lv_error_text :=  substr('MSC_CL_PRE_PROCESS.LOAD_CO_PRODUCT_BOMS'||'('
                        ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;


   END LOAD_CO_PRODUCT_BOMS; /*osfm change */


  /*==========================================================================+
  | DESCRIPTION  : This function performs the validation and loads the data   |
  |                for business object BOM.                                   |
  +==========================================================================*/
PROCEDURE  LOAD_BOM IS

  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  TYPE CurTyp           IS REF CURSOR;
  c1                    CurTyp;
  lb_rowid              RowidTab;

  lv_column_names       VARCHAR2(5000);     -- Stores cocatenated column names
  lv_return             NUMBER;
  lv_error_text         VARCHAR2(250);
  lv_where_str          VARCHAR2(5000);
  lv_sql_stmt           VARCHAR2(5000);
  lv_cursor_stmt        VARCHAR2(5000);
  lv_batch_id           msc_st_boms.batch_id%TYPE;
  lv_message_text       msc_errors.error_text%TYPE;

  ex_logging_err    EXCEPTION;

  CURSOR c2(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_boms
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

  CURSOR c3(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_boms
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(bill_sequence_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag      = SYS_NO;

  CURSOR c4(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_bom_components
    WHERE  process_flag     IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

 CURSOR c5(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_bom_components
    WHERE  process_flag          = G_IN_PROCESS
    AND    sr_instance_code      = v_instance_code
    AND    batch_id              = p_batch_id
    AND    NVL(component_sequence_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag           = SYS_NO;

  CURSOR c6(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_component_substitutes
    WHERE  process_flag     IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

  CURSOR c7(p_batch_id NUMBER) IS
    SELECT mlis.rowid
    FROM   msc_st_bom_components mbc, msc_local_id_setup mlis
    WHERE  mlis.char1               = mbc.sr_instance_code
    AND    NVL(mlis.char2,'-23453') = NVL(mbc.company_name,'-23453')
    AND    mlis.char3               = mbc.organization_code
    AND    mlis.char4               = mbc.bom_name
    AND    mlis.char5               = mbc.component_name
    AND    NVL(mlis.char6,'-23453') = NVL(mbc.alternate_bom_designator,'-23453')
    AND    mlis.char7               = mbc.operation_seq_code
    AND    mlis.date1               = mbc.effectivity_date
    AND    mbc.batch_id             = p_batch_id
    AND    mbc.deleted_flag         = SYS_YES
    AND    mbc.process_flag         = G_IN_PROCESS
    AND    mlis.entity_name         = 'COMPONENT_SEQUENCE_ID'
    AND    mlis.instance_id         = v_instance_id ;

     --  For Co Products --
  CURSOR c8(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_co_products
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

  CURSOR c9 IS
    SELECT max(rowid)
    FROM   msc_st_co_products
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    NVL(co_product_group_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag     = SYS_NO
    GROUP BY component_name,sr_instance_code,company_name;

  CURSOR c10(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_bom_components
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(operation_seq_num,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag     = SYS_NO;


  BEGIN

  -- Validation fo table msc_st_boms

  -- Before we start processing the record by group id( batch size ) we are going
  -- to check whether that there
  -- is any duplicates for user defined unique keys (UDKs,)

   --Duplicate records check for the records whose source is XML

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 01;
  lv_sql_stmt :=
  'UPDATE   msc_st_boms msb1'
  ||' SET     process_flag  = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE   message_id <  (SELECT MAX(message_id)'
  ||'         FROM msc_st_boms  msb2'
  ||'               WHERE msb2.sr_instance_code = msb1.sr_instance_code'
  ||'               AND msb2.organization_code  = msb1.organization_code'
  ||'               AND NVL(msb2.bom_name,'||''''||NULL_CHAR||''''||') '
  ||'                   = NVL(msb1.bom_name, '||''''||NULL_CHAR||''''||') '
  ||'               AND NVL(msb2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                   = NVL(msb1.company_name, '||''''||NULL_CHAR||''''||') '
  ||'               AND msb2.assembly_name      = msb1.assembly_name'
  ||'               AND NVL(msb2.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
  ||'                   = NVL(msb1.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
  ||'               AND msb2.process_flag        = '||G_IN_PROCESS
  ||'               AND    NVL(msb2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||') '
  ||' AND     msb1.process_flag ='|| G_IN_PROCESS
  ||' AND     msb1.sr_instance_code = :v_instance_code '
  ||' AND     NVL(msb1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE ;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  --Duplicate records check for the records whose source is batch load

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;
  v_sql_stmt := 02;

  lv_sql_stmt :=
  'UPDATE     msc_st_boms msb1'
  ||' SET     process_flag  = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE   EXISTS ( SELECT 1 FROM msc_st_boms msb2'
  ||'               WHERE msb2.sr_instance_code = msb1.sr_instance_code'
  ||'               AND msb2.organization_code  = msb1.organization_code'
  ||'               AND NVL(msb2.bom_name,'||''''||NULL_CHAR||''''||') '
  ||'                   = NVL(msb1.bom_name, '||''''||NULL_CHAR||''''||') '
  ||'               AND NVL(msb2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                   = NVL(msb1.company_name, '||''''||NULL_CHAR||''''||') '
  ||'               AND msb2.assembly_name      = msb1.assembly_name'
  ||'               AND NVL(msb2.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
  ||'                   = NVL(msb1.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
  ||'               AND msb2.process_flag        = '||G_IN_PROCESS
  ||'               AND NVL(msb2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||'               AND msb2.rowid <> msb1.rowid)'
  ||' AND     msb1.process_flag ='|| G_IN_PROCESS
  ||' AND     msb1.sr_instance_code = :v_instance_code'
  ||' AND     NVL(msb1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;


  lv_column_names :=
  'BOM_NAME                     ||''~''||'
  ||'ORGANIZATION_CODE          ||''~''||'
  ||'ASSEMBLY_NAME              ||''~''||'
  ||'ASSEMBLY_TYPE              ||''~''||'
  ||'SR_INSTANCE_CODE           ||''~''||'
  ||'ALTERNATE_BOM_DESIGNATOR   ||''~''||'
  ||'SPECIFIC_ASSEMBLY_COMMENT  ||''~''||'
  ||'PENDING_FROM_ECN           ||''~''||'
  ||'BOM_SCALING_TYPE           ||''~''||'
  ||'ASSEMBLY_QUANTITY          ||''~''||'
  ||'UOM                        ||''~''||'
  ||'DELETED_FLAG               ||''~''||'
  ||'COMPANY_NAME' ;

   LOOP
      v_sql_stmt := 03;
      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      ' UPDATE msc_st_boms '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c2(lv_batch_id);
      FETCH c2 BULK COLLECT INTO lb_rowid;
      CLOSE c2;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_boms
      SET  st_transaction_id = msc_st_boms_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);


     -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_BOMS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Deletion is not allowed on this table.
      v_sql_stmt := 06;
      lv_sql_stmt :=
      ' UPDATE     msc_st_boms '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code =  :v_instance_code';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

    -- Set the message

    lv_return :=    MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      -- Check DELETED_FLAG column has valid value or not and if not set it to SYS_NO
      -- Log error procedure inserts warning and also defaults the delete flag

     lv_where_str := ' AND NVL(deleted_flag,'||NULL_VALUE||') <>'||SYS_NO;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_BOMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DELETED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     =>  SYS_NO);


      IF lv_return <> 0 THEN
          RAISE ex_logging_err;
      END IF;

      -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Populate  organization id

     lv_return :=
     MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name     => 'MSC_ST_BOMS',
                                    p_org_partner_name  => 'ORGANIZATION_CODE',
                                    p_org_partner_id    => 'ORGANIZATION_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_ORGANIZATION,
                                    p_severity          => G_SEV_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_batch_id          => lv_batch_id,
                                    p_debug             => v_debug,
                                    p_error_text        => lv_error_text);

     if(lv_return <> 0) then
        RAISE ex_logging_err;
     end if;

      -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ASSEMBLY_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Poplulate assembly item id
     lv_return :=
     MSC_ST_UTIL.DERIVE_ITEM_ID(p_table_name =>'MSC_ST_BOMS',
                             p_item_col_name => 'ASSEMBLY_NAME',
                             p_item_col_id   =>'ASSEMBLY_ITEM_ID',
                             p_instance_code => v_instance_code,
                             p_instance_id   => v_instance_id,
                             p_severity      => G_SEV_ERROR,
                             p_message_text  => lv_message_text,
                             p_batch_id      =>lv_batch_id,
                             p_debug         => v_debug,
                             p_error_text    =>lv_error_text);


    if(lv_return <> 0) then
         RAISE ex_logging_err;
    end if;


     -- Now we will check whether BOM Name is NULL , if it is NULL we will populate the
     -- ASSEMBLY NAME in BOM NAME column for all the records

    v_sql_stmt := 07;

    lv_sql_stmt :=

    'UPDATE msc_st_boms  msb'
    ||' SET    msb.bom_name            = msb.assembly_name'
    ||' WHERE  sr_instance_code        = :v_instance_code'
    ||' AND    msb.process_flag        ='||G_IN_PROCESS
    ||' AND    NVL(msb.bom_name,'||''''||NULL_CHAR||''''||') '
    ||'              = '||''''||NULL_CHAR||''''
    ||' AND    msb.batch_id            = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    -- Derive the BILL_SEQUENCE_ID for the BOM from LOCAL ID table

    lv_return :=
    MSC_ST_UTIL.DERIVE_BILL_SEQUENCE_ID
           (p_table_name    => 'MSC_ST_BOMS',
           p_bom_col_name   => 'BOM_NAME',
           p_bom_col_id     => 'BILL_SEQUENCE_ID',
           p_instance_code  => v_instance_code,
           p_batch_id       => lv_batch_id,
           p_debug          => v_debug,
           p_error_text     => lv_error_text);

    IF (lv_return <> 0 ) THEN
           RAISE ex_logging_err;
    END IF;

     -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ASSEMBLY_QUANTITY',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  G_ASSEMBLY_QUANTITY  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

-- To make ERP collection and Legacy in sync
/*     --ASSEMBLY_QUANTITY default to 1 if not provided
     --Log warning in error table
     lv_where_str :=
    ' AND NVL(assembly_quantity,'||NULL_VALUE||') ='|| NULL_VALUE;

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_BOMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'assembly_quantity',
                     p_debug             => v_debug,
                     p_default_value     => G_ASSEMBLY_QUANTITY);

      IF lv_return <> 0 THEN
          RAISE ex_logging_err;
      END IF;
*/
    -- Now check for UOM code if it is Invalid error out
    -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'UOM_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- If UOM is  provided  validate the UOM_CODE
    -- For validation, use ODS table MSC_UNITS_OF_MEASURE table
     v_sql_stmt := 08;

     lv_sql_stmt :=
     '   UPDATE     msc_st_boms msb'
     ||' SET        process_flag = '||G_ERROR_FLG||','
     ||'            error_text   = '||''''||lv_message_text||''''
     ||' WHERE      NOT EXISTS (SELECT 1'
     ||'            FROM msc_units_of_measure muom'
     ||'            WHERE muom.uom_code       = msb.uom'
     ||'            UNION'
     ||'            SELECT 1 FROM msc_st_units_of_measure msuom'
     ||'            WHERE msuom.uom_code       = msb.uom'
     ||'       AND   msuom.sr_instance_id     = :v_instance_id'
     ||'       AND   msuom.process_flag       = '||G_VALID||' )'
     ||' AND NVL(msb.uom,'||''''||NULL_CHAR||''''||') '
     ||'        <> '||''''||NULL_CHAR||''''
     ||' AND msb.sr_instance_code   = :v_instance_code'
     ||' AND msb.batch_id           = :lv_batch_id'
     ||' AND msb.process_flag       = '||G_IN_PROCESS ;



         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,
                        v_instance_code,
                        lv_batch_id;

     -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ASSEMBLY_TYPE',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  G_ASSEMBLY_TYPE  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  --ASSEMBLY_TYPE default to 1 if value NOT IN (1,2)
  --Log warning in error table

    lv_where_str :=
    ' AND NVL(assembly_type,'||NULL_VALUE||') NOT IN (1,2)';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name       => 'MSC_ST_BOMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'ASSEMBLY_TYPE',
                     p_debug             => v_debug,
                     p_default_value     => G_ASSEMBLY_TYPE);


      IF lv_return <> 0 THEN
           RAISE ex_logging_err;
      END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'BOM_SCALING_TYPE',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  G_BOM_SCALING_TYPE  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   --  SCALING_TYPE NULL ( valid value NULL,0,1,2)
   --  Defaulting as NULL if invalid values

    lv_where_str := ' AND bom_scaling_type NOT IN (0,1,2)';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_BOMS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'BOM_SCALING_TYPE',
                     p_debug             => v_debug,
                     p_default_value     => G_BOM_SCALING_TYPE);

      IF lv_return <> 0 THEN
         RAISE ex_logging_err;
      END IF;

    --Call to customised validation.

      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_BOMS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Now  generate bill_sequence_id for New BOM and populate the same in
   -- LID table and MSC_ST_BOMS  , Sequence to be used MSC_ST_BILL_SEQUENCE_ID_S

     v_sql_stmt := 09;

     OPEN c3(lv_batch_id);
     FETCH c3 BULK COLLECT INTO lb_rowid ;

     IF c3%ROWCOUNT > 0  THEN

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_boms
        SET    bill_sequence_id       = msc_st_bill_sequence_id_s.NEXTVAL
        WHERE  rowid                  = lb_rowid(j);

    v_sql_stmt := 10;

   FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

    -- Insert into the LID table this new BOM with the  user defined key

       INSERT INTO  msc_local_id_setup
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char3,
       char4,
       char5,
       char6,
       SOURCE_ORGANIZATION_ID,
       SOURCE_BILL_SEQUENCE_ID,
       SOURCE_INVENTORY_ITEM_ID,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
       SELECT
       bill_sequence_id,
       st_transaction_id,
       v_instance_id,
       'BILL_SEQUENCE_ID',
       data_source_type,
       sr_instance_code,
       company_name,
       organization_code,
       bom_name,
       assembly_name,
       alternate_bom_designator,
       SOURCE_ORGANIZATION_ID,
       SOURCE_BILL_SEQUENCE_ID,
       SOURCE_INVENTORY_ITEM_ID,
       v_current_date,
       v_current_user,
       v_current_date,
       v_current_user
       FROM msc_st_boms
       WHERE   rowid   =   lb_rowid(j);

       END IF;
    CLOSE c3;

    -- Set the process flag as Valid and poulate instance_id
    lv_return :=
    MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name   => 'MSC_ST_BOMS',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug,
                               p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
          RAISE ex_logging_err;
      END IF;

    -- At the end calling  the LOG_ERROR for logging all errored out records

   lv_return :=
   MSC_ST_UTIL.LOG_ERROR(p_table_name    =>'MSC_ST_BOMS',
                         p_instance_code =>v_instance_code,
                         p_row           =>lv_column_names,
                         p_severity      =>G_SEV_ERROR,
                         p_message_text  =>NULL,
                         p_error_text    =>lv_error_text,
                         p_debug         => v_debug,
                         p_batch_id      => lv_batch_id  );

  IF(lv_return <> 0) then
       RAISE ex_logging_err;
  END IF;
   COMMIT;
  END LOOP;


   -- Now Validation for MSC_ST_BOM_COMPONENTS

   --Duplicate records check for the records whose source is XML

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 11;

  lv_sql_stmt :=
  'UPDATE msc_st_bom_components mbc1'
  ||'  SET process_flag = '||G_ERROR_FLG ||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||'  WHERE message_id < ( SELECT max(message_id)'
  ||'                       FROM msc_st_bom_components mbc2'
  ||'            WHERE mbc2.sr_instance_code        = mbc1.sr_instance_code'
  ||'            AND mbc2.organization_code         = mbc1.organization_code'
  ||'            AND NVL(mbc2.bom_name,'||''''||NULL_CHAR||''''||') '
  ||'                  = NVL(mbc1.bom_name, '||''''||NULL_CHAR||''''||') '
  ||'            AND NVL(mbc2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                   = NVL(mbc1.company_name, '||''''||NULL_CHAR||''''||') '
  ||'            AND mbc2.assembly_name = mbc1.assembly_name '
  ||'            AND NVL(mbc2.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
  ||'                   = NVL(mbc1.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
  ||'            AND mbc2.component_name            = mbc1.component_name'
  ||'            AND NVL(mbc2.effectivity_date,SYSDATE-36500 )'
  ||'                   = NVL(mbc1.effectivity_date,SYSDATE-36500)'
  ||'            AND NVL(mbc2.operation_seq_code, '||''''||NULL_CHAR||''''||') '
  ||'                   = NVL(mbc1.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'            AND mbc2.process_flag              ='||G_IN_PROCESS
  ||'            AND NVL(mbc2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
  ||' AND  mbc1.process_flag     = '||G_IN_PROCESS
  ||' AND  mbc1.sr_instance_code =  :v_instance_code'
  ||' AND  NVL(mbc1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  --Duplicate records check for the records whose source is batch load

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 12;
  lv_sql_stmt:=
  'UPDATE msc_st_bom_components mbc1'
  ||' SET         process_flag ='|| G_ERROR_FLG||','
  ||'             error_text   = '||''''||lv_message_text||''''
  ||' WHERE EXISTS ( SELECT 1'
  ||'            FROM msc_st_bom_components mbc2'
  ||'            WHERE mbc2.sr_instance_code        = mbc1.sr_instance_code'
  ||'            AND mbc2.organization_code         = mbc1.organization_code'
  ||'            AND NVL(mbc2.bom_name,'||''''||NULL_CHAR||''''||') '
  ||'                  = NVL(mbc1.bom_name, '||''''||NULL_CHAR||''''||') '
  ||'            AND NVL(mbc2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                   = NVL(mbc1.company_name, '||''''||NULL_CHAR||''''||') '
  ||'            AND mbc2.assembly_name = mbc1.assembly_name '
  ||'           AND NVL(mbc2.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
  ||'                   = NVL(mbc1.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
  ||'            AND mbc2.component_name            = mbc1.component_name'
  ||'            AND NVL(mbc2.effectivity_date,SYSDATE-36500 )'
  ||'                   = NVL(mbc1.effectivity_date,SYSDATE-36500 )'
  ||'            AND NVL(mbc2.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'                    = NVL(mbc1.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'            AND mbc2.process_flag              ='||G_IN_PROCESS
  ||'            AND NVL(mbc2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||'            AND mbc2.rowid <> mbc1.rowid)'
  ||' AND mbc1.process_flag              ='|| G_IN_PROCESS
  ||' AND mbc1.sr_instance_code          = :v_instance_code'
  ||' AND NVL(mbc1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  lv_column_names :=
  'COMPONENT_NAME             ||''~''||'
  ||'COMPONENT_TYPE           ||''~''||'
  ||'BOM_NAME                 ||''~''||'
  ||'ORGANIZATION_CODE        ||''~''||'
  ||'ASSEMBLY_NAME            ||''~''||'
  ||'REVISION                 ||''~''||'
  ||'USAGE_QUANTITY           ||''~''||'
  ||'COMPONENT_YIELD_FACTOR   ||''~''||'
  ||'UOM_CODE                 ||''~''||'
  ||'SR_INSTANCE_CODE         ||''~''||'
  ||'ALTERNATE_BOM_DESIGNATOR ||''~''||'
  ||'CHANGE_NOTICE            ||''~''||'
  ||'SCALING_TYPE             ||''~''||'
  ||'EFFECTIVITY_DATE         ||''~''||'
  ||'DISABLE_DATE             ||''~''||'
  ||'USE_UP_CODE              ||''~''||'
  ||'OPERATION_OFFSET_PERCENT ||''~''||'
  ||'OPTIONAL_COMPONENT       ||''~''||'
  ||'WIP_SUPPLY_TYPE          ||''~''||'
  ||'PLANNING_FACTOR          ||''~''||'
  ||'ATP_FLAG                 ||''~''||'
  ||'OPERATION_SEQ_CODE       ||''~''||'
  ||'DELETED_FLAG             ||''~''||'
  ||'DRIVING_ITEM_NAME        ||''~''||'
  ||'COMPANY_NAME' ;


   -- Process  msc_st_bom_components table

   LOOP
      v_sql_stmt := 13;
      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;

      v_sql_stmt := 14;
      lv_sql_stmt :=
      ' UPDATE   msc_st_bom_components '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c4(lv_batch_id);
      FETCH c4 BULK COLLECT INTO lb_rowid;
      CLOSE c4;

      v_sql_stmt := 1;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_bom_components
      SET  st_transaction_id = msc_st_bom_components_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);

      -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'COMPONENT_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Populate Inventory Item id for component name

     lv_return :=
     MSC_ST_UTIL.DERIVE_ITEM_ID(p_table_name => 'MSC_ST_BOM_COMPONENTS',
                             p_item_col_name => 'COMPONENT_NAME',
                             p_item_col_id   => 'INVENTORY_ITEM_ID',
                             p_instance_code =>  v_instance_code,
                             p_instance_id   =>  v_instance_id,
                             p_severity      =>  G_SEV_ERROR,
                             p_message_text  =>  lv_message_text,
                             p_batch_id      =>  lv_batch_id,
                             p_debug         => v_debug,
                             p_error_text    =>  lv_error_text);

      if(lv_return <> 0) then
          RAISE ex_logging_err;
      end if;

    -- Set the error message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Check whether delete flag value is in (1,2),if not default to SYS_NO

     lv_where_str := ' AND NVL(deleted_flag,'||NULL_VALUE||')NOT IN (1,2)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_BOM_COMPONENTS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DELETED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => SYS_NO);


      IF lv_return <> 0 THEN
         RAISE ex_logging_err;
      END IF;

      -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Populate  organization id

    lv_return :=
    MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name         => 'MSC_ST_BOM_COMPONENTS',
                                      p_org_partner_name   =>'ORGANIZATION_CODE',
                                      p_org_partner_id     =>'ORGANIZATION_ID',
                                      p_instance_code      => v_instance_code,
                                      p_partner_type       => G_ORGANIZATION,
                                      p_severity           => G_SEV_ERROR,
                                      p_message_text       => lv_message_text,
                                      p_batch_id           =>lv_batch_id,
                                      p_debug              => v_debug,
                                      p_error_text         =>lv_error_text);

   if(lv_return <> 0) then
      RAISE ex_logging_err;
   end if;

     -- Now we will check whether BOM Name is NULL ,
     -- if it is NULL we will populate the
     -- ASSEMBLY NAME in BOM NAME column for all such records

    v_sql_stmt := 17;

    lv_sql_stmt :=

    'UPDATE msc_st_bom_components  '
    ||' SET    bom_name            = assembly_name'
    ||' WHERE  sr_instance_code    = :v_instance_code'
    ||' AND    process_flag        ='||G_IN_PROCESS
    ||' AND    NVL(bom_name,'||''''||NULL_CHAR||''''||') '
    ||'         = '||''''||NULL_CHAR||''''
    ||' AND    NVL(assembly_name,'||''''||NULL_CHAR||''''||') '
    ||'         <> '||''''||NULL_CHAR||''''
    ||' AND    batch_id            = :lv_batch_id';



            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Now  derive assembly  name for those records where assembly name is NULL
    -- If not able to get this error out those records
    -- In child table of BOM we will accept either BOM name/Assembly name or both

    v_sql_stmt := 18;

    lv_sql_stmt:=
    'UPDATE     msc_st_bom_components mbc'
    ||' SET        assembly_name  = (SELECT char5'
    ||'                     FROM msc_local_id_setup mlis'
    ||'                     WHERE  mlis.char1 = mbc.sr_instance_code'
    ||'                     AND    mlis.char3 = mbc.organization_code'
    ||'                     AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                     =    NVL(mbc.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                     AND    mlis.char4 = mbc.bom_name'
    ||'                     AND    NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
    ||'                     = NVL(mbc.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
    ||'                     AND    mlis.entity_name =''BILL_SEQUENCE_ID'' '
    ||'                     AND    mlis.instance_id = '||v_instance_id||' )'
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        NVL(assembly_name,'||''''||NULL_CHAR||''''||') '
    ||'                = '||''''||NULL_CHAR||''''
    ||' AND        process_flag     ='|| G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id';



            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

       -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'BOM_NAME,INSTANCE_CODE,'
                                             ||' COMPANY_NAME,'
                                             ||'ALETERNATE_BOM_DESIGNATOR',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_BOMS',
                      p_token3            => 'CHILD_TABLE',
                      p_token_value3      => 'MSC_ST_BOM_COMPONENTS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Error out records if assembly name is NULL

   v_sql_stmt := 19;

    lv_sql_stmt :=
    'UPDATE       MSC_ST_BOM_COMPONENTS'
    ||' SET       process_flag   = '||G_ERROR_FLG||','
    ||'           error_text     = '||''''||lv_message_text||''''
    ||' WHERE     NVL(assembly_name,'||''''||NULL_CHAR||''''||') '
    ||'         = '||''''||NULL_CHAR||''''
    ||' AND       process_flag   = '||G_IN_PROCESS
    ||' AND       sr_instance_code = :v_instance_code'
    ||' AND       batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

     -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'BOM_NAME,INSTANCE_CODE,'
                                             ||' COMPANY_NAME,'
                                             ||'ALETERNATE_BOM_DESIGNATOR',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_BOMS',
                      p_token3            => 'CHILD_TABLE',
                      p_token_value3      => 'MSC_ST_BOM_COMPONENTS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Derive the Bill Sequence Id for the MSC_ST_BOM_COMPONENTS
    lv_return :=
    MSC_ST_UTIL.DERIVE_BILL_SEQUENCE_ID
                  (p_table_name    => 'MSC_ST_BOM_COMPONENTS',
                   p_bom_col_name   => 'BOM_NAME',
                   p_bom_col_id     => 'BILL_SEQUENCE_ID',
                   p_instance_code  =>  v_instance_code,
                   p_severity       =>  G_SEV_ERROR,
                   p_message_text   =>  lv_message_text,
                   p_batch_id       =>  lv_batch_id,
                   p_debug          => v_debug,
                   p_error_text     =>  lv_error_text);

    IF (lv_return <> 0 )then
        RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'OPERATION_SEQ_CODE',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  G_OPERATION_SEQ_CODE );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Default OPERATION_SEQ_CODE as 1 if it is NULL
     lv_where_str :=
     '    AND NVL(operation_seq_code,'||''''||NULL_CHAR||''''||') '
     ||'  = '||''''||NULL_CHAR||'''' ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_BOM_COMPONENTS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'OPERATION_SEQ_CODE',
                     p_debug             => v_debug,
                     p_default_value     => G_OPERATION_SEQ_CODE);


      IF lv_return <> 0 THEN
         RAISE ex_logging_err;
      END IF;

  -- Derive operation_sequence num

    v_sql_stmt := 19.1;
    lv_sql_Stmt :=
  'UPDATE       msc_st_bom_components msbc'
  ||' SET       operation_seq_num =  ( SELECT distinct number1'
  ||'           FROM msc_local_id_setup mlis'
  ||'           WHERE  mlis.char5 = msbc.operation_seq_code'
  ||'           AND    mlis.entity_name = ''OPERATION_SEQUENCE_ID'' '
  ||'           AND  mlis.char3 = msbc.organization_code'
  ||'           AND    mlis.instance_id = '||v_instance_id||')'
  ||' WHERE     sr_instance_code = :v_instance_code'
  ||' AND       NVL(operation_seq_num,'||NULL_VALUE||') <>'||NULL_VALUE
  ||' AND       process_flag     = '||G_IN_PROCESS
  ||' AND       batch_id         = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'EFFECTIVITY_DATE',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  'SYSDATE' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      -- Check the EFFECTIVITY_DATE , if it is NULL,default SYSDATE

     lv_where_str :=
     ' AND NVL(effectivity_date,SYSDATE-36500 ) = SYSDATE-36500'  ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_BOM_COMPONENTS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'EFFECTIVITY_DATE',
                     p_debug             => v_debug,
                     p_default_value     =>  'SYSDATE');

      IF lv_return <> 0 THEN
           RAISE ex_logging_err;
      END IF;


     -- Derive the component_sequence_id
     v_sql_stmt := 20;
     lv_sql_stmt :=
     'UPDATE     msc_st_bom_components mbc'
     ||' SET     component_sequence_id=  (SELECT local_id '
     ||'         FROM msc_local_id_setup mlis'
     ||'         WHERE  mlis.char1 = mbc.sr_instance_code'
     ||'         AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
     ||'               =  NVL(mbc.company_name,'||''''||NULL_CHAR||''''||') '
     ||'         AND    mlis.char3 = mbc.organization_code'
     ||'         AND    mlis.char4 = mbc.bom_name'
     ||'         AND    mlis.char5 = mbc.component_name'
     ||'         AND   NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
     ||'               =  NVL(mbc.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
     ||'         AND    mlis.char7 = mbc.operation_seq_code'
     ||'         AND    mlis.date1 = mbc.effectivity_date'
     ||'         AND    mlis.entity_name = ''COMPONENT_SEQUENCE_ID'')'
     ||'   WHERE      mbc.sr_instance_code = :v_instance_code'
     ||'   AND        mbc.process_flag     ='|| G_IN_PROCESS
     ||'   AND        mbc.batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

     -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_DELETE_FAIL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


     -- At this point Error out those record with DELETE FLAG 1 and NULL
     -- Component sequence id

    v_sql_stmt := 21;

    lv_sql_stmt:=
    'UPDATE   msc_st_bom_components '
    ||'    SET   process_flag          ='|| G_ERROR_FLG||','
    ||'          error_text   = '||''''||lv_message_text||''''
    ||' WHERE    NVL(component_sequence_id,'||NULL_VALUE||')='|| NULL_VALUE
    ||' AND      deleted_flag           ='|| SYS_YES
    ||' AND      sr_instance_code      = :v_instance_code'
    ||' AND      process_flag          = '||G_IN_PROCESS
    ||' AND      batch_id              = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


      -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_DATE_OVERLAP',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Now we are checking the overlapping of effectivity date of components
    v_sql_stmt := 22;

    lv_sql_stmt:=
    'UPDATE          msc_st_bom_components mbc'
    ||' SET          process_flag = '||G_ERROR_FLG||','
    ||'              error_text   = '||''''||lv_message_text||''''
    ||' WHERE EXISTS (SELECT 1 FROM'
    ||'           msc_local_id_setup mlis'
    ||'    WHERE  mlis.char1 = mbc.sr_instance_code'
    ||'    AND    NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'           =  NVL(mbc.company_name,'||''''||NULL_CHAR||''''||') '
    ||'    AND    mlis.char3 = mbc.organization_code'
    ||'    AND    mlis.char4 = mbc.bom_name'
    ||'    AND    mlis.char5 = mbc.component_name'
    ||'    AND   NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
    ||'             =  NVL(mbc.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
    ||'    AND    mlis.char7 = mbc.operation_seq_code'
    ||'    AND   ((mlis.date1 >= mbc.effectivity_date AND'
    ||'            mlis.date1 <= NVL(mbc.disable_date,SYSDATE+36500))'
    ||'            OR'
    ||'           (NVL(mlis.date2,SYSDATE+36500) >= mbc.effectivity_date AND'
    ||'            NVL(mlis.date2,SYSDATE+36500) <= NVL(mbc.disable_date,SYSDATE+36500))'
    ||'            OR'
    ||'           (mlis.date1 <= mbc.effectivity_date AND'
    ||'            NVL(mlis.date2,SYSDATE+36500) >= NVL(mbc.disable_date,SYSDATE+36500))'
    ||'            OR'
    ||'           (mlis.date1 >= mbc.effectivity_date AND'
    ||'            NVL(mlis.date2,SYSDATE+36500) <= NVL(mbc.disable_date,SYSDATE+36500)))'
    ||'            AND mlis.entity_name = ''COMPONENT_SEQUENCE_ID'')'
    ||'  AND    NVL(mbc.component_sequence_id,'||NULL_VALUE||')='|| NULL_VALUE
    ||'  AND     mbc.sr_instance_code   =   :v_instance_code'
    ||'  AND     mbc.deleted_flag       =   '||SYS_NO
    ||'  AND     mbc.batch_id           =   :lv_batch_id'
    ||'  AND     mbc.process_flag       =   '||G_IN_PROCESS;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


      -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'ASSEMBLY_NAME',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_BOMS'
                                                             );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Populate the using_assembly_id from assembly name

     lv_return :=
     MSC_ST_UTIL.DERIVE_ITEM_ID(p_table_name =>'MSC_ST_BOM_COMPONENTS',
                             p_item_col_name => 'ASSEMBLY_NAME',
                             p_item_col_id   =>'USING_ASSEMBLY_ID',
                             p_instance_code => v_instance_code,
                             p_instance_id   => v_instance_id,
                             p_severity      => G_SEV_ERROR,
                             p_message_text  => lv_message_text,
                             p_batch_id      =>lv_batch_id,
                             p_debug         => v_debug,
                             p_error_text    =>lv_error_text);

    if(lv_return <> 0) then
              RAISE ex_logging_err;
    end if;


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'USAGE_QUANTITY',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  G_USAGE_QUANTITY  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- default it  to 1 if usage quantity is NULL

     lv_where_str :=
     ' AND NVL(usage_quantity,'||NULL_VALUE||')='|| NULL_VALUE ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_BOM_COMPONENTS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'USAGE_QUANTITY',
                     p_debug             => v_debug,
                     p_default_value     => G_USAGE_QUANTITY);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'UOM_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;



   -- If UOM is  provided  validate the UOM_CODE
      v_sql_stmt := 23;

     lv_sql_stmt :=
     '   UPDATE     msc_st_bom_components mbc'
     ||' SET        process_flag = '||G_ERROR_FLG||','
     ||'            error_text   = '||''''||lv_message_text||''''
     ||' WHERE      NOT EXISTS (SELECT 1'
     ||'            FROM msc_units_of_measure muom'
     ||'            WHERE muom.uom_code       = mbc.uom_code'
     ||'            UNION'
     ||'            SELECT 1 FROM msc_st_units_of_measure msuom'
     ||'            WHERE msuom.uom_code       = mbc.uom_code'
     ||'            AND   msuom.sr_instance_id     = :v_instance_id'
     ||'            AND   msuom.process_flag       = '||G_VALID||' )'
     ||' AND NVL(mbc.uom_code,'||''''||NULL_CHAR||''''||') '
     ||'        <> '||''''||NULL_CHAR||''''
     ||' AND mbc.sr_instance_code   = :v_instance_code'
     ||' AND mbc.batch_id           = :lv_batch_id'
     ||' AND mbc.process_flag       = '||G_IN_PROCESS ;

            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,
                        v_instance_code,
                        lv_batch_id;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'COMPONENT_YEILD_FACTOR',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  G_COMPONENT_YEILD_FACTOR );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Default the component_yield_factor to 1 if NULL

     lv_where_str :=
     ' AND NVL(component_yield_factor,'||NULL_VALUE||')= '||NULL_VALUE ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_BOM_COMPONENTS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'COMPONENT_YIELD_FACTOR',
                     p_debug             => v_debug,
                     p_default_value     => G_COMPONENT_YEILD_FACTOR );

    if(lv_return <> 0) then
         RAISE ex_logging_err;
    end if;

     -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DRIVING_ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     --Derive  driving item id

     lv_return :=
     MSC_ST_UTIL.DERIVE_ITEM_ID(p_table_name => 'MSC_ST_BOM_COMPONENTS',
                             p_item_col_name => 'DRIVING_ITEM_NAME',
                             p_item_col_id   => 'DRIVING_ITEM_ID',
                             p_instance_code => v_instance_code,
                             p_instance_id   => v_instance_id,
                             p_severity      => G_SEV3_ERROR,
                             p_message_text  => lv_message_text,
                             p_batch_id      => lv_batch_id,
                             p_debug         => v_debug,
                             p_error_text    => lv_error_text);

    if(lv_return <> 0) then
         RAISE ex_logging_err;
    end if;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'USE_UP_CODE',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  G_USE_UP_CODE );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Default the use_up_code as NULL if not in 1,2

     lv_where_str :=  ' AND use_up_code NOT IN (1,2)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_BOM_COMPONENTS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'USE_UP_CODE',
                     p_debug             => v_debug,
	             p_default_value     => G_USE_UP_CODE);

    if(lv_return <> 0) then
          RAISE ex_logging_err;
    end if;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'OPTIONAL_COMPONENT',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  G_OPTIONAL_COMPONENT );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Default the optional_component as NULL if not in 1,2

     lv_where_str := ' AND optional_component NOT IN (1,2)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name       => 'MSC_ST_BOM_COMPONENTS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'OPTIONAL_COMPONENT',
                     p_debug             => v_debug,
        	    p_default_value      => G_OPTIONAL_COMPONENT );

    if(lv_return <> 0) then
         RAISE ex_logging_err;
    end if;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'WIP_SUPPLY_TYPE',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  G_WIP_SUPPLY_TYPE  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default the wip_supply_type as 1(PUSH) if not in (1,2,3,4,5,6,7)

     lv_where_str :=
     ' AND NVL(wip_supply_type,'||NULL_VALUE||') NOT IN (1,2,3,4,5,6,7)';

     lv_return :=
     MSC_ST_UTIL.LOG_ERROR (p_table_name => 'MSC_ST_BOM_COMPONENTS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'WIP_SUPPLY_TYPE',
                     p_debug             => v_debug,
                     p_default_value     => G_WIP_SUPPLY_TYPE );

    if(lv_return <> 0) then
        RAISE ex_logging_err;
    end if;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'COMPONENT_TYPE',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  G_COMPONENT_TYPE );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

-- Comented out to match ERP behaviour
/*     -- Default the component_type 1 if not in (-1,1,2)


     lv_where_str :=
     ' AND NVL(component_type,'||NULL_VALUE||') NOT IN (-1,1,2)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_BOM_COMPONENTS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'COMPONENT_TYPE',
                     p_debug             => v_debug,
   		     p_default_value     => G_COMPONENT_TYPE );

    if(lv_return <> 0) then
         RAISE ex_logging_err;
    end if;
*/

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ATP_FLAG',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  G_ATP_FLAG_BOM  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Default the atp_flag 2 if not in (1,2)

     lv_where_str :=
     ' AND NVL(atp_flag,'||NULL_VALUE||')NOT IN (1,2)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_BOM_COMPONENTS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'ATP_FLAG',
                     p_debug             => v_debug,
      	             p_default_value     => G_ATP_FLAG_BOM );

  if(lv_return <> 0) then
         RAISE ex_logging_err;
    end if;

     --Call to customised validation.

      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_BOM_COMPONENTS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

v_sql_stmt := 23.1;

    lv_sql_stmt :=
    'UPDATE       MSC_ST_BOM_COMPONENTS'
    ||' SET       usage_quantity   =  ( usage_quantity / decode(component_yield_factor,0,1,abs(component_yield_factor)) )* nvl(planning_factor,100)/100'
    ||' WHERE     process_flag   = '||G_IN_PROCESS
    ||' AND       sr_instance_code = :v_instance_code'
    ||' AND       batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    -- Now we will generate the  component sequence id

     v_sql_stmt := 24;

     OPEN c5(lv_batch_id);
     FETCH c5 BULK COLLECT INTO lb_rowid ;

     IF c5%ROWCOUNT > 0  THEN

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_bom_components
        SET    component_sequence_id   = msc_st_component_sequence_id_s.NEXTVAL
        WHERE  rowid                   = lb_rowid(j);

    v_sql_stmt := 23;

   FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

   -- Insert into the LID table

     INSERT INTO  msc_local_id_setup
     (local_id,
     st_transaction_id,
     instance_id,
     entity_name,
     data_source_type,
     char1,
     char2,
     char3,
     char4,
     char5,
     char6,
     char7,
     date1,
     date2,
     SOURCE_ORGANIZATION_ID ,
     SOURCE_BILL_SEQUENCE_ID ,
     SOURCE_COMPONENT_SEQ_ID ,
     SOURCE_USING_ASSEMBLY_ID ,
     SOURCE_INVENTORY_ITEM_ID ,
     SOURCE_DRIVING_ITEM_ID ,
     last_update_date,
     last_updated_by,
     creation_date,
     created_by    )
     SELECT
      component_sequence_id,
      st_transaction_id,
      v_instance_id,
      'COMPONENT_SEQUENCE_ID',
      data_source_type,
      sr_instance_code,
      company_name,
      organization_code,
      bom_name,
      component_name,
      alternate_bom_designator,
      operation_seq_code,
      effectivity_date,
      disable_date,
      SOURCE_ORGANIZATION_ID ,
      SOURCE_BILL_SEQUENCE_ID ,
      SOURCE_COMPONENT_SEQUENCE_ID ,
      SOURCE_USING_ASSEMBLY_ID ,
      SOURCE_INVENTORY_ITEM_ID ,
      SOURCE_DRIVING_ITEM_ID ,
      v_current_date,
      v_current_user,
      v_current_date,
      v_current_user
      FROM msc_st_bom_components
      WHERE rowid = lb_rowid(j) ;

    END IF;
  CLOSE c5;


   -- Update the DISABLE_DATE to SYSDATE for the deleted component in LID table
    v_sql_stmt := 25;
/*
    lv_sql_stmt :=
    'UPDATE      msc_local_id_setup mlis'
    ||' SET      date2   = SYSDATE'
    ||' WHERE    EXISTS ( SELECT 1 FROM  msc_st_bom_components mbc'
    ||'               WHERE  mlis.char1 = mbc.sr_instance_code'
    ||'               AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'               =  NVL(mbc.company_name,'||''''||NULL_CHAR||''''||') '
    ||'               AND    mlis.char3 = mbc.organization_code'
    ||'               AND    mlis.char4 = mbc.bom_name'
    ||'               AND    mlis.char5 = mbc.component_name'
    ||'               AND   NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
    ||'               =  NVL(mbc.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
    ||'               AND    mlis.char7 = mbc.operation_seq_code'
    ||'               AND    trunc(mlis.date1) = trunc(mbc.effectivity_date)'
    ||'               AND    mbc.batch_id= :lv_batch_id'
    ||'               AND    mbc.deleted_flag = '||SYS_YES
    ||'               AND    mbc.process_flag ='|| G_IN_PROCESS||')'
    ||' AND    mlis.entity_name = ''COMPONENT_SEQUENCE_ID'' '
    ||' AND    mlis.instance_id = :v_instance_id' ;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_id;
*/
    OPEN c7(lv_batch_id);
    FETCH c7 BULK COLLECT INTO lb_rowid ;
    IF c7%ROWCOUNT > 0  THEN

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_local_id_setup
        SET    date2   = SYSDATE
        WHERE  rowid                   = lb_rowid(j);

    END IF;
    CLOSE c7;

    -- Update operation_seq_num as operation_seq_code,
   -- here we assume that  operation_seq_code is a number
   -- field,otherwise we will default it to 1

   v_sql_stmt := 25.1;

     OPEN c10(lv_batch_id);
     FETCH c10 BULK COLLECT INTO lb_rowid ;

     IF c10%ROWCOUNT > 0  THEN

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_bom_components
        SET    operation_seq_num      =
               to_number(decode(upper(operation_seq_code),
                         lower(operation_seq_code),operation_seq_code,'1'))
        WHERE  rowid                  = lb_rowid(j);
    END IF;
    CLOSE c10;

    -- Set the process flag as Valid and poulate instance_id
    lv_return :=
    MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name     => 'MSC_ST_BOM_COMPONENTS',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug,
                               p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- At the end calling  the LOG_ERROR for logging all errored out records

   lv_return :=
   msc_st_util.log_error(p_table_name    =>'MSC_ST_BOM_COMPONENTS',
                         p_instance_code =>v_instance_code,
                         p_row           =>lv_column_names,
                         p_severity      =>G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    =>lv_error_text,
                         p_debug         => v_debug,
                         p_batch_id      => lv_batch_id  );

     IF(lv_return <> 0) THEN
             RAISE ex_logging_err;
     END IF;
    COMMIT;
   END LOOP;


   -- Now validtion for MSC_ST_COMPONENT_SUBSTITUTES


   --Duplicate records check for the records whose source is XML

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;


  v_sql_stmt := 26;
  lv_sql_stmt :=
  'UPDATE msc_st_component_substitutes mcs1 '
  ||' SET process_flag ='|| G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE message_id < ( SELECT max(message_id)'
  ||'            FROM msc_st_component_substitutes mcs2'
  ||'            WHERE mcs2.sr_instance_code       = mcs1.sr_instance_code'
  ||'            AND mcs2.organization_code        = mcs1.organization_code'
  ||'            AND NVL(mcs2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                  = NVL(mcs1.company_name, '||''''||NULL_CHAR||''''||') '
  ||'            AND NVL(mcs2.bom_name,'||''''||NULL_CHAR||''''||') '
  ||'                  = NVL(mcs1.bom_name, '||''''||NULL_CHAR||''''||') '
  ||'            AND mcs2.assembly_name = mcs1.assembly_name '
  ||'            AND NVL(mcs2.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
  ||'                  = NVL(mcs1.alternate_bom_designator, '||''''||NULL_CHAR||''''||') '
  ||'            AND mcs2.component_name           = mcs1.component_name'
  ||'            AND NVL(mcs2.effectivity_date,SYSDATE-36500 )'
  ||'                    = NVL(mcs1.effectivity_date,SYSDATE-36500 )'
  ||'            AND NVL(mcs2.operation_seq_code ,'||''''||NULL_CHAR||''''||') '
  ||'                  = NVL(mcs1.operation_seq_code , '||''''||NULL_CHAR||''''||') '
  ||'            AND mcs2.sub_item_name            = mcs1.sub_item_name'
  ||'            AND mcs2.process_flag             = mcs1.process_flag'
  ||'            AND NVL(mcs2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
  ||' AND mcs1.process_flag ='|| G_IN_PROCESS
  ||' AND mcs1.sr_instance_code = :v_instance_code '
  ||' AND NVL(mcs1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE;


          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;


  --Duplicate records check for the records whose source is batch load

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 27;

  lv_sql_stmt :=
  'UPDATE     msc_st_component_substitutes mcs1'
  ||' SET     process_flag = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE EXISTS ( SELECT 1 FROM msc_st_component_substitutes mcs2'
  ||'            WHERE mcs2.sr_instance_code       = mcs1.sr_instance_code'
  ||'            AND mcs2.organization_code        = mcs1.organization_code'
  ||'            AND NVL(mcs2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                  = NVL(mcs1.company_name, '||''''||NULL_CHAR||''''||') '
  ||'            AND NVL(mcs2.bom_name,'||''''||NULL_CHAR||''''||') '
  ||'                  = NVL(mcs1.bom_name, '||''''||NULL_CHAR||''''||') '
  ||'            AND mcs2.assembly_name = mcs1.assembly_name '
  ||'            AND NVL(mcs2.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
  ||'                  = NVL(mcs1.alternate_bom_designator, '||''''||NULL_CHAR||''''||') '
  ||'            AND mcs2.component_name           = mcs1.component_name'
  ||'            AND NVL(mcs2.effectivity_date,SYSDATE-36500 )'
  ||'                    = NVL(mcs1.effectivity_date,SYSDATE-36500 )'
  ||'            AND NVL(mcs2.operation_seq_code ,'||''''||NULL_CHAR||''''||') '
  ||'                  = NVL(mcs1.operation_seq_code , '||''''||NULL_CHAR||''''||') '
  ||'            AND mcs2.sub_item_name            = mcs1.sub_item_name'
  ||'            AND mcs2.process_flag             = mcs1.process_flag'
  ||'            AND NVL(mcs2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||'            GROUP BY sr_instance_code,organization_code, bom_name,company_name,'
  ||'            assembly_name,alternate_bom_designator,component_name,'
  ||'            operation_seq_code,effectivity_date,sub_item_name'
  ||'            HAVING count(*) > 1)'
  ||' AND  mcs1.process_flag              ='|| G_IN_PROCESS
  ||' AND  mcs1.sr_instance_code          = :v_instance_code'
  ||' AND  NVL(mcs1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;



 lv_column_names :=
  'ORGANIZATION_CODE          ||''~''||'
  ||'BOM_NAME                 ||''~''||'
  ||'ASSEMBLY_NAME            ||''~''||'
  ||'COMPONENT_NAME           ||''~''||'
  ||'SUB_ITEM_NAME            ||''~''||'
  ||'USAGE_QUANTITY           ||''~''||'
  ||'PRIORITY                 ||''~''||'
  ||'SR_INSTANCE_CODE         ||''~''||'
  ||'ALTERNATE_BOM_DESIGNATOR ||''~''||'
  ||'OPERATION_SEQ_CODE       ||''~''||'
  ||'EFFECTIVITY_DATE         ||''~''||'
  ||'COMPANY_NAME             ||''~''||'
  ||'DELETED_FLAG ';


  -- Processing  the MSC_ST_COMPONENT_SUBSTITUTES table

   LOOP
      v_sql_stmt := 28;
      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;

      v_sql_stmt := 29;
      lv_sql_stmt :=
      ' UPDATE msc_st_component_substitutes '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c6(lv_batch_id);
      FETCH c6 BULK COLLECT INTO lb_rowid;
      CLOSE c6;

      v_sql_stmt := 29;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_component_substitutes
      SET  st_transaction_id = msc_st_component_substitutes_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);


     -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_COMPONENT_SUBSTITUTES');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Deletion is not allowed on this table.
      v_sql_stmt := 30;
      lv_sql_stmt :=
      ' UPDATE     msc_st_component_substitutes'
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code =  :v_instance_code';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO );



     -- Check whether delete flag value is in (SYS_YES,SYS_NO),if not default to SYS_NO

     lv_where_str :=
     ' AND NVL(deleted_flag,'||NULL_VALUE||')NOT IN (1,2)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_COMPONENT_SUBSTITUTES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DELETED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     =>  SYS_NO);


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SUB_ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     --Derive SUBSTITUTE ITEM ID
     lv_return :=
     MSC_ST_UTIL.DERIVE_ITEM_ID(p_table_name => 'MSC_ST_COMPONENT_SUBSTITUTES',
                             p_item_col_name => 'SUB_ITEM_NAME',
                             p_item_col_id   => 'SUBSTITUTE_ITEM_ID',
                             p_instance_code => v_instance_code,
                             p_instance_id   => v_instance_id,
                             p_severity      => G_SEV_ERROR,
                             p_message_text  => lv_message_text,
                             p_batch_id      => lv_batch_id,
                             p_debug         => v_debug,
                             p_error_text    => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Populate  organization id ,

    lv_return :=
    MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name         => 'MSC_ST_COMPONENT_SUBSTITUTES',
                                      p_org_partner_name   => 'ORGANIZATION_CODE',
                                      p_org_partner_id     => 'ORGANIZATION_ID',
                                      p_instance_code      => v_instance_code,
                                      p_partner_type       => G_ORGANIZATION,
                                      p_severity           => G_SEV_ERROR,
                                      p_message_text       => lv_message_text,
                                      p_batch_id           => lv_batch_id,
                                      p_debug              => v_debug,
                                      p_error_text         => lv_error_text);

     IF lv_return <> 0 THEN
        RAISE ex_logging_err;
     END IF;

     -- Now we will check whether BOM Name is NULL , if it is NULL we will populate the
     -- ASSEMBLY NAME in BOM NAME column for all such records

    v_sql_stmt := 31;

    lv_sql_stmt :=

    'UPDATE msc_st_component_substitutes '
    ||' SET    bom_name            = assembly_name'
    ||' WHERE  sr_instance_code    = :v_instance_code'
    ||' AND    process_flag     ='||G_IN_PROCESS
    ||' AND    NVL(bom_name,'||''''||NULL_CHAR||''''||') '
    ||'         = '||''''||NULL_CHAR||''''
    ||' AND    NVL(assembly_name,'||''''||NULL_CHAR||''''||') '
    ||'         <> '||''''||NULL_CHAR||''''
    ||' AND    batch_id            = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    -- Now  derive assembly  name for those records where assembly name is NULL
    -- If not able to get this error out those records
    -- In child table of BOM we will accept either BOM name/Assembly name or both

    v_sql_stmt := 32;

    lv_sql_stmt:=
    'UPDATE     msc_st_component_substitutes mcs'
    ||' SET        assembly_name  = (SELECT char5'
    ||'                     FROM msc_local_id_setup mlis'
    ||'                     WHERE  mlis.char1 = mcs.sr_instance_code'
    ||'                     AND    mlis.char3 = mcs.organization_code'
    ||'                     AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                      =    NVL(mcs.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                     AND    mlis.char4 = mcs.bom_name'
    ||'                     AND    NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
    ||'                     = NVL(mcs.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
    ||'                     AND    mlis.entity_name =''BILL_SEQUENCE_ID'') '
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        NVL(assembly_name,'||''''||NULL_CHAR||''''||') '
    ||'                = '||''''||NULL_CHAR||''''
    ||' AND        process_flag     ='|| G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'BOM_NAME,SR_INSTANCE_CODE,'
                                             ||' COMPANY_NAME,'
                                             ||' ALETERNATE_BOM_DESIGNATOR',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_BOMS',
                      p_token3            => 'CHILD_TABLE',
                      p_token_value3      => 'MSC_ST_COMPONENT_SUBSTITUTES');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


   -- Error out those records where assembly name is still NULL,

    v_sql_stmt := 33;
    lv_sql_stmt :=
    'UPDATE       msc_st_component_substitutes '
    ||' SET       process_flag   = '||G_ERROR_FLG||','
    ||'           error_text     = '||''''||lv_message_text||''''
    ||' WHERE     NVL(assembly_name,'||''''||NULL_CHAR||''''||') '
    ||'                = '||''''||NULL_CHAR||''''
    ||' AND       sr_instance_code = :v_instance_code'
    ||' AND       process_flag   = '||G_IN_PROCESS
    ||' AND       batch_id       = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    -- Derive bill sequence id
    lv_return :=
    MSC_ST_UTIL.DERIVE_BILL_SEQUENCE_ID
                     (p_table_name    =>  'MSC_ST_COMPONENT_SUBSTITUTES',
                      p_bom_col_name   => 'BOM_NAME',
                      p_bom_col_id     => 'BILL_SEQUENCE_ID',
                      p_instance_code  => v_instance_code,
                      p_severity       => G_SEV_ERROR,
                      p_message_text   => lv_message_text,
                      p_batch_id       => lv_batch_id,
                      p_debug          => v_debug,
                      p_error_text     => lv_error_text);

    IF (lv_return <> 0 )then
              RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'EFFECTIVITY_DATE',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  'SYSDATE' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      -- Check the EFFECTIVITY_DATE , if it is NULL,default SYSDATE

     lv_where_str :=
     ' AND NVL(effectivity_date,SYSDATE-36500 ) = SYSDATE-36500'  ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_COMPONENT_SUBSTITUTES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'EFFECTIVITY_DATE',
                     p_debug             => v_debug,
                     p_default_value     =>  'SYSDATE');

      IF lv_return <> 0 THEN
           RAISE ex_logging_err;
      END IF;

    -- Now derive the component sequence id for the Unique key combination
    v_sql_stmt := 34;

    lv_sql_stmt :=
    'UPDATE     msc_st_component_substitutes mcs'
    ||' SET     component_sequence_id=  (SELECT local_id '
    ||'         FROM msc_local_id_setup mlis'
    ||'         WHERE  mlis.char1 = mcs.sr_instance_code'
    ||'         AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'               =  NVL(mcs.company_name,'||''''||NULL_CHAR||''''||') '
    ||'         AND    mlis.char3 = mcs.organization_code'
    ||'         AND    mlis.char4 = mcs.bom_name'
    ||'         AND    mlis.char5 = mcs.component_name'
    ||'         AND   NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
    ||'               =  NVL(mcs.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
    ||'         AND    mlis.char7 = mcs.operation_seq_code'
    ||'         AND    mlis.date1 = mcs.effectivity_date'
    ||'         AND    mlis.entity_name = ''COMPONENT_SEQUENCE_ID'' )'
    ||'   WHERE      sr_instance_code = :v_instance_code'
    ||'   AND        process_flag     ='|| G_IN_PROCESS
    ||'   AND        batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the error message

   lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'BOM_NAME,SR_INSTANCE_CODE,EFFECTIVITY_DATE'
                                             ||' COMPANY_NAME,COMPONENT_NAME'
                                             ||' ALETERNATE_BOM_DESIGNATOR,OPERATION_SEQ_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_BOM_COMPONENTS',
                      p_token3            => 'CHILD_TABLE',
                      p_token_value3      => 'MSC_ST_COMPONENT_SUBSTITUTES');


     IF lv_return <> 0 THEN
        RAISE ex_logging_err;
     END IF;

   v_sql_stmt := 35;
    lv_sql_stmt:=
    'UPDATE   msc_st_component_substitutes '
    ||'    SET   process_flag    ='|| G_ERROR_FLG||','
    ||'          error_text      ='||''''||lv_message_text||''''
    ||' WHERE    NVL(component_sequence_id,'||NULL_VALUE||')='|| NULL_VALUE
    ||' AND      sr_instance_code      = :v_instance_code'
    ||' AND      process_flag          = '||G_IN_PROCESS
    ||' AND      batch_id              = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'USAGE_QUANTITY',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  G_USAGE_QUANTITY  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Default 1 where usage quantity is NULL

     lv_where_str := ' AND NVL(usage_quantity,'||NULL_VALUE||')='|| NULL_VALUE ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_COMPONENT_SUBSTITUTES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'USAGE_QUANTITY',
                     p_debug             => v_debug,
                     p_default_value     => G_USAGE_QUANTITY );


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PRIORITY',
                      p_token2           => 'DEFAULT_VALUE',
                      p_token_value2     =>  G_PRIORITY  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Default PRIORITY as 1 if NULL

     lv_where_str := ' AND NVL(priority,'||NULL_VALUE||')='|| NULL_VALUE ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_COMPONENT_SUBSTITUTES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'PRIORITY',
                     p_debug             => v_debug,
                     p_default_value     => G_PRIORITY );


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   --Call to customised validation.

      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_COMPONENT_SUBSTITUTES',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Set the process flag as Valid and poulate instance_id
    lv_return :=
    MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name     => 'MSC_ST_COMPONENT_SUBSTITUTES',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug,
                               p_batch_id       => lv_batch_id);

      IF lv_return < 0 THEN
         RAISE ex_logging_err;
      END IF;

    -- At the end calling  the LOG_ERROR for logging all errored out records

   lv_return :=
   msc_st_util.log_error(p_table_name    => 'MSC_ST_COMPONENT_SUBSTITUTES',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_error_text    => lv_error_text,
                         p_message_text  => NULL,
                         p_debug         => v_debug,
                         p_batch_id      => lv_batch_id  );

     IF(lv_return <> 0) THEN
         RAISE ex_logging_err;
     END IF;
    COMMIT;
  END LOOP;

   -- For OSFM Integration. Support for Co Products --
   -- Now validtion for MSC_ST_CO_PRODUCTS

   --Duplicate records check for the records whose source is XML

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;


  v_sql_stmt := 36;
  lv_sql_stmt :=
  'UPDATE msc_st_co_products mcp1 '
  ||' SET process_flag ='|| G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE message_id < ( SELECT max(message_id)'
  ||'            FROM msc_st_co_products mcp2'
  ||'            WHERE mcp2.co_product_name           = mcp1.co_product_name'
  ||'            AND mcp2.component_name           = mcp1.component_name'
  ||'            AND  mcp2.sr_instance_code       = mcp1.sr_instance_code'
  ||'            AND NVL(mcp2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                  = NVL(mcp1.company_name, '||''''||NULL_CHAR||''''||') '
  ||'            AND mcp2.process_flag             = mcp1.process_flag'
  ||'            AND NVL(mcp2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
  ||' AND mcp1.process_flag ='|| G_IN_PROCESS
  ||' AND mcp1.sr_instance_code = :v_instance_code '
  ||' AND NVL(mcp1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE;


          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;


  --Duplicate records check for the records whose source is batch load

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 37;

  lv_sql_stmt :=
  'UPDATE     msc_st_co_products mcp1 '
  ||' SET     process_flag = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE EXISTS ( SELECT 1 FROM msc_st_co_products mcp2 '
  ||'            WHERE mcp2.co_product_name           = mcp1.co_product_name'
  ||'            AND mcp2.component_name           = mcp1.component_name'
  ||'            AND  mcp2.sr_instance_code       = mcp1.sr_instance_code'
  ||'            AND NVL(mcp2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                  = NVL(mcp1.company_name, '||''''||NULL_CHAR||''''||') '
  ||'            AND mcp2.process_flag             = mcp1.process_flag'
  ||'            AND NVL(mcp2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||'            AND mcp2.rowid <> mcp1.rowid )'
  ||' AND  mcp1.process_flag              ='|| G_IN_PROCESS
  ||' AND  mcp1.sr_instance_code          = :v_instance_code'
  ||' AND  NVL(mcp1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;


 lv_column_names :=
    'CO_PRODUCT_NAME          ||''~''||'
  ||'COMPONENT_NAME           ||''~''||'
  ||'SPLIT                    ||''~''||'
  ||'PRIMARY_FLAG             ||''~''||'
  ||'ORGANIZATION_CODE        ||''~''||'
  ||'SR_INSTANCE_CODE         ||''~''||'
  ||'COMPANY_NAME             ||''~''||'
  ||'DELETED_FLAG ';


  -- Processing  the MSC_ST_CO_PRODUCTS table in batch --

   LOOP
      v_sql_stmt := 38;
      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';
      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;

      v_sql_stmt := 39;
      lv_sql_stmt :=
	      ' UPDATE msc_st_co_products '
	      ||' SET    batch_id  =  :lv_batch_id '
	      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
	      ||' AND    sr_instance_code               = :v_instance_code'
	      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
	      ||' AND    rownum                        <= '||v_batch_size;




         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;


      OPEN c8(lv_batch_id);
      FETCH c8 BULK COLLECT INTO lb_rowid;
      CLOSE c8;

      v_sql_stmt := 40;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_co_products
      SET  st_transaction_id = msc_st_co_products_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);


     -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_CO_PRODUCTS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Deletion is not allowed on this table.
      v_sql_stmt := 41;
      lv_sql_stmt :=
      ' UPDATE     msc_st_co_products'
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code =  :v_instance_code';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO );



     -- Check whether delete flag value is in (SYS_YES,SYS_NO),if not default to SYS_NO

     lv_where_str :=
     ' AND NVL(deleted_flag,'||NULL_VALUE||')NOT IN (1,2)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_CO_PRODUCTS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DELETED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     =>  SYS_NO);


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


     -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SPLIT');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Error out records where split  is NULL

     v_sql_stmt := 42;

     lv_sql_stmt :=
      ' UPDATE  msc_st_co_products '
      ||' SET   process_flag        = '||G_ERROR_FLG||','
      ||'       error_text          = '||''''||lv_message_text||''''
      ||' WHERE NVL(split,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND   batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND   sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;



    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'COMPONENT_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Derive Component_id
      lv_return := MSC_ST_UTIL.DERIVE_ITEM_ID
                     (p_table_name       => 'MSC_ST_CO_PRODUCTS',
                      p_item_col_name    => 'COMPONENT_NAME',
                      p_item_col_id      => 'COMPONENT_ID',
                      p_instance_id      => v_instance_id,
                      p_instance_code    => v_instance_code,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CO_PRODUCT_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Derive Co_product_id
      lv_return := MSC_ST_UTIL.DERIVE_ITEM_ID
                     (p_table_name       => 'MSC_ST_CO_PRODUCTS',
                      p_item_col_name    => 'CO_PRODUCT_NAME',
                      p_item_col_id      => 'CO_PRODUCT_ID',
                      p_instance_id      => v_instance_id,
                      p_instance_code    => v_instance_code,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;



    -- Derive the CO_PRODUCT_GROUP_ID from LOCAL ID table
    lv_sql_stmt :=
    'UPDATE MSC_ST_CO_PRODUCTS t1'
    ||' SET CO_PRODUCT_GROUP_ID '
    ||' = (SELECT local_id'
    ||' FROM   msc_local_id_setup t2'
    ||' WHERE  t2.char1         = t1.sr_instance_code'
    ||' AND    NVL(t2.char2,'||''''||NULL_CHAR||''''||') '
    ||'        =    NVL(t1.company_name,'||''''||NULL_CHAR||''''||') '
    ||' AND    t2.char4         = t1.COMPONENT_NAME '
    ||' AND    t2.entity_name   = ''CO_PRODUCT_GROUP_ID'')'
    ||' WHERE  sr_instance_code = :v_instance_code '
    ||' AND    batch_id         = :lv_batch_id '
    ||' AND    process_flag     = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code,
                        lv_batch_id;


    -- Error out all the records for which a CO_PRODUCT_GROUP_ID is derived.
    -- the idea is this record was already loaded earlier. Updation not allowed.

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_CO_PROD_UPDATE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 43;

     lv_sql_stmt :=
      ' UPDATE  msc_st_co_products '
      ||' SET   process_flag        = '||G_ERROR_FLG||','
      ||'       error_text          = '||''''||lv_message_text||''''
      ||' WHERE NVL(co_product_group_id,'||NULL_VALUE||') <> '||NULL_VALUE
      ||' AND   batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND   sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


    -- Call to customised validation.
    -- Note this is called prior to next validation, so that records getting
    -- errored out in the customised validation later otherwise donot violate this.

      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_CO_PRODUCTS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_CO_PROD_SET',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Error out all the co products records for that component
    -- if any of its co product record has errored out. The idea being
    -- the complete set of co-products for that component goes invalid
    -- Note using the request id, so that it doesn't consider the old records.
     v_sql_stmt := 44;

     lv_sql_stmt :=
  'UPDATE     msc_st_co_products mcp1 '
  ||' SET     process_flag = '||G_PROPAGATION||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE EXISTS ( SELECT 1 FROM msc_st_co_products mcp2 '
  ||'            WHERE mcp2.sr_instance_code       = mcp1.sr_instance_code'
  ||'            AND mcp2.component_id             = mcp1.component_id'
  ||'            AND mcp2.request_id               = :v_request_id '
  ||'            AND mcp2.process_flag             = '||G_ERROR_FLG ||' )'
  ||' AND  mcp1.process_flag              ='|| G_IN_PROCESS
  ||' AND   batch_id         = :lv_batch_id'
  ||' AND  mcp1.sr_instance_code          = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_request_id,
                        lv_batch_id,
                        v_instance_code;

    COMMIT;
 END LOOP;

     -- Next two validations donot need to propagate the error to the other in the set
     -- as the validation itself does it

     -- split percentage for a component should add up to 100.
     -- Note: assumption is a component can have only one group of co products.
     -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_CO_PROD_SPLIT_INVALID',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SPLIT');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     v_sql_stmt := 45;
    lv_sql_stmt :=
  'UPDATE   msc_st_co_products mcp1'
  ||' SET      process_flag = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE  100 <>  ( SELECT sum(split) '
  ||'            FROM msc_st_co_products mcp2'
  ||'            WHERE  mcp2.component_name           = mcp1.component_name'
  ||'            AND mcp2.sr_instance_code       = mcp1.sr_instance_code'
  ||'            AND NVL(mcp2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                  = NVL(mcp1.company_name, '||''''||NULL_CHAR||''''||') '
  ||'            AND mcp2.process_flag             = mcp1.process_flag'
  ||'            GROUP BY sr_instance_code,organization_code,company_name,'
  ||'            component_name)'
  ||'  AND     mcp1.process_flag          = '||G_IN_PROCESS
  ||'  AND     mcp1.sr_instance_code       = :v_instance_code';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

    -- one component should have one and only one primary co product.
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_MULTI_PRI_CO_PROD',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PRIMARY_FLAG');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     v_sql_stmt := 46;
    lv_sql_stmt :=
  'UPDATE   msc_st_co_products mcp1'
  ||' SET      process_flag = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE   1 <> ( SELECT COUNT(*) '
  ||'            FROM msc_st_co_products mcp2'
  ||'            WHERE mcp2.component_name           = mcp1.component_name'
  ||'            AND mcp2.sr_instance_code       = mcp1.sr_instance_code'
  ||'            AND NVL(mcp2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                  = NVL(mcp1.company_name, '||''''||NULL_CHAR||''''||') '
  ||'            AND mcp2.primary_flag             = 1'
  ||'            AND mcp2.process_flag             = mcp1.process_flag'
  ||'            GROUP BY sr_instance_code,organization_code,company_name,'
  ||'            component_name )'
  ||'  AND     mcp1.process_flag          = '||G_IN_PROCESS
  ||'  AND     mcp1.sr_instance_code       = :v_instance_code';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  -- Generate co_product_group_id. This is only needed in the local_id table
  -- and not used any where else.

     v_sql_stmt := 47;

     OPEN c9 ;
     FETCH c9 BULK COLLECT INTO lb_rowid ;

     IF c9%ROWCOUNT > 0  THEN

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_co_products
        SET    co_product_group_id    = msc_st_co_product_group_id_s.NEXTVAL
        WHERE  rowid                  = lb_rowid(j);


   v_sql_stmt := 48;
   FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

    -- Insert into the LID table  with the  user defined key

       INSERT INTO  msc_local_id_setup
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char4,
       SOURCE_COMPONENT_ID ,
       SOURCE_CO_PRODUCT_ID ,
       SOURCE_CO_PRODUCT_GROUP_ID  ,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
      SELECT
       co_product_group_id,
       st_transaction_id,
       v_instance_id,
       'CO_PRODUCT_GROUP_ID',
       data_source_type,
       v_instance_code,
       company_name,
       component_name,
       SOURCE_COMPONENT_ID ,
       SOURCE_CO_PRODUCT_ID ,
       SOURCE_CO_PRODUCT_GROUP_ID  ,
       v_current_date,
       v_current_user,
       v_current_date,
       v_current_user
      FROM msc_st_co_products
     WHERE   rowid   =   lb_rowid(j);

     END IF;
     CLOSE c9;



    -- Set the process flag as Valid and derive sr_instance_id
    lv_return :=
    MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name   => 'MSC_ST_CO_PRODUCTS',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug);

      IF lv_return < 0 THEN
        RAISe ex_logging_err;
      END IF;


    -- At the end calling  the LOG_ERROR for logging all errored out records

   lv_return :=
   MSC_ST_UTIL.LOG_ERROR(p_table_name    => 'MSC_ST_CO_PRODUCTS',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug );

    IF lv_return < 0 THEN
        RAISe ex_logging_err;
    END IF;

  COMMIT;
  -- Now Updating the tables MSC_ST_BOMS and MSC_ST_BOM_COMPONENTS.

   LOAD_CO_PRODUCT_BOMS;


  EXCEPTION
    WHEN too_many_rows THEN
      lv_error_text :=substr('MSC_CL_PRE_PROCESS.LOAD_BOM'||'('
                      ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK ;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text :=  substr('MSC_CL_PRE_PROCESS.LOAD_BOM'||'('
                        ||v_sql_stmt||')'|| SQLERRM, 1, 240);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END LOAD_BOM;




  /*==========================================================================+
  | DESCRIPTION  : This function performs the validation and loads the data   |
  |                for business object ROUTING.                               |
  +==========================================================================*/

  PROCEDURE  LOAD_ROUTING IS

  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  TYPE CurTyp       IS REF CURSOR;
  c1                CurTyp;
  lb_rowid          RowidTab;

  lv_local_id       NUMBER;
  lv_column_names   VARCHAR2(5000);     -- Stores concatenated column names
  lv_return         NUMBER;
  lv_error_text     VARCHAR2(250);
  lv_where_str      VARCHAR2(5000);
  lv_sql_stmt       VARCHAR2(5000);
  lv_cursor_stmt    VARCHAR2(5000);
  lv_batch_id       msc_st_routings.batch_id%TYPE;
  lv_message_text   msc_errors.error_text%TYPE;
  ex_logging_err    EXCEPTION;


  CURSOR c2(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_routings
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

  CURSOR c3(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_routings
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(routing_sequence_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag     = SYS_NO;

  CURSOR c4(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_routing_operations
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

  CURSOR c5(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_routing_operations
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(operation_sequence_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag     = SYS_NO;

  CURSOR c6(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_operation_resources
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

  CURSOR c7(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_operation_resources
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(resource_seq_num,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag     = SYS_NO
    GROUP BY sr_instance_code,company_name,
             organization_code,routing_name,
             operation_seq_code,resource_seq_code,
             alternate_routing_designator,alternate_number;

  CURSOR c8(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_operation_resources
    WHERE  process_flag  = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(resource_seq_num,NULL_VALUE) <> NULL_VALUE
    AND    NVL(operation_sequence_id,NULL_VALUE) <> NULL_VALUE
    AND    NVL(routing_sequence_id,NULL_VALUE) <> NULL_VALUE
    GROUP BY sr_instance_code, operation_sequence_id,
             routing_sequence_id,resource_seq_num ;

     -- For OSFM Integration

   CURSOR c9(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_operation_networks
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;


   -- For bug 3549086

    CURSOR c10(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_routing_operations
    WHERE  process_flag      IN (G_IN_PROCESS)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(department_id,NULL_VALUE) = NULL_VALUE
    GROUP BY sr_instance_code,company_name,
             organization_code,department_code  ;

  BEGIN
    --Duplicate records check for the records whose source is XML

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  -- Duplicate UDK validation for XML message

  v_sql_stmt := 01;
  lv_sql_stmt :=
  'UPDATE   msc_st_routings msr1'
  ||' SET     process_flag  = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE   message_id <  (SELECT MAX(message_id)'
  ||'                      FROM msc_st_routings msr2'
  ||'          WHERE msr2.sr_instance_code   = msr1.sr_instance_code'
  ||'          AND   NVL(msr2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(msr1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'          AND   msr2.organization_code  = msr1.organization_code'
  ||'          AND   NVL(msr2.routing_name,'||''''||NULL_CHAR||''''||') '
  ||'               = NVL(msr1.routing_name,'||''''||NULL_CHAR||''''||') '
  ||'          AND   msr2.assembly_name      = msr1.assembly_name'
  ||'          AND   NVL(msr2.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'               = NVL(msr1.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'          AND   msr2.process_flag        ='||G_IN_PROCESS
  ||'          AND    NVL(msr2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
  ||'  AND     msr1.process_flag = '||G_IN_PROCESS
  ||'  AND     msr1.sr_instance_code = :v_instance_code'
  ||'  AND     NVL(msr1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  --Duplicate records check for the records whose source is batch load

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

   v_sql_stmt := 02;

  lv_sql_stmt :=
  'UPDATE   msc_st_routings msr1 '
  ||' SET     process_flag  = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE    EXISTS ( SELECT 1 FROM msc_st_routings msr2'
  ||'          WHERE msr2.sr_instance_code   = msr1.sr_instance_code'
  ||'          AND   NVL(msr2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(msr1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'          AND   msr2.organization_code  = msr1.organization_code'
  ||'          AND   NVL(msr2.routing_name,'||''''||NULL_CHAR||''''||') '
  ||'               = NVL(msr1.routing_name,'||''''||NULL_CHAR||''''||') '
  ||'          AND   msr2.assembly_name      = msr1.assembly_name'
  ||'          AND   NVL(msr2.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'               = NVL(msr1.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'          AND   msr2.process_flag        ='||G_IN_PROCESS
  ||'          AND NVL(msr2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||'     GROUP BY sr_instance_code,organization_code,company_name,routing_name, '
  ||'     assembly_name, alternate_routing_designator '
  ||'              HAVING COUNT(*) >1 )'
  ||'  AND     msr1.process_flag = '||G_IN_PROCESS
  ||'  AND     msr1.sr_instance_code = :v_instance_code'
  ||' AND     NVL(msr1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  -- For OSFM integration
  -- Network routings should have FIRST_OP_SEQ_NUM and LAST_OP_SEQ_NUM
  -- corresponding to these should have FIRST_OPERATION_SEQ_CODE and LAST_OPERATION_SEQ_CODE
  -- in the control files.
  lv_column_names :=
  'ROUTING_NAME                    ||''~''||'
  ||' ASSEMBLY_NAME                ||''~''||'
  ||' ROUTING_TYPE                 ||''~''||'
  ||' ORGANIZATION_CODE            ||''~''||'
  ||' SR_INSTANCE_CODE             ||''~''||'
  ||' ROUTING_COMMENT              ||''~''||'
  ||' ALTERNATE_ROUTING_DESIGNATOR ||''~''||'
  ||' PROJECT_NUMBER               ||''~''||'
  ||' TASK_NUMBER                  ||''~''||'
  ||' LINE_CODE                    ||''~''||'
  ||' UOM_CODE                     ||''~''||'
  ||' CFM_ROUTING_FLAG             ||''~''||'
  ||' CTP_FLAG                     ||''~''||'
  ||' ROUTING_QUANTITY             ||''~''||'
  ||' DELETED_FLAG                 ||''~''||'
  ||' BOM_NAME                     ||''~''||'
  ||' ALTERNATE_BOM_DESIGNATOR     ||''~''||'
  ||' FIRST_OPERATION_SEQ_CODE     ||''~''||'
  ||' LAST_OPERATION_SEQ_CODE      ||''~''||'
  ||' COMPANY_NAME ' ;


  -- Now processing by batch
   LOOP
      v_sql_stmt := 03;
      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      ' UPDATE msc_st_routings '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c2(lv_batch_id);
      FETCH c2 BULK COLLECT INTO lb_rowid;
      CLOSE c2;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_routings
      SET  st_transaction_id = msc_st_routings_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);


      -- Set the  message
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_ROUTINGS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     --Deletion is not allowed on this table.
      v_sql_stmt := 06;
      lv_sql_stmt :=
      ' UPDATE     msc_st_routings '
      ||' SET      process_flag     ='||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Check DELETE_FLAG column has valid value or not and if not set it to SYS_NO
      -- Log error procedure inserts warning and also defaults the delete flag

      lv_where_str :=
      ' AND NVL(deleted_flag,'||NULL_VALUE||') <>'||SYS_NO;

       lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_ROUTINGS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DELETED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,lv_error_text);
      END IF;

      -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- derive  organization id , call utilty package- msc_st_util's procedure

     lv_return :=
     MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name     => 'MSC_ST_ROUTINGS',
                                    p_org_partner_name  => 'ORGANIZATION_CODE',
                                    p_org_partner_id    => 'ORGANIZATION_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_ORGANIZATION,
                                    p_severity          => G_SEV_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_batch_id          => lv_batch_id,
                                    p_debug             => v_debug,
                                    p_error_text        => lv_error_text);

     if(lv_return <> 0) then
        RAISE ex_logging_err;
     end if;

      -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ASSEMBLY_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Derive assembly item id

     lv_return :=
     MSC_ST_UTIL.DERIVE_ITEM_ID(p_table_name => 'MSC_ST_ROUTINGS',
                             p_item_col_name => 'ASSEMBLY_NAME',
                             p_item_col_id   => 'ASSEMBLY_ITEM_ID',
                             p_instance_code => v_instance_code,
                             p_instance_id   => v_instance_id,
                             p_severity      => G_SEV_ERROR,
                             p_message_text  => lv_message_text,
                             p_batch_id      => lv_batch_id,
                             p_debug         => v_debug,
                             p_error_text    => lv_error_text);


    if(lv_return <> 0) then
         RAISE ex_logging_err;
    end if;


     -- Now check whether Routing  Name is NULL , if it is NULL we will populate
     -- Assembly  Name in Routing Name column for all such records

    v_sql_stmt := 07;

    lv_sql_stmt :=
    'UPDATE msc_st_routings   '
    ||' SET    routing_name             = assembly_name'
    ||' WHERE  sr_instance_code         = :v_instance_code'
    ||' AND    process_flag             ='|| G_IN_PROCESS
    ||' AND    NVL(routing_name,'||''''||NULL_CHAR||''''||') '
    ||'         = '||''''||NULL_CHAR||''''
    ||' AND    batch_id                 = :lv_batch_id ';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    -- Derive the ROUTING_SEQUENCE_ID from LOCAL ID table

    lv_return :=msc_st_util.derive_routing_sequence_id
                (p_table_name     => 'MSC_ST_ROUTINGS',
                 p_rtg_col_name   => 'ROUTING_NAME',
                 p_rtg_col_id     =>'ROUTING_SEQUENCE_ID',
                 p_instance_code  => v_instance_code,
                 p_batch_id       => lv_batch_id,
                 p_debug          => v_debug,
                 p_error_text     => lv_error_text);

    if (lv_return <> 0 )then
       MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,lv_error_text);
    end if;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ROUTING_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_ROUTING_TYPE);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Defualt routing type

     lv_where_str :=
     ' AND NVL(routing_type,'||NULL_VALUE||') NOT IN (1,2)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name       => 'MSC_ST_ROUTINGS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'ROUTING_TYPE',
                     p_debug             => v_debug,
                     p_default_value     => G_ROUTING_TYPE);


      IF lv_return <> 0 THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,lv_error_text);
      END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_FK_REF_NOT_EXIST',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAMES',
                    p_token_value1      => '  SR_INSTANCE_CODE, COMPANY_NAME,'
                                           ||' ORGANIZATION_CODE AND PROJECT_NUMBER',
                    p_token2            => 'MASTER_TABLE',
                    p_token_value2      => 'MSC_ST_PROJECT_TASKS');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Derive Project Id.
    lv_return:= MSC_ST_UTIL.DERIVE_PROJ_TASK_ID
                           (p_table_name          => 'MSC_ST_ROUTINGS',
                            p_proj_col_name       => 'PROJECT_NUMBER',
                            p_proj_task_col_id    => 'PROJECT_ID',
                            p_instance_code       => v_instance_code,
                            p_entity_name         => 'PROJECT_ID',
                            p_error_text          => lv_error_text,
                            p_batch_id            => lv_batch_id,
                            p_severity            => G_SEV_WARNING,
                            p_message_text        => lv_message_text,
                            p_debug               => v_debug,
                            p_row                 => lv_column_names);
    IF lv_return<> 0 THEN
      RAISE ex_logging_err;
    END IF;

    -- Set the error message
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_FK_REF_NOT_EXIST',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAMES',
                    p_token_value1      => '  SR_INSTANCE_CODE, COMPANY_NAME,'
                                           ||' ORGANIZATION_CODE, PROJECT_NUMBER,'
                                           ||' TASK_NUMBER',
                    p_token2            => 'MASTER_TABLE',
                    p_token_value2      => 'MSC_ST_PROJECT_TASKS');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Derive Task Id.
    lv_return:= MSC_ST_UTIL.DERIVE_PROJ_TASK_ID
                           (p_table_name          => 'MSC_ST_ROUTINGS',
                            p_proj_col_name       => 'PROJECT_NUMBER',
                            p_proj_task_col_id    => 'TASK_ID',
                            p_instance_code       => v_instance_code,
                            p_entity_name         => 'TASK_ID',
                            p_error_text          => lv_error_text,
                            p_task_col_name       => 'TASK_NUMBER',
                            p_batch_id            => lv_batch_id,
                            p_severity            => G_SEV_WARNING,
                            p_message_text        => lv_message_text,
                            p_debug               => v_debug,
                            p_row                 => lv_column_names);

    IF lv_return<> 0 THEN
      RAISE ex_logging_err;
    END IF;

    -- Derive LINE_ID
     v_sql_stmt := 08;

     lv_sql_stmt :=
     'UPDATE        msc_st_routings   msr'
     ||' SET        line_id  = ( SELECT local_id'
     ||'                        FROM msc_local_id_setup mlis'
     ||'                        WHERE  mlis.char1 = msr.sr_instance_code'
     ||'                        AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
     ||'                        =    NVL(msr.company_name,'||''''||NULL_CHAR||''''||') '
     ||'                        AND    mlis.char3 = msr.organization_code'
     ||'                        AND    mlis.char4 = msr.line_code'
     ||'                        AND    mlis.entity_name = ''LINE_ID'')'
     ||' WHERE      sr_instance_code = :v_instance_code'
     ||' AND        process_flag     = '||G_IN_PROCESS
     ||' AND        batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

      -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'UOM_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Validate the UOM code

      v_sql_stmt := 09;
      lv_sql_stmt :=
      'UPDATE   msc_st_routings msr'
      ||' SET   process_flag ='||G_ERROR_FLG||','
      ||'       error_text       =        '||''''||lv_message_text||''''
      ||' WHERE NOT   EXISTS (SELECT 1'
      ||'       FROM  msc_units_of_measure muom'
      ||'       WHERE NVL(muom.uom_code,  '||''''||NULL_CHAR||''''||') = '
      ||'             NVL(msr.uom_code,   '||''''||NULL_CHAR||''''||')'
      ||'       UNION'
      ||'       SELECT 1 FROM msc_st_units_of_measure msuom'
      ||'       WHERE NVL(msuom.uom_code,  '||''''||NULL_CHAR||''''||') = '
      ||'             NVL(msr.uom_code,'||''''||NULL_CHAR||''''||')'
      ||'             AND msuom.process_flag = '||G_VALID
      ||'             AND msuom.sr_instance_id = :v_instance_id)'
      ||' AND NVL(msr.uom_code,'||''''||NULL_CHAR||''''||') '
      ||'         <> '||''''||NULL_CHAR||''''
      ||' AND msr.sr_instance_code = :v_instance_code'
      ||' AND msr.batch_id         = :lv_batch_id'
      ||' AND msr.process_flag     = '||G_IN_PROCESS ;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_id,
                        v_instance_code,
                        lv_batch_id;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CTP_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_CTP_FLAG );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Defualt CTP FLAG  as 2(No) if NOT IN (1,2)

    lv_where_str := ' AND ctp_flag NOT IN (1,2)';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name       => 'MSC_ST_ROUTINGS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'CTP_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => G_CTP_FLAG);

    IF lv_return<> 0 THEN
      RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    =>  'MSC',
                      p_error_code        =>  'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      =>  lv_message_text,
                      p_error_text        =>  lv_error_text,
                      p_token1            =>  'COLUMN_NAME',
                      p_token_value1      =>  'CFM_ROUTING_FLAG',
                      p_token2            =>  'DEFAULT_VALUE',
                      p_token_value2      =>  G_CFM_ROUTING_FLAG );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Defualt CFM flag as 2(No) if NOT IN (1,2,3)
     -- 3 added for Network Routing, now supported by OSFM integration.

     lv_where_str := ' AND cfm_routing_flag NOT IN (1,2,3)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_ROUTINGS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'CFM_ROUTING_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => G_CFM_ROUTING_FLAG);

    IF lv_return<> 0 THEN
      RAISE ex_logging_err;
    END IF;

    -- Now we will check whether BOM Name is NULL , if it is NULL we will populate the
    -- ASSEMBLY NAME in BOM NAME column for all such records

    v_sql_stmt := 10;
    lv_sql_stmt :=
    'UPDATE msc_st_routings '
    ||' SET    bom_name = assembly_name'
    ||' WHERE  sr_instance_code = :v_instance_code'
    ||' AND    process_flag = '||G_IN_PROCESS
    ||' AND    NVL(bom_name,'||''''||NULL_CHAR||''''||') '
    ||'         = '||''''||NULL_CHAR||''''
    ||' AND    batch_id = :lv_batch_id ';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,BOM_NAME',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_BOMS',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_ROUTINGS' );

    -- Derive the bill_sequence_id

    lv_return :=
    MSC_ST_UTIL.DERIVE_BILL_SEQUENCE_ID
                      (p_table_name    => 'MSC_ST_ROUTINGS',
                      p_row            => lv_column_names,
                      p_bom_col_name   => 'BOM_NAME',
                      p_bom_col_id     => 'BILL_SEQUENCE_ID',
                      p_instance_code  =>  v_instance_code,
                      p_severity       =>  G_SEV_WARNING,
                      p_message_text   => lv_message_text,
                      p_batch_id       =>  lv_batch_id,
                      p_debug          => v_debug,
                      p_error_text     =>  lv_error_text);

    IF lv_return<> 0 THEN
      RAISE ex_logging_err;
    END IF;

   -- For OSFM Integration
   -- for Network Routings first_operation_seq_code or last_operation_seq_code cannot be null.
   -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'FIRST_OPERATION_SEQ_CODE OR '
                                           ||'LAST_OPERATION_SEQ_CODE'  );
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out the records whose first_operation_seq_code or last_operation_seq_code is NULL

    v_sql_stmt := 11;
    lv_sql_stmt :=
    'UPDATE    msc_st_routings'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE ( NVL(first_operation_seq_code,'||NULL_VALUE||') ='||NULL_VALUE
    ||' OR      NVL(last_operation_seq_code,'||NULL_VALUE||') ='||NULL_VALUE ||')'
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    cfm_routing_flag      = 3'
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


   -- For Network routings populate the FIRST_OP_SEQ_NUM and LAST_OP_SEQ_NUM
    v_sql_stmt := 13;
    lv_sql_stmt :=
    'UPDATE    msc_st_routings'
    ||' SET    first_op_seq_num     = to_number(decode(length(rtrim(first_operation_seq_code,''0123456789'')),'
    ||'        NULL,first_operation_seq_code,''1'')),'
    ||'        last_op_seq_num     = to_number(decode(length(rtrim(last_operation_seq_code,''0123456789'')),'
    ||'        NULL,last_operation_seq_code,''1''))'
    ||' WHERE    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    cfm_routing_flag      = 3'
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   --Call to customised validation.

    MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_ROUTINGS',
         pInstanceID    => v_instance_id);

    IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Now generate routing sequence id

     v_sql_stmt := 15;

     OPEN c3(lv_batch_id);
     FETCH c3 BULK COLLECT INTO lb_rowid ;

     IF c3%ROWCOUNT > 0  THEN

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_routings
        SET    routing_sequence_id    = msc_st_routing_sequence_id_s.NEXTVAL
        WHERE  rowid                  = lb_rowid(j);


   v_sql_stmt := 16;
   FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

    -- Insert into the LID table  with the  user defined key

       INSERT INTO  msc_local_id_setup
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char3,
       char4,
       char5,
       char6,
       number1,
       SOURCE_ORGANIZATION_ID,
       SOURCE_ASSEMBLY_ITEM_ID ,
       SOURCE_ROUTING_SEQUENCE_ID ,
       SOURCE_TASK_ID ,
       SOURCE_PROJECT_ID ,
       SOURCE_BILL_SEQUENCE_ID ,
       SOURCE_COMMON_ROUTING_SEQ_ID ,
       SOURCE_LINE_ID ,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
      SELECT
       routing_sequence_id,
       st_transaction_id,
       v_instance_id,
       'ROUTING_SEQUENCE_ID',
       data_source_type,
       v_instance_code,
       company_name,
       organization_code,
       routing_name,
       assembly_name,
       alternate_routing_designator,
       bill_sequence_id,
       SOURCE_ORGANIZATION_ID,
       SOURCE_ASSEMBLY_ITEM_ID ,
       SOURCE_ROUTING_SEQUENCE_ID ,
       SOURCE_TASK_ID ,
       SOURCE_PROJECT_ID ,
       SOURCE_BILL_SEQUENCE_ID ,
       SOURCE_COMMON_ROUTING_SEQ_ID ,
       SOURCE_LINE_ID ,
       v_current_date,
       v_current_user,
       v_current_date,
       v_current_user
      FROM msc_st_routings
     WHERE   rowid   =   lb_rowid(j);

     END IF;
     CLOSE c3;

     -- set the message

        lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'COMMON_ROUTING_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Derive the COMMON_ROUTING_SEQUENCE_ID from LOCAL ID table

      lv_where_str :=
      '   AND NVL(routing_name, '||''''||NULL_CHAR||''''||') <> '
      ||'    NVL(common_routing_name, '||''''||NULL_CHAR||''''||')'
      ||' AND     NVL(common_routing_name,  '||''''||NULL_CHAR||''''||')'
      ||'        <>               '||''''||NULL_CHAR||'''' ;



    lv_return := msc_st_util.derive_routing_sequence_id
                (p_table_name     => 'MSC_ST_ROUTINGS',
                 p_rtg_col_name   => 'COMMON_ROUTING_NAME',
                 p_rtg_col_id     => 'COMMON_ROUTING_SEQUENCE_ID',
                 p_instance_code  => v_instance_code,
                 p_batch_id       => lv_batch_id,
                 p_debug          => v_debug,
                 p_error_text     => lv_error_text,
                 p_where_str      => lv_where_str);

    if (lv_return <> 0 )then
       MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,lv_error_text);
    end if;


    lv_sql_stmt :=
    'UPDATE    msc_st_routings'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  NVL(COMMON_ROUTING_SEQUENCE_ID,'||NULL_VALUE||') ='||NULL_VALUE
    ||' AND    NVL(routing_name, '||''''||NULL_CHAR||''''||') <> '
    ||'        NVL(common_routing_name, '||''''||NULL_CHAR||''''||')'
    ||' AND    NVL(common_routing_name,  '||''''||NULL_CHAR||''''||')'
    ||'        <>               '||''''||NULL_CHAR||''''
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


     -- Set the process flag as Valid and poulate instance_id
    lv_return :=
    MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name   => 'MSC_ST_ROUTINGS',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug,
                               p_batch_id       => lv_batch_id);

      IF lv_return <> 0 THEN
          RAISE ex_logging_err;
      END IF;

    -- At the end calling  the LOG_ERROR for logging all errored out records

   lv_return :=
   MSC_ST_UTIL.LOG_ERROR(p_table_name    => 'MSC_ST_ROUTINGS',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug,
                         p_batch_id      => lv_batch_id  );

   IF(lv_return <> 0) then
       RAISE ex_logging_err;
   END IF;

   COMMIT;
   END LOOP;



  -- Validation for MSC_ST_ROUTING_OPERATIONS


   --Duplicate records check for the records whose source is XML

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 18;

  lv_sql_stmt :=
  'UPDATE    msc_st_routing_operations msro1 '
  ||' SET       process_flag = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE     message_id < ( SELECT max(message_id) '
  ||'          FROM msc_st_routing_operations msro2'
  ||'          WHERE msro2.sr_instance_code   = msro1.sr_instance_code'
  ||'          AND   msro2.organization_code  = msro1.organization_code'
  ||'          AND   msro2.effectivity_date   = msro1.effectivity_date'
  ||'          AND   NVL(msro2.routing_name,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msro1.routing_name, '||''''||NULL_CHAR||''''||') '
  ||'          AND   msro2.assembly_name      = msro1.assembly_name'
  ||'          AND   NVL(msro2.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msro1.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(msro2.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msro1.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'          AND   msro2.process_flag   ='||G_IN_PROCESS
  ||'          AND    NVL(msro2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
  ||' AND     msro1.process_flag = '||G_IN_PROCESS
  ||' AND     msro1.sr_instance_code = :v_instance_code'
  ||' AND     NVL(msro1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;


  --Duplicate records check for the records whose source is batch load

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 19;
  lv_sql_stmt :=
  'UPDATE   msc_st_routing_operations msro1'
  ||' SET      process_flag = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE    EXISTS ( SELECT 1 '
  ||'          FROM msc_st_routing_operations msro2'
  ||'          WHERE msro2.sr_instance_code   = msro1.sr_instance_code'
  ||'          AND   msro2.organization_code  = msro1.organization_code'
  ||'          AND   msro2.effectivity_date   = msro1.effectivity_date'
  ||'          AND   NVL(msro2.routing_name,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msro1.routing_name, '||''''||NULL_CHAR||''''||') '
  ||'          AND   msro2.assembly_name      = msro1.assembly_name'
  ||'          AND   NVL(msro2.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msro1.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(msro2.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msro1.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'          AND   msro2.process_flag   ='||G_IN_PROCESS
  ||'               AND NVL(msro2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||'         GROUP BY sr_instance_code,company_name,organization_code,routing_name,'
  ||'         assembly_name, alternate_routing_designator,operation_seq_code,effectivity_date'
  ||'          HAVING COUNT(*) >1 )'
  ||'  AND     msro1.process_flag          = '||G_IN_PROCESS
  ||'  AND     msro1.sr_instance_code       = :v_instance_code'
  ||'  AND     NVL(msro1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;


  lv_column_names :=
  'ROUTING_NAME                   ||''~''||'
  ||' ASSEMBLY_NAME               ||''~''||'
  ||' ALTERNATE_ROUTING_DESIGNATOR ||''~''||'
  ||' OPERATION_SEQ_CODE          ||''~''||'
  ||' EFFECTIVITY_DATE            ||''~''||'
  ||' OPTION_DEPENDENT_FLAG       ||''~''||'
  ||' DEPARTMENT_CODE             ||''~''||'
  ||' ORGANIZATION_CODE           ||''~''||'
  ||' SR_INSTANCE_CODE            ||''~''||'
  ||' OPERATION_DESCRIPTION       ||''~''||'
  ||' DISABLE_DATE                ||''~''||'
  ||' FROM_UNIT_NUMBER            ||''~''||'
  ||' TO_UNIT_NUMBER              ||''~''||'
  ||' OPERATION_TYPE              ||''~''||'
  ||' MINIMUM_TRANSFER_QUANTITY   ||''~''||'
  ||' YIELD                       ||''~''||'
  ||' OPERATION_LEAD_TIME_PERCENT ||''~''||'
  ||' CUMULATIVE_YIELD            ||''~''||'
  ||' REVERSE_CUMULATIVE_YIELD    ||''~''||'
  ||' NET_PLANNING_PERCENT        ||''~''||'
  ||' SETUP_DURATION              ||''~''||'
  ||' TEAR_DOWN_DURATION          ||''~''||'
  ||' UOM_CODE                    ||''~''||'
  ||' STANDARD_OPERATION_CODE     ||''~''||'
  ||' DELETED_FLAG                ||''~''||'
  ||' COMPANY_NAME ';



    LOOP

      v_sql_stmt := 20;
      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;


      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 21;
      lv_sql_stmt :=
      ' UPDATE msc_st_routing_operations '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;


      OPEN  c4(lv_batch_id);
      FETCH c4 BULK COLLECT INTO lb_rowid;
      CLOSE c4;

      v_sql_stmt := 22;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_routing_operations
      SET  st_transaction_id = msc_st_routing_operations_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


     -- Check whether delete flag value is in (1,2),if not default to SYS_NO

   lv_where_str :=
   ' AND NVL(deleted_flag,'||NULL_VALUE||') <>'||SYS_NO;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_ROUTING_OPERATIONS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DELETED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- derive  organization id ,
     lv_return :=
     MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name     => 'MSC_ST_ROUTING_OPERATIONS',
                                    p_org_partner_name  =>'ORGANIZATION_CODE',
                                    p_org_partner_id    =>'ORGANIZATION_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_ORGANIZATION,
                                    p_severity          => G_SEV_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_batch_id          =>lv_batch_id,
                                    p_debug             => v_debug,
                                    p_error_text        =>lv_error_text);

     if(lv_return <> 0) then
        RAISE ex_logging_err;
     end if;

     -- Now we will check whether Routing Name is NULL , if it is NULL we will populate the
     -- ASSEMBLY NAME in ROUTING_NAME column for all such records
    v_sql_stmt := 23;

    lv_sql_stmt :=
    'UPDATE msc_st_routing_operations '
    ||' SET    routing_name = assembly_name'
    ||' WHERE  sr_instance_code = :v_instance_code'
    ||' AND    process_flag     = '||G_IN_PROCESS
    ||' AND    NVL(routing_name,'||''''||NULL_CHAR||''''||') '
    ||'         = '||''''||NULL_CHAR||''''
    ||' AND    batch_id         = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,ROUTING_NAME',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_ROUTINGS',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_ROUTING_OPERATIONS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Derive the ROUTING_SEQUENCE_ID from LOCAL ID table

    lv_return :=
    MSC_ST_UTIL.DERIVE_ROUTING_SEQUENCE_ID
                      (p_table_name     => 'MSC_ST_ROUTING_OPERATIONS',
                       p_rtg_col_name   => 'ROUTING_NAME',
                       p_rtg_col_id     => 'ROUTING_SEQUENCE_ID',
                       p_instance_code  => v_instance_code,
                       p_severity       => G_SEV_ERROR,
                       p_message_text   => lv_message_text,
                       p_batch_id       => lv_batch_id,
                       p_debug          => v_debug,
                       p_error_text     => lv_error_text);

    if (lv_return <> 0 )then
       RAISE ex_logging_err;
    end if;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'EFFECTIVITY_DATE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => 'SYSDATE' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default effectivity date as SYSDATE if NULL

     lv_where_str :=
     ' AND NVL(effectivity_date,SYSDATE-36500 ) = SYSDATE-36500 ' ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_ROUTING_OPERATIONS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'EFFECTIVITY_DATE',
                     p_debug             => v_debug,
                     p_default_value     => 'SYSDATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'OPERATION_SEQ_CODE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_OPERATION_SEQ_CODE  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Default operation_seq_code as 1 if NULL
     lv_where_str :=
     '    AND NVL(operation_seq_code,'||''''||NULL_CHAR||''''||') '
     ||'         = '||''''||NULL_CHAR||'''' ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_ROUTING_OPERATIONS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'OPERATION_SEQ_CODE',
                     p_debug             => v_debug,
                     p_default_value     => G_OPERATION_SEQ_CODE);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Derive operation_sequence id, operation_seq_num

    v_sql_stmt := 24;
    lv_sql_Stmt :=
    'UPDATE     msc_st_routing_operations msro'
    ||' SET     (operation_sequence_id,operation_seq_num)=  (SELECT local_id,number1'
    ||'         FROM msc_local_id_setup mlis'
    ||'         WHERE  mlis.char1 = msro.sr_instance_code'
    ||'         AND     NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'          =    NVL(msro.company_name,'||''''||NULL_CHAR||''''||') '
    ||'         AND    mlis.char3 = msro.organization_code'
    ||'         AND    mlis.char4 = msro.routing_name'
    ||'         AND    mlis.char5 = msro.operation_seq_code'
    ||'         AND   NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
    ||'           =   NVL(msro.alternate_routing_designator,'||''''||NULL_CHAR||''''||')'
    ||'         AND    mlis.date1 = msro.effectivity_date'
    ||'         AND    mlis.entity_name = ''OPERATION_SEQUENCE_ID'' '
    ||'         AND    mlis.instance_id = '||v_instance_id||')'
    ||'  WHERE      sr_instance_code = :v_instance_code'
    ||'  AND        process_flag     ='||G_IN_PROCESS
    ||'  AND        batch_id         = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

  -- derive the operation_seq_num column from LID
  -- where operation_sequence_id exist
/*
  v_sql_stmt  := 25;

  lv_sql_stmt :=
  'UPDATE       msc_st_routing_operations msro'
  ||' SET       operation_seq_num =  ( SELECT number1'
  ||'           FROM msc_local_id_setup mlis'
  ||'           WHERE  local_id = msro.operation_sequence_id'
  ||'           AND    mlis.entity_name = ''OPERATION_SEQUENCE_ID'' '
  ||'           AND    mlis.instance_id = '||v_instance_id||')'
  ||' WHERE     sr_instance_code = :v_instance_code'
  ||' AND       NVL(operation_sequence_id,'||NULL_VALUE||') <>'||NULL_VALUE
  ||' AND       process_flag     = '||G_IN_PROCESS
  ||' AND       batch_id         = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;
*/
    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_DELETE_FAIL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Error out if DELETED_FLAG = SYS_YES but operation_sequence_id is NULL

    v_sql_stmt := 26;
    lv_sql_stmt :=
    'UPDATE    msc_st_routing_operations'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  NVL(operation_sequence_id,'||NULL_VALUE||') ='||NULL_VALUE
    ||' AND    deleted_flag      ='||SYS_YES
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the error message

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DEPARTMENT_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Error out record if department_code is null/resource_code is NULL and line_flag=2

      v_sql_stmt := 26.1;
     lv_sql_stmt :=
      ' UPDATE  msc_st_routing_operations '
      ||' SET   process_flag        = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE NVL(department_code,'||''''||NULL_CHAR||''''||')'
      ||'       = '||''''||NULL_CHAR||''''
      ||' AND   batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND   sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

    -- Derive department id
    v_sql_stmt := 27;
    lv_sql_stmt :=
    'UPDATE     msc_st_routing_operations msro'
    ||' SET     department_id=    (SELECT local_id'
    ||'         FROM msc_local_id_setup mlis'
    ||'         WHERE  mlis.char1 = msro.sr_instance_code'
    ||'         AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'         =    NVL(msro.company_name,'||''''||NULL_CHAR||''''||') '
    ||'         AND    mlis.char3 = msro.organization_code'
    ||'         AND    mlis.char4 = msro.department_code'
    ||'         AND    mlis.entity_name = ''DEPARTMENT_ID'')'
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        deleted_flag     = '||SYS_NO
    ||' AND        process_flag     = '||G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;



      -- Now generate the department_id

     v_sql_stmt := 27.1;

     OPEN c10(lv_batch_id);
     FETCH c10 BULK COLLECT INTO lb_rowid ;

     IF c10%ROWCOUNT > 0  THEN

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_routing_operations
        SET    department_id          = msc_st_department_id_s.NEXTVAL
        WHERE  rowid                  = lb_rowid(j);


    v_sql_stmt := 14;

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

   -- Insert into the LID table this new department with the  user defined key

       INSERT INTO  msc_local_id_setup
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char3,
       char4,
       SOURCE_ORGANIZATION_ID,
       SOURCE_DEPARTMENT_ID,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
      SELECT
       department_id,
       st_transaction_id,
       v_instance_id,
       'DEPARTMENT_ID',
       data_source_type,
       sr_instance_code,
       company_name,
       organization_code,
       department_code,
       SOURCE_ORGANIZATION_ID,
       SOURCE_DEPARTMENT_ID,
       v_current_date,
       v_current_user,
       v_current_date,
       v_current_user
      FROM msc_st_routing_operations
      WHERE rowid = lb_rowid(j);

   END IF;
   CLOSE c10;

    -- Now derive department id
     v_sql_stmt:= 15;

    lv_sql_stmt :=
    'UPDATE     msc_st_routing_operations msdr'
    ||' SET     department_id=  (SELECT local_id'
    ||'                        FROM msc_local_id_setup mlis'
    ||'                        WHERE  mlis.char1 = msdr.sr_instance_code'
    ||'                        AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                        =    NVL(msdr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                        AND    mlis.char3 = msdr.organization_code'
    ||'                        AND    mlis.char4 = msdr.department_code'
    ||'                        AND    mlis.entity_name = ''DEPARTMENT_ID'')'
    ||' WHERE      msdr.sr_instance_code = :v_instance_code'
    ||' AND        NVL(msdr.department_id,'||NULL_VALUE||') ='|| NULL_VALUE
    ||' AND        msdr.process_flag     ='|| G_IN_PROCESS
    ||' AND        msdr.batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


   /* Bug 3549086 -- we shouldn't be erroing out if department doen't exists.
      ERP allows such records. Hence we would genearet department it.
    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,DEPARTMENT_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_DEPARTMENT_RESOURCES',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_ROUTING_OPERATIONS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Log an error if unable to derive department id

   v_sql_stmt := 28;
   lv_sql_stmt :=
   'UPDATE      msc_st_routing_operations '
   ||' SET      process_flag ='||G_ERROR_FLG||','
   ||'          error_text   = '||''''||lv_message_text||''''
   ||' WHERE    NVL(department_id,'||NULL_VALUE||') ='||NULL_VALUE
   ||' AND      sr_instance_code    = :v_instance_code'
   ||' AND      deleted_flag        ='||SYS_NO
   ||' AND      process_flag        ='|| G_IN_PROCESS
   ||' AND      batch_id            = :lv_batch_id' ;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;
   */

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'OPTION_DEPENDENT_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_OPTION_DEPENDENT_FLAG  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default option_dependent_flag

    lv_where_str := ' AND NVL(option_dependent_flag,'||NULL_VALUE||')'
                      ||' NOT IN (1,2) AND deleted_flag = '||SYS_NO ;

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_ROUTING_OPERATIONS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'OPTION_DEPENDENT_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => G_OPTION_DEPENDENT_FLAG);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err ;
      END IF;

    --Call to customised validation.

      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_ROUTING_OPERATIONS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Generate operation_sequence_id
   -- Also update operation_seq_num as operation_seq_code,
   -- here we assume that  operation_seq_code is a number
    -- field,otherwise we will default it to 1

     v_sql_stmt := 29;

     OPEN c5(lv_batch_id);
     FETCH c5 BULK COLLECT INTO lb_rowid ;

     IF c5%ROWCOUNT > 0  THEN

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_routing_operations
        SET    operation_sequence_id  = msc_st_operation_sequence_id_s.NEXTVAL ,
               operation_seq_num      =
               to_number(decode(length(rtrim(operation_seq_code,'0123456789')),
                         NULL,operation_seq_code,'1'))
        WHERE  rowid                  = lb_rowid(j);

    v_sql_stmt := 30;

   FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
  -- Insert into the LID table  with the  user defined key

       INSERT INTO  msc_local_id_setup
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char3,
       char4,
       char5,
       char6,
       number1,
       date1,
       date2,
       SOURCE_ORGANIZATION_ID ,
       SOURCE_OPERATION_SEQUENCE_ID ,
       SOURCE_OPERATION_SEQ_NUM ,
       SOURCE_DEPARTMENT_ID ,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
      SELECT
       operation_sequence_id,
       st_transaction_id,
       v_instance_id,
       'OPERATION_SEQUENCE_ID',
       data_source_type,
       v_instance_code,
       company_name,
       organization_code,
       routing_name,
       operation_seq_code,
       alternate_routing_designator,
       operation_seq_num,
       effectivity_date,
       disable_date,
       SOURCE_ORGANIZATION_ID ,
       SOURCE_OPERATION_SEQUENCE_ID ,
       SOURCE_OPERATION_SEQ_NUM ,
       SOURCE_DEPARTMENT_ID ,
       v_current_date,
       v_current_user,
       v_current_date,
       v_current_user
       FROM msc_st_routing_operations
      WHERE rowid = lb_rowid(j) ;

    END IF;
  CLOSE c5;

   -- Insert records in MSC_ST_OPERATION_COMPONENT
   v_sql_stmt  := 31;
   lv_sql_stmt :=
   'INSERT INTO msc_st_operation_components '
   ||' (organization_id,'
   ||' operation_sequence_id,'
   ||' component_sequence_id,'
   ||' bill_sequence_id,'
   ||' routing_sequence_id,'
   ||' deleted_flag,'
   ||' sr_instance_id,'
   ||' last_update_date,'
   ||' last_updated_by, '
   ||' creation_date,'
   ||' created_by,'
   ||' refresh_id)'
   ||' SELECT'
   ||' msro.organization_id,'
   ||' msro.operation_sequence_id,'
   ||' msbc.component_sequence_id,'
   ||' msbc.bill_sequence_id,'
   ||' msro.routing_sequence_id,'
   ||' msro.deleted_flag,'
   ||  v_instance_id||','
   ||' msro.last_update_date,'
   ||' msro.last_updated_by,'
   ||' msro.creation_date,'
   ||' msro.created_by,'
   ||' msro.REFRESH_ID'
   ||' FROM msc_st_routing_operations msro,'
   ||'      msc_st_bom_components msbc,'
   ||'      msc_local_id_setup mlis'
   ||' WHERE msbc.bill_sequence_id      = mlis.number1'
   ||' AND   mlis.entity_name           = ''ROUTING_SEQUENCE_ID'' '
   ||' AND   mlis.local_id              = msro.routing_sequence_id'
   ||' AND   msbc.process_flag          = '||G_VALID
   ||' AND   mlis.instance_id           = :v_instance_id'
   ||' AND   msro.sr_instance_code      =  :v_instance_code'
   ||' AND   msro.operation_seq_code    =  msbc.operation_seq_code'
   ||' AND   msro.process_flag          ='||G_IN_PROCESS
   ||' AND   msro.batch_id              = :lv_batch_id'
   ||' UNION'
   ||' SELECT'
   ||' msro.organization_id,'
   ||' msro.operation_sequence_id,'
   ||' mbc.component_sequence_id,'
   ||' mbc.bill_sequence_id,'
   ||' msro.routing_sequence_id,'
   ||' msro.deleted_flag,'
   ||  v_instance_id||','
   ||' msro.last_update_date,'
   ||' msro.last_updated_by,'
   ||' msro.creation_date,'
   ||' msro.created_by,'
   ||' msro.REFRESH_ID'
   ||' FROM msc_st_routing_operations msro,'
   ||'      msc_bom_components mbc,'
   ||'      msc_local_id_setup mlis,'
   ||'      msc_local_id_setup mlis1'
   ||' WHERE mbc.component_sequence_id  = mlis1.local_id '
   ||' AND   mbc.bill_sequence_id       = mlis.number1'
   ||' AND   mbc.sr_instance_id         = :v_instance_id'
   ||' AND   mbc.plan_id                = -1'
   ||' AND   mlis.entity_name           = ''ROUTING_SEQUENCE_ID'' '
   ||' AND   mlis.local_id              = msro.routing_sequence_id '
   ||' AND   mlis.instance_id           = :v_instance_id '
   ||' AND   msro.sr_instance_code      = :v_instance_code'
   ||' AND   msro.organization_id       = mbc.organization_id'
   ||' AND   msro.operation_seq_code    = mlis1.char7'
   ||' AND   mlis1.instance_id          = :v_instance_id'
   ||' AND   mlis1.entity_name          = ''COMPONENT_SEQUENCE_ID'' '
   ||' AND   msro.process_flag          ='||G_IN_PROCESS
   ||' AND   msro.batch_id              = :lv_batch_id';

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_id,v_instance_code,lv_batch_id,
        v_instance_id,v_instance_id,v_instance_code,v_instance_id,lv_batch_id;

    -- Set the process flag as Valid and derive sr_instance_id
    lv_return :=
    MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name   => 'MSC_ST_ROUTING_OPERATIONS',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug,
                               p_batch_id       => lv_batch_id);

      IF lv_return < 0 THEN
        RAISe ex_logging_err;
      END IF;


    -- At the end calling  the LOG_ERROR for logging all errored out records

   lv_return :=
   MSC_ST_UTIL.LOG_ERROR(p_table_name    => 'MSC_ST_ROUTING_OPERATIONS',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug,
                         p_batch_id      => lv_batch_id  );

    IF lv_return < 0 THEN
        RAISe ex_logging_err;
    END IF;

   COMMIT;
 END LOOP;

   -- Validation for the MSC_ST_OPERATION_RESOURCES

   --Duplicate records check for the records whose source is XML

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;


  v_sql_stmt := 32;

  lv_sql_stmt:=
  'UPDATE    msc_st_operation_resources msor1 '
  ||'  SET   process_flag = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE  message_id < ( SELECT max(message_id)'
  ||'        FROM msc_st_operation_resources msor2'
  ||'          WHERE msor2.sr_instance_code   = msor1.sr_instance_code'
  ||'          AND   msor2.organization_code  = msor1.organization_code'
  ||'          AND   NVL(msor2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(msor1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(msor2.routing_name,'||''''||NULL_CHAR||''''||') '
  ||'                 = NVL(msor1.routing_name,'||''''||NULL_CHAR||''''||') '
  ||'          AND   msor2.assembly_name      = msor1.assembly_name'
  ||'          AND   NVL(msor2.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msor1.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(msor2.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msor1.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'          AND   msor2.resource_code      = msor1.resource_code'
  ||'          AND   NVL(msor2.resource_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'               = NVL(msor1.resource_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(msor2.alternate_number,'||NULL_VALUE||')'
  ||'               =  NVL(msor1.alternate_number,'||NULL_VALUE||')'
  ||'          AND   msor2.process_flag  ='||G_IN_PROCESS
  ||'          AND    NVL(msor2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
  ||'  AND     msor1.process_flag = '||G_IN_PROCESS
  ||'  AND     msor1.sr_instance_code = :v_instance_code'
  ||'  AND     NVL(msor1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE ;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;


  --Duplicate records check for the records whose source is batch load

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 33;
  lv_sql_stmt :=
  'UPDATE    msc_st_operation_resources msor1'
  ||' SET    process_flag = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE    EXISTS ( SELECT 1 '
  ||'          FROM msc_st_operation_resources msor2'
  ||'          WHERE msor2.sr_instance_code   = msor1.sr_instance_code'
  ||'          AND   msor2.organization_code  = msor1.organization_code'
  ||'          AND   NVL(msor2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(msor1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(msor2.routing_name,'||''''||NULL_CHAR||''''||') '
  ||'                 = NVL(msor1.routing_name,'||''''||NULL_CHAR||''''||') '
  ||'          AND   msor2.assembly_name      = msor1.assembly_name'
  ||'          AND   NVL(msor2.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msor1.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(msor2.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msor1.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'          AND   msor2.resource_code      = msor1.resource_code'
  ||'          AND   NVL(msor2.resource_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'               = NVL(msor1.resource_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(msor2.alternate_number,'||NULL_VALUE||')'
  ||'               =  NVL(msor1.alternate_number,'||NULL_VALUE||')'
  ||'          AND   msor2.process_flag  ='||G_IN_PROCESS
  ||'               AND NVL(msor2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||'         GROUP BY sr_instance_code,organization_code,company_name,routing_name,'
  ||'         assembly_name, alternate_routing_designator,operation_seq_code,'
  ||'         resource_code,resource_seq_code,alternate_number '
  ||'         HAVING COUNT(*) >1 )'
  ||'  AND    msor1.process_flag = '||G_IN_PROCESS
  ||'  AND    msor1.sr_instance_code = :v_instance_code'
  ||'  AND    NVL(msor1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;


  --Duplicate records check for the records whose source is XML

 lv_column_names :=
  'ROUTING_NAME              ||''~''||'
  ||' ASSEMBLY_NAME          ||''~''||'
  ||' OPERATION_SEQ_CODE     ||''~''||'
  ||' RESOURCE_SEQ_CODE      ||''~''||'
  ||' DEPARTMENT_CODE        ||''~''||'
  ||' RESOURCE_CODE          ||''~''||'
  ||' ALTERNATE_NUMBER       ||''~''||'
  ||' PRINCIPAL_FLAG         ||''~''||'
  ||' BASIS_TYPE             ||''~''||'
  ||' RESOURCE_USAGE         ||''~''||'
  ||' UOM_CODE               ||''~''||'
  ||' SETUP_CODE               ||''~''||'
  ||' ORGANIZATION_CODE      ||''~''||'
  ||' SR_INSTANCE_CODE       ||''~''||'
  ||' MAX_RESOURCE_UNITS     ||''~''||'
  ||' RESOURCE_UNITS         ||''~''||'
  ||' DELETED_FLAG           ||''~''||'
  ||' RESOURCE_TYPE          ||''~''||'
  ||' COMPANY_NAME';

  LOOP
      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;

      v_sql_stmt := 34;
      lv_sql_stmt :=
      ' UPDATE msc_st_operation_resources '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c6(lv_batch_id);
      FETCH c6 BULK COLLECT INTO lb_rowid;
      CLOSE c6;

      v_sql_stmt := 35;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_operation_resources
      SET  st_transaction_id = msc_st_operation_resources_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);


     -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Check whether delete flag value is in (SYS_YES,SYS_NO),
     -- if not default to SYS_NO

     lv_where_str :=
     ' AND NVL(deleted_flag,'||NULL_VALUE||') NOT IN(1,2)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_OPERATION_RESOURCES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text       => 'lv_message_text',
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DELETED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => SYS_NO);


      IF lv_return <> 0 THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,lv_error_text);
      END IF;

    -- Check whether routing_name is NULL
    -- then populate the ASSEMBLY_NAME in that

    v_sql_stmt := 36;
    lv_sql_stmt :=
    'UPDATE msc_st_operation_resources '
    ||' SET    routing_name      = assembly_name'
    ||' WHERE  sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      ='||G_IN_PROCESS
    ||' AND    NVL(routing_name,'||''''||NULL_CHAR||''''||')'
    ||'       = '||''''||NULL_CHAR||''''
    ||' AND    batch_id = :lv_batch_id';




         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   -- Error out records where resource_usage is NULL

    v_sql_stmt := 37;
    lv_sql_stmt :=
    'UPDATE    msc_st_operation_resources '
    ||'  SET    process_flag         ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||'  WHERE   NVL(resource_usage,'||NULL_VALUE||') ='||NULL_VALUE
    ||'  AND     sr_instance_code       = :v_instance_code'
    ||'  AND     deleted_flag           = '||SYS_NO
    ||'  AND     process_flag           = '||G_IN_PROCESS
    ||'  AND     batch_id               = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

     -- Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ROUTING_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Derive the ROUTING_SEQUENCE_ID from LOCAL ID table
    lv_return :=
    MSC_ST_UTIL.DERIVE_ROUTING_SEQUENCE_ID
                    (p_table_name     => 'MSC_ST_OPERATION_RESOURCES',
                     p_rtg_col_name   => 'ROUTING_NAME',
                     p_rtg_col_id     =>'ROUTING_SEQUENCE_ID',
                     p_instance_code  => v_instance_code,
                     p_severity       => G_SEV_ERROR,
                     p_message_text   => lv_message_text,
                     p_batch_id       => lv_batch_id,
                     p_debug          => v_debug,
                     p_error_text     => lv_error_text);

    if (lv_return <> 0 )then
       RAISE ex_logging_err;
    end if;


    -- Set the error message

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Organization_id
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_OPERATION_RESOURCES',
                      p_org_partner_name => 'ORGANIZATION_CODE',
                      p_org_partner_id   => 'ORGANIZATION_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_ORGANIZATION,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'OPERATION_SEQ_CODE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_OPERATION_SEQ_CODE );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Default operation_seq_code as 1 if NULL

     lv_where_str := ' AND NVL(operation_seq_code,'||''''||NULL_CHAR||''''
                      ||' ) ='||''''||NULL_CHAR||'''' ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_OPERATION_RESOURCES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'OPERATION_SEQ_CODE',
                     p_debug             => v_debug,
                     p_default_value     => G_OPERATION_SEQ_CODE);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'OPERATION_EFFECTIVITY_DATE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  'SYSDATE' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default effectivity date as SYSDATE if NULL

     lv_where_str :=
     ' AND NVL(operation_effectivity_date, SYSDATE-36500 ) = SYSDATE-36500 '  ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_OPERATION_RESOURCES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'OPERATION_EFFECTIVITY_DATE',
                     p_debug             => v_debug,
                     p_default_value     => 'SYSDATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Derive operation sequence id from local id table

    v_sql_stmt := 38;
    lv_sql_stmt:=
    'UPDATE     msc_st_operation_resources msor'
    ||' SET     operation_sequence_id=    (SELECT local_id'
    ||'                    FROM msc_local_id_setup mlis'
    ||'                    WHERE  mlis.char1 = msor.sr_instance_code'
    ||'                    AND NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                    =   NVL(msor.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                    AND    mlis.char3 = msor.organization_code'
    ||'                    AND    mlis.char4 = msor.routing_name'
    ||'                    AND    mlis.char5 = msor.operation_seq_code'
    ||'                    AND   NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
    ||'                          = NVL(msor.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
    ||'                    AND   mlis.date1 = msor.operation_effectivity_date'
    ||'                    AND    mlis.entity_name = ''OPERATION_SEQUENCE_ID'') '
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        process_flag     = '||G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id';



         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

      -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,ROUTING_NAME,'
                                             ||' OPERATION_SEQ_CODE,EFFECTIVITY_DATE,'
                                             ||' ALTERNATE_ROUTING_DESIGNATOR'  ,
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_ROUTING_OPERATIONS',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_OPERATION_RESOURCES' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


   --Error out record where operation_sequence_id is NULL

    v_sql_stmt := 39;

    lv_sql_stmt :=
    'UPDATE       msc_st_operation_resources'
    ||'  SET      process_flag     = '||G_ERROR_FLG||','
    ||'           error_text   = '||''''||lv_message_text||''''
    ||'  WHERE    NVL(operation_sequence_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'  AND      sr_instance_code = :v_instance_code'
    ||'  AND      process_flag     = '||G_IN_PROCESS
    ||'  AND      batch_id         = :lv_batch_id';



         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL_DEFAULT',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'RESOURCE_SEQ_CODE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_RESOURCE_SEQ_CODE );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Default resource_seq_code as 1 if NULL

     lv_where_str := ' AND NVL(resource_seq_code,'||''''||NULL_CHAR||''''
                      ||' ) ='||''''||NULL_CHAR||'''' ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_OPERATION_RESOURCES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'RESOURCE_SEQ_CODE',
                     p_debug             => v_debug,
                     p_default_value     => G_RESOURCE_SEQ_CODE);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL_DEFAULT',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ALTERNATE_NUMBER',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_ALTERNATE_NUMBER );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default alternate number as 0 if NULL

    lv_where_str := ' AND NVL(alternate_number,'||NULL_VALUE||') ='||NULL_VALUE ;

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_OPERATION_RESOURCES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'ALTERNATE_NUMBER',
                     p_debug             => v_debug,
                     p_default_value     => G_ALTERNATE_NUMBER);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Derive resource seq num from the local  id table

    v_sql_stmt := 40;
    lv_sql_stmt :=
    'UPDATE     msc_st_operation_resources msor'
    ||' SET     resource_seq_num =    (SELECT local_id '
    ||'         FROM msc_local_id_setup mlis'
    ||'         WHERE  mlis.char1 = msor.sr_instance_code'
    ||'         AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'         =    NVL(msor.company_name,'||''''||NULL_CHAR||''''||') '
    ||'         AND    mlis.char3 = msor.organization_code'
    ||'         AND    mlis.char4 = msor.routing_name'
    ||'         AND    mlis.char5 = msor.operation_seq_code'
    ||'         AND    mlis.char6 = msor.resource_seq_code'
    ||'         AND    NVL(mlis.char7,'||''''||NULL_CHAR||''''||') '
    ||'         =      NVL(msor.alternate_routing_designator,'||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(mlis.number1,'||NULL_VALUE||') = NVL(msor.alternate_number,'||NULL_VALUE||')'
    ||'		AND    rownum = 1'	/*change made to solve res req issue*/
    ||'         AND    mlis.entity_name = ''RESOURCE_SEQ_NUM'')'
    ||' WHERE   sr_instance_code = :v_instance_code'
    ||' AND     process_flag     = '||G_IN_PROCESS
    ||' AND     batch_id         = :lv_batch_id';



         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DELETE_FAIL',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

   -- Error out the records where delete flag yes
   -- and resource_seq_num is NULL

    v_sql_stmt := 41;
    lv_sql_stmt :=
    'UPDATE     msc_st_operation_resources '
    ||' SET     process_flag     = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   NVL(resource_seq_num,'||NULL_VALUE||') ='||NULL_VALUE
    ||' AND     deleted_flag     = '||SYS_YES
    ||' AND     sr_instance_code = :v_instance_code'
    ||' AND     process_flag     = '||G_IN_PROCESS
    ||' AND     batch_id         = :lv_batch_id';



         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    -- Derive resource id
    v_sql_stmt := 42;

    lv_sql_stmt :=
    'UPDATE     msc_st_operation_resources msor'
    ||' SET     resource_id = (SELECT local_id'
    ||'                 FROM msc_local_id_setup mlis'
    ||'                 WHERE  mlis.char1 = msor.sr_instance_code'
    ||'                 AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                 =    NVL(msor.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                 AND    mlis.char3 = msor.organization_code'
    ||'                 AND    mlis.char4 = msor.resource_code'
    ||'                 AND    mlis.entity_name = ''RESOURCE_ID'')'
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        deleted_flag     = '|| SYS_NO
    ||' AND        process_flag     = '||G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Derive department id
    v_sql_stmt := 43;

    lv_sql_stmt :=
    'UPDATE     msc_st_operation_resources msor'
    ||' SET     department_id = (SELECT local_id'
    ||'                 FROM msc_local_id_setup mlis'
    ||'                 WHERE  mlis.char1 = msor.sr_instance_code'
    ||'                 AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                 =    NVL(msor.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                 AND    mlis.char3 = msor.organization_code'
    ||'                 AND    mlis.char4 = msor.department_code'
    ||'                 AND    mlis.entity_name = ''DEPARTMENT_ID'')'
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        deleted_flag     = '|| SYS_NO
    ||' AND        process_flag     = '||G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||' ORGANIZATION_CODE,DEPARTMENT_CODE'
                                             ||' OR RESOURCE_CODE' ,
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_DEPARTMENT_RESOURCES',
                      p_token3            => 'CHILD_TABLE' ,
                      p_token_value3      => 'MSC_ST_OPERATION_RESOURCES' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Error out records where resource_id or department_id is NULL

    v_sql_stmt := 44;
    lv_sql_stmt :=
    'UPDATE       msc_st_operation_resources'
    ||'  SET       process_flag    ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||'  WHERE   (NVL(resource_id,'||NULL_VALUE||') ='|| NULL_VALUE
    ||'  OR        NVL(department_id,'||NULL_VALUE||') ='|| NULL_VALUE||')'
    ||'  AND      sr_instance_code       = :v_instance_code'
    ||'  AND      process_flag           ='||G_IN_PROCESS
    ||'  AND      batch_id               = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


  lv_sql_stmt :=
    'UPDATE     msc_st_operation_resources msor'
    ||' SET     setup_id=  (SELECT local_id'
    ||'                        FROM msc_local_id_setup mlis'
    ||'                        WHERE  mlis.char1 = msor.sr_instance_code'
    ||'                        AND NVL(mlis.char2,'||''''||NULL_CHAR||''''||')'
    ||' =NVL(msor.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                        AND    mlis.char3 = msor.organization_code'
    ||'                        AND    mlis.char4 = msor.setup_code'
    ||'                        AND    mlis.entity_name = ''SETUP_ID'')'
    ||' WHERE      msor.sr_instance_code = :v_instance_code'
    ||' AND        NVL(msor.setup_code,'||''''||NULL_CHAR||''''||')'
    ||'            <> '||''''||NULL_CHAR||''''
    ||' AND        msor.process_flag     ='|| G_IN_PROCESS
    ||' AND        msor.batch_id         = :lv_batch_id';

            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

  -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SETUP_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_RESOURCE_SETUPS',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_OPERATION_RESOURCES' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
      v_sql_stmt := 06;

      lv_sql_stmt :=
      ' UPDATE     msc_st_operation_resources '
      ||' SET      process_flag     ='||G_ERROR_FLG||','
      ||'          error_text   = '||''''||lv_message_text||''''
      ||' WHERE    NVL(setup_id,'||NULL_VALUE||') ='|| NULL_VALUE
      ||' AND      setup_code is not NULL'
      ||' AND      deleted_flag     = '||SYS_NO
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      sr_instance_code = :v_instance_code'
      ||' AND      batch_id         =  :lv_batch_id';



            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;



    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'BASIS_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_BASIS_TYPE  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

-- Default basis type as 1 if INVALID

    lv_where_str :=
    ' AND NVL(basis_type,'||NULL_VALUE||')'
    ||' NOT IN (1,2,3,4,5) AND deleted_flag = 2' ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_OPERATION_RESOURCES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'BASIS_TYPE',
                     p_debug             => v_debug,
                     p_default_value     => G_BASIS_TYPE);
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PRINCIPAL_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_PRINCIPAL_FLAG  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Default principal_flag as 1 if NOT IN (1,2)

     lv_where_str := ' AND NVL(principal_flag,'||NULL_VALUE||')'||' NOT IN (1,2)'
                       ||'AND deleted_flag = 2';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_OPERATION_RESOURCES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'PRINCIPAL_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => G_PRINCIPAL_FLAG);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     --Call to customised validation.

      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_OPERATION_RESOURCES',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Now generate resource_seq_num
    -- Its an update of resource_seq_num with the resource_seq_code

     v_sql_stmt := 45;

     OPEN c7(lv_batch_id);
     FETCH c7 BULK COLLECT INTO lb_rowid ;

     IF c7%ROWCOUNT > 0  THEN

    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_operation_resources
        SET    resource_seq_num     =
               to_number(decode(length(rtrim(resource_seq_code,'0123456789')),
                          NULL,resource_seq_code,'1'))
        WHERE  rowid                = lb_rowid(j);

    v_sql_stmt := 46;

   FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
  -- Insert into the LID table  with the  user defined key

       INSERT INTO  msc_local_id_setup
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char3,
       char4,
       char5,
       char6,
       char7,
       number1,
       SOURCE_ORGANIZATION_ID,
       SOURCE_ROUTING_SEQUENCE_ID ,
       SOURCE_OPERATION_SEQUENCE_ID  ,
       SOURCE_RESOURCE_SEQ_NUM  ,
       SOURCE_RESOURCE_ID ,
       SOURCE_DEPARTMENT_ID  ,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
      SELECT
       resource_seq_num,
       st_transaction_id,
       v_instance_id,
       'RESOURCE_SEQ_NUM',
       data_source_type,
       v_instance_code,
       company_name,
       organization_code,
       routing_name,
       operation_seq_code,
       resource_seq_code,
       alternate_routing_designator,
       alternate_number,
       SOURCE_ORGANIZATION_ID,
       SOURCE_ROUTING_SEQUENCE_ID ,
       SOURCE_OPERATION_SEQUENCE_ID  ,
       SOURCE_RESOURCE_SEQ_NUM  ,
       SOURCE_RESOURCE_ID ,
       SOURCE_DEPARTMENT_ID  ,
       v_current_date,
       v_current_user,
       v_current_date,
       v_current_user
       FROM msc_st_operation_resources
      WHERE rowid = lb_rowid(j) ;

    END IF;
  CLOSE c7;

   -- Update resource seq num from the local  id table

    v_sql_stmt := 47;
    lv_sql_stmt :=
    'UPDATE     msc_st_operation_resources msor'
    ||' SET     resource_seq_num =    (SELECT local_id '
    ||'         FROM msc_local_id_setup mlis'
    ||'         WHERE  mlis.char1 = msor.sr_instance_code'
    ||'         AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'         =    NVL(msor.company_name,'||''''||NULL_CHAR||''''||') '
    ||'         AND    mlis.char3 = msor.organization_code'
    ||'         AND    mlis.char4 = msor.routing_name'
    ||'         AND    mlis.char5 = msor.operation_seq_code'
    ||'         AND    mlis.char6 = msor.resource_seq_code'
    ||'         AND    NVL(mlis.char7,'||''''||NULL_CHAR||''''||') '
    ||'         =      NVL(msor.alternate_routing_designator,'||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(mlis.number1,'||NULL_VALUE||') = NVL(msor.alternate_number,'||NULL_VALUE||')'
    ||'		AND    rownum = 1'	/*change made to solve res req issue*/
    ||'         AND    mlis.entity_name = ''RESOURCE_SEQ_NUM'')'
    ||' WHERE   sr_instance_code = :v_instance_code'
    ||' AND     NVL(resource_seq_num,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND     process_flag     = '||G_IN_PROCESS
    ||' AND     batch_id         = :lv_batch_id';



         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


     OPEN c8(lv_batch_id);
     FETCH c8 BULK COLLECT INTO lb_rowid ;

    v_sql_stmt := 48;

    IF c8%ROWCOUNT > 0  THEN
    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST


    INSERT INTO  msc_st_operation_resource_seqs
    ( routing_sequence_id,
      operation_sequence_id,
      resource_seq_num,
      schedule_flag,
      resource_offset_percent,
      department_id,
      deleted_flag,
      organization_id,
      sr_instance_id,
      activity_group_id,
       refresh_id,
      last_update_date,
      last_updated_by,
      creation_date,
      created_by  )
    SELECT
     routing_sequence_id,
     operation_sequence_id,
     resource_seq_num,
     schedule_flag,
     resource_offset_percent,
     department_id,
     deleted_flag,
     organization_id,
     v_instance_id,
     activity_group_id,
     v_refresh_id,
     last_update_date,
     last_updated_by,
     creation_date,
     created_by
     FROM msc_st_operation_resources
     WHERE rowid = lb_rowid(j) ;

   END IF ;
   CLOSE c8 ;

    -- Set the process flag as Valid and derive sr_instance_id
    lv_return :=
    MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name   => 'MSC_ST_OPERATION_RESOURCES',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug,
                               p_batch_id       => lv_batch_id);

      IF lv_return < 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- At the end calling  the LOG_ERROR for logging all errored out records

   lv_return :=
   MSC_ST_UTIL.LOG_ERROR(p_table_name    =>'MSC_ST_OPERATION_RESOURCES',
                         p_instance_code =>v_instance_code,
                         p_row           =>lv_column_names,
                         p_severity      =>G_SEV_ERROR,
                         p_message_text  =>NULL,
                         p_error_text    =>lv_error_text,
                         p_debug         => v_debug,
                         p_batch_id      => lv_batch_id  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  COMMIT;

  END LOOP;

   -- From here added for OSFM Integration
   -- Pre processing for MSC_ST_OPERATION_NETWORKS

   --Duplicate records check for the records whose source is XML

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 51;

  lv_sql_stmt :=
  'UPDATE    msc_st_operation_networks mson1 '
  ||' SET       process_flag = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE     message_id < ( SELECT max(message_id) '
  ||'          FROM msc_st_operation_networks mson2'
  ||'          WHERE mson2.assembly_name      = mson1.assembly_name'
  ||'          AND   mson2.organization_code  = mson1.organization_code'
  ||'          AND   mson2.from_operation_seq_code = mson1.from_operation_seq_code'
  ||'          AND   mson2.to_operation_seq_code = mson1.to_operation_seq_code'
  ||'          AND   mson2.sr_instance_code   = mson1.sr_instance_code'
  ||'          AND   NVL(mson2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(mson1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(mson2.routing_name,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(mson1.routing_name, '||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(mson2.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(mson1.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'          AND   mson2.process_flag   ='||G_IN_PROCESS
  ||'          AND    NVL(mson2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
  ||' AND     mson1.process_flag = '||G_IN_PROCESS
  ||' AND     mson1.sr_instance_code = :v_instance_code'
  ||' AND     NVL(mson1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;



  --Duplicate records check for the records whose source is batch load

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 52;

  lv_sql_stmt :=
  'UPDATE   msc_st_operation_networks mson1'
  ||' SET      process_flag = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE    EXISTS ( SELECT 1 '
  ||'          FROM msc_st_operation_networks mson2'
  ||'          WHERE mson2.assembly_name      = mson1.assembly_name'
  ||'          AND   mson2.organization_code  = mson1.organization_code'
  ||'          AND   mson2.from_operation_seq_code = mson1.from_operation_seq_code'
  ||'          AND   mson2.to_operation_seq_code = mson1.to_operation_seq_code'
  ||'          AND   mson2.sr_instance_code   = mson1.sr_instance_code'
  ||'          AND   NVL(mson2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(mson1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(mson2.routing_name,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(mson1.routing_name, '||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(mson2.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(mson1.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'          AND   mson2.process_flag   ='||G_IN_PROCESS
  ||'          AND NVL(mson2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||'          AND mson2.rowid <> mson1.rowid )'
  ||'  AND     mson1.process_flag          = '||G_IN_PROCESS
  ||'  AND     mson1.sr_instance_code       = :v_instance_code'
  ||'  AND     NVL(mson1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  COMMIT;

  lv_column_names :=
   '  FROM_OPERATION_SEQ_CODE      ||''~''||'
 ||'  FROM_OP_EFFECTIVITY_DATE     ||''~''||'
 ||'  FROM_OP_DISABLE_DATE         ||''~''||'
 ||'  TO_OPERATION_SEQ_CODE        ||''~''||'
 ||'  TO_OP_EFFECTIVITY_DATE       ||''~''||'
 ||'  TO_OP_DISABLE_DATE           ||''~''||'
 ||'  ROUTING_NAME                 ||''~''||'
 ||'  ASSEMBLY_NAME                ||''~''||'
 ||'  ALTERNATE_ROUTING_DESIGNATOR ||''~''||'
 ||'  TRANSITION_TYPE              ||''~''||'
 ||'  PLANNING_PCT                 ||''~''||'
 ||'  CUMMULATIVE_PCT              ||''~''||'
 ||'  DISABLE_DATE                 ||''~''||'
 ||'  EFECTIVITY_DATE             ||''~''||'
 ||'  ORGANIZATION_CODE            ||''~''||'
 ||'  SR_INSTANCE_CODE             ||''~''||'
 ||'  DELETED_FLAG                 ||''~''||'
 ||'  COMPANY_NAME ';



   -- Now processing in batch
    LOOP

      v_sql_stmt := 53;

      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;


      v_sql_stmt := 54;

      lv_sql_stmt :=
      ' UPDATE msc_st_operation_networks '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN  c9(lv_batch_id);
      FETCH c9 BULK COLLECT INTO lb_rowid;
      CLOSE c9;

      v_sql_stmt := 55;

      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_operation_networks
      SET  st_transaction_id = msc_st_operation_networks_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Check whether delete flag value is in (1,2),if not default to SYS_NO

   lv_where_str :=
   ' AND NVL(deleted_flag,'||NULL_VALUE||') NOT IN(1,2)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_OPERATION_NETWORKS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DELETED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


     -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PLANNING_PCT');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out the records whose PLANNING_PCT is NULL

     v_sql_stmt := 56;
    lv_sql_stmt :=
    'UPDATE    msc_st_operation_networks'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  NVL(PLANNING_PCT,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ASSEMBLY_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out the records whose Assembly Name is NULL

     v_sql_stmt := 57;
    lv_sql_stmt :=
    'UPDATE    msc_st_operation_networks'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  NVL(assembly_name,'||''''||NULL_CHAR||''''||') '
    ||'         = '||''''||NULL_CHAR||''''
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

     -- Now we will check whether Routing Name is NULL , if it is NULL we will populate the
     -- ASSEMBLY NAME in ROUTING_NAME column for all such records

    v_sql_stmt := 58;

    lv_sql_stmt :=
    'UPDATE msc_st_operation_networks '
    ||' SET    routing_name = assembly_name'
    ||' WHERE  sr_instance_code = :v_instance_code'
    ||' AND    process_flag     = '||G_IN_PROCESS
    ||' AND    NVL(routing_name,'||''''||NULL_CHAR||''''||') '
    ||'         = '||''''||NULL_CHAR||''''
    ||' AND    batch_id         = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;



    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,ROUTING_NAME',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_ROUTINGS',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_OPERATION_NETWORKS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Derive the ROUTING_SEQUENCE_ID from LOCAL ID table
    v_sql_stmt := 59;
    lv_return :=
    MSC_ST_UTIL.DERIVE_ROUTING_SEQUENCE_ID
                      (p_table_name     => 'MSC_ST_OPERATION_NETWORKS',
                       p_rtg_col_name   => 'ROUTING_NAME',
                       p_rtg_col_id     => 'ROUTING_SEQUENCE_ID',
                       p_instance_code  => v_instance_code,
                       p_severity       => G_SEV_ERROR,
                       p_message_text   => lv_message_text,
                       p_batch_id       => lv_batch_id,
                       p_debug          => v_debug,
                       p_error_text     => lv_error_text);

    if (lv_return <> 0 )then
       RAISE ex_logging_err;
    end if;



    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'FROM_OP_EFFECTIVITY_DATE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => 'SYSDATE' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- The effectivity date does not get defaulted to sysdate in ERP collection
/*    -- Default from operation effectivity date as SYSDATE if NULL

     v_sql_stmt := 60;
     lv_where_str :=
     ' AND NVL(from_op_effectivity_date,SYSDATE-36500 ) = SYSDATE-36500 ' ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_OPERATION_NETWORKS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'FROM_OP_EFFECTIVITY_DATE',
                     p_debug             => v_debug,
                     p_default_value     => 'SYSDATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
*/

   -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'TO_OP_EFFECTIVITY_DATE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => 'SYSDATE' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default to operation effectivity date as SYSDATE if NULL
     v_sql_stmt := 61;
     lv_where_str :=
     ' AND NVL(to_op_effectivity_date,SYSDATE-36500 ) = SYSDATE-36500 ' ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_OPERATION_NETWORKS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'TO_OP_EFFECTIVITY_DATE',
                     p_debug             => v_debug,
                     p_default_value     => 'SYSDATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'EFECTIVITY_DATE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => 'SYSDATE' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default effectivity date as SYSDATE if NULL
     v_sql_stmt := 62;
     lv_where_str :=
     ' AND NVL(efectivity_date,SYSDATE-36500 ) = SYSDATE-36500 ' ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_OPERATION_NETWORKS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'EFECTIVITY_DATE',
                     p_debug             => v_debug,
                     p_default_value     => 'SYSDATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;



   -- from_operation_seq_code or to_operation_seq_code cannot be null.
   -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'FROM_OPERATION_SEQ_CODE OR '
                                           ||'TO_OPERATION_SEQ_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out the records whose from_operation_seq_code or to_operation_seq_code is NULL

    v_sql_stmt := 63;
    lv_sql_stmt :=
    'UPDATE    msc_st_operation_networks'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE ( NVL(from_operation_seq_code,'||NULL_VALUE||') ='||NULL_VALUE
    ||' OR      NVL(to_operation_seq_code,'||NULL_VALUE||') ='||NULL_VALUE ||')'
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;



   -- from op_seq_code and to_op_seq_codes cannot be same
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_FROM_TO_SAME',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'TO_OPERATION_SEQ_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out the records whose from_operation_seq_code is same as to_op_seq_code

     v_sql_stmt := 64;
    lv_sql_stmt :=
    'UPDATE    msc_st_operation_networks'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  NVL(to_operation_seq_code,'||NULL_VALUE||') = NVL(from_operation_seq_code,'||NULL_VALUE||')'
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


   -- Derive from_operation_sequence id

    v_sql_stmt := 65;
    lv_sql_Stmt :=
    'UPDATE     msc_st_operation_networks mson'
    ||' SET     from_op_seq_id=  (SELECT local_id'
    ||'         FROM msc_local_id_setup mlis'
    ||'         WHERE  mlis.char1 = mson.sr_instance_code'
    ||'         AND     NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'          =    NVL(mson.company_name,'||''''||NULL_CHAR||''''||') '
    ||'         AND    mlis.char3 = mson.organization_code'
    ||'         AND    mlis.char4 = mson.routing_name'
    ||'         AND    mlis.char5 = mson.from_operation_seq_code'
    ||'         AND   NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
    ||'           =   NVL(mson.alternate_routing_designator,'||''''||NULL_CHAR||''''||')'
    ||'         AND    mlis.date1 = mson.FROM_OP_EFFECTIVITY_DATE'
    ||'         AND    mlis.entity_name = ''OPERATION_SEQUENCE_ID'' '
    ||'         AND    mlis.instance_id = '||v_instance_id||')'
    ||'  WHERE      sr_instance_code = :v_instance_code'
    ||'  AND        process_flag     ='||G_IN_PROCESS
    ||'  AND        batch_id         = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


   -- from_op_seq_id cannot be null. Error out the records with null value for them.
   -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,ROUTING_NAME,'
                                             ||' FROM_OPERATION_SEQ_CODE,FROM_OP_EFFECTIVITY_DATE,'
                                             ||' ALTERNATE_ROUTING_DESIGNATOR'  ,
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_ROUTING_OPERATIONS',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_OPERATION_NETWORKS' );

     -- Error out the records whose from_op_seq_id is NULL

    v_sql_stmt := 66;
    lv_sql_stmt :=
    'UPDATE    msc_st_operation_networks'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  NVL(from_op_seq_id,'||NULL_VALUE||') ='||NULL_VALUE
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   -- Derive to_operation_sequence id

    v_sql_stmt := 67;
    lv_sql_Stmt :=
    'UPDATE     msc_st_operation_networks mson'
    ||' SET     to_op_seq_id=  (SELECT local_id'
    ||'         FROM msc_local_id_setup mlis'
    ||'         WHERE  mlis.char1 = mson.sr_instance_code'
    ||'         AND     NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'          =    NVL(mson.company_name,'||''''||NULL_CHAR||''''||') '
    ||'         AND    mlis.char3 = mson.organization_code'
    ||'         AND    mlis.char4 = mson.routing_name'
    ||'         AND    mlis.char5 = mson.to_operation_seq_code'
    ||'         AND   NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
    ||'           =   NVL(mson.alternate_routing_designator,'||''''||NULL_CHAR||''''||')'
    ||'         AND    mlis.date1 = mson.TO_OP_EFFECTIVITY_DATE'
    ||'         AND    mlis.entity_name = ''OPERATION_SEQUENCE_ID'' '
    ||'         AND    mlis.instance_id = '||v_instance_id||')'
    ||'  WHERE      sr_instance_code = :v_instance_code'
    ||'  AND        process_flag     ='||G_IN_PROCESS
    ||'  AND        batch_id         = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


   -- to_op_seq_id cannot be null. Error out the records with null value for them.
   -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,ROUTING_NAME,'
                                             ||' TO_OPERATION_SEQ_CODE,TO_OP_EFFECTIVITY_DATE,'
                                             ||' ALTERNATE_ROUTING_DESIGNATOR'  ,
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_ROUTING_OPERATIONS',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_OPERATION_NETWORKS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out the records whose to_op_seq_id is NULL

    v_sql_stmt := 68;
    lv_sql_stmt :=
    'UPDATE    msc_st_operation_networks'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  NVL(to_op_seq_id,'||NULL_VALUE||') ='||NULL_VALUE
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


   -- populating from_op_seq_num and to_op_seq_num
   v_sql_stmt := 69;
    lv_sql_Stmt :=
    'UPDATE     msc_st_operation_networks mson'
    ||' SET    from_op_seq_num= to_number(decode(length(rtrim(from_operation_seq_code,''0123456789'')),'
    ||'        NULL,from_operation_seq_code,''1'')),'
    ||'        to_op_seq_num= to_number(decode(length(rtrim(to_operation_seq_code,''0123456789'')),'
    ||'        NULL,to_operation_seq_code,''1''))'
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        process_flag     ='||G_IN_PROCESS
    ||' AND        deleted_flag     <> 1'
    ||' AND        batch_id         = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;



   -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'TRANSITION_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_TRANSITION_TYPE);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Defualt transition type to 2(i.e. alternate) if not in (1,2)
     v_sql_stmt := 70;
     lv_where_str :=
     ' AND NVL(transition_type,'||NULL_VALUE||') NOT IN (1,2)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name       => 'MSC_ST_OPERATION_NETWORKS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'TRANSITION_TYPE',
                     p_debug             => v_debug,
                     p_default_value     => G_TRANSITION_TYPE);


      IF lv_return <> 0 THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,lv_error_text);
      END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_END_GT_ST_DATE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'EFFECTIVITY_DATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Disable date should be greater than effectivity date if a value is there for disable date

     v_sql_stmt := 71;
    lv_sql_stmt :=
    'UPDATE    msc_st_operation_networks'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  NVL(DISABLE_DATE,SYSDATE-36500) <>  SYSDATE-36500'
    ||' AND DISABLE_DATE <= EFECTIVITY_DATE '
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND        deleted_flag     <> 1'
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    --Call to customised validation.

      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_OPERATION_NETWORKS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   COMMIT;
 END LOOP;

    -- There should be at the max only one primary path from a from_operation_seq_code
    -- Else error out all the records for that from_operation_seq_code

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_MULTI_PRI_PATH',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'TRANSITION_TYPE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     v_sql_stmt := 72;
    lv_sql_stmt :=
  'UPDATE   msc_st_operation_networks mson1'
  ||' SET      process_flag = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE  1 <  ( SELECT COUNT(*) '
  ||'          FROM msc_st_operation_networks mson2'
  ||'          WHERE mson2.assembly_name      = mson1.assembly_name'
  ||'          AND   mson2.organization_code  = mson1.organization_code'
  ||'          AND   mson2.from_operation_seq_code  = mson1.from_operation_seq_code'
  ||'          AND   mson2.sr_instance_code   = mson1.sr_instance_code'
  ||'          AND   NVL(mson2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(mson1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'          AND   mson2.transition_type = 1 '
  ||'          AND   NVL(mson2.routing_name,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(mson1.routing_name, '||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(mson2.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(mson1.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'          AND   mson2.process_flag   ='||G_IN_PROCESS
  ||'          AND   mson2.deleted_flag <>1 '
  ||'         GROUP BY sr_instance_code,company_name,organization_code,from_operation_seq_code,'
  ||'         routing_name,assembly_name, alternate_routing_designator )'
  ||'  AND     mson1.process_flag          = '||G_IN_PROCESS
  ||'  AND     mson1.deleted_flag <>1 '
  ||'  AND     mson1.sr_instance_code       = :v_instance_code';



         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

    -- The summation of the planning_pct's from a from_operation_sed_code should be exactly 100.
    -- Else error out all the records for that from_operation_seq_code

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_INVALID_PLANNING_PCT',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PLANNING_PCT');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     v_sql_stmt := 73;
    lv_sql_stmt :=
  'UPDATE   msc_st_operation_networks mson1'
  ||' SET      process_flag = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE 100 <>   ( SELECT SUM(planning_pct) '
  ||'          FROM msc_st_operation_networks mson2'
  ||'          WHERE mson2.assembly_name      = mson1.assembly_name'
  ||'          AND   mson2.organization_code  = mson1.organization_code'
  ||'          AND   mson2.from_operation_seq_code  = mson1.from_operation_seq_code'
  ||'          AND   mson2.sr_instance_code   = mson1.sr_instance_code'
  ||'          AND   NVL(mson2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(mson1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(mson2.routing_name,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(mson1.routing_name, '||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(mson2.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(mson1.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'          AND   mson2.process_flag   ='||G_IN_PROCESS
  ||'          AND   mson2.deleted_flag <>1 '
  ||'         GROUP BY sr_instance_code,company_name,organization_code,from_operation_seq_code,'
  ||'         routing_name,assembly_name, alternate_routing_designator )'
  ||'  AND     mson1.process_flag          = '||G_IN_PROCESS
  ||'  AND     mson1.deleted_flag <>1 '
  ||'  AND     mson1.sr_instance_code       = :v_instance_code';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  -- Set the process flag as Valid and derive sr_instance_id
    lv_return :=
    MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name   => 'MSC_ST_OPERATION_NETWORKS',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug);

      IF lv_return < 0 THEN
        RAISe ex_logging_err;
      END IF;


    -- At the end calling  the LOG_ERROR for logging all errored out records

   lv_return :=
   MSC_ST_UTIL.LOG_ERROR(p_table_name    => 'MSC_ST_OPERATION_NETWORKS',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug );

    IF lv_return < 0 THEN
        RAISe ex_logging_err;
    END IF;

  -- till here added for pre processing Opertion Networks (OSFM Integration)


  EXCEPTION
    WHEN too_many_rows THEN
         lv_error_text := substr('MSC_CL_PRE_PROCESS.LOAD_ROUTING'||'('
                        ||v_sql_stmt||')'|| SQLERRM, 1, 240);
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
         ROLLBACK ;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
        ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text :=substr('MSC_CL_PRE_PROCESS.LOAD_ROUTING'||'('
                      ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END LOAD_ROUTING ;


 /*==========================================================================+
  | DESCRIPTION  : This function inserts records into process effectivity    |
  +==========================================================================*/

  PROCEDURE  LOAD_PROCESS_EFFECTIVITY IS

  lv_error_text     VARCHAR2(250);
  lv_sql_stmt       VARCHAR2(5000);


  BEGIN
  -- populating preference for the bugfix 2862276
  v_sql_stmt := 1;
  lv_sql_stmt :=
  'INSERT INTO msc_st_process_effectivity'
  ||'( item_id,'
  ||' organization_id,'
  ||' bill_sequence_id,'
  ||' routing_sequence_id,'
  ||' effectivity_date,'
  ||' line_id,'
  ||' preference,'
  ||' deleted_flag,'
  ||' sr_instance_id,'
  ||' refresh_id, '
  ||' ITEM_PROCESS_COST,'
  ||' last_update_date,'
  ||' last_updated_by, '
  ||' creation_date,'
  ||' created_by  )'
  ||'  SELECT '
  ||'  assembly_item_id,'
  ||'  organization_id,'
  ||'  bill_sequence_id,'
  ||'  routing_sequence_id,'
  ||'  sysdate,'
  ||   NULL_VALUE||','
  ||'  nvl(priority,(decode(alternate_bom_designator,NULL, DECODE( alternate_routing_designator,NULL, 1,2),2))),'
  ||'  deleted_flag,'
  ||   v_instance_id||','
  ||'  REFRESH_ID,'
  ||'  ITEM_PROCESS_COST ,'
  ||'  last_update_date,'
  ||'  last_updated_by, '
  ||'  creation_date,'
  ||'  created_by '
  ||'   FROM msc_st_routings'
  ||'   WHERE sr_instance_id  = :v_instance_id';




            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_id;



   v_sql_stmt := 2;
  lv_sql_stmt :=
  'INSERT INTO msc_st_process_effectivity'
  ||'( item_id,'
  ||' organization_id,'
  ||' bill_sequence_id,'
  ||' effectivity_date,'
  ||' line_id,'
  ||' preference,'
  ||' deleted_flag,'
  ||' sr_instance_id,'
  ||' refresh_id,'
  ||' ITEM_PROCESS_COST,'
  ||' last_update_date,'
  ||' last_updated_by, '
  ||' creation_date,'
  ||' created_by  )'
  ||'  SELECT '
  ||'  assembly_item_id,'
  ||'  organization_id,'
  ||'  bill_sequence_id,'
  ||'  sysdate,'
  ||   NULL_VALUE||','
  ||'  decode(msb.alternate_bom_designator,NULL,1,2),'
  ||'  deleted_flag,'
  ||   v_instance_id||','
  ||'  REFRESH_ID,'
  ||'  ITEM_PROCESS_COST ,'
  ||'  last_update_date,'
  ||'  last_updated_by, '
  ||'  creation_date,'
  ||'  created_by '
  ||'   FROM msc_st_boms msb'
  ||'   WHERE sr_instance_id  = :v_instance_id'
  ||'   AND   NOT EXISTS ( SELECT 1 from msc_st_routings msr '
  ||'                      WHERE  msr.bill_sequence_id = msb.bill_sequence_id '
  ||'                      AND    msr.sr_instance_id = msb.sr_instance_id )';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_id;


   COMMIT;

  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      lv_error_text :=substr('MSC_CL_PRE_PROCESS.LOAD_PROCESS_EFFECTIVITY'||'('
                      ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);

  END LOAD_PROCESS_EFFECTIVITY ;


/*==========================================================================+
| DESCRIPTION  : This procedure validates Work Order supply related reocrds |
|                in the msc_st_supplies table. Order_types considered are   |
|                Supply Source                    Order Type                |
|                --------------------------------------------               |
|                Discrete Job                     3                         |
|                Non-Standard Job                 7                         |
|                Flow Schedule                   27                         |
|                Discrete job by-product         14                         |
|                Nonstandard job by-product      15                         |
+==========================================================================*/
  PROCEDURE LOAD_WO_SUPPLY IS
  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid               RowidTab;
  lv_return              NUMBER;
  lv_error_text          VARCHAR2(250);
  lv_where_str           VARCHAR2(5000);
  lv_sql_stmt            VARCHAR2(5000);
  lv_column_names        VARCHAR2(5000);                   --stores concatenated column names
  lv_message_text        msc_errors.error_text%TYPE;
  lv_batch_id            msc_st_supplies.batch_id%TYPE;
  ex_logging_err         EXCEPTION;

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_supplies
    WHERE  order_type              IN(3,7,27,14,15)
    AND    process_flag            IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    NVL(batch_id,NULL_VALUE)=p_batch_id
    AND    sr_instance_code        = v_instance_code;

  CURSOR c2(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_supplies
    WHERE  NVL(wip_entity_id,NULL_VALUE) = NULL_VALUE
    AND    process_flag                  = G_IN_PROCESS
    AND    NVL(batch_id,NULL_VALUE)      =p_batch_id
    AND    sr_instance_code              = v_instance_code;

  CURSOR c3(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_supplies
    WHERE  NVL(schedule_group_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag                      = SYS_NO
    AND    process_flag                      = G_IN_PROCESS
    AND    NVL(batch_id,NULL_VALUE)          = p_batch_id
    AND    sr_instance_code                  = v_instance_code
    GROUP BY sr_instance_code,company_name,organization_code,schedule_group_name;

  CURSOR c4(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_supplies
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(JOB_OP_SEQ_NUM, NULL_VALUE) = NULL_VALUE
    AND    NVL(JOB_OP_SEQ_CODE, NULL_CHAR) <> NULL_CHAR
    AND    order_type        IN (3,7,14,15)
    AND    deleted_flag     = SYS_NO;

  BEGIN

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML for
    --WO supplies
    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE  msc_st_supplies mss1'
    ||' SET     process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   message_id <  (SELECT MAX(message_id)'
    ||'         FROM   msc_st_supplies mss2'
    ||'         WHERE  mss2.sr_instance_code'
    ||'                = mss1.sr_instance_code'
    ||'         AND    NVL(mss2.company_name,'||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mss1.company_name,'||''''||NULL_CHAR||''''||')'
    ||'         AND    mss2.wip_entity_name = mss1.wip_entity_name '
    ||'         AND    mss2.order_type    = mss1.order_type'
    ||'         AND    mss2.process_flag      = '||G_IN_PROCESS
    ||'         AND    mss2.organization_code  = mss1.organization_code'
    ||'         AND    NVL(mss2.message_id,'||NULL_VALUE||')<>'||NULL_VALUE||')'
    ||' AND    mss1.order_type         IN(3,7,27,14,15)'
    ||' AND    mss1.process_flag       = '||G_IN_PROCESS
    ||' AND    mss1.sr_instance_code   = :v_instance_code'
    ||' AND    NVL(mss1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.
    v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE  msc_st_supplies mss1 '
    ||' SET     process_flag  = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   EXISTS( SELECT 1 '
    ||'         FROM   msc_st_supplies mss2'
    ||'         WHERE  mss2.sr_instance_code'
    ||'                = mss1.sr_instance_code'
    ||'         AND    NVL(mss2.company_name,   '||''''||NULL_CHAR||''''||')= '
    ||'                NVL(mss1.company_name,   '||''''||NULL_CHAR||''''||')'
    ||'         AND    mss2.wip_entity_name = mss1.wip_entity_name '
    ||'         AND    mss2.order_type    = mss1.order_type'
    ||'         AND    mss2.process_flag  = '||G_IN_PROCESS
    ||'         AND    mss2.organization_code = mss1.organization_code'
    ||'         AND    NVL(mss2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||'         GROUP BY sr_instance_code,wip_entity_name,organization_code,company_name,'
    ||'                order_type'
    ||'         HAVING COUNT(*) > 1)'
    ||' AND     mss1.order_type    IN (3,7,27,14,15)'
    ||' AND     mss1.process_flag     = '||G_IN_PROCESS
    ||' AND     mss1.sr_instance_code = :v_instance_code'
    ||' AND     NVL(mss1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

    lv_column_names :=
    'ITEM_NAME                      ||''~''||'
    ||'ORGANIZATION_CODE            ||''~''||'
    ||'NEW_SCHEDULE_DATE            ||''~''||'
    ||'FIRM_PLANNED_TYPE            ||''~''||'
    ||'WIP_ENTITY_NAME              ||''~''||'
    ||'SR_INSTANCE_CODE             ||''~''||'
    ||'REVISION                     ||''~''||'
    ||'UNIT_NUMBER                  ||''~''||'
    ||'NEW_WIP_START_DATE           ||''~''||'
    ||'NEW_ORDER_QUANTITY           ||''~''||'
    ||'ALTERNATE_BOM_DESIGNATOR     ||''~''||'
    ||'ALTERNATE_ROUTING_DESIGNATOR ||''~''||'
    ||'LINE_CODE                    ||''~''||'
    ||'PROJECT_NUMBER               ||''~''||'
    ||'TASK_NUMBER                  ||''~''||'
    ||'PLANNING_GROUP               ||''~''||'
    ||'SCHEDULE_GROUP_NAME          ||''~''||'
    ||'BUILD_SEQUENCE               ||''~''||'
    ||'WO_LATENESS_COST             ||''~''||'
    ||'IMPLEMENT_PROCESSING_DAYS    ||''~''||'
    ||'LATE_SUPPLY_DATE             ||''~''||'
    ||'LATE_SUPPLY_QTY              ||''~''||'
    ||'QTY_SCRAPPED                 ||''~''||'
    ||'QTY_COMPLETED                ||''~''||'
    ||'WIP_STATUS_CODE              ||''~''||'
    ||'BILL_NAME                    ||''~''||'
    ||'ROUTING_NAME                 ||''~''||'
    ||'DELETED_FLAG                 ||''~''||'
    ||'COMPANY_NAME                 ||''~''||'
    ||'ORDER_TYPE                   ||''~''||'
    ||'ORDER_NUMBER';

    LOOP
      v_sql_stmt := 03;
      SELECT msc_st_batch_id_s.NEXTVAL
      INTO   lv_batch_id
      FROM   dual;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      ' UPDATE   msc_st_supplies '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    order_type IN(3,7,27,14,15)'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;

      v_sql_stmt := 03;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_supplies
      SET    st_transaction_id   = msc_st_supplies_s.NEXTVAL,
             refresh_id          = v_refresh_id,
             last_update_date    = v_current_date,
             last_updated_by     = v_current_user,
             creation_date       = v_current_date,
             created_by          = v_current_user
      WHERE  rowid               = lb_rowid(j);

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      ' AND NVL(deleted_flag,'||NULL_VALUE||') NOT IN(1,2)';
      --Log a warning for those records where the deleted_flag has a value other
      --SYS_NO
      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_SUPPLIES',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'DELETED_FLAG',
                      p_debug             => v_debug,
                      p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Organization_id
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_SUPPLIES',
                      p_org_partner_name => 'ORGANIZATION_CODE',
                      p_org_partner_id   => 'ORGANIZATION_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_ORGANIZATION,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Inventory_item_id
      lv_return := MSC_ST_UTIL.DERIVE_ITEM_ID
                     (p_table_name       => 'MSC_ST_SUPPLIES',
                      p_item_col_name    => 'ITEM_NAME',
                      p_item_col_id      => 'INVENTORY_ITEM_ID',
                      p_instance_id      => v_instance_id,
                      p_instance_code    => v_instance_code,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'NEW_SCHEDULE_DATE OR NEW_ORDER_QUANTITY');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      'UPDATE msc_st_supplies '
      ||' SET   error_text   = '||''''||lv_message_text||''''||','
      ||'     process_flag = '||G_ERROR_FLG
      ||' WHERE (NVL(new_schedule_date,sysdate-36500) = sysdate-36500'
      ||' OR    NVL(new_order_quantity,'||NULL_VALUE|| ')= '||NULL_VALUE||')'
      ||' AND   deleted_flag                   = '||SYS_NO
      ||' AND   process_flag                   = '||G_IN_PROCESS
      ||' AND   NVL(batch_id,'||NULL_VALUE||') = :lv_batch_id'
      ||' AND   sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'WIP_ENTITY_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 05;
      lv_sql_stmt :=
      'UPDATE   msc_st_supplies '
      ||' SET   error_text   = '||''''||lv_message_text||''''||','
      ||'       process_flag = '||G_ERROR_FLG
      ||' WHERE NVL(wip_entity_name,'||''''||NULL_CHAR||''''||') '
      ||'       =                   '||''''||NULL_CHAR||''''
      ||' AND   process_flag                  = '||G_IN_PROCESS
      ||' AND   NVL(batch_id,'||NULL_VALUE||')= :lv_batch_id'
      ||' AND   sr_instance_code              = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'FIRM_PLANNED_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      ' AND NVL(firm_planned_type,'||NULL_VALUE||') NOT IN(1,2)'
      ||' AND deleted_flag = '||SYS_NO;

      --Log a warning for those records where the firm_planned_type has a value
      --other than 1 and 2

      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_SUPPLIES',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'FIRM_PLANNED_TYPE',
                      p_debug             => v_debug,
                      p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'WIP_STATUS_CODE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => 1);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str := '   AND wip_status_code   <= 1'
                      ||' AND wip_status_code   >= 15'
                      ||' AND deleted_flag       = '||SYS_NO;

      --Log a warning for those records where the wip_status_code has a value other
      --than SYS_NO

      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_SUPPLIES',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'WIP_STATUS_CODE',
                      p_debug             => v_debug,
                      p_default_value     => 1);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DISPOSITION_STATUS_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => 1);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      ' AND NVL(disposition_status_type,'||NULL_VALUE||') NOT IN(1,2)'
      ||' AND deleted_flag       = '||SYS_NO;

      --Log a warning for those records where the firm_planned_type has a value other
      --than SYS_NO

      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_SUPPLIES',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'DISPOSITION_STATUS_TYPE',
                      p_debug             => v_debug,
                      p_default_value     => 1);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'WIP_SUPPLY_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => 1);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str := '   AND wip_supply_type <= 1'
                      ||' AND wip_supply_type >= 7'
                      ||' AND deleted_flag     = '||SYS_NO;

      --Log a warning for those records where the wip_supply_type has a value other
      --than SYS_NO

      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_SUPPLIES',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'WIP_SUPPLY_TYPE',
                      p_debug             => v_debug,
                      p_default_value     => 1);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE   msc_st_supplies'
      ||' SET   order_number = wip_entity_name'
      ||' WHERE NVL(order_number,'||''''||NULL_CHAR||''''||')'
      ||'       =                '||''''||NULL_CHAR||''''
      ||' AND   deleted_flag                   = '||SYS_NO
      ||' AND   process_flag                   = '||G_IN_PROCESS
      ||' AND   NVL(batch_id,'||NULL_VALUE||') = :lv_batch_id'
      ||' AND   sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      -- Now we will check whether BOM Name is NULL , if it is NULL we will populate the
      -- ASSEMBLY NAME in BOM NAME column for all such records

      v_sql_stmt := 07;
      lv_sql_stmt :=
      'UPDATE msc_st_supplies '
      ||' SET    bill_name           = item_name'
      ||' WHERE  sr_instance_code    = :v_instance_code'
      ||' AND    order_type in (3, 14)'
      ||' AND    process_flag        ='||G_IN_PROCESS
      ||' AND    NVL(bill_name,'||''''||NULL_CHAR||''''||') '
      ||'         =            '||''''||NULL_CHAR||''''
      ||' AND    NVL(item_name,'||''''||NULL_CHAR||''''||') '
      ||'         <>           '||''''||NULL_CHAR||''''
      ||' AND    batch_id            = :lv_batch_id';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

      -- Now check whether Routing  Name is NULL , if it is NULL we will populate
      -- Assembly  Name in Routing Name column for all such records

      v_sql_stmt := 08;

      lv_sql_stmt :=
      'UPDATE msc_st_supplies '
      ||' SET    routing_name             = item_name'
      ||' WHERE  sr_instance_code         = :v_instance_code'
      ||' AND    order_type in (3, 14)'
      ||' AND    process_flag             ='|| G_IN_PROCESS
      ||' AND    NVL(routing_name,'||''''||NULL_CHAR||''''||') '
      ||'         =               '||''''||NULL_CHAR||''''
      ||' AND    NVL(item_name,   '||''''||NULL_CHAR||''''||') '
      ||'         <>              '||''''||NULL_CHAR||''''
      ||' AND    batch_id                 = :lv_batch_id ';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

      lv_return := MSC_ST_UTIL.DERIVE_BILL_SEQUENCE_ID
                   (p_table_name     => 'MSC_ST_SUPPLIES',
                    p_bom_col_name   => 'BILL_NAME',
                    p_bom_col_id     => 'BILL_SEQUENCE_ID',
                    p_instance_code  => v_instance_code,
                    p_batch_id       => lv_batch_id,
                    p_debug          => v_debug,
                    p_error_text     => lv_error_text);


     IF (lv_return <> 0 ) THEN
           RAISE ex_logging_err;
     END IF;

     lv_return := MSC_ST_UTIL.DERIVE_ROUTING_SEQUENCE_ID
                      (p_table_name     => 'MSC_ST_SUPPLIES',
                       p_rtg_col_name   => 'ROUTING_NAME',
                       p_rtg_col_id     => 'ROUTING_SEQUENCE_ID',
                       p_instance_code  => v_instance_code,
                       p_batch_id       => lv_batch_id,
                       p_debug          => v_debug,
                       p_error_text     => lv_error_text);

    if (lv_return <> 0 )then
       RAISE ex_logging_err;
    end if;




      v_sql_stmt := 09;
      lv_sql_stmt :=
      'UPDATE msc_st_supplies mss'
      ||' SET   schedule_group_id   = (SELECT local_id'
      ||'       FROM   msc_local_id_supply mls'
      ||'       WHERE  mls.char4 = mss.schedule_group_name'
      ||'       AND    mls.char3 = mss.organization_code'
      ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mss.company_name,'||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.char1 = mss.sr_instance_code'
      ||'       AND    mls.entity_name = ''SCHEDULE_GROUP_ID'' ),'
      ||'     line_id             = (SELECT local_id'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char4 = mss.line_code'
      ||'       AND    mls.char3 = mss.organization_code'
      ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mss.company_name,'||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.char1 = mss.sr_instance_code'
      ||'       AND    mls.entity_name = ''LINE_ID''),'
      ||'     operation_seq_num   = (SELECT number1'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  mls.char5 = mss.operation_seq_code'
      ||'       AND    mls.char4 = mss.routing_name'
      ||'       AND    NVL(mls.char6, '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mss.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.char3 = mss.organization_code'
      ||'       AND    mls.date1 = mss.effectivity_date'
      ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mss.company_name,'||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.char1 = mss.sr_instance_code'
      ||'       AND    mls.entity_name = ''OPERATION_SEQUENCE_ID'' )'
      ||' WHERE  deleted_flag               = '||SYS_NO
      ||' AND    process_flag               = '||G_IN_PROCESS
      ||' AND NVL(batch_id,'||NULL_VALUE||')= :lv_batch_id'
      ||' AND    sr_instance_code           = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'BILL_SEQUENCE_ID OR ROUTING_SEQUENCE_ID',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      '   AND (NVL(bill_sequence_id,  '||NULL_VALUE||') = '||NULL_VALUE
      ||' OR  NVL(routing_sequence_id,'||NULL_VALUE||') = '||NULL_VALUE||')'
      ||' AND deleted_flag = '||SYS_NO;

      --Log a warning for those records where the bill_sequence_id or
      --routing_sequence_id has null values

      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_SUPPLIES',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_debug             => v_debug,
                      p_where_str         => lv_where_str);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Deriving wip_entity_id
      v_sql_stmt := 10;
      lv_sql_stmt :=
      'UPDATE msc_st_supplies mss'
      ||' SET wip_entity_id     = (SELECT local_id'
      ||'       FROM   msc_local_id_supply mls'
      ||'       WHERE  mls.char4 = mss.wip_entity_name'
      ||'       AND    mls.char3 = mss.organization_code'
      ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mss.company_name,'||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.char1 = mss.sr_instance_code'
      ||'       AND    mls.entity_name = ''WIP_ENTITY_ID'' )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :lv_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_DELETE_FAIL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 11;

      lv_sql_stmt :=
      'UPDATE   msc_st_supplies '
      ||' SET   process_flag        = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE NVL(wip_entity_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND   deleted_flag        ='||SYS_YES
      ||' AND   process_flag        = '||G_IN_PROCESS
      ||' AND   NVL(batch_id,'||NULL_VALUE||')= :lv_batch_id '
      ||' AND   sr_instance_code    =:v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


     -- update the jump_op_seq_num for lot based jobs for the operations jumped outside the network

      lv_sql_stmt :=
      'UPDATE   msc_st_supplies '
      ||' SET jump_op_seq_num = 50000'
      ||' WHERE NVL(jump_op_seq_code,'||''''||NULL_CHAR||''''||') '
      ||'         = '||''''||50000||''''
      ||' AND   process_flag        = '||G_IN_PROCESS
      ||' AND   NVL(batch_id,'||NULL_VALUE||')= :lv_batch_id '
      ||' AND   order_type    IN (3,7,14,15)'
      ||' AND   sr_instance_code    =:v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      lv_sql_stmt :=
      'UPDATE msc_st_supplies mss'
      ||' SET  jump_op_seq_num   = (SELECT number1'
      ||'       FROM   msc_local_id_setup mls'
      ||'       WHERE  NVL(mls.char5,'||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mss.jump_op_seq_code,'||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.char4 = mss.routing_name'
      ||'       AND    NVL(mls.char6, '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mss.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.char3 = mss.organization_code'
      ||'       AND    mls.date1 = mss.jump_op_effectivity_date'
      ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mss.company_name,'||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.char1 = mss.sr_instance_code'
      ||'       AND    mls.entity_name = ''OPERATION_SEQUENCE_ID'' )'
      ||' WHERE  deleted_flag               = '||SYS_NO
      ||' AND    process_flag               = '||G_IN_PROCESS
      ||' AND    jump_op_seq_num            <> 50000 '
      ||' AND NVL(batch_id,'||NULL_VALUE||')= :lv_batch_id'
      ||' AND    sr_instance_code           = :v_instance_code';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      --Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_SUPPLIES_WO',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Generation of wip_entity_id
      OPEN  c2(lv_batch_id);
      FETCH c2 BULK COLLECT INTO lb_rowid ;

      IF c2%ROWCOUNT > 0  THEN
        v_sql_stmt := 12;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        UPDATE  msc_st_supplies
        SET     wip_entity_id = msc_st_wip_entity_id_s.NEXTVAL
        WHERE rowid           = lb_rowid(j);

        v_sql_stmt := 13;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        INSERT INTO msc_local_id_supply
          (local_id,
           st_transaction_id,
           instance_id,
           entity_name,
           data_source_type,
           char1,
           char2,
           char3,
           char4,
           SOURCE_ORG_ID,
           SOURCE_INVENTORY_ITEM_ID,
           SOURCE_BILL_SEQUENCE_ID,
           SOURCE_ROUTING_SEQUENCE_ID,
           SOURCE_SCHEDULE_GROUP_ID,
           SOURCE_WIP_ENTITY_ID,
           last_update_date,
           last_updated_by,
           creation_date,
           created_by)
        SELECT
            wip_entity_id,
            st_transaction_id,
            v_instance_id,
            'WIP_ENTITY_ID',
            data_source_type,
            v_instance_code,
            company_name,
            organization_code ,
            wip_entity_name,
            SOURCE_ORG_ID,
            SOURCE_INVENTORY_ITEM_ID,
            SOURCE_BILL_SEQUENCE_ID,
            SOURCE_ROUTING_SEQUENCE_ID,
            SOURCE_SCHEDULE_GROUP_ID,
            SOURCE_WIP_ENTITY_ID,
            v_current_date,
            v_current_user,
            v_current_date,
            v_current_user
        FROM msc_st_supplies
        WHERE  rowid            = lb_rowid(j);

      END IF;
      CLOSE c2 ;

      --Generation of schedule_group_id
      OPEN c3(lv_batch_id);
      FETCH c3 BULK COLLECT INTO lb_rowid ;

      IF c3%ROWCOUNT > 0  THEN
        v_sql_stmt := 14;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        UPDATE  msc_st_supplies
        SET     schedule_group_id = msc_st_schedule_group_id_s.NEXTVAL
        WHERE rowid               = lb_rowid(j);

        v_sql_stmt := 15;
        FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
        INSERT INTO msc_local_id_supply
          (local_id,
           st_transaction_id,
           instance_id,
           entity_name,
           data_source_type,
           char1,
           char2,
           char3,
           char4,
           SOURCE_ORG_ID,
           SOURCE_INVENTORY_ITEM_ID,
           SOURCE_BILL_SEQUENCE_ID,
           SOURCE_ROUTING_SEQUENCE_ID,
           SOURCE_SCHEDULE_GROUP_ID,
           SOURCE_WIP_ENTITY_ID,
           last_update_date,
           last_updated_by,
           creation_date,
           created_by)
        SELECT
            schedule_group_id,
            st_transaction_id,
            v_instance_id,
           'SCHEDULE_GROUP_ID',
            data_source_type,
            v_instance_code,
            company_name,
            organization_code ,
            schedule_group_name,
            SOURCE_ORG_ID,
            SOURCE_INVENTORY_ITEM_ID,
            SOURCE_BILL_SEQUENCE_ID,
            SOURCE_ROUTING_SEQUENCE_ID,
            SOURCE_SCHEDULE_GROUP_ID,
            SOURCE_WIP_ENTITY_ID,
            v_current_date,
            v_current_user,
            v_current_date,
            v_current_user
        FROM msc_st_supplies
        WHERE  rowid            = lb_rowid(j);

      END IF;
      CLOSE c3;

      --Update disposition_id with the wip_entity_id.
      v_sql_stmt := 16;
      UPDATE msc_st_supplies
      SET    disposition_id    = wip_entity_id
      WHERE  process_flag      = G_IN_PROCESS
      AND    batch_id          = lv_batch_id
      AND    sr_instance_code  = v_instance_code;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_FK_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => '  SR_INSTANCE_CODE, COMPANY_NAME,'
                                             ||' ORGANIZATION_CODE AND PROJECT_NUMBER',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_PROJECT_TASKS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     --Derive Project Id.
      lv_return := MSC_ST_UTIL.DERIVE_PROJ_TASK_ID
                             (p_table_name          => 'MSC_ST_SUPPLIES',
                              p_proj_col_name       => 'PROJECT_NUMBER',
                              p_proj_task_col_id    => 'PROJECT_ID',
                              p_instance_code       => v_instance_code,
                              p_entity_name         => 'PROJECT_ID',
                              p_error_text          => lv_error_text,
                              p_batch_id            => lv_batch_id,
                              p_severity            => G_SEV_WARNING,
                              p_message_text        => lv_message_text,
                              p_debug               => v_debug,
                              p_row                 => lv_column_names);
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_FK_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => '  SR_INSTANCE_CODE, COMPANY_NAME,'
                                             ||' ORGANIZATION_CODE, PROJECT_NUMBER,'
                                             ||' TASK_NUMBER',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_PROJECT_TASKS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Task Id.
      lv_return := MSC_ST_UTIL.DERIVE_PROJ_TASK_ID
                             (p_table_name          => 'MSC_ST_SUPPLIES',
                              p_proj_col_name       => 'PROJECT_NUMBER',
                              p_proj_task_col_id    => 'TASK_ID',
                              p_instance_code       => v_instance_code,
                              p_entity_name         => 'TASK_ID',
                              p_error_text          => lv_error_text,
                              p_task_col_name       => 'TASK_NUMBER',
                              p_batch_id            => lv_batch_id,
                              p_severity            => G_SEV_WARNING,
                              p_message_text        => lv_message_text,
                              p_debug               => v_debug,
                              p_row                 => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      v_sql_stmt := 17;
      lv_sql_stmt :=
      'UPDATE msc_st_supplies mss '
      ||' SET  schedule_group_id   = (SELECT local_id'
      ||'       FROM   msc_local_id_supply mls'
      ||'       WHERE  mls.char4 = mss.schedule_group_name'
      ||'       AND    mls.char3 = mss.organization_code'
      ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mss.company_name,'||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.char1 = mss.sr_instance_code'
      ||'       AND    mls.entity_name = ''SCHEDULE_GROUP_ID'' )'
      ||' WHERE  deleted_flag                      = '||SYS_NO
      ||' AND    process_flag                      = '||G_IN_PROCESS
      ||' AND    NVL(schedule_group_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND NVL(batch_id,'||NULL_VALUE||')= :lv_batch_id'
      ||' AND    sr_instance_code           = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

     OPEN c4(lv_batch_id);
     FETCH c4 BULK COLLECT INTO lb_rowid ;

     IF c4%ROWCOUNT > 0  THEN

     FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_supplies
        SET    job_op_seq_num      =
               to_number(decode(length(rtrim(job_op_seq_code,'0123456789')),
                         NULL,job_op_seq_code,'1'))
        WHERE  rowid     = lb_rowid(j);
     END IF;
     CLOSE c4;

      lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_SUPPLIES',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_SUPPLIES',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_message_text      => NULL,
                    p_error_text        => lv_error_text,
                    p_debug             => v_debug,
                    p_batch_id          => lv_batch_id);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      COMMIT;
    END LOOP;
  EXCEPTION
    WHEN too_many_rows THEN
      lv_error_text  := substr('MSC_CL_PRE_PROCESS.LOAD_WO_SUPPLY'||'('
                      ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN ex_logging_err THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_WO_SUPPLY'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END LOAD_WO_SUPPLY;


  PROCEDURE  LOAD_RES_DEMAND   IS

  TYPE RowidTab         IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  TYPE CurTyp           IS REF CURSOR;
  c1                    CurTyp;
  lb_rowid              RowidTab;

  lv_local_id           NUMBER;
  lv_column_names       VARCHAR2(5000);     -- Stores cocatenated column names
  lv_return             NUMBER;
  lv_error_text         VARCHAR2(250);
  lv_where_str          VARCHAR2(5000);
  lv_sql_stmt           VARCHAR2(5000);
  lv_cursor_stmt        VARCHAR2(5000);
  lv_batch_id           msc_st_resource_requirements.batch_id%TYPE;
  lv_message_text       msc_errors.error_text%TYPE;

  ex_logging_err    EXCEPTION;

  CURSOR c2(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_resource_requirements
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

   CURSOR c3(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_resource_requirements
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(operation_sequence_id,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag     = SYS_NO
    GROUP BY sr_instance_code,company_name,organization_code,routing_name,
    operation_seq_code,alternate_routing_designator,operation_effectivity_date;

   CURSOR c4(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_resource_requirements
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(resource_seq_num,NULL_VALUE) = NULL_VALUE
    AND    NVL(resource_seq_code, NULL_CHAR) <> NULL_CHAR
    AND    deleted_flag     = SYS_NO
    GROUP BY sr_instance_code,company_name,organization_code,routing_name,
    operation_seq_code,resource_seq_code,alternate_routing_designator, alternate_number;

  BEGIN

   --Duplicate records check for the records whose source is XML

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 01;

  lv_sql_stmt:=
   'UPDATE    msc_st_resource_requirements msrr1 '
   ||' SET       process_flag ='||G_ERROR_FLG||','
   ||'           error_text   = '||''''||lv_message_text||''''
   ||' WHERE     message_id < ( SELECT max(message_id) FROM msc_st_resource_requirements msrr2'
   ||'           WHERE msrr2.sr_instance_code  '
   ||'                 = msrr1.sr_instance_code'
   ||'         AND   NVL(msrr2.company_name,'||''''||NULL_CHAR||''''||') '
   ||'                =    NVL(msrr1.company_name,'||''''||NULL_CHAR||''''||') '
   ||'         AND   msrr2.wip_entity_name    = msrr1.wip_entity_name'
   ||'         AND   msrr2.organization_code  = msrr1.organization_code'
   ||'         AND   NVL(msrr2.operation_seq_code,'||''''||NULL_CHAR||''''||') '
   ||'                  = NVL(msrr1.operation_seq_code,'||''''||NULL_CHAR||''''||') '
   ||'         AND   NVL(msrr2.resource_seq_code,'||''''||NULL_CHAR||''''||') '
   ||'                  = NVL(msrr1.resource_seq_code,'||''''||NULL_CHAR||''''||') '
   ||'         AND   NVL(msrr2.resource_code,  '||''''||NULL_CHAR||''''||') '
   ||'                  = NVL(msrr1.resource_code, '||''''||NULL_CHAR||''''||') '
   ||'         AND   msrr2.process_flag       = '||G_IN_PROCESS
   ||'         AND    NVL(msrr2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
   ||' AND     msrr1.process_flag     = '|| G_IN_PROCESS
   ||' AND     msrr1.sr_instance_code = :v_instance_code '
   ||' AND     NVL(msrr1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  --Duplicate records check for the records whose source is batch load

  lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;
  v_sql_stmt := 02;

   lv_sql_stmt:=
   'UPDATE      msc_st_resource_requirements msrr1'
   ||' SET      process_flag = '||G_ERROR_FLG||','
   ||'          error_text   = '||''''||lv_message_text||''''
   ||' WHERE    EXISTS ( SELECT 1 '
   ||'          FROM msc_st_resource_requirements msrr2'
   ||'          WHERE msrr2.sr_instance_code  '
   ||'                 = msrr1.sr_instance_code'
   ||'         AND   NVL(msrr2.company_name,'||''''||NULL_CHAR||''''||') '
   ||'                =    NVL(msrr1.company_name,'||''''||NULL_CHAR||''''||') '
   ||'         AND   msrr2.wip_entity_name    = msrr1.wip_entity_name'
   ||'         AND   msrr2.organization_code  = msrr1.organization_code'
   ||'         AND   NVL(msrr2.operation_seq_code,'||''''||NULL_CHAR||''''||') '
   ||'                  = NVL(msrr1.operation_seq_code,'||''''||NULL_CHAR||''''||') '
   ||'         AND   NVL(msrr2.resource_seq_code,'||''''||NULL_CHAR||''''||') '
   ||'                  = NVL(msrr1.resource_seq_code,'||''''||NULL_CHAR||''''||') '
   ||'         AND   NVL(msrr2.resource_code,  '||''''||NULL_CHAR||''''||') '
   ||'                  = NVL(msrr1.resource_code, '||''''||NULL_CHAR||''''||') '
   ||'         AND   msrr2.process_flag       = '||G_IN_PROCESS
   ||'         AND   NVL(msrr2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
   ||'       GROUP BY sr_instance_code,company_name,organization_code,wip_entity_name,'
   ||'       operation_seq_code,resource_seq_code,resource_code '
   ||'       HAVING COUNT(*) >1 )'
   ||' AND   msrr1.process_flag = '||G_IN_PROCESS
   ||' AND   msrr1.sr_instance_code = :v_instance_code'
   ||' AND   NVL(msrr1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  lv_column_names :=
  'DEPARTMENT_CODE             ||''~''||'
  ||'RESOURCE_CODE             ||''~''||'
  ||'ORGANIZATION_CODE         ||''~''||'
  ||'RESOURCE_SEQ_CODE         ||''~''||'
  ||'START_DATE                ||''~''||'
  ||'OPERATION_HOURS_REQUIRED  ||''~''||'
  ||'ASSIGNED_UNITS            ||''~''||'
  ||'WIP_ENTITY_NAME           ||''~''||'
  ||'SR_INSTANCE_CODE          ||''~''||'
  ||'ITEM_NAME                 ||''~''||'
  ||'OPERATION_SEQ_CODE        ||''~''||'
  ||'HOURS_EXPENDED            ||''~''||'
  ||'DEMAND_CLASS              ||''~''||'
  ||'BASIS_TYPE                ||''~''||'
  ||'END_DATE                  ||''~''||'
  ||'WIP_JOB_TYPE              ||''~''||'
  ||'SCHEDULED_COMPLETION_DATE ||''~''||'
  ||'SCHEDULED_QUANTITY        ||''~''||'
  ||'QUANTITY_COMPLETED        ||''~''||'
  ||'STD_OP_CODE               ||''~''||'
  ||'SUPPLY_TYPE               ||''~''||'
  ||'DELETED_FLAG              ||''~''||'
  ||'COMPANY_NAME ' ;


  -- Now processing by batch
   LOOP
      v_sql_stmt := 03;
      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      ' UPDATE msc_st_resource_requirements '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c2(lv_batch_id);
      FETCH c2 BULK COLLECT INTO lb_rowid;
      CLOSE c2;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_resource_requirements
      SET  st_transaction_id = msc_st_resource_requirements_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Check whether delete flag value is in (SYS_YES,SYS_NO),if not default to SYS_NO

     lv_where_str :=
     ' AND NVL(deleted_flag,'||NULL_VALUE||') NOT IN(1,2)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_RESOURCE_REQUIREMENTS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DELETED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => SYS_NO);


      IF lv_return <> 0 THEN
          RAISE ex_logging_err;
      END IF;

      -- Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


     -- Populate  organization id , call utilty package- msc_st_util's procedure

     lv_return :=
     MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name     => 'MSC_ST_RESOURCE_REQUIREMENTS',
                                    p_org_partner_name  =>'ORGANIZATION_CODE',
                                    p_org_partner_id    =>'ORGANIZATION_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_ORGANIZATION,
                                    p_severity          => G_SEV_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_batch_id          => lv_batch_id,
                                    p_debug             => v_debug,
                                    p_error_text        => lv_error_text);

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;


    -- Derive  WIP_ENTITY_ID
    v_sql_stmt := 06;
    lv_sql_stmt:=
    'UPDATE        msc_st_resource_requirements msrr'
    ||' SET        wip_entity_id = (SELECT local_id '
    ||'            FROM msc_local_id_supply mlis'
    ||'            WHERE  mlis.char1 = msrr.sr_instance_code'
    ||'            AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                  =    NVL(msrr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'            AND    mlis.char3 = msrr.organization_code'
    ||'            AND    mlis.char4 = msrr.wip_entity_name'
    ||'            AND    mlis.entity_name = ''WIP_ENTITY_ID'' '
    ||'            AND    mlis.instance_id ='||v_instance_id||')'
    ||' WHERE      sr_instance_code  = :v_instance_code'
    ||' AND        NVL(wip_entity_name,'||''''||NULL_CHAR||''''||') '
    ||'             <> '||''''||NULL_CHAR||''''
    ||' AND        process_flag     ='||G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

     -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,WIP_ENTITY_NAME',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_SUPPLIES',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_RESOURCE_REQUIREMENTS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Error out the records if WIP_ENTITY_ID NULL

    v_sql_stmt := 07;
    lv_sql_stmt:=
    'UPDATE      msc_st_resource_requirements msrr'
    ||' SET      process_flag              ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE    NVL(wip_entity_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND      sr_instance_code            = :v_instance_code'
    ||' AND      process_flag                ='||G_IN_PROCESS
    ||' AND      batch_id                    = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    -- Set supply_id = wip_entity_id
    v_sql_stmt := 09;

    lv_sql_stmt:=
    'UPDATE     msc_st_resource_requirements msrr'
    ||' SET        supply_id        = wip_entity_id '
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        process_flag     = '||G_IN_PROCESS
    ||' AND        NVL(wip_entity_id,'||NULL_VALUE||')='||NULL_VALUE
    ||' AND        batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

/* bug 3768813 */
    -- Derive resource id
/*
     v_sql_stmt := 10;

    lv_sql_stmt :=
    'UPDATE     msc_st_resource_requirements msrr'
    ||' SET     resource_id=   (SELECT local_id '
    ||'                 FROM msc_local_id_setup mlis'
    ||'                 WHERE  mlis.char1 = msrr.sr_instance_code'
    ||'                 AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                 =    NVL(msrr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                 AND    mlis.char3 = msrr.organization_code'
    ||'                 AND    mlis.char4 = msrr.resource_code'
    ||'                 AND    mlis.entity_name = ''RESOURCE_ID'''
    ||'                 AND    mlis.instance_id ='||v_instance_id||' )'
    ||' WHERE      msrr.sr_instance_code = :v_instance_code'
    ||' AND        msrr.deleted_flag     = '||SYS_NO
    ||' AND        msrr.process_flag     ='|| G_IN_PROCESS
    ||' AND        msrr.schedule_flag    <> 2'
    ||' AND        msrr.batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

*/
    -- set the resource_id, department_id, resource_seq_num to -1 for those records where resource_code is null and resource is an unscheduled resource

    lv_sql_stmt:=
    'UPDATE      msc_st_resource_requirements msrr'
    ||' SET      resource_id    = -1, department_id = -1, resource_seq_num = -1 '
    ||' WHERE    sr_instance_code            = :v_instance_code'
    ||' AND      deleted_flag                = '||SYS_NO
    ||' AND      process_flag                = '|| G_IN_PROCESS
    ||' AND      batch_id                    = :lv_batch_id'
    ||' AND      NVL(resource_code,'||''''||NULL_CHAR||''''||') = '||''''||NULL_CHAR||''''
    ||' AND      schedule_flag =2';

            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

     -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,RESOURCE_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_DEPARTMENT_RESOURCES',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_RESOURCE_REQUIREMENTS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

/* created the new function to derive resource_id for bug 3768813 */
      lv_where_str :=' AND        schedule_flag    <> 2';
      lv_return := MSC_ST_UTIL.DERIVE_RESOURCE_ID
                     (p_table_name       => 'MSC_ST_RESOURCE_REQUIREMENTS',
                      p_resource_col_name => 'RESOURCE_CODE',
                      p_department_col_name => 'DEPARTMENT_CODE',
                      p_resource_col_id => 'RESOURCE_ID',
                      p_instance_code    => v_instance_code,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names,
                      p_where_str         => lv_where_str);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
/*
    -- Error out records where resource_id is NULL

    v_sql_stmt := 11;

    lv_sql_stmt:=
    'UPDATE      msc_st_resource_requirements msrr'
    ||' SET      process_flag              ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE    NVL(resource_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND      sr_instance_code            = :v_instance_code'
    ||' AND      deleted_flag                = '||SYS_NO
    ||' AND      process_flag                ='|| G_IN_PROCESS
    ||' AND      batch_id                    = :lv_batch_id';

    IF v_debug THEN
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
    END IF;

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

 */
/* bug 3768813 */
    -- Derive Department id
/*
     v_sql_stmt := 12;

    lv_sql_stmt :=
    'UPDATE     msc_st_resource_requirements msrr'
    ||' SET      department_id =  (SELECT local_id'
    ||'               FROM msc_local_id_setup mlis'
    ||'               WHERE  mlis.char1 = msrr.sr_instance_code'
    ||'               AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                 =    NVL(msrr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'               AND    mlis.char3 = msrr.organization_code'
    ||'               AND    mlis.char4 = msrr.department_code'
    ||'               AND    mlis.entity_name = ''DEPARTMENT_ID'''
    ||'               AND    mlis.instance_id ='||v_instance_id||' )'
    ||' WHERE      msrr.sr_instance_code = :v_instance_code'
    ||' AND        msrr.process_flag     ='||G_IN_PROCESS
    ||' AND        NVL(msrr.department_id,'||NULL_VALUE||') <> -1'
    ||' AND        msrr.batch_id         = :lv_batch_id';



            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;
 */

         -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,DEPARTMENT_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_DEPARTMENT_RESOURCES',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_RESOURCE_REQUIREMENTS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

/* created the new function to derive department_id for bug 3768813 */
      lv_return := MSC_ST_UTIL.DERIVE_DEPARTMENT_ID
                     (p_table_name       => 'MSC_ST_RESOURCE_REQUIREMENTS',
                      p_resource_col_name => 'RESOURCE_CODE',
                      p_department_col_name => 'DEPARTMENT_CODE',
                      p_department_col_id => 'DEPARTMENT_ID',
                      p_instance_code    => v_instance_code,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

/*
    -- Error out records where department_id is NULL

    v_sql_stmt := 11;

    lv_sql_stmt:=
    'UPDATE      msc_st_resource_requirements msrr'
    ||' SET      process_flag              ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE    NVL(department_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND      sr_instance_code            = :v_instance_code'
    ||' AND      deleted_flag                = '||SYS_NO
    ||' AND      process_flag                ='|| G_IN_PROCESS
    ||' AND      batch_id                    = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

*/

      -- Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ASSIGNED_UNITS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- set the assigned units to 0 if resource_code is NULL
    lv_sql_stmt:=
    'UPDATE     msc_st_resource_requirements msrr'
    ||' SET     assigned_units  = 0 '
    ||' WHERE   NVL(assigned_units,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND     resource_id                 = -1 '
    ||' AND     sr_instance_code            = :v_instance_code'
    ||' AND     deleted_flag                ='|| SYS_NO
    ||' AND     process_flag                ='|| G_IN_PROCESS
    ||' AND     batch_id                    = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Error out records where assigned units NULL
    v_sql_stmt := 08;

    lv_sql_stmt:=
    'UPDATE     msc_st_resource_requirements msrr'
    ||' SET     process_flag              ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   NVL(assigned_units,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND     sr_instance_code            = :v_instance_code'
    ||' AND     deleted_flag                ='|| SYS_NO
    ||' AND     process_flag                ='|| G_IN_PROCESS
    ||' AND     batch_id                    = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'OPERATION_SEQ_CODE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_OPERATION_SEQ_CODE  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Default operation_seq_code as 1 if NULL
     lv_where_str :=
     '    AND NVL(operation_seq_code,'||''''||NULL_CHAR||''''||') '
     ||'         = '||''''||NULL_CHAR||'''' ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_RESOURCE_REQUIREMENTS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'OPERATION_SEQ_CODE',
                     p_debug             => v_debug,
                     p_default_value     => G_OPERATION_SEQ_CODE);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'OPERATION_EFFECTIVITY_DATE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => 'SYSDATE' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default operation_effectivity date as SYSDATE if NULL

     lv_where_str :=
     ' AND NVL(operation_effectivity_date,(sysdate-36500)) =(sysdate-36500)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_RESOURCE_REQUIREMENTS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'OPERATION_EFFECTIVITY_DATE',
                     p_debug             => v_debug,
                     p_default_value     => 'SYSDATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

/* bug 3768813 */
      -- Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                       p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                       p_token1            => 'COLUMN_NAME',
                       p_token_value1      => 'ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --Derive Inventory_item_id
    lv_return := MSC_ST_UTIL.DERIVE_ITEM_ID
                   (p_table_name       => 'MSC_ST_RESOURCE_REQUIREMENTS',
                    p_item_col_name    => 'ITEM_NAME',
                    p_item_col_id      => 'INVENTORY_ITEM_ID',
                    p_instance_id      => v_instance_id,
                    p_instance_code    => v_instance_code,
                    p_message_text     => lv_message_text,
                    p_error_text       => lv_error_text,
                    p_batch_id         => lv_batch_id,
                    p_severity         => G_SEV_ERROR,
                    p_debug            => v_debug,
                    p_row              => lv_column_names);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

  -- If routing_name is is NULL populate the item_name in routing name

  v_sql_stmt := 13;
  lv_sql_stmt :=
  ' UPDATE   msc_st_resource_requirements'
  ||' SET    routing_name            =  item_name'
  ||' WHERE  process_flag            = '||G_IN_PROCESS
  ||' AND    NVL(routing_name,'||''''||NULL_CHAR||''''||')'
  ||'       = '||''''||NULL_CHAR||''''
  ||' AND   batch_id        = :lv_batch_id'
  ||' AND   sr_instance_code = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

/* Bug 3768813 */
    -- Derive the ROUTING_SEQUENCE_ID from LOCAL ID table

    lv_return :=msc_st_util.derive_routing_sequence_id
                (p_table_name     => 'MSC_ST_RESOURCE_REQUIREMENTS',
                 p_rtg_col_name   => 'ROUTING_NAME',
                 p_rtg_col_id     =>'ROUTING_SEQUENCE_ID',
                 p_instance_code  => v_instance_code,
                 p_batch_id       => lv_batch_id,
                 p_debug          => v_debug,
                 p_error_text     => lv_error_text);

    if (lv_return <> 0 )then
       MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
    end if;

    -- Derive operation seq num and operation_seq_id

    v_sql_stmt := 14;
    lv_sql_stmt:=
    'UPDATE     msc_st_resource_requirements msrr'
    ||' SET     operation_seq_num =    (SELECT number1'
    ||'                    FROM msc_local_id_setup mlis'
    ||'                    WHERE  mlis.char1 = msrr.sr_instance_code'
    ||'                    AND NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                    =   NVL(msrr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                    AND    mlis.char3 = msrr.organization_code'
    ||'                    AND    mlis.char4 = msrr.routing_name'
    ||'                    AND    mlis.char5 = msrr.operation_seq_code'
    ||'                    AND   NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
    ||'                          = NVL(msrr.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
    ||'                    AND    mlis.date1 = msrr.operation_effectivity_date'
    ||'                    AND    mlis.entity_name = ''OPERATION_SEQUENCE_ID'' '
    ||'                    AND    mlis.instance_id = '||v_instance_id ||')'
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        process_flag     = '||G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id';



         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

/* Bug 3768813 */
   -- Derive operation_sequence id
/*
    v_sql_stmt := 15;
    lv_sql_Stmt :=
    'UPDATE     msc_st_resource_requirements msrr'
    ||' SET     operation_sequence_id=  (SELECT local_id'
    ||'         FROM msc_local_id_setup mlis'
    ||'         WHERE  mlis.char1 = msrr.sr_instance_code'
    ||'         AND     NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'          =    NVL(msrr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'         AND    mlis.char3 = msrr.organization_code'
    ||'         AND    mlis.char4 = msrr.routing_name'
    ||'         AND    mlis.char5 = msrr.operation_seq_code'
    ||'         AND   NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
    ||'           =   NVL(msrr.alternate_routing_designator,'||''''||NULL_CHAR||''''||')'
    ||'         AND    mlis.date1 = msrr.operation_effectivity_date'
    ||'         AND    mlis.entity_name = ''OPERATION_SEQUENCE_ID'' '
    ||'         AND    mlis.instance_id = '||v_instance_id||')'
    ||'  WHERE      sr_instance_code = :v_instance_code'
    ||'  AND        process_flag     ='||G_IN_PROCESS
    ||'  AND        batch_id         = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

*/

/* created new function to derive operation sequence id for bug 3768813 */
      lv_return := MSC_ST_UTIL.DERIVE_OPERATION_SEQUENCE_ID
                     (p_table_name       => 'MSC_ST_RESOURCE_REQUIREMENTS',
                      p_operation_seq_num => 'OPERATION_SEQ_NUM',
                       p_routing_col_name => 'ROUTING_NAME',
                      p_sequence_col_id  => 'OPERATION_SEQUENCE_ID',
                       p_op_effectivity_date => 'OPERATION_EFFECTIVITY_DATE',
                       p_operation_seq_code => 'OPERATION_SEQ_CODE',
                       p_routing_sequence_id => 'ROUTING_SEQUENCE_ID',
                      p_instance_code    => v_instance_code,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_message_text     => lv_message_text,
                       p_debug            => v_debug,
                       p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DELETE_FAIL',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

   -- Error out the records where delete flag yes and operation_sequence_id is NULL
    v_sql_stmt := 16;
    lv_sql_stmt:=
    'UPDATE   msc_st_resource_requirements '
    ||' SET     process_flag     ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE    NVL(operation_sequence_id,'||NULL_VALUE||') ='|| NULL_VALUE
    ||' AND      deleted_flag     = '||SYS_YES
    ||' AND      sr_instance_code = :v_instance_code'
    ||' AND      process_flag     = '||G_IN_PROCESS
    ||' AND      batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

     -- Derive resource seq num from the local  id table

    lv_sql_stmt :=
    'UPDATE     msc_st_resource_requirements msor'
    ||' SET     resource_seq_num =    (SELECT local_id '
    ||'         FROM msc_local_id_setup mlis'
    ||'         WHERE  mlis.char1 = msor.sr_instance_code'
    ||'         AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'         =    NVL(msor.company_name,'||''''||NULL_CHAR||''''||') '
    ||'         AND    mlis.char3 = msor.organization_code'
    ||'         AND    mlis.char4 = msor.routing_name'
    ||'         AND    mlis.char5 = msor.operation_seq_code'
    ||'         AND    mlis.char6 = msor.resource_seq_code'
    ||'         AND    NVL(mlis.char7,'||''''||NULL_CHAR||''''||') '
    ||'         =      NVL(msor.alternate_routing_designator,'||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(mlis.number1,'||NULL_VALUE||') = NVL(msor.alternate_number,'||NULL_VALUE||')'
    ||'		AND    rownum = 1'	/*change made to solve res req issue*/
    ||'         AND    mlis.entity_name = ''RESOURCE_SEQ_NUM'')'
    ||' WHERE   sr_instance_code = :v_instance_code'
    ||' AND     process_flag     = '||G_IN_PROCESS
    ||' AND     NVL(msor.resource_seq_num,'||NULL_VALUE||') <> -1'
    ||' AND     batch_id         = :lv_batch_id';



         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    -- Default the operation yield to 1 where operation yield is less than 0 or greater than 1

       lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'YIELD',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  1  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     lv_where_str :=
     ' AND (yield  < 0 OR yield  > 1 OR NVL(yield,'||NULL_VALUE||') ='|| NULL_VALUE||')';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_RESOURCE_REQUIREMENTS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'YIELD',
                     p_debug             => v_debug,
                     p_default_value     =>1);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SCHEDULE_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => 1 );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default schedule flag as 1 if values are other than 1,2,3,4

     lv_where_str := ' AND NVL(schedule_flag,'||NULL_VALUE||') '
                      ||' NOT IN(1,2,3,4)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_RESOURCE_REQUIREMENTS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'SCHEDULE_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => 1);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


   -- Error out the records where quantity_in_queue is negative OR quantity_running is negative
   -- OR quantity_waiting_to_move is negative OR quantity_completed is negative

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                       (p_app_short_name    => 'MSC',
                        p_error_code        => 'MSC_PP_CONV_RT_NEG',
                        p_message_text      => lv_message_text,
                        p_error_text        => lv_error_text,
                        p_token1            => 'COLUMN_NAME',
                        p_token_value1      => 'QUANTITY_IN_QUEUE AND QUANTITY_RUNNING AND QUANTITY_WAITING_TO_MOVE AND QUANTITY_COMPLETED');

          IF lv_return <> 0 THEN
            RAISE ex_logging_err;
          END IF;

     UPDATE  msc_st_resource_requirements
             SET      process_flag   = G_ERROR_FLG,
                      error_text   = lv_message_text
             WHERE    deleted_flag     = SYS_NO
             AND      sr_instance_code = v_instance_code
             AND      process_flag     = G_IN_PROCESS
             AND      batch_id         = lv_batch_id
             AND   (quantity_in_queue <0 OR quantity_running <0 OR quantity_waiting_to_move <0 OR quantity_completed <0);

   -- Updating UNADJUSTED_RESOURCE_HOURS with the value in  OPERATION_HOURS_REQUIRED
-- for bug 7565280

    UPDATE      msc_st_resource_requirements msrr
       SET      UNADJUSTED_RESOURCE_HOURS = OPERATION_HOURS_REQUIRED
       WHERE    sr_instance_code          = v_instance_code
       AND      process_flag              = G_IN_PROCESS
       AND      batch_id                  = lv_batch_id;

    --Call to customised validation.

     MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_RESOURCE_REQUIREMENTS',
         pInstanceID    => v_instance_id);

     IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
     END IF;

    v_sql_stmt := 17 ;

     OPEN c3(lv_batch_id);
     FETCH c3 BULK COLLECT INTO lb_rowid ;

     IF c3%ROWCOUNT > 0  THEN

     FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_resource_requirements
        SET    operation_sequence_id  = msc_st_operation_sequence_id_s.NEXTVAL ,
               operation_seq_num      =
               to_number(decode(length(rtrim(operation_seq_code,'0123456789')),
                         NULL,operation_seq_code,'1'))
        WHERE  rowid                  = lb_rowid(j);

    v_sql_stmt := 18;

      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

   -- Insert into the LID table
     INSERT INTO  msc_local_id_setup
     (local_id,
     st_transaction_id,
     instance_id,
     entity_name,
     data_source_type,
     char1,
     char2,
     char3,
     char4,
     char5,
     char6,
     number1,
     date1,
     SOURCE_ORGANIZATION_ID,
     SOURCE_DEPARTMENT_ID,
     SOURCE_RESOURCE_ID,
     SOURCE_RESOURCE_SEQ_NUM,
     SOURCE_OPERATION_SEQUENCE_ID,
     SOURCE_WIP_ENTITY_ID,
     SOURCE_OPERATION_SEQ_NUM,
     last_update_date,
     last_updated_by,
     creation_date,
     created_by    )
      SELECT
      operation_sequence_id,
      st_transaction_id,
      v_instance_id,
      'OPERATION_SEQUENCE_ID',
      data_source_type,
      v_instance_code,
      company_name,
      organization_code,
      routing_name,
      operation_seq_code,
      alternate_routing_designator,
      operation_seq_num,
      operation_effectivity_date,
      SOURCE_ORGANIZATION_ID,
      SOURCE_DEPARTMENT_ID,
      SOURCE_RESOURCE_ID,
      SOURCE_RESOURCE_SEQ_NUM,
      SOURCE_OPERATION_SEQUENCE_ID,
      SOURCE_WIP_ENTITY_ID,
      SOURCE_OPERATION_SEQ_NUM,
      v_current_date,
      v_current_user,
      v_current_date,
      v_current_user
      FROM msc_st_resource_requirements
      WHERE rowid = lb_rowid(j);

     END IF;
     close c3;

   -- Update operation_sequence_id

    v_sql_stmt := 19;
    lv_sql_Stmt :=
    'UPDATE     msc_st_resource_requirements msrr'
    ||' SET     (operation_sequence_id, operation_seq_num) =  (SELECT local_id, number1'
    ||'         FROM msc_local_id_setup mlis'
    ||'         WHERE  mlis.char1 = msrr.sr_instance_code'
    ||'         AND     NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'          =    NVL(msrr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'         AND    mlis.char3 = msrr.organization_code'
    ||'         AND    mlis.char4 = msrr.routing_name'
    ||'         AND    mlis.char5 = TO_CHAR(msrr.operation_seq_code)'
    ||'         AND   NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
    ||'           =   NVL(msrr.alternate_routing_designator,'||''''||NULL_CHAR||''''||')'
    ||'         AND    mlis.date1 = msrr.operation_effectivity_date'
    ||'         AND    mlis.entity_name = ''OPERATION_SEQUENCE_ID'' '
    ||'         AND    mlis.instance_id = '||v_instance_id||')'
    ||'  WHERE   sr_instance_code = :v_instance_code'
    ||'  AND     NVL(operation_sequence_id,'||NULL_VALUE||') ='|| NULL_VALUE
    ||'  AND     process_flag     ='||G_IN_PROCESS
    ||'  AND      batch_id         = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


     OPEN c4(lv_batch_id);
     FETCH c4 BULK COLLECT INTO lb_rowid ;

     IF c4%ROWCOUNT > 0  THEN

     FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_resource_requirements
        SET    resource_seq_num      =
               to_number(decode(length(rtrim(resource_seq_code,'0123456789')),
                         NULL,resource_seq_code,'1'))
        WHERE  rowid                  = lb_rowid(j);


     FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
  -- Insert into the LID table  with the  user defined key

       INSERT INTO  msc_local_id_setup
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char3,
       char4,
       char5,
       char6,
       char7,
       number1,
       SOURCE_ORGANIZATION_ID,
       SOURCE_DEPARTMENT_ID,
       SOURCE_RESOURCE_ID,
       SOURCE_RESOURCE_SEQ_NUM,
       SOURCE_OPERATION_SEQUENCE_ID,
       SOURCE_WIP_ENTITY_ID,
       SOURCE_OPERATION_SEQ_NUM,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
      SELECT
       resource_seq_num,
       st_transaction_id,
       v_instance_id,
       'RESOURCE_SEQ_NUM',
       data_source_type,
       v_instance_code,
       company_name,
       organization_code,
       routing_name,
       operation_seq_code,
       resource_seq_code,
       alternate_routing_designator,
       alternate_number,
       SOURCE_ORGANIZATION_ID,
       SOURCE_DEPARTMENT_ID,
       SOURCE_RESOURCE_ID,
       SOURCE_RESOURCE_SEQ_NUM,
       SOURCE_OPERATION_SEQUENCE_ID,
       SOURCE_WIP_ENTITY_ID,
       SOURCE_OPERATION_SEQ_NUM,
       v_current_date,
       v_current_user,
       v_current_date,
       v_current_user
       FROM msc_st_resource_requirements
      WHERE rowid = lb_rowid(j) ;

    END IF;
  CLOSE c4;

  -- Update resource seq num from the local  id table

    lv_sql_stmt :=
    'UPDATE     msc_st_resource_requirements msor'
    ||' SET     resource_seq_num =    (SELECT local_id '
    ||'         FROM msc_local_id_setup mlis'
    ||'         WHERE  mlis.char1 = msor.sr_instance_code'
    ||'         AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'         =    NVL(msor.company_name,'||''''||NULL_CHAR||''''||') '
    ||'         AND    mlis.char3 = msor.organization_code'
    ||'         AND    mlis.char4 = msor.routing_name'
    ||'         AND    mlis.char5 = msor.operation_seq_code'
    ||'         AND    mlis.char6 = msor.resource_seq_code'
    ||'         AND    NVL(mlis.char7,'||''''||NULL_CHAR||''''||') '
    ||'         =      NVL(msor.alternate_routing_designator,'||''''||NULL_CHAR||''''||')'
    ||'         AND    NVL(mlis.number1,'||NULL_VALUE||') = NVL(msor.alternate_number,'||NULL_VALUE||')'
    ||'		AND    rownum = 1'	/*change made to solve res req issue*/
    ||'         AND    mlis.entity_name = ''RESOURCE_SEQ_NUM'')'
    ||' WHERE   sr_instance_code = :v_instance_code'
    ||' AND     NVL(resource_seq_num,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND     process_flag     = '||G_IN_PROCESS
    ||' AND     batch_id         = :lv_batch_id';



         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the processf flag as Valid and populate sr_instance_id
    lv_return :=
    MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name   => 'MSC_ST_RESOURCE_REQUIREMENTS',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug,
                               p_batch_id       => lv_batch_id);

     IF lv_return <> 0 THEN
        RAISE ex_logging_err;
     END IF;


    -- At the end calling  the LOG_ERROR for logging all errored out records

   lv_return :=
   MSC_ST_UTIL.LOG_ERROR(p_table_name    => 'MSC_ST_RESOURCE_REQUIREMENTS',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug,
                         p_batch_id      => lv_batch_id  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  COMMIT;
  END LOOP;


  EXCEPTION

    WHEN too_many_rows THEN
         lv_error_text := substr('MSC_CL_PRE_PROCESS.LOAD_RES_DEMAND'||'('
                        ||v_sql_stmt||')'|| SQLERRM, 1, 240);
         ROLLBACK ;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
        ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text :=substr('MSC_CL_PRE_PROCESS.LOAD_RES_DEMAND'||'('
                      ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END LOAD_RES_DEMAND;


/*==========================================================================+
| DESCRIPTION  : This procedure is called for validating demand originating |
|                from WIP Supply and is for msc_st_demands table. Following |
|                types are considered for the validation.                   |
|                Demand origination          Origination Type               |
|                -------------------------------------------------          |
|                Std Job Demand                   2                         |
|                Non Std. Demand                  3                         |
|                Flow schedule                    25                        |
+==========================================================================*/

  PROCEDURE  LOAD_WIP_DEMAND  IS

  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;

  lb_rowid          RowidTab;

  lv_local_id       NUMBER;
  lv_sequence       NUMBER;
  lv_column_names   VARCHAR2(5000);     -- Stores cocatenated column names
  lv_return         NUMBER;
  lv_error_text     VARCHAR2(250);
  lv_where_str      VARCHAR2(5000);
  lv_sql_stmt       VARCHAR2(5000);
  lv_cursor_stmt    VARCHAR2(5000);
  lv_batch_id       msc_st_demands.batch_id%TYPE;
  lv_message_text   msc_errors.error_text%TYPE;

  ex_logging_err    EXCEPTION;

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_demands
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    origination_type  IN (2,3,25)
    AND    batch_id          = p_batch_id
    AND    sr_instance_code  = v_instance_code;

   CURSOR c2(p_batch_id NUMBER) IS
    SELECT max(rowid)
    FROM   msc_st_demands
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    origination_type IN (2,3)  -- Not for flow schedule
    AND    NVL(operation_seq_num,NULL_VALUE) = NULL_VALUE
    AND    deleted_flag     = SYS_NO
    GROUP BY sr_instance_code,company_name,organization_code,routing_name,
    operation_seq_code,alternate_routing_designator,operation_effectivity_date;


  BEGIN

  -- Before we start processing the record by group id( batch size ) we are going
  -- to check whether that there
  -- is any duplicates for user defined unique keys (UDKs,)

   --For WIP component demand

   --Duplicate records check for the records whose source is XML
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 01;

  lv_sql_stmt :=
  'UPDATE   msc_st_demands msd1'
  ||' SET     process_flag  = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE   message_id <  (SELECT MAX(message_id)'
  ||'         FROM msc_st_demands msd2'
  ||'         WHERE  msd2.sr_instance_code '
  ||'                = msd1.sr_instance_code '
  ||'         AND   msd2.organization_code '
  ||'                = msd1.organization_code '
  ||'         AND   NVL(msd2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(msd1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'         AND msd2.wip_entity_name = msd1.wip_entity_name'
  ||'         AND NVL(msd2.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msd1.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'         AND    msd2.item_name '
  ||'                = msd1.item_name '
  ||'         AND  msd2.origination_type '
  ||'               = msd1.origination_type'
  ||'         AND   msd2.process_flag = '||G_IN_PROCESS
  ||'         AND    NVL(msd2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
  ||' AND     msd1.process_flag ='|| G_IN_PROCESS
  ||' AND     msd1.origination_type IN (2,3,25)'
  ||' AND     msd1.sr_instance_code = :v_instance_code '
  ||' AND     NVL(msd1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  --Duplicate records check for the records whose source is batch load

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 02;

  lv_sql_stmt :=
  'UPDATE msc_st_demands   msd1'
  ||' SET     process_flag  = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE   EXISTS( SELECT 1 '
  ||'         FROM msc_st_demands msd2'
  ||'         WHERE  msd2.sr_instance_code '
  ||'                = msd1.sr_instance_code '
  ||'          AND   msd2.organization_code '
  ||'                = msd1.organization_code '
  ||'          AND   NVL(msd2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(msd1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'          AND   msd2.wip_entity_name = msd1.wip_entity_name'
  ||'          AND   NVL(msd2.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msd1.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'          AND   msd2.item_name '
  ||'                = msd1.item_name '
  ||'          AND   msd2.origination_type '
  ||'                = msd1.origination_type'
  ||'          AND   msd2.process_flag = '||G_IN_PROCESS
  ||'          AND NVL(msd2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||'       GROUP BY  sr_instance_code,organization_code,wip_entity_name,'
  ||'       company_name,operation_seq_code,item_name,origination_type'
  ||'       HAVING COUNT(*) > 1)'
  ||' AND   msd1.process_flag  = '||G_IN_PROCESS
  ||' AND   msd1.origination_type IN (2,3,25)'
  ||' AND   msd1.sr_instance_code = :v_instance_code'
  ||' AND   NVL(msd1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  lv_column_names :=
  'ITEM_NAME                          ||''~''||'
  ||' ORGANIZATION_CODE               ||''~''||'
  ||' USING_REQUIREMENT_QUANTITY      ||''~''||'
  ||' WIP_ENTITY_NAME                 ||''~''||'
  ||' USING_ASSEMBLY_DEMAND_DATE      ||''~''||'
  ||' SR_INSTANCE_CODE                ||''~''||'
  ||' USING_ASSEMBLY_ITEM_NAME        ||''~''||'
  ||' OPERATION_SEQ_CODE              ||''~''||'
  ||' ORIGINATION_TYPE                ||''~''||'
  ||' PROJECT_NUMBER                  ||''~''||'
  ||' TASK_NUMBER                     ||''~''||'
  ||' PLANNING_GROUP                  ||''~''||'
  ||' END_ITEM_UNIT_NUMBER            ||''~''||'
  ||' DEMAND_CLASS                    ||''~''||'
  ||' WIP_STATUS_CODE                 ||''~''||'
  ||' WIP_SUPPLY_TYPE                 ||''~''||'
  ||' DELETED_FLAG                    ||''~''||'
  ||' COMPANY_NAME                    ||''~''||'
  ||' DEMAND_TYPE' ;


    LOOP
      v_sql_stmt := 03;
      SELECT       msc_st_batch_id_s.NEXTVAL
      INTO         lv_batch_id
      FROM         DUAL;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      ' UPDATE    msc_st_demands '
      ||' SET     batch_id  = :lv_batch_id'
      ||' WHERE   process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND     sr_instance_code               = :v_instance_code'
      ||' AND     origination_type IN (2,3,25)'
      ||' AND     NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND     rownum                        <= '||v_batch_size;



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND ;

    OPEN c1(lv_batch_id);
    FETCH c1 BULK COLLECT INTO lb_rowid;
    CLOSE c1;

    v_sql_stmt := 03;
    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
    UPDATE msc_st_demands
    SET    st_transaction_id   = msc_st_demands_s.NEXTVAL,
           refresh_id          = v_refresh_id,
           last_update_date    = v_current_date,
           last_updated_by     = v_current_user,
           creation_date       = v_current_date,
           created_by          = v_current_user
    WHERE  rowid               = lb_rowid(j);

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
    --Log a warning for those records where the deleted_flag has a value other
    --SYS_NO

    lv_where_str :=
     ' AND NVL(deleted_flag,'||NULL_VALUE||') NOT IN(1,2)';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_DEMANDS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => lv_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'DELETED_FLAG',
                    p_debug             => v_debug,
                    p_default_value     => SYS_NO);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

      -- Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     --Derive Organization_id
    lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                   (p_table_name       => 'MSC_ST_DEMANDS',
                    p_org_partner_name => 'ORGANIZATION_CODE',
                    p_org_partner_id   => 'ORGANIZATION_ID',
                    p_instance_code    => v_instance_code,
                    p_partner_type     => G_ORGANIZATION,
                    p_error_text       => lv_error_text,
                    p_batch_id         => lv_batch_id,
                    p_severity         => G_SEV_ERROR,
                    p_message_text     => lv_message_text,
                    p_debug            => v_debug,
                    p_row              => lv_column_names);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

      -- Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --Derive Inventory_item_id
    lv_return := MSC_ST_UTIL.DERIVE_ITEM_ID
                   (p_table_name       => 'MSC_ST_DEMANDS',
                    p_item_col_name    => 'ITEM_NAME',
                    p_item_col_id      => 'INVENTORY_ITEM_ID',
                    p_instance_id      => v_instance_id,
                    p_instance_code    => v_instance_code,
                    p_message_text     => lv_message_text,
                    p_error_text       => lv_error_text,
                    p_batch_id         => lv_batch_id,
                    p_severity         => G_SEV_ERROR,
                    p_debug            => v_debug,
                    p_row              => lv_column_names);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'USING_ASSEMBLY_ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --Derive Using_assembly_item_id
    lv_return := MSC_ST_UTIL.DERIVE_ITEM_ID
                   (p_table_name       => 'MSC_ST_DEMANDS',
                    p_item_col_name    => 'USING_ASSEMBLY_ITEM_NAME',
                    p_item_col_id      => 'USING_ASSEMBLY_ITEM_ID',
                    p_instance_id      => v_instance_id,
                    p_instance_code    => v_instance_code,
                    p_message_text     => lv_message_text,
                    p_error_text       => lv_error_text,
                    p_batch_id         => lv_batch_id,
                    p_severity         => G_SEV3_ERROR,
                    p_debug            => v_debug,
                    p_row              => lv_column_names);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

  -- Derive WIP_ENTITY_ID
   v_sql_stmt := 04;

   lv_sql_stmt :=
    'UPDATE   msc_st_demands  msd'
    ||' SET   wip_entity_id = ( SELECT local_id '
    ||'       FROM   msc_local_id_supply mlid'
    ||'       WHERE  mlid.char1    = msd.sr_instance_code'
    ||'       AND   NVL(mlid.char2,'||''''||NULL_CHAR||''''||') '
    ||'       =    NVL(msd.company_name,'||''''||NULL_CHAR||''''||') '
    ||'       AND    mlid.char3    = msd.organization_code'
    ||'       AND    mlid.char4    = msd.wip_entity_name'
    ||'       AND    mlid.entity_name = ''WIP_ENTITY_ID'' )'
    ||'  WHERE origination_type IN (2,3,25) '
    ||'  AND   process_flag     ='||G_IN_PROCESS
    ||'  AND   batch_id       = :lv_batch_id'
    ||'  AND   sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||' ORGANIZATION_CODE,WIP_ENTITY_NAME',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_SUPPLIES',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_DEMANDS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  -- Error out records where WIP_ENTITY_ID is  NULL;

  v_sql_stmt := 05;
  lv_sql_stmt :=
  'UPDATE     msc_st_demands '
  ||' SET     process_flag    =  '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE   NVL(wip_entity_id,'||NULL_VALUE||') ='||NULL_VALUE
  ||' AND     process_flag      = '||G_IN_PROCESS
  ||' AND     origination_type  IN (2,3,25)'
  ||' AND     batch_id           = :lv_batch_id'
  ||' AND     sr_instance_code  = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;


  -- Set the  message
   lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'USING_REQUIREMENT_QUANTITY'
                                             || ' OR USING_ASSEMBLY_DEMAND_DATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


  -- Error out records where USING_REQUIREMENT_QUANTITY is NULL;
  -- Error out records where using_assembly_demand_date is NULL

  v_sql_stmt := 06;
  lv_sql_stmt :=
  'UPDATE     msc_st_demands '
  ||' SET     process_flag    =  '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE (NVL(using_requirement_quantity,'||NULL_VALUE||')='||NULL_VALUE
  ||'  OR  NVL(using_assembly_demand_date,SYSDATE-36500) = SYSDATE-36500 )'
  ||' AND    process_flag      = '||G_IN_PROCESS
  ||' AND    origination_type  IN (2,3,25)'
  ||' AND    deleted_flag      = '||SYS_NO
  ||' AND    batch_id          = :lv_batch_id'
  ||' AND    sr_instance_code  = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;


  -- Update using_assembly_item_id = inventory_item_id

  v_sql_stmt := 07;
  lv_sql_stmt :=
  ' UPDATE      msc_st_demands'
  ||' SET    using_assembly_item_id  =  inventory_item_id'
  ||' WHERE  process_flag            = '||G_IN_PROCESS
  ||' AND    NVL(using_assembly_item_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||' AND    deleted_flag   = '||SYS_NO
  ||' AND   process_flag    = '||G_IN_PROCESS
  ||' AND   origination_type IN (2,3,25)'
  ||' AND   batch_id        = :lv_batch_id'
  ||' AND   deleted_flag    = '||SYS_NO
  ||' AND   sr_instance_code = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

  -- Update order_number = wip_entity_name

  v_sql_stmt := 08;
  lv_sql_stmt :=
  ' UPDATE   msc_st_demands'
  ||' SET    order_number   = wip_entity_name'
  ||' WHERE  process_flag   = '||G_IN_PROCESS
  ||' AND    deleted_flag   = '||SYS_NO
  ||' AND    process_flag   = '||G_IN_PROCESS
  ||' AND    origination_type IN (2,3,25)'
  ||' AND    deleted_flag   = '||SYS_NO
  ||' AND    batch_id       = :lv_batch_id'
  ||' AND    sr_instance_code  = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

  -- Update disposition_id = wip_entity_id

  v_sql_stmt := 09;
  lv_sql_stmt :=
  ' UPDATE       msc_st_demands'
  ||' SET        disposition_id = wip_entity_id'
  ||' WHERE      process_flag  = '||G_IN_PROCESS
  ||' AND        NVL(wip_entity_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||' AND        deleted_flag   = '||SYS_NO
  ||' AND        process_flag  = '||G_IN_PROCESS
  ||' AND        origination_type IN (2,3,25)'
  ||' AND        batch_id          = :lv_batch_id'
  ||' AND   sr_instance_code  = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;



 -- UPdate MPS_DATE_REQUIRED as using_assembly_demand_date if NULL
 -- This is not reqd for flow schedule

  v_sql_stmt := 10;
  lv_sql_stmt :=
  ' UPDATE     msc_st_demands'
  ||' SET      mps_date_required =  using_assembly_demand_date'
  ||' WHERE    process_flag  = '||G_IN_PROCESS
  ||' AND      NVL(mps_date_required,SYSDATE-36500) = SYSDATE-36500'
  ||' AND      process_flag  = '||G_IN_PROCESS
  ||' AND      origination_type IN (2,3)'
  ||' AND      deleted_flag   = '||SYS_NO
  ||' AND      batch_id          = :lv_batch_id'
  ||' AND      sr_instance_code  = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'OPERATION_SEQ_CODE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_OPERATION_SEQ_CODE  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Default operation_seq_code as 1 if NULL
     lv_where_str :=
     '    AND NVL(operation_seq_code,'||''''||NULL_CHAR||''''||') '
     ||'         = '||''''||NULL_CHAR||''''
     ||'  AND origination_type IN (2,3)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_DEMANDS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'OPERATION_SEQ_CODE',
                     p_debug             => v_debug,
                     p_default_value     => G_OPERATION_SEQ_CODE);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL_DEFAULT',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'OPERATION_EFFECTIVITY_DATE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYSDATE  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default operation_effectivity date as SYSDATE if NULL

     lv_where_str :=
     '   AND NVL(operation_effectivity_date,SYSDATE-36500 ) = SYSDATE-36500 '
     ||' AND origination_type IN (2,3)' ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_DEMANDS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'OPERATION_EFFECTIVITY_DATE',
                     p_debug             => v_debug,
                     p_default_value     => 'SYSDATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  -- If routing_name is is NULL populate the item_name in routing name

  v_sql_stmt := 11;
  lv_sql_stmt :=
  ' UPDATE   msc_st_demands'
  ||' SET    routing_name            =  nvl(USING_ASSEMBLY_ITEM_NAME,item_name)'  /* bug 3768813 */
  ||' WHERE  process_flag            = '||G_IN_PROCESS
  ||' AND    NVL(routing_name,'||''''||NULL_CHAR||''''||')'
  ||'       = '||''''||NULL_CHAR||''''
  ||' AND   process_flag    = '||G_IN_PROCESS
  ||' AND   origination_type IN (2,3)'
  ||' AND   batch_id        = :lv_batch_id'
  ||' AND   sr_instance_code = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

/* bug 3768813 */
    IF v_instance_type <> G_INS_OTHER THEN

    -- Derive the ROUTING_SEQUENCE_ID from LOCAL ID table

      lv_return :=msc_st_util.derive_routing_sequence_id
                (p_table_name     => 'MSC_ST_DEMANDS',
                 p_rtg_col_name   => 'ROUTING_NAME',
                 p_rtg_col_id     =>'ROUTING_SEQUENCE_ID',
                 p_instance_code  => v_instance_code,
                 p_batch_id       => lv_batch_id,
                 p_debug          => v_debug,
                 p_error_text     => lv_error_text,
                 p_item_id        => 'using_assembly_item_id');

      if (lv_return <> 0 )then
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      end if;

      v_sql_stmt := 11;
      lv_sql_stmt:=
      'update msc_st_demands msd'
      ||' set operation_seq_num = '
      ||'  (select operation_seq_num '
      ||'   from msc_routing_operations mro '
      ||'   where mro.routing_sequence_id = msd.routing_sequence_id and '
      ||'         mro.effectivity_date = msd.operation_effectivity_date and '
      ||'         mro.SR_INSTANCE_ID = '||v_instance_id||' and '
      ||'      mro.operation_seq_num = to_number(decode(length(rtrim(msd.operation_seq_code,''0123456789'')),'
      ||'                   NULL,msd.operation_seq_code,''1'')) and'
      ||'         mro.plan_id = -1 and '
      ||'         mro.operation_type = 1)'
      ||' WHERE  sr_instance_code = :v_instance_code'
      ||' AND    process_flag     = '|| G_IN_PROCESS
      ||' AND    batch_id         = :lv_batch_id ';


           MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;
    END IF;

    -- Derive operation seq num from local id table

    v_sql_stmt := 12;
    lv_sql_stmt:=
    'UPDATE     msc_st_demands msd'
    ||' SET     operation_seq_num=    (SELECT number1'
    ||'                    FROM msc_local_id_setup mlis'
    ||'                    WHERE  mlis.char1 = msd.sr_instance_code'
    ||'                    AND NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                    =   NVL(msd.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                    AND    mlis.char3 = msd.organization_code'
    ||'                    AND    mlis.char4 = msd.routing_name'
    ||'                    AND    mlis.char5 = msd.operation_seq_code'
    ||'                    AND   NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
    ||'                          = NVL(msd.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
    ||'                    AND    mlis.date1 = msd.operation_effectivity_date'
    ||'                    AND    mlis.entity_name = ''OPERATION_SEQUENCE_ID'') '
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        process_flag     = '||G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id'
    ||' AND        operation_seq_num is null'; /* bug 3768813 */



         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   -- Set the message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DELETE_FAIL',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

   -- Error out the records where operation_seq_num is NULL
   -- And deleted_flag = SYS_YES

  v_sql_stmt := 13;

  lv_sql_stmt :=
  'UPDATE     msc_st_demands '
  ||' SET     process_flag    ='||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE   NVL(operation_seq_num,'||NULL_VALUE||') = '||NULL_VALUE
  ||' AND     deleted_flag  ='||SYS_YES
  ||' AND     origination_type IN (2,3)'
  ||' AND     batch_id       = :lv_batch_id'
  ||' AND     sr_instance_code  =:v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

  -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_FK_REF_NOT_EXIST',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAMES',
                    p_token_value1      => '  SR_INSTANCE_CODE, COMPANY_NAME,'
                                           ||' ORGANIZATION_CODE AND PROJECT_NUMBER',
                    p_token2            => 'MASTER_TABLE',
                    p_token_value2      => 'MSC_ST_PROJECT_TASKS');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Derive Project Id.
    lv_return := MSC_ST_UTIL.DERIVE_PROJ_TASK_ID
                           (p_table_name          => 'MSC_ST_DEMANDS',
                            p_proj_col_name       => 'PROJECT_NUMBER',
                            p_proj_task_col_id    => 'PROJECT_ID',
                            p_instance_code       => v_instance_code,
                            p_entity_name         => 'PROJECT_ID',
                            p_error_text          => lv_error_text,
                            p_batch_id            => lv_batch_id,
                            p_severity            => G_SEV_WARNING,
                            p_message_text        => lv_message_text,
                            p_debug               => v_debug,
                            p_row                 => lv_column_names);
    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

     -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_FK_REF_NOT_EXIST',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_token1            => 'COLUMN_NAMES',
                    p_token_value1      => '  SR_INSTANCE_CODE, COMPANY_NAME,'
                                           ||' ORGANIZATION_CODE, PROJECT_NUMBER,'
                                           ||' TASK_NUMBER',
                    p_token2            => 'MASTER_TABLE',
                    p_token_value2      => 'MSC_ST_PROJECT_TASKS');

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Derive Task Id.
    lv_return := MSC_ST_UTIL.DERIVE_PROJ_TASK_ID
                           (p_table_name          => 'MSC_ST_DEMANDS',
                            p_proj_col_name       => 'PROJECT_NUMBER',
                            p_proj_task_col_id    => 'TASK_ID',
                            p_instance_code       => v_instance_code,
                            p_entity_name         => 'TASK_ID',
                            p_error_text          => lv_error_text,
                            p_task_col_name       => 'TASK_NUMBER',
                            p_batch_id            => lv_batch_id,
                            p_severity            => G_SEV_WARNING,
                            p_message_text        => lv_message_text,
                            p_debug               => v_debug,
                            p_row                 => lv_column_names);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DEMAND_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_DEMAND_TYPE );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --  Default demand_type to 1 always

    lv_where_str := '   AND NVL(demand_type,'||NULL_VALUE||') <> '||G_DEMAND_TYPE
                    ||' AND origination_type IN (2,3) AND deleted_flag ='||SYS_NO ;

    lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_DEMANDS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => lv_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'DEMAND_TYPE',
                    p_debug             => v_debug,
                    p_default_value     => G_DEMAND_TYPE);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;


    --  Default demand_type to 2 always for flow schedule

    lv_where_str := '   AND NVL(demand_type,'||NULL_VALUE||') <> 2'
                    ||' AND origination_type = 25 AND deleted_flag ='||SYS_NO ;

    lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_DEMANDS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => lv_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'DEMAND_TYPE',
                    p_debug             => v_debug,
                    p_default_value     => 2);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'WIP_SUPPLY_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_WIP_SUPPLY_TYPE );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --  Default wip_supply_type as 1

    lv_where_str := ' AND NVL(wip_supply_type,'||NULL_VALUE||') NOT IN (1,2,3,4,5,6,7)'
                    ||' AND origination_type IN (2,3) AND deleted_flag ='||SYS_NO ;

    lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_DEMANDS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => lv_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'WIP_SUPPLY_TYPE',
                    p_debug             => v_debug,
                    p_default_value     => G_WIP_SUPPLY_TYPE );

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'WIP_STATUS_CODE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_WIP_STATUS_CODE );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --  Default wip_status_code as 1(unrelased)

    lv_where_str := '   AND NVL(wip_status_code,'||NULL_VALUE||') NOT IN (1,3,4,6,7,12)'
                    ||' AND origination_type IN (2,3,25)AND deleted_flag ='||SYS_NO ;

    lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_DEMANDS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => lv_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'WIP_STATUS_CODE',
                    p_debug             => v_debug,
                    p_default_value     => G_WIP_STATUS_CODE);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    --Call to customised validation.
    MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
      (ERRBUF         => lv_error_text,
       RETCODE        => lv_return,
       pBatchID       => lv_batch_id,
       pInstanceCode  => v_instance_code,
       pEntityName    => 'MSC_ST_DEMANDS',
       pInstanceID    => v_instance_id);

    IF NVL(lv_return,0) <> 0 THEN
      RAISE ex_logging_err;
    END IF;

   -- Generate the operation_seq_num  and populate the LID table

    OPEN c2(lv_batch_id);
    FETCH c2 BULK COLLECT INTO lb_rowid ;


    IF c2%ROWCOUNT > 0  THEN
       FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

     --    SELECT msc_st_operation_sequence_id_s.NEXTVAL
     --    INTO   lv_local_id
     --    FROM   DUAL;

         UPDATE msc_st_demands
          SET  operation_seq_num     =
               to_number(decode(length(rtrim(operation_seq_code,'0123456789')),
                         NULL,operation_seq_code,'1'))
          WHERE  rowid                  = lb_rowid(j);

     FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

     -- Insert into the LID table

      INSERT INTO  msc_local_id_setup
     (local_id,
     st_transaction_id,
     instance_id,
     entity_name,
     data_source_type,
     char1,
     char2,
     char3,
     char4,
     char5,
     char6,
     number1,
     date1,
     SOURCE_ORGANIZATION_ID,
     SOURCE_INVENTORY_ITEM_ID,
     SOURCE_PROJECT_ID,
     SOURCE_TASK_ID,
     SOURCE_WIP_ENTITY_ID,
     SOURCE_OPERATION_SEQ_NUM,
     SOURCE_USING_ASSEMBLY_ID,
     last_update_date,
     last_updated_by,
     creation_date,
     created_by    )
     SELECT
      msc_st_operation_sequence_id_s.NEXTVAL,
      st_transaction_id,
      v_instance_id,
      'OPERATION_SEQUENCE_ID',
      data_source_type,
      v_instance_code,
      company_name,
      organization_code,
      routing_name,
      operation_seq_code,
      alternate_routing_designator,
      operation_seq_num,
      operation_effectivity_date,
      SOURCE_ORGANIZATION_ID,
      SOURCE_INVENTORY_ITEM_ID,
      SOURCE_PROJECT_ID,
      SOURCE_TASK_ID,
      SOURCE_WIP_ENTITY_ID,
      SOURCE_OPERATION_SEQ_NUM,
      SOURCE_USING_ASSEMBLY_ITEM_ID,
      v_current_date,
      v_current_user,
      v_current_date,
      v_current_user
      FROM msc_st_demands
      WHERE rowid = lb_rowid(j) ;

    END IF;
    CLOSE c2;

    -- Update operation seq num from local id table

    v_sql_stmt := 12;
    lv_sql_stmt:=
    'UPDATE     msc_st_demands msd'
    ||' SET     operation_seq_num=    (SELECT number1'
    ||'                    FROM msc_local_id_setup mlis'
    ||'                    WHERE  mlis.char1 = msd.sr_instance_code'
    ||'                    AND NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                    =   NVL(msd.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                    AND    mlis.char3 = msd.organization_code'
    ||'                    AND    mlis.char4 = msd.routing_name'
    ||'                    AND    mlis.char5 = msd.operation_seq_code'
    ||'                    AND   NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
    ||'                          = NVL(msd.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
    ||'                    AND    mlis.date1 = msd.operation_effectivity_date'
    ||'                    AND    mlis.entity_name = ''OPERATION_SEQUENCE_ID'') '
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        NVL(operation_seq_num,'||NULL_VALUE||')= '||NULL_VALUE
    ||' AND        process_flag     = '||G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id';



         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


    lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_DEMANDS',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_DEMANDS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_message_text      => NULL,
                    p_error_text        => lv_error_text,
                    p_debug             => v_debug,
                    p_batch_id          => lv_batch_id);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    COMMIT;
   END LOOP ;

 EXCEPTION
    WHEN too_many_rows THEN
         lv_error_text := substr('MSC_CL_PRE_PROCESS.LOAD_WIP_DEMAND'||'('
                        ||v_sql_stmt||')'|| SQLERRM, 1, 240);
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
         ROLLBACK ;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
        ROLLBACK;

   WHEN OTHERS THEN
       lv_error_text :=  substr('MSC_CL_PRE_PROCESS.LOAD_WIP_DEMAND'||'('
                        ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END LOAD_WIP_DEMAND;



/*==========================================================================+
| DESCRIPTION  : This procedure loads records into new tables for OFSM      |
|                These tables contains the details for a lot based job      |
|                                    |
+==========================================================================*/

PROCEDURE  LOAD_JOB_DETAILS IS

  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  TYPE CurTyp       IS REF CURSOR;
  c1                CurTyp;
  lb_rowid          RowidTab;
  lv_local_id       NUMBER;
  lv_column_names   VARCHAR2(5000);     -- Stores concatenated column names
  lv_return         NUMBER;
  lv_error_text     VARCHAR2(250);
  lv_where_str      VARCHAR2(5000);
  lv_sql_stmt       VARCHAR2(5000);
  lv_cursor_stmt    VARCHAR2(5000);
  lv_batch_id       msc_st_routings.batch_id%TYPE;
  lv_message_text   msc_errors.error_text%TYPE;
  ex_logging_err    EXCEPTION;


  CURSOR c2(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_job_operation_networks
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

  CURSOR c3(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_job_operations
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

 CURSOR c4 (p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_job_requirement_ops
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    batch_id          = p_batch_id
    AND    sr_instance_code  = v_instance_code;

  CURSOR c5(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_job_op_resources
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

  CURSOR c6(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_job_op_resources
    WHERE  process_flag     = G_IN_PROCESS
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id
    AND    NVL(resource_seq_num,NULL_VALUE) = NULL_VALUE
    AND    NVL(RESOURCE_SEQ_CODE, NULL_CHAR) <> NULL_CHAR
    AND    deleted_flag     = SYS_NO;

    BEGIN

    -- -- Pre processing for MSC_ST_JOB_OPERATION_NETWORKS
    --Duplicate records check for the records whose source is XML

       lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    v_sql_stmt := 1;

    lv_sql_stmt :=
  'UPDATE    msc_st_job_operation_networks mson1 '
  ||' SET       process_flag = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE     message_id < ( SELECT max(message_id) '
  ||'          FROM msc_st_job_operation_networks mson2'
  ||'          WHERE mson2.wip_entity_name  = mson1.wip_entity_name'
  ||'          AND   mson2.organization_code  = mson1.organization_code'
  ||'          AND   mson2.from_operation_seq_code = mson1.from_operation_seq_code'
  ||'          AND   mson2.to_operation_seq_code = mson1.to_operation_seq_code'
  ||'          AND   mson2.sr_instance_code   = mson1.sr_instance_code'
  ||'          AND   NVL(mson2.routing_name,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(mson1.routing_name, '||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(mson2.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(mson1.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(mson2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(mson1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'          AND   mson2.process_flag   ='||G_IN_PROCESS
  ||'          AND    NVL(mson2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
  ||' AND     mson1.process_flag = '||G_IN_PROCESS
  ||' AND     mson1.sr_instance_code = :v_instance_code'
  ||' AND     NVL(mson1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  --Duplicate records check for the records whose source is batch load

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    v_sql_stmt := 2;

  lv_sql_stmt :=
  'UPDATE   msc_st_job_operation_networks mson1'
  ||' SET      process_flag = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE    EXISTS ( SELECT 1 '
  ||'          FROM msc_st_job_operation_networks mson2'
  ||'          WHERE mson2.wip_entity_name  = mson1.wip_entity_name'
  ||'          AND   mson2.organization_code  = mson1.organization_code'
  ||'          AND   mson2.from_operation_seq_code = mson1.from_operation_seq_code'
  ||'          AND   mson2.to_operation_seq_code = mson1.to_operation_seq_code'
  ||'          AND   mson2.sr_instance_code   = mson1.sr_instance_code'
  ||'          AND   NVL(mson2.routing_name,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(mson1.routing_name, '||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(mson2.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(mson1.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(mson2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(mson1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'          AND   mson2.process_flag   ='||G_IN_PROCESS
  ||'          AND NVL(mson2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||'          AND mson2.rowid <> mson1.rowid )'
  ||'  AND     mson1.process_flag          = '||G_IN_PROCESS
  ||'  AND     mson1.sr_instance_code       = :v_instance_code'
  ||'  AND     NVL(mson1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  COMMIT;

  lv_column_names :=
   '  WIP_ENTITY_NAME              ||''~''||'
 ||'  FROM_OPERATION_SEQ_CODE      ||''~''||'
 ||'  FROM_OP_EFFECTIVITY_DATE     ||''~''||'
 ||'  TO_OPERATION_SEQ_CODE        ||''~''||'
 ||'  TO_OP_EFFECTIVITY_DATE       ||''~''||'
 ||'  ROUTING_NAME                 ||''~''||'
 ||'  ASSEMBLY_NAME                ||''~''||'
 ||'  ALTERNATE_ROUTING_DESIGNATOR ||''~''||'
 ||'  TRANSITION_TYPE              ||''~''||'
 ||'  PLANNING_PCT                 ||''~''||'
 ||'  ORGANIZATION_CODE            ||''~''||'
 ||'  SR_INSTANCE_CODE             ||''~''||'
 ||'  DELETED_FLAG                 ||''~''||'
 ||'  COMPANY_NAME ';

 -- Now processing in batch
    LOOP

      v_sql_stmt := 3;

      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;


      v_sql_stmt := 4;

      lv_sql_stmt :=
      ' UPDATE msc_st_job_operation_networks '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN  c2(lv_batch_id);
      FETCH c2 BULK COLLECT INTO lb_rowid;
      CLOSE c2;

      v_sql_stmt := 5;

      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_job_operation_networks
      SET  st_transaction_id = msc_st_job_op_networks_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);


      -- error out the records where wip_entity_name is null

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'WIP_ENTITY_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 6;
      lv_sql_stmt :=
      'UPDATE   msc_st_job_operation_networks'
      ||' SET   error_text   = '||''''||lv_message_text||''''||','
      ||'       process_flag = '||G_ERROR_FLG
      ||' WHERE NVL(wip_entity_name,'||''''||NULL_CHAR||''''||') '
      ||'       =                   '||''''||NULL_CHAR||''''
      ||' AND   process_flag                  = '||G_IN_PROCESS
      ||' AND   NVL(batch_id,'||NULL_VALUE||')= :lv_batch_id'
      ||' AND   sr_instance_code              = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


      -- Set the  message
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_JOB_OPERATION_NETWORKS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     --Deletion is not allowed on this table.
      v_sql_stmt := 06;
      lv_sql_stmt :=
      ' UPDATE     msc_st_job_operation_networks '
      ||' SET      process_flag     ='||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Check whether delete flag value is in (1,2),if not default to SYS_NO

   lv_where_str :=
   ' AND NVL(deleted_flag,'||NULL_VALUE||') NOT IN(1,2)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_JOB_OPERATION_NETWORKS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DELETED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PLANNING_PCT');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out the records whose PLANNING_PCT is NULL

     v_sql_stmt := 7;
    lv_sql_stmt :=
    'UPDATE    msc_st_job_operation_networks'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  NVL(PLANNING_PCT,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'RECOMMENDED');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out the records where RECOMMENDED is not 'Y' or 'N'

     v_sql_stmt := 7;
    lv_sql_stmt :=
    'UPDATE    msc_st_job_operation_networks'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  recommended NOT IN (''Y'', ''N'')'
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ASSEMBLY_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out the records whose Assembly Name is NULL

     v_sql_stmt := 8;
    lv_sql_stmt :=
    'UPDATE    msc_st_job_operation_networks'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  NVL(assembly_name,'||''''||NULL_CHAR||''''||') '
    ||'         = '||''''||NULL_CHAR||''''
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   -- Now we will check whether Routing Name is NULL , if it is NULL we will populate the
     -- ASSEMBLY NAME in ROUTING_NAME column for all such records

    v_sql_stmt := 9;

    lv_sql_stmt :=
    'UPDATE msc_st_job_operation_networks '
    ||' SET    routing_name = assembly_name'
    ||' WHERE  sr_instance_code = :v_instance_code'
    ||' AND    process_flag     = '||G_IN_PROCESS
    ||' AND    NVL(routing_name,'||''''||NULL_CHAR||''''||') '
    ||'         = '||''''||NULL_CHAR||''''
    ||' AND    batch_id         = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Derive Organization_id
      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_JOB_OPERATION_NETWORKS',
                      p_org_partner_name => 'ORGANIZATION_CODE',
                      p_org_partner_id   => 'ORGANIZATION_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_ORGANIZATION,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --Deriving wip_entity_id
      v_sql_stmt := 10;
      lv_sql_stmt :=
      'UPDATE msc_st_job_operation_networks mss'
      ||' SET wip_entity_id     = (SELECT local_id'
      ||'       FROM   msc_local_id_supply mls'
      ||'       WHERE  mls.char4 = mss.wip_entity_name'
      ||'       AND    mls.char3 = mss.organization_code'
      ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mss.company_name,'||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.char1 = mss.sr_instance_code'
      ||'       AND    mls.entity_name = ''WIP_ENTITY_ID'' )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :lv_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

    -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,WIP_ENTITY_NAME',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_SUPPLIES',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_JOB_OPERATION_NETWORKS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Error out the records if WIP_ENTITY_ID NULL

    v_sql_stmt := 11;
    lv_sql_stmt:=
    'UPDATE      msc_st_job_operation_networks msrr'
    ||' SET      process_flag              ='||G_ERROR_FLG||','
    ||'          error_text   = '||''''||lv_message_text||''''
    ||' WHERE    NVL(wip_entity_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND      sr_instance_code            = :v_instance_code'
    ||' AND      process_flag                ='||G_IN_PROCESS
    ||' AND      batch_id                    = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   -- from_operation_seq_code or to_operation_seq_code cannot be null.
   -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'FROM_OPERATION_SEQ_CODE OR '
                                           ||'TO_OPERATION_SEQ_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out the records whose from_operation_seq_code or to_operation_seq_code is NULL

    v_sql_stmt := 12;
    lv_sql_stmt :=
    'UPDATE    msc_st_job_operation_networks'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE ( NVL(from_operation_seq_code,'||''''||NULL_CHAR||''''||') = '||''''||NULL_CHAR||''''
    ||' OR      NVL(to_operation_seq_code,'||''''||NULL_CHAR||''''||') = '||''''||NULL_CHAR||''''||') '
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   -- from op_seq_code and to_op_seq_codes cannot be same
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_FROM_TO_SAME',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'TO_OPERATION_SEQ_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out the records whose from_operation_seq_code is same as to_op_seq_code

     v_sql_stmt := 13;
    lv_sql_stmt :=
    'UPDATE    msc_st_job_operation_networks'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  NVL(to_operation_seq_code,'||''''||NULL_CHAR||''''||') = NVL(from_operation_seq_code,'||''''||NULL_CHAR||''''||')'
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Derive routing_sequence_id

   -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,ROUTING_NAME',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_ROUTINGS',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_JOB_OPERATION_NETWORKS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Derive the ROUTING_SEQUENCE_ID from LOCAL ID table

    lv_return :=
    MSC_ST_UTIL.DERIVE_ROUTING_SEQUENCE_ID
                      (p_table_name     => 'MSC_ST_JOB_OPERATION_NETWORKS',
                       p_rtg_col_name   => 'ROUTING_NAME',
                       p_rtg_col_id     => 'ROUTING_SEQUENCE_ID',
                       p_instance_code  => v_instance_code,
                       p_severity       => G_SEV_ERROR,
                       p_message_text   => lv_message_text,
                       p_batch_id       => lv_batch_id,
                       p_debug          => v_debug,
                       p_error_text     => lv_error_text);

    if (lv_return <> 0 )then
       RAISE ex_logging_err;
    end if;


    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'FROM_OP_EFFECTIVITY_DATE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => 'SYSDATE' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default from operation effectivity date as SYSDATE if NULL

     v_sql_stmt := 14;
     lv_where_str :=
     ' AND NVL(from_op_effectivity_date,SYSDATE-36500 ) = SYSDATE-36500 ' ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_JOB_OPERATION_NETWORKS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'FROM_OP_EFFECTIVITY_DATE',
                     p_debug             => v_debug,
                     p_default_value     => 'SYSDATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


   -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'TO_OP_EFFECTIVITY_DATE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => 'SYSDATE' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default to operation effectivity date as SYSDATE if NULL
     v_sql_stmt := 15;
     lv_where_str :=
     ' AND NVL(to_op_effectivity_date,SYSDATE-36500 ) = SYSDATE-36500 ' ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_JOB_OPERATION_NETWORKS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'TO_OP_EFFECTIVITY_DATE',
                     p_debug             => v_debug,
                     p_default_value     => 'SYSDATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

       -- Derive from_op_seq_id,  from_op_seq_num

    v_sql_stmt := 16;
    lv_sql_Stmt :=
    'UPDATE     msc_st_job_operation_networks mson'
    ||' SET     (from_op_seq_id, from_op_seq_num) =  (SELECT local_id, number1'
    ||'         FROM msc_local_id_setup mlis'
    ||'         WHERE  mlis.char1 = mson.sr_instance_code'
    ||'         AND     NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'          =    NVL(mson.company_name,'||''''||NULL_CHAR||''''||') '
    ||'         AND    mlis.char3 = mson.organization_code'
    ||'         AND    mlis.char4 = mson.routing_name'
    ||'         AND    mlis.char5 = mson.from_operation_seq_code'
    ||'         AND   NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
    ||'           =   NVL(mson.alternate_routing_designator,'||''''||NULL_CHAR||''''||')'
    ||'         AND    mlis.date1 = mson.FROM_OP_EFFECTIVITY_DATE'
    ||'         AND    mlis.entity_name = ''OPERATION_SEQUENCE_ID'' '
    ||'         AND    mlis.instance_id = '||v_instance_id||')'
    ||'  WHERE      sr_instance_code = :v_instance_code'
    ||'  AND        process_flag     ='||G_IN_PROCESS
    ||'  AND        batch_id         = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   -- from_op_seq_num cannot be null. Error out the records with null value for them.
   -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'FROM_OP_SEQ_ID OR '
                                           ||'FROM_OP_SEQ_NUM');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out the records whose from_op_seq_id, from _op_seq_num is NULL

    v_sql_stmt := 17;
    lv_sql_stmt :=
    'UPDATE    msc_st_job_operation_networks'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  (NVL(from_op_seq_id,'||NULL_VALUE||') ='||NULL_VALUE
    ||' OR     NVL(from_op_seq_num,'||NULL_VALUE||') ='||NULL_VALUE||')'
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;


   -- Derive to_op_seq_id,  to_op_seq_num

    v_sql_stmt := 18;
    lv_sql_Stmt :=
    'UPDATE     msc_st_job_operation_networks mson'
    ||' SET     (to_op_seq_id, to_op_seq_num) =  (SELECT local_id, number1'
    ||'         FROM msc_local_id_setup mlis'
    ||'         WHERE  mlis.char1 = mson.sr_instance_code'
    ||'         AND     NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'          =    NVL(mson.company_name,'||''''||NULL_CHAR||''''||') '
    ||'         AND    mlis.char3 = mson.organization_code'
    ||'         AND    mlis.char4 = mson.routing_name'
    ||'         AND    mlis.char5 = mson.to_operation_seq_code'
    ||'         AND   NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
    ||'           =   NVL(mson.alternate_routing_designator,'||''''||NULL_CHAR||''''||')'
    ||'         AND    mlis.date1 = mson.TO_OP_EFFECTIVITY_DATE'
    ||'         AND    mlis.entity_name = ''OPERATION_SEQUENCE_ID'' '
    ||'         AND    mlis.instance_id = '||v_instance_id||')'
    ||'  WHERE      sr_instance_code = :v_instance_code'
    ||'  AND        process_flag     ='||G_IN_PROCESS
    ||'  AND        batch_id         = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   -- to_op_seq_num cannot be null. Error out the records with null value for them.
   -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'TO_OP_SEQ_ID OR '
                                           ||'TO_OP_SEQ_NUM');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out the records whose to_op_seq_id, to_op_seq_num is NULL

    v_sql_stmt := 19;
    lv_sql_stmt :=
    'UPDATE    msc_st_job_operation_networks'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  (NVL(to_op_seq_id,'||NULL_VALUE||') ='||NULL_VALUE
    ||' OR     NVL(to_op_seq_num,'||NULL_VALUE||') ='||NULL_VALUE||')'
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'TRANSITION_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_TRANSITION_TYPE);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Defualt transition type to 2(i.e. alternate) if not in (1,2)
     v_sql_stmt := 20;
     lv_where_str :=
     ' AND NVL(transition_type,'||NULL_VALUE||') NOT IN (1,2)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name       => 'MSC_ST_JOB_OPERATION_NETWORKS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'TRANSITION_TYPE',
                     p_debug             => v_debug,
                     p_default_value     => G_TRANSITION_TYPE);


      IF lv_return <> 0 THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      END IF;

    --Call to customised validation.

      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_JOB_OPERATION_NETWORKS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   COMMIT;
 END LOOP;

 -- There should be at the max only one primary path from a from_operation_seq_code
 -- Else error out all the records for that from_operation_seq_code

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_MULTI_PRI_PATH',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'TRANSITION_TYPE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     v_sql_stmt := 21;
    lv_sql_stmt :=
  'UPDATE   msc_st_job_operation_networks mson1'
  ||' SET     process_flag = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE  1 <  ( SELECT COUNT(*) '
  ||'          FROM msc_st_job_operation_networks mson2'
  ||'          WHERE mson2.wip_entity_name      = mson1.wip_entity_name'
  ||'          AND   mson2.organization_code  = mson1.organization_code'
  ||'          AND   mson2.from_operation_seq_code  = mson1.from_operation_seq_code'
  ||'          AND   mson2.sr_instance_code   = mson1.sr_instance_code'
  ||'          AND   NVL(mson2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(mson1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'          AND   mson2.transition_type = 1 '
  ||'          AND   mson2.process_flag   ='||G_IN_PROCESS
  ||'          AND   mson2.deleted_flag <>1 '
  ||'         GROUP BY wip_entity_name, sr_instance_code,company_name,organization_code,from_operation_seq_code)'
  ||'  AND     mson1.process_flag          = '||G_IN_PROCESS
  ||'  AND     mson1.deleted_flag <>1 '
  ||'  AND     mson1.sr_instance_code       = :v_instance_code';



         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

   -- The summation of the planning_pct's from a from_operation_sed_code should be exactly 100.
    -- Else error out all the records for that from_operation_seq_code

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_INVALID_PLANNING_PCT',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PLANNING_PCT');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     v_sql_stmt := 22;
    lv_sql_stmt :=
  'UPDATE   msc_st_job_operation_networks mson1'
  ||' SET      process_flag = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE 100 <>   ( SELECT SUM(planning_pct) '
  ||'          FROM msc_st_job_operation_networks mson2'
  ||'          WHERE mson2.wip_entity_name      = mson1.wip_entity_name'
  ||'          AND   mson2.organization_code  = mson1.organization_code'
  ||'          AND   mson2.from_operation_seq_code  = mson1.from_operation_seq_code'
  ||'          AND   mson2.sr_instance_code   = mson1.sr_instance_code'
  ||'          AND   NVL(mson2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(mson1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'          AND   mson2.process_flag   ='||G_IN_PROCESS
  ||'          AND   mson2.deleted_flag <>1 '
  ||'         GROUP BY wip_entity_name,sr_instance_code,company_name,organization_code,from_operation_seq_code)'
  ||'  AND     mson1.process_flag          = '||G_IN_PROCESS
  ||'  AND     mson1.deleted_flag <>1 '
  ||'  AND     mson1.sr_instance_code       = :v_instance_code';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  -- Set the process flag as Valid and derive sr_instance_id
    lv_return :=
    MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name   => 'MSC_ST_JOB_OPERATION_NETWORKS',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug);

      IF lv_return < 0 THEN
        RAISe ex_logging_err;
      END IF;

    -- At the end calling  the LOG_ERROR for logging all errored out records

   lv_return :=
   MSC_ST_UTIL.LOG_ERROR(p_table_name    => 'MSC_ST_JOB_OPERATION_NETWORKS',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug );

    IF lv_return < 0 THEN
        Raise ex_logging_err;
    END IF;

    -- Validation for MSC_ST_JOB_OPERATIONS

    --Duplicate records check for the records whose source is XML

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    v_sql_stmt := 18;

  lv_sql_stmt :=
  'UPDATE    msc_st_job_operations msro1 '
  ||' SET       process_flag = '||G_ERROR_FLG||','
  ||'           error_text   = '||''''||lv_message_text||''''
  ||' WHERE    message_id < ( SELECT max(message_id) '
  ||'          FROM msc_st_job_operations msro2'
  ||'          WHERE msro2.sr_instance_code   = msro1.sr_instance_code'
  ||'          AND   msro2.organization_code  = msro1.organization_code'
  ||'          AND   msro2.wip_entity_name    = msro1.wip_entity_name'
  ||'          AND   NVL(msro2.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msro1.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(msro2.routing_name,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msro1.routing_name, '||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(msro2.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msro1.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'          AND   msro2.process_flag   ='||G_IN_PROCESS
  ||'          AND    NVL(msro2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
  ||' AND     msro1.process_flag = '||G_IN_PROCESS
  ||' AND     msro1.sr_instance_code = :v_instance_code'
  ||' AND     NVL(msro1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  --Duplicate records check for the records whose source is batch load

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 19;
  lv_sql_stmt :=
  'UPDATE   msc_st_job_operations msro1'
  ||' SET      process_flag = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE    EXISTS ( SELECT 1 '
  ||'          FROM msc_st_job_operations msro2'
  ||'          WHERE msro2.sr_instance_code   = msro1.sr_instance_code'
  ||'          AND   msro2.organization_code  = msro1.organization_code'
  ||'          AND   msro2.wip_entity_name    = msro1.wip_entity_name'
  ||'          AND   NVL(msro2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(msro1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(msro2.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msro1.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(msro2.routing_name,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msro1.routing_name, '||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(msro2.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msro1.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'          AND   msro2.process_flag   ='||G_IN_PROCESS
  ||'               AND NVL(msro2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||'         GROUP BY sr_instance_code,company_name,organization_code,wip_entity_name,operation_seq_code'
  ||'          HAVING COUNT(*) >1 )'
  ||'  AND     msro1.process_flag          = '||G_IN_PROCESS
  ||'  AND     msro1.sr_instance_code       = :v_instance_code'
  ||'  AND     NVL(msro1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;


  lv_column_names :=
  'ROUTING_NAME                   ||''~''||'
  ||' WIP_ENTITY_NAME             ||''~''||'
  ||' ASSEMBLY_NAME               ||''~''||'
  ||' ALTERNATE_ROUTING_DESIGNATOR ||''~''||'
  ||' OPERATION_SEQ_CODE          ||''~''||'
  ||' EFFECTIVITY_DATE            ||''~''||'
  ||' RECO_START_DATE             ||''~''||'
  ||' DEPARTMENT_CODE             ||''~''||'
  ||' ORGANIZATION_CODE           ||''~''||'
  ||' SR_INSTANCE_CODE            ||''~''||'
  ||' RECO_COMPLETION_DATE        ||''~''||'
  ||' DISABLE_DATE                ||''~''||'
  ||' NETWORK_START_END           ||''~''||'
  ||' OPERATION_TYPE              ||''~''||'
  ||' MINIMUM_TRANSFER_QUANTITY   ||''~''||'
  ||' YIELD                       ||''~''||'
  ||' OPERATION_LEAD_TIME_PERCENT ||''~''||'
  ||' CUMULATIVE_YIELD            ||''~''||'
  ||' REVERSE_CUMULATIVE_YIELD    ||''~''||'
  ||' NET_PLANNING_PERCENT        ||''~''||'
  ||' STANDARD_OPERATION_CODE     ||''~''||'
  ||' DELETED_FLAG                ||''~''||'
  ||' COMPANY_NAME ';

 LOOP

     lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;

      v_sql_stmt := 21;
      lv_sql_stmt :=
      ' UPDATE msc_st_job_operations '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN  c3(lv_batch_id);
      FETCH c3 BULK COLLECT INTO lb_rowid;
      CLOSE c3;

      v_sql_stmt := 22;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_job_operations
      SET  st_transaction_id = msc_st_job_operations_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);


      -- Set the  message
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_JOB_OPERATIONS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     --Deletion is not allowed on this table.
      v_sql_stmt := 06;
      lv_sql_stmt :=
      ' UPDATE     msc_st_job_operations '
      ||' SET      process_flag     ='||G_ERROR_FLG||','
      ||'          error_text       = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


     -- Check whether delete flag value is in (1,2),if not default to SYS_NO

   lv_where_str :=
   ' AND NVL(deleted_flag,'||NULL_VALUE||') <>'||SYS_NO;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_JOB_OPERATIONS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DELETED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Set the  message

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- derive  organization id ,
     lv_return :=
     MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name     => 'MSC_ST_JOB_OPERATIONS',
                                    p_org_partner_name  =>'ORGANIZATION_CODE',
                                    p_org_partner_id    =>'ORGANIZATION_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_ORGANIZATION,
                                    p_severity          => G_SEV_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_batch_id          =>lv_batch_id,
                                    p_debug             => v_debug,
                                    p_error_text        =>lv_error_text);

     if(lv_return <> 0) then
        RAISE ex_logging_err;
     end if;

    -- error out the records where wip_entity_name is null

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'WIP_ENTITY_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 6;
      lv_sql_stmt :=
      'UPDATE   msc_st_job_operations'
      ||' SET   error_text   = '||''''||lv_message_text||''''||','
      ||'       process_flag = '||G_ERROR_FLG
      ||' WHERE NVL(wip_entity_name,'||''''||NULL_CHAR||''''||') '
      ||'       =                   '||''''||NULL_CHAR||''''
      ||' AND   process_flag                  = '||G_IN_PROCESS
      ||' AND   NVL(batch_id,'||NULL_VALUE||')= :lv_batch_id'
      ||' AND   sr_instance_code              = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;


     --Deriving wip_entity_id
      v_sql_stmt := 10;
      lv_sql_stmt :=
      'UPDATE msc_st_job_operations mss'
      ||' SET wip_entity_id     = (SELECT local_id'
      ||'       FROM   msc_local_id_supply mls'
      ||'       WHERE  mls.char4 = mss.wip_entity_name'
      ||'       AND    mls.char3 = mss.organization_code'
      ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mss.company_name,'||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.char1 = mss.sr_instance_code'
      ||'       AND    mls.entity_name = ''WIP_ENTITY_ID'' )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :lv_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

    -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,WIP_ENTITY_NAME',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_SUPPLIES',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_JOB_OPERATION_NETWORKS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Error out the records if WIP_ENTITY_ID NULL

    v_sql_stmt := 11;
    lv_sql_stmt:=
    'UPDATE      msc_st_job_operations msrr'
    ||' SET      process_flag              ='||G_ERROR_FLG||','
    ||'          error_text   = '||''''||lv_message_text||''''
    ||' WHERE    NVL(wip_entity_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND      sr_instance_code            = :v_instance_code'
    ||' AND      process_flag                ='||G_IN_PROCESS
    ||' AND      batch_id                    = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

     -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'RECOMMENDED');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out the records where RECOMMENDED is not 'Y' or 'N'

     v_sql_stmt := 7;
    lv_sql_stmt :=
    'UPDATE    msc_st_job_operations'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  recommended NOT IN (''Y'', ''N'')'
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   -- Now we will check whether Routing Name is NULL , if it is NULL we will populate the
   -- ASSEMBLY NAME in ROUTING_NAME column for all such records

    lv_sql_stmt :=
    'UPDATE msc_st_job_operations '
    ||' SET    routing_name = assembly_name'
    ||' WHERE  sr_instance_code = :v_instance_code'
    ||' AND    process_flag     = '||G_IN_PROCESS
    ||' AND    NVL(routing_name,'||''''||NULL_CHAR||''''||') '
    ||'         = '||''''||NULL_CHAR||''''
    ||' AND    batch_id         = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

      -- Derive routing_sequence_id

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,ROUTING_NAME',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_ROUTINGS',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_JOB_OPERATIONS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Derive the ROUTING_SEQUENCE_ID from LOCAL ID table

    lv_return :=
    MSC_ST_UTIL.DERIVE_ROUTING_SEQUENCE_ID
                      (p_table_name     => 'MSC_ST_JOB_OPERATIONS',
                       p_rtg_col_name   => 'ROUTING_NAME',
                       p_rtg_col_id     => 'ROUTING_SEQUENCE_ID',
                       p_instance_code  => v_instance_code,
                       p_severity       => G_SEV_ERROR,
                       p_message_text   => lv_message_text,
                       p_batch_id       => lv_batch_id,
                       p_debug          => v_debug,
                       p_error_text     => lv_error_text);

    if (lv_return <> 0 )then
       RAISE ex_logging_err;
    end if;



      -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'EFFECTIVITY_DATE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => 'SYSDATE' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default effectivity date as SYSDATE if NULL

     lv_where_str :=
     ' AND NVL(effectivity_date,SYSDATE-36500 ) = SYSDATE-36500 ' ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_JOB_OPERATIONS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'EFFECTIVITY_DATE',
                     p_debug             => v_debug,
                     p_default_value     => 'SYSDATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Derive operation_seq_num, operation_sequence_id

    v_sql_stmt := 18;
    lv_sql_Stmt :=
    'UPDATE     msc_st_job_operations mson'
    ||' SET     (operation_sequence_id, operation_seq_num) =  (SELECT local_id, number1'
    ||'         FROM msc_local_id_setup mlis'
    ||'         WHERE  mlis.char1 = mson.sr_instance_code'
    ||'         AND     NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'          =    NVL(mson.company_name,'||''''||NULL_CHAR||''''||') '
    ||'         AND    mlis.char3 = mson.organization_code'
    ||'         AND    mlis.char4 = mson.routing_name'
    ||'         AND    mlis.char5 = mson.operation_seq_code'
    ||'         AND   NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
    ||'           =   NVL(mson.alternate_routing_designator,'||''''||NULL_CHAR||''''||')'
    ||'         AND    mlis.date1 = mson.EFFECTIVITY_DATE'
    ||'         AND    mlis.entity_name = ''OPERATION_SEQUENCE_ID'' '
    ||'         AND    mlis.instance_id = '||v_instance_id||')'
    ||'  WHERE      sr_instance_code = :v_instance_code'
    ||'  AND        process_flag     ='||G_IN_PROCESS
    ||'  AND        batch_id         = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   -- operation_seq_num cannot be null. Error out the records with null value for them.
   -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'OPERATION_SEQUENCE_ID OR '
                                           ||'OPERATION_SEQ_NUM');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out the records whose operation_sequence_id, operation_seq_num is NULL

    v_sql_stmt := 19;
    lv_sql_stmt :=
    'UPDATE    msc_st_job_operations'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  (NVL(operation_sequence_id,'||NULL_VALUE||') ='||NULL_VALUE
    ||' OR     NVL(operation_seq_num,'||NULL_VALUE||') ='||NULL_VALUE||')'
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Derive department id
    v_sql_stmt := 27;
    lv_sql_stmt :=
    'UPDATE     msc_st_job_operations msro'
    ||' SET     department_id=    (SELECT local_id'
    ||'         FROM msc_local_id_setup mlis'
    ||'         WHERE  mlis.char1 = msro.sr_instance_code'
    ||'         AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'         =    NVL(msro.company_name,'||''''||NULL_CHAR||''''||') '
    ||'         AND    mlis.char3 = msro.organization_code'
    ||'         AND    mlis.char4 = msro.department_code'
    ||'         AND    mlis.entity_name = ''DEPARTMENT_ID'')'
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        deleted_flag     = '||SYS_NO
    ||' AND        process_flag     = '||G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,DEPARTMENT_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_DEPARTMENT_RESOURCES',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_JOB_OPERATIONS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Log an error if unable to derive department id

   v_sql_stmt := 28;
   lv_sql_stmt :=
   'UPDATE      msc_st_job_operations '
   ||' SET      process_flag ='||G_ERROR_FLG||','
   ||'          error_text   = '||''''||lv_message_text||''''
   ||' WHERE    NVL(department_id,'||NULL_VALUE||') ='||NULL_VALUE
   ||' AND      sr_instance_code    = :v_instance_code'
   ||' AND      deleted_flag        ='||SYS_NO
   ||' AND      process_flag        ='|| G_IN_PROCESS
   ||' AND      batch_id            = :lv_batch_id' ;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   --Call to customised validation.

      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_JOB_OPERATIONS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Set the process flag as Valid and derive sr_instance_id
    lv_return :=
    MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name   => 'MSC_ST_JOB_OPERATIONS',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug,
                               p_batch_id       => lv_batch_id);

      IF lv_return < 0 THEN
        RAISe ex_logging_err;
      END IF;


    -- At the end calling  the LOG_ERROR for logging all errored out records

   lv_return :=
   MSC_ST_UTIL.LOG_ERROR(p_table_name    => 'MSC_ST_JOB_OPERATIONS',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug,
                         p_batch_id      => lv_batch_id  );

    IF lv_return < 0 THEN
        RAISe ex_logging_err;
    END IF;

   COMMIT;
 END LOOP;

    -- Validation for MSC_ST_JOB_REQUIREMENT_OPS

    --Duplicate records check for the records whose source is XML

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    v_sql_stmt := 18;

    lv_sql_stmt :=
  'UPDATE   msc_st_job_requirement_ops msd1'
  ||' SET     process_flag  = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE   message_id <  (SELECT MAX(message_id)'
  ||'         FROM msc_st_job_requirement_ops msd2'
  ||'         WHERE  msd2.sr_instance_code '
  ||'                = msd1.sr_instance_code '
  ||'         AND   msd2.organization_code '
  ||'                = msd1.organization_code '
  ||'         AND   NVL(msd2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(msd1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'         AND msd2.wip_entity_name = msd1.wip_entity_name'
  ||'         AND NVL(msd2.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msd1.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'         AND NVL(msd2.source_phantom_name,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msd1.source_phantom_name,'||''''||NULL_CHAR||''''||') '
  ||'         AND NVL(msd2.assembly_item_name,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msd1.assembly_item_name,'||''''||NULL_CHAR||''''||') '
  ||'         AND NVL(msd2.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
  ||'                   = NVL(msd1.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
  ||'          AND   NVL(msd2.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'               = NVL(msd1.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'         AND    msd2.component_name '
  ||'                = msd1.component_name '
  ||'         AND    msd2.primary_component_name '
  ||'                = msd1.primary_component_name '
  ||'          AND   msd2.effectivity_date '
  ||'                = msd1.effectivity_date '
  ||'         AND   msd2.process_flag = '||G_IN_PROCESS
  ||'         AND    NVL(msd2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
  ||' AND     msd1.process_flag ='|| G_IN_PROCESS
  ||' AND     msd1.sr_instance_code = :v_instance_code '
  ||' AND     NVL(msd1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

   --Duplicate records check for the records whose source is batch load

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

  v_sql_stmt := 02;

  lv_sql_stmt :=
  'UPDATE msc_st_job_requirement_ops  msd1'
  ||' SET     process_flag  = '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE   EXISTS( SELECT 1 '
  ||'         FROM msc_st_job_requirement_ops msd2'
  ||'         WHERE  msd2.sr_instance_code '
  ||'                = msd1.sr_instance_code '
  ||'          AND   msd2.organization_code '
  ||'                = msd1.organization_code '
  ||'          AND   NVL(msd2.company_name,'||''''||NULL_CHAR||''''||') '
  ||'                 =    NVL(msd1.company_name,'||''''||NULL_CHAR||''''||') '
  ||'          AND   msd2.wip_entity_name = msd1.wip_entity_name'
  ||'          AND   NVL(msd2.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msd1.operation_seq_code,'||''''||NULL_CHAR||''''||') '
  ||'         AND NVL(msd2.source_phantom_name,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msd1.source_phantom_name,'||''''||NULL_CHAR||''''||') '
  ||'         AND NVL(msd2.assembly_item_name,'||''''||NULL_CHAR||''''||') '
  ||'                = NVL(msd1.assembly_item_name,'||''''||NULL_CHAR||''''||') '
  ||'         AND NVL(msd2.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
  ||'                   = NVL(msd1.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
  ||'         AND NVL(msd2.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'               = NVL(msd1.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
  ||'          AND   msd2.component_name '
  ||'                = msd1.component_name '
  ||'          AND   msd2.primary_component_name '
  ||'                = msd1.primary_component_name '
  ||'          AND   msd2.effectivity_date '
  ||'                = msd1.effectivity_date '
  ||'          AND   msd2.process_flag = '||G_IN_PROCESS
  ||'          AND NVL(msd2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
  ||'       GROUP BY  sr_instance_code,organization_code,wip_entity_name,'
  ||'       company_name,operation_seq_code,component_name,primary_component_name,source_phantom_name,effectivity_date'
  ||'       HAVING COUNT(*) > 1)'
  ||' AND   msd1.process_flag  = '||G_IN_PROCESS
  ||' AND   msd1.sr_instance_code = :v_instance_code'
  ||' AND   NVL(msd1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  lv_column_names :=
  'COMPONENT_NAME                     ||''~''||'
  ||' ORGANIZATION_CODE               ||''~''||'
  ||' WIP_ENTITY_NAME                 ||''~''||'
  ||' SR_INSTANCE_CODE                ||''~''||'
  ||' ASSEMBLY_ITEM_NAME              ||''~''||'
  ||' OPERATION_SEQ_CODE              ||''~''||'
  ||' FROM_END_ITEM_UNIT_NUMBER       ||''~''||'
  ||' TO_END_ITEM_UNIT_NUMBER         ||''~''||'
  ||' WIP_SUPPLY_TYPE                 ||''~''||'
  ||' DELETED_FLAG                    ||''~''||'
  ||' COMPANY_NAME                    ||''~''||'
  ||' RECO_DATE_REQUIRED              ||''~''||'
  ||' RECOMMENDED                     ||''~''||'
  ||' EFFECTIVITY_DATE                ||''~''||'
  ||' DISABLE_DATE                    ||''~''||'
  ||' PRIMARY_COMPONENT_NAME' ;

  LOOP
      v_sql_stmt := 03;
      SELECT       msc_st_batch_id_s.NEXTVAL
      INTO         lv_batch_id
      FROM         DUAL;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      ' UPDATE    msc_st_job_requirement_ops '
      ||' SET     batch_id  = :lv_batch_id'
      ||' WHERE   process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND     sr_instance_code               = :v_instance_code'
      ||' AND     NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND     rownum                        <= '||v_batch_size;



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND ;

      OPEN c4 (lv_batch_id);
    FETCH c4 BULK COLLECT INTO lb_rowid;
    CLOSE c4;

  v_sql_stmt := 03;
    FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
    UPDATE msc_st_job_requirement_ops
    SET    st_transaction_id   = msc_st_job_requirement_ops_s.NEXTVAL,
           refresh_id          = v_refresh_id,
           last_update_date    = v_current_date,
           last_updated_by     = v_current_user,
           creation_date       = v_current_date,
           created_by          = v_current_user
    WHERE  rowid               = lb_rowid(j);

     -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;
    --Log a warning for those records where the deleted_flag has a value other
    --SYS_NO

    lv_where_str :=
     ' AND NVL(deleted_flag,'||NULL_VALUE||') NOT IN(1,2)';

    lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_JOB_REQUIREMENT_OPS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => lv_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'DELETED_FLAG',
                    p_debug             => v_debug,
                    p_default_value     => SYS_NO);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     --Derive Organization_id
    lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                   (p_table_name       => 'MSC_ST_JOB_REQUIREMENT_OPS',
                    p_org_partner_name => 'ORGANIZATION_CODE',
                    p_org_partner_id   => 'ORGANIZATION_ID',
                    p_instance_code    => v_instance_code,
                    p_partner_type     => G_ORGANIZATION,
                    p_error_text       => lv_error_text,
                    p_batch_id         => lv_batch_id,
                    p_severity         => G_SEV_ERROR,
                    p_message_text     => lv_message_text,
                    p_debug            => v_debug,
                    p_row              => lv_column_names);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    --Deriving wip_entity_id
      v_sql_stmt := 10;
      lv_sql_stmt :=
      'UPDATE msc_st_job_requirement_ops mss'
      ||' SET wip_entity_id     = (SELECT local_id'
      ||'       FROM   msc_local_id_supply mls'
      ||'       WHERE  mls.char4 = mss.wip_entity_name'
      ||'       AND    mls.char3 = mss.organization_code'
      ||'       AND    NVL(mls.char2,       '||''''||NULL_CHAR||''''||') = '
      ||'              NVL(mss.company_name,'||''''||NULL_CHAR||''''||') '
      ||'       AND    mls.char1 = mss.sr_instance_code'
      ||'       AND    mls.entity_name = ''WIP_ENTITY_ID'' )'
      ||' WHERE  process_flag                   = '||G_IN_PROCESS
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = :lv_batch_id'
      ||' AND    sr_instance_code               = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

    -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,WIP_ENTITY_NAME',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_SUPPLIES',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_JOB_REQUIREMENT_OPS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Error out the records if WIP_ENTITY_ID NULL

    lv_sql_stmt:=
    'UPDATE      msc_st_job_requirement_ops msrr'
    ||' SET      process_flag              ='||G_ERROR_FLG||','
    ||'          error_text   = '||''''||lv_message_text||''''
    ||' WHERE    NVL(wip_entity_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND      sr_instance_code            = :v_instance_code'
    ||' AND      process_flag                ='||G_IN_PROCESS
    ||' AND      batch_id                    = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'RECOMMENDED');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out the records where RECOMMENDED is not 'Y' or 'N'

     v_sql_stmt := 7;
    lv_sql_stmt :=
    'UPDATE    msc_st_job_requirement_ops'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  recommended NOT IN (''Y'', ''N'',''y'',''n'')'
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'COMPONENT_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --Derive component_item_id
    lv_return := MSC_ST_UTIL.DERIVE_ITEM_ID
                   (p_table_name       => 'MSC_ST_JOB_REQUIREMENT_OPS',
                    p_item_col_name    => 'COMPONENT_NAME',
                    p_item_col_id      => 'COMPONENT_ITEM_ID',
                    p_instance_id      => v_instance_id,
                    p_instance_code    => v_instance_code,
                    p_message_text     => lv_message_text,
                    p_error_text       => lv_error_text,
                    p_batch_id         => lv_batch_id,
                    p_severity         => G_SEV_ERROR,
                    p_debug            => v_debug,
                    p_row              => lv_column_names);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PRIMARY_COMPONENT_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --Derive primary_component_id
    lv_return := MSC_ST_UTIL.DERIVE_ITEM_ID
                   (p_table_name       => 'MSC_ST_JOB_REQUIREMENT_OPS',
                    p_item_col_name    => 'PRIMARY_COMPONENT_NAME',
                    p_item_col_id      => 'PRIMARY_COMPONENT_ID',
                    p_instance_id      => v_instance_id,
                    p_instance_code    => v_instance_code,
                    p_message_text     => lv_message_text,
                    p_error_text       => lv_error_text,
                    p_batch_id         => lv_batch_id,
                    p_severity         => G_SEV_ERROR,
                    p_debug            => v_debug,
                    p_row              => lv_column_names);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'SOURCE_PHANTOM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --Derive primary_component_id
    lv_return := MSC_ST_UTIL.DERIVE_ITEM_ID
                   (p_table_name       => 'MSC_ST_JOB_REQUIREMENT_OPS',
                    p_item_col_name    => 'SOURCE_PHANTOM_NAME',
                    p_item_col_id      => 'SOURCE_PHANTOM_ID',
                    p_instance_id      => v_instance_id,
                    p_instance_code    => v_instance_code,
                    p_message_text     => lv_message_text,
                    p_error_text       => lv_error_text,
                    p_batch_id         => lv_batch_id,
                    p_severity         => G_SEV3_ERROR,
                    p_debug            => v_debug,
                    p_row              => lv_column_names);

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

    -- Set the  message
   lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'QUANTITY_PER_ASSEMBLY');


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


  -- Error out records where QUANTITY_PER_ASSEMBLY is NULL;

  v_sql_stmt := 06;
  lv_sql_stmt :=
  'UPDATE     msc_st_job_requirement_ops '
  ||' SET     process_flag    =  '||G_ERROR_FLG||','
  ||'         error_text   = '||''''||lv_message_text||''''
  ||' WHERE NVL(quantity_per_assembly,'||NULL_VALUE||')='||NULL_VALUE
  ||' AND    process_flag      = '||G_IN_PROCESS
  ||' AND    deleted_flag      = '||SYS_NO
  ||' AND    batch_id          = :lv_batch_id'
  ||' AND    sr_instance_code  = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

 -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'EFFECTIVITY_DATE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => 'SYSDATE' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default effectivity date as SYSDATE if NULL

     lv_where_str :=
     ' AND NVL(effectivity_date,SYSDATE-36500 ) = SYSDATE-36500 ' ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_JOB_REQUIREMENT_OPS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'EFFECTIVITY_DATE',
                     p_debug             => v_debug,
                     p_default_value     => 'SYSDATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'COMPONENT_YIELD_FACTOR',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => 1 );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default component_yield_factor if NULL

     lv_where_str :=
     ' AND NVL(COMPONENT_YIELD_FACTOR,'||NULL_VALUE||') = '||NULL_VALUE ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_JOB_REQUIREMENT_OPS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'COMPONENT_YIELD_FACTOR',
                     p_debug             => v_debug,
                     p_default_value     => 1);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PLANNING_FACTOR',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => 100 );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default planning_factor if NULL

     lv_where_str :=
     ' AND NVL(PLANNING_FACTOR,'||NULL_VALUE||') = '||NULL_VALUE ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_JOB_REQUIREMENT_OPS',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'PLANNING_FACTOR',
                     p_debug             => v_debug,
                     p_default_value     => 100);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

       -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'WIP_SUPPLY_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_WIP_SUPPLY_TYPE );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    --  Default wip_supply_type as 1

    lv_where_str := ' AND NVL(wip_supply_type,'||NULL_VALUE||') NOT IN (1,2,3,4,5,6,7)'
                    ||' AND deleted_flag ='||SYS_NO ;

    lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_JOB_REQUIREMENT_OPS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_WARNING,
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text,
                    p_batch_id          => lv_batch_id,
                    p_where_str         => lv_where_str,
                    p_col_name          => 'WIP_SUPPLY_TYPE',
                    p_debug             => v_debug,
                    p_default_value     => G_WIP_SUPPLY_TYPE );

    IF lv_return <> 0 THEN
        RAISE ex_logging_err;
    END IF;

   -- If routing_name is is NULL populate the assembly_item_name in routing name

  v_sql_stmt := 11;
  lv_sql_stmt :=
  ' UPDATE   msc_st_job_requirement_ops'
  ||' SET    routing_name            =  assembly_item_name'
  ||' WHERE  process_flag            = '||G_IN_PROCESS
  ||' AND    NVL(routing_name,'||''''||NULL_CHAR||''''||')'
  ||'       = '||''''||NULL_CHAR||''''
  ||' AND   process_flag    = '||G_IN_PROCESS
  ||' AND   batch_id        = :lv_batch_id'
  ||' AND   sr_instance_code = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

   -- Derive routing_sequence_id

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,ROUTING_NAME',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_ROUTINGS',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_JOB_REQUIREMENT_OPS' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Derive the ROUTING_SEQUENCE_ID from LOCAL ID table

    lv_return :=
    MSC_ST_UTIL.DERIVE_ROUTING_SEQUENCE_ID
                      (p_table_name     => 'MSC_ST_JOB_REQUIREMENT_OPS',
                       p_rtg_col_name   => 'ROUTING_NAME',
                       p_rtg_col_id     => 'ROUTING_SEQUENCE_ID',
                       p_instance_code  => v_instance_code,
                       p_severity       => G_SEV_ERROR,
                       p_message_text   => lv_message_text,
                       p_batch_id       => lv_batch_id,
                       p_debug          => v_debug,
                       p_error_text     => lv_error_text);

    if (lv_return <> 0 )then
       RAISE ex_logging_err;
    end if;


  -- Derive operation seq num from local id table

    v_sql_stmt := 12;
    lv_sql_stmt:=
    'UPDATE     msc_st_job_requirement_ops msd'
    ||' SET     operation_seq_num=    (SELECT number1'
    ||'                    FROM msc_local_id_setup mlis'
    ||'                    WHERE  mlis.char1 = msd.sr_instance_code'
    ||'                    AND NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                    =   NVL(msd.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                    AND    mlis.char3 = msd.organization_code'
    ||'                    AND    mlis.char4 = msd.routing_name'
    ||'                    AND    mlis.char5 = msd.operation_seq_code'
    ||'                    AND   NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
    ||'                          = NVL(msd.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
    ||'                    AND    mlis.date1 = msd.op_effectivity_date'
    ||'                    AND    mlis.entity_name = ''OPERATION_SEQUENCE_ID'') '
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        process_flag     = '||G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id';



         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'OPERATION_SEQ_NUM');


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out the records whose operation_seq_num is NULL

    v_sql_stmt := 19;
    lv_sql_stmt :=
    'UPDATE    msc_st_job_requirement_ops'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  NVL(operation_seq_num,'||NULL_VALUE||') ='||NULL_VALUE
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Derive the component_sequence_id

     lv_sql_stmt :=
     'UPDATE     msc_st_job_requirement_ops mjro'
     ||' SET     component_sequence_id=  (SELECT local_id '
     ||'         FROM msc_local_id_setup mlis'
     ||'         WHERE  mlis.char1 = mjro.sr_instance_code'
     ||'         AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
     ||'               =  NVL(mjro.company_name,'||''''||NULL_CHAR||''''||') '
     ||'         AND    mlis.char3 = mjro.organization_code'
     ||'         AND    mlis.char4 = mjro.assembly_item_name'
     ||'         AND    mlis.char5 = mjro.component_name'
     ||'         AND   NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
     ||'               =  NVL(mjro.alternate_bom_designator,'||''''||NULL_CHAR||''''||') '
     ||'         AND    mlis.char7 = mjro.operation_seq_code'
     ||'         AND    mlis.date1 = mjro.effectivity_date'
     ||'         AND    mlis.entity_name = ''COMPONENT_SEQUENCE_ID'')'
     ||'   WHERE      mjro.sr_instance_code = :v_instance_code'
     ||'   AND        mjro.process_flag     ='|| G_IN_PROCESS
     ||'   AND        mjro.batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'COMPONENT_SEQUENCE_ID');


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out the records where component_sequence_id is NULL


    lv_sql_stmt :=
    'UPDATE    msc_st_job_requirement_ops'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  NVL(component_sequence_id,'||NULL_VALUE||') ='||NULL_VALUE
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Derive department id

    lv_sql_stmt :=
    'UPDATE     msc_st_job_requirement_ops mjro'
    ||' SET     department_id=    (SELECT local_id'
    ||'         FROM msc_local_id_setup mlis'
    ||'         WHERE  mlis.char1 = mjro.sr_instance_code'
    ||'         AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'         =    NVL(mjro.company_name,'||''''||NULL_CHAR||''''||') '
    ||'         AND    mlis.char3 = mjro.organization_code'
    ||'         AND    mlis.char4 = mjro.department_code'
    ||'         AND    mlis.entity_name = ''DEPARTMENT_ID'')'
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        deleted_flag     = '||SYS_NO
    ||' AND        process_flag     = '||G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;



    --Call to customised validation.
    MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
      (ERRBUF         => lv_error_text,
       RETCODE        => lv_return,
       pBatchID       => lv_batch_id,
       pInstanceCode  => v_instance_code,
       pEntityName    => 'MSC_ST_JOB_REQUIREMENT_OPS',
       pInstanceID    => v_instance_id);

    IF NVL(lv_return,0) <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                  (p_table_name     => 'MSC_ST_JOB_REQUIREMENT_OPS',
                   p_instance_id    => v_instance_id,
                   p_instance_code  => v_instance_code,
                   p_process_flag   => G_VALID,
                   p_error_text     => lv_error_text,
                   p_debug          => v_debug,
                   p_batch_id       => lv_batch_id);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    lv_return := MSC_ST_UTIL.LOG_ERROR
                   (p_table_name        => 'MSC_ST_JOB_REQUIREMENT_OPS',
                    p_instance_code     => v_instance_code,
                    p_row               => lv_column_names,
                    p_severity          => G_SEV_ERROR,
                    p_message_text      => NULL,
                    p_error_text        => lv_error_text,
                    p_debug             => v_debug,
                    p_batch_id          => lv_batch_id);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    COMMIT;
   END LOOP ;


   -- Validation for MSC_ST_JOB_OP_RESOURCES

    --Duplicate records check for the records whose source is XML

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    v_sql_stmt := 01;

  lv_sql_stmt:=
   'UPDATE    msc_st_job_op_resources msrr1 '
   ||' SET       process_flag ='||G_ERROR_FLG||','
   ||'           error_text   = '||''''||lv_message_text||''''
   ||' WHERE     message_id < ( SELECT max(message_id) FROM msc_st_job_op_resources msrr2'
   ||'           WHERE msrr2.sr_instance_code  '
   ||'                 = msrr1.sr_instance_code'
   ||'         AND   NVL(msrr2.company_name,'||''''||NULL_CHAR||''''||') '
   ||'                =    NVL(msrr1.company_name,'||''''||NULL_CHAR||''''||') '
   ||'         AND   msrr2.wip_entity_name    = msrr1.wip_entity_name'
   ||'         AND   msrr2.organization_code  = msrr1.organization_code'
   ||'         AND   NVL(msrr2.operation_seq_code,'||''''||NULL_CHAR||''''||') '
   ||'                  = NVL(msrr1.operation_seq_code,'||''''||NULL_CHAR||''''||') '
   ||'         AND   NVL(msrr2.resource_seq_code,'||''''||NULL_CHAR||''''||') '
   ||'                  = NVL(msrr1.resource_seq_code,'||''''||NULL_CHAR||''''||') '
   ||'         AND   NVL(msrr2.resource_code,  '||''''||NULL_CHAR||''''||') '
   ||'                  = NVL(msrr1.resource_code, '||''''||NULL_CHAR||''''||') '
   ||'         AND   NVL(msrr2.routing_name,'||''''||NULL_CHAR||''''||') '
   ||'               = NVL(msrr1.routing_name,'||''''||NULL_CHAR||''''||') '
   ||'         AND   NVL(msrr2.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
   ||'               = NVL(msrr1.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
   ||'         AND   msrr2.process_flag       = '||G_IN_PROCESS
   ||'         AND    NVL(msrr2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
   ||' AND     msrr1.process_flag     = '|| G_IN_PROCESS
   ||' AND     msrr1.sr_instance_code = :v_instance_code '
   ||' AND     NVL(msrr1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

  --Duplicate records check for the records whose source is batch load

  lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;
  v_sql_stmt := 02;

   lv_sql_stmt:=
   'UPDATE      msc_st_job_op_resources msrr1'
   ||' SET      process_flag = '||G_ERROR_FLG||','
   ||'          error_text   = '||''''||lv_message_text||''''
   ||' WHERE    EXISTS ( SELECT 1 '
   ||'          FROM msc_st_job_op_resources msrr2'
   ||'          WHERE msrr2.sr_instance_code  '
   ||'                 = msrr1.sr_instance_code'
   ||'         AND   NVL(msrr2.company_name,'||''''||NULL_CHAR||''''||') '
   ||'                =    NVL(msrr1.company_name,'||''''||NULL_CHAR||''''||') '
   ||'         AND   msrr2.wip_entity_name    = msrr1.wip_entity_name'
   ||'         AND   msrr2.organization_code  = msrr1.organization_code'
   ||'         AND   NVL(msrr2.operation_seq_code,'||''''||NULL_CHAR||''''||') '
   ||'                  = NVL(msrr1.operation_seq_code,'||''''||NULL_CHAR||''''||') '
   ||'         AND   NVL(msrr2.resource_seq_code,'||''''||NULL_CHAR||''''||') '
   ||'                  = NVL(msrr1.resource_seq_code,'||''''||NULL_CHAR||''''||') '
   ||'         AND   NVL(msrr2.resource_code,  '||''''||NULL_CHAR||''''||') '
   ||'                  = NVL(msrr1.resource_code, '||''''||NULL_CHAR||''''||') '
   ||'         AND   NVL(msrr2.routing_name,'||''''||NULL_CHAR||''''||') '
   ||'               = NVL(msrr1.routing_name,'||''''||NULL_CHAR||''''||') '
   ||'         AND   NVL(msrr2.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
   ||'               = NVL(msrr1.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
   ||'         AND   msrr2.process_flag       = '||G_IN_PROCESS
   ||'         AND   NVL(msrr2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
   ||'       GROUP BY sr_instance_code,company_name,organization_code,wip_entity_name,'
   ||'       operation_seq_code,resource_seq_code,resource_code '
   ||'       HAVING COUNT(*) >1 )'
   ||' AND   msrr1.process_flag = '||G_IN_PROCESS
   ||' AND   msrr1.sr_instance_code = :v_instance_code'
   ||' AND   NVL(msrr1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

    lv_column_names :=
  'DEPARTMENT_CODE             ||''~''||'
  ||'RESOURCE_CODE             ||''~''||'
  ||'ORGANIZATION_CODE         ||''~''||'
  ||'RESOURCE_SEQ_CODE         ||''~''||'
  ||'RECO_START_DATE           ||''~''||'
  ||'ASSIGNED_UNITS            ||''~''||'
  ||'WIP_ENTITY_NAME           ||''~''||'
  ||'SR_INSTANCE_CODE          ||''~''||'
  ||'ITEM_NAME                 ||''~''||'
  ||'OPERATION_SEQ_CODE        ||''~''||'
  ||'BASIS_TYPE                ||''~''||'
  ||'RECO_COMPLETION_DATE      ||''~''||'
  ||'DELETED_FLAG              ||''~''||'
  ||'COMPANY_NAME ' ;

  -- Now processing by batch
   LOOP
      v_sql_stmt := 03;
      lv_cursor_stmt :=
      ' SELECT msc_st_batch_id_s.NEXTVAL '
      ||' FROM   dual';

      OPEN  c1 FOR lv_cursor_stmt;
      FETCH c1 INTO lv_batch_id;
      CLOSE c1;

      v_sql_stmt := 04;
      lv_sql_stmt :=
      ' UPDATE msc_st_job_op_resources '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c5(lv_batch_id);
      FETCH c5 BULK COLLECT INTO lb_rowid;
      CLOSE c5;

      v_sql_stmt := 05;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_job_op_resources
      SET  st_transaction_id = msc_st_job_op_resources_s.NEXTVAL,
           refresh_id        = v_refresh_id,
           last_update_date  = v_current_date,
           last_updated_by   = v_current_user,
           creation_date     = v_current_date,
           created_by        = v_current_user
      WHERE  rowid           = lb_rowid(j);

      -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  SYS_NO  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Check whether delete flag value is in (SYS_YES,SYS_NO),if not default to SYS_NO

     lv_where_str :=
     ' AND NVL(deleted_flag,'||NULL_VALUE||') NOT IN(1,2)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_JOB_OP_RESOURCES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'DELETED_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => SYS_NO);


      IF lv_return <> 0 THEN
          RAISE ex_logging_err;
      END IF;

      -- Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORGANIZATION_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Populate  organization id
     lv_return :=
     MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID(p_table_name     => 'MSC_ST_JOB_OP_RESOURCES',
                                    p_org_partner_name  =>'ORGANIZATION_CODE',
                                    p_org_partner_id    =>'ORGANIZATION_ID',
                                    p_instance_code     => v_instance_code,
                                    p_partner_type      => G_ORGANIZATION,
                                    p_severity          => G_SEV_ERROR,
                                    p_message_text      => lv_message_text,
                                    p_batch_id          => lv_batch_id,
                                    p_debug             => v_debug,
                                    p_error_text        => lv_error_text);

     IF(lv_return <> 0) then
        RAISE ex_logging_err;
     END IF;

    -- Derive  WIP_ENTITY_ID
    v_sql_stmt := 06;
    lv_sql_stmt:=
    'UPDATE        msc_st_job_op_resources msrr'
    ||' SET        wip_entity_id = (SELECT local_id '
    ||'            FROM msc_local_id_supply mlis'
    ||'            WHERE  mlis.char1 = msrr.sr_instance_code'
    ||'            AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                  =    NVL(msrr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'            AND    mlis.char3 = msrr.organization_code'
    ||'            AND    mlis.char4 = msrr.wip_entity_name'
    ||'            AND    mlis.entity_name = ''WIP_ENTITY_ID'' '
    ||'            AND    mlis.instance_id ='||v_instance_id||')'
    ||' WHERE      sr_instance_code  = :v_instance_code'
    ||' AND        NVL(wip_entity_name,'||''''||NULL_CHAR||''''||') '
    ||'             <> '||''''||NULL_CHAR||''''
    ||' AND        process_flag     ='||G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

     -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,WIP_ENTITY_NAME',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_SUPPLIES',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_JOB_OP_RESOURCES' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Error out the records if WIP_ENTITY_ID NULL

    v_sql_stmt := 07;
    lv_sql_stmt:=
    'UPDATE      msc_st_job_op_resources msrr'
    ||' SET      process_flag              ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE    NVL(wip_entity_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND      sr_instance_code            = :v_instance_code'
    ||' AND      process_flag                ='||G_IN_PROCESS
    ||' AND      batch_id                    = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

     -- Derive resource id
     v_sql_stmt := 10;

    lv_sql_stmt :=
    'UPDATE     msc_st_job_op_resources msrr'
    ||' SET     resource_id=   (SELECT local_id '
    ||'                 FROM msc_local_id_setup mlis'
    ||'                 WHERE  mlis.char1 = msrr.sr_instance_code'
    ||'                 AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                 =    NVL(msrr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                 AND    mlis.char3 = msrr.organization_code'
    ||'                 AND    mlis.char4 = msrr.resource_code'
    ||'                 AND    mlis.entity_name = ''RESOURCE_ID'''
    ||'                 AND    mlis.instance_id ='||v_instance_id||' )'
    ||' WHERE      msrr.sr_instance_code = :v_instance_code'
    ||' AND        msrr.deleted_flag     = '||SYS_NO
    ||' AND        msrr.process_flag     ='|| G_IN_PROCESS
    ||' AND        msrr.batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

     -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE,COMPANY_NAME,'
                                             ||'ORGANIZATION_CODE,RESOURCE_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      =>  'MSC_ST_DEPARTMENT_RESOURCES',
                      p_token3            =>  'CHILD_TABLE' ,
                      p_token_value3      =>  'MSC_ST_JOB_OP_RESOURCES' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Error out records where resource_id is NULL

    v_sql_stmt := 11;

    lv_sql_stmt:=
    'UPDATE      msc_st_job_op_resources msrr'
    ||' SET      process_flag              ='||G_ERROR_FLG||','
    ||'          error_text   = '||''''||lv_message_text||''''
    ||' WHERE    NVL(resource_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND      sr_instance_code            = :v_instance_code'
    ||' AND      deleted_flag                = '||SYS_NO
    ||' AND      process_flag                ='|| G_IN_PROCESS
    ||' AND      batch_id                    = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Popluate the Department id from LOCAL_ID table

    v_sql_stmt := 25;
    lv_sql_stmt :=
    'UPDATE            msc_st_job_op_resources msrs'
    ||' SET            department_id = (SELECT local_id'
    ||'                     FROM msc_local_id_setup mlis'
    ||'                     WHERE  mlis.char1       = msrs.sr_instance_code'
    ||'                     AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                      =    NVL(msrs.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                     AND    mlis.char3       = msrs.organization_code'
    ||'                     AND    mlis.char4       = msrs.department_code'
    ||'                     AND    mlis.entity_name = ''DEPARTMENT_ID'' '
    ||'                     AND    mlis.instance_id = '||v_instance_id||')'
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        process_flag     = '|| G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;



       -- Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ASSIGNED_UNITS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Error out records where assigned units is NULL
    v_sql_stmt := 08;

    lv_sql_stmt:=
    'UPDATE     msc_st_job_op_resources msrr'
    ||' SET     process_flag              ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   NVL(assigned_units,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND     sr_instance_code            = :v_instance_code'
    ||' AND     deleted_flag                ='|| SYS_NO
    ||' AND     process_flag                ='|| G_IN_PROCESS
    ||' AND     batch_id                    = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'USAGE_RATE_OR_AMOUNT');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Error out records where usage_rate_or_amount is NULL
    v_sql_stmt := 08;

    lv_sql_stmt:=
    'UPDATE     msc_st_job_op_resources msrr'
    ||' SET     process_flag              ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   NVL(usage_rate_or_amount,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND     sr_instance_code            = :v_instance_code'
    ||' AND     deleted_flag                ='|| SYS_NO
    ||' AND     process_flag                ='|| G_IN_PROCESS
    ||' AND     batch_id                    = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'RESOURCE_SEQ_CODE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Error out records where resource sequence code is NULL

    lv_sql_stmt:=
    'UPDATE     msc_st_job_op_resources msrr'
    ||' SET     process_flag              ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   NVL(resource_seq_code,'||''''||NULL_CHAR||''''||') '
    ||'         = '||''''||NULL_CHAR||''''
    ||' AND     sr_instance_code            = :v_instance_code'
    ||' AND     deleted_flag                ='|| SYS_NO
    ||' AND     process_flag                ='|| G_IN_PROCESS
    ||' AND     batch_id                    = :lv_batch_id';


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'RECOMMENDED');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out the records where RECOMMENDED is not 'Y' or 'N'

     v_sql_stmt := 7;
    lv_sql_stmt :=
    'UPDATE    msc_st_job_op_resources'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  recommended NOT IN (''Y'', ''N'')'
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

   -- If routing_name is is NULL populate the item_name in routing name

  v_sql_stmt := 13;
  lv_sql_stmt :=
  ' UPDATE   msc_st_job_op_resources'
  ||' SET    routing_name            =  item_name'
  ||' WHERE  process_flag            = '||G_IN_PROCESS
  ||' AND    NVL(routing_name,'||''''||NULL_CHAR||''''||')'
  ||'       = '||''''||NULL_CHAR||''''
  ||' AND   batch_id        = :lv_batch_id'
  ||' AND   sr_instance_code = :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

  EXECUTE IMMEDIATE lv_sql_stmt USING lv_batch_id,v_instance_code;

  -- Set the  message
     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ROUTING_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- Derive the ROUTING_SEQUENCE_ID from LOCAL ID table
    lv_return :=
    MSC_ST_UTIL.DERIVE_ROUTING_SEQUENCE_ID
                    (p_table_name     => 'MSC_ST_JOB_OP_RESOURCES',
                     p_rtg_col_name   => 'ROUTING_NAME',
                     p_rtg_col_id     =>'ROUTING_SEQUENCE_ID',
                     p_instance_code  => v_instance_code,
                     p_severity       => G_SEV_ERROR,
                     p_message_text   => lv_message_text,
                     p_batch_id       => lv_batch_id,
                     p_debug          => v_debug,
                     p_error_text     => lv_error_text);

    if (lv_return <> 0 )then
       RAISE ex_logging_err;
    end if;


  -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'OPERATION_EFFECTIVITY_DATE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => 'SYSDATE' );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default operation_effectivity date as SYSDATE if NULL

     lv_where_str :=
     ' AND NVL(operation_effectivity_date,(sysdate-36500)) =(sysdate-36500)';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_JOB_OP_RESOURCES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'OPERATION_EFFECTIVITY_DATE',
                     p_debug             => v_debug,
                     p_default_value     => 'SYSDATE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  -- Derive operation seq num

    v_sql_stmt := 14;
    lv_sql_stmt:=
    'UPDATE     msc_st_job_op_resources msrr'
    ||' SET     operation_seq_num =    (SELECT number1'
    ||'                    FROM msc_local_id_setup mlis'
    ||'                    WHERE  mlis.char1 = msrr.sr_instance_code'
    ||'                    AND NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'                    =   NVL(msrr.company_name,'||''''||NULL_CHAR||''''||') '
    ||'                    AND    mlis.char3 = msrr.organization_code'
    ||'                    AND    mlis.char4 = msrr.routing_name'
    ||'                    AND    mlis.char5 = msrr.operation_seq_code'
    ||'                    AND   NVL(mlis.char6,'||''''||NULL_CHAR||''''||') '
    ||'                          = NVL(msrr.alternate_routing_designator,'||''''||NULL_CHAR||''''||') '
    ||'                    AND    mlis.date1 = msrr.operation_effectivity_date'
    ||'                    AND    mlis.entity_name = ''OPERATION_SEQUENCE_ID'' '
    ||'                    AND    mlis.instance_id = '||v_instance_id ||')'
    ||' WHERE      sr_instance_code = :v_instance_code'
    ||' AND        process_flag     = '||G_IN_PROCESS
    ||' AND        batch_id         = :lv_batch_id';



         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the error message

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'OPERATION_SEQ_NUM');


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Error out the records whose operation_seq_num is NULL

    v_sql_stmt := 19;
    lv_sql_stmt :=
    'UPDATE    msc_st_job_op_resources'
    ||' SET    process_flag     ='||G_ERROR_FLG||','
    ||'        error_text   = '||''''||lv_message_text||''''
    ||' WHERE  NVL(operation_seq_num,'||NULL_VALUE||') ='||NULL_VALUE
    ||' AND    sr_instance_code  = :v_instance_code'
    ||' AND    process_flag      = '||G_IN_PROCESS
    ||' AND    batch_id          = :lv_batch_id';


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL_DEFAULT',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ALTERNATE_NUM',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_ALTERNATE_NUMBER );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Default alternate number as 0 if NULL

    lv_where_str := ' AND NVL(ALTERNATE_NUM,'||NULL_VALUE||') ='||NULL_VALUE ;

    lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_JOB_OP_RESOURCES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'ALTERNATE_NUM',
                     p_debug             => v_debug,
                     p_default_value     => G_ALTERNATE_NUMBER);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

    -- Derive resource seq num from the local  id table

    lv_sql_stmt :=
    'UPDATE     msc_st_job_op_resources msor'
    ||' SET     resource_seq_num =    (SELECT local_id '
    ||'         FROM msc_local_id_setup mlis'
    ||'         WHERE  mlis.char1 = msor.sr_instance_code'
    ||'         AND   NVL(mlis.char2,'||''''||NULL_CHAR||''''||') '
    ||'         =    NVL(msor.company_name,'||''''||NULL_CHAR||''''||') '
    ||'         AND    mlis.char3 = msor.organization_code'
    ||'         AND    mlis.char4 = msor.routing_name'
    ||'         AND    mlis.char5 = msor.operation_seq_code'
    ||'         AND    mlis.char6 = msor.resource_seq_code'
    ||'         AND    NVL(mlis.char7,'||''''||NULL_CHAR||''''||') '
    ||'         =      NVL(msor.alternate_routing_designator,'||''''||NULL_CHAR||''''||')'
    ||'         AND    mlis.number1 = msor.ALTERNATE_NUM'
    ||'         AND    mlis.entity_name = ''RESOURCE_SEQ_NUM'')'
    ||' WHERE   sr_instance_code = :v_instance_code'
    ||' AND     process_flag     = '||G_IN_PROCESS
    ||' AND     batch_id         = :lv_batch_id';



         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code,lv_batch_id;

    -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'PRINCIPAL_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_PRINCIPAL_FLAG  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Default principal_flag as 1 if NOT IN (1,2)

     lv_where_str := ' AND NVL(principal_flag,'||NULL_VALUE||')'||' NOT IN (1,2)'
                       ||'AND deleted_flag = 2';

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_JOB_OP_RESOURCES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'PRINCIPAL_FLAG',
                     p_debug             => v_debug,
                     p_default_value     => G_PRINCIPAL_FLAG);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Set the error message
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'BASIS_TYPE',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      =>  G_BASIS_TYPE  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Default basis type as 1 if INVALID

    lv_where_str :=
    ' AND NVL(basis_type,'||NULL_VALUE||')'
    ||' NOT IN (1,2,3,4,5) AND deleted_flag = 2' ;

     lv_return := MSC_ST_UTIL.LOG_ERROR
                    (p_table_name        => 'MSC_ST_JOB_OP_RESOURCES',
                     p_instance_code     => v_instance_code,
                     p_row               => lv_column_names,
                     p_severity          => G_SEV_WARNING,
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text,
                     p_batch_id          => lv_batch_id,
                     p_where_str         => lv_where_str,
                     p_col_name          => 'BASIS_TYPE',
                     p_debug             => v_debug,
                     p_default_value     => G_BASIS_TYPE);
      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     OPEN c6(lv_batch_id);
      FETCH c6 BULK COLLECT INTO lb_rowid ;

      IF c6%ROWCOUNT > 0  THEN

      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST

        UPDATE msc_st_job_op_resources
        SET    resource_seq_num      =
               to_number(decode(length(rtrim(resource_seq_code,'0123456789')),
                         NULL,resource_seq_code,'1'))
        WHERE  rowid                  = lb_rowid(j);
      END IF;
     CLOSE c6;


    --Call to customised validation.

     MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_JOB_OP_RESOURCES',
         pInstanceID    => v_instance_id);

     IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
     END IF;

  -- Set the process flag as Valid and populate sr_instance_id
    lv_return :=
    MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name   => 'MSC_ST_JOB_OP_RESOURCES',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug,
                               p_batch_id       => lv_batch_id);

     IF lv_return <> 0 THEN
        RAISE ex_logging_err;
     END IF;


    -- At the end calling  the LOG_ERROR for logging all errored out records

   lv_return :=
   MSC_ST_UTIL.LOG_ERROR(p_table_name    => 'MSC_ST_JOB_OP_RESOURCES',
                         p_instance_code => v_instance_code,
                         p_row           => lv_column_names,
                         p_severity      => G_SEV_ERROR,
                         p_message_text  => NULL,
                         p_error_text    => lv_error_text,
                         p_debug         => v_debug,
                         p_batch_id      => lv_batch_id  );

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

  COMMIT;
  END LOOP;

  EXCEPTION

    WHEN too_many_rows THEN
         lv_error_text := substr('MSC_CL_PRE_PROCESS.LOAD_JOB_DETAILS'||'('
                        ||v_sql_stmt||')'|| SQLERRM, 1, 240);
         ROLLBACK ;

    WHEN ex_logging_err THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
        ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text :=substr('MSC_CL_PRE_PROCESS.LOAD_JOB_DETAILS'||'('
                      ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

 END LOAD_JOB_DETAILS;


/*==========================================================================+
| DESCRIPTION  : This procedure generates records in msc_st_bis_periods if  |
|                records are  coming into msc_st_trading_partners and/or    |
|                records are coming in msc_st_calendars.                    |
+==========================================================================*/
  PROCEDURE LOAD_BIS_PERIODS IS
  lv_error_text      VARCHAR2(250);

  BEGIN

    IF is_bis_periods_load_reqd = SYS_YES THEN


      DELETE FROM msc_st_bis_periods where sr_instance_id = v_instance_id;
      INSERT INTO msc_st_bis_periods
        (organization_id,
        period_set_name,
        period_name,
        start_date,
        end_date,
        period_type,
        period_year,
        period_num,
        quarter_num,
        entered_period_name,
        adjustment_period_flag,
        description,
        context,
        year_start_date,
        quarter_start_date,
        refresh_id,
        sr_instance_id,
        last_update_date,
        last_updated_by,
        creation_date,
        created_by)
      (SELECT
        sr_tp_id,
        'LEGACY',
        TO_CHAR(period_start_date,'DD-MON-YYYY'),
        period_start_date,
        next_date-1,
        'Month',
        TO_NUMBER(TO_CHAR(period_start_date,'YYYY')),
        msc_st_shift_num_s.nextval,
        --decode(period_sequence_num,1,1,2,1,3,1,4,2,5,2,6,2,7,3,8,3,9,3,4),
        decode(to_char(period_start_date,'MM'),1,1,2,1,3,1,4,2,5,2,6,2,7,3,8,3,9,3,4), -- bug 8613033
        period_name,
        'N',
        'LEGACY',
        NULL,
        NULL,
        NULL,
        v_refresh_id,
        v_instance_id,
        v_current_date,
        v_current_user,
        v_current_date,
        v_current_user
      FROM  msc_period_start_dates mpsd,msc_trading_partners mtp
      WHERE mpsd.calendar_code  = mtp.calendar_code
      AND   mpsd.sr_instance_id = mtp.sr_instance_id
      AND   mtp.partner_type    = G_ORGANIZATION
      AND   mtp.sr_instance_id  = v_instance_id
      AND   mpsd.period_start_date <> mpsd.next_date);  -- bug 8591107


-- insert for those orgs which are coming in now
-- and do not exist in the ODS
      INSERT INTO msc_st_bis_periods
        (organization_id,
        period_set_name,
        period_name,
        start_date,
        end_date,
        period_type,
        period_year,
        period_num,
        quarter_num,
        entered_period_name,
        adjustment_period_flag,
        description,
        context,
        year_start_date,
        quarter_start_date,
        refresh_id,
        sr_instance_id,
        last_update_date,
        last_updated_by,
        creation_date,
        created_by)
      (SELECT
        sr_tp_id,
        'LEGACY',
        TO_CHAR(period_start_date,'DD-MON-YYYY'),
        period_start_date,
        next_date-1,
        'Month',
        TO_NUMBER(TO_CHAR(period_start_date,'YYYY')),
        msc_st_shift_num_s.nextval,
        --decode(period_sequence_num,1,1,2,1,3,1,4,2,5,2,6,2,7,3,8,3,9,3,4),
        decode(to_char(period_start_date,'MM'),1,1,2,1,3,1,4,2,5,2,6,2,7,3,8,3,9,3,4),  -- bug 8613033
        period_name,
        'N',
        'LEGACY',
        NULL,
        NULL,
        NULL,
        v_refresh_id,
        v_instance_id,
        v_current_date,
        v_current_user,
        v_current_date,
        v_current_user
      FROM  msc_period_start_dates mpsd,msc_st_trading_partners mtp
      WHERE mpsd.calendar_code  = mtp.calendar_code
      AND   mpsd.sr_instance_id = mtp.sr_instance_id
      AND   mpsd.period_start_date <> mpsd.next_date  -- bug 8591107
      AND   mtp.partner_type    = G_ORGANIZATION
      AND   mtp.process_flag    = G_VALID
      AND   mtp.sr_instance_id  = v_instance_id
      AND   NOT EXISTS(SELECT 1
                FROM   msc_trading_partners mtpo
                WHERE  mtpo.sr_instance_id = mtp.sr_instance_id
                AND    mtpo.partner_type   = mtp.partner_type
                AND    mtpo.sr_tp_id       = mtp.sr_tp_id)
      );
    END IF;
    COMMIT;
    --changes for bug 8613033
 update msc_st_bis_periods msbp
 set msbp.year_start_date=
 (
 select mcm.year_start_date from msc_calendar_months mcm
 where  mcm.sr_instance_id = v_instance_id
 and mcm.calendar_type = 'FISCAL'
 and msbp.sr_instance_id = mcm.sr_instance_id
 and to_char(msbp.start_date,'MON-RR') = to_char(mcm.month_start_date,'MON-RR')
 ),
 msbp.quarter_start_date =
 (
 select mcm.quarter_start_date from msc_calendar_months mcm
 where  mcm.sr_instance_id = v_instance_id
 and mcm.calendar_type = 'FISCAL'
 and msbp.sr_instance_id = mcm.sr_instance_id
 and to_char(msbp.start_date,'MON-RR') = to_char(mcm.month_start_date,'MON-RR')
 )
 where msbp.sr_instance_id =  v_instance_id;

 commit;
 MSC_UTIL.LOG_MSG(MSC_UTIL.G_D_DEBUG_1, 'msc_st_bis_periods : Rows updated - '||SQL%ROWCOUNT);
--end of changes for bug 8613033
  EXCEPTION
    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_BIS_PERIODS'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END LOAD_BIS_PERIODS;

  ----- ============== CHECK_DUPLICATES ==================

  Procedure CHECK_DUPLICATES ( ERRBUF OUT NOCOPY VARCHAR2, RETCODE OUT NOCOPY VARCHAR2)
  IS
    lv_return             NUMBER;
    lv_error_text         VARCHAR2(250);
    lv_sql_stmt           VARCHAR2(5000);
    lv_message_text       msc_errors.error_text%TYPE;
    ex_logging_err        EXCEPTION;
  BEGIN
    -- items
    -- Validation for table msc_st_system_items
    -- Duplicate records check for the records whose source is XML

    IF v_item_enabled = SYS_YES THEN
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 01;
      lv_sql_stmt :=
      'UPDATE     msc_st_system_items mssi1'
      ||' SET     process_flag  = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE   message_id <  (SELECT MAX(message_id)'
      ||'         FROM   msc_st_system_items mssi2'
      ||'         WHERE  mssi2.sr_instance_code = mssi1.sr_instance_code'
      ||'         AND    mssi2.organization_code  = mssi1.organization_code'
      ||'         AND    mssi2.item_name = mssi1.item_name'
      ||'         AND    NVL(mssi1.company_name,    '||''''||NULL_CHAR||''''||') '
      ||'                =    NVL(mssi2.company_name,'||''''||NULL_CHAR||''''||') '
      ||'         AND    mssi2.process_flag ='|| G_IN_PROCESS
      ||'         AND    NVL(mssi2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||') '
      ||' AND     mssi1.process_flag             ='|| G_IN_PROCESS
      ||' AND     mssi1.sr_instance_code         = : v_instance_code'
      ||' AND     NVL(mssi1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code;

      --Duplicate records check for the records whose source is batch load
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      v_sql_stmt := 02;
      lv_sql_stmt :=
      'UPDATE   msc_st_system_items mssi1'
      ||' SET     process_flag  = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE   EXISTS( SELECT 1 '
      ||'         FROM msc_st_system_items mssi2'
      ||'         WHERE mssi2.sr_instance_code = mssi1.sr_instance_code'
      ||'         AND mssi2.organization_code  = mssi1.organization_code'
      ||'          AND   NVL(mssi1.company_name,'||''''||NULL_CHAR||''''||') '
      ||'                 =    NVL(mssi2.company_name,'||''''||NULL_CHAR||''''||') '
      ||'         AND mssi2.item_name          = mssi1.item_name'
      ||'         AND mssi2.process_flag       = '||G_IN_PROCESS
      ||'         AND NVL(mssi2.message_id,'||NULL_VALUE||')= '||NULL_VALUE
      ||'         GROUP BY sr_instance_code,organization_code,item_name,company_name'
      ||'         HAVING COUNT(*) >1 )'
      ||' AND     mssi1.process_flag ='|| G_IN_PROCESS
      ||' AND     mssi1.sr_instance_code = :v_instance_code'
      ||' AND     NVL(mssi1.message_id,'||NULL_VALUE||')= '||NULL_VALUE;


           MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE   lv_sql_stmt
            USING       v_instance_code;
   END IF;

   commit;  -- for items

   IF v_mat_sup_enabled = SYS_YES THEN
      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Duplicate records check for the records whose source is XML for
      --PO, Purchase Req and Intransit supplies
      v_sql_stmt := 03;
      lv_sql_stmt :=
      'UPDATE  msc_st_supplies mss1 '
      ||' SET     process_flag = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE   message_id <  (SELECT MAX(message_id)'
      ||'         FROM   msc_st_supplies mss2'
      ||'         WHERE  mss2.sr_instance_code'
      ||'                = mss1.sr_instance_code'
      ||'         AND    mss2.order_number = mss1.order_number'
      ||'         AND    mss2.purch_line_num = mss1.purch_line_num'
      ||'         AND    mss2.order_type = mss1.order_type'
      ||'         AND    mss2.process_flag      = '||G_IN_PROCESS
      ||'         AND    NVL(mss2.company_name,  '||''''||NULL_CHAR||''''||') = '
      ||'                NVL(mss1.company_name,  '||''''||NULL_CHAR||''''||')'
      ||'         AND    mss2.sr_instance_code  = mss1.sr_instance_code'
      ||'         AND    NVL(mss2.message_id,'||NULL_VALUE||') <>'||NULL_VALUE||')'
      ||' AND    mss1.order_type        IN(1,8,2,11,12)'
      ||' AND    mss1.process_flag      = '||G_IN_PROCESS
      ||' AND    mss1.sr_instance_code  = :v_instance_code'
      ||' AND    NVL(mss1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code;

      --Duplicate records check for the records whose source is XML for
      --Plan Orders
      v_sql_stmt := 04;
      lv_sql_stmt :=
      'UPDATE  msc_st_supplies mss1'
      ||' SET     process_flag = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE   message_id <  (SELECT MAX(message_id)'
      ||'         FROM   msc_st_supplies mss2'
      ||'         WHERE  mss2.sr_instance_code '
      ||'                = mss1.sr_instance_code'
      ||'         AND    NVL(mss2.company_name,'||''''||NULL_CHAR||''''||') = '
      ||'                NVL(mss1.company_name,'||''''||NULL_CHAR||''''||')'
      ||'         AND    mss2.organization_code = mss1.organization_code '
      ||'         AND    mss2.schedule_designator = mss1.schedule_designator'
      ||'         AND    mss2.schedule_line_num = mss1.schedule_line_num '
      ||'         AND    mss2.order_type = mss1.order_type '
      ||'         AND    mss2.process_flag        = '||G_IN_PROCESS
      ||'         AND    mss2.sr_instance_code    = mss1.sr_instance_code'
      ||'         AND    NVL(mss2.message_id,'||NULL_VALUE||')<>'||NULL_VALUE||')'
      ||' AND    mss1.order_type                 = 5'
      ||' AND    mss1.process_flag               = '||G_IN_PROCESS
      ||' AND    mss1.sr_instance_code           = :v_instance_code'
      ||' AND    NVL(mss1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code;

      --Duplicate records check for the records whose source is XML for
      --on hand supplies
      v_sql_stmt := 05;
      lv_sql_stmt :=
      'UPDATE  msc_st_supplies mss1 '
      ||' SET     process_flag = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE   message_id <  (SELECT MAX(message_id)'
      ||'         FROM   msc_st_supplies mss2'
      ||'         WHERE  mss2.sr_instance_code    = mss1.sr_instance_code'
      ||'         AND    NVL(mss2.company_name,'||''''||NULL_CHAR||''''||') = '
      ||'                NVL(mss1.company_name,'||''''||NULL_CHAR||''''||')'
      ||'         AND    mss2.organization_code = mss1.organization_code '
      ||'         AND    mss2.item_name = mss1.item_name '
      ||'         AND    NVL(mss2.subinventory_code,'||''''||NULL_CHAR||''''||') = '
      ||'                NVL(mss1.subinventory_code,'||''''||NULL_CHAR||''''||')'
      ||'         AND    NVL(mss2.lot_number,'||''''||NULL_CHAR||''''||') = '
      ||'                NVL(mss1.lot_number,'||''''||NULL_CHAR||''''||')'
      ||'         AND    NVL(mss2.project_number,'||''''||NULL_CHAR||''''||') = '
      ||'                NVL(mss1.project_number,'||''''||NULL_CHAR||''''||')'
      ||'         AND    NVL(mss2.task_number,'||''''||NULL_CHAR||''''||') = '
      ||'                NVL(mss1.task_number,'||''''||NULL_CHAR||''''||')'
      ||'         AND    NVL(mss2.unit_number,'||''''||NULL_CHAR||''''||') = '
      ||'                NVL(mss1.unit_number,'||''''||NULL_CHAR||''''||')'
      ||'         AND    mss2.order_type = mss1.order_type '
      ||'         AND    mss2.process_flag        = '||G_IN_PROCESS
      ||'         AND    mss2.sr_instance_code    = mss1.sr_instance_code'
      ||'         AND    NVL(mss2.message_id,'||NULL_VALUE||')<>'||NULL_VALUE||')'
      ||' AND    mss1.order_type                 = 18'
      ||' AND    mss1.process_flag               = '||G_IN_PROCESS
      ||' AND    mss1.sr_instance_code           = :v_instance_code'
      ||' AND    NVL(mss1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code;


      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      --Duplicate records check for the records whose source is other than XML
      --Different SQL is used because in XML we can identify the latest records
      --whereas in batch load we cannot.
      --Check for PO, purchase req. and intransit supplies.
      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE  msc_st_supplies mss1 '
      ||' SET     process_flag  = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE   EXISTS( SELECT 1 '
      ||'         FROM   msc_st_supplies mss2'
      ||'         WHERE  mss2.sr_instance_code'
      ||'                = mss1.sr_instance_code'
      ||'         AND    NVL(mss2.company_name,    '||''''||NULL_CHAR||''''||') = '
      ||'                NVL(mss1.company_name,    '||''''||NULL_CHAR||''''||')'
      ||'         AND    mss2.order_number = mss1.order_number'
      ||'         AND    mss2.purch_line_num = mss1.purch_line_num'
      ||'         AND    mss2.order_type = mss1.order_type'
      ||'         AND    mss2.process_flag      = '||G_IN_PROCESS
      ||'         AND    mss2.sr_instance_code  = mss1.sr_instance_code'
      ||'         AND    NVL(mss2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||'         GROUP BY sr_instance_code,order_number,company_name,'
      ||'                purch_line_num,order_type,organization_code'
      ||'         HAVING COUNT(*) > 1)'
      ||' AND     mss1.order_type        IN(1,8,2,11,12)'
      ||' AND     mss1.process_flag     = '||G_IN_PROCESS
      ||' AND     mss1.sr_instance_code = :v_instance_code'
      ||' AND     NVL(mss1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code;

      --Duplicate Check for plan orders(batch load).
      v_sql_stmt := 08;
      lv_sql_stmt :=
      'UPDATE  msc_st_supplies mss1 '
      ||' SET     process_flag  = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE   EXISTS( SELECT 1 '
      ||'         FROM   msc_st_supplies mss2'
      ||'         WHERE  mss2.sr_instance_code'
      ||'                = mss1.sr_instance_code'
      ||'         AND    NVL(mss2.company_name,'||''''||NULL_CHAR||''''||') = '
      ||'                NVL(mss1.company_name,'||''''||NULL_CHAR||''''||')'
      ||'         AND    mss2.organization_code = mss1.organization_code '
      ||'         AND    mss2.schedule_designator = mss1.schedule_designator'
      ||'         AND    mss2.schedule_line_num = mss1.schedule_line_num '
      ||'         AND    mss2.order_type = mss1.order_type '
      ||'         AND    mss2.process_flag        = '||G_IN_PROCESS
      ||'         AND    mss2.sr_instance_code    = mss1.sr_instance_code'
      ||'         AND    NVL(mss2.message_id,'||NULL_VALUE||') ='||NULL_VALUE
      ||'         GROUP BY sr_instance_code,schedule_designator,company_name,'
      ||'                schedule_line_num,order_type,organization_code'
      ||'         HAVING COUNT(*) > 1)'
      ||' AND     mss1.order_type          = 5'
      ||' AND     mss1.process_flag           = '||G_IN_PROCESS
      ||' AND     mss1.sr_instance_code           = :v_instance_code'
      ||' AND     NVL(mss1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

      --Duplicate Check for on hand supplies(batch load).
      v_sql_stmt := 09;
      lv_sql_stmt :=
      'UPDATE  msc_st_supplies mss1'
      ||' SET     process_flag  = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE   EXISTS( SELECT 1 '
      ||'         FROM   msc_st_supplies mss2'
      ||'         WHERE  mss2.sr_instance_code    = mss1.sr_instance_code'
      ||'         AND    NVL(mss2.company_name,'||''''||NULL_CHAR||''''||') = '
      ||'                NVL(mss1.company_name,'||''''||NULL_CHAR||''''||')'
      ||'         AND    mss2.organization_code = mss1.organization_code '
      ||'         AND    mss2.item_name = mss1.item_name '
      ||'         AND    NVL(mss2.subinventory_code,'||''''||NULL_CHAR||''''||') = '
      ||'                NVL(mss1.subinventory_code,'||''''||NULL_CHAR||''''||')'
      ||'         AND    NVL(mss2.lot_number,'||''''||NULL_CHAR||''''||') = '
      ||'                NVL(mss1.lot_number,'||''''||NULL_CHAR||''''||')'
      ||'         AND    NVL(mss2.project_number,'||''''||NULL_CHAR||''''||') = '
      ||'                NVL(mss1.project_number,'||''''||NULL_CHAR||''''||')'
      ||'         AND    NVL(mss2.task_number,'||''''||NULL_CHAR||''''||') = '
      ||'                NVL(mss1.task_number,'||''''||NULL_CHAR||''''||')'
      ||'         AND    NVL(mss2.unit_number,'||''''||NULL_CHAR||''''||') = '
      ||'                NVL(mss1.unit_number,'||''''||NULL_CHAR||''''||')'
      ||'         AND    mss2.order_type = mss1.order_type '
      ||'         AND    mss2.process_flag     = '||G_IN_PROCESS
      ||'         AND    mss2.sr_instance_code = mss1.sr_instance_code'
      ||'         AND    NVL(mss2.message_id,'||NULL_VALUE||') ='||NULL_VALUE
      ||'         AND    mss1.rowid <> mss2.rowid ) '
      ||' AND     mss1.order_type       = 18'
      ||' AND     mss1.process_flag       = '||G_IN_PROCESS
      ||' AND     mss1.sr_instance_code   = :v_instance_code'
      ||' AND     NVL(mss1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code;

      --Since all the validation is done based on the order type,
      --order_type validation is done here which is common to all
      --the supplies including WO supplies.

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ORDER_TYPE');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      v_sql_stmt := 10;
      lv_sql_stmt :=
      'UPDATE  msc_st_supplies '
      ||' SET  process_flag = '||G_ERROR_FLG||','
      ||'         error_text   = '||''''||lv_message_text||''''
      ||' WHERE order_type NOT IN(1,2,3,5,7,8,11,12,14,15,16,18,27,75,73,74,87,86)'
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND   sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;
   END IF;

   commit; -- for supplies


   IF v_mat_dmd_enabled = SYS_YES THEN

     --Duplicate records check for the records whose source is XML

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     --For MDS and Forecast (origination_type 8 and 29)

     -- MDS
     lv_sql_stmt :=
     'UPDATE   msc_st_demands msd1'
     ||' SET     process_flag  = '||G_ERROR_FLG||','
     ||'         error_text   = '||''''||lv_message_text||''''
     ||' WHERE   message_id <  (SELECT MAX(message_id)'
     ||'         FROM  msc_st_demands msd2'
     ||'         WHERE  msd2.sr_instance_code  = msd1.sr_instance_code '
     ||'         AND    nvl(msd2.using_assembly_demand_date,SYSDATE-365000 ) = nvl(msd1.using_assembly_demand_date,SYSDATE-365000 ) '
     ||'         AND  msd2.item_name = msd1.item_name'
     ||'         AND      msd2.organization_code   = msd1.organization_code '
     ||'         AND   NVL(msd2.company_name,'||''''||NULL_CHAR||''''||') '
     ||'                 =    NVL(msd1.company_name,'||''''||NULL_CHAR||''''||') '
     ||'         AND msd2.demand_schedule_name = msd1.demand_schedule_name '
     ||'         AND  NVL(msd2.schedule_line_num,'||''''||NULL_CHAR||''''||') '
     ||'               = NVL(msd1.schedule_line_num,'||''''||NULL_CHAR||''''||') '
     ||'         AND  msd2.origination_type  = msd1.origination_type'
     ||'         AND   msd2.process_flag = '||G_IN_PROCESS
     ||'         AND  NVL(msd2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
     ||' AND     msd1.process_flag ='|| G_IN_PROCESS
     ||' AND     msd1.origination_type = 8'
     ||' AND     msd1.sr_instance_code = :v_instance_code '
     ||' AND     NVL(msd1.message_id,'||NULL_VALUE||')  <> '||NULL_VALUE;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

     -- Forecast

     lv_sql_stmt :=
     'UPDATE   msc_st_demands msd1'
     ||' SET     process_flag  = '||G_ERROR_FLG||','
     ||'         error_text   = '||''''||lv_message_text||''''
     ||' WHERE   message_id <  (SELECT MAX(message_id)'
     ||'         FROM  msc_st_demands msd2'
     ||'         WHERE  msd2.sr_instance_code     = msd1.sr_instance_code '
     ||'         AND    msd2.schedule_date   = msd1.schedule_date '
     ||'         AND    msd2.item_name  = msd1.item_name'
     ||'         AND    msd2.forecast_designator = msd1.forecast_designator '
     ||'         AND    NVL(msd2.schedule_line_num,'||''''||NULL_CHAR||''''||') '
     ||'                 = NVL(msd1.schedule_line_num,'||''''||NULL_CHAR||''''||') '
     ||'         AND    msd2.organization_code  = msd1.organization_code '
     ||'         AND    NVL(msd2.company_name,'||''''||NULL_CHAR||''''||') '
     ||'                 =    NVL(msd1.company_name,'||''''||NULL_CHAR||''''||') '
     ||'         AND    msd2.origination_type  = msd1.origination_type'
     ||'         AND    msd2.process_flag = '||G_IN_PROCESS
     ||'         AND    NVL(msd2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
     ||' AND     msd1.process_flag ='|| G_IN_PROCESS
     ||' AND     msd1.origination_type = 29 '
     ||' AND     msd1.sr_instance_code = :v_instance_code '
     ||' AND     NVL(msd1.message_id,'||NULL_VALUE||')  <> '||NULL_VALUE;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

     --Duplicate records check for the records whose source is batch load

       lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                    (p_app_short_name    => 'MSC',
                     p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text);

       IF lv_return <> 0 THEN
         RAISE ex_logging_err;
       END IF;

     -- Forecast
     v_sql_stmt := 12;

     lv_sql_stmt :=
     'UPDATE msc_st_demands   msd1'
     ||' SET     process_flag  = '||G_ERROR_FLG||','
     ||'         error_text   = '||''''||lv_message_text||''''
     ||' WHERE   EXISTS( SELECT 1 '
     ||'         FROM msc_st_demands msd2'
     ||'         WHERE  msd2.sr_instance_code = msd1.sr_instance_code '
     ||'         AND msd2.organization_code = msd1.organization_code '
     ||'         AND NVL(msd2.company_name,'||''''||NULL_CHAR||''''||') '
     ||'                 =    NVL(msd1.company_name,'||''''||NULL_CHAR||''''||') '
     ||'         AND msd2.forecast_designator = msd1.forecast_designator '
     ||'         AND msd2.item_name = msd1.item_name'
     ||'         AND NVL(msd2.schedule_line_num,'||''''||NULL_CHAR||''''||') '
     ||'               = NVL(msd1.schedule_line_num,'||''''||NULL_CHAR||''''||') '
     ||'         AND msd2.schedule_date = msd1.schedule_date '
     ||'         AND msd2.origination_type = msd1.origination_type'
     ||'         AND msd2.process_flag = '||G_IN_PROCESS
     ||'         AND NVL(msd2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
     ||'         AND msd2.rowid <> msd1.rowid)'
     ||' AND   msd1.process_flag  = '||G_IN_PROCESS
     ||' AND   msd1.origination_type = 29'
     ||' AND   msd1.sr_instance_code = :v_instance_code'
     ||' AND   NVL(msd1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

     -- MDS
     v_sql_stmt := 12;

     lv_sql_stmt :=
     'UPDATE msc_st_demands   msd1'
     ||' SET     process_flag  = '||G_ERROR_FLG||','
     ||'         error_text   = '||''''||lv_message_text||''''
     ||' WHERE   EXISTS( SELECT 1 '
     ||'         FROM msc_st_demands msd2'
     ||'         WHERE  msd2.sr_instance_code '
     ||'                = msd1.sr_instance_code '
     ||'         AND msd2.organization_code '
     ||'                = msd1.organization_code '
     ||'         AND NVL(msd2.company_name,'||''''||NULL_CHAR||''''||') '
     ||'                 =    NVL(msd1.company_name,'||''''||NULL_CHAR||''''||') '
     ||'         AND msd2.demand_schedule_name = msd1.demand_schedule_name '
     ||'         AND msd2.item_name  = msd1.item_name'
     ||'         AND NVL(msd2.schedule_line_num,'||''''||NULL_CHAR||''''||') '
     ||'               = NVL(msd1.schedule_line_num,'||''''||NULL_CHAR||''''||') '
     ||'         AND    nvl(msd2.using_assembly_demand_date,SYSDATE-365000 ) = nvl(msd1.using_assembly_demand_date,SYSDATE-365000 ) '
     ||'         AND msd2.origination_type '
     ||'               = msd1.origination_type'
     ||'         AND msd2.process_flag = '||G_IN_PROCESS
     ||'         AND NVL(msd2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
     ||'         AND msd2.rowid <> msd1.rowid)'
     ||' AND   msd1.process_flag  = '||G_IN_PROCESS
     ||' AND   msd1.origination_type = 8 '
     ||' AND   msd1.sr_instance_code = :v_instance_code'
     ||' AND   NVL(msd1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;


     --Duplicate SO records check for the records whose source is XML

     lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                   (p_app_short_name    => 'MSC',
                    p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                    p_message_text      => lv_message_text,
                    p_error_text        => lv_error_text);

     IF lv_return <> 0 THEN
       RAISE ex_logging_err;
     END IF;
     --Duplicate records check for the records whose source is XML

     v_sql_stmt := 13;

     lv_sql_stmt :=
     'UPDATE   msc_st_sales_orders   mso1'
     ||' SET     process_flag  = '||G_ERROR_FLG||','
     ||'         error_text   = '||''''||lv_message_text||''''
     ||' WHERE   message_id <  (SELECT MAX(message_id)'
     ||'         FROM  msc_st_sales_orders    mso2'
     ||'         WHERE  mso2.sr_instance_code '
     ||'                = mso1.sr_instance_code '
     ||'         AND   mso2.sales_order_number '
     ||'                = mso1.sales_order_number '
     ||'         AND mso2.line_num'
     ||'                = mso1.line_num'
     ||'         AND   mso2.organization_code '
     ||'                = mso1.organization_code '
     ||'         AND   nvl(mso2.reservation_type,'||NULL_VALUE||') '
     ||'                = nvl(mso1.reservation_type,'||NULL_VALUE||') '
     ||'         AND   nvl(mso2.SUBINVENTORY,'||''''||NULL_CHAR||''''||') '
     ||'                = nvl(mso1.SUBINVENTORY,'||''''||NULL_CHAR||''''||') '
     ||'         AND   NVL(mso2.company_name,'||''''||NULL_CHAR||''''||') '
     ||'                 =    NVL(mso1.company_name,'||''''||NULL_CHAR||''''||') '
     ||'         AND  mso2.process_flag = '||G_IN_PROCESS
     ||'         AND  NVL(mso2.message_id,'||NULL_VALUE||')<> '||NULL_VALUE||')'
     ||' AND    mso1.process_flag ='|| G_IN_PROCESS
     ||' AND    mso1.sr_instance_code = :v_instance_code '
     ||' AND    NVL(mso1.message_id,'||NULL_VALUE||')<> '||NULL_VALUE;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;


     --Duplicate records check for the records whose source is batch load

       lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                    (p_app_short_name    => 'MSC',
                     p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                     p_message_text      => lv_message_text,
                     p_error_text        => lv_error_text);

       IF lv_return <> 0 THEN
         RAISE ex_logging_err;
       END IF;

     v_sql_stmt := 14;

     lv_sql_stmt :=
     'UPDATE msc_st_sales_orders   mso1'
     ||' SET     process_flag  = '||G_ERROR_FLG||','
     ||'         error_text   = '||''''||lv_message_text||''''
     ||' WHERE   EXISTS( SELECT 1 '
     ||'         FROM msc_st_sales_orders mso2'
     ||'         WHERE  mso2.sr_instance_code '
     ||'                = mso1.sr_instance_code '
     ||'         AND   mso2.sales_order_number '
     ||'                = mso1.sales_order_number '
     ||'         AND mso2.line_num'
     ||'                = mso1.line_num'
     ||'         AND   mso2.organization_code '
     ||'                = mso1.organization_code '
     ||'         AND   nvl(mso2.reservation_type,'||NULL_VALUE||') '
     ||'                = nvl(mso1.reservation_type,'||NULL_VALUE||') '
     ||'         AND   nvl(mso2.SUBINVENTORY,'||''''||NULL_CHAR||''''||') '
     ||'                = nvl(mso1.SUBINVENTORY,'||''''||NULL_CHAR||''''||') '
     ||'         AND   NVL(mso2.company_name,'||''''||NULL_CHAR||''''||') '
     ||'                 =    NVL(mso1.company_name,'||''''||NULL_CHAR||''''||') '
     ||'         AND mso2.process_flag = '||G_IN_PROCESS
     ||'         AND NVL(mso2.message_id,'||NULL_VALUE||') = '||NULL_VALUE
     ||'         AND mso2.rowid <> mso1.rowid )'
     ||' AND   mso1.process_flag  = '||G_IN_PROCESS
     ||' AND   mso1.sr_instance_code = :v_instance_code'
     ||' AND   NVL(mso1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

     EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;
   END IF;

   commit; -- for demands

  -- For LEVEL_VALUE
  IF v_level_value_enabled = SYS_YES THEN
     v_sql_stmt := 15;
    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE    msd_st_level_values mlv1'
    ||' SET    process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE  EXISTS ( SELECT 1 FROM msd_st_level_values mlv2'
    ||'        WHERE mlv1.level_name  = mlv2.level_name'
    ||'        AND   mlv1.level_value = mlv2.level_value'
    ||'        AND   mlv1.process_flag = mlv2.process_flag'
    ||'        AND   mlv1.sr_instance_code = mlv2.sr_instance_code'
    ||'        GROUP BY sr_instance_code,level_name, level_value'
    ||'        HAVING COUNT(*)> 1 )'
    ||' AND    mlv1.process_flag = '||G_IN_PROCESS
    ||' AND    sr_instance_code  =  :v_instance_code';


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    commit;
    END IF; -- level_value

  EXCEPTION
    WHEN ex_logging_err THEN
      ERRBUF  := lv_error_text;
      RETCODE := G_ERROR;
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,ERRBUF);
      ROLLBACK;
    WHEN others THEN
      ERRBUF  := SQLERRM;
      RETCODE := G_ERROR;
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,ERRBUF);
      ROLLBACK;
  END CHECK_DUPLICATES ;

  -- Item Customer Records
  PROCEDURE  LOAD_ITEM_CUSTOMERS IS

  TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
  lb_rowid          RowidTab;

  lv_column_names       VARCHAR2(5000);     -- Stores cocatenated column names
  lv_return             NUMBER;
  lv_error_text         VARCHAR2(250);
  lv_where_str          VARCHAR2(5000);
  lv_sql_stmt           VARCHAR2(5000);
  lv_batch_id           msc_st_system_items.batch_id%TYPE;
  lv_message_text       msc_errors.error_text%TYPE;

  ex_logging_err    EXCEPTION;
  busy              EXCEPTION;
  PRAGMA EXCEPTION_INIT(busy, -54);

  CURSOR c1(p_batch_id NUMBER) IS
    SELECT rowid
    FROM   msc_st_item_customers
    WHERE  process_flag      IN (G_IN_PROCESS,G_ERROR_FLG)
    AND    sr_instance_code = v_instance_code
    AND    batch_id         = p_batch_id;

  BEGIN
    -- Validation of table msc_st_item_customers

    lv_column_names :=
      'ITEM_NAME                 ||''~''||'
    ||'CUSTOMER_ITEM_NAME        ||''~''||'
    ||'DESCRIPTION               ||''~''||'
    ||'CUSTOMER_NAME             ||''~''||'
    ||'CUSTOMER_SITE_NAME        ||''~''||'
    ||'SR_INSTANCE_CODE          ||''~''||'
    ||'LEAD_TIME                 ||''~''||'
    ||'UOM_CODE                  ||''~''||'
    ||'LIST_PRICE                ||''~''||'
    ||'PLANNER_CODE              ||''~''||'
    ||'COMPANY_NAME';


    -- For XML, duplicate UDK combinations would be allowed. We would pick up the record with the maximum MESSAGE_ID for the same user defined key combination for processing. For other records we would set process flag to 3 and log an error message.
    -- Duplicate records check for the records whose source is XML.

    -- Error out records if same OEM item is mapped to multiple customer items

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    v_sql_stmt := 01;
    lv_sql_stmt :=
    'UPDATE     msc_st_item_customers mic1 '
    ||' SET     process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   message_id <  (SELECT MAX(message_id)'
    ||'         FROM   msc_st_item_customers mic2'
    ||'         WHERE  mic2.sr_instance_code      = mic1.sr_instance_code'
    ||'         AND    NVL(mic2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mic1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    mic2.ITEM_NAME            = mic1.ITEM_NAME'
    ||'         AND    mic2.CUSTOMER_NAME   = mic1.CUSTOMER_NAME'
    ||'         AND    NVL(mic2.CUSTOMER_SITE_NAME,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mic1.CUSTOMER_SITE_NAME,  '||''''||NULL_CHAR||''''||'))'
    ||' AND    mic1.process_flag     = '||G_IN_PROCESS
    ||' AND    mic1.sr_instance_code = :v_instance_code'
    ||' AND    NVL(mic1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    -- Error out records if multiple OEM items are mapped to same customer items

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    v_sql_stmt := 02;
    lv_sql_stmt :=
    'UPDATE     msc_st_item_customers mic1 '
    ||' SET     process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   message_id <  (SELECT MAX(message_id)'
    ||'         FROM   msc_st_item_customers mic2'
    ||'         WHERE  mic2.sr_instance_code      = mic1.sr_instance_code'
    ||'         AND    NVL(mic2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mic1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    mic2.CUSTOMER_ITEM_NAME            = mic1.CUSTOMER_ITEM_NAME'
    ||'         AND    mic2.CUSTOMER_NAME   = mic1.CUSTOMER_NAME'
    ||'         AND    NVL(mic2.CUSTOMER_SITE_NAME,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mic1.CUSTOMER_SITE_NAME,  '||''''||NULL_CHAR||''''||'))'
    ||' AND    mic1.process_flag     = '||G_IN_PROCESS
    ||' AND    mic1.sr_instance_code = :v_instance_code'
    ||' AND    NVL(mic1.message_id,'||NULL_VALUE||') <> '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    -- For Batch loads (excel etc.)  we error out all duplicate UDK records.
    -- No record would be processed in this case. To identify whether the record has come via batch/ XML we would use the MESSAGE_ID field.
    -- If MESSAGE_ID is not null then we would assume it to have come in via XML else via batch load.

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.


    -- Error out records if same OEM item is mapped to multiple customer items. add index for this

    v_sql_stmt := 03;
    lv_sql_stmt :=
    'UPDATE     msc_st_item_customers mic1 '
    ||' SET     process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   EXISTS( SELECT 1 '
    ||'         FROM   msc_st_item_customers mic2'
    ||'         WHERE  mic2.sr_instance_code      = mic1.sr_instance_code'
    ||'         AND    NVL(mic2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mic1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    mic2.ITEM_NAME            = mic1.ITEM_NAME'
    ||'         AND    mic2.CUSTOMER_NAME   = mic1.CUSTOMER_NAME'
    ||'         AND    NVL(mic2.CUSTOMER_SITE_NAME,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mic1.CUSTOMER_SITE_NAME,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    mic1.rowid <> mic2.rowid)'
    ||' AND    mic1.process_flag     = '||G_IN_PROCESS
    ||' AND    mic1.sr_instance_code = :v_instance_code'
    ||' AND    NVL(mic1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;

    -- Error out records if multiple OEM items are mapped to same customer items. add index for this

    v_sql_stmt := 04;
    lv_sql_stmt :=
    'UPDATE     msc_st_item_customers mic1 '
    ||' SET     process_flag = '||G_ERROR_FLG||','
    ||'         error_text   = '||''''||lv_message_text||''''
    ||' WHERE   EXISTS( SELECT 1 '
    ||'         FROM   msc_st_item_customers mic2'
    ||'         WHERE  mic2.sr_instance_code      = mic1.sr_instance_code'
    ||'         AND    NVL(mic2.company_name,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mic1.company_name,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    mic2.CUSTOMER_ITEM_NAME            = mic1.CUSTOMER_ITEM_NAME'
    ||'         AND    mic2.CUSTOMER_NAME   = mic1.CUSTOMER_NAME'
    ||'         AND    NVL(mic2.CUSTOMER_SITE_NAME,  '||''''||NULL_CHAR||''''||') = '
    ||'                NVL(mic1.CUSTOMER_SITE_NAME,  '||''''||NULL_CHAR||''''||')'
    ||'         AND    mic1.rowid <> mic2.rowid)'
    ||' AND    mic1.process_flag     = '||G_IN_PROCESS
    ||' AND    mic1.sr_instance_code = :v_instance_code'
    ||' AND    NVL(mic1.message_id,'||NULL_VALUE||') = '||NULL_VALUE;


      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_code;


    -- Generate the batch_id and update the tables with the batch_id.

    LOOP
      v_sql_stmt := 05;

      SELECT msc_st_batch_id_s.NEXTVAL
      INTO  lv_batch_id
      FROM  dual;

      v_sql_stmt := 06;
      lv_sql_stmt :=
      'UPDATE msc_st_item_customers '
      ||' SET    batch_id  = :lv_batch_id'
      ||' WHERE  process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
      ||' AND    sr_instance_code               = :v_instance_code'
      ||' AND    NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND    rownum                        <= '||v_batch_size;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      EXIT WHEN SQL%NOTFOUND;

      OPEN c1(lv_batch_id);
      FETCH c1 BULK COLLECT INTO lb_rowid;
      CLOSE c1;


     -- Generate the st_transaction_id and update all the records with this st_transaction_id.
     -- Set the who columns also (where PROCESS_FLAG = 2 and SR_INSTANCE_CODE = v_instance_code).
     -- Sequence : MSC_ST_ITEM_CUSTOMERS_S.

      v_sql_stmt := 07;
      FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
      UPDATE msc_st_item_customers
      SET    st_transaction_id   = MSC_ST_ITEM_CUSTOMERS_S.NEXTVAL,
             refresh_id          = v_refresh_id,
             last_update_date    = v_current_date,
             last_updated_by     = v_current_user,
             creation_date       = v_current_date,
             created_by          =  v_current_user
      WHERE  rowid               = lb_rowid(j);


     -- Error out those records where the deleted_flag is set to 'Y' if the collection program doesn't support deletion for this BO.
     -- Insert the records into the error_table with the severity warning where deleted_flag has a null value.
     -- Update the MSC_ST_ITEM_SUPPLIERS table with the default value 2.

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_NO_DELETION',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'TABLE_NAME',
                      p_token_value1      => 'MSC_ST_ITEM_CUSTOMERS');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- Deletion is not allowed for this table

      v_sql_stmt := 08;
      lv_sql_stmt :=
      'UPDATE       MSC_ST_ITEM_CUSTOMERS '
      ||' SET      process_flag     = '||G_ERROR_FLG||','
      ||'          error_text   = '||''''||lv_message_text||''''
      ||' WHERE    deleted_flag     = '||SYS_YES
      ||' AND      process_flag     = '||G_IN_PROCESS
      ||' AND      batch_id         =  :lv_batch_id'
      ||' AND      sr_instance_code = :v_instance_code';



        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      -- warning message if the DELETED_FLAG is other than 1, 2. default to SYS_NO (2)

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_COL_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'DELETED_FLAG',
                      p_token2            => 'DEFAULT_VALUE',
                      p_token_value2      => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_where_str :=
      ' AND NVL(deleted_flag,'||NULL_VALUE||') NOT IN(1,2)';

      --Log a warning for those records where the deleted_flag has a value other
      --SYS_NO

      lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_ITEM_CUSTOMERS',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_WARNING,
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_batch_id          => lv_batch_id,
                      p_where_str         => lv_where_str,
                      p_col_name          => 'DELETED_FLAG',
                      p_debug             => v_debug,
                      p_default_value     => SYS_NO);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- derive the company_id if it is not null or -1. if not found then error out record
      IF v_sce_installed THEN

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'COMPANY_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.DERIVE_COMPANY_ID
                        (p_table_name     => 'MSC_ST_ITEM_CUSTOMERS',
                         p_company_name   => 'COMPANY_NAME',
                         p_company_id     => 'COMPANY_ID',
                         p_instance_code  => v_instance_code,
                         p_error_text     => lv_error_text,
                         p_batch_id       => lv_batch_id,
                         p_message_text   => lv_message_text,
                         p_debug          => v_debug);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      END IF;


/*    Calling derive_company_id
      lv_sql_stmt :=
      ' UPDATE  MSC_ST_ITEM_CUSTOMERS mic '
      ||' SET   company_id        =   '
      ||'       (select company_id from msc_companies mc'
      ||'        where mic.company_name = mc.company_name) '
      ||' WHERE NVL(COMPANY_NAME,''-1'')   <> ''-1'''
      ||' AND   batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND   sr_instance_code = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      lv_sql_stmt :=
      ' UPDATE  MSC_ST_ITEM_CUSTOMERS '
      ||' SET   process_flag        = '||G_ERROR_FLG||','
      ||'       error_text          = '||''''||lv_message_text||''''
      ||' WHERE NVL(COMPANY_NAME,''-1'')   <> ''-1'''
      ||' AND   COMPANY_ID IS NULL '
      ||' AND   batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND   sr_instance_code = :v_instance_code';

      IF V_DEBUG THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
      END IF;

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;
*/

      -- error out records where CUSTOMER_ITEM_NAME is null

      v_sql_stmt := 09;

      -- Set the error message

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_VAL_NULL',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CUSTOMER_ITEM_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_sql_stmt :=
      ' UPDATE  MSC_ST_ITEM_CUSTOMERS '
      ||' SET   process_flag        = '||G_ERROR_FLG||','
      ||'       error_text          = '||''''||lv_message_text||''''
      ||' WHERE NVL(customer_item_name,'||''''||NULL_CHAR||''''||')'
      ||'                   = '||''''||NULL_CHAR||''''
      ||' AND   batch_id         = :lv_batch_id'
      ||' AND   process_flag     = '||G_IN_PROCESS
      ||' AND   sr_instance_code = :v_instance_code';


          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

       EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_batch_id,
                        v_instance_code;

      -- UOM_CODE should refer to a valid record in msc_units_of_measure/msc_st_units_of_measure .
      -- Now check for UOM code if it is Invalid error out
      -- Set the error message

      v_sql_stmt := 10;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_COL_REF_NOT_EXIST',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAMES',
                      p_token_value1      => 'SR_INSTANCE_CODE ,UOM_CODE',
                      p_token2            => 'MASTER_TABLE',
                      p_token_value2      => 'MSC_ST_UNITS_OF_MEASURE',
                      p_token3            => 'CHILD_TABLE',
                      p_token_value3      => 'MSC_ST_ITEM_CUSTOMERS');
      IF lv_return <> 0 THEN
          RAISE ex_logging_err;
      END IF;


      lv_sql_stmt :=
      '   UPDATE      MSC_ST_ITEM_CUSTOMERS mic'
      ||' SET         process_flag = '||G_ERROR_FLG||','
      ||'             error_text   = '||''''||lv_message_text||''''
      ||' WHERE       NOT EXISTS (SELECT 1 '
      ||'             FROM msc_units_of_measure muom'
      ||'             WHERE muom.uom_code       = mic.uom_code'
      ||'             UNION'
      ||'             SELECT 1 FROM msc_st_units_of_measure msuom'
      ||'             WHERE msuom.uom_code       = mic.uom_code'
      ||'             AND   msuom.sr_instance_id = :v_instance_id'
      ||'             AND   msuom.process_flag   = '||G_VALID||')'
      ||' AND mic.sr_instance_code   = :v_instance_code'
      ||' AND mic.batch_id           = :lv_batch_id'
      ||' AND mic.process_flag       = '||G_IN_PROCESS ;


           MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
            USING     v_instance_id,
                      v_instance_code,
                      lv_batch_id;


      -- Derive inventory_item_id based on the item_name and error_out all the records where the derivation has failed.

      v_sql_stmt := 11;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'ITEM_NAME');

      --Derive Inventory_item_id

      lv_return := MSC_ST_UTIL.DERIVE_ITEM_ID
                     (p_table_name       => 'MSC_ST_ITEM_CUSTOMERS',
                      p_item_col_name    => 'ITEM_NAME',
                      p_item_col_id      => 'INVENTORY_ITEM_ID',
                      p_instance_id      => v_instance_id,
                      p_instance_code    => v_instance_code,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names,
                      p_check_org        => FALSE);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      -- check customer exists in msc_trading_partners
      -- Set the  message

      v_sql_stmt := 12;

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CUSTOMER_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

     -- Derive customer_id and error out records if customer is not valid

     lv_return := MSC_ST_UTIL.DERIVE_PARTNER_ORG_ID
                     (p_table_name       => 'MSC_ST_ITEM_CUSTOMERS',
                      p_org_partner_name => 'CUSTOMER_NAME',
                      p_org_partner_id   => 'CUSTOMER_ID',
                      p_instance_code    => v_instance_code,
                      p_partner_type     => G_CUSTOMER,
                      p_error_text       => lv_error_text,
                      p_batch_id         => lv_batch_id,
                      p_severity         => G_SEV_ERROR,
                      p_message_text     => lv_message_text,
                      p_debug            => v_debug,
                      p_row              => lv_column_names);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      -- Check for the valid CUSTOMER_SITE_NAME and derive the CUSTOMER_SITE_ID.
      -- Error out those records for which the CUSTOMER_SITE_ID derivation has failed.


      v_sql_stmt := 13;

      -- Set the  message

      lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                     (p_app_short_name    => 'MSC',
                      p_error_code        => 'MSC_PP_INVALID_VALUE',
                      p_message_text      => lv_message_text,
                      p_error_text        => lv_error_text,
                      p_token1            => 'COLUMN_NAME',
                      p_token_value1      => 'CUSTOMER_SITE_NAME');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

      lv_return := MSC_ST_UTIL.DERIVE_PARTNER_SITE_ID
                    (p_table_name        => 'MSC_ST_ITEM_CUSTOMERS',
                    p_partner_name      => 'CUSTOMER_NAME',
                    p_partner_site_code => 'CUSTOMER_SITE_NAME',
                    p_partner_site_id   => 'CUSTOMER_SITE_ID',
                    p_instance_code     => v_instance_code,
                    p_partner_type      => G_CUSTOMER,
                    p_error_text        => lv_error_text,
                    p_batch_id          => lv_batch_id,
                    p_severity          => G_SEV3_ERROR,
                    p_message_text      => lv_message_text,
                    p_debug             => v_debug,
                    p_row               => lv_column_names);


      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


      --  Call the HOOK to enable the customised validations if there is any.
      --  Call to customised validation.
      MSC_CL_PRE_PROCESS_HOOK.ENTITY_VALIDATION
        (ERRBUF         => lv_error_text,
         RETCODE        => lv_return,
         pBatchID       => lv_batch_id,
         pInstanceCode  => v_instance_code,
         pEntityName    => 'MSC_ST_ITEM_CUSTOMERS',
         pInstanceID    => v_instance_id);

      IF NVL(lv_return,0) <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    -- Update the process_flag to 5(valid) and sr_instance_id to v_instance_id.
       lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                     (p_table_name     => 'MSC_ST_ITEM_CUSTOMERS',
                      p_instance_id    => v_instance_id,
                      p_instance_code  => v_instance_code,
                      p_process_flag   => G_VALID,
                      p_error_text     => lv_error_text,
                      p_debug          => v_debug,
                      p_batch_id       => lv_batch_id);

       IF lv_return <> 0 THEN
          RAISE ex_logging_err;
       END IF;

    -- Insert all the errored out records into the error table.
       lv_return := MSC_ST_UTIL.LOG_ERROR
                     (p_table_name        => 'MSC_ST_ITEM_CUSTOMERS',
                      p_instance_code     => v_instance_code,
                      p_row               => lv_column_names,
                      p_severity          => G_SEV_ERROR,
                      p_message_text      => NULL,
                      p_error_text        => lv_error_text,
                      p_debug             => v_debug,
                      p_batch_id          => lv_batch_id);
       IF lv_return <> 0 THEN
         RAISE ex_logging_err;
       END IF;


     COMMIT;

  END LOOP;

  EXCEPTION
    WHEN ex_logging_err THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

    WHEN OTHERS THEN
      lv_error_text    := substr('MSC_CL_PRE_PROCESS.LOAD_DESIGNATOR'||'('
                       ||v_sql_stmt||')'|| SQLERRM, 1, 240);
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;

  END LOAD_ITEM_CUSTOMERS;


  ----- ============== SET_IN_PROCESS ====================

  FUNCTION SET_IN_PROCESS (p_table_name       VARCHAR2,
                           p_instance_id_col  VARCHAR2 DEFAULT 'SR_INSTANCE_ID',
                           p_company_name_col BOOLEAN  DEFAULT TRUE ,
                           p_where_str        VARCHAR2 DEFAULT NULL,
                           p_erp_enabled      VARCHAR2 DEFAULT 'N')

  RETURN NUMBER
  IS
      lv_sql_stmt VARCHAR2(1000);
      lv_error_text VARCHAR2(1000);
      ln_count NUMBER := 0;
      lv_message_text   msc_errors.error_text%TYPE;
      lv_return         NUMBER;
      lv_column_names   VARCHAR2(100);
      ex_logging_err    EXCEPTION;

  BEGIN

      IF (v_instance_type <> G_INS_OTHER AND p_erp_enabled = 'N') THEN
        lv_column_names := 'SR_INSTANCE_CODE';

        lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                         (p_app_short_name    => 'MSC',
                          p_error_code        => 'MSC_ERP_INVALID_ENTITY',
                          p_message_text      => lv_message_text,
                          p_error_text        => lv_error_text,
                          p_token1            => 'TABLE_NAME',
                          p_token_value1      => p_table_name);


          IF lv_return <> 0 THEN
            RAISE ex_logging_err;
          END IF;

        lv_sql_stmt :=
        'UPDATE '||p_table_name
        ||' SET   error_text ='||''''||lv_message_text||''''||','
        ||'       process_flag = '||G_ERROR_FLG
        ||' WHERE sr_instance_code       = ' ||''''||v_instance_code||''''
        ||' AND   process_flag           = ' ||G_NEW
        ||p_where_str;


           MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

       EXECUTE IMMEDIATE lv_sql_stmt;

          lv_return := MSC_ST_UTIL.LOG_ERROR
                        (p_table_name       => p_table_name,
                        p_instance_code     => v_instance_code,
                        p_row               => lv_column_names,
                        p_severity          => G_SEV_ERROR,
                        p_message_text      => NULL,
                        p_error_text        => lv_error_text,
                        p_debug             => v_debug);


         IF lv_return <> 0 THEN
           RAISE ex_logging_err;
         END IF;

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,lv_message_text);

         RETURN (0);

     END IF;


      IF p_company_name_col THEN
      lv_sql_stmt := 'UPDATE '||p_table_name
                   ||' SET    process_flag         = ' ||G_IN_PROCESS  ||','
                   ||         p_instance_id_col||' = 0'                ||','
                   ||'        company_name = NVL(company_name,:v_my_company) ,'
                   ||'        REQUEST_ID        = :request_id   ,'
                   ||'        LAST_UPDATE_DATE  = :current_date ,'
                   ||'        LAST_UPDATED_BY   = :current_user '
                   ||' WHERE  nvl(process_flag,'||G_NEW ||') = '||G_NEW
                   ||' AND    sr_instance_code = :instance_code '
                   ||p_where_str;

     -- OA Self Service load changes
     -- If request id is not -1 or null then pre-processor is called from OA

      IF nvl(v_parent_request_id,-1) > 0 THEN
         lv_sql_stmt := lv_sql_stmt ||
                        ' AND REQUEST_ID = :parent_request_id ';
      ELSIF nvl(v_parent_request_id,-1) = -1 THEN
         lv_sql_stmt := lv_sql_stmt ||
                        ' AND nvl(REQUEST_ID,-1) = -1 ';
      END IF;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,lv_sql_stmt);

      IF nvl(v_parent_request_id,-1) > 0 THEN
         EXECUTE IMMEDIATE lv_sql_stmt USING v_my_company,v_request_id,v_current_date, v_current_user, v_instance_code, v_parent_request_id;
      ELSE
         EXECUTE IMMEDIATE lv_sql_stmt USING v_my_company,v_request_id,v_current_date, v_current_user, v_instance_code;
      END IF;


      ELSE
      lv_sql_stmt := 'UPDATE '||p_table_name
                   ||' SET    process_flag         = ' ||G_IN_PROCESS  ||','
                   ||         p_instance_id_col||' = 0'                ||','
                   ||'        REQUEST_ID        = :request_id   ,'
                   ||'        LAST_UPDATE_DATE  = :current_date ,'
                   ||'        LAST_UPDATED_BY   = :current_user '
                   ||' WHERE  nvl(process_flag,'||G_NEW ||') = '||G_NEW
                   ||' AND    sr_instance_code = :instance_code '
                   ||p_where_str;

     -- OA Self Service load changes
     -- If request id is not -1 or null then pre-processor is called from OA

      IF nvl(v_parent_request_id,-1) > 0 THEN
         lv_sql_stmt := lv_sql_stmt ||
                        ' AND REQUEST_ID = :parent_request_id ';
      ELSIF nvl(v_parent_request_id,-1) = -1 THEN
         lv_sql_stmt := lv_sql_stmt ||
                        ' AND nvl(REQUEST_ID,-1) = -1 ';
      END IF;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,lv_sql_stmt);

      IF nvl(v_parent_request_id,-1) > 0 THEN
         EXECUTE IMMEDIATE lv_sql_stmt USING v_request_id,v_current_date, v_current_user, v_instance_code, v_parent_request_id;
      ELSE
         EXECUTE IMMEDIATE lv_sql_stmt USING v_request_id,v_current_date, v_current_user, v_instance_code;
      END IF;

      END IF;

      ln_count := ln_count + SQL%ROWCOUNT;

      COMMIT;

      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Table Name : '||p_table_name||' - No. of Records : '||ln_count);

      RETURN nvl(ln_count,0);

  EXCEPTION

    WHEN ex_logging_err THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;
      RETURN 0;

    WHEN OTHERS THEN
	lv_error_text := substr('MSC_CL_PRE_PROCESS.SET_IN_PROCESS- '||p_table_name||': ('||v_sql_stmt||')'|| SQLERRM, 1, 240);
	MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
      ROLLBACK;
      RETURN 0;
  END SET_IN_PROCESS ;

  -----==============Divide DP entities in batches and send task to queue-----=================

    PROCEDURE  DIVIDE_BATCHES(p_table_name        VARCHAR2,
                              p_task_name         NUMBER,
                              p_task_not_completed  OUT NOCOPY NUMBER,
                              p_pipe_status         OUT NOCOPY NUMBER )
    IS

    TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
    lb_rowid       RowidTab;
    lv_batch_id    PLS_INTEGER;
    lv_sql_stmt    VARCHAR2(4000);
    lv_task_not_completed  NUMBER := 0;
    lv_message    VARCHAR2(240);
    EX_PIPE_SND   EXCEPTION ;

    BEGIN
        LOOP
           SELECT       msc_st_batch_id_s.NEXTVAL
           INTO         lv_batch_id
           FROM         DUAL;

           v_sql_stmt := 01;
           lv_sql_stmt :=
           'UPDATE   '||p_table_name
           ||' SET   batch_id                       = :lv_batch_id '
           ||' WHERE process_flag  IN ('||G_IN_PROCESS||','||G_ERROR_FLG||')'
           ||' AND   sr_instance_code               = :v_instance_code'
           ||' AND   NVL(batch_id,'||NULL_VALUE||') = '||NULL_VALUE
           ||' AND    rownum                        <= '||v_batch_size;

               MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

           EXECUTE IMMEDIATE lv_sql_stmt
                   USING     lv_batch_id,
                             v_instance_code;


       EXIT WHEN SQL%NOTFOUND ;
       commit;

          lv_message := to_char(p_task_name)||','||to_char(lv_batch_id);
          DBMS_PIPE.PACK_MESSAGE(lv_message);
            IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                 RAISE EX_PIPE_SND;
            END IF;
          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'p_task_name: '||lv_message);
          lv_task_not_completed := lv_task_not_completed + 1;


      END LOOP;
         p_task_not_completed :=lv_task_not_completed ;
       EXCEPTION
         WHEN EX_PIPE_SND THEN
            p_pipe_status := 1;
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error in Sending message in Pipe');
         WHEN OTHERS THEN
           MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error in Batch ID generation: ' || SQLERRM);
           lv_message := to_char(p_task_name)||','||to_char(0);
           DBMS_PIPE.PACK_MESSAGE(lv_message );
           IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                RAISE EX_PIPE_SND ;
           END IF;
           MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'p_task_name: '||lv_message);
           lv_task_not_completed := lv_task_not_completed + 1;
           p_task_not_completed :=lv_task_not_completed ;


    END DIVIDE_BATCHES;



  -- ==============SNAPSHOT_TABLES ============
  -- Snapshot is done by setting the process flag
  -- of all the tables to G_IN_PROCESS

  FUNCTION SNAPSHOT_TABLES RETURN BOOLEAN IS
      lv_error_text VARCHAR2(1000);
      lv_count       PLS_INTEGER;
  BEGIN
	--- ===== Enter the ASCP tables to be set here ======

    IF v_mat_dmd_enabled = SYS_YES OR v_iro_enabled = SYS_YES or v_ero_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_DEMANDS', p_erp_enabled => 'Y');
      IF lv_count > 0 Then
         prec.mds_flag:= SYS_YES;
         prec.forecast_flag:= SYS_YES;
         prec.wip_flag:= SYS_YES;
         prec.internal_repair_flag:=SYS_YES;
         prec.external_repair_flag:=SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_SALES_ORDERS ',p_erp_enabled => 'Y');
      IF lv_count > 0 Then
         prec.sales_order_flag:= SYS_YES;
      End IF;
    END IF;

    IF v_reserve_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_RESERVATIONS');
      IF lv_count > 0 Then
         prec.reserves_flag:= SYS_YES;
      End IF;
    END IF;

    IF v_mat_sup_enabled = SYS_YES OR v_iro_enabled = SYS_YES or v_ero_enabled = SYS_YES
     THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_SUPPLIES',p_erp_enabled => 'Y');
      IF lv_count > 0 Then
         prec.oh_flag:= SYS_YES;
         prec.po_flag:= SYS_YES;
         prec.mps_flag:= SYS_YES;
         prec.wip_flag:= SYS_YES;
         prec.internal_repair_flag:=SYS_YES;
         prec.external_repair_flag:=SYS_YES;
      End IF;

      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_JOB_OPERATION_NETWORKS');
      IF lv_count > 0 Then
       prec.wip_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_JOB_OPERATIONS');
      IF lv_count > 0 Then
       prec.wip_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_JOB_REQUIREMENT_OPS');
      IF lv_count > 0 Then
       prec.wip_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_JOB_OP_RESOURCES');
      IF lv_count > 0 Then
       prec.wip_flag:= SYS_YES;
      End IF;
   END IF;

    IF v_desig_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_DESIGNATORS',p_erp_enabled => 'Y');
      IF lv_count > 0 Then
         prec.mds_flag:= SYS_YES;
         prec.forecast_flag:= SYS_YES;
         prec.mps_flag:= SYS_YES;
      End IF;
    END IF;

    IF v_sourcing_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_ITEM_SOURCING');
      IF lv_count > 0 Then
         prec.sourcing_rule_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_REGIONS');
      IF lv_count > 0 Then
         prec.sourcing_rule_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_ZONE_REGIONS');
      IF lv_count > 0 Then
         prec.sourcing_rule_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_REGION_SITES');
      IF lv_count > 0 Then
         prec.sourcing_rule_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_REGION_LOCATIONS');
      IF lv_count > 0 Then
         prec.sourcing_rule_flag:= SYS_YES;
      End IF;
    END IF;

   IF v_ship_mthd_enabled = SYS_YES THEN
     lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_INTERORG_SHIP_METHODS');
      IF lv_count > 0 Then
         prec.sourcing_rule_flag:= SYS_YES;
      End IF;
   END IF;

    IF v_bom_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_COMPONENT_SUBSTITUTES');
      IF lv_count > 0 Then
         prec.bom_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_BOM_COMPONENTS');
      IF lv_count > 0 Then
         prec.bom_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_BOMS');
      IF lv_count > 0 Then
         prec.bom_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_CO_PRODUCTS');
      IF lv_count > 0 Then
         prec.bom_flag:= SYS_YES;
      End IF;
    END IF;

    IF v_cal_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_CALENDARS');
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_WORKDAY_PATTERNS');
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_CALENDAR_SHIFTS');
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_SHIFT_TIMES');
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_SHIFT_EXCEPTIONS');
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_CALENDAR_EXCEPTIONS');
    END IF;

    IF v_rtg_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_OPERATION_RESOURCES');
      IF lv_count > 0 Then
         prec.bom_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_ROUTING_OPERATIONS');
      IF lv_count > 0 Then
         prec.bom_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_ROUTINGS');
      IF lv_count > 0 Then
         prec.bom_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_OPERATION_NETWORKS');
      IF lv_count > 0 Then
         prec.bom_flag:= SYS_YES;
      End IF;
    END IF;

    IF v_res_dmd_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_RESOURCE_REQUIREMENTS',p_erp_enabled => 'Y'); /* bug 3768813 */
      IF lv_count > 0 Then
         prec.wip_flag:= SYS_YES;
      End IF;
    END IF;

    IF v_resources_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_RESOURCE_GROUPS');
      IF lv_count > 0 Then
         prec.bom_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_DEPARTMENT_RESOURCES');
      IF lv_count > 0 Then
         prec.bom_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_RESOURCE_SETUPS');
      IF lv_count > 0 Then
         prec.bom_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_SETUP_TRANSITIONS');
      IF lv_count > 0 Then
         prec.bom_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_RESOURCE_SHIFTS');
      IF lv_count > 0 Then
         prec.bom_flag:= SYS_YES;
         prec.calendar_flag:=SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_RESOURCE_CHANGES');
      IF lv_count > 0 Then
         prec.bom_flag:= SYS_YES;
         prec.calendar_flag:=SYS_YES;
      End IF;
    END IF;

    IF v_tp_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_LOCATION_ASSOCIATIONS');
      IF lv_count > 0 Then
         prec.tp_customer_flag:= SYS_YES;
         prec.tp_vendor_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_TRADING_PARTNER_SITES');
      IF lv_count > 0 Then
         prec.tp_customer_flag:= SYS_YES;
         prec.tp_vendor_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_PARTNER_CONTACTS');
      IF lv_count > 0 Then
         prec.tp_customer_flag:= SYS_YES;
         prec.tp_vendor_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_TRADING_PARTNERS');
      IF lv_count > 0 Then
         prec.tp_customer_flag:= SYS_YES;
         prec.tp_vendor_flag:= SYS_YES;
         prec.sourcing_rule_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_SUB_INVENTORIES');
      IF lv_count > 0 Then
         prec.sub_inventory_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_GROUPS',p_company_name_col => FALSE);
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_GROUP_COMPANIES');
    END IF;

    IF v_dmd_class_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_DEMAND_CLASSES');
      IF lv_count > 0 Then
         prec.demand_class_flag:= SYS_YES;
      End IF;
    END IF;

    IF v_sup_cap_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_ITEM_SUPPLIERS');
      IF lv_count > 0 Then
         prec.app_supp_cap_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_SUPPLIER_CAPACITIES', p_erp_enabled => 'Y');
      IF lv_count > 0 Then
         prec.app_supp_cap_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_SUPPLIER_FLEX_FENCES', p_erp_enabled => 'Y');
      IF lv_count > 0 Then
         prec.app_supp_cap_flag:= SYS_YES;
      End IF;
    END IF;

    IF v_item_cst_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_ITEM_CUSTOMERS');
    END IF;

    IF v_safety_stk_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_SAFETY_STOCKS');
      IF lv_count > 0 Then
         prec.saf_stock_flag:= SYS_YES;
      End IF;
    END IF;

    IF v_project_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_PROJECT_TASKS');
      IF lv_count > 0 Then
         prec.project_flag:= SYS_YES;
      End IF;
    END IF;

    IF v_uom_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_UNITS_OF_MEASURE');
      IF lv_count > 0 Then
         prec.uom_flag:= SYS_YES;
      End IF;
    END IF;

    IF v_uom_class_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_UOM_CLASS_CONVERSIONS');
      IF lv_count > 0 Then
         prec.uom_flag:= SYS_YES;
      End IF;
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_UOM_CONVERSIONS');
      IF lv_count > 0 Then
         prec.uom_flag:= SYS_YES;
      End IF;
    END IF;

    IF v_ctg_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_CATEGORY_SETS');
      IF lv_count > 0 Then
         prec.item_flag:= SYS_YES;
      End IF;
    END IF;

    IF v_item_cat_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_ITEM_CATEGORIES');
      IF lv_count > 0 Then
         prec.item_flag:= SYS_YES;
      End IF;
    END IF;

    IF v_item_enabled  = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_SYSTEM_ITEMS');
      IF lv_count > 0 Then
         prec.item_flag:= SYS_YES;
      End IF;
    END IF;

    IF v_comp_users_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_COMPANY_USERS');
      IF lv_count > 0 Then
         prec.user_company_flag:= G_COMP_USR_YES;
      End IF;
    END IF;

    -- Product Item Substitute

    IF v_item_substitute_enabled  = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_ITEM_SUBSTITUTES');
      IF lv_count > 0 Then
         prec.item_subst_flag:= SYS_YES;
      End IF;
    END IF;

    IF v_planners_enabled  = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_PLANNERS');
      IF lv_count > 0 Then
         prec.planner_flag:= SYS_YES;
      End IF;
    END IF;

    -- Profile Values

    IF v_profile_enabled  = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_APPS_INSTANCES', p_company_name_col => FALSE);
    END IF;

    IF v_cal_assignment_enabled  = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_CALENDAR_ASSIGNMENTS');
      IF lv_count > 0 Then
         prec.calendar_flag:=SYS_YES;
      End IF;
    END IF;

    IF v_sales_channel_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_SR_LOOKUPS');
      IF lv_count > 0 Then
         prec.sales_channel_flag:= SYS_YES;
      End IF;
    END IF;

    IF v_fiscal_calendar_enabled = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_CALENDAR_MONTHS', p_company_name_col => FALSE);
      IF lv_count > 0 Then
         prec.fiscal_calendar_flag:= SYS_YES;
      End IF;
    END IF;

 IF v_CMRO_enabled = SYS_YES THEN
       lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_VISITS', p_company_name_col => FALSE, p_erp_enabled => 'Y');
      IF lv_count > 0 Then
         prec.CMRO_flag:= SYS_YES;
      End IF;

     lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_WO_MILESTONES', p_company_name_col => FALSE, p_erp_enabled => 'Y');
      IF lv_count > 0 Then
         prec.CMRO_flag:= SYS_YES;
      End IF;

    lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_WO_ATTRIBUTES', p_company_name_col => FALSE, p_erp_enabled => 'Y');
      IF lv_count > 0 Then
         prec.CMRO_flag:= SYS_YES;
      End IF;

     lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_WORK_BREAKDOWN_STRUCT', p_company_name_col => FALSE, p_erp_enabled => 'Y');
      IF lv_count > 0 Then
         prec.CMRO_flag:= SYS_YES;
      End IF;

      lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_WO_OPERATION_REL', p_company_name_col => FALSE, p_erp_enabled => 'Y');
      IF lv_count > 0 Then
         prec.CMRO_flag:= SYS_YES;
      End IF;

       lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_WO_TASK_HIERARCHY', p_company_name_col => FALSE, p_erp_enabled => 'Y');
      IF lv_count > 0 Then
         prec.CMRO_flag:= SYS_YES;
      End IF;

    END IF;




	--- ===== Enter the DP tables to be set here ======

    IF v_fiscal_cal_enabled  = SYS_YES THEN
     lv_count:= SET_IN_PROCESS (p_table_name => 'MSD_ST_TIME',p_instance_id_col => 'INSTANCE',p_company_name_col => FALSE, p_where_str => ' AND CALENDAR_TYPE <> '||G_COMPOSITE_CAL );
      IF lv_count = 0 Then
         v_fiscal_cal_enabled:= SYS_NO;
      End IF;
    END IF;


    IF v_comp_cal_enabled  = SYS_YES THEN
     lv_count:= SET_IN_PROCESS (p_table_name => 'MSD_ST_TIME',p_instance_id_col => 'INSTANCE',p_company_name_col => FALSE,p_where_str => ' AND CALENDAR_TYPE <> '||G_FISCAL_CAL, p_erp_enabled => 'Y' );
      IF lv_count = 0 Then
         v_comp_cal_enabled:= SYS_NO;
      End IF;
    END IF;



    IF v_setup_enabled  = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSD_ST_SETUP_PARAMETERS',p_instance_id_col => 'INSTANCE',p_company_name_col => FALSE,p_erp_enabled => 'Y');
      IF lv_count = 0 Then
         v_setup_enabled:= SYS_NO;
      End IF;
    END IF;

    IF v_level_value_enabled  = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSD_ST_LEVEL_VALUES',p_instance_id_col => 'INSTANCE',p_company_name_col => FALSE, p_erp_enabled => 'Y');
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSD_ST_LEVEL_ORG_ASSCNS',p_instance_id_col => 'INSTANCE',p_company_name_col => FALSE, p_erp_enabled => 'Y');
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSD_ST_ITEM_RELATIONSHIPS',p_instance_id_col => 'INSTANCE_ID',p_company_name_col => FALSE, p_erp_enabled => 'Y');
     /*
      IF lv_count = 0 Then
         v_level_value_enabled:= SYS_NO;
      End IF;
     */
    END IF;

    IF v_level_assoc_enabled  = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSD_ST_LEVEL_ASSOCIATIONS',p_instance_id_col => 'INSTANCE',p_company_name_col => FALSE, p_erp_enabled => 'Y');
    END IF;

    IF v_booking_enabled  = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSD_ST_BOOKING_DATA',p_instance_id_col => 'INSTANCE',p_company_name_col => FALSE, p_erp_enabled => 'Y');
      IF lv_count = 0 Then
         v_booking_enabled:= SYS_NO;
      End IF;
    END IF;

    IF v_shipment_enabled  = SYS_YES THEN
       lv_count:= SET_IN_PROCESS (p_table_name => 'MSD_ST_SHIPMENT_DATA',p_instance_id_col => 'INSTANCE',p_company_name_col => FALSE, p_erp_enabled => 'Y');
       IF lv_count = 0 Then
         v_shipment_enabled:= SYS_NO;
       End IF;
    END IF;

    IF v_mfg_fct_enabled  = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSD_ST_MFG_FORECAST',p_instance_id_col => 'INSTANCE',p_company_name_col => FALSE, p_erp_enabled => 'Y');
      IF lv_count = 0 Then
         v_mfg_fct_enabled:= SYS_NO;
      End IF;
    END IF;

    IF v_list_price_enabled  = SYS_YES THEN
      -- lv_count:= SET_IN_PROCESS (p_table_name => 'MSD_ST_ITEM_LIST_PRICE',p_instance_id_col => 'INSTANCE');
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSD_ST_PRICE_LIST',p_instance_id_col => 'INSTANCE',p_company_name_col => FALSE, p_erp_enabled => 'Y');
      IF lv_count = 0 Then
         v_list_price_enabled:= SYS_NO;
      End IF;
    END IF;

    IF v_cs_data_enabled  = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSD_ST_CS_DATA',p_instance_id_col => 'ATTRIBUTE_1',p_company_name_col => FALSE, p_erp_enabled => 'Y');
      IF lv_count = 0 Then
         v_cs_data_enabled:= SYS_NO;
      End IF;
    END IF;

    IF v_curr_conv_enabled  = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSD_ST_CURRENCY_CONVERSIONS',p_instance_id_col => 'INSTANCE',p_company_name_col => FALSE);
      IF lv_count = 0 Then
         v_curr_conv_enabled:= SYS_NO;
      End IF;
    END IF;

    IF v_uom_conv_enabled  = SYS_YES THEN
      lv_count:= SET_IN_PROCESS (p_table_name => 'MSD_ST_UOM_CONVERSIONS',p_instance_id_col => 'INSTANCE',p_company_name_col => FALSE, p_erp_enabled => 'Y'); --Enabling DP UOM conversions for ERP Instances -  Bug 3752937
      IF lv_count = 0 Then
         v_uom_conv_enabled:= SYS_NO;
      End IF;
    END IF;



      --- ===== END entering the tables here =========
      COMMIT;                     --  close current transaction
      RETURN (TRUE);

  EXCEPTION
      WHEN OTHERS THEN
	lv_error_text := substr('MSC_CL_PRE_PROCESS.SNAPSHOT_TABLES - '|| SQLERRM, 1, 240);
	MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,lv_error_text);
	return(FALSE);

  END SNAPSHOT_TABLES ;

   -- ========= EXECUTE_TASK ==========

   PROCEDURE EXECUTE_TASK( p_status                   OUT NOCOPY NUMBER,
                           p_tasknum                  IN  NUMBER,
                           p_batch_id                 IN  NUMBER DEFAULT -1 )

   IS

   lv_task_start_time DATE;

   BEGIN

         lv_task_start_time:= SYSDATE;

         SAVEPOINT ExecuteTask;

         p_status := FAIL;

   -- ============= Execute the task according to its task number  ===========

         IF p_tasknum= TASK_SUPPLIER_CAPACITY THEN

            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_SUPPLIER_CAPACITY');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_SUPPLIER_CAPACITY;

         ELSIF p_tasknum= TASK_SAFETY_STOCK THEN

            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_SAFETY_STOCKS');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_SAFETY_STOCK;

         ELSIF p_tasknum= TASK_BIS_PERIODS THEN

            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_BIS_PERIODS');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_BIS_PERIODS;

         ELSIF p_tasknum= TASK_UOM_CONV THEN

            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_UOM_CLASS_CONV');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_UOM_CLASS_CONV;

         ELSIF p_tasknum= TASK_ITEM THEN

            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_ITEM');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_ITEM(p_batch_id);

         -- Product Item Substitute

         ELSIF p_tasknum= TASK_ITEM_SUBSTITUTE THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_ITEM_SUBSTITUTE');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_ITEM_SUBSTITUTE;


         ELSIF p_tasknum= TASK_CATEGORIES_SOURCING THEN

            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_CATEGORIES_SOURCING');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_CATEGORIES_SOURCING;

         ELSIF p_tasknum= TASK_DEPT_RESOURCES THEN

            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_DEPT_RESOURCES');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_DEPT_RESOURCES;
            LOAD_RESOURCE_SETUPS;
            LOAD_SETUP_TRANSITIONS;
         ELSIF p_tasknum= TASK_MATERIAL_SUPPLY THEN

            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_MATERIAL_SUPPLY');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_MATERIAL_SUPPLY(p_batch_id);

         ELSIF p_tasknum= TASK_MATERIAL_DEMAND THEN

            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_MATERIAL_DEMAND');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_MATERIAL_DEMAND(p_batch_id);

         ELSIF p_tasknum= TASK_BOM_ROUTING THEN

            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_BOM_ROUTING');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_BOM_ROUTING;

         ELSIF p_tasknum= TASK_RESOURCE_DEMAND THEN

            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_RESOURCE_DEMAND');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_RESOURCE_DEMAND;

         ELSIF p_tasknum= TASK_SO_DEMAND  THEN

            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_SO_DEMAND');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_SO_DEMAND(p_batch_id);


         ELSIF p_tasknum= TASK_RESERVATION  THEN

            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_RESERVATION');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_RESERVATION;

         ELSIF p_tasknum= TASK_ITEM_CST  THEN

            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_ITEM_CST');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_ITEM_CST;

         ELSIF p_tasknum= TASK_LEVEL_VALUE  THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_LEVEL_VALUE');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_LEVEL_VALUE(p_batch_id);

         ELSIF p_tasknum= TASK_LEVEL_ASSOCIATION  THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_LEVEL_ASSOCIATION');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_LEVEL_ASSOCIATION(p_batch_id);

         ELSIF p_tasknum= TASK_BOOKING_DATA  THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_BOOKING_DATA');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_BOOKING_DATA(p_batch_id);

         ELSIF p_tasknum= TASK_SHIPMENT_DATA  THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_SHIPMENT_DATA');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_SHIPMENT_DATA(p_batch_id);

         ELSIF p_tasknum= TASK_MFG_FORECAST  THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_MFG_FORECAST');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_MFG_FORECAST(p_batch_id);

         ELSIF p_tasknum= TASK_PRICE_LIST  THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_PRICE_LIST');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_PRICE_LIST(p_batch_id);
/*
         ELSIF p_tasknum= TASK_ITEM_LIST_PRICE  THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_ITEM_LIST_PRICE');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_ITEM_LIST_PRICE(p_batch_id);
*/
         ELSIF p_tasknum= TASK_CS_DATA  THEN
           FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
           FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_CS_DATA');
           MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
           LOAD_CS_DATA(p_batch_id);

         ELSIF p_tasknum= TASK_CURR_CONV  THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_CURR_CONV');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_CURR_CONV(p_batch_id);

         ELSIF p_tasknum= TASK_DP_UOM_CONV  THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_UOM_CONV');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_UOM_CONV(p_batch_id);

         ELSIF p_tasknum= TASK_FISCAL_TIME THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_FISCAL_TIME');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_FISCAL_TIME;

        ELSIF p_tasknum= TASK_COMPOSITE_TIME THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_COMPOSITE_TIME');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_COMPOSITE_TIME;


         ELSIF p_tasknum= TASK_COMPANY_USERS THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'TASK_COMPANY_USERS');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_COMPANY_USER;

        ELSIF p_tasknum= TASK_CAL_ASSIGNMENTS THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_CAL_ASSIGNMENTS');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_CAL_ASSIGNMENTS;

         ELSIF p_tasknum= TASK_IRO THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_IRO_SUPPLY_DEMAND');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_IRO_SUPPLY_DEMAND;

          ELSIF p_tasknum= TASK_ERO THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_ERO_SUPPLY_DEMAND');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_ERO_SUPPLY_DEMAND;

        ELSIF p_tasknum= TASK_SALES_CHANNEL THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_SALES_CHNL');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_SALES_CHNL;

        ELSIF p_tasknum= TASK_FISCAL_CALENDAR THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_FISCAL');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_FISCAL;

        ELSIF p_tasknum= TASK_CMRO THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_TASK_START');
            FND_MESSAGE.SET_TOKEN('PROCEDURE', 'LOAD_CMRO');
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
            LOAD_CMRO;

        END IF;

   -- ======== If no EXCEPTION occurs, then returns with status = OK =========

         p_status := OK;

         FND_MESSAGE.SET_NAME('MSC', 'MSC_ELAPSED_TIME');
         FND_MESSAGE.SET_TOKEN('ELAPSED_TIME',
                     TO_CHAR(CEIL((SYSDATE- lv_task_start_time)*14400.0)/10));
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);

    EXCEPTION

         WHEN others THEN

   -- ============= Raise the EXCEPTION ==============

              ROLLBACK WORK TO SAVEPOINT ExecuteTask;

              MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,SQLERRM);

              RAISE;

   END EXECUTE_TASK;

-- ============ Load Procedures ==============================

  PROCEDURE LOAD_ITEM(p_batch_id NUMBER)
  IS
  BEGIN
    -- items
    IF v_item_enabled = SYS_YES and p_batch_id <> 0 THEN
      LOAD_ITEMS(p_batch_id);
    END IF;
  END LOAD_ITEM;

-- Product item substitute

  PROCEDURE LOAD_ITEM_SUBSTITUTE
  IS
  BEGIN
    -- items
    IF v_item_substitute_enabled = SYS_YES THEN
      LOAD_ITEM_SUBSTITUTES;
    END IF;
  END LOAD_ITEM_SUBSTITUTE;


  PROCEDURE LOAD_SUPPLIER_CAPACITY
  IS
  BEGIN
    -- supplier capacity
    IF v_sup_cap_enabled = SYS_YES THEN
      LOAD_SUPP_CAPACITY;
    END IF;
  END LOAD_SUPPLIER_CAPACITY;

  PROCEDURE LOAD_SAFETY_STOCK
  IS
  BEGIN
    -- safety stocks
    IF v_safety_stk_enabled = SYS_YES THEN
      LOAD_SAFETY_STOCKS;
    END IF;
  END LOAD_SAFETY_STOCK;

  PROCEDURE LOAD_CATEGORIES_SOURCING
  IS
  BEGIN
    -- categories
    IF v_item_cat_enabled = SYS_YES THEN
      LOAD_CATEGORY;
    END IF;
    -- Inter-org ship methods
     IF v_ship_mthd_enabled = SYS_YES THEN
       LOAD_SHIP_METHODS;
     END IF;

    -- sourcing
    IF v_sourcing_enabled = SYS_YES THEN
      LOAD_SOURCING_RULE;
      LOAD_REGIONS;
    END IF;
  END LOAD_CATEGORIES_SOURCING;

  PROCEDURE LOAD_DEPT_RESOURCES
  IS
  BEGIN
    -- dept and resources
    IF v_resources_enabled = SYS_YES THEN
      LOAD_DEPT_RES;
    END IF;
  END LOAD_DEPT_RESOURCES;

  PROCEDURE LOAD_MATERIAL_SUPPLY(p_batch_id NUMBER)
  IS
  BEGIN
    -- Material Supply ( PO, Intransit, On Hand, MPS, Requisitions)
    IF v_mat_sup_enabled = SYS_YES THEN
      LOAD_SUPPLY(p_batch_id);
    END IF;
  END LOAD_MATERIAL_SUPPLY;

  PROCEDURE LOAD_MATERIAL_DEMAND(p_batch_id NUMBER)
  IS
  BEGIN
    -- Material Demand (forecast amd MDS)
    IF v_mat_dmd_enabled = SYS_YES THEN
      LOAD_MDS_FORECAST (p_batch_id);
    END IF;
  END LOAD_MATERIAL_DEMAND;

  PROCEDURE LOAD_SO_DEMAND(p_batch_id NUMBER)
  IS
  BEGIN
    -- Material Demand (sales orders)
    IF v_mat_dmd_enabled = SYS_YES THEN
      LOAD_SALES_ORDER ( p_batch_id);
    END IF;
  END LOAD_SO_DEMAND;

 PROCEDURE LOAD_RESERVATION
 IS
 BEGIN
   -- Hard Reservations
    IF v_reserve_enabled = SYS_YES THEN
       LOAD_RESERVATIONS;
    END IF;
 END LOAD_RESERVATION ;

 PROCEDURE LOAD_COMPANY_USER
 IS
 BEGIN

    IF v_comp_users_enabled = SYS_YES THEN
      LOAD_COMPANY_USERS;
    END IF;
 END LOAD_COMPANY_USER;

  PROCEDURE LOAD_BOM_ROUTING
  IS
  BEGIN
    -- bom
    IF v_bom_enabled = SYS_YES THEN
      LOAD_BOM;
    END IF;
    -- routing
    IF v_rtg_enabled = SYS_YES THEN
      LOAD_ROUTING;
    END IF;
    -- process effectivity
    IF v_rtg_enabled = SYS_YES OR v_bom_enabled = SYS_YES  THEN
      LOAD_PROCESS_EFFECTIVITY;
    END IF;
  END LOAD_BOM_ROUTING;

  PROCEDURE LOAD_RESOURCE_DEMAND
  IS

  BEGIN
    -- material supply WO
    IF v_mat_sup_enabled = SYS_YES THEN
      LOAD_WO_SUPPLY;
    END IF;
    -- material demand WO
    IF v_mat_dmd_enabled = SYS_YES THEN
      LOAD_WIP_DEMAND;
    END IF;
    -- resource demand
    IF v_res_dmd_enabled = SYS_YES THEN
      LOAD_RES_DEMAND;
    END IF;
    -- osfm job details
    IF v_mat_sup_enabled = SYS_YES THEN
       LOAD_JOB_DETAILS;
    END IF;
  END LOAD_RESOURCE_DEMAND;

  PROCEDURE LOAD_ITEM_CST
  IS
  BEGIN
    LOAD_ITEM_CUSTOMERS;
  END LOAD_ITEM_CST;

  PROCEDURE LOAD_CAL_ASSIGNMENTS
  IS
  BEGIN
    -- calendar assignment
    IF v_cal_assignment_enabled = SYS_YES THEN
      LOAD_CALENDAR_ASSIGNMENTS;
    END IF;
  END LOAD_CAL_ASSIGNMENTS;

  PROCEDURE LOAD_IRO_SUPPLY_DEMAND
  IS
  BEGIN
         IF v_iro_enabled = SYS_YES THEN
           MSC_CL_RPO_PRE_PROCESS.LOAD_IRO_SUPPLY;
           MSC_CL_RPO_PRE_PROCESS.LOAD_IRO_DEMAND;
         END IF;
  END LOAD_IRO_SUPPLY_DEMAND;

  PROCEDURE LOAD_ERO_SUPPLY_DEMAND
  IS
  BEGIN
         IF v_ero_enabled = SYS_YES THEN
           MSC_CL_RPO_PRE_PROCESS.LOAD_ERO_SUPPLY;
           MSC_CL_RPO_PRE_PROCESS.LOAD_ERO_DEMAND;
         END IF;
  END LOAD_ERO_SUPPLY_DEMAND;

  PROCEDURE LOAD_SALES_CHNL
  IS
  BEGIN
			   IF v_sales_channel_enabled = SYS_YES THEN
			      LOAD_SALES_CHANNEL;
			   END IF;
  END LOAD_SALES_CHNL;

  PROCEDURE LOAD_FISCAL
  IS
  BEGIN
			    IF v_fiscal_calendar_enabled = SYS_YES THEN
			      LOAD_FISCAL_CALENDAR;
			    END IF;
  END LOAD_FISCAL;

  PROCEDURE LOAD_CMRO
  IS
  BEGIN
			    IF v_CMRO_enabled = SYS_YES THEN

			      LOAD_VISITS;
			      LOAD_MILESTONES;
			      LOAD_WBS;
			      LOAD_WOATTRIBUTES;
			      LOAD_WO_TASK_HIERARCHY;
			      LOAD_WO_OPERATION_REL;
			    END IF;
  END LOAD_CMRO;

---------------------- Added for the bug fix 2191021 -------------------------------------
  PROCEDURE LOAD_ITEM_ABC_CLASSES
  IS

   TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
   lb_rowid_abc      RowidTab;

   lv_sql_stmt           VARCHAR2(5000);
   lv_return             NUMBER;
   lv_error_text         VARCHAR2(250);

   CURSOR c1 IS
    SELECT max(ROWID)
    FROM   msc_st_system_items
    WHERE  ABC_CLASS_ID IS NULL
    AND    ABC_CLASS_NAME IS NOT NULL
    AND    process_flag     = G_VALID
    AND    sr_instance_code = v_instance_code
    GROUP BY ABC_CLASS_NAME, organization_code, sr_instance_code, company_name;

  BEGIN
   IF(v_install_msc) THEN
    -- update ABC_CLASS_ID where it exists in the planning system
     v_sql_stmt := 1;
     lv_sql_stmt :=
      ' UPDATE  msc_st_system_items msi'
      ||' SET   abc_class_id        = (SELECT local_id from MSC_LOCAL_ID_MISC mac '
      ||'                              WHERE  mac.char1 = msi.sr_instance_code'
      ||'                              AND    mac.char3  = msi.organization_code  '
      ||'                              AND    mac.char4 = msi.abc_class_name '
      ||'                              AND    mac.ENTITY_NAME = ''ABC_CLASS_ID'''
      ||'                              AND    NVL(mac.char2,'||''''||NULL_CHAR||''''||') '
      ||'                                     =    NVL(msi.company_name,'||''''||NULL_CHAR||''''||')) '
      ||' WHERE process_flag     = '||G_VALID
      ||' AND   sr_instance_code = :v_instance_code'
      ||' AND   abc_class_name is not null ';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code;

     OPEN c1;
     FETCH c1 BULK COLLECT INTO lb_rowid_abc ;

     IF c1%ROWCOUNT > 0  THEN

        FORALL j IN lb_rowid_abc.FIRST..lb_rowid_abc.LAST
        UPDATE msc_st_system_items msi
        SET    abc_class_id   = MSC_ST_ABC_CLASS_ID_S.nextval
        WHERE  rowid   = lb_rowid_abc(j);


       FORALL j IN lb_rowid_abc.FIRST..lb_rowid_abc.LAST
       INSERT INTO  msc_local_id_misc
       (local_id,
       st_transaction_id,
       instance_id,
       entity_name,
       data_source_type,
       char1,
       char2,
       char3,
       char4,
       SOURCE_ABC_CLASS_ID,
       last_update_date,
       last_updated_by,
       creation_date,
       created_by  )
       SELECT
       abc_class_id,
       st_transaction_id,
       v_instance_id,
       'ABC_CLASS_ID',
       data_source_type,
       sr_instance_code,
       company_name,
       organization_code,
       ABC_CLASS_NAME,
       SOURCE_ABC_CLASS_ID,
       v_current_date,
       v_current_user,
       v_current_date,
       v_current_user
      FROM msc_st_system_items
      WHERE  rowid            = lb_rowid_abc(j);

     END IF;
     CLOSE c1;

     -- update ABC_CLASS_ID for ABC_CLASS_NAME for which we have just populated the local id
     v_sql_stmt := 2;
     lv_sql_stmt :=
      ' UPDATE  msc_st_system_items msi'
      ||' SET   abc_class_id        = (SELECT local_id from MSC_LOCAL_ID_MISC mac '
      ||'                              WHERE  mac.char1 = msi.sr_instance_code'
      ||'                              AND    mac.char3  = msi.organization_code  '
      ||'                              AND    mac.char4 = msi.abc_class_name '
      ||'                              AND    mac.ENTITY_NAME = ''ABC_CLASS_ID'''
      ||'                              AND    NVL(mac.char2,'||''''||NULL_CHAR||''''||') '
      ||'                                     =    NVL(msi.company_name,'||''''||NULL_CHAR||''''||')) '
      ||' WHERE process_flag     = '||G_VALID
      ||' AND   sr_instance_code = :v_instance_code'
      ||' AND   abc_class_id  IS NULL'
      ||' AND   abc_class_name is not null ';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code;

     v_sql_stmt := 3;
     lv_sql_stmt :=
       ' INSERT INTO MSC_ABC_CLASSES '
       ||' ( ABC_CLASS_ID, '
       ||' ABC_CLASS_NAME, '
       ||' ORGANIZATION_ID, '
       ||' SR_INSTANCE_ID, '
       ||' LAST_UPDATE_DATE, '
       ||' LAST_UPDATED_BY, '
       ||' CREATION_DATE, '
       ||' CREATED_BY) '
       ||' SELECT distinct '
       ||' msi.abc_class_id,'
       ||' msi.abc_class_name,'
       ||' msi.organization_id,'
       ||  v_instance_id ||','
       ||' last_update_date,'
       ||' last_updated_by,'
       ||' creation_date,'
       ||' created_by '
       ||' FROM   MSC_ST_SYSTEM_ITEMS msi'
       ||' WHERE  sr_instance_code = :v_instance_code'
       ||' AND    process_flag    = '||G_VALID
       ||' AND    msi.abc_class_id is not null'
       ||' AND    msi.abc_class_name is not null'
       ||' AND    NOT EXISTS'
       ||'        ( SELECT 1 FROM MSC_ABC_CLASSES abc'
       ||'        WHERE  abc.abc_class_id = msi.abc_class_id'
       ||'        AND    abc.abc_class_name = msi.abc_class_name'
       ||'        AND    abc.organization_id = msi.organization_id'
       ||'        AND    abc.sr_instance_id = ' ||v_instance_id ||')';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);


      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code;

  /* -- Set the process flag as Valid and populate instance_id
    lv_return :=
    MSC_ST_UTIL.SET_PROCESS_FLAG(p_table_name   => 'MSC_ST_SYSTEM_ITEMS',
                               p_instance_id    => v_instance_id,
                               p_instance_code  => v_instance_code,
                               p_process_flag   => G_VALID,
                               p_error_text     => lv_error_text,
                               p_debug          => v_debug);

      IF lv_return <> 0 THEN
        msc_st_util.log_message(lv_error_text);
      END IF;
  */

  lv_sql_stmt :=
    'UPDATE msc_st_system_items msi'
    ||' SET product_family_id = (SELECT local_id'
    ||'     FROM   msc_local_id_item mli'
    ||'     WHERE  mli.char1         = msi.sr_instance_code '
    ||'     AND    NVL(mli.char2,       '||''''||NULL_CHAR||''''||')='
    ||'            NVL(msi.company_name,'||''''||NULL_CHAR||''''||')'
    ||'     AND    mli.char4         = msi.product_family_item_name'
    ||'     AND    mli.entity_name   = ''SR_INVENTORY_ITEM_ID'' '
    ||'     AND    mli.instance_id   = :v_instance_id'
    ||'     AND    rownum            < 2)'
    ||' WHERE  sr_instance_code      = :v_instance_code'
    ||' AND    product_family_item_name is not null '
    ||' AND    process_flag          = '||G_VALID;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING      v_instance_id,
                       v_instance_code;

   lv_sql_stmt :=
    'UPDATE msc_st_system_items msi'
    ||' SET        BASE_ITEM_ID = (SELECT local_id'
    ||'     FROM   msc_local_id_item mli'
    ||'     WHERE  mli.char1         = msi.sr_instance_code '
    ||'     AND    NVL(mli.char2,       '||''''||NULL_CHAR||''''||')='
    ||'            NVL(msi.company_name,'||''''||NULL_CHAR||''''||')'
    ||'     AND    mli.char4         = msi.BASE_ITEM_NAME'
    ||'     AND    mli.entity_name   = ''SR_INVENTORY_ITEM_ID'' '
    ||'     AND    mli.instance_id   = :v_instance_id'
    ||'     AND    rownum            < 2)'
    ||' WHERE  sr_instance_code      = :v_instance_code'
    ||' AND    base_item_name is not null '
    ||' AND    process_flag          = '||G_VALID;


         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

    EXECUTE IMMEDIATE lv_sql_stmt
            USING      v_instance_id,
                       v_instance_code;


  COMMIT;

  END IF; --v_install_msc

 EXCEPTION
  WHEN OTHERS THEN
    MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,substr('MSC_CL_PRE_PROCESS.LOAD_ITEM_ABC_CLASSES'||SQLERRM,1,240));

  END LOAD_ITEM_ABC_CLASSES;
 ---------------------- Till here added for the bug fix 2191021 -------------------------------------


  ----=========DP specific local procdure=======-------
  PROCEDURE LOAD_LEVEL_VALUE(p_batch_id NUMBER)
  IS
  lv_sql_stmt  VARCHAR2(4000);
  BEGIN
   IF (v_level_value_enabled = SYS_YES) AND (v_install_msd) THEN
       lv_sql_stmt :=  ' DECLARE errbuf varchar2(250);'
                       ||' retcode  number ;'
                       ||' BEGIN '
                       ||' MSD_CL_PRE_PROCESS.LOAD_LEVEL_VALUE'
                       ||' (ERRBUF         =>  errbuf ,'
                       ||'  RETCODE        =>  retcode ,'
                       ||'  p_instance_code => :v_instance_code,'
                       ||'  p_instance_id   => :v_instance_id,'
                       ||'  p_batch_id      => :lv_batch_id);'
                       ||'  IF ( retcode = '||G_WARNING||') THEN'
                       ||'  MSC_CL_PRE_PROCESS.v_flag := '||SYS_YES||';'
                       ||'  END IF;'
                       ||'  END ;';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
        EXECUTE IMMEDIATE lv_sql_stmt
                USING     v_instance_code,
                          v_instance_id,
                          p_batch_id ;
    END IF ;

   EXCEPTION
    WHEN OTHERS THEN
     MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,substr('MSC_CL_PRE_PROCESS.LOAD_LEVEL_VALUE'||SQLERRM,1,240));

   END ;

  PROCEDURE LOAD_LEVEL_ASSOCIATION(p_batch_id NUMBER)
  IS
  lv_sql_stmt  VARCHAR2(4000);
  BEGIN
   IF (v_level_assoc_enabled = SYS_YES) AND (v_install_msd) THEN
       lv_sql_stmt :=  ' DECLARE errbuf varchar2(250);'
                       ||' retcode  number ;'
                       ||' BEGIN '
                       ||' MSD_CL_PRE_PROCESS.LOAD_LEVEL_ASSOC'
                       ||' (ERRBUF         =>  errbuf ,'
                       ||'  RETCODE        =>  retcode ,'
                       ||'  p_instance_code => :v_instance_code,'
                       ||'  p_instance_id   => :v_instance_id,'
                       ||'  p_batch_id      => :lv_batch_id);'
                       ||'  IF ( retcode = '||G_WARNING||') THEN'
                       ||'  MSC_CL_PRE_PROCESS.v_flag := '||SYS_YES||';'
                       ||'  END IF;'
                       ||'  END ;';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
        EXECUTE IMMEDIATE lv_sql_stmt
                USING     v_instance_code,
                          v_instance_id,
                          p_batch_id ;
    END IF ;

   EXCEPTION
    WHEN OTHERS THEN
     MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,substr('MSC_CL_PRE_PROCESS.LOAD_LEVEL_ASSOCIATION'||SQLERRM,1,240));

   END ;

   PROCEDURE  LOAD_BOOKING_DATA (p_batch_id   NUMBER )
   IS
   lv_sql_stmt  VARCHAR2(4000);
   BEGIN
   IF (v_booking_enabled = SYS_YES) AND (v_install_msd) THEN
       lv_sql_stmt :=  ' DECLARE errbuf varchar2(250);'
                       ||' retcode  number ;'
                       ||' BEGIN '
                       ||' MSD_CL_PRE_PROCESS.LOAD_BOOKING_DATA'
                       ||' (ERRBUF         =>  errbuf ,'
                       ||'  RETCODE        =>  retcode ,'
                       ||'  p_instance_code => :v_instance_code,'
                       ||'  p_instance_id   => :v_instance_id,'
                       ||'  p_batch_id      => :lv_batch_id);'
                       ||'  IF ( retcode = '||G_WARNING||') THEN'
                       ||'  MSC_CL_PRE_PROCESS.v_flag := '||SYS_YES||';'
                       ||'  END IF;'
                       ||'  END ;';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
        EXECUTE IMMEDIATE lv_sql_stmt
                USING     v_instance_code,
                          v_instance_id,
                          p_batch_id ;
    END IF ;

   EXCEPTION
    WHEN OTHERS THEN
     MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,substr('MSC_CL_PRE_PROCESS.LOAD_BOOKING_DATA'||SQLERRM,1,240));

   END ;

   PROCEDURE  LOAD_SHIPMENT_DATA (p_batch_id   NUMBER )
   IS
   lv_sql_stmt  VARCHAR2(4000);
   BEGIN
   IF (v_shipment_enabled = SYS_YES) AND (v_install_msd) THEN
       lv_sql_stmt :=  ' DECLARE errbuf varchar2(250);'
                       ||' retcode  number ;'
                       ||' BEGIN '
                       ||' MSD_CL_PRE_PROCESS.LOAD_SHIPMENT_DATA'
                       ||' (ERRBUF         =>  errbuf ,'
                       ||'  RETCODE        =>  retcode ,'
                       ||'  p_instance_code => :v_instance_code,'
                       ||'  p_instance_id   => :v_instance_id,'
                       ||'  p_batch_id      => :lv_batch_id);'
                       ||'  IF ( retcode = '||G_WARNING||') THEN'
                       ||'  MSC_CL_PRE_PROCESS.v_flag := '||SYS_YES||';'
                       ||'  END IF;'
                       ||'  END ;';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
        EXECUTE IMMEDIATE lv_sql_stmt
                USING     v_instance_code,
                          v_instance_id,
                          p_batch_id ;
    END IF ;

   EXCEPTION
    WHEN OTHERS THEN
     MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,substr('MSC_CL_PRE_PROCESS.LOAD_SHIPMENT_DATA'||SQLERRM,1,240));

   END ;

   PROCEDURE  LOAD_MFG_FORECAST (p_batch_id   NUMBER )
   IS
   lv_sql_stmt  VARCHAR2(4000);
   BEGIN
   IF (v_mfg_fct_enabled = SYS_YES) AND (v_install_msd) THEN
       lv_sql_stmt :=  ' DECLARE errbuf varchar2(250);'
                       ||' retcode  number ;'
                       ||' BEGIN '
                       ||' MSD_CL_PRE_PROCESS.LOAD_MFG_FORECAST'
                       ||' (ERRBUF         =>  errbuf ,'
                       ||'  RETCODE        =>  retcode ,'
                       ||'  p_instance_code => :v_instance_code,'
                       ||'  p_instance_id   => :v_instance_id,'
                       ||'  p_batch_id      => :lv_batch_id);'
                       ||'  IF ( retcode = '||G_WARNING||') THEN'
                       ||'  MSC_CL_PRE_PROCESS.v_flag := '||SYS_YES||';'
                       ||'  END IF;'
                       ||'  END ;';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
        EXECUTE IMMEDIATE lv_sql_stmt
                USING     v_instance_code,
                          v_instance_id,
                          p_batch_id ;
    END IF ;

   EXCEPTION
    WHEN OTHERS THEN
     MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,substr('MSC_CL_PRE_PROCESS.LOAD_MFG_FORECAST'||SQLERRM,1,240));

   END ;

  PROCEDURE  LOAD_PRICE_LIST (p_batch_id   NUMBER )
   IS
   lv_sql_stmt  VARCHAR2(4000);
   BEGIN
   IF (v_list_price_enabled = SYS_YES) AND (v_install_msd) THEN
       lv_sql_stmt :=  ' DECLARE errbuf varchar2(250);'
                       ||' retcode  number ;'
                       ||' BEGIN '
                       ||' MSD_CL_PRE_PROCESS.LOAD_PRICE_LIST'
                       ||' (ERRBUF         =>  errbuf ,'
                       ||'  RETCODE        =>  retcode ,'
                       ||'  p_instance_code => :v_instance_code,'
                       ||'  p_instance_id   => :v_instance_id,'
                       ||'  p_batch_id      => :lv_batch_id);'
                       ||'  IF ( retcode = '||G_WARNING||') THEN'
                       ||'  MSC_CL_PRE_PROCESS.v_flag := '||SYS_YES||';'
                       ||'  END IF;'
                       ||'  END ;';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
        EXECUTE IMMEDIATE lv_sql_stmt
                USING     v_instance_code,
                          v_instance_id,
                          p_batch_id ;
    END IF ;

   EXCEPTION
    WHEN OTHERS THEN
     MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,substr('MSC_CL_PRE_PROCESS.LOAD_PRICE_LIST'||SQLERRM,1,240));

   END ;
/*
  PROCEDURE  LOAD_ITEM_LIST_PRICE(p_batch_id   NUMBER )
   IS
   lv_sql_stmt  VARCHAR2(4000);
   BEGIN
   IF (v_list_price_enabled = SYS_YES) AND (v_install_msd) THEN
       lv_sql_stmt :=  ' DECLARE errbuf varchar2(250);'
                       ||' retcode  number ;'
                       ||' BEGIN '
                       ||' MSD_CL_PRE_PROCESS.LOAD_ITEM_LIST_PRICE'
                       ||' (ERRBUF         =>  errbuf ,'
                       ||'  RETCODE        =>  retcode ,'
                       ||'  p_instance_code => :v_instance_code,'
                       ||'  p_instance_id   => :v_instance_id,'
                       ||'  p_batch_id      => :lv_batch_id);'
                       ||'  END ;';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
        EXECUTE IMMEDIATE lv_sql_stmt
                USING     v_instance_code,
                          v_instance_id,
                          p_batch_id ;
    END IF ;

   EXCEPTION
    WHEN OTHERS THEN
     msc_st_util.log_message(substr('MSC_CL_PRE_PROCESS.LOAD_ITEM_LIST_PRICE'||SQLERRM,1,240));

   END ;
*/

  PROCEDURE  LOAD_CS_DATA (p_batch_id   NUMBER )
   IS
   lv_sql_stmt  VARCHAR2(4000);
   BEGIN
   IF (v_cs_data_enabled = SYS_YES) AND (v_install_msd) THEN
       lv_sql_stmt :=  ' DECLARE errbuf varchar2(250);'
                       ||' retcode  number ;'
                       ||' BEGIN '
                       ||' MSD_CL_PRE_PROCESS.LOAD_CS_DATA'
                       ||' (ERRBUF         =>  errbuf ,'
                       ||'  RETCODE        =>  retcode ,'
                       ||'  p_instance_code => :v_instance_code,'
                       ||'  p_instance_id   => :v_instance_id,'
                       ||'  p_batch_id      => :lv_batch_id);'
                       ||'  IF ( retcode = '||G_WARNING||') THEN'
                       ||'  MSC_CL_PRE_PROCESS.v_flag := '||SYS_YES||';'
                       ||'  END IF;'
                       ||'  END ;';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);
        EXECUTE IMMEDIATE lv_sql_stmt
                USING     v_instance_code,
                          v_instance_id,
                          p_batch_id ;
    END IF ;

   EXCEPTION
    WHEN OTHERS THEN
     MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,substr('MSC_CL_PRE_PROCESS.LOAD_CS_DATA'||SQLERRM,1,240));

  END ;

  PROCEDURE  LOAD_CURR_CONV (p_batch_id   NUMBER )
   IS
   lv_sql_stmt  VARCHAR2(4000);
   BEGIN
   IF (v_curr_conv_enabled = SYS_YES) AND (v_install_msd) THEN
       lv_sql_stmt :=  ' DECLARE errbuf varchar2(250);'
                       ||' retcode  number ;'
                       ||' BEGIN '
                       ||' MSD_CL_PRE_PROCESS.LOAD_CURRENCY_CONV'
                       ||' (ERRBUF         =>  errbuf ,'
                       ||'  RETCODE        =>  retcode ,'
                       ||'  p_instance_code => :v_instance_code,'
                       ||'  p_instance_id   => :v_instance_id,'
                       ||'  p_batch_id      => :lv_batch_id);'
                       ||'  IF ( retcode = '||G_WARNING||') THEN'
                       ||'  MSC_CL_PRE_PROCESS.v_flag := '||SYS_YES||';'
                       ||'  END IF;'
                       ||'  END ;';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

        EXECUTE IMMEDIATE lv_sql_stmt
                USING     v_instance_code,
                          v_instance_id,
                          p_batch_id ;
    END IF ;

   EXCEPTION
    WHEN OTHERS THEN
     MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,substr('MSC_CL_PRE_PROCESS.LOAD_CURR_CONV'||SQLERRM,1,240));

   END ;

  PROCEDURE  LOAD_UOM_CONV (p_batch_id   NUMBER )
  IS
   lv_sql_stmt  VARCHAR2(4000);
   BEGIN
   IF (v_uom_conv_enabled = SYS_YES) AND (v_install_msd) THEN
       lv_sql_stmt :=  ' DECLARE errbuf varchar2(250);'
                       ||' retcode  number ;'
                       ||' BEGIN '
                       ||' MSD_CL_PRE_PROCESS.LOAD_UOM_CONV'
                       ||' (ERRBUF         =>  errbuf ,'
                       ||'  RETCODE        =>  retcode ,'
                       ||'  p_instance_code => :v_instance_code,'
                       ||'  p_instance_id   => :v_instance_id,'
                       ||'  p_batch_id      => :lv_batch_id);'
                       ||'  IF ( retcode = '||G_WARNING||') THEN'
                       ||'  MSC_CL_PRE_PROCESS.v_flag := '||SYS_YES||';'
                       ||'  END IF;'
                       ||'  END ;';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

        EXECUTE IMMEDIATE lv_sql_stmt
                USING     v_instance_code,
                          v_instance_id,
                          p_batch_id ;
    END IF ;

   EXCEPTION
    WHEN OTHERS THEN
     MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,substr('MSC_CL_PRE_PROCESS.LOAD_UOM_CONV'||SQLERRM,1,240));

   END ;

  PROCEDURE LOAD_FISCAL_TIME
  IS
  lv_sql_stmt  VARCHAR2(4000);
   BEGIN
    IF (v_fiscal_cal_enabled = SYS_YES ) AND (v_install_msd) THEN
       lv_sql_stmt :=  ' DECLARE errbuf varchar2(250);'
                       ||' retcode  number ;'
                       ||' BEGIN '
                       ||' MSD_CL_PRE_PROCESS.LOAD_FISCAL_TIME'
                       ||' (ERRBUF         =>  errbuf ,'
                       ||'  RETCODE        =>  retcode ,'
                       ||'  p_instance_code => :v_instance_code,'
                       ||'  p_instance_id   => :v_instance_id );'
                       ||'  IF ( retcode = '||G_WARNING||') THEN'
                       ||'  MSC_CL_PRE_PROCESS.v_flag := '||SYS_YES||';'
                       ||'  END IF;'
                       ||'  END ;';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

        EXECUTE IMMEDIATE lv_sql_stmt
                USING     v_instance_code,
                          v_instance_id ;
    END IF ;

   EXCEPTION
    WHEN OTHERS THEN
     MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,substr('MSC_CL_PRE_PROCESS.LOAD_FISCAL_TIME'||SQLERRM,1,240));

   END ;


PROCEDURE LOAD_COMPOSITE_TIME
  IS
  lv_sql_stmt  VARCHAR2(4000);
   BEGIN
    IF (v_comp_cal_enabled = SYS_YES ) AND (v_install_msd) THEN
       lv_sql_stmt :=  ' DECLARE errbuf varchar2(250);'
                       ||' retcode  number ;'
                       ||' BEGIN '
                       ||' MSD_CL_PRE_PROCESS.LOAD_COMPOSITE_TIME'
                       ||' (ERRBUF         =>  errbuf ,'
                       ||'  RETCODE        =>  retcode ,'
                       ||'  p_instance_code => :v_instance_code,'
                       ||'  p_instance_id   => :v_instance_id );'
                       ||'  IF ( retcode = '||G_WARNING||') THEN'
                       ||'  MSC_CL_PRE_PROCESS.v_flag := '||SYS_YES||';'
                       ||'  END IF;'
                       ||'  END ;';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

        EXECUTE IMMEDIATE lv_sql_stmt
                USING     v_instance_code,
                          v_instance_id ;
    END IF ;

   EXCEPTION
    WHEN OTHERS THEN
     MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,substr('MSC_CL_PRE_PROCESS.LOAD_COMPOSITE_TIME'||SQLERRM,1,240));

   END ;


  PROCEDURE LOAD_SETUP_PARAMETER
  IS
  lv_sql_stmt  VARCHAR2(4000);
   BEGIN
    IF (v_setup_enabled = SYS_YES ) AND (v_install_msd) THEN
       lv_sql_stmt :=  ' DECLARE errbuf varchar2(250);'
                       ||' retcode  number ;'
                       ||' BEGIN '
                       ||' MSD_CL_PRE_PROCESS.LOAD_SETUP_PARAMETER'
                       ||' (ERRBUF         =>  errbuf ,'
                       ||'  RETCODE        =>  retcode ,'
                       ||'  p_instance_code => :v_instance_code,'
                       ||'  p_instance_id   => :v_instance_id );'
                       ||'  IF ( retcode = '||G_WARNING||') THEN'
                       ||'  MSC_CL_PRE_PROCESS.v_flag := '||SYS_YES||';'
                       ||'  END IF;'
                       ||'  END ;';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

        EXECUTE IMMEDIATE lv_sql_stmt
                USING     v_instance_code,
                          v_instance_id ;
    END IF ;

   EXCEPTION
    WHEN OTHERS THEN
     MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,substr('MSC_CL_PRE_PROCESS.LOAD_SETUP_PARAMETER'||SQLERRM,1,240));

   END ;

  PROCEDURE LOAD_MFG_TIME
  IS
  lv_sql_stmt VARCHAR2(4000);

   CURSOR c1 IS
   SELECT calendar_code
   FROM   msc_st_calendars
   WHERE  process_flag    = G_VALID
   AND    sr_instance_id  = v_instance_id;

   BEGIN
      IF(v_install_msd) THEN
      FOR rec1 IN c1
       LOOP

        lv_sql_stmt :=  ' DECLARE errbuf varchar2(250);'
                       ||' retcode  number ;'
                       ||' BEGIN '
                       ||' MSD_CL_PRE_PROCESS.LOAD_MFG_TIME'
                       ||' (ERRBUF         =>  errbuf ,'
                       ||'  RETCODE        =>  retcode ,'
                       ||'  p_calendar_code => :v_calendar_code,'
                       ||'  p_instance_id   => :v_instance_id );'
                       ||'  IF ( retcode = '||G_WARNING||') THEN '
                       ||' update msc_apps_instances'
                       ||' set dbs_ver = '||SYS_YES
                       ||' where instance_id='||v_instance_id||';'
                       ||'  END IF;'
                       ||'  END ;';


          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

         EXECUTE IMMEDIATE lv_sql_stmt
                USING     rec1.calendar_code,
                          v_instance_id ;
        END LOOP ;
        END IF ; -- v_install_msd

   EXCEPTION
    WHEN OTHERS THEN
     MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,substr('MSC_CL_PRE_PROCESS.LOAD_MFG_TIME'||SQLERRM,1,240));

   END ;

   -- Load Profiles

   PROCEDURE LOAD_PROFILES IS

   lv_bom_explosion     NUMBER;
   lv_lbj_copy_routing  NUMBER;
   lv_error_text        VARCHAR2(250);
   lv_where_str         VARCHAR2(5000);
   lv_message_text      VARCHAR2(5000);
   lv_return            NUMBER;
   lv_transaction_id    NUMBER;
   lv_sql_stmt          VARCHAR2(5000);

   ex_logging_err     EXCEPTION;



    BEGIN

    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_XML',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is XML

    UPDATE  msc_st_apps_instances mai1
    SET     process_flag = G_ERROR_FLG,
            error_text   = lv_message_text
    WHERE   message_id <  (SELECT MAX(message_id)
                           FROM   msc_st_apps_instances mai2
                           WHERE  mai2.sr_instance_code  = mai1.sr_instance_code
                           AND    mai2.process_flag      = G_IN_PROCESS
                           AND    NVL(mai2.message_id,NULL_VALUE) <>NULL_VALUE)
    AND     mai1.process_flag             = G_IN_PROCESS
    AND     mai1.sr_instance_code         = v_instance_code
    AND     NVL(mai1.message_id,NULL_VALUE) <> NULL_VALUE;


    lv_return := MSC_ST_UTIL.GET_ERROR_MESSAGE
                 (p_app_short_name    => 'MSC',
                  p_error_code        => 'MSC_PP_DUP_REC_FOR_BATCH_LOAD',
                  p_message_text      => lv_message_text,
                  p_error_text        => lv_error_text);

    IF lv_return <> 0 THEN
      RAISE ex_logging_err;
    END IF;

    --Duplicate records check for the records whose source is other than XML
    --Different SQL is used because in XML we can identify the latest records
    --whereas in batch load we cannot.

    UPDATE  msc_st_apps_instances mai1
    SET     process_flag = G_ERROR_FLG,
            error_text   = lv_message_text
    WHERE   EXISTS( SELECT 1
                    FROM   msc_st_apps_instances mai2
                    WHERE  mai2.sr_instance_code  = mai1.sr_instance_code
                    AND    mai2.process_flag      = G_IN_PROCESS
                    AND    NVL(mai2.message_id,NULL_VALUE) = NULL_VALUE
                    GROUP BY sr_instance_code HAVING COUNT(*) > 1)
    AND     mai1.process_flag             = G_IN_PROCESS
    AND     mai1.sr_instance_code            = v_instance_code
    AND     NVL(mai1.message_id,NULL_VALUE) = NULL_VALUE;


    SELECT msc_st_apps_instances_s.NEXTVAL
      INTO   lv_transaction_id
      FROM   dual;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Refresh ID: '||v_refresh_id);


      --Update the transaction_id and the who columns

      lv_sql_stmt :=
      'UPDATE   msc_st_apps_instances '
      ||' SET   st_transaction_id = :lv_transaction_id,'
      ||'       refresh_id        = '||v_refresh_id ||','
      ||'       last_update_date  = :v_current_date,'
      ||'       last_updated_by   = :v_current_user,'
      ||'       creation_date     = :v_current_date,'
      ||'       created_by        = :v_current_user'
      ||' WHERE sr_instance_code  = :v_instance_code';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     lv_transaction_id,
                        v_current_date,
                        v_current_user,
                        v_current_date,
                        v_current_user,
                        v_instance_code;


    lv_sql_stmt :=
      'UPDATE   msc_st_apps_instances '
      ||' SET  wsm_create_lbj_copy_routing = 2'
      ||' WHERE sr_instance_code  = :v_instance_code'
      ||' AND   process_flag      = '||G_IN_PROCESS
      ||' AND   wsm_create_lbj_copy_routing NOT IN (1,2)';


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING v_instance_code;

   -- set the message
   lv_return :=  MSC_ST_UTIL.GET_ERROR_MESSAGE
                      (p_app_short_name    => 'MSC',
                       p_error_code        => 'MSC_PP_INVALID_VALUE',
                       p_message_text      => lv_message_text,
                       p_error_text        => lv_error_text,
                       p_token1            => 'COLUMN_NAME',
                       p_token_value1      => 'MSC_ORG_FOR_BOM_EXPLOSION');

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;

   -- derive validation_org_id

    lv_sql_stmt :=
    'UPDATE msc_st_apps_instances mai'
    ||' SET validation_org_id'
    ||' = (SELECT local_id'
    ||' FROM msc_local_id_setup '
    ||' WHERE  char1            = sr_instance_code'
    ||' AND    char3            = msc_org_for_bom_explosion'
    ||' AND    number1          = '|| G_ORGANIZATION
    ||' AND    entity_name      = ''SR_TP_ID'' )'
    ||' WHERE  sr_instance_code = :v_instance_code'
    ||' AND    NVL(validation_org_id,'||NULL_VALUE||') = '||NULL_VALUE
    ||' AND    process_flag     = '||G_IN_PROCESS;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code;

    -- error out the record if validation_org_id is not a valid organization_id

   lv_sql_stmt :=
      'UPDATE    msc_st_apps_instances mai'
      ||' SET    process_flag  = '||G_ERROR_FLG||','
      ||'        error_text    = '||''''||lv_message_text||''''
      ||' WHERE NVL(validation_org_id,'||NULL_VALUE||') = '||NULL_VALUE
      ||' AND   NVL(msc_org_for_bom_explosion,'||''''||NULL_CHAR||''''||')'
      ||'       <> '||''''||NULL_CHAR||''''
      ||' AND   sr_instance_code    = :v_instance_code'
      ||' AND   process_flag        = '||G_IN_PROCESS ;


        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

      EXECUTE IMMEDIATE lv_sql_stmt
              USING     v_instance_code;

   lv_return := MSC_ST_UTIL.SET_PROCESS_FLAG
                     (p_table_name     => 'MSC_ST_APPS_INSTANCES',
                      p_instance_id    => v_instance_id,
                      p_instance_code  => v_instance_code,
                      p_process_flag   => G_VALID,
                      p_debug          => v_debug,
                      p_error_text     => lv_error_text);

      IF lv_return <> 0 THEN
        RAISE ex_logging_err;
      END IF;


    lv_sql_stmt :=
    'UPDATE     msc_apps_instances mai'
    ||' SET     (validation_org_id, lbj_details) = (SELECT validation_org_id, wsm_create_lbj_copy_routing'
    ||'         FROM  msc_st_apps_instances msai'
    ||'         WHERE msai.sr_instance_code = mai.instance_code'
    ||'         AND   msai.sr_instance_id   = mai.instance_id'
    ||'         AND   msai.process_flag =' || G_VALID ||')'
    ||'  WHERE  instance_code = :v_instance_code';



         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_DEBUG_1,lv_sql_stmt);

   EXECUTE IMMEDIATE lv_sql_stmt USING v_instance_code;

   COMMIT;

   EXCEPTION
    WHEN OTHERS THEN
     MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,substr('MSC_CL_PRE_PROCESS.LOAD_PROFILES'||SQLERRM,1,240));

  END LOAD_PROFILES;





  --============= End Load Procedures=============


   FUNCTION SET_ST_STATUS( ERRBUF                   OUT NOCOPY VARCHAR2,
                           RETCODE                  OUT NOCOPY NUMBER,
                           p_instance_id            IN  NUMBER,
                           p_st_status              IN  NUMBER)
   RETURN BOOLEAN
   IS

   lv_staging_table_status NUMBER;

   BEGIN

   ---=================== PRE-PROCESSING ===========================

   IF p_st_status= G_ST_PRE_PROCESSING THEN

           SELECT mai.ST_STATUS
           INTO lv_staging_table_status
           FROM MSC_APPS_INSTANCES mai
           WHERE mai.INSTANCE_ID= p_instance_id
           FOR UPDATE;

         IF lv_staging_table_status= G_ST_PULLING THEN
           FND_MESSAGE.SET_NAME('MSC', 'MSC_ST_ERROR_PULLING');
           ERRBUF:= FND_MESSAGE.GET;

           RETCODE := G_ERROR;
           RETURN FALSE;

         ELSIF lv_staging_table_status= G_ST_COLLECTING THEN
           FND_MESSAGE.SET_NAME('MSC', 'MSC_ST_ERROR_LOADING');
           ERRBUF:= FND_MESSAGE.GET;

           RETCODE := G_ERROR;
           RETURN FALSE;

         ELSIF lv_staging_table_status= G_ST_PURGING THEN

           FND_MESSAGE.SET_NAME('MSC', 'MSC_ST_ERROR_PURGING');
           ERRBUF:= FND_MESSAGE.GET;

           RETCODE := G_ERROR;
           RETURN FALSE;

         ELSIF lv_staging_table_status= G_ST_PRE_PROCESSING THEN

           FND_MESSAGE.SET_NAME('MSC', 'MSC_ST_ERROR_PRE_PROCESSING');
           ERRBUF:= FND_MESSAGE.GET;

           RETCODE := G_ERROR;
           RETURN FALSE;

         ELSE
           RETCODE := G_SUCCESS;

           UPDATE MSC_APPS_INSTANCES
              SET ST_STATUS= G_ST_PRE_PROCESSING,
                  LCID= MSC_COLLECTION_S.NEXTVAL,
                  LAST_UPDATE_DATE= v_current_date,
                  LAST_UPDATED_BY= v_current_user,
                  REQUEST_ID= FND_GLOBAL.CONC_REQUEST_ID
            WHERE INSTANCE_ID= p_instance_id;

           SELECT MSC_COLLECTION_S.CURRVAL
             INTO v_last_collection_id
             FROM DUAL;

           RETURN TRUE;

         END IF;

   ---===================== READY ====================
   ELSIF p_st_status= G_ST_READY THEN

       UPDATE MSC_APPS_INSTANCES
          SET ST_STATUS= G_ST_READY,
              LAST_UPDATE_DATE= v_current_date,
              LAST_UPDATED_BY= v_current_user,
              REQUEST_ID= FND_GLOBAL.CONC_REQUEST_ID
        WHERE INSTANCE_ID= p_instance_id;

       RETCODE:= G_SUCCESS;
       RETURN TRUE;

   END IF;

   END SET_ST_STATUS;

   -- ============= LAUNCH WORKER ==============

   PROCEDURE LAUNCH_WORKER(  ERRBUF                OUT NOCOPY VARCHAR2,
                             RETCODE               OUT NOCOPY NUMBER,
                             p_monitor_request_id  IN  NUMBER,
                             p_instance_id         IN  NUMBER,
                             p_lcid                IN  NUMBER,
                             p_timeout             IN  NUMBER,
                             p_batch_size          IN  NUMBER DEFAULT 1000,
                             p_uom_class_enabled   IN  NUMBER DEFAULT SYS_NO,
                             p_item_cat_enabled    IN  NUMBER DEFAULT SYS_NO,
                             p_item_enabled        IN  NUMBER DEFAULT SYS_NO,
                             p_sup_cap_enabled     IN  NUMBER DEFAULT SYS_NO,
                             p_safety_stk_enabled  IN  NUMBER DEFAULT SYS_NO,
                             p_ship_mthd_enabled   IN  NUMBER DEFAULT SYS_NO,
                             p_sourcing_enabled    IN  NUMBER DEFAULT SYS_NO,
                             p_bom_enabled         IN  NUMBER DEFAULT SYS_NO,
                             p_rtg_enabled         IN  NUMBER DEFAULT SYS_NO,
                             p_resources_enabled   IN  NUMBER DEFAULT SYS_NO,
                             p_mat_sup_enabled     IN  NUMBER DEFAULT SYS_NO,
                             p_mat_dmd_enabled     IN  NUMBER DEFAULT SYS_NO,
                             p_reserve_enabled     IN  NUMBER DEFAULT SYS_NO,
                             p_res_dmd_enabled     IN  NUMBER DEFAULT SYS_NO,
                             p_item_cst_enabled    IN  NUMBER DEFAULT SYS_NO,
                             p_fiscal_cal_enabled  IN  NUMBER DEFAULT SYS_NO,
                             p_comp_cal_enabled    IN  NUMBER DEFAULT SYS_NO,
                             p_setup_enabled       IN  NUMBER DEFAULT SYS_NO,
                             p_item_rollup         IN  NUMBER DEFAULT SYS_YES,
                             p_level_value_enabled IN  NUMBER DEFAULT SYS_NO,
                             p_level_assoc_enabled IN  NUMBER DEFAULT SYS_NO,
                             p_booking_enabled     IN  NUMBER DEFAULT SYS_NO,
                             p_shipment_enabled    IN  NUMBER DEFAULT SYS_NO,
                             p_mfg_fct_enabled     IN  NUMBER DEFAULT SYS_NO,
                             p_list_price_enabled  IN  NUMBER DEFAULT SYS_NO,
                             p_cs_data_enabled     IN  NUMBER DEFAULT SYS_NO,
                             p_curr_conv_enabled   IN  NUMBER DEFAULT SYS_NO,
                             p_uom_conv_enabled    IN  NUMBER DEFAULT SYS_NO,
                             p_comp_users_enabled  IN  NUMBER DEFAULT SYS_NO,
                             p_item_substitute_enabled  IN  NUMBER DEFAULT SYS_NO,
                             p_cal_assignment_enabled   IN  NUMBER DEFAULT SYS_NO,
                             p_iro_enabled         IN  NUMBER DEFAULT SYS_NO,
                             p_ero_enabled         IN  NUMBER DEFAULT SYS_NO,
                             p_sales_channel_enabled IN NUMBER DEFAULT SYS_NO,  -- added for bug # 7704614
                             p_fiscal_calendar_enabled IN NUMBER DEFAULT SYS_NO,
                             p_CMRO_enabled      IN NUMBER DEFAULT SYS_NO, --- CMRO Proj bug 9135694
                             p_request_id          IN  NUMBER DEFAULT -1 )

       IS

   ----- TASK CONTROL --------------------------------------------------

   lv_task_number       NUMBER;    -- NEGATIVE: Unknown Error Occurs
                                   -- 99      : All Task Are Done (TASK_ALL_COMPLETED)
                                   -- POSITIVE: The Task Number

   lv_task_status       NUMBER;    -- ::OK  : THE TASK IS Done in MSC
                                   -- OTHERS: THE TASK Fails

   lv_message           VARCHAR2(240):='';
   lv_batch_id          NUMBER;
   lv_process_time      NUMBER;

   EX_PROCESS_TIME_OUT  EXCEPTION;

   ------ PIPE CONTROL ----------------------------------------------

   lv_pipe_ret_code     NUMBER;   -- The return value of Sending/Receiving Pipe Messages

   EX_PIPE_RCV          EXCEPTION;
   EX_PIPE_SND          EXCEPTION;
   BEGIN
   msc_util.print_trace_file_name(FND_GLOBAL.CONC_REQUEST_ID);
      -- ===== Switch on/ off debug based on MRP: Debug Profile

      v_debug := FND_PROFILE.VALUE('MRP_DEBUG') = 'Y';

      -- bug 3304390
      -- IF FND_PROFILE.VALUE('MRP_TRACE')  = 'Y' THEN
      --    dbms_session.set_sql_trace(true);
      -- END IF;

      ---========Initialize the global variables ========

      v_batch_size         := p_batch_size;
      v_res_dmd_enabled    := p_res_dmd_enabled;
      v_mat_dmd_enabled    := p_mat_dmd_enabled;
      v_reserve_enabled    := p_reserve_enabled;
      v_mat_sup_enabled    := p_mat_sup_enabled;
      v_rtg_enabled        := p_rtg_enabled;
      v_bom_enabled        := p_bom_enabled;
      v_resources_enabled  := p_resources_enabled;
      v_sourcing_enabled   := p_sourcing_enabled;
      v_item_cat_enabled   := p_item_cat_enabled;
      v_uom_class_enabled  := p_uom_class_enabled;
      v_sup_cap_enabled    := p_sup_cap_enabled;
      v_safety_stk_enabled := p_safety_stk_enabled;
      v_item_enabled       := p_item_enabled;
      v_ship_mthd_enabled  := p_ship_mthd_enabled;
      v_item_cst_enabled   := p_item_cst_enabled;
      v_comp_users_enabled := p_comp_users_enabled;
      V_item_substitute_enabled := p_item_substitute_enabled;
      v_cal_assignment_enabled := p_cal_assignment_enabled;
      v_iro_enabled        := p_iro_enabled;
      v_ero_enabled        := p_ero_enabled;
      v_sales_channel_enabled  := p_sales_channel_enabled;-- added for bug # 7704614
      v_fiscal_calendar_enabled  := p_fiscal_calendar_enabled;
      v_CMRO_enabled     := p_CMRO_enabled;
      v_request_id         := p_request_id;


      ---=========DP variables===========================

      v_fiscal_cal_enabled  := p_fiscal_cal_enabled;
      v_comp_cal_enabled    := p_comp_cal_enabled;
      v_setup_enabled       := p_setup_enabled;
      v_item_rollup         := p_item_rollup;
      v_level_value_enabled := p_level_value_enabled;
      v_level_assoc_enabled := p_level_assoc_enabled;
      v_booking_enabled     := p_booking_enabled ;
      v_shipment_enabled    := p_shipment_enabled;
      v_mfg_fct_enabled     := p_mfg_fct_enabled;
      v_list_price_enabled  := p_list_price_enabled;
      v_cs_data_enabled     := p_cs_data_enabled;
      v_curr_conv_enabled   := p_curr_conv_enabled;
      v_uom_conv_enabled    := p_uom_conv_enabled;



      v_monitor_request_id := p_monitor_request_id;

      PBS := TO_NUMBER( FND_PROFILE.VALUE('MRP_PURGE_BATCH_SIZE'));

      IF fnd_global.conc_request_id > 0 THEN
         v_cp_enabled:= SYS_YES;
      ELSE
         v_cp_enabled:= SYS_NO;
      END IF;

      INITIALIZE( p_instance_id);

      v_last_collection_id:= p_lcid;

      LOOP

         EXIT WHEN is_monitor_status_running <> SYS_YES;

         EXIT WHEN is_request_status_running <> SYS_YES;

          -- ============= Check the execution time ==============

          select (SYSDATE- START_TIME) into lv_process_time from dual;
          IF lv_process_time > p_timeout/1440.0 THEN Raise EX_PROCESS_TIME_OUT;
          END IF;

          -- ============= Get the Task from Task Que ==============

          lv_pipe_ret_code := DBMS_PIPE.RECEIVE_MESSAGE( v_pipe_task_que, PIPE_TIME_OUT);

          IF lv_pipe_ret_code<>0 THEN

             IF lv_pipe_ret_code<> 1 THEN Raise EX_PIPE_RCV; END IF;

          ELSE

             IF DBMS_PIPE.next_item_type = 0 then

                  dbms_lock.sleep(2); -- sleep for 2 seconds and then check again

             ELSE

                  DBMS_PIPE.UNPACK_MESSAGE(lv_message);
                  lv_task_number := get_task_num (lv_message);

		 IF lv_task_number< 0 or lv_task_number = TASK_ALL_COMPLETED then
                   EXIT ;
		 ELSE

   		-- ============= Execute the Task =============

                  lv_task_status := FAIL;

                  lv_batch_id := get_batch_id(lv_message);
                  EXECUTE_TASK( lv_task_status, lv_task_number, lv_batch_id );

                  IF lv_task_status <> OK THEN
                        DBMS_PIPE.PACK_MESSAGE( -lv_task_number);
                  ELSE
                        DBMS_PIPE.PACK_MESSAGE( lv_task_number);
                  END IF;

             	  IF DBMS_PIPE.SEND_MESSAGE( v_pipe_wm)<>0 THEN
                        RAISE EX_PIPE_SND;
                  END IF;

                  IF lv_task_status <> OK THEN
                        DBMS_LOCK.SLEEP( 2);
                  END IF;

             END IF;   -- lv_task_number

           END IF; -- no messages. Waiting for dependent tasks to come

         END IF; -- lv_pipe_ret_code

      END LOOP;

      IF lv_task_number = TASK_ALL_COMPLETED THEN
         COMMIT;

         DBMS_PIPE.PACK_MESSAGE( SYS_YES);

         IF DBMS_PIPE.SEND_MESSAGE( v_pipe_status)<>0 THEN
            RAISE EX_PIPE_SND;
         END IF;

         FND_MESSAGE.SET_NAME('MSC', 'MSC_PP_SUCCEED');
         ERRBUF:= FND_MESSAGE.GET;

         IF v_flag=SYS_YES THEN
            RETCODE:= G_WARNING;
         ELSE
            RETCODE := G_SUCCESS;
         END IF;

      ELSE    -- unknown error occurs

         ROLLBACK;

         DBMS_PIPE.PACK_MESSAGE( SYS_YES);

         IF DBMS_PIPE.SEND_MESSAGE( v_pipe_status)<>0 THEN
            RAISE EX_PIPE_SND;
         END IF;

         FND_MESSAGE.SET_NAME('MSC', 'MSC_PP_FAIL');
         ERRBUF:= FND_MESSAGE.GET;

         RETCODE := G_ERROR;

      END IF;

    EXCEPTION

      WHEN EX_PIPE_RCV THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_FATAL_ERR,dbms_utility.format_error_stack);

         ROLLBACK;

         FND_MESSAGE.SET_NAME('MSC', 'MSC_MSG_RCV_FAIL');
         FND_MESSAGE.SET_TOKEN('PIPE', v_pipe_mw);
         ERRBUF:= FND_MESSAGE.GET;
         RETCODE := G_ERROR;
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS, ERRBUF);

         -- send a message of 'unresolvable error' to monitor
         DBMS_PIPE.PACK_MESSAGE( UNRESOVLABLE_ERROR);

         IF DBMS_PIPE.SEND_MESSAGE( v_pipe_wm)<>0 THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_MSG_SEND_FAIL');
            FND_MESSAGE.SET_TOKEN('PIPE', v_pipe_wm);
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
         END IF;

      WHEN EX_PIPE_SND THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_FATAL_ERR,dbms_utility.format_error_stack);

         ROLLBACK;

         FND_MESSAGE.SET_NAME('MSC', 'MSC_MSG_SEND_FAIL');
         FND_MESSAGE.SET_TOKEN('PIPE', v_pipe_wm);
         ERRBUF:= FND_MESSAGE.GET;
         RETCODE := G_ERROR;
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,ERRBUF);

         -- send a message of 'unresolavable error' to monitor
         DBMS_PIPE.PACK_MESSAGE( UNRESOVLABLE_ERROR);

         IF DBMS_PIPE.SEND_MESSAGE( v_pipe_wm)<>0 THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_MSG_SEND_FAIL');
            FND_MESSAGE.SET_TOKEN('PIPE', v_pipe_wm);
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
         END IF;

      WHEN EX_PROCESS_TIME_OUT THEN
      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_FATAL_ERR,dbms_utility.format_error_stack);

         ROLLBACK;

         FND_MESSAGE.SET_NAME('MSC', 'MSC_TIMEOUT');
         ERRBUF:= FND_MESSAGE.GET;
         RETCODE := G_ERROR;
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS, ERRBUF);

         -- send a message of 'unresolavable error' to monitor
         DBMS_PIPE.PACK_MESSAGE( UNRESOVLABLE_ERROR);

         IF DBMS_PIPE.SEND_MESSAGE( v_pipe_wm)<>0 THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_MSG_SEND_FAIL');
            FND_MESSAGE.SET_TOKEN('PIPE', v_pipe_wm);
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
         END IF;

      WHEN OTHERS THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_FATAL_ERR,dbms_utility.format_error_stack);
         ROLLBACK;

         ERRBUF  := SQLERRM;
         RETCODE := G_ERROR;

         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS, ERRBUF);

         -- send a message of 'unresolavable error' to monitor
         DBMS_PIPE.PACK_MESSAGE( UNRESOVLABLE_ERROR);

         IF DBMS_PIPE.SEND_MESSAGE( v_pipe_wm)<>0 THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_MSG_SEND_FAIL');
            FND_MESSAGE.SET_TOKEN('PIPE', v_pipe_wm);
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
         END IF;

         -- send a message of 'the worker ends its process' to monitor
         DBMS_PIPE.PACK_MESSAGE( SYS_YES);

         IF DBMS_PIPE.SEND_MESSAGE( v_pipe_status)<>0 THEN
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS, 'FAIL TO SEND MESSAGE');
         END IF;

   END LAUNCH_WORKER;

   -- ===============================================================

     PROCEDURE LAUNCH_MONITOR( ERRBUF              OUT NOCOPY VARCHAR2,
                             RETCODE               OUT NOCOPY NUMBER,
                             p_instance_id         IN  NUMBER,
                             p_timeout             IN  NUMBER DEFAULT 60,
                             p_batch_size          IN  NUMBER DEFAULT 1000,
                             p_total_worker_num    IN  NUMBER DEFAULT 3,
                             p_cal_enabled         IN  NUMBER DEFAULT SYS_NO,
                             p_dmd_class_enabled   IN  NUMBER DEFAULT SYS_NO,
                             p_tp_enabled          IN  NUMBER DEFAULT SYS_NO,
                             p_ctg_enabled         IN  NUMBER DEFAULT SYS_NO,
                             p_item_cat_enabled    IN  NUMBER DEFAULT SYS_NO,
                             p_uom_enabled         IN  NUMBER DEFAULT SYS_NO,
                             p_uom_class_enabled   IN  NUMBER DEFAULT SYS_NO,
                             p_desig_enabled       IN  NUMBER DEFAULT SYS_NO,
                             p_project_enabled     IN  NUMBER DEFAULT SYS_NO,
                             p_item_enabled        IN  NUMBER DEFAULT SYS_NO,
                             p_sup_cap_enabled     IN  NUMBER DEFAULT SYS_NO,
                             p_safety_stk_enabled  IN  NUMBER DEFAULT SYS_NO,
                             p_ship_mthd_enabled   IN  NUMBER DEFAULT SYS_NO,
                             p_sourcing_enabled    IN  NUMBER DEFAULT SYS_NO,
                             p_bom_enabled         IN  NUMBER DEFAULT SYS_NO,
                             p_rtg_enabled         IN  NUMBER DEFAULT SYS_NO,
                             p_resources_enabled   IN  NUMBER DEFAULT SYS_NO,
                             p_mat_sup_enabled     IN  NUMBER DEFAULT SYS_NO,
                             p_mat_dmd_enabled     IN  NUMBER DEFAULT SYS_NO,
                             p_reserve_enabled     IN  NUMBER DEFAULT SYS_NO,
                             p_res_dmd_enabled     IN  NUMBER DEFAULT SYS_NO,
                             p_item_cst_enabled    IN  NUMBER DEFAULT SYS_NO,
                             p_parent_request_id   IN  NUMBER DEFAULT -1,
                             p_fiscal_cal_enabled  IN  NUMBER DEFAULT SYS_NO,
                             p_setup_enabled       IN  NUMBER DEFAULT SYS_NO,
                             p_link_dummy          IN  VARCHAR2 DEFAULT NULL,
                             p_item_rollup         IN  NUMBER DEFAULT SYS_YES,
                             p_level_value_enabled IN  NUMBER DEFAULT SYS_NO,
                             p_level_assoc_enabled IN  NUMBER DEFAULT SYS_NO,
                             p_booking_enabled     IN  NUMBER DEFAULT SYS_NO,
                             p_shipment_enabled    IN  NUMBER DEFAULT SYS_NO,
                             p_mfg_fct_enabled     IN  NUMBER DEFAULT SYS_NO,
                             p_list_price_enabled  IN  NUMBER DEFAULT SYS_NO,
                             p_cs_data_enabled     IN  NUMBER DEFAULT SYS_NO,
                             p_cs_dummy            IN  VARCHAR2 DEFAULT NULL,
                             p_cs_refresh          IN  NUMBER DEFAULT SYS_NO,
                             p_curr_conv_enabled   IN  NUMBER DEFAULT SYS_NO,
                             p_uom_conv_enabled    IN  NUMBER DEFAULT SYS_NO ,
                             p_calling_module      IN  NUMBER DEFAULT G_APS,
                             p_comp_users_enabled  IN  NUMBER DEFAULT SYS_NO,
                             p_item_substitute_enabled     IN  NUMBER DEFAULT SYS_NO,
                             p_planners_enabled            IN  NUMBER DEFAULT SYS_NO,
                             p_comp_cal_enabled    IN  NUMBER DEFAULT SYS_NO,
                             p_profile_enabled     IN  NUMBER DEFAULT SYS_NO,
                             p_cal_assignment_enabled      IN  NUMBER DEFAULT SYS_NO,
                             p_iro_enabled         IN  NUMBER DEFAULT SYS_NO,
                             p_ero_enabled         IN  NUMBER DEFAULT SYS_NO,
                             p_sales_channel_enabled IN NUMBER DEFAULT SYS_NO,   -- added for bug # 7704614
                             p_fiscal_calendar_enabled IN NUMBER DEFAULT SYS_NO,
                             p_CMRO_enabled      IN NUMBER DEFAULT SYS_NO)


   IS

   lc_i                         PLS_INTEGER;
   lv_batch_id                  PLS_INTEGER := 0;
   lv_task_number               PLS_INTEGER := 0;
   lv_message                   VARCHAR2(240):= '';
   lv_task_not_completed        PLS_INTEGER := 0;

   lv_process_time              PLS_INTEGER := 0;

   EX_PIPE_RCV                  EXCEPTION;
   EX_PIPE_SND                  EXCEPTION;
   EX_PROCESS_TIME_OUT          EXCEPTION;
   EX_SECOND_PASS               EXCEPTION;

   lv_pipe_ret_code             PLS_INTEGER := 0;

   lv_check_point               PLS_INTEGER := 0;

   lvs_request_id               NumTblTyp := NumTblTyp(0);

   lv_total_item_batches        PLS_INTEGER := 0;
   lv_total_supply_batches      PLS_INTEGER := 0;
   lv_total_demand_batches      PLS_INTEGER := 0;
   lv_total_lvalue_batches      PLS_INTEGER := 0;

   lv_item_batches_completed    PLS_INTEGER := 0;
   lv_supply_batches_completed  PLS_INTEGER := 0;
   lv_demand_batches_completed  PLS_INTEGER := 0;
   lv_lvalue_batches_completed  PLS_INTEGER := 0;
   lv_pipe_status               PLS_INTEGER := 0;




   lv_worker_committed          PLS_INTEGER := 0;

   lv_start_time                DATE;

   lv_collection_plan_exists    PLS_INTEGER := 0;
   lv_is_build_over             NUMBER;
   lv_monitor_id                PLS_INTEGER;

   lv_plan_per_profile                 NUMBER:=nvl(fnd_profile.value('MSD_PLANNING_PERCENTAGE'), G_NO_PLAN_PERCENTAGE);
   lv_retval                           BOOLEAN;
   lv_dummy1                           VARCHAR2(32) := '';
   lv_dummy2                           VARCHAR2(32) := '';
   lv_count                    PLS_INTEGER; --8725891


   CURSOR Warn_Flag IS
   SELECT dbs_ver
   FROM MSC_APPS_INSTANCES
   WHERE instance_id = p_instance_id;


   BEGIN
    msc_util.print_trace_file_name(FND_GLOBAL.CONC_REQUEST_ID);
     lv_retval := FND_INSTALLATION.GET_APP_INFO(
                   'MSD', lv_dummy1,lv_dummy2, v_applsys_schema);

     IF (lv_dummy1 = 'I' OR lv_dummy1 = 'S')THEN
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Oracle Demand Planning Installed');
            v_install_msd := TRUE ;
     END IF;


    --=====set the value for sub-request============
     v_req_data := nvl(fnd_conc_global.request_data,G_NEW_REQUEST);

     --IF program resumes after completing the last activity(ie., planning
     --ODS load) then exit the legacy pre-processor. Whenever a child request
     --is submitted, parent exits to PAUSE mode so that the parent does'nt
     --consume any resources.


     IF v_req_data = G_DP_BOM_DATA THEN

       OPEN Warn_Flag;
        FETCH Warn_Flag INTO v_warning_flag;
       CLOSE Warn_Flag;

       IF v_warning_flag=SYS_YES THEN
          RETCODE:= G_WARNING;
       ELSE
          RETCODE := G_SUCCESS;
       END IF;

      RETURN;
     END IF;


      IF ((v_req_data=G_ODS_REQ_DATA) AND v_install_msd AND (lv_plan_per_profile=G_EXCLUDE_OPTION_CLASS) AND ( p_bom_enabled = SYS_YES) ) THEN

           lv_monitor_id := fnd_request.submit_request('MSC','MSDBCP',NULL,NULL,TRUE,p_instance_id);

            IF lv_monitor_id <> 0 THEN
              fnd_conc_global.set_req_globals(conc_status => 'PAUSED',
                                     request_data => to_char(G_DP_BOM_DATA)) ;

              commit;

            ELSE

              FND_MESSAGE.SET_NAME('MSC', 'MSC_DP_BOM_PROCESSING_FAIL');
              MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS, FND_MESSAGE.GET);
              RETCODE := G_WARNING;

              commit;

            END IF;

            RETURN;

ELSE

      IF v_req_data=G_ODS_REQ_DATA THEN

         OPEN Warn_Flag;
           FETCH Warn_Flag INTO v_warning_flag;
         CLOSE Warn_Flag;

         IF v_warning_flag=SYS_YES THEN
           RETCODE:= G_WARNING;
         ELSE
            RETCODE := G_SUCCESS;
         END IF;

        RETURN;
      END IF;

END IF;


     -- ===== Switch on/ off debug based on MRP: Debug Profile

--      v_debug := FND_PROFILE.VALUE('MRP_DEBUG') = 'Y';

      -- bug 3304390
      -- IF FND_PROFILE.VALUE('MRP_TRACE')  = 'Y' THEN
      --     dbms_session.set_sql_trace(true);
      -- END IF;

-- Print the parameters coming in
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'p_instance_id        : '||p_instance_id);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'p_batch_size         : '||p_batch_size);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'p_total_worker_num   : '||p_total_worker_num);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Calendars        : '||p_cal_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Trading Partners         : '||p_tp_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Demand Class  : '||p_dmd_class_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Cat Set       : '||p_ctg_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Product Categories   : '||p_item_cat_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'UOM        : '||p_uom_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'UOM Conversions  : '||p_uom_class_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Designators      : '||p_desig_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Projects and Tasks    : '||p_project_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Items       : '||p_item_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Shipping Method  : '||p_ship_mthd_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Supplier    : '||p_sup_cap_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Safety Stocks: '||p_safety_stk_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Sourcing Rules   : '||p_sourcing_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'BOM       : '||p_bom_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Routings        : '||p_rtg_enabled );
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Resources  : '||p_resources_enabled );
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Material Supplies   : '||p_mat_sup_enabled );
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Material Demands    : '||p_mat_dmd_enabled );
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Reservations    : '||p_reserve_enabled );
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Resource Demands    : '||p_res_dmd_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Customer Items   : '||p_item_cst_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'p_parent_request_id  : '||p_parent_request_id);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'p_comp_users_enabled : '||p_comp_users_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Item Substitutes : '||p_item_substitute_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Planners        : '||p_planners_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Profils   : '||p_profile_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Calendar Assignments  : '||p_cal_assignment_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'IRO  : '||p_iro_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'ERO  : '||p_ero_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Sales Channel  : '||p_sales_channel_enabled); -- bug # 7704614
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Fiscal Calendar  : '||p_fiscal_calendar_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'CMRO  : '||p_CMRO_enabled);

  -- DP Variables
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Fiscal Calendars   : '||p_fiscal_cal_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'p_comp_cal_enabled   : '||p_comp_cal_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'p_setup_enabled        : '||p_setup_enabled);
   --Bug Fix 2813465  To enable the Item Rollup whenever Categories are loaded via self service loads.
   --MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'p_item_rollup          : '||p_item_rollup);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'p_level_value_enabled  : '||p_level_value_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'p_level_assoc_enabled  : '||p_level_assoc_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'p_booking_enabled      : '||p_booking_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'p_shipment_enabled     : '||p_shipment_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'p_mfg_fct_enabled      : '||p_mfg_fct_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'p_list_price_enabled   : '||p_list_price_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'p_cs_data_enabled      : '||p_cs_data_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'p_cs_refresh          : ' ||p_cs_refresh);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'p_curr_conv_enabled    : '||p_curr_conv_enabled);
   MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'p_uom_conv_enabled     : '||p_uom_conv_enabled);




     ---========Get the new refresh ID =================
     IF  v_req_data = G_NEW_REQUEST THEN
       UPDATE MSC_APPS_INSTANCES mai
       SET LRID= msc_cl_refresh_s.nextval, mai.DBS_VER= SYS_NO
       WHERE mai.INSTANCE_ID = p_instance_id;
       commit;
     END IF;




     ---========Initialize the global variables ========

     v_res_dmd_enabled    := p_res_dmd_enabled;
     v_mat_dmd_enabled    := p_mat_dmd_enabled;
     v_reserve_enabled    := p_reserve_enabled;
     v_mat_sup_enabled    := p_mat_sup_enabled;
     v_rtg_enabled        := p_rtg_enabled;
     v_bom_enabled        := p_bom_enabled;
     v_resources_enabled  := p_resources_enabled;
     v_sourcing_enabled   := p_sourcing_enabled;
     v_ctg_enabled        := p_ctg_enabled;
     v_sup_cap_enabled    := p_sup_cap_enabled;
     v_safety_stk_enabled := p_safety_stk_enabled;
     v_item_enabled       := p_item_enabled;
     v_tp_enabled         := p_tp_enabled ;
     v_dmd_class_enabled  := p_dmd_class_enabled ;
     v_uom_enabled        := p_uom_enabled;
     v_desig_enabled      := p_desig_enabled;
     v_project_enabled    := p_project_enabled;
     v_cal_enabled        := p_cal_enabled;
     v_item_cat_enabled   := p_item_cat_enabled ;
     v_uom_class_enabled  := p_uom_class_enabled ;
     v_ship_mthd_enabled  := p_ship_mthd_enabled ;
     v_item_cst_enabled   := p_item_cst_enabled;
     v_parent_request_id  := p_parent_request_id;
     v_comp_users_enabled := p_comp_users_enabled;
     v_item_substitute_enabled := p_item_substitute_enabled;
     v_planners_enabled        := p_planners_enabled;
     v_profile_enabled    := p_profile_enabled;
     v_cal_assignment_enabled := p_cal_assignment_enabled;
     v_sales_channel_enabled  := p_sales_channel_enabled; -- added for bug # 7704614
     v_fiscal_calendar_enabled  := p_fiscal_calendar_enabled;
     v_CMRO_enabled      := p_CMRO_enabled;

     ---DP variables
     v_fiscal_cal_enabled  := p_fiscal_cal_enabled;
     v_comp_cal_enabled  := p_comp_cal_enabled;
     v_setup_enabled       := p_setup_enabled;
     v_item_rollup         := p_item_cat_enabled; --Bug Fix 2813465 To enable the Item Rollup whenever Categories are loaded via self service loads.
     v_level_value_enabled := p_level_value_enabled;
     v_level_assoc_enabled := p_level_assoc_enabled;
     v_booking_enabled     := p_booking_enabled ;
     v_shipment_enabled    := p_shipment_enabled;
     v_mfg_fct_enabled     := p_mfg_fct_enabled;
     v_list_price_enabled  := p_list_price_enabled;
     v_cs_data_enabled     := p_cs_data_enabled;
     v_cs_refresh          := p_cs_refresh;
     v_curr_conv_enabled   := p_curr_conv_enabled;
     v_uom_conv_enabled    := p_uom_conv_enabled;
     v_iro_enabled        :=  p_iro_enabled;
     v_ero_enabled        :=  p_ero_enabled;



     v_batch_size := p_batch_size;

      INITIALIZE( p_instance_id);

     -- Initializing v_request_id with the p_parent_request_id if
     -- OA upload else with   current request id of the pre process
     -- monitor using fnd_global.conc_request_id.
     IF nvl(p_parent_request_id, -1) < 1 THEN
       v_request_id := -(fnd_global.conc_request_id);
     ELSE
       v_request_id := v_parent_request_id;
     END IF;

     -- for L-flow Initialize the parameters
     prec.purge_ods_flag          := SYS_NO;
     prec.app_supp_cap_flag       := SYS_NO;
     prec.atp_rules_flag          := SYS_NO;
     prec.bom_flag                := SYS_NO;
     prec.bor_flag                := SYS_NO;
     prec.calendar_flag           := SYS_NO;
     prec.demand_class_flag       := SYS_NO;
     prec.forecast_flag           := SYS_NO;
     prec.item_flag               := SYS_NO;
     prec.kpi_bis_flag            := SYS_NO;
     prec.mds_flag                := SYS_NO;
     prec.mps_flag                := SYS_NO;
     prec.oh_flag                 := SYS_NO;
     prec.parameter_flag          := SYS_NO;
     prec.planner_flag            := SYS_NO;
     prec.item_subst_flag         := SYS_NO;
     prec.project_flag            := SYS_NO;
     prec.po_flag                 := SYS_NO;
     prec.reserves_flag           := SYS_NO;
     prec.resource_nra_flag       := SYS_NO;
     prec.saf_stock_flag          := SYS_NO;
     prec.sales_order_flag        := SYS_NO;
     prec.source_hist_flag        := SYS_NO;
     prec.sourcing_rule_flag      := SYS_NO;
     prec.sub_inventory_flag      := SYS_NO;
     prec.tp_customer_flag        := SYS_NO;
     prec.tp_vendor_flag          := SYS_NO;
     prec.unit_number_flag        := SYS_NO;
     prec.uom_flag                := SYS_NO;
     prec.user_supply_demand_flag := SYS_NO;
     prec.wip_flag                := SYS_NO;
     prec.sales_channel_flag      := SYS_NO;
     prec.fiscal_calendar_flag    := SYS_NO;
     prec.CMRO_flag             := SYS_NO;
     prec.user_company_flag       := G_COMP_USR_NO;


    -- end of changes for L flow

     IF fnd_global.conc_request_id > 0 THEN
        v_cp_enabled:= SYS_YES;
     ELSE
        v_cp_enabled:= SYS_NO;
     END IF;

     lv_check_point:= 1;
     IF v_req_data = G_NEW_REQUEST THEN

       -- OA upload changes, status is already set in JCP for OA i.e. nvl(v_parent_request_id, -1) >0
       IF nvl(v_parent_request_id, -1) < 1 THEN
         IF SET_ST_STATUS( ERRBUF, RETCODE, p_instance_id, G_ST_PRE_PROCESSING) THEN
          COMMIT;
          lv_check_point:= 2;
         ELSE
          ROLLBACK;
          RETURN;
         END IF;
       END IF;

       /*IF NOT SNAPSHOT_TABLES then --8725891
        ROLLBACK;
        RETURN;
       END IF;*/

       CREATE_INDEXES;
     END IF;


     --=========== call the main tasks here===================

   IF v_req_data IN (G_NEW_REQUEST,G_CAL_REQ_DATA) THEN

    --------------  Get current ERROR_ID from MSC_ERRORS ---
     IF (nvl(v_parent_request_id,-1) < 1) THEN
        SELECT max(ERROR_ID) INTO v_error_no_begin FROM MSC_ERRORS;
     END IF;


     -- initiaize global variables
     v_total_worker_num := p_total_worker_num;
     -- calendar
     IF p_cal_enabled = SYS_YES and v_req_data = G_NEW_REQUEST THEN
          --8725891
          lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_CALENDARS');
          lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_WORKDAY_PATTERNS');
          lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_CALENDAR_SHIFTS');
          lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_SHIFT_TIMES');
          lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_SHIFT_EXCEPTIONS');
          lv_count:= SET_IN_PROCESS (p_table_name => 'MSC_ST_CALENDAR_EXCEPTIONS');

       LOAD_CALENDAR;
     ELSE
       v_cal_build := False;
     END IF;

     IF v_cal_build THEN
       RETURN;
     ELSE
     --8725891
     IF NOT SNAPSHOT_TABLES then
           ROLLBACK;
           RETURN;
         END IF;

     END IF;

     IF (p_cal_enabled = SYS_YES) THEN
        LOAD_MFG_TIME ;
     END IF;


     -- unit of measures
      IF p_uom_enabled = SYS_YES THEN
         LOAD_UOM;
      END IF;
     -- demand class

     IF p_dmd_class_enabled = SYS_YES THEN
       LOAD_DEMAND_CLASS;
     END IF;

     -- trading partner
     IF p_tp_enabled = SYS_YES THEN
       LOAD_TRADING_PARTNERS;
     END IF;

      -- Profile Values

     IF p_profile_enabled = SYS_YES THEN
       LOAD_PROFILES;
     END IF;

     -- Planners

     IF p_planners_enabled = SYS_YES THEN
       LOAD_PLANNERS;
     END IF;


     -- category sets
     IF p_ctg_enabled = SYS_YES THEN
       LOAD_CATEGORY_SET;
     END IF;
     -- unit of measures
  --   IF p_uom_enabled = SYS_YES THEN
  --     LOAD_UOM;
  --   END IF;
     -- designators
     IF p_desig_enabled = SYS_YES THEN
       LOAD_DESIGNATOR;
     END IF;
     -- project and tasks
     IF p_project_enabled = SYS_YES THEN
       LOAD_PROJ_TASK;
     END IF;

     -- DP Setup Parameters
      IF v_setup_enabled = SYS_YES THEN
        LOAD_SETUP_PARAMETER;
      END IF ;

     -- process items/ supply / demands records and error out duplicate records for batch
     check_duplicates(ERRBUF, RETCODE);
     IF RETCODE = G_ERROR THEN
        ROLLBACK;
        RETURN;
     END IF;

     -- fix for bug 2788719
     IF is_bis_periods_load_reqd = SYS_YES THEN
        prec.kpi_bis_flag:=SYS_YES;
     END IF;

     --- Purge the existing pipes so that new pipes would be created
     DBMS_PIPE.PURGE( v_pipe_task_que);
     DBMS_PIPE.PURGE( v_pipe_wm);
     DBMS_PIPE.PURGE( v_pipe_mw);
     DBMS_PIPE.PURGE( v_pipe_status);

     -- ============ Lauch the Workers here ===============

     lvs_request_id.EXTEND( p_total_worker_num);

     IF v_cp_enabled= SYS_YES THEN

     FOR lc_i IN 1..p_total_worker_num LOOP
       lvs_request_id(lc_i) := FND_REQUEST.SUBMIT_REQUEST(
                          'MSC',
                          'MSCPPW', /* launch worker procedure called */
                          NULL,  -- description
                          NULL,  -- start date
                          FALSE, -- TRUE,
                          FND_GLOBAL.CONC_REQUEST_ID,
                          p_instance_id,
                          v_last_collection_id,
                          p_timeout,
                          p_batch_size,
                          p_uom_class_enabled,
                          p_item_cat_enabled,
                          p_item_enabled,
                          p_sup_cap_enabled,
                          p_safety_stk_enabled,
                          p_ship_mthd_enabled,
                          p_sourcing_enabled,
                          p_bom_enabled,
                          p_rtg_enabled,
                          p_resources_enabled,
                          p_mat_sup_enabled,
                          p_mat_dmd_enabled,
                          p_reserve_enabled,
                          p_res_dmd_enabled,
                          p_item_cst_enabled,
                          p_fiscal_cal_enabled,
                          p_comp_cal_enabled,
                          p_setup_enabled,
                          v_item_rollup,  --Bug Fix 2813465 To enable the Item Rollup whenever Categories are loaded via self service loads.
                          v_level_value_enabled,
                          p_level_assoc_enabled,
                          p_booking_enabled,
                          p_shipment_enabled,
                          p_mfg_fct_enabled,
                          p_list_price_enabled,
                          p_cs_data_enabled,
                          p_curr_conv_enabled,
                          p_uom_conv_enabled,
                          p_comp_users_enabled,
                          p_item_substitute_enabled,
                          p_cal_assignment_enabled,
                          p_iro_enabled,
                          p_ero_enabled,
                          p_sales_channel_enabled,
                          p_fiscal_calendar_enabled,
                          p_CMRO_enabled,
                          v_request_id);


       COMMIT;

       IF lvs_request_id(lc_i)= 0 THEN

       ---- If the request_id=0 then
       ---- 1. Restore the status of the staging table.
       ---- 2. Send termination messages to the other launched workers.
       ---- 3. Return.

          ROLLBACK;

          IF SET_ST_STATUS( ERRBUF, RETCODE, p_instance_id, G_ST_READY) THEN
              COMMIT;
          END IF;

          FOR lc_i IN 1..p_total_worker_num LOOP

              DBMS_PIPE.PACK_MESSAGE( '-1');

              IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                 RAISE EX_PIPE_SND;
              END IF;

          END LOOP;

          FND_MESSAGE.SET_NAME('MSC', 'MSC_PP_LAUNCH_WORKER_FAIL');
          ERRBUF:= FND_MESSAGE.GET;
          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_FATAL_ERR,ERRBUF);
          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_FATAL_ERR,dbms_utility.format_error_stack);
          RETCODE := G_ERROR;

          COMMIT;
          RETURN;
       ELSE
          FND_MESSAGE.SET_NAME('MSC', 'MSC_PP_WORKER_REQUEST_ID');
          FND_MESSAGE.SET_TOKEN('REQUEST_ID', lvs_request_id(lc_i));
          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
          --MSC_UTIL.print_trace_file_name(lvs_request_id(lc_i));
       END IF;

     END LOOP;

     ELSE -- CP not enabled

          COMMIT;

     END IF;  -- CP enabled




     -- ============ Send Tasks to Task Que 'v_pipe_task_que' =============

     lv_message := to_char(TASK_BIS_PERIODS);
     DBMS_PIPE.PACK_MESSAGE(lv_message );
     IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
           RAISE EX_PIPE_SND;
     END IF;
     MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_BIS_PERIODS: '||lv_message);
     lv_task_not_completed := lv_task_not_completed + 1;


     IF v_item_enabled = SYS_YES THEN

     BEGIN

     DECLARE
       TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
       lb_rowid       RowidTab;
       lb_batch       NumTblTyp := NumTblTyp(0);
       lv_batch_id    PLS_INTEGER;
       lv_batch_start PLS_INTEGER;
       lv_batch_last  PLS_INTEGER;
       cursor c2 is SELECT rowid FROM MSC_ST_SYSTEM_ITEMS
       WHERE  PROCESS_FLAG IN (G_IN_PROCESS,G_ERROR_FLG)
       AND    NVL(batch_id,NULL_VALUE) = NULL_VALUE
       AND    sr_instance_code   = v_instance_code;

     BEGIN

       OPEN c2;
       FETCH c2 BULK COLLECT INTO lb_rowid ;

       IF c2%ROWCOUNT > 0  THEN

         SELECT msc_st_batch_id_s.NEXTVAL INTO lv_batch_id FROM dual;
         lv_batch_start := lv_batch_id;
         lb_batch.extend(lb_rowid.count);

         FOR j IN lb_rowid.FIRST..lb_rowid.LAST LOOP

           lb_batch(j):= lv_batch_id;
           IF MOD(j,v_batch_size) = 0 THEN
              SELECT msc_st_batch_id_s.NEXTVAL INTO lv_batch_id FROM dual;
           END IF;

         END LOOP;

         lv_batch_last := lv_batch_id;

         FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
         UPDATE MSC_ST_SYSTEM_ITEMS
            SET batch_id = lb_batch(j)
            WHERE  rowid = lb_rowid(j);

         commit;

         CREATE_INDEXES('ITEM');
         -- send out the batches to the workers' task Pipe

         FOR j in lv_batch_start..lv_batch_last LOOP
           lv_message := to_char(TASK_ITEM)||','||to_char(j);
           DBMS_PIPE.PACK_MESSAGE(lv_message );
           IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                 RAISE EX_PIPE_SND;
           END IF;
           MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_ITEM: '||lv_message);
           lv_total_item_batches := lv_total_item_batches + 1;
           lv_task_not_completed := lv_task_not_completed + 1;
         END LOOP;

       ELSE
         lv_message := to_char(TASK_ITEM)||','||to_char(0);
         DBMS_PIPE.PACK_MESSAGE(lv_message );
         IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                RAISE EX_PIPE_SND;
         END IF;
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_ITEM: '||lv_message);
         lv_total_item_batches := lv_total_item_batches + 1;
         lv_task_not_completed := lv_task_not_completed + 1;


       END IF;

       CLOSE c2;
     EXCEPTION
       when others then
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Error in Item Batch ID generation: ' || SQLERRM);
         lv_message := to_char(TASK_ITEM)||','||to_char(0);
         DBMS_PIPE.PACK_MESSAGE(lv_message );
         IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                RAISE EX_PIPE_SND;
         END IF;
         MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_ITEM: '||lv_message);
         lv_total_item_batches := lv_total_item_batches + 1;
         lv_task_not_completed := lv_task_not_completed + 1;
     END;

     END;

     ELSE
        -- kludge to launch the dependent tasks even if
        -- item is not enabled for processing

        lv_message := to_char(TASK_ITEM)||','||to_char(0);
        DBMS_PIPE.PACK_MESSAGE(lv_message );
        IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                   RAISE EX_PIPE_SND;
         END IF;
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_ITEM: '||lv_message);
        lv_total_item_batches := lv_total_item_batches + 1;
        lv_task_not_completed := lv_task_not_completed + 1;
     END IF;

     DBMS_LOCK.SLEEP( 5);   -- initial estimated sleep time

     LOOP

         EXIT WHEN is_request_status_running <> SYS_YES;

         EXIT WHEN is_worker_status_valid(lvs_request_id) <> SYS_YES;

         lv_pipe_ret_code:= DBMS_PIPE.RECEIVE_MESSAGE( v_pipe_wm, PIPE_TIME_OUT);

         IF lv_pipe_ret_code=0 THEN
           IF DBMS_PIPE.next_item_type <> 0 then

              DBMS_PIPE.UNPACK_MESSAGE( lv_task_number );

              IF lv_task_number>0 THEN   -- If it's ok, the value is the task number
                lv_task_not_completed := lv_task_not_completed -1;

                -- ======= Add the dependent Tasks to the task queue ==========

                IF lv_task_number= TASK_ITEM THEN
                  -- check whether all the item batches are completed
                  -- if yes then put the dependent tasks in the task pipe

                  lv_item_batches_completed := lv_item_batches_completed + 1;

                  IF lv_item_batches_completed = lv_total_item_batches THEN
                         /* Doing the piece dealing with items commented in Load_Items for the bug fix 2191021 */
                        IF v_item_enabled = SYS_YES THEN
                          LOAD_ITEM_ABC_CLASSES;
                        END IF;

                        IF p_comp_users_enabled = SYS_YES AND v_MSC_CONFIGURATION IN(2,3) THEN
                          lv_message := to_char(TASK_COMPANY_USERS);
                          DBMS_PIPE.PACK_MESSAGE(lv_message);
                          IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                                RAISE EX_PIPE_SND;
                          END IF;
                          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_COMPANY_USERS: '||lv_message);
                          lv_task_not_completed := lv_task_not_completed + 1;
                        END IF;

                        IF p_uom_class_enabled = SYS_YES THEN
                          lv_message := to_char(TASK_UOM_CONV);
                          DBMS_PIPE.PACK_MESSAGE(lv_message);
                          IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                                RAISE EX_PIPE_SND;
                          END IF;
                          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_UOM_CONV: '||lv_message);
                          lv_task_not_completed := lv_task_not_completed + 1;
                        END IF;

                        IF p_item_cst_enabled = SYS_YES  AND v_sce_installed THEN
                          lv_message := to_char(TASK_ITEM_CST);
                          DBMS_PIPE.PACK_MESSAGE(lv_message);
                          IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                                RAISE EX_PIPE_SND;
                          END IF;
                          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_ITEM_CST: '||lv_message);
                          lv_task_not_completed := lv_task_not_completed + 1;
                        END IF;


                        lv_message := to_char(TASK_SUPPLIER_CAPACITY);
                        DBMS_PIPE.PACK_MESSAGE(lv_message);
                        IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
		               	RAISE EX_PIPE_SND;
                        END IF;
                        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_SUPPLIER_CAPACITY: '||lv_message);
                        lv_task_not_completed := lv_task_not_completed + 1;

                        lv_message := to_char(TASK_CAL_ASSIGNMENTS);
                        DBMS_PIPE.PACK_MESSAGE(lv_message);
                        IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
		               	RAISE EX_PIPE_SND;
                        END IF;
                        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_CAL_ASSIGNMENTS: '||lv_message);
                        lv_task_not_completed := lv_task_not_completed + 1;

                        lv_message := to_char(TASK_SALES_CHANNEL);
                        DBMS_PIPE.PACK_MESSAGE(lv_message);
                        IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
		               	RAISE EX_PIPE_SND;
                        END IF;
                        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_SALES_CHANNEL: '||lv_message);
                        lv_task_not_completed := lv_task_not_completed + 1;

                        lv_message := to_char(TASK_FISCAL_CALENDAR);
                        DBMS_PIPE.PACK_MESSAGE(lv_message);
                        IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
		               	RAISE EX_PIPE_SND;
                        END IF;
                        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_FISCAL_CALENDAR: '||lv_message);
                        lv_task_not_completed := lv_task_not_completed + 1;

                        lv_message := to_char(TASK_CMRO);
                        DBMS_PIPE.PACK_MESSAGE(lv_message);
                        IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
		               	RAISE EX_PIPE_SND;
                        END IF;
                        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_CMRO: '||lv_message);
                        lv_task_not_completed := lv_task_not_completed + 1;

                        lv_message := to_char(TASK_SAFETY_STOCK);
                        DBMS_PIPE.PACK_MESSAGE(lv_message);
                        IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
		               	RAISE EX_PIPE_SND;
                        END IF;
                        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_SAFETY_STOCK: '||lv_message);
                        lv_task_not_completed := lv_task_not_completed + 1;


                        lv_message := to_char(TASK_CATEGORIES_SOURCING);
                        DBMS_PIPE.PACK_MESSAGE(lv_message);
                        IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                             RAISE EX_PIPE_SND;
                        END IF;
                        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_CATEGORIES_SOURCING: '||lv_message);
                        lv_task_not_completed := lv_task_not_completed + 1;

                        lv_message := to_char(TASK_DEPT_RESOURCES);
                        DBMS_PIPE.PACK_MESSAGE(lv_message);
                        IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                             RAISE EX_PIPE_SND;
                        END IF;
                        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_DEPT_RESOURCES: '||lv_message);
                        lv_task_not_completed := lv_task_not_completed + 1;

                        lv_message := to_char(TASK_ITEM_SUBSTITUTE);
                        DBMS_PIPE.PACK_MESSAGE(lv_message);
                        IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                              RAISE EX_PIPE_SND;
                        END IF;
                        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_ITEM_SUBSTITUTE: '||lv_message);
                        lv_task_not_completed := lv_task_not_completed + 1;


                        IF p_fiscal_cal_enabled = SYS_YES THEN
                          lv_message := to_char(TASK_FISCAL_TIME);
                          DBMS_PIPE.PACK_MESSAGE(lv_message);
                          IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                                RAISE EX_PIPE_SND;
                          END IF;
                          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_FISCAL_TIME: '||lv_message);
                          lv_task_not_completed := lv_task_not_completed + 1;
                        END IF;


                       IF p_comp_cal_enabled = SYS_YES THEN
                          lv_message := to_char(TASK_COMPOSITE_TIME);
                          DBMS_PIPE.PACK_MESSAGE(lv_message);
                          IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                                RAISE EX_PIPE_SND;
                          END IF;
                          MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_COMPOSITE_TIME: '||lv_message);
                          lv_task_not_completed := lv_task_not_completed + 1;
                        END IF;



                        IF p_mat_sup_enabled = SYS_YES THEN
                          -- divide material supply into batches and put each batch
                          -- in the task pipe so that these can be picked up by the workers
                          BEGIN

                          DECLARE
                            TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
                            lb_rowid       RowidTab;
                            lb_batch       NumTblTyp := NumTblTyp(0);
                            lv_batch_id    PLS_INTEGER;
                            lv_batch_start PLS_INTEGER;
                            lv_batch_last  PLS_INTEGER;
                            cursor c2 is SELECT rowid FROM msc_st_supplies
                            WHERE  PROCESS_FLAG IN(G_IN_PROCESS,G_ERROR_FLG)
                            AND    ORDER_TYPE  IN(1,2,5,8,11,12,18,73,74,87)
                            AND    NVL(batch_id,NULL_VALUE) = NULL_VALUE
                            AND    sr_instance_code   = v_instance_code;

                          BEGIN

                            OPEN c2;
                            FETCH c2 BULK COLLECT INTO lb_rowid ;

                            IF c2%ROWCOUNT > 0  THEN

                              SELECT msc_st_batch_id_s.NEXTVAL INTO lv_batch_id FROM dual;
                              lv_batch_start := lv_batch_id;
                              lb_batch.extend(lb_rowid.count);

                              FOR j IN lb_rowid.FIRST..lb_rowid.LAST LOOP

                                lb_batch(j):= lv_batch_id;
                                IF MOD(j,v_batch_size) = 0 THEN
                                   SELECT msc_st_batch_id_s.NEXTVAL INTO lv_batch_id FROM dual;
                                END IF;

                              END LOOP;

                              lv_batch_last := lv_batch_id;

                              FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
                              UPDATE msc_st_supplies
                                 SET batch_id = lb_batch(j)
                                 WHERE  rowid = lb_rowid(j);

                              commit;

                              -- send out the batches to the workers' task Pipe

                              FOR j in lv_batch_start..lv_batch_last LOOP
                                lv_message := to_char(TASK_MATERIAL_SUPPLY)||','||to_char(j);
                                DBMS_PIPE.PACK_MESSAGE(lv_message);
                                IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                                    RAISE EX_PIPE_SND;
                                END IF;
                                MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_MATERIAL_SUPPLY: '||lv_message);
                                lv_total_supply_batches := lv_total_supply_batches + 1;
                                lv_task_not_completed := lv_task_not_completed + 1;
                              END LOOP;

                              CREATE_INDEXES('SUPPLY');

                            END IF;

                            CLOSE c2;
                          EXCEPTION
                            when others then
                            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_WARNING,'Error in Supplies Batch ID generation: ' || SQLERRM);
                          END;

                          END;

                        END IF;


                        IF p_mat_dmd_enabled = SYS_YES THEN
                          -- divide material demand into batches and put each batch
                          -- in the task pipe so that these can be picked up by the workers
                          BEGIN

                          DECLARE
                            TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
                            lb_rowid       RowidTab;
                            lb_batch       NumTblTyp := NumTblTyp(0);
                            lv_batch_id    PLS_INTEGER;
                            lv_batch_start PLS_INTEGER;
                            lv_batch_last  PLS_INTEGER;
                            cursor c2 is SELECT rowid FROM msc_st_demands
                            WHERE PROCESS_FLAG IN (G_IN_PROCESS,G_ERROR_FLG)
                            AND   origination_type IN (7,8,29)
                            AND   NVL(batch_id,NULL_VALUE) = NULL_VALUE
                            AND   sr_instance_code   = v_instance_code;

                          BEGIN

                            OPEN c2;
                            FETCH c2 BULK COLLECT INTO lb_rowid ;

                            IF c2%ROWCOUNT > 0  THEN

                              SELECT msc_st_batch_id_s.NEXTVAL INTO lv_batch_id FROM dual;
                              lv_batch_start := lv_batch_id;
                              lb_batch.extend(lb_rowid.count);

                              FOR j IN lb_rowid.FIRST..lb_rowid.LAST LOOP

                                lb_batch(j):= lv_batch_id;
                                IF MOD(j,v_batch_size) = 0 THEN
                                   SELECT msc_st_batch_id_s.NEXTVAL INTO lv_batch_id FROM dual;
                                END IF;

                              END LOOP;

                              lv_batch_last := lv_batch_id;

                              FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
                              UPDATE msc_st_demands
                                 SET batch_id = lb_batch(j)
                                 WHERE  rowid = lb_rowid(j);

                              commit;

                              -- send out the batches to the workers' task Pipe

                              FOR j in lv_batch_start..lv_batch_last LOOP
                                lv_message := to_char(TASK_MATERIAL_DEMAND)||','||to_char(j);
                                DBMS_PIPE.PACK_MESSAGE(lv_message);
                                IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                                    RAISE EX_PIPE_SND;
                                END IF;
                                MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_MATERIAL_DEMAND: '||lv_message);
                                lv_total_demand_batches := lv_total_demand_batches + 1;
                                lv_task_not_completed := lv_task_not_completed + 1;
                              END LOOP;

                              CREATE_INDEXES('DEMAND');

                            END IF;

                            CLOSE c2;
                          EXCEPTION
                            when others then
                            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Error in Demands Batch ID generation: ' || SQLERRM);
                          END;

                          END;





                     END IF;	-- Demand is not enabled

                  END IF; -- all items batches completed

                ELSIF lv_task_number= TASK_ITEM_SUBSTITUTE THEN

                  IF p_mat_dmd_enabled = SYS_YES THEN

                          -- divide sales order demand into batches and put each batch
                          -- in the task pipe so that these can be picked up by the workers
                          BEGIN

                          DECLARE
                            TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
                            lb_rowid       RowidTab;
                            lb_batch       NumTblTyp := NumTblTyp(0);
                            lv_batch_id    PLS_INTEGER;
                            lv_batch_start PLS_INTEGER;
                            lv_batch_last  PLS_INTEGER;
                            cursor c2 is SELECT rowid FROM msc_st_sales_orders
                            WHERE PROCESS_FLAG IN (G_IN_PROCESS,G_ERROR_FLG)
                            AND   NVL(batch_id,NULL_VALUE) = NULL_VALUE
                            AND   sr_instance_code   = v_instance_code;

                          BEGIN

                            OPEN c2;
                            FETCH c2 BULK COLLECT INTO lb_rowid ;

                            IF c2%ROWCOUNT > 0  THEN

                              SELECT msc_st_batch_id_s.NEXTVAL INTO lv_batch_id FROM dual;
                              lv_batch_start := lv_batch_id;
                              lb_batch.extend(lb_rowid.count);

                              FOR j IN lb_rowid.FIRST..lb_rowid.LAST LOOP

                                lb_batch(j):= lv_batch_id;
                                IF MOD(j,v_batch_size) = 0 THEN
                                   SELECT msc_st_batch_id_s.NEXTVAL INTO lv_batch_id FROM dual;
                                END IF;

                              END LOOP;

                              lv_batch_last := lv_batch_id;

                              FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
                              UPDATE msc_st_sales_orders
                                 SET batch_id = lb_batch(j)
                                 WHERE  rowid = lb_rowid(j);

                              commit;

                              -- send out the batches to the workers' task Pipe

                              FOR j in lv_batch_start..lv_batch_last LOOP
                                lv_message := to_char(TASK_SO_DEMAND)||','||to_char(j);
                                DBMS_PIPE.PACK_MESSAGE(lv_message);
                                IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                                    RAISE EX_PIPE_SND;
                                END IF;
                                MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_SO_DEMAND: '||lv_message);
                                lv_total_demand_batches := lv_total_demand_batches + 1;
                                lv_task_not_completed := lv_task_not_completed + 1;
                              END LOOP;

                              CREATE_INDEXES('SO');
                            ELSE
                                lv_message := to_char(TASK_SO_DEMAND)||','||to_char(0);
                                DBMS_PIPE.PACK_MESSAGE(lv_message );
                                IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                                   RAISE EX_PIPE_SND;
                                 END IF;
                                 MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_SO_DEMAND: '||lv_message);
                                 lv_total_demand_batches := lv_total_demand_batches + 1;
                                 lv_task_not_completed := lv_task_not_completed + 1;
                                 END IF;

                            CLOSE c2;
                          EXCEPTION
                            when others then
                            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Error in Sales Order Demands Batch ID generation: ' || SQLERRM);
                            lv_message := to_char(TASK_SO_DEMAND)||','||to_char(0);
                            DBMS_PIPE.PACK_MESSAGE(lv_message );
                            IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                              RAISE EX_PIPE_SND;
                             END IF;
                            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_SO_DEMAND: '||lv_message);
                            lv_total_demand_batches := lv_total_demand_batches + 1;
                            lv_task_not_completed := lv_task_not_completed + 1;

                          END;

                          END;

                  ELSE -- demand is not enabled
                  -- kludge to launch the dependent tasks even if
                  -- demand  is not enabled for processing

                      lv_message := to_char(TASK_SO_DEMAND)||','||to_char(0);
                      DBMS_PIPE.PACK_MESSAGE(lv_message );
                       IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                            RAISE EX_PIPE_SND;
                       END IF;
                      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_SO_DEMAND: '||lv_message);
                       lv_total_demand_batches := lv_total_demand_batches + 1;
                       lv_task_not_completed   := lv_task_not_completed + 1;

                  END IF; -- Demand is not enabled

               /* ELSIF lv_task_number= TASK_SO_DEMAND THEN

                    lv_demand_batches_completed := lv_demand_batches_completed + 1;

                       IF lv_demand_batches_completed = lv_total_demand_batches THEN

                          lv_message := to_char(TASK_RESERVATION);
                          DBMS_PIPE.PACK_MESSAGE(lv_message);
                          IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                               RAISE EX_PIPE_SND;
                          END IF;
                          LOG_MESSAGE('TASK_RESERVATION: '||lv_message);

                          lv_task_not_completed := lv_task_not_completed + 1;
                        END IF; -- all SO batches completed
                 */ -- task_reservation has been shifted to monitor

                ELSIF lv_task_number= TASK_DEPT_RESOURCES THEN

                        lv_message := to_char(TASK_BOM_ROUTING);
                        DBMS_PIPE.PACK_MESSAGE(lv_message);
                        IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                             RAISE EX_PIPE_SND;
                        END IF;
                        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_BOM_ROUTING: '||lv_message);

                        lv_task_not_completed := lv_task_not_completed + 1;



                ELSIF lv_task_number= TASK_BOM_ROUTING THEN

                        lv_message := to_char(TASK_RESOURCE_DEMAND);
                        DBMS_PIPE.PACK_MESSAGE(lv_message);
                        IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                             RAISE EX_PIPE_SND;
                        END IF;
                        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_RESOURCE_DEMAND: '||lv_message);

                        lv_task_not_completed := lv_task_not_completed + 1;

                         lv_message := to_char(TASK_IRO);
                        DBMS_PIPE.PACK_MESSAGE(lv_message);
                        IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                             RAISE EX_PIPE_SND;
                        END IF;

                        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_IRO: '||lv_message);
                        lv_task_not_completed := lv_task_not_completed + 1;

                        lv_message := to_char(TASK_ERO);
                        DBMS_PIPE.PACK_MESSAGE(lv_message);
                        IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                             RAISE EX_PIPE_SND;
                        END IF;
                        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_ERO: '||lv_message);
                        lv_task_not_completed := lv_task_not_completed + 1;



             --  END IF; -- lv_task_number= TASK_ITEM/ lv_task_number= TASK_DEPT_RESOURCES

                ELSIF lv_task_number= TASK_CATEGORIES_SOURCING  THEN

                      IF p_level_value_enabled = SYS_YES THEN
                          -- divide level values into batches and put each batch
                          -- in the task pipe so that these can be picked up by the workers
                          BEGIN

                          DECLARE
                            TYPE RowidTab IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
                            lb_rowid       RowidTab;
                            lb_batch       NumTblTyp := NumTblTyp(0);
                            lv_batch_id    PLS_INTEGER;
                            lv_batch_start PLS_INTEGER;
                            lv_batch_last  PLS_INTEGER;

                            cursor c2 is SELECT rowid FROM msd_st_level_values
                            WHERE  PROCESS_FLAG IN(G_IN_PROCESS,G_ERROR_FLG)
                            AND    NVL(batch_id,NULL_VALUE) = NULL_VALUE
                            AND    sr_instance_code   = v_instance_code;

                          BEGIN

                            OPEN c2;
                            FETCH c2 BULK COLLECT INTO lb_rowid ;

                            IF c2%ROWCOUNT > 0  THEN

                              SELECT msc_st_batch_id_s.NEXTVAL INTO lv_batch_id FROM dual;
                              lv_batch_start := lv_batch_id;
                              lb_batch.extend(lb_rowid.count);

                              FOR j IN lb_rowid.FIRST..lb_rowid.LAST LOOP

                                lb_batch(j):= lv_batch_id;
                                IF MOD(j,v_batch_size) = 0 THEN
                                   SELECT msc_st_batch_id_s.NEXTVAL INTO lv_batch_id FROM dual;
                                END IF;

                              END LOOP;

                              lv_batch_last := lv_batch_id;

                              FORALL j IN lb_rowid.FIRST..lb_rowid.LAST
                              UPDATE msd_st_level_values
                                 SET batch_id = lb_batch(j)
                                 WHERE  rowid = lb_rowid(j);

                              commit;

                              -- send out the batches to the workers' task Pipe

                              FOR j in lv_batch_start..lv_batch_last LOOP
                                lv_message := to_char(TASK_LEVEL_VALUE)||','||to_char(j);
                                DBMS_PIPE.PACK_MESSAGE(lv_message);
                                IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                                    RAISE EX_PIPE_SND;
                                END IF;
                                MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_SO_DEMAND: '||lv_message);
                                lv_total_lvalue_batches := lv_total_lvalue_batches + 1;
                                lv_task_not_completed := lv_task_not_completed + 1;
                              END LOOP;
                           -- CREATE_INDEXES('LEVEL_VALUE');
                            ELSE
                                lv_message := to_char(TASK_LEVEL_VALUE)||','||to_char(0);
                                DBMS_PIPE.PACK_MESSAGE(lv_message );
                                IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                                   RAISE EX_PIPE_SND;
                                 END IF;
                                 MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_LEVEL_VALUE: '||lv_message);
                                 lv_total_lvalue_batches := lv_total_lvalue_batches + 1;
                                 lv_task_not_completed    := lv_task_not_completed + 1;
                                 END IF;

                            CLOSE c2;

                          EXCEPTION
                            when others then
                            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'Error in Batch ID generation: ' || SQLERRM);
                            lv_message := to_char(TASK_LEVEL_VALUE)||','||to_char(0);
                            DBMS_PIPE.PACK_MESSAGE(lv_message );
                            IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                              RAISE EX_PIPE_SND;
                             END IF;
                            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_LEVEL_VALUE: '||lv_message);
                            lv_total_lvalue_batches := lv_total_lvalue_batches + 1;
                            lv_task_not_completed   := lv_task_not_completed + 1;

                           END;
                       END ;

                  ELSE -- level_value is not enabled
                  -- kludge to launch the dependent tasks even if
                  -- level_value  is not enabled for processing

                      lv_message := to_char(TASK_LEVEL_VALUE)||','||to_char(0);
                      DBMS_PIPE.PACK_MESSAGE(lv_message );
                       IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                            RAISE EX_PIPE_SND;
                       END IF;
                      MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'TASK_LEVEL_VALUE: '||lv_message);
                       lv_total_lvalue_batches     := lv_total_lvalue_batches + 1;
                       lv_task_not_completed       := lv_task_not_completed + 1;

                     END IF;	-- Level Value is not enabled

               ELSIF lv_task_number= TASK_LEVEL_VALUE THEN
                      lv_lvalue_batches_completed  := lv_lvalue_batches_completed+1 ;

                       IF lv_lvalue_batches_completed = lv_total_lvalue_batches THEN


                           IF v_level_assoc_enabled = SYS_YES THEN
                             DIVIDE_BATCHES (p_table_name  => 'MSD_ST_LEVEL_ASSOCIATIONS' ,
                                             p_task_name   => TASK_LEVEL_ASSOCIATION,
                                             p_task_not_completed =>lv_task_not_completed,
                                             p_pipe_status => lv_pipe_status );
                              IF(lv_pipe_status = 1) THEN
                                   RAISE EX_PIPE_SND;
                              END IF;
                           END IF;


                           IF v_booking_enabled = SYS_YES THEN
                             DIVIDE_BATCHES (p_table_name  => 'MSD_ST_BOOKING_DATA' ,
                                             p_task_name   => TASK_BOOKING_DATA,
                                             p_task_not_completed =>lv_task_not_completed,
                                             p_pipe_status => lv_pipe_status );
                              IF(lv_pipe_status = 1) THEN
                                   RAISE EX_PIPE_SND;
                              END IF;

                           END IF;

                           IF v_shipment_enabled = SYS_YES THEN
                             DIVIDE_BATCHES (p_table_name  => 'MSD_ST_SHIPMENT_DATA' ,
                                             p_task_name   => TASK_SHIPMENT_DATA,
                                             p_task_not_completed =>lv_task_not_completed,
                                             p_pipe_status => lv_pipe_status );
                              IF(lv_pipe_status = 1) THEN
                                   RAISE EX_PIPE_SND;
                              END IF;
                            END IF;

                           IF v_mfg_fct_enabled = SYS_YES THEN
                             DIVIDE_BATCHES (p_table_name  => 'MSD_ST_MFG_FORECAST' ,
                                             p_task_name   => TASK_MFG_FORECAST,
                                             p_task_not_completed =>lv_task_not_completed,
                                             p_pipe_status => lv_pipe_status );
                              IF(lv_pipe_status = 1) THEN
                                   RAISE EX_PIPE_SND;
                              END IF;
                            END IF;

                           IF v_list_price_enabled = SYS_YES THEN
                             DIVIDE_BATCHES (p_table_name  => 'MSD_ST_PRICE_LIST' ,
                                             p_task_name   => TASK_PRICE_LIST,
                                             p_task_not_completed =>lv_task_not_completed,
                                             p_pipe_status => lv_pipe_status );

                              IF(lv_pipe_status = 1) THEN
                                   RAISE EX_PIPE_SND;
                              END IF;
/*
                             DIVIDE_BATCHES (p_table_name  => 'MSD_ST_ITEM_LIST_PRICE' ,
                                             p_task_name   => TASK_ITEM_LIST_PRICE,
                                             p_task_not_completed =>lv_task_not_completed,
                                             p_pipe_status => lv_pipe_status );

                              IF(lv_pipe_status = 1) THEN
                                   RAISE EX_PIPE_SND;
                              END IF;
*/
                           END IF;

                          IF v_cs_data_enabled = SYS_YES THEN
                             DIVIDE_BATCHES (p_table_name  => 'MSD_ST_CS_DATA' ,
                                             p_task_name   => TASK_CS_DATA,
                                             p_task_not_completed =>lv_task_not_completed,
                                             p_pipe_status => lv_pipe_status );

                              IF(lv_pipe_status = 1) THEN
                                   RAISE EX_PIPE_SND;
                              END IF;

                              END IF;

                           IF v_curr_conv_enabled = SYS_YES THEN
                             DIVIDE_BATCHES (p_table_name  => 'MSD_ST_CURRENCY_CONVERSIONS' ,
                                             p_task_name   => TASK_CURR_CONV,
                                             p_task_not_completed =>lv_task_not_completed,
                                             p_pipe_status => lv_pipe_status );
                              IF(lv_pipe_status = 1) THEN
                                   RAISE EX_PIPE_SND;
                              END IF;

                           END IF;

                           IF v_uom_conv_enabled = SYS_YES THEN
                             DIVIDE_BATCHES (p_table_name  => 'MSD_ST_UOM_CONVERSIONS' ,
                                             p_task_name   => TASK_DP_UOM_CONV,
                                             p_task_not_completed =>lv_task_not_completed,
                                             p_pipe_status => lv_pipe_status );
                              IF(lv_pipe_status = 1) THEN
                                   RAISE EX_PIPE_SND;
                              END IF;
                            END IF;  --v_dp_uom_conv_enabled

                    END IF;  -- all level value batch completed

                  END IF ; --lv_task_number = TASK_ITEM


                IF lv_task_not_completed= 0 THEN
                    EXIT;
                END IF;

              ELSE -- lv_task_number is not greater than 0

                  EXIT;

                  /* not required since worker always send unresolvable errors
                  ** even if we enable this how do we get the batch id ?
                  EXIT WHEN lv_task_number= UNRESOVLABLE_ERROR;
                  lv_message := to_char (-lv_task_number);
                  DBMS_PIPE.PACK_MESSAGE(lv_message);  -- resend the task to the task que
                  IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
                       RAISE EX_PIPE_SND;
                  END IF;
                  */

              END IF; -- lv_task_number > 0

           END IF; -- DBMS_PIPE.next_item_type <> 0

         ELSIF lv_pipe_ret_code <> 1 THEN --  not time out, either 2 (record too big for buffer) or 3 (interuppted)

              RAISE EX_PIPE_RCV;

         END IF;

         -- ============= Check the execution time ==============

         select (SYSDATE- START_TIME) into lv_process_time from dual;

         IF lv_process_time > p_timeout/1440.0 THEN Raise EX_PROCESS_TIME_OUT;  END IF;

     END LOOP;

     lv_check_point:= 3;

     if p_reserve_enabled =SYS_YES then
      LOAD_RESERVATION;
     end if ;

     IF lv_task_not_completed > 0 THEN

        DBMS_PIPE.PURGE( v_pipe_task_que);

        lv_task_number:= -1;

        ROLLBACK;

        FND_MESSAGE.SET_NAME('MSC', 'MSC_PP_FAIL');
        ERRBUF:= FND_MESSAGE.GET;
        RETCODE := G_ERROR;
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS, ERRBUF);

     ELSE

        lv_task_number:= TASK_ALL_COMPLETED;

        UPDATE MSC_APPS_INSTANCES mai
           SET LAST_UPDATE_DATE= v_current_date,
               LAST_UPDATED_BY= v_current_user,
               REQUEST_ID= FND_GLOBAL.CONC_REQUEST_ID
         WHERE mai.INSTANCE_ID= v_instance_id;

        FND_MESSAGE.SET_NAME('MSC', 'MSC_PP_SUCCEED');
        ERRBUF:= FND_MESSAGE.GET;
        RETCODE := G_SUCCESS;
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS, ERRBUF);

        FINAL;

     END IF;

     IF SET_ST_STATUS( ERRBUF, RETCODE, p_instance_id, G_ST_READY) THEN
         NULL;
     END IF;

     FOR lc_i IN 1..p_total_worker_num LOOP

        lv_message := to_char(lv_task_number);
        DBMS_PIPE.PACK_MESSAGE( lv_message);
        IF DBMS_PIPE.SEND_MESSAGE( v_pipe_task_que)<>0 THEN
            RAISE EX_PIPE_SND;
        END IF;
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,'v_pipe_task_que: '||lv_message);

     END LOOP;

     lv_worker_committed:= 0;

     lv_start_time:= SYSDATE;

     LOOP

        lv_pipe_ret_code:= DBMS_PIPE.RECEIVE_MESSAGE( v_pipe_status, PIPE_TIME_OUT);

        IF lv_pipe_ret_code=0 THEN

           lv_worker_committed:= lv_worker_committed+1;

           EXIT WHEN lv_worker_committed= p_total_worker_num;

        ELSIF lv_pipe_ret_code<> 1 THEN
           RAISE EX_PIPE_RCV;   -- If the error is not time-out error
        END IF;

         -- WHY ?
         -- SELECT (SYSDATE- lv_start_time) INTO lv_process_time FROM dual;
         -- EXIT WHEN lv_process_time > 10.0/1440.0;   -- wait for 10 minutes

     END LOOP;

     IF lv_worker_committed<> p_total_worker_num THEN

        FND_MESSAGE.SET_NAME('MSC', 'MSC_PP_FAIL_TO_COMMIT');
        ERRBUF:= FND_MESSAGE.GET;
        RETCODE := G_ERROR;

     END IF;

     IF RETCODE= G_ERROR THEN RETURN; END IF;

     -- send error/ warning emails for the errors/ warnings encountered
     -- during pre processing
     -- SEND_ERROR ;

     -- get current ERROR_ID from MSC_ERRORS
     IF (nvl(v_parent_request_id,-1) < 1) THEN
         select max(ERROR_ID) into v_error_no_end from MSC_ERRORS;
     END IF;

     -- write summary of errors and warning encountered into log
     WRITE_ERROR_SUMM_LOG(nvl(v_parent_request_id,-1));

     DROP_INDEXES;

    END IF; --Handling of New Request and calendar sub-request completes

    LAUNCH_DELETE_DUPLICATES(ERRBUF =>ERRBUF , RETCODE => RETCODE) ;

    LAUNCH_DP_PULL(ERRBUF =>ERRBUF , RETCODE => RETCODE) ;

     IF ( ( nvl(RETCODE,-1) <> G_WARNING) AND ( nvl(RETCODE,-1) <> G_ERROR) ) THEN

       OPEN Warn_Flag;
         FETCH Warn_Flag INTO v_warning_flag;
       CLOSE Warn_Flag;

       IF v_warning_flag=SYS_YES THEN
          RETCODE:= G_WARNING;
       ELSE
          RETCODE := G_SUCCESS;
       END IF;

     END IF;

     --Exit the program if Level Values is submitted as a child request and then
     --resume the processing when the processing of Level values is completed.
     IF nvl(fnd_conc_global.request_data,G_NEW_REQUEST) = G_DP_LV_REQ_DATA THEN
       RETURN;
     END IF;

    -- OA Self Service load changes
    -- If request id is not -1 or null then pre-processor is called from OA
    -- launch ODS load if this instance of pre-processor is called from OA
    -- bug# 2383498 - always launch ODS load for DP
    -- IF ((nvl(v_parent_request_id,-1) > 0) OR (p_calling_module = G_DP AND v_bom_enabled = SYS_YES)) THEN
    IF ((nvl(v_parent_request_id,-1) > 0) OR (p_calling_module = G_DP)) THEN
       lv_monitor_id := fnd_request.submit_request('MSC',
                                                  'MSCPDC',
                                                  NULL,
                                                  NULL,
                                                  TRUE,
                                                  v_instance_id,
                                                  p_timeout,
                                                  p_total_worker_num,
                                                  p_resources_enabled,
                                                  SYS_NO,
                                                  SYS_NO);


      IF lv_monitor_id <> 0 THEN
        fnd_conc_global.set_req_globals(conc_status => 'PAUSED',
                                     request_data => to_char(G_ODS_REQ_DATA)) ;
        FND_MESSAGE.SET_NAME('MSC', 'MSC_PP_WORKER_REQUEST_ID');
        FND_MESSAGE.SET_TOKEN('REQUEST_ID', lv_monitor_id);
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,FND_MESSAGE.GET);
      END IF;

      commit;

    END IF;

     EXCEPTION --  LAUNCH_MONITOR

     WHEN EX_PIPE_RCV THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_FATAL_ERR,dbms_utility.format_error_stack);
        ROLLBACK;

        IF lv_check_point> 1 THEN
            IF SET_ST_STATUS( ERRBUF, RETCODE, p_instance_id, G_ST_READY) THEN
               NULL;
            END IF;
            DROP_INDEXES;
        END IF;

        RETCODE := G_ERROR;
        FND_MESSAGE.SET_NAME('MSC', 'MSC_MSG_RCV_FAIL');
        FND_MESSAGE.SET_TOKEN('PIPE', v_pipe_wm);
        ERRBUF:= FND_MESSAGE.GET;
        RETCODE := G_ERROR;
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_FATAL_ERR, ERRBUF);

        IF lv_check_point < 3 THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_PP_FAIL');
            ERRBUF:= FND_MESSAGE.GET;
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,ERRBUF);
        END IF;

        COMMIT;

      WHEN EX_PIPE_SND THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_FATAL_ERR,dbms_utility.format_error_stack);
        ROLLBACK;

        IF lv_check_point> 1 THEN
            IF SET_ST_STATUS( ERRBUF, RETCODE, p_instance_id, G_ST_READY) THEN
               NULL;
            END IF;
            DROP_INDEXES;
        END IF;

        FND_MESSAGE.SET_NAME('MSC', 'MSC_MSG_SEND_FAIL');
        FND_MESSAGE.SET_TOKEN('PIPE', v_pipe_wm);
        ERRBUF:= FND_MESSAGE.GET;
        RETCODE := G_ERROR;
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_FATAL_ERR,ERRBUF);

        IF lv_check_point < 3 THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_PP_FAIL');
            ERRBUF:= FND_MESSAGE.GET;
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS,ERRBUF);
        END IF;

        COMMIT;

      WHEN EX_PROCESS_TIME_OUT THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_FATAL_ERR,dbms_utility.format_error_stack);
        ROLLBACK;

        IF lv_check_point> 1 THEN
            IF SET_ST_STATUS( ERRBUF, RETCODE, p_instance_id, G_ST_READY) THEN
               NULL;
            END IF;
            DROP_INDEXES;
        END IF;

        FND_MESSAGE.SET_NAME('MSC', 'MSC_TIMEOUT');
        ERRBUF:= FND_MESSAGE.GET;
        RETCODE := G_ERROR;
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_FATAL_ERR,ERRBUF);

        IF lv_check_point < 3 THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_PP_FAIL');
            ERRBUF:= FND_MESSAGE.GET;
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS, ERRBUF);
        END IF;

        COMMIT;


      WHEN others THEN
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_FATAL_ERR,dbms_utility.format_error_stack);
        ROLLBACK;

        IF lv_check_point> 1 THEN
            IF SET_ST_STATUS( ERRBUF, RETCODE, p_instance_id, G_ST_READY) THEN
               NULL;
            END IF;
        END IF;

        ERRBUF  := SQLERRM;
        RETCODE := G_ERROR;
        MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_FATAL_ERR,ERRBUF);

        IF lv_check_point < 3 THEN
            FND_MESSAGE.SET_NAME('MSC', 'MSC_PP_FAIL');
            ERRBUF:= FND_MESSAGE.GET;
            MSC_UTIL.LOG_MSG(MSC_UTIL.G_LVL_STATUS, ERRBUF);
        END IF;

        COMMIT;

   END LAUNCH_MONITOR;

END MSC_CL_PRE_PROCESS;

/
