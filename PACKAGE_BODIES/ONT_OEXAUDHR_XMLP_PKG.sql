--------------------------------------------------------
--  DDL for Package Body ONT_OEXAUDHR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."ONT_OEXAUDHR_XMLP_PKG" AS
/* $Header: OEXAUDHRB.pls 120.1 2007/12/25 07:08:10 npannamp noship $ */
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    IF P_END_DATE IS NOT NULL THEN
      P_WHERE := P_WHERE || ' and trunc(a.hist_creation_date,''DD'') <= trunc(:p_end_date,''DD'' ) ';
    END IF;
    IF P_ENTITY_ID IS NOT NULL THEN
      P_WHERE := P_WHERE || ' and a.entity_id = :p_entity_id ';
    END IF;
    IF P_ATTRIBUTE_ID IS NOT NULL THEN
      P_WHERE := P_WHERE || ' and a.attribute_id = :p_attribute_id ';
    END IF;
    IF P_ORDER_FROM IS NOT NULL AND P_ORDER_TO IS NOT NULL THEN
      P_WHERE := P_WHERE || ' and a.order_number between :p_order_from and :p_order_to ';
    ELSIF P_ORDER_FROM IS NOT NULL AND P_ORDER_TO IS NULL THEN
      P_WHERE := P_WHERE || ' and a.order_number >= :p_order_from ';
    ELSIF P_ORDER_FROM IS NULL AND P_ORDER_TO IS NOT NULL THEN
      P_WHERE := P_WHERE || ' and a.order_number <= :p_order_to ';
    END IF;
    IF P_USER_ID IS NOT NULL THEN
      P_WHERE := P_WHERE || ' and a.user_id = :p_user_id ';
    END IF;
    IF P_RESP_ID IS NOT NULL THEN
      P_WHERE := P_WHERE || ' and a.responsibility_id = :p_resp_id ';
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CF_NO_DATA_FOUND1FORMULA(ORDER_NUMBER1 IN NUMBER) RETURN NUMBER IS
  BEGIN
    CP_NO_DATA_FOUND := ORDER_NUMBER1;
    RETURN (0);
  END CF_NO_DATA_FOUND1FORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        BEGIN
          /*SRW.MESSAGE(1
                     ,'FAILED IN BEFORE REPORT TRIGGER')*/NULL;
          /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
          RETURN (FALSE);
        END;
    END;
    IF OE_CODE_CONTROL.GET_CODE_RELEASE_LEVEL < '110508' THEN
      /*SRW.MESSAGE(90000
                 ,'This report is currently not available')*/NULL;
      RETURN (FALSE);
    END IF;
    BEGIN
      DECLARE
        L_REPORT_NAME VARCHAR2(240);
      BEGIN
        SELECT
          CP.USER_CONCURRENT_PROGRAM_NAME
        INTO L_REPORT_NAME
        FROM
          FND_CONCURRENT_PROGRAMS_VL CP,
          FND_CONCURRENT_REQUESTS CR
        WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
          AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
          AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
        CP_REPORT_NAME := L_REPORT_NAME;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          CP_REPORT_NAME := 'Audit History Report';
      END;
      DECLARE
        L_ENTITY_DISPLAY_NAME VARCHAR2(100);
      BEGIN
        SELECT
          ENTITY_DISPLAY_NAME
        INTO L_ENTITY_DISPLAY_NAME
        FROM
          OE_PC_ENTITIES_V
        WHERE ENTITY_ID = P_ENTITY_ID;
        CP_ENTITY_NAME := '(' || L_ENTITY_DISPLAY_NAME || ')';
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          CP_ENTITY_NAME := NULL;
      END;
      DECLARE
        L_USER_NAME VARCHAR2(80);
      BEGIN
        SELECT
          USER_NAME
        INTO L_USER_NAME
        FROM
          FND_USER
        WHERE USER_ID = P_USER_ID;
        CP_USER_NAME := L_USER_NAME;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          CP_USER_NAME := NULL;
      END;
      DECLARE
        L_RESPONSIBILITY_NAME VARCHAR2(240);
      BEGIN
        SELECT
          RESPONSIBILITY_NAME
        INTO L_RESPONSIBILITY_NAME
        FROM
          FND_RESPONSIBILITY_TL
        WHERE RESPONSIBILITY_ID = P_RESP_ID
          AND LANGUAGE = USERENV('LANG');
        CP_RESPONSIBILITY_NAME := L_RESPONSIBILITY_NAME;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          CP_RESPONSIBILITY_NAME := NULL;
      END;
      DECLARE
        L_ATTRIBUTE_DISPLAY_NAME VARCHAR2(100);
      BEGIN
        SELECT
          ATTRIBUTE_DISPLAY_NAME
        INTO L_ATTRIBUTE_DISPLAY_NAME
        FROM
          OE_PC_ATTRIBUTES_V
        WHERE ATTRIBUTE_ID = P_ATTRIBUTE_ID;
        CP_ATTRIBUTE_NAME := '(' || L_ATTRIBUTE_DISPLAY_NAME || ')';
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          CP_ATTRIBUTE_NAME := NULL;
      END;
      DECLARE
        L_SOB_NAME VARCHAR2(240);
      BEGIN
        SELECT
          SOB.NAME
        INTO L_SOB_NAME
        FROM
          GL_SETS_OF_BOOKS SOB
        WHERE SOB.SET_OF_BOOKS_ID = P_SOB_ID;
        RP_COMPANY_NAME := L_SOB_NAME;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RP_COMPANY_NAME := NULL;
      END;
    END;
    LP_END_DATE:=to_char(P_END_DATE,'DD-MON-YY');
    LP_START_DATE:=to_char(P_START_DATE,'DD-MON-YY');
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_1FORMULA(EID IN NUMBER
                      ,LINEID1 IN NUMBER) RETURN VARCHAR2 IS
    T_LINE_NO NUMBER;
    T_SHIP_NO NUMBER;
    T_OPTION_NO NUMBER;
    T_COMPONENT_NO NUMBER;
    T_SERVICE_NO NUMBER;
    T_CONCATED_VALUE VARCHAR2(20);
  BEGIN
    IF EID = 2 THEN
      BEGIN
        SELECT
          LINE_NUMBER,
          SHIPMENT_NUMBER,
          OPTION_NUMBER,
          COMPONENT_NUMBER,
          SERVICE_NUMBER
        INTO T_LINE_NO,T_SHIP_NO,T_OPTION_NO,T_COMPONENT_NO,T_SERVICE_NO
        FROM
          OE_ORDER_LINES_ALL
        WHERE LINE_ID = LINEID1;
      EXCEPTION
        WHEN OTHERS THEN
          RETURN NULL;
      END;
    ELSIF EID = 7 THEN
      BEGIN
        SELECT
          LINE_NUMBER,
          SHIPMENT_NUMBER,
          OPTION_NUMBER,
          COMPONENT_NUMBER,
          SERVICE_NUMBER
        INTO T_LINE_NO,T_SHIP_NO,T_OPTION_NO,T_COMPONENT_NO,T_SERVICE_NO
        FROM
          OE_ORDER_LINES_ALL
        WHERE LINE_ID = (
          SELECT
            DISTINCT
            LINE_ID
          FROM
            OE_SALES_CREDITS
          WHERE SALES_CREDIT_ID = LINEID1 );
      EXCEPTION
        WHEN OTHERS THEN
          RETURN NULL;
      END;
    ELSIF EID = 8 THEN
      BEGIN
        SELECT
          LINE_NUMBER,
          SHIPMENT_NUMBER,
          OPTION_NUMBER,
          COMPONENT_NUMBER,
          SERVICE_NUMBER
        INTO T_LINE_NO,T_SHIP_NO,T_OPTION_NO,T_COMPONENT_NO,T_SERVICE_NO
        FROM
          OE_ORDER_LINES_ALL
        WHERE LINE_ID = (
          SELECT
            DISTINCT
            LINE_ID
          FROM
            OE_PRICE_ADJUSTMENTS
          WHERE PRICE_ADJUSTMENT_ID = LINEID1 );
      EXCEPTION
        WHEN OTHERS THEN
          RETURN NULL;
      END;
    ELSE
      RETURN NULL;
    END IF;
    IF T_SERVICE_NO IS NOT NULL THEN
      IF T_OPTION_NO IS NOT NULL THEN
        IF T_COMPONENT_NO IS NOT NULL THEN
          T_CONCATED_VALUE := T_LINE_NO || '.' || T_SHIP_NO || '.' || T_OPTION_NO || '.' || T_COMPONENT_NO || '.' || T_SERVICE_NO;
        ELSE
          T_CONCATED_VALUE := T_LINE_NO || '.' || T_SHIP_NO || '.' || T_OPTION_NO || '..' || T_SERVICE_NO;
        END IF;
      ELSE
        IF T_COMPONENT_NO IS NOT NULL THEN
          T_CONCATED_VALUE := T_LINE_NO || '.' || T_SHIP_NO || '..' || T_COMPONENT_NO || '.' || T_SERVICE_NO;
        ELSE
          T_CONCATED_VALUE := T_LINE_NO || '.' || T_SHIP_NO || '...' || T_SERVICE_NO;
        END IF;
      END IF;
    ELSE
      IF T_OPTION_NO IS NOT NULL THEN
        IF T_COMPONENT_NO IS NOT NULL THEN
          T_CONCATED_VALUE := T_LINE_NO || '.' || T_SHIP_NO || '.' || T_OPTION_NO || '.' || T_COMPONENT_NO;
        ELSE
          T_CONCATED_VALUE := T_LINE_NO || '.' || T_SHIP_NO || '.' || T_OPTION_NO;
        END IF;
      ELSE
        IF T_COMPONENT_NO IS NOT NULL THEN
          T_CONCATED_VALUE := T_LINE_NO || '.' || T_SHIP_NO || '..' || T_COMPONENT_NO;
        ELSE
          IF (T_LINE_NO IS NULL AND T_SHIP_NO IS NULL) THEN
            T_CONCATED_VALUE := NULL;
          ELSE
            T_CONCATED_VALUE := T_LINE_NO || '.' || T_SHIP_NO;
          END IF;
        END IF;
      END IF;
    END IF;
    RETURN T_CONCATED_VALUE;
  END CF_1FORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  EXCEPTION
    WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
      /*SRW.MESSAGE(1
                 ,'FAILED IN AFTER REPORT TRIGGER')*/NULL;
      RETURN (FALSE);
  END AFTERREPORT;

  FUNCTION CP_NO_DATA_FOUND_P RETURN NUMBER IS
  BEGIN
    RETURN CP_NO_DATA_FOUND;
  END CP_NO_DATA_FOUND_P;

  FUNCTION CP_ATTRIBUTE_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ATTRIBUTE_NAME;
  END CP_ATTRIBUTE_NAME_P;

  FUNCTION CP_ENTITY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ENTITY_NAME;
  END CP_ENTITY_NAME_P;

  FUNCTION CP_REPORT_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_REPORT_NAME;
  END CP_REPORT_NAME_P;

  FUNCTION CP_USER_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_USER_NAME;
  END CP_USER_NAME_P;

  FUNCTION CP_RESPONSIBILITY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_RESPONSIBILITY_NAME;
  END CP_RESPONSIBILITY_NAME_P;

  FUNCTION RP_COMPANY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_COMPANY_NAME;
  END RP_COMPANY_NAME_P;

END ONT_OEXAUDHR_XMLP_PKG;


/
