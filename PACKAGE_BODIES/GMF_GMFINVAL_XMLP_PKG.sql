--------------------------------------------------------
--  DDL for Package Body GMF_GMFINVAL_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GMF_GMFINVAL_XMLP_PKG" AS
/* $Header: GMFINVALB.pls 120.0 2007/12/24 13:31:48 nchinnam noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_BASE_CURRENCY_CODE GMF_FISCAL_POLICIES.BASE_CURRENCY_CODE%TYPE;
    CURSOR CUR_CURRENCY_CODE(CP_LEGAL_ENTITY_ID IN GMF_FISCAL_POLICIES.LEGAL_ENTITY_ID%TYPE) IS
      SELECT
        BASE_CURRENCY_CODE
      FROM
        GMF_FISCAL_POLICIES
      WHERE LEGAL_ENTITY_ID = CP_LEGAL_ENTITY_ID;
  BEGIN
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    OPEN CUR_CURRENCY_CODE(P_LEGAL_ENTITY_ID);
    FETCH CUR_CURRENCY_CODE
     INTO L_BASE_CURRENCY_CODE;
    CLOSE CUR_CURRENCY_CODE;
    IF ((P_CURRENCY_CODE IS NULL) OR (P_CURRENCY_CODE = L_BASE_CURRENCY_CODE)) THEN
      P_CURRENCY_CODE := L_BASE_CURRENCY_CODE;
      P_EXCHANGE_RATE := 1;
    ELSE
      IF (P_EXCHANGE_RATE IS NULL) THEN
        FND_MESSAGE.SET_NAME('GMF'
                            ,'GMF_SRS_EFC_NO_XCHG');
        /*SRW.MESSAGE(100
                   ,FND_MESSAGE.GET)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      END IF;
    END IF;
    RETURN (TRUE);
  END BEFOREREPORT;
  PROCEDURE HEADER IS
  BEGIN
    NULL;
  END HEADER;
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    select argument7 into P_CURRENT from FND_CONCURRENT_REQUESTS where request_id=P_CONC_REQUEST_ID;
    FROM_ORGN_CODE := GMF_UTILITIES_GRP.GET_ORGANIZATION_CODE(P_FROM_ORGANIZATION_ID);
    TO_ORGN_CODE := GMF_UTILITIES_GRP.GET_ORGANIZATION_CODE(P_TO_ORGANIZATION_ID);
    FROM_ITEM_NUM := GMF_UTILITIES_GRP.GET_ITEM_NUMBER(P_FROM_ITEM_ID
                                                      ,P_ORGANIZATION_CONTEXT);
    TO_ITEM_NUM := GMF_UTILITIES_GRP.GET_ITEM_NUMBER(P_TO_ITEM_ID
                                                    ,P_ORGANIZATION_CONTEXT);
    IF FROM_ORGN_CODE > TO_ORGN_CODE THEN
      FND_MESSAGE.SET_NAME('GMF'
                          ,'CM_FRMWHSECODE_TOWHSECODE');
      /*SRW.MESSAGE(100
                 ,FND_MESSAGE.GET)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    IF FROM_ITEM_NUM > TO_ITEM_NUM THEN
      FND_MESSAGE.SET_NAME('GMF'
                          ,'CM_FRMITEM_LTE_TOITM');
      /*SRW.MESSAGE(100
                 ,FND_MESSAGE.GET)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    CURRENT_DUMMY := P_CURRENT;
    IF (P_CURRENT = 'N') THEN
      P_CURRENT := NULL;
    END IF;
    IF P_PERIOD_YEAR IS NOT NULL AND P_PERIOD_NUM IS NOT NULL THEN
      IF P_CURRENT IS NULL THEN
        Q1ORQ2 := '2';
        RETURN (TRUE);
      END IF;
    END IF;
    IF P_CURRENT IS NOT NULL THEN
      IF P_PERIOD_YEAR IS NULL AND P_PERIOD_NUM IS NULL THEN
        Q1ORQ2 := '1';
        RETURN (TRUE);
      END IF;
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;
  FUNCTION UNITCOSTCFFORMULA(INVENTORY_ITEM_ID IN NUMBER
                            ,ORGANIZATION_ID IN NUMBER
                            ,TRANSDATE IN DATE) RETURN NUMBER IS
    L_RETURN NUMBER;
    L_RETURN_STATUS VARCHAR2(100);
    L_MSG_COUNT VARCHAR2(100);
    L_MSG_DATA VARCHAR2(100);
    L_COST_METHOD VARCHAR2(100);
    L_COST_COMPONENT_CLASS_ID NUMBER;
    L_COST_ANALYSIS_CODE VARCHAR2(100);
    L_UNIT_COST NUMBER;
    L_NO_OF_ROWS NUMBER;
    L_UOM_RATE NUMBER;
    CURSOR CUR_CMWHSE_ASC(V_ORGANIZATION_ID IN NUMBER,V_TRANS_DATE IN DATE) IS
      SELECT
        COST_ORGANIZATION_ID
      FROM
        CM_WHSE_ASC
      WHERE ORGANIZATION_ID = V_ORGANIZATION_ID
        AND EFF_START_DATE <= V_TRANS_DATE
        AND EFF_END_DATE >= V_TRANS_DATE
        AND DELETE_MARK = 0;
    X_COST_ORGANIZATION_ID MTL_PARAMETERS.ORGANIZATION_ID%TYPE;
    L_FROM_UOM MTL_SYSTEM_ITEMS_B.PRIMARY_UNIT_OF_MEASURE%TYPE;
    L_TO_UOM MTL_SYSTEM_ITEMS_B.PRIMARY_UNIT_OF_MEASURE%TYPE;
  BEGIN
    L_RETURN := GMF_CMCOMMON.GET_PROCESS_ITEM_COST(P_API_VERSION => 1.0
                                                  ,P_INIT_MSG_LIST => NULL
                                                  ,X_RETURN_STATUS => L_RETURN_STATUS
                                                  ,X_MSG_COUNT => L_MSG_COUNT
                                                  ,X_MSG_DATA => L_MSG_DATA
                                                  ,P_INVENTORY_ITEM_ID => INVENTORY_ITEM_ID
                                                  ,P_ORGANIZATION_ID => ORGANIZATION_ID
                                                  ,P_TRANSACTION_DATE => TRANSDATE
                                                  ,P_DETAIL_FLAG => 1
                                                  ,P_COST_METHOD => L_COST_METHOD
                                                  ,P_COST_COMPONENT_CLASS_ID => L_COST_COMPONENT_CLASS_ID
                                                  ,P_COST_ANALYSIS_CODE => L_COST_ANALYSIS_CODE
                                                  ,X_TOTAL_COST => L_UNIT_COST
                                                  ,X_NO_OF_ROWS => L_NO_OF_ROWS);
    OPEN CUR_CMWHSE_ASC(ORGANIZATION_ID,TRANSDATE);
    FETCH CUR_CMWHSE_ASC
     INTO X_COST_ORGANIZATION_ID;
    IF (CUR_CMWHSE_ASC%NOTFOUND) THEN
      X_COST_ORGANIZATION_ID := UNITCOSTCFFORMULA.ORGANIZATION_ID;
    ELSE
      IF NVL(X_COST_ORGANIZATION_ID
         ,-1) <> UNITCOSTCFFORMULA.ORGANIZATION_ID THEN
        BEGIN
          SELECT
            PRIMARY_UNIT_OF_MEASURE
          INTO L_FROM_UOM
          FROM
            MTL_SYSTEM_ITEMS
          WHERE INVENTORY_ITEM_ID = UNITCOSTCFFORMULA.INVENTORY_ITEM_ID
            AND ORGANIZATION_ID = X_COST_ORGANIZATION_ID;
        EXCEPTION
          WHEN OTHERS THEN
            L_FROM_UOM := NULL;
        END;
        BEGIN
          SELECT
            PRIMARY_UNIT_OF_MEASURE
          INTO L_TO_UOM
          FROM
            MTL_SYSTEM_ITEMS
          WHERE INVENTORY_ITEM_ID = UNITCOSTCFFORMULA.INVENTORY_ITEM_ID
            AND ORGANIZATION_ID = UNITCOSTCFFORMULA.ORGANIZATION_ID;
        EXCEPTION
          WHEN OTHERS THEN
            L_TO_UOM := NULL;
        END;
        INV_CONVERT.INV_UM_CONVERSION(FROM_UNIT => L_FROM_UOM
                                     ,TO_UNIT => L_TO_UOM
                                     ,ITEM_ID => UNITCOSTCFFORMULA.INVENTORY_ITEM_ID
                                     ,LOT_NUMBER => NULL
                                     ,ORGANIZATION_ID => UNITCOSTCFFORMULA.ORGANIZATION_ID
                                     ,UOM_RATE => L_UOM_RATE);
      END IF;
    END IF;
    CLOSE CUR_CMWHSE_ASC;
    IF L_UOM_RATE IS NOT NULL THEN
      L_UNIT_COST := L_UNIT_COST / L_UOM_RATE;
    END IF;
    UNITCOSTCP := ROUND(NVL(L_UNIT_COST,0) * P_EXCHANGE_RATE
                       ,8);
		      /* temp_gmt_insert('L_UNIT_COST',' '||L_UNIT_COST);
		      temp_gmt_insert('P_EXCHANGE_RATE',' '||P_EXCHANGE_RATE);
		       temp_gmt_insert('UNITCOSTCP',' '||UNITCOSTCP);*/
    RETURN (UNITCOSTCP);
  END UNITCOSTCFFORMULA;
  FUNCTION TOTALCOSTCFFORMULA(ITEM_PRIMARY_QUANTITY_CS IN NUMBER) RETURN NUMBER IS
  BEGIN
    TOTALCOSTCP := ROUND(UNITCOSTCP * ITEM_PRIMARY_QUANTITY_CS
                        ,8);
    RETURN (TOTALCOSTCP);
  END TOTALCOSTCFFORMULA;
  FUNCTION BALANCECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(BALANCECP)*/NULL;
    IF Q1ORQ2 = '1' THEN
      BALANCECP := 'Current Balances';
    ELSIF Q1ORQ2 = '2' THEN
      BALANCECP := 'Ending Balances for year ' || P_PERIOD_YEAR || ' and period ' || P_PERIOD_NUM;
    END IF;
    RETURN (BALANCECP);
  END BALANCECFFORMULA;
  FUNCTION CF_BASE_CURRENCYFORMULA RETURN VARCHAR2 IS
    L_BASE_CURRENCY_CODE GL_PLCY_MST.BASE_CURRENCY_CODE%TYPE;
    CURSOR CUR_CURRENCY_CODE(CP_LEGAL_ENTITY_ID IN GMF_FISCAL_POLICIES.LEGAL_ENTITY_ID%TYPE) IS
      SELECT
        BASE_CURRENCY_CODE
      FROM
        GMF_FISCAL_POLICIES
      WHERE LEGAL_ENTITY_ID = CP_LEGAL_ENTITY_ID;
  BEGIN
    OPEN CUR_CURRENCY_CODE(P_LEGAL_ENTITY_ID);
    FETCH CUR_CURRENCY_CODE
     INTO L_BASE_CURRENCY_CODE;
    CLOSE CUR_CURRENCY_CODE;
    RETURN (L_BASE_CURRENCY_CODE);
  END CF_BASE_CURRENCYFORMULA;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION ORGANIZATIONCPFORMULA(ORGANIZATIONCF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ORGANIZATIONCF)*/NULL;
  END ORGANIZATIONCPFORMULA;
  FUNCTION ITEMCPFORMULA(ITEMCF IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ITEMCF)*/NULL;
  END ITEMCPFORMULA;
  FUNCTION ITEMCFFORMULA RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(ITEMCP)*/NULL;
    IF FROM_ITEM_NUM IS NOT NULL AND TO_ITEM_NUM IS NOT NULL THEN
      ITEMCP := ' and iim.item_number >= ''' || FROM_ITEM_NUM || ''' and iim.item_number <= ''' || TO_ITEM_NUM || '''';
    ELSIF FROM_ITEM_NUM IS NULL AND TO_ITEM_NUM IS NULL THEN
      ITEMCP := 'and 1=1';
      FROM_ITEM_NUM := SY_ALL;
      TO_ITEM_NUM := SY_ALL;
    ELSIF FROM_ITEM_NUM IS NOT NULL AND TO_ITEM_NUM IS NULL THEN
      ITEMCP := ' and iim.item_number >= ''' || FROM_ITEM_NUM || '''';
      TO_ITEM_NUM := SY_ALL;
    ELSIF FROM_ITEM_NUM IS NULL AND TO_ITEM_NUM IS NOT NULL THEN
      ITEMCP := ' and iim.item_number <= ''' || TO_ITEM_NUM || '''';
      FROM_ITEM_NUM := SY_ALL;
    END IF;
    RETURN NULL;
  END ITEMCFFORMULA;
  FUNCTION ORGANIZATIONCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ORGANIZATIONCP)*/NULL;
    IF FROM_ORGN_CODE IS NOT NULL AND TO_ORGN_CODE IS NOT NULL THEN
      ORGANIZATIONCP := ' and mp.organization_code >= ''' || FROM_ORGN_CODE || ''' and mp.organization_code <= ''' || TO_ORGN_CODE || '''';
    ELSIF FROM_ORGN_CODE IS NULL AND TO_ORGN_CODE IS NULL THEN
      ORGANIZATIONCP := 'and 1=1';
      FROM_ORGN_CODE := SY_ALL;
      TO_ORGN_CODE := SY_ALL;
    ELSIF FROM_ORGN_CODE IS NOT NULL AND TO_ORGN_CODE IS NULL THEN
      ORGANIZATIONCP := ' and  mp.organization_code >= ''' || FROM_ORGN_CODE || '''';
      TO_ORGN_CODE := SY_ALL;
    ELSIF FROM_ORGN_CODE IS NULL AND TO_ORGN_CODE IS NOT NULL THEN
      ORGANIZATIONCP := ' and  mp.organization_code <= ''' || TO_ORGN_CODE || '''';
      FROM_ORGN_CODE := SY_ALL;
    END IF;
     RETURN NULL;
  END ORGANIZATIONCFFORMULA;
  FUNCTION LEGAL_ENTITY_NAME_CFFORMULA RETURN VARCHAR2 IS
    CURSOR CUR_LEGAL_ENTITY_NAME IS
      SELECT
        LEGAL_ENTITY_NAME
      FROM
        GMF_LEGAL_ENTITIES
      WHERE LEGAL_ENTITY_ID = P_LEGAL_ENTITY_ID;
    L_LEGAL_ENTITY_NAME GMF_LEGAL_ENTITIES.LEGAL_ENTITY_NAME%TYPE;
  BEGIN
    OPEN CUR_LEGAL_ENTITY_NAME;
    FETCH CUR_LEGAL_ENTITY_NAME
     INTO L_LEGAL_ENTITY_NAME;
    CLOSE CUR_LEGAL_ENTITY_NAME;
    RETURN (L_LEGAL_ENTITY_NAME);
  END LEGAL_ENTITY_NAME_CFFORMULA;
  FUNCTION TOTALCOSTCP_P RETURN NUMBER IS
  BEGIN
    RETURN TOTALCOSTCP;
  END TOTALCOSTCP_P;
  FUNCTION UNITCOSTCP_P RETURN NUMBER IS
  BEGIN
    RETURN UNITCOSTCP;
  END UNITCOSTCP_P;
  FUNCTION BALANCECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN BALANCECP;
  END BALANCECP_P;
  FUNCTION ORGANIZATIONCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ORGANIZATIONCP;
  END ORGANIZATIONCP_P;
  FUNCTION ITEMCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ITEMCP;
  END ITEMCP_P;
END GMF_GMFINVAL_XMLP_PKG;


/
