--------------------------------------------------------
--  DDL for Package Body XTR_XTRREVGL_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."XTR_XTRREVGL_XMLP_PKG" AS
/* $Header: XTRREVGLB.pls 120.1 2007/12/28 12:58:48 npannamp noship $ */
  FUNCTION BEGIN_FVFORMULA(COMPANY IN VARCHAR2
                          ,REF_NUMBER IN VARCHAR2
                          ,PERIOD_START IN DATE
                          ,DEAL_TYPE IN VARCHAR2) RETURN NUMBER IS
    L_B_FV NUMBER;
    CURSOR GET_B_FV IS
      SELECT
        SUM(A.FAIR_VALUE)
      FROM
        XTR_REVALUATION_DETAILS_SUM_V A,
        XTR_BATCHES B
      WHERE A.COMPANY_CODE = COMPANY
        AND A.COMPANY_CODE = B.COMPANY_CODE
        AND A.BATCH_ID = B.BATCH_ID
        AND A.REF_NUMBER = BEGIN_FVFORMULA.REF_NUMBER
        AND B.PERIOD_END < BEGIN_FVFORMULA.PERIOD_START
        AND A.REALIZED_FLAG = P_REALIZED_FLAG
      GROUP BY
        B.PERIOD_START
      ORDER BY
        B.PERIOD_START DESC;
    CURSOR GET_INT_FV IS
      SELECT
        SUM(INITIAL_FAIR_VALUE)
      FROM
        XTR_DEALS
      WHERE DEAL_NO = REF_NUMBER;
    CURSOR GET_NI_INT_FV IS
      SELECT
        SUM(INITIAL_FAIR_VALUE)
      FROM
        XTR_ROLLOVER_TRANSACTIONS
      WHERE DEAL_NUMBER = REF_NUMBER;
  BEGIN
    OPEN GET_B_FV;
    FETCH GET_B_FV
     INTO L_B_FV;
    CLOSE GET_B_FV;
    IF L_B_FV IS NULL THEN
      IF DEAL_TYPE not in ('ONC','EXP','IG','CA','IRS','NI') THEN
        OPEN GET_INT_FV;
        FETCH GET_INT_FV
         INTO L_B_FV;
        CLOSE GET_INT_FV;
      ELSIF DEAL_TYPE = 'NI' THEN
        OPEN GET_NI_INT_FV;
        FETCH GET_NI_INT_FV
         INTO L_B_FV;
        CLOSE GET_NI_INT_FV;
      END IF;
    END IF;
    RETURN (L_B_FV / NVL(P_UNIT
              ,1000));
  END BEGIN_FVFORMULA;

  FUNCTION END_FVFORMULA(COMPANY IN VARCHAR2
                        ,REF_NUMBER_1 IN VARCHAR2
                        ,PERIOD_END_1 IN DATE) RETURN NUMBER IS
    CURSOR GET_E_FV IS
      SELECT
        SUM(A.FAIR_VALUE)
      FROM
        XTR_REVALUATION_DETAILS_SUM_V A,
        XTR_BATCHES B
      WHERE A.COMPANY_CODE = COMPANY
        AND A.COMPANY_CODE = B.COMPANY_CODE
        AND A.BATCH_ID = B.BATCH_ID
        AND A.REF_NUMBER = REF_NUMBER_1
        AND B.PERIOD_END <= PERIOD_END_1
        AND A.REALIZED_FLAG = P_REALIZED_FLAG
      GROUP BY
        B.PERIOD_END
      ORDER BY
        B.PERIOD_END DESC;
    L_E_FV NUMBER;
  BEGIN
    OPEN GET_E_FV;
    FETCH GET_E_FV
     INTO L_E_FV;
    CLOSE GET_E_FV;
    RETURN (L_E_FV / NVL(P_UNIT
              ,1000));
  END END_FVFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    L_FACTOR NUMBER(15) := 1;
  BEGIN
    BEGIN
      IF P_FACTOR IS NOT NULL THEN
        SELECT
          DECODE(SUBSTR(P_FACTOR
                       ,1
                       ,1)
                ,'U'
                ,1
                ,'T'
                ,1000
                ,'M'
                ,1000000
                ,'B'
                ,100000000),
          MEANING
        INTO L_FACTOR,P_USER_FACTOR
        FROM
          FND_LOOKUPS
        WHERE LOOKUP_TYPE = 'XTR_FACTOR'
          AND LOOKUP_CODE = SUBSTR(P_FACTOR
              ,1
              ,1);
      ELSE
        L_FACTOR := 1000;
      END IF;
      P_UNIT := L_FACTOR;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    BEGIN
      IF P_REALIZED_FLAG IS NOT NULL THEN
        SELECT
          MEANING
        INTO Z2REALIZED_FLAG
        FROM
          FND_LOOKUPS
        WHERE LOOKUP_TYPE = 'XTR_MISC'
          AND LOOKUP_CODE = P_REALIZED_FLAG;

        IF P_REALIZED_FLAG = 'REAL' THEN
          P_REALIZED_FLAG := 'Y';
        ELSE
          P_REALIZED_FLAG := 'N';
        END IF;
      ELSE
        P_REALIZED_FLAG := 'N';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    BEGIN
      IF P_DEAL_TYPE IS NOT NULL AND P_DEAL_TYPE <> 'HEDGE' THEN
        SELECT
          USER_DEAL_TYPE
        INTO P_USER_DEAL_TYPE
        FROM
          XTR_DEAL_TYPES
        WHERE DEAL_TYPE = P_DEAL_TYPE;
      ELSIF P_DEAL_TYPE IS NOT NULL AND P_DEAL_TYPE = 'HEDGE' THEN
        SELECT
          MEANING
        INTO P_USER_DEAL_TYPE
        FROM
          FND_LOOKUPS
        WHERE LOOKUP_TYPE = 'XTR_HEDGE_MISC'
          AND LOOKUP_CODE = 'HEDGE';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    BEGIN
      IF P_GROUPBY IS NOT NULL THEN
        SELECT
          MEANING
        INTO P_USER_GROUPBY
        FROM
          FND_LOOKUPS
        WHERE LOOKUP_TYPE = 'XTR_MISC'
          AND LOOKUP_CODE = P_GROUPBY;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    BEGIN
      IF P_COMPANY IS NOT NULL THEN
        SELECT
          SUBSTR(SHORT_NAME
                ,1
                ,30)
        INTO P_USER_COMPANY
        FROM
          XTR_PARTY_INFO
        WHERE PARTY_CODE = P_COMPANY
          AND PARTY_TYPE = 'C';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    BEGIN
      IF P_BATCH_ID_FROM IS NOT NULL THEN
        SELECT
          TO_CHAR(MIN(PERIOD_START)
                 ,'YYYY/MM/DD HH24:MI:SS')
        INTO P_DATE_FROM
        FROM
          XTR_BATCHES B,
          XTR_BATCH_EVENTS E
        WHERE B.BATCH_ID = E.BATCH_ID
          AND E.EVENT_CODE = 'REVAL'
          AND B.BATCH_ID >= P_BATCH_ID_FROM;
        P_USER_DATE_FROM := TO_DATE(P_DATE_FROM
                                   ,'YYYY/MM/DD HH24:MI:SS');
      END IF;
      IF P_BATCH_ID_TO IS NOT NULL THEN
        SELECT
          TO_CHAR(MAX(PERIOD_END)
                 ,'YYYY/MM/DD HH24:MI:SS')
        INTO P_DATE_TO
        FROM
          XTR_BATCHES B,
          XTR_BATCH_EVENTS E
        WHERE B.BATCH_ID = E.BATCH_ID
          AND E.EVENT_CODE = 'REVAL'
          AND B.BATCH_ID <= P_BATCH_ID_TO;
        P_USER_DATE_TO := TO_DATE(P_DATE_TO
                                 ,'YYYY/MM/DD HH24:MI:SS');
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_DMMY_NUM NUMBER;
    L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
    CURSOR GET_LANGUAGE_DESC IS
      SELECT
        ITEM_NAME,
        SUBSTR(TEXT
              ,1
              ,100) LANG_NAME
      FROM
        XTR_SYS_LANGUAGES_VL
      WHERE MODULE_NAME = 'XTRREVGL';
  BEGIN

    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    FOR c IN GET_LANGUAGE_DESC LOOP
      IF C.ITEM_NAME = 'Z2COMPANY' THEN
        Z2COMPANY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2REVAL_PRD' THEN
        Z2REVAL_PRD := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2REVAL_CCY' THEN
        Z2REVAL_CCY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PORTFOLIO' THEN
        Z2PORTFOLIO := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2DEAL_TYPE' THEN
        Z2DEAL_TYPE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2DEAL_SUBTYPE' THEN
        Z2DEAL_SUBTYPE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PRODUCT_TYPE' THEN
        Z2PRODUCT_TYPE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2REFERENCE' THEN
        Z2REFERENCE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2DEAL_ENDDATE' THEN
        Z2DEAL_ENDDATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2BUY' THEN
        Z2BUY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2SELL' THEN
        Z2SELL := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2CCY' THEN
        Z2CCY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2CCY_SHT' THEN
        Z2CCY_SHT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2AMOUNT' THEN
        Z2AMOUNT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2TRANS' THEN
        Z2TRANS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2BEGIN' THEN
        Z2BEGIN := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2FAIR_VALUE' THEN
        Z2FAIR_VALUE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2END' THEN
        Z2END := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2GAIN_LOSS' THEN
        Z2GAIN_LOSS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2TOTAL' THEN
        Z2TOTAL := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2END_OF_REPORT' THEN
        Z2END_OF_REPORT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2NO_DATA_FOUND' THEN
        Z2NO_DATA_FOUND := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1BATCH_ID_FROM' THEN
        Z1BATCH_ID_FROM := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1BATCH_ID_TO' THEN
        Z1BATCH_ID_TO := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1DATE_FROM' THEN
        Z1DATE_FROM := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1DATE_TO' THEN
        Z1DATE_TO := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1PARA_GROUPING' THEN
        Z1PARA_GROUPING := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1REAL_UNREAL' THEN
        Z1REAL_UNREAL := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1FACTOR' THEN
        Z1FACTOR := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1REPHEAD_REAL' THEN
        Z1REPHEAD_REAL := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1REPHEAD_UNREAL' THEN
        Z1REPHEAD_UNREAL := C.LANG_NAME;
      END IF;

    END LOOP;
        LP_REALIZED_FLAG:=P_REALIZED_FLAG;

    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_DATEFORMATFORMULA(C_DATEFORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.USER_EXIT('FND DATEFORMAT RESULT=":C_DATEFORMAT"')*/NULL;
    RETURN (C_DATEFORMAT);
  END C_DATEFORMATFORMULA;

  FUNCTION CO_SHT_NAMEFORMULA(COMPANY IN VARCHAR2) RETURN CHAR IS
    L_SHT_NAME VARCHAR2(30);
  BEGIN
    IF COMPANY IS NOT NULL THEN
      SELECT
        SHORT_NAME
      INTO L_SHT_NAME
      FROM
        XTR_PARTY_INFO
      WHERE PARTY_CODE = COMPANY
        AND PARTY_TYPE = 'C';
    END IF;
    RETURN (L_SHT_NAME);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CO_SHT_NAMEFORMULA;

  FUNCTION C_REPORT_NAMEFORMULA RETURN CHAR IS
    L_REPORT_NAME VARCHAR2(240);
  BEGIN
    IF P_REALIZED_FLAG in ('Y','REAL') THEN
      L_REPORT_NAME := Z1REPHEAD_REAL;
    ELSE
      L_REPORT_NAME := Z1REPHEAD_UNREAL;
    END IF;
    RETURN (L_REPORT_NAME);
  EXCEPTION
    WHEN OTHERS THEN
      SELECT
        SUBSTR(CP.USER_CONCURRENT_PROGRAM_NAME
              ,INSTR(CP.USER_CONCURRENT_PROGRAM_NAME
                   ,'-') + 2)
      INTO L_REPORT_NAME
      FROM
        FND_CONCURRENT_PROGRAMS_VL CP,
        FND_CONCURRENT_REQUESTS CR
      WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
        AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
        AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
      RETURN (L_REPORT_NAME);
  END C_REPORT_NAMEFORMULA;

  FUNCTION C_REV_PERIODFORMULA(PERIOD_START IN DATE
                              ,PERIOD_END IN DATE) RETURN CHAR IS
  BEGIN
    RETURN (PERIOD_START || ' - ' || PERIOD_END);
  END C_REV_PERIODFORMULA;

  FUNCTION USER_DEAL_SUBTYPEFORMULA(DEAL_SUBTYPE_1 IN varchar2
                                   ,DEAL_TYPE_1 IN VARCHAR2) RETURN CHAR IS
    L_USER_DEAL_SUBTYPE VARCHAR2(30);
  BEGIN
    IF DEAL_SUBTYPE_1 IS NOT NULL AND DEAL_SUBTYPE_1 not in ('CASHFLOW','FAIRVALUE','ECONOMIC') THEN
      SELECT
        SUBSTR(USER_DEAL_SUBTYPE
              ,1
              ,30)
      INTO L_USER_DEAL_SUBTYPE
      FROM
        XTR_DEAL_SUBTYPES
      WHERE
      DEAL_SUBTYPE = DEAL_SUBTYPE_1
        AND DEAL_TYPE = DEAL_TYPE_1;
    ELSIF DEAL_SUBTYPE_1 IS NOT NULL AND DEAL_SUBTYPE_1 in ('CASHFLOW','FAIRVALUE','ECONOMIC') THEN
      SELECT
        SUBSTR(MEANING
              ,1
              ,30)
      INTO L_USER_DEAL_SUBTYPE
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'XTR_HEDGE_TYPES'
        AND LOOKUP_CODE = DEAL_SUBTYPE_1;
    END IF;
    RETURN (L_USER_DEAL_SUBTYPE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END USER_DEAL_SUBTYPEFORMULA;

  FUNCTION USER_DEAL_TYPEFORMULA(DEAL_TYPE_1 IN VARCHAR2) RETURN CHAR IS
    L_USER_DEAL_TYPE VARCHAR2(80);
  BEGIN
    IF DEAL_TYPE_1 IS NOT NULL AND DEAL_TYPE_1 <> 'HEDGE' THEN
      SELECT
        SUBSTR(USER_DEAL_TYPE
              ,1
              ,30)
      INTO L_USER_DEAL_TYPE
      FROM
        XTR_DEAL_TYPES
      WHERE DEAL_TYPE = DEAL_TYPE_1;
    ELSIF DEAL_TYPE_1 IS NOT NULL AND DEAL_TYPE_1 = 'HEDGE' THEN
      SELECT
        MEANING
      INTO L_USER_DEAL_TYPE
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'XTR_HEDGE_MISC'
        AND LOOKUP_CODE = 'HEDGE';
    END IF;
    RETURN (L_USER_DEAL_TYPE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END USER_DEAL_TYPEFORMULA;

END XTR_XTRREVGL_XMLP_PKG;


/
