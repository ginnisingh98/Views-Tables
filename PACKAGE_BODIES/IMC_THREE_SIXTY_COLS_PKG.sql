--------------------------------------------------------
--  DDL for Package Body IMC_THREE_SIXTY_COLS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."IMC_THREE_SIXTY_COLS_PKG" as
/* $Header: ARHTSDCB.pls 120.2 2005/11/24 00:48:27 smattegu noship $ */
procedure INSERT_ROW (
  X_COLUMN_ID in out NOCOPY NUMBER,
  X_QUERY_ID in NUMBER,
  X_FILTER_QUERY_ID in NUMBER,
  X_COLUMN_NAME  IN VARCHAR2,
  X_COLUMN_DATA_TYPE in VARCHAR2,
  X_COLUMN_LENGTH in NUMBER,
  X_FILTER_FLAG in VARCHAR2,
  X_RANGE_FILTER_FLAG in VARCHAR2,
  X_HYPERLINK_FLAG in VARCHAR2,
  X_DISPLAY_FLAG in VARCHAR2,
  X_SORT_FLAG in VARCHAR2,
  X_SECURITY_FUNCTION in VARCHAR2,
  X_SEQ_NO in NUMBER,
  X_COLUMN_LABEL in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER)
 is
cursor C2 is select IMC_THREE_SIXTY_COLS_S.nextval from dual;

begin
  if ( x_column_id is null) or (x_column_id = fnd_api.g_miss_num) then
        OPEN C2;
        FETCH C2 INTO X_COLUMN_ID;
        if (c2%notfound) then
           close c2;
           raise no_data_found;
        end if;
        CLOSE C2;
    end if;

  insert into IMC_THREE_SIXTY_COLS_B (
    COLUMN_ID,
    QUERY_ID,
    FILTER_QUERY_ID,
    COLUMN_NAME,
    COLUMN_DATA_TYPE,
    COLUMN_LENGTH,
    FILTER_FLAG,
    RANGE_FILTER_FLAG,
    HYPERLINK_FLAG,
    DISPLAY_FLAG,
    SORT_FLAG,
    SECURITY_FUNCTION,
    SEQ_NO,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER
  ) values (
    X_COLUMN_ID,
    X_QUERY_ID,
    X_FILTER_QUERY_ID,
    X_COLUMN_NAME,
    X_COLUMN_DATA_TYPE,
    X_COLUMN_LENGTH,
    X_FILTER_FLAG,
    X_RANGE_FILTER_FLAG,
    X_HYPERLINK_FLAG,
    X_DISPLAY_FLAG,
    X_SORT_FLAG,
    X_SECURITY_FUNCTION,
    X_SEQ_NO,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    1
     );

  insert into IMC_THREE_SIXTY_COLS_TL (
    COLUMN_ID,
    COLUMN_LABEL,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATE_LOGIN,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LANGUAGE,
    SOURCE_LANG,
    OBJECT_VERSION_NUMBER
  ) select
    X_COLUMN_ID,
    X_COLUMN_LABEL,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_LAST_UPDATE_LOGIN,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    L.LANGUAGE_CODE,
    userenv('LANG'),
    1
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from IMC_THREE_SIXTY_COLS_TL T
    where T.COLUMN_ID = X_COLUMN_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

end INSERT_ROW;

procedure LOCK_ROW (
  X_COLUMN_ID in NUMBER,
  X_QUERY_ID in NUMBER,
  X_FILTER_QUERY_ID in NUMBER,
  X_COLUMN_NAME  IN VARCHAR2,
  X_COLUMN_DATA_TYPE in VARCHAR2,
  X_COLUMN_LENGTH in NUMBER,
  X_FILTER_FLAG in VARCHAR2,
  X_RANGE_FILTER_FLAG in VARCHAR2,
  X_HYPERLINK_FLAG in VARCHAR2,
  X_DISPLAY_FLAG in VARCHAR2,
  X_SORT_FLAG in VARCHAR2,
  X_SECURITY_FUNCTION in VARCHAR2,
  X_SEQ_NO  in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_COLUMN_LABEL in VARCHAR2
) is
  cursor c is select
      QUERY_ID,
      FILTER_QUERY_ID,
      COLUMN_DATA_TYPE,
      COLUMN_LENGTH,
      FILTER_FLAG,
      RANGE_FILTER_FLAG,
      HYPERLINK_FLAG,
      DISPLAY_FLAG,
      SORT_FLAG,
      SECURITY_FUNCTION,
      SEQ_NO,
      OBJECT_VERSION_NUMBER
    from IMC_THREE_SIXTY_COLS_B
    where COLUMN_ID = X_COLUMN_ID
    for update of COLUMN_ID nowait;
  recinfo c%rowtype;

cursor c1 is select
      COLUMN_LABEL,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from IMC_THREE_SIXTY_COLS_TL
    where COLUMN_ID = X_COLUMN_ID
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    for update of COLUMN_ID nowait;
begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (    (recinfo.QUERY_ID = X_QUERY_ID)
      AND ((recinfo.FILTER_QUERY_ID = X_FILTER_QUERY_ID)
           OR ((recinfo.FILTER_QUERY_ID is null) AND (X_FILTER_QUERY_ID is null)))
      AND (recinfo.COLUMN_DATA_TYPE = X_COLUMN_DATA_TYPE)
      AND (recinfo.COLUMN_LENGTH = X_COLUMN_LENGTH)
      AND (recinfo.FILTER_FLAG = X_FILTER_FLAG)
      AND (recinfo.RANGE_FILTER_FLAG = X_RANGE_FILTER_FLAG)
      AND (recinfo.HYPERLINK_FLAG = X_HYPERLINK_FLAG)
      AND (recinfo.DISPLAY_FLAG = X_DISPLAY_FLAG)
      AND (recinfo.SORT_FLAG = X_SORT_FLAG)
      AND ((recinfo.SECURITY_FUNCTION = X_SECURITY_FUNCTION)
           OR ((recinfo.SECURITY_FUNCTION is null) AND (X_SECURITY_FUNCTION is null)))
      AND  (recinfo.SEQ_NO = X_SEQ_NO)
      AND ((recinfo.OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER)
           OR ((recinfo.OBJECT_VERSION_NUMBER is null) AND
               (X_OBJECT_VERSION_NUMBER is null)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

 for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    (tlinfo.COLUMN_LABEL = X_COLUMN_LABEL)
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_COLUMN_ID in NUMBER,
  X_QUERY_ID in NUMBER,
  X_FILTER_QUERY_ID in NUMBER,
  X_COLUMN_NAME  IN VARCHAR2,
  X_COLUMN_DATA_TYPE in VARCHAR2,
  X_COLUMN_LENGTH in NUMBER,
  X_FILTER_FLAG in VARCHAR2,
  X_RANGE_FILTER_FLAG in VARCHAR2,
  X_HYPERLINK_FLAG in VARCHAR2,
  X_DISPLAY_FLAG in VARCHAR2,
  X_SORT_FLAG in VARCHAR2,
  X_SECURITY_FUNCTION in VARCHAR2,
  X_SEQ_NO            in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_COLUMN_LABEL in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update IMC_THREE_SIXTY_COLS_B set
    QUERY_ID = X_QUERY_ID,
    FILTER_QUERY_ID = X_FILTER_QUERY_ID,
    COLUMN_NAME = X_COLUMN_NAME,
    COLUMN_DATA_TYPE = X_COLUMN_DATA_TYPE,
    COLUMN_LENGTH = X_COLUMN_LENGTH,
    FILTER_FLAG = X_FILTER_FLAG,
    RANGE_FILTER_FLAG = X_RANGE_FILTER_FLAG,
    HYPERLINK_FLAG    = X_HYPERLINK_FLAG,
    DISPLAY_FLAG = X_DISPLAY_FLAG,
    SORT_FLAG = X_SORT_FLAG,
    SECURITY_FUNCTION = X_SECURITY_FUNCTION,
    SEQ_NO            = X_SEQ_NO,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where COLUMN_ID = X_COLUMN_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update IMC_THREE_SIXTY_COLS_TL set
    COLUMN_LABEL = X_COLUMN_LABEL,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where COLUMN_ID = X_COLUMN_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

 procedure DELETE_ROW (
  X_COLUMN_ID in NUMBER
) is
begin
  delete from IMC_THREE_SIXTY_COLS_TL
  where COLUMN_ID = X_COLUMN_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from IMC_THREE_SIXTY_COLS_B
  where COLUMN_ID = X_COLUMN_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
  delete from IMC_THREE_SIXTY_COLS_TL T
  where not exists
    (select NULL
    from IMC_THREE_SIXTY_COLS_B B
    where B.COLUMN_ID = T.COLUMN_ID
    );

  update IMC_THREE_SIXTY_COLS_TL T set (
      COLUMN_LABEL
    ) = (select
      B.COLUMN_LABEL
    from IMC_THREE_SIXTY_COLS_TL B
    where B.COLUMN_ID = T.COLUMN_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.COLUMN_ID,
      T.LANGUAGE
  ) in (select
      SUBT.COLUMN_ID,
      SUBT.LANGUAGE
    from IMC_THREE_SIXTY_COLS_TL SUBB, IMC_THREE_SIXTY_COLS_TL SUBT
    where SUBB.COLUMN_ID = SUBT.COLUMN_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.COLUMN_LABEL <> SUBT.COLUMN_LABEL
  ));

 insert into IMC_THREE_SIXTY_COLS_TL (
    COLUMN_ID,
    COLUMN_LABEL,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATE_LOGIN,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    OBJECT_VERSION_NUMBER,
    LANGUAGE,
    SOURCE_LANG
  ) select
    B.COLUMN_ID,
    B.COLUMN_LABEL,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATE_LOGIN,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATED_BY,
    B.OBJECT_VERSION_NUMBER,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from IMC_THREE_SIXTY_COLS_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from IMC_THREE_SIXTY_COLS_TL T
    where T.COLUMN_ID = B.COLUMN_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

procedure TRANSLATE_ROW (
  X_COLUMN_ID in NUMBER,
  X_COLUMN_LABEL in VARCHAR2,
  X_OWNER in VARCHAR2) IS

BEGIN
-- only update rows that have not been altered by user
    update IMC_THREE_SIXTY_COLS_TL set
    COLUMN_LABEL= X_COLUMN_LABEL,
    source_lang = userenv('LANG'),
    last_update_date = sysdate,
    last_updated_by = decode(X_OWNER, 'SEED', 1, 0),
    last_update_login = 0
    where COLUMN_ID= X_COLUMN_ID
    and   userenv('LANG') in (language, source_lang);


END TRANSLATE_ROW;

procedure LOAD_ROW (
  X_COLUMN_ID in NUMBER,
  X_QUERY_ID in NUMBER,
  X_FILTER_QUERY_ID in NUMBER,
  X_COLUMN_NAME  IN VARCHAR2,
  X_COLUMN_DATA_TYPE in VARCHAR2,
  X_COLUMN_LENGTH in NUMBER,
  X_FILTER_FLAG in VARCHAR2,
  X_RANGE_FILTER_FLAG in VARCHAR2,
  X_HYPERLINK_FLAG in VARCHAR2,
  X_DISPLAY_FLAG in VARCHAR2,
  X_SORT_FLAG in VARCHAR2,
  X_SECURITY_FUNCTION in VARCHAR2,
  X_SEQ_NO            in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_COLUMN_LABEL in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_OWNER in VARCHAR2)
 IS

BEGIN

  declare
     user_id		number := 0;
     row_id     	varchar2(64);
     L_COLUMN_ID  NUMBER := X_COLUMN_ID;
     L_OBJECT_VERSION_NUMBER number;

  begin

     if (X_OWNER = 'SEED') then
        user_id := 1;
     end if;

     L_OBJECT_VERSION_NUMBER := NVL(X_OBJECT_VERSION_NUMBER, 1) + 1;

    IMC_THREE_SIXTY_COLS_PKG.UPDATE_ROW (
  X_COLUMN_ID => X_COLUMN_ID,
  X_QUERY_ID => X_QUERY_ID,
  X_FILTER_QUERY_ID => X_FILTER_QUERY_ID,
  X_COLUMN_NAME  => X_COLUMN_NAME,
  X_COLUMN_DATA_TYPE => X_COLUMN_DATA_TYPE,
  X_COLUMN_LENGTH => X_COLUMN_LENGTH,
  X_FILTER_FLAG => X_FILTER_FLAG,
  X_RANGE_FILTER_FLAG => X_RANGE_FILTER_FLAG,
  X_HYPERLINK_FLAG => X_HYPERLINK_FLAG,
  X_DISPLAY_FLAG => X_DISPLAY_FLAG,
  X_SORT_FLAG => X_SORT_FLAG,
  X_SECURITY_FUNCTION => X_SECURITY_FUNCTION,
  X_SEQ_NO            => X_SEQ_NO,
  X_OBJECT_VERSION_NUMBER => L_OBJECT_VERSION_NUMBER,
  X_COLUMN_LABEL => X_COLUMN_LABEL,
  X_LAST_UPDATE_DATE => SYSDATE,
  X_LAST_UPDATED_BY => user_id,
  X_LAST_UPDATE_LOGIN => 0);

   exception
       when NO_DATA_FOUND then

  IMC_THREE_SIXTY_COLS_PKG.INSERT_ROW(
  X_COLUMN_ID => L_COLUMN_ID,
  X_QUERY_ID => X_QUERY_ID,
  X_FILTER_QUERY_ID => X_FILTER_QUERY_ID,
  X_COLUMN_NAME  => X_COLUMN_NAME,
  X_COLUMN_DATA_TYPE => X_COLUMN_DATA_TYPE,
  X_COLUMN_LENGTH => X_COLUMN_LENGTH,
  X_FILTER_FLAG => X_FILTER_FLAG,
  X_RANGE_FILTER_FLAG => X_RANGE_FILTER_FLAG,
  X_HYPERLINK_FLAG => X_HYPERLINK_FLAG,
  X_DISPLAY_FLAG => X_DISPLAY_FLAG,
  X_SORT_FLAG => X_SORT_FLAG,
  X_SECURITY_FUNCTION => X_SECURITY_FUNCTION,
  X_SEQ_NO            => X_SEQ_NO,
  X_COLUMN_LABEL => X_COLUMN_LABEL,
  X_CREATION_DATE => SYSDATE,
  X_CREATED_BY => user_id,
  X_LAST_UPDATE_DATE => SYSDATE,
  X_LAST_UPDATED_BY => user_id,
  X_LAST_UPDATE_LOGIN => 0,
  X_OBJECT_VERSION_NUMBER => 1);
 end;

END LOAD_ROW;


end IMC_THREE_SIXTY_COLS_PKG;

/
