--------------------------------------------------------
--  DDL for Package Body XTR_XTRLIEXP_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."XTR_XTRLIEXP_XMLP_PKG" AS
/* $Header: XTRLIEXPB.pls 120.1 2007/12/28 12:52:55 npannamp noship $ */
  FUNCTION CF_SET_PARAFORMULA RETURN VARCHAR2 IS
  BEGIN
    SELECT
      SUBSTR(USER
            ,1
            ,10)
    INTO
      CP_PARA
    FROM
      DUAL;
    RETURN (CP_PARA);
  END CF_SET_PARAFORMULA;

  FUNCTION CF_DESCRIPTIONFORMULA(QRY_LIMIT_CHECK_TYPE IN VARCHAR2
                                ,QRY_EXCEPTION_TYPE IN VARCHAR2) RETURN VARCHAR2 IS
    V_THE_STRING VARCHAR2(150);
  BEGIN
    IF QRY_LIMIT_CHECK_TYPE = 'GLOBAL' THEN
      V_THE_STRING := 'Global';
    ELSIF QRY_LIMIT_CHECK_TYPE = 'SOVRN' THEN
      V_THE_STRING := 'Sovereign';
    ELSIF QRY_LIMIT_CHECK_TYPE = 'CCY' THEN
      V_THE_STRING := 'Currency';
    ELSIF QRY_LIMIT_CHECK_TYPE = 'DLR_DEAL' THEN
      V_THE_STRING := 'Dealer-Deal';
    ELSIF QRY_LIMIT_CHECK_TYPE = 'INTRA_DY' THEN
      V_THE_STRING := 'Intra-day';
    ELSIF QRY_LIMIT_CHECK_TYPE = 'CPARTY' THEN
      V_THE_STRING := 'Cparty';
    ELSIF QRY_LIMIT_CHECK_TYPE = 'SETTLE' THEN
      V_THE_STRING := 'Settle';
    END IF;
    V_THE_STRING := V_THE_STRING || ' limit ';
    IF QRY_EXCEPTION_TYPE = 'EXCEEDED' THEN
      V_THE_STRING := V_THE_STRING || 'was exceeded.';
    ELSIF QRY_EXCEPTION_TYPE = 'NO_LIMIT' THEN
      V_THE_STRING := V_THE_STRING || 'did not exist for these values.';
    ELSIF QRY_EXCEPTION_TYPE = 'NO_AUTHO' THEN
      V_THE_STRING := V_THE_STRING || 'existed but was not authorised.';
    END IF;
    RETURN V_THE_STRING;
  END CF_DESCRIPTIONFORMULA;

  FUNCTION COMPANY_CODEVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    COMPANY_CODE := UPPER(COMPANY_CODE);
    RETURN (TRUE);
  END COMPANY_CODEVALIDTRIGGER;

  FUNCTION LIMIT_CODEVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    LIMIT_CODE := UPPER(LIMIT_CODE);
    RETURN (TRUE);
  END LIMIT_CODEVALIDTRIGGER;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_DMMY_NUM NUMBER;
    L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
    CURSOR CHK_LANG IS
      SELECT
        1
      FROM
        XTR_SYS_LANGUAGES_VL
      WHERE MODULE_NAME = 'XTRLIEXP';
    CURSOR GET_LANGUAGE_DESC IS
      SELECT
        ITEM_NAME,
        SUBSTR(TEXT
              ,1
              ,100) LANG_NAME
      FROM
        XTR_SYS_LANGUAGES_VL
      WHERE MODULE_NAME = 'XTRLIEXP';
  BEGIN

    BEGIN
      COMPANY_NAME_HEADER := CEP_STANDARD.GET_WINDOW_SESSION_TITLE;
    EXCEPTION
      WHEN OTHERS THEN
        FND_MESSAGE.SET_NAME('XTR'
                            ,'XTR_LOOKUP_ERR');
        L_MESSAGE := FND_MESSAGE.GET;
        RAISE_APPLICATION_ERROR(-20101
                               ,NULL);
    END;
    IF (P_DISPLAY_DEBUG = 'Y') THEN
      NULL;
    END IF;
    FOR c IN GET_LANGUAGE_DESC LOOP
      IF C.ITEM_NAME = 'Z1COMPANY_CODE' THEN
        Z1COMPANY_CODE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1FROM_DATE' THEN
        Z1FROM_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1LIMIT_CODE' THEN
        Z1LIMIT_CODE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1PARAMETERS' THEN
        Z1PARAMETERS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2AMOUNT_DATE' THEN
        Z2AMOUNT_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2DEALER_CODE' THEN
        Z2DEALER_CODE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2DEAL_NUMBER' THEN
        Z2DEAL_NUMBER := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2DISCRIPTION_OF_EXCEPTION' THEN
        Z2DISCRIPTION_OF_EXCEPTION := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2END_OF_REPORT' THEN
        Z2END_OF_REPORT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2EXCEEDED_BY' THEN
        Z2EXCEEDED_BY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2EXCEEDED_ON_DATE' THEN
        Z2EXCEEDED_ON_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2HCE_AMOUNT' THEN
        Z2HCE_AMOUNT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2LIMIT_AMOUNT' THEN
        Z2LIMIT_AMOUNT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2LIMIT_PARTY' THEN
        Z2LIMIT_PARTY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PAGE' THEN
        Z2PAGE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'REPORT_DATE' THEN
        REPORT_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1P_FACTOR' THEN
        Z1P_FACTOR := C.LANG_NAME;
      END IF;
    END LOOP;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    TEMP NUMBER(15) := 1000;
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    P_FROM_DATE1 := to_char(P_FROM_DATE,'DD-MON-YY');
    IF P_FACTOR IS NOT NULL THEN
      SELECT
        SUBSTRB(DESCRIPTION
               ,1
               ,20),
        DECODE(SUBSTR(P_FACTOR
                     ,1
                     ,1)
              ,'U'
              ,1
              ,'T'
              ,1000
              ,'M'
              ,1000000
              ,'B'
              ,100000000)
      INTO
        LP_FACTOR_DESC
        ,TEMP
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'XTR_FACTOR'
        AND LOOKUP_CODE = SUBSTR(P_FACTOR
            ,1
            ,1);
    ELSE
      SELECT
        SUBSTRB(DESCRIPTION
               ,1
               ,20)
      INTO
        LP_FACTOR_DESC
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'XTR_FACTOR'
        AND LOOKUP_CODE = 'T';
      TEMP := 1000;
    END IF;
    AMT_UNIT2 := TEMP;
    SELECT
      CP.USER_CONCURRENT_PROGRAM_NAME
    INTO
      REPORT_SHORT_NAME2
    FROM
      FND_CONCURRENT_PROGRAMS_VL CP,
      FND_CONCURRENT_REQUESTS CR
    WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
      AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
      AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
      REPORT_SHORT_NAME2 := substr(REPORT_SHORT_NAME2,1,instr(REPORT_SHORT_NAME2,' (XML)'));
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CP_PARA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PARA;
  END CP_PARA_P;

END XTR_XTRLIEXP_XMLP_PKG;


/
