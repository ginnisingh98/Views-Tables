--------------------------------------------------------
--  DDL for Package Body PAY_PAYAUSOE_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PAY_PAYAUSOE_XMLP_PKG" AS
/* $Header: PAYAUSOEB.pls 120.1 2008/03/26 14:04:42 amakrish noship $ */
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    CONSTRUCT_WHERE_CLAUSE;
    CONSTRUCT_ORDER_BY;
    PAY_AU_SOE_PKG.POPULATE_DEFINED_BALANCES;
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_CURRENCY_FORMAT_MASKFORMULA RETURN VARCHAR2 IS
    V_CURRENCY_CODE FND_CURRENCIES.CURRENCY_CODE%TYPE;
    V_FORMAT_MASK VARCHAR2(100) := NULL;
    V_FIELD_LENGTH NUMBER(3) := 15;
    LV_DATE_EARNED PAY_PAYROLL_ACTIONS.DATE_EARNED%TYPE;
    CURSOR C_DATE_EARNED(PAYROLL_ACT_ID IN PAY_PAYROLL_ACTIONS.PAYROLL_ACTION_ID%TYPE) IS
      SELECT
        EFFECTIVE_DATE
      FROM
        PAY_PAYROLL_ACTIONS
      WHERE PAYROLL_ACTION_ID = PAYROLL_ACT_ID;
  BEGIN
 OPEN C_DATE_EARNED(P_PAYROLL_ACTION_ID);
    FETCH C_DATE_EARNED
     INTO LV_DATE_EARNED;
    CLOSE C_DATE_EARNED;
    V_CURRENCY_CODE := PAY_AU_SOE_PKG.GET_CURRENCY_CODE(P_BUSINESS_GROUP_ID
                                                       ,P_PAYROLL_ID
                                                       ,LV_DATE_EARNED);
  /*  V_CURRENCY_CODE := PAY_AU_SOE_PKG.BUSINESS_CURRENCY_CODE(P_BUSINESS_GROUP_ID);*/
    V_FORMAT_MASK := FND_CURRENCY.GET_FORMAT_MASK(V_CURRENCY_CODE
                                                 ,V_FIELD_LENGTH);
    RETURN V_FORMAT_MASK;
  END CF_CURRENCY_FORMAT_MASKFORMULA;

  FUNCTION CF_NET_ACCRUALFORMULA(LEAVE_BALANCE_ABSENCE_TYPE IN VARCHAR2
                                ,ASSIGNMENT_ACTION_ID_LB IN NUMBER
                                ,ASSIGNMENT_ID_LB IN NUMBER
                                ,PAYROLL_ID_LB IN NUMBER
                                ,BUSINESS_GROUP_ID_LB IN NUMBER
                                ,ACCRUAL_PLAN_ID_LB IN NUMBER
                                ,PERIOD_END_DATE IN DATE) RETURN NUMBER IS
    V_CUMULATIVE_BALANCE NUMBER := NULL;
    CURSOR C_GET_NET_ACCRUAL(R_ASG_ASSIGNMENT_ACTION_ID IN NUMBER) IS
      SELECT
        1
      FROM
        PAY_ACCRUAL_PLANS AP,
        PAY_ELEMENT_TYPES_F ET,
        PAY_ELEMENT_LINKS_F EL,
        PAY_ELEMENT_ENTRIES_F EE,
        PAY_ASSIGNMENT_ACTIONS AA,
        PAY_PAYROLL_ACTIONS PA,
        PER_ABSENCE_ATTENDANCE_TYPES PAAT,
        PER_TIME_PERIODS TP
      WHERE AA.ASSIGNMENT_ACTION_ID = R_ASG_ASSIGNMENT_ACTION_ID
        AND AP.ACCRUAL_CATEGORY = 'AUAL'
        AND ET.ELEMENT_TYPE_ID = AP.ACCRUAL_PLAN_ELEMENT_TYPE_ID
        AND EL.ELEMENT_TYPE_ID = ET.ELEMENT_TYPE_ID
        AND EE.ELEMENT_LINK_ID = EL.ELEMENT_LINK_ID
        AND AA.ASSIGNMENT_ID = EE.ASSIGNMENT_ID
        AND PA.PAYROLL_ACTION_ID = AA.PAYROLL_ACTION_ID
        AND TP.PAYROLL_ID = PA.PAYROLL_ID
        AND PAAT.INPUT_VALUE_ID = AP.PTO_INPUT_VALUE_ID
        AND PA.EFFECTIVE_DATE between TP.START_DATE
        AND TP.END_DATE
        AND PAAT.ABSENCE_ATTENDANCE_TYPE_ID = (
        SELECT
          MAX(PAAT1.ABSENCE_ATTENDANCE_TYPE_ID)
        FROM
          PER_ABSENCE_ATTENDANCE_TYPES PAAT1
        WHERE PAAT1.INPUT_VALUE_ID = AP.PTO_INPUT_VALUE_ID )
        AND PA.EFFECTIVE_DATE between ET.EFFECTIVE_START_DATE
        AND ET.EFFECTIVE_END_DATE
        AND PA.EFFECTIVE_DATE between EL.EFFECTIVE_START_DATE
        AND EL.EFFECTIVE_END_DATE
        AND PA.EFFECTIVE_DATE between EE.EFFECTIVE_START_DATE
        AND EE.EFFECTIVE_END_DATE;
    L_DUMMY NUMBER;
  BEGIN
    IF LEAVE_BALANCE_ABSENCE_TYPE IS NOT NULL THEN
      CP_ACCRUAL := 0;
      OPEN C_GET_NET_ACCRUAL(ASSIGNMENT_ACTION_ID_LB);
      FETCH C_GET_NET_ACCRUAL
       INTO
         L_DUMMY;
      IF C_GET_NET_ACCRUAL%FOUND THEN

        CP_ACCRUAL := NVL(HR_AU_HOLIDAYS.GET_NET_ACCRUAL(ASSIGNMENT_ID_LB
                                                        ,PAYROLL_ID_LB
                                                        ,BUSINESS_GROUP_ID_LB
                                                        ,ACCRUAL_PLAN_ID_LB
                                                        ,PERIOD_END_DATE)
                         ,0);

      END IF;
      CLOSE C_GET_NET_ACCRUAL;
    END IF;
    RETURN V_CUMULATIVE_BALANCE;
  END CF_NET_ACCRUALFORMULA;

  PROCEDURE CONSTRUCT_WHERE_CLAUSE IS
  BEGIN
    --CP_WHERE_CLAUSE := NULL;
    CP_WHERE_CLAUSE := ' ';
    IF P_ASSIGNMENT_ID IS NOT NULL THEN
      CP_WHERE_CLAUSE := ' and assignment_id = ' || TO_CHAR(P_ASSIGNMENT_ID);
    END IF;
    IF P_LOCATION_ID IS NOT NULL THEN
      CP_WHERE_CLAUSE := CP_WHERE_CLAUSE || ' and location_id = ' || TO_CHAR(P_LOCATION_ID);
    END IF;
    IF P_ORGANISATION_NAME IS NOT NULL THEN
      CP_WHERE_CLAUSE := CP_WHERE_CLAUSE || ' and organization_name = ' || '''' || P_ORGANISATION_NAME || '''';
    END IF;
  END CONSTRUCT_WHERE_CLAUSE;

  PROCEDURE CONSTRUCT_ORDER_BY IS
    L_SORT_ORDER_1 VARCHAR2(250);
    L_SORT_ORDER_2 VARCHAR2(250);
    L_SORT_ORDER_3 VARCHAR2(250);
    L_SORT_ORDER_4 VARCHAR2(250);
  BEGIN
    CP_ORDER_BY := NULL;
    IF P_SORT_ORDER_1 = 'FULL_NAME' THEN
      L_SORT_ORDER_1 := 'nvl(order_name,full_name)';
    ELSE
      L_SORT_ORDER_1 := P_SORT_ORDER_1;
    END IF;
    IF P_SORT_ORDER_2 = 'FULL_NAME' THEN
      L_SORT_ORDER_2 := 'nvl(order_name,full_name)';
    ELSE
      L_SORT_ORDER_2 := P_SORT_ORDER_2;
    END IF;
    IF P_SORT_ORDER_3 = 'FULL_NAME' THEN
      L_SORT_ORDER_3 := 'nvl(order_name,full_name)';
    ELSE
      L_SORT_ORDER_3 := P_SORT_ORDER_3;
    END IF;
    IF P_SORT_ORDER_4 = 'FULL_NAME' THEN
      L_SORT_ORDER_4 := 'nvl(order_name,full_name)';
    ELSE
      L_SORT_ORDER_4 := P_SORT_ORDER_4;
    END IF;
    IF P_SORT_ORDER_1 IS NOT NULL THEN
      CP_ORDER_BY := L_SORT_ORDER_1;
    END IF;
    IF P_SORT_ORDER_2 IS NOT NULL THEN
      IF CP_ORDER_BY IS NOT NULL THEN
        CP_ORDER_BY := CP_ORDER_BY || ', ' || L_SORT_ORDER_2;
      ELSE
        CP_ORDER_BY := L_SORT_ORDER_2;
      END IF;
    END IF;
    IF P_SORT_ORDER_3 IS NOT NULL THEN
      IF CP_ORDER_BY IS NOT NULL THEN
        CP_ORDER_BY := CP_ORDER_BY || ', ' || L_SORT_ORDER_3;
      ELSE
        CP_ORDER_BY := L_SORT_ORDER_3;
      END IF;
    END IF;
    IF P_SORT_ORDER_4 IS NOT NULL THEN
      IF CP_ORDER_BY IS NOT NULL THEN
        CP_ORDER_BY := CP_ORDER_BY || ', ' || L_SORT_ORDER_4;
      ELSE
        CP_ORDER_BY := L_SORT_ORDER_4;
      END IF;
    END IF;
    IF CP_ORDER_BY IS NOT NULL THEN
      CP_ORDER_BY := ' order by ' || CP_ORDER_BY;
    ELSE
      CP_ORDER_BY := ' order by assignment_number';
    END IF;
  END CONSTRUCT_ORDER_BY;

  FUNCTION CF_NET_THIS_PAYFORMULA RETURN NUMBER IS
  BEGIN
    RETURN (CP_GROSS_THIS_PAY - CP_PRE_TAX_DEDUCTIONS_THIS_PAY - CP_OTHER_DEDUCTIONS_THIS_PAY - CP_TAX_DEDUCTIONS_THIS_PAY + CP_DIRECT_PAYMENTS_THIS_PAY);
  END CF_NET_THIS_PAYFORMULA;

  FUNCTION CF_NET_YTDFORMULA RETURN NUMBER IS
  BEGIN
    RETURN (CP_GROSS_YTD - CP_PRE_TAX_DEDUCTIONS_YTD - CP_OTHER_DEDUCTIONS_YTD - CP_TAX_DEDUCTIONS_YTD + CP_DIRECT_PAYMENTS_YTD);
  END CF_NET_YTDFORMULA;

  FUNCTION CF_GET_MISCELLANEOUS_VALUESFOR(EXPENSE_CHECK_SEND_TO_ADDRESS IN VARCHAR2
                                         ,PERSON_ID IN NUMBER
                                         ,LOCATION_ID IN NUMBER
                                         ,ASSIGNMENT_ID IN NUMBER
                                         ,ASSIGNMENT_ACTION_ID IN NUMBER
                                         ,DATE_EARNED IN DATE) RETURN NUMBER IS
    V_ADDRESS_LINE_1 HR_LOCATIONS.ADDRESS_LINE_1%TYPE;
    V_ADDRESS_LINE_2 HR_LOCATIONS.ADDRESS_LINE_2%TYPE;
    V_ADDRESS_LINE_3 HR_LOCATIONS.ADDRESS_LINE_3%TYPE;
    V_TOWN_CITY HR_LOCATIONS.TOWN_OR_CITY%TYPE;
    V_POSTAL_CODE HR_LOCATIONS.POSTAL_CODE%TYPE;
    V_COUNTRY FND_TERRITORIES_TL.TERRITORY_SHORT_NAME%TYPE;
    V_SUPER_THIS_PAY NUMBER;
    V_SUPER_YTD NUMBER;
  BEGIN
    IF EXPENSE_CHECK_SEND_TO_ADDRESS = 'H' THEN
      PAY_AU_SOE_PKG.GET_HOME_ADDRESS(PERSON_ID
                                     ,V_ADDRESS_LINE_1
                                     ,V_ADDRESS_LINE_2
                                     ,V_ADDRESS_LINE_3
                                     ,V_TOWN_CITY
                                     ,V_POSTAL_CODE
                                     ,V_COUNTRY);
    ELSE
      PAY_AU_SOE_PKG.GET_WORK_ADDRESS(LOCATION_ID
                                     ,V_ADDRESS_LINE_1
                                     ,V_ADDRESS_LINE_2
                                     ,V_ADDRESS_LINE_3
                                     ,V_TOWN_CITY
                                     ,V_POSTAL_CODE
                                     ,V_COUNTRY);
    END IF;
    CP_ADDRESS_LINE_1 := SUBSTR(V_ADDRESS_LINE_1
                               ,1
                               ,60);
    CP_ADDRESS_LINE_2 := SUBSTR(V_ADDRESS_LINE_2
                               ,1
                               ,60);
    CP_ADDRESS_LINE_3 := SUBSTR(V_ADDRESS_LINE_3
                               ,1
                               ,60);
    CP_TOWN_CITY := V_TOWN_CITY;
    CP_POSTAL_CODE := V_POSTAL_CODE;
    CP_COUNTRY := V_COUNTRY;
    PAY_AU_SOE_PKG.FINAL_BALANCE_TOTALS(ASSIGNMENT_ID
                                       ,ASSIGNMENT_ACTION_ID
                                       ,DATE_EARNED
                                       ,CP_GROSS_THIS_PAY
                                       ,CP_OTHER_DEDUCTIONS_THIS_PAY
                                       ,CP_TAX_DEDUCTIONS_THIS_PAY
                                       ,CP_GROSS_YTD
                                       ,CP_OTHER_DEDUCTIONS_YTD
                                       ,CP_TAX_DEDUCTIONS_YTD
                                       ,CP_NON_TAX_ALLOW_THIS_PAY
                                       ,CP_NON_TAX_ALLOW_YTD
                                       ,CP_PRE_TAX_DEDUCTIONS_THIS_PAY
                                       ,CP_PRE_TAX_DEDUCTIONS_YTD
                                       ,V_SUPER_THIS_PAY
                                       ,V_SUPER_YTD
                                       ,CP_TAXABLE_INCOME_THIS_PAY
                                       ,CP_TAXABLE_INCOME_YTD
                                       ,CP_DIRECT_PAYMENTS_THIS_PAY
                                       ,CP_DIRECT_PAYMENTS_YTD
                                       ,'Y'
                                       ,'N');
    RETURN 0;
  END CF_GET_MISCELLANEOUS_VALUESFOR;

  FUNCTION CF_HOURS_FORMAT_MASKFORMULA RETURN CHAR IS
  BEGIN
    RETURN '99G990D00';
  END CF_HOURS_FORMAT_MASKFORMULA;

  FUNCTION CF_CHANGE_PRINT_MESSAGESFORMUL(PAY_ADVICE_MESSAGE IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    SET_PRINT_FLAGS;
    IF PAY_ADVICE_MESSAGE IS NOT NULL THEN
      PRINT_MESSAGES := 'Y';
    ELSE
      PRINT_MESSAGES := 'N';
    END IF;
    RETURN 0;
  END CF_CHANGE_PRINT_MESSAGESFORMUL;

  FUNCTION CF_CHANGE_PRINT_LEAVE_TAKENFOR RETURN NUMBER IS
  BEGIN
    PRINT_LEAVE_TAKEN := 'Y';
    RETURN 0;
  END CF_CHANGE_PRINT_LEAVE_TAKENFOR;

  FUNCTION CF_CHANGE_PRINT_LEAVE_BALANCES RETURN NUMBER IS
  BEGIN
    PRINT_LEAVE_BALANCES := 'Y';
    RETURN 0;
  END CF_CHANGE_PRINT_LEAVE_BALANCES;

  PROCEDURE SET_PRINT_FLAGS IS
  BEGIN
    PRINT_LEAVE_TAKEN := 'N';
    PRINT_LEAVE_BALANCES := 'N';
    PRINT_MESSAGES := 'N';
  END SET_PRINT_FLAGS;

  --FUNCTION CF_PERIOD_START_DATEFORMULA(ASSIGNMENT_ACTION_ID IN NUMBER) RETURN DATE IS
  FUNCTION CF_PERIOD_START_DATEFORMULA(ASSIGNMENT_ACTION_ID_V IN NUMBER) RETURN DATE IS
    CURSOR GET_PERIOD_START_DATE IS
      SELECT
        PTP.START_DATE
      FROM
        PAY_ASSIGNMENT_ACTIONS PAC,
        PAY_PAYROLL_ACTIONS PPA,
        PER_TIME_PERIODS PTP
      WHERE PPA.PAYROLL_ACTION_ID = PAC.PAYROLL_ACTION_ID
        AND PAC.SOURCE_ACTION_ID is null
        AND PTP.PAYROLL_ID = PPA.PAYROLL_ID
        AND PPA.DATE_EARNED between PTP.START_DATE
        AND PTP.END_DATE
        AND PAC.ASSIGNMENT_ACTION_ID = (
        SELECT
          MIN(PAI.LOCKED_ACTION_ID)
        FROM
          PAY_ACTION_INTERLOCKS PAI
        WHERE PAI.LOCKING_ACTION_ID = ASSIGNMENT_ACTION_ID_V );
    V_PERIOD_START_DATE DATE;
  BEGIN
    OPEN GET_PERIOD_START_DATE;
    FETCH GET_PERIOD_START_DATE
     INTO
       V_PERIOD_START_DATE;
    CLOSE GET_PERIOD_START_DATE;

    RETURN V_PERIOD_START_DATE;
  END CF_PERIOD_START_DATEFORMULA;
  FUNCTION CF_GRADE_STEPFORMULA(ASSIGNMENT_ID IN NUMBER
                               ,DATE_EARNED IN DATE) RETURN NUMBER IS
    L_GRADE_STEP NUMBER;
  BEGIN
    L_GRADE_STEP := NULL;
    SELECT
      count(*)
    INTO L_GRADE_STEP
    FROM
      PER_SPINAL_POINT_STEPS_F PSP,
      PER_SPINAL_POINT_PLACEMENTS_F PSPP,
      PER_SPINAL_POINT_STEPS_F PSP2
    WHERE PSP.SEQUENCE >= PSP2.SEQUENCE
      AND PSPP.STEP_ID = PSP.STEP_ID
      AND PSPP.ASSIGNMENT_ID = CF_GRADE_STEPFORMULA.ASSIGNMENT_ID
      AND PSP.GRADE_SPINE_ID = PSP2.GRADE_SPINE_ID
      AND PSPP.BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID
      AND PSP.BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID
      AND PSP2.BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID
      AND CF_GRADE_STEPFORMULA.DATE_EARNED between PSP.EFFECTIVE_START_DATE
      AND PSP.EFFECTIVE_END_DATE
      AND CF_GRADE_STEPFORMULA.DATE_EARNED between PSPP.EFFECTIVE_START_DATE
      AND PSPP.EFFECTIVE_END_DATE
      AND CF_GRADE_STEPFORMULA.DATE_EARNED between PSP2.EFFECTIVE_START_DATE
      AND PSP2.EFFECTIVE_END_DATE;

    IF (L_GRADE_STEP IS NULL OR L_GRADE_STEP = 0) THEN
      RETURN (NULL);
    ELSE
      RETURN (L_GRADE_STEP);
    END IF;
  END CF_GRADE_STEPFORMULA;

  FUNCTION CP_ADDRESS_LINE_1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ADDRESS_LINE_1;
  END CP_ADDRESS_LINE_1_P;

  FUNCTION CP_ADDRESS_LINE_2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ADDRESS_LINE_2;
  END CP_ADDRESS_LINE_2_P;

  FUNCTION CP_ADDRESS_LINE_3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ADDRESS_LINE_3;
  END CP_ADDRESS_LINE_3_P;

  FUNCTION CP_POSTAL_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_POSTAL_CODE;
  END CP_POSTAL_CODE_P;

  FUNCTION CP_TOWN_CITY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TOWN_CITY;
  END CP_TOWN_CITY_P;

  FUNCTION CP_COUNTRY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_COUNTRY;
  END CP_COUNTRY_P;

  FUNCTION CP_PRE_TAX_DEDUCTIONS_THIS_PA RETURN NUMBER IS
  BEGIN
    RETURN CP_PRE_TAX_DEDUCTIONS_THIS_PAY;
  END CP_PRE_TAX_DEDUCTIONS_THIS_PA;

  FUNCTION CP_DIRECT_PAYMENTS_YTD_P RETURN NUMBER IS
  BEGIN
    RETURN CP_DIRECT_PAYMENTS_YTD;
  END CP_DIRECT_PAYMENTS_YTD_P;

  FUNCTION CP_TAXABLE_INCOME_YTD_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TAXABLE_INCOME_YTD;
  END CP_TAXABLE_INCOME_YTD_P;

  FUNCTION CP_DIRECT_PAYMENTS_THIS_PAY_P RETURN NUMBER IS
  BEGIN
    RETURN CP_DIRECT_PAYMENTS_THIS_PAY;
  END CP_DIRECT_PAYMENTS_THIS_PAY_P;

  FUNCTION CP_TAXABLE_INCOME_THIS_PAY_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TAXABLE_INCOME_THIS_PAY;
  END CP_TAXABLE_INCOME_THIS_PAY_P;

  FUNCTION CP_PRE_TAX_DEDUCTIONS_YTD_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PRE_TAX_DEDUCTIONS_YTD;
  END CP_PRE_TAX_DEDUCTIONS_YTD_P;

  FUNCTION CP_NON_TAX_ALLOW_YTD_P RETURN NUMBER IS
  BEGIN
    RETURN CP_NON_TAX_ALLOW_YTD;
  END CP_NON_TAX_ALLOW_YTD_P;

  FUNCTION CP_GROSS_THIS_PAY_P RETURN NUMBER IS
  BEGIN
    RETURN CP_GROSS_THIS_PAY;
  END CP_GROSS_THIS_PAY_P;

  FUNCTION CP_NON_TAX_ALLOW_THIS_PAY_P RETURN NUMBER IS
  BEGIN
    RETURN CP_NON_TAX_ALLOW_THIS_PAY;
  END CP_NON_TAX_ALLOW_THIS_PAY_P;

  FUNCTION CP_OTHER_DEDUCTIONS_THIS_PAY_P RETURN NUMBER IS
  BEGIN
    RETURN CP_OTHER_DEDUCTIONS_THIS_PAY;
  END CP_OTHER_DEDUCTIONS_THIS_PAY_P;

  FUNCTION CP_TAX_DEDUCTIONS_THIS_PAY_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TAX_DEDUCTIONS_THIS_PAY;
  END CP_TAX_DEDUCTIONS_THIS_PAY_P;

  FUNCTION CP_GROSS_YTD_P RETURN NUMBER IS
  BEGIN
    RETURN CP_GROSS_YTD;
  END CP_GROSS_YTD_P;

  FUNCTION CP_OTHER_DEDUCTIONS_YTD_P RETURN NUMBER IS
  BEGIN
    RETURN CP_OTHER_DEDUCTIONS_YTD;
  END CP_OTHER_DEDUCTIONS_YTD_P;

  FUNCTION CP_TAX_DEDUCTIONS_YTD_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TAX_DEDUCTIONS_YTD;
  END CP_TAX_DEDUCTIONS_YTD_P;

  FUNCTION CP_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN CP_START_DATE;
  END CP_START_DATE_P;

  FUNCTION CP_END_DATE_P RETURN DATE IS
  BEGIN
    RETURN CP_END_DATE;
  END CP_END_DATE_P;

  FUNCTION CP_ACCRUAL_END_DATE_P RETURN DATE IS
  BEGIN
    RETURN CP_ACCRUAL_END_DATE;
  END CP_ACCRUAL_END_DATE_P;

  FUNCTION CP_ACCRUAL_P RETURN NUMBER IS
  BEGIN
    RETURN CP_ACCRUAL;
  END CP_ACCRUAL_P;

  FUNCTION CP_NET_ENTITLEMENT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_NET_ENTITLEMENT;
  END CP_NET_ENTITLEMENT_P;

  FUNCTION CP_WHERE_CLAUSE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_WHERE_CLAUSE;
  END CP_WHERE_CLAUSE_P;

  FUNCTION CP_ORDER_BY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ORDER_BY;
  END CP_ORDER_BY_P;

END PAY_PAYAUSOE_XMLP_PKG;

/
