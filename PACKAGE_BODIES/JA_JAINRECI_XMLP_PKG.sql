--------------------------------------------------------
--  DDL for Package Body JA_JAINRECI_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JA_JAINRECI_XMLP_PKG" AS
/* $Header: JAINRECIB.pls 120.1 2007/12/25 16:27:07 dwkrishn noship $ */
  FUNCTION CF_TRANSACTIONAL_CURRFORMULA(PARENT_TRANSACTION_ID IN NUMBER) RETURN VARCHAR2 IS
    CURSOR PARENT_CUR IS
      SELECT
        CURRENCY_CODE,
        CURRENCY_CONVERSION_RATE,
        TRANSACTION_TYPE,
        PO_HEADER_ID
      FROM
        RCV_TRANSACTIONS
      WHERE TRANSACTION_ID = PARENT_TRANSACTION_ID;
    V_PARENT_REC PARENT_CUR%ROWTYPE;
  BEGIN
    OPEN PARENT_CUR;
    FETCH PARENT_CUR
     INTO V_PARENT_REC;
    CLOSE PARENT_CUR;
    IF V_PARENT_REC.TRANSACTION_TYPE <> 'MATCH' THEN
      RETURN V_PARENT_REC.CURRENCY_CODE;
    ELSE
      FOR po_rec IN (SELECT
                       CURRENCY_CODE,
                       RATE
                     FROM
                       PO_HEADERS_ALL
                     WHERE PO_HEADER_ID = V_PARENT_REC.PO_HEADER_ID) LOOP
        RETURN PO_REC.CURRENCY_CODE;
      END LOOP;
    END IF;
    RETURN NULL;
  END CF_TRANSACTIONAL_CURRFORMULA;

  FUNCTION CF_2FORMULA(PARENT_TRANSACTION_ID IN NUMBER
                      ,SHIPMENT_LINE_ID IN NUMBER
                      ,CF_CURRENCY_CODE IN VARCHAR2
                      ,PRIMARY_QUANTITY IN NUMBER) RETURN NUMBER IS
    V_CONV_FACTOR RCV_TRANSACTIONS.CURRENCY_CONVERSION_RATE%TYPE;
    V_CVD_AMT NUMBER;
    V_CURRENCY_CONVERSION_RATE RCV_TRANSACTIONS.CURRENCY_CONVERSION_RATE%TYPE;
    LN_VAT_TAX NUMBER;
    CURSOR PARENT_CUR IS
      SELECT
        CURRENCY_CODE,
        CURRENCY_CONVERSION_RATE,
        TRANSACTION_TYPE,
        PRIMARY_QUANTITY,
        PO_HEADER_ID
      FROM
        RCV_TRANSACTIONS
      WHERE TRANSACTION_ID = PARENT_TRANSACTION_ID;
    V_PARENT_REC PARENT_CUR%ROWTYPE;
  BEGIN
    OPEN PARENT_CUR;
    FETCH PARENT_CUR
     INTO V_PARENT_REC;
    CLOSE PARENT_CUR;
    IF V_PARENT_REC.TRANSACTION_TYPE <> 'MATCH' THEN
      V_CURRENCY_CONVERSION_RATE := V_PARENT_REC.CURRENCY_CONVERSION_RATE;
    ELSE
      FOR po_rec IN (SELECT
                       CURRENCY_CODE,
                       RATE
                     FROM
                       PO_HEADERS_ALL
                     WHERE PO_HEADER_ID = V_PARENT_REC.PO_HEADER_ID) LOOP
        V_CURRENCY_CONVERSION_RATE := PO_REC.RATE;
      END LOOP;
    END IF;
    FOR cr_rec IN (SELECT
                     JRTL.TAX_AMOUNT,
                     JRTL.TAX_TYPE,
                     JRTL.CURRENCY,
                     NVL(MOD_CR_PERCENTAGE
                        ,0) MOD_CR_PERCENTAGE
                   FROM
                     JAI_RCV_LINE_TAXES JRTL,
                     JAI_CMN_TAXES_ALL JTC
                   WHERE SHIPMENT_LINE_ID = CF_2FORMULA.SHIPMENT_LINE_ID
                     AND NVL(MODVAT_FLAG
                      ,'N') = 'Y'
                     AND JRTL.TAX_ID = JTC.TAX_ID) LOOP
      IF CR_REC.CURRENCY <> CF_CURRENCY_CODE THEN
        V_CONV_FACTOR := NVL(V_CURRENCY_CONVERSION_RATE
                            ,1);
      ELSE
        V_CONV_FACTOR := 1;
      END IF;
      IF (V_PARENT_REC.PRIMARY_QUANTITY <> 0) THEN
        V_CONV_FACTOR := V_CONV_FACTOR * (PRIMARY_QUANTITY / V_PARENT_REC.PRIMARY_QUANTITY);
      END IF;
      IF CR_REC.TAX_TYPE = 'CVD' THEN
        V_CVD_AMT := NVL(V_CVD_AMT
                        ,0) + (NVL(CR_REC.TAX_AMOUNT
                        ,0) * CR_REC.MOD_CR_PERCENTAGE / 100) * V_CONV_FACTOR;
      ELSIF CR_REC.TAX_TYPE in ('VALUE ADDED TAX','PURCHASE TAX','TURNOVER TAX','ENTRY TAX') THEN
        LN_VAT_TAX := NVL(LN_VAT_TAX
                         ,0) + (NVL(CR_REC.TAX_AMOUNT
                         ,0) * CR_REC.MOD_CR_PERCENTAGE / 100) * V_CONV_FACTOR;
      END IF;
    END LOOP;
    CP_VAT_TAX := NVL(LN_VAT_TAX
                     ,0);
    RETURN NVL(V_CVD_AMT
              ,0);
  END CF_2FORMULA;

  FUNCTION CF_3FORMULA(LOCATION_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    FOR loc_rec IN (SELECT
                      DESCRIPTION
                    FROM
                      HR_LOCATIONS
                    WHERE LOCATION_ID = cf_3formula.LOCATION_ID) LOOP
      RETURN LOC_REC.DESCRIPTION;
    END LOOP;
    RETURN NULL;
  END CF_3FORMULA;

  FUNCTION CF_4FORMULA(LOCATION_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    FOR loc_rec IN (SELECT
                      COUNTRY
                    FROM
                      HR_LOCATIONS
                    WHERE LOCATION_ID = cf_4formula.LOCATION_ID) LOOP
      RETURN LOC_REC.COUNTRY;
    END LOOP;
    RETURN NULL;
  END CF_4FORMULA;

  FUNCTION CF_5FORMULA(LOCATION_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    FOR loc_rec IN (SELECT
                      ADDRESS_LINE_1
                    FROM
                      HR_LOCATIONS
                    WHERE LOCATION_ID = CF_5FORMULA.LOCATION_ID) LOOP
      RETURN LOC_REC.ADDRESS_LINE_1;
    END LOOP;
    RETURN NULL;
  END CF_5FORMULA;

  FUNCTION CF_6FORMULA(LOCATION_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    FOR loc_rec IN (SELECT
                      ADDRESS_LINE_2
                    FROM
                      HR_LOCATIONS
                    WHERE LOCATION_ID = CF_6FORMULA.LOCATION_ID) LOOP
      RETURN LOC_REC.ADDRESS_LINE_2;
    END LOOP;
    RETURN NULL;
  END CF_6FORMULA;

  FUNCTION CF_7FORMULA(LOCATION_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    FOR loc_rec IN (SELECT
                      ADDRESS_LINE_3
                    FROM
                      HR_LOCATIONS
                    WHERE LOCATION_ID = CF_7FORMULA.LOCATION_ID) LOOP
      RETURN LOC_REC.ADDRESS_LINE_3;
    END LOOP;
    RETURN NULL;
  END CF_7FORMULA;

  FUNCTION CF_8FORMULA(ORGANIZATION_ID1 IN NUMBER
                      ,INVENTORY_ITEM_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    FOR item_rec IN (SELECT
                       ITEM_FOLIO
                     FROM
                       JAI_INV_ITM_SETUPS
                     WHERE ORGANIZATION_ID = ORGANIZATION_ID1
                       AND INVENTORY_ITEM_ID = CF_8FORMULA.INVENTORY_ITEM_ID) LOOP
      RETURN ITEM_REC.ITEM_FOLIO;
    END LOOP;
    RETURN NULL;
  END CF_8FORMULA;

  FUNCTION CF_CURRENCY_CODEFORMULA(ORGANIZATION_ID1 IN NUMBER) RETURN CHAR IS
    V_CURRENCY_CODE GL_SETS_OF_BOOKS.CURRENCY_CODE%TYPE;
  BEGIN
    FOR fetch_curr_code IN (SELECT
                              CURRENCY_CODE
                            FROM
                              GL_SETS_OF_BOOKS
                            WHERE SET_OF_BOOKS_ID in (
                              SELECT
                                SET_OF_BOOKS_ID
                              FROM
                                ORG_ORGANIZATION_DEFINITIONS
                              WHERE ORGANIZATION_ID = ORGANIZATION_ID1 )) LOOP
      V_CURRENCY_CODE := FETCH_CURR_CODE.CURRENCY_CODE;
    END LOOP;
    RETURN (V_CURRENCY_CODE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_CURRENCY_CODEFORMULA;

  FUNCTION CF_ORGANIZATION_NAMEFORMULA(ORGANIZATION_ID1 IN NUMBER) RETURN CHAR IS
    V_ORGANIZATION_NAME ORG_ORGANIZATION_DEFINITIONS.ORGANIZATION_NAME%TYPE;
  BEGIN
    FOR fetch_org_name IN (SELECT
                             ORGANIZATION_NAME
                           FROM
                             ORG_ORGANIZATION_DEFINITIONS
                           WHERE ORGANIZATION_ID = ORGANIZATION_ID1) LOOP
      V_ORGANIZATION_NAME := FETCH_ORG_NAME.ORGANIZATION_NAME;
    END LOOP;
    RETURN (V_ORGANIZATION_NAME);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_ORGANIZATION_NAMEFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    /*SRW.MESSAGE(1275
               ,'Report Version is 120.6 Last modified date is 24-Nov-2006')*/NULL;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_CESS_AMOUNTFORMULA(TRANSACTION_ID IN NUMBER
                                ,ORGANIZATION_ID1 IN NUMBER
                                ,LOCATION_ID IN NUMBER
                                ,REGISTER_TYPE IN VARCHAR2
                                ,DR_BASIC_ED IN NUMBER
                                ,DR_ADDITIONAL_ED IN NUMBER
                                ,DR_OTHER_ED IN NUMBER) RETURN NUMBER IS
    LN_CESS_AMOUNT NUMBER;
    LV_EXC_EDU_CESS JAI_CMN_RG_OTHERS.TAX_TYPE%TYPE;
    LV_CVD_EDU_CESS JAI_CMN_RG_OTHERS.TAX_TYPE%TYPE;
    CURSOR LCU_GET_PLA_CESS_AMOUNT IS
      SELECT
        NVL(SUM(JRO.CREDIT)
           ,SUM(JRO.DEBIT))
      FROM
        JAI_CMN_RG_OTHERS JRO
      WHERE JRO.SOURCE_REGISTER_ID IN (
        SELECT
          RG.REGISTER_ID
        FROM
          JAI_CMN_RG_PLA_TRXS RG
        WHERE RG.REF_DOCUMENT_ID = TRANSACTION_ID
          AND RG.ORGANIZATION_ID = ORGANIZATION_ID1
          AND RG.TRANSACTION_SOURCE_NUM = 19
          AND RG.LOCATION_ID = cf_cess_amountformula.LOCATION_ID )
        AND JRO.SOURCE_TYPE = 2
        AND JRO.TAX_TYPE IN ( LV_EXC_EDU_CESS , LV_CVD_EDU_CESS );
    CURSOR LCU_GET_CESS_AMOUNT IS
      SELECT
        NVL(SUM(JRO.CREDIT)
           ,SUM(JRO.DEBIT))
      FROM
        JAI_CMN_RG_OTHERS JRO
      WHERE JRO.SOURCE_REGISTER_ID IN (
        SELECT
          RG.REGISTER_ID
        FROM
          JAI_CMN_RG_23AC_II_TRXS RG
        WHERE RG.RECEIPT_REF = TRANSACTION_ID
          AND RG.ORGANIZATION_ID = ORGANIZATION_ID1
          AND RG.TRANSACTION_SOURCE_NUM = 18
          AND RG.LOCATION_ID = cf_cess_amountformula.LOCATION_ID )
        AND JRO.SOURCE_TYPE = 1
        AND JRO.TAX_TYPE IN ( LV_EXC_EDU_CESS , LV_CVD_EDU_CESS );
  BEGIN
    LV_EXC_EDU_CESS := 'EXCISE_EDUCATION_CESS';
    LV_CVD_EDU_CESS := 'CVD_EDUCATION_CESS';
    IF (REGISTER_TYPE = 'PLA') THEN
      OPEN LCU_GET_PLA_CESS_AMOUNT;
      FETCH LCU_GET_PLA_CESS_AMOUNT
       INTO LN_CESS_AMOUNT;
      CLOSE LCU_GET_PLA_CESS_AMOUNT;
    ELSE
      OPEN LCU_GET_CESS_AMOUNT;
      FETCH LCU_GET_CESS_AMOUNT
       INTO LN_CESS_AMOUNT;
      CLOSE LCU_GET_CESS_AMOUNT;
    END IF;
    /*SRW.MESSAGE(1000
               ,'CessFor basic:' || DR_BASIC_ED || ', rndBasic:' || CP_ROUND_BASIC_ED || ', addl:' || DR_ADDITIONAL_ED || ', rndAddl:' || CP_ROUND_ADDITIONAL_ED || ', oth:' || DR_OTHER_ED || ', rndOth:'
	       || CP_ROUND_OTHER_ED || ', cess:' || LN_CESS_AMOUNT || ', rndAddl:' || CP_ROUND_CESS)*/NULL;
    RETURN (NVL(LN_CESS_AMOUNT
              ,0) + NVL(CP_ROUND_CESS
              ,0));
  EXCEPTION
    WHEN OTHERS THEN
      IF (LCU_GET_PLA_CESS_AMOUNT%ISOPEN) THEN
        CLOSE LCU_GET_PLA_CESS_AMOUNT;
      END IF;
      IF (LCU_GET_CESS_AMOUNT%ISOPEN) THEN
        CLOSE LCU_GET_CESS_AMOUNT;
      END IF;
      RETURN (0);
  END CF_CESS_AMOUNTFORMULA;

  FUNCTION CF_ROUNDING_AMTSFORMULA(ROUNDING_ID IN NUMBER
                                  ,REGISTER_TYPE IN VARCHAR2
                                  ,DR_BASIC_ED IN NUMBER
                                  ,DR_ADDITIONAL_ED IN NUMBER
                                  ,DR_OTHER_ED IN NUMBER) RETURN NUMBER IS
    CURSOR C_ROUNDING_DTL(CP_ROUNDING_ID IN NUMBER) IS
      SELECT
        REGISTER_ID
      FROM
        JAI_CMN_RG_ROUND_HDRS
      WHERE ROUNDING_ID = CP_ROUNDING_ID;
    CURSOR C_23P2_RND_AMTS(CP_REGISTER_ID IN NUMBER) IS
      SELECT
        - NVL(CR_BASIC_ED
           ,0) + NVL(DR_BASIC_ED
           ,0) BASIC_ED,
        - NVL(CR_ADDITIONAL_ED
           ,0) + NVL(DR_ADDITIONAL_ED
           ,0) ADDITIONAL_ED,
        - NVL(CR_OTHER_ED
           ,0) + NVL(DR_OTHER_ED
           ,0) OTHER_ED,
        - NVL(CR_ADDITIONAL_CVD
           ,0) + NVL(DR_ADDITIONAL_CVD
           ,0) OTHER_ED
      FROM
        JAI_CMN_RG_23AC_II_TRXS
      WHERE REGISTER_ID = CP_REGISTER_ID;
    CURSOR C_PLA_RND_AMTS(CP_REGISTER_ID IN NUMBER) IS
      SELECT
        - NVL(CR_BASIC_ED
           ,0) + NVL(DR_BASIC_ED
           ,0) BASIC_ED,
        - NVL(CR_ADDITIONAL_ED
           ,0) + NVL(DR_ADDITIONAL_ED
           ,0) ADDITIONAL_ED,
        - NVL(CR_OTHER_ED
           ,0) + NVL(DR_OTHER_ED
           ,0) OTHER_ED
      FROM
        JAI_CMN_RG_PLA_TRXS
      WHERE REGISTER_ID = CP_REGISTER_ID;
    LV_EXC_EDU_CESS JAI_CMN_RG_OTHERS.TAX_TYPE%TYPE;
    LV_CVD_EDU_CESS JAI_CMN_RG_OTHERS.TAX_TYPE%TYPE;
    CURSOR C_RND_CESS_AMT(CP_REGISTER_ID IN NUMBER,CP_SOURCE_TYPE IN NUMBER) IS
      SELECT
        SUM(NVL(DEBIT
               ,0) - NVL(CREDIT
               ,0))
      FROM
        JAI_CMN_RG_OTHERS
      WHERE SOURCE_REGISTER_ID = CP_REGISTER_ID
        AND SOURCE_TYPE = CP_SOURCE_TYPE
        AND TAX_TYPE in ( LV_EXC_EDU_CESS , LV_CVD_EDU_CESS );
    V_RND_BASIC_ED NUMBER;
    V_RND_ADDITIONAL_ED NUMBER;
    V_RND_ADDITIONAL_CVD NUMBER;
    V_RND_OTHER_ED NUMBER;
    V_RND_CESS NUMBER;
    V_REGISTER_ID NUMBER;
  BEGIN
    IF ROUNDING_ID IS NOT NULL THEN
      OPEN C_ROUNDING_DTL(ROUNDING_ID);
      FETCH C_ROUNDING_DTL
       INTO V_REGISTER_ID;
      CLOSE C_ROUNDING_DTL;
      IF REGISTER_TYPE in ('A','C') THEN
        OPEN C_23P2_RND_AMTS(V_REGISTER_ID);
        FETCH C_23P2_RND_AMTS
         INTO V_RND_BASIC_ED,V_RND_ADDITIONAL_ED,V_RND_OTHER_ED,V_RND_ADDITIONAL_CVD;
        CLOSE C_23P2_RND_AMTS;
        LV_EXC_EDU_CESS := 'EXCISE_EDUCATION_CESS';
        LV_CVD_EDU_CESS := 'CVD_EDUCATION_CESS';
        OPEN C_RND_CESS_AMT(V_REGISTER_ID,1);
        FETCH C_RND_CESS_AMT
         INTO V_RND_CESS;
        CLOSE C_RND_CESS_AMT;
      ELSIF REGISTER_TYPE = 'PLA' THEN
        OPEN C_PLA_RND_AMTS(V_REGISTER_ID);
        FETCH C_PLA_RND_AMTS
         INTO V_RND_BASIC_ED,V_RND_ADDITIONAL_ED,V_RND_OTHER_ED;
        CLOSE C_PLA_RND_AMTS;
        LV_EXC_EDU_CESS := 'EXCISE_EDUCATION_CESS';
        LV_CVD_EDU_CESS := 'CVD_EDUCATION_CESS';
        OPEN C_RND_CESS_AMT(V_REGISTER_ID,2);
        FETCH C_RND_CESS_AMT
         INTO V_RND_CESS;
        CLOSE C_RND_CESS_AMT;
      END IF;
      CP_ROUND_BASIC_ED := V_RND_BASIC_ED;
      CP_ROUND_OTHER_ED := V_RND_OTHER_ED;
      CP_ROUND_ADDITIONAL_ED := V_RND_ADDITIONAL_ED;
      CP_ROUND_ADDITIONAL_CVD := V_RND_ADDITIONAL_CVD;
      CP_ROUND_CESS := V_RND_CESS;
    ELSE
      CP_ROUND_BASIC_ED := 0;
      CP_ROUND_OTHER_ED := 0;
      CP_ROUND_ADDITIONAL_ED := 0;
      CP_ROUND_CESS := 0;
      CP_ROUND_ADDITIONAL_CVD := 0;
    END IF;
    /*SRW.MESSAGE(1000
               ,'RndAmts basic:' || DR_BASIC_ED || ', rndBasic:' || CP_ROUND_BASIC_ED || ', addl:' || DR_ADDITIONAL_ED || ', rndAddl:' || CP_ROUND_ADDITIONAL_ED || ', oth:' || DR_OTHER_ED
	       || ', rndOth:' || CP_ROUND_OTHER_ED || ', rndAddl:' || CP_ROUND_CESS)*/NULL;
    RETURN (V_RND_BASIC_ED + V_RND_OTHER_ED + V_RND_ADDITIONAL_ED + V_RND_CESS);
  END CF_ROUNDING_AMTSFORMULA;

  FUNCTION CF_BASIC_EDFORMULA(DR_BASIC_ED IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(DR_BASIC_ED
              ,0) + NVL(CP_ROUND_BASIC_ED
              ,0));
  END CF_BASIC_EDFORMULA;

  FUNCTION CF_ADDITIONAL_EDFORMULA(DR_ADDITIONAL_ED IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(DR_ADDITIONAL_ED
              ,0) + NVL(CP_ROUND_ADDITIONAL_ED
              ,0));
  END CF_ADDITIONAL_EDFORMULA;

  FUNCTION CF_OTHER_EDFORMULA(DR_OTHER_ED IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(DR_OTHER_ED
              ,0) + NVL(CP_ROUND_OTHER_ED
              ,0));
  END CF_OTHER_EDFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_ADDITIONAL_CVDFORMULA(DR_ADDITIONAL_CVD IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (NVL(DR_ADDITIONAL_CVD
              ,0) + NVL(CP_ROUND_ADDITIONAL_CVD
              ,0));
  END CF_ADDITIONAL_CVDFORMULA;

  FUNCTION CF_CALC_VAT_INVNUM_DATEFORMULA(TRANSACTION_ID IN NUMBER) RETURN NUMBER IS
    LC_VAT_INV_NO VARCHAR2(50);
    LD_VAT_INV_DATE DATE;
    CURSOR LCU_GET_VAT_DETAILS(P_TRANSACTION_ID IN NUMBER) IS
      SELECT
        JIRT.VAT_INVOICE_NO,
        JIRT.VAT_INVOICE_DATE
      FROM
        JAI_RCV_TRANSACTIONS JIRT
      WHERE JIRT.TRANSACTION_ID = P_TRANSACTION_ID;
  BEGIN
    OPEN LCU_GET_VAT_DETAILS(P_TRANSACTION_ID => TRANSACTION_ID);
    FETCH LCU_GET_VAT_DETAILS
     INTO LC_VAT_INV_NO,LD_VAT_INV_DATE;
    CLOSE LCU_GET_VAT_DETAILS;
    CP_VAT_INVOICE_NUMBER := LC_VAT_INV_NO;
    CP_VAT_INVOICE_DATE := LD_VAT_INV_DATE;
    RETURN (NULL);
  EXCEPTION
    WHEN OTHERS THEN
      IF (LCU_GET_VAT_DETAILS%ISOPEN) THEN
        CLOSE LCU_GET_VAT_DETAILS;
      END IF;
      RETURN (NULL);
  END CF_CALC_VAT_INVNUM_DATEFORMULA;

  FUNCTION CF_SH_CESS_AMOUNTFORMULA(TRANSACTION_ID IN NUMBER
                                   ,ORGANIZATION_ID1 IN NUMBER
                                   ,LOCATION_ID IN NUMBER
                                   ,REGISTER_TYPE IN VARCHAR2
                                   ,DR_BASIC_ED IN NUMBER
                                   ,DR_ADDITIONAL_ED IN NUMBER
                                   ,DR_OTHER_ED IN NUMBER) RETURN NUMBER IS
    CURSOR LCU_GET_PLA_CESS_AMOUNT IS
      SELECT
        NVL(SUM(JRO.CREDIT)
           ,SUM(JRO.DEBIT))
      FROM
        JAI_CMN_RG_OTHERS JRO
      WHERE JRO.SOURCE_REGISTER_ID in (
        SELECT
          RG.REGISTER_ID
        FROM
          JAI_CMN_RG_PLA_TRXS RG
        WHERE RG.REF_DOCUMENT_ID = TRANSACTION_ID
          AND RG.ORGANIZATION_ID = ORGANIZATION_ID1
          AND RG.TRANSACTION_SOURCE_NUM = 19
          AND RG.LOCATION_ID = cf_sh_cess_amountformula.LOCATION_ID )
        AND JRO.SOURCE_TYPE = 2
        AND JRO.TAX_TYPE in ( 'EXCISE_SH_EDU_CESS' , 'CVD_SH_EDU_CESS' );
    CURSOR LCU_GET_CESS_AMOUNT IS
      SELECT
        NVL(SUM(JRO.CREDIT)
           ,SUM(JRO.DEBIT))
      FROM
        JAI_CMN_RG_OTHERS JRO
      WHERE JRO.SOURCE_REGISTER_ID in (
        SELECT
          RG.REGISTER_ID
        FROM
          JAI_CMN_RG_23AC_II_TRXS RG
        WHERE RG.RECEIPT_REF = TRANSACTION_ID
          AND RG.ORGANIZATION_ID = ORGANIZATION_ID1
          AND RG.TRANSACTION_SOURCE_NUM = 18
          AND RG.LOCATION_ID = cf_sh_cess_amountformula.LOCATION_ID )
        AND JRO.SOURCE_TYPE = 1
        AND JRO.TAX_TYPE in ( 'EXCISE_SH_EDU_CESS' , 'CVD_SH_EDU_CESS' );
    LN_SH_CESS_AMOUNT NUMBER;
  BEGIN
    IF (REGISTER_TYPE = 'PLA') THEN
      OPEN LCU_GET_PLA_CESS_AMOUNT;
      FETCH LCU_GET_PLA_CESS_AMOUNT
       INTO LN_SH_CESS_AMOUNT;
      CLOSE LCU_GET_PLA_CESS_AMOUNT;
    ELSE
      OPEN LCU_GET_CESS_AMOUNT;
      FETCH LCU_GET_CESS_AMOUNT
       INTO LN_SH_CESS_AMOUNT;
      CLOSE LCU_GET_CESS_AMOUNT;
    END IF;
    /*SRW.MESSAGE(1000
               ,'CessFor basic:' || DR_BASIC_ED || ', rndBasic:' || CP_ROUND_BASIC_ED || ', addl:' || DR_ADDITIONAL_ED || ', rndAddl:' || CP_ROUND_ADDITIONAL_ED || ', oth:' || DR_OTHER_ED || ', rndOth:' ||
	       CP_ROUND_OTHER_ED || ', cess:' || LN_SH_CESS_AMOUNT || ', SH Rndcess:' || CP_SH_ROUND_CESS)*/NULL;
    RETURN (NVL(LN_SH_CESS_AMOUNT
              ,0) + NVL(CP_SH_ROUND_CESS
              ,0));
  EXCEPTION
    WHEN OTHERS THEN
      IF (LCU_GET_PLA_CESS_AMOUNT%ISOPEN) THEN
        CLOSE LCU_GET_PLA_CESS_AMOUNT;
      END IF;
      IF (LCU_GET_CESS_AMOUNT%ISOPEN) THEN
        CLOSE LCU_GET_CESS_AMOUNT;
      END IF;
      RETURN (0);
  END CF_SH_CESS_AMOUNTFORMULA;

  FUNCTION CP_ROUND_BASIC_ED_P RETURN NUMBER IS
  BEGIN
    RETURN CP_ROUND_BASIC_ED;
  END CP_ROUND_BASIC_ED_P;

  FUNCTION CP_ROUND_ADDITIONAL_ED_P RETURN NUMBER IS
  BEGIN
    RETURN CP_ROUND_ADDITIONAL_ED;
  END CP_ROUND_ADDITIONAL_ED_P;

  FUNCTION CP_ROUND_ADDITIONAL_CVD_P RETURN NUMBER IS
  BEGIN
    RETURN CP_ROUND_ADDITIONAL_CVD;
  END CP_ROUND_ADDITIONAL_CVD_P;

  FUNCTION CP_ROUND_OTHER_ED_P RETURN NUMBER IS
  BEGIN
    RETURN CP_ROUND_OTHER_ED;
  END CP_ROUND_OTHER_ED_P;

  FUNCTION CP_ROUND_CESS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_ROUND_CESS;
  END CP_ROUND_CESS_P;

  FUNCTION CP_VAT_TAX_P RETURN NUMBER IS
  BEGIN
    RETURN CP_VAT_TAX;
  END CP_VAT_TAX_P;

  FUNCTION CP_SH_ROUND_CESS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SH_ROUND_CESS;
  END CP_SH_ROUND_CESS_P;

  FUNCTION CP_VAT_INVOICE_NUMBER_P RETURN NUMBER IS
  BEGIN
    RETURN CP_VAT_INVOICE_NUMBER;
  END CP_VAT_INVOICE_NUMBER_P;

  FUNCTION CP_VAT_INVOICE_DATE_P RETURN DATE IS
  BEGIN
    RETURN CP_VAT_INVOICE_DATE;
  END CP_VAT_INVOICE_DATE_P;

END JA_JAINRECI_XMLP_PKG;




/
