--------------------------------------------------------
--  DDL for Package Body BOM_CSTRPWDD_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."BOM_CSTRPWDD_XMLP_PKG" AS
/* $Header: CSTRPWDDB.pls 120.0 2007/12/24 10:14:53 dwkrishn noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CL_TYPE NUMBER(10);
  BEGIN
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in SRWINIT')*/NULL;
        RAISE;
    END;
    BEGIN
      IF P_JOB IS NOT NULL THEN
        P_LIMIT_ENTITY := ' wt.wip_entity_id= ''' || P_JOB || '''';
      ELSE
        NULL;
      END IF;
    END;
    BEGIN
      IF P_CLASS_CODE IS NOT NULL THEN
        BEGIN
          SELECT
            DISTINCT
            CLASS_TYPE
          INTO CL_TYPE
          FROM
            WIP_ACCOUNTING_CLASSES
          WHERE CLASS_CODE = P_CLASS_CODE;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            /*SRW.MESSAGE(30
                       ,'No Rows Found for the Class Code specified')*/NULL;
          WHEN OTHERS THEN
            /*SRW.MESSAGE(31
                       ,'Failed in p_limit_classes.')*/NULL;
            RAISE;
        END;
        IF CL_TYPE = 2 THEN
          P_LIMIT_CLASSES := ' wri.class_code= ''' || P_CLASS_CODE || '''';
        ELSE
          P_LIMIT_CLASSES := ' wdj.class_code= ''' || P_CLASS_CODE || '''';
        END IF;
      ELSE
        NULL;
      END IF;
    END;
    BEGIN
      IF P_CONC_REQUEST_ID IS NOT NULL THEN
        SELECT
          FRV.RESPONSIBILITY_NAME,
          TO_CHAR(FCR.REQUEST_DATE
                 ,'YYYY/MM/DD HH24:MI:SS'),
          FAV.APPLICATION_NAME,
          FU.USER_NAME
        INTO CP_RESPONSIBILITY,CP_REQUEST_TIME,CP_APPLICATION,CP_REQUESTED_BY
        FROM
          FND_CONCURRENT_REQUESTS FCR,
          FND_RESPONSIBILITY_VL FRV,
          FND_APPLICATION_VL FAV,
          FND_USER FU
        WHERE FCR.REQUEST_ID = P_CONC_REQUEST_ID
          AND FCR.RESPONSIBILITY_APPLICATION_ID = FRV.APPLICATION_ID
          AND FCR.RESPONSIBILITY_ID = FRV.RESPONSIBILITY_ID
          AND FRV.APPLICATION_ID = FAV.APPLICATION_ID
          AND FU.USER_ID = FCR.REQUESTED_BY;
      ELSE
        NULL;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        /*SRW.MESSAGE(30
                   ,'Failed Request By and Request Time Init.')*/NULL;
      WHEN OTHERS THEN
        /*SRW.MESSAGE(31
                   ,'Failed Request By and Request Time Init.')*/NULL;
    END;
    BEGIN
      SELECT
        DISTINCT
        HR.NAME,
        CCG.COST_GROUP,
        CCT.COST_TYPE,
        CAH.PERIOD_NAME,
        NVL(FC.PRECISION
           ,2),
        NVL(FC.EXTENDED_PRECISION
           ,5)
      INTO CP_LEGAL_ENTITY,CP_COST_GROUP,CP_COST_TYPE,CP_PERIOD_NAME,P_CURRENCY_PRECISION,P_RATE_PRECISION
      FROM
        CST_AE_HEADERS CAH,
        HR_LEGAL_ENTITIES HR,
        FND_CURRENCIES FC,
        CST_COST_GROUPS CCG,
        CST_COST_TYPES CCT
      WHERE CAH.LEGAL_ENTITY_ID = HR.ORGANIZATION_ID
        AND FC.CURRENCY_CODE = P_CURRENCY_CODE
        AND CAH.COST_GROUP_ID = P_COST_GROUP_ID
        AND CCG.COST_GROUP_ID = CAH.COST_GROUP_ID
        AND CCT.COST_TYPE_ID = P_COST_TYPE_ID
        AND CAH.PERIOD_ID = P_PERIOD_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        /*SRW.MESSAGE(30
                   ,'Failed legal entity and others init.')*/NULL;
      WHEN OTHERS THEN
        /*SRW.MESSAGE(31
                   ,'Failed legal entity and others init.')*/NULL;
    END;
    BEGIN
      IF P_JOB IS NOT NULL THEN
        SELECT
          NVL(WE.WIP_ENTITY_NAME
             ,' ')
        INTO CP_WIP_ENTITY_NAME_COV
        FROM
          WIP_ENTITIES WE
        WHERE WE.WIP_ENTITY_ID = P_JOB;
      ELSE
        NULL;
      END IF;
      IF P_LINE IS NOT NULL THEN
        SELECT
          NVL(WL.LINE_CODE
             ,' ')
        INTO CP_LINE_CODE_COV
        FROM
          WIP_LINES WL
        WHERE WL.LINE_ID = P_LINE;
      ELSE
        NULL;
      END IF;
      IF P_TRANS_TYPE IS NOT NULL THEN
        SELECT
          NVL(ML.MEANING
             ,' ')
        INTO CP_TXN_TYPE_COV
        FROM
          MFG_LOOKUPS ML
        WHERE ML.LOOKUP_TYPE = 'WIP_TRANSACTION_TYPE_SHORT'
          AND ML.LOOKUP_CODE = P_TRANS_TYPE;
      ELSE
        NULL;
      END IF;
      IF P_DEPARTMENT IS NOT NULL THEN
        SELECT
          NVL(BD.DEPARTMENT_CODE
             ,' ')
        INTO CP_DEPARTMENT_CODE_COV
        FROM
          BOM_DEPARTMENTS BD
        WHERE BD.DEPARTMENT_ID = P_DEPARTMENT;
      ELSE
        NULL;
      END IF;
      IF P_ACTIVITY IS NOT NULL THEN
        SELECT
          NVL(CA.ACTIVITY
             ,' ')
        INTO CP_ACTIVITY_COV
        FROM
          CST_ACTIVITIES CA
        WHERE CA.ACTIVITY_ID = P_ACTIVITY;
      ELSE
        NULL;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        /*SRW.MESSAGE(30
                   ,'No data found when initializing parameter names for cover page.')*/NULL;
      WHEN OTHERS THEN
        /*SRW.MESSAGE(31
                   ,'Failed in initializing parameter names for cover page.')*/NULL;
    END;
    BEGIN
      NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in SRW FLEX GL INIT')*/NULL;
    END;
    BEGIN
      NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in SRW FLEX INV INIT')*/NULL;
    END;
    BEGIN
      IF P_ACCT_LO IS NOT NULL OR P_ACCT_HI IS NOT NULL THEN
        NULL;
      ELSE
        NULL;
      END IF;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(4
                   ,'Failed in GL#/WHERE')*/NULL;
        RAISE;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_SUBTITLE_CURRENCYFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN ('(' || P_CURRENCY_CODE || ')');
  END C_SUBTITLE_CURRENCYFORMULA;

  FUNCTION C_ACCT_DESCRIPFORMULA(C_FLEXDATA IN VARCHAR2
                                ,ACCOUNT IN VARCHAR2
                                ,C_ACCT_DESCRIP IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    BEGIN
      /*SRW.REFERENCE(C_FLEXDATA)*/NULL;
      /*SRW.REFERENCE(ACCOUNT)*/NULL;
      RETURN (C_ACCT_DESCRIP);
    END;
    RETURN NULL;
  END C_ACCT_DESCRIPFORMULA;

  FUNCTION C_FLEX_SORTFORMULA(C_FLEXDATA IN VARCHAR2
                             ,ACCOUNT IN VARCHAR2
                             ,C_FLEX_SORT IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    BEGIN
      /*SRW.REFERENCE(C_FLEXDATA)*/NULL;
      /*SRW.REFERENCE(ACCOUNT)*/NULL;
      RETURN (C_FLEX_SORT);
    END;
    RETURN NULL;
  END C_FLEX_SORTFORMULA;

  --PROCEDURE FORMAT_QUANTITY(P_PRECISION IN NUMBER) IS
  --BEGIN
  --  SRW.ATTR.MASK := SRW.FORMATMASK_ATTR;
  --  IF P_PRECISION = 0 THEN
  --    SRW.ATTR.FORMATMASK := '-NNN,NNN,NNN,NN0';
  --  ELSIF P_PRECISION = 1 THEN
  --    SRW.ATTR.FORMATMASK := '-NNN,NNN,NNN,NN0.0';
  --  ELSIF P_PRECISION = 3 THEN
  --    SRW.ATTR.FORMATMASK := '-NN,NNN,NNN,NN0.000';
  --  ELSIF P_PRECISION = 4 THEN
  --    SRW.ATTR.FORMATMASK := '-N,NNN,NNN,NN0.0000';
  --  ELSIF P_PRECISION = 5 THEN
  --    SRW.ATTR.FORMATMASK := '-NNN,NNN,NN0.00000';
  --  ELSIF P_PRECISION = 6 THEN
  --    SRW.ATTR.FORMATMASK := '-NN,NNN,NN0.000000';
  --  ELSIF P_PRECISION = 7 THEN
  --    SRW.ATTR.FORMATMASK := '-NNNNNNNNNNN0';
  --  ELSIF P_PRECISION = 8 THEN
  --    SRW.ATTR.FORMATMASK := '-NNNNNNNNNNN0.0';
  --  ELSIF P_PRECISION = 9 THEN
  --    SRW.ATTR.FORMATMASK := '-NNNNNNNNNN0.00';
  --  ELSIF P_PRECISION = 10 THEN
  --    SRW.ATTR.FORMATMASK := '-NNNNNNNNNN0.000';
  --  ELSIF P_PRECISION = 11 THEN
  --    SRW.ATTR.FORMATMASK := '-NNNNNNNNN0.0000';
  --  ELSIF P_PRECISION = 12 THEN
  --    SRW.ATTR.FORMATMASK := '-NNNNNNNN0.00000';
  --  ELSIF P_PRECISION = 13 THEN
  --    SRW.ATTR.FORMATMASK := '-NNNNNNN0.000000';
  --  ELSE
  --    SRW.ATTR.FORMATMASK := '-NNN,NNN,NNN,NN0.00';
  --  END IF;
    /*SRW.SET_ATTR(0
                ,SRW.ATTR)*/
  --              NULL;
  --END FORMAT_QUANTITY;

  FUNCTION CLASS(R_CLASS IN VARCHAR2
                ,D_CLASS IN VARCHAR2) RETURN CHARACTER IS
    CLASS VARCHAR2(10);
  BEGIN
    IF (R_CLASS IS NULL) THEN
      CLASS := D_CLASS;
    ELSE
      CLASS := R_CLASS;
    END IF;
    RETURN (CLASS);
  END CLASS;

  FUNCTION C_ACCT_TOTAL_RFORMULA(C_ACCT_TOTAL IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND(C_ACCT_TOTAL
                ,P_CURRENCY_PRECISION));
  END C_ACCT_TOTAL_RFORMULA;

  FUNCTION C_JOB_TOTAL_RFORMULA(C_JOB_TOTAL IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND(C_JOB_TOTAL
                ,P_CURRENCY_PRECISION));
  END C_JOB_TOTAL_RFORMULA;

  FUNCTION C_EXT_COST_RFORMULA(EXTENDED_COST IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND(EXTENDED_COST
                ,P_CURRENCY_PRECISION));
  END C_EXT_COST_RFORMULA;

  FUNCTION C_REPT_TOTAL_RFORMULA(C_REPT_TOTAL IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND(C_REPT_TOTAL
                ,P_CURRENCY_PRECISION));
  END C_REPT_TOTAL_RFORMULA;

  FUNCTION CP_RESPONSIBILITY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_RESPONSIBILITY;
  END CP_RESPONSIBILITY_P;

  FUNCTION CP_REQUEST_TIME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_REQUEST_TIME;
  END CP_REQUEST_TIME_P;

  FUNCTION CP_APPLICATION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_APPLICATION;
  END CP_APPLICATION_P;

  FUNCTION CP_REQUESTED_BY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_REQUESTED_BY;
  END CP_REQUESTED_BY_P;

  FUNCTION CP_LEGAL_ENTITY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_LEGAL_ENTITY;
  END CP_LEGAL_ENTITY_P;

  FUNCTION CP_COST_GROUP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_COST_GROUP;
  END CP_COST_GROUP_P;

  FUNCTION CP_COST_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_COST_TYPE;
  END CP_COST_TYPE_P;

  FUNCTION CP_WIP_ENTITY_NAME_COV_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_WIP_ENTITY_NAME_COV;
  END CP_WIP_ENTITY_NAME_COV_P;

  FUNCTION CP_LINE_CODE_COV_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_LINE_CODE_COV;
  END CP_LINE_CODE_COV_P;

  FUNCTION CP_TXN_TYPE_COV_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TXN_TYPE_COV;
  END CP_TXN_TYPE_COV_P;

  FUNCTION CP_DEPARTMENT_CODE_COV_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DEPARTMENT_CODE_COV;
  END CP_DEPARTMENT_CODE_COV_P;

  FUNCTION CP_ACTIVITY_COV_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ACTIVITY_COV;
  END CP_ACTIVITY_COV_P;

  FUNCTION CP_PERIOD_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PERIOD_NAME;
  END CP_PERIOD_NAME_P;

END BOM_CSTRPWDD_XMLP_PKG;


/
