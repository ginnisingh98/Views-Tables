--------------------------------------------------------
--  DDL for Package Body HRDPP_CREATE_BUSINESS_GROUP
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HRDPP_CREATE_BUSINESS_GROUP" as
/*
 * Generated by hr_pump_meta_mapper at: 2013/08/30 12:08:09
 * Generated for API: HR_ORGANIZATION_API.CREATE_BUSINESS_GROUP
 */
--
dh constant date := hr_api.g_date;
nh constant number := hr_api.g_number;
vh constant varchar2(64) := hr_api.g_varchar2;
c_sot constant date := to_date('01010001','DDMMYYYY');
cn constant varchar2(32) := '<NULL>';
dn constant date := null;
nn constant number := null;
vn constant varchar2(1) := null;
--
function dc(p in date) return varchar2 is
begin
if p<c_sot then
 if p<>trunc(p) then
  return to_char(p,'SYYYY/MM/DD HH24:MI:SS');
 end if;
 return to_char(p,'SYYYY/MM/DD');
elsif p<>trunc(p) then
 return to_char(p,'YYYY/MM/DD HH24:MI:SS');
end if;
return to_char(p,'YYYY/MM/DD');
end dc;
function d(p in varchar2) return date is
begin
if length(p)=10 then
return to_date(p,'YYYY/MM/DD');
elsif length(p)=19 then
return to_date(p,'YYYY/MM/DD HH24:MI:SS');
elsif length(p)=11 then
return to_date(p,'SYYYY/MM/DD');
elsif length(p)=20 then
return to_date(p,'SYYYY/MM/DD HH24:MI:SS');
end if;
-- Try default format as last resort.
return to_date(p,'YYYY/MM/DD');
end d;
function n(p in varchar2) return number is
begin
return to_number(p);
end n;
function dd(p in date,i in varchar2)
return varchar2 is
begin
if upper(i) = 'N' then return dc(p);
else return cn; end if;
end dd;
function nd(p in number,i in varchar2)
return varchar2 is
begin
if upper(i) = 'N' then return to_char(p);
else return cn; end if;
end nd;
--
procedure iuk
(p_batch_line_id  in number,
p_user_key_value in varchar2,
p_unique_key_id  in number)
is
begin
hr_data_pump.entry('ins_user_key');
insert into hr_pump_batch_line_user_keys
(user_key_id, batch_line_id,user_key_value,unique_key_id)
values
(hr_pump_batch_line_user_keys_s.nextval,
p_batch_line_id,
p_user_key_value,
p_unique_key_id);
hr_data_pump.exit('ins_user_key');
end iuk;
--
procedure insert_batch_lines
(p_batch_id      in number
,p_data_pump_batch_line_id in number default null
,p_data_pump_business_grp_name in varchar2 default null
,p_user_sequence in number default null
,p_link_value    in number default null
,P_EFFECTIVE_DATE in date
,P_LANGUAGE_CODE in varchar2
,P_DATE_FROM in date
,P_NAME in varchar2
,P_TYPE in varchar2
,P_INTERNAL_EXTERNAL_FLAG in varchar2
,P_SHORT_NAME in varchar2
,P_EMP_GEN_METHOD in varchar2
,P_APP_GEN_METHOD in varchar2
,P_CWK_GEN_METHOD in varchar2
,P_LEGISLATION_CODE in varchar2
,P_CURRENCY_CODE in varchar2
,P_FISCAL_YEAR_START in varchar2
,P_MIN_WORK_AGE in varchar2
,P_MAX_WORK_AGE in varchar2
,P_ORG_USER_KEY in varchar2
,P_LOCATION_CODE in varchar2
,P_GRADE_FLEX_STRU_CODE in varchar2
,P_GROUP_FLEX_STRU_CODE in varchar2
,P_JOB_FLEX_STRU_CODE in varchar2
,P_COST_FLEX_STRU_CODE in varchar2
,P_POSITION_FLEX_STRU_CODE in varchar2
,P_SECURITY_GROUP_NAME in varchar2
,P_COMPETENCE_FLEX_STRU_CODE in varchar2) is
blid number := p_data_pump_batch_line_id;
begin
if blid is not null then
delete from hr_pump_batch_lines where batch_line_id = blid;
delete from hr_pump_batch_exceptions
where source_type = 'BATCH_LINE' and source_id = blid;
end if;
insert into hr_pump_batch_lines
(batch_id
,batch_line_id
,business_group_name
,api_module_id
,line_status
,user_sequence
,link_value
,pval001
,pval002
,pval003
,pval004
,pval005
,pval006
,pval007
,pval008
,pval009
,pval010
,pval011
,pval012
,pval013
,pval014
,pval015
,pval016
,pval018
,pval019
,pval020
,pval021
,pval022
,pval023
,pval024
,pval025)
values
(p_batch_id
,nvl(blid,hr_pump_batch_lines_s.nextval)
,p_data_pump_business_grp_name
,3174
,'U'
,p_user_sequence
,p_link_value
,dc(P_EFFECTIVE_DATE)
,P_LANGUAGE_CODE
,dc(P_DATE_FROM)
,P_NAME
,P_TYPE
,P_INTERNAL_EXTERNAL_FLAG
,P_SHORT_NAME
,P_EMP_GEN_METHOD
,P_APP_GEN_METHOD
,P_CWK_GEN_METHOD
,P_LEGISLATION_CODE
,P_CURRENCY_CODE
,P_FISCAL_YEAR_START
,P_MIN_WORK_AGE
,P_MAX_WORK_AGE
,P_ORG_USER_KEY
,P_LOCATION_CODE
,P_GRADE_FLEX_STRU_CODE
,P_GROUP_FLEX_STRU_CODE
,P_JOB_FLEX_STRU_CODE
,P_COST_FLEX_STRU_CODE
,P_POSITION_FLEX_STRU_CODE
,P_SECURITY_GROUP_NAME
,P_COMPETENCE_FLEX_STRU_CODE);
end insert_batch_lines;
--
procedure call
(p_business_group_id in number,
p_batch_line_id     in number) is
cursor cr is
select l.rowid myrowid,
decode(l.pval001,cn,dn,d(l.pval001)) p1,
decode(l.pval002,cn,vn,l.pval002) p2,
decode(l.pval003,cn,dn,d(l.pval003)) p3,
decode(l.pval004,cn,vn,l.pval004) p4,
decode(l.pval005,cn,vn,
 hr_pump_get.gl(l.pval005,'ORG_TYPE',d(l.pval001),l.pval002)) p5,
decode(l.pval006,cn,vn,
 hr_pump_get.gl(l.pval006,'INTL_EXTL',d(l.pval001),l.pval002)) p6,
decode(l.pval007,cn,vn,l.pval007) p7,
decode(l.pval008,cn,vn,
 hr_pump_get.gl(l.pval008,'EMP_NUM_GEN_METHOD',d(l.pval001),l.pval002)) p8,
decode(l.pval009,cn,vn,l.pval009) p9,
decode(l.pval010,cn,vn,
 hr_pump_get.gl(l.pval010,'CWK_NUM_GEN_METHOD',d(l.pval001),l.pval002)) p10,
decode(l.pval011,cn,vn,l.pval011) p11,
decode(l.pval012,cn,vn,l.pval012) p12,
decode(l.pval013,cn,vn,l.pval013) p13,
decode(l.pval014,cn,vn,l.pval014) p14,
decode(l.pval015,cn,vn,l.pval015) p15,
l.pval016 p16,
l.pval017 p17,
decode(l.pval018,cn,vn,l.pval018) p18,
decode(l.pval019,cn,vn,l.pval019) p19,
decode(l.pval020,cn,vn,l.pval020) p20,
decode(l.pval021,cn,vn,l.pval021) p21,
decode(l.pval022,cn,vn,l.pval022) p22,
decode(l.pval023,cn,vn,l.pval023) p23,
decode(l.pval024,cn,vn,l.pval024) p24,
decode(l.pval025,cn,vn,l.pval025) p25
from hr_pump_batch_lines l
where l.batch_line_id = p_batch_line_id;
--
c cr%rowtype;
l_validate boolean := false;
L_ORGANIZATION_ID number;
L_LOCATION_ID number;
L_GRADE_FLEX_ID varchar2(2000);
L_GROUP_FLEX_ID varchar2(2000);
L_JOB_FLEX_ID varchar2(2000);
L_COST_FLEX_ID varchar2(2000);
L_POSITION_FLEX_ID varchar2(2000);
L_SEC_GROUP_ID varchar2(2000);
L_COMPETENCE_FLEX_ID varchar2(2000);
--
begin
hr_data_pump.entry('call');
open cr;
fetch cr into c;
if cr%notfound then
hr_utility.set_message(800,'HR_50326_DP_NO_ROW');
hr_utility.set_message_token('TABLE','HR_PUMP_BATCH_LINES');
hr_utility.set_message_token('COLUMN','P_BATCH_LINE_ID');
hr_utility.set_message_token('VALUE',p_batch_line_id);
hr_utility.raise_error;
end if;
--
if c.p18 is null or
c.p2 is null then
L_LOCATION_ID:=nn;
else
L_LOCATION_ID := 
hr_pump_get.GET_LOCATION_ID
(P_LOCATION_CODE => c.p18
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_LANGUAGE_CODE => c.p2);
end if;
--
L_GRADE_FLEX_ID := 
hr_pump_get.GET_GRADE_FLEX_STRU_NUM
(P_DATA_PUMP_ALWAYS_CALL => null
,P_GRADE_FLEX_STRU_CODE => c.p19);
--
L_GROUP_FLEX_ID := 
hr_pump_get.GET_GROUP_FLEX_STRU_NUM
(P_DATA_PUMP_ALWAYS_CALL => null
,P_GROUP_FLEX_STRU_CODE => c.p20);
--
L_JOB_FLEX_ID := 
hr_pump_get.GET_JOB_FLEX_STRU_NUM
(P_DATA_PUMP_ALWAYS_CALL => null
,P_JOB_FLEX_STRU_CODE => c.p21);
--
L_COST_FLEX_ID := 
hr_pump_get.GET_COST_FLEX_STRU_NUM
(P_DATA_PUMP_ALWAYS_CALL => null
,P_COST_FLEX_STRU_CODE => c.p22);
--
L_POSITION_FLEX_ID := 
hr_pump_get.GET_POSITION_FLEX_STRU_NUM
(P_DATA_PUMP_ALWAYS_CALL => null
,P_POSITION_FLEX_STRU_CODE => c.p23);
--
L_SEC_GROUP_ID := 
hr_pump_get.GET_SEC_GROUP_ID
(P_DATA_PUMP_ALWAYS_CALL => null
,P_SECURITY_GROUP_NAME => c.p24);
--
L_COMPETENCE_FLEX_ID := 
hr_pump_get.GET_COMPETENCE_FLEX_STRU_NUM
(P_DATA_PUMP_ALWAYS_CALL => null
,P_COMPETENCE_FLEX_STRU_CODE => c.p25);
--
hr_data_pump.api_trc_on;
HR_ORGANIZATION_API.CREATE_BUSINESS_GROUP
(p_validate => l_validate
,P_EFFECTIVE_DATE => c.p1
,P_LANGUAGE_CODE => c.p2
,P_DATE_FROM => c.p3
,P_NAME => c.p4
,P_TYPE => c.p5
,P_INTERNAL_EXTERNAL_FLAG => c.p6
,P_LOCATION_ID => L_LOCATION_ID
,P_SHORT_NAME => c.p7
,P_EMP_GEN_METHOD => c.p8
,P_APP_GEN_METHOD => c.p9
,P_CWK_GEN_METHOD => c.p10
,P_GRADE_FLEX_ID => L_GRADE_FLEX_ID
,P_GROUP_FLEX_ID => L_GROUP_FLEX_ID
,P_JOB_FLEX_ID => L_JOB_FLEX_ID
,P_COST_FLEX_ID => L_COST_FLEX_ID
,P_POSITION_FLEX_ID => L_POSITION_FLEX_ID
,P_LEGISLATION_CODE => c.p11
,P_CURRENCY_CODE => c.p12
,P_FISCAL_YEAR_START => c.p13
,P_MIN_WORK_AGE => c.p14
,P_MAX_WORK_AGE => c.p15
,P_SEC_GROUP_ID => L_SEC_GROUP_ID
,P_COMPETENCE_FLEX_ID => L_COMPETENCE_FLEX_ID
,P_ORGANIZATION_ID => L_ORGANIZATION_ID
,P_OBJECT_VERSION_NUMBER => c.p17);
hr_data_pump.api_trc_off;
--
iuk(p_batch_line_id,c.p16,L_ORGANIZATION_ID);
--
update hr_pump_batch_lines l set
l.pval016 = decode(c.p16,null,cn,c.p16),
l.pval017 = decode(c.p17,null,cn,c.p17)
where l.rowid = c.myrowid;
--
close cr;
--
hr_data_pump.exit('call');
exception
 when hr_multi_message.error_message_exist then
   if cr%isopen then
    close cr;
   end if;
   hr_pump_utils.set_multi_msg_error_flag(true);
 when others then
 if cr%isopen then
  close cr;
 end if;
 raise;
end call;
end hrdpp_CREATE_BUSINESS_GROUP;

/
