--------------------------------------------------------
--  DDL for Package Body GML_ORAKRP_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GML_ORAKRP_XMLP_PKG" AS
/* $Header: ORAKRPB.pls 120.0 2007/12/24 13:21:40 nchinnam noship $ */
  FUNCTION LCHG_DESCCFFORMULA(LINE_ID IN NUMBER
                             ,ORDER_ID IN NUMBER) RETURN VARCHAR2 IS
    FLD1 VARCHAR2(25);
    FLD2 NUMBER(20);
  BEGIN
    SELECT
      DISTINCT
      CHRGMST.CHARGE_DESC,
      ORDRCHG.EXTENDED_AMOUNT
    INTO FLD1,FLD2
    FROM
      OP_CHRG_MST CHRGMST,
      OP_ORDR_CHG ORDRCHG
    WHERE ORDRCHG.LINE_ID = LINE_ID
      AND CHRGMST.CHARGE_ID = ORDRCHG.CHARGE_ID
      AND ORDRCHG.ORDER_ID = ORDER_ID
      AND ORDRCHG.DELETE_MARK = 0
      AND ORDRCHG.BILLABLE_IND = 1
      AND ORDRCHG.LINE_ID = 0;
    CHARGE_DESCCP := FLD1;
    CHARGE_DESCCP := FLD2;
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      CHARGE_DESCCP := NULL;
      CHARGE_DESCCP := NULL;
      RETURN NULL;
  END LCHG_DESCCFFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR ORGN_NAME1 IS
      SELECT
        ORGN_NAME
      FROM
        SY_ORGN_MST
      WHERE ORGN_CODE = GML_ORAKRP_XMLP_PKG.ORGN_CODE;
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    FROM_ORDER_DATE_1 := to_char(FROM_ORDER_DATE, 'DD-MON-YYYY');
    TO_ORDER_DATE_1 := to_char(TO_ORDER_DATE, 'DD-MON-YYYY');
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    OPEN ORGN_NAME1;
    FETCH ORGN_NAME1
     INTO ORGN_NAME_CP;
    IF ORGN_NAME1%NOTFOUND THEN
      ORGN_NAME_CP := NULL;
    END IF;
    CLOSE ORGN_NAME1;
    SELECT
      ORGN_NAME
    INTO CP_ORGN_NAME
    FROM
      SY_ORGN_MST
    WHERE ORGN_CODE = GML_ORAKRP_XMLP_PKG.ORGN_CODE;
    SELECT
      USER_NAME
    INTO CP_USER
    FROM
      FND_USER
    WHERE USER_ID = DEFAULT_USER;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION NET_WTCFFORMULA(ORDER_UM1 IN VARCHAR2
                          ,SHIPWT_UM IN VARCHAR2
                          ,SHIP_QTY1 IN NUMBER
                          ,ITEM_ID IN NUMBER
                          ,ITEM_UM IN VARCHAR2) RETURN NUMBER IS
    V_PLAN_QTY_ITEMUM NUMBER(12);
    X_RET NUMBER(5);
  BEGIN
    IF (ORDER_UM1 <> SHIPWT_UM OR NVL(SHIP_QTY1
       ,0) <> 0) THEN
      X_RET := GMISYUM.SY_UOMCV(ITEM_ID
                               ,0
                               ,NVL(SHIP_QTY1
                                  ,0)
                               ,ORDER_UM1
                               ,ITEM_UM
                               ,V_PLAN_QTY_ITEMUM
                               ,ITEM_UM
                               ,0
                               ,0
                               ,NULL);
      RETURN V_PLAN_QTY_ITEMUM;
    ELSE
      RETURN NVL(SHIP_QTY1
                ,0);
    END IF;
    RETURN NULL;
  END NET_WTCFFORMULA;

  FUNCTION EXTENDED_AMT_CFFORMULA(ORDER_QTY1 IN NUMBER
                                 ,NET_PRICE IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ORDER_QTY1 * NET_PRICE);
  END EXTENDED_AMT_CFFORMULA;

  FUNCTION EXTENDED_AMOUNTCFFORMULA(LINE_ID IN NUMBER
                                   ,ORDER_ID IN NUMBER
                                   ,EXTENDED_PRICE IN NUMBER) RETURN NUMBER IS
    EXT_AMT NUMBER;
  BEGIN
    BEGIN
      SELECT
        DISTINCT
        ORDRCHG.EXTENDED_AMOUNT
      INTO EXT_AMT
      FROM
        OP_CHRG_MST CHRGMST,
        OP_ORDR_CHG ORDRCHG
      WHERE CHRGMST.CHARGE_ID = ORDRCHG.CHARGE_ID
        AND ORDRCHG.DELETE_MARK = 0
        AND ORDRCHG.BILLABLE_IND = 1
        AND ORDRCHG.LINE_ID = LINE_ID
        AND ORDRCHG.ORDER_ID = ORDER_ID;
    EXCEPTION
      WHEN OTHERS THEN
        EXT_AMT := 0;
    END;
    RETURN (EXTENDED_PRICE + EXT_AMT);
  END EXTENDED_AMOUNTCFFORMULA;

  FUNCTION ORDER_NUMBERCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ORDER_NUMBERCP)*/NULL;
    IF FROM_ORDER_NUMBER IS NOT NULL AND TO_ORDER_NUMBER IS NOT NULL THEN
      ORDER_NUMBERCP := ' and ordr_hdr.order_no >= ''' || FROM_ORDER_NUMBER || ''' and ordr_hdr.order_no <= ''' || TO_ORDER_NUMBER || '''';
    ELSIF FROM_ORDER_NUMBER IS NULL AND TO_ORDER_NUMBER IS NULL THEN
      ORDER_NUMBERCP := NULL;
      FROM_ORDER_NUMBER := FND_PROFILE.VALUE('SY$ALL');
      TO_ORDER_NUMBER := FND_PROFILE.VALUE('SY$ALL');
    ELSIF FROM_ORDER_NUMBER IS NOT NULL AND TO_ORDER_NUMBER IS NULL THEN
      ORDER_NUMBERCP := ' and  ordr_hdr.order_no >= ''' || FROM_ORDER_NUMBER || '''';
      TO_ORDER_NUMBER := FND_PROFILE.VALUE('SY$ALL');
    ELSIF FROM_ORDER_NUMBER IS NULL AND TO_ORDER_NUMBER IS NOT NULL THEN
      ORDER_NUMBERCP := ' and  ordr_hdr.order_no <= ''' || TO_ORDER_NUMBER || '''';
      FROM_ORDER_NUMBER := FND_PROFILE.VALUE('SY$ALL');
    END IF;
    LTO_ORDER_NUMBER:=TO_ORDER_NUMBER;
    LFROM_ORDER_NUMBER:=FROM_ORDER_NUMBER;
    RETURN NULL;
  END ORDER_NUMBERCFFORMULA;

  FUNCTION ORDER_DATECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ORDER_DATECP)*/NULL;
    IF FROM_ORDER_DATE IS NOT NULL AND TO_ORDER_DATE IS NOT NULL THEN
      ORDER_DATECP := ' and TRUNC(ordr_hdr.order_date)  between  :from_order_date and :to_order_date';
    ELSIF FROM_ORDER_DATE IS NULL AND TO_ORDER_DATE IS NULL THEN
      ORDER_DATECP := NULL;
    ELSIF FROM_ORDER_DATE IS NOT NULL AND TO_ORDER_DATE IS NULL THEN
      ORDER_DATECP := 'and ordr_hdr.order_date >= :from_order_date';
    ELSIF FROM_ORDER_DATE IS NULL AND TO_ORDER_DATE IS NOT NULL THEN
      ORDER_DATECP := 'and ordr_hdr.order_date <= :to_order_date';
    END IF;
    RETURN NULL;
  END ORDER_DATECFFORMULA;

  FUNCTION SOLD_TOCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(SOLD_TOCP)*/NULL;
    IF FROM_SOLD_TO IS NOT NULL AND TO_SOLD_TO IS NOT NULL AND FROM_SOLD_TO = TO_SOLD_TO THEN
      SOLD_TOCP := ' and soldcust.cust_no = ' || '''' || FROM_SOLD_TO || '''';
    ELSIF FROM_SOLD_TO IS NOT NULL AND TO_SOLD_TO IS NOT NULL THEN
      SOLD_TOCP := ' and soldcust.cust_no between ' || '''' || FROM_SOLD_TO || ''' and ' || '''' || TO_SOLD_TO || '''';
    ELSIF FROM_SOLD_TO IS NULL AND TO_SOLD_TO IS NULL THEN
      SOLD_TOCP := NULL;
      FROM_SOLD_TO := FND_PROFILE.VALUE('SY$ALL');
      TO_SOLD_TO := FND_PROFILE.VALUE('SY$ALL');
    ELSIF FROM_SOLD_TO IS NOT NULL AND TO_SOLD_TO IS NULL THEN
      SOLD_TOCP := 'soldcust.cust_no >= ' || '''' || FROM_SOLD_TO || '''';
      FROM_SOLD_TO := FND_PROFILE.VALUE('SY$ALL');
    ELSIF FROM_SOLD_TO IS NULL AND TO_SOLD_TO IS NOT NULL THEN
      SOLD_TOCP := 'and soldcust.cust_no <= ' || '''' || TO_SOLD_TO || '''';
      TO_SOLD_TO := FND_PROFILE.VALUE('SY$ALL');
    END IF;
    LTO_SOLD_TO:=TO_SOLD_TO;
    LFROM_SOLD_TO:=FROM_SOLD_TO;
    RETURN NULL;
  END SOLD_TOCFFORMULA;

  FUNCTION BILL_TOCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(BILL_TOCP)*/NULL;
    IF FROM_BILL_TO IS NOT NULL AND TO_BILL_TO IS NOT NULL AND FROM_BILL_TO = TO_BILL_TO THEN
      BILL_TOCP := ' and billcust.cust_no = ' || '''' || FROM_BILL_TO || '''';
    ELSIF FROM_BILL_TO IS NOT NULL AND TO_BILL_TO IS NOT NULL THEN
      BILL_TOCP := ' and billcust.cust_no between ' || '''' || FROM_BILL_TO || ''' and ' || '''' || TO_BILL_TO || '''';
    ELSIF FROM_BILL_TO IS NULL AND TO_BILL_TO IS NULL THEN
      BILL_TOCP := NULL;
      FROM_BILL_TO := FND_PROFILE.VALUE('SY$ALL');
      TO_BILL_TO := FND_PROFILE.VALUE('SY$ALL');
    ELSIF FROM_BILL_TO IS NOT NULL AND TO_BILL_TO IS NULL THEN
      BILL_TOCP := 'billcust.cust_no >= ' || '''' || FROM_BILL_TO || '''';
      TO_BILL_TO := FND_PROFILE.VALUE('SY$ALL');
    ELSIF FROM_BILL_TO IS NULL AND TO_BILL_TO IS NOT NULL THEN
      BILL_TOCP := 'and billcust.cust_no <= ' || '''' || TO_BILL_TO || '''';
      FROM_BILL_TO := FND_PROFILE.VALUE('SY$ALL');
    END IF;
    LFROM_BILL_TO:=FROM_BILL_TO;
    LTO_BILL_TO:=TO_BILL_TO;
    RETURN NULL;
  END BILL_TOCFFORMULA;

  FUNCTION EXCLUDE_PRINTEDCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(EXCLUDE_PRINTEDCP)*/NULL;
    IF EXCLUDE_PRINTED = '1' THEN
      EXCLUDE_PRINTEDCP := ' AND ordr_hdr.print_count = 0 ';
    ELSE
      EXCLUDE_PRINTEDCP := ' ';
    END IF;
    RETURN NULL;
  END EXCLUDE_PRINTEDCFFORMULA;

  FUNCTION EXCLUDED_ON_HOLDCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(EXCLUDE_ON_HOLDCP)*/NULL;
    IF EXCLUDE_ON_HOLD = '1' THEN
      EXCLUDE_ON_HOLDCP := 'and (ordr_hdr.holdreas_code is NULL OR ordr_hdr.holdreas_code = ' || '''' || 'NONE' || '''' || ')';
    ELSE
      EXCLUDE_ON_HOLDCP := ' ';
    END IF;
    RETURN NULL;
  END EXCLUDED_ON_HOLDCFFORMULA;

  FUNCTION SORT1_CFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(SORT1_CP)*/NULL;
    IF SORT_1 = '1' THEN
      SORT1_CP := 'ordr_hdr.order_no,';
    ELSIF SORT_1 = '2' THEN
      SORT1_CP := 'ordr_hdr.order_date,';
    ELSIF SORT_1 = '3' THEN
      SORT1_CP := 'soldcust.cust_no,';
    ELSIF SORT_1 = '4' THEN
      SORT1_CP := 'billcust.cust_no,';
    END IF;
    RETURN NULL;
  END SORT1_CFFORMULA;

  FUNCTION SORT2_CFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(SORT2_CP)*/NULL;
    IF SORT_2 IS NOT NULL THEN
      IF SORT_2 = '1' THEN
        IF SORT_3 IS NULL THEN
          SORT2_CP := ',ordr_hdr.order_no';
        ELSE
          SORT2_CP := ',ordr_hdr.order_no,';
        END IF;
      ELSIF SORT_2 = '2' THEN
        IF SORT_3 IS NULL THEN
          SORT2_CP := ',ordr_hdr.order_date';
        ELSE
          SORT2_CP := ',ordr_hdr.order_date,';
        END IF;
      ELSIF SORT_2 = '3' THEN
        IF SORT_3 IS NULL THEN
          SORT2_CP := ',soldcust.cust_no';
        ELSE
          SORT2_CP := ',soldcust.cust_no,';
        END IF;
      ELSIF SORT_2 = '4' THEN
        IF SORT_3 IS NULL THEN
          SORT2_CP := ',billcust.cust_no';
        ELSE
          SORT2_CP := ',billcust.cust_no,';
        END IF;
      END IF;
    ELSE
      SORT2_CP := ' ';
    END IF;
    RETURN NULL;
  END SORT2_CFFORMULA;

  FUNCTION TOT_ORDERCFFORMULA(TOTAL_E_PRICECS IN NUMBER
                             ,TOT_EXTENDED_AMTCS IN NUMBER) RETURN NUMBER IS
    TOT_ORDER NUMBER;
  BEGIN
    TOT_ORDER := TOTAL_E_PRICECS + TOT_EXTENDED_AMTCS;
    RETURN TOT_ORDER;
  END TOT_ORDERCFFORMULA;

  FUNCTION SORT3_CFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(SORT3_CP)*/NULL;
    IF SORT_3 IS NOT NULL THEN
      IF SORT_3 = '1' THEN
        IF SORT_2 IS NULL THEN
          SORT3_CP := ',ordr_hdr.order_no';
        ELSE
          SORT3_CP := 'ordr_hdr.order_no';
        END IF;
      ELSIF SORT_3 = '2' THEN
        IF SORT_2 IS NULL THEN
          SORT3_CP := ',ordr_hdr.order_date';
        ELSE
          SORT3_CP := 'ordr_hdr.order_date';
        END IF;
      ELSIF SORT_3 = '3' THEN
        IF (SORT_2 IS NULL) THEN
          SORT3_CP := ',soldcust.cust_no';
        ELSE
          SORT3_CP := 'soldcust.cust_no';
        END IF;
      ELSIF SORT_3 = '4' THEN
        IF (SORT_2 IS NULL) THEN
          SORT3_CP := ',billcust.cust_no';
        ELSE
          SORT3_CP := 'billcust.cust_no';
        END IF;
      END IF;
    ELSE
      SORT3_CP := ' ';
    END IF;

    RETURN NULL;
  END SORT3_CFFORMULA;

  FUNCTION SORT3_CPFORMULA(SORT3_CF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(SORT3_CF)*/NULL;
    RETURN NULL;
  END SORT3_CPFORMULA;

  FUNCTION TERMS_CODEFORMULA(TERMS IN VARCHAR2) RETURN VARCHAR2 IS
    CODE VARCHAR2(40);
  BEGIN
    SELECT
      TERMS_DESC
    INTO CODE
    FROM
      OP_TERM_MST
    WHERE TERMS_CODE = TERMS;
    RETURN (CODE);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      CODE := NULL;
      RETURN NULL;
    WHEN OTHERS THEN
      CODE := NULL;
      RETURN NULL;
  END TERMS_CODEFORMULA;

  PROCEDURE OROAKRP_HEADER IS
  BEGIN
    NULL;
  END OROAKRP_HEADER;

  FUNCTION UDATEFORMULA(ORDER_TYPE in Number, O_NO in varchar2, RELEASE_NO in number) RETURN VARCHAR2 IS
    X_PRINT_COUNT NUMBER;
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    IF EXCLUDE_PRINTED = '1' THEN
      X_PRINT_COUNT := 0;
    ELSE
      X_PRINT_COUNT := 999999;
    END IF;
    EXECUTE IMMEDIATE
      'UPDATE OP_ORDR_HDR SET PRINT_COUNT=PRINT_COUNT+1,DATE_PRINTED=SYSDATE ' || 'WHERE ORDER_TYPE=:a ' ||
      'AND ORDER_NO = :b ' || 'AND RELEASE_NO=:c ' || 'AND ORGN_CODE=:d ' ||
      'AND PRINT_COUNT < ' || TO_CHAR(X_PRINT_COUNT)
      using ORDER_TYPE, O_NO, RELEASE_NO, GML_ORAKRP_XMLP_PKG.ORGN_CODE ;
    COMMIT;
    RETURN NULL;
  END UDATEFORMULA;

  FUNCTION LINE_CHARGESCFFORMULA(ORDER_ID IN NUMBER
                                ,LINE_ID IN NUMBER) RETURN NUMBER IS
    EXT_AMT NUMBER;
  BEGIN
    BEGIN
      SELECT
        NVL(SUM(EXTENDED_AMOUNT)
           ,0)
      INTO EXT_AMT
      FROM
        OP_ORDR_CHG C
      WHERE C.ORDER_ID = ORDER_ID
        AND C.LINE_ID = LINE_ID
        AND C.DELETE_MARK = 0
        AND C.EXTENDED_AMOUNT > 0;
    EXCEPTION
      WHEN OTHERS THEN
        EXT_AMT := 0;
    END;
    RETURN (EXT_AMT);
  END LINE_CHARGESCFFORMULA;

  FUNCTION LINEDISCOUNTS_CFFORMULA(ORDER_ID IN NUMBER
                                  ,LINE_ID IN NUMBER) RETURN NUMBER IS
    EXT_AMT NUMBER;
  BEGIN
    BEGIN
      SELECT
        NVL(ABS(SUM(EXTENDED_AMOUNT))
           ,0)
      INTO EXT_AMT
      FROM
        OP_ORDR_CHG C
      WHERE C.ORDER_ID = ORDER_ID
        AND C.LINE_ID = LINE_ID
        AND C.DELETE_MARK = 0
        AND C.EXTENDED_AMOUNT < 0;
    EXCEPTION
      WHEN OTHERS THEN
        EXT_AMT := 0;
    END;
    RETURN (EXT_AMT);
  END LINEDISCOUNTS_CFFORMULA;

  FUNCTION HEAD_CHARGESCFFORMULA(ORDER_ID IN NUMBER) RETURN NUMBER IS
    EXT_AMT NUMBER;
  BEGIN
    BEGIN
      SELECT
        NVL(SUM(EXTENDED_AMOUNT)
           ,0)
      INTO EXT_AMT
      FROM
        OP_ORDR_CHG C
      WHERE C.ORDER_ID = ORDER_ID
        AND C.LINE_ID IS NULL
        AND C.DELETE_MARK = 0
        AND C.EXTENDED_AMOUNT > 0;
    EXCEPTION
      WHEN OTHERS THEN
        EXT_AMT := 0;
    END;
    RETURN (EXT_AMT);
  END HEAD_CHARGESCFFORMULA;

  FUNCTION HEAD_DISCOUNTSCFFORMULA(ORDER_ID IN NUMBER) RETURN NUMBER IS
    EXT_AMT NUMBER;
  BEGIN
    BEGIN
      SELECT
        NVL(ABS(SUM(EXTENDED_AMOUNT))
           ,0)
      INTO EXT_AMT
      FROM
        OP_ORDR_CHG C
      WHERE C.ORDER_ID = ORDER_ID
        AND C.LINE_ID IS NULL
        AND C.DELETE_MARK = 0
        AND C.EXTENDED_AMOUNT < 0;
    EXCEPTION
      WHEN OTHERS THEN
        EXT_AMT := 0;
    END;
    RETURN (EXT_AMT);
  END HEAD_DISCOUNTSCFFORMULA;

  FUNCTION ORD_TOT_FORMULA(ORDER_ID IN NUMBER) RETURN NUMBER IS
    EXT_AMT NUMBER;
    EXT_AMT_CHARGE NUMBER;
    EXT_AMT_LINES NUMBER;
  BEGIN
    BEGIN
      SELECT
        NVL(SUM(EXTENDED_AMOUNT)
           ,0)
      INTO EXT_AMT_CHARGE
      FROM
        OP_ORDR_CHG C
      WHERE C.ORDER_ID = ORD_TOT_FORMULA.ORDER_ID
        AND C.DELETE_MARK = 0;
      SELECT
        NVL(SUM(EXTENDED_PRICE)
           ,0)
      INTO EXT_AMT_LINES
      FROM
        OP_ORDR_DTL D
      WHERE D.ORDER_ID = ORD_TOT_FORMULA.ORDER_ID
        AND D.DELETE_MARK = 0
        AND D.LINE_STATUS <> - 1;
      EXT_AMT := EXT_AMT_CHARGE + EXT_AMT_LINES;
    EXCEPTION
      WHEN OTHERS THEN
        EXT_AMT := 0;
    END;
    RETURN (EXT_AMT);
  END ORD_TOT_FORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CHARGE_DESCCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CHARGE_DESCCP;
  END CHARGE_DESCCP_P;

  FUNCTION CHARGE_AMTCP_P RETURN NUMBER IS
  BEGIN
    RETURN CHARGE_AMTCP;
  END CHARGE_AMTCP_P;

  FUNCTION ORGN_NAME_CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ORGN_NAME_CP;
  END ORGN_NAME_CP_P;

  FUNCTION ORDER_NUMBERCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ORDER_NUMBERCP;
  END ORDER_NUMBERCP_P;

  FUNCTION ORDER_DATECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ORDER_DATECP;
  END ORDER_DATECP_P;

  FUNCTION SOLD_TOCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SOLD_TOCP;
  END SOLD_TOCP_P;

  FUNCTION BILL_TOCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN BILL_TOCP;
  END BILL_TOCP_P;

  FUNCTION EXCLUDE_PRINTEDCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN EXCLUDE_PRINTEDCP;
  END EXCLUDE_PRINTEDCP_P;

  FUNCTION EXCLUDE_ON_HOLDCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN EXCLUDE_ON_HOLDCP;
  END EXCLUDE_ON_HOLDCP_P;

  FUNCTION SORT1_CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SORT1_CP;
  END SORT1_CP_P;

  FUNCTION SORT2_CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SORT2_CP;
  END SORT2_CP_P;

  FUNCTION SORT3_CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SORT3_CP;
  END SORT3_CP_P;

  FUNCTION CP_ORGN_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ORGN_NAME;
  END CP_ORGN_NAME_P;

  FUNCTION CP_USER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_USER;
  END CP_USER_P;

END GML_ORAKRP_XMLP_PKG;


/
