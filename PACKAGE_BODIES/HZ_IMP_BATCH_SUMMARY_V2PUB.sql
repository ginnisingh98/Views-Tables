--------------------------------------------------------
--  DDL for Package Body HZ_IMP_BATCH_SUMMARY_V2PUB
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HZ_IMP_BATCH_SUMMARY_V2PUB" AS
/*$Header: ARH2BSSB.pls 120.2 2005/10/30 03:49:20 appldev noship $ */

----------------------------------
-- public procedures and functions
----------------------------------

/**
 * PROCEDURE create_import_batch
 *
 * DESCRIPTION
 *     Creates an import batch
 *
 * EXTERNAL PROCEDURES/FUNCTIONS ACCESSED
 *
 * ARGUMENTS
 *   IN:
 *     p_init_msg_list                Initialize message stack if it is set to
 *                                    FND_API.G_TRUE. Default is FND_API.G_FALSE.
 *     p_batch_name                   Import batch name.
 *     p_description                  Import batch description.
 *     p_original_system              Original system from which data brought into this batch
 *     p_load_type                    Load type of the data, e.g. DNB, CSV
 *     p_est_no_of_records            Estimated number of records in batch
 *   IN/OUT:
 *   OUT:
 *     x_batch_id                     Batch ID generated by system.
 *     x_return_status                Return status after the call. The status can
 *                                    be FND_API.G_RET_STS_SUCCESS (success),
 *                                    FND_API.G_RET_STS_ERROR (error),
 *                                    FND_API.G_RET_STS_UNEXP_ERROR (unexpected error).
 *     x_msg_count                    Number of messages in message stack.
 *     x_msg_data                     Message text if x_msg_count is 1.
 *
 * NOTES
 *
 * MODIFICATION HISTORY
 *
 *   09-JUL-2003    Indrajit Sen        o Created.
 *
 */

  PROCEDURE create_import_batch (
      p_init_msg_list                    IN             VARCHAR2  := FND_API.G_FALSE,
      p_batch_name                       IN             VARCHAR2,
      p_description                      IN             VARCHAR2,
      p_original_system                  IN             VARCHAR2,
      p_load_type                        IN             VARCHAR2  := NULL,
      p_est_no_of_records                IN             NUMBER    := NULL,
      x_batch_id                         OUT NOCOPY     NUMBER,
      x_return_status                    OUT NOCOPY     VARCHAR2,
      x_msg_count                        OUT NOCOPY     NUMBER,
      x_msg_data                         OUT NOCOPY     VARCHAR2
  ) IS

      l_success     VARCHAR2(1) := 'N';
      os_exists_flag                     VARCHAR2(1) :='N'; /* Bug 4179332 */

  BEGIN

    -- standard start of API savepoint
    SAVEPOINT create_import_batch;

    -- Check if API is called in debug mode. If yes, enable debug.

    -- Debug info.

    -- initialize message list if p_init_msg_list is set to TRUE.
    IF FND_API.to_Boolean(p_init_msg_list) THEN
      FND_MSG_PUB.initialize;
    END IF;

    -- initialize API return status to success.
    x_return_status := FND_API.G_RET_STS_SUCCESS;

    ----------------
    -- do validation
    ----------------

    -- batch name is mandatory
    hz_utility_v2pub.validate_mandatory (
        p_create_update_flag                    => 'C',
        p_column                                => 'batch_name',
        p_column_value                          => p_batch_name,
        p_restricted                            => 'Y',
        x_return_status                         => x_return_status
    );

    -- original_system is mandatory
    hz_utility_v2pub.validate_mandatory (
        p_create_update_flag                    => 'C',
        p_column                                => 'original_system',
        p_column_value                          => p_original_system,
        p_restricted                            => 'Y',
        x_return_status                         => x_return_status
    );

    -- Bug 4179322. Modified code to validate ORIG_SYSTEM from the table
    -- HZ_ORIG_SYSTEMS_B instead of the lookup.

    -- validate original_system against lookup ORIG_SYSTEM
    /*
    hz_utility_v2pub.validate_lookup (
        p_column                 => 'original_system',
        p_lookup_type            => 'ORIG_SYSTEM',
        p_column_value           => p_original_system,
        x_return_status          => x_return_status);
    */

    BEGIN
    SELECT 'Y' INTO os_exists_flag
    FROM hz_orig_systems_b
    WHERE
    orig_system= p_original_system
    AND orig_system<>'SST'
    AND status='A';
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        FND_MESSAGE.SET_NAME('AR','HZ_API_INVALID_FK');
        FND_MESSAGE.SET_TOKEN('FK','orig_system');
        FND_MESSAGE.SET_TOKEN('COLUMN','orig_system');
        FND_MESSAGE.SET_TOKEN('TABLE','HZ_ORIG_SYSTEMS_B');
        FND_MSG_PUB.ADD;
        x_return_status := FND_API.G_RET_STS_ERROR;
    END;

    IF x_return_status <> FND_API.G_RET_STS_SUCCESS THEN
      RAISE FND_API.G_EXC_ERROR;
    END IF;

    --------------------------------------------
    -- insert the record with generated batch id
    --------------------------------------------
    WHILE l_success = 'N' LOOP
      BEGIN
        INSERT INTO hz_imp_batch_summary (
          batch_id,
          batch_name,
          description,
          original_system,
          load_type,
          est_no_of_records,
          created_by,
          creation_date,
          last_updated_by,
          last_update_date,
          last_update_login
        )
        VALUES (
          hz_imp_batch_summary_s.nextval,
          p_batch_name,
          p_description,
          p_original_system,
          p_load_type,
          p_est_no_of_records,
          hz_utility_v2pub.created_by,
          hz_utility_v2pub.creation_date,
          hz_utility_v2pub.last_updated_by,
          hz_utility_v2pub.last_update_date,
          hz_utility_v2pub.last_update_login
        ) RETURNING
          batch_id
        INTO
          x_batch_id;

        l_success := 'Y';

      EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
          IF INSTRB(SQLERRM, 'HZ_IMP_BATCH_SUMMARY_U1') <> 0 OR
             INSTRB(SQLERRM, 'HZ_IMP_BATCH_SUMMARY_PK') <> 0 THEN
            DECLARE
              l_count             NUMBER;
              l_dummy             VARCHAR2(1);
            BEGIN
              l_count := 1;
              WHILE l_count > 0 LOOP
                SELECT hz_imp_batch_summary_s.NEXTVAL
                INTO   x_batch_id
                FROM   dual;

                BEGIN
                  SELECT 'Y'
                  INTO   l_dummy
                  FROM   hz_imp_batch_summary hl
                  WHERE  hl.batch_id = x_batch_id;
                  l_count := 1;
                EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                    l_count := 0;
                END;
              END LOOP;
            END;
          ELSE
              RAISE;
          END IF;
      END;
    END LOOP;



    -- standard call to get message count and if count is 1, get message info.
    fnd_msg_pub.count_and_get(
      p_encoded                      => fnd_api.g_false,
      p_count                        => x_msg_count,
      p_data                         => x_msg_data);

    -- Debug info.

    -- Check if API is called in debug mode. If yes, disable debug.

  EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
      ROLLBACK TO create_import_batch;

      x_return_status := fnd_api.g_ret_sts_error;

      fnd_msg_pub.count_and_get(
        p_encoded                    => fnd_api.g_false,
        p_count                      => x_msg_count,
        p_data                       => x_msg_data);

      -- Debug info.

      -- Check if API is called in debug mode. If yes, disable debug.

    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
      ROLLBACK TO create_import_batch;

      x_return_status := fnd_api.g_ret_sts_unexp_error;

      fnd_msg_pub.count_and_get(
        p_encoded                    => fnd_api.g_false,
        p_count                      => x_msg_count,
        p_data                       => x_msg_data);

      -- Debug info.

      -- Check if API is called in debug mode. If yes, disable debug.

    WHEN OTHERS THEN
      ROLLBACK TO create_import_batch;

      x_return_status := fnd_api.g_ret_sts_unexp_error;

      fnd_message.set_name('AR', 'HZ_API_OTHERS_EXCEP');
      fnd_message.set_token('ERROR',SQLERRM);
      fnd_msg_pub.add;

      fnd_msg_pub.count_and_get(
        p_encoded                    => fnd_api.g_false,
        p_count                      => x_msg_count,
        p_data                       => x_msg_data);

      -- Debug info.

      -- Check if API is called in debug mode. If yes, disable debug.

  END create_import_batch;


/**
 * PROCEDURE activate_batch
 *
 * DESCRIPTION
 *     Activates an import batch for processing
 *
 * EXTERNAL PROCEDURES/FUNCTIONS ACCESSED
 *
 * ARGUMENTS
 *   IN:
 *     p_init_msg_list                Initialize message stack if it is set to
 *                                    FND_API.G_TRUE. Default is FND_API.G_FALSE.
 *     p_batch_id                     ID of the batch you want to activate for import processing
 *   IN/OUT:
 *   OUT:
 *     x_return_status                Return status after the call. The status can
 *                                    be FND_API.G_RET_STS_SUCCESS (success),
 *                                    FND_API.G_RET_STS_ERROR (error),
 *                                    FND_API.G_RET_STS_UNEXP_ERROR (unexpected error).
 *     x_msg_count                    Number of messages in message stack.
 *     x_msg_data                     Message text if x_msg_count is 1.
 *
 * NOTES
 *
 * MODIFICATION HISTORY
 *
 *   09-JUL-2003    Indrajit Sen        o Created.
 *
 */

  PROCEDURE activate_batch (
      p_init_msg_list                    IN             VARCHAR2:= FND_API.G_FALSE,
      p_batch_id                         IN             NUMBER,
      x_return_status                    OUT NOCOPY     VARCHAR2,
      x_msg_count                        OUT NOCOPY     NUMBER,
      x_msg_data                         OUT NOCOPY     VARCHAR2
  )
  IS
    l_batch_id                 NUMBER;
    l_original_system          VARCHAR2(30);
    l_pre_count_stat           VARCHAR2(200) :=
        'begin HZ_IMP_LOAD_BATCH_COUNTS_PKG.pre_import_counts
        (p_batch_id           => :1,
         p_original_system    => :2); end;';
  BEGIN
    NULL;
    -- standard start of API savepoint
    SAVEPOINT activate_batch;

    -- Check if API is called in debug mode. If yes, enable debug.

    -- Debug info.

    -- initialize message list if p_init_msg_list is set to TRUE.
    IF FND_API.to_Boolean(p_init_msg_list) THEN
      FND_MSG_PUB.initialize;
    END IF;

    -- initialize API return status to success.
    x_return_status := FND_API.G_RET_STS_SUCCESS;

    ----------------
    -- do validation
    ----------------

    -- batch id is mandatory
    hz_utility_v2pub.validate_mandatory (
        p_create_update_flag                    => 'Y',
        p_column                                => 'batch_id',
        p_column_value                          => p_batch_id,
        p_restricted                            => 'Y',
        x_return_status                         => x_return_status
    );

    -- batch id must be a valid batch id in hz_imp_batch_summary table
    BEGIN
      SELECT batch_id, original_system
      INTO l_batch_id, l_original_system
      FROM hz_imp_batch_summary
      WHERE batch_id = p_batch_id;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        fnd_message.set_name('AR', 'HZ_API_INVALID_FK');
        fnd_message.set_token('FK', 'p_batch_id');
        fnd_message.set_token('COLUMN', 'batch_id');
        fnd_message.set_token('TABLE', 'hz_imp_batch_summary');
        fnd_msg_pub.add;
        x_return_status := fnd_api.g_ret_sts_error;
    END;

    IF x_return_status <> FND_API.G_RET_STS_SUCCESS THEN
      RAISE FND_API.G_EXC_ERROR;
    END IF;

    -- batch id must be a valid batch for processing
    BEGIN
      SELECT batch_id
      INTO l_batch_id
      FROM hz_imp_batch_summary
      WHERE batch_id = p_batch_id
      AND   NVL(batch_status,'ACTIVE') NOT IN ('PURGED', 'REJECTED', 'PROCESSING', 'COMPLETED', 'ACTION_REQUIRED');

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        fnd_message.set_name('AR', 'HZ_INVALID_IMP_BATCH');
        fnd_msg_pub.add;
        x_return_status := fnd_api.g_ret_sts_error;
    END;

    IF x_return_status <> FND_API.G_RET_STS_SUCCESS THEN
      RAISE FND_API.G_EXC_ERROR;
    END IF;

    ---------------------------------
    -- update the batch summary table
    ---------------------------------

    -- update the batch record
    UPDATE hz_imp_batch_summary
    SET batch_status = 'ACTIVE',
        last_updated_by = hz_utility_v2pub.last_updated_by,
        last_update_date = hz_utility_v2pub.last_update_date,
        last_update_login = hz_utility_v2pub.last_update_login
    WHERE batch_id = p_batch_id;

    ------------------------------------
    -- call the pre import count process
    ------------------------------------

    -- call the count of records calculation routine
    -- use dynamic sql to avoid compilation error in 8i
    execute immediate l_pre_count_stat using p_batch_id, l_original_system;

    -- standard call to get message count and if count is 1, get message info.
    fnd_msg_pub.count_and_get(
      p_encoded                      => fnd_api.g_false,
      p_count                        => x_msg_count,
      p_data                         => x_msg_data);

  EXCEPTION
    WHEN FND_API.G_EXC_ERROR THEN
      ROLLBACK TO activate_batch;

      x_return_status := fnd_api.g_ret_sts_error;

      fnd_msg_pub.count_and_get(
        p_encoded                    => fnd_api.g_false,
        p_count                      => x_msg_count,
        p_data                       => x_msg_data);

      -- Debug info.

      -- Check if API is called in debug mode. If yes, disable debug.

    WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
      ROLLBACK TO activate_batch;

      x_return_status := fnd_api.g_ret_sts_unexp_error;

      fnd_msg_pub.count_and_get(
        p_encoded                    => fnd_api.g_false,
        p_count                      => x_msg_count,
        p_data                       => x_msg_data);

      -- Debug info.

      -- Check if API is called in debug mode. If yes, disable debug.

    WHEN OTHERS THEN
      ROLLBACK TO activate_batch;

      x_return_status := fnd_api.g_ret_sts_unexp_error;

      fnd_message.set_name('AR', 'HZ_API_OTHERS_EXCEP');
      fnd_message.set_token('ERROR',SQLERRM);
      fnd_msg_pub.add;

      fnd_msg_pub.count_and_get(
        p_encoded                    => fnd_api.g_false,
        p_count                      => x_msg_count,
        p_data                       => x_msg_data);

      -- Debug info.

      -- Check if API is called in debug mode. If yes, disable debug.

  END activate_batch;


END HZ_IMP_BATCH_SUMMARY_V2PUB;

/
