--------------------------------------------------------
--  DDL for Package Body PAY_PYAUAPL_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PAY_PYAUAPL_XMLP_PKG" AS
/* $Header: PYAUAPLB.pls 120.1 2008/03/25 06:23:59 amakrish noship $ */
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_BUSINESS_GROUPFORMULA RETURN VARCHAR2 IS
    V_BUSINESS_GROUP HR_ALL_ORGANIZATION_UNITS.NAME%TYPE;
  BEGIN
    V_BUSINESS_GROUP := HR_REPORTS.GET_BUSINESS_GROUP(P_BUSINESS_GROUP_ID);
    RETURN V_BUSINESS_GROUP;
  END CF_BUSINESS_GROUPFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CODE VARCHAR2(1);
    FLAG HR_LOOKUPS.MEANING%TYPE;
    CURSOR C_CUR_FUT IS
      SELECT
        LOOKUP_CODE,
        MEANING
      FROM
        HR_LOOKUPS
      WHERE LOOKUP_CODE in ( 'C' , 'F' )
        AND LOOKUP_TYPE = 'AU_ADV_FLAG';
    CURSOR C_PROCESS IS
      SELECT
        LOOKUP_CODE,
        MEANING
      FROM
        HR_LOOKUPS
      WHERE LOOKUP_CODE in ( 'Y' , 'N' )
        AND LOOKUP_TYPE = 'YES_NO';
    CURSOR C_GET_EMP_NO IS
      SELECT
        EMPLOYEE_NUMBER
      FROM
        PER_PEOPLE_F
      WHERE PERSON_ID = P_PERSON_ID;
    CURSOR C_GET_PAY_NAME IS
      SELECT
        PAYROLL_NAME
      FROM
        PAY_PAYROLLS_F
      WHERE PAYROLL_ID = P_PAYROLL_ID;
      CP_DATE_FORMAT varchar2(20);
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    IF (P_PERSON_ID IS NULL) THEN
      P_EMPLOYEE_NUMBER := NULL;
    ELSE
      OPEN C_GET_EMP_NO;
      FETCH C_GET_EMP_NO
       INTO
         P_EMPLOYEE_NUMBER;
      CLOSE C_GET_EMP_NO;
    END IF;
    OPEN C_GET_PAY_NAME;
    FETCH C_GET_PAY_NAME
     INTO
       P_PAYROLL_NAME;
    CLOSE C_GET_PAY_NAME;
    OPEN C_CUR_FUT;
    FOR i IN 1 .. 2 LOOP
      FETCH C_CUR_FUT
       INTO
         CODE
         ,FLAG;
      IF CODE = 'C' THEN
        CP_CURRENT := FLAG;
      ELSIF CODE = 'F' THEN
        CP_FUTURE := FLAG;
      END IF;
    END LOOP;
    CLOSE C_CUR_FUT;
    OPEN C_PROCESS;
    FOR i IN 1 .. 2 LOOP
      FETCH C_PROCESS
       INTO
         CODE
         ,FLAG;
      IF CODE = 'Y' THEN
        CP_YES := FLAG;
      ELSIF CODE = 'N' THEN
        CP_NO := FLAG;
      END IF;
    END LOOP;
    CLOSE C_PROCESS;
    CP_LV_ADV_m := CF_END_DATEFORMULA;
	CP_DATE_FORMAT := 'DD-MON-YYYY';
    P_START_DATE1 := TO_DATE(P_START_DATE,CP_DATE_FORMAT);
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_CURRENT_FUTURE_FLAGFORMULA RETURN CHAR IS
    FLAG VARCHAR2(10);
  BEGIN
    IF (P_END_DATE IS NULL) THEN
      FLAG := CP_CURRENT;
    ELSIF (CP_LEAVE_START_DATE > P_END_DATE) THEN
      FLAG := CP_FUTURE;
    ELSE
      FLAG := CP_CURRENT;
    END IF;
    RETURN (FLAG);
  END CF_CURRENT_FUTURE_FLAGFORMULA;

  FUNCTION CF_PROCESS_FLAGFORMULA(P_CP_LEAVE_START_DATE in DATE,P_CP_LEAVE_END_DATE in DATE) RETURN CHAR IS
    PROCESS_STATUS VARCHAR2(30);
    CURSOR C_STATUS IS
      SELECT
        PPA7.ACTION_STATUS
      FROM
        PAY_PAYROLLS_F PPF7,
        PER_ASSIGNMENTS_F PAA7,
        PAY_PAYROLL_ACTIONS PPA7,
        PAY_ASSIGNMENT_ACTIONS PAC7
      WHERE PPF7.PAYROLL_ID = PAA7.PAYROLL_ID
        AND PPA7.ACTION_TYPE = 'W'
        AND PPA7.PAYROLL_ACTION_ID = PAC7.PAYROLL_ACTION_ID
        AND PAA7.ASSIGNMENT_ID = PAC7.ASSIGNMENT_ID
        AND P_CP_LEAVE_START_DATE between PPA7.START_DATE
        AND PPA7.END_DATE
        AND P_CP_LEAVE_END_DATE between PPA7.START_DATE
        AND PPA7.END_DATE;
  BEGIN
    OPEN C_STATUS;
    FETCH C_STATUS
     INTO
       PROCESS_STATUS;
    CLOSE C_STATUS;
    IF (PROCESS_STATUS = 'C') THEN
      RETURN (CP_YES);
    ELSE
      RETURN (CP_NO);
    END IF;
  END CF_PROCESS_FLAGFORMULA;

  FUNCTION CF_END_DATEFORMULA RETURN varchar2 IS
  TEMP1 VARCHAR2(40);
  BEGIN
    CP_LV_ADV := P_START_DATE + P_ADVANCE_PERIOD;
    TEMP1 := TO_CHAR(CP_LV_ADV,'DD-MON-YYYY');

    RETURN (TEMP1);
  END CF_END_DATEFORMULA;

  FUNCTION CF_DATE_CONVERSIONFORMULA(LEAVE_START_DATE IN VARCHAR2
                                    ,LEAVE_END_DATE IN VARCHAR2
                                    ,PAY_DATE IN VARCHAR2) RETURN NUMBER IS
pragma autonomous_transaction;
  BEGIN
    CP_LEAVE_START_DATE := TO_DATE(LEAVE_START_DATE
                                  ,'YYYY/MM/DD HH24:MI:SS');
    CP_LEAVE_END_DATE := TO_DATE(LEAVE_END_DATE
                                ,'YYYY/MM/DD HH24:MI:SS');
    CP_PAY_DATE := TO_DATE(PAY_DATE
                          ,'YYYY/MM/DD HH24:MI:SS');

    CP_PAY_DATE1 := CP_PAY_DATE;

    RETURN (1);
  END CF_DATE_CONVERSIONFORMULA;

  FUNCTION CP_LEAVE_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN CP_LEAVE_START_DATE;
  END CP_LEAVE_START_DATE_P;

  FUNCTION CP_PAY_DATE_P RETURN DATE IS
  BEGIN
    RETURN CP_PAY_DATE;
  END CP_PAY_DATE_P;

  FUNCTION CP_LEAVE_END_DATE_P RETURN DATE IS
  BEGIN
    RETURN CP_LEAVE_END_DATE;
  END CP_LEAVE_END_DATE_P;

  FUNCTION CP_LV_ADV_P RETURN DATE IS
  BEGIN
    RETURN CP_LV_ADV;
  END CP_LV_ADV_P;

  FUNCTION CP_CURRENT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CURRENT;
  END CP_CURRENT_P;

  FUNCTION CP_FUTURE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_FUTURE;
  END CP_FUTURE_P;

  FUNCTION CP_YES_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_YES;
  END CP_YES_P;

  FUNCTION CP_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_NO;
  END CP_NO_P;

END PAY_PYAUAPL_XMLP_PKG;

/
