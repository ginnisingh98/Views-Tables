--------------------------------------------------------
--  DDL for Package Body HZ_MATCH_RULE_32
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HZ_MATCH_RULE_32" AS
/*=======================================================================+
 |  Copyright (c) 1999 Oracle Corporation Redwood Shores, California, USA|
 |                          All rights reserved.                         |
 +=======================================================================+
 | NAME
 |      HZ_MATCH_RULE_32
 |
 | DESCRIPTION
 |
 | Compiled by the HZ Match Rule Compiler
 | -- Do Not Modify --
 |
 | PUBLIC PROCEDURES
 |    find_parties
 |    get_matching_party_sites
 |    get_matching_contacts
 |    get_matching_contact_points
 |    get_score_details
 |    
 | HISTORY
 |      30-AUG-2013 Generated by HZ Match Rule Compiler
 |
 *=======================================================================*/

-- ==========================================================================================
-- ============MATCH RULE COMPILER GENERATED CODE FOR SEARCH MATCH RULES ====================
-- ==========================================================================================

  TYPE vlisttype IS TABLE of VARCHAR2(255) INDEX BY BINARY_INTEGER ;
  call_order vlisttype;
  call_max_score HZ_PARTY_SEARCH.IDList;
  call_type vlisttype;
  g_party_stage_rec  HZ_PARTY_STAGE.party_stage_rec_type;
  g_party_site_stage_list  HZ_PARTY_STAGE.party_site_stage_list;
  g_contact_stage_list  HZ_PARTY_STAGE.contact_stage_list;
  g_contact_pt_stage_list  HZ_PARTY_STAGE.contact_pt_stage_list;
  g_mappings  HZ_PARTY_SEARCH.IDList;
  g_max_id NUMBER:=2000000000;
  g_other_party_level_attribs BOOLEAN;

  g_debug_count                        NUMBER := 0;
  g_score_until_thresh BOOLEAN:=false;
 
  g_thres_score NUMBER:=1000;
  g_ps_den_only BOOLEAN;
  g_index_owner VARCHAR2(255);
  distinct_search_cpt_types NUMBER ; 

PROCEDURE output_long_strings(input_str VARCHAR2 DEFAULT NULL)
IS
     remainder_str VARCHAR2(4000);
     current_pos NUMBER ;
     temp VARCHAR2(300) ;
BEGIN
     remainder_str := input_str ;
     current_pos := 1 ;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
     WHILE remainder_str IS NOT NULL
     LOOP
     temp := substr(remainder_str, 1 , 255 );
      hz_utility_v2pub.debug(p_message=>'  '||temp,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
     current_pos := current_pos + 255 ;
     remainder_str := substr(input_str,current_pos );
     END LOOP ;
    END IF;
END ;
FUNCTION check_estimate_hits (
  p_entity VARCHAR2,
  p_contains_str VARCHAR2) RETURN NUMBER IS
  
  ustatus VARCHAR2(255);
  dstatus VARCHAR2(255);
  l_bool BOOLEAN;
  l_hits NUMBER := 0;
BEGIN
  IF g_index_owner IS NULL THEN
    l_bool := fnd_installation.GET_APP_INFO('AR',ustatus,dstatus,g_index_owner);
  END IF;
  IF p_entity='PARTY' THEN

    l_hits :=  CTX_QUERY.count_hits(
        g_index_owner||'.'||'HZ_STAGE_PARTIES_T1',p_contains_str, false);
  ELSIF p_entity='PARTY_SITES' THEN
    l_hits :=  CTX_QUERY.count_hits(
        g_index_owner||'.'||'HZ_STAGE_PARTY_SITES_T1',p_contains_str, false);
  ELSIF p_entity='CONTACTS' THEN
    l_hits :=  CTX_QUERY.count_hits(
        g_index_owner||'.'||'HZ_STAGE_CONTACT_T1',p_contains_str, false);
  ELSIF p_entity='CONTACT_POINTS' THEN
    l_hits :=  CTX_QUERY.count_hits(
        g_index_owner||'.'||'HZ_STAGE_CPT_T1',p_contains_str, false);
  END IF;
  RETURN floor(l_hits/2) ;
  

  exception
    when others then
      if (instrb(SQLERRM,'DRG-51030')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_WILDCARD_ERR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      elsif (instrb(SQLERRM,'DRG-50943')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_SEARCH_ERROR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      else 
        RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
      end if;
END;


FUNCTION get_adjusted_restrict_sql (p_restrict_sql VARCHAR2)
RETURN VARCHAR2
IS
p_person_restrict_sql VARCHAR2(32767);
p_restrict1_sql VARCHAR2(32767);
p_final_restrict_sql VARCHAR2(32767);
BEGIN
   p_final_restrict_sql := p_restrict_sql ; 
   IF p_restrict_sql IS NOT NULL
   THEN
     IF instrb(p_restrict_sql, 'STAGE.') > 0
     THEN
        p_restrict1_sql := replace( p_restrict_sql, 'STAGE.', 'stage1.');
     ELSIF instrb(p_restrict_sql, 'stage.') > 0
     THEN
           p_restrict1_sql := replace( p_restrict_sql, 'stage.', 'stage1.');
     END IF;
    p_person_restrict_sql := 'exists ( SELECT 1 from HZ_ORG_CONTACTS oc, hz_relationships r' 
                               || ' where oc.org_contact_id = stage.org_contact_id and' 
                               || ' r.relationship_id = oc.party_relationship_id' 
                               || ' and r.subject_type = ''PERSON'' AND r.object_type = ''ORGANIZATION'' ' 
                               || ' and exists ( SELECT 1 FROM HZ_PARTIES stage1 where stage1.party_id = r.subject_id' 
                               || ' and ' || p_restrict1_sql || ' ) )' ; 
p_final_restrict_sql := '((stage.org_contact_id is null and ' || p_restrict_sql || ') or (stage.org_contact_id is not null and ' 
                           || p_person_restrict_sql ||  ' ))'; 
 END IF;
 return p_final_restrict_sql ;
END;
  FUNCTION map_id (in_id NUMBER) RETURN NUMBER IS
    l_newidx NUMBER;
  BEGIN 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'calling the function map_id',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'argument in_id =  '||in_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    IF in_id<g_max_id THEN 
      RETURN in_id;
    ELSE
      FOR I in 1..g_mappings.COUNT LOOP
        IF in_id = g_mappings(I) THEN
          RETURN (g_max_id+I);
        END IF;
      END LOOP;
      l_newidx := g_mappings.COUNT+1;
      g_mappings(l_newidx) := in_id;
      RETURN (g_max_id+l_newidx);
    END IF;
  END;
  FUNCTION GET_PARTY_SCORE 
       (
       p_table_TX34 VARCHAR2
      ,p_table_TX40 VARCHAR2
      ,p_table_TX158 VARCHAR2
      ,p_table_TX39 VARCHAR2
      ,p_table_TX44 VARCHAR2
      ,p_table_TX45 VARCHAR2
      ,p_table_TX46 VARCHAR2
      ,p_table_TX47 VARCHAR2
  ) RETURN NUMBER IS
    total NUMBER := 0;
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'calling the function get_party_score',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'GET_PARTY_SCORE   ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF g_score_until_thresh AND (total)>=g_thres_score THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_party_score returned total =  '||total,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      RETURN total;
    END IF;
    IF HZ_DQM_SEARCH_UTIL.is_match(g_party_stage_rec.TX34, p_table_TX34,38) THEN
      total := total+100;
      IF g_score_until_thresh AND (total)>=g_thres_score THEN 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_party_score returned total =  '||total,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        RETURN total;
      END IF;
    END IF;
    IF HZ_DQM_SEARCH_UTIL.is_match(g_party_stage_rec.TX39, p_table_TX39,43) THEN
      total := total+60;
      IF g_score_until_thresh AND (total)>=g_thres_score THEN 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_party_score returned total =  '||total,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        RETURN total;
      END IF;
    ELSIF HZ_DQM_SEARCH_UTIL.is_match(g_party_stage_rec.TX40, p_table_TX40,44) THEN
      total := total+48;
      IF g_score_until_thresh AND (total)>=g_thres_score THEN 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_party_score returned total =  '||total,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        RETURN total;
      END IF;
    ELSIF HZ_DQM_SEARCH_UTIL.is_match(g_party_stage_rec.TX158, p_table_TX158,123) THEN
      total := total+36;
      IF g_score_until_thresh AND (total)>=g_thres_score THEN 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_party_score returned total =  '||total,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        RETURN total;
      END IF;
    END IF;
    IF HZ_DQM_SEARCH_UTIL.is_match(g_party_stage_rec.TX44, p_table_TX44,49) THEN
      total := total+100;
      IF g_score_until_thresh AND (total)>=g_thres_score THEN 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_party_score returned total =  '||total,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        RETURN total;
      END IF;
    END IF;
    IF HZ_DQM_SEARCH_UTIL.is_match(g_party_stage_rec.TX45, p_table_TX45,50) THEN
      total := total+60;
      IF g_score_until_thresh AND (total)>=g_thres_score THEN 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_party_score returned total =  '||total,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        RETURN total;
      END IF;
    END IF;
    IF HZ_DQM_SEARCH_UTIL.is_match(g_party_stage_rec.TX46, p_table_TX46,51) THEN
      total := total+25;
      IF g_score_until_thresh AND (total)>=g_thres_score THEN 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_party_score returned total =  '||total,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        RETURN total;
      END IF;
    END IF;
    IF HZ_DQM_SEARCH_UTIL.is_match(g_party_stage_rec.TX47, p_table_TX47,52) THEN
      total := total+25;
      IF g_score_until_thresh AND (total)>=g_thres_score THEN 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_party_score returned total =  '||total,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        RETURN total;
      END IF;
    END IF;
    RETURN total;
  END;
  FUNCTION GET_PARTY_SITES_SCORE (
       x_matchidx OUT NUMBER
      ,p_table_TX3 VARCHAR2
      ,p_table_TX4 VARCHAR2
      ,p_table_TX9 VARCHAR2
      ,p_table_TX10 VARCHAR2
      ,p_table_TX11 VARCHAR2
      ,p_table_TX14 VARCHAR2
      ,p_table_TX15 VARCHAR2
      ,p_table_TX22 VARCHAR2
  ) RETURN NUMBER IS
    maxscore NUMBER := 0;
    l_current_score NUMBER := 0;
  BEGIN
    x_matchidx := 0;
    IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
       RETURN l_current_score;
    END IF;
    FOR J IN 1..g_party_site_stage_list.COUNT LOOP
      l_current_score := 0;
      IF HZ_DQM_SEARCH_UTIL.is_match(g_party_site_stage_list(J).TX4, p_table_TX4,(50000*(J-1)+67)) THEN
        l_current_score:=l_current_score+ 40;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      ELSIF -- l_current_score<40 AND 
          HZ_DQM_SEARCH_UTIL.is_match(g_party_site_stage_list(J).TX3, p_table_TX3,(50000*(J-1)+66)) THEN
        l_current_score:=l_current_score+ 40;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      END IF;
      IF HZ_DQM_SEARCH_UTIL.is_match(g_party_site_stage_list(J).TX9, p_table_TX9,(50000*(J-1)+72)) THEN
        l_current_score:=l_current_score+ 10;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      ELSIF -- l_current_score<8 AND 
          HZ_DQM_SEARCH_UTIL.is_match(g_party_site_stage_list(J).TX10, p_table_TX10,(50000*(J-1)+73)) THEN
        l_current_score:=l_current_score+ 8;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      END IF;
      IF HZ_DQM_SEARCH_UTIL.is_match(g_party_site_stage_list(J).TX11, p_table_TX11,(50000*(J-1)+74)) THEN
        l_current_score:=l_current_score+ 15;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      END IF;
      IF HZ_DQM_SEARCH_UTIL.is_match(g_party_site_stage_list(J).TX14, p_table_TX14,(50000*(J-1)+77)) THEN
        l_current_score:=l_current_score+ 20;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      ELSIF -- l_current_score<16 AND 
          HZ_DQM_SEARCH_UTIL.is_match(g_party_site_stage_list(J).TX15, p_table_TX15,(50000*(J-1)+78)) THEN
        l_current_score:=l_current_score+ 16;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      END IF;
      IF HZ_DQM_SEARCH_UTIL.is_match(g_party_site_stage_list(J).TX22, p_table_TX22,(50000*(J-1)+85)) THEN
        l_current_score:=l_current_score+ 10;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      END IF;
      IF maxscore<l_current_score THEN
        maxscore:=l_current_score;
        x_matchidx:=J;
      END IF;
    END LOOP;
    RETURN maxscore;
  END;
  FUNCTION GET_CONTACTS_SCORE (
       x_matchidx OUT NUMBER
      ,p_table_TX2 VARCHAR2
      ,p_table_TX156 VARCHAR2
      ,p_table_TX6 VARCHAR2
      ,p_table_TX5 VARCHAR2
  ) RETURN NUMBER IS
    maxscore NUMBER := 0;
    l_current_score NUMBER := 0;
  BEGIN
    x_matchidx := 0;
    IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
       RETURN l_current_score;
    END IF;
    FOR J IN 1..g_contact_stage_list.COUNT LOOP
      l_current_score := 0;
      IF HZ_DQM_SEARCH_UTIL.is_match(g_contact_stage_list(J).TX2, p_table_TX2,(50000*(J-1)+89)) THEN
        l_current_score:=l_current_score+ 60;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      ELSIF -- l_current_score<48 AND 
          HZ_DQM_SEARCH_UTIL.is_match(g_contact_stage_list(J).TX5, p_table_TX5,(50000*(J-1)+92)) THEN
        l_current_score:=l_current_score+ 48;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      ELSIF -- l_current_score<42 AND 
          HZ_DQM_SEARCH_UTIL.is_match(g_contact_stage_list(J).TX6, p_table_TX6,(50000*(J-1)+93)) THEN
        l_current_score:=l_current_score+ 42;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      ELSIF -- l_current_score<36 AND 
          HZ_DQM_SEARCH_UTIL.is_match(g_contact_stage_list(J).TX156, p_table_TX156,(50000*(J-1)+124)) THEN
        l_current_score:=l_current_score+ 36;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      END IF;
      IF maxscore<l_current_score THEN
        maxscore:=l_current_score;
        x_matchidx:=J;
      END IF;
    END LOOP;
    RETURN maxscore;
  END;
  FUNCTION GET_CONTACT_POINTS_SCORE (
       x_matchidx OUT NUMBER
      ,p_table_TX1 VARCHAR2
      ,p_table_TX6 VARCHAR2
      ,p_table_TX5 VARCHAR2
  ) RETURN NUMBER IS
    maxscore NUMBER := 0;
    l_current_score NUMBER := 0;
  BEGIN
    x_matchidx := 0;
    IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
       RETURN l_current_score;
    END IF;
    FOR J IN 1..g_contact_pt_stage_list.COUNT LOOP
      l_current_score := 0;
      IF HZ_DQM_SEARCH_UTIL.is_match(g_contact_pt_stage_list(J).TX1, p_table_TX1,(50000*(J-1)+110)) THEN
        l_current_score:=l_current_score+ 72;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      END IF;
      IF HZ_DQM_SEARCH_UTIL.is_match(g_contact_pt_stage_list(J).TX5, p_table_TX5,(50000*(J-1)+114)) THEN
        l_current_score:=l_current_score+ 80;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      ELSIF -- l_current_score<64 AND 
          HZ_DQM_SEARCH_UTIL.is_match(g_contact_pt_stage_list(J).TX6, p_table_TX6,(50000*(J-1)+115)) THEN
        l_current_score:=l_current_score+ 64;
        IF g_score_until_thresh AND (l_current_score)>=g_thres_score THEN
          x_matchidx:=J;
          RETURN l_current_score;
        END IF;
      END IF;
      IF maxscore<l_current_score THEN
        maxscore:=l_current_score;
        x_matchidx:=J;
      END IF;
    END LOOP;
    RETURN maxscore;
  END;
  FUNCTION get_attrib_val(
      p_record_id 	NUMBER
     ,p_entity 	VARCHAR2
     ,p_attribute 	VARCHAR2
  ) RETURN VARCHAR2 IS
  l_matched_value VARCHAR2(2000);
  l_party_type VARCHAR2(255);
  BEGIN
  IF p_entity = 'PARTY' THEN
  IF p_attribute = 'PARTY_NUMBER' THEN

      SELECT party_type INTO l_party_type 
      FROM HZ_PARTIES
      WHERE party_id = p_record_id;
      IF l_party_type = 'ORGANIZATION' THEN
        SELECT PARTY_NUMBER INTO l_matched_value 
        FROM HZ_PARTIES
        WHERE party_id = p_record_id 
        and rownum = 1;
      ELSIF l_party_type = 'PERSON' THEN
        SELECT PARTY_NUMBER INTO l_matched_value 
        FROM HZ_PARTIES
        WHERE party_id = p_record_id 
        and rownum = 1;
      END IF;
      RETURN l_matched_value;
    END IF;
  IF p_attribute = 'PARTY_ALL_NAMES' THEN

     l_matched_value := HZ_PARTY_ACQUIRE.get_known_as (p_record_id, p_entity,'PARTY_ALL_NAMES','Y');
      RETURN l_matched_value;
    END IF;
  IF p_attribute = 'TAX_REFERENCE' THEN

      SELECT party_type INTO l_party_type 
      FROM HZ_PARTIES
      WHERE party_id = p_record_id;
      IF l_party_type = 'ORGANIZATION' THEN
        SELECT TAX_REFERENCE INTO l_matched_value 
        FROM HZ_ORGANIZATION_PROFILES
        WHERE party_id = p_record_id 
        and effective_end_date is null
        and rownum = 1;
      ELSIF l_party_type = 'PERSON' THEN
        SELECT TAX_REFERENCE INTO l_matched_value 
        FROM HZ_PERSON_PROFILES
        WHERE party_id = p_record_id 
        and effective_end_date is null 
        and rownum = 1;
      END IF;
      RETURN l_matched_value;
    END IF;
  IF p_attribute = 'JGZZ_FISCAL_CODE' THEN

      SELECT party_type INTO l_party_type 
      FROM HZ_PARTIES
      WHERE party_id = p_record_id;
      IF l_party_type = 'ORGANIZATION' THEN
        SELECT JGZZ_FISCAL_CODE INTO l_matched_value 
        FROM HZ_ORGANIZATION_PROFILES
        WHERE party_id = p_record_id 
        and effective_end_date is null
        and rownum = 1;
      ELSIF l_party_type = 'PERSON' THEN
        SELECT JGZZ_FISCAL_CODE INTO l_matched_value 
        FROM HZ_PERSON_PROFILES
        WHERE party_id = p_record_id 
        and effective_end_date is null 
        and rownum = 1;
      END IF;
      RETURN l_matched_value;
    END IF;
  IF p_attribute = 'SIC_CODE' THEN

      SELECT party_type INTO l_party_type 
      FROM HZ_PARTIES
      WHERE party_id = p_record_id;
      IF l_party_type = 'ORGANIZATION' THEN
        SELECT SIC_CODE INTO l_matched_value 
        FROM HZ_ORGANIZATION_PROFILES
        WHERE party_id = p_record_id 
        and effective_end_date is null
        and rownum = 1;
      ELSIF l_party_type = 'PERSON' THEN
        SELECT SIC_CODE INTO l_matched_value 
        FROM HZ_ORGANIZATION_PROFILES
        WHERE party_id = p_record_id 
        and rownum = 1;
      END IF;
      RETURN l_matched_value;
    END IF;
  IF p_attribute = 'SIC_CODE_TYPE' THEN

      SELECT party_type INTO l_party_type 
      FROM HZ_PARTIES
      WHERE party_id = p_record_id;
      IF l_party_type = 'ORGANIZATION' THEN
        SELECT SIC_CODE_TYPE INTO l_matched_value 
        FROM HZ_ORGANIZATION_PROFILES
        WHERE party_id = p_record_id 
        and effective_end_date is null
        and rownum = 1;
      ELSIF l_party_type = 'PERSON' THEN
        SELECT SIC_CODE_TYPE INTO l_matched_value 
        FROM HZ_ORGANIZATION_PROFILES
        WHERE party_id = p_record_id 
        and rownum = 1;
      END IF;
      RETURN l_matched_value;
    END IF;
    NULL;
  END IF;
  IF p_entity = 'PARTY_SITES' THEN
  IF p_attribute = 'ADDRESS' THEN
     l_matched_value := HZ_PARTY_ACQUIRE.get_address (p_record_id, p_entity,'ADDRESS','Y');
      RETURN l_matched_value;
    END IF;
  IF p_attribute = 'CITY' THEN
     BEGIN
       SELECT HZ_LOCATIONS.CITY
       INTO l_matched_value 
       FROM HZ_PARTY_SITES, HZ_LOCATIONS
       WHERE HZ_PARTY_SITES.party_site_id = p_record_id
       AND HZ_PARTY_SITES.location_id = HZ_LOCATIONS.location_id and rownum=1;
     EXCEPTION
       WHEN NO_DATA_FOUND THEN
         l_matched_value := 'Err';
     END;
      RETURN l_matched_value;
    END IF;
  IF p_attribute = 'POSTAL_CODE' THEN
     BEGIN
       SELECT HZ_LOCATIONS.POSTAL_CODE
       INTO l_matched_value 
       FROM HZ_PARTY_SITES, HZ_LOCATIONS
       WHERE HZ_PARTY_SITES.party_site_id = p_record_id
       AND HZ_PARTY_SITES.location_id = HZ_LOCATIONS.location_id and rownum=1;
     EXCEPTION
       WHEN NO_DATA_FOUND THEN
         l_matched_value := 'Err';
     END;
      RETURN l_matched_value;
    END IF;
  IF p_attribute = 'STATE' THEN
     BEGIN
       SELECT HZ_LOCATIONS.STATE
       INTO l_matched_value 
       FROM HZ_PARTY_SITES, HZ_LOCATIONS
       WHERE HZ_PARTY_SITES.party_site_id = p_record_id
       AND HZ_PARTY_SITES.location_id = HZ_LOCATIONS.location_id and rownum=1;
     EXCEPTION
       WHEN NO_DATA_FOUND THEN
         l_matched_value := 'Err';
     END;
      RETURN l_matched_value;
    END IF;
  IF p_attribute = 'COUNTRY' THEN
     BEGIN
       SELECT HZ_LOCATIONS.COUNTRY
       INTO l_matched_value 
       FROM HZ_PARTY_SITES, HZ_LOCATIONS
       WHERE HZ_PARTY_SITES.party_site_id = p_record_id
       AND HZ_PARTY_SITES.location_id = HZ_LOCATIONS.location_id and rownum=1;
     EXCEPTION
       WHEN NO_DATA_FOUND THEN
         l_matched_value := 'Err';
     END;
      RETURN l_matched_value;
    END IF;
    NULL;
  END IF;
  IF p_entity = 'CONTACTS' THEN
  IF p_attribute = 'CONTACT_NAME' THEN
     l_matched_value := HZ_PARTY_ACQUIRE.get_contact_name (p_record_id, p_entity,'CONTACT_NAME','Y');
      RETURN l_matched_value;
    END IF;
    NULL;
  END IF;
  IF p_entity = 'CONTACT_POINTS' THEN
  IF p_attribute = 'FLEX_FORMAT_PHONE_NUMBER' THEN
     l_matched_value := HZ_PARTY_ACQUIRE.get_phone_number (p_record_id, p_entity,'FLEX_FORMAT_PHONE_NUMBER','Y');
      RETURN l_matched_value;
    END IF;
  IF p_attribute = 'EMAIL_ADDRESS' THEN
     BEGIN
       SELECT EMAIL_ADDRESS INTO l_matched_value 
       FROM HZ_CONTACT_POINTS 
       WHERE contact_point_id = p_record_id and rownum=1;
     EXCEPTION
       WHEN NO_DATA_FOUND THEN
         l_matched_value := 'Err';
     END;
      RETURN l_matched_value;
    END IF;
    NULL;
  END IF;
END;
  PROCEDURE INSERT_PARTY_SCORE (
       p_party_id IN  NUMBER
       ,p_record_id IN  NUMBER
       ,p_search_ctx_id IN  NUMBER
       ,p_search_rec IN HZ_PARTY_SEARCH.party_search_rec_type
       ,p_stage_rec IN HZ_PARTY_STAGE.party_stage_rec_type
      ,p_table_TX34 VARCHAR2
      ,p_table_TX40 VARCHAR2
      ,p_table_TX158 VARCHAR2
      ,p_table_TX39 VARCHAR2
      ,p_table_TX44 VARCHAR2
      ,p_table_TX45 VARCHAR2
      ,p_table_TX46 VARCHAR2
      ,p_table_TX47 VARCHAR2
        ,p_idx IN NUMBER) IS
    l_current_score NUMBER:=0;
    l_score NUMBER;
    l_attrib_value VARCHAR2(2000);
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside Calling Procedure - INSERT_PARTY_SCORE',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX34, p_table_TX34,(50000*(p_idx-1)+38)) THEN
      l_score :=100;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'PARTY','PARTY_NUMBER');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'PARTY_NUMBER',
           'PARTY', p_search_rec.PARTY_NUMBER,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX39, p_table_TX39,(50000*(p_idx-1)+43)) THEN
      l_score :=60;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      ELSIF l_current_score<48 AND 
          HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX40, p_table_TX40,(50000*(p_idx-1)+44)) THEN
      l_score :=48;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      ELSIF l_current_score<36 AND 
          HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX158, p_table_TX158,(50000*(p_idx-1)+123)) THEN
      l_score :=36;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'PARTY','PARTY_ALL_NAMES');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'PARTY_ALL_NAMES',
           'PARTY', p_search_rec.PARTY_ALL_NAMES,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX44, p_table_TX44,(50000*(p_idx-1)+49)) THEN
      l_score :=100;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'PARTY','TAX_REFERENCE');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'TAX_REFERENCE',
           'PARTY', p_search_rec.TAX_REFERENCE,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX45, p_table_TX45,(50000*(p_idx-1)+50)) THEN
      l_score :=60;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'PARTY','JGZZ_FISCAL_CODE');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'JGZZ_FISCAL_CODE',
           'PARTY', p_search_rec.JGZZ_FISCAL_CODE,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX46, p_table_TX46,(50000*(p_idx-1)+51)) THEN
      l_score :=25;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'PARTY','SIC_CODE');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'SIC_CODE',
           'PARTY', p_search_rec.SIC_CODE,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX47, p_table_TX47,(50000*(p_idx-1)+52)) THEN
      l_score :=25;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'PARTY','SIC_CODE_TYPE');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'SIC_CODE_TYPE',
           'PARTY', p_search_rec.SIC_CODE_TYPE,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
    NULL;
  END;
  PROCEDURE INSERT_PARTY_SITES_SCORE (
       p_party_id IN  NUMBER
       ,p_record_id IN  NUMBER
       ,p_search_ctx_id IN  NUMBER
       ,p_search_rec IN HZ_PARTY_SEARCH.party_site_search_rec_type
       ,p_stage_rec IN HZ_PARTY_STAGE.party_site_stage_rec_type
      ,p_table_TX3 VARCHAR2
      ,p_table_TX4 VARCHAR2
      ,p_table_TX9 VARCHAR2
      ,p_table_TX10 VARCHAR2
      ,p_table_TX11 VARCHAR2
      ,p_table_TX14 VARCHAR2
      ,p_table_TX15 VARCHAR2
      ,p_table_TX22 VARCHAR2
        ,p_idx IN NUMBER) IS
    l_current_score NUMBER:=0;
    l_score NUMBER;
    l_attrib_value VARCHAR2(2000);
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside Calling Procedure - INSERT_PARTY_SITES_SCORE',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX4, p_table_TX4,(50000*(p_idx-1)+67)) THEN
      l_score :=40;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      ELSIF l_current_score<40 AND 
          HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX3, p_table_TX3,(50000*(p_idx-1)+66)) THEN
      l_score :=40;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'PARTY_SITES','ADDRESS');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'ADDRESS',
           'PARTY_SITES', p_search_rec.ADDRESS,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX9, p_table_TX9,(50000*(p_idx-1)+72)) THEN
      l_score :=10;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      ELSIF l_current_score<8 AND 
          HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX10, p_table_TX10,(50000*(p_idx-1)+73)) THEN
      l_score :=8;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'PARTY_SITES','CITY');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'CITY',
           'PARTY_SITES', p_search_rec.CITY,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX11, p_table_TX11,(50000*(p_idx-1)+74)) THEN
      l_score :=15;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'PARTY_SITES','POSTAL_CODE');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'POSTAL_CODE',
           'PARTY_SITES', p_search_rec.POSTAL_CODE,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX14, p_table_TX14,(50000*(p_idx-1)+77)) THEN
      l_score :=20;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      ELSIF l_current_score<16 AND 
          HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX15, p_table_TX15,(50000*(p_idx-1)+78)) THEN
      l_score :=16;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'PARTY_SITES','STATE');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'STATE',
           'PARTY_SITES', p_search_rec.STATE,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX22, p_table_TX22,(50000*(p_idx-1)+85)) THEN
      l_score :=10;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'PARTY_SITES','COUNTRY');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'COUNTRY',
           'PARTY_SITES', p_search_rec.COUNTRY,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
    NULL;
  END;
  PROCEDURE INSERT_CONTACTS_SCORE (
       p_party_id IN  NUMBER
       ,p_record_id IN  NUMBER
       ,p_search_ctx_id IN  NUMBER
       ,p_search_rec IN HZ_PARTY_SEARCH.contact_search_rec_type
       ,p_stage_rec IN HZ_PARTY_STAGE.contact_stage_rec_type
      ,p_table_TX2 VARCHAR2
      ,p_table_TX156 VARCHAR2
      ,p_table_TX6 VARCHAR2
      ,p_table_TX5 VARCHAR2
        ,p_idx IN NUMBER) IS
    l_current_score NUMBER:=0;
    l_score NUMBER;
    l_attrib_value VARCHAR2(2000);
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside Calling Procedure - INSERT_CONTACTS_SCORE',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX2, p_table_TX2,(50000*(p_idx-1)+89)) THEN
      l_score :=60;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      ELSIF l_current_score<48 AND 
          HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX5, p_table_TX5,(50000*(p_idx-1)+92)) THEN
      l_score :=48;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      ELSIF l_current_score<42 AND 
          HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX6, p_table_TX6,(50000*(p_idx-1)+93)) THEN
      l_score :=42;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      ELSIF l_current_score<36 AND 
          HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX156, p_table_TX156,(50000*(p_idx-1)+124)) THEN
      l_score :=36;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'CONTACTS','CONTACT_NAME');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'CONTACT_NAME',
           'CONTACTS', p_search_rec.CONTACT_NAME,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
    NULL;
  END;
  PROCEDURE INSERT_CONTACT_POINTS_SCORE (
       p_party_id IN  NUMBER
       ,p_record_id IN  NUMBER
       ,p_search_ctx_id IN  NUMBER
       ,p_search_rec IN HZ_PARTY_SEARCH.contact_point_search_rec_type
       ,p_stage_rec IN HZ_PARTY_STAGE.contact_pt_stage_rec_type
      ,p_table_TX1 VARCHAR2
      ,p_table_TX6 VARCHAR2
      ,p_table_TX5 VARCHAR2
        ,p_idx IN NUMBER) IS
    l_current_score NUMBER:=0;
    l_score NUMBER;
    l_attrib_value VARCHAR2(2000);
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside Calling Procedure - INSERT_CONTACT_POINTS_SCORE',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX1, p_table_TX1,(50000*(p_idx-1)+110)) THEN
      l_score :=72;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'CONTACT_POINTS','FLEX_FORMAT_PHONE_NUMBER');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'FLEX_FORMAT_PHONE_NUMBER',
           'CONTACT_POINTS', p_search_rec.FLEX_FORMAT_PHONE_NUMBER,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
     l_score :=0;
      IF HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX5, p_table_TX5,(50000*(p_idx-1)+114)) THEN
      l_score :=80;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      ELSIF l_current_score<64 AND 
          HZ_DQM_SEARCH_UTIL.is_match(p_stage_rec.TX6, p_table_TX6,(50000*(p_idx-1)+115)) THEN
      l_score :=64;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score is -  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_score>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_score > 0',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_attrib_value := get_attrib_val(p_record_id,'CONTACT_POINTS','EMAIL_ADDRESS');
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      INSERT INTO HZ_PARTY_SCORE_DTLS_GT (PARTY_ID, RECORD_ID, SEARCH_CONTEXT_ID,
                ATTRIBUTE,ENTITY,ENTERED_VALUE, MATCHED_VALUE, ASSIGNED_SCORE)
      VALUES (
           p_party_id,p_record_id,p_search_ctx_id,'EMAIL_ADDRESS',
           'CONTACT_POINTS', p_search_rec.EMAIL_ADDRESS,
           l_attrib_value,l_score);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into HZ_PARTY_SCORE_DTLS_GT ... Done',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
    NULL;
  END;

/************************************************
  This procedure populates global cond record
  for the PARTY Entity 
************************************************/

PROCEDURE POP_PARTY_COND_REC(
    p_search_rec IN HZ_PARTY_SEARCH.party_search_rec_type 
  ) IS 
BEGIN
NULL ;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_TRANSFORM_PROC_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC' , 'POP_PARTY_COND_REC');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END;


/************************************************
  This procedure populates global cond record
  for the PARTY_SITES Entity 
************************************************/

PROCEDURE POP_PARTY_SITES_COND_REC(
    p_search_list IN HZ_PARTY_SEARCH.party_site_list 
  ) IS 
BEGIN
---------POPULATE THE GLOBAL WORD CONDITION REC FOR PARTY_SITES-------------
------ Populate global condition record only if search list is not empty -----------
 IF p_search_list.COUNT > 0
 THEN
     HZ_WORD_CONDITIONS_PKG.set_gbl_condition_rec (36,p_search_list(1).COUNTRY);
END IF ;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_TRANSFORM_PROC_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC' , 'POP_PARTY_SITES_COND_REC');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END;


/************************************************
  This procedure populates global cond record
  for the CONTACTS Entity 
************************************************/

PROCEDURE POP_CONTACTS_COND_REC(
    p_search_list IN HZ_PARTY_SEARCH.contact_list 
  ) IS 
BEGIN
NULL ;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_TRANSFORM_PROC_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC' , 'POP_CONTACTS_COND_REC');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END;


/************************************************
  This procedure populates global cond record
  for the CONTACT_POINTS Entity 
************************************************/

PROCEDURE POP_CONTACT_POINTS_COND_REC(
    p_search_list IN HZ_PARTY_SEARCH.contact_point_list 
  ) IS 
BEGIN
NULL ;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_TRANSFORM_PROC_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC' , 'POP_CONTACT_POINTS_COND_REC');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END;

  PROCEDURE init_score_context (
      p_party_search_rec      IN      HZ_PARTY_SEARCH.party_search_rec_type:=
                                  HZ_PARTY_SEARCH.G_MISS_PARTY_SEARCH_REC,
      p_party_site_list       IN      HZ_PARTY_SEARCH.party_site_list:=
                                  HZ_PARTY_SEARCH.G_MISS_PARTY_SITE_LIST,
      p_contact_list          IN      HZ_PARTY_SEARCH.contact_list:= 
                                  HZ_PARTY_SEARCH.G_MISS_CONTACT_LIST,
      p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list:=
                                  HZ_PARTY_SEARCH.G_MISS_CONTACT_POINT_LIST
  ) IS
   l_dummy NUMBER;
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'calling the procedure init_score_context',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In init_score_context calling the Map procedures',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    -- Transform search criteria
    HZ_TRANS_PKG.clear_globals;
    MAP_PARTY_REC(FALSE,p_party_search_rec, l_dummy, g_party_stage_rec);
    MAP_PARTY_SITE_REC(FALSE,p_party_site_list, l_dummy, g_party_site_stage_list);
    MAP_CONTACT_REC(FALSE,p_contact_list, l_dummy, g_contact_stage_list);
    MAP_CONTACT_POINT_REC(FALSE,p_contact_point_list, l_dummy, g_contact_pt_stage_list);

  END;
  FUNCTION init_search(
      p_party_search_rec      IN      HZ_PARTY_SEARCH.party_search_rec_type:=
                                  HZ_PARTY_SEARCH.G_MISS_PARTY_SEARCH_REC,
      p_party_site_list       IN      HZ_PARTY_SEARCH.party_site_list:=
                                  HZ_PARTY_SEARCH.G_MISS_PARTY_SITE_LIST,
      p_contact_list          IN      HZ_PARTY_SEARCH.contact_list:= 
                                  HZ_PARTY_SEARCH.G_MISS_CONTACT_LIST,
      p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list:=
                                  HZ_PARTY_SEARCH.G_MISS_CONTACT_POINT_LIST,
      p_match_type            IN  VARCHAR2,
      x_party_max_score       OUT NUMBER,
      x_ps_max_score       OUT NUMBER,
      x_contact_max_score       OUT NUMBER,
      x_cpt_max_score       OUT NUMBER
  ) RETURN NUMBER IS 
  l_entered_max_score NUMBER:=0;
  l_ps_entered_max_score NUMBER:=0;
  l_ct_entered_max_score NUMBER:=0;
  l_cpt_entered_max_score NUMBER:=0;
  vlist vlisttype;
  maxscore HZ_PARTY_SEARCH.IDList;
  l_name VARCHAR2(200);
  l_idx NUMBER; 
  l_num NUMBER; 
  total NUMBER; 
  threshold NUMBER; 
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'calling the function init_search',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    IF NOT check_prim_cond (p_party_search_rec,
                            p_party_site_list,
                            p_contact_list,
                            p_contact_point_list) THEN
      FND_MESSAGE.SET_NAME('AR', 'HZ_NO_PRIMARY_COND');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In init_search calling util package set_score',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    HZ_DQM_SEARCH_UTIL.set_score;
    g_mappings.DELETE;
    g_party_site_stage_list.DELETE;
    g_contact_stage_list.DELETE;
    g_contact_pt_stage_list.DELETE;
    call_order.DELETE;
    call_max_score.DELETE;
    HZ_DQM_SEARCH_UTIL.new_search;
    HZ_TRANS_PKG.set_party_type(p_party_search_rec.PARTY_TYPE);
    HZ_DQM_SEARCH_UTIL.set_num_eval(0);

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In init_search calling the Map procedures',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    -- Transform search criteria
POP_PARTY_COND_REC(p_party_search_rec);

POP_PARTY_SITES_COND_REC(p_party_site_list);

POP_CONTACTS_COND_REC(p_contact_list);

POP_CONTACT_POINTS_COND_REC(p_contact_point_list);

    MAP_PARTY_REC(TRUE,p_party_search_rec, l_entered_max_score, g_party_stage_rec);
    MAP_PARTY_SITE_REC(TRUE,p_party_site_list, l_ps_entered_max_score, g_party_site_stage_list);
    MAP_CONTACT_REC(TRUE,p_contact_list, l_ct_entered_max_score, g_contact_stage_list);
    MAP_CONTACT_POINT_REC(TRUE,p_contact_point_list, l_cpt_entered_max_score, g_contact_pt_stage_list);

      
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In init_search determining call order of entities',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    l_idx := l_entered_max_score+1;
    vlist (l_idx) := 'PARTY';
    maxscore (l_idx) := l_entered_max_score;
    l_idx := l_ps_entered_max_score+1;
    WHILE vlist.EXISTS(l_idx) LOOP
      l_idx := l_idx+1;
    END LOOP;
    vlist (l_idx) := 'PARTY_SITE';
    maxscore (l_idx) := l_ps_entered_max_score;

    l_idx := l_ct_entered_max_score+1;
    WHILE vlist.EXISTS(l_idx) LOOP
      l_idx := l_idx+1;
    END LOOP;
    vlist (l_idx) := 'CONTACT';
    maxscore (l_idx) := l_ct_entered_max_score;

    l_idx := l_cpt_entered_max_score+1;
    WHILE vlist.EXISTS(l_idx) LOOP
      l_idx := l_idx+1;
    END LOOP;
    vlist (l_idx) := 'CONTACT_POINT';
    maxscore (l_idx) := l_cpt_entered_max_score;

    l_num := 1;
    l_idx := vlist.LAST;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Call order is the following',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    WHILE l_idx IS NOT NULL LOOP
      call_order(l_num) := vlist(l_idx);
      call_max_score(l_num) := maxscore(l_idx);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_num =  '||l_num,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'entity =  '||vlist(l_idx),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'call_max_score for entity =  '||maxscore(l_idx),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_idx := vlist.PRIOR(l_idx);
      l_num := l_num+1;
    END LOOP;  
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    call_order(5):='NONE';
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In init_search determining call type of entities',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    IF p_match_type = ' OR ' THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'This is an OR Match Rule',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      threshold := round((75/685)*(l_entered_max_score+l_ps_entered_max_score+l_ct_entered_max_score+l_cpt_entered_max_score));
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'This is a search Match Rule',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Threshold defined in Match Rule, after rounding off is  '||threshold,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_idx := vlist.FIRST;
      total := 0;
      l_num := 4;
      WHILE l_idx IS NOT NULL LOOP
        total := total+maxscore(l_idx);
        IF total<threshold THEN
          call_type(l_num) := 'AND';
        ELSE
          call_type(l_num) := 'OR';
        END IF;
        l_idx := vlist.NEXT(l_idx);
        l_num := l_num-1;
      END LOOP;
    ELSE
      call_type(1) := 'OR';
      call_type(2) := 'AND';
      call_type(3) := 'AND';
      call_type(4) := 'AND';
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Call types are the following',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'call type 1 =  '||call_type(1),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'call type 2 =  '||call_type(2),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'call type 3 =  '||call_type(3),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'call type 4 =  '||call_type(4),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    x_party_max_score := l_entered_max_score;
    x_ps_max_score := l_ps_entered_max_score;
    x_contact_max_score := l_ct_entered_max_score;
    x_cpt_max_score := l_cpt_entered_max_score;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'init_search returned with the following max scores at each level',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'entered party max score =  '||l_entered_max_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'entered paty site max score =  '||l_ps_entered_max_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'entered contact max score =  '||l_ct_entered_max_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'entered contact point max score =  '||l_cpt_entered_max_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'entered total score =  '||(l_entered_max_score+l_ps_entered_max_score+l_ct_entered_max_score+l_cpt_entered_max_score),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    RETURN (l_entered_max_score+l_ps_entered_max_score+l_ct_entered_max_score+l_cpt_entered_max_score);
  END;
  FUNCTION INIT_PARTY_QUERY(p_match_str VARCHAR2, 
              p_denorm_str VARCHAR2,
              p_party_max_score NUMBER,
              p_denorm_max_score NUMBER,
              p_non_denorm_max_score NUMBER,
              p_threshold NUMBER) RETURN VARCHAR2 IS
    l_party_contains_str VARCHAR2(32000); 
    l_party_filter VARCHAR2(1) := null;
    l_prim_temp VARCHAR2(4000);
    l_denorm_str VARCHAR2(4000);
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'calling the function init_party_query',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'passed in p_match_str is  '||p_match_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'passed in p_denorm_str is  '||p_denorm_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'passed in p_denorm_max_score is  '||p_denorm_max_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'passed in p_non_denorm_max_score is  '||p_non_denorm_max_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'passed in p_threshold is  '||p_threshold,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    IF p_party_max_score<=p_threshold OR p_match_str=' AND ' THEN
      l_denorm_str := NULL;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'calculated denorm string l_denorm_str is  '||l_denorm_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    ELSE
      l_denorm_str := p_denorm_str;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'calculated denorm string l_denorm_str is  '||l_denorm_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    END IF;

    -- Setup query string for SIC_CODE_TYPE
    l_prim_temp := null;
    HZ_DQM_SEARCH_UTIL.add_transformation( -- EXACT
          g_party_stage_rec.TX47,'A21',l_prim_temp);

  IF l_denorm_str IS NOT NULL THEN
    IF (p_non_denorm_max_score+25)>=p_threshold THEN
      l_denorm_str := NULL;
      HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp, p_match_str, l_party_contains_str);
    ELSIF (p_non_denorm_max_score+p_denorm_max_score+25)>=p_threshold THEN
      HZ_DQM_SEARCH_UTIL.add_attribute_with_denorm(l_prim_temp, p_match_str, l_denorm_str, l_party_contains_str);
      l_denorm_str := NULL;
    END IF;
  ELSE
    HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp, p_match_str, l_party_contains_str);
  END IF;

    -- Setup query string for SIC_CODE
    l_prim_temp := null;
    HZ_DQM_SEARCH_UTIL.add_transformation( -- EXACT
          g_party_stage_rec.TX46,'A20',l_prim_temp);

  IF l_denorm_str IS NOT NULL THEN
    IF (p_non_denorm_max_score+25)>=p_threshold THEN
      l_denorm_str := NULL;
      HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp, p_match_str, l_party_contains_str);
    ELSIF (p_non_denorm_max_score+p_denorm_max_score+25)>=p_threshold THEN
      HZ_DQM_SEARCH_UTIL.add_attribute_with_denorm(l_prim_temp, p_match_str, l_denorm_str, l_party_contains_str);
      l_denorm_str := NULL;
    END IF;
  ELSE
    HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp, p_match_str, l_party_contains_str);
  END IF;

    -- Setup query string for PARTY_ALL_NAMES
    l_prim_temp := null;
    HZ_DQM_SEARCH_UTIL.add_transformation( -- CLEANSE SPECIAL + WRNAMES
          g_party_stage_rec.TX40,'A15',l_prim_temp);
    HZ_DQM_SEARCH_UTIL.add_transformation( -- SOUNDEX
          g_party_stage_rec.TX158,'A15',l_prim_temp);

  IF l_denorm_str IS NOT NULL THEN
    IF (p_non_denorm_max_score+60)>=p_threshold THEN
      l_denorm_str := NULL;
      HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp, p_match_str, l_party_contains_str);
    ELSIF (p_non_denorm_max_score+p_denorm_max_score+60)>=p_threshold THEN
      HZ_DQM_SEARCH_UTIL.add_attribute_with_denorm(l_prim_temp, p_match_str, l_denorm_str, l_party_contains_str);
      l_denorm_str := NULL;
    END IF;
  ELSE
    HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp, p_match_str, l_party_contains_str);
  END IF;

    -- Setup query string for JGZZ_FISCAL_CODE
    l_prim_temp := null;
    HZ_DQM_SEARCH_UTIL.add_transformation( -- EXACT SPECIAL
          g_party_stage_rec.TX45,'A19',l_prim_temp);

  IF l_denorm_str IS NOT NULL THEN
    IF (p_non_denorm_max_score+60)>=p_threshold THEN
      l_denorm_str := NULL;
      HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp, p_match_str, l_party_contains_str);
    ELSIF (p_non_denorm_max_score+p_denorm_max_score+60)>=p_threshold THEN
      HZ_DQM_SEARCH_UTIL.add_attribute_with_denorm(l_prim_temp, p_match_str, l_denorm_str, l_party_contains_str);
      l_denorm_str := NULL;
    END IF;
  ELSE
    HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp, p_match_str, l_party_contains_str);
  END IF;

    -- Setup query string for PARTY_NUMBER
    l_prim_temp := null;
    HZ_DQM_SEARCH_UTIL.add_transformation( -- EXACT SPECIAL
          g_party_stage_rec.TX34,'A12',l_prim_temp);

  IF l_denorm_str IS NOT NULL THEN
    IF (p_non_denorm_max_score+100)>=p_threshold THEN
      l_denorm_str := NULL;
      HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp, p_match_str, l_party_contains_str);
    ELSIF (p_non_denorm_max_score+p_denorm_max_score+100)>=p_threshold THEN
      HZ_DQM_SEARCH_UTIL.add_attribute_with_denorm(l_prim_temp, p_match_str, l_denorm_str, l_party_contains_str);
      l_denorm_str := NULL;
    END IF;
  ELSE
    HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp, p_match_str, l_party_contains_str);
  END IF;

    -- Setup query string for TAX_REFERENCE
    l_prim_temp := null;
    HZ_DQM_SEARCH_UTIL.add_transformation( -- EXACT SPECIAL
          g_party_stage_rec.TX44,'A18',l_prim_temp);

  IF l_denorm_str IS NOT NULL THEN
    IF (p_non_denorm_max_score+100)>=p_threshold THEN
      l_denorm_str := NULL;
      HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp, p_match_str, l_party_contains_str);
    ELSIF (p_non_denorm_max_score+p_denorm_max_score+100)>=p_threshold THEN
      HZ_DQM_SEARCH_UTIL.add_attribute_with_denorm(l_prim_temp, p_match_str, l_denorm_str, l_party_contains_str);
      l_denorm_str := NULL;
    END IF;
  ELSE
    HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp, p_match_str, l_party_contains_str);
  END IF;
    IF lengthb(l_party_contains_str) > 4000 THEN
      FND_MESSAGE.SET_NAME('AR', 'HZ_SEARCH_CRIT_LARGE_ERROR');
      FND_MESSAGE.SET_TOKEN('ENTITY','PARTY');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
    END IF;
    IF (p_match_str = ' AND ' OR p_party_max_score<p_threshold) AND l_party_contains_str IS NOT NULL AND p_denorm_str IS NOT NULL THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'party contains string returned by init_search is an AND between these strings ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_contains_str =  '||l_party_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'p_denorm_str =  '||p_denorm_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      RETURN '('||l_party_contains_str||') AND ('||p_denorm_str||')';
    ELSE
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'party contains string returned by init_search is ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_party_contains_str',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      RETURN l_party_contains_str;
    END IF;
  END;
  FUNCTION INIT_PARTY_SITES_QUERY(p_match_str VARCHAR2, x_denorm_str OUT VARCHAR2) RETURN VARCHAR2 IS
    l_contains_str VARCHAR2(32000); 
    l_contains_str_temp VARCHAR2(32000); 
    l_den_contains_str VARCHAR2(32000); 
    l_den_contains_str_temp VARCHAR2(32000); 
    l_filter_str VARCHAR2(4000) := null;
    l_prim_temp VARCHAR2(4000) := null;
    l_prim_temp_den VARCHAR2(4000) := null;
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'INIT_PARTY_SITES_QUERY  ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    x_denorm_str := NULL;

    -- Dynamic setup of party site contains str
    --
    -- For each primary transformation add to intermedia query if it 
    -- is not null
    FOR I IN 1..g_party_site_stage_list.COUNT LOOP
      l_contains_str_temp := null;
      l_den_contains_str_temp := null;
      l_filter_str := null;

      -- Setup query string for ADDRESS
      l_prim_temp := null;
      l_prim_temp_den := null;
      HZ_DQM_SEARCH_UTIL.add_transformation( -- CLEANSE SPECIAL + WRADDRESS
            g_party_site_stage_list(I).TX4,'A27',l_prim_temp);
      HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp, ' AND ', l_contains_str_temp);

      -- Setup query string for CITY
      l_prim_temp := null;
      l_prim_temp_den := null;
      HZ_DQM_SEARCH_UTIL.add_transformation( -- CLEANSE
            g_party_site_stage_list(I).TX10,'A29',l_prim_temp);
      HZ_DQM_SEARCH_UTIL.add_transformation( -- CLEANSE
            g_party_site_stage_list(I).TX10,'D_PS',l_prim_temp_den);
      HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp_den, ' AND ', l_den_contains_str_temp);
      HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp, ' AND ', l_contains_str_temp);

      -- Setup query string for POSTAL_CODE
      l_prim_temp := null;
      l_prim_temp_den := null;
      HZ_DQM_SEARCH_UTIL.add_transformation( -- EXACT SPECIAL NOSPC
            g_party_site_stage_list(I).TX11,'A30',l_prim_temp);
      HZ_DQM_SEARCH_UTIL.add_transformation( -- EXACT SPECIAL NOSPC
            g_party_site_stage_list(I).TX11,'D_PS',l_prim_temp_den);
      HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp_den, ' AND ', l_den_contains_str_temp);
      HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp, ' AND ', l_contains_str_temp);

      -- Setup query string for STATE
      l_prim_temp := null;
      l_prim_temp_den := null;
      HZ_DQM_SEARCH_UTIL.add_transformation( -- CLEANSE + WRSTATE
            g_party_site_stage_list(I).TX15,'A32',l_prim_temp);
      HZ_DQM_SEARCH_UTIL.add_transformation( -- CLEANSE + WRSTATE
            g_party_site_stage_list(I).TX15,'D_PS',l_prim_temp_den);
      HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp_den, ' AND ', l_den_contains_str_temp);
      HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp, ' AND ', l_contains_str_temp);

      -- Setup query string for COUNTRY
      l_prim_temp := null;
      l_prim_temp_den := null;
      HZ_DQM_SEARCH_UTIL.add_transformation( -- EXACT
            g_party_site_stage_list(I).TX22,'A36',l_prim_temp);
      HZ_DQM_SEARCH_UTIL.add_transformation( -- EXACT
            g_party_site_stage_list(I).TX22,'D_PS',l_prim_temp_den);
      HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp_den, ' AND ', l_den_contains_str_temp);
      HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp, ' AND ', l_contains_str_temp);

      HZ_DQM_SEARCH_UTIL.add_search_record(l_contains_str_temp,  	 l_filter_str, l_contains_str);
      HZ_DQM_SEARCH_UTIL.add_search_record(l_den_contains_str_temp,  	 null, l_den_contains_str);
    END LOOP;
    -- Add the search criteria to query string
    IF lengthb(l_contains_str) > 4000 THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_SEARCH_CRIT_LARGE_ERROR');
        FND_MESSAGE.SET_TOKEN('ENTITY','PARTY_SITES');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
    END IF;
    x_denorm_str := l_den_contains_str;
    RETURN l_contains_str;
  END;

  FUNCTION INIT_CONTACTS_QUERY(p_match_str VARCHAR2, x_denorm_str OUT VARCHAR2) RETURN VARCHAR2 IS
    l_contains_str VARCHAR2(32000); 
    l_contains_str_temp VARCHAR2(32000); 
    l_den_contains_str VARCHAR2(32000); 
    l_den_contains_str_temp VARCHAR2(32000); 
    l_filter_str VARCHAR2(4000) := null;
    l_prim_temp VARCHAR2(4000) := null;
    l_prim_temp_den VARCHAR2(4000) := null;
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'INIT_CONTACTS_QUERY  ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    x_denorm_str := NULL;

    -- Dynamic setup of party site contains str
    --
    -- For each primary transformation add to intermedia query if it 
    -- is not null
    FOR I IN 1..g_contact_stage_list.COUNT LOOP
      l_contains_str_temp := null;
      l_den_contains_str_temp := null;
      l_filter_str := null;

      -- Setup query string for CONTACT_NAME
      l_prim_temp := null;
      l_prim_temp_den := null;
      HZ_DQM_SEARCH_UTIL.add_transformation( -- CLEANSE SPECIAL + WRPERSON
            g_contact_stage_list(I).TX6,'A39',l_prim_temp);
      HZ_DQM_SEARCH_UTIL.add_transformation( -- SOUNDEX
            g_contact_stage_list(I).TX156,'A39',l_prim_temp);
      HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp, ' AND ', l_contains_str_temp);

      HZ_DQM_SEARCH_UTIL.add_search_record(l_contains_str_temp,  	 l_filter_str, l_contains_str);
      HZ_DQM_SEARCH_UTIL.add_search_record(l_den_contains_str_temp,  	 null, l_den_contains_str);
    END LOOP;
    -- Add the search criteria to query string
    IF lengthb(l_contains_str) > 4000 THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_SEARCH_CRIT_LARGE_ERROR');
        FND_MESSAGE.SET_TOKEN('ENTITY','CONTACTS');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
    END IF;
    x_denorm_str := l_den_contains_str;
    RETURN l_contains_str;
  END;

  FUNCTION INIT_CONTACT_POINTS_QUERY(p_match_str VARCHAR2, x_denorm_str OUT VARCHAR2) RETURN VARCHAR2 IS
    l_contains_str VARCHAR2(32000); 
    l_contains_str_temp VARCHAR2(32000); 
    l_den_contains_str VARCHAR2(32000); 
    l_den_contains_str_temp VARCHAR2(32000); 
    l_filter_str VARCHAR2(4000) := null;
    l_prim_temp VARCHAR2(4000) := null;
    l_prim_temp_den VARCHAR2(4000) := null;
    TYPE CONTACT_PT_REC_TYPE IS RECORD (
    contact_pt_type		VARCHAR2(100)) ;
    TYPE contact_pt_list IS TABLE of CONTACT_PT_REC_TYPE INDEX BY BINARY_INTEGER;
    l_cnt_pt_type contact_pt_list;
    N NUMBER:=1;
    x_modify VARCHAR2(1);
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'INIT_CONTACT_POINTS_QUERY  ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    x_denorm_str := NULL;

    -- Dynamic setup of party site contains str
    --
    -- For each primary transformation add to intermedia query if it 
    -- is not null
    FOR I IN 1..g_contact_pt_stage_list.COUNT LOOP
      l_contains_str_temp := null;
      l_den_contains_str_temp := null;
      l_filter_str := null;
      l_filter_str := '('||g_contact_pt_stage_list(I).CONTACT_POINT_TYPE||') ';
      if(l_cnt_pt_type.count>0) then
      x_modify := 'Y';
      FOR J IN 1..l_cnt_pt_type.COUNT LOOP
      IF (l_cnt_pt_type(J).contact_pt_type=g_contact_pt_stage_list(I).CONTACT_POINT_TYPE) THEN
      x_modify := 'N';
      END IF;
      END LOOP;
      if x_modify = 'Y' then
      l_cnt_pt_type(N).contact_pt_type := g_contact_pt_stage_list(I).CONTACT_POINT_TYPE;
      N := N+1;
      end if;
      else
      l_cnt_pt_type(N).contact_pt_type := g_contact_pt_stage_list(I).CONTACT_POINT_TYPE;
      N := N+1;
      end if;

      -- Setup query string for FLEX_FORMAT_PHONE_NUMBER
      l_prim_temp := null;
      l_prim_temp_den := null;
      HZ_DQM_SEARCH_UTIL.add_transformation( -- EXACT SPECIAL CTX
            g_contact_pt_stage_list(I).TX1,'A44',l_prim_temp);
      HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp, ' AND ', l_contains_str_temp);

      -- Setup query string for EMAIL_ADDRESS
      l_prim_temp := null;
      l_prim_temp_den := null;
      HZ_DQM_SEARCH_UTIL.add_transformation( -- CLEANSE (EMAIL) + WRDOMAIN
            g_contact_pt_stage_list(I).TX6,'A48',l_prim_temp);
      HZ_DQM_SEARCH_UTIL.add_attribute(l_prim_temp, ' AND ', l_contains_str_temp);

      HZ_DQM_SEARCH_UTIL.add_search_record(l_contains_str_temp,  	 l_filter_str, l_contains_str);
      HZ_DQM_SEARCH_UTIL.add_search_record(l_den_contains_str_temp,  	 null, l_den_contains_str);
IF N>1 THEN 
 distinct_search_cpt_types := N-1;
ELSE
 distinct_search_cpt_types := N;
END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'distinct_search_cpt_types is -  '||distinct_search_cpt_types,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    END LOOP;
    -- Add the search criteria to query string
    IF lengthb(l_contains_str) > 4000 THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_SEARCH_CRIT_LARGE_ERROR');
        FND_MESSAGE.SET_TOKEN('ENTITY','CONTACT_POINTS');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
    END IF;
    x_denorm_str := l_den_contains_str;
    RETURN l_contains_str;
  END;

  PROCEDURE open_party_cursor_direct (
            p_dup_party_id NUMBER, 
            p_restrict_sql VARCHAR2, 
            p_match_str VARCHAR2,
            p_search_merged VARCHAR2,
            p_party_contains_str VARCHAR2,
            x_cursor OUT HZ_PARTY_STAGE.StageCurTyp) IS
    l_sqlstr VARCHAR2(4000);
    l_search_merged VARCHAR2(1);
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'calling procedure open party cursor direct',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    IF (p_search_merged is null) then 
       l_search_merged := 'N';  
    ELSE 
       l_search_merged := p_search_merged; 
    END IF; 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Search Merged Flag -  '||l_search_merged,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    IF p_restrict_sql IS NULL AND NOT g_other_party_level_attribs AND NOT (p_party_contains_str IS NOT NULL AND instrb(p_party_contains_str,'D_PS')>0 AND g_party_site_stage_list.COUNT=1) THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Restrict SQL is NULL and other conditions met to OPEN x_cursor',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
     OPEN x_cursor FOR 
      SELECT PARTY_ID , TX34, TX40, TX158, TX39, TX44, TX45, TX46, TX47
      FROM hz_staged_parties 
      WHERE TX8 LIKE g_party_stage_rec.TX8||' %'
      AND ((g_party_stage_rec.TX36 IS NULL OR g_party_stage_rec.TX36||' ' =  TX36))
      AND( (l_search_merged ='Y' ) 
           OR (l_search_merged = 'I' AND nvl(status, 'A') in ('A', 'I'))  
           OR (l_search_merged = 'N' AND nvl(status, 'A') in ('A')))  
      AND (p_dup_party_id IS NULL OR party_id <> p_dup_party_id);
    ELSE
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Restrict SQL is NOT NULL OR other conditions not met, Else Part',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_sqlstr := 'SELECT PARTY_ID , TX34, TX40, TX158, TX39, TX44, TX45, TX46, TX47 FROM hz_staged_parties stage ';
      l_sqlstr := l_sqlstr || ' WHERE TX8 like :TX8||'' %'' ';
      l_sqlstr := l_sqlstr || ' AND (:TX36 IS NULL OR :TX36||'' '' =  TX36) ';
      IF l_search_merged = 'N' THEN
        l_sqlstr := l_sqlstr || ' AND nvl(status,''A'')=''A'' ';
      ELSIF l_search_merged = 'I' THEN
        l_sqlstr := l_sqlstr || ' AND nvl(status,''A'') in (''A'',''I'') ';
      END IF;
      l_sqlstr := l_sqlstr || ' AND (:p_dup IS NULL OR party_id <> :p_dup ) ';
      IF g_other_party_level_attribs THEN
      l_sqlstr := l_sqlstr || ' AND ((:attr IS NULL OR ';
      l_sqlstr := l_sqlstr || '     (TX34 like :TX34||'' %'' ';
     l_sqlstr := l_sqlstr || ' )) ';
      l_sqlstr := l_sqlstr || '     '||p_match_str||' (:attr IS NULL OR ';
      l_sqlstr := l_sqlstr || '     (TX40 like :TX40||'' %'' ';
      l_sqlstr := l_sqlstr || '      OR TX158 like :TX158||'' %'' ';
     l_sqlstr := l_sqlstr || ' )) ';
      l_sqlstr := l_sqlstr || '     '||p_match_str||' (:attr IS NULL OR ';
      l_sqlstr := l_sqlstr || '     (TX44 like :TX44||'' %'' ';
     l_sqlstr := l_sqlstr || ' )) ';
      l_sqlstr := l_sqlstr || '     '||p_match_str||' (:attr IS NULL OR ';
      l_sqlstr := l_sqlstr || '     (TX45 like :TX45||'' %'' ';
     l_sqlstr := l_sqlstr || ' )) ';
      l_sqlstr := l_sqlstr || '     '||p_match_str||' (:attr IS NULL OR ';
      l_sqlstr := l_sqlstr || '     (TX46 like :TX46||'' %'' ';
     l_sqlstr := l_sqlstr || ' )) ';
      l_sqlstr := l_sqlstr || '     '||p_match_str||' (:attr IS NULL OR ';
      l_sqlstr := l_sqlstr || '     (TX47 like :TX47||'' %'' ';
     l_sqlstr := l_sqlstr || ' )) ';
     l_sqlstr := l_sqlstr || ' ) ';
      l_sqlstr := l_sqlstr || ' AND (:attr IS NULL OR ';
      l_sqlstr := l_sqlstr || '     (TX36 like :TX36||'' %'' ';
     l_sqlstr := l_sqlstr || ' )) ';
     END IF;
     IF p_party_contains_str IS NOT NULL AND instrb(p_party_contains_str,'D_PS')>0 AND g_party_site_stage_list.COUNT=1 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'p_party_contains_str string is NOT NULL and other conditions met',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_sqlstr := l_sqlstr || ' AND (:attr IS NULL OR ';
      l_sqlstr := l_sqlstr || '     (D_PS like ''% ''||:TX10||'' %'' ';
     l_sqlstr := l_sqlstr || ' )) ';
      l_sqlstr := l_sqlstr || ' AND (:attr IS NULL OR ';
      l_sqlstr := l_sqlstr || '     (D_PS like ''% ''||:TX11||'' %'' ';
     l_sqlstr := l_sqlstr || ' )) ';
      l_sqlstr := l_sqlstr || ' AND (:attr IS NULL OR ';
      l_sqlstr := l_sqlstr || '     (D_PS like ''% ''||:TX15||'' %'' ';
     l_sqlstr := l_sqlstr || ' )) ';
      l_sqlstr := l_sqlstr || ' AND (:attr IS NULL OR ';
      l_sqlstr := l_sqlstr || '     (D_PS like ''% ''||:TX22||'' %'' ';
     l_sqlstr := l_sqlstr || ' )) ';
     END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_sqlstr before appending restrict_sql',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_sqlstr is -  '||l_sqlstr,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
     IF p_restrict_sql IS NOT NULL THEN
       l_sqlstr := l_sqlstr || ' AND '||p_restrict_sql||' ';
     END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_sqlstr after appending restrict_sql',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_sqlstr is -  '||l_sqlstr,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
     IF g_other_party_level_attribs AND p_party_contains_str IS NOT NULL AND instrb(p_party_contains_str,'D_PS')>0 AND g_party_site_stage_list.COUNT=1 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'IF g_other_party_level_attribs AND p_party_contains_str IS NOT NULL AND ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
       OPEN x_cursor FOR l_sqlstr USING g_party_stage_rec.TX8,g_party_stage_rec.TX36,g_party_stage_rec.TX36,p_dup_party_id,p_dup_party_id
     ,g_party_stage_rec.TX34
     ,g_party_stage_rec.TX34
     ,g_party_stage_rec.TX40
     ,g_party_stage_rec.TX40
     ,g_party_stage_rec.TX158
     ,g_party_stage_rec.TX44
     ,g_party_stage_rec.TX44
     ,g_party_stage_rec.TX45
     ,g_party_stage_rec.TX45
     ,g_party_stage_rec.TX46
     ,g_party_stage_rec.TX46
     ,g_party_stage_rec.TX47
     ,g_party_stage_rec.TX47
     ,g_party_stage_rec.TX36
     ,g_party_stage_rec.TX36
     ,g_party_site_stage_list(1).TX10
     ,g_party_site_stage_list(1).TX10
     ,g_party_site_stage_list(1).TX11
     ,g_party_site_stage_list(1).TX11
     ,g_party_site_stage_list(1).TX15
     ,g_party_site_stage_list(1).TX15
     ,g_party_site_stage_list(1).TX22
     ,g_party_site_stage_list(1).TX22
     ;
     ELSIF g_other_party_level_attribs THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'ELSIF g_other_party_level_attribs THEN',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
       OPEN x_cursor FOR l_sqlstr USING g_party_stage_rec.TX8,g_party_stage_rec.TX36,g_party_stage_rec.TX36,p_dup_party_id,p_dup_party_id
     ,g_party_stage_rec.TX34
     ,g_party_stage_rec.TX34
     ,g_party_stage_rec.TX40
     ,g_party_stage_rec.TX40
     ,g_party_stage_rec.TX158
     ,g_party_stage_rec.TX44
     ,g_party_stage_rec.TX44
     ,g_party_stage_rec.TX45
     ,g_party_stage_rec.TX45
     ,g_party_stage_rec.TX46
     ,g_party_stage_rec.TX46
     ,g_party_stage_rec.TX47
     ,g_party_stage_rec.TX47
     ,g_party_stage_rec.TX36
     ,g_party_stage_rec.TX36
     ;
     ELSIF p_party_contains_str IS NOT NULL AND instrb(p_party_contains_str,'D_PS')>0 AND g_party_site_stage_list.COUNT=1 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'ELSIF p_party_contains_str IS NOT NULL AND ...',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
       OPEN x_cursor FOR l_sqlstr USING g_party_stage_rec.TX8,g_party_stage_rec.TX36,g_party_stage_rec.TX36,p_dup_party_id,p_dup_party_id
     ,g_party_site_stage_list(1).TX10
     ,g_party_site_stage_list(1).TX10
     ,g_party_site_stage_list(1).TX11
     ,g_party_site_stage_list(1).TX11
     ,g_party_site_stage_list(1).TX15
     ,g_party_site_stage_list(1).TX15
     ,g_party_site_stage_list(1).TX22
     ,g_party_site_stage_list(1).TX22
     ;
     ELSE
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'ELSE code fork',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
       OPEN x_cursor FOR l_sqlstr USING g_party_stage_rec.TX8,g_party_stage_rec.TX36,g_party_stage_rec.TX36,p_dup_party_id,p_dup_party_id;
     END IF;
    END IF;
  END;
  PROCEDURE open_party_cursor(
            p_dup_party_id NUMBER, 
            p_restrict_sql VARCHAR2, 
            p_contains_str  VARCHAR2, 
            p_search_ctx_id NUMBER,
            p_match_str VARCHAR2,
            p_search_merged VARCHAR2,
            x_cursor OUT HZ_PARTY_STAGE.StageCurTyp) IS
  l_sqlstr VARCHAR2(4000);
  l_hint VARCHAR2(100); 
  l_check NUMBER; 
  l_search_merged VARCHAR2(1); 
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'calling procedure open party cursor',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    IF (p_search_merged is null) then 
       l_search_merged := 'N';  
    ELSE 
       l_search_merged := p_search_merged; 
    END IF; 
    IF p_contains_str IS NULL THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'part contains string is null',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      OPEN x_cursor FOR 
        SELECT PARTY_ID , TX34, TX40, TX158, TX39, TX44, TX45, TX46, TX47
        FROM HZ_STAGED_PARTIES stage
        WHERE PARTY_ID = p_dup_party_id;
    ELSIF p_restrict_sql IS NULL OR p_search_ctx_id IS NOT NULL THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Either restrict sql is null or search context id is not null',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      IF p_search_ctx_id IS NULL THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Search context id is null',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        OPEN x_cursor FOR 
          SELECT /*+ INDEX(stage HZ_STAGE_PARTIES_T1) */ PARTY_ID , TX34, TX40, TX158, TX39, TX44, TX45, TX46, TX47
          FROM HZ_STAGED_PARTIES stage
          WHERE contains( concat_col, p_contains_str)>0
          AND ((g_party_stage_rec.TX36 IS NULL OR g_party_stage_rec.TX36||' ' =  stage.TX36))
          AND( (l_search_merged ='Y' ) 
          OR (l_search_merged = 'I' AND nvl(stage.status, 'A') in ('A', 'I'))  
          OR (l_search_merged = 'N' AND nvl(stage.status, 'A') in ('A'))       ) 
          AND (p_dup_party_id IS NULL OR stage.party_id <> p_dup_party_id);
      ELSE
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Search context id is not null',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        OPEN x_cursor FOR 
            SELECT /*+ ORDERED INDEX(stage HZ_STAGED_PARTIES_U1) */ stage.PARTY_ID , TX34, TX40, TX158, TX39, TX44, TX45, TX46, TX47
            FROM HZ_DQM_PARTIES_GT d, HZ_STAGED_PARTIES stage
            WHERE contains( concat_col, p_contains_str)>0
            AND d.SEARCH_CONTEXT_ID=p_search_ctx_id
            AND d.party_id = stage.party_id
            AND ((g_party_stage_rec.TX36 IS NULL OR g_party_stage_rec.TX36||' ' =  stage.TX36))
            AND (p_dup_party_id IS NULL OR stage.party_id <> p_dup_party_id)
            AND( (l_search_merged ='Y' ) 
            OR (l_search_merged = 'I' AND nvl(stage.status, 'A') in ('A', 'I'))  
            OR (l_search_merged = 'N' AND nvl(stage.status, 'A') in ('A'))       ); 
      END IF;
    ELSE
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Restrict sql is not null',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
       l_check := instrb(p_restrict_sql, 'SELECTIVE'); 
       IF (l_check > 0 ) THEN 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Restrict sql has a Selective Hint',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
           l_hint := '/*+ INDEX(stage HZ_STAGED_PARTIES_U1) */'; 
       ELSE 
           l_hint := '/*+ INDEX(stage HZ_STAGE_PARTIES_T1) */'; 
       END IF; 
     IF p_search_ctx_id IS NULL THEN
       l_sqlstr := 'SELECT   ' || l_hint || ' PARTY_ID , TX34, TX40, TX158, TX39, TX44, TX45, TX46, TX47'||
                   ' FROM HZ_STAGED_PARTIES stage'||
                   ' WHERE contains( concat_col, :cont)>0'||
                   ' AND ((:TX36 IS NULL OR :TX36||'' '' =  stage.TX36))'||
                   ' AND ('||p_restrict_sql||')' ||
                   ' AND (:p_dup IS NULL OR stage.party_id <> :p_dup) '; 
          IF l_search_merged = 'Y' THEN  
                  l_sqlstr := l_sqlstr ;  
          ELSIF l_search_merged = 'I' THEN  
                  l_sqlstr := l_sqlstr ||' AND nvl(stage.status,''A'') in (''A'', ''I'')';  
          ELSE  
                  l_sqlstr := l_sqlstr ||' AND nvl(stage.status,''A'') in (''A'')';  
          END IF;  
 	   output_long_strings('----------------------------------------------------------');
      output_long_strings('Party Contains String = '||p_contains_str);
		output_long_strings('Restrict Sql = '||p_restrict_sql);
       OPEN x_cursor FOR l_sqlstr USING p_contains_str
                              ,g_party_stage_rec.TX36,g_party_stage_rec.TX36
                    ,p_dup_party_id, p_dup_party_id;
     END IF;
   END IF;
  exception
    when others then
      if (instrb(SQLERRM,'DRG-51030')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_WILDCARD_ERR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      elsif (instrb(SQLERRM,'DRG-50943')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_SEARCH_ERROR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      elsif (instrb(SQLERRM,'ORA-20000')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_SEARCH_ERROR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      else 
        FND_MESSAGE.SET_NAME('AR', 'HZ_API_OTHERS_EXCEP');
    	 FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    	 FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
      end if;
  END;

  PROCEDURE open_party_site_cursor(
            p_dup_party_id NUMBER, 
            p_party_id NUMBER, 
            p_restrict_sql VARCHAR2, 
            p_contains_str  VARCHAR2, 
            p_search_ctx_id  NUMBER, 
            p_search_merged  VARCHAR2, 
            p_search_rel_sites  VARCHAR2, 
            p_person_api  VARCHAR2, 
            x_cursor OUT HZ_PARTY_STAGE.StageCurTyp) IS
  l_sqlstr VARCHAR2(4000);
  l_hint VARCHAR2(100); 
  l_check NUMBER; 
  l_check_dt NUMBER; 
  l_search_merged VARCHAR2(1); 
  l_status_sql VARCHAR2(100); 
  p_restrict_sql1 VARCHAR2(4000); 
 
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'calling the procedure open_party_site_cursor',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
     IF (p_search_merged is null) then 
        l_search_merged := 'N';  
     ELSE 
        l_search_merged := p_search_merged; 
     END IF; 
     IF p_party_id IS NOT NULL THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Single Party Scenario',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
       IF p_search_rel_sites = 'N' THEN
         OPEN x_cursor FOR 
          SELECT /*+ INDEX(stage HZ_STAGED_PARTY_SITES_N1) */ PARTY_SITE_ID, PARTY_ID, ORG_CONTACT_ID, TX3, TX4, TX9, TX10, TX11, TX14, TX15, TX22
          FROM HZ_STAGED_PARTY_SITES stage
          WHERE contains( concat_col, p_contains_str)>0
          AND( (l_search_merged ='Y' )  
             OR (l_search_merged = 'I' AND nvl(stage.status_flag, 'A') in ('A', 'I'))  
             OR (l_search_merged = 'N' AND nvl(stage.status_flag, 'A') = 'A')       )  
          AND stage.party_id = p_party_id; 
       ELSE
         OPEN x_cursor FOR 
          SELECT /*+ INDEX(stage HZ_STAGED_PARTY_SITES_N1) */ PARTY_SITE_ID, PARTY_ID, ORG_CONTACT_ID, TX3, TX4, TX9, TX10, TX11, TX14, TX15, TX22
          FROM HZ_STAGED_PARTY_SITES stage
          WHERE contains( concat_col, p_contains_str)>0
          AND( (l_search_merged ='Y' )  
            OR (l_search_merged = 'I' AND nvl(stage.status_flag, 'A') in ('A', 'I'))  
            OR (l_search_merged = 'N' AND nvl(stage.status_flag, 'A') = 'A')       )  
          AND stage.party_id = p_party_id 
          UNION
          SELECT /*+ INDEX(stage HZ_STAGED_PARTY_SITES_N2) */ stage.PARTY_SITE_ID, stage.PARTY_ID, stage.ORG_CONTACT_ID, TX3, TX4, TX9, TX10, TX11, TX14, TX15, TX22
          FROM HZ_STAGED_PARTY_SITES stage, hz_relationships r, hz_org_contacts oc
          WHERE contains( concat_col, p_contains_str)>0
          AND( (l_search_merged ='Y' )  
            OR (l_search_merged = 'I' AND nvl(stage.status_flag, 'A') in ('A', 'I'))  
            OR (l_search_merged = 'N' AND nvl(stage.status_flag, 'A') = 'A')       )  
          AND r.object_id = p_party_id 
          AND r.subject_id = stage.party_id 
          AND r.SUBJECT_TABLE_NAME = 'HZ_PARTIES' 
          AND r.OBJECT_TABLE_NAME = 'HZ_PARTIES' 
          AND r.relationship_id = oc.party_relationship_id
          AND oc.org_contact_id = stage.org_contact_id; 
      END IF;
    ELSIF p_restrict_sql IS NULL OR p_search_ctx_id IS NOT NULL THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Either restrict sql is null or search context id is not null',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      IF p_search_ctx_id IS NULL THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Search context id is null',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        OPEN x_cursor FOR 
          SELECT PARTY_SITE_ID, PARTY_ID, ORG_CONTACT_ID, TX3, TX4, TX9, TX10, TX11, TX14, TX15, TX22
          FROM HZ_STAGED_PARTY_SITES stage
        WHERE contains( concat_col, p_contains_str)>0
        AND EXISTS (
          SELECT 1 FROM HZ_STAGED_PARTIES p
          WHERE p.PARTY_ID = stage.PARTY_ID
          AND( (l_search_merged ='Y' )  
          OR (l_search_merged = 'I' AND nvl(p.status, 'A') in ('A', 'I'))  
          OR (l_search_merged = 'N' AND nvl(p.status, 'A') in ('A'))       )  
          AND ((g_party_stage_rec.TX36 IS NULL OR g_party_stage_rec.TX36||' ' =  p.TX36)))
          AND( (l_search_merged ='Y' )  
           OR (l_search_merged = 'I' AND nvl(stage.status_flag, 'A') in ('A', 'I'))  
           OR (l_search_merged = 'N' AND nvl(stage.status_flag, 'A') = 'A')       )  
          AND (p_dup_party_id IS NULL OR stage.party_id <> p_dup_party_id);
      ELSE
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Search context id is not null',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        IF p_person_api = 'Y' THEN
          OPEN x_cursor FOR 
            SELECT  PARTY_SITE_ID, stage.PARTY_ID, ORG_CONTACT_ID, TX3, TX4, TX9, TX10, TX11, TX14, TX15, TX22
            FROM HZ_DQM_PARTIES_GT d, HZ_STAGED_PARTY_SITES stage
            WHERE contains( concat_col, p_contains_str)>0
          AND( (l_search_merged ='Y' )  
          OR (l_search_merged = 'I' AND nvl(stage.status_flag, 'A') in ('A', 'I'))  
          OR (l_search_merged = 'N' AND nvl(stage.status_flag, 'A') = 'A')       )  
            AND d.search_context_id = p_search_ctx_id
            AND d.party_id = stage.party_id
            AND (p_dup_party_id IS NULL OR stage.party_id <> p_dup_party_id)
            UNION 
            SELECT /*+ INDEX(stage HZ_STAGED_PARTY_SITES_N2) */ stage.PARTY_SITE_ID, r.subject_id, stage.ORG_CONTACT_ID, TX3, TX4, TX9, TX10, TX11, TX14, TX15, TX22
            FROM HZ_DQM_PARTIES_GT d, hz_relationships r,hz_org_contacts oc, HZ_STAGED_PARTY_SITES stage
            WHERE contains( concat_col, p_contains_str)>0
          AND( (l_search_merged ='Y' )  
          OR (l_search_merged = 'I' AND nvl(stage.status_flag, 'A') in ('A', 'I'))  
          OR (l_search_merged = 'N' AND nvl(stage.status_flag, 'A') = 'A')       )  
            AND d.search_context_id = p_search_ctx_id
            AND d.party_id = r.subject_id
            AND r.relationship_id = oc.party_relationship_id
            AND oc.org_contact_id = stage.org_contact_id
            AND (p_dup_party_id IS NULL OR r.subject_id <> p_dup_party_id);
        ELSE
          OPEN x_cursor FOR 
            SELECT  PARTY_SITE_ID, stage.PARTY_ID, ORG_CONTACT_ID, TX3, TX4, TX9, TX10, TX11, TX14, TX15, TX22
            FROM HZ_DQM_PARTIES_GT d, HZ_STAGED_PARTY_SITES stage
            WHERE contains( concat_col, p_contains_str)>0
            AND( (l_search_merged ='Y' )  
             OR (l_search_merged = 'I' AND nvl(stage.status_flag, 'A') in ('A', 'I'))  
             OR (l_search_merged = 'N' AND nvl(stage.status_flag, 'A') = 'A')       )  
            AND d.search_context_id = p_search_ctx_id
            AND d.party_id = stage.party_id
            AND (p_dup_party_id IS NULL OR stage.party_id <> p_dup_party_id);
        END IF;
      END IF;
    ELSE
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Restrict sql is not null',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
       l_check := instrb(p_restrict_sql, 'SELECTIVE'); 
       l_check_dt := instrb(p_restrict_sql, 'SELECTIVE_PS'); 
       IF (l_check_dt > 0 ) THEN 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Restrict sql has the selective_ps  hint',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
           l_hint := '/*+ INDEX(stage HZ_STAGED_PARTY_SITES_U1) */'; 
       ELSIF (l_check > 0 ) THEN 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Restrict sql has the selective hint',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
           l_hint := '/*+ INDEX(stage HZ_STAGED_PARTY_SITES_N1) */'; 
       END IF; 
       IF l_search_merged = 'Y' THEN 
               l_status_sql := ' ' ;  
       ELSIF l_search_merged = 'I' THEN  
               l_status_sql := ' AND nvl(p.status,''A'') in (''A'', ''I'')'; 
       ELSE 
               l_status_sql := ' AND nvl(p.status,''A'') in (''A'')'; 
       END IF; 
 		/*Performance fix for Bug:4589953*/ 
 		IF(p_person_api='Y') THEN 
       IF (l_check > 0 ) THEN 
       IF instrb(p_restrict_sql, 'STAGE.') > 0 THEN 
       	p_restrict_sql1 := replace( p_restrict_sql, 'STAGE.', 'stage1.');
       ELSIF instrb(p_restrict_sql, 'stage.') > 0 THEN 
       	p_restrict_sql1 := replace( p_restrict_sql, 'stage.', 'stage1.');
       ELSE
		p_restrict_sql1 := 'stage1.'||p_restrict_sql;
       END IF; 
       l_sqlstr := 'SELECT  /*+ INDEX(stage HZ_STAGED_PARTY_SITES_N1) */ PARTY_SITE_ID, PARTY_ID, ORG_CONTACT_ID , TX3, TX4, TX9, TX10, TX11, TX14, TX15, TX22'||
                   ' FROM HZ_STAGED_PARTY_SITES stage'||
                   ' WHERE contains( concat_col, :cont)>0'||
                   '  AND( ('''||l_search_merged||''' =''Y'' )  '|| 
                   '   OR ('''||l_search_merged||''' = ''I'' AND nvl(stage.status_flag, ''A'') in (''A'', ''I''))  '|| 
                   '   OR ('''||l_search_merged||''' = ''N'' AND nvl(stage.status_flag, ''A'') = ''A'')       )  '|| 
         ' AND (ORG_CONTACT_ID IS NULL ' ||
       	' AND ('||p_restrict_sql||'))' ||
       	' AND (:p_dup IS NULL OR stage.party_id <> :p_dup) ' ||
         ' UNION ' ||
       			 'SELECT /*+ INDEX(stage HZ_STAGED_PARTY_SITES_N2) */ PARTY_SITE_ID, PARTY_ID, ORG_CONTACT_ID , TX3, TX4, TX9, TX10, TX11, TX14, TX15, TX22'||
                   ' FROM HZ_STAGED_PARTY_SITES stage'||
                   ' WHERE contains( concat_col, :cont)>0'||
                   '  AND( ('''||l_search_merged||''' =''Y'' )  '|| 
                   '   OR ('''||l_search_merged||''' = ''I'' AND nvl(stage.status_flag, ''A'') in (''A'', ''I''))  '|| 
                   '   OR ('''||l_search_merged||''' = ''N'' AND nvl(stage.status_flag, ''A'') = ''A'')       )  '|| 
         ' AND ORG_CONTACT_ID IN ' ||
         ' ( SELECT org_contact_id from HZ_ORG_CONTACTS oc, (select object_id, relationship_id, subject_id party_id from hz_relationships ' ||
         ' where subject_type = ''PERSON'' AND object_type = ''ORGANIZATION'') stage1 ' ||
         ' where stage1.relationship_id = oc.party_relationship_id ' || 
         ' and ('||p_restrict_sql1|| ') )' ||
         ' AND (:p_dup IS NULL OR stage.party_id <> :p_dup) '; 
       OPEN x_cursor FOR l_sqlstr USING p_contains_str,
                    p_dup_party_id, p_dup_party_id, p_contains_str, p_dup_party_id, p_dup_party_id;
       ELSE 
       l_sqlstr := 'SELECT ' || l_hint ||' PARTY_SITE_ID, PARTY_ID, ORG_CONTACT_ID , TX3, TX4, TX9, TX10, TX11, TX14, TX15, TX22'||
                   ' FROM HZ_STAGED_PARTY_SITES stage'||
                   ' WHERE contains( concat_col, :cont)>0'||
                   '  AND( ('''||l_search_merged||''' =''Y'' )  '|| 
                   '   OR ('''||l_search_merged||''' = ''I'' AND nvl(stage.status_flag, ''A'') in (''A'', ''I''))  '|| 
                   '   OR ('''||l_search_merged||''' = ''N'' AND nvl(stage.status_flag, ''A'') = ''A'')       )  '|| 
                 ' AND EXISTS ('||
                 ' SELECT 1 FROM HZ_STAGED_PARTIES p ' || 
                 ' WHERE p.party_id = stage.party_id ' || 
                 ' AND ((:TX36 IS NULL OR :TX36||'' '' =  p.TX36))  '|| l_status_sql ||' ) ' || 
                   ' AND ('||get_adjusted_restrict_sql(p_restrict_sql)||')' ||
                   ' AND (:p_dup IS NULL OR stage.party_id <> :p_dup) '; 
       OPEN x_cursor FOR l_sqlstr USING p_contains_str
                              ,g_party_stage_rec.TX36,g_party_stage_rec.TX36
                    ,p_dup_party_id, p_dup_party_id;
       END IF; 
		ELSE 
       l_sqlstr := 'SELECT ' || l_hint ||' PARTY_SITE_ID, PARTY_ID, ORG_CONTACT_ID , TX3, TX4, TX9, TX10, TX11, TX14, TX15, TX22'||
                   ' FROM HZ_STAGED_PARTY_SITES stage'||
                   ' WHERE contains( concat_col, :cont)>0'||
                   '  AND( ('''||l_search_merged||''' =''Y'' )  '|| 
                   '   OR ('''||l_search_merged||''' = ''I'' AND nvl(stage.status_flag, ''A'') in (''A'', ''I''))  '|| 
                   '   OR ('''||l_search_merged||''' = ''N'' AND nvl(stage.status_flag, ''A'') = ''A'')       )  '|| 
                 ' AND EXISTS ('||
                 ' SELECT 1 FROM HZ_STAGED_PARTIES p ' || 
                 ' WHERE p.party_id = stage.party_id ' || 
                 ' AND ((:TX36 IS NULL OR :TX36||'' '' =  p.TX36))  '|| l_status_sql ||' ) ' || 
                   ' AND ('||p_restrict_sql||')' ||
                   ' AND (:p_dup IS NULL OR stage.party_id <> :p_dup) '; 
       OPEN x_cursor FOR l_sqlstr USING p_contains_str
                              ,g_party_stage_rec.TX36,g_party_stage_rec.TX36
                    ,p_dup_party_id, p_dup_party_id;
		  END IF; 
    END IF;
 	    output_long_strings('----------------------------------------------------------');
       output_long_strings('Party Site Contains String = '||p_contains_str);
		output_long_strings('Restrict Sql = '||p_restrict_sql);
  exception
    when others then
      if (instrb(SQLERRM,'DRG-51030')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_WILDCARD_ERR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      elsif (instrb(SQLERRM,'DRG-50943')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_SEARCH_ERROR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      elsif (instrb(SQLERRM,'ORA-20000')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_SEARCH_ERROR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      else 
        FND_MESSAGE.SET_NAME('AR', 'HZ_API_OTHERS_EXCEP');
    	 FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    	 FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
      end if;
  END;

  PROCEDURE open_contact_cursor(
            p_dup_party_id NUMBER, 
            p_party_id NUMBER, 
            p_restrict_sql VARCHAR2, 
            p_contains_str  VARCHAR2, 
            p_search_ctx_id  NUMBER, 
            p_search_merged  VARCHAR2, 
            x_cursor OUT HZ_PARTY_STAGE.StageCurTyp) IS
  l_sqlstr VARCHAR2(4000);
  l_hint VARCHAR2(100); 
  l_check NUMBER; 
  l_check_dt NUMBER; 
  l_search_merged VARCHAR2(1); 
  l_status_sql VARCHAR2(100); 
 
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'calling the procedure open_contact_cursor',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
     IF (p_search_merged is null) then 
        l_search_merged := 'N';  
     ELSE 
        l_search_merged := p_search_merged; 
     END IF; 
     IF p_party_id IS NOT NULL THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Single party scenario',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
       OPEN x_cursor FOR 
          SELECT /*+ INDEX(stage HZ_STAGED_CONTACTS_N1) */ ORG_CONTACT_ID, PARTY_ID, TX2, TX156, TX6, TX5
          FROM HZ_STAGED_CONTACTS stage
        WHERE contains( concat_col, p_contains_str)>0
        AND EXISTS (
          SELECT 1 FROM HZ_STAGED_PARTIES p
          WHERE p.PARTY_ID = stage.PARTY_ID
          AND( (l_search_merged ='Y' )  
          OR (l_search_merged = 'I' AND nvl(p.status, 'A') in ('A', 'I'))  
          OR (l_search_merged = 'N' AND nvl(p.status, 'A') in ('A'))       )  
          AND ((g_party_stage_rec.TX36 IS NULL OR g_party_stage_rec.TX36||' ' =  p.TX36)))
          AND( (l_search_merged ='Y' )  
           OR (l_search_merged = 'I' AND nvl(stage.status_flag, 'A') in ('A', 'I'))  
           OR (l_search_merged = 'N' AND nvl(stage.status_flag, 'A') = 'A')       )  
          AND stage.party_id = p_party_id;
    ELSIF p_restrict_sql IS NULL OR p_search_ctx_id IS NOT NULL THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Either Restrict sql is null or Search Context Id is not null',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      IF p_search_ctx_id IS NULL THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Search Context id is null',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        OPEN x_cursor FOR 
          SELECT ORG_CONTACT_ID, PARTY_ID, TX2, TX156, TX6, TX5
          FROM HZ_STAGED_CONTACTS stage
        WHERE contains( concat_col, p_contains_str)>0
        AND EXISTS (
          SELECT 1 FROM HZ_STAGED_PARTIES p
          WHERE p.PARTY_ID = stage.PARTY_ID
          AND( (l_search_merged ='Y' )  
          OR (l_search_merged = 'I' AND nvl(p.status, 'A') in ('A', 'I'))  
          OR (l_search_merged = 'N' AND nvl(p.status, 'A') in ('A'))       )  
          AND ((g_party_stage_rec.TX36 IS NULL OR g_party_stage_rec.TX36||' ' =  p.TX36)))
          AND( (l_search_merged ='Y' )  
           OR (l_search_merged = 'I' AND nvl(stage.status_flag, 'A') in ('A', 'I'))  
           OR (l_search_merged = 'N' AND nvl(stage.status_flag, 'A') = 'A')       )  
          AND (p_dup_party_id IS NULL OR stage.party_id <> p_dup_party_id);
      ELSE
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Search Context id is not null',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
          OPEN x_cursor FOR 
            SELECT /*+ ORDERED INDEX(stage HZ_STAGED_CONTACTS_N1) */ ORG_CONTACT_ID, stage.PARTY_ID, TX2, TX156, TX6, TX5
            FROM HZ_DQM_PARTIES_GT d, HZ_STAGED_CONTACTS stage
            WHERE contains( concat_col, p_contains_str)>0
            AND d.search_context_id = p_search_ctx_id
            AND d.party_id = stage.party_id
            AND( (l_search_merged ='Y' )  
             OR (l_search_merged = 'I' AND nvl(stage.status_flag, 'A') in ('A', 'I'))  
             OR (l_search_merged = 'N' AND nvl(stage.status_flag, 'A') = 'A')       )  
            AND (p_dup_party_id IS NULL OR stage.party_id <> p_dup_party_id);
      END IF;
    ELSE
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Restrict Sql is not null',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
       l_check := instrb(p_restrict_sql, 'SELECTIVE'); 
       l_check_dt := instrb(p_restrict_sql, 'SELECTIVE_CT'); 
       IF (l_check_dt > 0 ) THEN 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Restrict sql has the selective_ct hint',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
           l_hint := '/*+ INDEX(stage HZ_STAGED_CONTACTS_U1) */'; 
       ELSIF (l_check > 0 ) THEN 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Restrict sql has the selective hint',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
           l_hint := '/*+ INDEX(stage HZ_STAGED_CONTACTS_N1) */'; 
       END IF; 
       IF l_search_merged = 'Y' THEN 
               l_status_sql := ' ' ;  
       ELSIF l_search_merged = 'I' THEN  
               l_status_sql := ' AND nvl(p.status,''A'') in (''A'', ''I'')'; 
       ELSE 
               l_status_sql := ' AND nvl(p.status,''A'') in (''A'')'; 
       END IF; 
       l_sqlstr := 'SELECT   ' || l_hint || ' ORG_CONTACT_ID, PARTY_ID , TX2, TX156, TX6, TX5'||
                   ' FROM HZ_STAGED_CONTACTS stage'||
                   ' WHERE contains( concat_col, :cont)>0'||
                 ' AND EXISTS ('||
                 ' SELECT 1 FROM HZ_STAGED_PARTIES p ' || 
                 ' WHERE p.party_id = stage.party_id ' || 
                 ' AND ((:TX36 IS NULL OR :TX36||'' '' =  p.TX36)) '|| l_status_sql ||' ) ' || 
                  ' AND( ('''||l_search_merged||''' =''Y'' )  '||
                  ' OR ('''||l_search_merged||''' = ''I'' AND nvl(stage.status_flag, ''A'') in (''A'', ''I''))  '||
                  ' OR ('''||l_search_merged||''' = ''N'' AND nvl(stage.status_flag, ''A'') = ''A'')       )  '||
                   ' AND ('||p_restrict_sql||')' ||
                   ' AND (:p_dup IS NULL OR stage.party_id <> :p_dup) '; 
       OPEN x_cursor FOR l_sqlstr USING p_contains_str
                              ,g_party_stage_rec.TX36,g_party_stage_rec.TX36
                    ,p_dup_party_id, p_dup_party_id;
    END IF;
 	    output_long_strings('----------------------------------------------------------');
       output_long_strings('Contacts Contains String = '||p_contains_str);
		output_long_strings('Restrict Sql = '||p_restrict_sql);
  exception
    when others then
      if (instrb(SQLERRM,'DRG-51030')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_WILDCARD_ERR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      elsif (instrb(SQLERRM,'DRG-50943')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_SEARCH_ERROR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      elsif (instrb(SQLERRM,'ORA-20000')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_SEARCH_ERROR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      else 
        FND_MESSAGE.SET_NAME('AR', 'HZ_API_OTHERS_EXCEP');
    	 FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    	 FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
      end if;
  END;

  PROCEDURE open_contact_pt_cursor(
            p_dup_party_id NUMBER, 
            p_party_id NUMBER, 
            p_restrict_sql VARCHAR2, 
            p_contains_str  VARCHAR2, 
            p_search_ctx_id  NUMBER, 
            p_search_merged  VARCHAR2, 
            p_search_rel_cpts  VARCHAR2, 
            p_person_api  VARCHAR2, 
            x_cursor OUT HZ_PARTY_STAGE.StageCurTyp,
            p_restrict_entity VARCHAR2 DEFAULT NULL) IS
  l_sqlstr VARCHAR2(4000);
  l_hint VARCHAR2(100); 
  l_check NUMBER; 
  l_check_dt NUMBER; 
  l_search_merged VARCHAR2(1); 
  l_status_sql VARCHAR2(100); 
  p_restrict_sql1 VARCHAR2(4000); 
 
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'calling the procedure open_contact_pt_cursor',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
     IF (p_search_merged is null) then 
        l_search_merged := 'N';  
     ELSE 
        l_search_merged := p_search_merged; 
     END IF; 
  IF p_restrict_entity = 'CONTACTS'    
  THEN
          OPEN x_cursor FOR 
          SELECT /*+ USE_NL(d stage) ORDERED INDEX(stage HZ_STAGED_CONTACT_POINTS_N2) */ CONTACT_POINT_ID, stage.contact_point_type, stage.PARTY_ID, PARTY_SITE_ID, ORG_CONTACT_ID , TX1, TX6, TX5
          FROM HZ_DQM_PARTIES_GT d, HZ_STAGED_CONTACT_POINTS stage 
          WHERE contains( concat_col, p_contains_str)>0 
          AND d.search_context_id = p_search_ctx_id 
          AND( (l_search_merged ='Y' )  
           OR (l_search_merged = 'I' AND nvl(stage.status_flag, 'A') in ('A', 'I'))  
           OR (l_search_merged = 'N' AND nvl(stage.status_flag, 'A') = 'A')       )  
          AND d.party_id = stage.org_contact_id ; 
   END IF; 
  IF p_restrict_entity = 'PARTY_SITES'    
  THEN
          OPEN x_cursor FOR 
          SELECT /*+ USE_NL(d stage) ORDERED INDEX(stage HZ_STAGED_CONTACT_POINTS_N3) */ CONTACT_POINT_ID, stage.contact_point_type, stage.PARTY_ID, PARTY_SITE_ID, ORG_CONTACT_ID , TX1, TX6, TX5
          FROM HZ_DQM_PARTIES_GT d, HZ_STAGED_CONTACT_POINTS stage 
          WHERE contains( concat_col, p_contains_str)>0 
          AND d.search_context_id = p_search_ctx_id 
          AND( (l_search_merged ='Y' )  
           OR (l_search_merged = 'I' AND nvl(stage.status_flag, 'A') in ('A', 'I'))  
           OR (l_search_merged = 'N' AND nvl(stage.status_flag, 'A') = 'A')       )  
          AND d.party_id = stage.party_site_id ; 
   END IF; 
 IF p_restrict_entity IS NULL
 THEN
     IF p_party_id IS NOT NULL THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Single Party Scenario',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
       IF p_search_rel_cpts = 'N' THEN
         OPEN x_cursor FOR 
          SELECT /*+ INDEX(stage HZ_STAGED_CONTACT_POINTS_N1) */ CONTACT_POINT_ID, stage.contact_point_type, PARTY_ID, PARTY_SITE_ID, ORG_CONTACT_ID , TX1, TX6, TX5
          FROM HZ_STAGED_CONTACT_POINTS stage
          WHERE contains( concat_col, p_contains_str)>0
          AND( (l_search_merged ='Y' )  
           OR (l_search_merged = 'I' AND nvl(stage.status_flag, 'A') in ('A', 'I'))  
           OR (l_search_merged = 'N' AND nvl(stage.status_flag, 'A') = 'A')       )  
          AND stage.party_id = p_party_id; 
       ELSE
         OPEN x_cursor FOR 
          SELECT /*+ INDEX(stage HZ_STAGED_CONTACT_POINTS_N1) */ CONTACT_POINT_ID, stage.contact_point_type, PARTY_ID, PARTY_SITE_ID, ORG_CONTACT_ID , TX1, TX6, TX5
          FROM HZ_STAGED_CONTACT_POINTS stage
          WHERE contains( concat_col, p_contains_str)>0
          AND( (l_search_merged ='Y' )  
           OR (l_search_merged = 'I' AND nvl(stage.status_flag, 'A') in ('A', 'I'))  
           OR (l_search_merged = 'N' AND nvl(stage.status_flag, 'A') = 'A')       )  
          AND stage.party_id = p_party_id 
          UNION
          SELECT /*+ INDEX(stage HZ_STAGED_CONTACT_POINTS_N2) */ stage.CONTACT_POINT_ID, stage.contact_point_type, stage.PARTY_ID, stage.PARTY_SITE_ID, stage.ORG_CONTACT_ID , TX1, TX6, TX5
          FROM HZ_STAGED_CONTACT_POINTS stage, hz_relationships r, hz_org_contacts oc
          WHERE contains( concat_col, p_contains_str)>0
          AND r.object_id = p_party_id 
          AND( (l_search_merged ='Y' )  
           OR (l_search_merged = 'I' AND nvl(stage.status_flag, 'A') in ('A', 'I'))  
           OR (l_search_merged = 'N' AND nvl(stage.status_flag, 'A') = 'A')       )  
                    AND r.subject_id = stage.party_id 
                    AND r.SUBJECT_TABLE_NAME = 'HZ_PARTIES' 
                    AND r.OBJECT_TABLE_NAME = 'HZ_PARTIES' 
                    AND r.relationship_id = oc.party_relationship_id
                    AND oc.org_contact_id = stage.org_contact_id; 
      END IF;
    ELSIF p_restrict_sql IS NULL OR p_search_ctx_id IS NOT NULL THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Either Restrict sql is null or search_context_id is not null',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      IF p_search_ctx_id IS NULL THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Either Search context id is null',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        OPEN x_cursor FOR 
          SELECT CONTACT_POINT_ID, stage.contact_point_type, PARTY_ID, PARTY_SITE_ID, ORG_CONTACT_ID , TX1, TX6, TX5
          FROM HZ_STAGED_CONTACT_POINTS stage
        WHERE contains( concat_col, p_contains_str)>0
        AND EXISTS (
          SELECT 1 FROM HZ_STAGED_PARTIES p
          WHERE p.PARTY_ID = stage.PARTY_ID
          AND( (l_search_merged ='Y' )  
          OR (l_search_merged = 'I' AND nvl(p.status, 'A') in ('A', 'I'))  
          OR (l_search_merged = 'N' AND nvl(p.status, 'A') in ('A'))       )  
          AND ((g_party_stage_rec.TX36 IS NULL OR g_party_stage_rec.TX36||' ' =  p.TX36)))
          AND( (l_search_merged ='Y' )  
           OR (l_search_merged = 'I' AND nvl(stage.status_flag, 'A') in ('A', 'I'))  
           OR (l_search_merged = 'N' AND nvl(stage.status_flag, 'A') = 'A')       )  
          AND (p_dup_party_id IS NULL OR stage.party_id <> p_dup_party_id);
      ELSE
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Search_context_id is not null',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        IF p_person_api = 'Y' THEN
          OPEN x_cursor FOR 
            SELECT CONTACT_POINT_ID, stage.contact_point_type, stage.PARTY_ID, PARTY_SITE_ID, ORG_CONTACT_ID , TX1, TX6, TX5
            FROM HZ_DQM_PARTIES_GT d, HZ_STAGED_CONTACT_POINTS stage
            WHERE contains( concat_col, p_contains_str)>0
            AND d.search_context_id = p_search_ctx_id
            AND d.party_id = stage.party_id
            AND( (l_search_merged ='Y' )  
             OR (l_search_merged = 'I' AND nvl(stage.status_flag, 'A') in ('A', 'I'))  
             OR (l_search_merged = 'N' AND nvl(stage.status_flag, 'A') = 'A')       )  
            AND (p_dup_party_id IS NULL OR stage.party_id <> p_dup_party_id)
            UNION 
            SELECT /*+ INDEX(stage HZ_STAGED_CONTACT_POINTS_N2) */ CONTACT_POINT_ID, stage.contact_point_type, r.subject_id, stage.PARTY_SITE_ID, stage.ORG_CONTACT_ID , TX1, TX6, TX5
            FROM HZ_DQM_PARTIES_GT d, HZ_RELATIONSHIPS r, HZ_ORG_CONTACTS oc, HZ_STAGED_CONTACT_POINTS stage
            WHERE contains( concat_col, p_contains_str)>0
            AND d.search_context_id = p_search_ctx_id
            AND d.party_id = r.subject_id
            AND r.relationship_id = oc.party_relationship_id
            AND oc.org_contact_id = stage.org_contact_id
            AND( (l_search_merged ='Y' )  
             OR (l_search_merged = 'I' AND nvl(stage.status_flag, 'A') in ('A', 'I'))  
             OR (l_search_merged = 'N' AND nvl(stage.status_flag, 'A') = 'A')       )  
            AND (p_dup_party_id IS NULL OR r.subject_id <> p_dup_party_id);
        ELSE
          OPEN x_cursor FOR 
            SELECT  CONTACT_POINT_ID, stage.contact_point_type, stage.PARTY_ID, PARTY_SITE_ID, ORG_CONTACT_ID , TX1, TX6, TX5
            FROM HZ_DQM_PARTIES_GT d, HZ_STAGED_CONTACT_POINTS stage
            WHERE contains( concat_col, p_contains_str)>0
            AND d.search_context_id = p_search_ctx_id
            AND d.party_id = stage.party_id
            AND( (l_search_merged ='Y' )  
             OR (l_search_merged = 'I' AND nvl(stage.status_flag, 'A') in ('A', 'I'))  
             OR (l_search_merged = 'N' AND nvl(stage.status_flag, 'A') = 'A')       )  
            AND (p_dup_party_id IS NULL OR stage.party_id <> p_dup_party_id);
        END IF;
      END IF;
    ELSE
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Restrict sql is not null',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
       l_check := instrb(p_restrict_sql, 'SELECTIVE'); 
       l_check_dt := instrb(p_restrict_sql, 'SELECTIVE_CPT'); 
       IF (l_check_dt > 0 ) THEN 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Restrict Sql has the selective_cpt hint',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
           l_hint := '/*+ INDEX(stage HZ_STAGED_CONTACT_POINTS_U1) */'; 
       ELSIF (l_check > 0 ) THEN 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Restrict Sql has the selective hint',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
           l_hint := '/*+ INDEX(stage HZ_STAGED_CONTACT_POINTS_N1) */'; 
       END IF; 
       IF l_search_merged = 'Y' THEN 
               l_status_sql := ' ' ;  
       ELSIF l_search_merged = 'I' THEN  
               l_status_sql := ' AND nvl(p.status,''A'') in (''A'', ''I'')'; 
       ELSE 
               l_status_sql := ' AND nvl(p.status,''A'') in (''A'')'; 
       END IF; 
       IF p_person_api = 'Y' THEN
 		/*Performance fix for Bug:4589953*/ 
       IF (l_check > 0 ) THEN 
       IF instrb(p_restrict_sql, 'STAGE.') > 0 THEN 
       	p_restrict_sql1 := replace( p_restrict_sql, 'STAGE.', 'stage1.');
       ELSIF instrb(p_restrict_sql, 'stage.') > 0 THEN 
       	p_restrict_sql1 := replace( p_restrict_sql, 'stage.', 'stage1.');
       ELSE
		p_restrict_sql1 := 'stage1.'||p_restrict_sql;
       END IF; 
       	l_sqlstr := ' SELECT   /*+ INDEX(stage HZ_STAGED_CONTACT_POINTS_N1) */ CONTACT_POINT_ID, stage.contact_point_type, PARTY_ID, PARTY_SITE_ID, ORG_CONTACT_ID  , TX1, TX6, TX5'||
                   ' FROM HZ_STAGED_CONTACT_POINTS stage'||
                   ' WHERE contains( concat_col, :cont)>0  '||
                   ' AND (stage.org_contact_id is null '||
                   ' AND( ('''||l_search_merged||''' =''Y'' )  '||
                   '   OR ('''||l_search_merged||''' = ''I'' AND nvl(stage.status_flag, ''A'') in (''A'', ''I''))  '||
                   '   OR ('''||l_search_merged||''' = ''N'' AND nvl(stage.status_flag, ''A'') = ''A'')       )  '||
                   ' AND ('||p_restrict_sql||'))' ||
                   ' AND (:p_dup IS NULL OR stage.party_id <> :p_dup) ' ||
                   ' UNION ' ||
                   ' SELECT   /*+ INDEX(stage HZ_STAGED_CONTACT_POINTS_N2) */ CONTACT_POINT_ID, stage.contact_point_type, PARTY_ID, PARTY_SITE_ID, ORG_CONTACT_ID  , TX1, TX6, TX5'||
                   ' FROM HZ_STAGED_CONTACT_POINTS stage'||
                   ' WHERE contains( concat_col, :cont)>0  '||
                   ' AND( ('''||l_search_merged||''' =''Y'' )  '||
                   '   OR ('''||l_search_merged||''' = ''I'' AND nvl(stage.status_flag, ''A'') in (''A'', ''I''))  '||
                   '   OR ('''||l_search_merged||''' = ''N'' AND nvl(stage.status_flag, ''A'') = ''A'')       )  '||
                 ' AND (stage.org_contact_id in ' || 
                 ' ( SELECT org_contact_id from HZ_ORG_CONTACTS oc, (select object_id, relationship_id, subject_id party_id from hz_relationships r ' ||
                 ' where subject_type = ''PERSON'' AND object_type = ''ORGANIZATION'') stage1 ' || 
                 ' where stage1.relationship_id = oc.party_relationship_id ' || 
                 ' and ('||p_restrict_sql1 || ') ) )' ||
                 ' AND (:p_dup IS NULL OR stage.party_id <> :p_dup) '; 
       OPEN x_cursor FOR l_sqlstr USING p_contains_str,
                    p_dup_party_id, p_dup_party_id, p_contains_str, p_dup_party_id, p_dup_party_id;
       ELSE 
       	l_sqlstr := 'SELECT   ' || l_hint ||' CONTACT_POINT_ID, stage.contact_point_type, PARTY_ID, PARTY_SITE_ID, ORG_CONTACT_ID  , TX1, TX6, TX5'||
                   ' FROM HZ_STAGED_CONTACT_POINTS stage'||
                   ' WHERE contains( concat_col, :cont)>0'||
                 ' AND EXISTS ('||
                 ' SELECT 1 FROM HZ_STAGED_PARTIES p ' || 
                 ' WHERE p.party_id = stage.party_id ' || 
                 ' AND ((:TX36 IS NULL OR :TX36||'' '' =  p.TX36))  '|| l_status_sql ||' ) ' || 
                   ' AND( ('''||l_search_merged||''' =''Y'' )  '||
                   '   OR ('''||l_search_merged||''' = ''I'' AND nvl(stage.status_flag, ''A'') in (''A'', ''I''))  '||
                   '   OR ('''||l_search_merged||''' = ''N'' AND nvl(stage.status_flag, ''A'') = ''A'')       )  '||
                   ' AND ('||get_adjusted_restrict_sql(p_restrict_sql)||')' ||
                   ' AND (:p_dup IS NULL OR stage.party_id <> :p_dup) '; 
       OPEN x_cursor FOR l_sqlstr USING p_contains_str
                              ,g_party_stage_rec.TX36,g_party_stage_rec.TX36
                    ,p_dup_party_id, p_dup_party_id;
       END IF; 
       ELSE 
       	l_sqlstr := 'SELECT   ' || l_hint ||' CONTACT_POINT_ID, stage.contact_point_type, PARTY_ID, PARTY_SITE_ID, ORG_CONTACT_ID  , TX1, TX6, TX5'||
                   ' FROM HZ_STAGED_CONTACT_POINTS stage'||
                   ' WHERE contains( concat_col, :cont)>0'||
                 ' AND EXISTS ('||
                 ' SELECT 1 FROM HZ_STAGED_PARTIES p ' || 
                 ' WHERE p.party_id = stage.party_id ' || 
                 ' AND ((:TX36 IS NULL OR :TX36||'' '' =  p.TX36))  '|| l_status_sql ||' ) ' || 
                   ' AND( ('''||l_search_merged||''' =''Y'' )  '||
                   '   OR ('''||l_search_merged||''' = ''I'' AND nvl(stage.status_flag, ''A'') in (''A'', ''I''))  '||
                   '   OR ('''||l_search_merged||''' = ''N'' AND nvl(stage.status_flag, ''A'') = ''A'')       )  '||
                   ' AND ('||p_restrict_sql||')' ||
                   ' AND (:p_dup IS NULL OR stage.party_id <> :p_dup) '; 
       OPEN x_cursor FOR l_sqlstr USING p_contains_str
                              ,g_party_stage_rec.TX36,g_party_stage_rec.TX36
                    ,p_dup_party_id, p_dup_party_id;
       END IF; 
    END IF;
  END IF; 
 	    output_long_strings('----------------------------------------------------------');
       output_long_strings('Contact Points Contains String = '||p_contains_str);
		output_long_strings('Restrict Sql = '||p_restrict_sql);
  exception
    when others then
      if (instrb(SQLERRM,'DRG-51030')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_WILDCARD_ERR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      elsif (instrb(SQLERRM,'DRG-50943')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_SEARCH_ERROR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      elsif (instrb(SQLERRM,'ORA-20000')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_SEARCH_ERROR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      else 
        FND_MESSAGE.SET_NAME('AR', 'HZ_API_OTHERS_EXCEP');
    	 FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    	 FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
      end if;
  END;


  PROCEDURE return_direct_matches(p_restrict_sql VARCHAR2, p_match_str VARCHAR2, p_thresh NUMBER, p_search_ctx_id NUMBER, p_search_merged VARCHAR2, p_dup_party_id NUMBER, x_num_matches OUT NUMBER) IS
    l_sqlstr VARCHAR2(4000);
    l_search_merged VARCHAR2(1);
  BEGIN
    IF (p_search_merged is null) then 
       l_search_merged := 'N';  
    ELSE 
       l_search_merged := p_search_merged; 
    END IF; 
    IF p_restrict_sql IS NULL THEN
      INSERT INTO HZ_MATCHED_PARTIES_GT (SEARCH_CONTEXT_ID, PARTY_ID, SCORE) 
      SELECT p_search_ctx_id, PARTY_ID, decode(TX8,g_party_stage_rec.TX8||' ',100,90)
      FROM hz_staged_parties 
      WHERE TX8 LIKE g_party_stage_rec.TX8||' %'
      AND ((g_party_stage_rec.TX36 IS NULL OR g_party_stage_rec.TX36||' ' =  TX36))
      AND( (l_search_merged ='Y' ) 
           OR (l_search_merged = 'I' AND nvl(status, 'A') in ('A', 'I'))  
           OR (l_search_merged = 'N' AND nvl(status, 'A') in ('A')))  
      AND (p_dup_party_id IS NULL OR party_id <> p_dup_party_id)
      AND rownum <= p_thresh;
    ELSE
      l_sqlstr := 'INSERT INTO HZ_MATCHED_PARTIES_GT (SEARCH_CONTEXT_ID, PARTY_ID, SCORE) SELECT :ctx_id, PARTY_ID, decode(TX8,:TX8||'' '',100,90) FROM hz_staged_parties stage ';
      l_sqlstr := l_sqlstr || ' WHERE TX8 like :TX8||'' %'' ';
      l_sqlstr := l_sqlstr || ' AND (:TX36 IS NULL OR :TX36||'' '' =  TX36) ';
      IF l_search_merged = 'N' THEN
        l_sqlstr := l_sqlstr || ' AND nvl(status,''A'')=''A'' ';
      ELSIF l_search_merged = 'Y' THEN
        l_sqlstr := l_sqlstr || ' AND nvl(status,''A'') in (''A'',''I'') ';
      END IF;
      l_sqlstr := l_sqlstr || ' AND (:p_dup IS NULL OR party_id <> :p_dup ) ';
     l_sqlstr := l_sqlstr || ' AND '||p_restrict_sql||' ';
     l_sqlstr := l_sqlstr || ' AND ROWNUM <= :thresh ';
     EXECUTE IMMEDIATE l_sqlstr USING p_search_ctx_id, g_party_stage_rec.TX8,g_party_stage_rec.TX8,g_party_stage_rec.TX36,g_party_stage_rec.TX36,p_dup_party_id,p_dup_party_id,p_thresh;
    END IF;
    x_num_matches := SQL%ROWCOUNT;
  END;

  FUNCTION get_new_score_rec (
    	 p_init_total_score NUMBER,
    	 p_init_party_score NUMBER,
    	 p_init_party_site_score NUMBER,
    	 p_init_contact_score NUMBER,
    	 p_init_contact_point_score NUMBER, 
    	 p_party_id NUMBER, 
    	 p_party_site_id NUMBER, 
    	 p_org_contact_id NUMBER, 
    	 p_contact_point_id NUMBER) 
     RETURN HZ_PARTY_SEARCH.score_rec IS
    l_score_rec HZ_PARTY_SEARCH.score_rec;
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'calling the function get_new_score_rec to set the l_score_rec structure',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    l_score_rec.TOTAL_SCORE := p_init_total_score;
    l_score_rec.PARTY_SCORE := p_init_party_score;
    l_score_rec.PARTY_SITE_SCORE := p_init_party_site_score;
    l_score_rec.CONTACT_SCORE := p_init_contact_score;
    l_score_rec.CONTACT_POINT_SCORE := p_init_contact_point_score;
    l_score_rec.PARTY_ID := p_party_id;
    l_score_rec.PARTY_SITE_ID := p_party_site_id;
    l_score_rec.ORG_CONTACT_ID := p_org_contact_id;
    l_score_rec.CONTACT_POINT_ID := p_contact_point_id;
    RETURN l_score_rec;
  END;

   /**********************************************************
   This procedure finds the set of parties that match the search
   criteria and returns a scored set of parties

   The steps in executing the search are as follows
    1. Initialization and error checks
    2. Setup of intermedia query strings for Acquisition query
    3. Execution of Acquisition query
    4. Execution of Secondary queries to score results
    5. Setup of data temporary table to return search results
   **********************************************************/

PROCEDURE find_parties (
      p_rule_id               IN      NUMBER,
      p_party_search_rec      IN      HZ_PARTY_SEARCH.party_search_rec_type,
      p_party_site_list       IN      HZ_PARTY_SEARCH.party_site_list,
      p_contact_list          IN      HZ_PARTY_SEARCH.contact_list,
      p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      p_search_merged         IN      VARCHAR2,
      p_dup_party_id          IN      NUMBER,
      p_dup_set_id            IN      NUMBER,
      p_dup_batch_id          IN      NUMBER,
      p_ins_details           IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER
) IS

  -- Strings to hold the generated Intermedia query strings
  l_party_contains_str VARCHAR2(32000); 
  l_party_site_contains_str VARCHAR2(32000);
  l_contact_contains_str VARCHAR2(32000);
  l_contact_pt_contains_str VARCHAR2(32000);
  l_denorm_str VARCHAR2(32000);
  l_ps_denorm_str VARCHAR2(32000);
  l_ct_denorm_str VARCHAR2(32000);
  l_cpt_denorm_str VARCHAR2(32000);

  -- Other local variables
  l_match_str VARCHAR2(30); -- Match type (AND or OR)
  l_sqlstr VARCHAR2(32000); -- Dynamic SQL String
  -- For Score calculation
  l_max_score NUMBER;
  l_match_idx NUMBER;
  l_entered_max_score NUMBER;
  FIRST BOOLEAN;
  l_search_ctx_id NUMBER; -- Generated Search Context ID

  l_TX1 VARCHAR2(2000);
  l_TX10 VARCHAR2(2000);
  l_TX11 VARCHAR2(2000);
  l_TX14 VARCHAR2(2000);
  l_TX15 VARCHAR2(2000);
  l_TX156 VARCHAR2(2000);
  l_TX158 VARCHAR2(2000);
  l_TX2 VARCHAR2(2000);
  l_TX22 VARCHAR2(2000);
  l_TX3 VARCHAR2(2000);
  l_TX34 VARCHAR2(2000);
  l_TX39 VARCHAR2(2000);
  l_TX4 VARCHAR2(2000);
  l_TX40 VARCHAR2(2000);
  l_TX44 VARCHAR2(2000);
  l_TX45 VARCHAR2(2000);
  l_TX46 VARCHAR2(2000);
  l_TX47 VARCHAR2(2000);
  l_TX5 VARCHAR2(2000);
  l_TX6 VARCHAR2(2000);
  l_TX9 VARCHAR2(2000);
  H_SCORES HZ_PARTY_SEARCH.score_list;
  H_PARTY_ID HZ_PARTY_SEARCH.IDList;
  H_PARTY_ID_LIST HZ_PARTY_SEARCH.IDList;

  l_score NUMBER;
  l_idx NUMBER;
  l_party_cur HZ_PARTY_STAGE.StageCurTyp;
  l_party_site_cur HZ_PARTY_STAGE.StageCurTyp;
  l_contact_cur HZ_PARTY_STAGE.StageCurTyp;
  l_contact_pt_cur HZ_PARTY_STAGE.StageCurTyp;
  l_party_id NUMBER;
  l_ps_party_id NUMBER;
  l_ct_party_id NUMBER;
  l_cpt_party_id NUMBER;
  l_cpt_ps_id NUMBER;
  l_cpt_contact_id NUMBER;
  l_cpt_type VARCHAR2(100);
  l_party_site_id NUMBER;
  l_org_contact_id NUMBER;
  l_contact_pt_id NUMBER;
  l_ps_contact_id NUMBER;
  l_party_max_score NUMBER;
  l_ps_max_score NUMBER;
  l_contact_max_score NUMBER;
  l_cpt_max_score NUMBER;
  l_denorm_max_score NUMBER;
  l_non_denorm_max_score NUMBER;

  defpt NUMBER :=0;
  defps NUMBER :=0;
  defct NUMBER :=0;
  defcpt NUMBER :=0;
  l_index NUMBER;
  l_max_thresh NUMBER;
  l_tmp NUMBER;
  l_merge_flag VARCHAR2(1);
  l_num_eval NUMBER:=0;

  --Fix for bug 4417124 
  l_use_contact_addr_info BOOLEAN := TRUE;
  l_use_contact_cpt_info BOOLEAN  := TRUE;
  l_use_contact_addr_flag VARCHAR2(1) := 'Y';
  l_use_contact_cpt_flag  VARCHAR2(1) := 'Y';

  L_RETURN_IMM_EXC EXCEPTION;

  
  /********************* Find Parties private procedures *******/
  PROCEDURE push_eval IS
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'calling the procedure push_eval',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Emptying the lists H_PARTY_ID, H_PARTY_ID_LIST and H_SCORES',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    H_PARTY_ID.DELETE;
    H_PARTY_ID_LIST.DELETE;
    H_SCORES.DELETE;        
    g_mappings.DELETE;
    HZ_DQM_SEARCH_UTIL.set_num_eval(0);
    call_order(5) := call_order(1);
    call_type(5) := 'AND';
    call_max_score(5) := call_max_score(1);
    call_type(2) := 'OR';
  END;

  /**  Private procedure to acquire and score at party level  ***/
  PROCEDURE eval_party_level(p_party_contains_str VARCHAR2,p_call_type VARCHAR2, p_index NUMBER) IS
    l_party_id_idx NUMBER:=1;
    l_ctx_id NUMBER;
    l_precalc_score BOOLEAN := FALSE;
    l_TX35_new varchar2(4000);
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'calling the procedure eval_party_level',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    SAVEPOINT eval_start;
    IF l_match_str = ' AND ' AND p_call_type = 'AND' THEN
      l_ctx_id := l_search_ctx_id;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match rule is AND and call type is AND. Inserting into HZ_DQM_PARTIES_GT, from the H_PARTY_ID list',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      H_PARTY_ID.DELETE;
      H_PARTY_ID_LIST.DELETE;
    ELSIF l_match_str = ' OR ' AND p_call_type = 'AND' THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match rule is OR and call type is AND. Inserting into HZ_DQM_PARTIES_GT, from the H_PARTY_ID list',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    ELSE
      IF (p_restrict_sql IS NULL OR instrb(p_restrict_sql, 'SELECTIVE')=0)
         and check_estimate_hits('PARTY',p_party_contains_str)>l_max_thresh THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval party level estimated hits exceed threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        IF g_party_stage_rec.TX8 IS NOT NULL AND nvl(FND_PROFILE.VALUE('HZ_DQM_PN_THRESH_RESOLUTION'),'NONE')='SQL' AND p_dup_batch_id IS NULL THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval party level resolution options is set to SQL search.',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
          IF (l_party_site_contains_str IS NULL AND
             l_contact_contains_str IS NULL AND
             l_contact_pt_contains_str IS NULL) AND NOT g_other_party_level_attribs AND p_dup_set_id IS NULL THEN
            return_direct_matches(p_restrict_sql,l_match_str,l_max_thresh,l_search_ctx_id,p_search_merged,p_dup_party_id, x_num_matches);
            RAISE L_RETURN_IMM_EXC;
          ELSE
            open_party_cursor_direct(p_dup_party_id, p_restrict_sql, l_match_str,p_search_merged,p_party_contains_str,l_party_cur);
          END IF;
        ELSE
          IF p_index>1 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval party level number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED');
            FND_MSG_PUB.ADD;
            RAISE FND_API.G_EXC_ERROR;
          ELSE
            push_eval;
            RETURN;
          END IF;
        END IF;
      END IF;
      l_ctx_id := NULL;
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'========== START LOOPING THROUGH WHAT IS RETURNED BY OPEN_PARTY_CURSOR ================',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    IF l_party_cur IS NULL OR (not l_party_cur%ISOPEN) THEN
      open_party_cursor(p_dup_party_id, p_restrict_sql, p_party_contains_str,l_ctx_id, l_match_str,p_search_merged,l_party_cur);
    END IF;
    LOOP 
      FETCH l_party_cur INTO
         l_party_id , l_TX34, l_TX40, l_TX158, l_TX39, l_TX44, l_TX45, l_TX46, l_TX47;
      EXIT WHEN l_party_cur%NOTFOUND;
      l_index := map_id(l_party_id);
      l_score := GET_PARTY_SCORE(l_TX34,l_TX40,l_TX158,l_TX39,l_TX44,l_TX45,l_TX46,l_TX47);
      IF NOT H_SCORES.EXISTS(l_index) THEN
        H_SCORES(l_index) := get_new_score_rec(l_score,l_score,defps,defct,defcpt, l_party_id, null, null,null);
      ELSE
        H_SCORES(l_index).TOTAL_SCORE := 
                H_SCORES(l_index).TOTAL_SCORE+l_score;
        H_SCORES(l_index).PARTY_SCORE := l_score;
      END IF;
      IF NOT H_PARTY_ID_LIST.EXISTS(l_index) THEN
        H_PARTY_ID_LIST(l_index) := 1;
        H_PARTY_ID(l_party_id_idx) := l_party_id;
        l_party_id_idx:= l_party_id_idx+1;
      END IF;
      IF (l_party_id_idx-1)>l_max_thresh THEN
        IF p_index=1 AND call_order(2) = 'PARTY_SITE' 
          AND call_type(2) = 'AND' AND l_contact_contains_str IS NULL
          AND nvl(FND_PROFILE.VALUE('HZ_DQM_PN_THRESH_RESOLUTION'),'NONE')='SQL' 
          AND l_contact_pt_contains_str IS NULL THEN
            EXIT;
        END IF;
	      CLOSE l_party_cur;
        IF p_index>1 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval party level estimated hits exceed threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
          FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED');
          FND_MSG_PUB.ADD;
          RAISE FND_API.G_EXC_ERROR;
        ELSE
          push_eval;
          RETURN;
        END IF;
      END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval_party_level l_party_id =  '||l_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'In eval_party_level l_score =  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    END LOOP;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'===========END of LOOP=====================',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    CLOSE l_party_cur;
    ROLLBACK to eval_start;
  END;

  /**  Private procedure to acquire and score at party site level  ***/
  PROCEDURE eval_party_site_level(p_party_site_contains_str VARCHAR2,p_call_type VARCHAR2, p_index NUMBER,p_ins_details VARCHAR2,p_emax_score NUMBER) IS
    l_party_id_idx NUMBER:=1;
    l_ctx_id NUMBER;
    h_ps_id HZ_PARTY_SEARCH.IDList;
    h_ps_party_id HZ_PARTY_SEARCH.IDList;
    h_ps_score HZ_PARTY_SEARCH.IDList;
    detcnt NUMBER := 1;
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'calling the procedure eval_party_site_level',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  IF (l_party_contains_str IS NOT NULL AND instrb(l_party_contains_str,'D_PS')>0
      AND l_contact_contains_str IS NULL and H_PARTY_ID.COUNT > 0 and
      l_contact_pt_contains_str IS NULL) AND g_ps_den_only AND p_ins_details <> 'Y' THEN
    l_party_id := H_SCORES.FIRST;
    WHILE l_party_id IS NOT NULL LOOP
      H_SCORES(l_party_id).TOTAL_SCORE := H_SCORES(l_party_id).TOTAL_SCORE + p_emax_score;
      l_party_id:=H_SCORES.NEXT(l_party_id);
    END LOOP;
    RETURN;
  END IF;
    SAVEPOINT eval_start;
    IF l_match_str = ' AND ' AND p_call_type = 'AND' THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match rule is AND and call type is AND. Inserting into HZ_DQM_PARTIES_GT, from the H_PARTY_ID list',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      H_PARTY_ID.DELETE;
      H_PARTY_ID_LIST.DELETE;
    ELSIF l_match_str = ' OR ' AND p_call_type = 'AND' THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match rule is OR and call type is AND. Inserting into HZ_DQM_PARTIES_GT, from the H_PARTY_ID list',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    ELSE
      IF (p_restrict_sql IS NULL OR instrb(p_restrict_sql, 'SELECTIVE')=0)
         and check_estimate_hits('PARTY_SITES',p_party_site_contains_str)>l_max_thresh THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval party site level estimated hits exceed threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        IF p_index>1 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval party site level number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
          FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED');
          FND_MSG_PUB.ADD;
          RAISE FND_API.G_EXC_ERROR;
        ELSE
          push_eval;
          RETURN;
        END IF;
      END IF;
      l_party_id_idx := H_PARTY_ID.COUNT+1;
      l_ctx_id := NULL;
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'========== START LOOPING THROUGH WHAT IS RETURNED BY OPEN_PARTY_SITE_CURSOR ================',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    open_party_site_cursor(p_dup_party_id,NULL, p_restrict_sql, p_party_site_contains_str,l_ctx_id,  p_search_merged, 'N','N',l_party_site_cur);
    LOOP 
      FETCH l_party_site_cur INTO
         l_party_site_id, l_ps_party_id, l_ps_contact_id , l_TX3, l_TX4, l_TX9, l_TX10, l_TX11, l_TX14, l_TX15, l_TX22;
      EXIT WHEN l_party_site_cur%NOTFOUND;
      --Fix for bug 4417124 
      IF l_use_contact_addr_info OR l_ps_contact_id IS NULL THEN
        l_index := map_id(l_ps_party_id);
        l_score := GET_PARTY_SITES_SCORE(l_match_idx,l_TX3,l_TX4,l_TX9,l_TX10,l_TX11,l_TX14,l_TX15,l_TX22);
        IF NOT H_SCORES.EXISTS(l_index) THEN
          H_SCORES(l_index) := get_new_score_rec(l_score,defpt,l_score,defct,defcpt, l_ps_party_id, l_party_site_id, null,null);
        ELSE
          IF l_score > H_SCORES(l_index).PARTY_SITE_SCORE THEN
            H_SCORES(l_index).TOTAL_SCORE := 
                  H_SCORES(l_index).TOTAL_SCORE-H_SCORES(l_index).PARTY_SITE_SCORE+l_score;
            H_SCORES(l_index).PARTY_SITE_SCORE := l_score;
          END IF;
        END IF;
        IF NOT H_PARTY_ID_LIST.EXISTS(l_index) THEN
          H_PARTY_ID_LIST(l_index) := 1;
          H_PARTY_ID(l_party_id_idx) := l_ps_party_id;
          l_party_id_idx:= l_party_id_idx+1;
        END IF;
        IF p_ins_details = 'Y' THEN
          h_ps_id(detcnt) := l_party_site_id;
          h_ps_party_id(detcnt) := l_ps_party_id;
          IF (p_emax_score > 0) THEN 
              h_ps_score(detcnt) := round((l_score/p_emax_score)*100);
          ELSE 
              h_ps_score(detcnt) := 0; 
          END IF; 
          detcnt := detcnt +1;
        END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval_party_site_level l_party_site_id =  '||l_party_site_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'In eval_paty_site_level l_ps_party_id =  '||l_ps_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'In eval_party_site_level l_score =  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
    END LOOP;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'===========END of LOOP=====================',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    CLOSE l_party_site_cur;
    ROLLBACK to eval_start;
    IF p_ins_details = 'Y' THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval_party_site_level inserting into HZ_MATCHED_PARTY_SITES_GT from the H_PS_ID list',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      FORALL I in 1..h_ps_id.COUNT 
        INSERT INTO HZ_MATCHED_PARTY_SITES_GT (SEARCH_CONTEXT_ID,PARTY_SITE_ID,PARTY_ID,SCORE) VALUES (
          l_search_ctx_id, h_ps_id(I), h_ps_party_id(I), h_ps_score(I));
    END IF;
  END;

  /**  Private procedure to acquire and score at contact point level  ***/
  PROCEDURE eval_contact_level(p_contact_contains_str VARCHAR2,p_call_type VARCHAR2, p_index NUMBER,p_ins_details VARCHAR2,p_emax_score NUMBER) IS
    l_party_id_idx NUMBER:=1;
    l_ctx_id NUMBER;
    h_ct_id HZ_PARTY_SEARCH.IDList;
    h_ct_party_id HZ_PARTY_SEARCH.IDList;
    h_ct_score HZ_PARTY_SEARCH.IDList;
    detcnt NUMBER := 1;
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'calling the procedure eval_contact_level',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    SAVEPOINT eval_start;
    IF l_match_str = ' AND ' AND p_call_type='AND' THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match rule is AND and call type is AND. Inserting into HZ_DQM_PARTIES_GT, from the H_PARTY_ID list',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      H_PARTY_ID.DELETE;
      H_PARTY_ID_LIST.DELETE;
    ELSIF l_match_str = ' OR ' AND p_call_type = 'AND' THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match rule is OR and call type is AND. Inserting into HZ_DQM_PARTIES_GT, from the H_PARTY_ID list',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    ELSE
      IF (p_restrict_sql IS NULL OR instrb(p_restrict_sql, 'SELECTIVE')=0)
         and check_estimate_hits('CONTACTS',p_contact_contains_str)>l_max_thresh THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval contact level estimated hits exceed threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        IF p_index>1 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval contact level number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
          FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED');
          FND_MSG_PUB.ADD;
          RAISE FND_API.G_EXC_ERROR;
        ELSE
          push_eval;
          RETURN;
        END IF;
      END IF;
      l_ctx_id := NULL;
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'========== START LOOPING THROUGH WHAT IS RETURNED BY OPEN_CONTACT_CURSOR ================',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    open_contact_cursor(p_dup_party_id,NULL, p_restrict_sql, p_contact_contains_str,l_ctx_id,  p_search_merged, l_contact_cur);
    LOOP 
      FETCH l_contact_cur INTO
         l_org_contact_id, l_ct_party_id , l_TX2, l_TX156, l_TX6, l_TX5;
      EXIT WHEN l_contact_cur%NOTFOUND;
      l_index := map_id(l_ct_party_id);
      l_score := GET_CONTACTS_SCORE(l_match_idx,l_TX2,l_TX156,l_TX6,l_TX5);
      IF NOT H_SCORES.EXISTS(l_index) THEN
        H_SCORES(l_index) := get_new_score_rec(l_score,defpt,defps,l_score,defcpt, l_ct_party_id, null, l_org_contact_id,null);
      ELSE
        IF l_score > H_SCORES(l_index).CONTACT_SCORE THEN
          H_SCORES(l_index).TOTAL_SCORE := 
                H_SCORES(l_index).TOTAL_SCORE-H_SCORES(l_index).CONTACT_SCORE+l_score;
          H_SCORES(l_index).CONTACT_SCORE := l_score;
        END IF;
      END IF;
      IF NOT H_PARTY_ID_LIST.EXISTS(l_index) THEN
        H_PARTY_ID_LIST(l_index) := 1;
        H_PARTY_ID(l_party_id_idx) := l_ct_party_id;
        l_party_id_idx:= l_party_id_idx+1;
      END IF;
      IF p_ins_details = 'Y' THEN
        h_ct_id(detcnt) := l_org_contact_id;
        h_ct_party_id(detcnt) := l_ct_party_id;
        IF (p_emax_score > 0) THEN 
            h_ct_score(detcnt) := round((l_score/p_emax_score)*100);
        ELSE 
            h_ct_score(detcnt) := 0; 
        END IF; 
        detcnt := detcnt +1;
      END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval_contact_level l_org_contact_id =  '||l_org_contact_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'In eval_contact_level l_ct_party_id =  '||l_ct_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'In eval_contact_level l_score =  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    END LOOP;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'===========END of LOOP=====================',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    CLOSE l_contact_cur;
    ROLLBACK to eval_start;
    IF p_ins_details = 'Y' THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval_contact_level inserting into HZ_MATCHED_CONTACTS_GT from the H_CT_ID list',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      FORALL I in 1..h_ct_id.COUNT 
        INSERT INTO HZ_MATCHED_CONTACTS_GT (SEARCH_CONTEXT_ID,ORG_CONTACT_ID,PARTY_ID,SCORE) VALUES (
          l_search_ctx_id, h_ct_id(I), h_ct_party_id(I), h_ct_score(I));
    END IF;
  END;

  /**  Private procedure to acquire and score at contact point level  ***/
  PROCEDURE eval_cpt_level(p_contact_pt_contains_str VARCHAR2,p_call_type VARCHAR2, p_index NUMBER, p_ins_details VARCHAR2,p_emax_score NUMBER) IS
    l_party_id_idx NUMBER:=1;
    l_ctx_id NUMBER;
    h_cpt_id HZ_PARTY_SEARCH.IDList;
    h_cpt_party_id HZ_PARTY_SEARCH.IDList;
    h_cpt_score HZ_PARTY_SEARCH.IDList;
    detcnt NUMBER := 1;
    l_cpt_flag VARCHAR2(1) := 'N';
    is_a_match VARCHAR2(1) := 'Y';
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'calling the procedure eval_cpt_level',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    SAVEPOINT eval_start;
    IF l_match_str = ' AND ' AND p_call_type = 'AND' THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match rule is AND and call type is AND. Inserting into HZ_DQM_PARTIES_GT, from the H_PARTY_ID list',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      H_PARTY_ID.DELETE;
      H_PARTY_ID_LIST.DELETE;
    ELSIF l_match_str = ' OR ' AND p_call_type = 'AND' THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match rule is OR and call type is AND. Inserting into HZ_DQM_PARTIES_GT, from the H_PARTY_ID list',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    ELSE
      IF (p_restrict_sql IS NULL OR instrb(p_restrict_sql, 'SELECTIVE')=0)
         and check_estimate_hits('CONTACT_POINTS',p_contact_pt_contains_str)>l_max_thresh THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval contact point level estimated hits exceed threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        IF p_index>1 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval contact point level number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
          FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED');
          FND_MSG_PUB.ADD;
          RAISE FND_API.G_EXC_ERROR;
        ELSE
          push_eval;
          RETURN;
        END IF;
      END IF;
      l_ctx_id := NULL;
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'========== START LOOPING THROUGH WHAT IS RETURNED BY OPEN_CONTACT_PT_CURSOR ================',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    open_contact_pt_cursor(p_dup_party_id,NULL, p_restrict_sql, p_contact_pt_contains_str,l_ctx_id,  p_search_merged, 'N', 'N',l_contact_pt_cur);
    LOOP 
      FETCH l_contact_pt_cur INTO
         l_contact_pt_id,  l_cpt_type, l_cpt_party_id,  l_cpt_ps_id, l_cpt_contact_id , l_TX1, l_TX6, l_TX5;
      EXIT WHEN l_contact_pt_cur%NOTFOUND;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'----------------------------------------------------------------------------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Processing party_id -  '||l_cpt_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Contact Point Type -  '||l_cpt_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      --Fix for bug 4417124 
      IF l_use_contact_cpt_info OR l_cpt_contact_id IS NULL THEN
        l_index := map_id(l_cpt_party_id);
        l_score := GET_CONTACT_POINTS_SCORE(l_match_idx,l_TX1,l_TX6,l_TX5);
        IF NOT H_SCORES.EXISTS(l_index) THEN
          H_SCORES(l_index) := get_new_score_rec(l_score,defpt,defps,defct,l_score, l_cpt_party_id, l_cpt_ps_id, l_cpt_contact_id,l_contact_pt_id);
          H_SCORES(l_index).cpt_type_match(l_cpt_type) := l_score;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Processing second Time for this party',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_index is -  '||l_index,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        ELSE
          IF(H_SCORES(l_index).cpt_type_match.EXISTS(l_cpt_type)) then
            IF l_score > H_SCORES(l_index).cpt_type_match(l_cpt_type) then
              H_SCORES(l_index).TOTAL_SCORE :=
              H_SCORES(l_index).TOTAL_SCORE-(H_SCORES(l_index).CONTACT_POINT_SCORE-H_SCORES(l_index).cpt_type_match(l_cpt_type))+l_score;
              H_SCORES(l_index).CONTACT_POINT_SCORE := H_SCORES(l_index).CONTACT_POINT_SCORE-H_SCORES(l_index).cpt_type_match(l_cpt_type) + l_score;
              H_SCORES(l_index).cpt_type_match(l_cpt_type) := l_score;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Passed in score greater than existing score',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'H_SCORES(l_index).TOTAL_SCORE is -  '||H_SCORES(l_index).TOTAL_SCORE,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'H_SCORES(l_index).CONTACT_POINT_SCORE is -  '||H_SCORES(l_index).CONTACT_POINT_SCORE,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'H_SCORES(l_index).cpt_type_match(l_cpt_type) is -  '||H_SCORES(l_index).cpt_type_match(l_cpt_type),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            END IF;
          ELSE
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Passed in score less than or equal to the existing score ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            H_SCORES(l_index).TOTAL_SCORE :=
            		H_SCORES(l_index).TOTAL_SCORE+l_score;
            H_SCORES(l_index).CONTACT_POINT_SCORE := H_SCORES(l_index).CONTACT_POINT_SCORE+l_score;
            H_SCORES(l_index).cpt_type_match(l_cpt_type) := l_score;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'H_SCORES(l_index).TOTAL_SCORE is -  '||H_SCORES(l_index).TOTAL_SCORE,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'H_SCORES(l_index).CONTACT_POINT_SCORE is -  '||H_SCORES(l_index).CONTACT_POINT_SCORE,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'H_SCORES(l_index).cpt_type_match(l_cpt_type) is -  '||H_SCORES(l_index).cpt_type_match(l_cpt_type),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
          END IF;
        END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'call type is -  '||p_call_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'match string is -  '||l_match_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        IF NOT H_PARTY_ID_LIST.EXISTS(l_index) THEN
          -- If rule is match all 
          IF l_match_str = ' AND ' THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match string is AND ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            IF H_SCORES(l_index).cpt_type_match.count = distinct_search_cpt_types then
              is_a_match := 'Y';
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'is_a_match is  '||is_a_match,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            ELSE
              is_a_match := 'N';
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'is_a_match is  '||is_a_match,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            END IF;
          -- Else it is construed to be a match anyway
          ELSE
            is_a_match := 'Y';
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'is_a_match is  '||is_a_match,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
          END IF;
        IF (is_a_match='Y') then
          H_PARTY_ID_LIST(l_index) := 1;
          H_PARTY_ID(l_party_id_idx) := l_cpt_party_id;
          l_party_id_idx:= l_party_id_idx+1;
      end if;
        END IF;
        IF p_ins_details = 'Y' THEN
          IF l_match_str = ' AND ' THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match string is AND ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            IF H_SCORES(l_index).cpt_type_match.count = distinct_search_cpt_types then
              is_a_match := 'Y';
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'is_a_match is  '||is_a_match,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            ELSE
              is_a_match := 'N';
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'is_a_match is  '||is_a_match,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            END IF;
          ELSE
            is_a_match := 'Y';
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'is_a_match is  '||is_a_match,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
          END IF;
          IF (is_a_match='Y') THEN
          FOR I IN 1..h_cpt_id.COUNT LOOP
          IF h_cpt_id(I)=l_contact_pt_id THEN
          	 l_cpt_flag := 'Y';
          END IF;
          END LOOP;
          IF l_cpt_flag = 'Y' THEN
          	 NULL;
          ELSE
         	 h_cpt_id(detcnt) := l_contact_pt_id;
          	 h_cpt_party_id(detcnt) := l_cpt_party_id;
          	 IF (p_emax_score > 0) THEN 
              h_cpt_score(detcnt) := round((l_score/p_emax_score)*100);
            ELSE 
              h_cpt_score(detcnt) := 0; 
          	 END IF; 
            detcnt := detcnt +1;
          END IF;
      end if;
        END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval_cpt_level l_contact_pt_id =  '||l_contact_pt_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'In eval_cpt_level l_cpt_party_id =  '||l_cpt_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'In eval_cpt_level l_score =  '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
    END LOOP;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'===========END of LOOP=====================',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    CLOSE l_contact_pt_cur;
    ROLLBACK to eval_start;
    IF p_ins_details = 'Y' THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval_contact_point_level inserting into HZ_MATCHED_CPTS_GT from the H_CPT_ID list',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      FORALL I in 1..h_cpt_id.COUNT 
        INSERT INTO HZ_MATCHED_CPTS_GT (SEARCH_CONTEXT_ID,CONTACT_POINT_ID,PARTY_ID,SCORE) VALUES (
          l_search_ctx_id, h_cpt_id(I), h_cpt_party_id(I), h_cpt_score(I));
    END IF;
  END eval_cpt_level;

  /**  Private procedure to call the eval procedure at each entity in the correct order ***/
  PROCEDURE do_eval (p_index NUMBER) IS
    l_ctx_id NUMBER;
    l_threshold NUMBER;
    other_acq_criteria_exists BOOLEAN; 
    acq_cnt NUMBER; 
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'calling the procedure do_eval',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    IF (p_index=5 AND call_order(5) <> 'NONE' AND H_PARTY_ID.COUNT=0) THEN
     l_threshold :=  round(( l_entered_max_score / 685) * 75); 
    other_acq_criteria_exists := TRUE ;
    --check if acquisition criteria exists for any other entity
    IF l_party_contains_str IS NOT NULL THEN 
    	acq_cnt := 1; 
    END IF; 
    IF l_party_site_contains_str IS NOT NULL THEN 
    	acq_cnt := acq_cnt+1; 
    END IF; 
    IF l_contact_contains_str IS NOT NULL THEN 
    	acq_cnt := acq_cnt+1; 
    END IF;
    IF l_contact_pt_contains_str IS NOT NULL THEN 
    	acq_cnt := acq_cnt+1; 
    END IF;  
    IF acq_cnt>1 THEN 
    	other_acq_criteria_exists := TRUE; 
    ELSE
    	other_acq_criteria_exists := FALSE; 
    END IF;  
      hz_utility_v2pub.debug(p_message=>'count of entities having acquisition attributes =  '||acq_cnt,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'call_max_score(p_index) =  '||call_max_score(p_index),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_threshold =  '||l_threshold,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    IF(l_match_str = ' AND ' AND other_acq_criteria_exists) THEN
    	IF ( call_max_score(p_index) < l_threshold) THEN 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'When max score of entity level<l_threshold, do not evaluate ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
	     	RETURN;	
    	ELSE 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In do eval number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
	     	FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED'); 
	     	FND_MSG_PUB.ADD; 
	     	RAISE FND_API.G_EXC_ERROR; 
    	END IF; 
    ELSE
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In do eval number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
     END IF; 
    END IF;
    IF call_order(p_index) = 'PARTY' AND l_party_contains_str IS NOT NULL THEN
      eval_party_level(l_party_contains_str,call_type(p_index), p_index);
    ELSIF call_order(p_index) = 'PARTY_SITE' AND l_party_site_contains_str IS NOT NULL THEN
      eval_party_site_level(l_party_site_contains_str,call_type(p_index), p_index,p_ins_details,call_max_score(p_index));
    ELSIF call_order(p_index) = 'CONTACT' AND l_contact_contains_str IS NOT NULL THEN
      eval_contact_level(l_contact_contains_str,call_type(p_index), p_index,p_ins_details,call_max_score(p_index));
    ELSIF call_order(p_index) = 'CONTACT_POINT' AND l_contact_pt_contains_str IS NOT NULL THEN
      eval_cpt_level(l_contact_pt_contains_str,call_type(p_index), p_index,p_ins_details,call_max_score(p_index));
    END IF;
  END;
  /************ End of find_parties private procedures **********/ 

  BEGIN

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'--------------------------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Entering Procedure find_parties',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Input Parameters are :',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_match_type =  '||p_match_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_restrict_sql =  '||p_restrict_sql,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_dup_set_id =  '||p_dup_set_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_search_merged =  '||p_search_merged,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_dup_party_id =  '||p_dup_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    -- ************************************
    -- STEP 1. Initialization and error checks

    l_match_str := ' AND ';
    IF p_match_type = 'AND' THEN
      l_match_str := ' AND ';
    ELSIF p_match_type = 'OR' THEN
      l_match_str := ' OR ';
    END IF;
    l_entered_max_score:= init_search(p_party_search_rec,p_party_site_list,p_contact_list,p_contact_point_list, l_match_str, l_party_max_score, l_ps_max_score, l_contact_max_score, l_cpt_max_score);
    IF l_entered_max_score = 0 THEN l_entered_max_score:=1; END IF;


    --Fix for bug 4417124 

    SELECT use_contact_addr_flag, use_contact_cpt_flag 
    INTO l_use_contact_addr_flag, l_use_contact_cpt_flag 
    FROM hz_match_rules_b 
    WHERE match_rule_id = 32; 

    IF NVL(l_use_contact_addr_flag, 'Y') = 'N' THEN
      l_use_contact_addr_info := FALSE; 
    END IF; 

    IF NVL(l_use_contact_cpt_flag, 'Y') = 'N' THEN
      l_use_contact_cpt_info := FALSE; 
    END IF; 

   --End fix for bug 4417124

    IF p_dup_batch_id IS NOT NULL THEN
      l_max_thresh:=nvl(FND_PROFILE.VALUE('HZ_DQM_MAX_EVAL_THRESH_BATCH'),10000);
    ELSE
      l_max_thresh:=nvl(FND_PROFILE.VALUE('HZ_DQM_MAX_EVAL_THRESH'),200);
    END IF;
    IF nvl(FND_PROFILE.VALUE('HZ_DQM_SCORE_UNTIL_THRESH'),'N')='Y' THEN
      g_score_until_thresh := true;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'g_score_until_thresh is true',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    ELSE
      g_score_until_thresh := false;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'g_score_until_thresh is false',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Maximum records that will be evaluated is  '||l_max_thresh,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    -- ************************************************************
    -- STEP 2. Setup of intermedia query strings for Acquisition query
    l_party_site_contains_str := INIT_PARTY_SITES_QUERY(l_match_str,l_ps_denorm_str);
    l_contact_contains_str := INIT_CONTACTS_QUERY(l_match_str,l_ct_denorm_str);
    l_contact_pt_contains_str := INIT_CONTACT_POINTS_QUERY(l_match_str,l_cpt_denorm_str);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Commencing the DENORM LOGIC in find_parties',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    l_denorm_max_score:=0;
    l_non_denorm_max_score:=0;
    IF l_ps_denorm_str IS NOT NULL THEN
      l_denorm_max_score := l_denorm_max_score+l_ps_max_score;
      l_denorm_str := l_ps_denorm_str;
    ELSE
      l_non_denorm_max_score := l_non_denorm_max_score+l_ps_max_score;
    END IF;
    IF l_ct_denorm_str IS NOT NULL THEN
      l_denorm_max_score := l_denorm_max_score+l_contact_max_score;
      IF l_denorm_str IS NOT NULL THEN
        l_denorm_str := l_denorm_str || ' OR ' ||l_ct_denorm_str;
      ELSE
        l_denorm_str := l_ct_denorm_str;
      END IF;
    ELSE
      l_non_denorm_max_score := l_non_denorm_max_score+l_contact_max_score;
    END IF;
    IF l_cpt_denorm_str IS NOT NULL THEN
      l_denorm_max_score := l_denorm_max_score+l_cpt_max_score;
      IF l_denorm_str IS NOT NULL THEN
        l_denorm_str := l_denorm_str || ' OR ' ||l_cpt_denorm_str;
      ELSE
        l_denorm_str := l_cpt_denorm_str;
      END IF;
    ELSE
      l_non_denorm_max_score := l_non_denorm_max_score+l_cpt_max_score;
    END IF;
    l_party_contains_str := INIT_PARTY_QUERY(l_match_str, l_denorm_str, l_party_max_score, l_denorm_max_score, l_non_denorm_max_score, round((75/685)*l_entered_max_score));
    init_score_context(p_party_search_rec,p_party_site_list,p_contact_list,p_contact_point_list);

    -- Setup Search Context ID
    SELECT hz_search_ctx_s.nextval INTO l_search_ctx_id FROM dual;
    x_search_ctx_id := l_search_ctx_id;

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Search context id in find_parties is  '||x_search_ctx_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    IF l_party_contains_str IS NULL THEN
      defpt := 1;
    END IF;
    IF l_party_site_contains_str IS NULL THEN
      defps := 1;
    END IF;
    IF l_contact_contains_str IS NULL THEN
      defct := 1;
    END IF;
    IF l_contact_pt_contains_str IS NULL THEN
      defcpt := 1;
    END IF;

    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'------------------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      hz_utility_v2pub.debug(p_message=>'In find_parties l_match_str =   '||l_match_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'In find_parties l_party_contains_str =  '||l_party_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'In find_parties l_party_site_contains_str =  '||l_party_site_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'In find_parties l_contact_contains_str =  '||l_contact_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'In find_parties l_contact_pt_contains_str =  '||l_contact_pt_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'In find_parties l_search_ctx_id =  '||l_search_ctx_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    FOR I in 1..5 LOOP
      do_eval(I);
    END LOOP;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In find_parties. This is a Search Rule. Evaluating Matches. Threshold : 11 ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    x_num_matches := 0;
    l_num_eval := 0;
    IF l_match_str = ' OR ' THEN
      l_party_id := H_SCORES.FIRST;
    ELSE
      l_party_id := H_PARTY_ID_LIST.FIRST;
    END IF;
    WHILE l_party_id IS NOT NULL LOOP
      l_num_eval:= l_num_eval+1;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'----------------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      hz_utility_v2pub.debug(p_message=>'In find_parties Match Party ID =  '||H_SCORES(l_party_id).PARTY_ID,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'In find_parties Score =  '||round((H_SCORES(l_party_id).TOTAL_SCORE/l_entered_max_score)*100),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In find_parties inserting Search Rule results into HZ_MATCHED_PARTIES_GT',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      IF (H_SCORES(l_party_id).TOTAL_SCORE/l_entered_max_score)>=(75/685) THEN
            INSERT INTO HZ_MATCHED_PARTIES_GT (SEARCH_CONTEXT_ID, PARTY_ID, SCORE) 
            VALUES (l_search_ctx_id,H_SCORES(l_party_id).PARTY_ID,round((H_SCORES(l_party_id).TOTAL_SCORE/l_entered_max_score)*100));
            x_num_matches := x_num_matches+1;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'----------------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
      IF l_match_str = ' OR ' THEN
        l_party_id:=H_SCORES.NEXT(l_party_id);
      ELSE
        l_party_id:=H_PARTY_ID_LIST.NEXT(l_party_id);
      END IF;
    END LOOP;
    HZ_DQM_SEARCH_UTIL.set_num_eval(l_num_eval);
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Exiting Procedure find_parties',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'--------------------------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
EXCEPTION
  WHEN L_RETURN_IMM_EXC THEN
    RETURN;
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_32.find_parties');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END find_parties;

PROCEDURE find_persons (
      p_rule_id               IN      NUMBER,
      p_party_search_rec      IN      HZ_PARTY_SEARCH.party_search_rec_type,
      p_party_site_list       IN      HZ_PARTY_SEARCH.party_site_list,
      p_contact_list          IN      HZ_PARTY_SEARCH.contact_list,
      p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      p_search_merged         IN      VARCHAR2,
      p_dup_party_id          IN      NUMBER,
      p_dup_set_id            IN      NUMBER,
      p_dup_batch_id          IN      NUMBER,
      p_ins_details           IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER
) IS

  -- Strings to hold the generated Intermedia query strings
  l_party_contains_str VARCHAR2(32000); 
  l_party_site_contains_str VARCHAR2(32000);
  l_contact_contains_str VARCHAR2(32000);
  l_contact_pt_contains_str VARCHAR2(32000);
  l_denorm_str VARCHAR2(32000);
  l_ps_denorm_str VARCHAR2(32000);
  l_ct_denorm_str VARCHAR2(32000);
  l_cpt_denorm_str VARCHAR2(32000);

  -- Other local variables
  l_match_str VARCHAR2(30); -- Match type (AND or OR)
  l_sqlstr VARCHAR2(32000); -- Dynamic SQL String
  -- For Score calculation
  l_max_score NUMBER;
  l_match_idx NUMBER;
  l_entered_max_score NUMBER;
  FIRST BOOLEAN;
  l_search_ctx_id NUMBER; -- Generated Search Context ID

  l_TX1 VARCHAR2(2000);
  l_TX10 VARCHAR2(2000);
  l_TX11 VARCHAR2(2000);
  l_TX14 VARCHAR2(2000);
  l_TX15 VARCHAR2(2000);
  l_TX156 VARCHAR2(2000);
  l_TX158 VARCHAR2(2000);
  l_TX2 VARCHAR2(2000);
  l_TX22 VARCHAR2(2000);
  l_TX3 VARCHAR2(2000);
  l_TX34 VARCHAR2(2000);
  l_TX39 VARCHAR2(2000);
  l_TX4 VARCHAR2(2000);
  l_TX40 VARCHAR2(2000);
  l_TX44 VARCHAR2(2000);
  l_TX45 VARCHAR2(2000);
  l_TX46 VARCHAR2(2000);
  l_TX47 VARCHAR2(2000);
  l_TX5 VARCHAR2(2000);
  l_TX6 VARCHAR2(2000);
  l_TX9 VARCHAR2(2000);
  H_SCORES HZ_PARTY_SEARCH.score_list;
  H_PARTY_ID HZ_PARTY_SEARCH.IDList;
  H_PARTY_ID_LIST HZ_PARTY_SEARCH.IDList;

  l_score NUMBER;
  l_idx NUMBER;
  l_party_cur HZ_PARTY_STAGE.StageCurTyp;
  l_party_site_cur HZ_PARTY_STAGE.StageCurTyp;
  l_contact_cur HZ_PARTY_STAGE.StageCurTyp;
  l_contact_pt_cur HZ_PARTY_STAGE.StageCurTyp;
  l_party_id NUMBER;
  l_ps_party_id NUMBER;
  l_ct_party_id NUMBER;
  l_cpt_party_id NUMBER;
  l_cpt_ps_id NUMBER;
  l_cpt_contact_id NUMBER;
  l_cpt_type VARCHAR2(100);
  l_party_site_id NUMBER;
  l_org_contact_id NUMBER;
  l_contact_pt_id NUMBER;
  l_cpt_level VARCHAR2(100);
  l_ps_contact_id NUMBER;
  l_party_max_score NUMBER;
  l_ps_max_score NUMBER;
  l_contact_max_score NUMBER;
  l_cpt_max_score NUMBER;
  l_denorm_max_score NUMBER;
  l_non_denorm_max_score NUMBER;

  defpt NUMBER :=0;
  defps NUMBER :=0;
  defct NUMBER :=0;
  defcpt NUMBER :=0;
  l_index NUMBER;
  l_max_thresh NUMBER;
  l_tmp NUMBER;
  l_merge_flag VARCHAR2(1);
  l_num_eval NUMBER:=0;

  L_RETURN_IMM_EXC Exception;

  
  /********************* Find Parties private procedures *******/
  PROCEDURE set_person_party_type IS
  BEGIN
    g_party_stage_rec.TX36:= 
        HZ_TRANS_PKG.EXACT(
             'PERSON'
             ,null,'PARTY_TYPE'
             ,'PARTY');
  END;
    
  PROCEDURE unset_person_party_type IS
  BEGIN
    g_party_stage_rec.TX36 := '';
  END;
  
  FUNCTION get_person_id(p_party_id NUMBER, p_contact_id NUMBER) 
  RETURN NUMBER IS
    l_party_type VARCHAR2(255);
    l_person_id NUMBER(15);
  BEGIN
    SELECT party_type INTO l_party_type from hz_parties where party_id = p_party_id;
    IF l_party_type = 'PERSON' THEN
      RETURN p_party_id;
    ELSIF p_contact_id IS NULL THEN
      RETURN NULL;
    ELSE
      BEGIN 
        SELECT subject_id INTO l_person_id FROM HZ_RELATIONSHIPS r, HZ_ORG_CONTACTS oc, hz_parties p
        WHERE oc.org_contact_id = p_contact_id
        AND r.relationship_id = oc.party_relationship_id 
        AND r.object_id = p_party_id
        AND p.party_id = r.subject_id 
        AND p.party_type = 'PERSON'
        AND ROWNUM=1;
        
        RETURN l_person_id;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RETURN NULL;
      END;      
    END IF;
  END;  

  PROCEDURE push_eval IS
  BEGIN
    H_PARTY_ID.DELETE;
    H_PARTY_ID_LIST.DELETE;
    H_SCORES.DELETE;        
    g_mappings.DELETE;
    HZ_DQM_SEARCH_UTIL.set_num_eval(0);
    call_order(5) := call_order(1);
    call_type(5) := 'AND';
    call_max_score(5) := call_max_score(1);
    call_type(2) := 'OR';
  END;

  /**  Private procedure to acquire and score at party level  ***/
  PROCEDURE eval_party_level(p_party_contains_str VARCHAR2,p_call_type VARCHAR2, p_index NUMBER) IS
    l_party_id_idx NUMBER:=1;
    l_ctx_id NUMBER;
    l_TX35_new varchar2(4000);
  BEGIN
    SAVEPOINT eval_start;
    set_person_party_type;
    IF l_match_str = ' AND ' AND p_call_type = 'AND' THEN
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      H_PARTY_ID.DELETE;
      H_PARTY_ID_LIST.DELETE;
    ELSIF l_match_str = ' OR ' AND p_call_type = 'AND' THEN
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    ELSE
      IF (p_restrict_sql IS NULL OR instrb(p_restrict_sql, 'SELECTIVE')=0)
         and check_estimate_hits('PARTY',p_party_contains_str)>l_max_thresh THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval party level estimated hits exceed threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        IF g_party_stage_rec.TX8 IS NOT NULL AND nvl(FND_PROFILE.VALUE('HZ_DQM_PN_THRESH_RESOLUTION'),'NONE')='SQL' THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval party level resolution option is set to SQL search.',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
          IF (l_party_site_contains_str IS NULL AND
             l_contact_contains_str IS NULL AND
             l_contact_pt_contains_str IS NULL) AND NOT g_other_party_level_attribs IS NULL THEN
            return_direct_matches(p_restrict_sql,l_match_str,l_max_thresh,l_search_ctx_id,null,null, x_num_matches);
            RAISE L_RETURN_IMM_EXC;
          ELSE
            open_party_cursor_direct(p_dup_party_id, p_restrict_sql, l_match_str,null,p_party_contains_str,l_party_cur);
          END IF;
        ELSE
          IF p_index>1 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval party level number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED');
            FND_MSG_PUB.ADD;
            RAISE FND_API.G_EXC_ERROR;
          ELSE
            push_eval;
            RETURN;
          END IF;
        END IF;
      END IF;
      l_ctx_id := NULL;
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    END IF;
    IF l_party_cur IS NULL OR (not l_party_cur%ISOPEN) THEN
      open_party_cursor(p_dup_party_id, p_restrict_sql, p_party_contains_str,l_ctx_id, l_match_str,p_search_merged,l_party_cur);
    END IF;
    LOOP 
      FETCH l_party_cur INTO
         l_party_id , l_TX34, l_TX40, l_TX158, l_TX39, l_TX44, l_TX45, l_TX46, l_TX47;
      EXIT WHEN l_party_cur%NOTFOUND;
      l_index := map_id(l_party_id);
      l_score := GET_PARTY_SCORE(l_TX34,l_TX40,l_TX158,l_TX39,l_TX44,l_TX45,l_TX46,l_TX47);
      IF NOT H_SCORES.EXISTS(l_index) THEN
        H_SCORES(l_index) := get_new_score_rec(l_score,l_score,defps,defct,defcpt, l_party_id, null, null,null);
      ELSE
        H_SCORES(l_index).TOTAL_SCORE := 
                H_SCORES(l_index).TOTAL_SCORE+l_score;
        H_SCORES(l_index).PARTY_SCORE := l_score;
      END IF;
      IF NOT H_PARTY_ID_LIST.EXISTS(l_index) AND H_SCORES.EXISTS(l_index) THEN
        H_PARTY_ID_LIST(l_index) := 1;
        H_PARTY_ID(l_party_id_idx) := l_party_id;
        l_party_id_idx:= l_party_id_idx+1;
      END IF;
      IF (l_party_id_idx-1)>l_max_thresh THEN
         IF p_index=1 AND call_order(2) = 'PARTY_SITE' 
          AND call_type(2) = 'AND' AND l_contact_contains_str IS NULL
          AND nvl(FND_PROFILE.VALUE('HZ_DQM_PN_THRESH_RESOLUTION'),'NONE')='SQL' 
          AND l_contact_pt_contains_str IS NULL THEN
          H_PARTY_ID.DELETE(l_party_id_idx-1);
          H_PARTY_ID_LIST.DELETE(l_index);
          H_SCORES.DELETE(l_index);
          EXIT;
        END IF;
        CLOSE l_party_cur;
        IF p_index>1 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval party level number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
          FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED');
          FND_MSG_PUB.ADD;
          RAISE FND_API.G_EXC_ERROR;
        ELSE
          push_eval;
          RETURN;
        END IF;
      END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Party Level Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_party_id '||l_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    END LOOP;
    CLOSE l_party_cur;
    ROLLBACK to eval_start;
  END;
  PROCEDURE open_person_contact_cursor(
            p_contains_str  VARCHAR2, 
            p_search_ctx_id  NUMBER, 
            x_cursor OUT HZ_PARTY_STAGE.StageCurTyp) IS
  BEGIN
    OPEN x_cursor FOR 
      SELECT /*+ INDEX(stage HZ_STAGED_CONTACTS_U1) */ ORG_CONTACT_ID, PARTY_ID, TX2, TX156, TX6, TX5
      FROM HZ_STAGED_CONTACTS stage
      WHERE contains( concat_col, p_contains_str)>0
      AND ORG_CONTACT_ID in (
            SELECT  /*+ ORDERED INDEX(d hz_dqm_parties_gt_n1) USE_NL(d r)*/ 
            org_contact_id
            from hz_dqm_parties_gt d, hz_relationships r, hz_org_contacts oc
            where d.party_id = r.subject_id
            and oc.party_relationship_id = r.relationship_id
            and d.search_context_id = p_search_ctx_id);   
  exception
    when others then
      if (instrb(SQLERRM,'DRG-51030')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_WILDCARD_ERR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      elsif (instrb(SQLERRM,'DRG-50943')>0) then 
        FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_SEARCH_ERROR');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      else 
        RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
      end if;
  END;

  /**  Private procedure to acquire and score at party site level  ***/
  PROCEDURE eval_party_site_level(p_party_site_contains_str VARCHAR2,p_call_type VARCHAR2, p_index NUMBER,p_ins_details VARCHAR2,p_emax_score NUMBER) IS
    l_party_id_idx NUMBER:=1;
    l_ctx_id NUMBER;
    h_ps_id HZ_PARTY_SEARCH.IDList;
    h_ps_party_id HZ_PARTY_SEARCH.IDList;
    h_ps_score HZ_PARTY_SEARCH.IDList;
    detcnt NUMBER := 1;
    l_person_id NUMBER;
  BEGIN
    SAVEPOINT eval_start;
    unset_person_party_type;
    IF l_match_str = ' AND ' AND p_call_type = 'AND' THEN
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      H_PARTY_ID.DELETE;
      H_PARTY_ID_LIST.DELETE;
    ELSIF l_match_str = ' OR ' AND p_call_type = 'AND' THEN
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    ELSE
      l_party_id_idx := H_PARTY_ID.COUNT+1;
      l_ctx_id := NULL;
    END IF;
    open_party_site_cursor(p_dup_party_id,NULL, p_restrict_sql, p_party_site_contains_str,l_ctx_id, p_search_merged,'N', 'Y',l_party_site_cur);
    LOOP 
      FETCH l_party_site_cur INTO
         l_party_site_id, l_ps_party_id, l_ps_contact_id , l_TX3, l_TX4, l_TX9, l_TX10, l_TX11, l_TX14, l_TX15, l_TX22;
      EXIT WHEN l_party_site_cur%NOTFOUND;
      IF l_ctx_id IS NULL THEN
        l_person_id := get_person_id(l_ps_party_id, l_ps_contact_id);
      ELSE
        l_person_id := l_ps_party_id;
      END IF;
      IF l_person_id IS NOT NULL AND l_person_id<>nvl(p_dup_party_id,-1) THEN
        l_index := map_id(l_person_id);
        l_score := GET_PARTY_SITES_SCORE(l_match_idx,l_TX3,l_TX4,l_TX9,l_TX10,l_TX11,l_TX14,l_TX15,l_TX22);
        IF NOT H_SCORES.EXISTS(l_index) THEN
          IF l_ctx_id IS NULL THEN
            H_SCORES(l_index) := get_new_score_rec(l_score,defpt,l_score,defct,defcpt, l_person_id, l_party_site_id, null,null);
          END IF;
        ELSE
          IF l_score > H_SCORES(l_index).PARTY_SITE_SCORE THEN
            H_SCORES(l_index).TOTAL_SCORE := 
                  H_SCORES(l_index).TOTAL_SCORE-H_SCORES(l_index).PARTY_SITE_SCORE+l_score;
            H_SCORES(l_index).PARTY_SITE_SCORE := l_score;
          END IF;
        END IF;
        IF NOT H_PARTY_ID_LIST.EXISTS(l_index) AND H_SCORES.EXISTS(l_index) THEN
          H_PARTY_ID_LIST(l_index) := 1;
          H_PARTY_ID(l_party_id_idx) := l_person_id;
          l_party_id_idx:= l_party_id_idx+1;
        END IF;
        IF (l_party_id_idx-1)>l_max_thresh THEN
          CLOSE l_party_site_cur;
          IF p_index>1 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval party site level number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED');
            FND_MSG_PUB.ADD;
            RAISE FND_API.G_EXC_ERROR;
          ELSE
            push_eval;
            RETURN;
          END IF;
        END IF;
        IF p_ins_details = 'Y' THEN
          h_ps_id(detcnt) := l_party_site_id;
          h_ps_party_id(detcnt) := l_person_id;
          IF (p_emax_score > 0) THEN 
              h_ps_score(detcnt) := round((l_score/p_emax_score)*100);
          ELSE 
              h_ps_score(detcnt) := 0; 
          END IF; 
          detcnt := detcnt +1;
        END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Party Site Level Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_party_site_id '||l_party_site_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_ps_party_id '||l_person_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
    END LOOP;
    CLOSE l_party_site_cur;
    ROLLBACK to eval_start;
    IF p_ins_details = 'Y' THEN
      FORALL I in 1..h_ps_id.COUNT 
        INSERT INTO HZ_MATCHED_PARTY_SITES_GT (SEARCH_CONTEXT_ID,PARTY_SITE_ID,PARTY_ID,SCORE) VALUES (
          l_search_ctx_id, h_ps_id(I), h_ps_party_id(I), h_ps_score(I));
    END IF;
  END;

  /**  Private procedure to acquire and score at party site level  ***/
  PROCEDURE eval_contact_level(p_contact_contains_str VARCHAR2,p_ins_details VARCHAR2,p_emax_score NUMBER) IS
    l_party_id_idx NUMBER:=1;
    l_ctx_id NUMBER;
    h_ct_id HZ_PARTY_SEARCH.IDList;
    h_ct_party_id HZ_PARTY_SEARCH.IDList;
    h_ct_score HZ_PARTY_SEARCH.IDList;
    detcnt NUMBER := 1;
    l_person_id NUMBER;
  BEGIN
    SAVEPOINT eval_start;
    l_ctx_id := l_search_ctx_id;
    unset_person_party_type;
    FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    open_person_contact_cursor(p_contact_contains_str,l_ctx_id, l_contact_cur);
    LOOP 
      FETCH l_contact_cur INTO
         l_org_contact_id, l_ct_party_id , l_TX2, l_TX156, l_TX6, l_TX5;
      EXIT WHEN l_contact_cur%NOTFOUND;
      l_person_id := get_person_id(l_ct_party_id, l_org_contact_id);
      l_index := map_id(l_person_id);
      IF l_person_id IS NOT NULL AND H_SCORES.EXISTS(l_index) AND l_person_id<>nvl(p_dup_party_id,-1) THEN
        l_score := GET_CONTACTS_SCORE(l_match_idx,l_TX2,l_TX156,l_TX6,l_TX5);
        IF l_score > H_SCORES(l_index).CONTACT_SCORE THEN
          H_SCORES(l_index).TOTAL_SCORE := 
                H_SCORES(l_index).TOTAL_SCORE-H_SCORES(l_index).CONTACT_SCORE+l_score;
          H_SCORES(l_index).CONTACT_SCORE := l_score;
        END IF;
      END IF;
      IF p_ins_details = 'Y' THEN
        h_ct_id(detcnt) := l_org_contact_id;
        h_ct_party_id(detcnt) := l_person_id;
        IF (p_emax_score > 0) THEN 
            h_ct_score(detcnt) := round((l_score/p_emax_score)*100);
        ELSE 
            h_ct_score(detcnt) := 0; 
        END IF; 
        detcnt := detcnt +1;
      END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Contact Level Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_org_contact_id '||l_org_contact_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_ct_party_id '||l_person_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    END LOOP;
    CLOSE l_contact_cur;
    ROLLBACK to eval_start;
    IF p_ins_details = 'Y' THEN
      FORALL I in 1..h_ct_id.COUNT 
        INSERT INTO HZ_MATCHED_CONTACTS_GT (SEARCH_CONTEXT_ID,ORG_CONTACT_ID,PARTY_ID,SCORE) VALUES (
          l_search_ctx_id, h_ct_id(I), h_ct_party_id(I), h_ct_score(I));
    END IF;
  END;

  /**  Private procedure to acquire and score at contact point level  ***/
  PROCEDURE eval_cpt_level(p_contact_pt_contains_str VARCHAR2,p_call_type VARCHAR2, p_index NUMBER, p_ins_details VARCHAR2,p_emax_score NUMBER) IS
    l_party_id_idx NUMBER:=1;
    l_ctx_id NUMBER;
    h_cpt_id HZ_PARTY_SEARCH.IDList;
    h_cpt_party_id HZ_PARTY_SEARCH.IDList;
    h_cpt_score HZ_PARTY_SEARCH.IDList;
    detcnt NUMBER := 1;
    l_person_id NUMBER;
    is_a_match VARCHAR2(1) := 'Y';
    l_cpt_flag VARCHAR2(1) := 'N';
  BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'-----------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'calling the procedure eval_cpt_level - from find_persons',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    SAVEPOINT eval_start;
    unset_person_party_type;
    IF l_match_str = ' AND ' AND p_call_type = 'AND' THEN
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      H_PARTY_ID.DELETE;
      H_PARTY_ID_LIST.DELETE;
    ELSIF l_match_str = ' OR ' AND p_call_type = 'AND' THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match rule is AND and call type is AND. Inserting into HZ_DQM_PARTIES_GT, from the H_PARTY_ID list',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_ctx_id := l_search_ctx_id;
      FORALL I in 1..H_PARTY_ID.COUNT 
         INSERT INTO HZ_DQM_PARTIES_GT (SEARCH_CONTEXT_ID,PARTY_ID) VALUES (
             l_search_ctx_id,H_PARTY_ID(I));
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    ELSE
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match rule is OR and call type is AND. Inserting into HZ_DQM_PARTIES_GT, from the H_PARTY_ID list',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      l_ctx_id := NULL;
      l_party_id_idx := H_PARTY_ID.COUNT+1;
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'====== START LOOPING THROUGH WHAT IS RETURNED BY OPEN_CONTACT_PT_CURSOR =======',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    open_contact_pt_cursor(p_dup_party_id,NULL, p_restrict_sql, p_contact_pt_contains_str,l_ctx_id, p_search_merged,'N', 'Y',l_contact_pt_cur);
    LOOP 
      FETCH l_contact_pt_cur INTO
         l_contact_pt_id, l_cpt_type, l_cpt_party_id,  l_cpt_ps_id, l_cpt_contact_id , l_TX1, l_TX6, l_TX5;
      EXIT WHEN l_contact_pt_cur%NOTFOUND;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>' ------------------------------------',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Processing party_id -  '||l_cpt_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'contact point type -  '||l_cpt_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      IF l_ctx_id IS NULL THEN
        l_person_id := get_person_id(l_cpt_party_id, l_cpt_contact_id);
      ELSE
        l_person_id := l_cpt_party_id;
      END IF;
      IF l_person_id IS NOT NULL AND l_person_id<>nvl(p_dup_party_id,-1) THEN
        l_index := map_id(l_person_id);
        l_score := GET_CONTACT_POINTS_SCORE(l_match_idx,l_TX1,l_TX6,l_TX5);
        IF NOT H_SCORES.EXISTS(l_index) THEN
          IF l_ctx_id IS NULL THEN
            H_SCORES(l_index) := get_new_score_rec(l_score,defpt,defps,defct,l_score, l_person_id, l_cpt_ps_id, l_cpt_contact_id,l_contact_pt_id);
           H_SCORES(l_index).cpt_type_match(l_cpt_type) := l_score;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Processing first time for this party',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_index is -  '||l_index,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'H_SCORES(l_index).cpt_type_match(l_cpt_type) is -  '||H_SCORES(l_index).cpt_type_match(l_cpt_type),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
          END IF;
        ELSE
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Processing Second time for this party',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
          IF(H_SCORES(l_index).cpt_type_match.EXISTS(l_cpt_type)) then
            IF l_score > H_SCORES(l_index).cpt_type_match(l_cpt_type) then
              H_SCORES(l_index).TOTAL_SCORE :=
              H_SCORES(l_index).TOTAL_SCORE-(H_SCORES(l_index).CONTACT_POINT_SCORE - H_SCORES(l_index).cpt_type_match(l_cpt_type) )+l_score;
              H_SCORES(l_index).CONTACT_POINT_SCORE := H_SCORES(l_index).CONTACT_POINT_SCORE - H_SCORES(l_index).cpt_type_match(l_cpt_type) + l_score;
              H_SCORES(l_index).cpt_type_match(l_cpt_type) := l_score;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Passed in score greater than existing score',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'H_SCORES(l_index).TOTAL_SCORE is -  '||H_SCORES(l_index).TOTAL_SCORE,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'H_SCORES(l_index).CONTACT_POINT_SCORE is -  '||H_SCORES(l_index).CONTACT_POINT_SCORE,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'H_SCORES(l_index).cpt_type_match(l_cpt_type) is -  '||H_SCORES(l_index).cpt_type_match(l_cpt_type),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            END IF;
          ELSE
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Passed in score less than or equal to the existing score ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            H_SCORES(l_index).TOTAL_SCORE :=
            H_SCORES(l_index).TOTAL_SCORE+l_score;
            H_SCORES(l_index).CONTACT_POINT_SCORE := H_SCORES(l_index).CONTACT_POINT_SCORE+l_score;
            H_SCORES(l_index).cpt_type_match(l_cpt_type) := l_score;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'H_SCORES(l_index).TOTAL_SCORE is -  '||H_SCORES(l_index).TOTAL_SCORE,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'H_SCORES(l_index).CONTACT_POINT_SCORE is -  '||H_SCORES(l_index).CONTACT_POINT_SCORE,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'H_SCORES(l_index).cpt_type_match(l_cpt_type) is -  '||H_SCORES(l_index).cpt_type_match(l_cpt_type),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
          END IF;
        END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'call type is -  '||p_call_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'match string is -  '||l_match_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        IF NOT H_PARTY_ID_LIST.EXISTS(l_index) AND H_SCORES.EXISTS(l_index) THEN
          -- If rule is match all 
          IF l_match_str = ' AND ' THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match String is - AND ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            IF H_SCORES(l_index).cpt_type_match.count = distinct_search_cpt_types then
              is_a_match := 'Y';
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'is_a_match is  '||is_a_match,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            ELSE
              is_a_match := 'N';
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'is_a_match is  '||is_a_match,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            END IF;
          -- Else it is construed as a match anyway 
          ELSE
            is_a_match := 'Y';
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'is_a_match is  '||is_a_match,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
          END IF;
          IF (is_a_match='Y') THEN
          H_PARTY_ID_LIST(l_index) := 1;
          H_PARTY_ID(l_party_id_idx) := l_person_id;
          l_party_id_idx:= l_party_id_idx+1;
      end if;
        END IF;
        IF (l_party_id_idx-1)>l_max_thresh THEN
          CLOSE l_contact_pt_cur;
          IF p_index>1 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In eval contact point level number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED');
            FND_MSG_PUB.ADD;
            RAISE FND_API.G_EXC_ERROR;
          ELSE
            push_eval;
            RETURN;
          END IF;
        END IF;
        IF p_ins_details = 'Y' THEN
          -- If rule is match all 
          IF l_match_str = ' AND ' THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match String is - AND ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            IF H_SCORES(l_index).cpt_type_match.count = distinct_search_cpt_types then
              is_a_match := 'Y';
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'is_a_match is  '||is_a_match,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            ELSE
              is_a_match := 'N';
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'is_a_match is  '||is_a_match,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
            END IF;
          -- Else it is construed as a match anyway 
          ELSE
            is_a_match := 'Y';
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'is_a_match is  '||is_a_match,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
          END IF;
          IF (is_a_match='Y') THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inserting into the final array, the person_id -  '||l_person_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
          FOR I IN 1..h_cpt_id.COUNT LOOP
          IF h_cpt_id(I)=l_contact_pt_id THEN
          	 l_cpt_flag := 'Y';
          END IF;
          END LOOP;
          IF l_cpt_flag = 'Y' THEN
          	 NULL;
          ELSE 
         	 h_cpt_id(detcnt) := l_contact_pt_id;
          h_cpt_party_id(detcnt) := l_person_id;
          	 IF (p_emax_score > 0) THEN 
              h_cpt_score(detcnt) := round((l_score/p_emax_score)*100);
            ELSE 
              h_cpt_score(detcnt) := 0; 
          	 END IF; 
            detcnt := detcnt +1;
          END IF;
      end if;
        END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Contact pt Level Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_contact_pt_id '||l_contact_pt_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_cpt_party_id '||l_person_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
    END LOOP;
    CLOSE l_contact_pt_cur;
    ROLLBACK to eval_start;
    IF p_ins_details = 'Y' THEN
      FORALL I in 1..h_cpt_id.COUNT 
        INSERT INTO HZ_MATCHED_CPTS_GT (SEARCH_CONTEXT_ID,CONTACT_POINT_ID,PARTY_ID,SCORE) VALUES (
          l_search_ctx_id, h_cpt_id(I), h_cpt_party_id(I), h_cpt_score(I));
    END IF;
  END;

  /**  Private procedure to call the eval procedure at each entity in the correct order ***/
  PROCEDURE do_eval (p_index NUMBER) IS
    l_ctx_id NUMBER;
    l_threshold NUMBER;
    other_acq_criteria_exists BOOLEAN; 
    acq_cnt NUMBER; 
  BEGIN
    IF (p_index=5 AND call_order(5) <> 'NONE' AND H_PARTY_ID.COUNT=0) THEN
     l_threshold :=  round(( l_entered_max_score / 685) * 75); 
    other_acq_criteria_exists := TRUE ;
    --check if acquisition criteria exists for any other entity
    IF l_party_contains_str IS NOT NULL THEN 
    	acq_cnt := 1; 
    END IF; 
    IF l_party_site_contains_str IS NOT NULL THEN 
    	acq_cnt := acq_cnt+1; 
    END IF; 
    IF l_contact_contains_str IS NOT NULL THEN 
    	acq_cnt := acq_cnt+1; 
    END IF;
    IF l_contact_pt_contains_str IS NOT NULL THEN 
    	acq_cnt := acq_cnt+1; 
    END IF;  
    IF acq_cnt>1 THEN 
    	other_acq_criteria_exists := TRUE; 
    ELSE
    	other_acq_criteria_exists := FALSE; 
    END IF;  
      hz_utility_v2pub.debug(p_message=>'count of entities having acquisition attributes =  '||acq_cnt,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'call_max_score(p_index) =  '||call_max_score(p_index),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_threshold =  '||l_threshold,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    IF(l_match_str = ' AND ' AND other_acq_criteria_exists) THEN
    	IF ( call_max_score(p_index) < l_threshold) THEN 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'When max score of entity level<l_threshold, do not evaluate ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
	     	RETURN;	
    	ELSE 
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In do eval number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
	     	FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED'); 
	     	FND_MSG_PUB.ADD; 
	     	RAISE FND_API.G_EXC_ERROR; 
    	END IF; 
	  ELSE
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'In do eval number of matches found exceeded threshold',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_THRESH_EXCEEDED');
      FND_MSG_PUB.ADD;
      RAISE FND_API.G_EXC_ERROR;
     END IF; 
    END IF;
    IF call_order(p_index) = 'PARTY' AND l_party_contains_str IS NOT NULL THEN
      eval_party_level(l_party_contains_str,call_type(p_index), p_index);
    ELSIF call_order(p_index) = 'PARTY_SITE' AND l_party_site_contains_str IS NOT NULL THEN
      eval_party_site_level(l_party_site_contains_str,call_type(p_index), p_index,p_ins_details,call_max_score(p_index));
    ELSIF call_order(p_index) = 'CONTACT_POINT' AND l_contact_pt_contains_str IS NOT NULL THEN
      eval_cpt_level(l_contact_pt_contains_str,call_type(p_index), p_index,p_ins_details,call_max_score(p_index));
    END IF;
  END;
  /************ End of find_persons private procedures **********/ 

  BEGIN

    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_persons(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Input Parameters:',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_match_type '||p_match_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_restrict_sql '||p_restrict_sql,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    -- ************************************
    -- STEP 1. Initialization and error checks

    l_match_str := ' AND ';
    IF p_match_type = 'AND' THEN
      l_match_str := ' AND ';
    ELSIF p_match_type = 'OR' THEN
      l_match_str := ' OR ';
    END IF;
    l_entered_max_score:= init_search(p_party_search_rec,p_party_site_list,p_contact_list,p_contact_point_list, l_match_str, l_party_max_score, l_ps_max_score, l_contact_max_score, l_cpt_max_score);
    IF l_entered_max_score = 0 THEN l_entered_max_score:=1; END IF;

    l_max_thresh:=nvl(FND_PROFILE.VALUE('HZ_DQM_MAX_EVAL_THRESH'),200);
    IF nvl(FND_PROFILE.VALUE('HZ_DQM_SCORE_UNTIL_THRESH'),'N')='Y' THEN
      g_score_until_thresh := true;
    ELSE
      g_score_until_thresh := false;
    END IF;
    -- ************************************************************
    -- STEP 2. Setup of intermedia query strings for Acquisition query
    l_party_site_contains_str := INIT_PARTY_SITES_QUERY(l_match_str,l_ps_denorm_str);
    l_contact_contains_str := INIT_CONTACTS_QUERY(l_match_str,l_ct_denorm_str);
    l_contact_pt_contains_str := INIT_CONTACT_POINTS_QUERY(l_match_str,l_cpt_denorm_str);
    l_party_contains_str := INIT_PARTY_QUERY(l_match_str, null, 0, 0, 0,0);
    init_score_context(p_party_search_rec,p_party_site_list,p_contact_list,p_contact_point_list);

    -- Setup Search Context ID
    SELECT hz_search_ctx_s.nextval INTO l_search_ctx_id FROM dual;
    x_search_ctx_id := l_search_ctx_id;

    IF l_party_contains_str IS NULL THEN
      defpt := 1;
    END IF;
    IF l_party_site_contains_str IS NULL THEN
      defps := 1;
    END IF;
    IF l_contact_contains_str IS NULL THEN
      defct := 1;
    END IF;
    IF l_contact_pt_contains_str IS NULL THEN
      defcpt := 1;
    END IF;

    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_match_str '||l_match_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_party_contains_str '||l_party_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_party_site_contains_str '||l_party_site_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_contact_contains_str '||l_contact_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_contact_pt_contains_str '||l_contact_pt_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_search_ctx_id '||l_search_ctx_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    FOR I in 1..5 LOOP
      do_eval(I);
    END LOOP;
    IF l_contact_contains_str IS NOT NULL THEN
      eval_contact_level(l_contact_contains_str,p_ins_details,l_contact_max_score);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Evaluating Matches. Threshold : 11 ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    x_num_matches := 0;
    l_num_eval := 0;
    IF l_match_str = ' OR ' THEN
      l_party_id := H_SCORES.FIRST;
    ELSE
      l_party_id := H_PARTY_ID_LIST.FIRST;
    END IF;
    WHILE l_party_id IS NOT NULL LOOP
      l_num_eval:= l_num_eval+1;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match Party ID '||H_SCORES(l_party_id).PARTY_ID,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'Score '||round((H_SCORES(l_party_id).TOTAL_SCORE/l_entered_max_score)*100),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      IF (H_SCORES(l_party_id).TOTAL_SCORE/l_entered_max_score)>=(75/685) THEN
            INSERT INTO HZ_MATCHED_PARTIES_GT (SEARCH_CONTEXT_ID, PARTY_ID, SCORE) 
            VALUES (l_search_ctx_id,H_SCORES(l_party_id).PARTY_ID,round((H_SCORES(l_party_id).TOTAL_SCORE/l_entered_max_score)*100));
            x_num_matches := x_num_matches+1;
      END IF;
      IF l_match_str = ' OR ' THEN
        l_party_id:=H_SCORES.NEXT(l_party_id);
      ELSE
        l_party_id:=H_PARTY_ID_LIST.NEXT(l_party_id);
      END IF;
    END LOOP;
    HZ_DQM_SEARCH_UTIL.set_num_eval(l_num_eval);
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_persons(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN L_RETURN_IMM_EXC THEN
    RETURN;
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_32.find_persons');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END find_persons;

PROCEDURE find_persons (
      p_rule_id               IN      NUMBER,
      p_party_search_rec      IN      HZ_PARTY_SEARCH.party_search_rec_type,
      p_party_site_list       IN      HZ_PARTY_SEARCH.party_site_list,
      p_contact_list          IN      HZ_PARTY_SEARCH.contact_list,
      p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      p_search_merged         IN      VARCHAR2,
      p_ins_details           IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER
) IS

  BEGIN
     find_persons(p_rule_id,p_party_search_rec,p_party_site_list,p_contact_list,p_contact_point_list,p_restrict_sql,p_match_type,p_search_merged,null,null,null,p_ins_details,x_search_ctx_id,x_num_matches);
  END;
PROCEDURE find_party_details (
      p_rule_id               IN      NUMBER,
      p_party_search_rec      IN      HZ_PARTY_SEARCH.party_search_rec_type,
      p_party_site_list       IN      HZ_PARTY_SEARCH.party_site_list,
      p_contact_list          IN      HZ_PARTY_SEARCH.contact_list,
      p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      p_search_merged         IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER
) IS

  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_party_details(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Input Parameters:',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_match_type '||p_match_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_restrict_sql '||p_restrict_sql,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_search_merged '||p_search_merged,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  find_parties(p_rule_id,p_party_search_rec,p_party_site_list, p_contact_list, p_contact_point_list,
               p_restrict_sql,p_match_type,p_search_merged,null,null, null,'Y',
               x_search_ctx_id,x_num_matches);
  DELETE FROM HZ_MATCHED_PARTY_SITES_GT ps WHERE SEARCH_CONTEXT_ID = x_search_ctx_id 
  AND NOT EXISTS 
       (SELECT 1 FROM HZ_MATCHED_PARTIES_GT p WHERE SEARCH_CONTEXT_ID = x_search_ctx_id AND p.PARTY_ID = ps.PARTY_ID);
  DELETE FROM HZ_MATCHED_CONTACTS_GT ct WHERE SEARCH_CONTEXT_ID = x_search_ctx_id 
  AND NOT EXISTS 
       (SELECT 1 FROM HZ_MATCHED_PARTIES_GT p WHERE SEARCH_CONTEXT_ID = x_search_ctx_id AND p.PARTY_ID = ct.PARTY_ID);
  DELETE FROM HZ_MATCHED_CPTS_GT cpt WHERE SEARCH_CONTEXT_ID = x_search_ctx_id 
  AND NOT EXISTS 
       (SELECT 1 FROM HZ_MATCHED_PARTIES_GT p WHERE SEARCH_CONTEXT_ID = x_search_ctx_id AND p.PARTY_ID = cpt.PARTY_ID);
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_party_details(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_32.find_party_details');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END find_party_details;

PROCEDURE find_duplicate_parties (
      p_rule_id               IN      NUMBER,
      p_party_id              IN      NUMBER,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      p_dup_batch_id          IN      NUMBER,
      p_search_merged         IN      VARCHAR2,
      x_dup_set_id            OUT     NUMBER,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER
) IS
  l_party_rec HZ_PARTY_SEARCH.party_search_rec_type;
  l_party_site_list HZ_PARTY_SEARCH.party_site_list;
  l_contact_list HZ_PARTY_SEARCH.contact_list;
  l_cpt_list HZ_PARTY_SEARCH.contact_point_list;
  l_match_idx NUMBER;

  --Fix for bug 4417124
  l_use_contact_addr_info BOOLEAN := TRUE;
  l_use_contact_cpt_info BOOLEAN  := TRUE;
  l_use_contact_addr_flag VARCHAR2(1) := 'Y';
  l_use_contact_cpt_flag  VARCHAR2(1) := 'Y';

BEGIN

    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_parties(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Input Parameters:',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_party_id '||p_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_match_type '||p_match_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_restrict_sql '||p_restrict_sql,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_dup_batch_id '||p_dup_batch_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_search_merged '||p_search_merged,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

  --Fix for bug 4417124 

  SELECT use_contact_addr_flag, use_contact_cpt_flag 
  INTO l_use_contact_addr_flag, l_use_contact_cpt_flag 
  FROM hz_match_rules_b 
  WHERE match_rule_id = 32; 

  IF NVL(l_use_contact_addr_flag, 'Y') = 'N' THEN
    l_use_contact_addr_info := FALSE; 
  END IF; 

  IF NVL(l_use_contact_cpt_flag, 'Y') = 'N' THEN
    l_use_contact_cpt_info := FALSE; 
  END IF; 

 --End fix for bug 4417124

  get_party_for_search(
              p_party_id, l_party_rec,l_party_site_list, l_contact_list, l_cpt_list);

    IF NOT check_prim_cond (l_party_rec,
                            l_party_site_list,
                            l_contact_list,
                            l_cpt_list) THEN
      x_dup_set_id:=NULL;
      x_search_ctx_id:=NULL;
      x_num_matches:=0;
      RETURN;
    END IF;
  x_dup_set_id := NULL;
  IF p_dup_batch_id IS NOT NULL THEN
    SELECT HZ_MERGE_BATCH_S.nextval INTO x_dup_set_id FROM DUAL;
  END IF;

  --Fix for bug 4417124 
  IF l_party_rec.PARTY_TYPE = 'PERSON' AND (l_use_contact_addr_info OR l_use_contact_cpt_info) THEN
    find_persons(p_rule_id,l_party_rec,l_party_site_list, l_contact_list, l_cpt_list,
               p_restrict_sql,p_match_type,p_search_merged,p_party_id,x_dup_set_id,p_dup_batch_id,'N',
               x_search_ctx_id,x_num_matches);
  ELSE
    find_parties(p_rule_id,l_party_rec,l_party_site_list, l_contact_list, l_cpt_list,
               p_restrict_sql,p_match_type,p_search_merged,p_party_id,x_dup_set_id,p_dup_batch_id,'N',
               x_search_ctx_id,x_num_matches);
  END IF;

  IF x_num_matches > 0 AND p_dup_batch_id IS NOT NULL THEN
    INSERT INTO HZ_DUP_SETS ( DUP_SET_ID, DUP_BATCH_ID, WINNER_PARTY_ID,
      STATUS, MERGE_TYPE, CREATED_BY, CREATION_DATE, LAST_UPDATE_LOGIN,
      LAST_UPDATE_DATE, LAST_UPDATED_BY) 
    VALUES (x_dup_set_id, p_dup_batch_id, p_party_id, 'SYSBATCH',
      'PARTY_MERGE', hz_utility_pub.created_by, hz_utility_pub.creation_date,
      hz_utility_pub.last_update_login, hz_utility_pub.last_update_date,
      hz_utility_pub.user_id);

    INSERT INTO HZ_DUP_SET_PARTIES (DUP_PARTY_ID,DUP_SET_ID,MERGE_SEQ_ID,
      MERGE_BATCH_ID,merge_flag,SCORE,CREATED_BY,CREATION_DATE,LAST_UPDATE_LOGIN,
      LAST_UPDATE_DATE,LAST_UPDATED_BY,DUP_SET_BATCH_ID) 
    VALUES (p_party_id,x_dup_set_id,0,0,
      'Y',100,hz_utility_pub.created_by,hz_utility_pub.creation_date,
      hz_utility_pub.last_update_login,hz_utility_pub.last_update_date,
      hz_utility_pub.user_id,p_dup_batch_id);
  ELSE
    x_dup_set_id := NULL;
  END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_parties(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_32.find_duplicate_parties');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END find_duplicate_parties;

PROCEDURE find_duplicate_party_sites (
      p_rule_id               IN      NUMBER,
      p_party_site_id         IN      NUMBER,
      p_party_id              IN      NUMBER,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER
) IS

   l_party_search_rec HZ_PARTY_SEARCH.party_search_rec_type; 
   l_party_site_list HZ_PARTY_SEARCH.party_site_list; 
   l_contact_list HZ_PARTY_SEARCH.contact_list; 
   l_contact_point_list HZ_PARTY_SEARCH.contact_point_list; 
   contact_point_ids HZ_PARTY_SEARCH.IDList; 
   p_party_site_list HZ_PARTY_SEARCH.IDList;  
   p_contact_ids HZ_PARTY_SEARCH.IDList; 
  l_match_idx NUMBER;
   cursor get_cpts_for_party_sites is select contact_point_id  
                         from hz_contact_points 
                         where owner_table_name = 'HZ_PARTY_SITES' 
                         and primary_flag='Y'
                         and owner_table_id = p_party_site_id; 
   BEGIN 
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_party_sites(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Input Parameters:',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_party_site_id '||p_party_site_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_party_id '||p_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_match_type '||p_match_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_restrict_sql '||p_restrict_sql,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
     p_party_site_list(1) := p_party_site_id; 
     OPEN get_cpts_for_party_sites;
     LOOP       
     FETCH get_cpts_for_party_sites BULK COLLECT INTO contact_point_ids; 
         EXIT WHEN get_cpts_for_party_sites%NOTFOUND; 
     END LOOP;  
     CLOSE get_cpts_for_party_sites; 
  
     get_search_criteria (
         null,
         p_party_site_list,
         HZ_PARTY_SEARCH.G_MISS_ID_LIST,
         contact_point_ids, 
         l_party_search_rec,
         l_party_site_list,
         l_contact_list,
         l_contact_point_list) ;
    IF NOT check_prim_cond (l_party_search_rec,
                            l_party_site_list,
                            l_contact_list,
                            l_contact_point_list) THEN
      x_search_ctx_id:=NULL;
      x_num_matches:=0;
      RETURN;
    END IF;
 
     get_matching_party_sites (p_rule_id, 
         p_party_id, 
         l_party_site_list, 
         l_contact_point_list,
         p_restrict_sql, 
         p_match_type, 
         p_party_site_id, 
         x_search_ctx_id,
         x_num_matches);
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_party_sites(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_32.find_duplicate_party_sites');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END find_duplicate_party_sites; 
 
PROCEDURE find_duplicate_contacts (
      p_rule_id               IN      NUMBER,
      p_org_contact_id        IN      NUMBER,
      p_party_id              IN      NUMBER,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER
) IS

 l_party_search_rec HZ_PARTY_SEARCH.party_search_rec_type;
 l_party_site_list HZ_PARTY_SEARCH.party_site_list; 
 l_contact_list HZ_PARTY_SEARCH.contact_list; 
 l_contact_point_list HZ_PARTY_SEARCH.contact_point_list; 
 contact_point_ids HZ_PARTY_SEARCH.IDList; 
 p_party_site_list HZ_PARTY_SEARCH.IDList;   
 p_contact_ids HZ_PARTY_SEARCH.IDList; 
  l_match_idx NUMBER;
 cursor get_cpt_for_contact_id is select  contact_point_id 
   from hz_org_contacts a, hz_relationships b, hz_contact_points c 
   where a.party_relationship_id = b.relationship_id 
     and c.owner_table_name = 'HZ_PARTIES' 
     and c.primary_flag='Y'
     and c.owner_table_id = b.party_id 
     and b.directional_flag = 'F'  
     and a.org_contact_id = p_org_contact_id; 
BEGIN 
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_contacts(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Input Parameters:',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_org_contact_id '||p_org_contact_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_party_id '||p_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_match_type '||p_match_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_restrict_sql '||p_restrict_sql,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    p_contact_ids(1) := p_org_contact_id; 
    OPEN get_cpt_for_contact_id; 
    LOOP 
    FETCH get_cpt_for_contact_id BULK COLLECT INTO contact_point_ids; 
        EXIT WHEN get_cpt_for_contact_id%NOTFOUND; 
    END LOOP;  
    CLOSE get_cpt_for_contact_id; 
 
    get_search_criteria (
        null,
        HZ_PARTY_SEARCH.G_MISS_ID_LIST,
        p_contact_ids,
        contact_point_ids, 
        l_party_search_rec,
        l_party_site_list, 
        l_contact_list,
        l_contact_point_list) ;
    IF NOT check_prim_cond (l_party_search_rec,
                            l_party_site_list,
                            l_contact_list,
                            l_contact_point_list) THEN
      x_search_ctx_id:=NULL;
      x_num_matches:=0;
      RETURN;
    END IF;
 
    get_matching_contacts (p_rule_id, 
        p_party_id, 
        l_contact_list, 
        l_contact_point_list, 
        p_restrict_sql, 
        p_match_type, 
        p_org_contact_id, 
        x_search_ctx_id, 
        x_num_matches);
 
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_contacts(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_32.find_duplicate_contacts');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END find_duplicate_contacts; 

PROCEDURE find_duplicate_contact_points (
      p_rule_id               IN      NUMBER,
      p_contact_point_id      IN      NUMBER,
      p_party_id              IN      NUMBER,
      p_restrict_sql          IN      VARCHAR2,
      p_match_type            IN      VARCHAR2,
      x_search_ctx_id         OUT     NUMBER,
      x_num_matches           OUT     NUMBER
) IS
 l_party_search_rec HZ_PARTY_SEARCH.party_search_rec_type; 
  l_party_site_list HZ_PARTY_SEARCH.party_site_list; 
   l_contact_list HZ_PARTY_SEARCH.contact_list;  
   l_contact_point_list HZ_PARTY_SEARCH.contact_point_list;  
   contact_point_ids HZ_PARTY_SEARCH.IDList;  
  p_party_site_list HZ_PARTY_SEARCH.IDList;   
  p_contact_ids HZ_PARTY_SEARCH.IDList;  
  l_match_idx NUMBER;

BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_contact_points(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Input Parameters:',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_contact_point_id '||p_contact_point_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_party_id '||p_party_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_match_type '||p_match_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_restrict_sql '||p_restrict_sql,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  contact_point_ids(1) := p_contact_point_id;   
  get_search_criteria (   
      null, 
      HZ_PARTY_SEARCH.G_MISS_ID_LIST, 
      HZ_PARTY_SEARCH.G_MISS_ID_LIST, 
      contact_point_ids,   
      l_party_search_rec, 
      l_party_site_list, 
      l_contact_list, 
      l_contact_point_list ); 
    
    IF NOT check_prim_cond (l_party_search_rec,
                            l_party_site_list,
                            l_contact_list,
                            l_contact_point_list) THEN
      x_search_ctx_id:=NULL;
      x_num_matches:=0;
      RETURN;
    END IF;
   get_matching_contact_points ( 
      p_rule_id, 
      p_party_id, 
     l_contact_point_list, 
      p_restrict_sql, 
      p_match_type, 
      p_contact_point_id, 
      x_search_ctx_id, 
      x_num_matches );  
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'find_duplicate_contact_points(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_32.find_duplicate_contact_points');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END find_duplicate_contact_points;

PROCEDURE find_parties_dynamic (
        p_rule_id               IN      NUMBER,
        p_attrib_id1            IN      NUMBER,
        p_attrib_id2            IN      NUMBER,
        p_attrib_id3            IN      NUMBER,
        p_attrib_id4            IN      NUMBER,
        p_attrib_id5            IN      NUMBER,
        p_attrib_id6            IN      NUMBER,
        p_attrib_id7            IN      NUMBER,
        p_attrib_id8            IN      NUMBER,
        p_attrib_id9            IN      NUMBER,
        p_attrib_id10           IN      NUMBER,
        p_attrib_id11           IN      NUMBER,
        p_attrib_id12           IN      NUMBER,
        p_attrib_id13           IN      NUMBER,
        p_attrib_id14           IN      NUMBER,
        p_attrib_id15           IN      NUMBER,
        p_attrib_id16           IN      NUMBER,
        p_attrib_id17           IN      NUMBER,
        p_attrib_id18           IN      NUMBER,
        p_attrib_id19           IN      NUMBER,
        p_attrib_id20           IN      NUMBER,
        p_attrib_val1           IN      VARCHAR2,
        p_attrib_val2           IN      VARCHAR2,
        p_attrib_val3           IN      VARCHAR2,
        p_attrib_val4           IN      VARCHAR2,
        p_attrib_val5           IN      VARCHAR2,
        p_attrib_val6           IN      VARCHAR2,
        p_attrib_val7           IN      VARCHAR2,
        p_attrib_val8           IN      VARCHAR2,
        p_attrib_val9           IN      VARCHAR2,
        p_attrib_val10          IN      VARCHAR2,
        p_attrib_val11          IN      VARCHAR2,
        p_attrib_val12          IN      VARCHAR2,
        p_attrib_val13          IN      VARCHAR2,
        p_attrib_val14          IN      VARCHAR2,
        p_attrib_val15          IN      VARCHAR2,
        p_attrib_val16          IN      VARCHAR2,
        p_attrib_val17          IN      VARCHAR2,
        p_attrib_val18          IN      VARCHAR2,
        p_attrib_val19          IN      VARCHAR2,
        p_attrib_val20          IN      VARCHAR2,
        p_restrict_sql          IN      VARCHAR2,
        p_match_type            IN      VARCHAR2,
        p_search_merged         IN      VARCHAR2,
        x_search_ctx_id         OUT     NUMBER,
        x_num_matches           OUT     NUMBER
) IS
  BEGIN
    call_api_dynamic(p_rule_id,p_attrib_id1, p_attrib_id2,p_attrib_id3,p_attrib_id4,p_attrib_id5,
                     p_attrib_id6,p_attrib_id7,p_attrib_id8,p_attrib_id9,p_attrib_id10,
                     p_attrib_id11,p_attrib_id12,p_attrib_id13,p_attrib_id14,p_attrib_id15,
                     p_attrib_id16,p_attrib_id17,p_attrib_id18,p_attrib_id19,p_attrib_id20,
                     p_attrib_val1,p_attrib_val2,p_attrib_val3,p_attrib_val4,p_attrib_val5,
                     p_attrib_val6,p_attrib_val7,p_attrib_val8,p_attrib_val9,p_attrib_val10,
                     p_attrib_val11,p_attrib_val12,p_attrib_val13,p_attrib_val14,p_attrib_val15,
                     p_attrib_val16,p_attrib_val17,p_attrib_val18,p_attrib_val19,p_attrib_val20,
                     p_restrict_sql,'FIND_PARTIES',p_match_type,null,p_search_merged,x_search_ctx_id,x_num_matches);
 END;

PROCEDURE call_api_dynamic (
        p_rule_id               IN      NUMBER,
        p_attrib_id1            IN      NUMBER,
        p_attrib_id2            IN      NUMBER,
        p_attrib_id3            IN      NUMBER,
        p_attrib_id4            IN      NUMBER,
        p_attrib_id5            IN      NUMBER,
        p_attrib_id6            IN      NUMBER,
        p_attrib_id7            IN      NUMBER,
        p_attrib_id8            IN      NUMBER,
        p_attrib_id9            IN      NUMBER,
        p_attrib_id10           IN      NUMBER,
        p_attrib_id11           IN      NUMBER,
        p_attrib_id12           IN      NUMBER,
        p_attrib_id13           IN      NUMBER,
        p_attrib_id14           IN      NUMBER,
        p_attrib_id15           IN      NUMBER,
        p_attrib_id16           IN      NUMBER,
        p_attrib_id17           IN      NUMBER,
        p_attrib_id18           IN      NUMBER,
        p_attrib_id19           IN      NUMBER,
        p_attrib_id20           IN      NUMBER,
        p_attrib_val1           IN      VARCHAR2,
        p_attrib_val2           IN      VARCHAR2,
        p_attrib_val3           IN      VARCHAR2,
        p_attrib_val4           IN      VARCHAR2,
        p_attrib_val5           IN      VARCHAR2,
        p_attrib_val6           IN      VARCHAR2,
        p_attrib_val7           IN      VARCHAR2,
        p_attrib_val8           IN      VARCHAR2,
        p_attrib_val9           IN      VARCHAR2,
        p_attrib_val10          IN      VARCHAR2,
        p_attrib_val11          IN      VARCHAR2,
        p_attrib_val12          IN      VARCHAR2,
        p_attrib_val13          IN      VARCHAR2,
        p_attrib_val14          IN      VARCHAR2,
        p_attrib_val15          IN      VARCHAR2,
        p_attrib_val16          IN      VARCHAR2,
        p_attrib_val17          IN      VARCHAR2,
        p_attrib_val18          IN      VARCHAR2,
        p_attrib_val19          IN      VARCHAR2,
        p_attrib_val20          IN      VARCHAR2,
        p_restrict_sql          IN      VARCHAR2,
        p_api_name              IN      VARCHAR2,
        p_match_type            IN      VARCHAR2,
        p_party_id              IN      NUMBER,
        p_search_merged         IN      VARCHAR2,
        x_search_ctx_id         OUT     NUMBER,
        x_num_matches           OUT     NUMBER
) IS
  TYPE AttrList IS TABLE OF VARCHAR2(2000) INDEX BY BINARY_INTEGER;
  l_match_idx NUMBER;
  AttrVals AttrList;
  l_party_rec HZ_PARTY_SEARCH.party_search_rec_type;
  l_party_site_list HZ_PARTY_SEARCH.party_site_list;
  l_contact_list HZ_PARTY_SEARCH.contact_list;
  l_cpt_list HZ_PARTY_SEARCH.contact_point_list;
  l_dup_set_id NUMBER;
  l_idx NUMBER;
  l_cpt_type VARCHAR2(255);
  FIRST BOOLEAN := TRUE; 

BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'call_api_dynamic(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;

  IF p_attrib_id1 IS NOT NULL THEN
    AttrVals(p_attrib_id1):=p_attrib_val1;
  END IF;
  IF p_attrib_id2 IS NOT NULL THEN
    AttrVals(p_attrib_id2):=p_attrib_val2;
  END IF;
  IF p_attrib_id3 IS NOT NULL THEN
    AttrVals(p_attrib_id3):=p_attrib_val3;
  END IF;
  IF p_attrib_id4 IS NOT NULL THEN
    AttrVals(p_attrib_id4):=p_attrib_val4;
  END IF;
  IF p_attrib_id5 IS NOT NULL THEN
    AttrVals(p_attrib_id5):=p_attrib_val5;
  END IF;
  IF p_attrib_id6 IS NOT NULL THEN
    AttrVals(p_attrib_id6):=p_attrib_val6;
  END IF;
  IF p_attrib_id7 IS NOT NULL THEN
    AttrVals(p_attrib_id7):=p_attrib_val7;
  END IF;
  IF p_attrib_id8 IS NOT NULL THEN
    AttrVals(p_attrib_id8):=p_attrib_val8;
  END IF;
  IF p_attrib_id9 IS NOT NULL THEN
    AttrVals(p_attrib_id9):=p_attrib_val9;
  END IF;
  IF p_attrib_id10 IS NOT NULL THEN
    AttrVals(p_attrib_id10):=p_attrib_val10;
  END IF;
  IF p_attrib_id11 IS NOT NULL THEN
    AttrVals(p_attrib_id11):=p_attrib_val11;
  END IF;
  IF p_attrib_id12 IS NOT NULL THEN
    AttrVals(p_attrib_id12):=p_attrib_val12;
  END IF;
  IF p_attrib_id13 IS NOT NULL THEN
    AttrVals(p_attrib_id13):=p_attrib_val13;
  END IF;
  IF p_attrib_id14 IS NOT NULL THEN
    AttrVals(p_attrib_id14):=p_attrib_val14;
  END IF;
  IF p_attrib_id15 IS NOT NULL THEN
    AttrVals(p_attrib_id15):=p_attrib_val15;
  END IF;
  IF p_attrib_id16 IS NOT NULL THEN
    AttrVals(p_attrib_id16):=p_attrib_val16;
  END IF;
  IF p_attrib_id17 IS NOT NULL THEN
    AttrVals(p_attrib_id17):=p_attrib_val17;
  END IF;
  IF p_attrib_id18 IS NOT NULL THEN
    AttrVals(p_attrib_id18):=p_attrib_val18;
  END IF;
  IF p_attrib_id19 IS NOT NULL THEN
    AttrVals(p_attrib_id19):=p_attrib_val19;
  END IF;
  IF p_attrib_id20 IS NOT NULL THEN
    AttrVals(p_attrib_id20):=p_attrib_val20;
  END IF;
  IF AttrVals.EXISTS(12) THEN
    l_party_rec.PARTY_NUMBER:= AttrVals(12);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_rec.PARTY_NUMBER '||AttrVals(12),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(14) THEN
    l_party_rec.PARTY_TYPE:= AttrVals(14);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_rec.PARTY_TYPE '||AttrVals(14),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(15) THEN
    l_party_rec.PARTY_ALL_NAMES:= AttrVals(15);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_rec.PARTY_ALL_NAMES '||AttrVals(15),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(18) THEN
    l_party_rec.TAX_REFERENCE:= AttrVals(18);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_rec.TAX_REFERENCE '||AttrVals(18),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(19) THEN
    l_party_rec.JGZZ_FISCAL_CODE:= AttrVals(19);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_rec.JGZZ_FISCAL_CODE '||AttrVals(19),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(20) THEN
    l_party_rec.SIC_CODE:= AttrVals(20);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_rec.SIC_CODE '||AttrVals(20),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(21) THEN
    l_party_rec.SIC_CODE_TYPE:= AttrVals(21);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_rec.SIC_CODE_TYPE '||AttrVals(21),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(27) THEN
    l_party_site_list(1).ADDRESS:= AttrVals(27);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_site_list(1).ADDRESS '||AttrVals(27),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(29) THEN
    l_party_site_list(1).CITY:= AttrVals(29);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_site_list(1).CITY '||AttrVals(29),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(30) THEN
    l_party_site_list(1).POSTAL_CODE:= AttrVals(30);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_site_list(1).POSTAL_CODE '||AttrVals(30),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(32) THEN
    l_party_site_list(1).STATE:= AttrVals(32);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_site_list(1).STATE '||AttrVals(32),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(36) THEN
    l_party_site_list(1).COUNTRY:= AttrVals(36);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_site_list(1).COUNTRY '||AttrVals(36),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(39) THEN
    l_contact_list(1).CONTACT_NAME:= AttrVals(39);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_contact_list(1).CONTACT_NAME '||AttrVals(39),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  END IF;

  IF AttrVals.EXISTS(44) THEN
    l_cpt_type := 'PHONE';
    FIRST := FALSE;
    FOR I in 1..l_cpt_list.COUNT LOOP
      IF l_cpt_list(I).CONTACT_POINT_TYPE=l_cpt_type THEN
        l_cpt_list(I).FLEX_FORMAT_PHONE_NUMBER:= AttrVals(44);
        FIRST := TRUE;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_cpt_list('||I||').CONTACT_POINT_TYPE '||l_cpt_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_cpt_list('||I||').FLEX_FORMAT_PHONE_NUMBER '||AttrVals(44),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
    END LOOP;
    IF not FIRST THEN
      l_idx := l_cpt_list.COUNT+1;
      l_cpt_list(l_idx).CONTACT_POINT_TYPE:=l_cpt_type;
      l_cpt_list(l_idx).FLEX_FORMAT_PHONE_NUMBER:= AttrVals(44);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_cpt_list('||l_idx||').CONTACT_POINT_TYPE '||l_cpt_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_cpt_list('||l_idx||').FLEX_FORMAT_PHONE_NUMBER '||AttrVals(44),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    END IF;
  END IF;

  IF AttrVals.EXISTS(48) THEN
    l_cpt_type := 'EMAIL';
    FIRST := FALSE;
    FOR I in 1..l_cpt_list.COUNT LOOP
      IF l_cpt_list(I).CONTACT_POINT_TYPE=l_cpt_type THEN
        l_cpt_list(I).EMAIL_ADDRESS:= AttrVals(48);
        FIRST := TRUE;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_cpt_list('||I||').CONTACT_POINT_TYPE '||l_cpt_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_cpt_list('||I||').EMAIL_ADDRESS '||AttrVals(48),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF;
    END LOOP;
    IF not FIRST THEN
      l_idx := l_cpt_list.COUNT+1;
      l_cpt_list(l_idx).CONTACT_POINT_TYPE:=l_cpt_type;
      l_cpt_list(l_idx).EMAIL_ADDRESS:= AttrVals(48);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_cpt_list('||l_idx||').CONTACT_POINT_TYPE '||l_cpt_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_cpt_list('||l_idx||').EMAIL_ADDRESS '||AttrVals(48),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    END IF;
  END IF;


  IF AttrVals.EXISTS(14) THEN
     l_party_rec.PARTY_TYPE:= AttrVals(14); 
  END IF; 
  IF upper(p_api_name) = 'FIND_PARTIES' THEN
    find_parties(p_rule_id,l_party_rec,l_party_site_list, l_contact_list, l_cpt_list,
               p_restrict_sql,p_match_type,p_search_merged,NULL,NULL,NULL,'N',
               x_search_ctx_id,x_num_matches);
  ELSIF upper(p_api_name) = 'FIND_PARTY_DETAILS' THEN
    find_party_details(p_rule_id,l_party_rec,l_party_site_list, l_contact_list, l_cpt_list,
               p_restrict_sql,p_match_type,p_search_merged,
               x_search_ctx_id,x_num_matches);
  ELSIF upper(p_api_name) = 'FIND_PERSONS' THEN
    find_persons(p_rule_id,l_party_rec,l_party_site_list, l_contact_list, l_cpt_list,
               p_restrict_sql,p_match_type,p_search_merged,'N',
               x_search_ctx_id,x_num_matches);
  ELSIF upper(p_api_name) = 'GET_MATCHING_PARTY_SITES' THEN
    get_matching_party_sites(p_rule_id,p_party_id,l_party_site_list, l_cpt_list,
               p_restrict_sql,p_match_type,NULL,
               x_search_ctx_id,x_num_matches);
  ELSIF upper(p_api_name) = 'GET_MATCHING_CONTACTS' THEN
    get_matching_contacts(p_rule_id,p_party_id,l_contact_list, l_cpt_list,
               p_restrict_sql,p_match_type,NULL,
               x_search_ctx_id,x_num_matches);
  ELSIF upper(p_api_name) = 'GET_MATCHING_CONTACT_POINTS' THEN
    get_matching_contact_points(p_rule_id,p_party_id, l_cpt_list,
               p_restrict_sql,p_match_type,NULL,
               x_search_ctx_id,x_num_matches);
  END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'call_api_dynamic(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_32.call_api_dynamic');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END call_api_dynamic; 


PROCEDURE get_matching_party_sites (
        p_rule_id               IN      NUMBER,
        p_party_id              IN      NUMBER,
        p_party_site_list       IN      HZ_PARTY_SEARCH.PARTY_SITE_LIST,
        p_contact_point_list    IN      HZ_PARTY_SEARCH.CONTACT_POINT_LIST,
        p_restrict_sql          IN      VARCHAR2,
        p_match_type            IN      VARCHAR2,
        p_dup_party_site_id     IN      NUMBER, 
        x_search_ctx_id         OUT     NUMBER,
        x_num_matches           OUT     NUMBER
) IS
  
  -- Strings to hold the generated Intermedia query strings
  l_party_contains_str VARCHAR2(32000); 
  l_match_idx NUMBER;
  l_party_site_contains_str VARCHAR2(32000);
  l_contact_contains_str VARCHAR2(32000);
  l_contact_pt_contains_str VARCHAR2(32000);
  l_tmp VARCHAR2(32000);

  -- Other local variables
  l_match_str VARCHAR2(30); -- Match type (AND or OR)
  l_sqlstr VARCHAR2(32000); -- Dynamic SQL String
  -- For Score calculation
  l_max_score NUMBER;
  l_entered_max_score NUMBER;
  FIRST BOOLEAN;
  l_search_ctx_id NUMBER; -- Generated Search Context ID

  l_TX1 VARCHAR2(2000);
  l_TX10 VARCHAR2(2000);
  l_TX11 VARCHAR2(2000);
  l_TX14 VARCHAR2(2000);
  l_TX15 VARCHAR2(2000);
  l_TX22 VARCHAR2(2000);
  l_TX3 VARCHAR2(2000);
  l_TX4 VARCHAR2(2000);
  l_TX5 VARCHAR2(2000);
  l_TX6 VARCHAR2(2000);
  l_TX9 VARCHAR2(2000);
  H_SCORES HZ_PARTY_SEARCH.score_list;

  l_score NUMBER;
  l_idx NUMBER;
  l_party_cur HZ_PARTY_STAGE.StageCurTyp;
  l_party_site_cur HZ_PARTY_STAGE.StageCurTyp;
  l_contact_cur HZ_PARTY_STAGE.StageCurTyp;
  l_contact_pt_cur HZ_PARTY_STAGE.StageCurTyp;
  l_party_id NUMBER;
  l_ps_party_id NUMBER;
  l_ct_party_id NUMBER;
  l_cpt_party_id NUMBER;
  l_cpt_ps_id NUMBER;
  l_cpt_contact_id NUMBER;
  l_cpt_type VARCHAR2(100);
  l_cpt_level VARCHAR2(100);
  l_party_site_id NUMBER;
  l_org_contact_id NUMBER;
  l_contact_pt_id NUMBER;
  l_cpt_level VARCHAR2(100);
  l_ps_contact_id NUMBER;
  l_party_max_score NUMBER;
  l_ps_max_score NUMBER;
  l_contact_max_score NUMBER;
  l_cpt_max_score NUMBER;

  defpt NUMBER :=0;
  defps NUMBER :=0;
  defct NUMBER :=0;
  defcpt NUMBER :=0;
  l_index NUMBER;
  l_match_ps_list HZ_PARTY_SEARCH.IDList;
  l_cnt NUMBER:=1;

  
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_party_sites(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Input Parameters:',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_match_type '||p_match_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_restrict_sql '||p_restrict_sql,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_dup_party_site_id '||p_dup_party_site_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    -- ************************************
    -- STEP 1. Initialization and error checks

    l_match_str := ' AND ';
    IF p_match_type = 'AND' THEN
      l_match_str := ' AND ';
    ELSIF p_match_type = 'OR' THEN
      l_match_str := ' OR ';
    END IF;
    l_entered_max_score:= init_search( HZ_PARTY_SEARCH.G_MISS_PARTY_SEARCH_REC, p_party_site_list, HZ_PARTY_SEARCH.G_MISS_CONTACT_LIST, p_contact_point_list,l_match_str, l_party_max_score, l_ps_max_score, l_contact_max_score, l_cpt_max_score);
    g_score_until_thresh := false;
    IF l_entered_max_score = 0 THEN l_entered_max_score:=1; END IF;

    -- ************************************************************
    -- STEP 2. Setup of intermedia query strings for Acquisition query
    l_party_site_contains_str := INIT_PARTY_SITES_QUERY(l_match_str,l_tmp);
    l_contact_pt_contains_str := INIT_CONTACT_POINTS_QUERY(l_match_str,l_tmp);
    init_score_context(HZ_PARTY_SEARCH.G_MISS_PARTY_SEARCH_REC,p_party_site_list,HZ_PARTY_SEARCH.G_MISS_CONTACT_LIST,p_contact_point_list);

    -- Setup Search Context ID
    SELECT hz_search_ctx_s.nextval INTO l_search_ctx_id FROM dual;
    x_search_ctx_id := l_search_ctx_id;

    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_match_str '||l_match_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_party_site_contains_str '||l_party_site_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_contact_pt_contains_str '||l_contact_pt_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_search_ctx_id '||l_search_ctx_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    IF l_party_site_contains_str IS NULL THEN
      defps := 1;
    END IF;
    IF l_contact_pt_contains_str IS NULL THEN
      defcpt := 1;
    END IF;

    IF l_party_site_contains_str IS NOT NULL THEN
      open_party_site_cursor(NULL, P_PARTY_ID, p_restrict_sql, l_party_site_contains_str,NULL, null,'N', 'N',l_party_site_cur);
      LOOP
        FETCH l_party_site_cur INTO 
            l_party_site_id, l_ps_party_id, l_ps_contact_id , l_TX3, l_TX4, l_TX9, l_TX10, l_TX11, l_TX14, l_TX15, l_TX22;
        EXIT WHEN l_party_site_cur%NOTFOUND;
      IF (p_dup_party_site_id IS NULL OR (
                p_dup_party_site_id IS NOT NULL AND l_ps_contact_id IS NULL AND 
                l_party_site_id <> p_dup_party_site_id)) THEN  
            l_index := map_id(l_party_site_id);
            l_match_ps_list(l_cnt):= l_party_site_id ;
            l_cnt:=l_cnt+1;
            l_score := GET_PARTY_SITES_SCORE(l_match_idx,l_TX3,l_TX4,l_TX9,l_TX10,l_TX11,l_TX14,l_TX15,l_TX22);
            H_SCORES(l_index) := get_new_score_rec(l_score,defpt,l_score,defct,defcpt, l_ps_party_id, l_party_site_id, null,null);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Party Site Level Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_party_site_id '||l_party_site_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF; 
      END LOOP;
      CLOSE l_party_site_cur;
    END IF;

    IF l_contact_pt_contains_str IS NOT NULL THEN
    SAVEPOINT eval_start;
    IF l_match_str = ' AND ' OR (
        ((l_cpt_max_score/l_entered_max_score)<(75/685))
        ) THEN
      FORALL I in 1..l_match_ps_list.COUNT
           INSERT INTO HZ_DQM_PARTIES_GT (search_context_id, party_id)
           values (l_search_ctx_id,l_match_ps_list(I));
        open_contact_pt_cursor(NULL, P_PARTY_ID, p_restrict_sql, l_contact_pt_contains_str,NULL, null,'N', 'N',l_contact_pt_cur,'PARTY_SITES');
    ELSE
      open_contact_pt_cursor(NULL, P_PARTY_ID, p_restrict_sql, l_contact_pt_contains_str,NULL, null,'N', 'N',l_contact_pt_cur);
    END IF;
      LOOP
        FETCH l_contact_pt_cur INTO 
            l_contact_pt_id, l_cpt_type, l_cpt_party_id, l_cpt_ps_id, l_cpt_contact_id , l_TX1, l_TX6, l_TX5;
        EXIT WHEN l_contact_pt_cur%NOTFOUND;
      IF (l_cpt_ps_id IS NOT NULL AND (p_dup_party_site_id IS NULL OR (
         p_dup_party_site_id IS NOT NULL AND l_cpt_contact_id IS NULL AND p_dup_party_site_id <> l_cpt_ps_id))) THEN   
        l_index := map_id(l_cpt_ps_id);
        IF l_match_str = ' OR ' THEN
          l_score := GET_CONTACT_POINTS_SCORE(l_match_idx,l_TX1,l_TX6,l_TX5);
          IF NOT H_SCORES.EXISTS(l_index) THEN
            H_SCORES(l_index) := get_new_score_rec(l_score,defpt,defps,defct,l_score,l_cpt_party_id,l_cpt_ps_id,l_cpt_contact_id,l_contact_pt_id);
          ELSE
            IF l_score > H_SCORES(l_index).CONTACT_POINT_SCORE THEN
               H_SCORES(l_index).TOTAL_SCORE := 
                      H_SCORES(l_index).TOTAL_SCORE-H_SCORES(l_index).CONTACT_POINT_SCORE+l_score;
               H_SCORES(l_index).CONTACT_POINT_SCORE := l_score;
            END IF;
          END IF;
        ELSE
          IF H_SCORES.EXISTS(l_index) THEN
            l_score := GET_CONTACT_POINTS_SCORE(l_match_idx,l_TX1,l_TX6,l_TX5);
            IF l_score > H_SCORES(l_index).CONTACT_POINT_SCORE THEN
               H_SCORES(l_index).TOTAL_SCORE := 
                      H_SCORES(l_index).TOTAL_SCORE-H_SCORES(l_index).CONTACT_POINT_SCORE+l_score;
               H_SCORES(l_index).CONTACT_POINT_SCORE := l_score;
            END IF;
          ELSIF defps=1 THEN
            l_score := GET_CONTACT_POINTS_SCORE(l_match_idx,l_TX1,l_TX6,l_TX5);
            H_SCORES(l_index) := get_new_score_rec(l_score,defpt,defps,defct,l_score,l_cpt_party_id,l_cpt_ps_id,l_cpt_contact_id,l_contact_pt_id);
          END IF;
        END IF;
      END IF; 
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Contact_point Level Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_party_site_id '||l_cpt_ps_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END LOOP;
      CLOSE l_contact_pt_cur;
    ROLLBACK TO eval_start;
    END IF;
    x_num_matches := 0;
    l_party_site_id := H_SCORES.FIRST;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Evaluating Matches. Threshold : 11 ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    WHILE l_party_site_id IS NOT NULL LOOP
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match Party Site ID '||H_SCORES(l_party_site_id).PARTY_SITE_ID,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'Score '||round((H_SCORES(l_party_site_id).TOTAL_SCORE/l_entered_max_score)*100),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
 IF l_match_str = ' OR ' THEN
IF (H_SCORES(l_party_site_id).TOTAL_SCORE/l_entered_max_score)>=( 75/685 ) THEN
    INSERT INTO HZ_MATCHED_PARTY_SITES_GT (SEARCH_CONTEXT_ID, PARTY_ID, PARTY_SITE_ID, SCORE) 
    VALUES (l_search_ctx_id,H_SCORES(l_party_site_id).PARTY_ID, H_SCORES(l_party_site_id).PARTY_SITE_ID, (H_SCORES(l_party_site_id).TOTAL_SCORE/l_entered_max_score)*100);
      x_num_matches := x_num_matches+1;
 END IF;
 ELSE
    IF H_SCORES(l_party_site_id).PARTY_SITE_SCORE>0 AND
       H_SCORES(l_party_site_id).CONTACT_POINT_SCORE>0 AND
       (H_SCORES(l_party_site_id).TOTAL_SCORE/l_entered_max_score)>=(75/685) THEN
      INSERT INTO HZ_MATCHED_PARTY_SITES_GT (SEARCH_CONTEXT_ID, PARTY_ID, PARTY_SITE_ID, SCORE) 
      VALUES (l_search_ctx_id,H_SCORES(l_party_site_id).PARTY_ID, H_SCORES(l_party_site_id).PARTY_SITE_ID, round((H_SCORES(l_party_site_id).TOTAL_SCORE/l_entered_max_score)*100));
       x_num_matches := x_num_matches+1;
      END IF;
 END IF;
      l_party_site_id:=H_SCORES.NEXT(l_party_site_id);
    END LOOP;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_party_sites(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_32.get_matching_party_sites');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END get_matching_party_sites;


PROCEDURE get_matching_contacts (
        p_rule_id               IN      NUMBER,
        p_party_id              IN      NUMBER,
        p_contact_list          IN      HZ_PARTY_SEARCH.CONTACT_LIST,
        p_contact_point_list    IN      HZ_PARTY_SEARCH.CONTACT_POINT_LIST,
        p_restrict_sql          IN      VARCHAR2,
        p_match_type            IN      VARCHAR2,
        p_dup_contact_id        IN      NUMBER, 
        x_search_ctx_id         OUT     NUMBER,
        x_num_matches           OUT     NUMBER
) IS
  
  -- Strings to hold the generated Intermedia query strings
  l_party_contains_str VARCHAR2(32000); 
  l_party_site_contains_str VARCHAR2(32000);
  l_contact_contains_str VARCHAR2(32000);
  l_contact_pt_contains_str VARCHAR2(32000);
  l_tmp VARCHAR2(32000);

  -- Other local variables
  l_match_str VARCHAR2(30); -- Match type (AND or OR)
  l_match_idx NUMBER;
  l_sqlstr VARCHAR2(32000); -- Dynamic SQL String
  -- For Score calculation
  l_max_score NUMBER;
  l_entered_max_score NUMBER;
  FIRST BOOLEAN;
  l_search_ctx_id NUMBER; -- Generated Search Context ID

  l_TX1 VARCHAR2(2000);
  l_TX156 VARCHAR2(2000);
  l_TX2 VARCHAR2(2000);
  l_TX5 VARCHAR2(2000);
  l_TX6 VARCHAR2(2000);
  H_SCORES HZ_PARTY_SEARCH.score_list;

  l_score NUMBER;
  l_idx NUMBER;
  l_party_cur HZ_PARTY_STAGE.StageCurTyp;
  l_party_site_cur HZ_PARTY_STAGE.StageCurTyp;
  l_contact_cur HZ_PARTY_STAGE.StageCurTyp;
  l_contact_pt_cur HZ_PARTY_STAGE.StageCurTyp;
  l_party_id NUMBER;
  l_ps_party_id NUMBER;
  l_ct_party_id NUMBER;
  l_cpt_party_id NUMBER;
  l_cpt_ps_id NUMBER;
  l_cpt_contact_id NUMBER;
  l_cpt_type VARCHAR2(100);
  l_party_site_id NUMBER;
  l_org_contact_id NUMBER;
  l_contact_pt_id NUMBER;

  defpt NUMBER :=0;
  defps NUMBER :=0;
  defct NUMBER :=0;
  defcpt NUMBER :=0;
  l_index NUMBER;
  l_party_max_score NUMBER;
  l_ps_max_score NUMBER;
  l_contact_max_score NUMBER;
  l_cpt_max_score NUMBER;
  l_match_contact_list HZ_PARTY_SEARCH.IDList;
  l_cnt NUMBER:=1;

  
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_contacts(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Input Parameters:',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_match_type '||p_match_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_restrict_sql '||p_restrict_sql,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_dup_contact_id '||p_dup_contact_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    -- ************************************
    -- STEP 1. Initialization and error checks

    l_match_str := ' AND ';
    IF p_match_type = 'AND' THEN
      l_match_str := ' AND ';
    ELSIF p_match_type = 'OR' THEN
      l_match_str := ' OR ';
    END IF;
    l_entered_max_score:= init_search( HZ_PARTY_SEARCH.G_MISS_PARTY_SEARCH_REC, HZ_PARTY_SEARCH.G_MISS_PARTY_SITE_LIST, p_contact_list, p_contact_point_list,l_match_str, l_party_max_score, l_ps_max_score, l_contact_max_score, l_cpt_max_score);
    g_score_until_thresh := false;
    IF l_entered_max_score = 0 THEN l_entered_max_score:=1; END IF;

    -- ************************************************************
    -- STEP 2. Setup of intermedia query strings for Acquisition query
    l_contact_contains_str := INIT_CONTACTS_QUERY(l_match_str,l_tmp);
    l_contact_pt_contains_str := INIT_CONTACT_POINTS_QUERY(l_match_str,l_tmp);
    init_score_context(HZ_PARTY_SEARCH.G_MISS_PARTY_SEARCH_REC,HZ_PARTY_SEARCH.G_MISS_PARTY_SITE_LIST,p_contact_list,p_contact_point_list);

    -- Setup Search Context ID
    SELECT hz_search_ctx_s.nextval INTO l_search_ctx_id FROM dual;
    x_search_ctx_id := l_search_ctx_id;

    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_match_str '||l_match_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_contact_contains_str '||l_contact_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_contact_pt_contains_str '||l_contact_pt_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_search_ctx_id '||l_search_ctx_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    IF l_contact_contains_str IS NULL THEN
      defct := 1;
    END IF;
    IF l_contact_pt_contains_str IS NULL THEN
      defcpt := 1;
    END IF;

    IF l_contact_contains_str IS NOT NULL THEN
      open_contact_cursor(NULL, P_PARTY_ID, p_restrict_sql, l_contact_contains_str,NULL, null, l_contact_cur);
      LOOP
        FETCH l_contact_cur INTO 
            l_org_contact_id, l_ct_party_id , l_TX2, l_TX156, l_TX6, l_TX5;
        EXIT WHEN l_contact_cur%NOTFOUND;
      IF (p_dup_contact_id IS NULL OR l_org_contact_id <> p_dup_contact_id) THEN 
        l_index := map_id(l_org_contact_id);
        l_match_contact_list(l_cnt):=l_org_contact_id;
        l_cnt:=l_cnt+1;
          l_score := GET_CONTACTS_SCORE(l_match_idx,l_TX2,l_TX156,l_TX6,l_TX5);
            H_SCORES(l_index) := get_new_score_rec(l_score,defpt,defps,l_score,defcpt, l_ct_party_id, null, l_org_contact_id, null);
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Contact Level Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_org_contact_id '||l_org_contact_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      END IF; 
      END LOOP;
      CLOSE l_contact_cur;
    END IF;

    IF l_contact_pt_contains_str IS NOT NULL THEN
    SAVEPOINT eval_start;
    IF l_match_str = ' AND ' OR (
        ((l_cpt_max_score/l_entered_max_score)<(75/685))
        ) THEN
      FORALL I in 1..l_match_contact_list.COUNT
           INSERT INTO HZ_DQM_PARTIES_GT (search_context_id, party_id)
           values (l_search_ctx_id,l_match_contact_list(I));
      open_contact_pt_cursor(NULL, P_PARTY_ID, p_restrict_sql, l_contact_pt_contains_str,NULL, null,'N', 'N',l_contact_pt_cur,'CONTACTS');
    ELSE
      open_contact_pt_cursor(NULL, P_PARTY_ID, p_restrict_sql, l_contact_pt_contains_str,NULL, null,'N', 'N',l_contact_pt_cur);
    END IF;
      LOOP
        FETCH l_contact_pt_cur INTO 
            l_contact_pt_id, l_cpt_type, l_cpt_party_id, l_cpt_ps_id, l_cpt_contact_id , l_TX1, l_TX6, l_TX5;
        EXIT WHEN l_contact_pt_cur%NOTFOUND;
      IF (l_cpt_contact_id IS NOT NULL AND (p_dup_contact_id IS NULL OR l_cpt_contact_id <>  p_dup_contact_id)) THEN 
        l_index := map_id(l_cpt_contact_id);
        IF l_match_str = ' OR ' THEN
          l_score := GET_CONTACT_POINTS_SCORE(l_match_idx,l_TX1,l_TX6,l_TX5);
          IF NOT H_SCORES.EXISTS(l_index) THEN
            H_SCORES(l_index) := get_new_score_rec(l_score,defpt,defps,defct,l_score,l_cpt_party_id,l_cpt_ps_id,l_cpt_contact_id,l_contact_pt_id);
          ELSE
            IF l_score > H_SCORES(l_index).CONTACT_POINT_SCORE THEN
               H_SCORES(l_index).TOTAL_SCORE := 
                      H_SCORES(l_index).TOTAL_SCORE-H_SCORES(l_index).CONTACT_POINT_SCORE+l_score;
               H_SCORES(l_index).CONTACT_POINT_SCORE := l_score;
            END IF;
          END IF;
        ELSE
          IF H_SCORES.EXISTS(l_index) THEN
            l_score := GET_CONTACT_POINTS_SCORE(l_match_idx,l_TX1,l_TX6,l_TX5);
            IF l_score > H_SCORES(l_index).CONTACT_POINT_SCORE THEN
               H_SCORES(l_index).TOTAL_SCORE := 
                      H_SCORES(l_index).TOTAL_SCORE-H_SCORES(l_index).CONTACT_POINT_SCORE+l_score;
               H_SCORES(l_index).CONTACT_POINT_SCORE := l_score;
            END IF;
          ELSIF defps=1 THEN
            l_score := GET_CONTACT_POINTS_SCORE(l_match_idx,l_TX1,l_TX6,l_TX5);
            H_SCORES(l_index) := get_new_score_rec(l_score,defpt,defps,defct,l_score,l_cpt_party_id,l_cpt_ps_id,l_cpt_contact_id,l_contact_pt_id);
          END IF;
        END IF;
        END IF; 
      END LOOP;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Contact_point Level Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_org_contact_id '||l_cpt_contact_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      CLOSE l_contact_pt_cur;
    END IF;
    x_num_matches := 0;
    l_org_contact_id := H_SCORES.FIRST;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Evaluating Matches. Threshold : 11 ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    WHILE l_org_contact_id IS NOT NULL LOOP
      IF l_match_str = ' OR ' THEN
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match Contact ID '||H_SCORES(l_org_contact_id).ORG_CONTACT_ID,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'Score '||round((H_SCORES(l_org_contact_id).TOTAL_SCORE/l_entered_max_score)*100),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        IF (H_SCORES(l_org_contact_id).TOTAL_SCORE/l_entered_max_score)>=(75/685) THEN
            INSERT INTO HZ_MATCHED_CONTACTS_GT (SEARCH_CONTEXT_ID, PARTY_ID, ORG_CONTACT_ID, SCORE) 
            VALUES (l_search_ctx_id,H_SCORES(l_org_contact_id).PARTY_ID, H_SCORES(l_org_contact_id).ORG_CONTACT_ID, (H_SCORES(l_org_contact_id).TOTAL_SCORE/l_entered_max_score)*100);
          x_num_matches := x_num_matches+1;
        END IF;
      ELSE
           IF H_SCORES(l_org_contact_id).CONTACT_SCORE>0 AND
           H_SCORES(l_org_contact_id).CONTACT_POINT_SCORE>0 AND
           (H_SCORES(l_org_contact_id).TOTAL_SCORE/l_entered_max_score)>=(75/685) THEN
          INSERT INTO HZ_MATCHED_CONTACTS_GT (SEARCH_CONTEXT_ID, PARTY_ID, ORG_CONTACT_ID, SCORE) 
          VALUES (l_search_ctx_id,H_SCORES(l_org_contact_id).PARTY_ID, H_SCORES(l_org_contact_id).ORG_CONTACT_ID, round((H_SCORES(l_org_contact_id).TOTAL_SCORE/l_entered_max_score)*100));
          x_num_matches := x_num_matches+1;
        END IF;
      END IF;
      l_org_contact_id:=H_SCORES.NEXT(l_org_contact_id);
    END LOOP;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_contacts(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_32.get_matching_contacts');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END get_matching_contacts;


PROCEDURE get_matching_contact_points (
        p_rule_id               IN      NUMBER,
        p_party_id              IN      NUMBER,
        p_contact_point_list    IN      HZ_PARTY_SEARCH.CONTACT_POINT_LIST,
        p_restrict_sql          IN      VARCHAR2,
        p_match_type            IN      VARCHAR2,
        p_dup_contact_point_id  IN      NUMBER, 
        x_search_ctx_id         OUT     NUMBER,
        x_num_matches           OUT     NUMBER
) IS


  -- Strings to hold the generated Intermedia query strings
  l_contact_pt_contains_str VARCHAR2(32000);
  l_tmp VARCHAR2(32000);

  -- Other local variables
  l_match_str VARCHAR2(30); -- Match type (AND or OR)
  l_match_idx NUMBER;
  -- For Score calculation
  l_entered_max_score NUMBER;
  l_search_ctx_id NUMBER; -- Generated Search Context ID

  l_TX1 VARCHAR2(2000);
  l_TX5 VARCHAR2(2000);
  l_TX6 VARCHAR2(2000);

  l_score NUMBER;
  l_idx NUMBER;
  l_contact_pt_cur HZ_PARTY_STAGE.StageCurTyp;
  l_cpt_party_id NUMBER;
  l_cpt_ps_id NUMBER;
  l_cpt_contact_id NUMBER;
  l_contact_pt_id NUMBER;
  l_cpt_type VARCHAR2(100);
  H_PARTY_ID HZ_PARTY_SEARCH.IDList;
  H_CONTACT_POINT_ID HZ_PARTY_SEARCH.IDList;
  H_SCORE  HZ_PARTY_SEARCH.IDList;

  cnt NUMBER :=0;
  l_party_max_score NUMBER;
  l_ps_max_score NUMBER;
  l_contact_max_score NUMBER;
  l_cpt_max_score NUMBER;

  
  BEGIN
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_contact_points(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Input Parameters:',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_match_type '||p_match_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_restrict_sql '||p_restrict_sql,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'p_dup_contact_point_id '||p_dup_contact_point_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    -- ************************************
    -- STEP 1. Initialization and error checks

    l_match_str := ' AND ';
    IF p_match_type = 'AND' THEN
      l_match_str := ' AND ';
    ELSIF p_match_type = 'OR' THEN
      l_match_str := ' OR ';
    END IF;
    l_entered_max_score:= init_search(HZ_PARTY_SEARCH.G_MISS_PARTY_SEARCH_REC, 
       HZ_PARTY_SEARCH.G_MISS_PARTY_SITE_LIST, HZ_PARTY_SEARCH.G_MISS_CONTACT_LIST,
       p_contact_point_list,l_match_str, l_party_max_score, l_ps_max_score, l_contact_max_score, l_cpt_max_score);
    g_score_until_thresh := false;
    IF l_entered_max_score = 0 THEN l_entered_max_score:=1; END IF;

    -- ************************************************************
    -- STEP 2. Setup of intermedia query strings for Acquisition query
    l_contact_pt_contains_str := INIT_CONTACT_POINTS_QUERY(l_match_str,l_tmp);
    init_score_context(HZ_PARTY_SEARCH.G_MISS_PARTY_SEARCH_REC,HZ_PARTY_SEARCH.G_MISS_PARTY_SITE_LIST,HZ_PARTY_SEARCH.G_MISS_CONTACT_LIST,p_contact_point_list);

    -- Setup Search Context ID
    SELECT hz_search_ctx_s.nextval INTO l_search_ctx_id FROM dual;
    x_search_ctx_id := l_search_ctx_id;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_match_str '||l_match_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_contact_pt_contains_str '||l_contact_pt_contains_str,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_search_ctx_id '||l_search_ctx_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;

    IF l_contact_pt_contains_str IS NOT NULL THEN
      open_contact_pt_cursor(NULL, P_PARTY_ID, p_restrict_sql, l_contact_pt_contains_str,NULL, null,'N', 'N',l_contact_pt_cur);
      cnt := 1;
      LOOP
        FETCH l_contact_pt_cur INTO 
            l_contact_pt_id, l_cpt_type, l_cpt_party_id, l_cpt_ps_id, l_cpt_contact_id , l_TX1, l_TX6, l_TX5;
        EXIT WHEN l_contact_pt_cur%NOTFOUND;
        IF (p_dup_contact_point_id IS NULL OR (
               p_dup_contact_point_id IS NOT NULL AND 
               l_cpt_ps_id IS NULL AND l_cpt_contact_id IS NULL AND 
               p_dup_contact_point_id <>  l_contact_pt_id)) THEN   
            H_CONTACT_POINT_ID(cnt) := l_contact_pt_id;
            H_PARTY_ID(cnt) := l_cpt_party_id;
            H_SCORE(cnt) := GET_CONTACT_POINTS_SCORE(l_match_idx,l_TX1,l_TX6,l_TX5);
            cnt := cnt+1;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Contact Point Matches',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_contact_pt_id '||l_contact_pt_id,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'l_score '||l_score,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        END IF; 
      END LOOP;
      CLOSE l_contact_pt_cur;
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Evaluating Matches. Threshold : 11 ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      x_num_matches := 0; 
      FOR I in 1..H_CONTACT_POINT_ID.COUNT LOOP
    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Match Contact Point ID '||H_CONTACT_POINT_ID(I),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
      hz_utility_v2pub.debug(p_message=>'Score '||round((H_SCORE(I)/l_entered_max_score)*100),p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        IF (H_SCORE(I)/l_entered_max_score) >= (75/685) THEN
        INSERT INTO HZ_MATCHED_CPTS_GT(SEARCH_CONTEXT_ID,CONTACT_POINT_ID,PARTY_ID,SCORE) VALUES (
            l_search_ctx_id,H_CONTACT_POINT_ID(I),H_PARTY_ID(I),round(H_SCORE(I)/l_entered_max_score)*100);
            x_num_matches := x_num_matches + 1; 
        END IF;
      END LOOP; 
    END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_matching_contact_points(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_32.get_matching_contact_points');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END get_matching_contact_points;

   /**********************************************************
   This procedure finds the score details for a specific party that 
   matched 

   **********************************************************/

PROCEDURE get_score_details (
        p_rule_id               IN      NUMBER,
        p_party_id              IN      NUMBER,
        p_party_search_rec      IN      HZ_PARTY_SEARCH.party_search_rec_type,
        p_party_site_list       IN      HZ_PARTY_SEARCH.party_site_list,
        p_contact_list          IN      HZ_PARTY_SEARCH.contact_list,
        p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list,
        x_search_ctx_id         IN OUT  NUMBER
) IS

  -- Strings to hold the generated Intermedia query strings
  l_party_contains_str VARCHAR2(32000); 
  l_party_site_contains_str VARCHAR2(32000);
  l_contact_contains_str VARCHAR2(32000);
  l_contact_pt_contains_str VARCHAR2(32000);
  l_tmp VARCHAR2(32000);

  -- Other local variables
  l_match_str VARCHAR2(30); -- Match type (AND or OR)
  -- For Score calculation
  l_max_score NUMBER;
  l_entered_max_score NUMBER;
  FIRST BOOLEAN;
  l_search_ctx_id NUMBER; -- Generated Search Context ID

  l_TX1 VARCHAR2(2000);
  l_max_TX1 VARCHAR2(2000);
  l_TX10 VARCHAR2(2000);
  l_max_TX10 VARCHAR2(2000);
  l_TX11 VARCHAR2(2000);
  l_max_TX11 VARCHAR2(2000);
  l_TX14 VARCHAR2(2000);
  l_max_TX14 VARCHAR2(2000);
  l_TX15 VARCHAR2(2000);
  l_max_TX15 VARCHAR2(2000);
  l_TX156 VARCHAR2(2000);
  l_max_TX156 VARCHAR2(2000);
  l_TX158 VARCHAR2(2000);
  l_max_TX158 VARCHAR2(2000);
  l_TX2 VARCHAR2(2000);
  l_max_TX2 VARCHAR2(2000);
  l_TX22 VARCHAR2(2000);
  l_max_TX22 VARCHAR2(2000);
  l_TX3 VARCHAR2(2000);
  l_max_TX3 VARCHAR2(2000);
  l_TX34 VARCHAR2(2000);
  l_max_TX34 VARCHAR2(2000);
  l_TX39 VARCHAR2(2000);
  l_max_TX39 VARCHAR2(2000);
  l_TX4 VARCHAR2(2000);
  l_max_TX4 VARCHAR2(2000);
  l_TX40 VARCHAR2(2000);
  l_max_TX40 VARCHAR2(2000);
  l_TX44 VARCHAR2(2000);
  l_max_TX44 VARCHAR2(2000);
  l_TX45 VARCHAR2(2000);
  l_max_TX45 VARCHAR2(2000);
  l_TX46 VARCHAR2(2000);
  l_max_TX46 VARCHAR2(2000);
  l_TX47 VARCHAR2(2000);
  l_max_TX47 VARCHAR2(2000);
  l_TX5 VARCHAR2(2000);
  l_max_TX5 VARCHAR2(2000);
  l_TX6 VARCHAR2(2000);
  l_max_TX6 VARCHAR2(2000);
  l_TX9 VARCHAR2(2000);
  l_max_TX9 VARCHAR2(2000);
  H_SCORES HZ_PARTY_SEARCH.score_list;

  l_score NUMBER;
  l_match_idx NUMBER;
  l_idx NUMBER;
  l_party_cur HZ_PARTY_STAGE.StageCurTyp;
  l_party_site_cur HZ_PARTY_STAGE.StageCurTyp;
  l_contact_cur HZ_PARTY_STAGE.StageCurTyp;
  l_contact_pt_cur HZ_PARTY_STAGE.StageCurTyp;
  l_party_id NUMBER;
  l_ps_party_id NUMBER;
  l_ct_party_id NUMBER;
  l_cpt_party_id NUMBER;
  l_cpt_ps_id NUMBER;
  l_cpt_contact_id NUMBER;
  l_cpt_type VARCHAR2(100);
  l_party_site_id NUMBER;
  l_org_contact_id NUMBER;
  l_contact_pt_id NUMBER;
  l_ps_contact_id NUMBER;
  l_max_id NUMBER;
  l_max_idx NUMBER;

  l_index NUMBER;
  l_party_max_score NUMBER;
  l_ps_max_score NUMBER;
  l_contact_max_score NUMBER;
  l_cpt_max_score NUMBER;

  --Fix for bug 4417124 
  l_use_contact_addr_info BOOLEAN:=TRUE;
  l_use_contact_cpt_info  BOOLEAN:=TRUE;
  l_TX35_new VARCHAR2(4000);

  BEGIN

    IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_score_details(+) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    -- ************************************
    -- STEP 1. Initialization and error checks

    l_entered_max_score:= init_search(p_party_search_rec,p_party_site_list,p_contact_list,p_contact_point_list,' OR ', l_party_max_score, l_ps_max_score, l_contact_max_score, l_cpt_max_score);
    g_score_until_thresh := false;
    IF l_entered_max_score = 0 THEN l_entered_max_score:=1; END IF;
    -- ************************************************************
    -- STEP 2. Setup of intermedia query strings for Acquisition query
    l_party_site_contains_str := INIT_PARTY_SITES_QUERY(l_match_str,l_tmp);
    l_contact_contains_str := INIT_CONTACTS_QUERY(l_match_str,l_tmp);
    l_contact_pt_contains_str := INIT_CONTACT_POINTS_QUERY(l_match_str,l_tmp);
    init_score_context(p_party_search_rec,p_party_site_list,p_contact_list,p_contact_point_list);

    -- Setup Search Context ID
    IF x_search_ctx_id IS NULL THEN
      SELECT hz_search_ctx_s.nextval INTO l_search_ctx_id FROM dual;
      x_search_ctx_id := l_search_ctx_id;
    ELSE
      l_search_ctx_id := x_search_ctx_id;
    END IF;

    open_party_cursor(p_party_id, null, null,null,null,null,l_party_cur);
    LOOP 
        FETCH l_party_cur INTO
           l_party_id , l_TX34, l_TX40, l_TX158, l_TX39, l_TX44, l_TX45, l_TX46, l_TX47;
        EXIT WHEN l_party_cur%NOTFOUND;
          INSERT_PARTY_SCORE(p_party_id, p_party_id, l_search_ctx_id, p_party_search_rec, g_party_stage_rec, l_TX34,l_TX40,l_TX158,l_TX39,l_TX44,l_TX45,l_TX46,l_TX47,1);
    END LOOP;
    CLOSE l_party_cur;

    IF l_party_site_contains_str IS NOT NULL THEN
      l_max_score := 0;
      l_max_id := 0;
      l_max_idx := 0;
      IF p_party_search_rec.PARTY_TYPE = 'PERSON' AND l_use_contact_addr_info THEN
        open_party_site_cursor(null, p_party_id, null, l_party_site_contains_str,NULL,NULL, 'Y','N',l_party_site_cur);
      ELSE
        open_party_site_cursor(null, p_party_id, null, l_party_site_contains_str,NULL,NULL, 'N','N',l_party_site_cur);
      END IF;
      LOOP
        FETCH l_party_site_cur INTO 
            l_party_site_id, l_ps_party_id,l_ps_contact_id , l_TX3, l_TX4, l_TX9, l_TX10, l_TX11, l_TX14, l_TX15, l_TX22;
        EXIT WHEN l_party_site_cur%NOTFOUND;
        l_score := GET_PARTY_SITES_SCORE(l_match_idx,l_TX3,l_TX4,l_TX9,l_TX10,l_TX11,l_TX14,l_TX15,l_TX22);
        IF l_score > l_max_score THEN
          l_max_score := l_score;
          l_max_id := l_party_site_id;
          l_max_idx := l_match_idx;
          l_max_TX10 := l_TX10;
          l_max_TX11 := l_TX11;
          l_max_TX14 := l_TX14;
          l_max_TX15 := l_TX15;
          l_max_TX22 := l_TX22;
          l_max_TX3 := l_TX3;
          l_max_TX4 := l_TX4;
          l_max_TX9 := l_TX9;
        END IF;
      END LOOP;
      CLOSE l_party_site_cur;
      IF l_max_score>0 THEN
        INSERT_PARTY_SITES_SCORE(p_party_id,l_max_id,l_search_ctx_id, p_party_site_list(l_max_idx), g_party_site_stage_list(l_max_idx) ,l_max_TX3,l_max_TX4,l_max_TX9,l_max_TX10,l_max_TX11,l_max_TX14,l_max_TX15,l_max_TX22,l_max_idx);
      END IF;
    END IF;

    IF l_contact_contains_str IS NOT NULL THEN
      l_max_score := 0;
      l_max_id := 0;
      l_max_idx := 0;
      open_contact_cursor(null, p_party_id, null, l_contact_contains_str,NULL, null, l_contact_cur);
      LOOP
        FETCH l_contact_cur INTO 
            l_org_contact_id, l_ct_party_id , l_TX2, l_TX156, l_TX6, l_TX5;
        EXIT WHEN l_contact_cur%NOTFOUND;
        l_score := GET_CONTACTS_SCORE(l_match_idx,l_TX2,l_TX156,l_TX6,l_TX5);
        IF l_score > l_max_score THEN
          l_max_score := l_score;
          l_max_id := l_org_contact_id;
          l_max_idx := l_match_idx;
          l_max_TX156 := l_TX156;
          l_max_TX2 := l_TX2;
          l_max_TX5 := l_TX5;
          l_max_TX6 := l_TX6;
        END IF;
      END LOOP;
      CLOSE l_contact_cur;
      IF l_max_score>0 THEN
        INSERT_CONTACTS_SCORE(p_party_id,l_max_id,l_search_ctx_id, p_contact_list(l_max_idx), g_contact_stage_list(l_max_idx) ,l_max_TX2,l_max_TX156,l_max_TX6,l_max_TX5,l_max_idx);
      END IF;
    END IF;

    IF l_contact_pt_contains_str IS NOT NULL THEN
      l_max_score := 0;
      l_max_id := 0;
      l_max_idx := 0;
      IF p_party_search_rec.PARTY_TYPE = 'PERSON' AND l_use_contact_cpt_info THEN
        open_contact_pt_cursor(null, p_party_id, null, l_contact_pt_contains_str,NULL,NULL, 'Y','N',l_contact_pt_cur);
      ELSE
        open_contact_pt_cursor(null, p_party_id, null, l_contact_pt_contains_str,NULL,NULL, 'N','N',l_contact_pt_cur);
      END IF;
      LOOP
        FETCH l_contact_pt_cur INTO 
            l_contact_pt_id, l_cpt_type, l_cpt_party_id, l_cpt_ps_id, l_cpt_contact_id , l_TX1, l_TX6, l_TX5;
        EXIT WHEN l_contact_pt_cur%NOTFOUND;
        l_score := GET_CONTACT_POINTS_SCORE(l_match_idx,l_TX1,l_TX6,l_TX5);
        IF l_score > l_max_score THEN
          l_max_score := l_score;
          l_max_id := l_contact_pt_id;
          l_max_idx := l_match_idx;
          l_max_TX1 := l_TX1;
          l_max_TX5 := l_TX5;
          l_max_TX6 := l_TX6;
        END IF;
      END LOOP;
      IF l_max_score>0 THEN
        INSERT_CONTACT_POINTS_SCORE(p_party_id,l_max_id,l_search_ctx_id, p_contact_point_list(l_max_idx), g_contact_pt_stage_list(l_max_idx) ,l_max_TX1,l_max_TX6,l_max_TX5,l_max_idx);
      END IF;
      CLOSE l_contact_pt_cur;
    END IF;
    IF fnd_log.level_procedure>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'get_score_details(-) ',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_procedure);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','HZ_MATCH_RULE_32.get_score_details');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END get_score_details;


/************************************************
  This procedure retrieves the match rule attributes into 
  the search record structures
************************************************/

PROCEDURE get_party_for_search (
        p_party_id              IN      NUMBER,
        x_party_search_rec      OUT NOCOPY HZ_PARTY_SEARCH.party_search_rec_type,
        x_party_site_list       OUT NOCOPY HZ_PARTY_SEARCH.party_site_list,
        x_contact_list          OUT NOCOPY HZ_PARTY_SEARCH.contact_list,
        x_contact_point_list    OUT NOCOPY HZ_PARTY_SEARCH.contact_point_list
) IS
  l_party_id NUMBER;
  l_party_site_ids HZ_PARTY_SEARCH.IDList;
  l_contact_ids HZ_PARTY_SEARCH.IDList;
  l_contact_pt_ids HZ_PARTY_SEARCH.IDList;
  ps NUMBER :=1;
  cpt NUMBER :=1;
  ct NUMBER :=1;
  l_use_contact_info varchar2(1);
BEGIN

    l_use_contact_info := 'Y';
  IF nvl(FND_PROFILE.VALUE('HZ_DQM_REL_PARTY_MATCH'),'N')='Y' THEN
    l_use_contact_info := 'N';
  END IF;
  l_party_id := p_party_id;
  FOR PARTY_SITES IN (
 SELECT party_site_id FROM (
     SELECT party_site_id,identifying_address_flag
      FROM HZ_PARTY_SITES
      WHERE party_id = p_party_id
      AND (status is null OR status = 'A') 
      AND identifying_address_flag='Y'
      UNION

     SELECT party_site_id,NVL(identifying_address_flag,'N') identifying_address_flag
      FROM HZ_PARTY_SITES
      WHERE party_id = p_party_id
      AND (status is null OR status = 'A') 
      AND (identifying_address_flag IS NULL OR identifying_address_flag = 'N')
      AND ROWNUM<6
      UNION

     SELECT party_site_id,NVL(identifying_address_flag,'N') identifying_address_flag
      FROM HZ_PARTY_SITES
      WHERE (status is null OR status = 'A') 
      AND party_id in (
        SELECT party_id
        FROM HZ_ORG_CONTACTS, HZ_RELATIONSHIPS
        WHERE HZ_RELATIONSHIPS.object_id = p_party_id
        AND HZ_RELATIONSHIPS.SUBJECT_TABLE_NAME = 'HZ_PARTIES'
        AND HZ_RELATIONSHIPS.OBJECT_TABLE_NAME = 'HZ_PARTIES'
        AND HZ_ORG_CONTACTS.party_relationship_id = HZ_RELATIONSHIPS.relationship_id
        and l_use_contact_info = 'Y'
     ) 
     AND ROWNUM<6
) order by identifying_address_flag desc
    ) LOOP
      l_party_site_ids(ps) := PARTY_SITES.party_site_id;
      ps:=ps+1;
  END LOOP;
    FOR CONTACTS IN (
      SELECT org_contact_id
      FROM HZ_ORG_CONTACTS, HZ_RELATIONSHIPS
      WHERE HZ_RELATIONSHIPS.object_id = p_party_id
      AND HZ_RELATIONSHIPS.SUBJECT_TABLE_NAME = 'HZ_PARTIES'
      AND HZ_RELATIONSHIPS.OBJECT_TABLE_NAME = 'HZ_PARTIES'
      AND HZ_RELATIONSHIPS.DIRECTIONAL_FLAG = 'F'
      AND HZ_ORG_CONTACTS.party_relationship_id = HZ_RELATIONSHIPS.relationship_id
      AND ROWNUM<6 
    ) LOOP
      l_contact_ids(ct) := CONTACTS.org_contact_id;
      ct := ct+1;
    END LOOP;
    FOR CONTACT_POINTS IN (
      SELECT CONTACT_POINT_ID
      FROM HZ_CONTACT_POINTS 
      WHERE PRIMARY_FLAG = 'Y'
      AND owner_table_name = 'HZ_PARTIES'
      AND owner_table_id = p_party_id

      UNION

      SELECT CONTACT_POINT_ID
      FROM HZ_CONTACT_POINTS,HZ_ORG_CONTACTS, HZ_RELATIONSHIPS 
      WHERE PRIMARY_FLAG = 'Y'
      AND owner_table_name = 'HZ_PARTIES'
      AND OWNER_TABLE_ID = HZ_RELATIONSHIPS.party_id
      AND HZ_RELATIONSHIPS.object_id = p_party_id
      AND HZ_RELATIONSHIPS.SUBJECT_TABLE_NAME = 'HZ_PARTIES'
      AND HZ_RELATIONSHIPS.OBJECT_TABLE_NAME = 'HZ_PARTIES'
      AND HZ_ORG_CONTACTS.party_relationship_id = HZ_RELATIONSHIPS.relationship_id
        and l_use_contact_info = 'Y'
      AND ROWNUM<6
      UNION

      SELECT CONTACT_POINT_ID
      FROM HZ_CONTACT_POINTS,HZ_PARTY_SITES  
      WHERE PRIMARY_FLAG = 'Y'
      AND owner_table_name = 'HZ_PARTY_SITES'
      AND owner_table_id = party_site_id 
      AND PARTY_ID = p_party_id 
      AND IDENTIFYING_ADDRESS_FLAG = 'Y') LOOP
      l_contact_pt_ids(cpt) := CONTACT_POINTS.CONTACT_POINT_ID;
      cpt := cpt+1;
    END LOOP;
    get_search_criteria(l_party_id,l_party_site_ids,l_contact_ids,l_contact_pt_ids,
          x_party_search_rec,x_party_site_list,x_contact_list,x_contact_point_list);
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','get_party_for_search');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END get_party_for_search;

PROCEDURE get_search_criteria (
        p_party_id              IN      NUMBER,
        p_party_site_ids        IN      HZ_PARTY_SEARCH.IDList,
        p_contact_ids           IN      HZ_PARTY_SEARCH.IDList,
        p_contact_pt_ids        IN      HZ_PARTY_SEARCH.IDList,
        x_party_search_rec      OUT NOCOPY HZ_PARTY_SEARCH.party_search_rec_type,
        x_party_site_list       OUT NOCOPY HZ_PARTY_SEARCH.party_site_list,
        x_contact_list          OUT NOCOPY HZ_PARTY_SEARCH.contact_list,
        x_contact_point_list    OUT NOCOPY HZ_PARTY_SEARCH.contact_point_list
) IS
BEGIN

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside Calling Procedure - get_search_criteria',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    IF p_party_id IS NOT NULL THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Before Calling Procedure - get_party_rec',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      get_party_rec(p_party_id, x_party_search_rec);
    END IF;
    IF p_party_site_ids IS NOT NULL AND p_party_site_ids.COUNT>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Before Calling Procedure - get_party_site_rec',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      get_party_site_rec(p_party_site_ids, x_party_site_list);
    END IF;
    IF p_contact_ids IS NOT NULL AND p_contact_ids.COUNT>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Before Calling Procedure - get_contact_rec',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      get_contact_rec(p_contact_ids, x_contact_list);
    END IF;
    IF p_contact_pt_ids IS NOT NULL AND p_contact_pt_ids.COUNT>0 THEN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Before Calling Procedure - get_contact_point_rec',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
      get_contact_point_rec(p_contact_pt_ids, x_contact_point_list);
    END IF;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN FND_API.G_EXC_UNEXPECTED_ERROR THEN
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','get_search_criteria');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END get_search_criteria;


/************************************************
  This procedure retrieves the match rule party attributes into 
  the party search record structure 
************************************************/

PROCEDURE get_party_rec (
        p_party_id              IN      NUMBER,
        x_party_search_rec      OUT NOCOPY HZ_PARTY_SEARCH.party_search_rec_type
) IS
    l_party_type VARCHAR2(255);
BEGIN

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside calling procedure - get_party_rec',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    SELECT PARTY_TYPE INTO l_party_type
    FROM HZ_PARTIES
    WHERE PARTY_ID = p_party_id;

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'l_party_type is -  '||l_party_type,p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    IF l_party_type = 'ORGANIZATION' THEN
      SELECT 
        translate(HZ_ORGANIZATION_PROFILES.JGZZ_FISCAL_CODE, '%',' ')
       ,translate(HZ_PARTIES.PARTY_NUMBER, '%',' ')
       ,translate(HZ_PARTIES.PARTY_TYPE, '%',' ')
       ,translate(HZ_ORGANIZATION_PROFILES.SIC_CODE, '%',' ')
       ,translate(HZ_ORGANIZATION_PROFILES.SIC_CODE_TYPE, '%',' ')
       ,translate(HZ_ORGANIZATION_PROFILES.TAX_REFERENCE, '%',' ')
      INTO 
        x_party_search_rec.JGZZ_FISCAL_CODE
       ,x_party_search_rec.PARTY_NUMBER
       ,x_party_search_rec.PARTY_TYPE
       ,x_party_search_rec.SIC_CODE
       ,x_party_search_rec.SIC_CODE_TYPE
       ,x_party_search_rec.TAX_REFERENCE
      FROM HZ_PARTIES, HZ_ORGANIZATION_PROFILES
      WHERE HZ_PARTIES.party_id = HZ_ORGANIZATION_PROFILES.party_id
      AND HZ_ORGANIZATION_PROFILES.effective_end_date is NULL
      AND HZ_PARTIES.party_id = p_party_id;
    ELSIF l_party_type = 'PERSON' THEN
      SELECT 
        translate(HZ_PERSON_PROFILES.JGZZ_FISCAL_CODE, '%',' ')
       ,translate(HZ_PARTIES.PARTY_NUMBER, '%',' ')
       ,translate(HZ_PARTIES.PARTY_TYPE, '%',' ')
       ,translate(HZ_PERSON_PROFILES.TAX_REFERENCE, '%',' ')
      INTO 
        x_party_search_rec.JGZZ_FISCAL_CODE
       ,x_party_search_rec.PARTY_NUMBER
       ,x_party_search_rec.PARTY_TYPE
       ,x_party_search_rec.TAX_REFERENCE
      FROM HZ_PARTIES, HZ_PERSON_PROFILES
      WHERE HZ_PARTIES.party_id = HZ_PERSON_PROFILES.party_id
      AND HZ_PERSON_PROFILES.effective_end_date is NULL
      AND HZ_PARTIES.party_id = p_party_id;
    END IF;
    x_party_search_rec.PARTY_TYPE := l_party_type;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside calling procedure - generate_custom_code',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    x_party_search_rec.PARTY_ALL_NAMES:=
       HZ_PARTY_ACQUIRE.get_known_as(p_party_id , 'PARTY','PARTY_ALL_NAMES');

EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_PARTY_QUERY_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','get_party_rec');
    FND_MESSAGE.SET_TOKEN('PARTY_ID',p_party_id);
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_ERROR;
END get_party_rec;

/************************************************
  This procedure retrieves the match rule party site attributes into 
  the party site search record structure 
************************************************/

PROCEDURE get_party_site_rec (
        p_party_site_ids       IN      HZ_PARTY_SEARCH.IDList,
        x_party_site_list      OUT NOCOPY HZ_PARTY_SEARCH.party_site_list
) IS
  CURSOR c_party_sites(cp_party_site_id NUMBER) IS
    SELECT party_site_id
      ,translate(HZ_LOCATIONS.CITY, '%',' ')
      ,translate(HZ_LOCATIONS.COUNTRY, '%',' ')
      ,translate(HZ_LOCATIONS.POSTAL_CODE, '%',' ')
      ,translate(HZ_LOCATIONS.STATE, '%',' ')
    FROM HZ_PARTY_SITES, HZ_LOCATIONS
    WHERE HZ_PARTY_SITES.party_site_id = cp_party_site_id
    AND   HZ_PARTY_SITES.location_id = HZ_LOCATIONS.location_id;

  I NUMBER;
  J NUMBER:=1;
  l_party_site_id NUMBER;

BEGIN

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside calling procedure - get_party_site_rec',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    FOR I IN 1..p_party_site_ids.COUNT LOOP
      l_party_site_id := p_party_site_ids(I);
      OPEN c_party_sites(p_party_site_ids(I));
      LOOP
        FETCH c_party_sites INTO
             l_party_site_id
           ,x_party_site_list(J).CITY
           ,x_party_site_list(J).COUNTRY
           ,x_party_site_list(J).POSTAL_CODE
           ,x_party_site_list(J).STATE
        ;
        EXIT WHEN c_party_sites%NOTFOUND;

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside calling procedure - generate_custom_code',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        x_party_site_list(J).ADDRESS:=
       HZ_PARTY_ACQUIRE.get_address(l_party_site_id , 'PARTY_SITES','ADDRESS');
        J:=J+1;

      END LOOP;
      CLOSE c_party_sites;
    END LOOP;

EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_PARTY_QUERY_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','get_party_site_rec');
    FND_MESSAGE.SET_TOKEN('PARTY_ID',l_party_site_id);
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_ERROR;
END get_party_site_rec;

/************************************************
  This procedure retrieves the match rule contact attributes into 
  the contact search record structure 
************************************************/

PROCEDURE get_contact_rec (
        p_contact_ids       IN      HZ_PARTY_SEARCH.IDList,
        x_contact_list      OUT NOCOPY HZ_PARTY_SEARCH.contact_list
) IS
  CURSOR c_contacts(cp_org_contact_id NUMBER) IS
    SELECT org_contact_id
    FROM HZ_ORG_CONTACTS, HZ_RELATIONSHIPS, HZ_PERSON_PROFILES
    WHERE HZ_ORG_CONTACTS.org_contact_id = cp_org_contact_id
    AND HZ_RELATIONSHIPS.SUBJECT_TABLE_NAME = 'HZ_PARTIES'
    AND HZ_RELATIONSHIPS.OBJECT_TABLE_NAME = 'HZ_PARTIES'
    AND HZ_RELATIONSHIPS.DIRECTIONAL_FLAG = 'F'
    AND HZ_ORG_CONTACTS.party_relationship_id = HZ_RELATIONSHIPS.relationship_id
    AND HZ_RELATIONSHIPS.subject_id = HZ_PERSON_PROFILES.party_id
    AND HZ_PERSON_PROFILES.effective_end_date IS NULL;

  I NUMBER;
  l_org_contact_id NUMBER;
  J NUMBER:=1;
  BEGIN

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside calling procedure - get_contact_rec',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    FOR I IN 1..p_contact_ids.COUNT LOOP
      l_org_contact_id := p_contact_ids(I);
      OPEN c_contacts(p_contact_ids(I));
      LOOP
        FETCH c_contacts INTO
             l_org_contact_id
        ;
        EXIT WHEN c_contacts%NOTFOUND;

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside calling procedure - generate_custom_code',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        x_contact_list(J).CONTACT_NAME:=
       HZ_PARTY_ACQUIRE.get_contact_name(l_org_contact_id , 'CONTACTS','CONTACT_NAME');

        J:=J+1;
      END LOOP;
      CLOSE c_contacts;
    END LOOP;

EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_PARTY_QUERY_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','get_contact_rec');
    FND_MESSAGE.SET_TOKEN('PARTY_ID',l_org_contact_id);
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_ERROR;
END get_contact_rec;

/************************************************
  This procedure retrieves the match rule contact point attributes into 
  the contact point search record structure 
************************************************/

PROCEDURE get_contact_point_rec (
        p_contact_point_ids     IN  HZ_PARTY_SEARCH.IDList,
        x_contact_point_list    OUT NOCOPY HZ_PARTY_SEARCH.contact_point_list
) IS

  -- Cursor to fetch primary contact points for party
  CURSOR c_cpts(cp_contact_point_id NUMBER) IS
    SELECT contact_point_id, contact_point_type
      ,translate(HZ_CONTACT_POINTS.EMAIL_ADDRESS, '%',' ')
    FROM HZ_CONTACT_POINTS
    WHERE contact_point_id = cp_contact_point_id;

  I NUMBER;
  l_contact_point_id NUMBER;
  J NUMBER:=1;
  BEGIN

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside calling procedure - get_contact_point_rec',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
    FOR I in 1..p_contact_point_ids.COUNT LOOP
      l_contact_point_id := p_contact_point_ids(I);
      OPEN c_cpts(p_contact_point_ids(I));
      LOOP
        FETCH c_cpts INTO
             l_contact_point_id, x_contact_point_list(J).contact_point_type
             ,x_contact_point_list(J).EMAIL_ADDRESS
        ;
        EXIT WHEN c_cpts%NOTFOUND;

   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside calling procedure - generate_custom_code',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
        x_contact_point_list(J).FLEX_FORMAT_PHONE_NUMBER:=
       HZ_PARTY_ACQUIRE.get_phone_number(l_contact_point_id , 'CONTACT_POINTS','FLEX_FORMAT_PHONE_NUMBER');
        J:=J+1;

      END LOOP;
      CLOSE c_cpts;
    END LOOP;

EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_PARTY_QUERY_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','get_contact_point_rec');
    FND_MESSAGE.SET_TOKEN('PARTY_ID',l_contact_point_id);
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_ERROR;
END get_contact_point_rec;

/************************************************
  This procedure maps a search record from the logical
  record structure to the stage schema structure 
  for the PARTY Entity after applying 
  the defined transformations
************************************************/

PROCEDURE MAP_PARTY_REC( 
    p_search_ctx IN BOOLEAN,
    p_search_rec IN HZ_PARTY_SEARCH.party_search_rec_type, 
    x_entered_max_score OUT NUMBER,
    x_stage_rec IN OUT NOCOPY HZ_PARTY_STAGE.party_stage_rec_type
  ) IS 
  tmp VARCHAR2(4000);
  l_party_name VARCHAR2(4000);
BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside Calling Procedure - MAP_PARTY_REC',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF p_search_ctx THEN
     x_stage_rec.TX8 := NULL;
     g_other_party_level_attribs:=FALSE;
    IF p_search_rec.PARTY_NUMBER IS NOT NULL 
    OR p_search_rec.TAX_REFERENCE IS NOT NULL 
    OR p_search_rec.JGZZ_FISCAL_CODE IS NOT NULL 
    OR p_search_rec.SIC_CODE IS NOT NULL 
    OR p_search_rec.SIC_CODE_TYPE IS NOT NULL 
    THEN
      g_other_party_level_attribs:=TRUE;
    END IF;
     x_entered_max_score:=0;
    IF p_search_rec.PARTY_NUMBER IS NOT NULL THEN 
      x_entered_max_score := x_entered_max_score+100;
    END IF;
    IF p_search_rec.PARTY_ALL_NAMES IS NOT NULL THEN 
      x_entered_max_score := x_entered_max_score+60;
    END IF;
    IF p_search_rec.TAX_REFERENCE IS NOT NULL THEN 
      x_entered_max_score := x_entered_max_score+100;
    END IF;
    IF p_search_rec.JGZZ_FISCAL_CODE IS NOT NULL THEN 
      x_entered_max_score := x_entered_max_score+60;
    END IF;
    IF p_search_rec.SIC_CODE IS NOT NULL THEN 
      x_entered_max_score := x_entered_max_score+25;
    END IF;
    IF p_search_rec.SIC_CODE_TYPE IS NOT NULL THEN 
      x_entered_max_score := x_entered_max_score+25;
    END IF;
    END IF;
  IF p_search_ctx THEN
    IF p_search_rec.JGZZ_FISCAL_CODE IS NOT NULL THEN 
      x_stage_rec.TX45 := 
        HZ_TRANS_PKG.RM_SPLCHAR(
             p_search_rec.JGZZ_FISCAL_CODE
             ,null,'JGZZ_FISCAL_CODE'
             ,'PARTY','SEARCH');
    ELSE
      x_stage_rec.TX45 := '';
    END IF;
  ELSE
    IF p_search_rec.JGZZ_FISCAL_CODE IS NOT NULL THEN 
      tmp :=HZ_TRANS_PKG.RM_SPLCHAR(
             x_stage_rec.TX45
             ,null,'JGZZ_FISCAL_CODE'
             ,'PARTY','SCORE');
      IF tmp IS NOT NULL THEN
        x_stage_rec.TX45 := tmp;
      END IF;
    END IF;
  END IF;
  IF p_search_ctx THEN
    IF p_search_rec.PARTY_ALL_NAMES IS NOT NULL THEN 
      x_stage_rec.TX158 := 
        HZ_TRANS_PKG.SOUNDX(
             p_search_rec.PARTY_ALL_NAMES
             ,null,'PARTY_ALL_NAMES'
             ,'PARTY');
    ELSE
      x_stage_rec.TX158 := '';
    END IF;
  END IF;
  IF p_search_ctx THEN
    IF p_search_rec.PARTY_ALL_NAMES IS NOT NULL THEN 
      x_stage_rec.TX40 := 
        HZ_TRANS_PKG.WRNAMES_CLEANSE(
             p_search_rec.PARTY_ALL_NAMES
             ,null,'PARTY_ALL_NAMES'
             ,'PARTY','SEARCH');
    ELSE
      x_stage_rec.TX40 := '';
    END IF;
  ELSE
    IF p_search_rec.PARTY_ALL_NAMES IS NOT NULL THEN 
      tmp :=HZ_TRANS_PKG.WRNAMES_CLEANSE(
             x_stage_rec.TX40
             ,null,'PARTY_ALL_NAMES'
             ,'PARTY','SCORE');
      IF tmp IS NOT NULL THEN
        x_stage_rec.TX40 := tmp;
      END IF;
    END IF;
  END IF;
  IF p_search_ctx THEN
    IF p_search_rec.PARTY_ALL_NAMES IS NOT NULL THEN 
      x_stage_rec.TX39 := 
        HZ_TRANS_PKG.WRNAMES_EXACT(
             p_search_rec.PARTY_ALL_NAMES
             ,null,'PARTY_ALL_NAMES'
             ,'PARTY','SEARCH');
    ELSE
      x_stage_rec.TX39 := '';
    END IF;
  ELSE
    IF p_search_rec.PARTY_ALL_NAMES IS NOT NULL THEN 
      tmp :=HZ_TRANS_PKG.WRNAMES_EXACT(
             x_stage_rec.TX39
             ,null,'PARTY_ALL_NAMES'
             ,'PARTY','SCORE');
      IF tmp IS NOT NULL THEN
        x_stage_rec.TX39 := tmp;
      END IF;
    END IF;
  END IF;
  IF p_search_ctx THEN
    IF p_search_rec.PARTY_NUMBER IS NOT NULL THEN 
      x_stage_rec.TX34 := 
        HZ_TRANS_PKG.RM_SPLCHAR(
             p_search_rec.PARTY_NUMBER
             ,null,'PARTY_NUMBER'
             ,'PARTY','SEARCH');
    ELSE
      x_stage_rec.TX34 := '';
    END IF;
  ELSE
    IF p_search_rec.PARTY_NUMBER IS NOT NULL THEN 
      tmp :=HZ_TRANS_PKG.RM_SPLCHAR(
             x_stage_rec.TX34
             ,null,'PARTY_NUMBER'
             ,'PARTY','SCORE');
      IF tmp IS NOT NULL THEN
        x_stage_rec.TX34 := tmp;
      END IF;
    END IF;
  END IF;
    IF p_search_rec.PARTY_TYPE IS NOT NULL THEN 
      x_stage_rec.TX36 := 
        HZ_TRANS_PKG.EXACT(
             p_search_rec.PARTY_TYPE
             ,null,'PARTY_TYPE'
             ,'PARTY');
    ELSE
      x_stage_rec.TX36 := '';
    END IF;
  IF p_search_ctx THEN
    IF p_search_rec.SIC_CODE IS NOT NULL THEN 
      x_stage_rec.TX46 := 
        HZ_TRANS_PKG.EXACT(
             p_search_rec.SIC_CODE
             ,null,'SIC_CODE'
             ,'PARTY');
    ELSE
      x_stage_rec.TX46 := '';
    END IF;
  END IF;
  IF p_search_ctx THEN
    IF p_search_rec.SIC_CODE_TYPE IS NOT NULL THEN 
      x_stage_rec.TX47 := 
        HZ_TRANS_PKG.EXACT(
             p_search_rec.SIC_CODE_TYPE
             ,null,'SIC_CODE_TYPE'
             ,'PARTY');
    ELSE
      x_stage_rec.TX47 := '';
    END IF;
  END IF;
  IF p_search_ctx THEN
    IF p_search_rec.TAX_REFERENCE IS NOT NULL THEN 
      x_stage_rec.TX44 := 
        HZ_TRANS_PKG.RM_SPLCHAR(
             p_search_rec.TAX_REFERENCE
             ,null,'TAX_REFERENCE'
             ,'PARTY','SEARCH');
    ELSE
      x_stage_rec.TX44 := '';
    END IF;
  ELSE
    IF p_search_rec.TAX_REFERENCE IS NOT NULL THEN 
      tmp :=HZ_TRANS_PKG.RM_SPLCHAR(
             x_stage_rec.TX44
             ,null,'TAX_REFERENCE'
             ,'PARTY','SCORE');
      IF tmp IS NOT NULL THEN
        x_stage_rec.TX44 := tmp;
      END IF;
    END IF;
  END IF;
    l_party_name := p_search_rec.PARTY_NAME;
    IF l_party_name IS NULL AND p_search_rec.PARTY_ALL_NAMES IS NOT NULL THEN
      l_party_name := p_search_rec.PARTY_ALL_NAMES;
    END IF;
    IF l_party_name IS NOT NULL AND x_stage_rec.TX8 IS NULL THEN
      x_stage_rec.TX8 := HZ_TRANS_PKG.WRNAMES_EXACT(l_party_name,null,'PARTY_NAME','PARTY','SEARCH');
    END IF;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_TRANSFORM_PROC_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC' , 'MAP_PARTY_REC');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END;


/************************************************
  This procedure maps a search record from the logical
  record structure to the stage schema structure 
  for the PARTY_SITES Entity after applying 
  the defined transformations
************************************************/

PROCEDURE MAP_PARTY_SITE_REC( 
    p_search_ctx IN BOOLEAN,
    p_search_list IN HZ_PARTY_SEARCH.party_site_list, 
    x_entered_max_score OUT NUMBER,
    x_stage_list IN OUT NOCOPY HZ_PARTY_STAGE.party_site_stage_list
  ) IS 
  l_current_max_score NUMBER;
  tmp VARCHAR2(4000);
BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside Calling Procedure - MAP_PARTY_SITE_REC',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'p_entity - PARTY_SITES',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  IF p_search_ctx THEN
   g_ps_den_only:=TRUE;
    x_entered_max_score:=0;
    FOR I IN 1..p_search_list.COUNT LOOP
      l_current_max_score:=0;
      IF p_search_list(I).ADDRESS IS NOT NULL THEN 
        l_current_max_score := l_current_max_score+40;
        g_ps_den_only:=FALSE;
      END IF;
      IF p_search_list(I).CITY IS NOT NULL THEN 
        l_current_max_score := l_current_max_score+10;
      END IF;
      IF p_search_list(I).POSTAL_CODE IS NOT NULL THEN 
        l_current_max_score := l_current_max_score+15;
      END IF;
      IF p_search_list(I).STATE IS NOT NULL THEN 
        l_current_max_score := l_current_max_score+20;
      END IF;
      IF p_search_list(I).COUNTRY IS NOT NULL THEN 
        l_current_max_score := l_current_max_score+10;
      END IF;
      IF l_current_max_score>x_entered_max_score THEN
        x_entered_max_score:=l_current_max_score;
      END IF;
    END LOOP;
  END IF;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).ADDRESS IS NOT NULL THEN 
        x_stage_list(I).TX4 := 
          HZ_TRANS_PKG.WRADDRESS_CLEANSE(
             p_search_list(I).ADDRESS
             ,null,'ADDRESS'
             ,'PARTY_SITES','SEARCH');
      ELSE
        x_stage_list(I).TX4 := '';
      END IF;
    ELSE
      IF p_search_list(I).ADDRESS IS NOT NULL THEN 
        tmp := HZ_TRANS_PKG.WRADDRESS_CLEANSE(
             x_stage_list(I).TX4
             ,null,'ADDRESS'
             ,'PARTY_SITES','SCORE');
        IF tmp IS NOT NULL THEN
          x_stage_list(I).TX4 := tmp;
        END IF;
      END IF;
    END IF;
  END LOOP;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).ADDRESS IS NOT NULL THEN 
        x_stage_list(I).TX3 := 
          HZ_TRANS_PKG.WRADDRESS_EXACT(
             p_search_list(I).ADDRESS
             ,null,'ADDRESS'
             ,'PARTY_SITES','SEARCH');
      ELSE
        x_stage_list(I).TX3 := '';
      END IF;
    ELSE
      IF p_search_list(I).ADDRESS IS NOT NULL THEN 
        tmp := HZ_TRANS_PKG.WRADDRESS_EXACT(
             x_stage_list(I).TX3
             ,null,'ADDRESS'
             ,'PARTY_SITES','SCORE');
        IF tmp IS NOT NULL THEN
          x_stage_list(I).TX3 := tmp;
        END IF;
      END IF;
    END IF;
  END LOOP;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).CITY IS NOT NULL THEN 
        x_stage_list(I).TX10 := 
          HZ_TRANS_PKG.CLEANSE(
             p_search_list(I).CITY
             ,null,'CITY'
             ,'PARTY_SITES');
      ELSE
        x_stage_list(I).TX10 := '';
      END IF;
    END IF;
  END LOOP;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).CITY IS NOT NULL THEN 
        x_stage_list(I).TX9 := 
          HZ_TRANS_PKG.EXACT(
             p_search_list(I).CITY
             ,null,'CITY'
             ,'PARTY_SITES');
      ELSE
        x_stage_list(I).TX9 := '';
      END IF;
    END IF;
  END LOOP;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).COUNTRY IS NOT NULL THEN 
        x_stage_list(I).TX22 := 
          HZ_TRANS_PKG.EXACT(
             p_search_list(I).COUNTRY
             ,null,'COUNTRY'
             ,'PARTY_SITES');
      ELSE
        x_stage_list(I).TX22 := '';
      END IF;
    END IF;
  END LOOP;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).POSTAL_CODE IS NOT NULL THEN 
        x_stage_list(I).TX11 := 
          HZ_TRANS_PKG.RM_SPLCHAR(
             p_search_list(I).POSTAL_CODE
             ,null,'POSTAL_CODE'
             ,'PARTY_SITES','SEARCH');
      ELSE
        x_stage_list(I).TX11 := '';
      END IF;
    ELSE
      IF p_search_list(I).POSTAL_CODE IS NOT NULL THEN 
        tmp := HZ_TRANS_PKG.RM_SPLCHAR(
             x_stage_list(I).TX11
             ,null,'POSTAL_CODE'
             ,'PARTY_SITES','SCORE');
        IF tmp IS NOT NULL THEN
          x_stage_list(I).TX11 := tmp;
        END IF;
      END IF;
    END IF;
  END LOOP;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).STATE IS NOT NULL THEN 
        x_stage_list(I).TX15 := 
          HZ_TRANS_PKG.WRSTATE_CLEANSE(
             p_search_list(I).STATE
             ,null,'STATE'
             ,'PARTY_SITES','SEARCH');
      ELSE
        x_stage_list(I).TX15 := '';
      END IF;
    ELSE
      IF p_search_list(I).STATE IS NOT NULL THEN 
        tmp := HZ_TRANS_PKG.WRSTATE_CLEANSE(
             x_stage_list(I).TX15
             ,null,'STATE'
             ,'PARTY_SITES','SCORE');
        IF tmp IS NOT NULL THEN
          x_stage_list(I).TX15 := tmp;
        END IF;
      END IF;
    END IF;
  END LOOP;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).STATE IS NOT NULL THEN 
        x_stage_list(I).TX14 := 
          HZ_TRANS_PKG.WRSTATE_EXACT(
             p_search_list(I).STATE
             ,null,'STATE'
             ,'PARTY_SITES','SEARCH');
      ELSE
        x_stage_list(I).TX14 := '';
      END IF;
    ELSE
      IF p_search_list(I).STATE IS NOT NULL THEN 
        tmp := HZ_TRANS_PKG.WRSTATE_EXACT(
             x_stage_list(I).TX14
             ,null,'STATE'
             ,'PARTY_SITES','SCORE');
        IF tmp IS NOT NULL THEN
          x_stage_list(I).TX14 := tmp;
        END IF;
      END IF;
    END IF;
  END LOOP;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_TRANSFORM_PROC_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC' , 'MAP_PARTY_SITE_REC');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END;


/************************************************
  This procedure maps a search record from the logical
  record structure to the stage schema structure 
  for the CONTACTS Entity after applying 
  the defined transformations
************************************************/

PROCEDURE MAP_CONTACT_REC( 
    p_search_ctx IN BOOLEAN,
    p_search_list IN HZ_PARTY_SEARCH.contact_list, 
    x_entered_max_score OUT NUMBER,
    x_stage_list IN OUT NOCOPY HZ_PARTY_STAGE.contact_stage_list
  ) IS 
  l_current_max_score NUMBER;
  tmp VARCHAR2(4000);
BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside Calling Procedure - MAP_CONTACT_REC',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'p_entity - CONTACTS',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  IF p_search_ctx THEN
    x_entered_max_score:=0;
    FOR I IN 1..p_search_list.COUNT LOOP
      l_current_max_score:=0;
      IF p_search_list(I).CONTACT_NAME IS NOT NULL THEN 
        l_current_max_score := l_current_max_score+60;
      END IF;
      IF l_current_max_score>x_entered_max_score THEN
        x_entered_max_score:=l_current_max_score;
      END IF;
    END LOOP;
  END IF;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).CONTACT_NAME IS NOT NULL THEN 
        x_stage_list(I).TX2 := 
          HZ_TRANS_PKG.EXACT_PADDED(
             p_search_list(I).CONTACT_NAME
             ,null,'CONTACT_NAME'
             ,'CONTACTS');
      ELSE
        x_stage_list(I).TX2 := '';
      END IF;
    END IF;
  END LOOP;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).CONTACT_NAME IS NOT NULL THEN 
        x_stage_list(I).TX156 := 
          HZ_TRANS_PKG.SOUNDX(
             p_search_list(I).CONTACT_NAME
             ,null,'CONTACT_NAME'
             ,'CONTACTS');
      ELSE
        x_stage_list(I).TX156 := '';
      END IF;
    END IF;
  END LOOP;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).CONTACT_NAME IS NOT NULL THEN 
        x_stage_list(I).TX6 := 
          HZ_TRANS_PKG.WRPERSON_CLEANSE(
             p_search_list(I).CONTACT_NAME
             ,null,'CONTACT_NAME'
             ,'CONTACTS','SEARCH');
      ELSE
        x_stage_list(I).TX6 := '';
      END IF;
    ELSE
      IF p_search_list(I).CONTACT_NAME IS NOT NULL THEN 
        tmp := HZ_TRANS_PKG.WRPERSON_CLEANSE(
             x_stage_list(I).TX6
             ,null,'CONTACT_NAME'
             ,'CONTACTS','SCORE');
        IF tmp IS NOT NULL THEN
          x_stage_list(I).TX6 := tmp;
        END IF;
      END IF;
    END IF;
  END LOOP;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).CONTACT_NAME IS NOT NULL THEN 
        x_stage_list(I).TX5 := 
          HZ_TRANS_PKG.WRPERSON_EXACT(
             p_search_list(I).CONTACT_NAME
             ,null,'CONTACT_NAME'
             ,'CONTACTS','SEARCH');
      ELSE
        x_stage_list(I).TX5 := '';
      END IF;
    ELSE
      IF p_search_list(I).CONTACT_NAME IS NOT NULL THEN 
        tmp := HZ_TRANS_PKG.WRPERSON_EXACT(
             x_stage_list(I).TX5
             ,null,'CONTACT_NAME'
             ,'CONTACTS','SCORE');
        IF tmp IS NOT NULL THEN
          x_stage_list(I).TX5 := tmp;
        END IF;
      END IF;
    END IF;
  END LOOP;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_TRANSFORM_PROC_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC' , 'MAP_CONTACT_REC');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END;


/************************************************
  This procedure maps a search record from the logical
  record structure to the stage schema structure 
  for the CONTACT_POINTS Entity after applying 
  the defined transformations
************************************************/

PROCEDURE MAP_CONTACT_POINT_REC( 
    p_search_ctx IN BOOLEAN,
    p_search_list IN HZ_PARTY_SEARCH.contact_point_list, 
    x_entered_max_score OUT NUMBER,
    x_stage_list IN OUT NOCOPY HZ_PARTY_STAGE.contact_pt_stage_list
  ) IS 
  l_current_max_score NUMBER;
  tmp VARCHAR2(4000);
  TYPE INDEX_VARCHAR100_TBL IS TABLE OF NUMBER INDEX BY VARCHAR2(100);
  l_cnt_pt_type_index INDEX_VARCHAR100_TBL;
  TYPE CONTACT_PT_REC_TYPE IS RECORD (
  contact_pt_type		VARCHAR2(100),
  max_score    		NUMBER) ;
  TYPE contact_pt_list IS TABLE of CONTACT_PT_REC_TYPE INDEX BY BINARY_INTEGER;
  l_cnt_pt_type contact_pt_list;
  N NUMBER := 1;
  x_modify VARCHAR2(1);
BEGIN
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'Inside Calling Procedure - MAP_CONTACT_POINT_REC',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
   IF fnd_log.level_statement>=fnd_log.g_current_runtime_level THEN
      hz_utility_v2pub.debug(p_message=>'p_entity - CONTACT_POINTS',p_module_prefix=>'dqm',p_module=>'hz_match_rule_xxx',p_prefix=>NULL,p_msg_level=>fnd_log.level_statement);
    END IF;
  IF p_search_ctx THEN
    x_entered_max_score:=0;
    FOR I IN 1..p_search_list.COUNT LOOP
      l_current_max_score:=0;
      x_stage_list(I).CONTACT_POINT_TYPE := p_search_list(I).CONTACT_POINT_TYPE;
      IF p_search_list(I).FLEX_FORMAT_PHONE_NUMBER IS NOT NULL THEN 
        l_current_max_score := l_current_max_score+80;
      END IF;
      IF p_search_list(I).EMAIL_ADDRESS IS NOT NULL THEN 
        l_current_max_score := l_current_max_score+80;
      END IF;
      x_modify := 'N';
      FOR J IN 1..l_cnt_pt_type.count LOOP
      if (l_cnt_pt_type(J).contact_pt_type = x_stage_list(I).CONTACT_POINT_TYPE) then
         x_modify := 'Y';
      IF l_cnt_pt_type(J).max_score<l_current_max_score THEN
      l_cnt_pt_type(J).max_score :=l_current_max_score;
      EXIT;
      END IF;
      end if;
      END LOOP;
      if x_modify='N' then
      l_cnt_pt_type(N).contact_pt_type := x_stage_list(I).CONTACT_POINT_TYPE;
      l_cnt_pt_type(N).max_score := l_current_max_score;
      N:= N+1;
      end if;
    END LOOP;
   FOR M IN 1..l_cnt_pt_type.count LOOP
   x_entered_max_score := x_entered_max_score+l_cnt_pt_type(M).max_score;
   END LOOP;
  END IF;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).EMAIL_ADDRESS IS NOT NULL THEN 
        x_stage_list(I).TX6 := 
          HZ_TRANS_PKG.CLEANSED_EMAIL(
             p_search_list(I).EMAIL_ADDRESS
             ,null,'EMAIL_ADDRESS'
             ,'CONTACT_POINTS','SEARCH');
      ELSE
        x_stage_list(I).TX6 := '';
      END IF;
    ELSE
      IF p_search_list(I).EMAIL_ADDRESS IS NOT NULL THEN 
        tmp := HZ_TRANS_PKG.CLEANSED_EMAIL(
             x_stage_list(I).TX6
             ,null,'EMAIL_ADDRESS'
             ,'CONTACT_POINTS','SCORE');
        IF tmp IS NOT NULL THEN
          x_stage_list(I).TX6 := tmp;
        END IF;
      END IF;
    END IF;
  END LOOP;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).EMAIL_ADDRESS IS NOT NULL THEN 
        x_stage_list(I).TX5 := 
          HZ_TRANS_PKG.EXACT_EMAIL(
             p_search_list(I).EMAIL_ADDRESS
             ,null,'EMAIL_ADDRESS'
             ,'CONTACT_POINTS');
      ELSE
        x_stage_list(I).TX5 := '';
      END IF;
    END IF;
  END LOOP;
  FOR I IN 1..p_search_list.COUNT LOOP
    IF p_search_ctx THEN
      IF p_search_list(I).FLEX_FORMAT_PHONE_NUMBER IS NOT NULL THEN 
        x_stage_list(I).TX1 := 
          HZ_TRANS_PKG.RM_SPLCHAR_CTX(
             p_search_list(I).FLEX_FORMAT_PHONE_NUMBER
             ,null,'FLEX_FORMAT_PHONE_NUMBER'
             ,'CONTACT_POINTS','SEARCH');
      ELSE
        x_stage_list(I).TX1 := '';
      END IF;
    ELSE
      IF p_search_list(I).FLEX_FORMAT_PHONE_NUMBER IS NOT NULL THEN 
        tmp := HZ_TRANS_PKG.RM_SPLCHAR_CTX(
             x_stage_list(I).TX1
             ,null,'FLEX_FORMAT_PHONE_NUMBER'
             ,'CONTACT_POINTS','SCORE');
        IF tmp IS NOT NULL THEN
          x_stage_list(I).TX1 := tmp;
        END IF;
      END IF;
    END IF;
  END LOOP;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_TRANSFORM_PROC_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC' , 'MAP_CONTACT_POINT_REC');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM);
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
END;


/************************************************
  This procedure checks if the input search criteria 
  is valid. It checks if : 
   1. At least one primary condition is passed
   2. Contact Point Type is not null for each condition
************************************************/

FUNCTION check_prim_cond(
      p_party_search_rec      IN      HZ_PARTY_SEARCH.party_search_rec_type,
      p_party_site_list       IN      HZ_PARTY_SEARCH.party_site_list,
      p_contact_list          IN      HZ_PARTY_SEARCH.contact_list,
      p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list)
      RETURN BOOLEAN IS
  BEGIN
    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).CONTACT_POINT_TYPE IS NULL AND (
p_contact_point_list(I).FLEX_FORMAT_PHONE_NUMBER IS NOT NULL 
OR p_contact_point_list(I).EMAIL_ADDRESS IS NOT NULL 
 ) THEN
        FND_MESSAGE.SET_NAME('AR', 'HZ_NO_CONTACT_POINT_TYPE');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
    END LOOP;

    IF p_party_search_rec.PARTY_NUMBER IS NOT NULL THEN 
      RETURN TRUE;
    END IF;
    IF p_party_search_rec.PARTY_ALL_NAMES IS NOT NULL THEN 
      RETURN TRUE;
    END IF;
    IF p_party_search_rec.TAX_REFERENCE IS NOT NULL THEN 
      RETURN TRUE;
    END IF;
    IF p_party_search_rec.JGZZ_FISCAL_CODE IS NOT NULL THEN 
      RETURN TRUE;
    END IF;
    IF p_party_search_rec.SIC_CODE IS NOT NULL THEN 
      RETURN TRUE;
    END IF;
    IF p_party_search_rec.SIC_CODE_TYPE IS NOT NULL THEN 
      RETURN TRUE;
    END IF;
    FOR I IN 1..p_party_site_list.COUNT LOOP
      IF p_party_site_list(I).ADDRESS IS NOT NULL THEN 
        RETURN TRUE;
      END IF;
    END LOOP;
    FOR I IN 1..p_party_site_list.COUNT LOOP
      IF p_party_site_list(I).CITY IS NOT NULL THEN 
        RETURN TRUE;
      END IF;
    END LOOP;
    FOR I IN 1..p_party_site_list.COUNT LOOP
      IF p_party_site_list(I).POSTAL_CODE IS NOT NULL THEN 
        RETURN TRUE;
      END IF;
    END LOOP;
    FOR I IN 1..p_party_site_list.COUNT LOOP
      IF p_party_site_list(I).STATE IS NOT NULL THEN 
        RETURN TRUE;
      END IF;
    END LOOP;
    FOR I IN 1..p_party_site_list.COUNT LOOP
      IF p_party_site_list(I).COUNTRY IS NOT NULL THEN 
        RETURN TRUE;
      END IF;
    END LOOP;
    FOR I IN 1..p_contact_list.COUNT LOOP
      IF p_contact_list(I).CONTACT_NAME IS NOT NULL THEN 
        RETURN TRUE;
      END IF;
    END LOOP;
    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).FLEX_FORMAT_PHONE_NUMBER IS NOT NULL THEN 
        RETURN TRUE;
      END IF;
    END LOOP;
    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).EMAIL_ADDRESS IS NOT NULL THEN 
        RETURN TRUE;
      END IF;
    END LOOP;
    RETURN FALSE;
EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    RAISE FND_API.G_EXC_ERROR;
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','check_prim_cond');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  END check_prim_cond;

/************************************************
  This procedure checks if the input search condition 
  has party site criteria. 
************************************************/

PROCEDURE check_party_site_cond(
      p_party_site_list       IN      HZ_PARTY_SEARCH.party_site_list,
      p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list,
	   x_secondary		   OUT     BOOLEAN,
	   x_primary		   OUT     BOOLEAN
) IS
  BEGIN
    x_primary:= FALSE;
    x_secondary:= FALSE;
    FOR I IN 1..p_party_site_list.COUNT LOOP
      IF p_party_site_list(I).ADDRESS IS NOT NULL 
         OR p_party_site_list(I).CITY IS NOT NULL
         OR p_party_site_list(I).POSTAL_CODE IS NOT NULL
         OR p_party_site_list(I).STATE IS NOT NULL
         OR p_party_site_list(I).COUNTRY IS NOT NULL
      THEN
        x_primary := TRUE;
      END IF;
      EXIT WHEN x_primary;
    END LOOP;
    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).FLEX_FORMAT_PHONE_NUMBER IS NOT NULL 
         OR p_contact_point_list(I).EMAIL_ADDRESS IS NOT NULL
      THEN
        x_primary := TRUE;
      END IF;
      EXIT WHEN x_primary;
    END LOOP;

    FOR I IN 1..p_party_site_list.COUNT LOOP
      IF p_party_site_list(I).ADDRESS IS NOT NULL 
         OR p_party_site_list(I).CITY IS NOT NULL
         OR p_party_site_list(I).POSTAL_CODE IS NOT NULL
         OR p_party_site_list(I).STATE IS NOT NULL
         OR p_party_site_list(I).COUNTRY IS NOT NULL
      THEN
        x_secondary := TRUE;
      END IF;
      EXIT WHEN x_secondary;
    END LOOP;
    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).FLEX_FORMAT_PHONE_NUMBER IS NOT NULL 
         OR p_contact_point_list(I).EMAIL_ADDRESS IS NOT NULL
      THEN
        x_secondary := TRUE;
      END IF;
      EXIT WHEN x_secondary;
    END LOOP;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','check_party_site_cond');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  END check_party_site_cond;

/************************************************
  This procedure checks if the input search condition 
  has contact criteria. 
************************************************/

PROCEDURE check_contact_cond(
      p_contact_list          IN      HZ_PARTY_SEARCH.contact_list,
      p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list,
      x_secondary             OUT     BOOLEAN,
      x_primary               OUT     BOOLEAN
) IS
  BEGIN
    x_primary:= FALSE;
    x_secondary:= FALSE;
    FOR I IN 1..p_contact_list.COUNT LOOP
      IF p_contact_list(I).CONTACT_NAME IS NOT NULL 
      THEN
        x_primary := TRUE;
      END IF;
      EXIT WHEN x_primary;
    END LOOP;

    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).FLEX_FORMAT_PHONE_NUMBER IS NOT NULL 
         OR p_contact_point_list(I).EMAIL_ADDRESS IS NOT NULL
      THEN
        x_primary := TRUE;
      END IF;
      EXIT WHEN x_primary;
    END LOOP;

    FOR I IN 1..p_contact_list.COUNT LOOP
      IF p_contact_list(I).CONTACT_NAME IS NOT NULL 
      THEN
        x_secondary := TRUE;
      END IF;
      EXIT WHEN x_secondary;
    END LOOP;

    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).FLEX_FORMAT_PHONE_NUMBER IS NOT NULL 
         OR p_contact_point_list(I).EMAIL_ADDRESS IS NOT NULL
      THEN
        x_secondary := TRUE;
      END IF;
      EXIT WHEN x_secondary;
    END LOOP;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','check_contact_cond');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  END check_contact_cond;

/************************************************
  This procedure checks if the input search condition 
  has valid contact point criteria. 
************************************************/

PROCEDURE check_contact_point_cond(
      p_contact_point_list    IN      HZ_PARTY_SEARCH.contact_point_list,
      x_secondary             OUT     BOOLEAN,
      x_primary               OUT     BOOLEAN
) IS
  BEGIN
    x_primary:= FALSE;
    x_secondary:= FALSE;

    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).CONTACT_POINT_TYPE IS NULL THEN 
        FND_MESSAGE.SET_NAME('AR', 'HZ_NO_CONTACT_POINT_TYPE');
        FND_MSG_PUB.ADD;
        RAISE FND_API.G_EXC_ERROR;
      END IF;
    END LOOP;

    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).FLEX_FORMAT_PHONE_NUMBER IS NOT NULL 
         OR p_contact_point_list(I).EMAIL_ADDRESS IS NOT NULL 
      THEN
        x_primary := TRUE;
      END IF;
      EXIT WHEN x_primary;
    END LOOP;
    FOR I IN 1..p_contact_point_list.COUNT LOOP
      IF p_contact_point_list(I).FLEX_FORMAT_PHONE_NUMBER IS NOT NULL  
         OR p_contact_point_list(I).EMAIL_ADDRESS IS NOT NULL 
      THEN
        x_secondary := TRUE;
      END IF;
      EXIT WHEN x_secondary;
    END LOOP;
EXCEPTION
  WHEN OTHERS THEN
    FND_MESSAGE.SET_NAME('AR', 'HZ_DQM_API_ERROR');
    FND_MESSAGE.SET_TOKEN('PROC','check_contact_point_cond');
    FND_MESSAGE.SET_TOKEN('ERROR' ,SQLERRM );
    FND_MSG_PUB.ADD;
    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  END check_contact_point_cond;

FUNCTION check_staged RETURN BOOLEAN IS

  CURSOR c_check_staged IS 
    SELECT 1 FROM HZ_TRANS_FUNCTIONS_VL 
    WHERE nvl(STAGED_FLAG,'N') = 'N' 
    AND FUNCTION_ID in (
                38
                ,40
                ,43
                ,44
                ,49
                ,50
                ,51
                ,52
                ,66
                ,67
                ,72
                ,73
                ,74
                ,77
                ,78
                ,85
                ,89
                ,92
                ,93
                ,110
                ,114
                ,115
                ,123
                ,124
    );
  l_tmp NUMBER;
BEGIN
  IF g_staged =  1 THEN
    RETURN TRUE;
  ELSIF g_staged = 0 THEN
    RETURN FALSE;
  END IF;

  OPEN c_check_staged;
  FETCH c_check_staged INTO l_tmp;
  IF c_check_staged%FOUND THEN
    CLOSE c_check_staged;
    g_staged := 0;
    RETURN FALSE;
  ELSE
    CLOSE c_check_staged;
    g_staged := 1;
    RETURN TRUE;
  END IF;
END check_staged;

-- Fix for Bug 4736139
FUNCTION check_staged_var RETURN VARCHAR2 IS
  l_staged       VARCHAR2(1);
  l_staged_bool  BOOLEAN;
BEGIN
  l_staged_bool := check_staged;
  IF l_staged_bool THEN
    l_staged := 'Y';
  ELSE
    l_staged := 'N';
  END IF;
  RETURN l_staged;
END check_staged_var;
-- End fix for Bug 4736139

END;


/
