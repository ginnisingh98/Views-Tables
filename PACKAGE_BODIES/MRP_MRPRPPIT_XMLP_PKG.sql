--------------------------------------------------------
--  DDL for Package Body MRP_MRPRPPIT_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."MRP_MRPRPPIT_XMLP_PKG" AS
/* $Header: MRPRPPITB.pls 120.0 2007/12/31 13:58:30 dwkrishn noship $ */
  FUNCTION C_PLANNED_ORG_CODEFORMULA(C_PLANNED_ORGANIZATION IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      ORG_CODE VARCHAR2(3);
    BEGIN
      SELECT
        ORGANIZATION_CODE
      INTO ORG_CODE
      FROM
        MTL_PARAMETERS
      WHERE ORGANIZATION_ID = C_PLANNED_ORGANIZATION;
      RETURN (ORG_CODE);
    END;
    RETURN NULL;
  END C_PLANNED_ORG_CODEFORMULA;

  FUNCTION C_COST_TYPEFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      COST_TYPE VARCHAR2(240);
    BEGIN
      SELECT
        DESCRIPTION
      INTO COST_TYPE
      FROM
        CST_COST_TYPES
      WHERE COST_TYPE_ID = P_COST_TYPE;
      RETURN (COST_TYPE);
    END;
    RETURN NULL;
  END C_COST_TYPEFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      Q_ID NUMBER := 0;
      EXPLOSION_DATE VARCHAR2(20);
      SNAPSHOT_DATE VARCHAR2(20);
      PLAN_DATE VARCHAR2(20);
      START_DATE varchar2(30);
      PLAN_NAME VARCHAR2(10);
      SCHED_NAME VARCHAR2(10);
      ORG_ID NUMBER;
      CURRENCY_DESC VARCHAR2(80);
      PRECISION NUMBER := 1;
      PERIODS NUMBER;
      DEF_COST_TYPE_ID NUMBER;
      EXPLOSION_INCOMPLETE EXCEPTION;
      SNAPSHOT_INCOMPLETE EXCEPTION;
      PLAN_INCOMPLETE EXCEPTION;
      CURSOR C IS
        SELECT
          ORG_V.COMPILE_DESIGNATOR,
          PLN_SCHED.INPUT_DESIGNATOR_NAME,
          ORG_V.PLANNED_ORGANIZATION
        FROM
          MRP_PLAN_ORGANIZATIONS_V ORG_V,
          MRP_PLAN_SCHEDULES_V PLN_SCHED
        WHERE PLN_SCHED.INPUT_ORGANIZATION_ID = ORG_V.PLANNED_ORGANIZATION
          AND PLN_SCHED.COMPILE_DESIGNATOR = ORG_V.COMPILE_DESIGNATOR
          AND DECODE(P_ORG_TYPE
              ,1
              ,ORG_V.PLANNED_ORGANIZATION
              ,ORG_V.ORGANIZATION_ID) = P_ORG_ID
          AND ORG_V.COMPILE_DESIGNATOR = P_PLAN_NAME;
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      IF (P_DEBUG = 'Y') THEN
        EXECUTE IMMEDIATE
          'ALTER SESSION SET SQL_TRACE TRUE';
      END IF;
      SELECT
      DECODE(LOOKUP_CODE
              ,1
              ,12
              ,2
              ,24
              ,3
              ,36
              ,4
              ,48
              ,12)
      INTO PERIODS
      FROM
        MFG_LOOKUPS
      WHERE LOOKUP_TYPE = 'MRP_DISPLAY_PERIODS'
        AND LOOKUP_CODE = P_PERIODS;
      P_PERIODS_ACTUAL := PERIODS;
      SELECT
        MRP_FORM_QUERY_S.NEXTVAL
      INTO Q_ID
      FROM
        DUAL;
      P_QUERY_ID := Q_ID;







      SELECT
        DISTINCT
        PLAN.EXPLOSION_COMPLETION_DATE,
        PLAN.DATA_COMPLETION_DATE,
        PLAN.PLAN_COMPLETION_DATE,
        PLAN.PLAN_COMPLETION_DATE
      INTO EXPLOSION_DATE,SNAPSHOT_DATE,PLAN_DATE,START_DATE
      FROM
        MRP_PLAN_ORGANIZATIONS_V ORG_V,
        MRP_PLANS PLAN
      WHERE DECODE(P_ORG_TYPE
            ,1
            ,ORG_V.PLANNED_ORGANIZATION
            ,ORG_V.ORGANIZATION_ID) = P_ORG_ID
        AND ORG_V.COMPILE_DESIGNATOR = P_PLAN_NAME
        AND ORG_V.ORGANIZATION_ID = PLAN.ORGANIZATION_ID
        AND ORG_V.COMPILE_DESIGNATOR = PLAN.COMPILE_DESIGNATOR;
      IF EXPLOSION_DATE IS NULL THEN
        RAISE EXPLOSION_INCOMPLETE;
      ELSIF SNAPSHOT_DATE IS NULL THEN
        RAISE SNAPSHOT_INCOMPLETE;
      ELSIF PLAN_DATE IS NULL THEN
        RAISE PLAN_INCOMPLETE;
      END IF;
      SELECT
        DEFAULT_COST_TYPE_ID
      INTO DEF_COST_TYPE_ID
      FROM
        CST_COST_TYPES
      WHERE COST_TYPE_ID = P_COST_TYPE;
      OPEN C;
      LOOP
        FETCH C
         INTO PLAN_NAME,SCHED_NAME,ORG_ID;
        EXIT WHEN (C%NOTFOUND);
        SELECT
          MRP_FORM_QUERY_S.NEXTVAL
        INTO Q_ID
        FROM
          DUAL;
        MRP_WEEKS_MONTHS(Q_ID
                        ,1
                        ,P_WEEKS
                        ,PERIODS
                        ,START_DATE
                        ,ORG_ID);
        MRP_CALCULATE_INVENTORY_TURNS(Q_ID
                                     ,ORG_ID
                                     ,PLAN_NAME
                                     ,SCHED_NAME
                                     ,P_COST_TYPE
                                     ,DEF_COST_TYPE_ID);
        EXECUTE IMMEDIATE
          'UPDATE mrp_form_query SET query_id = ' || TO_CHAR(P_QUERY_ID) || ' WHERE query_id = ' || TO_CHAR(Q_ID);
      END LOOP;
      CLOSE C;
      SELECT
        NAME,
        PRECISION
      INTO CURRENCY_DESC,PRECISION
      FROM
        FND_CURRENCIES_VL
      WHERE CURRENCY_CODE = P_CURRENCY_CODE;
      P_CURRENCY_DESC := CURRENCY_DESC;
      P_PRECISION := PRECISION;
    EXCEPTION
      WHEN EXPLOSION_INCOMPLETE THEN
        /*SRW.USER_EXIT('FND MESSAGE_NAME NAME = "PLAN-PROCESS NOT COMPLETED"')*/NULL;
        FND_MESSAGE.SET_TOKEN('PROCESS'
                             ,'E_EXPLODER');
        P_MSG_BUF := FND_MESSAGE.GET;
        /*SRW.MESSAGE('10001'
                   ,P_MSG_BUF)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      WHEN SNAPSHOT_INCOMPLETE THEN
        /*SRW.USER_EXIT('FND MESSAGE_NAME NAME = "PLAN-PROCESS NOT COMPLETED"')*/NULL;
        FND_MESSAGE.SET_TOKEN('PROCESS'
                             ,'E_SNAPSHOT');
        P_MSG_BUF := FND_MESSAGE.GET;
        /*SRW.MESSAGE('10002'
                   ,P_MSG_BUF)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      WHEN PLAN_INCOMPLETE THEN
        /*SRW.USER_EXIT('FND MESSAGE_NAME NAME = "PLAN-PROCESS NOT COMPLETED"')*/NULL;
        FND_MESSAGE.SET_TOKEN('PROCESS'
                             ,'E_PLANNER');
        P_MSG_BUF := FND_MESSAGE.GET;
        /*SRW.MESSAGE('10003'
                   ,P_MSG_BUF)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION C_P_MULTI_ORGFORMULA RETURN NUMBER IS
  BEGIN
    DECLARE
      ORG_SELECTION NUMBER := 1;
      MULTI_ORG NUMBER;
    BEGIN
      SELECT
        DISTINCT
        ORGANIZATION_SELECTION
      INTO ORG_SELECTION
      FROM
        MRP_PLAN_ORGANIZATIONS_V
      WHERE DECODE(P_ORG_TYPE
            ,1
            ,PLANNED_ORGANIZATION
            ,ORGANIZATION_ID) = P_ORG_ID
        AND COMPILE_DESIGNATOR = P_PLAN_NAME;
      IF ((ORG_SELECTION = 2) OR (ORG_SELECTION = 3)) THEN
        MULTI_ORG := 1;
      ELSE
        MULTI_ORG := 2;
      END IF;
      RETURN (MULTI_ORG);
    END;
    RETURN NULL;
  END C_P_MULTI_ORGFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      IF P_QUERY_ID IS NOT NULL THEN
        EXECUTE IMMEDIATE
          '
              DELETE FROM mrp_form_query WHERE query_id = ' || TO_CHAR(P_QUERY_ID);
      END IF;
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_BEGIN_INV_D2FORMULA(C_BEGIN_INV_D IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN (LTRIM(C_BEGIN_INV_D));
  END C_BEGIN_INV_D2FORMULA;

  PROCEDURE MRP_WEEKS_MONTHS(ARG_QUERY_ID IN NUMBER
                            ,ARG_USER_ID IN NUMBER
                            ,ARG_WEEKS IN NUMBER
                            ,ARG_PERIODS IN NUMBER
                            ,ARG_START_DATE IN DATE
                            ,ARG_ORG_ID IN NUMBER) IS
  BEGIN
   /* STPROC.INIT('begin MRP_REPORTING_BUCKETS.MRP_WEEKS_MONTHS(:ARG_QUERY_ID, :ARG_USER_ID, :ARG_WEEKS, :ARG_PERIODS, :ARG_START_DATE, :ARG_ORG_ID); end;');
    STPROC.BIND_I(ARG_QUERY_ID);
    STPROC.BIND_I(ARG_USER_ID);
    STPROC.BIND_I(ARG_WEEKS);
    STPROC.BIND_I(ARG_PERIODS);
    STPROC.BIND_I(ARG_START_DATE);
    STPROC.BIND_I(ARG_ORG_ID);
    STPROC.EXECUTE;*/
    MRP_REPORTING_BUCKETS.MRP_WEEKS_MONTHS(ARG_QUERY_ID, ARG_USER_ID, ARG_WEEKS, ARG_PERIODS, ARG_START_DATE, ARG_ORG_ID);
  END MRP_WEEKS_MONTHS;

  PROCEDURE MRP_CALCULATE_INVENTORY_TURNS(ARG_QUERY_ID IN NUMBER
                                         ,ARG_ORG_ID IN NUMBER
                                         ,ARG_COMPILE_DESIG IN VARCHAR2
                                         ,ARG_SCHED_DESIG IN VARCHAR2
                                         ,ARG_COST_TYPE IN NUMBER
                                         ,ARG_DEF_COST_TYPE IN NUMBER) IS
  BEGIN
    /*STPROC.INIT('begin MRP_REPORT_INV_TURNS.MRP_CALCULATE_INVENTORY_TURNS(:ARG_QUERY_ID, :ARG_ORG_ID, :ARG_COMPILE_DESIG, :ARG_SCHED_DESIG, :ARG_COST_TYPE, :ARG_DEF_COST_TYPE); end;');
    STPROC.BIND_I(ARG_QUERY_ID);
    STPROC.BIND_I(ARG_ORG_ID);
    STPROC.BIND_I(ARG_COMPILE_DESIG);
    STPROC.BIND_I(ARG_SCHED_DESIG);
    STPROC.BIND_I(ARG_COST_TYPE);
    STPROC.BIND_I(ARG_DEF_COST_TYPE);
    STPROC.EXECUTE;*/
    MRP_REPORT_INV_TURNS.MRP_CALCULATE_INVENTORY_TURNS(ARG_QUERY_ID, ARG_ORG_ID, ARG_COMPILE_DESIG, ARG_SCHED_DESIG, ARG_COST_TYPE, ARG_DEF_COST_TYPE);
  END MRP_CALCULATE_INVENTORY_TURNS;

END MRP_MRPRPPIT_XMLP_PKG;


/
