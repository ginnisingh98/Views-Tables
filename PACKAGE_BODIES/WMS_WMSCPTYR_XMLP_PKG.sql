--------------------------------------------------------
--  DDL for Package Body WMS_WMSCPTYR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."WMS_WMSCPTYR_XMLP_PKG" AS
/* $Header: WMSCPTYRB.pls 120.2 2008/02/21 06:33:45 dwkrishn noship $ */
  FUNCTION CF_LOC_FLEX_FIELDFORMULA(LOCATOR_ID IN NUMBER
                                   ,ORGANIZATION_ID IN NUMBER) RETURN CHAR IS
  BEGIN
    RETURN INV_PROJECT.GET_LOCSEGS(LOCATOR_ID
                                  ,ORGANIZATION_ID);
  END CF_LOC_FLEX_FIELDFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN

      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Srwinit failed in before report trigger')*/NULL;
    END;
    DECLARE
      L_REPORT_NAME VARCHAR2(240);
    BEGIN
      SELECT
        CP.USER_CONCURRENT_PROGRAM_NAME
      INTO L_REPORT_NAME
      FROM
        FND_CONCURRENT_PROGRAMS_VL CP,
        FND_CONCURRENT_REQUESTS CR
      WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
        AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
        AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
      P_REPORT_NAME := L_REPORT_NAME;
      P_REPORT_NAME := substr(P_REPORT_NAME,1,instr(P_REPORT_NAME,' (XML)'));
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        P_REPORT_NAME := 'WMS Capacity Utilization Report';
    END;
    BEGIN
      SELECT
        REQUEST_DATE,
        ACTUAL_START_DATE,
        SAVE_OUTPUT_FLAG,
        PRINTER
      INTO P_REQUEST_DATE,P_ACTUAL_START_DATE,P_SAVE_OUTPUT_FLAG,P_PRINTER
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_CONC_REQUEST_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
    END;
    BEGIN
      SELECT
        APPLICATION_NAME
      INTO P_APPLICATION
      FROM
        FND_CONCURRENT_REQUESTS FCR,
        FND_APPLICATION_VL FAV
      WHERE FCR.REQUEST_ID = P_CONC_REQUEST_ID
        AND FAV.APPLICATION_ID = FCR.PROGRAM_APPLICATION_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN (TRUE);
    END;
    BEGIN
      SELECT
        RESPONSIBILITY_NAME
      INTO P_RESPONSIBILITY
      FROM
        FND_CONCURRENT_REQUESTS FCR,
        FND_RESPONSIBILITY_VL FRV
      WHERE FCR.REQUEST_ID = P_CONC_REQUEST_ID
        AND FRV.RESPONSIBILITY_ID = FCR.RESPONSIBILITY_ID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN (TRUE);
    END;
    INITIALIZE_VALUES;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    L_MSG VARCHAR2(1000);
  BEGIN
    LP_NON_CONV_STOCK:=P_NON_CONV_STOCK;
    LP_WHERE_CLAUSE := ' AND 1=1';
    IF P_ORG_ID IS NOT NULL THEN
      LP_WHERE_CLAUSE := LP_WHERE_CLAUSE || '  AND  MIL.ORGANIZATION_ID = ' || P_ORG_ID;
    END IF;
    IF P_SUBINVENTORY IS NOT NULL THEN
      LP_WHERE_CLAUSE := LP_WHERE_CLAUSE || ' AND MIL.SUBINVENTORY_CODE = ''' || P_SUBINVENTORY || '''';
    END IF;
    IF P_DETAIL_LEVEL = 2 THEN
      IF P_UTIL_BY_WEIGHT IS NOT NULL AND P_WT_OPERATOR IS NOT NULL THEN
        LP_WHERE_CLAUSE := LP_WHERE_CLAUSE || ' AND ((MIL.MAX_WEIGHT is null and MIL.CURRENT_WEIGHT <> 0) OR nvl(MIL.CURRENT_WEIGHT*100/MIL.MAX_WEIGHT,0) ' || P_WT_OPERATOR || ' ' || P_UTIL_BY_WEIGHT || ')';
      ELSIF P_UTIL_BY_WEIGHT IS NOT NULL AND P_WT_OPERATOR IS NULL THEN
        LP_WHERE_CLAUSE := LP_WHERE_CLAUSE || ' AND ((MIL.MAX_WEIGHT is null and MIL.current_weight <> 0) OR nvl(MIL.CURRENT_WEIGHT*100/MIL.MAX_WEIGHT,0) <' || P_UTIL_BY_WEIGHT || ')';
      END IF;
      IF P_UTIL_BY_VOLUME IS NOT NULL AND P_VOL_OPERATOR IS NOT NULL THEN
        LP_WHERE_CLAUSE := LP_WHERE_CLAUSE || ' AND ((MIL.MAX_CUBIC_AREA is null and MIL.CURRENT_CUBIC_AREA <> 0) OR nvl(MIL.CURRENT_CUBIC_AREA*100/MIL.MAX_CUBIC_AREA,0) ' || P_VOL_OPERATOR || ' ' || P_UTIL_BY_VOLUME || ')';
      ELSIF P_UTIL_BY_VOLUME IS NOT NULL AND P_VOL_OPERATOR IS NULL THEN
        LP_WHERE_CLAUSE := LP_WHERE_CLAUSE || ' AND ((MIL.MAX_CUBIC_AREA is null AND MIL.CURRENT_CUBIC_AREA <> 0) OR nvl(MIL.CURRENT_CUBIC_AREA*100/MIL.MAX_CUBIC_AREA,0)   < ' || P_UTIL_BY_VOLUME || ')';
      END IF;
      IF P_UTIL_BY_UNIT IS NOT NULL AND P_UNITS_OPERATOR IS NOT NULL THEN
        LP_WHERE_CLAUSE := LP_WHERE_CLAUSE || ' AND ((MIL.LOCATION_MAXIMUM_UNITS is null and MIL.LOCATION_CURRENT_UNITS <> 0) OR nvl(MIL.LOCATION_CURRENT_UNITS*100/MIL.LOCATION_MAXIMUM_UNITS,0) ' || P_UNITS_OPERATOR || ' ' || P_UTIL_BY_UNIT || ')';
      ELSIF P_UTIL_BY_UNIT IS NOT NULL AND P_UNITS_OPERATOR IS NULL THEN
        LP_WHERE_CLAUSE := LP_WHERE_CLAUSE || ' AND ((MIL.LOCATION_MAXIMUM_UNITS is null AND MIL.LOCATION_CURRENT_UNITS <> 0) OR nvl(MIL.LOCATION_CURRENT_UNITS*100/MIL.LOCATION_MAXIMUM_UNITS,0) <' || P_UTIL_BY_UNIT || ')';
      END IF;
    END IF;
    IF P_ORDER_BY IS NOT NULL THEN
      IF P_ORDER_BY = 1 THEN
        LP_ORDER_BY := LP_ORDER_BY || ' ORDER BY 2,decode(mil.physical_location_id,null,mil.inventory_location_id,mil.physical_location_id)';
      ELSIF P_ORDER_BY = 2 THEN
        LP_ORDER_BY := LP_ORDER_BY || ' ORDER BY 2,MIL.subinventory_code ';
      ELSIF P_ORDER_BY = 3 THEN
        LP_ORDER_BY := LP_ORDER_BY || ' ORDER BY 2, MILL.PICKING_ORDER';
      END IF;
      SELECT
        MEANING
      INTO P_ORDER_BY_MEANING
      FROM
        MFG_LOOKUPS
      WHERE LOOKUP_TYPE = 'WMS_CAPACITY_DETAIL'
        AND LOOKUP_CODE = P_ORDER_BY;
    END IF;
    IF P_ORG_ID IS NOT NULL THEN
      SELECT
        ORGANIZATION_CODE,
        ORGANIZATION_NAME
      INTO P_ORG_CODE,P_ORG_NAME
      FROM
        ORG_ORGANIZATION_DEFINITIONS
      WHERE ORGANIZATION_ID = P_ORG_ID;
      IF P_LOCATOR_ID IS NOT NULL THEN
        P_LOCATOR_FLEX_ALL := INV_PROJECT.GET_LOCSEGS(P_LOCATOR_ID
                                                     ,P_ORG_ID);
      END IF;
    END IF;
    /*SRW.MESSAGE(1
               ,'Detail level' || P_DETAIL_LEVEL)*/NULL;
    IF P_DETAIL_LEVEL IS NOT NULL THEN
      SELECT
        MEANING
      INTO P_DETAIL_MEANING
      FROM
        MFG_LOOKUPS
      WHERE LOOKUP_TYPE = 'WMS_CAPACITY_DETAIL'
        AND LOOKUP_CODE = P_DETAIL_LEVEL;
    END IF;
    IF P_NON_CONV_STK = 1 THEN
      P_MESSAGE := FND_MESSAGE.GET_STRING('WMS'
                                         ,'WMS_UOM_CONV_FAIL');
      LP_NON_CONV_STOCK := P_VALUE_YES;
    ELSE
      LP_NON_CONV_STOCK := P_VALUE_NO;
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_LOC_CAPACITYFORMULA(ORGANIZATION_ID IN NUMBER
                                 ,LOCATOR_ID IN NUMBER
                                 ,LOOSE_QTY IN NUMBER
                                 ,PACKED_QTY IN NUMBER
                                 ,TOTAL_QTY IN NUMBER
                                 ,SUBINVENTORY_CODE1 IN VARCHAR2) RETURN NUMBER IS
    X_RETURN_STATUS VARCHAR2(1);
    X_MSG_COUNT NUMBER;
    X_MSG_DATA VARCHAR2(1000);
    X_LOCATION_MAXIMUM_UNITS NUMBER;
    X_LOCATION_CURRENT_UNITS NUMBER;
    X_LOCATION_SUGGESTED_UNITS NUMBER;
    X_LOCATION_AVAILABLE_UNITS NUMBER;
    X_LOCATION_WEIGHT_UOM_CODE VARCHAR2(3);
    X_MAX_WEIGHT NUMBER;
    X_CURRENT_WEIGHT NUMBER;
    X_SUGGESTED_WEIGHT NUMBER;
    X_AVAILABLE_WEIGHT NUMBER;
    X_VOLUME_UOM_CODE VARCHAR2(3);
    X_MAX_CUBIC_AREA NUMBER;
    X_CURRENT_CUBIC_AREA NUMBER;
    X_SUGGESTED_CUBIC_AREA NUMBER;
    X_AVAILABLE_CUBIC_AREA NUMBER;
    P_ORGANIZATION_ID NUMBER;
    P_INVENTORY_LOCATION_ID NUMBER;
    L_DISPLAY_LOCATOR BOOLEAN := TRUE;
  BEGIN
    INV_LOC_WMS_UTILS.GET_LOCATOR_CAPACITY(X_RETURN_STATUS
                                          ,X_MSG_COUNT
                                          ,X_MSG_DATA
                                          ,X_LOCATION_MAXIMUM_UNITS
                                          ,X_LOCATION_CURRENT_UNITS
                                          ,X_LOCATION_SUGGESTED_UNITS
                                          ,X_LOCATION_AVAILABLE_UNITS
                                          ,X_LOCATION_WEIGHT_UOM_CODE
                                          ,X_MAX_WEIGHT
                                          ,X_CURRENT_WEIGHT
                                          ,X_SUGGESTED_WEIGHT
                                          ,X_AVAILABLE_WEIGHT
                                          ,X_VOLUME_UOM_CODE
                                          ,X_MAX_CUBIC_AREA
                                          ,X_CURRENT_CUBIC_AREA
                                          ,X_SUGGESTED_CUBIC_AREA
                                          ,X_AVAILABLE_CUBIC_AREA
                                          ,ORGANIZATION_ID
                                          ,LOCATOR_ID);
    CP_LOC_WT_PER := 0;
    CP_LOC_VOL_PER := 0;
    CP_LOC_UNITS_PER := 0;
    IF X_CURRENT_WEIGHT IS NOT NULL THEN
      CP_SUB_WT := INV_CONVERT.INV_UM_CONVERT(NULL
                                             ,NULL
                                             ,X_CURRENT_WEIGHT
                                             ,X_LOCATION_WEIGHT_UOM_CODE
                                             ,P_SUB_WT_UOM_CODE
                                             ,NULL
                                             ,NULL);
    ELSE
      CP_SUB_WT := NULL;
    END IF;
    IF X_CURRENT_CUBIC_AREA IS NOT NULL THEN
      CP_SUB_VOL := INV_CONVERT.INV_UM_CONVERT(NULL
                                              ,NULL
                                              ,X_CURRENT_CUBIC_AREA
                                              ,X_VOLUME_UOM_CODE
                                              ,P_SUB_VOL_UOM_CODE
                                              ,NULL
                                              ,NULL);
    ELSE
      CP_SUB_VOL := NULL;
    END IF;
    IF X_MAX_WEIGHT IS NOT NULL THEN
      CP_MAX_SUB_WT := INV_CONVERT.INV_UM_CONVERT(NULL
                                                 ,NULL
                                                 ,X_MAX_WEIGHT
                                                 ,X_LOCATION_WEIGHT_UOM_CODE
                                                 ,P_SUB_WT_UOM_CODE
                                                 ,NULL
                                                 ,NULL);
    ELSE
      CP_MAX_SUB_WT := NULL;
    END IF;
    IF X_MAX_CUBIC_AREA IS NOT NULL THEN
      CP_MAX_SUB_VOL := INV_CONVERT.INV_UM_CONVERT(NULL
                                                  ,NULL
                                                  ,X_MAX_CUBIC_AREA
                                                  ,X_VOLUME_UOM_CODE
                                                  ,P_SUB_VOL_UOM_CODE
                                                  ,NULL
                                                  ,NULL);
    ELSE
      CP_MAX_SUB_VOL := NULL;
    END IF;
    IF CP_SUB_WT = -99999 THEN
      CP_SUB_WT := NULL;
    END IF;
    IF CP_SUB_VOL = -99999 THEN
      CP_SUB_VOL := NULL;
    END IF;
    IF CP_MAX_SUB_WT = -99999 THEN
      L_DISPLAY_LOCATOR := FALSE;
      CP_MAX_SUB_WT := NULL;
    END IF;
    IF CP_MAX_SUB_VOL = -99999 THEN
      L_DISPLAY_LOCATOR := FALSE;
      CP_MAX_SUB_VOL := NULL;
    END IF;
    IF X_LOCATION_MAXIMUM_UNITS IS NOT NULL AND X_LOCATION_MAXIMUM_UNITS > 0 THEN
      CP_MAX_SUB_UNITS := X_LOCATION_MAXIMUM_UNITS;
    ELSE
      CP_MAX_SUB_UNITS := NULL;
      CP_LOC_UNITS_PER := 1;
    END IF;
    IF X_LOCATION_CURRENT_UNITS IS NOT NULL AND X_LOCATION_CURRENT_UNITS >= 0 THEN
      CP_UNITS := X_LOCATION_CURRENT_UNITS;
    ELSE
      CP_UNITS := NULL;
    END IF;
    IF CP_SUB_WT IS NULL AND CP_SUB_VOL IS NULL AND CP_UNITS IS NULL THEN
      L_DISPLAY_LOCATOR := FALSE;
    END IF;
    IF L_DISPLAY_LOCATOR AND (P_LOCATOR_ID IS NULL OR P_LOCATOR_ID = LOCATOR_ID) THEN
      IF CP_MAX_SUB_WT IS NOT NULL THEN
        IF CP_MAX_SUB_WT = 0 THEN
          CP_WT_PER := TO_CHAR(0);
        ELSE
          CP_WT_PER := TO_CHAR(100 * (ROUND(CP_SUB_WT / CP_MAX_SUB_WT
                                    ,5)));
        END IF;
      ELSE
        CP_WT_PER := P_VALUE_NA;
        CP_LOC_WT_PER := 1;
      END IF;
      IF CP_MAX_SUB_VOL IS NOT NULL THEN
        IF CP_MAX_SUB_VOL = 0 THEN
          CP_VOL_PER := TO_CHAR(0);
        ELSE
          CP_VOL_PER := TO_CHAR(100 * (ROUND(CP_SUB_VOL / CP_MAX_SUB_VOL
                                     ,5)));
        END IF;
      ELSE
        CP_VOL_PER := P_VALUE_NA;
        CP_LOC_VOL_PER := 1;
      END IF;
      IF CP_SUB_WT IS NOT NULL AND CP_SUB_WT > 0 THEN
        CP_LOC_WEIGHT_C := CP_LOC_WEIGHT_C + 1;
      END IF;
      IF CP_SUB_VOL IS NOT NULL AND CP_SUB_VOL > 0 THEN
        CP_LOC_VOLUME_C := CP_LOC_VOLUME_C + 1;
      END IF;
      IF LOOSE_QTY > 0 THEN
        CP_LOC_LOOSE_QTY_C := CP_LOC_LOOSE_QTY_C + 1;
      END IF;
      IF PACKED_QTY > 0 THEN
        CP_LOC_PACKED_QTY_C := CP_LOC_PACKED_QTY_C + 1;
      END IF;
      IF TOTAL_QTY > 0 THEN
        CP_LOC_TOTAL_QTY_C := CP_LOC_TOTAL_QTY_C + 1;
      END IF;
      CP_DISPLAY_LOC := 1;
      CP_LOC_LOOSE_QTY := LOOSE_QTY;
      CP_LOC_PACKED_QTY := PACKED_QTY;
      CP_LOC_TOTAL_QTY := TOTAL_QTY;
    ELSE
      IF (P_LOCATOR_ID IS NULL OR (P_LOCATOR_ID = LOCATOR_ID)) AND (P_SUBINVENTORY IS NULL OR (P_SUBINVENTORY = SUBINVENTORY_CODE1)) THEN
        CP_DISPLAY_LOC := 0;
        INSERT INTO MTL_LOC_CAPACITY_TEMP
          (ORGANIZATION_ID
          ,SUBINVENTORY_CODE
          ,LOCATOR_ID
          ,LOCATOR_WEIGHT_UOM_CODE
          ,LOCATOR_VOLUME_UOM_CODE
          ,LOCATOR_UNITS_UOM_CODE)
        VALUES   (ORGANIZATION_ID
          ,SUBINVENTORY_CODE1
          ,LOCATOR_ID
          ,X_LOCATION_WEIGHT_UOM_CODE
          ,X_VOLUME_UOM_CODE
          ,NULL);
      END IF;
      CP_LOC_LOOSE_QTY := 0;
      CP_LOC_PACKED_QTY := 0;
      CP_LOC_TOTAL_QTY := 0;
    END IF;
    RETURN (1);
  END CF_LOC_CAPACITYFORMULA;

  FUNCTION CHECK_WEIGHT_PERCENT(CS_WEIGHT IN NUMBER) RETURN BOOLEAN IS
    L_WEIGHT_PER NUMBER := P_UTIL_BY_WEIGHT;
    L_WT_OP VARCHAR2(1) := P_WT_OPERATOR;
  BEGIN
    IF L_WEIGHT_PER IS NULL OR L_WT_OP IS NULL THEN
      RETURN TRUE;
    END IF;
    IF CP_WEIGHT_PER = P_VALUE_NA THEN
      IF CS_WEIGHT <> 0 THEN
        RETURN (TRUE);
      END IF;
    ELSE
      IF (L_WT_OP = '<') THEN
        RETURN (TO_NUMBER(CP_WEIGHT_PER) < L_WEIGHT_PER);
      ELSIF (L_WT_OP = '>') THEN
        RETURN (TO_NUMBER(CP_WEIGHT_PER) > L_WEIGHT_PER);
      ELSE
        RETURN (TO_NUMBER(CP_WEIGHT_PER) = L_WEIGHT_PER);
      END IF;
    END IF;
    RETURN (FALSE);
  END CHECK_WEIGHT_PERCENT;

  FUNCTION CHECK_VOL_PERCENT(CS_VOLUME IN NUMBER) RETURN BOOLEAN IS
    L_VOL_PER NUMBER := P_UTIL_BY_VOLUME;
    L_VOL_OP VARCHAR2(1) := P_VOL_OPERATOR;
  BEGIN
    IF L_VOL_PER IS NULL OR L_VOL_OP IS NULL THEN
      RETURN TRUE;
    END IF;
    IF CP_VOLUME_PER = P_VALUE_NA THEN
      IF CS_VOLUME <> 0 THEN
        RETURN (TRUE);
      END IF;
    ELSE
      IF (L_VOL_OP = '<') THEN
        RETURN (TO_NUMBER(CP_VOLUME_PER) < L_VOL_PER);
      ELSIF (L_VOL_OP = '>') THEN
        RETURN (TO_NUMBER(CP_VOLUME_PER) > L_VOL_PER);
      ELSE
        RETURN (TO_NUMBER(CP_VOLUME_PER) = L_VOL_PER);
      END IF;
    END IF;
    RETURN (FALSE);
  END CHECK_VOL_PERCENT;

  PROCEDURE INITIALIZE_VALUES IS
  BEGIN
    CP_LOOSE_QTY_C := 0;
    CP_PACKED_QTY_C := 0;
    CP_TOTAL_QTY_C := 0;
    CP_WEIGHT_C := 0;
    CP_VOLUME_C := 0;
    CP_LOC_LOOSE_QTY_C := 0;
    CP_LOC_PACKED_QTY_C := 0;
    CP_LOC_TOTAL_QTY_C := 0;
    CP_LOC_WEIGHT_C := 0;
    CP_LOC_VOLUME_C := 0;
  END INITIALIZE_VALUES;

  FUNCTION CHECK_UNITS_PERCENT(CS_UNITS IN NUMBER) RETURN BOOLEAN IS
    L_UNITS_PER NUMBER := P_UTIL_BY_UNIT;
    L_UNITS_OP VARCHAR2(1) := P_UNITS_OPERATOR;
  BEGIN
    IF L_UNITS_PER IS NULL OR L_UNITS_OP IS NULL THEN
      RETURN (TRUE);
    END IF;
    IF CP_UNITS_PER IS NULL THEN
      IF CS_UNITS <> 0 THEN
        RETURN (TRUE);
      END IF;
    ELSE
      IF (L_UNITS_OP = '<') THEN
        RETURN (CP_UNITS_PER < L_UNITS_PER);
      ELSIF (L_UNITS_OP = '>') THEN
        RETURN (CP_UNITS_PER > L_UNITS_PER);
      ELSE
        RETURN (CP_UNITS_PER = L_UNITS_PER);
      END IF;
    END IF;
    RETURN (FALSE);
  END CHECK_UNITS_PERCENT;

  FUNCTION CF_1FORMULA(LOC IN NUMBER
                      ,ORG_ID IN NUMBER) RETURN CHAR IS
  BEGIN
    RETURN INV_PROJECT.GET_LOCSEGS(LOC
                                  ,ORG_ID);
  END CF_1FORMULA;

  FUNCTION CF_CALC_COUNTERSFORMULA(CS_WEIGHT IN NUMBER
                                  ,CS_VOLUME IN NUMBER
                                  ,CS_UNITS IN NUMBER
                                  ,CS_MAX_SUB_WT IN NUMBER
                                  ,CS_SUB_WT_PER IN NUMBER
                                  ,CS_MAX_SUB_VOL IN NUMBER
                                  ,CS_SUB_VOL_PER IN NUMBER
                                  ,CS_SUB_UNITS_PER IN NUMBER
                                  ,CS_MAX_SUB_UNITS IN NUMBER
                                  ,CS_LOOSE_QTY IN NUMBER
                                  ,CS_PACKED_QTY IN NUMBER
                                  ,CS_TOTAL_QTY IN NUMBER
                                  ,CS_NUM_LOCS IN NUMBER) RETURN NUMBER IS
    L_DISPLAY_SUB BOOLEAN := TRUE;
    L_LEVEL NUMBER := 0;
  BEGIN
    L_LEVEL := 1;
    IF CS_WEIGHT IS NULL AND CS_VOLUME IS NULL AND CS_UNITS IS NULL THEN
      L_DISPLAY_SUB := FALSE;
    END IF;
    IF (L_DISPLAY_SUB) THEN
      IF CS_MAX_SUB_WT IS NOT NULL AND CS_SUB_WT_PER = 0 THEN
        IF CS_MAX_SUB_WT = 0 THEN
          CP_WEIGHT_PER := TO_CHAR(0);
        ELSE
          CP_WEIGHT_PER := TO_CHAR(100 * ROUND(CS_WEIGHT / CS_MAX_SUB_WT
                                        ,5));
        END IF;
      ELSE
        CP_WEIGHT_PER := P_VALUE_NA;
      END IF;
      IF CS_MAX_SUB_VOL IS NOT NULL AND CS_SUB_VOL_PER = 0 THEN
        IF CS_MAX_SUB_VOL = 0 THEN
          CP_VOLUME_PER := TO_CHAR(0);
        ELSE
          CP_VOLUME_PER := TO_CHAR(100 * ROUND((CS_VOLUME / CS_MAX_SUB_VOL)
                                        ,5));
        END IF;
      ELSE
        CP_VOLUME_PER := P_VALUE_NA;
      END IF;
      IF CS_SUB_UNITS_PER = 0 THEN
        IF CS_MAX_SUB_UNITS = 0 THEN
          CP_UNITS_PER := 0;
        ELSE
          CP_UNITS_PER := 100 * ROUND((CS_UNITS / CS_MAX_SUB_UNITS)
                               ,5);
        END IF;
      ELSE
        CP_UNITS_PER := NULL;
      END IF;
    END IF;
    IF (L_DISPLAY_SUB AND P_DETAIL_LEVEL = 2) OR (L_DISPLAY_SUB AND P_DETAIL_LEVEL = 1 AND CHECK_WEIGHT_PERCENT(CS_WEIGHT) AND CHECK_VOL_PERCENT(CS_VOLUME) AND CHECK_UNITS_PERCENT(CS_UNITS)) THEN
      IF CS_WEIGHT > 0 THEN
        CP_WEIGHT_C := CP_WEIGHT_C + 1;
      END IF;
      IF CS_VOLUME > 0 THEN
        CP_VOLUME_C := CP_VOLUME_C + 1;
      END IF;
      IF CS_LOOSE_QTY > 0 THEN
        CP_LOOSE_QTY_C := CP_LOOSE_QTY_C + 1;
      END IF;
      IF CS_PACKED_QTY > 0 THEN
        CP_PACKED_QTY_C := CP_PACKED_QTY_C + 1;
      END IF;
      IF CS_TOTAL_QTY > 0 THEN
        CP_TOTAL_QTY_C := CP_TOTAL_QTY_C + 1;
      END IF;
    END IF;
    IF (P_DETAIL_LEVEL = 1) THEN
      IF (CHECK_WEIGHT_PERCENT(CS_WEIGHT) AND CHECK_VOL_PERCENT(CS_VOLUME) AND CHECK_UNITS_PERCENT(CS_UNITS) AND L_DISPLAY_SUB) THEN
        CP_DISPLAY_SUB := 1;
        CP_COUNT := 1;
        CP_SUB_LOOSE_QTY := CS_LOOSE_QTY;
        CP_SUB_PACKED_QTY := CS_PACKED_QTY;
        CP_SUB_TOTAL_QTY := CS_TOTAL_QTY;
        CP_SUB_WEIGHT := CS_WEIGHT;
        CP_SUB_VOLUME := CS_VOLUME;
      ELSE
        CP_SUB_LOOSE_QTY := 0;
        CP_SUB_PACKED_QTY := 0;
        CP_SUB_TOTAL_QTY := 0;
        CP_SUB_WEIGHT := 0;
        CP_SUB_VOLUME := 0;
        CP_DISPLAY_SUB := 0;
      END IF;
    ELSIF (P_DETAIL_LEVEL = 2) THEN
      IF (L_DISPLAY_SUB AND CS_NUM_LOCS > 0) THEN
        CP_DISPLAY_SUB := 1;
        CP_COUNT := 1;
        CP_SUB_LOOSE_QTY := CS_LOOSE_QTY;
        CP_SUB_PACKED_QTY := CS_PACKED_QTY;
        CP_SUB_TOTAL_QTY := CS_TOTAL_QTY;
        CP_SUB_WEIGHT := CS_WEIGHT;
        CP_SUB_VOLUME := CS_VOLUME;
      ELSE
        CP_DISPLAY_SUB := 0;
        CP_SUB_LOOSE_QTY := 0;
        CP_SUB_PACKED_QTY := 0;
        CP_SUB_TOTAL_QTY := 0;
        CP_SUB_WEIGHT := 0;
        CP_SUB_VOLUME := 0;
      END IF;
    END IF;
    RETURN (1);
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END CF_CALC_COUNTERSFORMULA;

  FUNCTION CF_CALC_AVGSFORMULA(CS_TOTAL_LOOSE_QTY IN NUMBER
                              ,CS_TOTAL_PACKED_QTY IN NUMBER
                              ,CS_TOTAL_TOTAL_QTY IN NUMBER
                              ,CS_TOTAL_WEIGHT IN NUMBER
                              ,CS_TOTAL_VOLUME IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF P_DETAIL_LEVEL = 1 THEN
      IF CP_LOOSE_QTY_C = 0 THEN
        CP_AVG_LOOSE_QTY := CS_TOTAL_LOOSE_QTY;
      ELSE
        CP_AVG_LOOSE_QTY := ROUND(CS_TOTAL_LOOSE_QTY / CP_LOOSE_QTY_C
                                 ,5);
      END IF;
      IF CP_PACKED_QTY_C = 0 THEN
        CP_AVG_PACKED_QTY := CS_TOTAL_PACKED_QTY;
      ELSE
        CP_AVG_PACKED_QTY := ROUND(CS_TOTAL_PACKED_QTY / CP_PACKED_QTY_C
                                  ,5);
      END IF;
      IF CP_TOTAL_QTY_C = 0 THEN
        CP_AVG_TOTAL_QTY := CS_TOTAL_TOTAL_QTY;
      ELSE
        CP_AVG_TOTAL_QTY := ROUND(CS_TOTAL_TOTAL_QTY / CP_TOTAL_QTY_C
                                 ,5);
      END IF;
      IF CP_WEIGHT_C = 0 THEN
        CP_AVG_WEIGHT := CS_TOTAL_WEIGHT;
      ELSE
        CP_AVG_WEIGHT := ROUND(CS_TOTAL_WEIGHT / CP_WEIGHT_C
                              ,5);
      END IF;
      IF CP_VOLUME_C = 0 THEN
        CP_AVG_VOLUME := CS_TOTAL_VOLUME;
      ELSE
        CP_AVG_VOLUME := ROUND(CS_TOTAL_VOLUME / CP_VOLUME_C
                              ,5);
      END IF;
    ELSE
      IF CP_LOC_LOOSE_QTY_C = 0 THEN
        CP_AVG_LOOSE_QTY := CS_TOTAL_LOOSE_QTY;
      ELSE
        CP_AVG_LOOSE_QTY := ROUND(CS_TOTAL_LOOSE_QTY / CP_LOC_LOOSE_QTY_C
                                 ,5);
      END IF;
      IF CP_LOC_PACKED_QTY_C = 0 THEN
        CP_AVG_PACKED_QTY := CS_TOTAL_PACKED_QTY;
      ELSE
        CP_AVG_PACKED_QTY := ROUND(CS_TOTAL_PACKED_QTY / CP_LOC_PACKED_QTY_C
                                  ,5);
      END IF;
      IF CP_LOC_TOTAL_QTY_C = 0 THEN
        CP_AVG_TOTAL_QTY := CS_TOTAL_TOTAL_QTY;
      ELSE
        CP_AVG_TOTAL_QTY := ROUND(CS_TOTAL_TOTAL_QTY / CP_LOC_TOTAL_QTY_C
                                 ,5);
      END IF;
      IF CP_LOC_WEIGHT_C = 0 THEN
        CP_AVG_WEIGHT := CS_TOTAL_WEIGHT;
      ELSE
        CP_AVG_WEIGHT := ROUND(CS_TOTAL_WEIGHT / CP_LOC_WEIGHT_C
                              ,5);
      END IF;
      IF CP_LOC_VOLUME_C = 0 THEN
        CP_AVG_VOLUME := CS_TOTAL_VOLUME;
      ELSE
        CP_AVG_VOLUME := ROUND(CS_TOTAL_VOLUME / CP_LOC_VOLUME_C
                              ,5);
      END IF;
    END IF;
    RETURN (1);
  END CF_CALC_AVGSFORMULA;

  FUNCTION CP_UNITS_PER_P RETURN NUMBER IS
  BEGIN
    RETURN CP_UNITS_PER;
  END CP_UNITS_PER_P;

  FUNCTION CP_WEIGHT_PER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_WEIGHT_PER;
  END CP_WEIGHT_PER_P;

  FUNCTION CP_VOLUME_PER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_VOLUME_PER;
  END CP_VOLUME_PER_P;

  FUNCTION CP_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_COUNT;
  END CP_COUNT_P;

  FUNCTION CP_DISPLAY_SUB_P RETURN NUMBER IS
  BEGIN
    RETURN CP_DISPLAY_SUB;
  END CP_DISPLAY_SUB_P;

  FUNCTION CP_SUB_LOOSE_QTY_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SUB_LOOSE_QTY;
  END CP_SUB_LOOSE_QTY_P;

  FUNCTION CP_SUB_PACKED_QTY_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SUB_PACKED_QTY;
  END CP_SUB_PACKED_QTY_P;

  FUNCTION CP_SUB_TOTAL_QTY_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SUB_TOTAL_QTY;
  END CP_SUB_TOTAL_QTY_P;

  FUNCTION CP_SUB_WEIGHT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SUB_WEIGHT;
  END CP_SUB_WEIGHT_P;

  FUNCTION CP_SUB_VOLUME_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SUB_VOLUME;
  END CP_SUB_VOLUME_P;

  FUNCTION CP_SUB_WT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SUB_WT;
  END CP_SUB_WT_P;

  FUNCTION CP_SUB_VOL_P RETURN NUMBER IS
  BEGIN
    RETURN CP_SUB_VOL;
  END CP_SUB_VOL_P;

  FUNCTION CP_MAX_SUB_WT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_MAX_SUB_WT;
  END CP_MAX_SUB_WT_P;

  FUNCTION CP_MAX_SUB_VOL_P RETURN NUMBER IS
  BEGIN
    RETURN CP_MAX_SUB_VOL;
  END CP_MAX_SUB_VOL_P;

  FUNCTION CP_WT_PER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_WT_PER;
  END CP_WT_PER_P;

  FUNCTION CP_VOL_PER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_VOL_PER;
  END CP_VOL_PER_P;

  FUNCTION CP_DISPLAY_LOC_P RETURN NUMBER IS
  BEGIN
    RETURN CP_DISPLAY_LOC;
  END CP_DISPLAY_LOC_P;

  FUNCTION CP_LOC_LOOSE_QTY_P RETURN NUMBER IS
  BEGIN
    RETURN CP_LOC_LOOSE_QTY;
  END CP_LOC_LOOSE_QTY_P;

  FUNCTION CP_LOC_PACKED_QTY_P RETURN NUMBER IS
  BEGIN
    RETURN CP_LOC_PACKED_QTY;
  END CP_LOC_PACKED_QTY_P;

  FUNCTION CP_UNITS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_UNITS;
  END CP_UNITS_P;

  FUNCTION CP_MAX_SUB_UNITS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_MAX_SUB_UNITS;
  END CP_MAX_SUB_UNITS_P;

  FUNCTION CP_LOC_TOTAL_QTY_P RETURN NUMBER IS
  BEGIN
    RETURN CP_LOC_TOTAL_QTY;
  END CP_LOC_TOTAL_QTY_P;

  FUNCTION CP_LOC_WT_PER_P RETURN NUMBER IS
  BEGIN
    RETURN CP_LOC_WT_PER;
  END CP_LOC_WT_PER_P;

  FUNCTION CP_LOC_VOL_PER_P RETURN NUMBER IS
  BEGIN
    RETURN CP_LOC_VOL_PER;
  END CP_LOC_VOL_PER_P;

  FUNCTION CP_LOC_UNITS_PER_P RETURN NUMBER IS
  BEGIN
    RETURN CP_LOC_UNITS_PER;
  END CP_LOC_UNITS_PER_P;

  FUNCTION CP_AVG_LOOSE_QTY_P RETURN NUMBER IS
  BEGIN
    RETURN CP_AVG_LOOSE_QTY;
  END CP_AVG_LOOSE_QTY_P;

  FUNCTION CP_AVG_PACKED_QTY_P RETURN NUMBER IS
  BEGIN
    RETURN CP_AVG_PACKED_QTY;
  END CP_AVG_PACKED_QTY_P;

  FUNCTION CP_AVG_TOTAL_QTY_P RETURN NUMBER IS
  BEGIN
    RETURN CP_AVG_TOTAL_QTY;
  END CP_AVG_TOTAL_QTY_P;

  FUNCTION CP_AVG_WEIGHT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_AVG_WEIGHT;
  END CP_AVG_WEIGHT_P;

  FUNCTION CP_AVG_VOLUME_P RETURN NUMBER IS
  BEGIN
    RETURN CP_AVG_VOLUME;
  END CP_AVG_VOLUME_P;

  FUNCTION CP_WEIGHT_C_P RETURN NUMBER IS
  BEGIN
    RETURN CP_WEIGHT_C;
  END CP_WEIGHT_C_P;

  FUNCTION CP_LOC_WEIGHT_C_P RETURN NUMBER IS
  BEGIN
    RETURN CP_LOC_WEIGHT_C;
  END CP_LOC_WEIGHT_C_P;

  FUNCTION CP_VOLUME_C_P RETURN NUMBER IS
  BEGIN
    RETURN CP_VOLUME_C;
  END CP_VOLUME_C_P;

  FUNCTION CP_LOC_LOOSE_QTY_C_P RETURN NUMBER IS
  BEGIN
    RETURN CP_LOC_LOOSE_QTY_C;
  END CP_LOC_LOOSE_QTY_C_P;

  FUNCTION CP_PACKED_QTY_C_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PACKED_QTY_C;
  END CP_PACKED_QTY_C_P;

  FUNCTION CP_LOC_PACKED_QTY_C_P RETURN NUMBER IS
  BEGIN
    RETURN CP_LOC_PACKED_QTY_C;
  END CP_LOC_PACKED_QTY_C_P;

  FUNCTION CP_LOC_VOLUME_C_P RETURN NUMBER IS
  BEGIN
    RETURN CP_LOC_VOLUME_C;
  END CP_LOC_VOLUME_C_P;

  FUNCTION CP_TOTAL_QTY_C_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TOTAL_QTY_C;
  END CP_TOTAL_QTY_C_P;

  FUNCTION CP_LOOSE_QTY_C_P RETURN NUMBER IS
  BEGIN
    RETURN CP_LOOSE_QTY_C;
  END CP_LOOSE_QTY_C_P;

  FUNCTION CP_LOC_TOTAL_QTY_C_P RETURN NUMBER IS
  BEGIN
    RETURN CP_LOC_TOTAL_QTY_C;
  END CP_LOC_TOTAL_QTY_C_P;

END WMS_WMSCPTYR_XMLP_PKG;


/
