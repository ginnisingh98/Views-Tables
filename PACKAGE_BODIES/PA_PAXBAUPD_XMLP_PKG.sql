--------------------------------------------------------
--  DDL for Package Body PA_PAXBAUPD_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PA_PAXBAUPD_XMLP_PKG" AS
/* $Header: PAXBAUPDB.pls 120.0 2008/01/02 11:20:05 krreddy noship $ */
  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
      ERRBUF VARCHAR2(2000);
      RETCODE VARCHAR2(2);
      NDF VARCHAR2(80);
      REQ_ID NUMBER;
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      /*SRW.USER_EXIT('FND GETPROFILE
                    NAME="PA_DEBUG_MODE"
                    FIELD=":p_debug_mode"
                    PRINT_ERROR="N"')*/NULL;
      P_RULE_OPTIMIZER := FND_PROFILE.VALUE('PA_RULE_BASED_OPTIMIZER');
      IF (GET_COMPANY_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      SELECT
        MEANING
      INTO NDF
      FROM
        PA_LOOKUPS
      WHERE LOOKUP_CODE = 'NO_DATA_FOUND'
        AND LOOKUP_TYPE = 'MESSAGE';
      C_NO_DATA_FOUND := NDF;
      PROC_CONC(ERRBUF
               ,RETCODE
               ,P_BATCH_ID
               ,REQ_ID);
      CP_REQ_ID := REQ_ID;
      IF RETCODE = '2' THEN
        CP_ERRBUF := ERRBUF;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        SELECT
          MEANING
        INTO NDF
        FROM
          PA_LOOKUPS
        WHERE LOOKUP_CODE = 'NO_DATA_FOUND'
          AND LOOKUP_TYPE = 'MESSAGE';
        C_NO_DATA_FOUND := NDF;
        C_DUMMY_DATA := 1;
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
  BEGIN
    SELECT
      GL.NAME
    INTO L_NAME
    FROM
      GL_SETS_OF_BOOKS GL,
      PA_IMPLEMENTATIONS PI
    WHERE GL.SET_OF_BOOKS_ID = PI.SET_OF_BOOKS_ID;
    C_COMPANY_NAME_HEADER := L_NAME;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;

  FUNCTION CF_UPDATE_FLAGFORMULA(UPDATE_FLAG IN VARCHAR2) RETURN VARCHAR2 IS
    TMP_YN_FLAG VARCHAR2(80);
  BEGIN
    SELECT
      MEANING
    INTO TMP_YN_FLAG
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'YES_NO'
      AND LOOKUP_CODE = UPDATE_FLAG;
    RETURN TMP_YN_FLAG;
  END CF_UPDATE_FLAGFORMULA;

  FUNCTION CF_RECAL_FLAGFORMULA(RECALCULATE_FLAG IN VARCHAR2) RETURN VARCHAR2 IS
    TMP_YN_FLAG VARCHAR2(80);
  BEGIN
    SELECT
      MEANING
    INTO TMP_YN_FLAG
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'YES_NO'
      AND LOOKUP_CODE = RECALCULATE_FLAG;
    RETURN TMP_YN_FLAG;
  END CF_RECAL_FLAGFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_NO_DATA_FOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NO_DATA_FOUND;
  END C_NO_DATA_FOUND_P;

  FUNCTION C_DUMMY_DATA_P RETURN NUMBER IS
  BEGIN
    RETURN C_DUMMY_DATA;
  END C_DUMMY_DATA_P;

  FUNCTION CP_RET_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_RET_CODE;
  END CP_RET_CODE_P;

  FUNCTION CP_ERRBUF_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ERRBUF;
  END CP_ERRBUF_P;

  FUNCTION CP_REQ_ID_P RETURN NUMBER IS
  BEGIN
    RETURN CP_REQ_ID;
  END CP_REQ_ID_P;
/*
  PROCEDURE INSERT_ROW1(X_ROWID IN OUT NOCOPY VARCHAR2
                      ,X_BATCH_ID IN OUT NOCOPY NUMBER
                      ,X_CREATION_DATE IN DATE
                      ,X_CREATED_BY IN NUMBER
                      ,X_LAST_UPDATED_BY IN NUMBER
                      ,X_LAST_UPDATE_DATE IN DATE
                      ,X_LAST_UPDATE_LOGIN IN NUMBER
                      ,X_BATCH_NAME IN VARCHAR2
                      ,X_BATCH_STATUS_CODE IN VARCHAR2
                      ,X_DESCRIPTION IN VARCHAR2
                      ,X_PROJECT_ATTRIBUTE IN VARCHAR2
                      ,X_EFFECTIVE_DATE IN DATE
                      ,X_ATTRIBUTE_CATEGORY IN VARCHAR2
                      ,X_ATTRIBUTE1 IN VARCHAR2
                      ,X_ATTRIBUTE2 IN VARCHAR2
                      ,X_ATTRIBUTE3 IN VARCHAR2
                      ,X_ATTRIBUTE4 IN VARCHAR2
                      ,X_ATTRIBUTE5 IN VARCHAR2
                      ,X_ATTRIBUTE6 IN VARCHAR2
                      ,X_ATTRIBUTE7 IN VARCHAR2
                      ,X_ATTRIBUTE8 IN VARCHAR2
                      ,X_ATTRIBUTE9 IN VARCHAR2
                      ,X_ATTRIBUTE10 IN VARCHAR2
                      ,X_ATTRIBUTE11 IN VARCHAR2
                      ,X_ATTRIBUTE12 IN VARCHAR2
                      ,X_ATTRIBUTE13 IN VARCHAR2
                      ,X_ATTRIBUTE14 IN VARCHAR2
                      ,X_ATTRIBUTE15 IN VARCHAR2) IS
  BEGIN
    begin
        INSERT_ROW(X_ROWID, X_BATCH_ID, X_CREATION_DATE, X_CREATED_BY, X_LAST_UPDATED_BY, X_LAST_UPDATE_DATE,
	X_LAST_UPDATE_LOGIN, X_BATCH_NAME, X_BATCH_STATUS_CODE, X_DESCRIPTION, X_PROJECT_ATTRIBUTE, X_EFFECTIVE_DATE,
	X_ATTRIBUTE_CATEGORY, X_ATTRIBUTE1, X_ATTRIBUTE2, X_ATTRIBUTE3, X_ATTRIBUTE4, X_ATTRIBUTE5, X_ATTRIBUTE6,
	X_ATTRIBUTE7, X_ATTRIBUTE8, X_ATTRIBUTE9, X_ATTRIBUTE10, X_ATTRIBUTE11, X_ATTRIBUTE12, X_ATTRIBUTE13, X_ATTRIBUTE14, X_ATTRIBUTE15);
    end;

  END INSERT_ROW;

  PROCEDURE UPDATE_ROW(X_ROWID IN VARCHAR2
                      ,X_LAST_UPDATED_BY IN NUMBER
                      ,X_LAST_UPDATE_DATE IN DATE
                      ,X_LAST_UPDATE_LOGIN IN NUMBER
                      ,X_BATCH_NAME IN VARCHAR2
                      ,X_BATCH_STATUS_CODE IN VARCHAR2
                      ,X_REJECTION_CODE IN VARCHAR2
                      ,X_DESCRIPTION IN VARCHAR2
                      ,X_PROJECT_ATTRIBUTE IN VARCHAR2
                      ,X_EFFECTIVE_DATE IN DATE
                      ,X_PROCESS_RUN_BY IN NUMBER
                      ,X_PROCESS_RUN_DATE IN DATE
                      ,X_ATTRIBUTE_CATEGORY IN VARCHAR2
                      ,X_ATTRIBUTE1 IN VARCHAR2
                      ,X_ATTRIBUTE2 IN VARCHAR2
                      ,X_ATTRIBUTE3 IN VARCHAR2
                      ,X_ATTRIBUTE4 IN VARCHAR2
                      ,X_ATTRIBUTE5 IN VARCHAR2
                      ,X_ATTRIBUTE6 IN VARCHAR2
                      ,X_ATTRIBUTE7 IN VARCHAR2
                      ,X_ATTRIBUTE8 IN VARCHAR2
                      ,X_ATTRIBUTE9 IN VARCHAR2
                      ,X_ATTRIBUTE10 IN VARCHAR2
                      ,X_ATTRIBUTE11 IN VARCHAR2
                      ,X_ATTRIBUTE12 IN VARCHAR2
                      ,X_ATTRIBUTE13 IN VARCHAR2
                      ,X_ATTRIBUTE14 IN VARCHAR2
                      ,X_ATTRIBUTE15 IN VARCHAR2) IS
  BEGIN
    begin
        PA_MU_BATCHES_V_PKG.UPDATE_ROW(X_ROWID, X_LAST_UPDATED_BY, X_LAST_UPDATE_DATE, X_LAST_UPDATE_LOGIN, X_BATCH_NAME,
	X_BATCH_STATUS_CODE, X_REJECTION_CODE, X_DESCRIPTION, X_PROJECT_ATTRIBUTE, X_EFFECTIVE_DATE, X_PROCESS_RUN_BY,
	X_PROCESS_RUN_DATE, X_ATTRIBUTE_CATEGORY, X_ATTRIBUTE1, X_ATTRIBUTE2, X_ATTRIBUTE3, X_ATTRIBUTE4, X_ATTRIBUTE5,
	X_ATTRIBUTE6, X_ATTRIBUTE7, X_ATTRIBUTE8, X_ATTRIBUTE9, X_ATTRIBUTE10, X_ATTRIBUTE11, X_ATTRIBUTE12, X_ATTRIBUTE13,
	X_ATTRIBUTE14, X_ATTRIBUTE15);
    end;
  END UPDATE_ROW;

  PROCEDURE LOCK_ROW(X_ROWID IN VARCHAR2
                    ,X_BATCH_NAME IN VARCHAR2
                    ,X_BATCH_STATUS_CODE IN VARCHAR2
                    ,X_DESCRIPTION IN VARCHAR2
                    ,X_PROJECT_ATTRIBUTE IN VARCHAR2
                    ,X_PROCESS_RUN_BY IN NUMBER
                    ,X_PROCESS_RUN_DATE IN DATE
                    ,X_EFFECTIVE_DATE IN DATE
                    ,X_REJECTION_CODE IN VARCHAR2
                    ,X_ATTRIBUTE_CATEGORY IN VARCHAR2
                    ,X_ATTRIBUTE1 IN VARCHAR2
                    ,X_ATTRIBUTE2 IN VARCHAR2
                    ,X_ATTRIBUTE3 IN VARCHAR2
                    ,X_ATTRIBUTE4 IN VARCHAR2
                    ,X_ATTRIBUTE5 IN VARCHAR2
                    ,X_ATTRIBUTE6 IN VARCHAR2
                    ,X_ATTRIBUTE7 IN VARCHAR2
                    ,X_ATTRIBUTE8 IN VARCHAR2
                    ,X_ATTRIBUTE9 IN VARCHAR2
                    ,X_ATTRIBUTE10 IN VARCHAR2
                    ,X_ATTRIBUTE11 IN VARCHAR2
                    ,X_ATTRIBUTE12 IN VARCHAR2
                    ,X_ATTRIBUTE13 IN VARCHAR2
                    ,X_ATTRIBUTE14 IN VARCHAR2
                    ,X_ATTRIBUTE15 IN VARCHAR2) IS
  BEGIN
    begin
        PA_MU_BATCHES_V_PKG.LOCK_ROW(X_ROWID, X_BATCH_NAME, X_BATCH_STATUS_CODE, X_DESCRIPTION, X_PROJECT_ATTRIBUTE,
	X_PROCESS_RUN_BY, X_PROCESS_RUN_DATE, X_EFFECTIVE_DATE, X_REJECTION_CODE, X_ATTRIBUTE_CATEGORY, X_ATTRIBUTE1,
	X_ATTRIBUTE2, X_ATTRIBUTE3, X_ATTRIBUTE4, X_ATTRIBUTE5, X_ATTRIBUTE6, X_ATTRIBUTE7, X_ATTRIBUTE8, X_ATTRIBUTE9,
	X_ATTRIBUTE10, X_ATTRIBUTE11, X_ATTRIBUTE12, X_ATTRIBUTE13, X_ATTRIBUTE14, X_ATTRIBUTE15);
    end;
  END LOCK_ROW;

  PROCEDURE DELETE_ROW(X_ROWID IN VARCHAR2) IS
  BEGIN
    begin
        PA_MU_BATCHES_V_PKG.DELETE_ROW(X_ROWID);
    end;
  END DELETE_ROW;
*/
  PROCEDURE PROC_CONC(ERRBUF OUT NOCOPY VARCHAR2
                     ,RETCODE OUT NOCOPY VARCHAR2
                     ,X_BATCH_ID IN NUMBER
                     ,X_REQUEST_ID OUT NOCOPY NUMBER) IS
  BEGIN
    begin
        PA_MU_BATCHES_V_PKG.PROC_CONC(ERRBUF, RETCODE, X_BATCH_ID, X_REQUEST_ID);
    end;
  END PROC_CONC;
/*
  PROCEDURE PROCESS(ERRBUF OUT NOCOPY VARCHAR2
                   ,RETCODE OUT NOCOPY VARCHAR2
                   ,X_BATCH_ID IN NUMBER
                   ,X_CONCURRENT IN VARCHAR2
                   ,X_ALL_BATCHES IN VARCHAR2) IS
  BEGIN
    begin
        PA_MU_BATCHES_V_PKG.PROCESS(ERRBUF, RETCODE, X_BATCH_ID, X_CONCURRENT, X_ALL_BATCHES);
    end;
  END PROCESS;
*/
END PA_PAXBAUPD_XMLP_PKG;


/
