--------------------------------------------------------
--  DDL for Package Body AP_APXIAWRE_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AP_APXIAWRE_XMLP_PKG" AS
/* $Header: APXIAWREB.pls 120.0 2007/12/27 07:43:33 vjaganat noship $ */
  FUNCTION GET_BASE_CURR_DATA RETURN BOOLEAN IS
    BASE_CURR AP_SYSTEM_PARAMETERS.BASE_CURRENCY_CODE%TYPE;
    PREC FND_CURRENCIES.PRECISION%TYPE;
    MIN_AU FND_CURRENCIES.MINIMUM_ACCOUNTABLE_UNIT%TYPE;
    DESCR FND_CURRENCIES.DESCRIPTION%TYPE;
  BEGIN
    BASE_CURR := '';
    PREC := 0;
    MIN_AU := 0;
    DESCR := '';
    /*SRW.MESSAGE('4'
               ,'1After Get_Base_Curr_Data')*/NULL;
    SELECT
      P.BASE_CURRENCY_CODE,
      C.PRECISION,
      C.MINIMUM_ACCOUNTABLE_UNIT,
      C.DESCRIPTION
    INTO BASE_CURR,PREC,MIN_AU,DESCR
    FROM
      AP_SYSTEM_PARAMETERS P,
      FND_CURRENCIES C
    WHERE P.BASE_CURRENCY_CODE = C.CURRENCY_CODE;
    /*SRW.MESSAGE('4'
               ,'2After Get_Base_Curr_Data')*/NULL;
    C_BASE_CURRENCY_CODE := BASE_CURR;
    C_BASE_PRECISION := PREC;
    C_BASE_MIN_ACCT_UNIT := MIN_AU;
    C_BASE_DESCRIPTION := DESCR;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_BASE_CURR_DATA;

  FUNCTION CUSTOM_INIT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END CUSTOM_INIT;

  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;

  FUNCTION GET_NLS_STRINGS RETURN BOOLEAN IS
    NLS_VOID AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_NA AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_ALL AP_LOOKUP_CODES.DISPLAYED_FIELD%TYPE;
    NLS_YES FND_LOOKUPS.MEANING%TYPE;
    NLS_NO FND_LOOKUPS.MEANING%TYPE;
  BEGIN
    SELECT
      LY.MEANING,
      LN.MEANING,
      L1.DISPLAYED_FIELD,
      L2.DISPLAYED_FIELD,
      L3.DISPLAYED_FIELD
    INTO NLS_YES,NLS_NO,NLS_ALL,NLS_VOID,NLS_NA
    FROM
      FND_LOOKUPS LY,
      FND_LOOKUPS LN,
      AP_LOOKUP_CODES L1,
      AP_LOOKUP_CODES L2,
      AP_LOOKUP_CODES L3
    WHERE LY.LOOKUP_TYPE = 'YES_NO'
      AND LY.LOOKUP_CODE = 'Y'
      AND LN.LOOKUP_TYPE = 'YES_NO'
      AND LN.LOOKUP_CODE = 'N'
      AND L1.LOOKUP_TYPE = 'NLS REPORT PARAMETER'
      AND L1.LOOKUP_CODE = 'ALL'
      AND L2.LOOKUP_TYPE = 'NLS TRANSLATION'
      AND L2.LOOKUP_CODE = 'VOID'
      AND L3.LOOKUP_TYPE = 'NLS REPORT PARAMETER'
      AND L3.LOOKUP_CODE = 'NA';
    C_NLS_YES := NLS_YES;
    C_NLS_NO := NLS_NO;
    C_NLS_ALL := NLS_ALL;
    C_NLS_VOID := NLS_VOID;
    C_NLS_NA := NLS_NA;
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_APPRVL_NO_DATA');
    C_NLS_NO_DATA_EXISTS := FND_MESSAGE.GET;
    FND_MESSAGE.SET_NAME('SQLAP'
                        ,'AP_ALL_END_OF_REPORT');
    C_NLS_END_OF_REPORT := FND_MESSAGE.GET;
    --C_NLS_NO_DATA_EXISTS := '*** ' || C_NLS_NO_DATA_EXISTS || ' ***';
    --C_NLS_END_OF_REPORT := '*** ' || C_NLS_END_OF_REPORT || ' ***';
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_NLS_STRINGS;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      INIT_FAILURE EXCEPTION;
      A NUMBER;
    BEGIN
    P_FROM_INVOICE_DATE_V:=to_char(P_FROM_INVOICE_DATE,'DD-MON-YY');
    P_TO_INVOICE_DATE_V:= to_char(P_TO_INVOICE_DATE,'DD-MON-YY');
      SELECT
        count(*)
      INTO A
      FROM
        AP_INVOICES;
      /*SRW.MESSAGE('1'
                 ,'After SRWINIT' || A)*/NULL;
      C_REPORT_START_DATE := SYSDATE;
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('1'
                   ,'After SRWINIT')*/NULL;
      END IF;
      IF (GET_COMPANY_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('2'
                   ,'After Get_Company_Name')*/NULL;
      END IF;
      IF (GET_NLS_STRINGS <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.MESSAGE('3'
                   ,'After Get_NLS_Strings')*/NULL;
      END IF;
      IF (GET_BASE_CURR_DATA <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      /*SRW.MESSAGE('4'
                 ,'After Get_Base_Curr_Data')*/NULL;
      LP_VENDOR_ID := ' ';
      LP_INVOICES_NUMBER := ' ';
      LP_INVOICE_DATE_FROM := ' ';
      LP_INVOICE_DATE_TO := ' ';
      LP_APPROVAL_TIMING := ' ';
      /*SRW.MESSAGE('5'
                 ,'After set to null')*/NULL;
      IF (P_VENDOR_ID IS NOT NULL) THEN
        LP_VENDOR_ID := 'and ai.vendor_id = ' || TO_CHAR(P_VENDOR_ID);
      END IF;
      IF (P_INVOICE_NUM IS NOT NULL) THEN
        LP_INVOICES_NUMBER := ' and ai.invoice_num  = ''' || P_INVOICE_NUM || '''';
      END IF;
      IF (P_FROM_INVOICE_DATE IS NOT NULL) THEN
        LP_INVOICE_DATE_FROM := ' and ai.invoice_date >= ''' || P_FROM_INVOICE_DATE || ''' ';
      END IF;
      IF (P_TO_INVOICE_DATE IS NOT NULL) THEN
        LP_INVOICE_DATE_TO := ' and ai.invoice_date <= ''' || P_TO_INVOICE_DATE || ''' ';
      END IF;
      /*SRW.MESSAGE('6'
                 ,'After set parameters' || LP_INVOICE_DATE_FROM)*/NULL;
      SELECT
        APPROVAL_TIMING
      INTO P_APPROVAL_TIMING
      FROM
        AP_SYSTEM_PARAMETERS;
      /*SRW.MESSAGE('7'
                 ,'After check flag')*/NULL;
      IF (P_APPROVAL_TIMING in ('VALIDATED','ACCOUNTED')) THEN
        LP_APPROVAL_TIMING := ' AND AP_INVOICES_PKG.GET_APPROVAL_STATUS(AI.INVOICE_ID,
                              							AI.INVOICE_AMOUNT,
                              							AI.PAYMENT_STATUS_FLAG,
                              							AI.INVOICE_TYPE_LOOKUP_CODE)
                              					in ( ''APPROVED'',''UNPAID'')';
      END IF;
      IF (P_APPROVAL_TIMING = 'ACCOUNTED') THEN
        LP_APPROVAL_TIMING := LP_APPROVAL_TIMING || ' AND AP_INVOICES_PKG.GET_Accounting_status(AI.INVOICE_ID) = ''ACCOUNTED''';
      END IF;
      IF P_VENDOR_ID IS NOT NULL THEN
        SELECT
          VENDOR_NAME
        INTO P_VENDOR_NAME
        FROM
          PO_VENDORS
        WHERE VENDOR_ID = P_VENDOR_ID;
      END IF;
      IF (P_DEBUG_SWITCH in ('y','Y')) THEN
        /*SRW.BREAK*/NULL;
      END IF;
      RETURN (TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
      IF (P_DEBUG_SWITCH = 'Y') THEN
        /*SRW.MESSAGE('20'
                   ,'After SRWEXIT')*/NULL;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_CHART_OF_ACCOUNTS_ID GL_SETS_OF_BOOKS.CHART_OF_ACCOUNTS_ID%TYPE;
    L_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
    L_SOB_ID NUMBER;
  BEGIN
    IF P_SET_OF_BOOKS_ID IS NOT NULL THEN
      L_SOB_ID := P_SET_OF_BOOKS_ID;
      SELECT
        NAME,
        CHART_OF_ACCOUNTS_ID
      INTO L_NAME,L_CHART_OF_ACCOUNTS_ID
      FROM
        GL_SETS_OF_BOOKS
      WHERE SET_OF_BOOKS_ID = L_SOB_ID;
      C_COMPANY_NAME_HEADER := L_NAME;
      C_CHART_OF_ACCOUNTS_ID := L_CHART_OF_ACCOUNTS_ID;
    END IF;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;

  FUNCTION CF_RAISE_EVENTFORMULA(C_ITERATION IN NUMBER
                                ,C_INVOICE_ID IN NUMBER) RETURN NUMBER IS
    L_DUMMY VARCHAR2(100);
    pragma autonomous_transaction;
  BEGIN

    UPDATE
      AP_INVOICES
    SET
      APPROVAL_ITERATION = NVL(C_ITERATION
         ,0) + 1
      ,WFAPPROVAL_STATUS = 'INITIATED'
    WHERE INVOICE_ID = C_INVOICE_ID;
    /*SRW.MESSAGE('33'
               ,'Before start approval process')*/NULL;
    AP_WORKFLOW_PKG.CREATE_INVAPP_PROCESS(C_INVOICE_ID
                                         ,NVL(C_ITERATION
                                            ,0) + 1
                                         ,L_DUMMY);
    /*SRW.MESSAGE('34'
               ,'After start approval process')*/NULL;
    COMMIT;
    RETURN (0);
  END CF_RAISE_EVENTFORMULA;

  FUNCTION C_NLS_YES_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_YES;
  END C_NLS_YES_P;

  FUNCTION C_NLS_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO;
  END C_NLS_NO_P;

  FUNCTION C_NLS_ALL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_ALL;
  END C_NLS_ALL_P;

  FUNCTION C_NLS_NO_DATA_EXISTS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NO_DATA_EXISTS;
  END C_NLS_NO_DATA_EXISTS_P;

  FUNCTION C_NLS_VOID_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_VOID;
  END C_NLS_VOID_P;

  FUNCTION C_NLS_NA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_NA;
  END C_NLS_NA_P;

  FUNCTION C_NLS_END_OF_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NLS_END_OF_REPORT;
  END C_NLS_END_OF_REPORT_P;

  FUNCTION C_REPORT_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_REPORT_START_DATE;
  END C_REPORT_START_DATE_P;

  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;

  FUNCTION C_BASE_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_CURRENCY_CODE;
  END C_BASE_CURRENCY_CODE_P;

  FUNCTION C_BASE_PRECISION_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_PRECISION;
  END C_BASE_PRECISION_P;

  FUNCTION C_BASE_MIN_ACCT_UNIT_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_MIN_ACCT_UNIT;
  END C_BASE_MIN_ACCT_UNIT_P;

  FUNCTION C_BASE_DESCRIPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_DESCRIPTION;
  END C_BASE_DESCRIPTION_P;

  FUNCTION C_CHART_OF_ACCOUNTS_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_CHART_OF_ACCOUNTS_ID;
  END C_CHART_OF_ACCOUNTS_ID_P;

  FUNCTION APPLICATIONS_TEMPLATE_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN APPLICATIONS_TEMPLATE_REPORT;
  END APPLICATIONS_TEMPLATE_REPORT_P;

END AP_APXIAWRE_XMLP_PKG;


/
