--------------------------------------------------------
--  DDL for Package Body EGO_ITM_GTN_MUL_ATTRS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."EGO_ITM_GTN_MUL_ATTRS_PKG" as
/* $Header: EGOVGTMB.pls 120.0 2005/10/14 04:10 jcgeorge noship $ */
procedure INSERT_ROW (
  X_ROWID in out nocopy VARCHAR2,
  X_EXTENSION_ID in NUMBER,
  X_REQUEST_ID in NUMBER,
  X_SIZE_CODE_LIST_AGENCY in VARCHAR2,
  X_SIZE_CODE_VALUE in VARCHAR2,
  X_INVENTORY_ITEM_ID in NUMBER,
  X_ORGANIZATION_ID in NUMBER,
  X_BAR_CODE_TYPE in VARCHAR2,
  X_COLOR_CODE_LIST_AGENCY in VARCHAR2,
  X_COLOR_CODE_VALUE in VARCHAR2,
  X_CLASS_OF_DANGEROUS_CODE in VARCHAR2,
  X_DANGEROUS_GOODS_MARGIN_NUMBE in VARCHAR2,
  X_DANGEROUS_GOODS_HAZARDOUS_CO in VARCHAR2,
  X_DANGEROUS_GOODS_PACK_GROUP in VARCHAR2,
  X_DANGEROUS_GOODS_REG_CODE in VARCHAR2,
  X_DANGEROUS_GOODS_SHIPPING_NAM in VARCHAR2,
  X_UNITED_NATIONS_DANG_GOODS_NO in NUMBER,
  X_FLASH_POINT_TEMP in NUMBER,
  X_UOM_FLASH_POINT_TEMP in VARCHAR2,
  X_COUNTRY_OF_ORIGIN in VARCHAR2,
  X_HARMONIZED_TARIFF_SYS_ID_COD in NUMBER,
  X_DELIVERY_METHOD_INDICATOR in VARCHAR2,
  X_ATTR_GROUP_ID in NUMBER,
  X_MANUFACTURER_GLN in VARCHAR2,
  X_MANUFACTURER_ID in NUMBER,
  X_PARTY_RECEIVING_PRIVATE_DATA in VARCHAR2,
  X_ITEM_CATALOG_GROUP_ID in NUMBER,
  X_REVISION_ID in NUMBER,
  X_HANDLING_INSTRUCTIONS_CODE in VARCHAR2,
  X_DANGEROUS_GOODS_TECHNICAL_NA in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from EGO_ITM_GTN_MUL_ATTRS_B
    where EXTENSION_ID = X_EXTENSION_ID
    ;
begin
  insert into EGO_ITM_GTN_MUL_ATTRS_B (
    REQUEST_ID,
    SIZE_CODE_LIST_AGENCY,
    SIZE_CODE_VALUE,
    EXTENSION_ID,
    INVENTORY_ITEM_ID,
    ORGANIZATION_ID,
    BAR_CODE_TYPE,
    COLOR_CODE_LIST_AGENCY,
    COLOR_CODE_VALUE,
    CLASS_OF_DANGEROUS_CODE,
    DANGEROUS_GOODS_MARGIN_NUMBER,
    DANGEROUS_GOODS_HAZARDOUS_CODE,
    DANGEROUS_GOODS_PACK_GROUP,
    DANGEROUS_GOODS_REG_CODE,
    DANGEROUS_GOODS_SHIPPING_NAME,
    UNITED_NATIONS_DANG_GOODS_NO,
    FLASH_POINT_TEMP,
    UOM_FLASH_POINT_TEMP,
    COUNTRY_OF_ORIGIN,
    HARMONIZED_TARIFF_SYS_ID_CODE,
    DELIVERY_METHOD_INDICATOR,
    ATTR_GROUP_ID,
    MANUFACTURER_GLN,
    MANUFACTURER_ID,
    PARTY_RECEIVING_PRIVATE_DATA,
    ITEM_CATALOG_GROUP_ID,
    REVISION_ID,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_REQUEST_ID,
    X_SIZE_CODE_LIST_AGENCY,
    X_SIZE_CODE_VALUE,
    X_EXTENSION_ID,
    X_INVENTORY_ITEM_ID,
    X_ORGANIZATION_ID,
    X_BAR_CODE_TYPE,
    X_COLOR_CODE_LIST_AGENCY,
    X_COLOR_CODE_VALUE,
    X_CLASS_OF_DANGEROUS_CODE,
    X_DANGEROUS_GOODS_MARGIN_NUMBE,
    X_DANGEROUS_GOODS_HAZARDOUS_CO,
    X_DANGEROUS_GOODS_PACK_GROUP,
    X_DANGEROUS_GOODS_REG_CODE,
    X_DANGEROUS_GOODS_SHIPPING_NAM,
    X_UNITED_NATIONS_DANG_GOODS_NO,
    X_FLASH_POINT_TEMP,
    X_UOM_FLASH_POINT_TEMP,
    X_COUNTRY_OF_ORIGIN,
    X_HARMONIZED_TARIFF_SYS_ID_COD,
    X_DELIVERY_METHOD_INDICATOR,
    X_ATTR_GROUP_ID,
    X_MANUFACTURER_GLN,
    X_MANUFACTURER_ID,
    X_PARTY_RECEIVING_PRIVATE_DATA,
    X_ITEM_CATALOG_GROUP_ID,
    X_REVISION_ID,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into EGO_ITM_GTN_MUL_ATTRS_TL (
    REQUEST_ID,
    EXTENSION_ID,
    INVENTORY_ITEM_ID,
    ORGANIZATION_ID,
    ATTR_GROUP_ID,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    ITEM_CATALOG_GROUP_ID,
    REVISION_ID,
    HANDLING_INSTRUCTIONS_CODE,
    DANGEROUS_GOODS_TECHNICAL_NAME,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_REQUEST_ID,
    X_EXTENSION_ID,
    X_INVENTORY_ITEM_ID,
    X_ORGANIZATION_ID,
    X_ATTR_GROUP_ID,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN,
    X_ITEM_CATALOG_GROUP_ID,
    X_REVISION_ID,
    X_HANDLING_INSTRUCTIONS_CODE,
    X_DANGEROUS_GOODS_TECHNICAL_NA,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from EGO_ITM_GTN_MUL_ATTRS_TL T
    where T.EXTENSION_ID = X_EXTENSION_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  X_EXTENSION_ID in NUMBER,
  X_REQUEST_ID in NUMBER,
  X_SIZE_CODE_LIST_AGENCY in VARCHAR2,
  X_SIZE_CODE_VALUE in VARCHAR2,
  X_INVENTORY_ITEM_ID in NUMBER,
  X_ORGANIZATION_ID in NUMBER,
  X_BAR_CODE_TYPE in VARCHAR2,
  X_COLOR_CODE_LIST_AGENCY in VARCHAR2,
  X_COLOR_CODE_VALUE in VARCHAR2,
  X_CLASS_OF_DANGEROUS_CODE in VARCHAR2,
  X_DANGEROUS_GOODS_MARGIN_NUMBE in VARCHAR2,
  X_DANGEROUS_GOODS_HAZARDOUS_CO in VARCHAR2,
  X_DANGEROUS_GOODS_PACK_GROUP in VARCHAR2,
  X_DANGEROUS_GOODS_REG_CODE in VARCHAR2,
  X_DANGEROUS_GOODS_SHIPPING_NAM in VARCHAR2,
  X_UNITED_NATIONS_DANG_GOODS_NO in NUMBER,
  X_FLASH_POINT_TEMP in NUMBER,
  X_UOM_FLASH_POINT_TEMP in VARCHAR2,
  X_COUNTRY_OF_ORIGIN in VARCHAR2,
  X_HARMONIZED_TARIFF_SYS_ID_COD in NUMBER,
  X_DELIVERY_METHOD_INDICATOR in VARCHAR2,
  X_ATTR_GROUP_ID in NUMBER,
  X_MANUFACTURER_GLN in VARCHAR2,
  X_MANUFACTURER_ID in NUMBER,
  X_PARTY_RECEIVING_PRIVATE_DATA in VARCHAR2,
  X_ITEM_CATALOG_GROUP_ID in NUMBER,
  X_REVISION_ID in NUMBER,
  X_HANDLING_INSTRUCTIONS_CODE in VARCHAR2,
  X_DANGEROUS_GOODS_TECHNICAL_NA in VARCHAR2
) is
  cursor c is select
      REQUEST_ID,
      SIZE_CODE_LIST_AGENCY,
      SIZE_CODE_VALUE,
      INVENTORY_ITEM_ID,
      ORGANIZATION_ID,
      BAR_CODE_TYPE,
      COLOR_CODE_LIST_AGENCY,
      COLOR_CODE_VALUE,
      CLASS_OF_DANGEROUS_CODE,
      DANGEROUS_GOODS_MARGIN_NUMBER,
      DANGEROUS_GOODS_HAZARDOUS_CODE,
      DANGEROUS_GOODS_PACK_GROUP,
      DANGEROUS_GOODS_REG_CODE,
      DANGEROUS_GOODS_SHIPPING_NAME,
      UNITED_NATIONS_DANG_GOODS_NO,
      FLASH_POINT_TEMP,
      UOM_FLASH_POINT_TEMP,
      COUNTRY_OF_ORIGIN,
      HARMONIZED_TARIFF_SYS_ID_CODE,
      DELIVERY_METHOD_INDICATOR,
      ATTR_GROUP_ID,
      MANUFACTURER_GLN,
      MANUFACTURER_ID,
      PARTY_RECEIVING_PRIVATE_DATA,
      ITEM_CATALOG_GROUP_ID,
      REVISION_ID
    from EGO_ITM_GTN_MUL_ATTRS_B
    where EXTENSION_ID = X_EXTENSION_ID
    for update of EXTENSION_ID nowait;
  recinfo c%rowtype;

  cursor c1 is select
      HANDLING_INSTRUCTIONS_CODE,
      DANGEROUS_GOODS_TECHNICAL_NAME,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from EGO_ITM_GTN_MUL_ATTRS_TL
    where EXTENSION_ID = X_EXTENSION_ID
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    for update of EXTENSION_ID nowait;
begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (    ((recinfo.REQUEST_ID = X_REQUEST_ID)
           OR ((recinfo.REQUEST_ID is null) AND (X_REQUEST_ID is null)))
      AND ((recinfo.SIZE_CODE_LIST_AGENCY = X_SIZE_CODE_LIST_AGENCY)
           OR ((recinfo.SIZE_CODE_LIST_AGENCY is null) AND (X_SIZE_CODE_LIST_AGENCY is null)))
      AND ((recinfo.SIZE_CODE_VALUE = X_SIZE_CODE_VALUE)
           OR ((recinfo.SIZE_CODE_VALUE is null) AND (X_SIZE_CODE_VALUE is null)))
      AND (recinfo.INVENTORY_ITEM_ID = X_INVENTORY_ITEM_ID)
      AND (recinfo.ORGANIZATION_ID = X_ORGANIZATION_ID)
      AND ((recinfo.BAR_CODE_TYPE = X_BAR_CODE_TYPE)
           OR ((recinfo.BAR_CODE_TYPE is null) AND (X_BAR_CODE_TYPE is null)))
      AND ((recinfo.COLOR_CODE_LIST_AGENCY = X_COLOR_CODE_LIST_AGENCY)
           OR ((recinfo.COLOR_CODE_LIST_AGENCY is null) AND (X_COLOR_CODE_LIST_AGENCY is null)))
      AND ((recinfo.COLOR_CODE_VALUE = X_COLOR_CODE_VALUE)
           OR ((recinfo.COLOR_CODE_VALUE is null) AND (X_COLOR_CODE_VALUE is null)))
      AND ((recinfo.CLASS_OF_DANGEROUS_CODE = X_CLASS_OF_DANGEROUS_CODE)
           OR ((recinfo.CLASS_OF_DANGEROUS_CODE is null) AND (X_CLASS_OF_DANGEROUS_CODE is null)))
      AND ((recinfo.DANGEROUS_GOODS_MARGIN_NUMBER = X_DANGEROUS_GOODS_MARGIN_NUMBE)
           OR ((recinfo.DANGEROUS_GOODS_MARGIN_NUMBER is null) AND (X_DANGEROUS_GOODS_MARGIN_NUMBE is null)))
      AND ((recinfo.DANGEROUS_GOODS_HAZARDOUS_CODE = X_DANGEROUS_GOODS_HAZARDOUS_CO)
           OR ((recinfo.DANGEROUS_GOODS_HAZARDOUS_CODE is null) AND (X_DANGEROUS_GOODS_HAZARDOUS_CO is null)))
      AND ((recinfo.DANGEROUS_GOODS_PACK_GROUP = X_DANGEROUS_GOODS_PACK_GROUP)
           OR ((recinfo.DANGEROUS_GOODS_PACK_GROUP is null) AND (X_DANGEROUS_GOODS_PACK_GROUP is null)))
      AND ((recinfo.DANGEROUS_GOODS_REG_CODE = X_DANGEROUS_GOODS_REG_CODE)
           OR ((recinfo.DANGEROUS_GOODS_REG_CODE is null) AND (X_DANGEROUS_GOODS_REG_CODE is null)))
      AND ((recinfo.DANGEROUS_GOODS_SHIPPING_NAME = X_DANGEROUS_GOODS_SHIPPING_NAM)
           OR ((recinfo.DANGEROUS_GOODS_SHIPPING_NAME is null) AND (X_DANGEROUS_GOODS_SHIPPING_NAM is null)))
      AND ((recinfo.UNITED_NATIONS_DANG_GOODS_NO = X_UNITED_NATIONS_DANG_GOODS_NO)
           OR ((recinfo.UNITED_NATIONS_DANG_GOODS_NO is null) AND (X_UNITED_NATIONS_DANG_GOODS_NO is null)))
      AND ((recinfo.FLASH_POINT_TEMP = X_FLASH_POINT_TEMP)
           OR ((recinfo.FLASH_POINT_TEMP is null) AND (X_FLASH_POINT_TEMP is null)))
      AND ((recinfo.UOM_FLASH_POINT_TEMP = X_UOM_FLASH_POINT_TEMP)
           OR ((recinfo.UOM_FLASH_POINT_TEMP is null) AND (X_UOM_FLASH_POINT_TEMP is null)))
      AND ((recinfo.COUNTRY_OF_ORIGIN = X_COUNTRY_OF_ORIGIN)
           OR ((recinfo.COUNTRY_OF_ORIGIN is null) AND (X_COUNTRY_OF_ORIGIN is null)))
      AND ((recinfo.HARMONIZED_TARIFF_SYS_ID_CODE = X_HARMONIZED_TARIFF_SYS_ID_COD)
           OR ((recinfo.HARMONIZED_TARIFF_SYS_ID_CODE is null) AND (X_HARMONIZED_TARIFF_SYS_ID_COD is null)))
      AND ((recinfo.DELIVERY_METHOD_INDICATOR = X_DELIVERY_METHOD_INDICATOR)
           OR ((recinfo.DELIVERY_METHOD_INDICATOR is null) AND (X_DELIVERY_METHOD_INDICATOR is null)))
      AND ((recinfo.ATTR_GROUP_ID = X_ATTR_GROUP_ID)
           OR ((recinfo.ATTR_GROUP_ID is null) AND (X_ATTR_GROUP_ID is null)))
      AND ((recinfo.MANUFACTURER_GLN = X_MANUFACTURER_GLN)
           OR ((recinfo.MANUFACTURER_GLN is null) AND (X_MANUFACTURER_GLN is null)))
      AND ((recinfo.MANUFACTURER_ID = X_MANUFACTURER_ID)
           OR ((recinfo.MANUFACTURER_ID is null) AND (X_MANUFACTURER_ID is null)))
      AND ((recinfo.PARTY_RECEIVING_PRIVATE_DATA = X_PARTY_RECEIVING_PRIVATE_DATA)
           OR ((recinfo.PARTY_RECEIVING_PRIVATE_DATA is null) AND (X_PARTY_RECEIVING_PRIVATE_DATA is null)))
      AND ((recinfo.ITEM_CATALOG_GROUP_ID = X_ITEM_CATALOG_GROUP_ID)
           OR ((recinfo.ITEM_CATALOG_GROUP_ID is null) AND (X_ITEM_CATALOG_GROUP_ID is null)))
      AND ((recinfo.REVISION_ID = X_REVISION_ID)
           OR ((recinfo.REVISION_ID is null) AND (X_REVISION_ID is null)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    ((tlinfo.HANDLING_INSTRUCTIONS_CODE = X_HANDLING_INSTRUCTIONS_CODE)
               OR ((tlinfo.HANDLING_INSTRUCTIONS_CODE is null) AND (X_HANDLING_INSTRUCTIONS_CODE is null)))
          AND ((tlinfo.DANGEROUS_GOODS_TECHNICAL_NAME = X_DANGEROUS_GOODS_TECHNICAL_NA)
               OR ((tlinfo.DANGEROUS_GOODS_TECHNICAL_NAME is null) AND (X_DANGEROUS_GOODS_TECHNICAL_NA is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_EXTENSION_ID in NUMBER,
  X_REQUEST_ID in NUMBER,
  X_SIZE_CODE_LIST_AGENCY in VARCHAR2,
  X_SIZE_CODE_VALUE in VARCHAR2,
  X_INVENTORY_ITEM_ID in NUMBER,
  X_ORGANIZATION_ID in NUMBER,
  X_BAR_CODE_TYPE in VARCHAR2,
  X_COLOR_CODE_LIST_AGENCY in VARCHAR2,
  X_COLOR_CODE_VALUE in VARCHAR2,
  X_CLASS_OF_DANGEROUS_CODE in VARCHAR2,
  X_DANGEROUS_GOODS_MARGIN_NUMBE in VARCHAR2,
  X_DANGEROUS_GOODS_HAZARDOUS_CO in VARCHAR2,
  X_DANGEROUS_GOODS_PACK_GROUP in VARCHAR2,
  X_DANGEROUS_GOODS_REG_CODE in VARCHAR2,
  X_DANGEROUS_GOODS_SHIPPING_NAM in VARCHAR2,
  X_UNITED_NATIONS_DANG_GOODS_NO in NUMBER,
  X_FLASH_POINT_TEMP in NUMBER,
  X_UOM_FLASH_POINT_TEMP in VARCHAR2,
  X_COUNTRY_OF_ORIGIN in VARCHAR2,
  X_HARMONIZED_TARIFF_SYS_ID_COD in NUMBER,
  X_DELIVERY_METHOD_INDICATOR in VARCHAR2,
  X_ATTR_GROUP_ID in NUMBER,
  X_MANUFACTURER_GLN in VARCHAR2,
  X_MANUFACTURER_ID in NUMBER,
  X_PARTY_RECEIVING_PRIVATE_DATA in VARCHAR2,
  X_ITEM_CATALOG_GROUP_ID in NUMBER,
  X_REVISION_ID in NUMBER,
  X_HANDLING_INSTRUCTIONS_CODE in VARCHAR2,
  X_DANGEROUS_GOODS_TECHNICAL_NA in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update EGO_ITM_GTN_MUL_ATTRS_B set
    REQUEST_ID = X_REQUEST_ID,
    SIZE_CODE_LIST_AGENCY = X_SIZE_CODE_LIST_AGENCY,
    SIZE_CODE_VALUE = X_SIZE_CODE_VALUE,
    INVENTORY_ITEM_ID = X_INVENTORY_ITEM_ID,
    ORGANIZATION_ID = X_ORGANIZATION_ID,
    BAR_CODE_TYPE = X_BAR_CODE_TYPE,
    COLOR_CODE_LIST_AGENCY = X_COLOR_CODE_LIST_AGENCY,
    COLOR_CODE_VALUE = X_COLOR_CODE_VALUE,
    CLASS_OF_DANGEROUS_CODE = X_CLASS_OF_DANGEROUS_CODE,
    DANGEROUS_GOODS_MARGIN_NUMBER = X_DANGEROUS_GOODS_MARGIN_NUMBE,
    DANGEROUS_GOODS_HAZARDOUS_CODE = X_DANGEROUS_GOODS_HAZARDOUS_CO,
    DANGEROUS_GOODS_PACK_GROUP = X_DANGEROUS_GOODS_PACK_GROUP,
    DANGEROUS_GOODS_REG_CODE = X_DANGEROUS_GOODS_REG_CODE,
    DANGEROUS_GOODS_SHIPPING_NAME = X_DANGEROUS_GOODS_SHIPPING_NAM,
    UNITED_NATIONS_DANG_GOODS_NO = X_UNITED_NATIONS_DANG_GOODS_NO,
    FLASH_POINT_TEMP = X_FLASH_POINT_TEMP,
    UOM_FLASH_POINT_TEMP = X_UOM_FLASH_POINT_TEMP,
    COUNTRY_OF_ORIGIN = X_COUNTRY_OF_ORIGIN,
    HARMONIZED_TARIFF_SYS_ID_CODE = X_HARMONIZED_TARIFF_SYS_ID_COD,
    DELIVERY_METHOD_INDICATOR = X_DELIVERY_METHOD_INDICATOR,
    ATTR_GROUP_ID = X_ATTR_GROUP_ID,
    MANUFACTURER_GLN = X_MANUFACTURER_GLN,
    MANUFACTURER_ID = X_MANUFACTURER_ID,
    PARTY_RECEIVING_PRIVATE_DATA = X_PARTY_RECEIVING_PRIVATE_DATA,
    ITEM_CATALOG_GROUP_ID = X_ITEM_CATALOG_GROUP_ID,
    REVISION_ID = X_REVISION_ID,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where EXTENSION_ID = X_EXTENSION_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update EGO_ITM_GTN_MUL_ATTRS_TL set
    HANDLING_INSTRUCTIONS_CODE = X_HANDLING_INSTRUCTIONS_CODE,
    DANGEROUS_GOODS_TECHNICAL_NAME = X_DANGEROUS_GOODS_TECHNICAL_NA,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where EXTENSION_ID = X_EXTENSION_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_EXTENSION_ID in NUMBER
) is
begin
  delete from EGO_ITM_GTN_MUL_ATTRS_TL
  where EXTENSION_ID = X_EXTENSION_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from EGO_ITM_GTN_MUL_ATTRS_B
  where EXTENSION_ID = X_EXTENSION_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
  delete from EGO_ITM_GTN_MUL_ATTRS_TL T
  where not exists
    (select NULL
    from EGO_ITM_GTN_MUL_ATTRS_B B
    where B.EXTENSION_ID = T.EXTENSION_ID
    );

  update EGO_ITM_GTN_MUL_ATTRS_TL T set (
      HANDLING_INSTRUCTIONS_CODE,
      DANGEROUS_GOODS_TECHNICAL_NAME
    ) = (select
      B.HANDLING_INSTRUCTIONS_CODE,
      B.DANGEROUS_GOODS_TECHNICAL_NAME
    from EGO_ITM_GTN_MUL_ATTRS_TL B
    where B.EXTENSION_ID = T.EXTENSION_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.EXTENSION_ID,
      T.LANGUAGE
  ) in (select
      SUBT.EXTENSION_ID,
      SUBT.LANGUAGE
    from EGO_ITM_GTN_MUL_ATTRS_TL SUBB, EGO_ITM_GTN_MUL_ATTRS_TL SUBT
    where SUBB.EXTENSION_ID = SUBT.EXTENSION_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.HANDLING_INSTRUCTIONS_CODE <> SUBT.HANDLING_INSTRUCTIONS_CODE
      or (SUBB.HANDLING_INSTRUCTIONS_CODE is null and SUBT.HANDLING_INSTRUCTIONS_CODE is not null)
      or (SUBB.HANDLING_INSTRUCTIONS_CODE is not null and SUBT.HANDLING_INSTRUCTIONS_CODE is null)
      or SUBB.DANGEROUS_GOODS_TECHNICAL_NAME <> SUBT.DANGEROUS_GOODS_TECHNICAL_NAME
      or (SUBB.DANGEROUS_GOODS_TECHNICAL_NAME is null and SUBT.DANGEROUS_GOODS_TECHNICAL_NAME is not null)
      or (SUBB.DANGEROUS_GOODS_TECHNICAL_NAME is not null and SUBT.DANGEROUS_GOODS_TECHNICAL_NAME is null)
  ));

  insert into EGO_ITM_GTN_MUL_ATTRS_TL (
    REQUEST_ID,
    EXTENSION_ID,
    INVENTORY_ITEM_ID,
    ORGANIZATION_ID,
    ATTR_GROUP_ID,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    ITEM_CATALOG_GROUP_ID,
    REVISION_ID,
    HANDLING_INSTRUCTIONS_CODE,
    DANGEROUS_GOODS_TECHNICAL_NAME,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.REQUEST_ID,
    B.EXTENSION_ID,
    B.INVENTORY_ITEM_ID,
    B.ORGANIZATION_ID,
    B.ATTR_GROUP_ID,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    B.ITEM_CATALOG_GROUP_ID,
    B.REVISION_ID,
    B.HANDLING_INSTRUCTIONS_CODE,
    B.DANGEROUS_GOODS_TECHNICAL_NAME,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from EGO_ITM_GTN_MUL_ATTRS_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from EGO_ITM_GTN_MUL_ATTRS_TL T
    where T.EXTENSION_ID = B.EXTENSION_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

end EGO_ITM_GTN_MUL_ATTRS_PKG;

/
