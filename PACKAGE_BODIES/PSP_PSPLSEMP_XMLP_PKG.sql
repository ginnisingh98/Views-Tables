--------------------------------------------------------
--  DDL for Package Body PSP_PSPLSEMP_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PSP_PSPLSEMP_XMLP_PKG" AS
/* $Header: PSPLSEMPB.pls 120.3 2007/10/29 07:24:56 amakrish noship $ */
  FUNCTION CF_ORGANIZATION_NAMEFORMULA(ORGANIZATION_ID_V IN NUMBER) RETURN CHAR IS
    CURSOR ORG_NAME_CUR IS
      SELECT
        NAME
      FROM
        HR_ORGANIZATION_UNITS
      WHERE ORGANIZATION_ID = ORGANIZATION_ID_V;
    L_ORG_NAME HR_ALL_ORGANIZATION_UNITS_TL.NAME%TYPE;
  BEGIN
    OPEN ORG_NAME_CUR;
    FETCH ORG_NAME_CUR
     INTO L_ORG_NAME;
    CLOSE ORG_NAME_CUR;
    IF (L_ORG_NAME IS NULL) THEN
      L_ORG_NAME := 'INVALID ORGANIZATION NAME';
    END IF;
    RETURN L_ORG_NAME;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'Invalid Organization Name';
  END CF_ORGANIZATION_NAMEFORMULA;

  FUNCTION CF_EMPLOYEE_NAMEFORMULA(PERSON_ID_V IN NUMBER) RETURN CHAR IS
    CURSOR EMP_NAME_CUR IS
      SELECT
        FULL_NAME
      FROM
        PER_PEOPLE_F PPF1
      WHERE PPF1.PERSON_ID = PERSON_ID_V
        AND PPF1.CURRENT_EMPLOYEE_FLAG = 'Y'
        AND ( TRUNC(SYSDATE) BETWEEN EFFECTIVE_START_DATE
        AND EFFECTIVE_END_DATE
      OR TRUNC(SYSDATE) < (
        SELECT
          MIN(PPF2.EFFECTIVE_START_DATE)
        FROM
          PER_PEOPLE_F PPF2
        WHERE PPF2.PERSON_ID = PPF1.PERSON_ID
          AND PPF2.CURRENT_EMPLOYEE_FLAG = 'Y' ) );
    L_EMP_NAME VARCHAR2(240);
  BEGIN
    OPEN EMP_NAME_CUR;
    FETCH EMP_NAME_CUR
     INTO L_EMP_NAME;
    CLOSE EMP_NAME_CUR;
    IF (L_EMP_NAME IS NULL) THEN
      L_EMP_NAME := 'INVALID EMPLOYEE NAME';
    END IF;
    RETURN L_EMP_NAME;
  END CF_EMPLOYEE_NAMEFORMULA;

  FUNCTION CF_GL_DESCRIPTIONFORMULA(GL_CODE_COMBINATION_ID IN NUMBER) RETURN CHAR IS
    V_GL_DESCRIPTION VARCHAR2(1000);
    V_SET_OF_BOOKS_ID NUMBER := PSP_GENERAL.GET_SPECIFIC_PROFILE('GL_SET_OF_BKS_ID');
  BEGIN
    IF (GL_CODE_COMBINATION_ID IS NOT NULL) THEN
      V_GL_DESCRIPTION := PSP_GENERAL.GET_GL_VALUES(V_SET_OF_BOOKS_ID
                                                   ,GL_CODE_COMBINATION_ID);
      RETURN V_GL_DESCRIPTION;
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'Invalid GL Code Combination';
  END CF_GL_DESCRIPTIONFORMULA;

  FUNCTION CF_PROJECT_NUMBERFORMULA(PROJECT_ID_V IN NUMBER) RETURN CHAR IS
    CURSOR PROJECT_NUMBER_CUR IS
      SELECT
        SEGMENT1
      FROM
        PA_PROJECTS_ALL
      WHERE PROJECT_ID = PROJECT_ID_V;
    L_PROJECT_NUMBER VARCHAR2(30);
  BEGIN
    IF (PROJECT_ID_V IS NOT NULL) THEN
      OPEN PROJECT_NUMBER_CUR;
      FETCH PROJECT_NUMBER_CUR
       INTO L_PROJECT_NUMBER;
      CLOSE PROJECT_NUMBER_CUR;
      RETURN L_PROJECT_NUMBER;
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'Invalid Project Number';
  END CF_PROJECT_NUMBERFORMULA;

  FUNCTION CF_TASK_NUMBERFORMULA(TASK_ID_V IN NUMBER) RETURN CHAR IS
    CURSOR TASK_NUMBER_CUR IS
      SELECT
        TASK_NUMBER
      FROM
        PA_TASKS
      WHERE TASK_ID = TASK_ID_V;
    L_TASK_NUMBER VARCHAR2(30);
  BEGIN
    IF (TASK_ID_V IS NOT NULL) THEN
      OPEN TASK_NUMBER_CUR;
      FETCH TASK_NUMBER_CUR
       INTO L_TASK_NUMBER;
      CLOSE TASK_NUMBER_CUR;
      RETURN L_TASK_NUMBER;
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'Invalid Task Number';
  END CF_TASK_NUMBERFORMULA;

  FUNCTION CF_AWARD_NUMBERFORMULA(AWARD_ID_V IN NUMBER) RETURN CHAR IS
    CURSOR AWARD_NUMBER_CUR IS
      SELECT
        AWARD_NUMBER
      FROM
        GMS_AWARDS_ALL
      WHERE AWARD_ID = AWARD_ID_V;
    L_AWARD_NUMBER VARCHAR2(30);
  BEGIN
    IF (AWARD_ID_V IS NOT NULL) THEN
      OPEN AWARD_NUMBER_CUR;
      FETCH AWARD_NUMBER_CUR
       INTO L_AWARD_NUMBER;
      CLOSE AWARD_NUMBER_CUR;
      IF L_AWARD_NUMBER IS NULL THEN
        BEGIN
          SELECT
            DEFAULT_DIST_AWARD_NUMBER
          INTO L_AWARD_NUMBER
          FROM
            GMS_IMPLEMENTATIONS
          WHERE DEFAULT_DIST_AWARD_ID = AWARD_ID_V
            AND AWARD_DISTRIBUTION_OPTION = 'Y';
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            NULL;
        END;
      END IF;
      RETURN L_AWARD_NUMBER;
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'Invalid Award Number';
  END CF_AWARD_NUMBERFORMULA;

  FUNCTION CF_EXP_ORG_NAMEFORMULA(EXPENDITURE_ORGANIZATION_ID IN NUMBER) RETURN CHAR IS
    CURSOR EXP_ORG_NAME_CUR IS
      SELECT
        NAME
      FROM
        HR_ORGANIZATION_UNITS
      WHERE ORGANIZATION_ID = EXPENDITURE_ORGANIZATION_ID;
    L_EXP_ORG_NAME HR_ALL_ORGANIZATION_UNITS_TL.NAME%TYPE;
  BEGIN
    IF (EXPENDITURE_ORGANIZATION_ID IS NOT NULL) THEN
      OPEN EXP_ORG_NAME_CUR;
      FETCH EXP_ORG_NAME_CUR
       INTO L_EXP_ORG_NAME;
      CLOSE EXP_ORG_NAME_CUR;
      RETURN L_EXP_ORG_NAME;
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'Invalid Expenditure Organization Name';
  END CF_EXP_ORG_NAMEFORMULA;

  FUNCTION CF_DESCRIPTIONFORMULA(TYPE IN NUMBER
                                ,SCHEDULING_TYPES_CODE IN VARCHAR2) RETURN CHAR IS
    CURSOR ASSIGNMENT_NUMBER_CUR IS
      SELECT
        ASSIGNMENT_NUMBER
      FROM
        PER_ASSIGNMENTS_F PAF
      WHERE PAF.ASSIGNMENT_ID = TYPE
        AND PAF.ASSIGNMENT_TYPE = 'E'
        AND ROWNUM = 1;
    CURSOR ELEMENT_GROUP_CUR IS
      SELECT
        ELEMENT_GROUP_NAME
      FROM
        PSP_ELEMENT_GROUPS PEG
      WHERE PEG.ELEMENT_GROUP_ID = TYPE
        AND ROWNUM = 1;
    CURSOR ELEMENT_TYPE_CUR IS
      SELECT
        ELEMENT_NAME
      FROM
        PAY_ELEMENT_TYPES_F PET
      WHERE PET.ELEMENT_TYPE_ID = TYPE
        AND ROWNUM = 1;
    L_HIER_DESC VARCHAR2(100);
  BEGIN
    IF (SCHEDULING_TYPES_CODE = 'A') THEN
      OPEN ASSIGNMENT_NUMBER_CUR;
      FETCH ASSIGNMENT_NUMBER_CUR
       INTO L_HIER_DESC;
      CLOSE ASSIGNMENT_NUMBER_CUR;
    ELSIF (SCHEDULING_TYPES_CODE = 'EG') THEN
      OPEN ELEMENT_GROUP_CUR;
      FETCH ELEMENT_GROUP_CUR
       INTO L_HIER_DESC;
      CLOSE ELEMENT_GROUP_CUR;
    ELSIF (SCHEDULING_TYPES_CODE = 'ET') THEN
      OPEN ELEMENT_TYPE_CUR;
      FETCH ELEMENT_TYPE_CUR
       INTO L_HIER_DESC;
      CLOSE ELEMENT_TYPE_CUR;
    END IF;
    RETURN L_HIER_DESC;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END CF_DESCRIPTIONFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
   -- HR_STANDARD.EVENT('AFTER REPORT');
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END AFTERREPORT;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_RETCODE NUMBER;
    L_ORGANIZATION_ID VARCHAR2(4000);
    CURSOR C_ORG_COUNT IS
      SELECT
        COUNT(1)
      FROM
        PSP_REPORT_TEMPLATE_DETAILS
      WHERE TEMPLATE_ID = P_ORG_TEMPLATE_ID
        AND CRITERIA_LOOKUP_TYPE = 'PSP_SELECTION_CRITERIA'
        AND CRITERIA_LOOKUP_CODE = 'ORG';
    CURSOR C_ORG_CURSOR IS
      SELECT
        CRITERIA_VALUE1
      FROM
        PSP_REPORT_TEMPLATE_DETAILS
      WHERE TEMPLATE_ID = P_ORG_TEMPLATE_ID
        AND CRITERIA_LOOKUP_TYPE = 'PSP_SELECTION_CRITERIA'
        AND CRITERIA_LOOKUP_CODE = 'ORG';
    L_NUM NUMBER;
  BEGIN
   -- HR_STANDARD.EVENT('BEFORE REPORT');
    IF P_ORG_TEMPLATE_ID IS NULL THEN
      L_ORGANIZATION_ID := NULL;
    ELSE
      OPEN C_ORG_COUNT;
      FETCH C_ORG_COUNT
       INTO L_NUM;
      CLOSE C_ORG_COUNT;
      IF L_NUM <> 0 THEN
        FOR l_org_rec IN C_ORG_CURSOR LOOP
          IF ((L_NUM - C_ORG_CURSOR%ROWCOUNT) = 0) THEN
            L_ORGANIZATION_ID := L_ORGANIZATION_ID || L_ORG_REC.CRITERIA_VALUE1;
          ELSE
            L_ORGANIZATION_ID := L_ORGANIZATION_ID || L_ORG_REC.CRITERIA_VALUE1 || ',';
          END IF;
        END LOOP;
      ELSE
        L_ORGANIZATION_ID := NULL;
      END IF;
    END IF;
    PSP_MATRIX_DRIVER_PKG.LOAD_ORGANIZATIONS(RETCODE => L_RETCODE
                                            ,P_ORGANIZATION_ID => L_ORGANIZATION_ID
                                            ,P_PERIOD_FROM => P_BEGIN_DATE
                                            ,P_PERIOD_TO => P_END_DATE
                                            ,P_REPORT_TYPE => P_REPORT_TYPE
                                            ,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
                                            ,P_SET_OF_BOOKS_ID => P_SET_OF_BOOKS_ID);
    IF (L_RETCODE <> 0) THEN
      RETURN (FALSE);
    END IF;
    P_RUN_ID := NVL(PSP_MATRIX_DRIVER_PKG.GET_RUN_ID
                   ,0);
    IF (P_RUN_ID = 0) THEN
      RETURN (FALSE);
    END IF;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_HIER_DESCFORMULA(SCHEDULING_TYPES_CODE IN VARCHAR2
                              ,CF_DESCRIPTION IN VARCHAR2) RETURN CHAR IS
  BEGIN
    RETURN SCHEDULING_TYPES_CODE || '-' || CF_DESCRIPTION;
  END CF_HIER_DESCFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    CURSOR C1(P_LOOKUP_CODE IN VARCHAR2,L_TEMPLATE_ID IN NUMBER) IS
      SELECT
        COUNT(1)
      FROM
        PSP_REPORT_TEMPLATE_DETAILS
      WHERE TEMPLATE_ID = L_TEMPLATE_ID
        AND CRITERIA_LOOKUP_TYPE = 'PSP_SELECTION_CRITERIA'
        AND CRITERIA_LOOKUP_CODE = P_LOOKUP_CODE;
    L_NUM NUMBER;
  BEGIN
    IF P_ORG_TEMPLATE_ID IS NULL THEN
      P_ORGANIZATION_ID := '  1 = 1 ';
    ELSE
      OPEN C1('ORG',P_ORG_TEMPLATE_ID);
      FETCH C1
       INTO L_NUM;
      CLOSE C1;
      IF L_NUM <> 0 THEN
        P_ORGANIZATION_ID := '  hou.organization_id  IN (select criteria_value1 from psp_report_template_details
                                    where template_id = ' || P_ORG_TEMPLATE_ID || '
                                    and   criteria_lookup_type = ''PSP_SELECTION_CRITERIA''
                                    and   criteria_lookup_code = ''ORG'' ' || ' ) ';
      ELSE
        P_ORGANIZATION_ID := '  1 = 1 ';
      END IF;
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CF_DATE_FORMATFORMULA RETURN CHAR IS
  BEGIN
    RETURN (FND_PROFILE.VALUE('ICX_DATE_FORMAT_MASK'));
  END CF_DATE_FORMATFORMULA;

  FUNCTION CF_REPORT_RUN_DATEFORMULA(CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(SYSDATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(SYSDATE
                  ,CF_DATE_FORMAT));
  END CF_REPORT_RUN_DATEFORMULA;

  FUNCTION CF_SCH_BEGIN_DATE_DISPFORMULA(SCHEDULE_BEGIN_DATE IN DATE
                                        ,CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(SCHEDULE_BEGIN_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(SCHEDULE_BEGIN_DATE
                  ,CF_DATE_FORMAT));
  END CF_SCH_BEGIN_DATE_DISPFORMULA;

  FUNCTION CF_SCH_END_DATE_DSPFORMULA(SCHEDULE_END_DATE IN DATE
                                     ,CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(SCHEDULE_END_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(SCHEDULE_END_DATE
                  ,CF_DATE_FORMAT));
  END CF_SCH_END_DATE_DSPFORMULA;

  FUNCTION CF_PERIOD_START_DATE_DISPFORMU(PERIOD_START_DATE IN DATE
                                         ,CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(PERIOD_START_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(PERIOD_START_DATE
                  ,CF_DATE_FORMAT));
  END CF_PERIOD_START_DATE_DISPFORMU;

  FUNCTION CF_PERIOD_END_DATE_DISPFORMULA(PERIOD_END_DATE IN DATE
                                         ,CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(PERIOD_END_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(PERIOD_END_DATE
                  ,CF_DATE_FORMAT));
  END CF_PERIOD_END_DATE_DISPFORMULA;

  FUNCTION CF_BEGIN_DATE_DISPFORMULA(CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(P_BEGIN_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(P_BEGIN_DATE
                  ,CF_DATE_FORMAT));
  END CF_BEGIN_DATE_DISPFORMULA;

  FUNCTION CF_END_DATE_DISPFORMULA(CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(P_END_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(P_END_DATE
                  ,CF_DATE_FORMAT));
  END CF_END_DATE_DISPFORMULA;

END PSP_PSPLSEMP_XMLP_PKG;

/
