--------------------------------------------------------
--  DDL for Package Body JTY_ASSIGN_REALTIME_PUB
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JTY_ASSIGN_REALTIME_PUB" AS
/* $Header: jtftraeb.pls 120.12.12010000.6 2009/04/21 12:10:40 ppillai ship $ */
---------------------------------------------------------------------
--    Start of Comments
--    ---------------------------------------------------
--    PACKAGE NAME:   JTY_ASSIGN_REALTIME_PUB
--    ---------------------------------------------------
--    PURPOSE
--      This package is a public API for getting winning territories
--      or territory resources in real time.
--
--      Procedures:
--         (see below for specification)
--
--    NOTES
--      This package is publicly available for use
--
--    HISTORY
--      05/04/2005  achanda       CREATED
--    End of Comments

-- ***************************************************
--    GLOBAL VARIABLES and RECORD TYPE DEFINITIONS
-- ***************************************************

  G_PKG_NAME      CONSTANT VARCHAR2(30):='JTY_ASSIGN_REALTIME_PUB';

--    ***************************************************
--    API Body Definitions
--    ***************************************************

/* this procedure find out the territories that are   */
/* matching the attributes of the transaction objects */
PROCEDURE process_match
(   p_source_id                IN          NUMBER,
    p_trans_id                 IN          NUMBER,
    p_mode                     IN          VARCHAR2,
    p_program_name             IN          VARCHAR2,
    x_return_status            OUT NOCOPY  VARCHAR2,
    x_msg_count                OUT NOCOPY  NUMBER,
    x_msg_data                 OUT NOCOPY  VARCHAR2
) AS

  NO_TERR_ERROR       EXCEPTION;
  NO_MATCH_SQL_ERROR  EXCEPTION;

  l_num_terr             NUMBER;
  l_match_no_of_records  NUMBER;
  l_matching_sql         VARCHAR2(32767);
  l_sysdate              DATE;

BEGIN

  -- debug message
  IF (FND_LOG.LEVEL_PROCEDURE >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    FND_LOG.string(FND_LOG.LEVEL_PROCEDURE,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.process_match.begin',
                   'Start of the procedure JTY_ASSIGN_REALTIME_PUB.process_match');
  END IF;

  x_return_status := FND_API.G_RET_STS_SUCCESS;
  l_num_terr      := 0;
  l_sysdate       := SYSDATE;

  /* Depending on the mode, get the real time matching sql generated by GTP */
  /* Raise the exception NO_MATCH_SQL_ERROR if matching SQL is not found    */
  BEGIN
    IF (p_mode LIKE 'DATE EFFECTIVE%') THEN
      SELECT tup.real_time_match_dea_sql
      INTO   l_matching_sql
      FROM   jty_trans_usg_pgm_details tup
      WHERE  tup.source_id     = p_source_id
      AND    tup.trans_type_id = p_trans_id
      AND    tup.program_name  = p_program_name;

    ELSIF (p_mode LIKE 'REAL TIME%') THEN
      SELECT tup.real_time_match_sql
      INTO   l_matching_sql
      FROM   jty_trans_usg_pgm_details tup
      WHERE  tup.source_id     = p_source_id
      AND    tup.trans_type_id = p_trans_id
      AND    tup.program_name  = p_program_name;

    END IF;

    IF (l_matching_sql IS NULL) THEN
      RAISE NO_MATCH_SQL_ERROR;
    END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE NO_MATCH_SQL_ERROR;

    WHEN OTHERS THEN
      RAISE;
  END;

  -- debug message
  IF (FND_LOG.LEVEL_STATEMENT >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    FND_LOG.string(FND_LOG.LEVEL_STATEMENT,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.process_match.matching_sql',
                   substr(l_matching_sql, 1, 4000));
  END IF;

  /* Execute the matching SQL, which will insert matching territories     */
  /* corresponding to the transaction objects into jtf_terr_results_gt_mt */
  DELETE jtf_terr_results_gt_mt;
  EXECUTE IMMEDIATE l_matching_sql;

  -- debug message
  IF (FND_LOG.LEVEL_EVENT >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    SELECT COUNT(*)
    INTO   l_match_no_of_records
    FROM   jtf_terr_results_gt_mt;

    FND_LOG.string(FND_LOG.LEVEL_EVENT,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.process_match.match_data',
                   'Number of records inserted into jtf_terr_results_gt_mt table : ' || l_match_no_of_records);
  END IF;

  -- debug message
  IF (FND_LOG.LEVEL_PROCEDURE >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    FND_LOG.string(FND_LOG.LEVEL_PROCEDURE,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.process_match.end',
                   'End of the procedure JTY_ASSIGN_REALTIME_PUB.process_match');
  END IF;

EXCEPTION

  WHEN NO_MATCH_SQL_ERROR THEN
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    x_msg_data := 'No matching SQL exist for this usage, transaction type and program name';
    x_msg_count := 1;
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.process_match.mo_match_sql_error',
                     x_msg_data);
    END IF;

  WHEN NO_TERR_ERROR THEN
    x_return_status := FND_API.G_RET_STS_SUCCESS;
    x_msg_data := 'No active territories exist for this usage and transaction type';
    x_msg_count := 1;
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.process_match.no_terr_error',
                     x_msg_data);
    END IF;

  WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
    x_msg_data := SQLCODE || ' : ' || SQLERRM;
    x_msg_count := 1;
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.process_match.other',
                     substr(x_msg_data, 1, 4000));
    END IF;

End  process_match;

/* this procedure find out the winning territories for */
/* txn types that uses single level winning process    */
PROCEDURE single_level_winning_process
(   p_source_id                IN          NUMBER,
    p_trans_id                 IN          NUMBER,
    p_mode                     IN          VARCHAR2,
    p_role                     IN          VARCHAR2,
    p_resource_type            IN          VARCHAR2,
    p_plan_start_date          IN          DATE DEFAULT NULL,
    p_plan_end_date            IN          DATE DEFAULT NULL,
    x_return_status            OUT NOCOPY  VARCHAR2,
    x_msg_count                OUT NOCOPY  NUMBER,
    x_msg_data                 OUT NOCOPY  VARCHAR2,
    x_winners_rec              OUT NOCOPY  bulk_winners_rec_type
) AS

BEGIN

  -- debug message
  IF (FND_LOG.LEVEL_PROCEDURE >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    FND_LOG.string(FND_LOG.LEVEL_PROCEDURE,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.single_level_winning_process.begin',
                   'Start of the procedure JTY_ASSIGN_REALTIME_PUB.single_level_winning_process');
  END IF;

  x_return_status := FND_API.G_RET_STS_SUCCESS;

  IF (p_mode LIKE '%RESOURCE') THEN
   IF ( p_source_id = -1002 AND p_trans_id IN (-1005,-1009 ) AND
         p_plan_start_date IS NOT NULL AND p_plan_end_date IS NOT NULL ) THEN

    /* -1005 Service Request
       -1009 Service Request and Tasks
       Return the resources which are active between p_plan_start_date and p_plan_end_date.
     */

      SELECT DISTINCT
         WT.trans_object_id
        ,WT.trans_detail_object_id
        ,WT.txn_date
        ,WT.terr_id
        ,jta.org_id
        ,jtr.person_id
        ,jta.start_date_active
        ,jta.end_date_active
        ,jtr.terr_rsc_id
        ,jta.name
        ,null top_level_terr_id
        ,jta.absolute_rank absolute_rank
        ,jtr.resource_id
        ,jtr.start_date_active
        ,jtr.end_date_active
        ,jtr.resource_type
        ,jtr.group_id
        ,inv.role_id
        ,jtr.role
        ,decode(jtra.trans_access_code, 'FULL_ACCESS', 'Y', 'N')
        ,decode(jtra.trans_access_code, 'TEAM_LEADER', 'Y', 'PRIMARY_CONTACT', 'Y', 'ESC_OWNER', 'Y', 'N') --jtr.primary_contact_flag
        ,jta.attribute_category terr_attr_category
        ,jta.attribute1 terr_attribute1
        ,jta.attribute2 terr_attribute2
        ,jta.attribute3 terr_attribute3
        ,jta.attribute4 terr_attribute4
        ,jta.attribute5 terr_attribute5
        ,jta.attribute6 terr_attribute6
        ,jta.attribute7 terr_attribute7
        ,jta.attribute8 terr_attribute8
        ,jta.attribute9 terr_attribute9
        ,jta.attribute10 terr_attribute10
        ,jta.attribute11 terr_attribute11
        ,jta.attribute12 terr_attribute12
        ,jta.attribute13 terr_attribute13
        ,jta.attribute14 terr_attribute14
        ,jta.attribute15 terr_attribute15
        ,jtr.attribute_category rsc_attr_category
        ,jtr.attribute1 rsc_attribute1
        ,jtr.attribute2 rsc_attribute2
        ,jtr.attribute3 rsc_attribute3
        ,jtr.attribute4 rsc_attribute4
        ,jtr.attribute5 rsc_attribute5
        ,jtr.attribute6 rsc_attribute6
        ,jtr.attribute7 rsc_attribute7
        ,jtr.attribute8 rsc_attribute8
        ,jtr.attribute9 rsc_attribute9
        ,jtr.attribute10 rsc_attribute10
        ,jtr.attribute11 rsc_attribute11
        ,jtr.attribute12 rsc_attribute12
        ,jtr.attribute13 rsc_attribute13
        ,jtr.attribute14 rsc_attribute14
        ,jtr.attribute15 rsc_attribute15
      BULK COLLECT INTO
         x_winners_rec.trans_object_id
        ,x_winners_rec.trans_detail_object_id
        ,x_winners_rec.txn_date
        ,x_winners_rec.terr_id
        ,x_winners_rec.org_id
        ,x_winners_rec.person_id
        ,x_winners_rec.terr_start_date
        ,x_winners_rec.terr_end_date
        ,x_winners_rec.terr_rsc_id
        ,x_winners_rec.terr_name
        ,x_winners_rec.top_level_terr_id
        ,x_winners_rec.absolute_rank
        ,x_winners_rec.resource_id
        ,x_winners_rec.rsc_start_date
        ,x_winners_rec.rsc_end_date
        ,x_winners_rec.resource_type
        ,x_winners_rec.group_id
        ,x_winners_rec.role_id
        ,x_winners_rec.role
        ,x_winners_rec.full_access_flag
        ,x_winners_rec.primary_contact_flag
        ,x_winners_rec.terr_attr_category
        ,x_winners_rec.terr_attribute1
        ,x_winners_rec.terr_attribute2
        ,x_winners_rec.terr_attribute3
        ,x_winners_rec.terr_attribute4
        ,x_winners_rec.terr_attribute5
        ,x_winners_rec.terr_attribute6
        ,x_winners_rec.terr_attribute7
        ,x_winners_rec.terr_attribute8
        ,x_winners_rec.terr_attribute9
        ,x_winners_rec.terr_attribute10
        ,x_winners_rec.terr_attribute11
        ,x_winners_rec.terr_attribute12
        ,x_winners_rec.terr_attribute13
        ,x_winners_rec.terr_attribute14
        ,x_winners_rec.terr_attribute15
        ,x_winners_rec.rsc_attr_category
        ,x_winners_rec.rsc_attribute1
        ,x_winners_rec.rsc_attribute2
        ,x_winners_rec.rsc_attribute3
        ,x_winners_rec.rsc_attribute4
        ,x_winners_rec.rsc_attribute5
        ,x_winners_rec.rsc_attribute6
        ,x_winners_rec.rsc_attribute7
        ,x_winners_rec.rsc_attribute8
        ,x_winners_rec.rsc_attribute9
        ,x_winners_rec.rsc_attribute10
        ,x_winners_rec.rsc_attribute11
        ,x_winners_rec.rsc_attribute12
        ,x_winners_rec.rsc_attribute13
        ,x_winners_rec.rsc_attribute14
        ,x_winners_rec.rsc_attribute15
      FROM
        ( SELECT
             o.trans_object_id
            ,o.trans_detail_object_id
            ,o.terr_id
            ,o.txn_date
          FROM
            ( SELECT
                 i.trans_id
                ,i.trans_object_id
                ,i.trans_detail_object_id
                ,i.terr_id
                ,i.top_level_terr_id
                ,i.txn_date
                ,RANK() OVER ( PARTITION BY
                              i.trans_id
                            , i.trans_object_id
                            , i.trans_detail_object_id
                            , i.top_level_terr_id
                          ORDER BY i.absolute_rank DESC, i.terr_id) AS TERR_RANK
              FROM jtf_terr_results_GT_MT i  ) o
          WHERE o.TERR_RANK <= (SELECT NVL(t.num_winners, 1) FROM jtf_terr_all t WHERE t.terr_id = o.top_level_terr_id)
        ) WT
        , jtf_terr_all jta
        , jtf_terr_rsc_all jtr
        , jtf_terr_rsc_access_all jtra
        , jtf_qual_types_all jqta
        , jtf_rs_roles_b inv
      WHERE  WT.terr_id = jta.terr_id
      AND    WT.terr_id = jtr.terr_id
      AND  ( (TRUNC(jtr.start_date_active) BETWEEN  trunc(p_plan_start_date) AND trunc(p_plan_end_date) ) OR
             ( TRUNC(jtr.end_date_active)   BETWEEN  trunc(p_plan_start_date) AND trunc(p_plan_end_date) )  OR
             ( TRUNC(jtr.start_date_active) <= trunc(p_plan_start_date) AND TRUNC(jtr.end_date_active) >= trunc(p_plan_end_date) )
           )
      AND jtr.resource_type <> 'RS_ROLE'
      AND jtr.terr_rsc_id = jtra.terr_rsc_id
      AND jtra.access_type = jqta.name
      AND jtra.trans_access_code NOT IN ('NONE', 'ESC_OWNER', 'ESCALATION')
      AND (( p_role IS NULL ) OR ( jtr.role = p_role ))
      AND jtr.role = inv.role_code(+)
      AND (( p_resource_type IS NULL) OR ( jtr.resource_type = p_resource_type ))
      AND jqta.qual_type_id = p_trans_id
      ORDER BY WT.trans_object_id, jta.org_id, WT.terr_id, jtr.resource_id;

    ELSE -- ( p_source_id <> -1002 AND p_trans_id NOT IN (-1005,-1009 )

    SELECT DISTINCT
       WT.trans_object_id
      ,WT.trans_detail_object_id
      ,WT.txn_date
      ,WT.terr_id
      ,jta.org_id
      ,jtr.person_id
      ,jta.start_date_active
      ,jta.end_date_active
      ,jtr.terr_rsc_id
      ,jta.name
      ,null top_level_terr_id
      ,jta.absolute_rank absolute_rank
      ,jtr.resource_id
      ,jtr.start_date_active
      ,jtr.end_date_active
      ,jtr.resource_type
      ,jtr.group_id
      ,inv.role_id
      ,jtr.role
      ,decode(jtra.trans_access_code, 'FULL_ACCESS', 'Y', 'N')
      ,decode(jtra.trans_access_code, 'TEAM_LEADER', 'Y', 'PRIMARY_CONTACT', 'Y', 'ESC_OWNER', 'Y', 'N') --jtr.primary_contact_flag
      ,jta.attribute_category terr_attr_category
      ,jta.attribute1 terr_attribute1
      ,jta.attribute2 terr_attribute2
      ,jta.attribute3 terr_attribute3
      ,jta.attribute4 terr_attribute4
      ,jta.attribute5 terr_attribute5
      ,jta.attribute6 terr_attribute6
      ,jta.attribute7 terr_attribute7
      ,jta.attribute8 terr_attribute8
      ,jta.attribute9 terr_attribute9
      ,jta.attribute10 terr_attribute10
      ,jta.attribute11 terr_attribute11
      ,jta.attribute12 terr_attribute12
      ,jta.attribute13 terr_attribute13
      ,jta.attribute14 terr_attribute14
      ,jta.attribute15 terr_attribute15
      ,jtr.attribute_category rsc_attr_category
      ,jtr.attribute1 rsc_attribute1
      ,jtr.attribute2 rsc_attribute2
      ,jtr.attribute3 rsc_attribute3
      ,jtr.attribute4 rsc_attribute4
      ,jtr.attribute5 rsc_attribute5
      ,jtr.attribute6 rsc_attribute6
      ,jtr.attribute7 rsc_attribute7
      ,jtr.attribute8 rsc_attribute8
      ,jtr.attribute9 rsc_attribute9
      ,jtr.attribute10 rsc_attribute10
      ,jtr.attribute11 rsc_attribute11
      ,jtr.attribute12 rsc_attribute12
      ,jtr.attribute13 rsc_attribute13
      ,jtr.attribute14 rsc_attribute14
      ,jtr.attribute15 rsc_attribute15
    BULK COLLECT INTO
       x_winners_rec.trans_object_id
      ,x_winners_rec.trans_detail_object_id
      ,x_winners_rec.txn_date
      ,x_winners_rec.terr_id
      ,x_winners_rec.org_id
      ,x_winners_rec.person_id
      ,x_winners_rec.terr_start_date
      ,x_winners_rec.terr_end_date
      ,x_winners_rec.terr_rsc_id
      ,x_winners_rec.terr_name
      ,x_winners_rec.top_level_terr_id
      ,x_winners_rec.absolute_rank
      ,x_winners_rec.resource_id
      ,x_winners_rec.rsc_start_date
      ,x_winners_rec.rsc_end_date
      ,x_winners_rec.resource_type
      ,x_winners_rec.group_id
      ,x_winners_rec.role_id
      ,x_winners_rec.role
      ,x_winners_rec.full_access_flag
      ,x_winners_rec.primary_contact_flag
      ,x_winners_rec.terr_attr_category
      ,x_winners_rec.terr_attribute1
      ,x_winners_rec.terr_attribute2
      ,x_winners_rec.terr_attribute3
      ,x_winners_rec.terr_attribute4
      ,x_winners_rec.terr_attribute5
      ,x_winners_rec.terr_attribute6
      ,x_winners_rec.terr_attribute7
      ,x_winners_rec.terr_attribute8
      ,x_winners_rec.terr_attribute9
      ,x_winners_rec.terr_attribute10
      ,x_winners_rec.terr_attribute11
      ,x_winners_rec.terr_attribute12
      ,x_winners_rec.terr_attribute13
      ,x_winners_rec.terr_attribute14
      ,x_winners_rec.terr_attribute15
      ,x_winners_rec.rsc_attr_category
      ,x_winners_rec.rsc_attribute1
      ,x_winners_rec.rsc_attribute2
      ,x_winners_rec.rsc_attribute3
      ,x_winners_rec.rsc_attribute4
      ,x_winners_rec.rsc_attribute5
      ,x_winners_rec.rsc_attribute6
      ,x_winners_rec.rsc_attribute7
      ,x_winners_rec.rsc_attribute8
      ,x_winners_rec.rsc_attribute9
      ,x_winners_rec.rsc_attribute10
      ,x_winners_rec.rsc_attribute11
      ,x_winners_rec.rsc_attribute12
      ,x_winners_rec.rsc_attribute13
      ,x_winners_rec.rsc_attribute14
      ,x_winners_rec.rsc_attribute15
    FROM
      ( SELECT
           o.trans_object_id
          ,o.trans_detail_object_id
          ,o.terr_id
          ,o.txn_date
        FROM
          ( SELECT
               i.trans_id
              ,i.trans_object_id
              ,i.trans_detail_object_id
              ,i.terr_id
              ,i.top_level_terr_id
              ,i.txn_date
              ,RANK() OVER ( PARTITION BY
                            i.trans_id
                          , i.trans_object_id
                          , i.trans_detail_object_id
                          , i.top_level_terr_id
                        ORDER BY i.absolute_rank DESC, i.terr_id) AS TERR_RANK
            FROM jtf_terr_results_GT_MT i  ) o
        WHERE o.TERR_RANK <= (SELECT NVL(t.num_winners, 1) FROM jtf_terr_all t WHERE t.terr_id = o.top_level_terr_id)
      ) WT
      , jtf_terr_all jta
      , jtf_terr_rsc_all jtr
      , jtf_terr_rsc_access_all jtra
      , jtf_qual_types_all jqta
      , jtf_rs_roles_b inv
    WHERE  WT.terr_id = jta.terr_id
    AND    WT.terr_id = jtr.terr_id
    AND jtr.end_date_active >= WT.txn_date
    AND jtr.start_date_active <= WT.txn_date
    AND jtr.resource_type <> 'RS_ROLE'
    AND jtr.terr_rsc_id = jtra.terr_rsc_id
    AND jtra.access_type = jqta.name
    AND jtra.trans_access_code NOT IN ('NONE', 'ESC_OWNER', 'ESCALATION')
    AND (( p_role IS NULL ) OR ( jtr.role = p_role ))
    AND jtr.role = inv.role_code(+)
    AND (( p_resource_type IS NULL) OR ( jtr.resource_type = p_resource_type ))
    AND jqta.qual_type_id = p_trans_id
    ORDER BY WT.trans_object_id, jta.org_id, WT.terr_id, jtr.resource_id;
   END IF; -- End of  IF ( p_source_id = -1002 AND p_trans_id IN (-1005,-1009 ) THEN

  ELSIF (p_mode LIKE '%TERRITORY') THEN
    SELECT DISTINCT
       WT.trans_object_id
      ,WT.trans_detail_object_id
      ,WT.txn_date
      ,WT.terr_id
      ,jta.org_id
      ,jta.start_date_active
      ,jta.end_date_active
      ,jta.name
      ,null top_level_terr_id
      ,jta.absolute_rank absolute_rank
      ,jta.attribute_category terr_attr_category
      ,jta.attribute1 terr_attribute1
      ,jta.attribute2 terr_attribute2
      ,jta.attribute3 terr_attribute3
      ,jta.attribute4 terr_attribute4
      ,jta.attribute5 terr_attribute5
      ,jta.attribute6 terr_attribute6
      ,jta.attribute7 terr_attribute7
      ,jta.attribute8 terr_attribute8
      ,jta.attribute9 terr_attribute9
      ,jta.attribute10 terr_attribute10
      ,jta.attribute11 terr_attribute11
      ,jta.attribute12 terr_attribute12
      ,jta.attribute13 terr_attribute13
      ,jta.attribute14 terr_attribute14
      ,jta.attribute15 terr_attribute15
    BULK COLLECT INTO
       x_winners_rec.trans_object_id
      ,x_winners_rec.trans_detail_object_id
      ,x_winners_rec.txn_date
      ,x_winners_rec.terr_id
      ,x_winners_rec.org_id
      ,x_winners_rec.terr_start_date
      ,x_winners_rec.terr_end_date
      ,x_winners_rec.terr_name
      ,x_winners_rec.top_level_terr_id
      ,x_winners_rec.absolute_rank
      ,x_winners_rec.terr_attr_category
      ,x_winners_rec.terr_attribute1
      ,x_winners_rec.terr_attribute2
      ,x_winners_rec.terr_attribute3
      ,x_winners_rec.terr_attribute4
      ,x_winners_rec.terr_attribute5
      ,x_winners_rec.terr_attribute6
      ,x_winners_rec.terr_attribute7
      ,x_winners_rec.terr_attribute8
      ,x_winners_rec.terr_attribute9
      ,x_winners_rec.terr_attribute10
      ,x_winners_rec.terr_attribute11
      ,x_winners_rec.terr_attribute12
      ,x_winners_rec.terr_attribute13
      ,x_winners_rec.terr_attribute14
      ,x_winners_rec.terr_attribute15
    FROM
      ( SELECT
           o.trans_object_id
          ,o.trans_detail_object_id
          ,o.terr_id
          ,o.txn_date
        FROM
          ( SELECT
               i.trans_id
              ,i.trans_object_id
              ,i.trans_detail_object_id
              ,i.terr_id
              ,i.top_level_terr_id
              ,i.txn_date
              ,RANK() OVER ( PARTITION BY
                            i.trans_id
                          , i.trans_object_id
                          , i.trans_detail_object_id
                          , i.top_level_terr_id
                        ORDER BY i.absolute_rank DESC, i.terr_id) AS TERR_RANK
            FROM jtf_terr_results_GT_MT i  ) o
        WHERE o.TERR_RANK <= (SELECT NVL(t.num_winners, 1) FROM jtf_terr_all t WHERE t.terr_id = o.top_level_terr_id)
      ) WT
      , jtf_terr_all jta
    WHERE  WT.terr_id = jta.terr_id
    AND    EXISTS (
               SELECT 1
               FROM
                   jtf_terr_rsc_all jtr
                 , jtf_terr_rsc_access_all jtra
                 , jtf_qual_types_all jqta
               WHERE  WT.terr_id = jtr.terr_id
               AND jtr.end_date_active >= WT.txn_date
               AND jtr.start_date_active <= WT.txn_date
               AND jtr.resource_type <> 'RS_ROLE'
               AND jtr.terr_rsc_id = jtra.terr_rsc_id
               AND jtra.trans_access_code NOT IN ('NONE', 'ESC_OWNER', 'ESCALATION')
               AND jtra.access_type = jqta.name
               AND (( p_role IS NULL ) OR ( jtr.role = p_role ))
               AND (( p_resource_type IS NULL) OR ( jtr.resource_type = p_resource_type ))
               AND jqta.qual_type_id = p_trans_id);

  ELSIF (p_mode LIKE '%LOOKUP') THEN
    SELECT /*+ PUSH_PRED(rsv) */ DISTINCT
       WT.trans_object_id
      ,WT.trans_detail_object_id
      ,WT.txn_date
      ,WT.terr_id
      ,jta.org_id
      ,jtr.person_id
      ,jta.start_date_active
      ,jta.end_date_active
      ,jtr.terr_rsc_id
      ,jta.name
      ,null top_level_terr_id
      ,jta.absolute_rank absolute_rank
      ,jtr.resource_id
      ,jtr.start_date_active
      ,jtr.end_date_active
      ,jtr.resource_type
      ,jtr.group_id
      ,role.role_id
      ,jtr.role
      ,decode(jtra.trans_access_code, 'FULL_ACCESS', 'Y', 'N')
      ,decode(jtra.trans_access_code, 'TEAM_LEADER', 'Y', 'PRIMARY_CONTACT', 'Y', 'ESC_OWNER', 'Y', 'N') --jtr.primary_contact_flag
      ,rsv.resource_name
      ,rsc.source_job_title resource_job_title
      ,rsc.source_phone resource_phone
      ,rsc.source_email resource_email
      ,rsc.source_mgr_name resource_mgr_name
      ,mgr.source_phone resource_mgr_phone
      ,mgr.source_email resource_mgr_email
      ,jta.name property1
      ,role.role_name property2
      ,jta_p.name property3
      ,rsc.attribute4 property4
      ,rsc.attribute5 property5
      ,rsc.attribute6 property6
      ,rsc.attribute7 property7
      ,rsc.attribute8 property8
      ,rsc.attribute9 property9
      ,rsc.attribute10 property10
      ,rsc.attribute11 property11
      ,rsc.attribute12 property12
      ,rsc.attribute13 property13
      ,rsc.attribute14 property14
      ,rsc.attribute15 property15
      ,jta.attribute_category terr_attr_category
      ,jta.attribute1 terr_attribute1
      ,jta.attribute2 terr_attribute2
      ,jta.attribute3 terr_attribute3
      ,jta.attribute4 terr_attribute4
      ,jta.attribute5 terr_attribute5
      ,jta.attribute6 terr_attribute6
      ,jta.attribute7 terr_attribute7
      ,jta.attribute8 terr_attribute8
      ,jta.attribute9 terr_attribute9
      ,jta.attribute10 terr_attribute10
      ,jta.attribute11 terr_attribute11
      ,jta.attribute12 terr_attribute12
      ,jta.attribute13 terr_attribute13
      ,jta.attribute14 terr_attribute14
      ,jta.attribute15 terr_attribute15
      ,jtr.attribute_category rsc_attr_category
      ,jtr.attribute1 rsc_attribute1
      ,jtr.attribute2 rsc_attribute2
      ,jtr.attribute3 rsc_attribute3
      ,jtr.attribute4 rsc_attribute4
      ,jtr.attribute5 rsc_attribute5
      ,jtr.attribute6 rsc_attribute6
      ,jtr.attribute7 rsc_attribute7
      ,jtr.attribute8 rsc_attribute8
      ,jtr.attribute9 rsc_attribute9
      ,jtr.attribute10 rsc_attribute10
      ,jtr.attribute11 rsc_attribute11
      ,jtr.attribute12 rsc_attribute12
      ,jtr.attribute13 rsc_attribute13
      ,jtr.attribute14 rsc_attribute14
      ,jtr.attribute15 rsc_attribute15
    BULK COLLECT INTO
       x_winners_rec.trans_object_id
      ,x_winners_rec.trans_detail_object_id
      ,x_winners_rec.txn_date
      ,x_winners_rec.terr_id
      ,x_winners_rec.org_id
      ,x_winners_rec.person_id
      ,x_winners_rec.terr_start_date
      ,x_winners_rec.terr_end_date
      ,x_winners_rec.terr_rsc_id
      ,x_winners_rec.terr_name
      ,x_winners_rec.top_level_terr_id
      ,x_winners_rec.absolute_rank
      ,x_winners_rec.resource_id
      ,x_winners_rec.rsc_start_date
      ,x_winners_rec.rsc_end_date
      ,x_winners_rec.resource_type
      ,x_winners_rec.group_id
      ,x_winners_rec.role_id
      ,x_winners_rec.role
      ,x_winners_rec.full_access_flag
      ,x_winners_rec.primary_contact_flag
      ,x_winners_rec.resource_name
      ,x_winners_rec.resource_job_title
      ,x_winners_rec.resource_phone
      ,x_winners_rec.resource_email
      ,x_winners_rec.resource_mgr_name
      ,x_winners_rec.resource_mgr_phone
      ,x_winners_rec.resource_mgr_email
      ,x_winners_rec.property1
      ,x_winners_rec.property2
      ,x_winners_rec.property3
      ,x_winners_rec.property4
      ,x_winners_rec.property5
      ,x_winners_rec.property6
      ,x_winners_rec.property7
      ,x_winners_rec.property8
      ,x_winners_rec.property9
      ,x_winners_rec.property10
      ,x_winners_rec.property11
      ,x_winners_rec.property12
      ,x_winners_rec.property13
      ,x_winners_rec.property14
      ,x_winners_rec.property15
      ,x_winners_rec.terr_attr_category
      ,x_winners_rec.terr_attribute1
      ,x_winners_rec.terr_attribute2
      ,x_winners_rec.terr_attribute3
      ,x_winners_rec.terr_attribute4
      ,x_winners_rec.terr_attribute5
      ,x_winners_rec.terr_attribute6
      ,x_winners_rec.terr_attribute7
      ,x_winners_rec.terr_attribute8
      ,x_winners_rec.terr_attribute9
      ,x_winners_rec.terr_attribute10
      ,x_winners_rec.terr_attribute11
      ,x_winners_rec.terr_attribute12
      ,x_winners_rec.terr_attribute13
      ,x_winners_rec.terr_attribute14
      ,x_winners_rec.terr_attribute15
      ,x_winners_rec.rsc_attr_category
      ,x_winners_rec.rsc_attribute1
      ,x_winners_rec.rsc_attribute2
      ,x_winners_rec.rsc_attribute3
      ,x_winners_rec.rsc_attribute4
      ,x_winners_rec.rsc_attribute5
      ,x_winners_rec.rsc_attribute6
      ,x_winners_rec.rsc_attribute7
      ,x_winners_rec.rsc_attribute8
      ,x_winners_rec.rsc_attribute9
      ,x_winners_rec.rsc_attribute10
      ,x_winners_rec.rsc_attribute11
      ,x_winners_rec.rsc_attribute12
      ,x_winners_rec.rsc_attribute13
      ,x_winners_rec.rsc_attribute14
      ,x_winners_rec.rsc_attribute15
    FROM
      ( SELECT
           o.trans_object_id
          ,o.trans_detail_object_id
          ,o.terr_id
          ,o.txn_date
        FROM
          ( SELECT
               i.trans_id
              ,i.trans_object_id
              ,i.trans_detail_object_id
              ,i.terr_id
              ,i.top_level_terr_id
              ,i.txn_date
              ,RANK() OVER ( PARTITION BY
                            i.trans_id
                          , i.trans_object_id
                          , i.trans_detail_object_id
                          , i.top_level_terr_id
                        ORDER BY i.absolute_rank DESC, i.terr_id) AS TERR_RANK
            FROM jtf_terr_results_GT_MT i  ) o
        WHERE o.TERR_RANK <= (SELECT NVL(t.num_winners, 1) FROM jtf_terr_all t WHERE t.terr_id = o.top_level_terr_id)
      ) WT
      , jtf_terr_all jta
      , jtf_terr_all jta_p
      , jtf_terr_rsc_all jtr
      , jtf_terr_rsc_access_all jtra
      , jtf_qual_types_all jqta
      , (select a.group_id resource_id, a.group_name resource_name, 'RS_GROUP' resource_type
         from   jtf_rs_groups_tl a
         where  a.language = userenv('LANG')
         union all
         select a.team_id resource_id, a.team_name resource_name, 'RS_TEAM' resource_type
         from   jtf_rs_teams_tl a
         where  a.language = userenv('LANG')
         union all
         select a.resource_id resource_id, a.resource_name resource_name,
                   decode(a.category ,'EMPLOYEE', 'RS_EMPLOYEE','PARTNER', 'RS_PARTNER','SUPPLIER_CONTACT',
			                    'RS_SUPPLIER_CONTACT' , 'PARTY', 'RS_PARTY' , 'OTHER',
						        'RS_OTHER', 'TBH', 'RS_TBH') RESOURCE_TYPE
         from  jtf_rs_resource_extns_tl a
         where a.language = userenv('LANG')
         ) rsv
      , jtf_rs_resource_extns rsc
      , jtf_rs_resource_extns mgr
      , jtf_rs_roles_vl role
    WHERE  WT.terr_id = jta.terr_id
    AND    WT.terr_id = jtr.terr_id
    AND jtr.end_date_active >= WT.txn_date
    AND jtr.start_date_active <= WT.txn_date
    AND jtr.resource_type <> 'RS_ROLE'
    AND jtr.terr_rsc_id = jtra.terr_rsc_id
    AND jtra.trans_access_code NOT IN ('NONE', 'ESC_OWNER', 'ESCALATION')
    AND jtra.access_type = jqta.name
    AND (( p_role IS NULL ) OR ( jtr.role = p_role ))
    AND (( p_resource_type IS NULL) OR ( jtr.resource_type = p_resource_type ))
    AND jqta.qual_type_id = p_trans_id
    AND jtr.resource_id = rsv.resource_id
    AND jtr.resource_type = rsv.resource_type
    AND decode(jtr.resource_type, 'RS_EMPLOYEE', jtr.resource_id, -999) = rsc.resource_id(+)
    AND rsc.source_mgr_id = mgr.source_id(+)
    AND rsc.category = mgr.category(+)
    AND jta.parent_territory_id = jta_p.terr_id
    AND jtr.role = role.role_code(+);
  END IF;


  IF (x_winners_rec.trans_object_id.COUNT > 0) THEN
    x_winners_rec.use_type := p_mode;
    x_winners_rec.source_id := p_source_id;
    x_winners_rec.trans_id := p_trans_id;
  END IF;

  -- debug message
  IF (FND_LOG.LEVEL_EVENT >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    FND_LOG.string(FND_LOG.LEVEL_EVENT,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.single_level_winning_process.winners',
                   'Number of winning territories : ' || x_winners_rec.trans_object_id.COUNT);
  END IF;

  -- debug message
  IF (FND_LOG.LEVEL_PROCEDURE >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    FND_LOG.string(FND_LOG.LEVEL_PROCEDURE,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.single_level_winning_process.end',
                   'End of the procedure JTY_ASSIGN_REALTIME_PUB.single_level_winning_process');
  END IF;

EXCEPTION

  WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
    x_msg_data := SQLCODE || ' : ' || SQLERRM;
    x_msg_count := 1;
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.single_level_winning_process.other',
                     substr(x_msg_data, 1, 4000));
    END IF;

END single_level_winning_process;

/* this procedure find out the winning territories for */
/* txn types that uses multiple level winning process  */
PROCEDURE multi_level_winning_process
(   p_source_id                IN          NUMBER,
    p_trans_id                 IN          NUMBER,
    p_mode                     IN          VARCHAR2,
    p_role                     IN          VARCHAR2,
    p_resource_type            IN          VARCHAR2,
    x_return_status            OUT NOCOPY  VARCHAR2,
    x_msg_count                OUT NOCOPY  NUMBER,
    x_msg_data                 OUT NOCOPY  VARCHAR2,
    x_winners_rec              OUT NOCOPY  bulk_winners_rec_type
) AS

  l_matches_target       VARCHAR2(30);
  l_terr_L1_target       VARCHAR2(30);
  l_terr_L2_target       VARCHAR2(30);
  l_terr_L3_target       VARCHAR2(30);
  l_terr_L4_target       VARCHAR2(30);
  l_terr_L5_target       VARCHAR2(30);
  l_terr_WT_target       VARCHAR2(30);
  l_date_effective       BOOLEAN;

  l_winner_no_of_records NUMBER;
  l_worker_id            NUMBER;

BEGIN

  -- debug message
  IF (FND_LOG.LEVEL_PROCEDURE >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    FND_LOG.string(FND_LOG.LEVEL_PROCEDURE,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.multi_level_winning_process.begin',
                   'Start of the procedure JTY_ASSIGN_REALTIME_PUB.multi_level_winning_process');
  END IF;

  x_return_status  := FND_API.G_RET_STS_SUCCESS;
  l_worker_id      := 1;
  l_matches_target := 'JTF_TERR_RESULTS_GT_MT';
  l_terr_L1_target := 'JTF_TERR_RESULTS_GT_L1';
  l_terr_L2_target := 'JTF_TERR_RESULTS_GT_L2';
  l_terr_L3_target := 'JTF_TERR_RESULTS_GT_L3';
  l_terr_L4_target := 'JTF_TERR_RESULTS_GT_L4';
  l_terr_L5_target := 'JTF_TERR_RESULTS_GT_L5';
  l_terr_WT_target := 'JTF_TERR_RESULTS_GT_WT';

  IF (p_mode LIKE 'DATE EFFECTIVE%') THEN
    l_date_effective := true;
  ELSE
    l_date_effective := false;
  END IF;

  DELETE FROM JTF_TERR_RESULTS_GT_L1;
  DELETE FROM JTF_TERR_RESULTS_GT_L2;
  DELETE FROM JTF_TERR_RESULTS_GT_L3;
  DELETE FROM JTF_TERR_RESULTS_GT_L4;
  DELETE FROM JTF_TERR_RESULTS_GT_L5;
  DELETE FROM JTF_TERR_RESULTS_GT_WT;

  JTY_ASSIGN_BULK_PUB.Process_Level_Winners (
                        p_terr_LEVEL_target_tbl  => l_terr_L1_target,
                        p_terr_PARENT_LEVEL_tbl  => l_terr_L1_target,
                        p_UPPER_LEVEL_FROM_ROOT  => 1,
                        p_LOWER_LEVEL_FROM_ROOT  => 1,
                        p_matches_target         => l_matches_target,
                        p_source_id              => p_source_id,
                        p_run_mode               => 'REAL TIME',
                        p_date_effective         => l_date_effective,
                        x_return_status          => x_return_status,
                        p_worker_id              => l_worker_id
                        );

  IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
    -- debug message
    x_msg_data  := 'API JTY_ASSIGN_BULK_PUB.Process_Level_Winners has failed for level 1';
    x_msg_count := 1;
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.multi_level_winning_process.l1',
                     x_msg_data);
    END IF;

    RAISE	FND_API.G_EXC_ERROR;
  END IF;

  -- debug message
  IF (FND_LOG.LEVEL_STATEMENT >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    SELECT COUNT(*)
    INTO   l_winner_no_of_records
    FROM   jtf_terr_results_gt_l1;

    FND_LOG.string(FND_LOG.LEVEL_STATEMENT,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.multi_level_winning_process.l1',
                   'Number of records inserted into jtf_terr_results_gt_l1 table : ' || l_winner_no_of_records);
  END IF;

  JTY_ASSIGN_BULK_PUB.Process_Level_Winners (
                        p_terr_LEVEL_target_tbl  => l_terr_L2_target,
                        p_terr_PARENT_LEVEL_tbl  => l_terr_L1_target,
                        p_UPPER_LEVEL_FROM_ROOT  => 1,
                        p_LOWER_LEVEL_FROM_ROOT  => 2,
                        p_matches_target         => l_matches_target,
                        p_source_id              => p_source_id,
                        p_run_mode               => 'REAL TIME',
                        p_date_effective         => l_date_effective,
                        x_return_status          => x_return_status,
                        p_worker_id              => l_worker_id
                        );

  IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
    -- debug message
    x_msg_data  := 'API JTY_ASSIGN_BULK_PUB.Process_Level_Winners has failed for level 2';
    x_msg_count := 1;
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.multi_level_winning_process.l2',
                     x_msg_data);
    END IF;

    RAISE	FND_API.G_EXC_ERROR;
  END IF;

  -- debug message
  IF (FND_LOG.LEVEL_STATEMENT >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    SELECT COUNT(*)
    INTO   l_winner_no_of_records
    FROM   jtf_terr_results_gt_l2;

    FND_LOG.string(FND_LOG.LEVEL_STATEMENT,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.multi_level_winning_process.l2',
                   'Number of records inserted into jtf_terr_results_gt_l2 table : ' || l_winner_no_of_records);
  END IF;

  JTY_ASSIGN_BULK_PUB.Process_Level_Winners (
                        p_terr_LEVEL_target_tbl  => l_terr_L3_target,
                        p_terr_PARENT_LEVEL_tbl  => l_terr_L2_target,
                        p_UPPER_LEVEL_FROM_ROOT  => 2,
                        p_LOWER_LEVEL_FROM_ROOT  => 3,
                        p_matches_target         => l_matches_target,
                        p_source_id              => p_source_id,
                        p_run_mode               => 'REAL TIME',
                        p_date_effective         => l_date_effective,
                        x_return_status          => x_return_status,
                        p_worker_id              => l_worker_id
                        );

  IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
    -- debug message
    x_msg_data  := 'API JTY_ASSIGN_BULK_PUB.Process_Level_Winners has failed for level 3';
    x_msg_count := 1;
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.multi_level_winning_process.l3',
                     x_msg_data);
    END IF;

    RAISE	FND_API.G_EXC_ERROR;
  END IF;

  -- debug message
  IF (FND_LOG.LEVEL_STATEMENT >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    SELECT COUNT(*)
    INTO   l_winner_no_of_records
    FROM   jtf_terr_results_gt_l3;

    FND_LOG.string(FND_LOG.LEVEL_STATEMENT,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.multi_level_winning_process.l3',
                   'Number of records inserted into jtf_terr_results_gt_l3 table : ' || l_winner_no_of_records);
  END IF;

  JTY_ASSIGN_BULK_PUB.Process_Level_Winners (
                        p_terr_LEVEL_target_tbl  => l_terr_L4_target,
                        p_terr_PARENT_LEVEL_tbl  => l_terr_L3_target,
                        p_UPPER_LEVEL_FROM_ROOT  => 3,
                        p_LOWER_LEVEL_FROM_ROOT  => 4,
                        p_matches_target         => l_matches_target,
                        p_source_id              => p_source_id,
                        p_run_mode               => 'REAL TIME',
                        p_date_effective         => l_date_effective,
                        x_return_status          => x_return_status,
                        p_worker_id              => l_worker_id
                        );

  IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
    -- debug message
    x_msg_data  := 'API JTY_ASSIGN_BULK_PUB.Process_Level_Winners has failed for level 4';
    x_msg_count := 1;
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.multi_level_winning_process.l4',
                     x_msg_data);
    END IF;

    RAISE	FND_API.G_EXC_ERROR;
  END IF;

  -- debug message
  IF (FND_LOG.LEVEL_STATEMENT >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    SELECT COUNT(*)
    INTO   l_winner_no_of_records
    FROM   jtf_terr_results_gt_l4;

    FND_LOG.string(FND_LOG.LEVEL_STATEMENT,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.multi_level_winning_process.l4',
                   'Number of records inserted into jtf_terr_results_gt_l4 table : ' || l_winner_no_of_records);
  END IF;

  JTY_ASSIGN_BULK_PUB.Process_Level_Winners (
                        p_terr_LEVEL_target_tbl  => l_terr_L5_target,
                        p_terr_PARENT_LEVEL_tbl  => l_terr_L4_target,
                        p_UPPER_LEVEL_FROM_ROOT  => 4,
                        p_LOWER_LEVEL_FROM_ROOT  => 5,
                        p_matches_target         => l_matches_target,
                        p_source_id              => p_source_id,
                        p_run_mode               => 'REAL TIME',
                        p_date_effective         => l_date_effective,
                        x_return_status          => x_return_status,
                        p_worker_id              => l_worker_id
                        );

  IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
    -- debug message
    x_msg_data  := 'API JTY_ASSIGN_BULK_PUB.Process_Level_Winners has failed for level 5';
    x_msg_count := 1;
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.multi_level_winning_process.l5',
                     x_msg_data);
    END IF;

    RAISE	FND_API.G_EXC_ERROR;
  END IF;

  -- debug message
  IF (FND_LOG.LEVEL_STATEMENT >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    SELECT COUNT(*)
    INTO   l_winner_no_of_records
    FROM   jtf_terr_results_gt_l5;

    FND_LOG.string(FND_LOG.LEVEL_STATEMENT,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.multi_level_winning_process.l5',
                   'Number of records inserted into jtf_terr_results_gt_l5 table : ' || l_winner_no_of_records);
  END IF;

  JTY_ASSIGN_BULK_PUB.Process_Final_Level_Winners (
                        p_terr_LEVEL_target_tbl  => l_terr_WT_target,
                        p_terr_L5_target_tbl     => l_terr_L5_target,
                        p_matches_target         => l_matches_target,
                        p_source_id              => p_source_id,
                        p_run_mode               => 'REAL TIME',
                        p_date_effective         => l_date_effective,
                        x_return_status          => x_return_status,
                        p_worker_id              => l_worker_id
                        );

  IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
    -- debug message
    x_msg_data  := 'API JTY_ASSIGN_BULK_PUB.Process_Final_Level_Winners has failed';
    x_msg_count := 1;
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.multi_level_winning_process.wt',
                     x_msg_data);
    END IF;

    RAISE	FND_API.G_EXC_ERROR;
  END IF;

  -- debug message
  IF (FND_LOG.LEVEL_STATEMENT >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    SELECT COUNT(*)
    INTO   l_winner_no_of_records
    FROM   jtf_terr_results_gt_wt;

    FND_LOG.string(FND_LOG.LEVEL_STATEMENT,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.multi_level_winning_process.wt',
                   'Number of records inserted into jtf_terr_results_gt_wt table : ' || l_winner_no_of_records);
  END IF;

  BEGIN

    IF (p_mode LIKE '%RESOURCE') THEN
      SELECT DISTINCT
         WINNERS.trans_object_id
        ,WINNERS.trans_detail_object_id
        ,WINNERS.txn_date
        ,WINNERS.win_terr_id
        ,jta.org_id
        ,jtr.person_id
        ,jta.start_date_active
        ,jta.end_date_active
        ,jtr.terr_rsc_id
        ,jta.name
        ,null top_level_terr_id
        ,jta.absolute_rank absolute_rank
        ,jtr.resource_id
        ,jtr.start_date_active
        ,jtr.end_date_active
        ,jtr.resource_type
        ,jtr.group_id
        ,inv.role_id
        ,jtr.role
        ,decode(jtra.trans_access_code, 'FULL_ACCESS', 'Y', 'N')
        ,jtr.primary_contact_flag
        ,jta.attribute_category terr_attr_category
        ,jta.attribute1 terr_attribute1
        ,jta.attribute2 terr_attribute2
        ,jta.attribute3 terr_attribute3
        ,jta.attribute4 terr_attribute4
        ,jta.attribute5 terr_attribute5
        ,jta.attribute6 terr_attribute6
        ,jta.attribute7 terr_attribute7
        ,jta.attribute8 terr_attribute8
        ,jta.attribute9 terr_attribute9
        ,jta.attribute10 terr_attribute10
        ,jta.attribute11 terr_attribute11
        ,jta.attribute12 terr_attribute12
        ,jta.attribute13 terr_attribute13
        ,jta.attribute14 terr_attribute14
        ,jta.attribute15 terr_attribute15
        ,jtr.attribute_category rsc_attr_category
        ,jtr.attribute1 rsc_attribute1
        ,jtr.attribute2 rsc_attribute2
        ,jtr.attribute3 rsc_attribute3
        ,jtr.attribute4 rsc_attribute4
        ,jtr.attribute5 rsc_attribute5
        ,jtr.attribute6 rsc_attribute6
        ,jtr.attribute7 rsc_attribute7
        ,jtr.attribute8 rsc_attribute8
        ,jtr.attribute9 rsc_attribute9
        ,jtr.attribute10 rsc_attribute10
        ,jtr.attribute11 rsc_attribute11
        ,jtr.attribute12 rsc_attribute12
        ,jtr.attribute13 rsc_attribute13
        ,jtr.attribute14 rsc_attribute14
        ,jtr.attribute15 rsc_attribute15
      BULK COLLECT INTO
         x_winners_rec.trans_object_id
        ,x_winners_rec.trans_detail_object_id
        ,x_winners_rec.txn_date
        ,x_winners_rec.terr_id
        ,x_winners_rec.org_id
        ,x_winners_rec.person_id
        ,x_winners_rec.terr_start_date
        ,x_winners_rec.terr_end_date
        ,x_winners_rec.terr_rsc_id
        ,x_winners_rec.terr_name
        ,x_winners_rec.top_level_terr_id
        ,x_winners_rec.absolute_rank
        ,x_winners_rec.resource_id
        ,x_winners_rec.rsc_start_date
        ,x_winners_rec.rsc_end_date
        ,x_winners_rec.resource_type
        ,x_winners_rec.group_id
        ,x_winners_rec.role_id
        ,x_winners_rec.role
        ,x_winners_rec.full_access_flag
        ,x_winners_rec.primary_contact_flag
        ,x_winners_rec.terr_attr_category
        ,x_winners_rec.terr_attribute1
        ,x_winners_rec.terr_attribute2
        ,x_winners_rec.terr_attribute3
        ,x_winners_rec.terr_attribute4
        ,x_winners_rec.terr_attribute5
        ,x_winners_rec.terr_attribute6
        ,x_winners_rec.terr_attribute7
        ,x_winners_rec.terr_attribute8
        ,x_winners_rec.terr_attribute9
        ,x_winners_rec.terr_attribute10
        ,x_winners_rec.terr_attribute11
        ,x_winners_rec.terr_attribute12
        ,x_winners_rec.terr_attribute13
        ,x_winners_rec.terr_attribute14
        ,x_winners_rec.terr_attribute15
        ,x_winners_rec.rsc_attr_category
        ,x_winners_rec.rsc_attribute1
        ,x_winners_rec.rsc_attribute2
        ,x_winners_rec.rsc_attribute3
        ,x_winners_rec.rsc_attribute4
        ,x_winners_rec.rsc_attribute5
        ,x_winners_rec.rsc_attribute6
        ,x_winners_rec.rsc_attribute7
        ,x_winners_rec.rsc_attribute8
        ,x_winners_rec.rsc_attribute9
        ,x_winners_rec.rsc_attribute10
        ,x_winners_rec.rsc_attribute11
        ,x_winners_rec.rsc_attribute12
        ,x_winners_rec.rsc_attribute13
        ,x_winners_rec.rsc_attribute14
        ,x_winners_rec.rsc_attribute15
      FROM
        (
              /* WINNERS ILV */
              SELECT LX.trans_object_id
                   , LX.trans_detail_object_id
                   , LX.WIN_TERR_ID
                   , LX.txn_date
              FROM jtf_terr_results_GT_L1 LX
                 , ( SELECT trans_object_id
                          , trans_detail_object_id
                          , WIN_TERR_ID WIN_TERR_ID
                     FROM JTF_terr_results_GT_L1
                     MINUS
                     SELECT trans_object_id
                          , trans_detail_object_id
                          , ul_terr_id WIN_TERR_ID
                     FROM JTF_terr_results_GT_L2  ) ILV
              WHERE ( LX.trans_detail_object_id = ILV.trans_detail_object_id
                      OR
                      LX.trans_detail_object_id IS NULL )
                AND LX.trans_object_id = ILV.trans_object_id
                AND LX.WIN_TERR_ID = ILV.WIN_TERR_ID

              UNION ALL

              SELECT LX.trans_object_id
                   , LX.trans_detail_object_id
                   , LX.WIN_TERR_ID
                   , LX.txn_date
              FROM jtf_terr_results_GT_L2 LX
                 , ( SELECT trans_object_id
                          , trans_detail_object_id
                          , WIN_TERR_ID WIN_TERR_ID
                     FROM JTF_terr_results_GT_L2
                     MINUS
                     SELECT trans_object_id
                          , trans_detail_object_id
                          , ul_terr_id WIN_TERR_ID
                     FROM JTF_terr_results_GT_L3  ) ILV
              WHERE ( LX.trans_detail_object_id = ILV.trans_detail_object_id
                      OR
                      LX.trans_detail_object_id IS NULL )
                AND LX.trans_object_id = ILV.trans_object_id
                AND LX.WIN_TERR_ID = ILV.WIN_TERR_ID

              UNION ALL

              SELECT LX.trans_object_id
                   , LX.trans_detail_object_id
                   , LX.WIN_TERR_ID
                   , LX.txn_date
              FROM jtf_terr_results_GT_L3 LX
                 , ( SELECT trans_object_id
                          , trans_detail_object_id
                          , WIN_TERR_ID WIN_TERR_ID
                     FROM JTF_terr_results_GT_L3
                     MINUS
                     SELECT trans_object_id
                          , trans_detail_object_id
                          , ul_terr_id WIN_TERR_ID
                     FROM JTF_terr_results_GT_L4  ) ILV
              WHERE ( LX.trans_detail_object_id = ILV.trans_detail_object_id
                      OR
                      LX.trans_detail_object_id IS NULL )
                AND LX.trans_object_id = ILV.trans_object_id
                AND LX.WIN_TERR_ID = ILV.WIN_TERR_ID

              UNION ALL

              SELECT LX.trans_object_id
                   , LX.trans_detail_object_id
                   , LX.WIN_TERR_ID
                   , LX.txn_date
              FROM jtf_terr_results_GT_L4 LX
                 , ( SELECT trans_object_id
                          , trans_detail_object_id
                          , WIN_TERR_ID WIN_TERR_ID
                     FROM JTF_terr_results_GT_L4
                     MINUS
                     SELECT trans_object_id
                          , trans_detail_object_id
                          , ul_terr_id WIN_TERR_ID
                     FROM JTF_terr_results_GT_L5  ) ILV
              WHERE ( LX.trans_detail_object_id = ILV.trans_detail_object_id
                      OR
                      LX.trans_detail_object_id IS NULL )
                AND LX.trans_object_id = ILV.trans_object_id
                AND LX.WIN_TERR_ID = ILV.WIN_TERR_ID

              UNION ALL

              SELECT LX.trans_object_id
                   , LX.trans_detail_object_id
                   , LX.WIN_TERR_ID
                   , LX.txn_date
              FROM jtf_terr_results_GT_L5 LX
                 , ( SELECT trans_object_id
                          , trans_detail_object_id
                          , WIN_TERR_ID WIN_TERR_ID
                     FROM JTF_terr_results_GT_L5
                     MINUS
                     SELECT trans_object_id
                          , trans_detail_object_id
                          , ul_terr_id WIN_TERR_ID
                     FROM JTF_terr_results_GT_WT  ) ILV
              WHERE ( LX.trans_detail_object_id = ILV.trans_detail_object_id
                      OR
                      LX.trans_detail_object_id IS NULL )
                AND LX.trans_object_id = ILV.trans_object_id
                AND LX.WIN_TERR_ID = ILV.WIN_TERR_ID

              UNION ALL

              SELECT trans_object_id
                   , trans_detail_object_id
                   , WIN_TERR_ID
                   , txn_date
              FROM jtf_terr_results_GT_wt

        ) WINNERS
        , jtf_terr_all jta
        , jtf_terr_rsc_all jtr
        , jtf_terr_rsc_access_all jtra
        , jtf_qual_types_all jqta
        , jtf_rs_roles_b inv
      WHERE  WINNERS.win_terr_id = jta.terr_id
      AND    WINNERS.win_terr_id = jtr.terr_id
      AND jtr.end_date_active >= WINNERS.txn_date
      AND jtr.start_date_active <= WINNERS.txn_date
      AND jtr.resource_type <> 'RS_ROLE'
      AND jtr.terr_rsc_id = jtra.terr_rsc_id
      AND jtra.trans_access_code <> 'NONE'
      AND jtra.access_type = jqta.name
      AND (( p_role IS NULL ) OR ( jtr.role = p_role ))
      AND jtr.role = inv.role_code(+)
      AND (( p_resource_type IS NULL) OR ( jtr.resource_type = p_resource_type ))
      AND jqta.qual_type_id = p_trans_id;

    ELSIF (p_mode LIKE '%TERRITORY') THEN
      SELECT DISTINCT
         WINNERS.trans_object_id
        ,WINNERS.trans_detail_object_id
        ,WINNERS.txn_date
        ,WINNERS.win_terr_id
        ,jta.org_id
        ,jta.start_date_active
        ,jta.end_date_active
        ,jta.name
        ,null top_level_terr_id
        ,jta.absolute_rank absolute_rank
        ,jta.attribute_category terr_attr_category
        ,jta.attribute1 terr_attribute1
        ,jta.attribute2 terr_attribute2
        ,jta.attribute3 terr_attribute3
        ,jta.attribute4 terr_attribute4
        ,jta.attribute5 terr_attribute5
        ,jta.attribute6 terr_attribute6
        ,jta.attribute7 terr_attribute7
        ,jta.attribute8 terr_attribute8
        ,jta.attribute9 terr_attribute9
        ,jta.attribute10 terr_attribute10
        ,jta.attribute11 terr_attribute11
        ,jta.attribute12 terr_attribute12
        ,jta.attribute13 terr_attribute13
        ,jta.attribute14 terr_attribute14
        ,jta.attribute15 terr_attribute15
      BULK COLLECT INTO
         x_winners_rec.trans_object_id
        ,x_winners_rec.trans_detail_object_id
        ,x_winners_rec.txn_date
        ,x_winners_rec.terr_id
        ,x_winners_rec.org_id
        ,x_winners_rec.terr_start_date
        ,x_winners_rec.terr_end_date
        ,x_winners_rec.terr_name
        ,x_winners_rec.top_level_terr_id
        ,x_winners_rec.absolute_rank
        ,x_winners_rec.terr_attr_category
        ,x_winners_rec.terr_attribute1
        ,x_winners_rec.terr_attribute2
        ,x_winners_rec.terr_attribute3
        ,x_winners_rec.terr_attribute4
        ,x_winners_rec.terr_attribute5
        ,x_winners_rec.terr_attribute6
        ,x_winners_rec.terr_attribute7
        ,x_winners_rec.terr_attribute8
        ,x_winners_rec.terr_attribute9
        ,x_winners_rec.terr_attribute10
        ,x_winners_rec.terr_attribute11
        ,x_winners_rec.terr_attribute12
        ,x_winners_rec.terr_attribute13
        ,x_winners_rec.terr_attribute14
        ,x_winners_rec.terr_attribute15
      FROM
        (
              /* WINNERS ILV */
              SELECT LX.trans_object_id
                   , LX.trans_detail_object_id
                   , LX.WIN_TERR_ID
                   , LX.txn_date
              FROM jtf_terr_results_GT_L1 LX
                 , ( SELECT trans_object_id
                          , trans_detail_object_id
                          , WIN_TERR_ID WIN_TERR_ID
                     FROM JTF_terr_results_GT_L1
                     MINUS
                     SELECT trans_object_id
                          , trans_detail_object_id
                          , ul_terr_id WIN_TERR_ID
                     FROM JTF_terr_results_GT_L2  ) ILV
              WHERE ( LX.trans_detail_object_id = ILV.trans_detail_object_id
                      OR
                      LX.trans_detail_object_id IS NULL )
                AND LX.trans_object_id = ILV.trans_object_id
                AND LX.WIN_TERR_ID = ILV.WIN_TERR_ID

              UNION ALL

              SELECT LX.trans_object_id
                   , LX.trans_detail_object_id
                   , LX.WIN_TERR_ID
                   , LX.txn_date
              FROM jtf_terr_results_GT_L2 LX
                 , ( SELECT trans_object_id
                          , trans_detail_object_id
                          , WIN_TERR_ID WIN_TERR_ID
                     FROM JTF_terr_results_GT_L2
                     MINUS
                     SELECT trans_object_id
                          , trans_detail_object_id
                          , ul_terr_id WIN_TERR_ID
                     FROM JTF_terr_results_GT_L3  ) ILV
              WHERE ( LX.trans_detail_object_id = ILV.trans_detail_object_id
                      OR
                      LX.trans_detail_object_id IS NULL )
                AND LX.trans_object_id = ILV.trans_object_id
                AND LX.WIN_TERR_ID = ILV.WIN_TERR_ID

              UNION ALL

              SELECT LX.trans_object_id
                   , LX.trans_detail_object_id
                   , LX.WIN_TERR_ID
                   , LX.txn_date
              FROM jtf_terr_results_GT_L3 LX
                 , ( SELECT trans_object_id
                          , trans_detail_object_id
                          , WIN_TERR_ID WIN_TERR_ID
                     FROM JTF_terr_results_GT_L3
                     MINUS
                     SELECT trans_object_id
                          , trans_detail_object_id
                          , ul_terr_id WIN_TERR_ID
                     FROM JTF_terr_results_GT_L4  ) ILV
              WHERE ( LX.trans_detail_object_id = ILV.trans_detail_object_id
                      OR
                      LX.trans_detail_object_id IS NULL )
                AND LX.trans_object_id = ILV.trans_object_id
                AND LX.WIN_TERR_ID = ILV.WIN_TERR_ID

              UNION ALL

              SELECT LX.trans_object_id
                   , LX.trans_detail_object_id
                   , LX.WIN_TERR_ID
                   , LX.txn_date
              FROM jtf_terr_results_GT_L4 LX
                 , ( SELECT trans_object_id
                          , trans_detail_object_id
                          , WIN_TERR_ID WIN_TERR_ID
                     FROM JTF_terr_results_GT_L4
                     MINUS
                     SELECT trans_object_id
                          , trans_detail_object_id
                          , ul_terr_id WIN_TERR_ID
                     FROM JTF_terr_results_GT_L5  ) ILV
              WHERE ( LX.trans_detail_object_id = ILV.trans_detail_object_id
                      OR
                      LX.trans_detail_object_id IS NULL )
                AND LX.trans_object_id = ILV.trans_object_id
                AND LX.WIN_TERR_ID = ILV.WIN_TERR_ID

              UNION ALL

              SELECT LX.trans_object_id
                   , LX.trans_detail_object_id
                   , LX.WIN_TERR_ID
                   , LX.txn_date
              FROM jtf_terr_results_GT_L5 LX
                 , ( SELECT trans_object_id
                          , trans_detail_object_id
                          , WIN_TERR_ID WIN_TERR_ID
                     FROM JTF_terr_results_GT_L5
                     MINUS
                     SELECT trans_object_id
                          , trans_detail_object_id
                          , ul_terr_id WIN_TERR_ID
                     FROM JTF_terr_results_GT_WT  ) ILV
              WHERE ( LX.trans_detail_object_id = ILV.trans_detail_object_id
                      OR
                      LX.trans_detail_object_id IS NULL )
                AND LX.trans_object_id = ILV.trans_object_id
                AND LX.WIN_TERR_ID = ILV.WIN_TERR_ID

              UNION ALL

              SELECT trans_object_id
                   , trans_detail_object_id
                   , WIN_TERR_ID
                   , txn_date
              FROM jtf_terr_results_GT_wt

        ) WINNERS
        , jtf_terr_all jta
      WHERE  WINNERS.win_terr_id = jta.terr_id
      AND    EXISTS (
               SELECT 1
               FROM
                   jtf_terr_rsc_all jtr
                 , jtf_terr_rsc_access_all jtra
                 , jtf_qual_types_all jqta
               WHERE  WINNERS.win_terr_id = jtr.terr_id
               AND jtr.end_date_active >= WINNERS.txn_date
               AND jtr.start_date_active <= WINNERS.txn_date
               AND jtr.resource_type <> 'RS_ROLE'
               AND jtr.terr_rsc_id = jtra.terr_rsc_id
               AND jtra.trans_access_code <> 'NONE'
               AND jtra.access_type = jqta.name
               AND (( p_role IS NULL ) OR ( jtr.role = p_role ))
               AND (( p_resource_type IS NULL) OR ( jtr.resource_type = p_resource_type ))
               AND jqta.qual_type_id = p_trans_id);

    ELSIF (p_mode LIKE '%LOOKUP') THEN
      SELECT /*+ PUSH_PRED(rsv) */ DISTINCT
         WINNERS.trans_object_id
        ,WINNERS.trans_detail_object_id
        ,WINNERS.txn_date
        ,WINNERS.win_terr_id
        ,jta.org_id
        ,jtr.person_id
        ,jta.start_date_active
        ,jta.end_date_active
        ,jtr.terr_rsc_id
        ,jta.name
        ,null top_level_terr_id
        ,jta.absolute_rank absolute_rank
        ,jtr.resource_id
        ,jtr.start_date_active
        ,jtr.end_date_active
        ,jtr.resource_type
        ,jtr.group_id
        ,role.role_id
        ,jtr.role
        ,decode(jtra.trans_access_code, 'FULL_ACCESS', 'Y', 'N')
        ,jtr.primary_contact_flag
        ,rsv.resource_name
        ,rsc.source_job_title resource_job_title
        ,rsc.source_phone resource_phone
        ,rsc.source_email resource_email
        ,rsc.source_mgr_name resource_mgr_name
        ,mgr.source_phone resource_mgr_phone
        ,mgr.source_email resource_mgr_email
        ,jta.name property1
        ,role.role_name property2
        ,jta_p.name property3
        ,rsc.attribute4 property4
        ,rsc.attribute5 property5
        ,rsc.attribute6 property6
        ,rsc.attribute7 property7
        ,rsc.attribute8 property8
        ,rsc.attribute9 property9
        ,rsc.attribute10 property10
        ,rsc.attribute11 property11
        ,rsc.attribute12 property12
        ,rsc.attribute13 property13
        ,rsc.attribute14 property14
        ,rsc.attribute15 property15
        ,jta.attribute_category terr_attr_category
        ,jta.attribute1 terr_attribute1
        ,jta.attribute2 terr_attribute2
        ,jta.attribute3 terr_attribute3
        ,jta.attribute4 terr_attribute4
        ,jta.attribute5 terr_attribute5
        ,jta.attribute6 terr_attribute6
        ,jta.attribute7 terr_attribute7
        ,jta.attribute8 terr_attribute8
        ,jta.attribute9 terr_attribute9
        ,jta.attribute10 terr_attribute10
        ,jta.attribute11 terr_attribute11
        ,jta.attribute12 terr_attribute12
        ,jta.attribute13 terr_attribute13
        ,jta.attribute14 terr_attribute14
        ,jta.attribute15 terr_attribute15
        ,jtr.attribute_category rsc_attr_category
        ,jtr.attribute1 rsc_attribute1
        ,jtr.attribute2 rsc_attribute2
        ,jtr.attribute3 rsc_attribute3
        ,jtr.attribute4 rsc_attribute4
        ,jtr.attribute5 rsc_attribute5
        ,jtr.attribute6 rsc_attribute6
        ,jtr.attribute7 rsc_attribute7
        ,jtr.attribute8 rsc_attribute8
        ,jtr.attribute9 rsc_attribute9
        ,jtr.attribute10 rsc_attribute10
        ,jtr.attribute11 rsc_attribute11
        ,jtr.attribute12 rsc_attribute12
        ,jtr.attribute13 rsc_attribute13
        ,jtr.attribute14 rsc_attribute14
        ,jtr.attribute15 rsc_attribute15
      BULK COLLECT INTO
         x_winners_rec.trans_object_id
        ,x_winners_rec.trans_detail_object_id
        ,x_winners_rec.txn_date
        ,x_winners_rec.terr_id
        ,x_winners_rec.org_id
        ,x_winners_rec.person_id
        ,x_winners_rec.terr_start_date
        ,x_winners_rec.terr_end_date
        ,x_winners_rec.terr_rsc_id
        ,x_winners_rec.terr_name
        ,x_winners_rec.top_level_terr_id
        ,x_winners_rec.absolute_rank
        ,x_winners_rec.resource_id
        ,x_winners_rec.rsc_start_date
        ,x_winners_rec.rsc_end_date
        ,x_winners_rec.resource_type
        ,x_winners_rec.group_id
        ,x_winners_rec.role_id
        ,x_winners_rec.role
        ,x_winners_rec.full_access_flag
        ,x_winners_rec.primary_contact_flag
        ,x_winners_rec.resource_name
        ,x_winners_rec.resource_job_title
        ,x_winners_rec.resource_phone
        ,x_winners_rec.resource_email
        ,x_winners_rec.resource_mgr_name
        ,x_winners_rec.resource_mgr_phone
        ,x_winners_rec.resource_mgr_email
        ,x_winners_rec.property1
        ,x_winners_rec.property2
        ,x_winners_rec.property3
        ,x_winners_rec.property4
        ,x_winners_rec.property5
        ,x_winners_rec.property6
        ,x_winners_rec.property7
        ,x_winners_rec.property8
        ,x_winners_rec.property9
        ,x_winners_rec.property10
        ,x_winners_rec.property11
        ,x_winners_rec.property12
        ,x_winners_rec.property13
        ,x_winners_rec.property14
        ,x_winners_rec.property15
        ,x_winners_rec.terr_attr_category
        ,x_winners_rec.terr_attribute1
        ,x_winners_rec.terr_attribute2
        ,x_winners_rec.terr_attribute3
        ,x_winners_rec.terr_attribute4
        ,x_winners_rec.terr_attribute5
        ,x_winners_rec.terr_attribute6
        ,x_winners_rec.terr_attribute7
        ,x_winners_rec.terr_attribute8
        ,x_winners_rec.terr_attribute9
        ,x_winners_rec.terr_attribute10
        ,x_winners_rec.terr_attribute11
        ,x_winners_rec.terr_attribute12
        ,x_winners_rec.terr_attribute13
        ,x_winners_rec.terr_attribute14
        ,x_winners_rec.terr_attribute15
        ,x_winners_rec.rsc_attr_category
        ,x_winners_rec.rsc_attribute1
        ,x_winners_rec.rsc_attribute2
        ,x_winners_rec.rsc_attribute3
        ,x_winners_rec.rsc_attribute4
        ,x_winners_rec.rsc_attribute5
        ,x_winners_rec.rsc_attribute6
        ,x_winners_rec.rsc_attribute7
        ,x_winners_rec.rsc_attribute8
        ,x_winners_rec.rsc_attribute9
        ,x_winners_rec.rsc_attribute10
        ,x_winners_rec.rsc_attribute11
        ,x_winners_rec.rsc_attribute12
        ,x_winners_rec.rsc_attribute13
        ,x_winners_rec.rsc_attribute14
        ,x_winners_rec.rsc_attribute15
      FROM
        (
              /* WINNERS ILV */
              SELECT LX.trans_object_id
                   , LX.trans_detail_object_id
                   , LX.WIN_TERR_ID
                   , LX.txn_date
              FROM jtf_terr_results_GT_L1 LX
                 , ( SELECT trans_object_id
                          , trans_detail_object_id
                          , WIN_TERR_ID WIN_TERR_ID
                     FROM JTF_terr_results_GT_L1
                     MINUS
                     SELECT trans_object_id
                          , trans_detail_object_id
                          , ul_terr_id WIN_TERR_ID
                     FROM JTF_terr_results_GT_L2  ) ILV
              WHERE ( LX.trans_detail_object_id = ILV.trans_detail_object_id
                      OR
                      LX.trans_detail_object_id IS NULL )
                AND LX.trans_object_id = ILV.trans_object_id
                AND LX.WIN_TERR_ID = ILV.WIN_TERR_ID

              UNION ALL

              SELECT LX.trans_object_id
                   , LX.trans_detail_object_id
                   , LX.WIN_TERR_ID
                   , LX.txn_date
              FROM jtf_terr_results_GT_L2 LX
                 , ( SELECT trans_object_id
                          , trans_detail_object_id
                          , WIN_TERR_ID WIN_TERR_ID
                     FROM JTF_terr_results_GT_L2
                     MINUS
                     SELECT trans_object_id
                          , trans_detail_object_id
                          , ul_terr_id WIN_TERR_ID
                     FROM JTF_terr_results_GT_L3  ) ILV
              WHERE ( LX.trans_detail_object_id = ILV.trans_detail_object_id
                      OR
                      LX.trans_detail_object_id IS NULL )
                AND LX.trans_object_id = ILV.trans_object_id
                AND LX.WIN_TERR_ID = ILV.WIN_TERR_ID

              UNION ALL

              SELECT LX.trans_object_id
                   , LX.trans_detail_object_id
                   , LX.WIN_TERR_ID
                   , LX.txn_date
              FROM jtf_terr_results_GT_L3 LX
                 , ( SELECT trans_object_id
                          , trans_detail_object_id
                          , WIN_TERR_ID WIN_TERR_ID
                     FROM JTF_terr_results_GT_L3
                     MINUS
                     SELECT trans_object_id
                          , trans_detail_object_id
                          , ul_terr_id WIN_TERR_ID
                     FROM JTF_terr_results_GT_L4  ) ILV
              WHERE ( LX.trans_detail_object_id = ILV.trans_detail_object_id
                      OR
                      LX.trans_detail_object_id IS NULL )
                AND LX.trans_object_id = ILV.trans_object_id
                AND LX.WIN_TERR_ID = ILV.WIN_TERR_ID

              UNION ALL

              SELECT LX.trans_object_id
                   , LX.trans_detail_object_id
                   , LX.WIN_TERR_ID
                   , LX.txn_date
              FROM jtf_terr_results_GT_L4 LX
                 , ( SELECT trans_object_id
                          , trans_detail_object_id
                          , WIN_TERR_ID WIN_TERR_ID
                     FROM JTF_terr_results_GT_L4
                     MINUS
                     SELECT trans_object_id
                          , trans_detail_object_id
                          , ul_terr_id WIN_TERR_ID
                     FROM JTF_terr_results_GT_L5  ) ILV
              WHERE ( LX.trans_detail_object_id = ILV.trans_detail_object_id
                      OR
                      LX.trans_detail_object_id IS NULL )
                AND LX.trans_object_id = ILV.trans_object_id
                AND LX.WIN_TERR_ID = ILV.WIN_TERR_ID

              UNION ALL

              SELECT LX.trans_object_id
                   , LX.trans_detail_object_id
                   , LX.WIN_TERR_ID
                   , LX.txn_date
              FROM jtf_terr_results_GT_L5 LX
                 , ( SELECT trans_object_id
                          , trans_detail_object_id
                          , WIN_TERR_ID WIN_TERR_ID
                     FROM JTF_terr_results_GT_L5
                     MINUS
                     SELECT trans_object_id
                          , trans_detail_object_id
                          , ul_terr_id WIN_TERR_ID
                     FROM JTF_terr_results_GT_WT  ) ILV
              WHERE ( LX.trans_detail_object_id = ILV.trans_detail_object_id
                      OR
                      LX.trans_detail_object_id IS NULL )
                AND LX.trans_object_id = ILV.trans_object_id
                AND LX.WIN_TERR_ID = ILV.WIN_TERR_ID

              UNION ALL

              SELECT trans_object_id
                   , trans_detail_object_id
                   , WIN_TERR_ID
                   , txn_date
              FROM jtf_terr_results_GT_wt

        ) WINNERS
        , jtf_terr_all jta
        , jtf_terr_all jta_p
        , jtf_terr_rsc_all jtr
        , jtf_terr_rsc_access_all jtra
        , jtf_qual_types_all jqta
        , (select a.group_id resource_id, a.group_name resource_name, 'RS_GROUP' resource_type
           from   jtf_rs_groups_tl a
           where  a.language = userenv('LANG')
           union all
           select a.team_id resource_id, a.team_name resource_name, 'RS_TEAM' resource_type
           from   jtf_rs_teams_tl a
           where  a.language = userenv('LANG')
           union all
           select a.resource_id resource_id, a.resource_name resource_name,
                     decode(a.category ,'EMPLOYEE', 'RS_EMPLOYEE','PARTNER', 'RS_PARTNER','SUPPLIER_CONTACT',
			                      'RS_SUPPLIER_CONTACT' , 'PARTY', 'RS_PARTY' , 'OTHER',
						          'RS_OTHER', 'TBH', 'RS_TBH') RESOURCE_TYPE
           from  jtf_rs_resource_extns_tl a
           where a.language = userenv('LANG')
           ) rsv
        , jtf_rs_resource_extns rsc
        , jtf_rs_resource_extns mgr
        , jtf_rs_roles_vl role
      WHERE  WINNERS.win_terr_id = jta.terr_id
      AND    WINNERS.win_terr_id = jtr.terr_id
      AND jtr.end_date_active >= WINNERS.txn_date
      AND jtr.start_date_active <= WINNERS.txn_date
      AND jtr.resource_type <> 'RS_ROLE'
      AND jtr.terr_rsc_id = jtra.terr_rsc_id
      AND jtra.trans_access_code <> 'NONE'
      AND jtra.access_type = jqta.name
      AND (( p_role IS NULL ) OR ( jtr.role = p_role ))
      AND (( p_resource_type IS NULL) OR ( jtr.resource_type = p_resource_type ))
      AND jqta.qual_type_id = p_trans_id
      AND jtr.resource_id = rsv.resource_id
      AND jtr.resource_type = rsv.resource_type
      AND decode(jtr.resource_type, 'RS_EMPLOYEE', jtr.resource_id, -999) = rsc.resource_id(+)
      AND rsc.source_mgr_id = mgr.source_id(+)
      AND rsc.category = mgr.category(+)
      AND jta.parent_territory_id = jta_p.terr_id
      AND jtr.role = role.role_code(+);

    END IF;

  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      NULL;
  END;

  IF (x_winners_rec.trans_object_id.COUNT > 0) THEN
    x_winners_rec.use_type := p_mode;
    x_winners_rec.source_id := p_source_id;
    x_winners_rec.trans_id := p_trans_id;
  END IF;

  -- debug message
  IF (FND_LOG.LEVEL_EVENT >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    FND_LOG.string(FND_LOG.LEVEL_EVENT,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.multi_level_winning_process.winners',
                   'Number of winning territories : ' || x_winners_rec.trans_object_id.COUNT);
  END IF;

  -- debug message
  IF (FND_LOG.LEVEL_PROCEDURE >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    FND_LOG.string(FND_LOG.LEVEL_PROCEDURE,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.multi_level_winning_process.end',
                   'End of the procedure JTY_ASSIGN_REALTIME_PUB.multi_level_winning_process');
  END IF;

EXCEPTION

  WHEN FND_API.G_EXC_ERROR THEN
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.multi_level_winning_process.other',
                     substr(x_msg_data, 1, 4000));
    END IF;

  WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
    x_msg_data := SQLCODE || ' : ' || SQLERRM;
    x_msg_count := 1;
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.multi_level_winning_process.other',
                     substr(x_msg_data, 1, 4000));
    END IF;
END multi_level_winning_process;


/* this procedure gets the winning territories of the transaction ojects */
PROCEDURE process_winners
(   p_source_id                IN          NUMBER,
    p_trans_id                 IN          NUMBER,
    p_program_name             IN          VARCHAR2,
    p_mode                     IN          VARCHAR2,
    p_role                     IN          VARCHAR2,
    p_resource_type            IN          VARCHAR2,
    p_plan_start_date          IN          DATE DEFAULT NULL,
    p_plan_end_date            IN          DATE DEFAULT NULL,
    x_return_status            OUT NOCOPY  VARCHAR2,
    x_msg_count                OUT NOCOPY  NUMBER,
    x_msg_data                 OUT NOCOPY  VARCHAR2,
    x_winners_rec              OUT NOCOPY  bulk_winners_rec_type
) AS

  l_multi_level_winning_flag  VARCHAR2(1);

BEGIN

  -- debug message
  IF (FND_LOG.LEVEL_PROCEDURE >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    FND_LOG.string(FND_LOG.LEVEL_PROCEDURE,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.process_winners.begin',
                   'Start of the procedure JTY_ASSIGN_REALTIME_PUB.process_winners');
  END IF;

  x_return_status := FND_API.G_RET_STS_SUCCESS;

  /* Get the multi level winning flag corresponding  */
  /* to the usage, transaction type and program name */
  SELECT tup.multi_level_winning_flag
  INTO   l_multi_level_winning_flag
  FROM   jty_trans_usg_pgm_details tup
  WHERE  tup.source_id     = p_source_id
  AND    tup.trans_type_id = p_trans_id
  AND    tup.program_name  = p_program_name;

  -- debug message
  IF (FND_LOG.LEVEL_STATEMENT >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    FND_LOG.string(FND_LOG.LEVEL_STATEMENT,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.process_winners.winning_flag',
                   'Value of multi level winning flag : ' || l_multi_level_winning_flag);
  END IF;

  IF (l_multi_level_winning_flag = 'Y') THEN
    multi_level_winning_process (
      p_source_id     => p_source_id
     ,p_trans_id      => p_trans_id
     ,p_mode          => p_mode
     ,p_role          => p_role
     ,p_resource_type => p_resource_type
     ,x_return_status => x_return_status
     ,x_msg_count     => x_msg_count
     ,x_msg_data      => x_msg_data
     ,x_winners_rec   => x_winners_rec);
  ELSE
    single_level_winning_process (
      p_source_id     => p_source_id
     ,p_trans_id      => p_trans_id
     ,p_mode          => p_mode
     ,p_role          => p_role
     ,p_resource_type => p_resource_type
     ,p_plan_start_date => p_plan_start_date
     ,p_plan_end_date   => p_plan_end_date
     ,x_return_status => x_return_status
     ,x_msg_count     => x_msg_count
     ,x_msg_data      => x_msg_data
     ,x_winners_rec   => x_winners_rec);
  END IF;

  IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
    -- debug message
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.process_winners.winning_process',
                     'JTY_ASSIGN_REALTIME_PUB.winning_process API has failed');
    END IF;

    RAISE FND_API.G_EXC_ERROR;
  END IF;

  -- debug message
  IF (FND_LOG.LEVEL_PROCEDURE >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    FND_LOG.string(FND_LOG.LEVEL_PROCEDURE,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.process_winners.end',
                   'End of the procedure JTY_ASSIGN_REALTIME_PUB.process_winners');
  END IF;

EXCEPTION

  WHEN FND_API.G_EXC_ERROR THEN
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.process_winners.g_exc_error',
                     x_msg_data);
    END IF;

  WHEN NO_DATA_FOUND THEN
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    x_msg_data := 'No record in the table jty_trans_usg_pgm_details for the usage : ' || p_source_id ||
                  ', transaction type : ' || p_trans_id || ' and program name : ' || p_program_name;
    x_msg_count := 1;
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.process_winners.no_data_found_error',
                     x_msg_data);
    END IF;

  WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
    x_msg_data := SQLCODE || ' : ' || SQLERRM;
    x_msg_count := 1;
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.process_winners.other',
                     substr(x_msg_data, 1, 4000));
    END IF;
End  process_winners;

/* product team should call this procedure, which first find out the matching */
/* territories and then the winning territories from the matching set         */
PROCEDURE get_winners
(   p_api_version_number       IN          NUMBER,
    p_init_msg_list            IN          VARCHAR2,
    p_source_id                IN          NUMBER,
    p_trans_id                 IN          NUMBER,
    p_mode                     IN          VARCHAR2,
    p_param_passing_mechanism  IN          VARCHAR2,
    p_program_name             IN          VARCHAR2,
    p_trans_rec                IN          bulk_trans_id_type,
    p_name_value_pair          IN          bulk_name_value_pair_type,
    p_role                     IN          VARCHAR2,
    p_resource_type            IN          VARCHAR2,
    x_return_status            OUT NOCOPY  VARCHAR2,
    x_msg_count                OUT NOCOPY  NUMBER,
    x_msg_data                 OUT NOCOPY  VARCHAR2,
    x_winners_rec              OUT NOCOPY  bulk_winners_rec_type
) AS

  l_api_name           CONSTANT VARCHAR2(30) := 'get_winners';
  l_api_version_number CONSTANT NUMBER       := 1.0;

  NO_TXN_SQL_ERROR      EXCEPTION;
  NO_TRANS_TABLE_ERROR  EXCEPTION;
  INVALID_PRM_PSS_MCH   EXCEPTION;

  l_real_time_trans_table_name  VARCHAR2(30);
  l_delete_stmt                 VARCHAR2(100);
  l_debug_stmt                  VARCHAR2(100);
  l_trans_no_of_records         NUMBER;
  l_insert_stmt                 VARCHAR2(32767);
  l_plsql_block                 VARCHAR2(32767);
  l_trans_rec_records           NUMBER;
  l_nvp_records                 NUMBER;
  l_sysdate                     DATE;

BEGIN

  -- debug message
  IF (FND_LOG.LEVEL_PROCEDURE >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    FND_LOG.string(FND_LOG.LEVEL_PROCEDURE,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.get_winners.begin',
                   'Start of the procedure JTY_ASSIGN_REALTIME_PUB.get_winners');
  END IF;

  -- Standard call to check for call compatibility.
  IF NOT FND_API.Compatible_API_Call ( l_api_version_number,
                                       p_api_version_number,
                                       l_api_name,
                                       G_PKG_NAME)  THEN

    RAISE FND_API.G_EXC_UNEXPECTED_ERROR;
  END IF;

  -- Initialize message list if p_init_msg_list is set to TRUE.
  IF FND_API.to_Boolean( p_init_msg_list ) THEN
    FND_MSG_PUB.initialize;
  END IF;

  x_return_status     := FND_API.G_RET_STS_SUCCESS;
  l_sysdate           := SYSDATE;
  l_trans_rec_records := 0;
  l_nvp_records       := 0;


  /* In case of pass by reference, get the number of transaction objects              */
  /* In case of pass by value, get the number of attributes of the transaction object */
  IF (p_param_passing_mechanism = 'PBR') THEN
    l_trans_rec_records := p_trans_rec.trans_object_id1.COUNT();
  ELSE
    l_nvp_records := p_name_value_pair.attribute_name.COUNT();
  END IF;

  -- debug message
  IF (FND_LOG.LEVEL_STATEMENT >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    FND_LOG.string(FND_LOG.LEVEL_STATEMENT,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.get_winners.parameters',
                   'Source : ' || p_source_id || ' Transaction Type : ' || p_trans_id || ' Program Name : ' || p_program_name ||
                   ' Mode : ' || p_mode || ' Parameter passing Mechanism : ' || p_param_passing_mechanism ||
                   ' Role : ' || p_role || ' Resource Type : ' || p_resource_type);

    IF (p_mode = 'PBR') THEN
      IF (l_trans_rec_records > 0) THEN
        FOR i IN p_trans_rec.trans_object_id1.FIRST .. p_trans_rec.trans_object_id1.LAST LOOP
          FND_LOG.string(FND_LOG.LEVEL_STATEMENT,
                         'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.get_winners.parameters',
                         'PK1 : ' || p_trans_rec.trans_object_id1(i) || ' PK2 : ' || p_trans_rec.trans_object_id2(i) ||
                         ' PK3 : ' || p_trans_rec.trans_object_id3(i) || ' PK4 : ' || p_trans_rec.trans_object_id4(i) ||
                         ' PK5 : ' || p_trans_rec.trans_object_id5(i) || ' Txn Date : ' || p_trans_rec.txn_date(i));
        END LOOP;
      ELSE
          FND_LOG.string(FND_LOG.LEVEL_STATEMENT,
                         'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.get_winners.parameters',
                         'No transaction object passed');
      END IF; /* end IF (l_trans_rec_records > 0) */
    ELSE
      IF (l_nvp_records > 0) THEN
        FOR i IN p_name_value_pair.attribute_name.FIRST ..  p_name_value_pair.attribute_name.LAST LOOP
          FND_LOG.string(FND_LOG.LEVEL_STATEMENT,
                         'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.get_winners.parameters',
                         'Attribute Name : ' ||  p_name_value_pair.attribute_name(i) || ' NumberValue : ' || p_name_value_pair.num_value(i)
                         || ' Char Value : ' || p_name_value_pair.char_value(i) || ' Date Value : ' || p_name_value_pair.date_value(i));
        END LOOP;
      ELSE
          FND_LOG.string(FND_LOG.LEVEL_STATEMENT,
                         'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.get_winners.parameters',
                         'No attribute name value pair passed');
      END IF; /* end IF (l_nvp_records > 0) */
    END IF; /* end IF (p_mode = 'PBR') */
  END IF; /* end IF (FND_LOG.LEVEL_STATEMENT >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) */

  /* Get the real time trans table corresponding     */
  /* to the usage, transaction type and program name */
  BEGIN
    SELECT tup.real_time_trans_table_name
    INTO   l_real_time_trans_table_name
    FROM   jty_trans_usg_pgm_details tup
    WHERE  tup.source_id     = p_source_id
    AND    tup.trans_type_id = p_trans_id
    AND    tup.program_name  = p_program_name;

    IF (l_real_time_trans_table_name IS NULL) THEN
      RAISE NO_TRANS_TABLE_ERROR;
    END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE NO_TRANS_TABLE_ERROR;

    WHEN OTHERS THEN
      RAISE;
  END;

  -- debug message
  IF (FND_LOG.LEVEL_STATEMENT >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    FND_LOG.string(FND_LOG.LEVEL_STATEMENT,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.get_winners.real_time_trans_table',
                   'Real Time Trans Table for the usage, transaction type and program: ' || l_real_time_trans_table_name);
  END IF;

  /* Truncate the real time trans table, a global temporary table       */
  /* Delete stmt is used instead of truncate as # of rows will be small */
  l_delete_stmt := 'DELETE FROM ' || l_real_time_trans_table_name;
  EXECUTE IMMEDIATE l_delete_stmt;

  /* Code to insert the transaction objects into TRANS table */
  IF (p_param_passing_mechanism = 'PBR') THEN  -- if parameter passing mechanism is pass by reference
    BEGIN
      SELECT  tups.real_time_insert
      INTO    l_insert_stmt
      FROM    jty_trans_usg_pgm_sql tups
      WHERE   tups.source_id     = p_source_id
      AND     tups.trans_type_id = p_trans_id
      AND     tups.program_name  = p_program_name
      AND     tups.enabled_flag  = 'Y';

      IF (l_insert_stmt IS NULL) THEN
        RAISE NO_TXN_SQL_ERROR;
      END IF;

      -- debug message
      IF (FND_LOG.LEVEL_STATEMENT >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
        FND_LOG.string(FND_LOG.LEVEL_STATEMENT,
                       'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.get_winners.transaction_type_sql',
                       substr(l_insert_stmt, 1, 4000));
      END IF;

      /* Dynammic pl/sql block to bind the PK values and execute the insert statement */
      l_plsql_block :=
        'declare ' ||
          'l_trans_object_id1 number; ' ||
          'l_trans_object_id2 number; ' ||
          'l_trans_object_id3 number; ' ||
          'l_trans_object_id4 number; ' ||
          'l_trans_object_id5 number; ' ||
          'l_txn_date         date; ' ||
        'begin ' ||
          'l_trans_object_id1 := :1; ' ||
          'l_trans_object_id2 := :2; ' ||
          'l_trans_object_id3 := :3; ' ||
          'l_trans_object_id4 := :4; ' ||
          'l_trans_object_id5 := :5; ' ||
          'l_txn_date         := :6; ' ||

          l_insert_stmt ||

        'exception ' ||
          'when others then raise; ' ||
        'end; ';

      IF (p_mode LIKE 'REAL TIME%') THEN
        FOR i IN p_trans_rec.trans_object_id1.FIRST .. p_trans_rec.trans_object_id1.LAST LOOP
          EXECUTE IMMEDIATE l_plsql_block USING
                                 p_trans_rec.trans_object_id1(i),
                                 p_trans_rec.trans_object_id2(i),
                                 p_trans_rec.trans_object_id3(i),
                                 p_trans_rec.trans_object_id4(i),
                                 p_trans_rec.trans_object_id5(i),
                                 l_sysdate;
        END LOOP;
      ELSIF (p_mode LIKE 'DATE EFFECTIVE%') THEN
        FOR i IN p_trans_rec.trans_object_id1.FIRST .. p_trans_rec.trans_object_id1.LAST LOOP
          EXECUTE IMMEDIATE l_plsql_block USING
                                 p_trans_rec.trans_object_id1(i),
                                 p_trans_rec.trans_object_id2(i),
                                 p_trans_rec.trans_object_id3(i),
                                 p_trans_rec.trans_object_id4(i),
                                 p_trans_rec.trans_object_id5(i),
                                 p_trans_rec.txn_date(i);
        END LOOP;
      END IF;

      -- debug message
      IF (FND_LOG.LEVEL_EVENT >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
        l_debug_stmt := 'SELECT COUNT(*) FROM ' || l_real_time_trans_table_name;
        EXECUTE IMMEDIATE l_debug_stmt INTO l_trans_no_of_records;

        FND_LOG.string(FND_LOG.LEVEL_EVENT,
                       'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.get_winners.insert_trans_data_pbr',
                       'Number of records inserted into TRANS table : ' || l_trans_no_of_records);
      END IF;


    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE NO_TXN_SQL_ERROR;

      WHEN OTHERS THEN
        RAISE;
    END;

  ELSIF (p_param_passing_mechanism = 'PBV') THEN  -- if parameter passing mechanism is pass by value
    FORALL i IN p_name_value_pair.attribute_name.FIRST .. p_name_value_pair.attribute_name.LAST
      INSERT INTO jty_terr_nvp_trans_gt (
         attribute_name
        ,char_value
        ,num_value
        ,date_value )
      VALUES (
         p_name_value_pair.attribute_name(i)
        ,p_name_value_pair.char_value(i)
        ,p_name_value_pair.num_value(i)
        ,p_name_value_pair.date_value(i));

    -- debug message
    IF (FND_LOG.LEVEL_EVENT >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      SELECT COUNT(*)
      INTO   l_trans_no_of_records
      FROM   jty_terr_nvp_trans_gt;

      FND_LOG.string(FND_LOG.LEVEL_EVENT,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.get_winners.insert_trans_data_pbv',
                     'Number of records inserted into TRANS table : ' || l_trans_no_of_records);
    END IF;

  ELSE
    RAISE INVALID_PRM_PSS_MCH;
  END IF; -- end IF (p_param_passing_mechanism = 'PBR')

  /* get the matching territories corresponding to the transaction objects */
  process_match (
    p_source_id     => p_source_id,
    p_trans_id      => p_trans_id,
    p_mode          => p_mode,
    p_program_name  => p_program_name,
    x_return_status => x_return_status,
    x_msg_count     => x_msg_count,
    x_msg_data      => x_msg_data
  );

  IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
    -- debug message
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.get_winners.process_match',
                     'JTY_ASSIGN_REALTIME_PUB.process_match API has failed');
    END IF;

    RAISE FND_API.G_EXC_ERROR;
  END IF;

  -- debug message
  IF (FND_LOG.LEVEL_STATEMENT >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    FND_LOG.string(FND_LOG.LEVEL_STATEMENT,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.get_winners.process_match',
                   'Finish calling procedure process_match');
  END IF;

  /* get the winning territories/resources corresponding to the transaction objects */
  process_winners (
    p_source_id     => p_source_id,
    p_trans_id      => p_trans_id,
    p_program_name  => p_program_name,
    p_mode          => p_mode,
    p_role          => p_role,
    p_resource_type => p_resource_type,
    x_return_status => x_return_status,
    x_msg_count     => x_msg_count,
    x_msg_data      => x_msg_data,
    x_winners_rec   => x_winners_rec
  );

  IF (x_return_status <> FND_API.G_RET_STS_SUCCESS) THEN
    -- debug message
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.get_winners.process_winners',
                     'JTY_ASSIGN_REALTIME_PUB.process_winners API has failed');
    END IF;

    RAISE FND_API.G_EXC_ERROR;
  END IF;

  -- debug message
  IF (FND_LOG.LEVEL_STATEMENT >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    FND_LOG.string(FND_LOG.LEVEL_STATEMENT,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.get_winners.process_winners',
                     'Finish calling procedure process_winners');
  END IF;

  -- debug message
  IF (FND_LOG.LEVEL_PROCEDURE >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
    FND_LOG.string(FND_LOG.LEVEL_PROCEDURE,
                   'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.get_winners.end',
                   'End of the procedure JTY_ASSIGN_REALTIME_PUB.get_winners');
  END IF;

EXCEPTION
  WHEN FND_API.G_EXC_ERROR THEN
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.get_winners.g_exc_error',
                     x_msg_data);
    END IF;


  WHEN INVALID_PRM_PSS_MCH THEN
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    x_msg_data := 'Invalid Parameter Passing Mechanism : valid values are PBR and PBV';
    x_msg_count := 1;
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.get_winners.invalid_prm_pss_mch',
                     x_msg_data);
    END IF;


  WHEN NO_TXN_SQL_ERROR THEN
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    x_msg_data := 'Invalid real time transaction SQL for usage : ' || p_source_id ||
                  ', transaction type : ' || p_trans_id || ' and program name : ' || p_program_name;
    x_msg_count := 1;
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.get_winners.no_txn_sql_error',
                     x_msg_data);
    END IF;

  WHEN NO_TRANS_TABLE_ERROR THEN
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR;
    x_msg_data := 'Invalid real time trans table for usage : ' || p_source_id ||
                  ', transaction type : ' || p_trans_id || ' and program name : ' || p_program_name;
    x_msg_count := 1;
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.get_winners.no_trans_table_error',
                     x_msg_data);
    END IF;

  WHEN OTHERS THEN
    x_return_status := FND_API.G_RET_STS_UNEXP_ERROR ;
    x_msg_data := SQLCODE || ' : ' || SQLERRM;
    x_msg_count := 1;
    IF (FND_LOG.LEVEL_EXCEPTION >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
      FND_LOG.string(FND_LOG.LEVEL_EXCEPTION,
                     'jtf.plsql.JTY_ASSIGN_REALTIME_PUB.get_winners.other',
                     substr(x_msg_data, 1, 4000));
    END IF;

End  get_winners;

END JTY_ASSIGN_REALTIME_PUB;

/
