--------------------------------------------------------
--  DDL for Package Body AHL_SIMULATION_PLANS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AHL_SIMULATION_PLANS_PKG" as
/* $Header: AHLLSPNB.pls 115.5 2003/04/02 19:11:56 ssurapan noship $ */
procedure INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_SIMULATION_PLAN_ID in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_PRIMARY_PLAN_FLAG in VARCHAR2,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_SIMULATION_PLAN_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from AHL_SIMULATION_PLANS_B
    where SIMULATION_PLAN_ID = X_SIMULATION_PLAN_ID
    ;
begin
  insert into AHL_SIMULATION_PLANS_B (
    SIMULATION_PLAN_ID,
    OBJECT_VERSION_NUMBER,
    PRIMARY_PLAN_FLAG,
    ATTRIBUTE_CATEGORY,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_SIMULATION_PLAN_ID,
    X_OBJECT_VERSION_NUMBER,
    X_PRIMARY_PLAN_FLAG,
    X_ATTRIBUTE_CATEGORY,
    X_ATTRIBUTE1,
    X_ATTRIBUTE2,
    X_ATTRIBUTE3,
    X_ATTRIBUTE4,
    X_ATTRIBUTE5,
    X_ATTRIBUTE6,
    X_ATTRIBUTE7,
    X_ATTRIBUTE8,
    X_ATTRIBUTE9,
    X_ATTRIBUTE10,
    X_ATTRIBUTE11,
    X_ATTRIBUTE12,
    X_ATTRIBUTE13,
    X_ATTRIBUTE14,
    X_ATTRIBUTE15,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );

  insert into AHL_SIMULATION_PLANS_TL (
    SIMULATION_PLAN_ID,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_LOGIN,
    SIMULATION_PLAN_NAME,
    DESCRIPTION,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_SIMULATION_PLAN_ID,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_SIMULATION_PLAN_NAME,
    X_DESCRIPTION,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from AHL_SIMULATION_PLANS_TL T
    where T.SIMULATION_PLAN_ID = X_SIMULATION_PLAN_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  X_SIMULATION_PLAN_ID in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_PRIMARY_PLAN_FLAG in VARCHAR2,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_SIMULATION_PLAN_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2
) is
  cursor c is select
      OBJECT_VERSION_NUMBER,
      PRIMARY_PLAN_FLAG,
      ATTRIBUTE_CATEGORY,
      ATTRIBUTE1,
      ATTRIBUTE2,
      ATTRIBUTE3,
      ATTRIBUTE4,
      ATTRIBUTE5,
      ATTRIBUTE6,
      ATTRIBUTE7,
      ATTRIBUTE8,
      ATTRIBUTE9,
      ATTRIBUTE10,
      ATTRIBUTE11,
      ATTRIBUTE12,
      ATTRIBUTE13,
      ATTRIBUTE14,
      ATTRIBUTE15
    from AHL_SIMULATION_PLANS_B
    where SIMULATION_PLAN_ID = X_SIMULATION_PLAN_ID
    for update of SIMULATION_PLAN_ID nowait;
  recinfo c%rowtype;

  cursor c1 is select
      SIMULATION_PLAN_NAME,
      DESCRIPTION,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from AHL_SIMULATION_PLANS_TL
    where SIMULATION_PLAN_ID = X_SIMULATION_PLAN_ID
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    for update of SIMULATION_PLAN_ID nowait;
begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (    (recinfo.OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER)
      AND (recinfo.PRIMARY_PLAN_FLAG = X_PRIMARY_PLAN_FLAG)
      AND ((recinfo.ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY)
           OR ((recinfo.ATTRIBUTE_CATEGORY is null) AND (X_ATTRIBUTE_CATEGORY is null)))
      AND ((recinfo.ATTRIBUTE1 = X_ATTRIBUTE1)
           OR ((recinfo.ATTRIBUTE1 is null) AND (X_ATTRIBUTE1 is null)))
      AND ((recinfo.ATTRIBUTE2 = X_ATTRIBUTE2)
           OR ((recinfo.ATTRIBUTE2 is null) AND (X_ATTRIBUTE2 is null)))
      AND ((recinfo.ATTRIBUTE3 = X_ATTRIBUTE3)
           OR ((recinfo.ATTRIBUTE3 is null) AND (X_ATTRIBUTE3 is null)))
      AND ((recinfo.ATTRIBUTE4 = X_ATTRIBUTE4)
           OR ((recinfo.ATTRIBUTE4 is null) AND (X_ATTRIBUTE4 is null)))
      AND ((recinfo.ATTRIBUTE5 = X_ATTRIBUTE5)
           OR ((recinfo.ATTRIBUTE5 is null) AND (X_ATTRIBUTE5 is null)))
      AND ((recinfo.ATTRIBUTE6 = X_ATTRIBUTE6)
           OR ((recinfo.ATTRIBUTE6 is null) AND (X_ATTRIBUTE6 is null)))
      AND ((recinfo.ATTRIBUTE7 = X_ATTRIBUTE7)
           OR ((recinfo.ATTRIBUTE7 is null) AND (X_ATTRIBUTE7 is null)))
      AND ((recinfo.ATTRIBUTE8 = X_ATTRIBUTE8)
           OR ((recinfo.ATTRIBUTE8 is null) AND (X_ATTRIBUTE8 is null)))
      AND ((recinfo.ATTRIBUTE9 = X_ATTRIBUTE9)
           OR ((recinfo.ATTRIBUTE9 is null) AND (X_ATTRIBUTE9 is null)))
      AND ((recinfo.ATTRIBUTE10 = X_ATTRIBUTE10)
           OR ((recinfo.ATTRIBUTE10 is null) AND (X_ATTRIBUTE10 is null)))
      AND ((recinfo.ATTRIBUTE11 = X_ATTRIBUTE11)
           OR ((recinfo.ATTRIBUTE11 is null) AND (X_ATTRIBUTE11 is null)))
      AND ((recinfo.ATTRIBUTE12 = X_ATTRIBUTE12)
           OR ((recinfo.ATTRIBUTE12 is null) AND (X_ATTRIBUTE12 is null)))
      AND ((recinfo.ATTRIBUTE13 = X_ATTRIBUTE13)
           OR ((recinfo.ATTRIBUTE13 is null) AND (X_ATTRIBUTE13 is null)))
      AND ((recinfo.ATTRIBUTE14 = X_ATTRIBUTE14)
           OR ((recinfo.ATTRIBUTE14 is null) AND (X_ATTRIBUTE14 is null)))
      AND ((recinfo.ATTRIBUTE15 = X_ATTRIBUTE15)
           OR ((recinfo.ATTRIBUTE15 is null) AND (X_ATTRIBUTE15 is null)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    (tlinfo.SIMULATION_PLAN_NAME = X_SIMULATION_PLAN_NAME)
          AND ((tlinfo.DESCRIPTION = X_DESCRIPTION)
               OR ((tlinfo.DESCRIPTION is null) AND (X_DESCRIPTION is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_SIMULATION_PLAN_ID in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_PRIMARY_PLAN_FLAG in VARCHAR2,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_SIMULATION_PLAN_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update AHL_SIMULATION_PLANS_B set
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    PRIMARY_PLAN_FLAG = X_PRIMARY_PLAN_FLAG,
    ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY,
    ATTRIBUTE1 = X_ATTRIBUTE1,
    ATTRIBUTE2 = X_ATTRIBUTE2,
    ATTRIBUTE3 = X_ATTRIBUTE3,
    ATTRIBUTE4 = X_ATTRIBUTE4,
    ATTRIBUTE5 = X_ATTRIBUTE5,
    ATTRIBUTE6 = X_ATTRIBUTE6,
    ATTRIBUTE7 = X_ATTRIBUTE7,
    ATTRIBUTE8 = X_ATTRIBUTE8,
    ATTRIBUTE9 = X_ATTRIBUTE9,
    ATTRIBUTE10 = X_ATTRIBUTE10,
    ATTRIBUTE11 = X_ATTRIBUTE11,
    ATTRIBUTE12 = X_ATTRIBUTE12,
    ATTRIBUTE13 = X_ATTRIBUTE13,
    ATTRIBUTE14 = X_ATTRIBUTE14,
    ATTRIBUTE15 = X_ATTRIBUTE15,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where SIMULATION_PLAN_ID = X_SIMULATION_PLAN_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update AHL_SIMULATION_PLANS_TL set
    SIMULATION_PLAN_NAME = X_SIMULATION_PLAN_NAME,
    DESCRIPTION = X_DESCRIPTION,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where SIMULATION_PLAN_ID = X_SIMULATION_PLAN_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_SIMULATION_PLAN_ID in NUMBER
) is
begin
  delete from AHL_SIMULATION_PLANS_TL
  where SIMULATION_PLAN_ID = X_SIMULATION_PLAN_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from AHL_SIMULATION_PLANS_B
  where SIMULATION_PLAN_ID = X_SIMULATION_PLAN_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
  delete from AHL_SIMULATION_PLANS_TL T
  where not exists
    (select NULL
    from AHL_SIMULATION_PLANS_B B
    where B.SIMULATION_PLAN_ID = T.SIMULATION_PLAN_ID
    );

  update AHL_SIMULATION_PLANS_TL T set (
      SIMULATION_PLAN_NAME,
      DESCRIPTION
    ) = (select
      B.SIMULATION_PLAN_NAME,
      B.DESCRIPTION
    from AHL_SIMULATION_PLANS_TL B
    where B.SIMULATION_PLAN_ID = T.SIMULATION_PLAN_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.SIMULATION_PLAN_ID,
      T.LANGUAGE
  ) in (select
      SUBT.SIMULATION_PLAN_ID,
      SUBT.LANGUAGE
    from AHL_SIMULATION_PLANS_TL SUBB, AHL_SIMULATION_PLANS_TL SUBT
    where SUBB.SIMULATION_PLAN_ID = SUBT.SIMULATION_PLAN_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.SIMULATION_PLAN_NAME <> SUBT.SIMULATION_PLAN_NAME
      or SUBB.DESCRIPTION <> SUBT.DESCRIPTION
      or (SUBB.DESCRIPTION is null and SUBT.DESCRIPTION is not null)
      or (SUBB.DESCRIPTION is not null and SUBT.DESCRIPTION is null)
  ));

  insert into AHL_SIMULATION_PLANS_TL (
    SIMULATION_PLAN_ID,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_LOGIN,
    SIMULATION_PLAN_NAME,
    DESCRIPTION,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.SIMULATION_PLAN_ID,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATED_BY,
    B.CREATION_DATE,
    B.CREATED_BY,
    B.LAST_UPDATE_LOGIN,
    B.SIMULATION_PLAN_NAME,
    B.DESCRIPTION,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from AHL_SIMULATION_PLANS_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from AHL_SIMULATION_PLANS_TL T
    where T.SIMULATION_PLAN_ID = B.SIMULATION_PLAN_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

PROCEDURE LOAD_ROW (
  X_SIMULATION_PLAN_ID in NUMBER,
  X_OBJECT_VERSION_NUMBER  in NUMBER,
  X_PRIMARY_PLAN_FLAG  in VARCHAR2,
  X_SIMULATION_PLAN_NAME in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_OWNER       in    VARCHAR2,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2)
  IS

  CURSOR  c_obj_verno IS
   SELECT  object_version_number
  FROM    AHL_SIMULATION_PLANS_B
  WHERE   simulation_plan_id =  X_SIMULATION_PLAN_ID;
  --
  CURSOR c_chk_simulation_exists IS
    SELECT 'x'
   FROM   AHL_SIMULATION_PLANS_B
  WHERE  simulation_plan_id = X_SIMULATION_PLAN_ID;
  --
  CURSOR c_get_simulation_id IS
    SELECT ahl_simulation_plans_b_s.NEXTVAL
   FROM dual;
   --
  l_user_id     NUMBER := 0;
  l_obj_verno   NUMBER;
  l_dummy_char  VARCHAR2(1);
  l_row_id      VARCHAR2(100);
  l_plan_id      NUMBER;
  l_primary_plan_flag  VARCHAR2(1);
  l_simulation_plan_name VARCHAR2(30);

  BEGIN

  IF X_OWNER = 'SEED' THEN
     l_user_id := 1;
 END IF;

 OPEN c_chk_simulation_exists;
 FETCH c_chk_simulation_exists INTO l_dummy_char;
 IF c_chk_simulation_exists%NOTFOUND
 THEN
    CLOSE c_chk_simulation_exists;

    IF X_SIMULATION_PLAN_ID IS NULL THEN
        OPEN c_get_simulation_id;
        FETCH c_get_simulation_id INTO l_plan_id;
        CLOSE c_get_simulation_id;
    ELSE
       l_plan_id := X_SIMULATION_PLAN_ID;
    END IF ;

    l_obj_verno := 1;

    AHL_SIMULATION_PLANS_PKG.INSERT_ROW(
     X_ROWID                       => l_row_id,
     X_SIMULATION_PLAN_ID 	   => l_plan_id,
     X_OBJECT_VERSION_NUMBER 	   => l_obj_verno,
     X_PRIMARY_PLAN_FLAG           => X_PRIMARY_PLAN_FLAG,
     X_SIMULATION_PLAN_NAME        => X_SIMULATION_PLAN_NAME,
     X_ATTRIBUTE_CATEGORY 	   => X_ATTRIBUTE_CATEGORY,
     X_ATTRIBUTE1		   =>  X_ATTRIBUTE1,
     X_ATTRIBUTE2		   =>  X_ATTRIBUTE2,
     X_ATTRIBUTE3		   =>  X_ATTRIBUTE3,
     X_ATTRIBUTE4		   =>  X_ATTRIBUTE4,
     X_ATTRIBUTE5		   =>  X_ATTRIBUTE5,
     X_ATTRIBUTE6		   =>  X_ATTRIBUTE6,
     X_ATTRIBUTE7		   =>  X_ATTRIBUTE7,
     X_ATTRIBUTE8		   =>  X_ATTRIBUTE8,
     X_ATTRIBUTE9		   =>  X_ATTRIBUTE9,
     X_ATTRIBUTE10		   =>  X_ATTRIBUTE10,
     X_ATTRIBUTE11		   =>  X_ATTRIBUTE11,
     X_ATTRIBUTE12		   =>  X_ATTRIBUTE12,
     X_ATTRIBUTE13		   =>  X_ATTRIBUTE13,
     X_ATTRIBUTE14		   =>  X_ATTRIBUTE14,
     X_ATTRIBUTE15		   =>  X_ATTRIBUTE15,
     X_DESCRIPTION 		   => X_DESCRIPTION ,
     X_CREATION_DATE 		   => SYSDATE,
     X_CREATED_BY                  => l_user_id,
     X_LAST_UPDATE_DATE            => SYSDATE,
     X_LAST_UPDATED_BY             => l_user_id,
     X_LAST_UPDATE_LOGIN           => 0  );


ELSE
   CLOSE c_chk_simulation_exists;
   OPEN c_obj_verno;
   FETCH c_obj_verno INTO l_obj_verno;
   CLOSE c_obj_verno;

   AHL_SIMULATION_PLANS_PKG.UPDATE_ROW(

     X_SIMULATION_PLAN_ID 	=> X_SIMULATION_PLAN_ID,
     X_OBJECT_VERSION_NUMBER 	=> l_obj_verno + 1,
     X_PRIMARY_PLAN_FLAG	=> X_PRIMARY_PLAN_FLAG ,
     X_ATTRIBUTE_CATEGORY 	=> X_ATTRIBUTE_CATEGORY,
     X_ATTRIBUTE1		=>  X_ATTRIBUTE1,
     X_ATTRIBUTE2		=>  X_ATTRIBUTE2,
     X_ATTRIBUTE3		=>  X_ATTRIBUTE3,
     X_ATTRIBUTE4		=>  X_ATTRIBUTE4,
     X_ATTRIBUTE5		=>  X_ATTRIBUTE5,
     X_ATTRIBUTE6		=>  X_ATTRIBUTE6,
     X_ATTRIBUTE7		=>  X_ATTRIBUTE7,
     X_ATTRIBUTE8		=>  X_ATTRIBUTE8,
     X_ATTRIBUTE9		=>  X_ATTRIBUTE9,
     X_ATTRIBUTE10		=>  X_ATTRIBUTE10,
     X_ATTRIBUTE11		=>  X_ATTRIBUTE11,
     X_ATTRIBUTE12		=>  X_ATTRIBUTE12,
     X_ATTRIBUTE13		=>  X_ATTRIBUTE13,
     X_ATTRIBUTE14		=>  X_ATTRIBUTE14,
     X_ATTRIBUTE15		=>  X_ATTRIBUTE15,
     X_SIMULATION_PLAN_NAME     =>  X_SIMULATION_PLAN_NAME,
     X_DESCRIPTION 	        =>  X_DESCRIPTION ,
     X_LAST_UPDATE_DATE         => SYSDATE,
     X_LAST_UPDATED_BY          => l_user_id,
     X_LAST_UPDATE_LOGIN        => 0 );


END IF;
END LOAD_ROW;
--
procedure TRANSLATE_ROW(
       x_simulation_plan_id    in NUMBER
     , x_simulation_plan_name  in VARCHAR2
     , x_description           in VARCHAR2
     , x_owner                 in VARCHAR2
 ) is
 begin
    update AHL_SIMULATION_PLANS_TL set
       simulation_plan_name = nvl(x_simulation_plan_name, simulation_plan_name),
       description = nvl(x_description, description),
       source_lang = userenv('LANG'),
       last_update_date = sysdate,
       last_updated_by = decode(x_owner, 'SEED', 1, 0),
       last_update_login = 0
    where  simulation_plan_id = x_simulation_plan_id
    and      userenv('LANG') in (language, source_lang);

end TRANSLATE_ROW;


end AHL_SIMULATION_PLANS_PKG;

/
