--------------------------------------------------------
--  DDL for Package Body HR_DOCUMENT_TYPES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HR_DOCUMENT_TYPES_PKG" as
/* $Header: perditlct.pkb 120.0 2005/06/24 07:52:30 appldev noship $ */
--
procedure KEY_TO_IDS (
  X_SYSTEM_DOCUMENT_TYPE in VARCHAR2,
  X_LEGISLATION_CODE in VARCHAR2,
  X_DOCUMENT_TYPE_ID out nocopy NUMBER
) is
--
  cursor CSR_DOCUMENT_TYPE (
    X_SYS_DOC_TYPE in VARCHAR2,
    X_LEG_CODE     in VARCHAR2
  ) is
    select HDT.DOCUMENT_TYPE_ID
    from   HR_DOCUMENT_TYPES HDT
    where  HDT.SYSTEM_DOCUMENT_TYPE = X_SYS_DOC_TYPE
      and  ((X_LEG_CODE is NULL and HDT.LEGISLATION_CODE is NULL)
             or
            (X_LEG_CODE = HDT.LEGISLATION_CODE));
--
cursor CSR_SEQUENCE is
    select HR_DOCUMENT_TYPES_S.nextval
    from   dual;
--
begin
  open CSR_DOCUMENT_TYPE (X_SYSTEM_DOCUMENT_TYPE,X_LEGISLATION_CODE);
  fetch CSR_DOCUMENT_TYPE into X_DOCUMENT_TYPE_ID;
  if (CSR_DOCUMENT_TYPE%notfound) then
    open CSR_SEQUENCE;
    fetch CSR_SEQUENCE into X_DOCUMENT_TYPE_ID;
    close CSR_SEQUENCE;
  end if;
  close CSR_DOCUMENT_TYPE;
end KEY_TO_IDS;

--
procedure OWNER_TO_WHO (
  X_OWNER in VARCHAR2,
  X_CREATION_DATE out nocopy DATE,
  X_CREATED_BY out nocopy NUMBER,
  X_LAST_UPDATE_DATE out nocopy DATE,
  X_LAST_UPDATED_BY out nocopy NUMBER,
  X_LAST_UPDATE_LOGIN out nocopy NUMBER
) is
begin
  if X_OWNER = 'SEED' then
    X_CREATED_BY := 1;
    X_LAST_UPDATED_BY := 1;
  else
    X_CREATED_BY := 0;
    X_LAST_UPDATED_BY := 0;
  end if;
  X_CREATION_DATE := sysdate;
  X_LAST_UPDATE_DATE := sysdate;
  X_LAST_UPDATE_LOGIN := 0;
end OWNER_TO_WHO;
--
procedure INSERT_ROW (
  X_DOCUMENT_TYPE_ID in NUMBER,
  X_SYSTEM_DOCUMENT_TYPE in VARCHAR2,
  X_CATEGORY_CODE in VARCHAR2,
  X_SUB_CATEGORY_CODE in VARCHAR2,
  X_ACTIVE_INACTIVE_FLAG in VARCHAR2,
  X_MULTIPLE_OCCURENCES_FLAG in VARCHAR2,
  X_LEGISLATION_CODE in VARCHAR2,
  X_AUTHORIZATION_REQUIRED in VARCHAR2,
  X_WARNING_PERIOD in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_DOCUMENT_TYPE in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  --
  insert into HR_DOCUMENT_TYPES (
    DOCUMENT_TYPE_ID,
    SYSTEM_DOCUMENT_TYPE,
    CATEGORY_CODE,
    SUB_CATEGORY_CODE,
    ACTIVE_INACTIVE_FLAG,
    MULTIPLE_OCCURENCES_FLAG,
    LEGISLATION_CODE,
    AUTHORIZATION_REQUIRED,
    WARNING_PERIOD,
    OBJECT_VERSION_NUMBER,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN)
  values (
    X_DOCUMENT_TYPE_ID,
    X_SYSTEM_DOCUMENT_TYPE,
    X_CATEGORY_CODE,
    X_SUB_CATEGORY_CODE,
    X_ACTIVE_INACTIVE_FLAG,
    X_MULTIPLE_OCCURENCES_FLAG,
    X_LEGISLATION_CODE,
    X_AUTHORIZATION_REQUIRED,
    X_WARNING_PERIOD,
    X_OBJECT_VERSION_NUMBER,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );
  --
  insert into HR_DOCUMENT_TYPES_TL (
    DOCUMENT_TYPE_ID,
    DOCUMENT_TYPE,
    DESCRIPTION,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANGUAGE
  ) select
    X_DOCUMENT_TYPE_ID,
    X_DOCUMENT_TYPE,
    X_DESCRIPTION,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from HR_DOCUMENT_TYPES_TL T
    where T.DOCUMENT_TYPE_ID = X_DOCUMENT_TYPE_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

end INSERT_ROW;
--
procedure UPDATE_ROW (
  X_DOCUMENT_TYPE_ID in NUMBER,
  X_SYSTEM_DOCUMENT_TYPE in VARCHAR2,
  X_CATEGORY_CODE in VARCHAR2,
  X_SUB_CATEGORY_CODE in VARCHAR2,
  X_ACTIVE_INACTIVE_FLAG in VARCHAR2,
  X_MULTIPLE_OCCURENCES_FLAG in VARCHAR2,
  X_LEGISLATION_CODE in VARCHAR2,
  X_AUTHORIZATION_REQUIRED in VARCHAR2,
  X_WARNING_PERIOD in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_DOCUMENT_TYPE in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update HR_DOCUMENT_TYPES set
         CATEGORY_CODE = X_CATEGORY_CODE,
         SUB_CATEGORY_CODE = X_SUB_CATEGORY_CODE,
         ACTIVE_INACTIVE_FLAG = X_ACTIVE_INACTIVE_FLAG,
         MULTIPLE_OCCURENCES_FLAG = X_MULTIPLE_OCCURENCES_FLAG,
         LEGISLATION_CODE = X_LEGISLATION_CODE,
         AUTHORIZATION_REQUIRED = X_AUTHORIZATION_REQUIRED,
         WARNING_PERIOD = X_WARNING_PERIOD,
         OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
         LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
         LAST_UPDATED_BY = X_LAST_UPDATED_BY,
         LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where  DOCUMENT_TYPE_ID = X_DOCUMENT_TYPE_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update HR_DOCUMENT_TYPES_TL set
         DOCUMENT_TYPE = X_DOCUMENT_TYPE,
         DESCRIPTION = X_DESCRIPTION,
         LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
         LAST_UPDATED_BY = X_LAST_UPDATED_BY,
         LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
         SOURCE_LANGUAGE = userenv('LANG')
  where  DOCUMENT_TYPE_ID = X_DOCUMENT_TYPE_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANGUAGE);

  if (sql%notfound) then
    raise no_data_found;
  end if;

end UPDATE_ROW;
--
procedure DELETE_ROW (
  X_DOCUMENT_TYPE_ID in NUMBER
) is
begin
  delete from HR_DOCUMENT_TYPES_TL
  where DOCUMENT_TYPE_ID = X_DOCUMENT_TYPE_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from HR_DOCUMENT_TYPES
  where DOCUMENT_TYPE_ID = X_DOCUMENT_TYPE_ID;
  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;
--
procedure ADD_LANGUAGE
is
begin
  delete from HR_DOCUMENT_TYPES_TL T
  where not exists
    (select NULL
    from HR_DOCUMENT_TYPES B
    where B.DOCUMENT_TYPE_ID = T.DOCUMENT_TYPE_ID
    );

  update HR_DOCUMENT_TYPES_TL T set (
      DOCUMENT_TYPE
    ) = (select
      B.DOCUMENT_TYPE
    from HR_DOCUMENT_TYPES_TL B
    where B.DOCUMENT_TYPE_ID = T.DOCUMENT_TYPE_ID
    and B.LANGUAGE = T.SOURCE_LANGUAGE)
  where (
      T.DOCUMENT_TYPE_ID,
      T.LANGUAGE
  ) in (select
      SUBT.DOCUMENT_TYPE_ID,
      SUBT.LANGUAGE
    from HR_DOCUMENT_TYPES_TL SUBB, HR_DOCUMENT_TYPES_TL SUBT
    where SUBB.DOCUMENT_TYPE_ID = SUBT.DOCUMENT_TYPE_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANGUAGE
    and (SUBB.DOCUMENT_TYPE <> SUBT.DOCUMENT_TYPE
  ));

  insert into HR_DOCUMENT_TYPES_TL (
    DOCUMENT_TYPE_ID,
    DOCUMENT_TYPE,
    DESCRIPTION,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANGUAGE
  ) select
    B.DOCUMENT_TYPE_ID,
    B.DOCUMENT_TYPE,
    B.DESCRIPTION,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    L.LANGUAGE_CODE,
    B.SOURCE_LANGUAGE
  from HR_DOCUMENT_TYPES_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from HR_DOCUMENT_TYPES_TL T
    where T.DOCUMENT_TYPE_ID = B.DOCUMENT_TYPE_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

--
procedure LOAD_ROW (
  X_SYSTEM_DOCUMENT_TYPE in VARCHAR2,
  X_CATEGORY_CODE in VARCHAR2,
  X_SUB_CATEGORY_CODE in VARCHAR2,
  X_ACTIVE_INACTIVE_FLAG in VARCHAR2,
  X_MULTIPLE_OCCURENCES_FLAG in VARCHAR2,
  X_LEGISLATION_CODE in VARCHAR2,
  X_AUTHORIZATION_REQUIRED in VARCHAR2,
  X_WARNING_PERIOD in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_OWNER in VARCHAR2,
  X_DOCUMENT_TYPE in VARCHAR2,
  X_DESCRIPTION in VARCHAR2
) is
  X_CREATION_DATE DATE;
  X_CREATED_BY NUMBER;
  X_LAST_UPDATE_DATE DATE;
  X_LAST_UPDATED_BY NUMBER;
  X_LAST_UPDATE_LOGIN NUMBER;
  X_DOCUMENT_TYPE_ID NUMBER;
begin
  --
  KEY_TO_IDS (
    X_SYSTEM_DOCUMENT_TYPE,
    X_LEGISLATION_CODE,
    X_DOCUMENT_TYPE_ID
  );
  --
  OWNER_TO_WHO (
    X_OWNER,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );
  --
  begin
    UPDATE_ROW (
      X_DOCUMENT_TYPE_ID,
      X_SYSTEM_DOCUMENT_TYPE,
      X_CATEGORY_CODE,
      X_SUB_CATEGORY_CODE,
      X_ACTIVE_INACTIVE_FLAG,
      X_MULTIPLE_OCCURENCES_FLAG,
      X_LEGISLATION_CODE,
      X_AUTHORIZATION_REQUIRED,
      X_WARNING_PERIOD,
      X_OBJECT_VERSION_NUMBER,
      X_DOCUMENT_TYPE,
      X_DESCRIPTION,
      X_LAST_UPDATE_DATE,
      X_LAST_UPDATED_BY,
      X_LAST_UPDATE_LOGIN
    );
  exception
    when no_data_found then
      INSERT_ROW (
        X_DOCUMENT_TYPE_ID,
        X_SYSTEM_DOCUMENT_TYPE,
        X_CATEGORY_CODE,
        X_SUB_CATEGORY_CODE,
        X_ACTIVE_INACTIVE_FLAG,
        X_MULTIPLE_OCCURENCES_FLAG,
        X_LEGISLATION_CODE,
        X_AUTHORIZATION_REQUIRED,
        X_WARNING_PERIOD,
        X_OBJECT_VERSION_NUMBER,
        X_DOCUMENT_TYPE,
        X_DESCRIPTION,
        X_CREATION_DATE,
        X_CREATED_BY,
        X_LAST_UPDATE_DATE,
        X_LAST_UPDATED_BY,
        X_LAST_UPDATE_LOGIN
      );
  end;
end LOAD_ROW;
--
procedure TRANSLATE_ROW (
  X_SYSTEM_DOCUMENT_TYPE in VARCHAR2,
  X_LEGISLATION_CODE in VARCHAR2,
  X_DOCUMENT_TYPE in VARCHAR2,
  X_DESCRIPTION in VARCHAR2,
  X_OWNER in VARCHAR2
) is
  X_CREATION_DATE DATE;
  X_CREATED_BY NUMBER;
  X_LAST_UPDATE_DATE DATE;
  X_LAST_UPDATED_BY NUMBER;
  X_LAST_UPDATE_LOGIN NUMBER;
  X_DOCUMENT_TYPE_ID NUMBER;
begin
  --
  KEY_TO_IDS (
    X_SYSTEM_DOCUMENT_TYPE,
    X_LEGISLATION_CODE,
    X_DOCUMENT_TYPE_ID
  );
  --
  OWNER_TO_WHO (
    X_OWNER,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN
  );
  --
  update HR_DOCUMENT_TYPES_TL
     set DOCUMENT_TYPE = X_DOCUMENT_TYPE,
         DESCRIPTION = X_DESCRIPTION,
         LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
         LAST_UPDATED_BY = X_LAST_UPDATED_BY,
         LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
         SOURCE_LANGUAGE = userenv('LANG')
  where DOCUMENT_TYPE_ID = X_DOCUMENT_TYPE_ID
    and userenv('LANG') in (LANGUAGE,SOURCE_LANGUAGE);

end TRANSLATE_ROW;
--
end HR_DOCUMENT_TYPES_PKG;

/
