--------------------------------------------------------
--  DDL for Package Body GMD_QCR02USR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GMD_QCR02USR_XMLP_PKG" AS
/* $Header: QCR02USRB.pls 120.0 2007/12/24 13:07:13 krreddy noship $ */
  FUNCTION TEXTCFFORMULA(TEXT_SPEC IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF TEXT_SPEC IS NOT NULL THEN
      RETURN (TEXT_SPEC);
    ELSE
      RETURN (NULL);
    END IF;
  END TEXTCFFORMULA;

  FUNCTION TARGETSPECFORMULA(TARGET_SPEC IN NUMBER
                            ,TEST_TYPE IN VARCHAR2
                            ,PRECISION IN NUMBER) RETURN CHAR IS
    L_PRECISION VARCHAR2(25);
    L_NUMBER NUMBER;
    L_TARGET_SPEC VARCHAR2(25);
  BEGIN
    IF TARGET_SPEC IS NOT NULL THEN
      IF TEST_TYPE in ('N','L','E') THEN
        L_PRECISION := '999999999999999D' || TO_CHAR(POWER(10
                                    ,PRECISION) - 1);
        L_NUMBER := TARGET_SPEC;
        L_TARGET_SPEC := LTRIM(TO_CHAR(TO_NUMBER(TO_CHAR(L_NUMBER))
                                      ,L_PRECISION));
        RETURN (L_TARGET_SPEC);
      ELSE
        L_NUMBER := TARGET_SPEC;
        RETURN TO_CHAR(L_NUMBER);
      END IF;
    ELSE
      RETURN (NULL);
    END IF;
  END TARGETSPECFORMULA;

  FUNCTION DATECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(DATECP)*/NULL;
    IF FROM_RESULT_DATE IS NOT NULL AND TO_RESULT_DATE IS NOT NULL THEN
      DATECP := ' and trunc(gr1.result_date) >= FND_DATE.CHARDATE_TO_DATE(''' || FROM_RSLT_DTCP || ''') and trunc(gr1.result_date) <= FND_DATE.CHARDATE_TO_DATE(''' || TO_RSLT_DTCP || '''' || ')';
    ELSIF FROM_RESULT_DATE IS NULL AND TO_RESULT_DATE IS NULL THEN
      --DATECP := NULL;
      DATECP := ' ';
    ELSIF FROM_RESULT_DATE IS NOT NULL AND TO_RESULT_DATE IS NULL THEN
      DATECP := ' and trunc(gr1.result_date) >= FND_DATE.CHARDATE_TO_DATE(''' || FROM_RSLT_DTCP || '''' || ')';
    ELSIF FROM_RESULT_DATE IS NULL AND TO_RESULT_DATE IS NOT NULL THEN
      DATECP := ' and trunc(gr1.result_date) <= FND_DATE.CHARDATE_TO_DATE(''' || TO_RSLT_DTCP || '''' || ')';
    END IF;
    RETURN NULL;
  END DATECFFORMULA;

  FUNCTION ASSAY_DESCCFFORMULA(ASSAY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    ASSAYDESC VARCHAR2(40);
  BEGIN
    SELECT
      '[' || TEST_DESC || ']'
    INTO ASSAYDESC
    FROM
      GMD_QC_TESTS
    WHERE TEST_CODE = ASSAY_CODE;
    RETURN (ASSAYDESC);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END ASSAY_DESCCFFORMULA;

  FUNCTION TEXTARRAYCFFORMULA(TEXT_CODECF IN NUMBER) RETURN VARCHAR2 IS
    TEXT1 VARCHAR2(116);
    TEXT2 VARCHAR2(2000);
    CURSOR GET_TEXT1 IS
      SELECT
        TEXT
      FROM
        QC_TEXT_TBL
      WHERE TEXT_CODE = TEXT_CODECF
        AND LINE_NO <> - 1
        AND LANG_CODE = USERENV('LANG');
  BEGIN
    OPEN GET_TEXT1;
    LOOP
      FETCH GET_TEXT1
       INTO TEXT1;
      EXIT WHEN GET_TEXT1%NOTFOUND;
      TEXT2 := TEXT2 || TEXT1;
    END LOOP;
    CLOSE GET_TEXT1;
    IF SQL%NOTFOUND THEN
      RETURN (NULL);
    END IF;
    RETURN (TEXT2);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END TEXTARRAYCFFORMULA;

  FUNCTION SAMPLECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(SAMPLECP)*/NULL;
    IF FROM_SAMPLE IS NOT NULL AND TO_SAMPLE IS NOT NULL THEN
      SAMPLECP := ' and sample_no >= ''' || FROM_SAMPLE || ''' and sample_no <= ''' || TO_SAMPLE || '''';
    ELSIF FROM_SAMPLE IS NULL AND TO_SAMPLE IS NULL THEN
      --SAMPLECP := NULL;
      SAMPLECP := ' ';
    ELSIF FROM_SAMPLE IS NOT NULL AND TO_SAMPLE IS NULL THEN
      SAMPLECP := ' and sample_no >= ''' || FROM_SAMPLE || '''';
    ELSIF FROM_SAMPLE IS NULL AND TO_SAMPLE IS NOT NULL THEN
      SAMPLECP := ' and sample_no <= ''' || TO_SAMPLE || '''';
    END IF;
    RETURN NULL;
  END SAMPLECFFORMULA;

  FUNCTION ITEMCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ITEMCP)*/NULL;
    IF FROM_ITEM IS NOT NULL AND TO_ITEM IS NOT NULL THEN
      ITEMCP := ' and msi.concatenated_segments >= ''' || FROM_ITEMCP || ''' and msi.concatenated_segments <= ''' || TO_ITEMCP || '''';
    ELSIF FROM_ITEM IS NULL AND TO_ITEM IS NULL THEN
      --ITEMCP := NULL;
      ITEMCP := ' ';
    ELSIF FROM_ITEM IS NOT NULL AND TO_ITEM IS NULL THEN
      ITEMCP := ' and msi.concatenated_segments >= ''' || FROM_ITEMCP || '''';
    ELSIF FROM_ITEM IS NULL AND TO_ITEM IS NOT NULL THEN
      ITEMCP := ' and msi.concatenated_segments <= ''' || TO_ITEMCP || '''';
    END IF;
    RETURN NULL;
    /*SRW.MESSAGE(1000
               ,':ItemCP ' || ITEMCP)*/NULL;
  END ITEMCFFORMULA;

  FUNCTION LOTCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(LOTNOCP)*/NULL;
    IF FROM_LOTNO IS NOT NULL AND TO_LOTNO IS NOT NULL THEN
      LOTNOCP := '  and gs.lot_number >= ''' || FROM_LOTNO || ''' and gs.lot_number <= ''' || TO_LOTNO || '''';
    ELSIF FROM_LOTNO IS NULL AND TO_LOTNO IS NULL THEN
      --LOTNOCP := NULL;
      LOTNOCP := ' ';
    ELSIF FROM_LOTNO IS NOT NULL AND TO_LOTNO IS NULL THEN
      LOTNOCP := ' and gs.lot_number >= ''' || FROM_LOTNO || '''';
    ELSIF FROM_LOTNO IS NULL AND TO_LOTNO IS NOT NULL THEN
      LOTNOCP := ' and gs.lot_number <= ''' || TO_LOTNO || '''';
    END IF;
    /*SRW.MESSAGE(1000
               ,':LotnoCP ' || LOTNOCP)*/NULL;
    RETURN NULL;
  END LOTCFFORMULA;

  FUNCTION SUBINVENTORYCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(SUBINVENTORYCP)*/NULL;
    /*SRW.MESSAGE(1000
               ,'SubinventoryCF Begin')*/NULL;
    /*SRW.MESSAGE(1000
               ,' :from_subinventory ' || FROM_SUBINVENTORY)*/NULL;
    /*SRW.MESSAGE(1000
               ,' :to_subinventory  ' || TO_SUBINVENTORY)*/NULL;
    IF FROM_SUBINVENTORY IS NOT NULL AND TO_SUBINVENTORY IS NOT NULL THEN
      SUBINVENTORYCP := '  and  gs.subinventory >= ''' || FROM_SUBINVENTORY || ''' and  gs.subinventory <= ''' || TO_SUBINVENTORY || '''';
    ELSIF FROM_SUBINVENTORY IS NULL AND TO_SUBINVENTORY IS NULL THEN
      --SUBINVENTORYCP := NULL;
      SUBINVENTORYCP := ' ';
    ELSIF FROM_SUBINVENTORY IS NOT NULL AND TO_SUBINVENTORY IS NULL THEN
      SUBINVENTORYCP := ' and  gs.subinventory  >= ''' || FROM_SUBINVENTORY || '''';
    ELSIF FROM_SUBINVENTORY IS NULL AND TO_SUBINVENTORY IS NOT NULL THEN
      SUBINVENTORYCP := ' and  gs.subinventory  <= ''' || TO_SUBINVENTORY || '''';
    END IF;
    RETURN NULL;
    /*SRW.MESSAGE(1000
               ,':SubinventoryCP ' || SUBINVENTORYCP)*/NULL;
  END SUBINVENTORYCFFORMULA;

  FUNCTION LOCATORCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(LOCATORCP)*/NULL;
    IF FROM_LOCATOR IS NOT NULL AND TO_LOCATOR IS NOT NULL THEN
      LOCATORCP := ' and gs.locator_id >= ''' || FROM_LOCATOR || ''' and gs.locator_id <= ''' || TO_LOCATOR || '''';
    ELSIF FROM_LOCATOR IS NULL AND TO_LOCATOR IS NULL THEN
      --LOCATORCP := NULL;
      LOCATORCP := ' ';
    ELSIF FROM_LOCATOR IS NOT NULL AND TO_LOCATOR IS NULL THEN
      LOCATORCP := ' and gs.locator_id  >= ''' || FROM_LOCATOR || '''';
    ELSIF FROM_LOCATOR IS NULL AND TO_LOCATOR IS NOT NULL THEN
      LOCATORCP := ' and gs.locator_id  <= ''' || TO_LOCATOR || '''';
    END IF;
    /*SRW.MESSAGE(1000
               ,'LocatorCP ' || LOCATORCP)*/NULL;
    RETURN NULL;
  END LOCATORCFFORMULA;

  FUNCTION INCLUDECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(INCLUDECP)*/NULL;
    IF INCLUDE = '0' THEN
      --INCLUDECP := NULL;
      INCLUDECP := ' ';
    ELSIF INCLUDE = '1' THEN
      INCLUDECP := ' and decode(gr1.ad_hoc_print_on_coa_ind, ''Y'', decode( gsr.evaluation_ind,''0A'',''Y'',''1V'',''Y'',''2R'',''Y'',''N''),''N'') =''Y''';
    END IF;
    RETURN NULL;
  END INCLUDECFFORMULA;

  FUNCTION SAMPLECPFORMULA(SAMPLECF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(SAMPLECF)*/NULL;
    RETURN NULL;
  END SAMPLECPFORMULA;

  FUNCTION ITEMCPFORMULA(ITEMCF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ITEMCF)*/NULL;
    RETURN NULL;
  END ITEMCPFORMULA;

  FUNCTION LOTNOCPFORMULA(LOTNOCF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(LOTNOCF)*/NULL;
    RETURN NULL;
  END LOTNOCPFORMULA;

  FUNCTION DATECPFORMULA(DATECF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(DATECF)*/NULL;
    RETURN NULL;
  END DATECPFORMULA;

  FUNCTION INCLUDECPFORMULA(INCLUDECF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(INCLUDECF)*/NULL;
    RETURN NULL;
  END INCLUDECPFORMULA;

  FUNCTION WAREHOUSECPFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN NULL;
  END WAREHOUSECPFORMULA;

  FUNCTION LOCATIONCPFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN NULL;
  END LOCATIONCPFORMULA;

  FUNCTION QCUNIT_CODECFFORMULA(SPEC IN NUMBER
                               ,QCASSY_TYP_ID IN NUMBER) RETURN VARCHAR2 IS
    UNITCODE VARCHAR2(4);
    ORGCODE VARCHAR2(4);
  BEGIN
    IF SPEC IS NOT NULL THEN
      BEGIN
        SELECT
          TEST_UOM
        INTO UNITCODE
        FROM
          GMD_SPEC_TESTS_B
        WHERE SPEC_ID = SPEC
          AND TEST_ID = QCASSY_TYP_ID;
      EXCEPTION
        WHEN OTHERS THEN
          RETURN (NULL);
      END;
      RETURN (UNITCODE);
    END IF;
    RETURN NULL;
  END QCUNIT_CODECFFORMULA;

  --FUNCTION TEXTARRAY2CFFORMULA(TEXT_CODE IN NUMBER) RETURN VARCHAR2 IS
  FUNCTION TEXTARRAY2CFFORMULA(TEXT_CODE_V IN NUMBER) RETURN VARCHAR2 IS
    TEXT2 VARCHAR2(116);
    TEXT3 VARCHAR2(2000);
    CURSOR GET_TEXT IS
      SELECT
        TEXT
      FROM
        QC_TEXT_TBL
      WHERE TEXT_CODE = TEXT_CODE_V
        AND LINE_NO <> - 1
        AND LANG_CODE = 'US';
  BEGIN
    OPEN GET_TEXT;
    LOOP
      FETCH GET_TEXT
       INTO TEXT2;
      EXIT WHEN GET_TEXT%NOTFOUND;
      TEXT3 := TEXT3 || TEXT2;
    END LOOP;
    CLOSE GET_TEXT;
    IF SQL%NOTFOUND THEN
      RETURN (NULL);
    END IF;
    RETURN (TEXT3);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END TEXTARRAY2CFFORMULA;

  --FUNCTION EFFECTIVITYCFFORMULA(SAMPLE_NO IN VARCHAR2) RETURN DATE IS
  FUNCTION EFFECTIVITYCFFORMULA(SAMPLE_NO_V IN VARCHAR2) RETURN DATE IS
    FROMDATE DATE;
  BEGIN
    SELECT
      DISTINCT
      GISV.START_DATE
    INTO FROMDATE
    FROM
      GMD_SAMPLES GS,
      GMD_SAMPLING_EVENTS GSE,
      GMD_INVENTORY_SPEC_VRS GISV,
      GMD_EVENT_SPEC_DISP GES
    WHERE SAMPLE_NO = SAMPLE_NO_V
      AND GS.SAMPLING_EVENT_ID = GSE.SAMPLING_EVENT_ID
      AND GSE.SAMPLING_EVENT_ID = GES.SAMPLING_EVENT_ID
      AND GES.SPEC_USED_FOR_LOT_ATTRIB_IND = 'Y'
      AND GES.SPEC_VR_ID = GISV.SPEC_VR_ID;
    RETURN (FROMDATE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END EFFECTIVITYCFFORMULA;

    FUNCTION EFFECTIVITYCFFORMULACHR(SAMPLE_NO_V IN VARCHAR2) RETURN VARCHAR2 IS
      FROMDATE DATE;
    BEGIN
      SELECT
        DISTINCT
        GISV.START_DATE
      INTO FROMDATE
      FROM
        GMD_SAMPLES GS,
        GMD_SAMPLING_EVENTS GSE,
        GMD_INVENTORY_SPEC_VRS GISV,
        GMD_EVENT_SPEC_DISP GES
      WHERE SAMPLE_NO = SAMPLE_NO_V
        AND GS.SAMPLING_EVENT_ID = GSE.SAMPLING_EVENT_ID
        AND GSE.SAMPLING_EVENT_ID = GES.SAMPLING_EVENT_ID
        AND GES.SPEC_USED_FOR_LOT_ATTRIB_IND = 'Y'
        AND GES.SPEC_VR_ID = GISV.SPEC_VR_ID;
      RETURN (to_Char(FROMDATE,'DD-MON-YYYY'));
    EXCEPTION
      WHEN OTHERS THEN
        RETURN (NULL);
  END EFFECTIVITYCFFORMULACHR;

  FUNCTION RESULTCFFORMULA(TEXT_RESULT IN VARCHAR2
                          ,NUM_RESULT IN NUMBER) RETURN VARCHAR2 IS
    RESULT VARCHAR2(240);
  BEGIN
    IF TEXT_RESULT IS NOT NULL THEN
      RESULT := TEXT_RESULT;
    ELSE
      RESULT := TO_CHAR(NUM_RESULT);
    END IF;
    RETURN (RESULT);
  END RESULTCFFORMULA;

  FUNCTION MIN_SPECCFFORMULA(MIN_CHAR IN VARCHAR2
                            ,MIN_SPEC IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF MIN_CHAR IS NULL THEN
      RETURN (MIN_SPEC);
    ELSE
      RETURN (NULL);
    END IF;
  END MIN_SPECCFFORMULA;

  FUNCTION MAX_SPECCFFORMULA(MAX_CHAR IN VARCHAR2
                            ,MAX_SPEC IN NUMBER) RETURN NUMBER IS
    MAXSPEC NUMBER;
  BEGIN
    IF MAX_CHAR IS NULL THEN
      RETURN (MAX_SPEC);
    ELSE
      RETURN (NULL);
    END IF;
  END MAX_SPECCFFORMULA;

  FUNCTION MIN_VAILDCFFORMULA(ASSAY_CODE IN VARCHAR2) RETURN NUMBER IS
    MINVAILD NUMBER;
  BEGIN
    SELECT
      MIN_VALUE_NUM
    INTO MINVAILD
    FROM
      GMD_QC_TESTS_B
    WHERE TEST_CODE = ASSAY_CODE;
    RETURN (MINVAILD);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END MIN_VAILDCFFORMULA;

  FUNCTION MAX_VAILDCFFORMULA(ASSAY_CODE IN VARCHAR2) RETURN NUMBER IS
    MAXVAILD NUMBER;
  BEGIN
    SELECT
      MAX_VALUE_NUM
    INTO MAXVAILD
    FROM
      GMD_QC_TESTS_B
    WHERE TEST_CODE = ASSAY_CODE;
    RETURN (MAXVAILD);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END MAX_VAILDCFFORMULA;

  FUNCTION MINIMUMCFFORMULA(MIN_SPEC IN NUMBER
                           ,TEST_TYPE IN VARCHAR2
                           ,PRECISION IN NUMBER
                           ,MIN_CHAR IN VARCHAR2) RETURN CHAR IS
    L_PRECISION VARCHAR2(25);
    L_NUMBER NUMBER;
    L_MIN_SPEC VARCHAR2(25);
  BEGIN
    IF ASSAY_TYPECP = 'T' THEN
      RETURN NULL;
    ELSE
      IF MIN_SPEC IS NOT NULL THEN
        IF TEST_TYPE in ('N','L','E') THEN
          L_PRECISION := '999999999999999D' || TO_CHAR(POWER(10
                                      ,PRECISION) - 1);
          L_NUMBER := MIN_SPEC;
          L_MIN_SPEC := LTRIM(TO_CHAR(TO_NUMBER(TO_CHAR(L_NUMBER))
                                     ,L_PRECISION));
          RETURN (L_MIN_SPEC);
        ELSE
          L_NUMBER := MIN_CHAR;
          RETURN (L_NUMBER);
        END IF;
      ELSE
        RETURN NULL;
      END IF;
    END IF;
  END MINIMUMCFFORMULA;

  FUNCTION MAXIMUMCFFORMULA(MAX_SPEC IN NUMBER
                           ,TEST_TYPE IN VARCHAR2
                           ,PRECISION IN NUMBER
                           ,MAX_CHAR IN VARCHAR2) RETURN CHAR IS
    L_PRECISION VARCHAR2(25);
    L_NUMBER NUMBER;
    L_MAX_SPEC VARCHAR2(25);
  BEGIN
    IF ASSAY_TYPECP = 'T' THEN
      RETURN NULL;
    ELSE
      IF MAX_SPEC IS NOT NULL THEN
        IF TEST_TYPE in ('N','L','E') THEN
          L_PRECISION := '999999999999999D' || TO_CHAR(POWER(10
                                      ,PRECISION) - 1);
          L_NUMBER := MAX_SPEC;
          L_MAX_SPEC := LTRIM(TO_CHAR(TO_NUMBER(TO_CHAR(L_NUMBER))
                                     ,L_PRECISION));
          RETURN (L_MAX_SPEC);
        ELSE
          L_NUMBER := MAX_CHAR;
          RETURN (L_NUMBER);
        END IF;
      ELSE
        RETURN NULL;
      END IF;
    END IF;
  END MAXIMUMCFFORMULA;

  --FUNCTION EFFECTIVITYCF1FORMULA(SAMPLE_NO IN VARCHAR2) RETURN DATE IS
  FUNCTION EFFECTIVITYCF1FORMULA(SAMPLE_NO_V IN VARCHAR2) RETURN DATE IS
    TODATE DATE;
  BEGIN
    SELECT
      DISTINCT
      GISV.END_DATE
    INTO TODATE
    FROM
      GMD_SAMPLES GS,
      GMD_SAMPLING_EVENTS GSE,
      GMD_INVENTORY_SPEC_VRS GISV,
      GMD_EVENT_SPEC_DISP GES
    WHERE SAMPLE_NO = SAMPLE_NO_V
      AND GS.SAMPLING_EVENT_ID = GSE.SAMPLING_EVENT_ID
      AND GSE.SAMPLING_EVENT_ID = GES.SAMPLING_EVENT_ID
      AND GES.SPEC_USED_FOR_LOT_ATTRIB_IND = 'Y'
      AND GES.SPEC_VR_ID = GISV.SPEC_VR_ID;
    RETURN (TODATE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END EFFECTIVITYCF1FORMULA;

  FUNCTION FROM_ITEMCFFORMULA RETURN VARCHAR2 IS
    L_FROM_ITEM VARCHAR2(240);
  BEGIN
    IF FROM_ITEM IS NULL THEN
      FROM_ITEMCP := SY_ALL;
    ELSE
      SELECT
        DISTINCT
        CONCATENATED_SEGMENTS
      INTO L_FROM_ITEM
      FROM
        MTL_SYSTEM_ITEMS_KFV
      WHERE INVENTORY_ITEM_ID = FROM_ITEM;
      FROM_ITEMCP := L_FROM_ITEM;
    END IF;
    /*SRW.MESSAGE(1000
               ,':FROM_ITEMCP ' || FROM_ITEMCP)*/NULL;
    RETURN (FROM_ITEMCP);
  END FROM_ITEMCFFORMULA;

  FUNCTION TO_ITEMCFFORMULA RETURN VARCHAR2 IS
    L_TO_ITEM VARCHAR2(240);
  BEGIN
    IF TO_ITEM IS NULL THEN
      TO_ITEMCP := SY_ALL;
    ELSE
      SELECT
        DISTINCT
        CONCATENATED_SEGMENTS
      INTO L_TO_ITEM
      FROM
        MTL_SYSTEM_ITEMS_KFV
      WHERE INVENTORY_ITEM_ID = TO_ITEM;
      TO_ITEMCP := L_TO_ITEM;
    END IF;
    /*SRW.MESSAGE(1000
               ,':TO_ITEMCP  ' || TO_ITEMCP)*/NULL;
    RETURN (TO_ITEMCP);
  END TO_ITEMCFFORMULA;

  FUNCTION FROM_SAMPLECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_SAMPLE IS NULL THEN
      FROM_SAMPLECP := SY_ALL;
    ELSE
      FROM_SAMPLECP := FROM_SAMPLE;
    END IF;
    RETURN (FROM_SAMPLECP);
  END FROM_SAMPLECFFORMULA;

  FUNCTION TO_SAMPLECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF TO_SAMPLE IS NULL THEN
      TO_SAMPLECP := SY_ALL;
    ELSE
      TO_SAMPLECP := TO_SAMPLE;
    END IF;
    RETURN (TO_SAMPLECP);
  END TO_SAMPLECFFORMULA;

  FUNCTION FROM_RSLT_DTCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_RESULT_DATE IS NULL THEN
      FROM_RSLT_DTCP := SY_ALL;
    ELSE
      FROM_RSLT_DTCP := TO_CHAR(FROM_RESULT_DATE
                               ,'DD-MON-YYYY');
    END IF;
    RETURN (FROM_RSLT_DTCP);
  END FROM_RSLT_DTCFFORMULA;

  FUNCTION TO_RSLT_DTCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF TO_RESULT_DATE IS NULL THEN
      TO_RSLT_DTCP := SY_ALL;
    ELSE
      TO_RSLT_DTCP := TO_CHAR(TO_RESULT_DATE
                             ,'DD-MON-YYYY');
    END IF;
    RETURN (TO_RSLT_DTCP);
  END TO_RSLT_DTCFFORMULA;

  FUNCTION FROM_LOCATORCFFORMULA RETURN VARCHAR2 IS
    LOCATOR VARCHAR2(240);
  BEGIN
    IF FROM_LOCATOR IS NULL THEN
      FROM_LOCATORCP := SY_ALL;
    ELSE
      SELECT
        CONCATENATED_SEGMENTS
      INTO LOCATOR
      FROM
        MTL_ITEM_LOCATIONS_KFV
      WHERE INVENTORY_LOCATION_ID = FROM_LOCATOR;
      FROM_LOCATORCP := LOCATOR;
    END IF;
    /*SRW.MESSAGE(1000
               ,':FROM_LOCATORCP ' || FROM_LOCATORCP)*/NULL;
    RETURN (FROM_LOCATORCP);
  END FROM_LOCATORCFFORMULA;

  FUNCTION TO_LOCATORCFFORMULA RETURN VARCHAR2 IS
    LOCATOR VARCHAR2(240);
  BEGIN
    IF TO_LOCATOR IS NULL THEN
      TO_LOCATORCP := SY_ALL;
    ELSE
      SELECT
        CONCATENATED_SEGMENTS
      INTO LOCATOR
      FROM
        MTL_ITEM_LOCATIONS_KFV
      WHERE INVENTORY_LOCATION_ID = TO_LOCATOR;
      TO_LOCATORCP := LOCATOR;
    END IF;
    /*SRW.MESSAGE(1000
               ,':TO_LOCATORCP ' || TO_LOCATORCP)*/NULL;
    RETURN (TO_LOCATORCP);
  END TO_LOCATORCFFORMULA;

  FUNCTION FROM_LOTNOCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_LOTNO IS NULL THEN
      FROM_LOTNOCP := SY_ALL;
    ELSE
      FROM_LOTNOCP := FROM_LOTNO;
    END IF;
    /*SRW.MESSAGE(1000
               ,':FROM_LOTNOCP ' || FROM_LOTNOCP)*/NULL;
    RETURN (FROM_LOTNOCP);
  END FROM_LOTNOCFFORMULA;

  FUNCTION TO_LOTNOCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF TO_LOTNO IS NULL THEN
      TO_LOTNOCP := SY_ALL;
    ELSE
      TO_LOTNOCP := TO_LOTNO;
    END IF;
    /*SRW.MESSAGE(1000
               ,':TO_LOTNOCP ' || TO_LOTNOCP)*/NULL;
    RETURN (TO_LOTNOCP);
  END TO_LOTNOCFFORMULA;

  FUNCTION FROM_SUBINVENTORYCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_SUBINVENTORY IS NULL THEN
      FROM_SUBINVENTORYCP := SY_ALL;
    ELSE
      FROM_SUBINVENTORYCP := FROM_SUBINVENTORY;
    END IF;
    /*SRW.MESSAGE(1000
               ,':FROM_SUBINVENTORYCP ' || FROM_SUBINVENTORYCP)*/NULL;
    RETURN (FROM_SUBINVENTORYCP);
  END FROM_SUBINVENTORYCFFORMULA;

  FUNCTION TO_SUBINVENTORYCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF TO_SUBINVENTORY IS NULL THEN
      TO_SUBINVENTORYCP := SY_ALL;
    ELSE
      TO_SUBINVENTORYCP := TO_SUBINVENTORY;
    END IF;
    /*SRW.MESSAGE(1000
               ,':TO_SUBINVENTORYCP ' || TO_SUBINVENTORYCP)*/NULL;
    RETURN (TO_SUBINVENTORYCP);
  END TO_SUBINVENTORYCFFORMULA;

  FUNCTION INCLUDECFFORMULA0052 RETURN VARCHAR2 IS
    INCLUDE1 VARCHAR2(80);
  BEGIN
    IF INCLUDE = '0' THEN
      SELECT
        MEANING
      INTO INCLUDE1
      FROM
        GEM_LOOKUPS
      WHERE LOOKUP_CODE = '0'
        AND LOOKUP_TYPE = 'QC_INCLUDE';
    ELSIF INCLUDE = '1' THEN
      SELECT
        MEANING
      INTO INCLUDE1
      FROM
        GEM_LOOKUPS
      WHERE LOOKUP_CODE = '1'
        AND LOOKUP_TYPE = 'QC_INCLUDE';
    END IF;
    RETURN (INCLUDE1);
  END INCLUDECFFORMULA0052;

  FUNCTION PRINT_TEXTCFFORMULA RETURN VARCHAR2 IS
    PRINT1 VARCHAR2(80);
  BEGIN
    IF PRINT_CONDITION = '0' THEN
      SELECT
        MEANING
      INTO PRINT1
      FROM
        GEM_LOOKUPS
      WHERE LOOKUP_CODE = '0'
        AND LOOKUP_TYPE = 'QC_PRINT';
    ELSIF PRINT_CONDITION = '1' THEN
      SELECT
        MEANING
      INTO PRINT1
      FROM
        GEM_LOOKUPS
      WHERE LOOKUP_CODE = '1'
        AND LOOKUP_TYPE = 'QC_PRINT';
    ELSIF PRINT_CONDITION = '2' THEN
      SELECT
        MEANING
      INTO PRINT1
      FROM
        GEM_LOOKUPS
      WHERE LOOKUP_CODE = '2'
        AND LOOKUP_TYPE = 'QC_PRINT';
    ELSIF PRINT_CONDITION = '3' THEN
      SELECT
        MEANING
      INTO PRINT1
      FROM
        GEM_LOOKUPS
      WHERE LOOKUP_CODE = '3'
        AND LOOKUP_TYPE = 'QC_PRINT';
    END IF;
    RETURN (PRINT1);
  END PRINT_TEXTCFFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION ACCEPTCFFORMULA(ACCEPT_ANYWAY IN VARCHAR2
                          ,FINAL_MARK IN VARCHAR2
                          ,IN_SPEC_IND IN VARCHAR2) RETURN VARCHAR2 IS
    TEMP1 VARCHAR2(80);
    TEMP2 VARCHAR2(80);
    TEMP3 VARCHAR2(80);
  BEGIN
    SELECT
      MEANING
    INTO TEMP1
    FROM
      FND_LOOKUP_VALUES
    WHERE LOOKUP_TYPE = 'GMD_QC_YES_NO'
      AND LOOKUP_CODE = NVL(ACCEPT_ANYWAY
       ,'N')
      AND LANGUAGE = USERENV('LANG');
    ACCEPT_CP := TEMP1;
    SELECT
      MEANING
    INTO TEMP2
    FROM
      FND_LOOKUP_VALUES
    WHERE LOOKUP_TYPE = 'GMD_QC_YES_NO'
      AND LOOKUP_CODE = NVL(FINAL_MARK
       ,'N')
      AND LANGUAGE = USERENV('LANG');
    FINAL_CP := TEMP2;
    SELECT
      MEANING
    INTO TEMP3
    FROM
      FND_LOOKUP_VALUES
    WHERE LOOKUP_TYPE = 'GMD_QC_YES_NO'
      AND LOOKUP_CODE = NVL(IN_SPEC_IND
       ,'N')
      AND LANGUAGE = USERENV('LANG');
    SPEC_CP := TEMP3;
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      NULL;
  END ACCEPTCFFORMULA;

  PROCEDURE GMD_QCR02USR_XMLP_PKG_HEADER IS
  BEGIN
    NULL;
  END GMD_QCR02USR_XMLP_PKG_HEADER;

  FUNCTION RESULT_DISPCFFORMULA(QCASSY_TYP_ID IN NUMBER
                               ,NUM_RESULT IN NUMBER) RETURN CHAR IS
    ASSAYVALUE VARCHAR2(240);
  BEGIN
    IF ASSAY_TYPECP = 'L' THEN
      BEGIN
        SELECT
          DISPLAY_LABEL_NUMERIC_RANGE
        INTO ASSAYVALUE
        FROM
          GMD_QC_TEST_VALUES
        WHERE TEST_ID = QCASSY_TYP_ID
          AND ( MIN_NUM <= NUM_RESULT
        OR MIN_NUM IS NULL )
          AND ( MAX_NUM >= NUM_RESULT
        OR MAX_NUM IS NULL );
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ASSAYVALUE := ' ';
      END;
    END IF;
    RETURN (ASSAYVALUE);
  END RESULT_DISPCFFORMULA;

  FUNCTION ASSAY_DISPCFFORMULA(ASSAY_CODE IN VARCHAR2
                              ,QCASSY_TYP_ID IN NUMBER
                              ,TARGETSPECCF IN VARCHAR2) RETURN CHAR IS
    ASSAYVALUE VARCHAR2(240);
    ASSAYTYPE VARCHAR2(1);
  BEGIN
    BEGIN
      SELECT
        DISTINCT
        TEST_TYPE
      INTO ASSAYTYPE
      FROM
        GMD_QC_TESTS_B
      WHERE TEST_CODE = ASSAY_CODE;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
    END;
    IF ASSAYTYPE = 'L' THEN
      BEGIN
        SELECT
          DISPLAY_LABEL_NUMERIC_RANGE
        INTO ASSAYVALUE
        FROM
          GMD_QC_TEST_VALUES
        WHERE TEST_ID = QCASSY_TYP_ID
          AND ( MIN_NUM <= TARGETSPECCF
        OR MIN_NUM IS NULL )
          AND ( MAX_NUM >= TARGETSPECCF
        OR MAX_NUM IS NULL );
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
      END;
    END IF;
    ASSAY_TYPECP := ASSAYTYPE;
    RETURN (ASSAYVALUE);
  END ASSAY_DISPCFFORMULA;

  FUNCTION ASSAYMIN_DISPCFFORMULA(QCASSY_TYP_ID IN NUMBER
                                 ,MIN_SPECCF IN NUMBER) RETURN CHAR IS
    ASSAYVALUE VARCHAR2(240);
    ASSAYTYPE VARCHAR2(1);
  BEGIN
    IF ASSAY_TYPECP = 'L' THEN
      BEGIN
        SELECT
          DISPLAY_LABEL_NUMERIC_RANGE
        INTO ASSAYVALUE
        FROM
          GMD_QC_TEST_VALUES
        WHERE TEST_ID = QCASSY_TYP_ID
          AND ( MIN_NUM <= MIN_SPECCF
        OR MIN_NUM IS NULL )
          AND ( MAX_NUM >= MIN_SPECCF
        OR MAX_NUM IS NULL );
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ASSAYVALUE := ' ';
      END;
    END IF;
    RETURN (ASSAYVALUE);
  END ASSAYMIN_DISPCFFORMULA;

  FUNCTION ASSAYMAX_DISPCFFORMULA(QCASSY_TYP_ID IN NUMBER
                                 ,MAX_SPECCF IN NUMBER) RETURN CHAR IS
    ASSAYVALUE VARCHAR2(240);
  BEGIN
    IF ASSAY_TYPECP = 'L' THEN
      BEGIN
        SELECT
          DISPLAY_LABEL_NUMERIC_RANGE
        INTO ASSAYVALUE
        FROM
          GMD_QC_TEST_VALUES
        WHERE TEST_ID = QCASSY_TYP_ID
          AND ( MIN_NUM <= MAX_SPECCF
        OR MIN_NUM IS NULL )
          AND ( MAX_NUM >= MAX_SPECCF
        OR MAX_NUM IS NULL );
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ASSAYVALUE := ' ';
      END;
    END IF;
    RETURN (ASSAYVALUE);
  END ASSAYMAX_DISPCFFORMULA;

  FUNCTION MIN_CHARCFFORMULA(MIN_CHAR IN VARCHAR2) RETURN CHAR IS
    TEXTSPEC VARCHAR2(16);
  BEGIN
    IF MIN_CHAR IS NULL THEN
      RETURN (NULL);
    ELSE
      RETURN (MIN_CHAR);
    END IF;
  END MIN_CHARCFFORMULA;

  FUNCTION MAX_CHARCFFORMULA(MAX_CHAR IN VARCHAR2) RETURN CHAR IS
    TEXTSPEC VARCHAR2(16);
  BEGIN
    IF MAX_CHAR IS NULL THEN
      TEXTSPEC := ' ';
    ELSE
      TEXTSPEC := MAX_CHAR;
    END IF;
    RETURN (TEXTSPEC);
  END MAX_CHARCFFORMULA;

  FUNCTION NUM_RESULTCFFORMULA(TEXT_RESULT IN VARCHAR2
                              ,NUM_RESULT IN NUMBER
                              ,TEST_TYPE IN VARCHAR2
                              ,PRECISION IN NUMBER) RETURN CHAR IS
    L_PRECISION VARCHAR2(25);
    L_NUMBER NUMBER;
    L_NUM_RESULT VARCHAR2(25);
  BEGIN
    IF TEXT_RESULT IS NOT NULL THEN
      RETURN (NULL);
    ELSE
      IF NUM_RESULT IS NOT NULL THEN
        IF TEST_TYPE in ('N','L','E') THEN
          L_PRECISION := '999999999999999D' || TO_CHAR(POWER(10
                                      ,PRECISION) - 1);
          L_NUMBER := NUM_RESULT;
          L_NUM_RESULT := LTRIM(TO_CHAR(TO_NUMBER(TO_CHAR(L_NUMBER))
                                       ,L_PRECISION));
          RETURN (L_NUM_RESULT);
        ELSE
          L_NUMBER := TEXT_RESULT;
          RETURN (L_NUMBER);
        END IF;
      ELSE
        RETURN NULL;
      END IF;
    END IF;
  END NUM_RESULTCFFORMULA;

  FUNCTION TEXT_CODECFFORMULA(SPEC IN NUMBER) RETURN NUMBER IS
    TEXTCODE NUMBER(10);
  BEGIN
    SELECT
      TEXT_CODE
    INTO TEXTCODE
    FROM
      GMD_SPECIFICATIONS_B
    WHERE SPEC_ID = SPEC
      AND DELETE_MARK = 0;
    RETURN (TEXTCODE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END TEXT_CODECFFORMULA;

  FUNCTION ORGCFFORMULA RETURN CHAR IS
    ORG_CODE VARCHAR2(3);
  BEGIN
    SELECT
      DISTINCT
      ORGANIZATION_CODE
    INTO ORG_CODE
    FROM
      MTL_PARAMETERS
    WHERE ORGANIZATION_ID = P_ORGANIZATION_ID;
    ORGCP := ORG_CODE;
    /*SRW.MESSAGE(1000
               ,':OrgCP ' || ORGCP)*/NULL;
    RETURN (ORGCP);
  END ORGCFFORMULA;

  FUNCTION LOCATOR_NAMECFFORMULA(LOCATOR_ID IN NUMBER) RETURN CHAR IS
    LOCATOR VARCHAR2(240);
  BEGIN
    SELECT
      CONCATENATED_SEGMENTS
    INTO LOCATOR
    FROM
      MTL_ITEM_LOCATIONS_KFV
    WHERE INVENTORY_LOCATION_ID = LOCATOR_ID;
    RETURN (LOCATOR);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END LOCATOR_NAMECFFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION ASSAY_TYPECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ASSAY_TYPECP;
  END ASSAY_TYPECP_P;

  FUNCTION SPEC_CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SPEC_CP;
  END SPEC_CP_P;

  FUNCTION ACCEPT_CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ACCEPT_CP;
  END ACCEPT_CP_P;

  FUNCTION FINAL_CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FINAL_CP;
  END FINAL_CP_P;

  FUNCTION DATECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN DATECP;
  END DATECP_P;

  FUNCTION INCLUDECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN INCLUDECP;
  END INCLUDECP_P;

  FUNCTION SAMPLECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SAMPLECP;
  END SAMPLECP_P;

  FUNCTION ITEMCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ITEMCP;
  END ITEMCP_P;

  FUNCTION LOTNOCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LOTNOCP;
  END LOTNOCP_P;

  FUNCTION LOCATORCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LOCATORCP;
  END LOCATORCP_P;

  FUNCTION SUBINVENTORYCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SUBINVENTORYCP;
  END SUBINVENTORYCP_P;

  FUNCTION FROM_ITEMCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_ITEMCP;
  END FROM_ITEMCP_P;

  FUNCTION TO_ITEMCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_ITEMCP;
  END TO_ITEMCP_P;

  FUNCTION FROM_SAMPLECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_SAMPLECP;
  END FROM_SAMPLECP_P;

  FUNCTION TO_SAMPLECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_SAMPLECP;
  END TO_SAMPLECP_P;

  FUNCTION FROM_RSLT_DTCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_RSLT_DTCP;
  END FROM_RSLT_DTCP_P;

  FUNCTION TO_RSLT_DTCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_RSLT_DTCP;
  END TO_RSLT_DTCP_P;

  FUNCTION FROM_LOCATORCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_LOCATORCP;
  END FROM_LOCATORCP_P;

  FUNCTION TO_LOCATORCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_LOCATORCP;
  END TO_LOCATORCP_P;

  FUNCTION FROM_LOTNOCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_LOTNOCP;
  END FROM_LOTNOCP_P;

  FUNCTION TO_LOTNOCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_LOTNOCP;
  END TO_LOTNOCP_P;

  FUNCTION FROM_SUBINVENTORYCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_SUBINVENTORYCP;
  END FROM_SUBINVENTORYCP_P;

  FUNCTION TO_SUBINVENTORYCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_SUBINVENTORYCP;
  END TO_SUBINVENTORYCP_P;

  FUNCTION ORGCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ORGCP;
  END ORGCP_P;

END GMD_QCR02USR_XMLP_PKG;



/
