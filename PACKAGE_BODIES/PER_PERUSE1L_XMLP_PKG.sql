--------------------------------------------------------
--  DDL for Package Body PER_PERUSE1L_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PER_PERUSE1L_XMLP_PKG" AS
/* $Header: PERUSE1LB.pls 120.0 2008/01/07 12:31:49 srikrish noship $ */
  --G_FILE_TYPE TEXT_IO.FILE_TYPE;

  --G_IL_FEIN VARCHAR2(10);

  --G_FILE_NAME VARCHAR2(30);

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR C_DEFAULTS IS
      SELECT
        ORG_INFORMATION8,
        ORG_INFORMATION9,
        ORG_INFORMATION11,
        ORG_INFORMATION12
      FROM
        HR_ORGANIZATION_INFORMATION
      WHERE ORGANIZATION_ID = C_PARENT_ORG_ID
        AND ORG_INFORMATION_CONTEXT = 'VETS_EEO_Dup';
    L_DEFAULT C_DEFAULTS%ROWTYPE;
    L_BUFFER VARCHAR2(1000);
    G_DELIMITER VARCHAR2(1) := ',';
    G_EOL VARCHAR2(1) := FND_GLOBAL.LOCAL_CHR(10);
    L_DUMMY BOOLEAN;
  BEGIN
    --HR_STANDARD.EVENT('BEFORE REPORT');
    L_DUMMY:=P_REPORT_YEARVALIDTRIGGER;
    C_END_OF_TIME := hr_general.END_OF_TIME;
    C_BUSINESS_GROUP_NAME := hr_reports.GET_BUSINESS_GROUP(P_BUSINESS_GROUP_ID);
    C_MAXIMUM_NO_OF_EMPLOYEES := P_MAXIMUM_NO_OF_EMPLOYEES;
    C_PAYROLL_PERIOD_DATE_START := FND_DATE.CANONICAL_TO_DATE(P_PAYROLL_PERIOD_DATE_START);
    C_PAYROLL_PERIOD_DATE_END := FND_DATE.CANONICAL_TO_DATE(P_PAYROLL_PERIOD_DATE_END);
    C_REPORT_YEAR := P_REPORT_YEAR;
    C_REPORT_DATE := TRUNC(SYSDATE);
    SELECT
      PGH.NAME,
      PGV.VERSION_NUMBER,
      PGN.ENTITY_ID,
      PGN.HIERARCHY_NODE_ID
    INTO C_HIERARCHY_NAME,C_HIERARCHY_VERSION_NUM,C_PARENT_ORG_ID,C_PARENT_NODE_ID
    FROM
      PER_GEN_HIERARCHY PGH,
      PER_GEN_HIERARCHY_VERSIONS PGV,
      PER_GEN_HIERARCHY_NODES PGN
    WHERE PGH.HIERARCHY_ID = P_HIERARCHY_ID
      AND PGH.HIERARCHY_ID = PGV.HIERARCHY_ID
      AND PGV.HIERARCHY_VERSION_ID = P_HIERARCHY_VERSION_ID
      AND PGN.HIERARCHY_VERSION_ID = PGV.HIERARCHY_VERSION_ID
      AND PGN.NODE_TYPE = 'PAR';
    SELECT
      COUNT(PGHN.HIERARCHY_NODE_ID)
    INTO C_NO_OF_ESTABLISHMENTS
    FROM
      PER_GEN_HIERARCHY_NODES PGHN
    WHERE PGHN.HIERARCHY_VERSION_ID = P_HIERARCHY_VERSION_ID
      AND PGHN.NODE_TYPE = 'EST';
    OPEN C_DEFAULTS;
    FETCH C_DEFAULTS
     INTO L_DEFAULT;
    IF C_DEFAULTS%NOTFOUND THEN
      NULL;
    ELSE
      DEFAULT_ACTIVITIES_LINE1 := UPPER(LTRIM(RTRIM(L_DEFAULT.ORG_INFORMATION8)));
      DEFAULT_ACTIVITIES_LINE2 := UPPER(LTRIM(RTRIM(L_DEFAULT.ORG_INFORMATION9)));
      DEFAULT_ACTIVITIES_LINE3 := UPPER(LTRIM(RTRIM(L_DEFAULT.ORG_INFORMATION11)));
      DEFAULT_ACTIVITIES_LINE4 := UPPER(LTRIM(RTRIM(L_DEFAULT.ORG_INFORMATION12)));
    END IF;
    CLOSE C_DEFAULTS;
    IF P_AUDIT_REPORT = 'Y' THEN
      --OPEN;
      NULL;
      L_BUFFER := 'Person Id' || G_DELIMITER || 'Last Name' || G_DELIMITER || 'First Name' || G_DELIMITER || 'Employee Number' || G_DELIMITER || 'Gender' || G_DELIMITER || 'Ethnic Origin' || G_DELIMITER
      || 'Assignment Id' || G_DELIMITER || 'Job Id' || G_DELIMITER || 'Job Name' || G_DELIMITER || 'Location Id' || G_DELIMITER || 'Location Code' || G_DELIMITER || G_EOL;
      --PUT(L_BUFFER);
      FND_FILE.PUT_LINE(FND_FILE.LOG,L_BUFFER);
    END IF;
    RETURN TRUE;
  END BEFOREREPORT;

  FUNCTION P_REPORT_YEARVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    IF P_PAYROLL_PERIOD_DATE_END IS NOT NULL THEN
      P_REPORT_YEAR := TO_CHAR(FND_DATE.CANONICAL_TO_DATE(P_PAYROLL_PERIOD_DATE_END)
                              ,'YYYY');
    ELSE
      P_REPORT_YEAR := TO_CHAR(SYSDATE
                              ,'YYYY');
    END IF;
    RETURN (TRUE);
  END P_REPORT_YEARVALIDTRIGGER;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    --HR_STANDARD.EVENT('AFTER REPORT');
    IF P_AUDIT_REPORT = 'Y' THEN
      --CLOSE;
      NULL;
    END IF;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_TOT_ACTFORMULA(EST_NODE_ID IN NUMBER
                           ,HEADQUARTERS IN VARCHAR2) RETURN NUMBER IS
    L_E_ACT1 VARCHAR2(150) := NULL;
    L_E_ACT2 VARCHAR2(150) := NULL;
    L_E_ACT3 VARCHAR2(150) := NULL;
    L_E_ACT4 VARCHAR2(150) := NULL;
    L_ACTIVITY VARCHAR2(150) := NULL;
    L_DATE_END DATE := FND_DATE.CANONICAL_TO_DATE(P_PAYROLL_PERIOD_DATE_END);
    L_DATE_START DATE := FND_DATE.CANONICAL_TO_DATE(P_PAYROLL_PERIOD_DATE_START);
    L_COUNT_EMPS NUMBER := 0;
    L_REPORT_EMPS NUMBER := 0;
    L_BUFFER VARCHAR2(2000);
    G_DELIMITER VARCHAR2(1) := ',';
    G_EOL VARCHAR2(1) := FND_GLOBAL.LOCAL_CHR(10);
    CURSOR C_EST IS
      SELECT
        NVL(HLEI1.LEI_INFORMATION5
           ,DEFAULT_ACTIVITIES_LINE1),
        NVL(HLEI1.LEI_INFORMATION6
           ,DEFAULT_ACTIVITIES_LINE2),
        NVL(HLEI1.LEI_INFORMATION7
           ,DEFAULT_ACTIVITIES_LINE3),
        NVL(HLEI1.LEI_INFORMATION8
           ,DEFAULT_ACTIVITIES_LINE4)
      FROM
        HR_LOCATION_EXTRA_INFO HLEI1,
        PER_GEN_HIERARCHY_NODES PGHN
      WHERE ( HLEI1.INFORMATION_TYPE = 'EEO-1 Specific Information'
        AND HLEI1.LEI_INFORMATION_CATEGORY = 'EEO-1 Specific Information' )
        AND HLEI1.LOCATION_ID = PGHN.ENTITY_ID
        AND PGHN.PARENT_HIERARCHY_NODE_ID = C_PARENT_NODE_ID
        AND PGHN.HIERARCHY_NODE_ID = C_TOT_ACTFORMULA.EST_NODE_ID
        AND PGHN.NODE_TYPE = 'EST';
    CURSOR C_AUDIT_REPORT IS
      SELECT
        PEO.PERSON_ID,
        PEO.LAST_NAME,
        PEO.FIRST_NAME,
        PEO.EMPLOYEE_NUMBER,
        PEO.SEX,
        PEO.PER_INFORMATION1 ETHNIC,
        ASS.ASSIGNMENT_ID,
        ASS.JOB_ID,
        JOB.NAME JOB_NAME,
        ASS.LOCATION_ID,
        HL.LOCATION_CODE
      FROM
        PER_PEOPLE_F PEO,
        PER_ASSIGNMENTS_F ASS,
        PER_JOBS_VL JOB,
        HR_LOCATIONS_ALL HL
      WHERE PEO.PERSON_ID = ASS.PERSON_ID
        AND PEO.PER_INFORMATION1 is not null
        AND PEO.PER_INFORMATION_CATEGORY = 'US'
        AND JOB.JOB_INFORMATION_CATEGORY = 'US'
        AND L_DATE_START <= NVL(JOB.DATE_TO
         ,L_DATE_START)
        AND L_DATE_END >= JOB.DATE_FROM
        AND JOB.JOB_INFORMATION1 is not NULL
        AND ASS.JOB_ID = JOB.JOB_ID
        AND PEO.EFFECTIVE_START_DATE = (
        SELECT
          MAX(PEO1.EFFECTIVE_START_DATE)
        FROM
          PER_PEOPLE_F PEO1
        WHERE L_DATE_START <= PEO1.EFFECTIVE_END_DATE
          AND L_DATE_END >= PEO1.EFFECTIVE_START_DATE
          AND PEO.PERSON_ID = PEO1.PERSON_ID
          AND PEO1.CURRENT_EMPLOYEE_FLAG = 'Y' )
        AND ASS.EFFECTIVE_START_DATE = (
        SELECT
          MAX(ASS1.EFFECTIVE_START_DATE)
        FROM
          PER_ASSIGNMENTS_F ASS1
        WHERE L_DATE_START <= ASS1.EFFECTIVE_END_DATE
          AND L_DATE_END >= ASS1.EFFECTIVE_START_DATE
          AND ASS.PERSON_ID = ASS1.PERSON_ID
          AND ASS1.ASSIGNMENT_TYPE = 'E'
          AND ASS1.PRIMARY_FLAG = 'Y' )
        AND ASS.ASSIGNMENT_TYPE = 'E'
        AND ASS.PRIMARY_FLAG = 'Y'
        AND ASS.BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID
        AND PEO.BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID
        AND JOB.BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID
        AND EXISTS (
        SELECT
          'X'
        FROM
          HR_ORGANIZATION_INFORMATION HOI1,
          HR_ORGANIZATION_INFORMATION HOI2
        WHERE TO_CHAR(ASS.ASSIGNMENT_STATUS_TYPE_ID) = HOI1.ORG_INFORMATION1
          AND HOI1.ORG_INFORMATION_CONTEXT = 'Reporting Statuses'
          AND HOI1.ORGANIZATION_ID = P_BUSINESS_GROUP_ID
          AND ASS.EMPLOYMENT_CATEGORY = HOI2.ORG_INFORMATION1
          AND HOI2.ORGANIZATION_ID = P_BUSINESS_GROUP_ID
          AND HOI2.ORG_INFORMATION_CONTEXT = 'Reporting Categories' )
        AND ASS.LOCATION_ID = HL.LOCATION_ID
        AND ASS.LOCATION_ID in (
        SELECT
          DISTINCT
          PGN.ENTITY_ID
        FROM
          PER_GEN_HIERARCHY_NODES PGN
        WHERE PGN.HIERARCHY_VERSION_ID = P_HIERARCHY_VERSION_ID
          AND ( PGN.HIERARCHY_NODE_ID = EST_NODE_ID
        OR PGN.PARENT_HIERARCHY_NODE_ID = EST_NODE_ID )
          AND PGN.NODE_TYPE in ( 'EST' , 'LOC' ) )
        AND HEADQUARTERS = 'N';
  BEGIN
    OPEN C_EST;
    FETCH C_EST
     INTO L_E_ACT1,L_E_ACT2,L_E_ACT3,L_E_ACT4;
    IF L_E_ACT1 IS NOT NULL THEN
      L_ACTIVITY := RPAD(LTRIM(RTRIM(UPPER(L_E_ACT1)))
                        ,40);
    END IF;
    IF L_E_ACT2 IS NOT NULL THEN
      L_ACTIVITY := RPAD(L_ACTIVITY || ' ' || (LTRIM(RTRIM(UPPER(L_E_ACT2))))
                        ,40);
    END IF;
    IF L_E_ACT3 IS NOT NULL THEN
      L_ACTIVITY := RPAD(L_ACTIVITY || ' ' || (LTRIM(RTRIM(UPPER(L_E_ACT3))))
                        ,40);
    END IF;
    IF L_E_ACT4 IS NOT NULL THEN
      L_ACTIVITY := RPAD(L_ACTIVITY || ' ' || (LTRIM(RTRIM(UPPER(L_E_ACT4))))
                        ,40);
    END IF;
    C_MAIN_ACTIVITY := L_ACTIVITY;
    SELECT
      COUNT('ass')
    INTO L_REPORT_EMPS
    FROM
      PER_PEOPLE_F PEO,
      PER_ASSIGNMENTS_F ASS,
      PER_JOBS_VL JOB
    WHERE PEO.PERSON_ID = ASS.PERSON_ID
      AND PEO.PER_INFORMATION1 is not null
      AND PEO.PER_INFORMATION_CATEGORY = 'US'
      AND JOB.JOB_INFORMATION_CATEGORY = 'US'
      AND L_DATE_START <= NVL(JOB.DATE_TO
       ,L_DATE_START)
      AND L_DATE_END >= JOB.DATE_FROM
      AND JOB.JOB_INFORMATION1 is not NULL
      AND ASS.JOB_ID = JOB.JOB_ID
      AND PEO.EFFECTIVE_START_DATE = (
      SELECT
        MAX(PEO1.EFFECTIVE_START_DATE)
      FROM
        PER_PEOPLE_F PEO1
      WHERE L_DATE_START <= PEO1.EFFECTIVE_END_DATE
        AND L_DATE_END >= PEO1.EFFECTIVE_START_DATE
        AND PEO.PERSON_ID = PEO1.PERSON_ID
        AND PEO1.CURRENT_EMPLOYEE_FLAG = 'Y' )
      AND ASS.EFFECTIVE_START_DATE = (
      SELECT
        MAX(ASS1.EFFECTIVE_START_DATE)
      FROM
        PER_ASSIGNMENTS_F ASS1
      WHERE L_DATE_START <= ASS1.EFFECTIVE_END_DATE
        AND L_DATE_END >= ASS1.EFFECTIVE_START_DATE
        AND ASS.PERSON_ID = ASS1.PERSON_ID
        AND ASS1.ASSIGNMENT_TYPE = 'E'
        AND ASS1.PRIMARY_FLAG = 'Y' )
      AND ASS.ASSIGNMENT_TYPE = 'E'
      AND ASS.PRIMARY_FLAG = 'Y'
      AND ASS.BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID
      AND PEO.BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID
      AND JOB.BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID
      AND EXISTS (
      SELECT
        'X'
      FROM
        HR_ORGANIZATION_INFORMATION HOI1,
        HR_ORGANIZATION_INFORMATION HOI2
      WHERE TO_CHAR(ASS.ASSIGNMENT_STATUS_TYPE_ID) = HOI1.ORG_INFORMATION1
        AND HOI1.ORG_INFORMATION_CONTEXT = 'Reporting Statuses'
        AND HOI1.ORGANIZATION_ID = P_BUSINESS_GROUP_ID
        AND ASS.EMPLOYMENT_CATEGORY = HOI2.ORG_INFORMATION1
        AND HOI2.ORGANIZATION_ID = P_BUSINESS_GROUP_ID
        AND HOI2.ORG_INFORMATION_CONTEXT = 'Reporting Categories' )
      AND ASS.LOCATION_ID in (
      SELECT
        DISTINCT
        PGN.ENTITY_ID
      FROM
        PER_GEN_HIERARCHY_NODES PGN
      WHERE PGN.HIERARCHY_VERSION_ID = P_HIERARCHY_VERSION_ID
        AND ( PGN.HIERARCHY_NODE_ID = EST_NODE_ID
      OR PGN.PARENT_HIERARCHY_NODE_ID = EST_NODE_ID )
        AND PGN.NODE_TYPE in ( 'EST' , 'LOC' ) )
      AND HEADQUARTERS = 'N';
    C_REPORT_EMPS := NVL(L_REPORT_EMPS
                        ,0);
    SELECT
      COUNT('ass')
    INTO L_COUNT_EMPS
    FROM
      PER_ASSIGNMENTS_F ASS,
      PER_JOBS_VL JOB
    WHERE JOB.JOB_INFORMATION_CATEGORY = 'US'
      AND L_DATE_START <= NVL(JOB.DATE_TO
       ,L_DATE_END)
      AND L_DATE_END >= JOB.DATE_FROM
      AND JOB.JOB_INFORMATION1 is not null
      AND JOB.BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID
      AND ASS.JOB_ID = JOB.JOB_ID
      AND ASS.BUSINESS_GROUP_ID = P_BUSINESS_GROUP_ID
      AND ASS.ASSIGNMENT_TYPE = 'E'
      AND ASS.PRIMARY_FLAG = 'Y'
      AND EXISTS (
      SELECT
        'X'
      FROM
        HR_ORGANIZATION_INFORMATION HOI1,
        HR_ORGANIZATION_INFORMATION HOI2
      WHERE TO_CHAR(ASS.ASSIGNMENT_STATUS_TYPE_ID) = HOI1.ORG_INFORMATION1
        AND HOI1.ORG_INFORMATION_CONTEXT = 'Reporting Statuses'
        AND HOI1.ORGANIZATION_ID = P_BUSINESS_GROUP_ID
        AND ASS.EMPLOYMENT_CATEGORY = HOI2.ORG_INFORMATION1
        AND HOI2.ORGANIZATION_ID = P_BUSINESS_GROUP_ID
        AND HOI2.ORG_INFORMATION_CONTEXT = 'Reporting Categories' )
      AND ASS.EFFECTIVE_START_DATE = (
      SELECT
        MAX(ASS1.EFFECTIVE_START_DATE)
      FROM
        PER_ASSIGNMENTS_F ASS1
      WHERE L_DATE_START <= ASS1.EFFECTIVE_END_DATE
        AND L_DATE_END >= ASS1.EFFECTIVE_START_DATE
        AND ASS.PERSON_ID = ASS1.PERSON_ID
        AND ASS1.ASSIGNMENT_TYPE = 'E'
        AND ASS1.PRIMARY_FLAG = 'Y' )
      AND L_DATE_START <= ASS.EFFECTIVE_END_DATE
      AND L_DATE_END >= ASS.EFFECTIVE_START_DATE
      AND HEADQUARTERS = 'N'
      AND ASS.LOCATION_ID in (
      SELECT
        DISTINCT
        PGN.ENTITY_ID
      FROM
        PER_GEN_HIERARCHY_NODES PGN
      WHERE PGN.HIERARCHY_VERSION_ID = P_HIERARCHY_VERSION_ID
        AND ( PGN.HIERARCHY_NODE_ID = EST_NODE_ID
      OR PGN.PARENT_HIERARCHY_NODE_ID = EST_NODE_ID )
        AND PGN.NODE_TYPE in ( 'EST' , 'LOC' ) );
    C_TOT_EMPS := NVL(L_COUNT_EMPS
                     ,0);
    /*SRW.MESSAGE(222
               ,'est_node_id : ' || EST_NODE_ID)*/NULL;
    /*SRW.MESSAGE(222
               ,'c_tot_emps : ' || C_TOT_EMPS)*/NULL;
    IF L_REPORT_EMPS BETWEEN 1 AND P_MAXIMUM_NO_OF_EMPLOYEES THEN
      TOT_COUNT_EMPS := NVL(TOT_COUNT_EMPS
                           ,0) + L_REPORT_EMPS;
      IF P_AUDIT_REPORT = 'Y' THEN
        FOR per IN C_AUDIT_REPORT LOOP
          L_BUFFER := PER.PERSON_ID || G_DELIMITER || PER.LAST_NAME || G_DELIMITER || NVL(PER.FIRST_NAME
                         ,' ') || G_DELIMITER || NVL(PER.EMPLOYEE_NUMBER
                         ,' ') || G_DELIMITER || NVL(PER.SEX
                         ,' ') || G_DELIMITER || NVL(PER.ETHNIC
                         ,' ') || G_DELIMITER || PER.ASSIGNMENT_ID || G_DELIMITER || NVL(PER.JOB_ID
                         ,' ') || G_DELIMITER || NVL(PER.JOB_NAME
                         ,' ') || G_DELIMITER || NVL(PER.LOCATION_ID
                         ,' ') || G_DELIMITER || NVL(PER.LOCATION_CODE
                         ,' ') || G_DELIMITER || G_EOL;
          --PUT(L_BUFFER);
          FND_FILE.PUT_LINE(FND_FILE.LOG,L_BUFFER);
        END LOOP;
      END IF;
    END IF;
    RETURN NULL;
  END C_TOT_ACTFORMULA;

  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;

  FUNCTION C_REPORT_EMPS_P RETURN NUMBER IS
  BEGIN
    RETURN C_REPORT_EMPS;
  END C_REPORT_EMPS_P;

  FUNCTION C_MAIN_ACTIVITY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_MAIN_ACTIVITY;
  END C_MAIN_ACTIVITY_P;

  FUNCTION C_TOT_EMPS_P RETURN NUMBER IS
  BEGIN
    RETURN C_TOT_EMPS;
  END C_TOT_EMPS_P;

  FUNCTION C_END_OF_TIME_P RETURN DATE IS
  BEGIN
    RETURN C_END_OF_TIME;
  END C_END_OF_TIME_P;

  FUNCTION TOT_COUNT_EMPS_P RETURN NUMBER IS
  BEGIN
    RETURN TOT_COUNT_EMPS;
  END TOT_COUNT_EMPS_P;

  FUNCTION C_BUSINESS_GROUP_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BUSINESS_GROUP_NAME;
  END C_BUSINESS_GROUP_NAME_P;

  FUNCTION C_HIERARCHY_VERSION_NUM_P RETURN NUMBER IS
  BEGIN
    RETURN C_HIERARCHY_VERSION_NUM;
  END C_HIERARCHY_VERSION_NUM_P;

  FUNCTION C_PARENT_NODE_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_PARENT_NODE_ID;
  END C_PARENT_NODE_ID_P;

  FUNCTION C_PARENT_ORG_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_PARENT_ORG_ID;
  END C_PARENT_ORG_ID_P;

  FUNCTION DEFAULT_ACTIVITIES_LINE1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN DEFAULT_ACTIVITIES_LINE1;
  END DEFAULT_ACTIVITIES_LINE1_P;

  FUNCTION DEFAULT_ACTIVITIES_LINE2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN DEFAULT_ACTIVITIES_LINE2;
  END DEFAULT_ACTIVITIES_LINE2_P;

  FUNCTION DEFAULT_ACTIVITIES_LINE3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN DEFAULT_ACTIVITIES_LINE3;
  END DEFAULT_ACTIVITIES_LINE3_P;

  FUNCTION DEFAULT_ACTIVITIES_LINE4_P RETURN VARCHAR2 IS
  BEGIN
    RETURN DEFAULT_ACTIVITIES_LINE4;
  END DEFAULT_ACTIVITIES_LINE4_P;

  FUNCTION C_HIERARCHY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_HIERARCHY_NAME;
  END C_HIERARCHY_NAME_P;

  FUNCTION C_NO_OF_ESTABLISHMENTS_P RETURN NUMBER IS
  BEGIN
    RETURN C_NO_OF_ESTABLISHMENTS;
  END C_NO_OF_ESTABLISHMENTS_P;

  FUNCTION C_REPORT_YEAR_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_REPORT_YEAR;
  END C_REPORT_YEAR_P;

  FUNCTION C_REPORT_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_REPORT_DATE;
  END C_REPORT_DATE_P;

  FUNCTION C_MAXIMUM_NO_OF_EMPLOYEES_P RETURN NUMBER IS
  BEGIN
    RETURN C_MAXIMUM_NO_OF_EMPLOYEES;
  END C_MAXIMUM_NO_OF_EMPLOYEES_P;

  FUNCTION C_PAYROLL_PERIOD_DATE_START_P RETURN DATE IS
  BEGIN
    RETURN C_PAYROLL_PERIOD_DATE_START;
  END C_PAYROLL_PERIOD_DATE_START_P;

  FUNCTION C_PAYROLL_PERIOD_DATE_END_P RETURN DATE IS
  BEGIN
    RETURN C_PAYROLL_PERIOD_DATE_END;
  END C_PAYROLL_PERIOD_DATE_END_P;

  /*PROCEDURE OPEN IS
    L_APPLCSF VARCHAR2(2000);
    L_PER_TOP VARCHAR2(2000);
    L_APPLOUT VARCHAR2(2000);
    L_PATH VARCHAR2(2000);
    L_FILE_NAME VARCHAR2(100);
    L_NAME VARCHAR2(60) := 'file_io.open';
    CURSOR C_CONCURRENT_ID IS
      SELECT
        MAX(FCR.REQUEST_ID)
      FROM
        FND_CONCURRENT_REQUESTS FCR,
        FND_CONCURRENT_PROGRAMS FCP
      WHERE FCP.APPLICATION_ID = 800
        AND FCP.CONCURRENT_PROGRAM_NAME = 'PERRPE1L'
        AND FCR.CONCURRENT_PROGRAM_ID = FCP.CONCURRENT_PROGRAM_ID
        AND FCR.PROGRAM_APPLICATION_ID = FCP.APPLICATION_ID;
    L_REQUEST_ID NUMBER;
  BEGIN
    TOOL_ENV.GETVAR('APPLCSF'
                   ,L_APPLCSF);
    TOOL_ENV.GETVAR('PER_TOP'
                   ,L_PER_TOP);
    L_PATH := NVL(L_APPLCSF
                 ,L_PER_TOP);
    OPEN C_CONCURRENT_ID;
    FETCH C_CONCURRENT_ID
     INTO L_REQUEST_ID;
    CLOSE C_CONCURRENT_ID;
    G_FILE_NAME := 'o' || TO_CHAR(L_REQUEST_ID);
    L_FILE_NAME := G_FILE_NAME || '.a03';
    IF L_PATH IS NOT NULL THEN
      TOOL_ENV.GETVAR('APPLOUT'
                     ,L_APPLOUT);
      L_PATH := L_PATH || '/' || L_APPLOUT || '/' || L_FILE_NAME;
    ELSE
      L_PATH := L_FILE_NAME;
    END IF;
    G_FILE_TYPE := TEXT_IO.FOPEN(L_PATH
                                ,'W');
    HR_UTILITY.TRACE('file_io.open :' || L_PATH);
  EXCEPTION
    WHEN OTHERS THEN
      HR_UTILITY.SET_LOCATION('Leaving....' || L_NAME
                             ,999);
	NULL;
      FND_MESSAGE.RAISE_ERROR;
  END OPEN;*/

  /*PROCEDURE PUT(P_CHAR IN VARCHAR2) IS
    L_NAME VARCHAR2(60) := 'file_io.put';
  BEGIN
    TEXT_IO.PUT(G_FILE_TYPE
               ,P_CHAR);
    HR_UTILITY.TRACE('file_io .put :' || P_CHAR);
  EXCEPTION
    WHEN OTHERS THEN
      HR_UTILITY.SET_LOCATION('Leaving....' || L_NAME
                             ,999);
	NULL;
      FND_MESSAGE.RAISE_ERROR;
  END PUT;*/

  /*PROCEDURE CLOSE IS
    L_NAME VARCHAR2(60) := 'file_io.close';
  BEGIN
    TEXT_IO.FCLOSE(G_FILE_TYPE);
    HR_UTILITY.TRACE('file_io.close state mag file closed ');
  EXCEPTION
    WHEN OTHERS THEN
      HR_UTILITY.SET_LOCATION('Leaving....' || L_NAME
                             ,999);
	NULL;
      FND_MESSAGE.RAISE_ERROR;
  END CLOSE;*/

END PER_PERUSE1L_XMLP_PKG;

/
