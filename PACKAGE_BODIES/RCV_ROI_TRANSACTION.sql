--------------------------------------------------------
--  DDL for Package Body RCV_ROI_TRANSACTION
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."RCV_ROI_TRANSACTION" 
/* $Header: RCVPRETB.pls 120.41.12010000.67 2014/03/17 06:13:26 smididud ship $*/
AS
    g_asn_debug         VARCHAR2(1)  := asn_debug.is_debug_on;  -- Bug 9152790: rcv debug enhancement
    x_progress          VARCHAR2(3);
    g_pkg_name CONSTANT VARCHAR2(30) := 'RCV_ROI_TRANSACTION';
    x_drop_ship_flag    VARCHAR2(1)  := 'N';
    x_auto_deliver VARCHAR2(1);
    e_validation_error  EXCEPTION;

    --  Bug 14725305 added for dropship project po
    --  This will just create a new locator for dynamic locator setup.
    FUNCTION getloc(x_locid OUT NOCOPY NUMBER, p_org_id NUMBER, p_locctrl NUMBER, p_segmentarray fnd_flex_ext.segmentarray) return BOOLEAN is
          l_nseg           NUMBER;
          l_seglist        fnd_flex_key_api.segment_list;
          l_fftype         fnd_flex_key_api.flexfield_type;
          l_ffstru         fnd_flex_key_api.structure_type;
          l_segment_type   fnd_flex_key_api.segment_type;
          l_locator        VARCHAR2(32000);
          l_error_exp      VARCHAR2(250);
          l_structure_list fnd_flex_key_api.structure_list;
          l_nstru          NUMBER;
          l_index          NUMBER;
          l_locid          NUMBER;
          l_delim          VARCHAR2(1);
          l_val            BOOLEAN  := FALSE;
          DYNAMIC CONSTANT NUMBER := 3;
          l_operation      VARCHAR2(100);
        -- Local array to hold the data for getting the cancatenated segment.
          l_segmentarray fnd_flex_ext.segmentarray;
    BEGIN

       fnd_flex_key_api.set_session_mode('seed_data');

       -- find flex field type
       l_fftype := fnd_flex_key_api.find_flexfield('INV', 'MTLL');

       -- find flex structure type
       l_ffstru := fnd_flex_key_api.find_structure(l_fftype, 101);
       -- find segment list for the key flex field
       fnd_flex_key_api.get_segments(l_fftype, l_ffstru, TRUE, l_nseg, l_seglist);

       -- find segment delimiter
       l_delim := l_ffstru.segment_separator;

       -- get the corresponding column for all segments
       --
       -- The default segments for the LocatorKFF is SEGMENT1 - SEGMENT20
       --  'To_number(Substr(l_segment_type.column_name, 8))' gives the
       -- number of the segment i.e. 1 - 20 which is used as index to
       -- fetch the corresponding columns from segments array
       --
       FOR l_loop IN 1..l_nseg LOOP

          l_segment_type := fnd_flex_key_api.find_segment(l_fftype, l_ffstru, l_seglist(l_loop));
          -- Bug Fix#4747090
          --l_segmentarray contains data in the order flexfield is defined. Used in creating cancatenated segments for validation.
          l_segmentarray(l_loop) := p_segmentarray(To_number(Substr(l_segment_type.column_name, 8)));
       END LOOP;

       -- Gets the encoded cancatenated string
       l_locator := fnd_flex_ext.concatenate_segments(n_segments => l_nseg,
                                                       segments   => l_segmentarray,
                                                       delimiter  => l_delim);
       IF (g_asn_debug = 'Y') THEN
           asn_debug.put_line('Locator is : ' || l_locator);
       END IF;

       /*
        * If Locator control allows dynamic creation then create the combination
        * if it does not already exist else just check if it exists.
        */
       if p_locctrl = 3 then
           l_operation := 'CREATE_COMBINATION';
       else
          l_operation := 'FIND_COMBINATION';
       end if;

       l_val := FND_FLEX_KEYVAL.Validate_Segs(
                     OPERATION        => l_operation,
                     APPL_SHORT_NAME  => 'INV',
                     KEY_FLEX_CODE  => 'MTLL',
                     STRUCTURE_NUMBER  => 101,
                     CONCAT_SEGMENTS  => l_locator,
                     VALUES_OR_IDS  => 'I',
                     DATA_SET  => p_org_id ) ;
        if l_val then
           x_locid := fnd_flex_keyval.combination_id;
        else
           x_locid := NULL;
           l_error_exp := substr(fnd_flex_key_api.message(),1,240);
           IF (g_asn_debug = 'Y') THEN
              asn_debug.put_line('Error in getloc : ' || l_error_exp);
              asn_debug.put_line('Error in getloc : error_segment :' || FND_FLEX_KEYVAL.error_segment);
              asn_debug.put_line('Error in getloc : error_message :' || FND_FLEX_KEYVAL.error_message);
              asn_debug.put_line('Error in getloc : encoded_error_message :' || FND_FLEX_KEYVAL.encoded_error_message);
           END IF;
        end if;

         return l_val;

    EXCEPTION

       WHEN OTHERS THEN

          l_error_exp := substr(fnd_flex_key_api.message(),1,240);
          IF (g_asn_debug = 'Y') THEN
             asn_debug.put_line('Error in getloc : ' || l_error_exp);
             asn_debug.put_line('Error:'||substr(sqlerrm,1,250));
          END IF;
          x_locid := NULL;
          RETURN FALSE;

    END getloc;

    /*  Bug 14725305 added for dropship project po, the logic is:
        1. Default the subinventory as in default_to_subloc_info.
        2. If locator control is 2/3
             get the default locator with project and task.
             if no default locator with proj/task found
                if locator control =2
                   raise error.
                if locator control=3
                   get the default locator without proj/task (this will be used as the physical location)
                   getloc: create a new locator by passing segment19/20 as the current proj/task.
                   once the locator is created, stamp the below fields in MIL
                    - status (using material status api)
                    - physical location id (ie, default locator without proj/task )
                    - subinventory (defaulted subinv)
        3. Copied the remaining logic from default_to_subloc_info.
    */
    PROCEDURE default_for_pjm_dropship(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        l_from_subinventory    rcv_transactions.from_subinventory%TYPE;
        l_from_locator_id      rcv_transactions.from_locator_id%TYPE;
        x_locator_control      NUMBER;
        x_default_subinventory VARCHAR2(10);
        x_default_locator_id   NUMBER;
        x_success              BOOLEAN;
        l_segmentarray         fnd_flex_ext.segmentarray;
        l_loc_id               number;
    BEGIN
        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('inside default_for_pjm_dropship');
        END IF;

        /* Get default subinventory from the setup if it is a direct delivery
         * or just a delivery and if subinventory is null.
        */
        IF (x_cascaded_table(n).transaction_type IN('RECEIVE', 'DELIVER')) THEN --{
            IF (   (x_cascaded_table(n).auto_transact_code <> 'RECEIVE')
                OR x_cascaded_table(n).auto_transact_code IS NULL) THEN --{
                /*
                ** A subinventory must have been defined on the po or a default
                ** must be available for the item.  If it's not already defined
                ** then go get it out of inventory.  If you're using express
                ** then it's ok to get the default rather than having it be
                ** defined on the record
                */
                IF (x_cascaded_table(n).subinventory IS NULL) THEN --{
                    /*
                    ** If you're using express then it's ok to get the default
                    ** rather than having it be defined on the record
                    */
                    x_progress  := '120';
                    po_subinventories_s.get_default_subinventory(x_cascaded_table(n).to_organization_id,
                                                                 x_cascaded_table(n).item_id,
                                                                 x_cascaded_table(n).subinventory
                                                                );

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Defaulting subinventory from item: Sub = ' || x_cascaded_table(n).subinventory);
                    END IF;
                END IF; --} (X_cascaded_table(n).subinventory IS NULL)
            END IF; --}

            /* We can have sub/loc for receive and deliver transaction. If subinventory
             * is not null and locator_id is null, then get the default locator_id if
             * the there is a locator.
            */
            IF (x_cascaded_table(n).subinventory IS NOT NULL) THEN --{
                x_progress  := '122';
                po_subinventories_s.get_locator_control(x_cascaded_table(n).to_organization_id,
                                                        x_cascaded_table(n).subinventory,
                                                        x_cascaded_table(n).item_id,
                                                        x_locator_control
                                                       );

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Locator Control = ' || TO_CHAR(x_locator_control));
                END IF;

                /*
                ** If locator control is 2 which means it is under predefined
                ** locator contol or 3 which means it's under dynamic (any value)
                ** locator control then you need to go get the default locator id
                */
                IF ( ( x_locator_control = 2 OR x_locator_control = 3)
                       AND x_cascaded_table(n).locator_id IS NULL) THEN --{
                    x_progress  := '123';

                    BEGIN
                      SELECT mld.locator_id
                      INTO   x_cascaded_table(n).locator_id
                      FROM   mtl_item_loc_defaults mld,
                             mtl_item_locations mil
                      WHERE  mld.inventory_item_id = x_cascaded_table(n).item_id
                      AND    mld.organization_id = x_cascaded_table(n).to_organization_id
                      AND    mld.subinventory_code = x_cascaded_table(n).subinventory
                      AND    mld.default_type = 2
                      AND    mld.organization_id = mil.organization_id
                      AND    mld.locator_id = mil.inventory_location_id
                      AND    trunc(NVL(mil.disable_date, trunc(sysdate+1))) > trunc(sysdate)
                      AND    mil.segment19  = x_cascaded_table(n).project_id
                      AND    mil.project_id = x_cascaded_table(n).project_id
                      AND    nvl(mil.segment20,-99)  = nvl(x_cascaded_table(n).task_id,-99)
                      AND    nvl(mil.task_id,-99)    = nvl(x_cascaded_table(n).task_id,-99);

                    EXCEPTION
                       WHEN NO_DATA_FOUND THEN

                            IF (x_locator_control = 2) THEN
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('Cause: Receiving preprocessor could not default a locator for this trxn.');
                                END IF;

                                -- Change the transaction back to ASN import
                                x_cascaded_table(n).transaction_type  := 'SHIP';
                                x_cascaded_table(n).auto_transact_code  := 'SHIP';
                                -- Reset the flag so that it won't affect the next transaction.
                                x_auto_deliver := 'N';
                                x_cascaded_table(n).error_status := rcv_error_pkg.g_ret_sts_warning;

                                -- Log po_interface_errors
                                rcv_error_pkg.set_error_message('RCV_ALL_REQUIRED_LOCATOR');
                                rcv_error_pkg.log_interface_warning('LOCATOR_ID');

                                RETURN;
                            END IF;

                            BEGIN
                               SELECT mld.locator_id,
                                      segment1,  segment2,  segment3,  segment4,  segment5,  segment6,
                                      segment7,  segment8,  segment9,  segment10, segment11, segment12,
                                      segment13, segment14, segment15, segment16, segment17, segment18
                               INTO   l_loc_id,
                                      l_segmentarray(1), l_segmentarray(2), l_segmentarray(3),
                                      l_segmentarray(4), l_segmentarray(5), l_segmentarray(6),
                                      l_segmentarray(7), l_segmentarray(8), l_segmentarray(9),
                                      l_segmentarray(10), l_segmentarray(11), l_segmentarray(12),
                                      l_segmentarray(13), l_segmentarray(14), l_segmentarray(15),
                                      l_segmentarray(16), l_segmentarray(17), l_segmentarray(18)
                               FROM   mtl_item_loc_defaults mld,
                                      mtl_item_locations mil
                               WHERE  mld.inventory_item_id = x_cascaded_table(n).item_id
                               AND    mld.organization_id = x_cascaded_table(n).to_organization_id
                               AND    mld.subinventory_code = x_cascaded_table(n).subinventory
                               AND    mld.default_type = 2
                               AND    mld.organization_id = mil.organization_id
                               AND    mld.locator_id = mil.inventory_location_id
                               AND    trunc(NVL(mil.disable_date, trunc(sysdate+1))) > trunc(sysdate);

                               l_segmentarray(19) := x_cascaded_table(n).project_id;
                               l_segmentarray(20) := x_cascaded_table(n).task_id;

                               IF NOT (getloc(x_cascaded_table(n).locator_id , x_cascaded_table(n).to_organization_id, x_locator_control, l_segmentarray ) ) THEN

                                   IF (g_asn_debug = 'Y') THEN
                                       asn_debug.put_line('Cause: Receiving preprocessor could not default/create a locator for this trxn.');
                                   END IF;

                                   x_cascaded_table(n).locator_id := NULL;
                                   -- Change the transaction back to ASN import
                                   x_cascaded_table(n).transaction_type  := 'SHIP';
                                   x_cascaded_table(n).auto_transact_code  := 'SHIP';
                                   -- Reset the flag so that it won't affect the next transaction.
                                   x_auto_deliver := 'N';
                                   x_cascaded_table(n).error_status := rcv_error_pkg.g_ret_sts_warning;

                                   -- Log po_interface_errors
                                   rcv_error_pkg.set_error_message('RCV_ALL_REQUIRED_LOCATOR');
                                   rcv_error_pkg.log_interface_warning('LOCATOR_ID');

                                   RETURN;

                               END IF;

                               update mtl_item_locations
                               set    subinventory_code     = x_cascaded_table(n).subinventory,
                                      status_id             = inv_material_status_pkg.get_default_locator_status(x_cascaded_table(n).to_organization_id, x_cascaded_table(n).subinventory),
                                      physical_location_id  = l_loc_id
                               where  inventory_location_id = x_cascaded_table(n).locator_id;

                            EXCEPTION
                            WHEN NO_DATA_FOUND THEN
                                   IF (g_asn_debug = 'Y') THEN
                                       asn_debug.put_line('Cause: Receiving preprocessor could not default/create a locator for this trxn.');
                                   END IF;

                                   x_cascaded_table(n).locator_id := NULL;
                                   -- Change the transaction back to ASN import
                                   x_cascaded_table(n).transaction_type  := 'SHIP';
                                   x_cascaded_table(n).auto_transact_code  := 'SHIP';
                                   -- Reset the flag so that it won't affect the next transaction.
                                   x_auto_deliver := 'N';
                                   x_cascaded_table(n).error_status := rcv_error_pkg.g_ret_sts_warning;

                                   -- Log po_interface_errors
                                   rcv_error_pkg.set_error_message('RCV_ALL_REQUIRED_LOCATOR');
                                   rcv_error_pkg.log_interface_warning('LOCATOR_ID');

                                   return;

                            WHEN OTHERS THEN
                                 po_message_s.sql_error('get_default_locator', x_progress, sqlcode);
                                 RAISE;
                            END;

                       WHEN OTHERS THEN
                            po_message_s.sql_error('get_default_locator', x_progress, sqlcode);
                            RAISE;
                    END;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Defaulting locator from Sub: Locator_id  = ' || TO_CHAR(x_cascaded_table(n).locator_id));
                    END IF;
                END IF; --}
            END IF; --} matches subinventory not null

            IF (   (x_cascaded_table(n).auto_transact_code <> 'RECEIVE')
                OR x_cascaded_table(n).auto_transact_code IS NULL) THEN --{
                x_default_subinventory  := x_cascaded_table(n).subinventory;
                x_default_locator_id    := x_cascaded_table(n).locator_id;
                /*
                ** Call the put away function
                */
                x_success               := rcv_sub_locator_sv.put_away_api(x_cascaded_table(n).po_line_location_id,
                                                                           x_cascaded_table(n).po_distribution_id,
                                                                           x_cascaded_table(n).shipment_line_id,
                                                                           x_cascaded_table(n).receipt_source_code,
                                                                           x_cascaded_table(n).from_organization_id,
                                                                           x_cascaded_table(n).to_organization_id,
                                                                           x_cascaded_table(n).item_id,
                                                                           x_cascaded_table(n).item_revision,
                                                                           x_cascaded_table(n).vendor_id,
                                                                           x_cascaded_table(n).ship_to_location_id,
                                                                           x_cascaded_table(n).deliver_to_location_id,
                                                                           x_cascaded_table(n).deliver_to_person_id,
                                                                           x_cascaded_table(n).quantity,
                                                                           x_cascaded_table(n).primary_quantity,
                                                                           x_cascaded_table(n).primary_unit_of_measure,
                                                                           x_cascaded_table(n).quantity,
                                                                           x_cascaded_table(n).unit_of_measure,
                                                                           x_cascaded_table(n).routing_header_id,
                                                                           x_default_subinventory,
                                                                           x_default_locator_id,
                                                                           x_cascaded_table(n).subinventory,
                                                                           x_cascaded_table(n).locator_id
                                                                          );
            END IF; --}

            /* If subinventory is still null, we need to disable dropship asn auto deliver if it has
             * been enabled and change the transaction back to ASN import*/
            IF ( (x_auto_deliver = 'Y') AND
                 (x_cascaded_table(n).subinventory IS NULL)) THEN --{

               IF (g_asn_debug = 'Y') THEN
                   asn_debug.put_line('Warning: Changing the dropship ASN auto deliver back to ASN import.');
                   asn_debug.put_line('Cause: Receiving preprocessor could not default a subinventory for this trxn.');
               END IF;

               -- Change the transaction back to ASN import
               x_cascaded_table(n).transaction_type  := 'SHIP';
               x_cascaded_table(n).auto_transact_code  := 'SHIP';
               -- Reset the flag so that it won't affect the next transaction.
               x_auto_deliver := 'N';
               x_cascaded_table(n).error_status := rcv_error_pkg.g_ret_sts_warning;

               -- Log po_interface_errors
               rcv_error_pkg.set_error_message('RCV_ASN_AUTO_DEL_NO_SUBINV');
               rcv_error_pkg.log_interface_warning('SUBINVENTORY');
            END IF; --}

            RETURN;
        END IF; --}



        /* If parent_interface_id is not null then it means it is a parent
         * child relation ship. So look in rti. If parent_transaction_id
         * is not null, then look in rcv_transactions.
        */
        IF (x_cascaded_table(n).parent_interface_txn_id IS NOT NULL) THEN
            SELECT from_subinventory,
                   from_locator_id
            INTO   l_from_subinventory,
                   l_from_locator_id
            FROM   rcv_transactions_interface rti
            WHERE  rti.interface_transaction_id = x_cascaded_table(n).parent_interface_txn_id;
        ELSIF (x_cascaded_table(n).parent_transaction_id IS NOT NULL) THEN
            SELECT from_subinventory,
                   from_locator_id
            INTO   l_from_subinventory,
                   l_from_locator_id
            FROM   rcv_transactions rt
            WHERE  rt.transaction_id = x_cascaded_table(n).parent_transaction_id;
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('l_from_subinventory, ' || l_from_subinventory);
            asn_debug.put_line('l_from_locator_id ' || l_from_locator_id);
        END IF;

        x_cascaded_table(n).subinventory  := l_from_subinventory;
        x_cascaded_table(n).locator_id    := l_from_locator_id;

    EXCEPTION
        WHEN OTHERS THEN
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('default_for_pjm_dropship', '000');
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
    END default_for_pjm_dropship;

    -- End bug 14725305

    PROCEDURE derive_vendor_rcv_line(
        x_cascaded_table    IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                   IN OUT NOCOPY BINARY_INTEGER,
        temp_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        x_header_record     IN            rcv_roi_preprocessor.header_rec_type
    ) IS
        l_po_header_id po_headers_all.po_header_id%type;
        l_return_status VARCHAR2(1) :='S';
        l_complex_flag   varchar2(1);
        l_interface_source_code rcv_transactions_interface.interface_source_code%type;
   	l_po_line_id           po_lines_all.po_line_id%type;                   /* Complex PO Receiving ER */
    	l_po_line_location_id  po_line_locations_all.line_location_id%type;    /* Complex PO Receiving ER */
        l_item_id              po_lines_all.item_id%type;                      /* Complex PO Receiving ER */
        l_item_desc            po_lines_all.item_description%type;             /* Complex PO Receiving ER */
    BEGIN
        x_progress  := '000';
        -- Derive PO header and line at the beginning to differentiate between services/goods matching basis
        -- 1) derive po header info
        derive_po_header_info(x_cascaded_table, n);
        derive_asn_header_info(x_cascaded_table,
                               n,
                               x_header_record
                              );
        /* Bug 3588165 : Moved the call to derive_ship_to_org_info() before
                derive_po_line_info(). This is done since  derive_po_line_info()
                uses the To_Organization_Id information to derive the
                Primary_Unit_Of_Measure. Earlier Primary UOM used to be null
                and the UOM conversion Procedure was raising an exception.
        */

        -- 2) derive ship to org info
        derive_ship_to_org_info(x_cascaded_table,
                                n,
                                x_header_record
                               );
        x_progress  := '001';
        -- 3) derive po line info
        derive_po_line_info(x_cascaded_table, n);
        x_progress  := '002';

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('X_progress ' || x_progress);
        END IF;

        /* R12 Complex Work.
         * We should be able to create Work Confirmations only through
         * the iSP screen.
        */

        l_po_header_id := x_cascaded_table(n).po_header_id;
   	    l_po_line_id   := x_cascaded_table(n).po_line_id;                   /* Complex PO Receiving ER */
 	    l_po_line_location_id := x_cascaded_table(n).po_line_location_id;   /* Complex PO Receiving ER */
    	l_item_id      := x_cascaded_table(n).item_id;                      /* Complex PO Receiving ER */
    	l_item_desc    := x_cascaded_table(n).item_description;             /* Complex PO Receiving ER */

        PO_COMPLEX_WORK_GRP.is_complex_work_po(
                         1.0,
                         l_po_header_id,
                         l_return_status,
                         l_complex_flag,
                         l_po_line_id,             /* Complex PO Receiving ER */
                         l_item_id,                /* Complex PO Receiving ER */
                         l_item_desc,              /* Complex PO Receiving ER */
                         l_po_line_location_id);   /* Complex PO Receiving ER */

                IF (l_return_status IS NOT NULL AND
                          l_return_status = FND_API.g_ret_sts_success) THEN
                        IF( g_asn_debug = 'Y' ) THEN
                            asn_debug.put_line('l_return_status ' || l_return_status);
                            asn_debug.put_line('l_po_header_id ' || l_po_header_id);
                        END IF;
                ELSE
                        IF( g_asn_debug = 'Y') THEN
                            asn_debug.put_line('l_return_status ' || l_return_status);
                        END IF;
                END IF;

                IF (l_complex_flag = 'Y') THEN

                        l_interface_source_code :=
                                 x_cascaded_table(n).interface_source_code;

                        if (x_cascaded_table(n).transaction_type = 'SHIP' and
                                l_interface_source_code <> 'ISP') then
                                asn_debug.put_line('We do not support transaction type ' || x_cascaded_table(n).transaction_type || ' for complex work POs unless they come through the iSP UI');
                                rcv_error_pkg.set_error_message('RCV_INVALID_TRANSACTION_TYPE');
                                rcv_error_pkg.log_interface_error('TRANSACTION_TYPE');
                        end if;
                        /* Receipt for Work Confirmation does not come through
                         * preprocessor. Hence error out.
                        */
                        if (x_cascaded_table(n).transaction_type = 'RECEIVE') then
                                asn_debug.put_line('You cannot process a receipt against this PO using the Open Interface. Please create a Work Confirmation request instead.');
                                rcv_error_pkg.set_error_message('RCV_WC_CREATE');
                                rcv_error_pkg.log_interface_error('TRANSACTION_TYPE');

                        end if;
                End if;


        -- 4) derive vendor information
        derive_vendor_info(x_cascaded_table, n);
        x_progress  := '004';

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('X_progress ' || x_progress);
        END IF;

        -- 5) derive vendor site info
        /* Call derive vendor_site_procedure here */
        /* UK1 -> vendor_site_id
         UK2 -> vendor_site_code + vendor_id + org_id  */
        derive_vendor_site_info(x_cascaded_table, n);
        x_progress  := '005';

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('X_progress ' || x_progress);
        END IF;

        -- 6) derive item info
        derive_item_info(x_cascaded_table, n);
        x_progress  := '010';
        -- 7) derive substitute item info
        derive_substitute_item_info(x_cascaded_table, n);
        x_progress  := '020';
        -- 8) derive from org info
        derive_from_org_info(x_cascaded_table, n);
        x_progress  := '035';
        -- 9) derive in transit org info
        derive_transit_org_info(x_cascaded_table, n);
        x_progress  := '040';
        -- 10) derive location info
        derive_location_info(x_cascaded_table, n);
        x_progress  := '045';
        -- 11) derive ship to location info
        derive_ship_to_location_info(x_cascaded_table, n);
        x_progress  := '050';
        -- 12) derive routing header info
        derive_routing_header_info(x_cascaded_table, n);
        x_progress  := '070';
        -- 13) derive routing step info
        derive_routing_step_info(x_cascaded_table, n);
        x_progress  := '080';
        -- 14) derive deliver to person info
        derive_deliver_to_person_info(x_cascaded_table, n);
        x_progress  := '085';
        -- 14) derive deliver to loc info
        derive_deliver_to_loc_info(x_cascaded_table, n);
        x_progress  := '090';
        -- 15) derive subinv/locator info
        --derive_locator_info(x_cascaded_table, n);
        --derive_from_locator_id(x_cascaded_table, n); -- WMS Change
        derive_to_locator_id(x_cascaded_table, n); -- WMS Change
        x_progress  := '091';
        -- 16) derive reason info
        derive_reason_info(x_cascaded_table, n);
        x_progress  := '092';
        -- derive auto transact code
        derive_auto_transact_code(x_cascaded_table, n);

        -- quantity > 0
	/* Complex Work Start.
	 * We have a separate procedure derive_matching_basis
	 * to get the matching basis now. This is because we
	 * are going to get the matching_basis from
	 * po_line_locations and hence moved it from
	 * derive_po_line_info.
	*/
        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Before calling derive matching basis ');
        END IF;
	derive_matching_basis(x_cascaded_table,n);

        IF (x_cascaded_table(n).matching_basis = 'AMOUNT') THEN
            derive_vendor_rcv_line_amt(x_cascaded_table,
                                       n,
                                       temp_cascaded_table,
                                       x_header_record
                                      );
        ELSE
            derive_vendor_rcv_line_qty(x_cascaded_table,
                                       n,
                                       temp_cascaded_table,
                                       x_header_record
                                      );
        END IF;
    /* Complex Work.
     * Add exception block.
    */
    exception
    when others then
        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Exception in derive_vendor_rcv_line  '||x_progress);
        END IF;
	raise;
    END derive_vendor_rcv_line;

    PROCEDURE default_vendor_rcv_line(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER,
        x_header_id      IN            rcv_headers_interface.header_interface_id%TYPE,
        x_header_record  IN            rcv_roi_preprocessor.header_rec_type
    ) IS
        x_progress             VARCHAR2(3);
        x_locator_control      NUMBER;
        x_default_subinventory VARCHAR2(10);
        x_default_locator_id   NUMBER;
        x_success              BOOLEAN;
        x_tax_name             VARCHAR2(50); -- Bug 6331613
        x_vendor_site_id       NUMBER;
        x_vendor_site_code     VARCHAR2(20);
        item_id_record         rcv_shipment_line_sv.item_id_record_type;

        /* bug2382337:
        * Change the name of the parameters passed into the cursor
        */
        CURSOR shipments(
            v_header_id        NUMBER,
            v_line_id          NUMBER,
            v_line_location_id NUMBER
        ) IS
            SELECT ph.revision_num,
                   pl.line_num,
                   nvl(pll.description,pl.item_description) item_description,--Complex work
                   pll.tax_code_id,
                   pll.po_release_id,
                   pll.ship_to_location_id,
                   pll.ship_to_organization_id,
                   pll.shipment_num,
                   pll.receiving_routing_id,
                   pll.country_of_origin_code,
                   pl.job_id,
                   pll.value_basis , --Complex Work
                   pl.purchase_basis,
                   pll.matching_basis --Complex Work
            FROM   po_line_locations pll,
                   po_lines pl,
                   po_headers ph
            WHERE  ph.po_header_id = pl.po_header_id
            AND    pl.po_line_id = pll.po_line_id
            AND    ph.po_header_id = v_header_id
            AND    pl.po_line_id = v_line_id
            AND    pll.line_location_id = v_line_location_id
            AND    NVL(pll.approved_flag, 'N') = 'Y'
            AND    NVL(pll.cancel_flag, 'N') = 'N'
            AND    NVL(pll.closed_code, 'OPEN') <> 'FINALLY CLOSED'
            AND    pll.shipment_type IN('STANDARD', 'BLANKET', 'SCHEDULED','PREPAYMENT');

        default_po_info        shipments%ROWTYPE;
    BEGIN
        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Enter default_shipment_line');
        END IF;

        x_progress                                     := '000';
        -- set default_shipment_line values

        x_cascaded_table(n).header_interface_id        := x_header_id;
        x_cascaded_table(n).shipment_line_status_code  := 'OPEN';

        IF x_cascaded_table(n).source_document_code IS NULL THEN
            x_cascaded_table(n).source_document_code  := 'PO';

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting SOURCE_DOCUMENT_CODE ' || x_cascaded_table(n).source_document_code);
            END IF;
        END IF;

        /*  Fix for bug 2564646.
           If AUTO_TRANSACT_CODE is RECEIVE then it means it is a receive
              transaction and destination_type_code should be RECEIVING. Even
              if the end user populates destination_type_code as INVENTORY
              when AUTO_TRANSACT_CODE is RECEIVE, we now overwrite the value
              of DESTINATION_TYPE_CODE to RECEIVING by adding the OR condition
              to the following IF statement.
        */
        IF    x_cascaded_table(n).destination_type_code IS NULL
           OR (    x_cascaded_table(n).destination_type_code = 'INVENTORY'
               AND x_cascaded_table(n).auto_transact_code = 'RECEIVE') THEN
            x_cascaded_table(n).destination_type_code  := 'RECEIVING';

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting DESTINATION_TYPE_CODE ' || x_cascaded_table(n).destination_type_code);
            END IF;
        END IF;

        IF x_cascaded_table(n).transaction_type IS NULL THEN
            x_cascaded_table(n).transaction_type  := 'SHIP';

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting TRANSACTION_TYPE ' || x_cascaded_table(n).transaction_type);
            END IF;
        END IF;

        IF x_cascaded_table(n).processing_mode_code IS NULL THEN
            x_cascaded_table(n).processing_mode_code  := 'BATCH';

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting PROCESSING_MODE_CODE ' || x_cascaded_table(n).processing_mode_code);
            END IF;
        END IF;

        x_cascaded_table(n).processing_status_code     := 'RUNNING';

        IF x_cascaded_table(n).processing_status_code IS NULL THEN
            -- This has to be set to running otherwise C code in rvtbm
              -- will not pick it up
            x_cascaded_table(n).processing_status_code  := 'RUNNING';

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting PROCESSING_STATUS_CODE ' || x_cascaded_table(n).processing_status_code);
            END IF;
        END IF;

        IF x_cascaded_table(n).transaction_status_code IS NULL THEN
            x_cascaded_table(n).transaction_status_code  := 'PENDING';

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting TRANSACTION_STATUS_CODE ' || x_cascaded_table(n).transaction_status_code);
            END IF;
        END IF;

        -- Default auto_transact_code if it is null
        IF x_cascaded_table(n).auto_transact_code IS NULL THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Setting auto_transact_code to transaction_type ' || x_cascaded_table(n).transaction_type);
            END IF;

            x_cascaded_table(n).auto_transact_code  := x_cascaded_table(n).transaction_type;
        END IF;

        -- default only if all attributes are null
        IF     x_cascaded_table(n).vendor_id IS NULL
           AND x_cascaded_table(n).vendor_name IS NULL
           AND x_cascaded_table(n).vendor_num IS NULL THEN --{
            x_cascaded_table(n).vendor_id    := x_header_record.header_record.vendor_id;
            x_cascaded_table(n).vendor_name  := x_header_record.header_record.vendor_name;
            x_cascaded_table(n).vendor_num   := x_header_record.header_record.vendor_num;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting from HEADER VENDOR_ID ' || TO_CHAR(x_cascaded_table(n).vendor_id));
                asn_debug.put_line('Defaulting from HEADER VENDOR_NAME ' || x_cascaded_table(n).vendor_name);
                asn_debug.put_line('Defaulting from HEADER VENDOR_NUM ' || x_cascaded_table(n).vendor_num);
            END IF;
        END IF; --}

                -- default only if all attributes are null

        IF     x_cascaded_table(n).vendor_site_id IS NULL
           AND x_cascaded_table(n).vendor_site_code IS NULL THEN --{
            x_cascaded_table(n).vendor_site_id    := x_header_record.header_record.vendor_site_id;
            x_cascaded_table(n).vendor_site_code  := x_header_record.header_record.vendor_site_code;

            /* Fix for bug 2296720.
               If both vendor_site_id and vendor_site_code are not populated
               in interface tables, and if there are multiple vendor sites
               associated to a particular vendor then we default them from PO
               using the po_header_id of rcv_transactions_interface for each
               line.
            */
            IF     x_cascaded_table(n).vendor_site_id IS NULL
               AND x_cascaded_table(n).vendor_site_code IS NULL THEN --{
                SELECT vendor_site_id
                INTO   x_vendor_site_id
                FROM   po_headers
                WHERE  po_header_id = x_cascaded_table(n).po_header_id
                AND    vendor_id = x_cascaded_table(n).vendor_id;

                SELECT vendor_site_code
                INTO   x_vendor_site_code
                FROM   po_vendor_sites
                WHERE  vendor_site_id = x_vendor_site_id
                AND    vendor_id = x_cascaded_table(n).vendor_id;

                x_cascaded_table(n).vendor_site_id    := x_vendor_site_id;
                x_cascaded_table(n).vendor_site_code  := x_vendor_site_code;
            END IF; --}

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting from HEADER VENDOR_SITE_ID ' || TO_CHAR(x_cascaded_table(n).vendor_site_id));
                asn_debug.put_line('Defaulting from HEADER VENDOR_SITE_CODE ' || x_cascaded_table(n).vendor_site_code);
            END IF;
        END IF; --}

                -- default only if all attributes are null

        IF     x_cascaded_table(n).from_organization_id IS NULL
           AND x_cascaded_table(n).from_organization_code IS NULL THEN
            x_cascaded_table(n).from_organization_id    := x_header_record.header_record.from_organization_id;
            x_cascaded_table(n).from_organization_code  := x_header_record.header_record.from_organization_code;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting from HEADER FROM_ORGANIZATION_ID ' || TO_CHAR(x_cascaded_table(n).from_organization_id));
                asn_debug.put_line('Defaulting from HEADER FROM_ORGANIZATION_CODE ' || x_cascaded_table(n).from_organization_code);
            END IF;
        END IF;

        -- default only if all attributes are null
        IF     x_cascaded_table(n).to_organization_id IS NULL
           AND x_cascaded_table(n).to_organization_code IS NULL THEN
            x_cascaded_table(n).to_organization_id    := x_header_record.header_record.ship_to_organization_id;
            x_cascaded_table(n).to_organization_code  := x_header_record.header_record.ship_to_organization_code;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting from HEADER TO_ORGANIZATION_ID ' || TO_CHAR(x_cascaded_table(n).to_organization_id));
                asn_debug.put_line('Defaulting from HEADER TO_ORGANIZATION_CODE ' || x_cascaded_table(n).to_organization_code);
            END IF;
        END IF;

        -- default only if all attributes are null
        IF     x_cascaded_table(n).currency_code IS NULL
           AND x_cascaded_table(n).currency_conversion_type IS NULL
           AND x_cascaded_table(n).currency_conversion_rate IS NULL
           AND x_cascaded_table(n).currency_conversion_date IS NULL THEN --{
            x_cascaded_table(n).currency_code             := x_header_record.header_record.currency_code;
            x_cascaded_table(n).currency_conversion_type  := x_header_record.header_record.conversion_rate_type;
            x_cascaded_table(n).currency_conversion_rate  := x_header_record.header_record.conversion_rate;
            x_cascaded_table(n).currency_conversion_date  := x_header_record.header_record.conversion_rate_date;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting from HEADER CURRENCY_CODE ' || x_cascaded_table(n).currency_code);
                asn_debug.put_line('Defaulting from HEADER CURRENCY_CONVERSION_TYPE ' || x_cascaded_table(n).currency_conversion_type);
                asn_debug.put_line('Defaulting from HEADER CURRENCY_CONVERSION_RATE ' || TO_CHAR(x_cascaded_table(n).currency_conversion_rate));
                asn_debug.put_line('Defaulting from HEADER CURRENCY_CONVERSION_DATE ' || TO_CHAR(x_cascaded_table(n).currency_conversion_date, 'DD/MM/YYYY'));
            END IF;
        END IF; --}

        IF (    x_cascaded_table(n).ship_to_location_id IS NULL
            AND x_cascaded_table(n).ship_to_location_code IS NULL) THEN -- Check this with George
            x_cascaded_table(n).ship_to_location_code  := x_header_record.header_record.location_code;
            x_cascaded_table(n).ship_to_location_id    := x_header_record.header_record.location_id;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting from HEADER LOCATION_ID ' || TO_CHAR(x_cascaded_table(n).location_id));
            END IF;
        END IF;

        IF x_cascaded_table(n).shipment_num IS NULL THEN
            x_cascaded_table(n).shipment_num  := x_header_record.header_record.shipment_num;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting from HEADER SHIPMENT_NUM ' || x_cascaded_table(n).shipment_num);
            END IF;
        END IF;

        IF x_cascaded_table(n).freight_carrier_code IS NULL THEN
            x_cascaded_table(n).freight_carrier_code  := x_header_record.header_record.freight_carrier_code;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting from HEADER FREIGHT_CARRIER_CODE ' || x_cascaded_table(n).freight_carrier_code);
            END IF;
        END IF;

        IF x_cascaded_table(n).bill_of_lading IS NULL THEN
            x_cascaded_table(n).bill_of_lading  := x_header_record.header_record.bill_of_lading;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting from HEADER BILL_OF_LADING ' || x_cascaded_table(n).bill_of_lading);
            END IF;
        END IF;

        IF x_cascaded_table(n).packing_slip IS NULL THEN
            x_cascaded_table(n).packing_slip  := x_header_record.header_record.packing_slip;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting from HEADER PACKING_SLIP ' || x_cascaded_table(n).packing_slip);
            END IF;
        END IF;

        IF x_cascaded_table(n).shipped_date IS NULL THEN
            x_cascaded_table(n).shipped_date  := x_header_record.header_record.shipped_date;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting from HEADER SHIPPED_DATE ' || TO_CHAR(x_cascaded_table(n).shipped_date, 'DD/MM/YYYY'));
            END IF;
        END IF;

        IF x_cascaded_table(n).expected_receipt_date IS NULL THEN
            x_cascaded_table(n).expected_receipt_date  := x_header_record.header_record.expected_receipt_date;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting from HEADER EXPECTED_RECEIPT_DATE ' || TO_CHAR(x_cascaded_table(n).expected_receipt_date, 'DD/MM/YYYY'));
            END IF;
        END IF;

        IF     x_cascaded_table(n).num_of_containers IS NULL
           AND x_cascaded_table(n).matching_basis <> 'AMOUNT' THEN
            x_cascaded_table(n).num_of_containers  := x_header_record.header_record.num_of_containers;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting from HEADER NUM_OF_CONTAINERS ' || TO_CHAR(x_cascaded_table(n).num_of_containers));
            END IF;
        END IF;

        IF     x_cascaded_table(n).waybill_airbill_num IS NULL
           AND x_cascaded_table(n).matching_basis <> 'AMOUNT' THEN
            x_cascaded_table(n).waybill_airbill_num  := x_header_record.header_record.waybill_airbill_num;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting from HEADER WAYBILL_AIRBILL_NUM ' || x_cascaded_table(n).waybill_airbill_num);
            END IF;
        END IF;

        IF x_cascaded_table(n).tax_name IS NULL THEN
            x_cascaded_table(n).tax_name  := x_header_record.header_record.tax_name;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting from HEADER TAX_NAME ' || x_cascaded_table(n).tax_name);
            END IF;
        END IF;

        /* Bug 3299421 : WMS Mobile applications do not need the item_revision to
                         be defaulted during preprocessing for transactions other than
                         "Deliver". Added the condition in the If clause where we
                         check if the transaction is from mobile and if so do not
                         default the item revision.
        */
        IF     x_cascaded_table(n).item_revision IS NULL
           AND (NVL(x_cascaded_table(n).mobile_txn, 'N') = 'N')
           AND x_cascaded_table(n).matching_basis <> 'AMOUNT' THEN --{
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Enter defaulting item revision');
            END IF;

            item_id_record.item_id                     := x_cascaded_table(n).item_id;
            item_id_record.po_line_id                  := x_cascaded_table(n).po_line_id;
            item_id_record.po_line_location_id         := x_cascaded_table(n).po_line_location_id;
            item_id_record.to_organization_id          := x_cascaded_table(n).to_organization_id;
            item_id_record.item_revision               := x_cascaded_table(n).item_revision;
            item_id_record.error_record.error_status   := 'S';
            item_id_record.error_record.error_message  := NULL;
            rcv_transactions_interface_sv.default_item_revision(item_id_record);
            x_cascaded_table(n).item_revision          := item_id_record.item_revision;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line(NVL(item_id_record.item_revision, 'Item Revision is null'));
            END IF;

            x_cascaded_table(n).error_status           := item_id_record.error_record.error_status;
            x_cascaded_table(n).error_message          := item_id_record.error_record.error_message;
        END IF; --}

        IF    x_cascaded_table(n).po_revision_num IS NULL
           OR x_cascaded_table(n).freight_carrier_code IS NULL
           OR x_cascaded_table(n).document_line_num IS NULL
           OR (    x_cascaded_table(n).item_description IS NULL
               AND x_cascaded_table(n).matching_basis <> 'AMOUNT')
           OR (    x_cascaded_table(n).job_id IS NULL
               AND x_cascaded_table(n).purchase_basis = 'TEMP LABOR')
           OR x_cascaded_table(n).tax_name IS NULL
           OR --FRKHAN 12/18/98 add country of origin check
              x_cascaded_table(n).country_of_origin_code IS NULL
           OR x_cascaded_table(n).po_release_id IS NULL
           OR (    x_cascaded_table(n).ship_to_location_id IS NULL
               AND x_cascaded_table(n).ship_to_location_code IS NULL)
           OR (    x_cascaded_table(n).to_organization_id IS NULL
               AND x_cascaded_table(n).to_organization_code IS NULL)
           OR x_cascaded_table(n).document_shipment_line_num IS NULL
           OR (    x_cascaded_table(n).routing_header_id IS NULL
               AND x_cascaded_table(n).routing_code IS NULL) THEN --{
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting values from PO ');
            END IF;

            OPEN shipments(x_cascaded_table(n).po_header_id,
                           x_cascaded_table(n).po_line_id,
                           x_cascaded_table(n).po_line_location_id
                          );
            FETCH shipments INTO default_po_info;

            IF shipments%FOUND THEN --{
                IF x_cascaded_table(n).po_revision_num IS NULL THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Defaulting PO HEADER revision num ' || default_po_info.revision_num);
                    END IF;

                    x_cascaded_table(n).po_revision_num  := default_po_info.revision_num;
                END IF;

                IF x_cascaded_table(n).document_line_num IS NULL THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Defaulting po line num ' || TO_CHAR(default_po_info.line_num));
                    END IF;

                    x_cascaded_table(n).document_line_num  := default_po_info.line_num;
                END IF;

                IF     x_cascaded_table(n).item_description IS NULL
                   AND x_cascaded_table(n).matching_basis <> 'AMOUNT' THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Defaulting item description from PO ' || default_po_info.item_description);
                    END IF;

                    x_cascaded_table(n).item_description  := default_po_info.item_description;
                END IF;

                IF     x_cascaded_table(n).tax_name IS NULL
                   AND default_po_info.tax_code_id IS NOT NULL THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Defaulting tax name based on PO ' || TO_CHAR(default_po_info.tax_code_id));
                    END IF;

                    -- Need to join to ap_tax_codes to get tax_name
                    BEGIN
                        SELECT NAME
                        INTO   x_tax_name
                        FROM   ap_tax_codes
                        WHERE  ap_tax_codes.tax_id = default_po_info.tax_code_id;

                        x_cascaded_table(n).tax_name  := x_tax_name;
                    EXCEPTION
                        WHEN OTHERS THEN
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('Some error occured in the tax name derivation');
                            END IF;
                    END;
                END IF; --}

                        --FRKHAN 12/18/98 default country of origin from PO

                IF x_cascaded_table(n).country_of_origin_code IS NULL THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Defaulting country of origin from PO ' || default_po_info.country_of_origin_code);
                    END IF;

                    x_cascaded_table(n).country_of_origin_code  := default_po_info.country_of_origin_code;
                END IF;

                IF x_cascaded_table(n).po_release_id IS NULL THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Defaulting PO Release ID from PO ' || TO_CHAR(default_po_info.po_release_id));
                    END IF;

                    x_cascaded_table(n).po_release_id  := default_po_info.po_release_id;
                END IF;

                IF x_cascaded_table(n).ship_to_location_id IS NULL THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Defaulting PO ship_to_location_id ' || TO_CHAR(default_po_info.ship_to_location_id));
                    END IF;

                    x_cascaded_table(n).ship_to_location_id  := default_po_info.ship_to_location_id;
                END IF;

                IF x_cascaded_table(n).to_organization_id IS NULL THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Defaulting PO to_organization_id ' || TO_CHAR(default_po_info.ship_to_organization_id));
                    END IF;

                    x_cascaded_table(n).to_organization_id  := default_po_info.ship_to_organization_id;
                END IF;

                IF x_cascaded_table(n).document_shipment_line_num IS NULL THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Defaulting PO shipment_line_num ' || TO_CHAR(default_po_info.shipment_num));
                    END IF;

                    x_cascaded_table(n).document_shipment_line_num  := default_po_info.shipment_num;
                END IF;

                IF x_cascaded_table(n).routing_header_id IS NULL THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Defaulting PO routing_header_id ' || TO_CHAR(default_po_info.receiving_routing_id));
                    END IF;

                    x_cascaded_table(n).routing_header_id  := default_po_info.receiving_routing_id;
                END IF;

                IF     x_cascaded_table(n).job_id IS NULL
                   AND x_cascaded_table(n).purchase_basis = 'TEMP LABOR' THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Defaulting PO job_id ' ||(default_po_info.job_id));
                    END IF;

                    x_cascaded_table(n).job_id  := default_po_info.job_id;
                END IF;
            END IF; --} matches if shipments found
        END IF; --}

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Primary UOM = ' || x_cascaded_table(n).primary_unit_of_measure);
        END IF;

        /*
        ** Default the subinventory and locator if they have not been set either through the interface
        ** or defaulted from the purchase order
        */
        --- WMS Changes
        IF (x_cascaded_table(n).matching_basis <> 'AMOUNT') THEN
            /* Bug 14725305 */
            IF ( x_auto_deliver = 'Y' AND
                 x_cascaded_table(n).project_id IS NOT NULL) THEN

                 default_for_pjm_dropship(x_cascaded_table, n);
            ELSE
                 default_to_subloc_info(x_cascaded_table, n);
            END IF;
        END IF;

        /*
           ** Make sure to set the location_id properly
           */
        IF (   NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') = 'DELIVER'
            OR x_cascaded_table(n).transaction_type = 'DELIVER') THEN
            x_cascaded_table(n).location_id  := x_cascaded_table(n).deliver_to_location_id;
        ELSE
            x_cascaded_table(n).location_id  := x_cascaded_table(n).ship_to_location_id;
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Set Location_id  = ' || TO_CHAR(x_cascaded_table(n).location_id));
        END IF;

        IF     x_cascaded_table(n).waybill_airbill_num IS NULL
           AND x_cascaded_table(n).matching_basis <> 'AMOUNT' THEN
            x_cascaded_table(n).waybill_airbill_num  := x_header_record.header_record.waybill_airbill_num;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting from HEADER WAYBILL_AIRBILL_NUM ' || x_cascaded_table(n).waybill_airbill_num);
            END IF;
        END IF;

        x_progress                                     := '010';

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Exit default_shipment_line');
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Exception in default_vendor_rcv_line ');
            END IF;
    END default_vendor_rcv_line;

    PROCEDURE validate_vendor_info(x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
                                   n                IN BINARY_INTEGER) IS
    l_vendor_id        NUMBER;
    l_vendor_site_id   NUMBER;
    l_vendor_name      po_vendors.vendor_name%TYPE;
    l_vendor_site_code po_vendor_sites_all.vendor_site_code%TYPE;
    l_vendor_flag      VARCHAR2(1) := 'N';
    l_vendor_site_flag VARCHAR2(1) := 'N';
    BEGIN
      /* Bug 17209005, create this procedure to check whether vendor/site is active or not when user
         processes pending transactions of type 'RECEIVE' or 'RETURN TO VENDOR' */
      IF x_cascaded_table(n).transaction_type NOT IN ('RECEIVE','RETURN TO VENDOR') THEN
        RETURN;
      END IF;

      IF (g_asn_debug = 'Y') THEN
        asn_debug.put_line('Validating vendor/vendor site');
      END IF;

      l_vendor_id        := x_cascaded_table(n).vendor_id;
      l_vendor_site_id   := x_cascaded_table(n).vendor_site_id;
      l_vendor_name      := x_cascaded_table(n).vendor_name;
      l_vendor_site_code := x_cascaded_table(n).vendor_site_code;

      SELECT decode(COUNT(1),0,'N','Y')
        INTO l_vendor_flag
        FROM po_vendors
       WHERE vendor_id = l_vendor_id
         AND (SYSDATE BETWEEN nvl(start_date_active,SYSDATE - 1) AND nvl(end_date_active,SYSDATE + 1));

      SELECT decode(COUNT(1),0,'N','Y')
        INTO l_vendor_site_flag
        FROM po_vendor_sites_all
       WHERE vendor_id = l_vendor_id
         AND vendor_site_id = l_vendor_site_id
         AND nvl(inactive_date,SYSDATE + 1) > SYSDATE;

      IF (g_asn_debug = 'Y') THEN
        asn_debug.put_line('Vendor active: '||l_vendor_flag ||', vendor site active: '||l_vendor_site_flag);
      END IF;

      IF l_vendor_flag <> 'Y' OR l_vendor_site_flag <> 'Y' THEN
        x_cascaded_table(n).error_status := rcv_error_pkg.g_ret_sts_warning;
        rcv_error_pkg.set_error_message('PO_RCV_VENDOR_SITE_INACTIVE');
        rcv_error_pkg.set_token('SUPPLIER',l_vendor_name);
        rcv_error_pkg.set_token('SUPPLIER_SITE',l_vendor_site_code);

        IF l_vendor_flag <> 'Y' then
          rcv_error_pkg.log_interface_warning('VENDOR_ID(NAME)');
        ELSE
          rcv_error_pkg.log_interface_warning('VENDOR_SITE_ID(CODE)');
        END IF;

      END IF;
    END;

    PROCEDURE validate_vendor_rcv_line(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER,
        x_asn_type       IN            rcv_headers_interface.asn_type%TYPE,
        x_header_record  IN            rcv_roi_preprocessor.header_rec_type
    ) IS
       l_parent_deliver_to_person_id NUMBER := null;  --Bug#6375015
       l_skip_validation             NUMBER := 0; --Bug#6375015
    BEGIN
        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Enter validate_shipment_line');
        END IF;

        x_progress  := '000';

        --Bug 17209005,check whether vendor/site is active or not.
        validate_vendor_info(x_cascaded_table,n);

        IF x_cascaded_table(n).matching_basis = 'AMOUNT' THEN
            validate_non_services_fields(x_cascaded_table, n);
        END IF;

        validate_transaction_date(x_cascaded_table, n);

        IF (x_cascaded_table(n).error_status IN('S', 'W')) THEN
            IF (x_asn_type = 'ASBN') THEN
                validate_quantity_invoiced(x_cascaded_table, n);
            END IF;
        END IF;

        /* lcm changes */
	validate_lcm_line (x_cascaded_table, n, x_asn_type,x_header_record);

	IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('After lcm line validation : ' || x_cascaded_table(n).error_status);
        END IF;


        /* FPJ SERVICES.
         * We dont need to validate uom, item_id for Service based PO
         * shipments.
        */
        IF (x_cascaded_table(n).matching_basis <> 'AMOUNT') THEN
            validate_transaction_uom(x_cascaded_table, n);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('After validate_transaction_uom: ' || x_cascaded_table(n).error_status);
            END IF;

            validate_item_info(x_cascaded_table, n);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('After validate_item_info: ' || x_cascaded_table(n).error_status);
            END IF;

            validate_freight_carrier_code(x_cascaded_table, n);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('After validate_freight_carrier_code: ' || x_cascaded_table(n).error_status);
            END IF;

            validate_subinventory(x_cascaded_table, n);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('After validate_subinventory: ' || x_cascaded_table(n).error_status);
            END IF;

            validate_locator(x_cascaded_table, n);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('After validate_locator: ' || x_cascaded_table(n).error_status);
            END IF;

            validate_deliver_to_loc(x_cascaded_table, n);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('After validate_deliver_to_loc: ' || x_cascaded_table(n).error_status);
            END IF;

            validate_shipped_qty(x_cascaded_table, n);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('After validate_shipped_qty: ' || x_cascaded_table(n).error_status);
            END IF;
        END IF;

        validate_dest_type(x_cascaded_table, n);

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('After validate_dest_type: ' || x_cascaded_table(n).error_status);
        END IF;

        IF (x_cascaded_table(n).transaction_type = 'RECEIVE') THEN
            validate_ship_to_loc(x_cascaded_table, n);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('After validate_ship_to_loc: ' || x_cascaded_table(n).error_status);
            END IF;
        END IF;

      /* Bug:6375015
        There is no defaulting done for the deliver_to_person_id or validation against the parent_txn's
        deliver_to_person_id in case of ROI transaction. But in case of forms we are defaluting the
        deliver_to_person_id, if there is no validation failure on the deliver_to_person_id in Receipts/
        Receiving Transaction forms. If there is validation failure, deliver_to_person_id is nulled out
        and user can enter any deliver_to_person who is active in case of Receipts/Receiving Trasactions
        form. In case of Returns/Corrections, deliver_to_person_id is not editable and it is defaulted
        from the parent transaction, even if that person is terminated.
        So, added the following code to synch up the behaviour of forms and ROI
         a) if deliver_to_person_id is null, default the  deliver_to_person_id from the
            parent_txn/source_document PO as done in forms.
         b) If the deliver_to_person_id is not null, we have to validate against the
            parent_txn's deliver_to_person.
         c) Skip the call to validate_deliver_to_person, if deliver_to_person is defaulted
            from the parent transaction.
        */
/* code fix for the Bug:6375015 starts */
        IF (x_cascaded_table(n).deliver_to_person_id is null) THEN
           IF (g_asn_debug = 'Y') THEN
              asn_debug.put_line('Inside deliver_to_person_id is null...');
           END IF;

           IF (x_cascaded_table(n).transaction_type = 'DELIVER') THEN
              --In case of transaction_type DELIVER, we need parent transaction.
              --If this condition is not added, it will try to defalut the deliver_to_person
              --of the parent transaction. But form is not behaving like that.
              --So added this condition to default the deliver_to_person of the source document.
              IF (g_asn_debug = 'Y') THEN
                 asn_debug.put_line('Transaction type is DELIVER...');
                 asn_debug.put_line('defaulting deliver_to_person_id from source document PO');
              END IF;
              get_deliver_to_person_from_po(x_cascaded_table,n);
              IF (g_asn_debug = 'Y') THEN
                 asn_debug.put_line('After call to get_deliver_to_person_from_po...');
              END IF;
           ELSIF (x_cascaded_table(n).parent_transaction_id is not null) THEN
              IF (g_asn_debug = 'Y') THEN
                 asn_debug.put_line('Inside parent_transaction_id.is not null and the value is:'||x_cascaded_table(n).parent_transaction_id);
              END IF;
              l_parent_deliver_to_person_id := get_deliver_to_person_from_rt(x_cascaded_table,n);
              --We can safely skip the validate_deliver_to_person call
              l_skip_validation := 1;
              x_cascaded_table(n).deliver_to_person_id := l_parent_deliver_to_person_id;
              IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('deliver_to_person_is is set to :'||l_parent_deliver_to_person_id);
              END IF;
           ELSIF (x_cascaded_table(n).parent_interface_txn_id is not null) THEN
              IF (g_asn_debug = 'Y') THEN
                 asn_debug.put_line('Inside parent_interface_transaction_id.is not null and the value is:'||x_cascaded_table(n).parent_interface_txn_id);
              END IF;
              l_parent_deliver_to_person_id := get_deliver_to_person_from_rti(x_cascaded_table,n);
              --We can safely skip the validate_deliver_to_person call
              l_skip_validation := 1;
              x_cascaded_table(n).deliver_to_person_id := l_parent_deliver_to_person_id;
              IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('deliver_to_person_is is set to :'||l_parent_deliver_to_person_id);
              END IF;
           ELSE--IF (x_cascaded_table(n).transaction_type = 'DELIVER') THEN
              IF (g_asn_debug = 'Y') THEN
                 asn_debug.put_line('defaulting deliver_to_person_id from source document PO');
              END IF;
              get_deliver_to_person_from_po(x_cascaded_table,n);
              IF (g_asn_debug = 'Y') THEN
                 asn_debug.put_line('After call to get_deliver_to_person_from_po...');
              END IF;
           END IF;--IF (x_cascaded_table(n).transaction_type = 'DELIVER') THEN
        ELSE--IF (x_cascaded_table(n).deliver_to_person_id is null) THEN
           IF (g_asn_debug = 'Y') THEN
              asn_debug.put_line('Inside deliver_to_person_id is not null and the value is :'||x_cascaded_table(n).deliver_to_person_id);
           END IF;

           IF (x_cascaded_table(n).transaction_type = 'DELIVER') THEN
              --In forms user can select any active deliver_to_person for DELIVER transaction.
              --In case of transaction_type DELIVER, we need parent transaction.
              --If this condition is not added, it will validate against the deliver_to_person mentioned
              --the parent RECEIVE transaction. But form is not behaving like that.
              --So, added this condition to skip deliver_to_person validation against parent txn
              IF (g_asn_debug = 'Y') THEN
                 asn_debug.put_line('Transaction type is DELIVER...');
              END IF;
           ELSIF (x_cascaded_table(n).parent_transaction_id is not null) THEN
              IF (g_asn_debug = 'Y') THEN
                 asn_debug.put_line('Inside parent_transaction_id.is not null and the value is:'||x_cascaded_table(n).parent_transaction_id);
              END IF;
              l_parent_deliver_to_person_id := get_deliver_to_person_from_rt(x_cascaded_table,n);
              --We can safely skip the validate_deliver_to_person call, validation against
              --parent transaction is handled here itself.
                 l_skip_validation := 1;
              IF nvl(l_parent_deliver_to_person_id,-99) <> x_cascaded_table(n).deliver_to_person_id THEN
                 IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('RTI.deliver_to_person_id is different to that of parent txn...');
                 END IF;
               --deliver_to_person_id mismatches with the parent txn's deliver_to_person, so clear it off
                 x_cascaded_table(n).deliver_to_person_id   := null;
                 x_cascaded_table(n).deliver_to_person_name := null;

              --set the deliver_to_person_id to that of parent transaction
                 x_cascaded_table(n).deliver_to_person_id := l_parent_deliver_to_person_id;
                 IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('deliver_to_person_is is set to that of parent RT txn');
                 END IF;
              END IF;
           ELSIF (x_cascaded_table(n).parent_interface_txn_id is not null) THEN
              IF (g_asn_debug = 'Y') THEN
                 asn_debug.put_line('Inside parent_interface_transaction_id.is not null and the value is:'||x_cascaded_table(n).parent_interface_txn_id);
              END IF;
              l_parent_deliver_to_person_id := get_deliver_to_person_from_rti(x_cascaded_table,n);
              --We can safely skip the validate_deliver_to_person call, validation against
              --parent transaction is handled here itself.
                 l_skip_validation := 1;
              IF nvl(l_parent_deliver_to_person_id,-99) <> x_cascaded_table(n).deliver_to_person_id THEN
                 IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('RTI.deliver_to_person_id is different to that of parent txn...');
                 END IF;
               --deliver_to_person_id mismatches with the parent txn's deliver_to_person, so clear it off
                 x_cascaded_table(n).deliver_to_person_id   := null;
                 x_cascaded_table(n).deliver_to_person_name := null;

              --set the deliver_to_person_id to that of parent transaction
                 x_cascaded_table(n).deliver_to_person_id := l_parent_deliver_to_person_id;

                 IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('deliver_to_person_is is set to that of parent RT txn');
                 END IF;
              END IF;
           END IF;--IF (x_cascaded_table(n).transaction_type = 'DELIVER') THEN
        END IF;--IF (x_cascaded_table(n).deliver_to_person_id is null) THEN

        IF l_skip_validation = 0 THEN
           IF (g_asn_debug = 'Y') THEN
              asn_debug.put_line('validate_deliver_to_person is called');
           END IF;
           validate_deliver_to_person(x_cascaded_table, n);
           IF (g_asn_debug = 'Y') THEN
              asn_debug.put_line('After validate_deliver_to_person: ' || x_cascaded_table(n).error_status);
           END IF;
        ELSE
           IF (g_asn_debug = 'Y') THEN
               asn_debug.put_line('call to validate_deliver_to_person is skipped');
           END IF;
        END IF;/* code fix for the Bug:6375015 ends */

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('After validate_deliver_to_person: ' || x_cascaded_table(n).error_status);
        END IF;

        validate_routing_record(x_cascaded_table, n);

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('After validate_routing_record: ' || x_cascaded_table(n).error_status);
        END IF;

        validate_tax_code(x_cascaded_table,
                          n,
                          x_asn_type
                         );   /* Bug3454491 (1) */

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('After validate_tax_code: ' || x_cascaded_table(n).error_status);
        END IF;

        validate_country_of_origin(x_cascaded_table, n);

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('After validate_country_of_origin: ' || x_cascaded_table(n).error_status);
        END IF;

        /* 13703578 - ASL validation is not required while receiving */
        /* validate_asl(x_cascaded_table, n);

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('After validate_asl: ' || x_cascaded_table(n).error_status);
        END IF; */

        validate_ref_integrity(x_cascaded_table,
                               n,
                               x_header_record
                              );

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('After validate_ref_integrity: ' || x_cascaded_table(n).error_status);
        END IF;

        exchange_sub_items(x_cascaded_table, n);

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('After exchange_sub_items: ' || x_cascaded_table(n).error_status);
        END IF;

        validate_consigned_inventory(x_cascaded_table,
                                     n,
                                     x_asn_type
                                    );   /* Bug3454491 (2) */

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('After validate_consigned_inventory: ' || x_cascaded_table(n).error_status);
        END IF;

        validate_inspection_status(x_cascaded_table, n);

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('After validate_inspection_status: ' || x_cascaded_table(n).error_status);
        END IF;

        validate_transaction_type(x_cascaded_table, n);

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('After validate_transaction_type: ' || x_cascaded_table(n).error_status);
        END IF;

        /** OPM change Bug# 3061052**/
        validate_opm_attributes(x_cascaded_table, n);

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('After validate_opm_attributes: ' || x_cascaded_table(n).error_status);
        END IF;

        /* If destination_type_code is inventory then we need to make
         * sure that we can correct this qty since it might have been
         * already reserved in inventory.
        */
        IF (x_cascaded_table(n).destination_type_code = 'INVENTORY') THEN --{
            rcv_roi_return.derive_inv_qty(x_cascaded_table, n);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('After derive_inv_qty: ' || x_cascaded_table(n).error_status);
            END IF;
        END IF; --}

        validate_parent_rtv (x_cascaded_table, n); -- rtv project

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Leave validate_vendor_rcv_line: ' || x_cascaded_table(n).error_status || ' ' || x_cascaded_table(n).error_message);
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Unexpected exception in validate_vendor_rcv_line: ' || SQLERRM);
            END IF;
    END validate_vendor_rcv_line;

    PROCEDURE validate_amt_based_rcv_line(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER,
        x_asn_type       IN            rcv_headers_interface.asn_type%TYPE,
        x_header_record  IN            rcv_roi_preprocessor.header_rec_type
    ) IS
    BEGIN
        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Enter validate_amt_based_rcv_line');
        END IF;

        x_progress  := '000';
        validate_transaction_date(x_cascaded_table, n);
        x_progress  := '010';

        IF (x_asn_type = 'ASBN') THEN
            validate_quantity_invoiced(x_cascaded_table, n);
        END IF;

        x_progress  := '020';
        validate_dest_type(x_cascaded_table, n);
        x_progress  := '030';
        validate_ship_to_loc(x_cascaded_table, n);
        x_progress  := '040';
        validate_tax_code(x_cascaded_table,
                          n,
                          x_asn_type
                         );   /* Bug3454491 (3) */
        x_progress  := '050';
        validate_ref_integrity(x_cascaded_table,
                               n,
                               x_header_record
                              );

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('After validate_ref_integrity');
        END IF;

        x_progress  := '060';
        validate_transaction_type(x_cascaded_table, n);

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('After validate_transaction_type');
        END IF;

        x_progress  := '070';
        validate_temp_labor_info(x_cascaded_table,
                                 n,
                                 x_header_record
                                );

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('After validate_temp_labour_info');
        END IF;

        x_progress  := '080';
        validate_amount(x_cascaded_table,
                        n,
                        x_header_record
                       );

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('After validate_amount');
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Exception at ' || x_progress);
                asn_debug.put_line(SQLERRM);
                asn_debug.put_line('Exit validate_amt_based_rcv_line');
            END IF;
    END validate_amt_based_rcv_line;

    PROCEDURE derive_ship_to_org_info(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER,
        x_header_record  IN            rcv_roi_preprocessor.header_rec_type
    ) IS
        ship_to_org_record     rcv_shipment_object_sv.organization_id_record_type;
        x_to_organization_code VARCHAR2(5);
    BEGIN
        -- default org from header in case it is null at the line level
        asn_debug.put_line('error derive_ship_to_org_info' || x_cascaded_table(n).error_status);
        x_cascaded_table(n).error_status  := 'S';
        asn_debug.put_line('the to_org_code =  ' || x_cascaded_table(n).to_organization_code);

        IF     x_cascaded_table(n).to_organization_code IS NULL
           AND x_cascaded_table(n).error_status IN('S', 'W') THEN
            asn_debug.put_line('Attempting to default the org from the ship to location');

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Attempting to default the org from the ship to location');
            END IF;

            IF (x_cascaded_table(n).ship_to_location_code IS NOT NULL) THEN
                SELECT MAX(org.organization_code)
                INTO   x_to_organization_code
                FROM   hr_locations hl,
                       mtl_parameters org
                WHERE  x_cascaded_table(n).ship_to_location_code = hl.location_code
                AND    hl.inventory_organization_id = org.organization_id;

                x_cascaded_table(n).to_organization_code  := x_to_organization_code;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Set Org Code using location code = ' || x_cascaded_table(n).to_organization_code);
                END IF;
            END IF;

            IF (    x_cascaded_table(n).to_organization_code IS NULL
                AND x_header_record.header_record.ship_to_organization_code IS NOT NULL) THEN
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Will default org change DUH to ' || x_header_record.header_record.ship_to_organization_code);
                END IF;

                x_cascaded_table(n).to_organization_code  := x_header_record.header_record.ship_to_organization_code;
            END IF;
        END IF;

        -- call derivation procedures if conditions are met

        asn_debug.put_line('to_organization_id ' || x_cascaded_table(n).to_organization_id);
        asn_debug.put_line('to_organization_code ' || x_cascaded_table(n).to_organization_code);

        IF     (x_cascaded_table(n).error_status IN('S', 'W'))
           AND (    x_cascaded_table(n).to_organization_id IS NULL
                AND x_cascaded_table(n).to_organization_code IS NOT NULL) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('X_Progress ' || x_progress);
            END IF;

            ship_to_org_record.organization_code           := x_cascaded_table(n).to_organization_code;
            ship_to_org_record.organization_id             := x_cascaded_table(n).to_organization_id;
            ship_to_org_record.error_record.error_status   := 'S';
            ship_to_org_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Into Derive Organization Record Procedure');
            END IF;

            po_orgs_sv.derive_org_info(ship_to_org_record);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Debug Output after organization procedure');
                asn_debug.put_line(ship_to_org_record.organization_code);
                asn_debug.put_line(TO_CHAR(ship_to_org_record.organization_id));
                asn_debug.put_line(ship_to_org_record.error_record.error_status);
                asn_debug.put_line('Debug organization output over');
            END IF;

            x_cascaded_table(n).to_organization_code       := ship_to_org_record.organization_code;
            x_cascaded_table(n).to_organization_id         := ship_to_org_record.organization_id;
            x_cascaded_table(n).error_status               := ship_to_org_record.error_record.error_status;
            x_cascaded_table(n).error_message              := ship_to_org_record.error_record.error_message;
        END IF;
    END derive_ship_to_org_info;

    PROCEDURE derive_vendor_info(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER
    ) IS
        vendor_record rcv_shipment_header_sv.vendorrectype;
    BEGIN
        asn_debug.put_line('i am inside the derive_vendor_info method');

        IF (x_cascaded_table(n).error_status IN('S', 'W')) THEN
            IF (   x_cascaded_table(n).vendor_name IS NOT NULL
                OR x_cascaded_table(n).vendor_num IS NOT NULL
                OR x_cascaded_table(n).vendor_id IS NOT NULL) THEN
                vendor_record.vendor_name                 := x_cascaded_table(n).vendor_name;
                vendor_record.vendor_num                  := x_cascaded_table(n).vendor_num;
                vendor_record.vendor_id                   := x_cascaded_table(n).vendor_id;
                vendor_record.error_record.error_message  := x_cascaded_table(n).error_message;
                vendor_record.error_record.error_status   := x_cascaded_table(n).error_status;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('In Vendor Procedure');
                END IF;

                po_vendors_sv.derive_vendor_info(vendor_record);

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line(TO_CHAR(vendor_record.vendor_id));
                    asn_debug.put_line(vendor_record.vendor_name);
                    asn_debug.put_line(vendor_record.vendor_num);
                    asn_debug.put_line(vendor_record.error_record.error_status);
                    asn_debug.put_line(vendor_record.error_record.error_message);
                END IF;

                x_cascaded_table(n).vendor_name           := vendor_record.vendor_name;
                x_cascaded_table(n).vendor_num            := vendor_record.vendor_num;
                x_cascaded_table(n).vendor_id             := vendor_record.vendor_id;
                x_cascaded_table(n).error_message         := vendor_record.error_record.error_message;
                x_cascaded_table(n).error_status          := vendor_record.error_record.error_status;
            END IF;
        END IF;
    END derive_vendor_info;

    PROCEDURE derive_vendor_site_info(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER
    ) IS
        vendor_site_record rcv_shipment_header_sv.vendorsiterectype;
    BEGIN
        IF     x_cascaded_table(n).error_status IN('S', 'W')
           AND (   x_cascaded_table(n).vendor_site_code IS NOT NULL
                OR x_cascaded_table(n).vendor_site_id IS NOT NULL) THEN
            vendor_site_record.vendor_site_code            := x_cascaded_table(n).vendor_site_code;
            vendor_site_record.vendor_id                   := x_cascaded_table(n).vendor_id;
            vendor_site_record.vendor_site_id              := x_cascaded_table(n).vendor_site_id;
            vendor_site_record.organization_id             := x_cascaded_table(n).to_organization_id;
            vendor_site_record.error_record.error_message  := x_cascaded_table(n).error_message;
            vendor_site_record.error_record.error_status   := x_cascaded_table(n).error_status;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('In Vendor Site Procedure');
            END IF;

            po_vendor_sites_sv.derive_vendor_site_info(vendor_site_record);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line(vendor_site_record.vendor_site_code);
                asn_debug.put_line(vendor_site_record.vendor_site_id);
            END IF;

            x_cascaded_table(n).vendor_site_code           := vendor_site_record.vendor_site_code;
            x_cascaded_table(n).vendor_id                  := vendor_site_record.vendor_id;
            x_cascaded_table(n).vendor_site_id             := vendor_site_record.vendor_site_id;
            x_cascaded_table(n).to_organization_id         := vendor_site_record.organization_id;
            x_cascaded_table(n).error_message              := vendor_site_record.error_record.error_message;
            x_cascaded_table(n).error_status               := vendor_site_record.error_record.error_status;
        END IF;
    END derive_vendor_site_info;

    PROCEDURE derive_po_header_info(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER
    ) IS
        vendor_site_record  rcv_shipment_header_sv.vendorsiterectype;
        document_num_record rcv_shipment_line_sv.document_num_record_type;
    BEGIN
        IF     (x_cascaded_table(n).error_status IN('S', 'W'))
           AND (    x_cascaded_table(n).po_header_id IS NULL
                AND x_cascaded_table(n).document_num IS NOT NULL) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('X_progress ' || x_progress);
                asn_debug.put_line('shipment_header_id ' || x_cascaded_table(n).shipment_header_id);
            END IF;

            document_num_record.document_num                := x_cascaded_table(n).document_num;
            document_num_record.error_record.error_status   := 'S';
            document_num_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Derive po_header_id');
            END IF;

            rcv_transactions_interface_sv.get_po_header_id(document_num_record);
            x_cascaded_table(n).po_header_id                := document_num_record.po_header_id;
            x_cascaded_table(n).error_status                := document_num_record.error_record.error_status;
            x_cascaded_table(n).error_message               := document_num_record.error_record.error_message;
            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                                'DOCUMENT_NUM',
                                                FALSE
                                               );

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line(TO_CHAR(x_cascaded_table(n).po_header_id));
            END IF;
        END IF;
    END derive_po_header_info;

    PROCEDURE derive_asn_header_info(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER,
        x_header_record  IN            rcv_roi_preprocessor.header_rec_type
    ) IS
    BEGIN
        IF (x_cascaded_table(n).error_status IN('S', 'W')) THEN --{
            /*
            ** Bug 4523892
            ** Removed the code that was checking if the current transaction
            ** was against ASN or PO since global variable g_txn_against_asn
            ** holds that information and is being used here
            */
            IF (    NVL(x_header_record.header_record.asn_type, 'STD') = 'STD'
                AND x_cascaded_table(n).transaction_type = 'RECEIVE'
                AND (rcv_roi_header.g_txn_against_asn = 'Y')) THEN --{ /* Bug4523892 */

                x_cascaded_table(n).shipment_header_id  := x_header_record.header_record.receipt_header_id;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('shipment_header_id in derive_asn_header_info ' || x_cascaded_table(n).shipment_header_id);
                END IF;

                IF (x_cascaded_table(n).shipment_header_id IS NULL) THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Cannot derive shipment_header_id');
                    END IF;

                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                    rcv_error_pkg.set_error_message('RCV_NO_SHIP_ID', x_cascaded_table(n).error_message);
                    rcv_error_pkg.set_token('NUMBER', x_cascaded_table(n).shipment_num);
                    rcv_error_pkg.log_interface_error('SHIPMENT_NUM', FALSE);
                END IF; --}
            END IF; --}
        END IF; --}
    EXCEPTION
        WHEN OTHERS THEN
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('derive_asn_header_info', '000');
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_error('SHIPMENT_NUM', FALSE);
    END derive_asn_header_info;

    PROCEDURE derive_item_info(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER
    ) IS
        item_id_record rcv_shipment_line_sv.item_id_record_type;
    BEGIN
        IF     (x_cascaded_table(n).error_status IN('S', 'W'))
           AND (    x_cascaded_table(n).item_id IS NULL
                AND (x_cascaded_table(n).item_num IS NOT NULL)) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('X_progress ' || x_progress);
            END IF;

            item_id_record.item_num                      := x_cascaded_table(n).item_num;
            item_id_record.vendor_item_num               := NULL; -- x_cascaded_table(n).vendor_item_num;
            item_id_record.to_organization_id            := x_cascaded_table(n).to_organization_id;
            item_id_record.error_record.error_status     := 'S';
            item_id_record.error_record.error_message    := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Derive item_id');
            END IF;

            rcv_transactions_interface_sv.get_item_id(item_id_record);
            x_cascaded_table(n).item_id                  := item_id_record.item_id;
            x_cascaded_table(n).primary_unit_of_measure  := item_id_record.primary_unit_of_measure;
            x_cascaded_table(n).use_mtl_lot              := item_id_record.use_mtl_lot; -- bug 608353
            x_cascaded_table(n).use_mtl_serial           := item_id_record.use_mtl_serial; -- bug 608353
            x_cascaded_table(n).error_status             := item_id_record.error_record.error_status;
            x_cascaded_table(n).error_message            := item_id_record.error_record.error_message;
            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                                'ITEM_NUM',
                                                FALSE
                                               );
        END IF;
    END derive_item_info;

    PROCEDURE derive_substitute_item_info(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER
    ) IS
        sub_item_id_record rcv_shipment_line_sv.sub_item_id_record_type;
    BEGIN
        /* FPJ Services.
         * We do not support Substitute Receipts for service POs.
        */
        IF (x_cascaded_table(n).matching_basis = 'AMOUNT') THEN
            RETURN;
        END IF;

        IF     (x_cascaded_table(n).error_status IN('S', 'W'))
           AND (    x_cascaded_table(n).substitute_item_id IS NULL
                AND (x_cascaded_table(n).substitute_item_num IS NOT NULL)) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('X_progress ' || x_progress);
            END IF;

            sub_item_id_record.substitute_item_num         := x_cascaded_table(n).substitute_item_num;
            sub_item_id_record.vendor_item_num             := NULL; -- x_cascaded_table(n).vendor_item_num;
            sub_item_id_record.error_record.error_status   := 'S';
            sub_item_id_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Derive Substitute Item Id');
            END IF;

            rcv_transactions_interface_sv.get_sub_item_id(sub_item_id_record);
            x_cascaded_table(n).substitute_item_id         := sub_item_id_record.substitute_item_id;
            x_cascaded_table(n).error_status               := sub_item_id_record.error_record.error_status;
            x_cascaded_table(n).error_message              := sub_item_id_record.error_record.error_message;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line(TO_CHAR(x_cascaded_table(n).substitute_item_id));
            END IF;

            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                                'SUBSTITUTE_ITEM_NUM',
                                                FALSE
                                               );
        END IF;
    END derive_substitute_item_info;

    PROCEDURE derive_po_line_info(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER
    ) IS
        po_line_id_record rcv_shipment_line_sv.po_line_id_record_type;
        release_id_record rcv_shipment_line_sv.release_id_record_type;
	l_asn_type rcv_shipment_headers.asn_type%type;
        l_error_column   VARCHAR2(30); --Bugfix 4881909
        l_is_clm_po       VARCHAR2(5) := 'N'; -- <Bug 9342280 : Added for CLM project>
        l_po_line_cnt   number := 0;   /* Complex PO Receiving ER */
    BEGIN
        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('In derive_po_line_info');
        END IF;

        IF     (x_cascaded_table(n).error_status IN('S', 'W'))
           AND (    x_cascaded_table(n).po_line_id IS NULL
                AND x_cascaded_table(n).po_header_id IS NOT NULL
                AND x_cascaded_table(n).document_line_num IS NOT NULL) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('X_progress ' || x_progress);
            END IF;

            po_line_id_record.po_header_id                := x_cascaded_table(n).po_header_id;
            po_line_id_record.document_line_num           := x_cascaded_table(n).document_line_num;
            po_line_id_record.po_line_id                  := x_cascaded_table(n).po_line_id;
            po_line_id_record.item_id                     := x_cascaded_table(n).item_id;
            po_line_id_record.error_record.error_status   := 'S';
            po_line_id_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Derive po_line_id');
            END IF;

            rcv_transactions_interface_sv.get_po_line_id(po_line_id_record);

            IF x_cascaded_table(n).item_id IS NULL THEN
                x_cascaded_table(n).item_id  := po_line_id_record.item_id;
            END IF;

            x_cascaded_table(n).po_line_id                := po_line_id_record.po_line_id;
            x_cascaded_table(n).error_status              := po_line_id_record.error_record.error_status;
            x_cascaded_table(n).error_message             := po_line_id_record.error_record.error_message;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line(TO_CHAR(x_cascaded_table(n).po_line_id));
            END IF;

            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                                'DOCUMENT_LINE_NUM',
                                                FALSE
                                               );
        END IF; -- set line id

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('po_line_id to get matching_basis ' || TO_CHAR(x_cascaded_table(n).po_line_id));
        END IF;

        -- <Bug 9342280 : Added for CLM project>
        l_is_clm_po := po_clm_intg_grp.is_clm_po(p_po_header_id        => NULL,
                                                 p_po_line_id          => x_cascaded_table(n).po_line_id,
                                                 p_po_line_location_id => NULL,
                                                 p_po_distribution_id  => NULL);


        IF l_is_clm_po = 'Y' THEN

          BEGIN

          SELECT po_line_id
            INTO x_cascaded_table(n).po_line_id
            FROM po_lines_trx_v
           WHERE po_header_id = x_cascaded_table(n).po_header_id
             AND po_line_id = x_cascaded_table(n).po_line_id;

          EXCEPTION
          WHEN no_data_found THEN
            x_cascaded_table(n).error_status := rcv_error_pkg.g_ret_sts_error;
            rcv_error_pkg.set_error_message('RCV_CLM_INVALID_PO_LINE',x_cascaded_table(n).error_message);
            rcv_error_pkg.set_token('DOCNUM',x_cascaded_table(n).document_num);
            rcv_error_pkg.set_token('DOCLINE',x_cascaded_table(n).document_line_num);
            rcv_error_pkg.log_interface_error('DOCUMENT_LINE_NUM', FALSE);
          END;
        END IF;
        -- <END CLM>

	/* Complex Work Start.
	 * Moving the logic to derive matching_basis
	 * to a separate procedure derive_matching_basis.
        -- Determine whether this is a services line type
        IF x_cascaded_table(n).po_line_id IS NOT NULL THEN
            SELECT NVL(order_type_lookup_code, 'QUANTITY'),
                   NVL(purchase_basis, 'GOODS'),
                   NVL(matching_basis, 'QUANTITY')
            INTO   x_cascaded_table(n).value_basis,
                   x_cascaded_table(n).purchase_basis,
                   x_cascaded_table(n).matching_basis
            FROM   po_lines
            WHERE  po_line_id = x_cascaded_table(n).po_line_id;
        ELSE
            -- we require line info for receiving against services lines
            x_cascaded_table(n).matching_basis  := 'QUANTITY';
            x_cascaded_table(n).purchase_basis  := 'GOODS';
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('matching_basis ' || x_cascaded_table(n).matching_basis);
        END IF;

	Complex Work End*/
        -- Get the primary uom in case item_id was determined on the basis of the po_line_id
        IF     (x_cascaded_table(n).error_status IN('S', 'W'))
           AND x_cascaded_table(n).item_id IS NOT NULL THEN
            /*BEGIN Bug 5592084: Incase the PRIMARY_UNIT_OF_MEASURE has value
              defined in MSI but doesnt match the one defined for the item
              then we need to raise an error.
              Commenting out below condition to ensure that the validation
              is done for the primary_unit_of_measure in all cases i.e. irrespective
              of value being specified or not in RTI.
             */
           --AND x_cascaded_table(n).primary_unit_of_measure IS NULL THEN
           DECLARE
                l_primary_unit_of_measure mtl_system_items.primary_unit_of_measure%TYPE;
            BEGIN
                /* BUG 608353 */
                SELECT primary_unit_of_measure
                INTO   l_primary_unit_of_measure
                FROM   mtl_system_items
                WHERE  mtl_system_items.inventory_item_id = x_cascaded_table(n).item_id
                AND    mtl_system_items.organization_id = x_cascaded_table(n).to_organization_id;
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Primary UOM from RTI        :' || x_cascaded_table(n).primary_unit_of_measure);
                    asn_debug.put_line('Derived PRIMARY UOM from MSI:' || l_primary_unit_of_measure);
                END IF;
                IF (NVL(x_cascaded_table(n).primary_unit_of_measure, l_primary_unit_of_measure) <> l_primary_unit_of_measure) THEN
                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                         rcv_error_pkg.set_error_message('RCV_INVALID_ROI_VALUE');
                         rcv_error_pkg.set_token('COLUMN', 'PRIMARY_UNIT_OF_MEASURE');
                         rcv_error_pkg.set_token('ROI_VALUE', x_cascaded_table(n).primary_unit_of_measure);
                         rcv_error_pkg.set_token('SYS_VALUE', l_primary_unit_of_measure);
                         rcv_error_pkg.log_interface_error('PRIMARY_UNIT_OF_MEASURE');
                ELSE
                    x_cascaded_table(n).primary_unit_of_measure := l_primary_unit_of_measure;
                END IF;
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Primary UOM: ' || x_cascaded_table(n).primary_unit_of_measure);
                END IF;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_warning;
                    rcv_error_pkg.set_error_message('RCV_INVALID_ROI_VALUE_NE');
                    rcv_error_pkg.set_token('COLUMN', 'PRIMARY_UNIT_OF_MEASURE');
                    rcv_error_pkg.set_token('ROI_VALUE', x_cascaded_table(n).primary_unit_of_measure);
                    rcv_error_pkg.log_interface_warning('PRIMARY_UNIT_OF_MEASURE');
            END;
            /*END Bug 5592084*/
        END IF; -- set primary_uom

	/* We need to get the value of use_mtl_lot and use_mtl_serial
	 * irrespective of whether primary_uom is populated in rti.
	*/
	/*
	  BEGIN Comment: Bug: 4735484
        IF     ((x_cascaded_table(n).error_status IN('S', 'W')
		 AND x_cascaded_table(n).item_id IS NOT NULL)
           AND (x_cascaded_table(n).use_mtl_lot IS  NULL
                OR x_cascaded_table(n).use_mtl_serial IS NULL)) THEN
            BEGIN
                SELECT NVL(x_cascaded_table(n).use_mtl_lot, lot_control_code),
                       NVL(x_cascaded_table(n).use_mtl_serial, serial_number_control_code)
                INTO   x_cascaded_table(n).use_mtl_lot,
                       x_cascaded_table(n).use_mtl_serial
                FROM   mtl_system_items
                WHERE  mtl_system_items.inventory_item_id = x_cascaded_table(n).item_id
                AND    mtl_system_items.organization_id = x_cascaded_table(n).to_organization_id;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('use_mtl_lot: ' || x_cascaded_table(n).use_mtl_lot);
                    asn_debug.put_line('use_mtl_serial: ' || x_cascaded_table(n).use_mtl_serial);
                END IF;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_warning;
                    rcv_error_pkg.set_error_message('PO_RI_INVALID_ITEM_ID', x_cascaded_table(n).error_message);
                    rcv_error_pkg.log_interface_warning('DOCUMENT_LINE_NUM');
            END;
        END IF; -- set primary_uom
        END Comment: Bug: 4735484
        */
        /* Bug 2020269 : uom_code needs to be derived from unit_of_measure
          entered in rcv_transactions_interface.
        */
        IF (x_cascaded_table(n).unit_of_measure IS NOT NULL) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('X_progress ' || x_progress);
            END IF;

            SELECT muom.uom_code
            INTO   x_cascaded_table(n).uom_code
            FROM   mtl_units_of_measure muom
            WHERE  muom.unit_of_measure = x_cascaded_table(n).unit_of_measure;
        ELSE
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('uom_code not dereived as unit_of_measure is null');
            END IF;
        END IF; -- set uom_code

        x_progress  := '026';

        /* Bug 1830177. If the po_line_id is null then we do not populate the correct
         * po_release_id even if we specify the release_num since we do not enter
         * this block. Removed the condition x_cascaded_table(n).po_line_id is not null
           */
	/* R12 Complex Work.
	 * We cannot create releases for a work confirmations.
	*/
	If ( x_cascaded_table(n).header_interface_id is not null) then
		select asn_type
		into l_asn_type
		from rcv_headers_interface
		where header_interface_id =
			x_cascaded_table(n).header_interface_id;
	end if;

        /* Bug 8758194 In case of Blanket POs with multiple releases for the same line, if po_release_id is populated
           in RTI, the following condition was failing since it was checking for po_release_id to be NULL, and hence
           the derivation of values was not taking place. Commented the unnecessary condition to ensure that derivation
           of values goes through fine for such a case. Further, modified the DEBUG messages.
           Moreover, Added code to derive the release number from po_releases_all if the po_release_id is populated and
           release_num is not populated in RTI.
        */
        IF (nvl(l_asn_type,'STD') <> 'WC' ) THEN --{
        IF     (x_cascaded_table(n).error_status IN('S', 'W'))
           /* AND x_cascaded_table(n).po_release_id IS NULL -- Bug 8758194 */
           AND -- Maybe we need an or with shipnum,relnum
               x_cascaded_table(n).po_header_id IS NOT NULL THEN --{
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('X_progress ' || x_progress);
            END IF;

            IF (x_cascaded_table(n).po_release_id IS NOT NULL AND x_cascaded_table(n).release_num IS NULL) THEN
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Deriving Release Number based on PO Release ID '||x_cascaded_table(n).po_release_id);
                END IF;

                SELECT release_num
                INTO   x_cascaded_table(n).release_num
                FROM   po_releases_all
                WHERE  po_header_id  = x_cascaded_table(n).po_header_id
                AND    po_release_id = x_cascaded_table(n).po_release_id;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('x_cascaded_table(n).release_num : ' || x_cascaded_table(n).release_num);
                END IF;
            END IF;

            release_id_record.po_header_id                := x_cascaded_table(n).po_header_id;
            release_id_record.release_num                 := x_cascaded_table(n).release_num;
            release_id_record.po_line_id                  := x_cascaded_table(n).po_line_id;
            release_id_record.shipment_num                := x_cascaded_table(n).document_shipment_line_num;
            release_id_record.error_record.error_status   := 'S';
            release_id_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Derive po_line_location_id, shipment_num, po_release_id');
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('### po_header_id        : ' || release_id_record.po_header_id);
                asn_debug.put_line('### release_num         : ' || release_id_record.release_num);
                asn_debug.put_line('### po_line_id          : ' || release_id_record.po_line_id);
                asn_debug.put_line('### po_line_location_id : ' || release_id_record.po_line_location_id);
                asn_debug.put_line('### shipment_num        : ' || release_id_record.shipment_num);
                asn_debug.put_line('### po_release_id       : ' || release_id_record.po_release_id);
            END IF;

            po_releases_sv4.get_po_release_id(release_id_record);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('^^^ po_header_id        : ' || release_id_record.po_header_id);
                asn_debug.put_line('^^^ release_num         : ' || release_id_record.release_num);
                asn_debug.put_line('^^^ po_line_id          : ' || release_id_record.po_line_id);
                asn_debug.put_line('^^^ po_line_location_id : ' || release_id_record.po_line_location_id);
                asn_debug.put_line('^^^ shipment_num        : ' || release_id_record.shipment_num);
                asn_debug.put_line('^^^ po_release_id       : ' || release_id_record.po_release_id);
            END IF;
        /* End of fix for Bug 8758194 */

            x_cascaded_table(n).error_status              := release_id_record.error_record.error_status;
            x_cascaded_table(n).error_message             := release_id_record.error_record.error_message;

/* po_releases_sv4 does not follow error handling paradigm */
            l_error_column := 'RELEASE_NUM';
            IF (x_cascaded_table(n).error_status = 'F') THEN
                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                rcv_error_pkg.set_error_message(x_cascaded_table(n).error_message);

                /* Bug 4881909: Setting necessary tokens for messages to be logged in po_interface_errors
                **              if release number or PO shipment line information is in error.
                */

                IF release_id_record.error_record.error_message = 'RCV_ITEM_PO_REL_ID' THEN

                    rcv_error_pkg.set_token('NUMBER', x_cascaded_table(n).release_num);

                ELSIF release_id_record.error_record.error_message = 'RCV_ROI_INVALID_PO_SHIP_NUM' THEN
                    rcv_error_pkg.set_token('PO_SHIP_NUM', x_cascaded_table(n).document_shipment_line_num);
                    rcv_error_pkg.set_token('PONUM', x_cascaded_table(n).document_num);
                    l_error_column := 'DOCUMENT_SHIPMENT_LINE_NUM';

                ELSIF release_id_record.error_record.error_message = 'RCV_ROI_INVALID_REL_SHIP_NUM' THEN
                    rcv_error_pkg.set_token('PO_SHIP_NUM', x_cascaded_table(n).document_shipment_line_num);
                    rcv_error_pkg.set_token('PONUM', x_cascaded_table(n).document_num);
		    rcv_error_pkg.set_token('RELEASE', x_cascaded_table(n).release_num);
                    l_error_column := 'DOCUMENT_SHIPMENT_LINE_NUM';

                ELSIF release_id_record.error_record.error_message = 'RCV_ROI_INVALID_RELEASE_NUM' THEN

                    rcv_error_pkg.set_token('RELEASE', x_cascaded_table(n).release_num);
                    rcv_error_pkg.set_token('PONUM', x_cascaded_table(n).document_num);

                END IF;
            END IF;


            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,l_error_column, FALSE);

            IF x_cascaded_table(n).po_line_location_id IS NULL THEN
                x_cascaded_table(n).po_line_location_id  := release_id_record.po_line_location_id;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('PO_LINE_LOCATION_ID ' || TO_CHAR(x_cascaded_table(n).po_line_location_id));
                END IF;
            END IF;

            IF x_cascaded_table(n).document_shipment_line_num IS NULL THEN
                x_cascaded_table(n).document_shipment_line_num  := release_id_record.shipment_num;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('DOCUMENT_SHIPMENT_NUM ' || TO_CHAR(x_cascaded_table(n).document_shipment_line_num));
                END IF;
            END IF;

            x_cascaded_table(n).po_release_id             := release_id_record.po_release_id;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('PO_RELEASE_ID ' || TO_CHAR(x_cascaded_table(n).po_release_id));
            END IF;
        END IF; -- }set release info
       End if; --}-- <> 'WC'


    /* Start - Complex PO Receiving ER
     * Derive po_line_id if line_location_id is populated in RTI */

	IF (x_cascaded_table(n).item_id is not null and
		x_cascaded_table(n).po_line_id IS NULL and
		x_cascaded_table(n).po_header_id is not null and
		x_cascaded_table(n).po_line_location_id is null) THEN

		select count(1)
		into l_po_line_cnt
		from po_lines_trx_v
		where item_id = x_cascaded_table(n).item_id
		and po_header_id = x_cascaded_table(n).po_header_id;

			if (l_po_line_cnt = 1) then

				select po_line_id
				into x_cascaded_table(n).po_line_id
				from po_lines_trx_v
				where item_id = x_cascaded_table(n).item_id
				and po_header_id = x_cascaded_table(n).po_header_id;

			end if;

	END IF;

    /* Derive po_line_location_id */
	IF (x_cascaded_table(n).po_line_id is not null and
	    x_cascaded_table(n).document_shipment_line_num is not null and
	    x_cascaded_table(n).po_line_location_id is null) then

		begin

		select line_location_id
		into x_cascaded_table(n).po_line_location_id
		from po_line_locations_trx_v
	    where po_line_id = x_cascaded_table(n).po_line_id
	    and shipment_num = x_cascaded_table(n).document_shipment_line_num;

		exception
		when others then
		   x_cascaded_table(n).po_line_location_id := null;
		end;

	END IF;
    /* End - Complex PO Receiving ER */


    /* Complex Work.
     * Add exception block.
    */
    exception
    when others then
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Exception in derive_po_line_info'||x_progress);
            END IF;
	raise;
    END derive_po_line_info;

    PROCEDURE derive_from_org_info(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER
    ) IS
        ship_to_org_record rcv_shipment_object_sv.organization_id_record_type;
    BEGIN
        IF     (x_cascaded_table(n).error_status IN('S', 'W'))
           AND (    x_cascaded_table(n).from_organization_id IS NULL
                AND x_cascaded_table(n).from_organization_code IS NOT NULL) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('X_progress ' || x_progress);
            END IF;

            ship_to_org_record.organization_code           := x_cascaded_table(n).from_organization_code;
            ship_to_org_record.organization_id             := x_cascaded_table(n).from_organization_id;
            ship_to_org_record.error_record.error_status   := 'S';
            ship_to_org_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('In From Organization Procedure');
            END IF;

            po_orgs_sv.derive_org_info(ship_to_org_record);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('From organization code ' || ship_to_org_record.organization_code);
                asn_debug.put_line('From organization id ' || TO_CHAR(ship_to_org_record.organization_id));
                asn_debug.put_line('From organization error status ' || ship_to_org_record.error_record.error_status);
            END IF;

            x_cascaded_table(n).from_organization_code     := ship_to_org_record.organization_code;
            x_cascaded_table(n).from_organization_id       := ship_to_org_record.organization_id;
            x_cascaded_table(n).error_status               := ship_to_org_record.error_record.error_status;
            x_cascaded_table(n).error_message              := ship_to_org_record.error_record.error_message;

/* po_orgs_sv does not follow error handling paradigm */
            IF (x_cascaded_table(n).error_status = 'F') THEN
                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                rcv_error_pkg.set_error_message(x_cascaded_table(n).error_message);
            END IF;

        END IF;
    END derive_from_org_info;

    PROCEDURE derive_transit_org_info(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER
    ) IS
        ship_to_org_record rcv_shipment_object_sv.organization_id_record_type;
    BEGIN
        IF     (x_cascaded_table(n).error_status IN('S', 'W'))
           AND (    x_cascaded_table(n).intransit_owning_org_id IS NULL
                AND x_cascaded_table(n).intransit_owning_org_code IS NOT NULL) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('X_progress ' || x_progress);
            END IF;

            ship_to_org_record.organization_code           := x_cascaded_table(n).intransit_owning_org_code;
            ship_to_org_record.organization_id             := x_cascaded_table(n).intransit_owning_org_id;
            ship_to_org_record.error_record.error_status   := 'S';
            ship_to_org_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('In Intransit Owning Org Record Procedure');
            END IF;

            po_orgs_sv.derive_org_info(ship_to_org_record);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Intransit organization code ' || ship_to_org_record.organization_code);
                asn_debug.put_line('Intransit organization id ' || TO_CHAR(ship_to_org_record.organization_id));
                asn_debug.put_line('Intransit error status ' || ship_to_org_record.error_record.error_status);
            END IF;

            x_cascaded_table(n).intransit_owning_org_code  := ship_to_org_record.organization_code;
            x_cascaded_table(n).intransit_owning_org_id    := ship_to_org_record.organization_id;
            x_cascaded_table(n).error_status               := ship_to_org_record.error_record.error_status;
            x_cascaded_table(n).error_message              := ship_to_org_record.error_record.error_message;

/* po_orgs_sv does not follow error handling paradigm */
            IF (x_cascaded_table(n).error_status = 'F') THEN
                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                rcv_error_pkg.set_error_message(x_cascaded_table(n).error_message);
            END IF;

        END IF;
    END derive_transit_org_info;

    PROCEDURE derive_location_info(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER
    ) IS
        location_id_record rcv_shipment_object_sv.location_id_record_type;
    BEGIN
        IF     (x_cascaded_table(n).error_status IN('S', 'W'))
           AND (    x_cascaded_table(n).location_id IS NULL
                AND x_cascaded_table(n).location_code IS NOT NULL) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('X_progress ' || x_progress);
            END IF;

            location_id_record.location_code               := x_cascaded_table(n).location_code;
            location_id_record.error_record.error_status   := 'S';
            location_id_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Derive location_id');
            END IF;

            rcv_transactions_interface_sv.get_location_id(location_id_record);
            x_cascaded_table(n).location_id                := location_id_record.location_id;
            x_cascaded_table(n).error_status               := location_id_record.error_record.error_status;
            x_cascaded_table(n).error_message              := location_id_record.error_record.error_message;
        END IF;
    END derive_location_info;

    PROCEDURE derive_ship_to_location_info(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER
    ) IS
        location_id_record rcv_shipment_object_sv.location_id_record_type;
    BEGIN
        IF     (x_cascaded_table(n).error_status IN('S', 'W'))
           AND (    x_cascaded_table(n).ship_to_location_id IS NULL
                AND x_cascaded_table(n).ship_to_location_code IS NOT NULL) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('X_progress ' || x_progress);
            END IF;

            location_id_record.location_code               := x_cascaded_table(n).ship_to_location_code;
            location_id_record.error_record.error_status   := 'S';
            location_id_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Derive ship to location_id');
            END IF;

            rcv_transactions_interface_sv.get_location_id(location_id_record);
            x_cascaded_table(n).ship_to_location_id        := location_id_record.location_id;
            x_cascaded_table(n).error_status               := location_id_record.error_record.error_status;
            x_cascaded_table(n).error_message              := location_id_record.error_record.error_message;
        END IF;
    END derive_ship_to_location_info;

    PROCEDURE derive_routing_header_info(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER
    ) IS
        routing_header_id_record rcv_shipment_line_sv.routing_header_id_rec_type;
    BEGIN
        IF     (x_cascaded_table(n).error_status IN('S', 'W'))
           AND (    x_cascaded_table(n).routing_header_id IS NULL
                AND x_cascaded_table(n).routing_code IS NOT NULL) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('X_progress ' || x_progress);
            END IF;

            routing_header_id_record.routing_code                := x_cascaded_table(n).routing_code;
            routing_header_id_record.error_record.error_status   := 'S';
            routing_header_id_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Derive routing_header_id');
            END IF;

            rcv_transactions_interface_sv.get_routing_header_id(routing_header_id_record);
            x_cascaded_table(n).routing_header_id                := routing_header_id_record.routing_header_id;
            x_cascaded_table(n).error_status                     := routing_header_id_record.error_record.error_status;
            x_cascaded_table(n).error_message                    := routing_header_id_record.error_record.error_message;
        END IF;
    END derive_routing_header_info;

    PROCEDURE derive_routing_step_info(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER
    ) IS
        routing_step_id_record rcv_shipment_line_sv.routing_step_id_rec_type;
    BEGIN
        IF     (x_cascaded_table(n).error_status IN('S', 'W'))
           AND (    x_cascaded_table(n).routing_step_id IS NULL
                AND x_cascaded_table(n).routing_step IS NOT NULL) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('X_progress ' || x_progress);
            END IF;

            routing_step_id_record.routing_step                := x_cascaded_table(n).routing_step;
            routing_step_id_record.error_record.error_status   := 'S';
            routing_step_id_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Derive routing Step Id');
            END IF;

            rcv_transactions_interface_sv.get_routing_step_id(routing_step_id_record);
            x_cascaded_table(n).routing_step_id                := routing_step_id_record.routing_step_id;
            x_cascaded_table(n).error_status                   := routing_step_id_record.error_record.error_status;
            x_cascaded_table(n).error_message                  := routing_step_id_record.error_record.error_message;
        END IF;
    END derive_routing_step_info;

    PROCEDURE derive_deliver_to_person_info(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER
    ) IS
        employee_id_record rcv_shipment_object_sv.employee_id_record_type;
    BEGIN
        IF     (x_cascaded_table(n).error_status IN('S', 'W'))
           AND (    x_cascaded_table(n).deliver_to_person_id IS NULL
                AND x_cascaded_table(n).deliver_to_person_name IS NOT NULL) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('X_progress ' || x_progress);
            END IF;

            employee_id_record.employee_name               := x_cascaded_table(n).deliver_to_person_name;
            employee_id_record.employee_id                 := x_cascaded_table(n).deliver_to_person_id;
            employee_id_record.error_record.error_status   := 'S';
            employee_id_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('In Derive deliver_to_person_id Information');
            END IF;

            po_employees_sv.derive_employee_info(employee_id_record);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Employee name ' || employee_id_record.employee_name);
                asn_debug.put_line('Employee id ' || TO_CHAR(employee_id_record.employee_id));
                asn_debug.put_line('Employee error status ' || employee_id_record.error_record.error_status);
            END IF;

            x_cascaded_table(n).deliver_to_person_name     := employee_id_record.employee_name;
            x_cascaded_table(n).deliver_to_person_id       := employee_id_record.employee_id;
            x_cascaded_table(n).error_status               := employee_id_record.error_record.error_status;
            x_cascaded_table(n).error_message              := employee_id_record.error_record.error_message;

/* po_orgs_sv does not follow error handling paradigm */
            IF (x_cascaded_table(n).error_status = 'F') THEN
                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                rcv_error_pkg.set_error_message(x_cascaded_table(n).error_message);
            END IF;

        END IF;
    END derive_deliver_to_person_info;

    PROCEDURE derive_deliver_to_loc_info(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER
    ) IS
        location_id_record rcv_shipment_object_sv.location_id_record_type;
    BEGIN
        IF     (x_cascaded_table(n).error_status IN('S', 'W'))
           AND (    x_cascaded_table(n).deliver_to_location_id IS NULL
                AND x_cascaded_table(n).deliver_to_location_code IS NOT NULL) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('X_progress ' || x_progress);
            END IF;

            location_id_record.location_code               := x_cascaded_table(n).deliver_to_location_code;
            location_id_record.error_record.error_status   := 'S';
            location_id_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Derive deliver_to_location_id');
            END IF;

            rcv_transactions_interface_sv.get_location_id(location_id_record);
            x_cascaded_table(n).deliver_to_location_id     := location_id_record.location_id;
            x_cascaded_table(n).error_status               := location_id_record.error_record.error_status;
            x_cascaded_table(n).error_message              := location_id_record.error_record.error_message;
        END IF;
    END derive_deliver_to_loc_info;

    /* WMS Change for receiving(from) locators */
    PROCEDURE derive_from_locator_id(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER
    ) IS
    BEGIN
        IF (    x_cascaded_table(n).from_locator_id IS NULL
            AND x_cascaded_table(n).from_locator IS NOT NULL) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('inside derive_from_locator_id');
            END IF;

            SELECT MAX(ml.inventory_location_id)
            INTO   x_cascaded_table(n).from_locator_id
            FROM   mtl_item_locations_kfv ml
            WHERE  ml.concatenated_segments = x_cascaded_table(n).from_locator
            AND    (   ml.disable_date > SYSDATE
                    OR ml.disable_date IS NULL)
            AND    NVL(ml.subinventory_code, 'z') = NVL(x_cascaded_table(n).from_subinventory, 'z')
            AND    x_cascaded_table(n).to_organization_id = ml.organization_id;

            IF (x_cascaded_table(n).from_locator_id IS NULL) THEN
                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                rcv_error_pkg.set_error_message('RCV_ALL_INVALID_LOCATOR', x_cascaded_table(n).error_message);
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('derive_from_locator_id', '000');
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
    END derive_from_locator_id;

    PROCEDURE derive_to_locator_id(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER
    ) IS
    BEGIN
        IF (    x_cascaded_table(n).locator_id IS NULL
            AND x_cascaded_table(n).LOCATOR IS NOT NULL
            AND x_cascaded_table(n).subinventory IS NOT NULL) THEN /* Bug3993867 */

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('inside derive_to_locator_id');
            END IF;

            SELECT MAX(ml.inventory_location_id)
            INTO   x_cascaded_table(n).locator_id
            FROM   mtl_item_locations_kfv ml
            WHERE  ml.concatenated_segments = x_cascaded_table(n).LOCATOR
            AND    (   ml.disable_date > SYSDATE
                    OR ml.disable_date IS NULL)
            AND    NVL(ml.subinventory_code, 'z') = NVL(x_cascaded_table(n).subinventory, 'z')
            AND    x_cascaded_table(n).to_organization_id = ml.organization_id;

            IF (x_cascaded_table(n).locator_id IS NULL) THEN
                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                rcv_error_pkg.set_error_message('RCV_ALL_INVALID_LOCATOR', x_cascaded_table(n).error_message); /* Bug 3591830 - Changed message name from RCV_ASN_FROM_LOCATOR_ID to RCV_ALL_INVALID_LOCATOR */
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('derive_to_locator_id', '000');
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
    END derive_to_locator_id;

    PROCEDURE validate_non_services_fields(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
    BEGIN
        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('In validate_non_services_fields');
        END IF;

        IF x_cascaded_table(n).matching_basis = 'AMOUNT' THEN --{
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('In first part validate_non_services_fields');
            END IF;

           /* Bug 5186378: Added the following condtions,
            *               1) source_doc_quantity <> 0 and
            *               2) primary_quantity <> 0
            */
            IF    x_cascaded_table(n).item_id IS NOT NULL
               OR x_cascaded_table(n).item_revision IS NOT NULL
               OR x_cascaded_table(n).substitute_item_num IS NOT NULL
               OR x_cascaded_table(n).substitute_item_id IS NOT NULL
               OR x_cascaded_table(n).quantity IS NOT NULL
               OR (     x_cascaded_table(n).primary_quantity IS NOT NULL
                    AND x_cascaded_table(n).primary_quantity <> 0 )
               OR (     x_cascaded_table(n).source_doc_quantity IS NOT NULL
                    AND x_cascaded_table(n).source_doc_quantity <> 0 )
               OR x_cascaded_table(n).vendor_cum_shipped_qty IS NOT NULL
               OR x_cascaded_table(n).quantity_shipped IS NOT NULL
               OR x_cascaded_table(n).quantity_invoiced IS NOT NULL
               OR x_cascaded_table(n).secondary_quantity IS NOT NULL
               OR (    x_cascaded_table(n).job_id IS NOT NULL
                   AND (    x_cascaded_table(n).value_basis = 'FIXED PRICE'
                        AND x_cascaded_table(n).purchase_basis = 'SERVICES')) THEN --{
                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                rcv_error_pkg.set_error_message('RCV_IRRELEVANT_VALUES', x_cascaded_table(n).error_message);
                rcv_error_pkg.log_interface_error('MATCHING_BASIS', FALSE);
            END IF; --}

            IF x_cascaded_table(n).error_status IN('S', 'W') THEN --{
                IF (    x_cascaded_table(n).value_basis = 'RATE'
                    AND x_cascaded_table(n).purchase_basis = 'TEMP LABOR') THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('RATE/TEMP LABOR. They can have the foll values. Hence return.');
                    END IF;

                    RETURN;
                END IF;

                IF (   x_cascaded_table(n).unit_of_measure IS NOT NULL
                    OR x_cascaded_table(n).primary_unit_of_measure IS NOT NULL
                    OR x_cascaded_table(n).secondary_unit_of_measure IS NOT NULL
                    OR x_cascaded_table(n).source_doc_unit_of_measure IS NOT NULL
                    OR x_cascaded_table(n).uom_code IS NOT NULL
                    OR x_cascaded_table(n).secondary_uom_code IS NOT NULL
                    OR x_cascaded_table(n).po_unit_price IS NOT NULL
                    OR x_cascaded_table(n).timecard_id IS NOT NULL
                    OR x_cascaded_table(n).timecard_ovn IS NOT NULL
                   ) THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Not RATE/TEMP LABOR');
                    END IF;

                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                    rcv_error_pkg.set_error_message('RCV_IRRELEVANT_VALUES', x_cascaded_table(n).error_message);
                    rcv_error_pkg.log_interface_error('MATCHING_BASIS', FALSE);
                END IF; --}
            END IF; --}
        END IF; --}

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Leave validate_non_services_fields');
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('derive_to_locator_id', '000');
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_error('MATCHING_BASIS', FALSE);
    END validate_non_services_fields;

    /* We cannot default_from_subloc and default_to_subloc since
     * for deliver txn, we need from values but not to values.
     * Also for transfer these values are different. So it is
     * better to separate them out.
    */
    PROCEDURE default_from_subloc_info(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        l_from_subinventory rcv_transactions.from_subinventory%TYPE;
        l_from_locator_id   rcv_transactions.from_locator_id%TYPE;
        l_to_subinventory   rcv_transactions.subinventory%TYPE;
        l_to_locator_id     rcv_transactions.locator_id%TYPE;
    BEGIN
        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('inside default_from_subloc_info');
        END IF;

        /* If parent_interface_id is not null then it means it is a parent
         * child relation ship. So look in rti. If parent_transaction_id
         * is not null, then look in rcv_transactions.
        */
        IF (x_cascaded_table(n).parent_interface_txn_id IS NOT NULL) THEN
            SELECT subinventory,
                   locator_id,
                   from_subinventory,
                   from_locator_id
            INTO   l_to_subinventory,
                   l_to_locator_id,
                   l_from_subinventory,
                   l_from_locator_id
            FROM   rcv_transactions_interface rti
            WHERE  rti.interface_transaction_id = x_cascaded_table(n).parent_interface_txn_id;
        ELSIF (x_cascaded_table(n).parent_transaction_id IS NOT NULL) THEN
            SELECT subinventory,
                   locator_id,
                   from_subinventory,
                   from_locator_id
            INTO   l_to_subinventory,
                   l_to_locator_id,
                   l_from_subinventory,
                   l_from_locator_id
            FROM   rcv_transactions rt
            WHERE  rt.transaction_id = x_cascaded_table(n).parent_transaction_id;
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('l_to_subinventory ' || l_to_subinventory);
            asn_debug.put_line('l_to_locator_id ' || l_to_locator_id);
            asn_debug.put_line('l_from_subinventory, ' || l_from_subinventory);
            asn_debug.put_line('l_from_locator_id ' || l_from_locator_id);
        END IF;

        /* For Accept, Reject and +ve corrections, from_subinventory and
         * from_locator is same as that of the parent. For RTV, this will come here only
         * when user has not specified from_subinventory.
        */
        /* Bug 3557343.
         * For Accept/Reject transactions, we want the from_sub/from_loc
         * to be the same as that of the parent's to_sub/to_loc since
         * we cannot change the sub/loc at the time of inspection. So
         * it will remain in the same sub/loc making both  from and to
         * sub/loc the same as that of the parent.
        */
        IF (    x_cascaded_table(n).transaction_type = 'CORRECT'
            AND SIGN(x_cascaded_table(n).quantity) = 1) THEN
            x_cascaded_table(n).from_subinventory  := l_from_subinventory;
            x_cascaded_table(n).from_locator_id    := l_from_locator_id;
        ELSE   /* For all other transaction types */
            x_cascaded_table(n).from_subinventory  := l_to_subinventory;
            x_cascaded_table(n).from_locator_id    := l_to_locator_id;
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('x_cascaded_table(n).from_subinventory ' || x_cascaded_table(n).from_subinventory);
            asn_debug.put_line('x_cascaded_table(n).from_locator_id ' || x_cascaded_table(n).from_locator_id);
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('default_from_subloc_info', '000');
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
    END default_from_subloc_info;

    PROCEDURE default_to_subloc_info(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        l_from_subinventory    rcv_transactions.from_subinventory%TYPE;
        l_from_locator_id      rcv_transactions.from_locator_id%TYPE;
        l_to_subinventory      rcv_transactions.subinventory%TYPE;
        l_to_locator_id        rcv_transactions.locator_id%TYPE;
        x_locator_control      NUMBER;
        x_default_subinventory VARCHAR2(10);
        x_default_locator_id   NUMBER;
        x_success              BOOLEAN;
    BEGIN
        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('inside default_to_subloc_info');
        END IF;

        /* Get default subinventory from the setup if it is a direct delivery
         * or just a delivery and if subinventory is null.
        */
        IF (x_cascaded_table(n).transaction_type IN('RECEIVE', 'DELIVER')) THEN --{
            IF (   (x_cascaded_table(n).auto_transact_code <> 'RECEIVE')
                OR x_cascaded_table(n).auto_transact_code IS NULL) THEN --{
                /*
                ** A subinventory must have been defined on the po or a default
                ** must be available for the item.  If it's not already defined
                ** then go get it out of inventory.  If you're using express
                ** then it's ok to get the default rather than having it be
                ** defined on the record
                */
                IF (x_cascaded_table(n).subinventory IS NULL) THEN --{
                    /*
                    ** If you're using express then it's ok to get the default
                    ** rather than having it be defined on the record
                    */
                    x_progress  := '120';
                    po_subinventories_s.get_default_subinventory(x_cascaded_table(n).to_organization_id,
                                                                 x_cascaded_table(n).item_id,
                                                                 x_cascaded_table(n).subinventory
                                                                );

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Defaulting subinventory from item: Sub = ' || x_cascaded_table(n).subinventory);
                    END IF;
                END IF; --} (X_cascaded_table(n).subinventory IS NULL)
            END IF; --}

            /* We can have sub/loc for receive and deliver transaction. If subinventory
             * is not null and locator_id is null, then get the default locator_id if
             * the there is a locator.
            */
            IF (x_cascaded_table(n).subinventory IS NOT NULL) THEN --{
                x_progress  := '122';
                po_subinventories_s.get_locator_control(x_cascaded_table(n).to_organization_id,
                                                        x_cascaded_table(n).subinventory,
                                                        x_cascaded_table(n).item_id,
                                                        x_locator_control
                                                       );

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Locator Control = ' || TO_CHAR(x_locator_control));
                END IF;

                /*
                ** If locator control is 2 which means it is under predefined
                ** locator contol or 3 which means it's under dynamic (any value)
                ** locator control then you need to go get the default locator id
                */
                IF (    (   x_locator_control = 2
                         OR x_locator_control = 3)
                    AND x_cascaded_table(n).locator_id IS NULL) THEN --{
                    x_progress  := '123';
                    po_subinventories_s.get_default_locator(x_cascaded_table(n).to_organization_id,
                                                            x_cascaded_table(n).item_id,
                                                            x_cascaded_table(n).subinventory,
                                                            x_cascaded_table(n).locator_id
                                                           );

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Defaulting locator from Sub: Locator_id  = ' || TO_CHAR(x_cascaded_table(n).locator_id));
                    END IF;
                END IF; --}
            END IF; --} matches subinventory not null

            IF (   (x_cascaded_table(n).auto_transact_code <> 'RECEIVE')
                OR x_cascaded_table(n).auto_transact_code IS NULL) THEN --{
                x_default_subinventory  := x_cascaded_table(n).subinventory;
                x_default_locator_id    := x_cascaded_table(n).locator_id;
                /*
                ** Call the put away function
                */
                x_success               := rcv_sub_locator_sv.put_away_api(x_cascaded_table(n).po_line_location_id,
                                                                           x_cascaded_table(n).po_distribution_id,
                                                                           x_cascaded_table(n).shipment_line_id,
                                                                           x_cascaded_table(n).receipt_source_code,
                                                                           x_cascaded_table(n).from_organization_id,
                                                                           x_cascaded_table(n).to_organization_id,
                                                                           x_cascaded_table(n).item_id,
                                                                           x_cascaded_table(n).item_revision,
                                                                           x_cascaded_table(n).vendor_id,
                                                                           x_cascaded_table(n).ship_to_location_id,
                                                                           x_cascaded_table(n).deliver_to_location_id,
                                                                           x_cascaded_table(n).deliver_to_person_id,
                                                                           x_cascaded_table(n).quantity,
                                                                           x_cascaded_table(n).primary_quantity,
                                                                           x_cascaded_table(n).primary_unit_of_measure,
                                                                           x_cascaded_table(n).quantity,
                                                                           x_cascaded_table(n).unit_of_measure,
                                                                           x_cascaded_table(n).routing_header_id,
                                                                           x_default_subinventory,
                                                                           x_default_locator_id,
                                                                           x_cascaded_table(n).subinventory,
                                                                           x_cascaded_table(n).locator_id
                                                                          );
            END IF; --}

            /* If subinventory is still null, we need to disable dropship asn auto deliver if it has
             * been enabled and change the transaction back to ASN import*/
            IF ( (x_auto_deliver = 'Y') AND
                 (x_cascaded_table(n).subinventory IS NULL)) THEN --{

               IF (g_asn_debug = 'Y') THEN
                   asn_debug.put_line('Warning: Changing the dropship ASN auto deliver back to ASN import.');
                   asn_debug.put_line('Cause: Receiving preprocessor could not default a subinventory for this trxn.');
               END IF;

               -- Change the transaction back to ASN import
               x_cascaded_table(n).transaction_type  := 'SHIP';
               x_cascaded_table(n).auto_transact_code  := 'SHIP';
               -- Reset the flag so that it won't affect the next transaction.
               x_auto_deliver := 'N';
               x_cascaded_table(n).error_status := rcv_error_pkg.g_ret_sts_warning;

               -- Log po_interface_errors
               rcv_error_pkg.set_error_message('RCV_ASN_AUTO_DEL_NO_SUBINV');
               rcv_error_pkg.log_interface_warning('SUBINVENTORY');
            END IF; --}

            RETURN;
        END IF; --}

        /* Bug 3568861.
         * We need to default the subinventory_code and locator_id
         * based on the transfer_lpn_id or lpn_id if they are not null
         * null based on the transactions. If they are null, then we
         * need to default from the parent. For +ve correct or
         * RTR, default using transfer_lpn_id. For -ve correct use lpn_id
         * to default sub/loc.
        */
        IF (    (   (    x_cascaded_table(n).transaction_type = 'CORRECT'
                     AND SIGN(x_cascaded_table(n).quantity) = 1)
                 OR (x_cascaded_table(n).transaction_type = 'RETURN TO RECEIVING'))
            AND (x_cascaded_table(n).transfer_lpn_id IS NOT NULL)) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('+Ve correct or RTR with transfer_lpn_id not null');
            END IF;

            SELECT subinventory_code,
                   locator_id
            INTO   x_cascaded_table(n).subinventory,
                   x_cascaded_table(n).locator_id
            FROM   wms_license_plate_numbers
            WHERE  lpn_id = x_cascaded_table(n).transfer_lpn_id;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Sub is ' || x_cascaded_table(n).subinventory);
                asn_debug.put_line('Loc is ' || x_cascaded_table(n).locator_id);
                asn_debug.put_line('Return ');
            END IF;

            RETURN;
        END IF;

        IF (    (    x_cascaded_table(n).transaction_type = 'CORRECT'
                 AND SIGN(x_cascaded_table(n).quantity) = -1)
            AND (x_cascaded_table(n).lpn_id IS NOT NULL)) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('-Ve correct  with lpn_id not null');
            END IF;

            SELECT subinventory_code,
                   locator_id
            INTO   x_cascaded_table(n).subinventory,
                   x_cascaded_table(n).locator_id
            FROM   wms_license_plate_numbers
            WHERE  lpn_id = x_cascaded_table(n).lpn_id;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Sub is ' || x_cascaded_table(n).subinventory);
                asn_debug.put_line('Loc is ' || x_cascaded_table(n).locator_id);
                asn_debug.put_line('Return ');
            END IF;

            RETURN;
        END IF;

        /* End of bug 3568861. */

        /* If parent_interface_id is not null then it means it is a parent
         * child relation ship. So look in rti. If parent_transaction_id
         * is not null, then look in rcv_transactions.
        */
        IF (x_cascaded_table(n).parent_interface_txn_id IS NOT NULL) THEN
            SELECT subinventory,
                   locator_id,
                   from_subinventory,
                   from_locator_id
            INTO   l_to_subinventory,
                   l_to_locator_id,
                   l_from_subinventory,
                   l_from_locator_id
            FROM   rcv_transactions_interface rti
            WHERE  rti.interface_transaction_id = x_cascaded_table(n).parent_interface_txn_id;
        ELSIF (x_cascaded_table(n).parent_transaction_id IS NOT NULL) THEN
            SELECT subinventory,
                   locator_id,
                   from_subinventory,
                   from_locator_id
            INTO   l_to_subinventory,
                   l_to_locator_id,
                   l_from_subinventory,
                   l_from_locator_id
            FROM   rcv_transactions rt
            WHERE  rt.transaction_id = x_cascaded_table(n).parent_transaction_id;
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('l_to_subinventory ' || l_to_subinventory);
            asn_debug.put_line('l_to_locator_id ' || l_to_locator_id);
            asn_debug.put_line('l_from_subinventory, ' || l_from_subinventory);
            asn_debug.put_line('l_from_locator_id ' || l_from_locator_id);
        END IF;

        /* For Accept, Reject and +ve corrections, to_subinventory and
         * to_locator is same as that of the parent.
        */
        IF (   (x_cascaded_table(n).transaction_type IN('ACCEPT', 'REJECT'))
            OR (    x_cascaded_table(n).transaction_type = 'CORRECT'
                AND SIGN(x_cascaded_table(n).quantity) = 1)) THEN
            x_cascaded_table(n).subinventory  := l_to_subinventory;
            x_cascaded_table(n).locator_id    := l_to_locator_id;
        ELSE   /* For all other transaction types */
            x_cascaded_table(n).subinventory  := l_from_subinventory;
            x_cascaded_table(n).locator_id    := l_from_locator_id;
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('x_cascaded_table(n).subinventory ' || x_cascaded_table(n).subinventory);
            asn_debug.put_line('x_cascaded_table(n).locator_id ' || x_cascaded_table(n).locator_id);
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('default_to_subloc_info', '000');
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
    END default_to_subloc_info;

    /* WMS Change End */
    PROCEDURE derive_reason_info(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER
    ) IS
        reason_id_record rcv_shipment_line_sv.reason_id_record_type;
    BEGIN
        IF     (x_cascaded_table(n).error_status IN('S', 'W'))
           AND (    x_cascaded_table(n).reason_id IS NULL
                AND x_cascaded_table(n).reason_name IS NOT NULL) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('X_progress ' || x_progress);
            END IF;

            reason_id_record.reason_name                 := x_cascaded_table(n).reason_name;
            reason_id_record.error_record.error_status   := 'S';
            reason_id_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Derive Reason_id');
            END IF;

            rcv_transactions_interface_sv.get_reason_id(reason_id_record);
            x_cascaded_table(n).reason_id                := reason_id_record.reason_id;
            x_cascaded_table(n).error_status             := reason_id_record.error_record.error_status;
            x_cascaded_table(n).error_message            := reason_id_record.error_record.error_message;
        END IF;
    END derive_reason_info;

    PROCEDURE derive_auto_transact_code(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER
    ) IS
    BEGIN
        IF (x_cascaded_table(n).error_status IN('S', 'W')) THEN
            /* Moved dropship flag drivation here so that it's available
             * for use in all transaction types*/
            BEGIN
                SELECT drop_ship_flag
                INTO   x_drop_ship_flag
                FROM   po_line_locations_all
                WHERE  line_location_id = x_cascaded_table(n).po_line_location_id;
            -- if no data found, do nothing
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('No data found for dropship flag');
                    END IF;
            END;

            /* FPJ Services. If matching_basis is AMOUNT, then this is a service
                  * type PO. We allow only direct delivery for these POs. Set
             * routing_header_id to 3 and set auto_transact_code = DELIVER and
             * return.
            */
            IF (    x_cascaded_table(n).transaction_type = 'RECEIVE'
                AND x_cascaded_table(n).matching_basis = 'AMOUNT') THEN
                /* If auto_transact_code is not deliver, then give a warning
                 * and default it to deliver.
                */
                IF (x_cascaded_table(n).auto_transact_code <> 'DELIVER') THEN --{
                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_warning;
                    rcv_error_pkg.set_error_message('RCV_DIRECT_DEL_REQ', x_cascaded_table(n).error_message);
                    rcv_error_pkg.log_interface_warning('DOCUMENT_NUM');

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('AFter Warning insert into po_interface_errors ' || x_cascaded_table(n).error_message);
                    END IF;
                END IF; --}

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Matching Basis is Amount:Setting RCV Routing to Direct Deliver');
                END IF;

                x_cascaded_table(n).routing_header_id   := 3;
                x_cascaded_table(n).auto_transact_code  := 'DELIVER';
                RETURN;
            END IF;

            /* FPJ SERVICES END. */
            IF x_cascaded_table(n).transaction_type = 'SHIP' THEN
                /* For ASNs from a drop shipment order, set receving routing to
                 * Direct Deliver, and if the profile option "PO: Automatically
                 * Deliver Drop Ship ASNs" is set to Y, set auto_transact_code
                 * to 'DELIVER'
                 *
                 * FPJ International Drop Shipment project - pjiang
                 */
                IF x_drop_ship_flag = 'Y' THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Dropship: Setting RCV Routing to Direct Deliver');
                    END IF;

                    x_cascaded_table(n).routing_header_id  := 3;
                    fnd_profile.get('PO_AUTO_DELIVER_DROPSHIP_ASN', x_auto_deliver);

                    IF x_auto_deliver = 'Y' THEN
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Dropship: Auto deliver feature enabled, ' || 'set auto_transact_code to DELIVER for drop ship ASNs');
                        END IF;

                        x_cascaded_table(n).auto_transact_code  := 'DELIVER';
                    END IF; -- end auto deliver
                END IF; -- end drop_ship_flag = 'Y' (external dropship)
            END IF; -- end transaction_type = 'SHIP' (ASN)

            IF (    x_cascaded_table(n).auto_transact_code IS NULL
                AND x_cascaded_table(n).transaction_type IN('SHIP', 'RECEIVE')) THEN
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('X_progress ' || x_progress);
                    asn_debug.put_line('Setting auto_transact_code to transaction_type ' || x_cascaded_table(n).transaction_type);
                END IF;

                x_cascaded_table(n).auto_transact_code  := x_cascaded_table(n).transaction_type;
            END IF;
        END IF;

        x_progress  := '093';

        -- Change transaction type based on combination of
        -- transaction_type and auto_transact_code

        IF (x_cascaded_table(n).error_status IN('S', 'W')) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('X_progress ' || x_progress);
            END IF;

            IF     x_cascaded_table(n).transaction_type = 'SHIP'
               AND x_cascaded_table(n).auto_transact_code = 'DELIVER' THEN
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Changing the transaction_type to RECEIVE FROM SHIP');
                END IF;

                x_cascaded_table(n).transaction_type  := 'RECEIVE';
            END IF;
        END IF;
    END derive_auto_transact_code;

    PROCEDURE derive_vendor_rcv_line_qty(
        x_cascaded_table    IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                   IN OUT NOCOPY BINARY_INTEGER,
        temp_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        x_header_record     IN            rcv_roi_preprocessor.header_rec_type
    ) IS
        x_include_closed_po         VARCHAR2(1); -- Bug 1887728

	/* R12 Complex Work.
	 * Use line_location_id instead of shipment_num since it
	 * is not unique for a line_id in the case of complex work POs.
	 * If user has given a PO shipment number through ROI, then
	 * defaulting package would have derived the line_location_id.
	 * Changed cursor shipments and count_shipments.
	*/
        CURSOR shipments(
            header_id             NUMBER,
            v_item_id             NUMBER,
            v_po_line_num         NUMBER,
            v_po_release_id       NUMBER,
            v_line_location_id    NUMBER,
            v_ship_to_org_id      NUMBER,
            v_ship_to_location_id NUMBER,
            v_vendor_product_num  VARCHAR2
        ) IS
            SELECT   pll.line_location_id,
                     pll.unit_meas_lookup_code,
                     pll.unit_of_measure_class,
                     NVL(pll.promised_date, pll.need_by_date) promised_date,
                     pll.ship_to_organization_id,
                     pll.quantity quantity_ordered,
                     pll.quantity_shipped,
                     pll.receipt_days_exception_code,
                     pll.qty_rcv_tolerance,
                     pll.qty_rcv_exception_code,
                     pll.days_early_receipt_allowed,
                     pll.days_late_receipt_allowed,
                     NVL(pll.price_override, pl.unit_price) unit_price,
                     pll.match_option, -- 1845702
                     pl.category_id,
                     nvl(pll.description,pl.item_description) item_description,--Complex work
                     pl.po_line_id,
                     ph.currency_code,
                     ph.rate_type, -- 1845702
                     0 po_distribution_id,
                     0 code_combination_id,
                     0 req_distribution_id,
                     0 deliver_to_location_id,
                     0 deliver_to_person_id,
                     ph.rate_date rate_date, --1845702
                     ph.rate rate, --1845702
                     '' destination_type_code,
                     0 destination_organization_id,
                     '' destination_subinventory,
                     0 wip_entity_id,
                     0 wip_operation_seq_num,
                     0 wip_resource_seq_num,
                     0 wip_repetitive_schedule_id,
                     0 wip_line_id,
                     0 bom_resource_id,
                     0 project_id, /* Bug 14725305 */
                     0 task_id,    /* Bug 14725305 */
                     '' ussgl_transaction_code,
                     pll.ship_to_location_id,
                     NVL(pll.enforce_ship_to_location_code, 'NONE') enforce_ship_to_location_code,
                     TO_NUMBER(NULL) shipment_line_id, --shipment_line_id
                     pl.item_id
            FROM     po_line_locations pll,
                     po_lines pl,
                     po_headers ph
            WHERE    ph.po_header_id = header_id
            AND      pll.po_header_id = header_id
            AND      pl.line_num = NVL(v_po_line_num, pl.line_num)
            AND      NVL(pll.po_release_id, 0) = NVL(v_po_release_id, NVL(pll.po_release_id, 0))
            AND      pll.line_location_id = NVL(v_line_location_id, pll.line_location_id) --Bug: 5357628
            AND      pll.po_line_id = pl.po_line_id
            AND      NVL(pl.item_id, 0) = NVL(v_item_id, NVL(pl.item_id, 0)) -- v_item_id could be null
            AND      NVL(pll.approved_flag, 'N') = 'Y'
            AND      NVL(pll.cancel_flag, 'N') = 'N'
            AND      (   (    NVL(x_include_closed_po, 'N') = 'Y'
                          AND NVL(pll.closed_code, 'OPEN') <> 'FINALLY CLOSED')
                      OR (    NVL(x_include_closed_po, 'N') = 'N'
                          AND (NVL(pll.closed_code, 'OPEN') NOT IN('FINALLY CLOSED', 'CLOSED', 'CLOSED FOR RECEIVING'))))
            AND      pll.shipment_type IN('STANDARD', 'BLANKET', 'SCHEDULED','PREPAYMENT')
            AND      pll.ship_to_organization_id = NVL(v_ship_to_org_id, pll.ship_to_organization_id)
            AND      pll.ship_to_location_id = NVL(v_ship_to_location_id, pll.ship_to_location_id)
			AND      NVL(pl.vendor_product_num, '-999') = NVL(v_vendor_product_num, NVL(pl.vendor_product_num, '-999'))
            AND      (pll.payment_type is null or
					  pll.payment_type is not null and pll.payment_type <> 'ADVANCE')    /* Complex PO Receiving ER */
            ORDER BY NVL(pll.promised_date, Nvl(pll.need_by_date,pll.creation_date)), Nvl(pll.need_by_date,pll.creation_date), pll.creation_date; --bug10022180

        CURSOR count_shipments(
            header_id             NUMBER,
            v_item_id             NUMBER,
            v_po_line_num         NUMBER,
            v_po_release_id       NUMBER,
            v_line_location_id        NUMBER,
            v_ship_to_org_id      NUMBER,
            v_ship_to_location_id NUMBER,
            v_vendor_product_num  VARCHAR2
        ) IS
            SELECT COUNT(*)
            FROM   po_line_locations pll,
                   po_lines pl,
                   po_headers ph
            WHERE  ph.po_header_id = header_id
            AND    pll.po_header_id = header_id
            AND    pl.line_num = NVL(v_po_line_num, pl.line_num)
            AND    NVL(pll.po_release_id, 0) = NVL(v_po_release_id, NVL(pll.po_release_id, 0))
            AND    pll.line_location_id = NVL(v_line_location_id, pll.line_location_id) --Bug: 5357628
            AND    pll.po_line_id = pl.po_line_id
            AND    NVL(pl.item_id, 0) = NVL(v_item_id, NVL(pl.item_id, 0)) -- v_item_id could be null
            AND    NVL(pll.approved_flag, 'N') = 'Y'
            AND    NVL(pll.cancel_flag, 'N') = 'N'
            AND    (   (    NVL(x_include_closed_po, 'N') = 'Y'
                        AND NVL(pll.closed_code, 'OPEN') <> 'FINALLY CLOSED')
                    OR (    NVL(x_include_closed_po, 'N') = 'N'
                        AND (NVL(pll.closed_code, 'OPEN') NOT IN('FINALLY CLOSED', 'CLOSED', 'CLOSED FOR RECEIVING'))))
            AND    pll.shipment_type IN('STANDARD', 'BLANKET', 'SCHEDULED','PREPAYMENT')
            AND    pll.ship_to_organization_id = NVL(v_ship_to_org_id, pll.ship_to_organization_id)
            AND    pll.ship_to_location_id = NVL(v_ship_to_location_id, pll.ship_to_location_id)
            AND    NVL(pl.vendor_product_num, '-999') = NVL(v_vendor_product_num, NVL(pl.vendor_product_num, '-999'))
            AND    (pll.payment_type is null or
                    pll.payment_type is not null and pll.payment_type <> 'ADVANCE');    /* Complex PO Receiving ER */


        /***** Bug # 1553154
        ***** There was a performance issue since the cursor COUNT_DISTRIBUTIONS
        ***** was driving through PO_LINE_LOCATIONS_ALL. Modified the Select
        ***** statement so that it will drive through PO_HEADERS_ALL
        ***** followed by PO_LINES_ALL which is followed by PO_LINE_LOCATIONS_ALL
        ***** so that there is an improvement in performance.
        *****/
        CURSOR distributions(
            header_id             NUMBER,
            v_item_id             NUMBER,
            v_po_line_num         NUMBER,
            v_po_release_id       NUMBER,
            v_shipment_num        NUMBER,
            v_distribution_num    NUMBER,
            v_ship_to_org_id      NUMBER,
            v_ship_to_location_id NUMBER,
            v_vendor_product_num  VARCHAR2
        ) IS
            SELECT   pll.line_location_id,
                     pll.unit_meas_lookup_code,
                     pll.unit_of_measure_class,
                     NVL(pll.promised_date, pll.need_by_date) promised_date,
                     pll.ship_to_organization_id,
                     pll.quantity quantity_ordered,
                     pll.quantity_shipped,
                     pll.receipt_days_exception_code,
                     pll.qty_rcv_tolerance,
                     pll.qty_rcv_exception_code,
                     pll.days_early_receipt_allowed,
                     pll.days_late_receipt_allowed,
                     NVL(pll.price_override, pl.unit_price) unit_price,
                     pll.match_option, -- 1845702
                     pl.category_id,
                     nvl(pll.description,pl.item_description) item_description,--Complex work
                     pl.po_line_id,
                     ph.currency_code,
                     ph.rate_type, -- 1845702
                     pod.po_distribution_id,
                     pod.code_combination_id,
                     pod.req_distribution_id,
                     pod.deliver_to_location_id,
                     pod.deliver_to_person_id,
                     pod.rate_date,
                     pod.rate,
                     pod.destination_type_code,
                     pod.destination_organization_id,
                     pod.destination_subinventory,
                     pod.wip_entity_id,
                     pod.wip_operation_seq_num,
                     pod.wip_resource_seq_num,
                     pod.wip_repetitive_schedule_id,
                     pod.wip_line_id,
                     pod.bom_resource_id,
                     pod.project_id, /* Bug 14725305 */
                     pod.task_id,    /* Bug 14725305 */
                     pod.ussgl_transaction_code,
                     pll.ship_to_location_id,
                     NVL(pll.enforce_ship_to_location_code, 'NONE') enforce_ship_to_location_code,
                     TO_NUMBER(NULL) shipment_line_id, -- shipment_line_id
                     pl.item_id
            FROM     po_distributions pod,
                     po_line_locations pll,
                     po_lines pl,
                     po_headers ph
            WHERE    ph.po_header_id = header_id
            AND      pl.po_header_id = ph.po_header_id
            AND      pll.po_line_id = pl.po_line_id
            AND      pod.line_location_id = pll.line_location_id
            AND      pl.line_num = NVL(v_po_line_num, pl.line_num)
            AND      NVL(pll.po_release_id, 0) = NVL(v_po_release_id, NVL(pll.po_release_id, 0))
            AND      pll.shipment_num = NVL(v_shipment_num, pll.shipment_num)
            AND      NVL(pl.item_id, 0) = NVL(v_item_id, NVL(pl.item_id, 0)) -- v_item_id could be null
            AND      NVL(pll.approved_flag, 'N') = 'Y'
            AND      NVL(pll.cancel_flag, 'N') = 'N'
            AND      (   (    NVL(x_include_closed_po, 'N') = 'Y'
                          AND NVL(pll.closed_code, 'OPEN') <> 'FINALLY CLOSED')
                      OR (    NVL(x_include_closed_po, 'N') = 'N'
                          AND (NVL(pll.closed_code, 'OPEN') NOT IN('FINALLY CLOSED', 'CLOSED', 'CLOSED FOR RECEIVING'))))
            AND      pll.shipment_type IN('STANDARD', 'BLANKET', 'SCHEDULED','PREPAYMENT')
            AND      pod.distribution_num = NVL(v_distribution_num, pod.distribution_num)
            AND      pll.ship_to_organization_id = NVL(v_ship_to_org_id, pll.ship_to_organization_id)
            AND      pll.ship_to_location_id = NVL(v_ship_to_location_id, pll.ship_to_location_id)
            AND      NVL(pl.vendor_product_num, '-999') = NVL(v_vendor_product_num, NVL(pl.vendor_product_num, '-999'))
            AND      (pll.payment_type is null or
                      pll.payment_type is not null and pll.payment_type <> 'ADVANCE')    /* Complex PO Receiving ER */
            ORDER BY NVL(pll.promised_date, Nvl(pll.need_by_date,pll.creation_date)), Nvl(pll.need_by_date,pll.creation_date), pll.creation_date; --bug10022180

        /***** Bug # 1553154
        ***** There was a performance issue since the cursor DISTRIBUTIONS
        ***** was driving through PO_HEADERS_ALL followed by PO_DISTRIBUTIONS_ALL
        ***** Modified the Select statement so that it will drive through
        ***** PO_HEADERS_ALL followed by PO_LINES_ALL which is followed by
        ***** PO_LINE_LOCATIONS_ALL which in turn is followed by
        ***** PO_DISTRIBUTIONS_ALL so that there is an improvement in
        ***** Performance
        *****/
        CURSOR count_distributions(
            header_id             NUMBER,
            v_item_id             NUMBER,
            v_po_line_num         NUMBER,
            v_po_release_id       NUMBER,
            v_shipment_num        NUMBER,
            v_distribution_num    NUMBER,
            v_ship_to_org_id      NUMBER,
            v_ship_to_location_id NUMBER,
            v_vendor_product_num  VARCHAR2
        ) IS
            SELECT COUNT(*)
            FROM   po_distributions pod,
                   po_line_locations pll,
                   po_lines pl,
                   po_headers ph
            WHERE  ph.po_header_id = header_id
            AND    pl.po_header_id = ph.po_header_id
            AND    pll.po_line_id = pl.po_line_id
            AND    pod.line_location_id = pll.line_location_id
            AND    pl.line_num = NVL(v_po_line_num, pl.line_num)
            AND    NVL(pll.po_release_id, 0) = NVL(v_po_release_id, NVL(pll.po_release_id, 0))
            AND    pll.shipment_num = NVL(v_shipment_num, pll.shipment_num)
            AND    pod.distribution_num = NVL(v_distribution_num, pod.distribution_num)
            AND    NVL(pl.item_id, 0) = NVL(v_item_id, NVL(pl.item_id, 0)) -- v_item_id could be null
            AND    NVL(pll.approved_flag, 'N') = 'Y'
            AND    NVL(pll.cancel_flag, 'N') = 'N'
            AND    (   (    NVL(x_include_closed_po, 'N') = 'Y'
                        AND NVL(pll.closed_code, 'OPEN') <> 'FINALLY CLOSED')
                    OR (    NVL(x_include_closed_po, 'N') = 'N'
                        AND (NVL(pll.closed_code, 'OPEN') NOT IN('FINALLY CLOSED', 'CLOSED', 'CLOSED FOR RECEIVING'))))
            AND    pll.shipment_type IN('STANDARD', 'BLANKET', 'SCHEDULED','PREPAYMENT')
            AND    pll.ship_to_organization_id = NVL(v_ship_to_org_id, pll.ship_to_organization_id)
            AND    pll.ship_to_location_id = NVL(v_ship_to_location_id, pll.ship_to_location_id)
            AND    NVL(pl.vendor_product_num, '-999') = NVL(v_vendor_product_num, NVL(pl.vendor_product_num, '-999'))
            AND      (pll.payment_type is null or
                      pll.payment_type is not null and pll.payment_type <> 'ADVANCE');    /* Complex PO Receiving ER */

        /*
        ** Debug: had to change this to the distribution record
        ** Might be a compatibility issue between the two record definitions
        */
        x_shipmentdistributionrec   distributions%ROWTYPE;
        x_record_count              NUMBER;
        x_remaining_quantity        NUMBER                                                  := 0;
        x_remaining_qty_po_uom      NUMBER                                                  := 0;
        x_bkp_qty                   NUMBER                                                  := 0;
        x_progress                  VARCHAR2(3);
        x_to_organization_code      VARCHAR2(5);
        x_converted_trx_qty         NUMBER                                                  := 0;
        transaction_ok              BOOLEAN                                                 := FALSE;
        x_expected_date             rcv_transactions_interface.expected_receipt_date%TYPE;
        high_range_date             DATE;
        low_range_date              DATE;
        rows_fetched                NUMBER                                                  := 0;
        x_tolerable_qty             NUMBER                                                  := 0;
        x_first_trans               BOOLEAN                                                 := TRUE;
        x_sysdate                   DATE                                                    := SYSDATE;
        current_n                   BINARY_INTEGER                                          := 0;
        insert_into_table           BOOLEAN                                                 := FALSE;
        x_qty_rcv_exception_code    po_line_locations.qty_rcv_exception_code%TYPE;
        tax_amount_factor           NUMBER;
        lastrecord                  BOOLEAN                                                 := FALSE;
        po_asn_uom_qty              NUMBER;
        po_primary_uom_qty          NUMBER;
        already_allocated_qty       NUMBER                                                  := 0;
        x_item_id                   NUMBER;
        x_approved_flag             VARCHAR(1);
        x_cancel_flag               VARCHAR(1);
        x_closed_code               VARCHAR(25);
        x_shipment_type             VARCHAR(25);
        x_ship_to_organization_id   NUMBER;
        x_ship_to_location_id       NUMBER;
        /* temp_ship_to_location_id       number;
        temp_mirror_ship_to_loc_id number ;
        temp_enf_ship_to_loc_code varchar(25) ; */
        /* The above 3 variables added for bug 1898283 */
        x_vendor_product_num        VARCHAR(25);
        x_temp_count                NUMBER;
        x_full_name                 VARCHAR2(240)                                           := NULL; -- Bug 2392074
        /* 1887728 -Added the following variables */
        profile_user_id             NUMBER                                                  := -1;
        profile_appl_id             NUMBER                                                  := -1;
        profile_resp_id             NUMBER                                                  := -1;
        defined                     BOOLEAN;
        /* 1845702 */
        x_sob_id                    NUMBER                                                  := NULL;
        x_rate                      NUMBER;
        x_allow_rate_override       VARCHAR2(1);
        /* Bug# 1548597 */
        x_secondary_available_qty   NUMBER                                                  := 0;
        l_receipt_source_code       rcv_shipment_headers.receipt_source_code%TYPE;
        l_shipment_line_status_code rcv_shipment_lines.shipment_line_status_code%TYPE;
        l_asn_line_flag             rcv_shipment_lines.asn_line_flag%TYPE;
        l_asn_exists_code           rcv_parameters.receipt_asn_exists_code%TYPE;
        l_does_asn_exist            VARCHAR2(1)                                             := 'N';
        l_asn_count                 NUMBER                                                  := 0;
        l_dist_count                   number;                    /* Bug#3746516 */
        l_rate_date                    po_headers.rate_date%type; /* Bug#3746516 */
        x_is_asn                    BOOLEAN;
        l_return_status VARCHAR2(1) :='S';
        l_complex_flag   varchar2(1) := 'N';
        l_blind_receiving_flag      VARCHAR2(1) := 'N'; -- Bug 6796920
	x_po_header_id number; /* Bug 9169143: LSP Changes */
	l_client_code VARCHAR(40);  /* Bug 9169143: LSP Changes */

        -- <Bug 9342280 : Added for CLM project>
        l_is_clm_po           VARCHAR2(5) := 'N';
        l_partial_funded_flag VARCHAR2(5) := 'N';
        -- <CLM END>

        -- <Bug 17243916 For ASN reccive through ROI in different uom >
        l_uom_hold   mtl_units_of_measure_tl.unit_of_measure%type;


    BEGIN
--check line quanity > 0
        x_progress       := '097';
        profile_user_id  := fnd_profile.VALUE('USER_ID');
        profile_resp_id  := fnd_profile.VALUE('RESPONSIBILITY_ID');
        profile_appl_id  := fnd_profile.VALUE('APPLICATION_ID');
        fnd_profile.get_specific('RCV_CLOSED_PO_DEFAULT_OPTION',
                                 profile_user_id,
                                 profile_resp_id,
                                 profile_appl_id,
                                 x_include_closed_po,
                                 defined
                                );

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Include closed PO profile value ' || x_include_closed_po);
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('X_progress ' || x_progress);
        END IF;

        IF     x_cascaded_table(n).error_status IN('S', 'W')
           AND x_cascaded_table(n).quantity <= 0 THEN --{
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Quantity is <= zero. Cascade will fail');
            END IF;

            x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
            rcv_error_pkg.set_error_message('RCV_ITEM_NO_SHIP_QTY', x_cascaded_table(n).error_message);
            rcv_error_pkg.set_token('ITEM', x_cascaded_table(n).item_num);
            rcv_error_pkg.log_interface_error('QUANTITY', FALSE);
        END IF; --} end qty > 0 check

                -- the following steps will create a set of rows linking the line_record with
                   -- its corresponding po_line_location rows until the quantity value from
                   -- the asn is consumed.  (Cascade)

        /* 2119137 : If the user populates rcv_transactions_interface
           with po_line_id, then ROI errors out with
           RCV_ASN_NO_PO_LINE_LOCATION_ID when the docment_line_num
           is not provided for one time items. Modified the "if" criteria in
           such a way that the ROI validation does'nt error out when
           po_line_id is populated for one time items. */
        x_progress       := '098';

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('X_progress ' || x_progress);
        END IF;

        IF (   (    x_cascaded_table(n).po_header_id IS NOT NULL
                AND (   x_cascaded_table(n).item_id IS NOT NULL
                     OR x_cascaded_table(n).vendor_item_num IS NOT NULL
                     OR x_cascaded_table(n).po_line_id IS NOT NULL
                     OR x_cascaded_table(n).document_line_num IS NOT NULL))
            OR     (x_cascaded_table(n).shipment_header_id IS NOT NULL AND x_cascaded_table(n).shipment_line_id IS NOT NULL)
               AND x_cascaded_table(n).error_status IN('S', 'W')
           ) THEN --{

                  -- Copy record from main table to temp table
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Copy record from main table to temp table');
            END IF;

            current_n                       := 1;
            temp_cascaded_table(current_n)  := x_cascaded_table(n);

            IF (x_cascaded_table(n).shipment_header_id IS NOT NULL AND x_cascaded_table(n).shipment_line_id IS NOT NULL) THEN
                x_is_asn := TRUE;
            ELSE
                x_is_asn := FALSE;
            END IF;

            -- Get all rows which meet this condition
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Get all rows which meet this condition');
                asn_debug.put_line('Transaction Type = ' || x_cascaded_table(n).transaction_type);
                asn_debug.put_line('Auto Transact Code = ' || x_cascaded_table(n).auto_transact_code);

                IF (x_is_asn = TRUE) THEN
                    asn_debug.put_line('This is a Receive against an ASN');
                ELSE
                    asn_debug.put_line('This is a Receive against a PO');
                END IF;
            END IF;

            -- bug 1362237  Deriving the document_line_num
            -- and document_shipment_line_num when line_id and/or line_location_id
            -- are provided.

            IF     temp_cascaded_table(current_n).document_line_num IS NULL
               AND temp_cascaded_table(current_n).po_line_id IS NOT NULL THEN --{
                BEGIN
                    SELECT line_num
                    INTO   temp_cascaded_table(current_n).document_line_num
                    FROM   po_lines
                    WHERE  po_line_id = temp_cascaded_table(current_n).po_line_id;
                EXCEPTION
                    WHEN OTHERS THEN
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('wrong po_line_id entered in rcv_transactions_interface');
                        END IF;
                END;
            END IF; --}

            IF     temp_cascaded_table(current_n).document_shipment_line_num IS NULL
               AND temp_cascaded_table(current_n).po_line_location_id IS NOT NULL THEN --{
                BEGIN
                    SELECT shipment_num
                    INTO   temp_cascaded_table(current_n).document_shipment_line_num
                    FROM   po_line_locations
                    WHERE  line_location_id = temp_cascaded_table(current_n).po_line_location_id;
                EXCEPTION
                    WHEN OTHERS THEN
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('wrong po_line_location_id entered in rcv_transactions_interface');
                        END IF;
                END;
            END IF; --}

            IF     temp_cascaded_table(current_n).document_distribution_num IS NULL
               AND temp_cascaded_table(current_n).po_distribution_id IS NOT NULL THEN --{
                BEGIN
                    SELECT distribution_num
                    INTO   temp_cascaded_table(current_n).document_distribution_num
                    FROM   po_distributions
                    WHERE  po_distribution_id = temp_cascaded_table(current_n).po_distribution_id;
                EXCEPTION
                    WHEN OTHERS THEN
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('wrong po_distribution_id entered in rcv_transactions_interface');
                        END IF;
                END;
            END IF; --}

            /* Bug 1898283 : The Receiving control of "Enforce Ship to Location was
               not working for ROI. So corrected the code so that it now behaves the same way as
               the Form Behaves. i.e.,
               Proceed without any error messages if the enforcement is set to "None"
               Enter error message in po_interface_errors if the enforcement is "Warning"
               Enter error message in po_interface_errors if the enforcement is "Reject"
               and error out.
               This validation is done by comparing the enforce_ship_location_code from
               po_line_locations and assigning the proper ship_location_id into a
               temporary variable temp_mirror_ship_to_loc_id  and passing the temp
               variable as a parameter to open the cursor "Distributions".
            */
            IF (    x_cascaded_table(n).transaction_type <> 'DELIVER'
                AND NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') <> 'DELIVER') THEN --{

                                                                                              -- if txn != deliver
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Open Shipment records');
                    asn_debug.put_line('Shipment Header Id if this is an ASN receive ' || TO_CHAR(temp_cascaded_table(current_n).shipment_header_id));
                    asn_debug.put_line('PO Header id ' || TO_CHAR(temp_cascaded_table(current_n).po_header_id));
                    asn_debug.put_line('Item Id ' || TO_CHAR(temp_cascaded_table(current_n).item_id));
                    asn_debug.put_line('PO Line Num ' || TO_CHAR(temp_cascaded_table(current_n).document_line_num));
                    asn_debug.put_line('PO Release Id ' || TO_CHAR(temp_cascaded_table(current_n).po_release_id));
                    asn_debug.put_line('Shipment Line num ' || TO_CHAR(temp_cascaded_table(current_n).document_shipment_line_num));
                    asn_debug.put_line('Document distribution num ' || TO_CHAR(temp_cascaded_table(current_n).document_distribution_num));
                    asn_debug.put_line('Ship To Organization ID ' || TO_CHAR(temp_cascaded_table(current_n).to_organization_id));
                    asn_debug.put_line('Ship To Location Id ' || TO_CHAR(NVL(temp_cascaded_table(current_n).ship_to_location_id, x_header_record.header_record.location_id)));
                    asn_debug.put_line('Vendor Item Num ' || temp_cascaded_table(current_n).vendor_item_num);
                    asn_debug.put_line('Proceed to open cursor');
                END IF;

                /* Bug 2208664 : Nullified the ship_to_location_id when calling
                the cursors shipments, count_shipments, distributions and
                count_distributions. The proper value of ship_to_location_id will
                be set after values are fetched and validated for the
                location control code set at PO.
                */
                /* IF (x_is_asn = TRUE) THEN --{ */
                /* Forward port for Bug 4523892 , the use of x_is_asn is commented to make it consistent
                   with the previous code line
                */
                IF (rcv_roi_header.g_txn_against_asn = 'Y') THEN --{ Bug#4523892
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Open ASN Shipment records');
                        asn_debug.put_line('shipment_header_id ' || temp_cascaded_table(current_n).shipment_header_id);
                        asn_debug.put_line('shipment_line_id ' || temp_cascaded_table(current_n).shipment_line_id);
                        asn_debug.put_line('po_header_id ' || temp_cascaded_table(current_n).po_header_id);
                        asn_debug.put_line('item_id ' || temp_cascaded_table(current_n).item_id);
                        asn_debug.put_line('document_num ' || temp_cascaded_table(current_n).document_line_num);
                        asn_debug.put_line('document_shipment_line_num ' || temp_cascaded_table(current_n).document_shipment_line_num);
                        asn_debug.put_line('po_release_id ' || temp_cascaded_table(current_n).po_release_id);
                        asn_debug.put_line('to_organization_id ' || temp_cascaded_table(current_n).to_organization_id);
                        asn_debug.put_line('vendor_item_num ' || temp_cascaded_table(current_n).vendor_item_num);
                        asn_debug.put_line('x_include_closed_po ' || x_include_closed_po);
                    END IF;

                    OPEN asn_shipments(temp_cascaded_table(current_n).shipment_header_id,
                                       temp_cascaded_table(current_n).shipment_line_id,
                                       temp_cascaded_table(current_n).po_header_id,
                                       temp_cascaded_table(current_n).item_id,
                                       temp_cascaded_table(current_n).document_line_num,
                                       temp_cascaded_table(current_n).document_shipment_line_num,
                                       temp_cascaded_table(current_n).po_release_id,
                                       temp_cascaded_table(current_n).to_organization_id,
                                       NULL, -- ship_to_location_id
                                       temp_cascaded_table(current_n).vendor_item_num,
                                       x_include_closed_po
                                      );

                    -- count_shipments just gets the count of rows found in shipments
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('After Open ASN Shipment records');
                    END IF;

                    OPEN count_asn_shipments(temp_cascaded_table(current_n).shipment_header_id,
                                             temp_cascaded_table(current_n).shipment_line_id,
                                             temp_cascaded_table(current_n).po_header_id,
                                             temp_cascaded_table(current_n).item_id,
                                             temp_cascaded_table(current_n).document_line_num,
                                             temp_cascaded_table(current_n).document_shipment_line_num,
                                             temp_cascaded_table(current_n).po_release_id,
                                             temp_cascaded_table(current_n).to_organization_id,
                                             NULL, -- ship_to_location_id
                                             temp_cascaded_table(current_n).vendor_item_num,
                                             x_include_closed_po
                                            );

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('After Open Count ASN Shipment records');
                    END IF;
                ELSE --}{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Open PO Shipment records');
                        asn_debug.put_line('po_header_id ' || temp_cascaded_table(current_n).po_header_id);
                        asn_debug.put_line('item_id ' || temp_cascaded_table(current_n).item_id);
                        asn_debug.put_line('document_line_num ' || temp_cascaded_table(current_n).document_line_num);
                        asn_debug.put_line('line_location_id ' || temp_cascaded_table(current_n).po_line_location_id);
                        asn_debug.put_line('po_release_id ' || temp_cascaded_table(current_n).po_release_id);
                        asn_debug.put_line('to_organization_id ' || temp_cascaded_table(current_n).to_organization_id);
                        asn_debug.put_line('vendor_item_num ' || temp_cascaded_table(current_n).vendor_item_num);
                    END IF;

                    OPEN shipments(temp_cascaded_table(current_n).po_header_id,
                                   temp_cascaded_table(current_n).item_id,
                                   temp_cascaded_table(current_n).document_line_num,
                                   temp_cascaded_table(current_n).po_release_id,
                                   temp_cascaded_table(current_n).po_line_location_id,
                                   temp_cascaded_table(current_n).to_organization_id,
                                   NULL, -- ship_to_location_id
                                   temp_cascaded_table(current_n).vendor_item_num
                                  );
                    -- count_shipments just gets the count of rows found in shipments

                    OPEN count_shipments(temp_cascaded_table(current_n).po_header_id,
                                         temp_cascaded_table(current_n).item_id,
                                         temp_cascaded_table(current_n).document_line_num,
                                         temp_cascaded_table(current_n).po_release_id,
                                         temp_cascaded_table(current_n).po_line_location_id,
                                         temp_cascaded_table(current_n).to_organization_id,
                                         NULL, -- ship_to_location_id
                                         temp_cascaded_table(current_n).vendor_item_num
                                        );
                END IF; --}

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('After opening relavant records for Receive');
                END IF;
            ELSIF(   x_cascaded_table(n).transaction_type = 'DELIVER'
                  OR NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') = 'DELIVER') THEN --}{
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Open Distribution records');
                    asn_debug.put_line('Ship Header id ' || TO_CHAR(temp_cascaded_table(current_n).shipment_header_id));
                    asn_debug.put_line('PO Header id ' || TO_CHAR(temp_cascaded_table(current_n).po_header_id));
                    asn_debug.put_line('Item Id ' || TO_CHAR(temp_cascaded_table(current_n).item_id));
                    asn_debug.put_line('PO Line Num ' || TO_CHAR(temp_cascaded_table(current_n).document_line_num));
                    asn_debug.put_line('PO Release Id ' || TO_CHAR(temp_cascaded_table(current_n).po_release_id));
                    asn_debug.put_line('Shipment Line num ' || TO_CHAR(temp_cascaded_table(current_n).document_shipment_line_num));
                    asn_debug.put_line('Distribution num ' || TO_CHAR(temp_cascaded_table(current_n).document_distribution_num));
                    asn_debug.put_line('Ship To Organization ID ' || TO_CHAR(temp_cascaded_table(current_n).to_organization_id));
                    asn_debug.put_line('Ship To Location Id ' || TO_CHAR(NVL(temp_cascaded_table(current_n).ship_to_location_id, x_header_record.header_record.location_id)));
                    asn_debug.put_line('Vendor Item Num ' || temp_cascaded_table(current_n).vendor_item_num);
                    asn_debug.put_line('Proceed to open cursor');
                END IF;

                /* IF (x_is_asn = TRUE) THEN --{ This call is replaced by forward port of 4523892 */
                IF (rcv_roi_header.g_txn_against_asn = 'Y') THEN --{ Bug#4523892
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Open ASN Distribution records');
                        asn_debug.put_line('shipment_header_id ' || temp_cascaded_table(current_n).shipment_header_id);
                        asn_debug.put_line('shipment_line_id ' || temp_cascaded_table(current_n).shipment_line_id);
                        asn_debug.put_line('po_header_id ' || temp_cascaded_table(current_n).po_header_id);
                        asn_debug.put_line('item_id ' || temp_cascaded_table(current_n).item_id);
                        asn_debug.put_line('document_num ' || temp_cascaded_table(current_n).document_line_num);
                        asn_debug.put_line('document_shipment_line_num ' || temp_cascaded_table(current_n).document_shipment_line_num);
                        asn_debug.put_line('po_release_id ' || temp_cascaded_table(current_n).po_release_id);
                        asn_debug.put_line('to_organization_id ' || temp_cascaded_table(current_n).to_organization_id);
                        asn_debug.put_line('vendor_item_num ' || temp_cascaded_table(current_n).vendor_item_num);
                        asn_debug.put_line('x_include_closed_po ' || x_include_closed_po);
                    END IF;

                    OPEN asn_distributions(temp_cascaded_table(current_n).shipment_header_id,
                                           temp_cascaded_table(current_n).shipment_line_id,
                                           temp_cascaded_table(current_n).po_header_id,
                                           temp_cascaded_table(current_n).item_id,
                                           temp_cascaded_table(current_n).document_line_num,
                                           temp_cascaded_table(current_n).document_shipment_line_num,
                                           temp_cascaded_table(current_n).document_distribution_num,
                                           temp_cascaded_table(current_n).po_release_id,
                                           temp_cascaded_table(current_n).to_organization_id,
                                           NULL, -- ship_to_location_id
                                           temp_cascaded_table(current_n).vendor_item_num,
                                           x_include_closed_po
                                          );

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('After Open  ASN distribution records');
                    END IF;

                    OPEN count_asn_distributions(temp_cascaded_table(current_n).shipment_header_id,
                                                 temp_cascaded_table(current_n).shipment_line_id,
                                                 temp_cascaded_table(current_n).po_header_id,
                                                 temp_cascaded_table(current_n).item_id,
                                                 temp_cascaded_table(current_n).document_line_num,
                                                 temp_cascaded_table(current_n).document_shipment_line_num,
                                                 temp_cascaded_table(current_n).document_distribution_num,
                                                 temp_cascaded_table(current_n).po_release_id,
                                                 temp_cascaded_table(current_n).to_organization_id,
                                                 NULL, -- ship_to_location_id
                                                 temp_cascaded_table(current_n).vendor_item_num,
                                                 x_include_closed_po
                                                );

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('After Open  count ASN distribution records');
                    END IF;
                ELSE --}{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Open PO Distribution records');
                        asn_debug.put_line('po_header_id ' || temp_cascaded_table(current_n).po_header_id);
                        asn_debug.put_line('item_id ' || temp_cascaded_table(current_n).item_id);
                        asn_debug.put_line('document_num ' || temp_cascaded_table(current_n).document_line_num);
                        asn_debug.put_line('document_shipment_line_num ' || temp_cascaded_table(current_n).document_shipment_line_num);
                        asn_debug.put_line('po_release_id ' || temp_cascaded_table(current_n).po_release_id);
                        asn_debug.put_line('to_organization_id ' || temp_cascaded_table(current_n).to_organization_id);
                        asn_debug.put_line('vendor_item_num ' || temp_cascaded_table(current_n).vendor_item_num);
                    END IF;

                    OPEN distributions(temp_cascaded_table(current_n).po_header_id,
                                       temp_cascaded_table(current_n).item_id,
                                       temp_cascaded_table(current_n).document_line_num,
                                       temp_cascaded_table(current_n).po_release_id,
                                       temp_cascaded_table(current_n).document_shipment_line_num,
                                       temp_cascaded_table(current_n).document_distribution_num,
                                       temp_cascaded_table(current_n).to_organization_id,
                                       NULL, -- ship_to_location_id
                                       temp_cascaded_table(current_n).vendor_item_num
                                      );
                    -- count_distributions just gets the count of rows found in distributions

                    OPEN count_distributions(temp_cascaded_table(current_n).po_header_id,
                                             temp_cascaded_table(current_n).item_id,
                                             temp_cascaded_table(current_n).document_line_num,
                                             temp_cascaded_table(current_n).po_release_id,
                                             temp_cascaded_table(current_n).document_shipment_line_num,
                                             temp_cascaded_table(current_n).document_distribution_num,
                                             temp_cascaded_table(current_n).to_organization_id,
                                             NULL, -- ship_to_location_id
                                             temp_cascaded_table(current_n).vendor_item_num
                                            );
                END IF; --}

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('After opening relavant records for Direct delivery');
                END IF;
            END IF; -- for txn = deliver --}


                    -- Assign shipped quantity to remaining quantity

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Assign shipped quantity to remaining quantity');
                asn_debug.put_line('Pointer in temp_cascade ' || TO_CHAR(current_n));
            END IF;

            x_remaining_quantity            := temp_cascaded_table(current_n).quantity;
            x_bkp_qty                       := x_remaining_quantity; -- used for decrementing cum qty for first record
            x_remaining_qty_po_uom          := 0;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Have assigned the quantity');
            END IF;

            -- Calculate tax_amount_factor for calculating tax_amount for
            -- each cascaded line

            IF NVL(temp_cascaded_table(current_n).tax_amount, 0) <> 0 THEN
                tax_amount_factor  := temp_cascaded_table(current_n).tax_amount / x_remaining_quantity;
            ELSE
                tax_amount_factor  := 0;
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Tax Factor ' || TO_CHAR(tax_amount_factor));
                asn_debug.put_line('Shipped Quantity : ' || TO_CHAR(x_remaining_quantity));
            END IF;

            x_first_trans                   := TRUE;
            transaction_ok                  := FALSE;

            /*
            ** Get the count of the number of records depending on the
            ** the transaction type
            */
            IF (    x_cascaded_table(n).transaction_type <> 'DELIVER'
                AND NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') <> 'DELIVER') THEN --{
                /* IF (x_is_asn = TRUE) THEN --{ This is replaced by forward port for bug 4523892 */
                IF (rcv_roi_header.g_txn_against_asn = 'Y') THEN --{ Bug#4523892
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Count of asn shipments');
                    END IF;

                    FETCH count_asn_shipments INTO x_record_count;
                ELSE --}{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Count of PO shipments');
                    END IF;

                    FETCH count_shipments INTO x_record_count;
                END IF; --}
            ELSE --}{
                /* IF (x_is_asn = TRUE) THEN --{ This is replaced by forward port for Bug 4523892 */
                IF (rcv_roi_header.g_txn_against_asn = 'Y') THEN --{ Bug#4523892
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Count of asn distributions');
                    END IF;

                    FETCH count_asn_distributions INTO x_record_count;
                ELSE --}{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Count of PO distributions');
                    END IF;

                    FETCH count_distributions INTO x_record_count;
                END IF; --}
            END IF; --}

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Before starting Cascade');
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Record Count = ' || x_record_count);
            END IF;

            LOOP --{
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Backup Qty ' || TO_CHAR(x_bkp_qty));
                    asn_debug.put_line('Remaining Quantity ASN UOM ' || TO_CHAR(x_remaining_quantity));
                END IF;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('open shipments and fetch');
                END IF;

                /*
                ** Fetch the appropriate record
                */
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('DEBUG: transaction_type = ' || x_cascaded_table(n).transaction_type);
                END IF;

                IF (    x_cascaded_table(n).transaction_type <> 'DELIVER'
                    AND NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') <> 'DELIVER') THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Fetching Shipments Cursor');
                    END IF;

                    IF (shipments%ISOPEN) THEN
                        FETCH shipments INTO x_shipmentdistributionrec;

                        IF (shipments%NOTFOUND) THEN
                            lastrecord  := TRUE;
                        END IF;

                        rows_fetched  := shipments%ROWCOUNT;
                    ELSIF(asn_shipments%ISOPEN) THEN
                        FETCH asn_shipments INTO x_shipmentdistributionrec;

                        IF (asn_shipments%NOTFOUND) THEN
                            lastrecord  := TRUE;
                        END IF;

                        rows_fetched  := asn_shipments%ROWCOUNT;
                    END IF;

                    /*
                    ** Check if this is the last record
                    */
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Shipment Rows fetched ' || TO_CHAR(rows_fetched));
                    END IF;
                -- }
                ELSE -- txn = deliver and other cases --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Fetching Distributions Cursor');
                    END IF;

                    IF (distributions%ISOPEN) THEN
                        FETCH distributions INTO x_shipmentdistributionrec;

                        IF (distributions%NOTFOUND) THEN
                            lastrecord  := TRUE;
                        END IF;

                        rows_fetched  := distributions%ROWCOUNT;
                    ELSIF(asn_distributions%ISOPEN) THEN
                        FETCH asn_distributions INTO x_shipmentdistributionrec;

                        IF (asn_distributions%NOTFOUND) THEN
                            lastrecord  := TRUE;
                        END IF;

                        rows_fetched  := asn_distributions%ROWCOUNT;
                    END IF;

                    /*
                    ** Check if this is the last record
                    */
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Distribution Rows fetched ' || TO_CHAR(rows_fetched));
                    END IF;
                END IF; -- matches if condition of txn ! deliver --}

                IF (   lastrecord
                    OR x_remaining_quantity <= 0) THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Hit exit condition');
                    END IF;

                    IF NOT x_first_trans THEN
                        -- x_first_trans has been reset which means some cascade has
                        -- happened. Otherwise current_n = 1
                        current_n  := current_n - 1;
                    END IF;

                    -- do the tolerance act here
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Temp table pointer ' || TO_CHAR(current_n));
                        asn_debug.put_line('Check which condition has occured');
                    END IF;

                    -- lastrecord...we have run out of rows and we still have quantity to allocate
                    IF (round(x_remaining_quantity,6) > 0) THEN --{ Bug 13703497
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('There is quantity remaining');
                            asn_debug.put_line('Need to check qty tolerances');
                        END IF;

                        IF     rows_fetched > 0
                           AND NOT x_first_trans THEN                                              --{
                                                      -- we had got atleast some rows from our shipments cursor
                                                      -- we have atleast one row cascaded (not null line_location_id)
                            SELECT NVL(po_line_locations.qty_rcv_exception_code, 'NONE')
                            INTO   x_qty_rcv_exception_code
                            FROM   po_line_locations
                            WHERE  line_location_id = temp_cascaded_table(current_n).po_line_location_id;

                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('Qty tolerance exception code ' || NVL(x_qty_rcv_exception_code, 'NONE1'));
                                asn_debug.put_line('quantity  ' || temp_cascaded_table(current_n).quantity);
                                asn_debug.put_line('x_converted_trx_qty  ' || x_converted_trx_qty);
                            END IF;

                      -- Bug 6796920 Start
                      BEGIN
                        select blind_receiving_flag
                        into l_blind_receiving_flag
                        from rcv_parameters
                        where organization_id = temp_cascaded_table(current_n).to_organization_id;
    		      EXCEPTION
    		        when others THEN
     		        NULL;
                      END;

                      IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Current Organization id = '|| temp_cascaded_table(current_n).to_organization_id);
                        asn_debug.put_line('Blind Receiving Flag = '|| l_blind_receiving_flag);
                      END IF;
                      -- Bug 6796920 End

                         -- The following if condition is commented out as part of bug 6796920
                         -- IF x_qty_rcv_exception_code IN('NONE', 'WARNING') THEN --{
                                               /* Bug# 1807842 */
                                /* Bug 3506964.
                                 * This is the forward fix for 3222672. Before the
                                 * foll condition used to have <. We had changed
                                 * it to <= as part of our ROI rewrite. But since
                                 * quantity can never be  greater than
                                 * x_converted_trx_qty, this is equivalent to removing
                                 * the whole condition. So commenting this out.
                                               IF (
                                                   temp_cascaded_table(current_n).quantity <=
                                                                                  x_converted_trx_qty
                                                  ) THEN --{
                                */
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('Tolerable quantity ' || TO_CHAR(x_converted_trx_qty));
                                    asn_debug.put_line('Current quantity ' || TO_CHAR(temp_cascaded_table(current_n).quantity));
                                    asn_debug.put_line('Current shipped quantity ' || TO_CHAR(temp_cascaded_table(current_n).quantity_shipped));
                                    asn_debug.put_line('Assign remaining ASN UOM qty ' || TO_CHAR(x_remaining_quantity) || ' to last record');
                                    asn_debug.put_line('Assign remaining PO UOM qty ' || TO_CHAR(x_remaining_qty_po_uom) || ' to last record');
                                END IF;
                                /* Bug 4907269.
                                   x_remaining_quantity is the unused transaction qty, it has to be rounded to 6 decimals
                                   so that quantity and primary quantity will computed correctly rounded to 6 decimals.
                                */
                                /* Bug 17021928. Don't round the remaining quantity when the transaction uom is the same as po uom.*/
                                if ( x_shipmentdistributionrec.unit_meas_lookup_code <> temp_cascaded_table(current_n).unit_of_measure) then
                                    x_remaining_quantity   :=  round(x_remaining_quantity,6);
                                end if;

                                temp_cascaded_table(current_n).quantity             := temp_cascaded_table(current_n).quantity + x_remaining_quantity;
                                temp_cascaded_table(current_n).quantity_shipped     := temp_cascaded_table(current_n).quantity_shipped + x_remaining_quantity;
                                temp_cascaded_table(current_n).source_doc_quantity  := temp_cascaded_table(current_n).source_doc_quantity + x_remaining_qty_po_uom;
                                temp_cascaded_table(current_n).primary_quantity     :=   temp_cascaded_table(current_n).primary_quantity
                                                                                       + rcv_transactions_interface_sv.convert_into_correct_qty(x_remaining_quantity,
                                                                                                                                                temp_cascaded_table(1).unit_of_measure,
                                                                                                                                                temp_cascaded_table(1).item_id,
                                                                                                                                                temp_cascaded_table(1).primary_unit_of_measure
                                                                                                                                               );

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('primary_qty for the last row ' || temp_cascaded_table(current_n).primary_quantity);
                                    asn_debug.put_line('quantity for the last row ' || temp_cascaded_table(current_n).quantity);
                                END IF;

                                /* Bug 3506964.
                                               END IF;  Bug# 1807842  --}
                                */

                                -- Vendor Cum Qty

                                IF NVL(temp_cascaded_table(current_n).vendor_cum_shipped_qty, 0) <> 0 THEN
                                    temp_cascaded_table(current_n).vendor_cum_shipped_qty  := temp_cascaded_table(current_n).vendor_cum_shipped_qty + temp_cascaded_table(current_n).primary_quantity;
                                END IF;

                                temp_cascaded_table(current_n).tax_amount           := ROUND(temp_cascaded_table(current_n).quantity * tax_amount_factor, 6);

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('Current quantity ' || TO_CHAR(temp_cascaded_table(current_n).quantity));
                                    asn_debug.put_line('Current shipped quantity ' || TO_CHAR(temp_cascaded_table(current_n).quantity_shipped));
                                    asn_debug.put_line('Current source document quantity ' || TO_CHAR(temp_cascaded_table(current_n).source_doc_quantity));
                                    asn_debug.put_line('Current primary quantity ' || TO_CHAR(temp_cascaded_table(current_n).primary_quantity));
                                    asn_debug.put_line('Current Tax Amount ' || TO_CHAR(temp_cascaded_table(current_n).tax_amount));
                                END IF;

                                -- <Bug 9342280 : Added for CLM project>
                                get_clm_info(     'QUANTITY',
                                                  x_cascaded_table,
                                                  n,
                                                  l_is_clm_po,
                                                  l_partial_funded_flag);

                                IF l_is_clm_po = 'Y' AND l_partial_funded_flag = 'Y' THEN

                                   x_qty_rcv_exception_code := 'REJECT';

                                END IF;
                                --<END CLM>

                             -- Bug 6796920 - Modified the following if condition to check for blind receiving flag
                                IF (x_qty_rcv_exception_code = 'WARNING' AND NVL(l_blind_receiving_flag,'N') <> 'Y') THEN --{
                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('IN WARNING');
                                    END IF;

                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('Group Id ' || TO_CHAR(temp_cascaded_table(current_n).GROUP_ID));
                                        asn_debug.put_line('Header Interface Id ' || TO_CHAR(temp_cascaded_table(current_n).header_interface_id));
                                        asn_debug.put_line('IN Trans Id ' || TO_CHAR(temp_cascaded_table(current_n).interface_transaction_id));
                                    END IF;

                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_warning;
                                    rcv_error_pkg.set_error_message('RCV_SHIP_QTY_OVER_TOLERANCE', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('QTY_A', temp_cascaded_table(current_n).quantity);
                                    rcv_error_pkg.set_token('QTY_B', temp_cascaded_table(current_n).quantity - x_remaining_quantity);
                                    rcv_error_pkg.log_interface_warning('QUANTITY');

                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('Error Status ' || temp_cascaded_table(current_n).error_status);
                                        asn_debug.put_line('Error message ' || temp_cascaded_table(current_n).error_message);
                                        asn_debug.put_line('Need to insert into po_interface_errors');
                                    END IF;
                             -- Commented out the following END IF as part of bug 6796920
                             -- END IF; --} matches x_qty_rcv_exception_code = 'WARNING'

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('Current quantity ' || TO_CHAR(temp_cascaded_table(current_n).quantity));
                                    asn_debug.put_line('Current shipped quantity ' || TO_CHAR(temp_cascaded_table(current_n).quantity_shipped));
                                    asn_debug.put_line('Current source document quantity ' || TO_CHAR(temp_cascaded_table(current_n).source_doc_quantity));
                                    asn_debug.put_line('Current primary quantity ' || TO_CHAR(temp_cascaded_table(current_n).primary_quantity));
                                    asn_debug.put_line('Current Tax Amount ' || TO_CHAR(temp_cascaded_table(current_n).tax_amount));
                                END IF;
                            -- }
                         -- ELSIF x_qty_rcv_exception_code = 'REJECT' THEN -- elseif for NONE/WARNING  --{
                         -- Bug 6796920 - Modified the following elsif condition to check for blind receiving flag

                            ELSIF (x_qty_rcv_exception_code = 'REJECT' AND NVL(l_blind_receiving_flag,'N') <> 'Y')  THEN

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('Extra ASN UOM Quantity ' || TO_CHAR(x_remaining_quantity));
                                    asn_debug.put_line('Extra PO UOM Quantity ' || TO_CHAR(x_remaining_qty_po_uom));
                                END IF;

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('delete the temp table ');
                                END IF;

                                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;

                                -- <Bug 9342280 : Added for CLM project>
                                IF l_is_clm_po = 'Y' AND l_partial_funded_flag = 'Y' THEN

                                   rcv_error_pkg.set_error_message(
                                       'RCV_TRX_QTY_EXCEEDS_CLM_FUNDED',
                                        x_cascaded_table(n).error_message);
                                        rcv_error_pkg.set_token('QTY_A', x_cascaded_table(n).quantity);
                                        rcv_error_pkg.set_token('QTY_B', x_cascaded_table(n).quantity - x_remaining_quantity);

                                ELSE
                                -- <CLM END>
                                rcv_error_pkg.set_error_message('RCV_SHIP_QTY_OVER_TOLERANCE', x_cascaded_table(n).error_message);
                                rcv_error_pkg.set_token('QTY_A', x_cascaded_table(n).quantity);
                                rcv_error_pkg.set_token('QTY_B', x_cascaded_table(n).quantity - x_remaining_quantity);

                                END IF; -- <Bug 9342280 : Added for CLM project>

                                rcv_error_pkg.log_interface_error('QUANTITY', FALSE);

                                IF temp_cascaded_table.COUNT > 0 THEN
                                    FOR i IN 1 .. temp_cascaded_table.COUNT LOOP
                                        temp_cascaded_table.DELETE(i);
                                    END LOOP;
                                END IF;

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('mark the actual table with error status');
                                    asn_debug.put_line('Error Status ' || x_cascaded_table(n).error_status);
                                    asn_debug.put_line('Error message ' || x_cascaded_table(n).error_message);
                                END IF;

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('Need to insert a row into po_interface_errors');
                                END IF;
                            END IF;            --} matches if(none/warning) and elseif(reject)
                                    --}
                        ELSE --{ else for rows fetched = 0 OR x_first_trans = true
                            IF rows_fetched = 0 THEN
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('No rows were retrieved from cursor.');
                                END IF;
                            ELSIF x_first_trans THEN
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('No rows were cascaded');
                                END IF;
                            END IF;

                            x_temp_count  := 1;

                            /* nwang add error messages */
                            /* Bug 2340533 - Added a message RCV_ASN_NO_OPEN_SHIPMENTS which conveys that
                                  no shipments exists for receiving for the given PO.
                            */
                            IF (    x_cascaded_table(n).transaction_type <> 'DELIVER'
                                AND NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') <> 'DELIVER') THEN                                                                              --{
                                                                                                              -- Bug 2551443 Removed po_distributions from the FROM clause
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('This is receive');
                                END IF;

                                IF (x_is_asn = FALSE) THEN --{
                                    SELECT COUNT(*)
                                    INTO   x_temp_count
                                    FROM   po_line_locations pll,
                                           po_lines pl,
                                           po_headers ph
                                    WHERE  ph.po_header_id = temp_cascaded_table(current_n).po_header_id
                                    AND    pll.po_header_id = ph.po_header_id
                                    AND    pl.line_num = NVL(temp_cascaded_table(current_n).document_line_num, pl.line_num)
                                    AND    NVL(pll.po_release_id, 0) = NVL(temp_cascaded_table(current_n).po_release_id, NVL(pll.po_release_id, 0))
                                    AND    pll.line_location_id = NVL(temp_cascaded_table(current_n).po_line_location_id, pll.line_location_id)
                                    AND    pll.po_line_id = pl.po_line_id;
                                END IF; --}

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('x_temp_count ' || x_temp_count);
                                END IF;

                                IF x_temp_count = 0 THEN --{
                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_ASN_NO_OPEN_SHIPMENTS', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('PONUM', temp_cascaded_table(current_n).document_num);
                                    rcv_error_pkg.log_interface_error('DOCUMENT_NUM', FALSE);
                                ELSE -- x_item_count != 0 --}{
                                    IF (x_is_asn = FALSE) THEN --{
                                        IF (g_asn_debug = 'Y') THEN
                                            asn_debug.put_line('Get the flag values');
                                        END IF;

                                        SELECT NVL(pl.item_id, 0),
                                               NVL(pll.approved_flag, 'N'),
                                               NVL(pll.cancel_flag, 'N'),
                                               NVL(pll.closed_code, 'OPEN'),
                                               pll.shipment_type,
                                               pll.ship_to_organization_id,
                                               pll.ship_to_location_id,
                                               NVL(pl.vendor_product_num, '-999')
                                        INTO   x_item_id,
                                               x_approved_flag,
                                               x_cancel_flag,
                                               x_closed_code,
                                               x_shipment_type,
                                               x_ship_to_organization_id,
                                               x_ship_to_location_id,
                                               x_vendor_product_num
                                        FROM   po_line_locations pll,
                                               po_lines pl,
                                               po_headers ph
                                        WHERE  ph.po_header_id = temp_cascaded_table(current_n).po_header_id
                                        AND    pll.po_header_id = ph.po_header_id
                                        AND    pl.line_num = NVL(temp_cascaded_table(current_n).document_line_num, pl.line_num)
                                        AND    NVL(pll.po_release_id, 0) = NVL(temp_cascaded_table(current_n).po_release_id, NVL(pll.po_release_id, 0))
                                        AND    pll.line_location_id = NVL(temp_cascaded_table(current_n).po_line_location_id, pll.line_location_id)
                                        AND    pll.po_line_id = pl.po_line_id;

                                        IF (g_asn_debug = 'Y') THEN
                                            asn_debug.put_line('x_item_id ' || x_item_id);
                                            asn_debug.put_line('x_approved_flag ' || x_approved_flag);
                                            asn_debug.put_line('x_cancel_flag ' || x_cancel_flag);
                                            asn_debug.put_line('x_closed_code ' || x_closed_code);
                                            asn_debug.put_line('x_include_closed_po ' || x_include_closed_po);
                                            asn_debug.put_line('x_shipment_type ' || x_shipment_type);
                                            asn_debug.put_line('x_ship_to_organization_id ' || x_ship_to_organization_id);
                                            asn_debug.put_line('x_ship_to_location_id ' || x_ship_to_location_id);
                                            asn_debug.put_line('x_vendor_product_num ' || x_vendor_product_num);
                                        END IF;
                                    END IF; --}
                                END IF; --}        -- x_temp_count = 0
                            ELSIF(   x_cascaded_table(n).transaction_type = 'DELIVER'
                                  OR NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') = 'DELIVER') THEN --}{
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('This is deliver');
                                END IF;

                                IF (x_is_asn = FALSE) THEN --{
                                    SELECT COUNT(*)
                                    INTO   x_temp_count
                                    FROM   po_distributions pod,
                                           po_line_locations pll,
                                           po_lines pl,
                                           po_headers ph
                                    WHERE  ph.po_header_id = temp_cascaded_table(current_n).po_header_id
                                    AND    pll.po_header_id = ph.po_header_id
                                    AND    pll.line_location_id = pod.line_location_id
                                    AND    pl.line_num = NVL(temp_cascaded_table(current_n).document_line_num, pl.line_num)
                                    AND    NVL(pll.po_release_id, 0) = NVL(temp_cascaded_table(current_n).po_release_id, NVL(pll.po_release_id, 0))
                                    AND    pll.line_location_id = NVL(temp_cascaded_table(current_n).po_line_location_id, pll.line_location_id)
                                    AND    pll.po_line_id = pl.po_line_id
                                    AND    pod.distribution_num = NVL(temp_cascaded_table(current_n).document_distribution_num, pod.distribution_num);
                                END IF; --}

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('x_temp_count ' || x_temp_count);
                                END IF;

                                IF x_temp_count = 0 THEN --{
                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_ASN_INVALID_DIST_NUM', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('NUMBER', temp_cascaded_table(current_n).document_distribution_num);
                                    rcv_error_pkg.log_interface_error('DOCUMENT_DISTRIBUTION_NUM', FALSE);
                                ELSE -- x_temp_count != 0  --}{
                                    IF (x_is_asn = FALSE) THEN --{
                                        IF (g_asn_debug = 'Y') THEN
                                            asn_debug.put_line('Get flag values ');
                                        END IF;

                                        SELECT NVL(pl.item_id, 0),
                                               NVL(pll.approved_flag, 'N'),
                                               NVL(pll.cancel_flag, 'N'),
                                               NVL(pll.closed_code, 'OPEN'),
                                               pll.shipment_type,
                                               pll.ship_to_organization_id,
                                               pll.ship_to_location_id,
                                               NVL(pl.vendor_product_num, '-999')
                                        INTO   x_item_id,
                                               x_approved_flag,
                                               x_cancel_flag,
                                               x_closed_code,
                                               x_shipment_type,
                                               x_ship_to_organization_id,
                                               x_ship_to_location_id,
                                               x_vendor_product_num
                                        FROM   po_distributions pod,
                                               po_line_locations pll,
                                               po_lines pl,
                                               po_headers ph
                                        WHERE  ph.po_header_id = temp_cascaded_table(current_n).po_header_id
                                        AND    pll.po_header_id = ph.po_header_id
                                        AND    pll.line_location_id = pod.line_location_id
                                        AND    pl.line_num = NVL(temp_cascaded_table(current_n).document_line_num, pl.line_num)
                                        AND    NVL(pll.po_release_id, 0) = NVL(temp_cascaded_table(current_n).po_release_id, NVL(pll.po_release_id, 0))
                                        AND    pll.line_location_id = NVL(temp_cascaded_table(current_n).po_line_location_id, pll.line_location_id)
                                        AND    pll.po_line_id = pl.po_line_id
                                        AND    pod.distribution_num = NVL(temp_cascaded_table(current_n).document_distribution_num, pod.distribution_num);

                                        IF (g_asn_debug = 'Y') THEN
                                            asn_debug.put_line('x_item_id ' || x_item_id);
                                            asn_debug.put_line('x_approved_flag ' || x_approved_flag);
                                            asn_debug.put_line('x_cancel_flag ' || x_cancel_flag);
                                            asn_debug.put_line('x_closed_code ' || x_closed_code);
                                            asn_debug.put_line('x_include_closed_po ' || x_include_closed_po);
                                            asn_debug.put_line('x_shipment_type ' || x_shipment_type);
                                            asn_debug.put_line('x_ship_to_organization_id ' || x_ship_to_organization_id);
                                            asn_debug.put_line('x_ship_to_location_id ' || x_ship_to_location_id);
                                            asn_debug.put_line('x_vendor_product_num ' || x_vendor_product_num);
                                        END IF;
                                    END IF; --}
                                END IF; -- x_temp_count = 0; --}
                            END IF; -- transaction_type <> 'DELIVER' --}

                            IF (x_is_asn = TRUE) THEN --{
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('Shipment header_id not null ');
                                END IF;

                                SELECT NVL(rsl.item_id, 0),
                                       NVL(pll.approved_flag, 'N'),
                                       NVL(pll.cancel_flag, 'N'),
                                       NVL(pll.closed_code, 'OPEN'),
                                       pll.shipment_type,
                                       rsl.to_organization_id,
                                       rsl.ship_to_location_id,
                                       NVL(pl.vendor_product_num, '-999'),
                                       rsh.receipt_source_code,
                                       rsl.shipment_line_status_code,
                                       NVL(rsl.asn_line_flag, 'N')
                                INTO   x_item_id,
                                       x_approved_flag,
                                       x_cancel_flag,
                                       x_closed_code,
                                       x_shipment_type,
                                       x_ship_to_organization_id,
                                       x_ship_to_location_id,
                                       x_vendor_product_num,
                                       l_receipt_source_code,
                                       l_shipment_line_status_code,
                                       l_asn_line_flag
                                FROM   po_line_locations pll,
                                       po_lines pl,
                                       po_headers ph,
                                       rcv_shipment_headers rsh,
                                       rcv_shipment_lines rsl
                                WHERE  rsh.shipment_header_id = temp_cascaded_table(current_n).shipment_header_id
                                AND    rsl.shipment_line_id = temp_cascaded_table(current_n).shipment_line_id
                                AND    rsl.po_header_id = temp_cascaded_table(current_n).po_header_id
                                AND    rsl.po_line_id = temp_cascaded_table(current_n).po_line_id
                                AND    rsl.po_line_location_id = temp_cascaded_table(current_n).po_line_location_id
                                AND    rsl.po_line_id = pl.po_line_id
                                AND    rsl.po_line_location_id = pll.line_location_id
                                AND    ph.po_header_id = rsl.po_header_id
                                AND    rsh.shipment_header_id = rsl.shipment_header_id
                                AND    pll.po_header_id = ph.po_header_id
                                AND    pl.po_line_id = temp_cascaded_table(current_n).po_line_id
                                AND    NVL(pll.po_release_id, 0) = NVL(temp_cascaded_table(current_n).po_release_id,0)
                                AND    pll.line_location_id = temp_cascaded_table(current_n).po_line_location_id
                                AND    pll.po_line_id = pl.po_line_id;

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('x_item_id ' || x_item_id);
                                    asn_debug.put_line('x_approved_flag ' || x_approved_flag);
                                    asn_debug.put_line('x_cancel_flag ' || x_cancel_flag);
                                    asn_debug.put_line('x_closed_code ' || x_closed_code);
                                    asn_debug.put_line('x_include_closed_po ' || x_include_closed_po);
                                    asn_debug.put_line('x_shipment_type ' || x_shipment_type);
                                    asn_debug.put_line('x_ship_to_organization_id ' || x_ship_to_organization_id);
                                    asn_debug.put_line('x_ship_to_location_id ' || x_ship_to_location_id);
                                    asn_debug.put_line('x_vendor_product_num ' || x_vendor_product_num);
                                    asn_debug.put_line('l_receipt_source_code ' || l_receipt_source_code);
                                    asn_debug.put_line('l_shipment_line_status_code ' || l_shipment_line_status_code);
                                    asn_debug.put_line('l_asn_line_flag ' || l_asn_line_flag);
                                END IF;
                            END IF; --}

                            IF (x_temp_count <> 0) THEN --{
                                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('Should give us the exact error ');
                                END IF;

                                IF x_item_id <> NVL(temp_cascaded_table(current_n).item_id, x_item_id) THEN
                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('This item is not allowed ');
                                    END IF;

                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_ASN_ITEM_NOT_ALLOWED', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('NUMBER', temp_cascaded_table(current_n).item_num);
                                    rcv_error_pkg.log_interface_error('ITEM_NUM', FALSE);
                                END IF;

                                IF x_approved_flag <> 'Y' THEN
                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('This PO is not  approved');
                                    END IF;

                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_ASN_SHIPMT_NOT_APPROVED', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('NUMBER', temp_cascaded_table(current_n).document_shipment_line_num);
                                    rcv_error_pkg.set_token('PO_NUM', temp_cascaded_table(current_n).document_num);
                                    rcv_error_pkg.log_interface_error('DOCUMENT_SHIPMENT_LINE_NUM', FALSE);
                                END IF;

                                IF x_cancel_flag <> 'N' THEN
                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('This PO is  cancelled');
                                    END IF;

                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_ASN_SHIPMT_CANCELLED', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('NUMBER', temp_cascaded_table(current_n).document_shipment_line_num);
                                    rcv_error_pkg.log_interface_error('DOCUMENT_SHIPMENT_LINE_NUM', FALSE);
                                END IF;

                                /* Bug 3548556.
                                 * We used to record the error only when it
                                 * is finally closed. But this is an error only
                                 * the include closed PO option is Yes. If it is
                                 * Yes, then we need to error out when closed_code
                                 * is FINALLY CLOSED, CLOSED FOR RECEIVING OR
                                 * CLOSED. So changed the foll code to include
                                 * the condition x_include_closed_po and
                                 * added the if condition below to look for
                                 * the other closed codes when include closed
                                 * po profile option is set to No.
                                */
                                IF (    NVL(x_include_closed_po, 'N') = 'Y'
                                    AND x_closed_code = 'FINALLY CLOSED') THEN
                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('This PO is  finally closed and the profile option to include closed POs is Y');
                                    END IF;

                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_ASN_SHIPMT_FINALLY_CLOSED', x_cascaded_table(n).error_message); --Bug 10020071
                                    rcv_error_pkg.set_token('NUMBER', temp_cascaded_table(current_n).document_shipment_line_num);
                                    rcv_error_pkg.log_interface_error('DOCUMENT_SHIPMENT_LINE_NUM', FALSE);
                                END IF;

                                IF (    NVL(x_include_closed_po, 'N') = 'N'
                                    AND x_closed_code IN('FINALLY CLOSED', 'CLOSED', 'CLOSED FOR RECEIVING')) THEN
                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('This PO is  not open and the profile option to include closed POs is N');
                                    END IF;

                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_ASN_SHIPMT_NOT_OPEN', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('NUMBER', temp_cascaded_table(current_n).document_shipment_line_num);
                                    rcv_error_pkg.log_interface_error('DOCUMENT_SHIPMENT_LINE_NUM', FALSE);
                                END IF;

                                IF x_shipment_type NOT IN('STANDARD', 'BLANKET', 'SCHEDULED','PREPAYMENT') THEN
                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('This PO shipment type cannot be received');
                                    END IF;

                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_ASN_INVAL_SHIPMT_TYPE', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('NUMBER', temp_cascaded_table(current_n).document_shipment_line_num);
                                    rcv_error_pkg.log_interface_error('DOCUMENT_SHIPMENT_LINE_NUM', FALSE);
                                END IF;

                                IF x_ship_to_organization_id <> NVL(temp_cascaded_table(current_n).to_organization_id, x_ship_to_organization_id) THEN
                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('Ship_to_org in  PO does not match the user entered value');
                                    END IF;

                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_ASN_INVAL_SHIP_TO_ORG', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('VALUE', temp_cascaded_table(current_n).to_organization_code);
                                    rcv_error_pkg.log_interface_error('TO_ORGANIZATION_CODE', FALSE);
                                END IF;

                                IF x_ship_to_location_id <> NVL(NVL(temp_cascaded_table(current_n).ship_to_location_id, x_header_record.header_record.location_id), x_ship_to_location_id) THEN
                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('Ship_to_loc in  PO does not match the user entered value');
                                    END IF;

                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_ASN_INVAL_SHIP_TO_LOC', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('VALUE', temp_cascaded_table(current_n).ship_to_location_code);
                                    rcv_error_pkg.log_interface_error('SHIP_TO_LOCATION_CODE', FALSE);
                                END IF;

                                IF x_vendor_product_num <> NVL(temp_cascaded_table(current_n).vendor_item_num, x_vendor_product_num) THEN
                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('Vendor_prod_num in  PO does not match the user entered value');
                                    END IF;

                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_ASN_INVAL_VENDOR_PROD_NUM', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('NUMBER', temp_cascaded_table(current_n).vendor_item_num);
                                    rcv_error_pkg.log_interface_error('VENDOR_ITEM_NUM', FALSE);
                                END IF;

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('Should have give us the exact error ');
                                END IF;

                                /* IF (x_is_asn = TRUE) THEN --{ This is replaced by forward port for Bug 4523892 */
                                IF (rcv_roi_header.g_txn_against_asn = 'Y') THEN --{ Bug#4523892
                                    /* Error messages specific to asns. */
                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('Error messages specific to asn');
                                    END IF;

                                    IF l_receipt_source_code <> 'VENDOR' THEN
                                        IF (g_asn_debug = 'Y') THEN
                                            asn_debug.put_line('Receipt source code not VENDOR');
                                        END IF;

                                        x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                        rcv_error_pkg.set_error_message('RCV_ASN_INVAL_RECEIPT_SRC_CODE', x_cascaded_table(n).error_message); -- Bug 7593902
                                        rcv_error_pkg.set_token('RECEIPT_SRC_CODE', l_receipt_source_code);                                   -- Bug 7593902
                                        rcv_error_pkg.log_interface_error('SHIPMENT_NUMBER', FALSE);
                                    END IF;

                                    IF (   l_shipment_line_status_code = 'FULLY RECEIVED'
                                        OR l_asn_line_flag <> 'Y') THEN
                                        IF (g_asn_debug = 'Y') THEN
                                            asn_debug.put_line('ASN line flag is not Y and status code is Fully closed');
                                        END IF;

                                        x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                        rcv_error_pkg.set_error_message('RCV_ASN_NO_EXPECTED_RECEIPTS', x_cascaded_table(n).error_message);
                                        rcv_error_pkg.log_interface_error('SHIPMENT_NUMBER', FALSE);
                                    END IF;

                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('Should have give us the exact error for ASN ');
                                    END IF;
                                END IF; --}
                            END IF; -- x_temp_count = 0;}

                                    -- Delete the temp_cascaded_table just to be sure

                            IF temp_cascaded_table.COUNT > 0 THEN
                                FOR i IN 1 .. temp_cascaded_table.COUNT LOOP
                                    temp_cascaded_table.DELETE(i);
                                END LOOP;
                            END IF;
                        END IF;       --} end else for rows fetched = 0 OR x_first_trans = true
                                -- end x_remaining_qty > 0 => this is the last record
                    ELSE --
                        -- Bug 13703497
                        x_remaining_quantity   := 0;
                        x_remaining_qty_po_uom := 0;

                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Remaining ASN UOM quantity is zero ' || TO_CHAR(x_remaining_quantity));
                            asn_debug.put_line('Remaining PO UOM quantity is zero ' || TO_CHAR(x_remaining_qty_po_uom));
                            asn_debug.put_line('Return the cascaded rows back to the calling procedure');
                        END IF;
                    END IF; --} ends the check for whether last record has been reached

                            -- close cursors

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Close cursors shipments, count_shipments, distributions, count_disributions');
                    END IF;

                    IF shipments%ISOPEN THEN
                        CLOSE shipments;
                    END IF;

                    IF count_shipments%ISOPEN THEN
                        CLOSE count_shipments;
                    END IF;

                    IF distributions%ISOPEN THEN
                        CLOSE distributions;
                    END IF;

                    IF count_distributions%ISOPEN THEN
                        CLOSE count_distributions;
                    END IF;

                    IF asn_shipments%ISOPEN THEN
                        CLOSE asn_shipments;
                    END IF;

                    IF count_asn_shipments%ISOPEN THEN
                        CLOSE count_asn_shipments;
                    END IF;

                    IF asn_distributions%ISOPEN THEN
                        CLOSE asn_distributions;
                    END IF;

                    IF count_asn_distributions%ISOPEN THEN
                        CLOSE count_asn_distributions;
                    END IF;

                    EXIT;
                END IF; --} matches lastrecord or x_remaining_quantity <= 0

                        -- eliminate the row if it fails the date check

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Count in temp_cascade_table : ' || TO_CHAR(temp_cascaded_table.COUNT));
                    asn_debug.put_line('Cursor record ' || TO_CHAR(rows_fetched));
                    asn_debug.put_line('Check date tolerance');
                END IF;

             /* Bug 17218137 start. */
                if (x_cascaded_table(n).transaction_type <> 'SHIP') then
                    x_shipmentdistributionrec.receipt_days_exception_code := 'NONE';
                end if;
             /* Bug 17218137 end. */

                rcv_transactions_interface_sv.check_date_tolerance(NVL(temp_cascaded_table(1).expected_receipt_date, x_header_record.header_record.expected_receipt_date), -- Bug 487222
                                                                   x_shipmentdistributionrec.promised_date,
                                                                   x_shipmentdistributionrec.days_early_receipt_allowed,
                                                                   x_shipmentdistributionrec.days_late_receipt_allowed,
                                                                   x_shipmentdistributionrec.receipt_days_exception_code
                                                                  );

                /* Bug 3296214.
                 * We need to use the control actions set in the Receiving
                 * Options window. Get the control code from rcv_parameters.
                 * If the transaction type is RECEIVE and if there is an
                 * ASN existing for that PO, then depending on this value
                 * we should either allow or error out.
                */

		/* Bug 9169143: LSP Changes */


                begin
			x_po_header_id   := x_cascaded_table(n).po_header_id;
			if (nvl(fnd_profile.value('wms_deployment_mode'), 1) = 3) then
				l_client_code  := wms_deploy.get_po_client_code(x_po_header_id);
				if (l_client_code is not null) then
					select nvl(max(receipt_asn_exists_code),'none')
					into   l_asn_exists_code
					from   mtl_client_parameters
					where  client_code = l_client_code;

					 if (g_asn_debug = 'y') then
						asn_debug.put_line('asn code in mtl_client_parameters'|| l_asn_exists_code);
					end if;
				else
					select nvl(max(receipt_asn_exists_code),'none')
					into   l_asn_exists_code
					from   rcv_parameters
					where  organization_id = x_cascaded_table(n).to_organization_id;

					if (g_asn_debug = 'y') then
						asn_debug.put_line('asn code in rcv_parameters'|| l_asn_exists_code);
					end if;
				end if;
		else
			select nvl(max(receipt_asn_exists_code),'none')
			into   l_asn_exists_code
			from   rcv_parameters
			where  organization_id = x_cascaded_table(n).to_organization_id ;

			if (g_asn_debug = 'y') then
                        asn_debug.put_line('asn code in rcv_parameters '|| l_asn_exists_code);
			end if;
		end if;
	exception
	when others then
		l_asn_exists_code := 'none';
	end;

		/* End LSP changes */

                /* This check is not done for receiving against ASNs. So check
                 * whether x_cascaded_table(n).shipment_header_id is null which
                 * will be for the case of a receipt against a PO shipment.
                */
                IF (    (x_cascaded_table(n).transaction_type = 'RECEIVE')
                    AND l_asn_exists_code IN('WARNING', 'REJECT')
                    AND (rcv_roi_header.g_txn_against_asn = 'N')) THEN --{  Bug#4523892
                    /* AND (x_is_asn = FALSE)) THEN --{  This is replaced by forward port for 4523892 */
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('ASN CODE IN Warning or Reject ');
                    END IF;

                    /* Bug 4287932 In case of ASBN the ASN control action was
                     * not getting applied. Added ASBN in the asn_type in
                     * select below.
                    */

                    SELECT COUNT(*)
                    INTO   l_asn_count
                    FROM   rcv_shipment_headers rsh,
                           rcv_shipment_lines rsl
                    WHERE  rsh.shipment_header_id = rsl.shipment_header_id
                    AND    NVL(rsh.asn_type, 'STD') IN ('ASN','ASBN') --4287932
                    AND    NVL(rsl.shipment_line_status_code, 'EXPECTED') NOT IN('CANCELLED', 'FULLY RECEIVED')
                    AND    rsl.po_line_location_id = x_shipmentdistributionrec.line_location_id;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('l_asn_count ' || l_asn_count);
                    END IF;

                    IF (l_asn_count <> 0) THEN --{
                        IF (l_asn_exists_code = 'WARNING') THEN --{
                            x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_warning;
                            rcv_error_pkg.set_error_message('RCV_ASN_EXISTS_FOR_POLINE', x_cascaded_table(n).error_message);
                            rcv_error_pkg.log_interface_warning('DOCUMENT_NUM');

                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('AFter Warning insert into po_interface_errors ' || x_cascaded_table(n).error_message);
                            END IF;
                        END IF; --}

                        IF (l_asn_exists_code = 'REJECT') THEN --{
                            x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                            rcv_error_pkg.set_error_message('RCV_ASN_EXISTS_FOR_POLINE', x_cascaded_table(n).error_message);
                            rcv_error_pkg.set_token('NUMBER', temp_cascaded_table(current_n).document_num);
                            rcv_error_pkg.log_interface_error('DOCUMENT_NUM', FALSE);

                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('AFter Reject insert into po_interface_errors ' || x_cascaded_table(n).error_message);
                            END IF;
                        END IF; --}
                    ELSE --}{
                        /* This is a receipt against a PO but there is no ASN.
                        */
                        l_asn_exists_code  := 'NONE';
                    END IF; --}
                ELSE --}{
                    /* This is an ASN transaction or receipt against an ASN or
                     * else the asn code is NONE */
                    l_asn_exists_code  := 'NONE';
                END IF; --}

                IF (l_asn_exists_code IN('NONE', 'WARNING')) THEN --{
                    /* bug 1060261 - added error message to be shown when the expected date is outside tolerance range */
                    IF (x_shipmentdistributionrec.receipt_days_exception_code = 'REJECT') THEN --{
                        x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                        rcv_error_pkg.set_error_message('RCV_ASN_DATE_OUT_TOL', x_cascaded_table(n).error_message);
                        rcv_error_pkg.set_token('DELIVERY DATE', NVL(temp_cascaded_table(1).expected_receipt_date, x_header_record.header_record.expected_receipt_date));
                        rcv_error_pkg.log_interface_error('EXPECTED_RECEIPT_DATE', FALSE);
                    END IF; --}

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Days exception Code ' || NVL(x_shipmentdistributionrec.receipt_days_exception_code, 'XXX'));
                    END IF;

                    -- Check shipto_location enforcement

                    rcv_transactions_interface_sv.check_shipto_enforcement(x_shipmentdistributionrec.ship_to_location_id,
                                                                           NVL(temp_cascaded_table(1).ship_to_location_id, x_header_record.header_record.location_id),
                                                                           x_shipmentdistributionrec.enforce_ship_to_location_code
                                                                          );

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Enforce ShipToLocation ' || NVL(x_shipmentdistributionrec.enforce_ship_to_location_code, 'XXX'));
                    END IF;

                    /* Bug 2208664 : Enter error message in po_interface_errors if enforce_ship_to_location_code is 'WARNING', and
                 Enter error message in po_interface_errors if enforce_ship_to_location_code is 'REJECT' and error out
                 */
                    IF (x_shipmentdistributionrec.enforce_ship_to_location_code = 'REJECT') THEN --{
                        BEGIN
                            x_cascaded_table(n).error_status               := rcv_error_pkg.g_ret_sts_error;
                            rcv_error_pkg.set_error_message('RCV_ASN_INVAL_SHIP_TO_LOC', x_cascaded_table(n).error_message);
                            rcv_error_pkg.set_token('VALUE', temp_cascaded_table(current_n).ship_to_location_id);
                            rcv_error_pkg.log_interface_error('SHIP_TO_LOCATION_ID', FALSE);
                            x_shipmentdistributionrec.ship_to_location_id  := NVL(temp_cascaded_table(1).ship_to_location_id, x_header_record.header_record.location_id);
                        END;
                    ELSIF(x_shipmentdistributionrec.enforce_ship_to_location_code = 'WARNING') THEN --} {
                        BEGIN
                            x_cascaded_table(n).error_status               := rcv_error_pkg.g_ret_sts_warning;
                            rcv_error_pkg.set_error_message('RCV_ASN_INVAL_SHIP_TO_LOC', x_cascaded_table(n).error_message);
                            rcv_error_pkg.set_token('VALUE', temp_cascaded_table(current_n).ship_to_location_id);
                            rcv_error_pkg.log_interface_warning('SHIP_TO_LOCATION_ID');
                            x_shipmentdistributionrec.ship_to_location_id  := NVL(temp_cascaded_table(1).ship_to_location_id, x_header_record.header_record.location_id);
                        END;
                    END IF; --}matches ship_to_loc_code = warning
                END IF; --} matches l_asn_exists_code = NONE

                IF     (x_shipmentdistributionrec.receipt_days_exception_code = 'NONE')
                   AND -- derived by the date tolerance procedure
                       (x_shipmentdistributionrec.enforce_ship_to_location_code IN('NONE', 'WARNING'))
                   AND (l_asn_exists_code IN('NONE', 'WARNING')) THEN                                                                                                                                             --{
                                                                                                    -- derived by shipto_enforcement
                                                                      -- Changes to accept Vendor_Item_num without ITEM_ID/NUM
                                                                          -- Item_id could be null if the ASN has the vendor_item_num provided
                                                                          -- We need to put a value into item_id based on the cursor
                                                                          -- We need to also figure out the primary unit for the item_id
                                                                          -- We will do it for the first record only. Subsequent records in the
                                                                          -- temp_table are copies of the previous one
                                                                          -- Assuming that vendor_item_num refers to a single item. If the items
                                                                          -- could be different then we need to move this somewhere below
                    IF     (x_first_trans)
                       AND temp_cascaded_table(current_n).item_id IS NULL THEN --{
                        temp_cascaded_table(current_n).item_id  := x_shipmentdistributionrec.item_id;

                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Cursor Item Id is ' || TO_CHAR(temp_cascaded_table(current_n).item_id));
                        END IF;

                        -- Bug 4881909 : For one-time items item_id would be null. Added check
                        --               for item_id in the following IF statement
                        IF  x_cascaded_table(n).primary_unit_of_measure IS NULL
                        AND temp_cascaded_table(current_n).item_id IS NOT NULL THEN --{
                            BEGIN
                                SELECT primary_unit_of_measure
                                INTO   temp_cascaded_table(current_n).primary_unit_of_measure
                                FROM   mtl_system_items
                                WHERE  mtl_system_items.inventory_item_id = temp_cascaded_table(current_n).item_id
                                AND    mtl_system_items.organization_id = temp_cascaded_table(current_n).to_organization_id;

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('Primary UOM: ' || temp_cascaded_table(current_n).primary_unit_of_measure);
                                END IF;
                            EXCEPTION
                                WHEN NO_DATA_FOUND THEN
                                    temp_cascaded_table(current_n).error_status  := rcv_error_pkg.g_ret_sts_warning;
                                    rcv_error_pkg.set_error_message('RCV_UOM_NO_CONV_PRIMARY', temp_cascaded_table(current_n).error_message);
                                    rcv_error_pkg.set_token('PRIMARY_UNIT', '');
                                    rcv_error_pkg.set_token('SHIPMENT_UNIT', '');
                                    rcv_error_pkg.log_interface_warning('ITEM_ID');

                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('Primary UOM error');
                                    END IF;
                            END;
                        END IF; --}
                    END IF; --}

                    insert_into_table       := FALSE;
                    already_allocated_qty   := 0;

                    /*
                    ** Get the available quantity for the shipment or distribution
                    ** that is available for allocation by this interface transaction
                    */
                    IF (    x_cascaded_table(n).transaction_type <> 'DELIVER'
                        AND NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') <> 'DELIVER') THEN --{
                        NULL;

                        /*Bug# 1548597 */
                        /* IF (x_is_asn = FALSE) THEN --{ Replaced by forward port 4523892 */
                        IF (rcv_roi_header.g_txn_against_asn = 'N') THEN --{ Bug#4523892
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('Receiving against a Po');
                            END IF;

                            rcv_quantities_s.get_available_quantity('RECEIVE',
                                                                    x_shipmentdistributionrec.line_location_id,
                                                                    'VENDOR',
                                                                    NULL,
                                                                    NULL,
                                                                    NULL,
                                                                    x_converted_trx_qty,
                                                                    x_tolerable_qty,
                                                                    x_shipmentdistributionrec.unit_meas_lookup_code,
                                                                    x_secondary_available_qty
                                                                   );
                        ELSE --}{
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('Receiving an ASN');
                            END IF;

                     /* Bug 17243916 For ASN reccive through ROI in different uom the x_shipmentdistributionrec.unit_meas_lookup_code
                     **  was getting modified in the called api
		     */
			    l_uom_hold := x_shipmentdistributionrec.unit_meas_lookup_code;

                            rcv_quantities_s.get_available_asn_quantity('RECEIVE',
                                                                        x_shipmentdistributionrec.shipment_line_id,
                                                                        x_shipmentdistributionrec.line_location_id,
                                                                        NULL, --po_distribution_id
                                                                        l_uom_hold,  -- x_shipmentdistributionrec.unit_meas_lookup_code,
                                                                        x_converted_trx_qty,
                                                                        x_tolerable_qty,
                                                                        x_secondary_available_qty
                                                                       );

                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('x_converted_trx_qty ' || x_converted_trx_qty);
                                asn_debug.put_line('x_tolerable_qty ' || x_tolerable_qty);
                                asn_debug.put_line('x_secondary_available_qty ' || x_secondary_available_qty);
                            END IF;
                        END IF; --}


                                -- If qtys have already been allocated for this po_line_location_id during
                                     -- a cascade process which has not been written to the db yet, we need to
                                     -- decrement it from the total available quantity
                                     -- We traverse the actual pl/sql table and accumulate the quantity by matching the
                                     -- po_line_location_id

                        IF n > 1 THEN -- We will do this for all rows except the 1st
                            FOR i IN 1 ..(n - 1) LOOP
                                IF x_cascaded_table(i).po_line_location_id = x_shipmentdistributionrec.line_location_id THEN
                                    already_allocated_qty  := already_allocated_qty + x_cascaded_table(i).source_doc_quantity;
                                END IF;
                            END LOOP;
                        END IF;
                    ELSE --} { for txn != deliver
                        /* Bug# 1548597*/
                        /* IF (x_is_asn = FALSE) THEN --{ Replaced by forward port 4523892 */
                        IF (rcv_roi_header.g_txn_against_asn = 'N') THEN --{ Bug#4523892
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('Direct delivery against a Po');
                            END IF;

                            rcv_quantities_s.get_available_quantity('DIRECT RECEIPT',
                                                                    x_shipmentdistributionrec.po_distribution_id,
                                                                    'VENDOR',
                                                                    NULL,
                                                                    NULL,
                                                                    NULL,
                                                                    x_converted_trx_qty,
                                                                    x_tolerable_qty,
                                                                    x_shipmentdistributionrec.unit_meas_lookup_code,
                                                                    x_secondary_available_qty
                                                                   );
                        ELSE --}{
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('Direct delivery for an ASN');
                            END IF;

                         /* Bug 17243916 For Direct delivery for an ASN reccive through ROI in different uom
			 ** the x_shipmentdistributionrec.unit_meas_lookup_code was getting modified in the called api
		         */

			l_uom_hold := x_shipmentdistributionrec.unit_meas_lookup_code;

                            rcv_quantities_s.get_available_asn_quantity('DIRECT RECEIPT',
                                                                        x_shipmentdistributionrec.shipment_line_id,
                                                                        x_shipmentdistributionrec.line_location_id,
                                                                        x_shipmentdistributionrec.po_distribution_id,
                                                                        l_uom_hold, -- x_shipmentdistributionrec.unit_meas_lookup_code,
                                                                        x_converted_trx_qty,
                                                                        x_tolerable_qty,
                                                                        x_secondary_available_qty
                                                                       );

                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('x_converted_trx_qty ' || x_converted_trx_qty);
                                asn_debug.put_line('x_tolerable_qty ' || x_tolerable_qty);
                                asn_debug.put_line('x_secondary_available_qty ' || x_secondary_available_qty);
                            END IF;
                        END IF; --}

                        /* Bug# 1337787 - Calculated the x_tolerable_qty in
                             rcv_quantities_s.get_available_quantity procedure */

                        -- x_tolerable_qty := x_converted_trx_qty;
                          -- If qtys have already been allocated for this po_distribution_id during
                          -- a cascade process which has not been written to the db yet, we need to
                          -- decrement it from the total available quantity
                          -- We traverse the actual pl/sql table and accumulate the quantity by matching the
                          -- po_distribution_id

                        IF n > 1 THEN -- We will do this for all rows except the 1st
                            FOR i IN 1 ..(n - 1) LOOP
                                IF x_cascaded_table(i).po_distribution_id = x_shipmentdistributionrec.po_distribution_id THEN
                                    already_allocated_qty  := already_allocated_qty + x_cascaded_table(i).source_doc_quantity;
                                END IF;
                            END LOOP;
                        END IF;
                    END IF; --} for txn =deliver

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('After call to get_available quantity');
                        asn_debug.put_line('Available Quantity ' || TO_CHAR(x_converted_trx_qty));
                        asn_debug.put_line('Tolerable Quantity ' || TO_CHAR(x_tolerable_qty));
                        asn_debug.put_line('Already Shipped Quantity ' || TO_CHAR(NVL(x_shipmentdistributionrec.quantity_shipped, 0)));
                        asn_debug.put_line('Pointer to temp table ' || TO_CHAR(current_n));
                    END IF;

                    -- if qty has already been allocated then reduce available and tolerable
                    -- qty by the allocated amount

                    IF NVL(already_allocated_qty, 0) > 0 THEN --{
                        x_converted_trx_qty  := x_converted_trx_qty - already_allocated_qty;
                        x_tolerable_qty      := x_tolerable_qty - already_allocated_qty;

                        IF x_converted_trx_qty < 0 THEN
                            x_converted_trx_qty  := 0;
                        END IF;

                        IF x_tolerable_qty < 0 THEN
                            x_tolerable_qty  := 0;
                        END IF;

                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Have some allocated quantity. Will reduce qty');
                            asn_debug.put_line('Allocated Qty ' || TO_CHAR(already_allocated_qty));
                            asn_debug.put_line('After reducing by allocated qty');
                            asn_debug.put_line('Available Quantity ' || TO_CHAR(x_converted_trx_qty));
                            asn_debug.put_line('Tolerable Quantity ' || TO_CHAR(x_tolerable_qty));
                            asn_debug.put_line('Already Shipped Quantity ' || TO_CHAR(NVL(x_shipmentdistributionrec.quantity_shipped, 0)));
                            asn_debug.put_line('Pointer to temp table ' || TO_CHAR(current_n));
                        END IF;
                    END IF; --}

                             -- We can use the first record since the item_id and uom are not going to change
                            -- Check that we can convert between ASN-> PO  uom
                            --                                   PO -> ASN uom
                            --                                   PO -> PRIMARY uom
                            -- If any of the conversions fail then we cannot use that record

                    x_remaining_qty_po_uom  := 0; -- initialize
                    po_asn_uom_qty          := 0; -- initialize
                    po_primary_uom_qty      := 0; -- initialize

		/* Bug 5203841.
		 * In complex work POs,there is a case where the rate based
		 * PO shipment has matching_basis as Quantity based. But
		 * item_id is null. Since there is no uom conversion in
		 * the case of complex work POs, the old code would
		 * return the original quantity whereas the new one
		 * errors out. Reverting to old code for complex work POs.
		*/
		PO_COMPLEX_WORK_GRP.is_complex_work_po(
                         1.0,
                         temp_cascaded_table(1).po_header_id, --Bug: 5357628
                         l_return_status,
                         l_complex_flag,
                         x_shipmentdistributionrec.po_line_id,         /* Complex PO Receiving ER */
						 x_shipmentdistributionrec.item_id,            /* Complex PO Receiving ER */
						 x_shipmentdistributionrec.item_description,   /* Complex PO Receiving ER */
                         x_shipmentdistributionrec.line_location_id);  /* Complex PO Receiving ER */

                IF (l_return_status IS NOT NULL AND
                          l_return_status = FND_API.g_ret_sts_success) THEN
                        IF( g_asn_debug = 'Y' ) THEN
                            asn_debug.put_line('l_return_status ' || l_return_status);
                            asn_debug.put_line('l_po_header_id ' || temp_cascaded_table(1).po_header_id);
                        END IF;
                ELSE
                        IF( g_asn_debug = 'Y') THEN
                            asn_debug.put_line('l_return_status ' || l_return_status);
                        END IF;
                END IF;

		if ( l_complex_flag = 'Y' ) then --{
		     x_remaining_qty_po_uom  := rcv_transactions_interface_sv.convert_into_correct_qty(x_remaining_quantity,

                      temp_cascaded_table(1).unit_of_measure,

                      temp_cascaded_table(1).item_id,

                      x_shipmentdistributionrec.unit_meas_lookup_code

                     );
                    -- using arbit qty for PO->ASN, PO->PRIMARY UOM conversion as this is just a check

                    po_asn_uom_qty          := rcv_transactions_interface_sv.convert_into_correct_qty(1000,

                      x_shipmentdistributionrec.unit_meas_lookup_code,

                      temp_cascaded_table(1).item_id,

                      temp_cascaded_table(1).unit_of_measure

                     );
                    po_primary_uom_qty      := rcv_transactions_interface_sv.convert_into_correct_qty(1000,

                      x_shipmentdistributionrec.unit_meas_lookup_code,

                      temp_cascaded_table(1).item_id,

                      temp_cascaded_table(1).primary_unit_of_measure

                     );
		else --}{
                    -- For bug 8625167, to handle exception while converting uom
                    -- Bug 4898703 - START {
                    /*x_remaining_qty_po_uom  := x_remaining_quantity * po_uom_s.po_uom_convert(temp_cascaded_table(1).unit_of_measure,
                                                                                              x_shipmentdistributionrec.unit_meas_lookup_code,
                                                                                              temp_cascaded_table(1).item_id
                                                                                              );
                    -- using arbit qty for PO->ASN, PO->PRIMARY UOM conversion as this is just a check

                    po_asn_uom_qty          := 1000 * po_uom_s.po_uom_convert( x_shipmentdistributionrec.unit_meas_lookup_code,
                                                                               temp_cascaded_table(1).unit_of_measure,
                                                                               temp_cascaded_table(1).item_id
                                                                               );
                    po_primary_uom_qty      := 1000 * po_uom_s.po_uom_convert(x_shipmentdistributionrec.unit_meas_lookup_code,
                                                                              temp_cascaded_table(1).primary_unit_of_measure,
                                                                              temp_cascaded_table(1).item_id
                                                                              );*/
                    -- Bug 4898703 - END }

                    -- Bug 4898703 - START {
                    BEGIN
                    x_remaining_qty_po_uom  := x_remaining_quantity * po_uom_s.po_uom_convert(temp_cascaded_table(1).unit_of_measure,
                                                                                              x_shipmentdistributionrec.unit_meas_lookup_code,
                                                                                              temp_cascaded_table(1).item_id
                                                                                              );
                    EXCEPTION
                    when OTHERS THEN
                      IF (g_asn_debug = 'Y') THEN
                         asn_debug.put_line('Error: fail to calculate the x_remaining_qty_po_uom');
                      END IF;
                      x_remaining_qty_po_uom := 0;
                    END;

                    BEGIN
                    -- using arbit qty for PO->ASN, PO->PRIMARY UOM conversion as this is just a check

                    po_asn_uom_qty          := 1000 * po_uom_s.po_uom_convert( x_shipmentdistributionrec.unit_meas_lookup_code,
                                                                               temp_cascaded_table(1).unit_of_measure,
                                                                               temp_cascaded_table(1).item_id
                                                                               );
                    EXCEPTION
                    when OTHERS THEN
                      IF (g_asn_debug = 'Y') THEN
                         asn_debug.put_line('Error: fail to calculate the po_asn_uom_qty');
                      END IF;
                      po_asn_uom_qty := 0;
                    END;

                    BEGIN
                    po_primary_uom_qty      := 1000 * po_uom_s.po_uom_convert(x_shipmentdistributionrec.unit_meas_lookup_code,
                                                                              temp_cascaded_table(1).primary_unit_of_measure,
                                                                              temp_cascaded_table(1).item_id
                                                                              );
                    -- Bug 4898703 - END }
                    EXCEPTION
                    when OTHERS THEN
                      IF (g_asn_debug = 'Y') THEN
                         asn_debug.put_line('Error: fail to calculate the po_primary_uom_qty');
                      END IF;
                      po_primary_uom_qty := 0;
                    END;
                    -- end for bug 8625167

		end if ; -- Bug 5203841. }

                    IF    x_remaining_qty_po_uom = 0
                       OR -- no point in going further for this record
                          po_asn_uom_qty = 0
                       OR -- as we cannot convert between the ASN -> PO uoms
                          po_primary_uom_qty = 0 THEN --{   -- PO -> ASN uom, PO -> PRIMARY UOM
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Populating an error message in the interface tables');
                            asn_debug.put_line('Cannot interconvert between diff UOMs');
                            asn_debug.put_line('This po_line cannot be used as the uoms ');
                            asn_debug.put_line(temp_cascaded_table(1).unit_of_measure || ' ' || x_shipmentdistributionrec.unit_meas_lookup_code);
                            asn_debug.put_line('cannot be converted for item ' || TO_CHAR(temp_cascaded_table(1).item_id));
                        END IF; -- bug 8625167, correct the existing logic to throw exception if g_asn_debug is set to 'N'.
                            /* Start Bug 3654053 : Need to populate the po_interface_errors
                      table if the UOM conversion errors out.
             */
                            IF po_primary_uom_qty = 0 THEN
                                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                rcv_error_pkg.set_error_message('RCV_UOM_NO_CONV_PRIMARY', x_cascaded_table(n).error_message);
                                rcv_error_pkg.set_token('SHIPMENT_UNIT', x_shipmentdistributionrec.unit_meas_lookup_code);
                                rcv_error_pkg.set_token('PRIMARY_UNIT', x_cascaded_table(n).primary_unit_of_measure);
                                rcv_error_pkg.log_interface_error('PRIMARY_UNIT_OF_MEASURE', FALSE);
                            ELSE
                                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                rcv_error_pkg.set_error_message('RCV_UOM_NO_CONV_PO', x_cascaded_table(n).error_message);
                                rcv_error_pkg.set_token('SHIPMENT_UNIT', temp_cascaded_table(1).unit_of_measure);

                                -- For bug 8625167, the token PRIMARY_UNIT is wrong, it should be PO_UNIT
                                --rcv_error_pkg.set_token('PRIMARY_UNIT', x_shipmentdistributionrec.unit_meas_lookup_code);
                                rcv_error_pkg.set_token('PO_UNIT', x_shipmentdistributionrec.unit_meas_lookup_code);
                                -- End for bug 8625167

                                rcv_error_pkg.log_interface_error('UNIT_OF_MEASURE', FALSE);
                            END IF;
                        /* End Bug 3654053 */
                        -- For bug 8625167, correct the existing logic to throw exception if g_asn_debug is set to 'N'.
                        --END IF;
                        -- End for bug 8625167
                    ELSE -- we have converted the qty between uoms succesfully } {
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Current Item Id ' || TO_CHAR(temp_cascaded_table(1).item_id));
                            asn_debug.put_line('Current ASN Quantity ' || TO_CHAR(x_remaining_quantity));
                            asn_debug.put_line('Current ASN UOM ' || temp_cascaded_table(1).unit_of_measure);
                            asn_debug.put_line('Converted PO UOM Quantity ' || TO_CHAR(x_remaining_qty_po_uom));
                            asn_debug.put_line('PO UOM ' || x_shipmentdistributionrec.unit_meas_lookup_code);
                        END IF;

                             -- If last row set available = tolerable - shipped
                             -- else                      = available - shipped
                        /** Debug: We're a bit screwed here.  How do we know if the shipment is taken into account here.
                        **I guess if the transaction has the shipment line id then we should take the quantity from the shipped quantity.
                        **Need to walk through the different scenarios
                        */
                        IF rows_fetched = x_record_count THEN --{
                            x_converted_trx_qty  := x_tolerable_qty - NVL(x_shipmentdistributionrec.quantity_shipped, 0);

                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('Last Row : ' || TO_CHAR(x_converted_trx_qty));
                            END IF;
                        ELSE --} {
                            x_converted_trx_qty  := x_converted_trx_qty - NVL(x_shipmentdistributionrec.quantity_shipped, 0);

                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('Not Last Row : ' || TO_CHAR(x_converted_trx_qty));
                            END IF;
                        END IF; --}

                        IF x_converted_trx_qty > 0 THEN --{
                            IF (x_converted_trx_qty < x_remaining_qty_po_uom) THEN -- compare like uoms {
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('We are in > Qty branch');
                                END IF;

                                x_remaining_qty_po_uom  := x_remaining_qty_po_uom - x_converted_trx_qty;
                                -- change asn uom qty so both qtys are in sync

		/* Bug 5203841.
		 * In complex work POs,there is a case where the rate based
		 * PO shipment has matching_basis as Quantity based. But
		 * item_id is null. Since there is no uom conversion in
		 * the case of complex work POs, the old code would
		 * return the original quantity whereas the new one
		 * errors out. Reverting to old code for complex work POs.
		*/
		if ( l_complex_flag = 'Y' ) then --{
                             x_remaining_quantity    :=
					 rcv_transactions_interface_sv.convert_into_correct_qty(
			       x_remaining_qty_po_uom,
                               x_shipmentdistributionrec.unit_meas_lookup_code,
                               temp_cascaded_table(1).item_id,
                               temp_cascaded_table(1).unit_of_measure);

	       else --}{
                                -- Bug 4898703
                                x_remaining_quantity    := x_remaining_qty_po_uom * po_uom_s.po_uom_convert(x_shipmentdistributionrec.unit_meas_lookup_code,
                                                                                                            temp_cascaded_table(1).unit_of_measure,
                            temp_cascaded_table(1).item_id );
		end if; -- 5203841 }
                                insert_into_table       := TRUE;
                            ELSE --} {
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('We are in <= Qty branch ');
                                END IF;

                                x_converted_trx_qty     := x_remaining_qty_po_uom;
                                insert_into_table       := TRUE;
                                x_remaining_qty_po_uom  := 0;
                                x_remaining_quantity    := 0;
                            END IF; --}
                        ELSE -- no qty for this record but if last row we need it } {
                            IF rows_fetched = x_record_count THEN                                                           --{ last row needs to be inserted anyway
                                                                  -- so that the row can be used based on qty tolerance checks
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('Quantity is less then 0 but last record');
                                END IF;

                                insert_into_table    := TRUE;
                                x_converted_trx_qty  := 0;
                            ELSE --} {
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('<= 0 Quantity but more records in cursor');
                                END IF;

                                x_remaining_qty_po_uom  := 0; -- we may have a diff uom on the next iteration

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('We have to deal with remaining_qty > 0 and x_converted_trx_qty -ve');
                                END IF;

                                insert_into_table       := FALSE;
                            END IF; --}
                        END IF; --}
                    END IF; --} remaining_qty_po_uom <> 0

                    IF insert_into_table THEN --{
                        IF (x_first_trans) THEN --{
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('First Time ' || TO_CHAR(current_n));
                            END IF;

                            x_first_trans  := FALSE;

                            IF NVL(temp_cascaded_table(current_n).vendor_cum_shipped_qty, 0) <> 0 THEN --{
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('The cum qty from vendor is ' || TO_CHAR(temp_cascaded_table(current_n).vendor_cum_shipped_qty));
                                END IF;

                                /* The vendor sends us cum_qty which also includes the current shipment ???.
                                   We need to allocate the correct cum_qty to each row as the cascade happens
                                   The algorithm is as follows
                                    reset cum_qty = cum_qty - total_shipped_qty (x_bkp_qty) in the 1st run
                                    Later reset cum_qty = cum_qty +  primary_qty for each insert.Since we always
                                    copy the previous record this should work pretty well */

		/* Bug 5203841.
		 * In complex work POs,there is a case where the rate based
		 * PO shipment has matching_basis as Quantity based. But
		 * item_id is null. Since there is no uom conversion in
		 * the case of complex work POs, the old code would
		 * return the original quantity whereas the new one
		 * errors out. Reverting to old code for complex work POs.
		*/
		if ( l_complex_flag = 'Y' ) then --{
                               temp_cascaded_table(current_n).vendor_cum_shipped_qty  :=
		  temp_cascaded_table(current_n).vendor_cum_shipped_qty
          		- rcv_transactions_interface_sv.convert_into_correct_qty
					(x_bkp_qty,
					 temp_cascaded_table(current_n).unit_of_measure,
					 temp_cascaded_table(current_n).item_id,
					 temp_cascaded_table(current_n).primary_unit_of_measure);

			else --}{
                                -- Bug 4898703
                                temp_cascaded_table(current_n).vendor_cum_shipped_qty  :=   temp_cascaded_table(current_n).vendor_cum_shipped_qty
                                                                                          - (x_bkp_qty * po_uom_s.po_uom_convert(temp_cascaded_table(current_n).unit_of_measure,
                                                                                                                                 temp_cascaded_table(current_n).primary_unit_of_measure,
                                                                                                                                 temp_cascaded_table(current_n).item_id
                                           ));
			end if; -- 5203841 }

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('Cum qty - current shipment ' || TO_CHAR(temp_cascaded_table(current_n).vendor_cum_shipped_qty));
                                END IF;
                            END IF; --}
                        ELSE --} { ! x_first_trans
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('Next Time ' || TO_CHAR(current_n));
                            END IF;

                            temp_cascaded_table(current_n)  := temp_cascaded_table(current_n - 1);
                        END IF; --} matches x_first_transfer

                        /* source_doc_quantity -> in po_uom
                          primary_quantity    -> in primary_uom
                          cum_qty             -> in primary_uom
                          quantity,quantity_shipped -> in ASN uom */
                        temp_cascaded_table(current_n).source_doc_quantity         := x_converted_trx_qty; -- in po uom
                        temp_cascaded_table(current_n).source_doc_unit_of_measure  := x_shipmentdistributionrec.unit_meas_lookup_code;
                             -- bug 1363369 fix carried forward FROM bug# 1337314
                        -- No need to do the following conversion if the cursor returns one row
                        -- for a corresponding record in the interface, as the quantity is already in asn uom.
                        -- If the cursor fetches more than one row then the quantity in the interface will be
                        -- distributed accross the fetched rows and hence need to do the following conversion.
                        --IF x_record_count > 1 THEN -- {

		/* Bug 5203841.
		 * In complex work POs,there is a case where the rate based
		 * PO shipment has matching_basis as Quantity based. But
		 * item_id is null. Since there is no uom conversion in
		 * the case of complex work POs, the old code would
		 * return the original quantity whereas the new one
		 * errors out. Reverting to old code for complex work POs.
		*/
		if ( l_complex_flag = 'Y' ) then --{
                        temp_cascaded_table(current_n).quantity                    := rcv_transactions_interface_sv.convert_into_correct_qty(x_converted_trx_qty,

                                                             x_shipmentdistributionrec.unit_meas_lookup_code,

                                                             temp_cascaded_table(current_n).item_id,

                                                             temp_cascaded_table(current_n).unit_of_measure

                                                            );     -- in asn uom
                                                  --END IF; --}
			else --}{
                        -- Bug 4898703 - START {
                        temp_cascaded_table(current_n).quantity                    := x_converted_trx_qty * po_uom_s.po_uom_convert(x_shipmentdistributionrec.unit_meas_lookup_code,
                                                                                                                                    temp_cascaded_table(current_n).unit_of_measure,
                                                                                                                                    temp_cascaded_table(current_n).item_id
                                                                                                                                    );     -- in asn uom
                                                  --END IF; --}
                     if ( x_shipmentdistributionrec.unit_meas_lookup_code <> temp_cascaded_table(current_n).unit_of_measure) then   -- Bug 9701360
                        temp_cascaded_table(current_n).quantity := round(temp_cascaded_table(current_n).quantity, 6);
                     end if;
			end if; -- 5203841 }
                        temp_cascaded_table(current_n).quantity_shipped            := temp_cascaded_table(current_n).quantity; -- in asn uom

                                                                                                                               -- Primary qty in Primary UOM
		/* Bug 5203841.
		 * In complex work POs,there is a case where the rate based
		 * PO shipment has matching_basis as Quantity based. But
		 * item_id is null. Since there is no uom conversion in
		 * the case of complex work POs, the old code would
		 * return the original quantity whereas the new one
		 * errors out. Reverting to old code for complex work POs.
		*/
		if ( l_complex_flag = 'Y' ) then --{
                        temp_cascaded_table(current_n).primary_quantity            := rcv_transactions_interface_sv.convert_into_correct_qty(x_converted_trx_qty,
                                                                                                                                             x_shipmentdistributionrec.unit_meas_lookup_code,

                                                             temp_cascaded_table(current_n).item_id,

                                                             temp_cascaded_table(current_n).primary_unit_of_measure

                                                            );



		else -- }{
                        temp_cascaded_table(current_n).primary_quantity            := x_converted_trx_qty * po_uom_s.po_uom_convert(x_shipmentdistributionrec.unit_meas_lookup_code,
                                                                                                                                    temp_cascaded_table(current_n).primary_unit_of_measure,
                                                                                                                                    temp_cascaded_table(current_n).item_id
                                                                                                                                    );
                    if ( x_shipmentdistributionrec.unit_meas_lookup_code <>  temp_cascaded_table(current_n).primary_unit_of_measure) then -- Bug 9701360
                        temp_cascaded_table(current_n).primary_quantity := round(temp_cascaded_table(current_n).primary_quantity,6);
                    end if;

			end if; -- 5203841 }
                        -- Bug 4898703 - END }

                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('primary_qty ' || temp_cascaded_table(current_n).primary_quantity);
                            asn_debug.put_line('quantity ' || temp_cascaded_table(current_n).quantity);
                        END IF;

                        -- Assuming vendor_cum_shipped_qty is in PRIMARY UOM
                        IF NVL(temp_cascaded_table(current_n).vendor_cum_shipped_qty, 0) <> 0 THEN --{
                            temp_cascaded_table(current_n).vendor_cum_shipped_qty  := temp_cascaded_table(current_n).vendor_cum_shipped_qty + temp_cascaded_table(current_n).primary_quantity;
                        END IF; --}

                        temp_cascaded_table(current_n).inspection_status_code      := 'NOT INSPECTED';
                        temp_cascaded_table(current_n).interface_source_code       := NVL(temp_cascaded_table(current_n).interface_source_code,'RCV'); -- Bug 10127806
                        temp_cascaded_table(current_n).currency_code               := x_shipmentdistributionrec.currency_code;
                        temp_cascaded_table(current_n).po_unit_price               := x_shipmentdistributionrec.unit_price;
                        temp_cascaded_table(current_n).tax_amount                  := ROUND(temp_cascaded_table(current_n).quantity * tax_amount_factor, 4);

                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Current Tax Amount ' || TO_CHAR(temp_cascaded_table(current_n).tax_amount));
                        END IF;

                        temp_cascaded_table(current_n).category_id                 := x_shipmentdistributionrec.category_id;
                        temp_cascaded_table(current_n).item_description            := x_shipmentdistributionrec.item_description;
                        temp_cascaded_table(current_n).unit_of_measure_class       := x_shipmentdistributionrec.unit_of_measure_class;

                        IF temp_cascaded_table(current_n).to_organization_id IS NULL THEN --{
                            temp_cascaded_table(current_n).to_organization_id  := x_shipmentdistributionrec.ship_to_organization_id;
                        END IF; --}

                        temp_cascaded_table(current_n).po_line_id                  := x_shipmentdistributionrec.po_line_id;
                        temp_cascaded_table(current_n).po_line_location_id         := x_shipmentdistributionrec.line_location_id;
                        temp_cascaded_table(current_n).shipment_line_id            := x_shipmentdistributionrec.shipment_line_id;

                        IF x_shipmentdistributionrec.enforce_ship_to_location_code = 'WARNING' THEN --{
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('Message to warn about different shiptolocations');
                            END IF;
                        END IF; --}

                        /* ksareddy - 2329928 Ported changes by bao in branch to cache set_of_books_id */
                        /* Bug#17088563 fetch set_of_books_id every time since the cache may be incorrect when two RTP run in same db session */
                        -- IF (rcv_transactions_interface_sv.x_set_of_books_id IS NULL) THEN --Bug#17088563
                            SELECT set_of_books_id
                            INTO   rcv_transactions_interface_sv.x_set_of_books_id
                            FROM   financials_system_parameters;
                        --END IF; --Bug#17088563

                        x_sob_id                                                   := rcv_transactions_interface_sv.x_set_of_books_id;
                        /* Bug 1845702
                          * Currency rate and date can be changed at the time of receipt
                          * depending on the profile ALLOW_RATE_OVERRIDE_FOR_USER_RATE_TYPE.
                          * This was not handled in the open interface. Introduced code
                          * to handle the changes at the time of receipt
                          */
                        /* Bug#3746516 Added the following if condition so as to get the value of the profile
                        ** option only when the match option is receipt and thus to avoid executing the below
                        ** function call always.
                        */
                        IF (x_ShipmentDistributionRec.match_option = 'R') THEN
                            x_allow_rate_override := NVL(fnd_profile.value('ALLOW_RATE_OVERRIDE_FOR_USER_RATE_TYPE'), 'N');
                        END IF;

         IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Match Option:' || x_ShipmentDistributionRec.match_option ||
                                'Profile value ALLOW_RATE_OVERRIDE_FOR_USER_RATE_TYPE:' ||
                      x_allow_rate_override);
                        END IF;

                       /* Bug#3746516 - START
                       ** Modified the following code to consider all the possible scenarios such that the
                       ** rate and the rate date values will be derived correctly and the correct rate and
                       ** rate date values will now be posted in rcv_transactions table so that there will
                       ** not be any discrepency in the calculations and hence all the data between the two
                       ** tables rcv_transactions and rcv_receiving_sub_ledger will be in sync. */

                       BEGIN

                          SELECT count(po_distribution_id),max(rate),max(rate_date)
                          INTO l_dist_count,x_rate,l_rate_date
                          FROM po_distributions
                          WHERE line_location_id = x_ShipmentDistributionRec.line_location_id
                          HAVING count(po_distribution_id) = 1;

                       EXCEPTION
                           WHEN NO_DATA_FOUND THEN
                                l_dist_count := 2;
                       END;

                       IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('No of Distributions:' || l_dist_count ||
                                ':: Rate and Rate_date in po distributions' || x_rate ||
                      '::' || l_rate_date);
                       END IF;

                       IF (x_ShipmentDistributionRec.match_option = 'P') THEN --{

                           IF (l_dist_count = 1) THEN --{
                              temp_cascaded_table(current_n).currency_conversion_date  := l_rate_date;
                              temp_cascaded_table(current_n).currency_conversion_rate  := x_rate;
                           ELSE
                              temp_cascaded_table(current_n).currency_conversion_date  := x_ShipmentDistributionRec.rate_date;
                              temp_cascaded_table(current_n).currency_conversion_rate  := x_ShipmentDistributionRec.rate;
                           END IF; --}

                       /* Bug 13013727 Modified the following code to handle the cases where Match Option is 'Receipt'.
                          The Rate Date needs to be defaulted from Transaction Date for such cases, and NOT from PO_DISTRIBUTIONS.
                          Also, the corresponding Rate needs to be calculated in case of Rate Type <> 'User'. */
                       ELSIF (x_ShipmentDistributionRec.match_option = 'R') THEN

                           IF (x_ShipmentDistributionRec.rate_type = 'User') THEN --{

                               IF ( x_allow_rate_override ='N') THEN --{

                                   IF (l_dist_count = 1) THEN --{
                                       temp_cascaded_table(current_n).currency_conversion_date  :=
                                                         nvl(temp_cascaded_table(current_n).currency_conversion_date,x_cascaded_table(n).transaction_date);
                                       temp_cascaded_table(current_n).currency_conversion_rate  := x_rate;
                                   ELSE
                                       temp_cascaded_table(current_n).currency_conversion_date  :=
                                                         nvl(temp_cascaded_table(current_n).currency_conversion_date,x_cascaded_table(n).transaction_date);
                                       temp_cascaded_table(current_n).currency_conversion_rate  := x_ShipmentDistributionRec.rate;
                                   END IF; --}

                               ELSIF ( x_allow_rate_override ='Y') THEN

                                   IF (l_dist_count = 1) THEN --{
                                       temp_cascaded_table(current_n).currency_conversion_date  :=
                                                         nvl(temp_cascaded_table(current_n).currency_conversion_date,x_cascaded_table(n).transaction_date);
                                       temp_cascaded_table(current_n).currency_conversion_rate  :=
                                                         nvl(temp_cascaded_table(current_n).currency_conversion_rate,x_rate);
                                   ELSE
                                       temp_cascaded_table(current_n).currency_conversion_date  :=
                                                         nvl(temp_cascaded_table(current_n).currency_conversion_date,x_cascaded_table(n).transaction_date);
                                       temp_cascaded_table(current_n).currency_conversion_rate  :=
                                                         nvl(temp_cascaded_table(current_n).currency_conversion_rate,x_ShipmentDistributionRec.rate);
                                   END IF; --}
                               END IF; --}

                           ELSE

                               IF ( temp_cascaded_table(current_n).currency_conversion_date IS NOT NULL ) THEN --{
                                   /* Bug 13013727 Calculating the corresponding Rate here. Modified code to handle the exception and log a
                                      message into the log file if there is no Rate defined for the particular Rate Date and Rate Type */
                                   BEGIN
                                       x_rate := gl_currency_api.get_rate(x_sob_Id,
                                                                      x_ShipmentDistributionRec.currency_code,
                                                                      temp_cascaded_table(current_n).currency_conversion_date,
                                                                      x_ShipmentDistributionRec.rate_type);
                                       x_rate := round(x_rate,28);
                                       temp_cascaded_table(current_n).currency_conversion_rate  := x_rate;
                                   EXCEPTION
                                   WHEN OTHERS THEN
                                       IF (g_asn_debug = 'Y') THEN
                                           asn_debug.put_line('Exception 1 ::'||SQLERRM||':: occurred while deriving the rate for currency_conversion_date : '||temp_cascaded_table(current_n).currency_conversion_date
                                                              ||' for the rate type : '||x_ShipmentDistributionRec.rate_type);
                                           asn_debug.put_line('The rate returned is : '||temp_cascaded_table(current_n).currency_conversion_rate);
                                       END IF;
                                       RAISE;
                                   END;
                               ELSE
                                   /* Bug 13013727 Calculating the corresponding Rate here. Modified code to handle the exception and log a
                                      message into the log file if there is no Rate defined for the particular Rate Date and Rate Type */
                                   BEGIN
                                       temp_cascaded_table(current_n).currency_conversion_date  := x_cascaded_table(n).transaction_date;
                                       x_rate := gl_currency_api.get_rate(x_sob_Id,
                                                                      x_ShipmentDistributionRec.currency_code,
                                                                      temp_cascaded_table(current_n).currency_conversion_date,
                                                                      x_ShipmentDistributionRec.rate_type);
                                       x_rate := round(x_rate,28);
                                       temp_cascaded_table(current_n).currency_conversion_rate  := x_rate;
                                   EXCEPTION
                                   WHEN OTHERS THEN
                                       IF (g_asn_debug = 'Y') THEN
                                           asn_debug.put_line('Exception 2 ::'||SQLERRM||':: occurred while deriving the rate for currency_conversion_date : '||temp_cascaded_table(current_n).currency_conversion_date
                                                              ||' for the rate type : '||x_ShipmentDistributionRec.rate_type);
                                           asn_debug.put_line('The rate returned is : '||temp_cascaded_table(current_n).currency_conversion_rate);
                                       END IF;
                                       RAISE;
                                   END;
                               END IF; --}

                           END IF; --}

                       END IF; --}
                       /* End of fix for Bug 13013727 */

                       temp_cascaded_table(current_n).currency_conversion_type := x_ShipmentDistributionRec.rate_type;

                       IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Rate, Rate type and Rate_date ::' ||
                                temp_cascaded_table(current_n).currency_conversion_rate ||
                      '::' || temp_cascaded_table(current_n).currency_conversion_type ||
                      '::' || temp_cascaded_table(current_n).currency_conversion_date);
                       END IF;

                       /* Bug#3746516 - END */

                                -- Copy the distribution specific information only if this is a direct receipt.

                        IF (   x_cascaded_table(n).transaction_type = 'DELIVER'
                            OR NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') = 'DELIVER') THEN --{
                            temp_cascaded_table(current_n).po_distribution_id          := x_shipmentdistributionrec.po_distribution_id;
                            temp_cascaded_table(current_n).charge_account_id           := x_shipmentdistributionrec.code_combination_id;
                            temp_cascaded_table(current_n).req_distribution_id         := x_shipmentdistributionrec.req_distribution_id;
                            --temp_cascaded_table(current_n).currency_conversion_date  := x_ShipmentDistributionRec.rate_date;
                            --temp_cascaded_table(current_n).currency_conversion_rate  := x_ShipmentDistributionRec.rate;
                            temp_cascaded_table(current_n).destination_type_code       := x_shipmentdistributionrec.destination_type_code;
                            temp_cascaded_table(current_n).destination_context         := x_shipmentdistributionrec.destination_type_code;

                            IF (NVL(temp_cascaded_table(current_n).deliver_to_location_id, 0) = 0) THEN
                                temp_cascaded_table(current_n).deliver_to_location_id  := x_shipmentdistributionrec.deliver_to_location_id;
                            END IF;

                            /* Bug 2392074 - If the deliver_to_person mentioned in the po_distributions is
                            invalid or inactive at the time of Receipt we need to clear the deliver to person,
                            as this is an optional field. */
                            IF (NVL(temp_cascaded_table(current_n).deliver_to_person_id, 0) = 0) THEN --{
                                temp_cascaded_table(current_n).deliver_to_person_id  := x_shipmentdistributionrec.deliver_to_person_id;

                                IF (temp_cascaded_table(current_n).deliver_to_person_id IS NOT NULL) THEN --{
                                    BEGIN
                                        SELECT NVL(MAX(hre.full_name), 'notfound')
                                        INTO   x_full_name
                                        FROM   hr_employees_current_v hre
                                        WHERE  (   hre.inactive_date IS NULL
                                                OR hre.inactive_date > SYSDATE)
                                        AND    hre.employee_id = temp_cascaded_table(current_n).deliver_to_person_id;

                                        IF (x_full_name = 'notfound') THEN
                                            temp_cascaded_table(current_n).deliver_to_person_id  := NULL;
                                        END IF;
                                    EXCEPTION
                                        WHEN NO_DATA_FOUND THEN
                                            temp_cascaded_table(current_n).deliver_to_person_id  := NULL;

                                            IF (g_asn_debug = 'Y') THEN
                                                asn_debug.put_line('The deliver to person entered in  PO is currently inactive');
                                                asn_debug.put_line(' So it is cleared off');
                                            END IF;
                                        WHEN OTHERS THEN
                                            temp_cascaded_table(current_n).deliver_to_person_id  := NULL;

                                            IF (g_asn_debug = 'Y') THEN
                                                asn_debug.put_line('Some exception has occured');
                                                asn_debug.put_line('This exception is due to the PO deliver to person');
                                                asn_debug.put_line('The deliver to person is optional');
                                                asn_debug.put_line('So cleared off the deliver to person');
                                            END IF;
                                    END;
                                END IF; --}
                            END IF; --}

                            IF (temp_cascaded_table(current_n).subinventory IS NULL) THEN
                                temp_cascaded_table(current_n).subinventory  := x_shipmentdistributionrec.destination_subinventory;

                                /* Bug3993867 - START
                                ** Added the call to procedure derive_to_locator_id() here
                                ** so that incases where subinventory and
                                ** locator_id are not populated into RTI, locator_id could be
                                ** derived at this point as the subinventory is known now.
                                */
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('Derived Subinventory from PO Distribution:' || temp_cascaded_table(current_n).subinventory);
                                END IF;

                                derive_to_locator_id(temp_cascaded_table, current_n);

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('Derived Locator_ID:' || temp_cascaded_table(current_n).locator_id);
                                END IF;

                                /* Bug3993867 - END */

                            END IF;

                            temp_cascaded_table(current_n).wip_entity_id               := x_shipmentdistributionrec.wip_entity_id;
                            temp_cascaded_table(current_n).wip_operation_seq_num       := x_shipmentdistributionrec.wip_operation_seq_num;
                            temp_cascaded_table(current_n).wip_resource_seq_num        := x_shipmentdistributionrec.wip_resource_seq_num;
                            temp_cascaded_table(current_n).wip_repetitive_schedule_id  := x_shipmentdistributionrec.wip_repetitive_schedule_id;
                            temp_cascaded_table(current_n).wip_line_id                 := x_shipmentdistributionrec.wip_line_id;
                            temp_cascaded_table(current_n).bom_resource_id             := x_shipmentdistributionrec.bom_resource_id;
              /*Bug16825496*/
              IF (g_asn_debug = 'Y') THEN
               asn_debug.put_line('Dropship Flag :'|| x_drop_ship_flag);
               asn_debug.put_line('Auto-Delivery Flag :'|| x_auto_deliver);
              END IF ;


                  IF x_drop_ship_flag = 'Y' THEN
                     IF x_auto_deliver = 'Y' THEN
                      IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('It is a dropship PO and auto-delivery is Y , we will copy Proj and task from x_shipmentdistributionrec ');
                      END IF;

                            temp_cascaded_table(current_n).project_id := x_shipmentdistributionrec.project_id; /* Bug 14725305 */
                            temp_cascaded_table(current_n).task_id    := x_shipmentdistributionrec.task_id; /* Bug 14725305 */
                    END IF; -- end auto deliver
                  END IF; -- end drop_ship_flag = 'Y' (external dropship)

              /*End Bug16825496*/
                            -- bug 1361786
                            IF (temp_cascaded_table(current_n).ussgl_transaction_code IS NULL) THEN
                                temp_cascaded_table(current_n).ussgl_transaction_code  := x_shipmentdistributionrec.ussgl_transaction_code;
                            END IF;
                        END IF; --} matches txn != deliver

                        current_n                                                  := current_n + 1;

                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Increment pointer by 1 ' || TO_CHAR(current_n));
                        END IF;
                    END IF; --} matches if insert into table
                END IF; --} matches shipmentdistributionrec.receipt_days_exception_code = none
            END LOOP; --}
        ELSE        --} {
             -- error_status and error_message are set after validate_quantity_shipped
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('No shipment_header_id/po_header_id/item_id ');
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Status = ' || x_cascaded_table(n).error_status);
            END IF;

            IF x_cascaded_table(n).error_status IN('S', 'W', 'F') THEN --{
                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                rcv_error_pkg.set_error_message('RCV_ASN_NO_PO_LINE_LOCATION_ID', x_cascaded_table(n).error_message);
                rcv_error_pkg.set_token('DOCUMENT_NUM', x_cascaded_table(n).document_num);
                rcv_error_pkg.log_interface_error('DOCUMENT_NUM', FALSE);
            END IF; --}

            RETURN;
        END IF; -- } of (asn quantity_shipped was valid)

                -- OPM change.Bug# 3061052
                -- if original receiving transaction line is split and secondary quantity is specified then
                -- set secondary quantity for the split lines to NULL.In such a case,secondary quantity for the
                -- split lines will be calculating by the system in opm_roi_grp.validate_lot API.
        /* INVCONV , It checks for OPM insatallation. This needs to be removed , Punit Kumar */

        IF  /*   gml_process_flags.opm_installed = 1
           AND*/ x_cascaded_table(n).secondary_quantity IS NOT NULL THEN
            IF temp_cascaded_table.COUNT > 1 THEN
                FOR j IN 1 .. temp_cascaded_table.COUNT LOOP
                    temp_cascaded_table(j).secondary_quantity  := NULL;
                END LOOP;
            END IF;
        END IF;

        IF shipments%ISOPEN THEN
            CLOSE shipments;
        END IF;

        IF count_shipments%ISOPEN THEN
            CLOSE count_shipments;
        END IF;

        IF distributions%ISOPEN THEN
            CLOSE distributions;
        END IF;

        IF count_distributions%ISOPEN THEN
            CLOSE count_distributions;
        END IF;

        IF asn_shipments%ISOPEN THEN
            CLOSE asn_shipments;
        END IF;

        IF count_asn_shipments%ISOPEN THEN
            CLOSE count_asn_shipments;
        END IF;

        IF asn_distributions%ISOPEN THEN
            CLOSE asn_distributions;
        END IF;

        IF count_asn_distributions%ISOPEN THEN
            CLOSE count_asn_distributions;
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Exit explode_line_quantity');
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Exception in derive_vendor_rcv_line_qty');
            END IF;

            IF shipments%ISOPEN THEN
                CLOSE shipments;
            END IF;

            IF count_shipments%ISOPEN THEN
                CLOSE count_shipments;
            END IF;

            IF distributions%ISOPEN THEN
                CLOSE distributions;
            END IF;

            IF count_distributions%ISOPEN THEN
                CLOSE count_distributions;
            END IF;

            IF asn_shipments%ISOPEN THEN
                CLOSE asn_shipments;
            END IF;

            IF count_asn_shipments%ISOPEN THEN
                CLOSE count_asn_shipments;
            END IF;

            IF asn_distributions%ISOPEN THEN
                CLOSE asn_distributions;
            END IF;

            IF count_asn_distributions%ISOPEN THEN
                CLOSE count_asn_distributions;
            END IF;

            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('derive_vendor_rcv_line_qty', x_progress);
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line(TO_CHAR(n));
                asn_debug.put_line(SQLERRM);
                asn_debug.put_line('error ' || x_progress);
            END IF;
    END derive_vendor_rcv_line_qty;

    PROCEDURE derive_vendor_rcv_line_amt(
        x_cascaded_table    IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                   IN OUT NOCOPY BINARY_INTEGER,
        temp_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        x_header_record     IN            rcv_roi_preprocessor.header_rec_type
    ) IS
        x_include_closed_po       VARCHAR2(1); -- Bug 1887728

        CURSOR shipments(
            v_po_line_id          NUMBER,
            v_po_line_location_id NUMBER,
            v_po_release_id       NUMBER
        ) IS
            SELECT   pll.line_location_id,
                     NVL(pll.promised_date, pll.need_by_date) promised_date,
                     pll.ship_to_organization_id,
                     pll.amount amount_ordered,
                     pll.amount_shipped ,
                     pll.receipt_days_exception_code,
                     pll.qty_rcv_tolerance,
                     pll.qty_rcv_exception_code,
                     pll.days_early_receipt_allowed,
                     pll.days_late_receipt_allowed,
                     pll.match_option,
                     pl.job_id,
                     pl.po_line_id,
                     ph.currency_code,
                     ph.rate_type,
                     0 po_distribution_id,
                     0 code_combination_id,
                     0 req_distribution_id,
                     0 deliver_to_location_id,
                     0 deliver_to_person_id,
                     ph.rate_date rate_date,
                     ph.rate rate,
                     '' destination_type_code,
                     0 destination_organization_id,
                     '' destination_subinventory,
                     0 wip_entity_id,
                     0 wip_operation_seq_num,
                     0 wip_resource_seq_num,
                     0 wip_repetitive_schedule_id,
                     0 wip_line_id,
                     0 bom_resource_id,
                     '' ussgl_transaction_code,
                     pll.ship_to_location_id,
                     NVL(pll.enforce_ship_to_location_code, 'NONE') enforce_ship_to_location_code,
                     pl.item_id
            FROM     po_line_locations pll,
                     po_lines pl,
                     po_headers ph
            WHERE    pl.po_line_id = v_po_line_id
            AND      pll.po_line_id = v_po_line_id
            AND      ph.po_header_id = pl.po_header_id
            AND      pll.line_location_id = NVL(v_po_line_location_id, pll.line_location_id)
            AND      NVL(pll.po_release_id, 0) = NVL(v_po_release_id, NVL(pll.po_release_id, 0))
            AND      NVL(pll.approved_flag, 'N') = 'Y'
            AND      NVL(pll.cancel_flag, 'N') = 'N'
            AND      (   (    NVL(x_include_closed_po, 'N') = 'Y'
                          AND NVL(pll.closed_code, 'OPEN') <> 'FINALLY CLOSED')
                      OR (    NVL(x_include_closed_po, 'N') = 'N'
                          AND (NVL(pll.closed_code, 'OPEN') NOT IN('FINALLY CLOSED', 'CLOSED', 'CLOSED FOR RECEIVING'))))
            AND      pll.shipment_type IN('STANDARD', 'BLANKET', 'SCHEDULED','PREPAYMENT')
            AND      ( pll.payment_type is null or
			           pll.payment_type is not null and pll.payment_type <> 'ADVANCE') /* Complex PO Receiving ER */
            ORDER BY NVL(pll.promised_date, pll.need_by_date);

        CURSOR count_shipments(
            v_po_line_id          NUMBER,
            v_po_line_location_id NUMBER,
            v_po_release_id       NUMBER
        ) IS
            SELECT COUNT(*)
            FROM   po_line_locations pll,
                   po_lines pl,
                   po_headers ph
            WHERE  pl.po_line_id = v_po_line_id
            AND    pll.po_line_id = v_po_line_id
            AND    ph.po_header_id = pl.po_header_id
            AND    pll.line_location_id = NVL(v_po_line_location_id, pll.line_location_id)
            AND    NVL(pll.po_release_id, 0) = NVL(v_po_release_id, NVL(pll.po_release_id, 0))
            AND    NVL(pll.approved_flag, 'N') = 'Y'
            AND    NVL(pll.cancel_flag, 'N') = 'N'
            AND    (   (    NVL(x_include_closed_po, 'N') = 'Y'
                        AND NVL(pll.closed_code, 'OPEN') <> 'FINALLY CLOSED')
                    OR (    NVL(x_include_closed_po, 'N') = 'N'
                        AND (NVL(pll.closed_code, 'OPEN') NOT IN('FINALLY CLOSED', 'CLOSED', 'CLOSED FOR RECEIVING'))))
            AND    pll.shipment_type IN('STANDARD', 'BLANKET', 'SCHEDULED','PREPAYMENT')
            AND   ( pll.payment_type is null or
                    pll.payment_type is not null and pll.payment_type <> 'ADVANCE');  /* Complex PO Receiving ER */

        CURSOR distributions(
            v_po_line_id          NUMBER,
            v_po_line_location_id NUMBER,
            v_po_distribution_id  NUMBER,
            v_po_release_id       NUMBER
        ) IS
            SELECT   pll.line_location_id,
                     NVL(pll.promised_date, pll.need_by_date) promised_date,
                     pll.ship_to_organization_id,
                     pll.amount amount_ordered,
                     pll.amount_shipped,
                     pll.receipt_days_exception_code,
                     pll.qty_rcv_tolerance,
                     pll.qty_rcv_exception_code,
                     pll.days_early_receipt_allowed,
                     pll.days_late_receipt_allowed,
                     pll.match_option,
                     pl.job_id,
                     pl.po_line_id,
                     ph.currency_code,
                     ph.rate_type,
                     pod.po_distribution_id,
                     pod.code_combination_id,
                     pod.req_distribution_id,
                     pod.deliver_to_location_id,
                     pod.deliver_to_person_id,
                     pod.rate_date,
                     pod.rate,
                     pod.destination_type_code,
                     pod.destination_organization_id,
                     pod.destination_subinventory,
                     pod.wip_entity_id,
                     pod.wip_operation_seq_num,
                     pod.wip_resource_seq_num,
                     pod.wip_repetitive_schedule_id,
                     pod.wip_line_id,
                     pod.bom_resource_id,
                     pod.ussgl_transaction_code,
                     pll.ship_to_location_id,
                     NVL(pll.enforce_ship_to_location_code, 'NONE') enforce_ship_to_location_code,
                     pl.item_id
            FROM     po_distributions pod,
                     po_line_locations pll,
                     po_lines pl,
                     po_headers ph
            WHERE    pl.po_line_id = v_po_line_id
            AND      pll.po_line_id = v_po_line_id
            AND      ph.po_header_id = pl.po_header_id
            AND      pod.line_location_id = pll.line_location_id
            AND      pll.line_location_id = NVL(v_po_line_location_id, pll.line_location_id)
            AND      pod.po_distribution_id = NVL(v_po_distribution_id, pod.po_distribution_id)
            AND      NVL(pll.po_release_id, 0) = NVL(v_po_release_id, NVL(pll.po_release_id, 0))
            AND      NVL(pll.approved_flag, 'N') = 'Y'
            AND      NVL(pll.cancel_flag, 'N') = 'N'
            AND      (   (    NVL(x_include_closed_po, 'N') = 'Y'
                          AND NVL(pll.closed_code, 'OPEN') <> 'FINALLY CLOSED')
                      OR (    NVL(x_include_closed_po, 'N') = 'N'
                          AND (NVL(pll.closed_code, 'OPEN') NOT IN('FINALLY CLOSED', 'CLOSED', 'CLOSED FOR RECEIVING'))))
            AND      pll.shipment_type IN('STANDARD', 'BLANKET', 'SCHEDULED','PREPAYMENT')
            AND      ( pll.payment_type is null or
					   pll.payment_type is not null and pll.payment_type <> 'ADVANCE')   /* Complex PO Receiving ER */
            ORDER BY NVL(pll.promised_date, pll.need_by_date);

        CURSOR count_distributions(
            v_po_line_id          NUMBER,
            v_po_line_location_id NUMBER,
            v_po_distribution_id  NUMBER,
            v_po_release_id       NUMBER
        ) IS
            SELECT COUNT(*)
            FROM   po_distributions pod,
                   po_line_locations pll,
                   po_lines pl,
                   po_headers ph
            WHERE  pl.po_line_id = v_po_line_id
            AND    pll.po_line_id = v_po_line_id
            AND    ph.po_header_id = pl.po_header_id
            AND    pod.line_location_id = pll.line_location_id
            AND    pll.line_location_id = NVL(v_po_line_location_id, pll.line_location_id)
            AND    pod.po_distribution_id = NVL(v_po_distribution_id, pod.po_distribution_id)
            AND    NVL(pll.po_release_id, 0) = NVL(v_po_release_id, NVL(pll.po_release_id, 0))
            AND    NVL(pll.approved_flag, 'N') = 'Y'
            AND    NVL(pll.cancel_flag, 'N') = 'N'
            AND    (   (    NVL(x_include_closed_po, 'N') = 'Y'
                        AND NVL(pll.closed_code, 'OPEN') <> 'FINALLY CLOSED')
                    OR (    NVL(x_include_closed_po, 'N') = 'N'
                        AND (NVL(pll.closed_code, 'OPEN') NOT IN('FINALLY CLOSED', 'CLOSED', 'CLOSED FOR RECEIVING'))))
            AND    pll.shipment_type IN('STANDARD', 'BLANKET', 'SCHEDULED','PREPAYMENT')
            AND   ( pll.payment_type is null or
                    Pll.payment_type is not null and pll.payment_type <> 'ADVANCE');   /* Complex PO Receiving ER */

        /*
        ** Debug: had to change this to the distribution record
        ** Might be a compatibility issue between the two record definitions
        */
        x_shipmentdistributionrec distributions%ROWTYPE;
        x_record_count            NUMBER;
        x_remaining_amount        NUMBER                                                  := 0;
        x_progress                VARCHAR2(3);
        x_to_organization_code    VARCHAR2(5);
        x_converted_trx_amt       NUMBER                                                  := 0;
        transaction_ok            BOOLEAN                                                 := FALSE;
        x_expected_date           rcv_transactions_interface.expected_receipt_date%TYPE;
        high_range_date           DATE;
        low_range_date            DATE;
        rows_fetched              NUMBER                                                  := 0;
        x_tolerable_amt           NUMBER                                                  := 0;
        x_first_trans             BOOLEAN                                                 := TRUE;
        x_sysdate                 DATE                                                    := SYSDATE;
        current_n                 BINARY_INTEGER                                          := 0;
        insert_into_table         BOOLEAN                                                 := FALSE;
        x_qty_rcv_exception_code  po_line_locations.qty_rcv_exception_code%TYPE;
        tax_amount_factor         NUMBER;
        lastrecord                BOOLEAN                                                 := FALSE;
        already_allocated_amt     NUMBER                                                  := 0;
        x_release_id              NUMBER;
        x_approved_flag           VARCHAR(1);
        x_cancel_flag             VARCHAR(1);
        x_closed_code             VARCHAR(25);
        x_shipment_type           VARCHAR(25);
        x_temp_count              NUMBER;
        x_full_name               VARCHAR2(240)                                           := NULL; -- Bug 2392074
        profile_user_id           NUMBER                                                  := -1;
        profile_appl_id           NUMBER                                                  := -1;
        profile_resp_id           NUMBER                                                  := -1;
        defined                   BOOLEAN;
        x_sob_id                  NUMBER                                                  := NULL;
        x_rate                    NUMBER;
        x_allow_rate_override     VARCHAR2(1);
        l_time_count              NUMBER;
        l_dist_count                   number;                    /* Bug#3746516 */
        l_rate_date                    po_headers.rate_date%type; /* Bug#3746516 */

        -- <Bug 9342280 : Added for CLM project>
        l_is_clm_po           VARCHAR2(5) := 'N';
        l_partial_funded_flag VARCHAR2(5) := 'N';
        -- <CLM END>
    BEGIN
        --check line quanity > 0
        x_progress       := '097';

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('derive_vendor_rcv_line_amt ' || x_progress);
        END IF;

        profile_user_id  := fnd_profile.VALUE('USER_ID');
        profile_resp_id  := fnd_profile.VALUE('RESPONSIBILITY_ID');
        profile_appl_id  := fnd_profile.VALUE('APPLICATION_ID');
        fnd_profile.get_specific('RCV_CLOSED_PO_DEFAULT_OPTION',
                                 profile_user_id,
                                 profile_resp_id,
                                 profile_appl_id,
                                 x_include_closed_po,
                                 defined
                                );

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Include closed PO profile value ' || x_include_closed_po);
        END IF;

        /* We do not support ASN/ASBN for Serive based PO shipments. So
         * error out in that case.
        */
	/* Complex Work project*/
        IF ((x_cascaded_table(n).transaction_type = 'SHIP') and
		(x_header_record.header_record.asn_type <> 'WC' )) THEN --{
            x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
            rcv_error_pkg.set_error_message('RCV_NO_SERVICE_SUPPORT_TRX', x_cascaded_table(n).error_message);
            rcv_error_pkg.set_token('TRX_TYPE', x_cascaded_table(n).transaction_type);
            rcv_error_pkg.log_interface_error('TRANSACTION_TYPE', FALSE);
        END IF; --}

        /* Support for RATE based from OTL */
        IF (    x_cascaded_table(n).value_basis = 'RATE'
            AND x_cascaded_table(n).purchase_basis = 'TEMP LABOR') THEN --{
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Rate/Temp Labor');
            END IF;

            /* Bug 3648861.
             * The where condition has
             * and pol.po_line_id=po_line_id.
             * It should be
             * and pol.po_line_id=x_cascaded_table(n).po_line_id
             * Changed the condition.
            */
            SELECT COUNT(*)
            INTO   l_time_count
            FROM   hxc_time_building_blocks bb,
                   po_lines pol
            WHERE  bb.time_building_block_id = x_cascaded_table(n).timecard_id
            AND    bb.object_version_number = x_cascaded_table(n).timecard_ovn
            AND    bb.SCOPE = 'TIMECARD'
            AND    bb.resource_type = 'PERSON'
            AND    bb.resource_id IN(SELECT person_id
                                     FROM   per_all_assignments_f
                                     WHERE  assignment_type = 'C')
            AND    pol.po_line_id = x_cascaded_table(n).po_line_id
            AND    pol.order_type_lookup_code = 'RATE'
            AND    pol.purchase_basis = 'TEMP LABOR';

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('count ' || l_time_count);
            END IF;

            IF (l_time_count = 0) THEN --{
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('We do not support RATE/TEMP LABOR through ROI unless it comes through OTL');
                END IF;

                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                rcv_error_pkg.set_error_message('RCV_NO_RATE_UNLESS_OTL', x_cascaded_table(n).error_message);
                rcv_error_pkg.set_token('TRX_TYPE', x_cascaded_table(n).transaction_type);
                rcv_error_pkg.log_interface_error('TRANSACTION_TYPE', FALSE);
            END IF; --}
        END IF; --}

   /* Bug 6610047.
    *  Changes made to allow receipts with zero amount for timecards
    *  by commenting the validation to check for zero amount on the
    *  receipt.
    */


 /*  IF     x_cascaded_table(n).error_status IN('S', 'W')
           AND x_cascaded_table(n).amount <= 0 THEN --{
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Amount is <= zero. Cascade will fail');
            END IF;

            x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
            rcv_error_pkg.set_error_message('RCV_ITEM_NO_SHIP_QTY', x_cascaded_table(n).error_message);
            rcv_error_pkg.set_token('ITEM', x_cascaded_table(n).item_num);
            rcv_error_pkg.log_interface_error('AMOUNT', FALSE);
        END IF; --} end amt > 0 check
   */
                  -- the following steps will create a set of rows linking the line_record with
                -- its corresponding po_line_location rows until the quantity value from
                -- the asn is consumed.  (Cascade)

        /* 2119137 : If the user populates rcv_transactions_interface
      with po_line_id, then ROI errors out with
      RCV_ASN_NO_PO_LINE_LOCATION_ID when the docment_line_num
      is not provided for one time items. Modified the "if" criteria in
      such a way that the ROI validation does'nt error out when
      po_line_id is populated for one time items. */
        x_progress       := '098';

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('X_progress ' || x_progress);
        END IF;

        IF (    x_cascaded_table(n).po_line_id IS NOT NULL
            AND x_cascaded_table(n).error_status IN('S', 'W')) THEN --{

                                                                    -- Copy record from main table to temp table
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Copy record from main table to temp table');
            END IF;

            current_n                       := 1;
            temp_cascaded_table(current_n)  := x_cascaded_table(n);

            -- Get all rows which meet this condition
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Get all rows which meet this condition');
                asn_debug.put_line('Transaction Type = ' || x_cascaded_table(n).transaction_type);
                asn_debug.put_line('Auto Transact Code = ' || x_cascaded_table(n).auto_transact_code);
            END IF;

            -- bug 1362237  Deriving the document_line_num
            -- and document_shipment_line_num when line_id and/or line_location_id
            -- are provided.

            IF     temp_cascaded_table(current_n).document_line_num IS NULL
               AND temp_cascaded_table(current_n).po_line_id IS NOT NULL THEN --{
                BEGIN
                    SELECT line_num
                    INTO   temp_cascaded_table(current_n).document_line_num
                    FROM   po_lines
                    WHERE  po_line_id = temp_cascaded_table(current_n).po_line_id;
                EXCEPTION
                    WHEN OTHERS THEN
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('wrong po_line_id entered in rcv_transactions_interface');
                        END IF;
                END;
            END IF; --}

            IF     temp_cascaded_table(current_n).document_shipment_line_num IS NULL
               AND temp_cascaded_table(current_n).po_line_location_id IS NOT NULL THEN --{
                BEGIN
                    SELECT shipment_num
                    INTO   temp_cascaded_table(current_n).document_shipment_line_num
                    FROM   po_line_locations
                    WHERE  line_location_id = temp_cascaded_table(current_n).po_line_location_id;
                EXCEPTION
                    WHEN OTHERS THEN
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('wrong po_line_location_id entered in rcv_transactions_interface');
                        END IF;
                END;
            END IF; --}

            IF     temp_cascaded_table(current_n).document_distribution_num IS NULL
               AND temp_cascaded_table(current_n).po_distribution_id IS NOT NULL THEN --{
                BEGIN
                    SELECT distribution_num
                    INTO   temp_cascaded_table(current_n).document_distribution_num
                    FROM   po_distributions
                    WHERE  po_distribution_id = temp_cascaded_table(current_n).po_distribution_id;
                EXCEPTION
                    WHEN OTHERS THEN
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('wrong po_distribution_id entered in rcv_transactions_interface');
                        END IF;
                END;
            END IF; --}

            /* Bug 1898283 : The Receiving control of "Enforce Ship to Location was
               not working for ROI. So corrected the code so that it now behaves the same way as
               the Form Behaves. i.e.,
               Proceed without any error messages if the enforcement is set to "None"
               Enter error message in po_interface_errors if the enforcement is "Warning"
               Enter error message in po_interface_errors if the enforcement is "Reject"
               and error out.
               This validation is done by comparing the enforce_ship_location_code from
               po_line_locations and assigning the proper ship_location_id into a
               temporary variable temp_mirror_ship_to_loc_id  and passing the temp
               variable as a parameter to open the cursor "Distributions".
            */
            IF (    x_cascaded_table(n).transaction_type <> 'DELIVER'
                AND NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') <> 'DELIVER') THEN --{

                                                                                              -- if txn != deliver
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Open Shipment records');
                    asn_debug.put_line('PO Header id ' || TO_CHAR(temp_cascaded_table(current_n).po_line_id));
                    asn_debug.put_line('Item Id ' || TO_CHAR(temp_cascaded_table(current_n).po_line_location_id));
                    asn_debug.put_line('Proceed to open cursor');
                END IF;

                /* Bug 2208664 : Nullified the ship_to_location_id when calling
                the cursors shipments, count_shipments, distributions and
                count_distributions. The proper value of ship_to_location_id will
                be set after values are fetched and validated for the
                location control code set at PO.
                */
                OPEN shipments(temp_cascaded_table(current_n).po_line_id,
                               temp_cascaded_table(current_n).po_line_location_id,
                               temp_cascaded_table(current_n).po_release_id
                              );
                -- count_shipments just gets the count of rows found in shipments
                OPEN count_shipments(temp_cascaded_table(current_n).po_line_id,
                                     temp_cascaded_table(current_n).po_line_location_id,
                                     temp_cascaded_table(current_n).po_release_id
                                    );
            -- }
            ELSIF(   x_cascaded_table(n).transaction_type = 'DELIVER'
                  OR NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') = 'DELIVER') THEN --{
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Open Distribution records');
                    asn_debug.put_line('PO Line id ' || TO_CHAR(temp_cascaded_table(current_n).po_line_id));
                    asn_debug.put_line('Line location Id ' || TO_CHAR(temp_cascaded_table(current_n).po_line_location_id));
                    asn_debug.put_line('PO Distribution id ' || TO_CHAR(temp_cascaded_table(current_n).po_distribution_id));
                    asn_debug.put_line('PO RElease id ' || TO_CHAR(temp_cascaded_table(current_n).po_release_id));
                    asn_debug.put_line('Proceed to open cursor');
                END IF;

                OPEN distributions(temp_cascaded_table(current_n).po_line_id,
                                   temp_cascaded_table(current_n).po_line_location_id,
                                   temp_cascaded_table(current_n).po_distribution_id,
                                   temp_cascaded_table(current_n).po_release_id
                                  );
                -- count_distributions just gets the count of rows found in distributions
                OPEN count_distributions(temp_cascaded_table(current_n).po_line_id,
                                         temp_cascaded_table(current_n).po_line_location_id,
                                         temp_cascaded_table(current_n).po_distribution_id,
                                         temp_cascaded_table(current_n).po_release_id
                                        );
            END IF; -- for txn = deliver --}


                    -- Assign transaction amount to remaining amount

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Assign ordered_amount to remaining amount');
                asn_debug.put_line('Pointer in temp_cascade ' || TO_CHAR(current_n));
            END IF;

            x_remaining_amount              := temp_cascaded_table(current_n).amount;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Have assigned the amount ' || TO_CHAR(x_remaining_amount));
            END IF;

            -- Calculate tax_amount_factor for calculating tax_amount for
            -- each cascaded line
            IF NVL(temp_cascaded_table(current_n).tax_amount, 0) <> 0 THEN
                tax_amount_factor  := temp_cascaded_table(current_n).tax_amount / x_remaining_amount;
            ELSE
                tax_amount_factor  := 0;
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Tax Factor ' || TO_CHAR(tax_amount_factor));
            END IF;

            x_first_trans                   := TRUE;
            transaction_ok                  := FALSE;

            /*
            ** Get the count of the number of records depending on the
            ** the transaction type
            */
            IF (    x_cascaded_table(n).transaction_type <> 'DELIVER'
                AND NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') <> 'DELIVER') THEN
                FETCH count_shipments INTO x_record_count;
            ELSE
                FETCH count_distributions INTO x_record_count;
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Before starting Cascade');
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Record Count = ' || x_record_count);
            END IF;

            asn_debug.put_line('record count ' || x_record_count);

            LOOP --{
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Remaining Amount ' || TO_CHAR(x_remaining_amount));
                END IF;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('open shipments and fetch');
                END IF;

                /*
                ** Fetch the appropriate record
                */
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('transaction_type = ' || x_cascaded_table(n).transaction_type);
                END IF;

                IF (    x_cascaded_table(n).transaction_type <> 'DELIVER'
                    AND NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') <> 'DELIVER') THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Fetching Shipments Cursor');
                    END IF;

                    FETCH shipments INTO x_shipmentdistributionrec;

                    /*
                    ** Check if this is the last record
                    */
                    IF (shipments%NOTFOUND) THEN
                        lastrecord  := TRUE;
                    END IF;

                    rows_fetched  := shipments%ROWCOUNT;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Shipment Rows fetched ' || TO_CHAR(rows_fetched));
                    END IF;
                -- }
                ELSE -- txn = deliver and other cases --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Fetching Distributions Cursor in amount proc');
                    END IF;

                    FETCH distributions INTO x_shipmentdistributionrec;

                    /*
                    ** Check if this is the last record
                    */
                    IF (distributions%NOTFOUND) THEN
                        lastrecord  := TRUE;
                    END IF;

                    rows_fetched  := distributions%ROWCOUNT;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Distribution Rows fetched ' || TO_CHAR(rows_fetched));
                    END IF;
                END IF; -- matches if condition of txn ! deliver --}

                IF (   lastrecord
                    OR x_remaining_amount <= 0) THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Hit exit condition');
                    END IF;

                    IF NOT x_first_trans THEN
                        -- x_first_trans has been reset which means some cascade has
                        -- happened. Otherwise current_n = 1
                        current_n  := current_n - 1;
                    END IF;

                    -- do the tolerance act here
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Temp table pointer ' || TO_CHAR(current_n));
                        asn_debug.put_line('Check which condition has occured');
                    END IF;

                    -- lastrecord...we have run out of rows and we still have quantity to allocate
                    IF x_remaining_amount > 0 THEN --{
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('There is amount remaining');
                            asn_debug.put_line('Need to check qty/amt tolerances');
                        END IF;

                        IF     rows_fetched > 0
                           AND NOT x_first_trans THEN                                                                                          --{
                                                      -- we had got atleast some rows from our shipments cursor
                                                      -- we have atleast one row cascaded (not null line_location_id)
                            SELECT NVL(po_line_locations.qty_rcv_exception_code, 'NONE')
                            INTO   x_qty_rcv_exception_code
                            FROM   po_line_locations
                            WHERE  line_location_id = temp_cascaded_table(current_n).po_line_location_id;

                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('Qty tolerance exception code ' || NVL(x_qty_rcv_exception_code, 'NONE1'));
                            END IF;

                            -- <Bug 9342280 : Added for CLM project>
                            get_clm_info(     'AMOUNT',
                                              x_cascaded_table,
                                              n,
                                              l_is_clm_po,
                                              l_partial_funded_flag);

                            IF l_is_clm_po = 'Y' AND l_partial_funded_flag = 'Y' THEN

                               x_qty_rcv_exception_code := 'REJECT';

                            END IF;
                            --<END CLM>

                            IF x_qty_rcv_exception_code IN('NONE', 'WARNING') THEN --{
                                /* Bug# 1807842 */
-- Bug 3506964.
                                IF (temp_cascaded_table(current_n).amount < x_converted_trx_amt) THEN --{
                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('Tolerable amount ' || TO_CHAR(x_converted_trx_amt));
                                        asn_debug.put_line('Current quantity ' || TO_CHAR(temp_cascaded_table(current_n).amount));
asn_debug.put_line('Current shipped amount ' || TO_CHAR(temp_cascaded_table(current_n).amount_shipped));
                                        asn_debug.put_line('Assign remaining amount ' || TO_CHAR(x_remaining_amount) || ' to last record');
                                    END IF;

                                    temp_cascaded_table(current_n).amount  := temp_cascaded_table(current_n).amount + x_remaining_amount;
temp_cascaded_table(current_n).amount_shipped     := temp_cascaded_table(current_n).amount_shipped + x_remaining_amount;

                 END IF; /* Bug# 1807842 */ --}

                                temp_cascaded_table(current_n).tax_amount  := ROUND(temp_cascaded_table(current_n).amount * tax_amount_factor, 6);

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('Current amount ' || TO_CHAR(temp_cascaded_table(current_n).amount));
                                    asn_debug.put_line('Current Tax Amount ' || TO_CHAR(temp_cascaded_table(current_n).tax_amount));
asn_debug.put_line('Current shipped amount ' || TO_CHAR(temp_cascaded_table(current_n).amount_shipped));
                                END IF;

                                IF x_qty_rcv_exception_code = 'WARNING' THEN --{
                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('IN WARNING');
                                    END IF;

                                    temp_cascaded_table(current_n).error_status   := 'W';
                                    temp_cascaded_table(current_n).error_message  := 'RCV_SHIP_QTY_OVER_TOLERANCE';

                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('Group Id ' || TO_CHAR(temp_cascaded_table(current_n).GROUP_ID));
                                        asn_debug.put_line('Header Interface Id ' || TO_CHAR(temp_cascaded_table(current_n).header_interface_id));
                                        asn_debug.put_line('IN Trans Id ' || TO_CHAR(temp_cascaded_table(current_n).interface_transaction_id));
                                    END IF;

                                    x_cascaded_table(n).error_status              := rcv_error_pkg.g_ret_sts_warning;
                                    rcv_error_pkg.set_error_message('RCV_SHIP_QTY_OVER_TOLERANCE', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('QTY_A', temp_cascaded_table(current_n).quantity);
                                    rcv_error_pkg.set_token('QTY_B', temp_cascaded_table(current_n).quantity - x_remaining_amount);
                                    rcv_error_pkg.log_interface_warning('QUANTITY');

                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('Error Status ' || temp_cascaded_table(current_n).error_status);
                                        asn_debug.put_line('Error message ' || temp_cascaded_table(current_n).error_message);
                                        asn_debug.put_line('Need to insert into po_interface_errors');
                                    END IF;
                                END IF; --} matches x_qty_rcv_exception_code = 'WARNING'

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('Current amount ' || TO_CHAR(temp_cascaded_table(current_n).amount));
                                    asn_debug.put_line('Current Tax Amount ' || TO_CHAR(temp_cascaded_table(current_n).tax_amount));
asn_debug.put_line('Current shipped amount ' || TO_CHAR(temp_cascaded_table(current_n).amount_shipped));
                                END IF;
                            -- }
                            ELSIF x_qty_rcv_exception_code = 'REJECT' THEN -- elseif for NONE/WARNING  --{
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('Extra Amount ' || TO_CHAR(x_remaining_amount));
                                END IF;

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('delete the temp table ');
                                END IF;

                                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;

                                -- <Bug 9342280 : Added for CLM project>
                                IF l_is_clm_po = 'Y' AND l_partial_funded_flag = 'Y' THEN

                                rcv_error_pkg.set_error_message(
                                    'RCV_TRX_QTY_EXCEEDS_CLM_FUNDED',
                                    x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('QTY_A', x_cascaded_table(n).amount);
                                    rcv_error_pkg.set_token('QTY_B', x_cascaded_table(n).amount - x_remaining_amount);

                                ELSE
                                -- <CLM END>

                                rcv_error_pkg.set_error_message('RCV_SHIP_QTY_OVER_TOLERANCE', x_cascaded_table(n).error_message);
                                rcv_error_pkg.set_token('QTY_A', x_cascaded_table(n).amount);
                                rcv_error_pkg.set_token('QTY_B', x_cascaded_table(n).amount - x_remaining_amount);

                                END IF; -- <Bug 9342280 : Added for CLM project>

                                rcv_error_pkg.log_interface_error('AMOUNT', FALSE);
                                temp_cascaded_table.DELETE;

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('mark the actual table with error status');
                                    asn_debug.put_line('Error Status ' || x_cascaded_table(n).error_status);
                                    asn_debug.put_line('Error message ' || x_cascaded_table(n).error_message);
                                END IF;

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('Need to insert a row into po_interface_errors');
                                END IF;
                            END IF;                 --} matches if(none/warning) and elseif(reject)
                                    --}
                        ELSE --{ else for rows fetched = 0 OR x_first_trans = true
                            IF rows_fetched = 0 THEN
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('No rows were retrieved from cursor.');
                                END IF;
                            ELSIF x_first_trans THEN
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('No rows were cascaded');
                                END IF;
                            END IF;

                            x_temp_count  := 1;

                            /* nwang add error messages */
                            /* Bug 2340533 - Added a message RCV_ASN_NO_OPEN_SHIPMENTS which conveys that
                             no shipments exists for receiving for the given PO.
                            */
                            IF (    x_cascaded_table(n).transaction_type <> 'DELIVER'
                                AND NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') <> 'DELIVER') THEN                                                                              --{
                                                                                                              -- Bug 2551443 Removed po_distributions from the FROM clause
                                SELECT COUNT(*)
                                INTO   x_temp_count
                                FROM   DUAL
                                WHERE  EXISTS(SELECT 1
                                              FROM   po_line_locations pll,
                                                     po_lines pl
                                              WHERE  pl.po_line_id = temp_cascaded_table(current_n).po_line_id
                                              AND    NVL(pll.po_release_id, 0) = NVL(temp_cascaded_table(current_n).po_release_id, NVL(pll.po_release_id, 0))
                                              AND    pll.line_location_id = NVL(temp_cascaded_table(current_n).po_line_location_id, pll.line_location_id)
                                              AND    pll.po_line_id = pl.po_line_id);

                                IF x_temp_count = 0 THEN
                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_ASN_NO_OPEN_SHIPMENTS', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('PONUM', temp_cascaded_table(current_n).document_num);
                                    rcv_error_pkg.log_interface_error('DOCUMENT_NUM', FALSE);
                                ELSE -- x_temp_count != 0
                                    SELECT NVL(pll.po_release_id, 0),
                                           NVL(pll.approved_flag, 'N'),
                                           NVL(pll.cancel_flag, 'N'),
                                           NVL(pll.closed_code, 'OPEN'),
                                           pll.shipment_type
                                    INTO   x_release_id,
                                           x_approved_flag,
                                           x_cancel_flag,
                                           x_closed_code,
                                           x_shipment_type
                                    FROM   po_line_locations pll,
                                           po_lines pl,
                                           po_headers ph
                                    WHERE  ph.po_header_id = temp_cascaded_table(current_n).po_header_id
                                    AND    pll.po_header_id = ph.po_header_id
                                    AND    pl.line_num = NVL(temp_cascaded_table(current_n).document_line_num, pl.line_num)
                                    AND    NVL(pll.po_release_id, 0) = NVL(temp_cascaded_table(current_n).po_release_id, NVL(pll.po_release_id, 0))
                                    AND    pll.line_location_id = NVL(temp_cascaded_table(current_n).po_line_location_id, pll.line_location_id)
                                    AND    pll.po_line_id = pl.po_line_id;
                                END IF;                       -- x_temp_count = 0
                                        -- }
                            ELSIF(   x_cascaded_table(n).transaction_type = 'DELIVER'
                                  OR NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') = 'DELIVER') THEN --{
                                SELECT COUNT(*)
                                INTO   x_temp_count
                                FROM   po_distributions pod,
                                       po_line_locations pll,
                                       po_lines pl,
                                       po_headers ph
                                WHERE  ph.po_header_id = temp_cascaded_table(current_n).po_header_id
                                AND    pll.po_header_id = ph.po_header_id
                                AND    pll.line_location_id = pod.line_location_id
                                AND    pl.line_num = NVL(temp_cascaded_table(current_n).document_line_num, pl.line_num)
                                AND    NVL(pll.po_release_id, 0) = NVL(temp_cascaded_table(current_n).po_release_id, NVL(pll.po_release_id, 0))
                                AND    pll.line_location_id = NVL(temp_cascaded_table(current_n).po_line_location_id, pll.line_location_id)
                                AND    pll.po_line_id = pl.po_line_id
                                AND    pod.distribution_num = NVL(temp_cascaded_table(current_n).document_distribution_num, pod.distribution_num);

                                IF x_temp_count = 0 THEN
                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_ASN_INVALID_DIST_NUM', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('NUMBER', temp_cascaded_table(current_n).document_distribution_num);
                                    rcv_error_pkg.log_interface_error('DOCUMENT_DISTRIBUTION_NUM', FALSE);
                                ELSE -- x_temp_count != 0
                                    SELECT NVL(pll.po_release_id, 0),
                                           NVL(pll.approved_flag, 'N'),
                                           NVL(pll.cancel_flag, 'N'),
                                           NVL(pll.closed_code, 'OPEN'),
                                           pll.shipment_type
                                    INTO   x_release_id,
                                           x_approved_flag,
                                           x_cancel_flag,
                                           x_closed_code,
                                           x_shipment_type
                                    FROM   po_distributions pod,
                                           po_line_locations pll,
                                           po_lines pl,
                                           po_headers ph
                                    WHERE  ph.po_header_id = temp_cascaded_table(current_n).po_header_id
                                    AND    pll.po_header_id = ph.po_header_id
                                    AND    pll.line_location_id = pod.line_location_id
                                    AND    pl.line_num = NVL(temp_cascaded_table(current_n).document_line_num, pl.line_num)
                                    AND    NVL(pll.po_release_id, 0) = NVL(temp_cascaded_table(current_n).po_release_id, NVL(pll.po_release_id, 0))
                                    AND    pll.line_location_id = NVL(temp_cascaded_table(current_n).po_line_location_id, pll.line_location_id)
                                    AND    pll.po_line_id = pl.po_line_id
                                    AND    pod.distribution_num = NVL(temp_cascaded_table(current_n).document_distribution_num, pod.distribution_num);
                                END IF; -- x_temp_count = 0;
                            END IF; -- transaction_type <> 'DELIVER' --}

                            IF (x_temp_count <> 0) THEN --{
                                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;

                                IF x_release_id <> NVL(temp_cascaded_table(current_n).po_release_id, x_release_id) THEN
                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_ASN_ITEM_NOT_ALLOWED', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('NUMBER', temp_cascaded_table(current_n).item_num);
                                    rcv_error_pkg.log_interface_error('ITEM_NUM', FALSE);
                                END IF;

                                IF x_approved_flag <> 'Y' THEN
                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_ASN_SHIPMT_NOT_APPROVED', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('NUMBER', temp_cascaded_table(current_n).document_shipment_line_num);
                                    rcv_error_pkg.set_token('PO_NUM', temp_cascaded_table(current_n).document_num);
                                    rcv_error_pkg.log_interface_error('DOCUMENT_SHIPMENT_LINE_NUM', FALSE);
                                END IF;

                                IF x_cancel_flag <> 'N' THEN
                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_ASN_SHIPMT_CANCELLED', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('NUMBER', temp_cascaded_table(current_n).document_shipment_line_num);
                                    rcv_error_pkg.log_interface_error('DOCUMENT_SHIPMENT_LINE_NUM', FALSE);
                                END IF;

                                IF (    x_include_closed_po = 'Y'
                                    AND x_closed_code = 'FINALLY CLOSED') THEN
                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_ASN_SHIPMT_FINALLY_CLOSED', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('NUMBER', temp_cascaded_table(current_n).document_shipment_line_num);
                                    rcv_error_pkg.log_interface_error('DOCUMENT_SHIPMENT_LINE_NUM', FALSE);
                                END IF;

                                IF (    x_include_closed_po = 'N'
                                    AND x_closed_code IN('FINALLY CLOSED', 'CLOSED', 'CLOSED FOR RECEIVING')) THEN
                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('This PO is  not open and the profile option to include closed POs is N');
                                    END IF;

                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_ASN_SHIPMT_NOT_OPEN', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('NUMBER', temp_cascaded_table(current_n).document_shipment_line_num);
                                    rcv_error_pkg.log_interface_error('DOCUMENT_SHIPMENT_LINE_NUM', FALSE);
                                END IF;

                                IF x_shipment_type NOT IN('STANDARD', 'BLANKET', 'SCHEDULED','PREPAYMENT') THEN
                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_ASN_INVAL_SHIPMT_TYPE', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('NUMBER', temp_cascaded_table(current_n).document_shipment_line_num);
                                    rcv_error_pkg.log_interface_error('DOCUMENT_SHIPMENT_LINE_NUM', FALSE);
                                END IF;
                            END IF; -- x_temp_count = 0;}

                                    -- Delete the temp_cascaded_table just to be sure

                            temp_cascaded_table.DELETE;
                        END IF;            --} end else for rows fetched = 0 OR x_first_trans = true
                                -- end x_remaining_qty > 0 => this is the last record
                    ELSE --
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Remaining amount is zero ' || TO_CHAR(x_remaining_amount));
                            asn_debug.put_line('Return the cascaded rows back to the calling procedure');
                        END IF;
        /* Bug 6610047.
         * To allow, receipts with zero amount for timecards from now on.
         * Added below code to populate certain data into temp_cascaded_table()
         * structure to make zero amount receipts flow to work.
         */
                       IF (temp_cascaded_table(current_n).value_basis = 'RATE'
                            AND temp_cascaded_table(current_n).purchase_basis = 'TEMP LABOR'
                            AND temp_cascaded_table(current_n).amount = 0) THEN --{

                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('Rate/Temp Labor with amount = 0');
                            END IF;

                            temp_cascaded_table(current_n).po_distribution_id          := x_shipmentdistributionrec.po_distribution_id;
                            temp_cascaded_table(current_n).charge_account_id           := x_shipmentdistributionrec.code_combination_id;
                            temp_cascaded_table(current_n).destination_type_code       := x_shipmentdistributionrec.destination_type_code;
                            temp_cascaded_table(current_n).destination_context         := x_shipmentdistributionrec.destination_type_code;

                            IF (temp_cascaded_table(current_n).currency_conversion_date IS NULL) THEN
                                temp_cascaded_table(current_n).currency_conversion_date  := x_ShipmentDistributionRec.rate_date;
                            END IF;

                            IF (temp_cascaded_table(current_n).currency_conversion_rate IS NULL) THEN
                                temp_cascaded_table(current_n).currency_conversion_rate  := x_ShipmentDistributionRec.rate;
                            END IF;

                            IF (NVL(temp_cascaded_table(current_n).deliver_to_location_id, 0) = 0) THEN
                                temp_cascaded_table(current_n).deliver_to_location_id  := x_shipmentdistributionrec.deliver_to_location_id;
                            END IF;

                        END IF;   /* Bug 6610047 - End */

                    END IF; --} ends the check for whether last record has been reached

                            -- close cursors

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Close cursors shipments, count_shipments, distributions, count_disributions');
                    END IF;

                    IF shipments%ISOPEN THEN
                        CLOSE shipments;
                    END IF;

                    IF count_shipments%ISOPEN THEN
                        CLOSE count_shipments;
                    END IF;

                    IF distributions%ISOPEN THEN
                        CLOSE distributions;
                    END IF;

                    IF count_distributions%ISOPEN THEN
                        CLOSE count_distributions;
                    END IF;

                    EXIT;
                END IF; --} matches lastrecord or x_remaining_amount <= 0

                        -- eliminate the row if it fails the date check

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Count in temp_cascade_table : ' || TO_CHAR(temp_cascaded_table.COUNT));
                    asn_debug.put_line('Cursor record ' || TO_CHAR(rows_fetched));
                    asn_debug.put_line('Check date tolerance');
                END IF;

                /* FPJ Services.
                 * We do not check date_tolerances if matching_basis is
                 * AMOUNT except when value basis is Fixed and
                 * purchase basis is Service.
                 * Bug 3570773. We did not have this check here but in
                 * derive_vendor_rcv_line_qty. But it does not really matter since
                 * we cannot set date tolerances for serive line types except
                 * Fixed Price / Services.
                */
                IF (    NVL(x_cascaded_table(n).value_basis, 'QUANTITY') <> 'RATE'
                    AND NVL(x_cascaded_table(n).purchase_basis, 'GOODS') <> 'TEMP_LABOR') THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Check date tolerance for a Fixed Price services line');
                    END IF;

                    rcv_transactions_interface_sv.check_date_tolerance(NVL(temp_cascaded_table(1).expected_receipt_date, x_header_record.header_record.expected_receipt_date), -- Bug 487222
                                                                       x_shipmentdistributionrec.promised_date,
                                                                       x_shipmentdistributionrec.days_early_receipt_allowed,
                                                                       x_shipmentdistributionrec.days_late_receipt_allowed,
                                                                       x_shipmentdistributionrec.receipt_days_exception_code
                                                                      );
                ELSE
                    -- default receipt_days_exception_code to NONE for rate based temp
                    -- labor lines.
                    x_shipmentdistributionrec.receipt_days_exception_code  := 'NONE';
                END IF;

                /* FPJ SERVICES END */

                /* bug 1060261 - added error message to be shown when the expected date is outside tolerance range */
                IF (x_shipmentdistributionrec.receipt_days_exception_code = 'REJECT') THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Receipt days exception code is Reject. So error out.');
                    END IF;

                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                    rcv_error_pkg.set_error_message('RCV_ASN_DATE_OUT_TOL', x_cascaded_table(n).error_message);
                    rcv_error_pkg.set_token('DELIVERY DATE', NVL(temp_cascaded_table(1).expected_receipt_date, x_header_record.header_record.expected_receipt_date));
                    rcv_error_pkg.log_interface_error('EXPECTED_RECEIPT_DATE', FALSE);
                END IF; --}

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Days exception Code ' || NVL(x_shipmentdistributionrec.receipt_days_exception_code, 'XXX'));
                END IF;

                -- Check shipto_location enforcement

                rcv_transactions_interface_sv.check_shipto_enforcement(x_shipmentdistributionrec.ship_to_location_id,
                                                                       NVL(temp_cascaded_table(1).ship_to_location_id, x_header_record.header_record.location_id),
                                                                       x_shipmentdistributionrec.enforce_ship_to_location_code
                                                                      );

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Enforce ShipToLocation ' || NVL(x_shipmentdistributionrec.enforce_ship_to_location_code, 'XXX'));
                END IF;

                /* Bug 2208664 : Enter error message in po_interface_errors if enforce_ship_to_location_code is 'WARNING', and
             Enter error message in po_interface_errors if enforce_ship_to_location_code is 'REJECT' and error out
             */
                IF (x_shipmentdistributionrec.enforce_ship_to_location_code = 'REJECT') THEN --{
                    BEGIN
                        x_cascaded_table(n).error_status               := rcv_error_pkg.g_ret_sts_error;
                        rcv_error_pkg.set_error_message('RCV_ASN_INVAL_SHIP_TO_LOC', x_cascaded_table(n).error_message);
                        rcv_error_pkg.set_token('VALUE', temp_cascaded_table(current_n).ship_to_location_id);
                        rcv_error_pkg.log_interface_error('SHIP_TO_LOCATION_ID', FALSE);
                        x_shipmentdistributionrec.ship_to_location_id  := NVL(temp_cascaded_table(1).ship_to_location_id, x_header_record.header_record.location_id);
                    END;
                ELSIF(x_shipmentdistributionrec.enforce_ship_to_location_code = 'WARNING') THEN --} {
                    BEGIN
                        x_cascaded_table(n).error_status               := 'W';
                        rcv_error_pkg.set_error_message('RCV_ASN_INVAL_SHIP_TO_LOC', x_cascaded_table(n).error_message);
                        rcv_error_pkg.set_token('VALUE', temp_cascaded_table(current_n).ship_to_location_id);
                        rcv_error_pkg.log_interface_warning('SHIP_TO_LOCATION_ID');
                        x_shipmentdistributionrec.ship_to_location_id  := NVL(temp_cascaded_table(1).ship_to_location_id, x_header_record.header_record.location_id);
                    END;
                END IF; --}matches ship_to_loc_code = warning

                IF     (NVL(x_shipmentdistributionrec.receipt_days_exception_code, 'NONE') = 'NONE')
                   AND -- derived by the date tolerance procedure
                       (x_shipmentdistributionrec.enforce_ship_to_location_code IN('NONE', 'WARNING')) THEN                                                                 --{
                                                                                                            -- derived by shipto_enforcement
                    insert_into_table      := FALSE;
                    already_allocated_amt  := 0;

                    /*
                    ** Get the available quantity for the shipment or distribution
                    ** that is available for allocation by this interface transaction
                    */
                    IF (    x_cascaded_table(n).transaction_type <> 'DELIVER'
                        AND NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') <> 'DELIVER') THEN --{
                        /*Bug# 1548597 */
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('call get_available_amount for Receive');
                        END IF;

                        rcv_quantities_s.get_available_amount('RECEIVE',
                                                              x_shipmentdistributionrec.line_location_id,
                                                              'VENDOR',
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              x_converted_trx_amt,
                                                              x_tolerable_amt
                                                             );

                        -- If qtys have already been allocated for this po_line_location_id during
                             -- a cascade process which has not been written to the db yet, we need to
                             -- decrement it from the total available quantity
                             -- We traverse the actual pl/sql table and accumulate the quantity by matching the
                             -- po_line_location_id

                        IF n > 1 THEN -- We will do this for all rows except the 1st
                            FOR i IN 1 ..(n - 1) LOOP
                                IF x_cascaded_table(i).po_line_location_id = x_shipmentdistributionrec.line_location_id THEN
                                    already_allocated_amt  := already_allocated_amt + x_cascaded_table(i).amount;
                                END IF;
                            END LOOP;
                        END IF;
                    ELSE --} { for txn != deliver
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('call get_available_amount for Direct Delivery');
                        END IF;

                        /* Bug# 1548597*/
                        rcv_quantities_s.get_available_amount('DIRECT RECEIPT',
                                                              x_shipmentdistributionrec.po_distribution_id,
                                                              'VENDOR',
                                                              NULL,
                                                              NULL,
                                                              NULL,
                                                              x_converted_trx_amt,
                                                              x_tolerable_amt
                                                             );

                        /* Bug# 1337787 - Calculated the x_tolerable_qty in
                             rcv_quantities_s.get_available_quantity procedure */

                        -- x_tolerable_qty := x_converted_trx_qty;
                          -- If qtys have already been allocated for this po_distribution_id during
                          -- a cascade process which has not been written to the db yet, we need to
                          -- decrement it from the total available quantity
                          -- We traverse the actual pl/sql table and accumulate the quantity by matching the
                          -- po_distribution_id

                        IF n > 1 THEN -- We will do this for all rows except the 1st
                            FOR i IN 1 ..(n - 1) LOOP
                                IF x_cascaded_table(i).po_distribution_id = x_shipmentdistributionrec.po_distribution_id THEN
                                    already_allocated_amt  := already_allocated_amt + x_cascaded_table(i).amount;
                                END IF;
                            END LOOP;
                        END IF;
                    END IF; --} for txn =deliver

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('After call to get_available quantity');
                        asn_debug.put_line('Available Amount ' || TO_CHAR(x_converted_trx_amt));
                        asn_debug.put_line('Tolerable Amount ' || TO_CHAR(x_tolerable_amt));
                        asn_debug.put_line('Already Shipped amount ' || TO_CHAR(NVL(x_shipmentdistributionrec.amount_shipped, 0)));
                        asn_debug.put_line('Pointer to temp table ' || TO_CHAR(current_n));
                    END IF;

                    -- if amt has already been allocated then reduce available and tolerable
                    -- amt by the allocated amount

                    IF NVL(already_allocated_amt, 0) > 0 THEN --{
                        x_converted_trx_amt  := x_converted_trx_amt - already_allocated_amt;
                        x_tolerable_amt      := x_tolerable_amt - already_allocated_amt;

                        IF x_converted_trx_amt < 0 THEN
                            x_converted_trx_amt  := 0;
                        END IF;

                        IF x_tolerable_amt < 0 THEN
                            x_tolerable_amt  := 0;
                        END IF;

                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Have some allocated amount. Will reduce amt');
                            asn_debug.put_line('Allocated Amt ' || TO_CHAR(already_allocated_amt));
                            asn_debug.put_line('After reducing by allocated amt');
                            asn_debug.put_line('Available Amount ' || TO_CHAR(x_converted_trx_amt));
                            asn_debug.put_line('Tolerable Amount ' || TO_CHAR(x_tolerable_amt));
			   asn_debug.put_line('Already Shipped amount ' || TO_CHAR(NVL(x_shipmentdistributionrec.amount_shipped, 0)));
                            asn_debug.put_line('Pointer to temp table ' || TO_CHAR(current_n));
                        END IF;
                    END IF; --}

                            -- If last row set available = tolerable - shipped
                            -- else                      = available - shipped

                    IF rows_fetched = x_record_count THEN --{
                        x_converted_trx_amt  := x_tolerable_amt;
                            x_converted_trx_amt  := x_tolerable_amt - NVL(x_shipmentdistributionrec.amount_shipped, 0);

                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Last Row : ' || TO_CHAR(x_converted_trx_amt));
                        END IF;
                    ELSE --} {
                        IF (g_asn_debug = 'Y') THEN
				x_converted_trx_amt  := x_converted_trx_amt  - NVL(x_shipmentdistributionrec.amount_shipped, 0);
                            asn_debug.put_line('Not Last Row : ' || TO_CHAR(x_converted_trx_amt));
                        END IF;
                    END IF; --}

                    IF x_converted_trx_amt > 0 THEN --{
                        IF (x_converted_trx_amt < x_remaining_amount) THEN -- compare like uoms {
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('We are in > amt branch');
                            END IF;

                            x_remaining_amount  := x_remaining_amount - x_converted_trx_amt;
                            insert_into_table   := TRUE;
                        ELSE --} {
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('We are in <= amt branch ');
                            END IF;

                            x_converted_trx_amt  := x_remaining_amount;
                            insert_into_table    := TRUE;
                            x_remaining_amount   := 0;
                        END IF; --}
                    ELSE -- no amt for this record but if last row we need it } {
                        IF rows_fetched = x_record_count THEN                                                           --{ last row needs to be inserted anyway
                                                              -- so that the row can be used based on qty tolerance checks
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('Amount is less then 0 but last record');
                            END IF;

                            insert_into_table    := TRUE;
                            x_converted_trx_amt  := 0;
                        ELSE --} {
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('<= 0 amount but more records in cursor');
                            END IF;

                            x_remaining_amount  := 0;

                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('We have to deal with remaining_qty > 0 and x_converted_trx_qty -ve');
                            END IF;

                            insert_into_table   := FALSE;
                        END IF; --}
                    END IF; --} remaining_amount <> 0

                    IF insert_into_table THEN --{
                        IF (x_first_trans) THEN --{
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('First Time ' || TO_CHAR(current_n));
                            END IF;

                            x_first_trans  := FALSE;
                        ELSE --} { ! x_first_trans
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('Next Time ' || TO_CHAR(current_n));
                            END IF;

                            temp_cascaded_table(current_n)  := temp_cascaded_table(current_n - 1);
                        END IF; --} matches x_first_transfer

			temp_cascaded_table(current_n).amount_shipped  := temp_cascaded_table(current_n).amount;
                        temp_cascaded_table(current_n).inspection_status_code  := 'NOT INSPECTED';
                        temp_cascaded_table(current_n).interface_source_code   := NVL(temp_cascaded_table(current_n).interface_source_code,'RCV'); -- Bug 10127806
                        temp_cascaded_table(current_n).currency_code           := x_shipmentdistributionrec.currency_code;
                        temp_cascaded_table(current_n).tax_amount              := ROUND(temp_cascaded_table(current_n).amount * tax_amount_factor, 6);

                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Current Tax Amount ' || TO_CHAR(temp_cascaded_table(current_n).tax_amount));
                        END IF;

                        IF temp_cascaded_table(current_n).to_organization_id IS NULL THEN --{
                            temp_cascaded_table(current_n).to_organization_id  := x_shipmentdistributionrec.ship_to_organization_id;
                        END IF; --}

                        temp_cascaded_table(current_n).po_line_id              := x_shipmentdistributionrec.po_line_id;
                        temp_cascaded_table(current_n).po_line_location_id     := x_shipmentdistributionrec.line_location_id;

                        IF x_shipmentdistributionrec.enforce_ship_to_location_code = 'WARNING' THEN --{
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('Message to warn about different shiptolocations');
                            END IF;
                        END IF; --}

                        /* ksareddy - 2329928 Ported changes by bao in branch to cache set_of_books_id */
                        /* Bug#17088563 fetch set_of_books_id every time since the cache may be incorrect when two RTP run in same db session */
                       -- IF (rcv_transactions_interface_sv.x_set_of_books_id IS NULL) THEN --Bug#17088563
                            SELECT set_of_books_id
                            INTO   rcv_transactions_interface_sv.x_set_of_books_id
                            FROM   financials_system_parameters;
                       -- END IF; --Bug#17088563

                        x_sob_id                                               := rcv_transactions_interface_sv.x_set_of_books_id;
                        /* Bug 1845702
                          * Currency rate and date can be changed at the time of receipt
                          * depending on the profile ALLOW_RATE_OVERRIDE_FOR_USER_RATE_TYPE.
                          * This was not handled in the open interface. Introduced code
                          * to handle the changes at the time of receipt
                          */
                        /* Bug#3746516 Added the following if condition so as to get the value of the profile
                        ** option only when the match option is receipt and thus to avoid executing the below
                        ** function call always.
                        */
                        IF (x_ShipmentDistributionRec.match_option = 'R') THEN
                            x_allow_rate_override := NVL(fnd_profile.value('ALLOW_RATE_OVERRIDE_FOR_USER_RATE_TYPE'), 'N');
                        END IF;

         IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Match Option:' || x_ShipmentDistributionRec.match_option ||
                                'Profile value ALLOW_RATE_OVERRIDE_FOR_USER_RATE_TYPE:' ||
                      x_allow_rate_override);
                        END IF;

                       /* Bug#3746516 - START
                       ** Modified the following code to consider all the possble scenarios such that the
                       ** rate and the rate date values will be derived correctly and the correct rate and
                       ** rate date values will now be posted in rcv_transactions table so that there will
                       ** not be any discrepency in the calculations and hence all the data between the two
                       ** tables rcv_transactions and rcv_receiving_sub_ledger will be in sync.
                       ** Assuming that only Direct delivery of Amount Based lines are possible and
                       ** x_ShipmentDistributionRec would thus have only distribution information. */

                       IF (x_ShipmentDistributionRec.match_option = 'P') THEN --{

                              temp_cascaded_table(current_n).currency_conversion_date  := x_ShipmentDistributionRec.rate_date;
                              temp_cascaded_table(current_n).currency_conversion_rate  := x_ShipmentDistributionRec.rate;

                       /* Bug 13013727 Modified the following code to handle the cases where Match Option is 'Receipt'.
                          The Rate Date needs to be defaulted from Transaction Date for such cases, and NOT from PO_DISTRIBUTIONS.
                          Also, the corresponding Rate needs to be calculated in case of Rate Type <> 'User'. */
                       ELSIF (x_ShipmentDistributionRec.match_option = 'R') THEN

                           IF (x_ShipmentDistributionRec.rate_type = 'User') THEN --{

                               IF ( x_allow_rate_override ='N') THEN --{

                                       temp_cascaded_table(current_n).currency_conversion_date  :=
                                                         nvl(temp_cascaded_table(current_n).currency_conversion_date,x_cascaded_table(n).transaction_date);
                                       temp_cascaded_table(current_n).currency_conversion_rate  := x_ShipmentDistributionRec.rate;

                               ELSIF ( x_allow_rate_override ='Y') THEN

                                       temp_cascaded_table(current_n).currency_conversion_date  :=
                                                         nvl(temp_cascaded_table(current_n).currency_conversion_date,x_cascaded_table(n).transaction_date);
                                       temp_cascaded_table(current_n).currency_conversion_rate  :=
                                                         nvl(temp_cascaded_table(current_n).currency_conversion_rate,x_ShipmentDistributionRec.rate);
                               END IF; --}

                           ELSE

                               IF ( temp_cascaded_table(current_n).currency_conversion_date IS NOT NULL ) THEN --{
                                   /* Bug 13013727 Calculating the corresponding Rate here. Modified code to handle the exception and log a
                                      message into the log file if there is no Rate defined for the particular Rate Date and Rate Type */
                                   BEGIN
                                       x_rate := gl_currency_api.get_rate(x_sob_Id,
                                                                      x_ShipmentDistributionRec.currency_code,
                                                                      temp_cascaded_table(current_n).currency_conversion_date,
                                                                      x_ShipmentDistributionRec.rate_type);
                                       x_rate := round(x_rate,28);
                                       temp_cascaded_table(current_n).currency_conversion_rate  := x_rate;
                                   EXCEPTION
                                   WHEN OTHERS THEN
                                       IF (g_asn_debug = 'Y') THEN
                                           asn_debug.put_line('Exception 3 ::'||SQLERRM||':: occurred while deriving the rate for currency_conversion_date : '||temp_cascaded_table(current_n).currency_conversion_date
                                                              ||' for the rate type : '||x_ShipmentDistributionRec.rate_type);
                                           asn_debug.put_line('The rate returned is : '||temp_cascaded_table(current_n).currency_conversion_rate);
                                       END IF;
                                       RAISE;
                                   END;
                               ELSE
                                   /* Bug 13013727 Calculating the corresponding Rate here. Modified code to handle the exception and log a
                                      message into the log file if there is no Rate defined for the particular Rate Date and Rate Type */
                                   BEGIN
                                       temp_cascaded_table(current_n).currency_conversion_date  := x_cascaded_table(n).transaction_date;
                                       x_rate := gl_currency_api.get_rate(x_sob_Id,
                                                                      x_ShipmentDistributionRec.currency_code,
                                                                      temp_cascaded_table(current_n).currency_conversion_date,
                                                                      x_ShipmentDistributionRec.rate_type);
                                       x_rate := round(x_rate,28);
                                       temp_cascaded_table(current_n).currency_conversion_rate  := x_rate;
                                   EXCEPTION
                                   WHEN OTHERS THEN
                                       IF (g_asn_debug = 'Y') THEN
                                           asn_debug.put_line('Exception 4 ::'||SQLERRM||':: occurred while deriving the rate for currency_conversion_date : '||temp_cascaded_table(current_n).currency_conversion_date
                                                              ||' for the rate type : '||x_ShipmentDistributionRec.rate_type);
                                           asn_debug.put_line('The rate returned is : '||temp_cascaded_table(current_n).currency_conversion_rate);
                                       END IF;
                                       RAISE;
                                   END;
                               END IF; --}

                           END IF; --}

                       END IF; --}
                       /* End of fix for Bug 13013727 */

                       temp_cascaded_table(current_n).currency_conversion_type := x_ShipmentDistributionRec.rate_type;

                       IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Rate, Rate type and Rate_date ::' ||
                                 temp_cascaded_table(current_n).currency_conversion_rate ||
                  '::' || temp_cascaded_table(current_n).currency_conversion_type ||
                  '::' || temp_cascaded_table(current_n).currency_conversion_date);
                       END IF;

             /* Bug#3746516 - END */

                                -- Copy the distribution specific information only if this is a direct receipt.

                        IF (   x_cascaded_table(n).transaction_type = 'DELIVER'
                            OR NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') = 'DELIVER') THEN --{
                            temp_cascaded_table(current_n).po_distribution_id     := x_shipmentdistributionrec.po_distribution_id;
                            temp_cascaded_table(current_n).charge_account_id      := x_shipmentdistributionrec.code_combination_id;
                            temp_cascaded_table(current_n).req_distribution_id    := x_shipmentdistributionrec.req_distribution_id;
                            temp_cascaded_table(current_n).destination_type_code  := x_shipmentdistributionrec.destination_type_code;
                            temp_cascaded_table(current_n).destination_context    := x_shipmentdistributionrec.destination_type_code;

                            IF (NVL(temp_cascaded_table(current_n).deliver_to_location_id, 0) = 0) THEN
                                temp_cascaded_table(current_n).deliver_to_location_id  := x_shipmentdistributionrec.deliver_to_location_id;
                            END IF;

                            /* Bug 2392074 - If the deliver_to_person mentioned in the po_distributions is
                            invalid or inactive at the time of Receipt we need to clear the deliver to person,
                            as this is an optional field. */
                            IF (NVL(temp_cascaded_table(current_n).deliver_to_person_id, 0) = 0) THEN --{
                                temp_cascaded_table(current_n).deliver_to_person_id  := x_shipmentdistributionrec.deliver_to_person_id;

                                IF (temp_cascaded_table(current_n).deliver_to_person_id IS NOT NULL) THEN --{
                                    BEGIN
                                        SELECT NVL(MAX(hre.full_name), 'notfound')
                                        INTO   x_full_name
                                        FROM   hr_employees_current_v hre
                                        WHERE  (   hre.inactive_date IS NULL
                                                OR hre.inactive_date > SYSDATE)
                                        AND    hre.employee_id = temp_cascaded_table(current_n).deliver_to_person_id;

                                        IF (x_full_name = 'notfound') THEN
                                            temp_cascaded_table(current_n).deliver_to_person_id  := NULL;
                                        END IF;
                                    EXCEPTION
                                        WHEN NO_DATA_FOUND THEN
                                            temp_cascaded_table(current_n).deliver_to_person_id  := NULL;

                                            IF (g_asn_debug = 'Y') THEN
                                                asn_debug.put_line('The deliver to person entered in  PO is currently inactive');
                                                asn_debug.put_line(' So it is cleared off');
                                            END IF;
                                        WHEN OTHERS THEN
                                            temp_cascaded_table(current_n).deliver_to_person_id  := NULL;

                                            IF (g_asn_debug = 'Y') THEN
                                                asn_debug.put_line('Some exception has occured');
                                                asn_debug.put_line('This exception is due to the PO deliver to person');
                                                asn_debug.put_line('The deliver to person is optional');
                                                asn_debug.put_line('So cleared off the deliver to person');
                                            END IF;
                                    END;
                                END IF; --}
                            END IF; --}

                                    -- bug 1361786

                            IF (temp_cascaded_table(current_n).ussgl_transaction_code IS NULL) THEN
                                temp_cascaded_table(current_n).ussgl_transaction_code  := x_shipmentdistributionrec.ussgl_transaction_code;
                            END IF;
                        END IF; --} matches txn != deliver

                        current_n                                              := current_n + 1;

                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Increment pointer by 1 ' || TO_CHAR(current_n));
                        END IF;
                    END IF; --} matches if insert into table
                END IF; --} matches shipmentdistributionrec.receipt_days_exception_code = none
            END LOOP; --}
        ELSE        --} {
             -- error_status and error_message are set after validate_quantity_shipped
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('No po_header_id/item_id ');
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Status = ' || x_cascaded_table(n).error_status);
            END IF;

            IF x_cascaded_table(n).error_status IN('S', 'W', 'F') THEN --{
                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                rcv_error_pkg.set_error_message('RCV_ASN_NO_PO_LINE_LOCATION_ID', x_cascaded_table(n).error_message);
                rcv_error_pkg.log_interface_error('DOCUMENT_NUM', FALSE);
            END IF; --}

            RETURN;
        END IF; -- } of (asn quantity_shipped was valid)

        IF shipments%ISOPEN THEN
            CLOSE shipments;
        END IF;

        IF count_shipments%ISOPEN THEN
            CLOSE count_shipments;
        END IF;

        IF distributions%ISOPEN THEN
            CLOSE distributions;
        END IF;

        IF count_distributions%ISOPEN THEN
            CLOSE count_distributions;
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Exit derive_vendor_rcv_line_amt');
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Exception in derive_vendor_rcv_line_amt');
            END IF;

            IF shipments%ISOPEN THEN
                CLOSE shipments;
            END IF;

            IF count_shipments%ISOPEN THEN
                CLOSE count_shipments;
            END IF;

            IF distributions%ISOPEN THEN
                CLOSE distributions;
            END IF;

            IF count_distributions%ISOPEN THEN
                CLOSE count_distributions;
            END IF;

            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('derive_vendor_rcv_line_qty', x_progress);
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_error('DOCUMENT_NUM', FALSE);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line(TO_CHAR(n));
                asn_debug.put_line(SQLERRM);
                asn_debug.put_line('error ' || x_progress);
            END IF;
    END derive_vendor_rcv_line_amt;

    PROCEDURE validate_transaction_date(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        x_val_open_ok  BOOLEAN     := NULL;
        x_sob_id       NUMBER      := NULL;
        x_error_status VARCHAR2(1);
        x_creation_date DATE;
        x_shipped_date DATE;

    BEGIN
        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        x_error_status  := rcv_error_pkg.g_ret_sts_error;

        /*Bug 2327318 Implemented the validation Transaction date should not be greater than
         sysdate */
        IF (x_cascaded_table(n).transaction_date > SYSDATE) THEN
            rcv_error_pkg.set_error_message('RCV_TRX_FUTURE_DATE_NA');
            RAISE e_validation_error;
        END IF;

        /*Bug 6141065: Start: Implemented the validation, Transaction date should not
          pre-date the creation_date or shippped_date in rcv_shipment_headers */
        IF (x_cascaded_table(n).shipment_num IS NOT NULL AND
           x_cascaded_table(n).to_organization_id IS NOT NULL AND
           x_cascaded_table(n).transaction_date IS NOT NULL) THEN

        IF (g_asn_debug = 'Y') THEN
         asn_debug.put_line('Shipment Num ' || x_cascaded_table(n).shipment_num);
         asn_debug.put_line('To Organization ID ' || x_cascaded_table(n).to_organization_id);
         asn_debug.put_line('Transaction Date ' || x_cascaded_table(n).transaction_date);
        END IF;

             BEGIN
                SELECT creation_date, shipped_date
                INTO   x_creation_date, x_shipped_date
                FROM   rcv_shipment_headers
                WHERE shipment_num = x_cascaded_table(n).shipment_num
                AND ship_to_org_id = x_cascaded_table(n).to_organization_id;

                 IF (g_asn_debug = 'Y') THEN
                 asn_debug.put_line('Creation Date ' || x_creation_date);
                 asn_debug.put_line('Shipped Date ' || x_shipped_date);
                END IF;


                IF ( -- x_cascaded_table(n).transaction_date < x_creation_date OR
                     -- Bug 8899155 receipt date can be less than receipt's creation date
                    x_cascaded_table(n).transaction_date < x_shipped_date) THEN
                  rcv_error_pkg.set_error_message('RCV_TRX_DATE_GT_SHIP_DATE');
                  RAISE e_validation_error;
                END IF;

            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    NULL;
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('No Shipment Header exists');
                    END IF;
            END;
           END IF;
         /* Bug 6141065: End */

        /* Bug 2653229 - To check if the transaction date falls in the open period only
        when the auto transact code is not SHIP. */
        IF (x_cascaded_table(n).auto_transact_code <> 'SHIP') THEN --{
            /* Bug# 2379848 - We were only checking for GL and PO periods
             and not for INV periods. Also we were displaying the same
             error message always */
            BEGIN
                SELECT set_of_books_id
                INTO   x_sob_id
                FROM   financials_system_parameters;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    NULL;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Set of books id not defined');
                    END IF;
            END;

            BEGIN
                x_val_open_ok  := po_dates_s.val_open_period(x_cascaded_table(n).transaction_date,
                                                             x_sob_id,
                                                             'SQLGL',
                                                             x_cascaded_table(n).to_organization_id
                                                            );
            EXCEPTION
                WHEN OTHERS THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Exception in val_open_period');
                    END IF;

                    x_val_open_ok  := FALSE;
            END;

            IF NOT(x_val_open_ok) THEN --{
                rcv_error_pkg.set_error_message('PO_CNL_NO_PERIOD');
                RAISE e_validation_error;
            END IF; --}

            BEGIN
                x_val_open_ok  := po_dates_s.val_open_period(x_cascaded_table(n).transaction_date,
                                                             x_sob_id,
                                                             'INV',
                                                             x_cascaded_table(n).to_organization_id
                                                            );
            EXCEPTION
                WHEN OTHERS THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Exception in val_open_period of trx_date');
                    END IF;

                    x_val_open_ok  := FALSE;
            END;

            IF NOT(x_val_open_ok) THEN --{
                rcv_error_pkg.set_error_message('PO_INV_NO_OPEN_PERIOD');
                RAISE e_validation_error;
            END IF; --}

            BEGIN
                x_val_open_ok  := po_dates_s.val_open_period(x_cascaded_table(n).transaction_date,
                                                             x_sob_id,
                                                             'PO',
                                                             x_cascaded_table(n).to_organization_id
                                                            );
            EXCEPTION
                WHEN OTHERS THEN
                    x_val_open_ok  := FALSE;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Exception in val_open_period of gl_date');
                    END IF;
            END;

            IF NOT(x_val_open_ok) THEN --{
                rcv_error_pkg.set_error_message('PO_PO_ENTER_OPEN_GL_DATE');
                RAISE e_validation_error;
            END IF; --} /* End of Bug# 2379848 */
        END IF; --} auto transact code = SHIP
    EXCEPTION
        WHEN e_validation_error THEN
            x_cascaded_table(n).error_status   := x_error_status;
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                                'TRANSACTION_DATE',
                                                FALSE
                                               );
    END validate_transaction_date;

    PROCEDURE validate_quantity_invoiced(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        quantity_invoiced_record rcv_shipment_line_sv.quantity_invoiced_record_type;
    BEGIN
        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        quantity_invoiced_record.quantity_invoiced           := x_cascaded_table(n).quantity_invoiced;
        quantity_invoiced_record.error_record.error_status   := 'S';
        quantity_invoiced_record.error_record.error_message  := NULL;
        rcv_transactions_interface_sv1.validate_quantity_invoiced(quantity_invoiced_record);
        x_cascaded_table(n).error_status                     := quantity_invoiced_record.error_record.error_status;
        x_cascaded_table(n).error_message                    := quantity_invoiced_record.error_record.error_message;
        rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                            'UNIT_OF_MEASURE',
                                            FALSE
                                           );
    END validate_quantity_invoiced;

    PROCEDURE validate_transaction_uom(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        uom_record rcv_shipment_line_sv.quantity_shipped_record_type;
    BEGIN
        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Before call to validate UOM');
            asn_debug.put_line('Quantity ' || TO_CHAR(x_cascaded_table(n).quantity));
            asn_debug.put_line('unit_of_measure ' || x_cascaded_table(n).unit_of_measure);
        END IF;

        uom_record.quantity_shipped            := x_cascaded_table(n).quantity;
        uom_record.unit_of_measure             := x_cascaded_table(n).unit_of_measure;
        uom_record.item_id                     := x_cascaded_table(n).item_id;
        uom_record.po_line_id                  := x_cascaded_table(n).po_line_id;
        uom_record.to_organization_id          := x_cascaded_table(n).to_organization_id;
        uom_record.po_header_id                := x_cascaded_table(n).po_header_id;
        uom_record.primary_unit_of_measure     := x_cascaded_table(n).primary_unit_of_measure;
        uom_record.error_record.error_status   := 'S';
        uom_record.error_record.error_message  := NULL;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Validating UOM');
        END IF;

        rcv_transactions_interface_sv1.validate_uom(uom_record);
        x_cascaded_table(n).error_status       := uom_record.error_record.error_status;
        x_cascaded_table(n).error_message      := uom_record.error_record.error_message;
        rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                            'UNIT_OF_MEASURE',
                                            FALSE
                                           );
    END validate_transaction_uom;

    PROCEDURE validate_item_info(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        item_revision_record rcv_shipment_line_sv.item_id_record_type;
        sub_item_id_record   rcv_shipment_line_sv.sub_item_id_record_type;
        item_id_record       rcv_shipment_line_sv.item_id_record_type;
        l_asn_sub_item_txn   varchar2(1); --Bug: 5598511
        l_pol_item_id        po_lines_all.item_id%type; --Bug: 5598511
    BEGIN
        -- validate item id
        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Validating Item');
            asn_debug.put_line(TO_CHAR(x_cascaded_table(n).item_id));
        END IF;

        /*
           ** If this is a one time item shipment and you've matched up based on a
        ** document line num then skip the processing based on setting the validation
           ** for the item to be the same as what is set on the line.
        */
        IF (    x_cascaded_table(n).item_id IS NULL
            AND x_cascaded_table(n).po_line_id IS NOT NULL) THEN --{
            item_id_record.error_record.error_status   := x_cascaded_table(n).error_status;
            item_id_record.error_record.error_message  := x_cascaded_table(n).error_message;
        ELSE
            asn_debug.put_line('before doing validate int org rcv item ');

            /* Bug 5182693 : Skip validate item for ASN transactions with substitute item */

            asn_debug.put_line('substitute_item_id: '|| x_cascaded_table(n).substitute_item_id);
            asn_debug.put_line('g_txn_against_asn : '|| rcv_roi_header.g_txn_against_asn);
            /** Bug: 5598511
              * For ASN, substitution item id will be populated only during ASN creation and
              * not during the receipt of ASN. In order to bypass item validation for ASN added the
              * condition ' AND rcv_roi_header.g_txn_against_asn = 'N' '
              */
            IF rcv_roi_header.g_txn_against_asn = 'Y' THEN
               l_pol_item_id := nvl(rcv_table_functions.get_pol_row_from_id(x_cascaded_table(n).po_line_id).item_id,-999);
               IF x_cascaded_table(n).item_id <> l_pol_item_id THEN
                  l_asn_sub_item_txn := 'Y';
               ELSE
                  l_asn_sub_item_txn := 'N';
               END IF;
            ELSE
               l_asn_sub_item_txn := 'N';
            END IF;
            IF (x_cascaded_table(n).substitute_item_id IS NULL AND rcv_roi_header.g_txn_against_asn = 'N')
            OR (l_asn_sub_item_txn = 'N' AND rcv_roi_header.g_txn_against_asn = 'Y') --Bug: 5598511
            OR rcv_roi_header.g_txn_against_asn = 'N' THEN --{
                rcv_roi_header_common.validate_item(x_cascaded_table, n); -- bug 608353
            END IF; --}
        END IF; --}

        asn_debug.put_line('after doing validate item the error status is ' || x_cascaded_table(n).error_status);
        rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status, 'ITEM_NUM');
        item_id_record.item_description            := x_cascaded_table(n).item_description;
        item_id_record.error_record.error_status   := 'S';
        item_id_record.error_record.error_message  := NULL;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Validating Item Description ' || x_cascaded_table(n).item_description);
        END IF;

        rcv_transactions_interface_sv1.validate_item_description(item_id_record);
        x_cascaded_table(n).error_status           := item_id_record.error_record.error_status;
        x_cascaded_table(n).error_message          := item_id_record.error_record.error_message;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Error status after validate item description ' || x_cascaded_table(n).error_status);
        END IF;

        rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status, 'ITEM_DESCRIPTION');

        IF (x_cascaded_table(n).substitute_item_id IS NOT NULL) THEN --{
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Validating Substitute Item');
            END IF;

            rcv_roi_header_common.validate_substitute_item(x_cascaded_table, n);
            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status, 'SUBSTITUTE_ITEM_NUM');
        END IF;

        IF (x_cascaded_table(n).item_id IS NOT NULL) THEN   -- Bug 12538097
            rcv_roi_header_common.validate_item_revision(x_cascaded_table, n);
            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status, 'ITEM_REVISION');
        END IF;  -- End Bug 12538097

    EXCEPTION
        WHEN rcv_error_pkg.e_fatal_error THEN
            NULL;
    END validate_item_info;

    PROCEDURE validate_freight_carrier_code(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        X_rsh_freight_carrier_code     rcv_shipment_headers.freight_carrier_code%TYPE := '-999999'; /* Bug 8722496 */
        freight_carrier_record rcv_shipment_line_sv.freight_carrier_record_type;
    BEGIN
        --validate freight carrier code
        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        IF (x_cascaded_table(n).freight_carrier_code IS NOT NULL) THEN --{

        /*Bug 8722496
          Adding IF conditions to ensure that the validation call for freight carriers is not made for
          Internal Orders and Inter-org transfers when rcv_shipment_headers.freight_carrier_code is
          already populated.
        */
            BEGIN
            IF (x_cascaded_table(n).receipt_source_code IN ('INTERNAL ORDER','INVENTORY')) THEN
                SELECT Nvl(rsh.freight_carrier_code,'-999')
                INTO   X_rsh_freight_carrier_code
                FROM   rcv_shipment_headers rsh
                WHERE  rsh.shipment_num   = x_cascaded_table(n).shipment_num
                AND    rsh.ship_to_org_id = x_cascaded_table(n).to_organization_id
                AND    rsh.receipt_source_code IN ('INVENTORY','INTERNAL ORDER');

                IF (X_rsh_freight_carrier_code = x_cascaded_table(n).freight_carrier_code) THEN
                    RETURN;
                END IF;
            END IF;

            EXCEPTION
                WHEN OTHERS THEN
                    asn_debug.put_line('Erroring out in rcv_roi_transaction.validate_freight_carrier_code');
                    asn_debug.put_line(SQLERRM);
            END;
         /* End of fix for Bug 8722496 */

            freight_carrier_record.to_organization_id          := x_cascaded_table(n).to_organization_id;
            freight_carrier_record.freight_carrier_code        := x_cascaded_table(n).freight_carrier_code;
            freight_carrier_record.po_header_id                := x_cascaded_table(n).po_header_id;
            freight_carrier_record.error_record.error_status   := 'S';
            freight_carrier_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Validating Freight Carrier');
            END IF;

            rcv_transactions_interface_sv1.validate_freight_carrier(freight_carrier_record);
            x_cascaded_table(n).error_status                   := freight_carrier_record.error_record.error_status;
            x_cascaded_table(n).error_message                  := freight_carrier_record.error_record.error_message;
            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                                'FREIGHT_CARRIER_CODE',
                                                FALSE
                                               );
        END IF; --}
    END validate_freight_carrier_code;

    PROCEDURE validate_dest_type(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        po_lookup_code_record rcv_shipment_line_sv.po_lookup_code_record_type;
    BEGIN
        /*
      ** Validate Destination Type.  This value is always required
      */
        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        po_lookup_code_record.lookup_code                 := x_cascaded_table(n).destination_type_code;
        po_lookup_code_record.lookup_type                 := 'RCV DESTINATION TYPE';
        po_lookup_code_record.error_record.error_status   := 'S';
        po_lookup_code_record.error_record.error_message  := NULL;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Validating Destination Type Code');
        END IF;

        rcv_transactions_interface_sv1.validate_po_lookup_code(po_lookup_code_record);
        x_cascaded_table(n).error_status                  := po_lookup_code_record.error_record.error_status;
        x_cascaded_table(n).error_message                 := po_lookup_code_record.error_record.error_message;
        rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                            'DESTINATION_TYPE_CODE',
                                            FALSE
                                           );
    END validate_dest_type;

    PROCEDURE validate_ship_to_loc(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        location_record rcv_shipment_line_sv.location_record_type;
    BEGIN
        /*
      ** Validate ship_to_location.  This value is always required
      */
        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;


        /* Skipping validation of ship_to_location in case of direct delivery  Bug 8306879*/
	IF (    x_cascaded_table(n).transaction_type = 'RECEIVE'
            AND NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') = 'DELIVER') THEN

            IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Skipped Ship To Location Validation for Direct Delivery');
            END IF;

            RETURN;
        END IF;

	/* End Bug 8306879 */


        location_record.location_id                 := x_cascaded_table(n).ship_to_location_id;
        location_record.to_organization_id          := x_cascaded_table(n).to_organization_id;
        location_record.destination_type_code       := x_cascaded_table(n).destination_type_code;
        location_record.location_type_code          := 'SHIP_TO';
        location_record.transaction_date            := x_cascaded_table(n).transaction_date;
        location_record.error_record.error_status   := 'S';
        location_record.error_record.error_message  := NULL;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Validating Ship To Location');
        END IF;

        rcv_transactions_interface_sv1.validate_location(location_record);
        x_cascaded_table(n).error_status            := location_record.error_record.error_status;
        x_cascaded_table(n).error_message           := location_record.error_record.error_message;
        rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                            'SHIP_TO_LOCATION_ID',
                                            FALSE
                                           );
    END validate_ship_to_loc;

    PROCEDURE validate_deliver_to_person(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        employee_record rcv_shipment_line_sv.employee_record_type;
    BEGIN
        /*
      ** Validate deliver to person.  This value is always optional
      */
        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        employee_record.employee_id                 := x_cascaded_table(n).deliver_to_person_id;
        employee_record.to_organization_id          := x_cascaded_table(n).to_organization_id;
        employee_record.destination_type_code       := x_cascaded_table(n).destination_type_code;
        employee_record.transaction_date            := x_cascaded_table(n).transaction_date;
        employee_record.error_record.error_status   := 'S';
        employee_record.error_record.error_message  := NULL;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Validating Deliver to Person');
        END IF;

        rcv_transactions_interface_sv1.validate_employee(employee_record);

        /* Bug:6375015
             If the deliver_to_person_id provided is invalid/terminated employee no need
             to fail the transaction, as deliver_to_person_id is not the mandatory field.
             In case of Receivng forms, if we find the deliver_to_person_id is invalid/
             terminated employee we just null out the deliver_to_person_id and proceed
             further. So, commented out the following code, which sets the RTI to error and
             logging of error message in po_interface_errors and added code to null out the
             deliver_to_person_id in case of validation failure for deliver_to_person_id
             in order to synch the behaviour of ROI as to that of forms.*/

        IF  employee_record.error_record.error_status   <>  'S' THEN--Start of bug#6375015 fix
           IF (g_asn_debug = 'Y') THEN
              asn_debug.put_line('validate_employee returned error, setting deliver_to_person_id null');
           END IF;
         --Validation failure for the deliver_to_person_id
           x_cascaded_table(n).deliver_to_person_id := null;
           x_cascaded_table(n).deliver_to_person_name := null;
        ELSE
           IF (g_asn_debug = 'Y') THEN
              asn_debug.put_line('validate_employee returned success');
           END IF;
        END IF;--End of bug#6375015 fix

        /* WDK there was a second validation for
        IF (   x_cascaded_table(n).transaction_type = 'DELIVER'
            OR NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') = 'DELIVER') THEN
       But the code was an exact repeat - thus fully redundant - not sure what the
       purpose was so removed it
     */
    END validate_deliver_to_person;

    PROCEDURE validate_routing_record(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        x_error_status VARCHAR2(1);

        /* Added for bug#16174998*/
        l_insp_status  rcv_transactions.inspection_status_code%TYPE :=NULL;
    BEGIN
        x_error_status  := rcv_error_pkg.g_ret_sts_error;

        /*
      ** Validate routing record  bug 639750
      */
        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Validating routing_header_id');
        END IF;

        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        IF (    x_cascaded_table(n).transaction_type = 'RECEIVE'
            AND NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') = 'DELIVER') THEN
            /* 1 is Standard Receipt, 2 is Inspection Required */
            IF (    (x_cascaded_table(n).routing_header_id) IN(1, 2)
                AND NVL(rcv_setup_s.get_override_routing, 'N') = 'N') THEN
                rcv_error_pkg.set_error_message('RCV_ASN_DELIVER_ROUTING_FAILED');
                RAISE e_validation_error;
            END IF;
        END IF;

        IF (x_cascaded_table(n).transaction_type IN('ACCEPT', 'REJECT')) THEN --{
            IF (    (x_cascaded_table(n).routing_header_id) IN(3)
                AND NVL(rcv_setup_s.get_override_routing, 'N') = 'N') THEN --{
                asn_debug.put_line('We cannot do inspection on this record .');
                rcv_error_pkg.set_error_message('RCV_INSPECT_ROUTING_FAILED');
                RAISE e_validation_error;
            END IF; --}
        END IF; --}

        /* Bug#16174998
         * If profile RCV override routing is No, Deliver txn should not be allowed for Inspection Required routing
         * until Inspect txn is created.  */
        IF ( x_cascaded_table(n).transaction_type = 'DELIVER'
             AND (x_cascaded_table(n).routing_header_id) = 2
             AND NVL(rcv_setup_s.get_override_routing, 'N') = 'N') THEN

           BEGIN

             IF x_cascaded_table(n).parent_transaction_id IS NOT NULL THEN

                SELECT rt.inspection_status_code
                  INTO l_insp_status
                  FROM rcv_transactions rt
                 WHERE rt.transaction_id = x_cascaded_table(n).parent_transaction_id;

             ELSE

                SELECT rti.inspection_status_code
                  INTO l_insp_status
                  FROM rcv_transactions_interface rti
                 WHERE rti.interface_transaction_id = x_cascaded_table(n).parent_interface_txn_id;

             END IF;

           EXCEPTION
           WHEN OTHERS THEN
             l_insp_status := NULL;
           END;

           IF l_insp_status = 'NOT INSPECTED' THEN

             asn_debug.put_line('We cannot do deliver on this record .');
             rcv_error_pkg.set_error_message('RCV_ASN_DELIVER_ROUTING_FAILED');
             RAISE e_validation_error;

           END IF;

        END IF;

        /* End for bug#16174998*/
    EXCEPTION
        WHEN e_validation_error THEN
            x_cascaded_table(n).error_status   := x_error_status;
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;

            -- This case statement assigns the appropriate tokens
            -- all error messages must be found in the case statement
            -- if the error message has no token then use a null statement
            IF x_cascaded_table(n).error_message = 'RCV_ASN_DELIVER_ROUTING_FAILED' THEN
                NULL;
            ELSIF x_cascaded_table(n).error_message = 'RCV_INSPECT_ROUTING_FAILED' THEN
                NULL;
            END IF;

            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                                'ROUTING_HEADER_ID',
                                                FALSE
                                               );
    END validate_routing_record;

    PROCEDURE validate_deliver_to_loc(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        location_record rcv_shipment_line_sv.location_record_type;
    BEGIN
        /*
      ** Validate deliver_to_location.  If this is an expense or shop floor
      ** destination then the value is required
      */
        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        IF (   x_cascaded_table(n).transaction_type = 'DELIVER'
            OR NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') = 'DELIVER') THEN
            location_record.location_id                 := x_cascaded_table(n).deliver_to_location_id;
            location_record.to_organization_id          := x_cascaded_table(n).to_organization_id;
            location_record.destination_type_code       := x_cascaded_table(n).destination_type_code;
            location_record.location_type_code          := 'DELIVER_TO';
            location_record.transaction_date            := x_cascaded_table(n).transaction_date;
            location_record.error_record.error_status   := 'S';
            location_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Validating Deliver To Location');
            END IF;

            rcv_transactions_interface_sv1.validate_location(location_record);
            x_cascaded_table(n).error_status            := location_record.error_record.error_status;
            x_cascaded_table(n).error_message           := location_record.error_record.error_message;
            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                                'DELIVER_TO_LOCATION_ID',
                                                FALSE
                                               );
        END IF;
    END validate_deliver_to_loc;

    /* WMS Changes */
    PROCEDURE validate_subinventory(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        x_subinventory         VARCHAR2(10)                         := NULL;
        l_api_version CONSTANT NUMBER                               := 1.0;
        l_return_status        VARCHAR2(1);
        l_msg_count            NUMBER;
        l_msg_data             fnd_new_messages.MESSAGE_TEXT%TYPE;
        l_msg_buf              VARCHAR2(2000);
        l_progress             VARCHAR2(3)                          := '001';
        x_error_status         VARCHAR2(1);
        l_transaction_type_id  NUMBER;

    BEGIN
        x_error_status  := rcv_error_pkg.g_ret_sts_error;

        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        /* We can derive from_subinventory for Return transactions and derive
         * to_subinventory for receive, transfer and transfer transactions.
        */
        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Validating Subinventory ');
        END IF;

        /* bug 3367485: for dropship deliver, skip subinventory validation as
         * Inventory has relaxed the subinventory validation for logical trxns
         */
        /* Commented this out as we will not support ASN auto deliver while
         * subinventory is null. See updates on Bug 3367485 */
        /* IF (x_drop_ship_flag = 'Y') THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Skip subinventory validation for dropship deliver ');
            END IF;

            RETURN;
        END IF; */

        IF (    (   x_cascaded_table(n).transaction_type = 'DELIVER'
                 OR x_cascaded_table(n).auto_transact_code = 'DELIVER')
            AND x_cascaded_table(n).destination_type_code <> 'INVENTORY') THEN --{
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('No need to validate Subinventory if the destination_type is Expense. So return');
            END IF;

            RETURN;
        END IF;

        IF (   x_cascaded_table(n).transaction_type = 'DELIVER'
            OR x_cascaded_table(n).auto_transact_code = 'DELIVER') THEN --{
            IF (x_cascaded_table(n).subinventory IS NULL) THEN
                rcv_error_pkg.set_error_message('RCV_DEST_SUB_NA');
                RAISE e_validation_error;
            END IF;

            /*
            ** Validate the subinventory
            */
            x_progress  := '010';

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('subinventory ' || x_cascaded_table(n).subinventory);
                asn_debug.put_line('to_organization_id ' || x_cascaded_table(n).to_organization_id);
                asn_debug.put_line('transaction_date ' || x_cascaded_table(n).transaction_date);
                asn_debug.put_line('item_id ' || x_cascaded_table(n).item_id);
            END IF;

            SELECT NVL(MAX(secondary_inventory_name), 'notfound')
            INTO   x_subinventory
            FROM   mtl_secondary_inventories msub,
                   mtl_system_items msi
            WHERE  msub.secondary_inventory_name = x_cascaded_table(n).subinventory
            AND    msub.organization_id = x_cascaded_table(n).to_organization_id
            AND    x_cascaded_table(n).transaction_date < NVL(msub.disable_date, x_cascaded_table(n).transaction_date + 1)
            AND    msi.inventory_item_id = x_cascaded_table(n).item_id
            AND    msi.organization_id = x_cascaded_table(n).to_organization_id
            AND    (   msi.restrict_subinventories_code = 2
                    OR (    msi.restrict_subinventories_code = 1
                        AND EXISTS(SELECT NULL
                                   FROM   mtl_item_sub_inventories mis
                                   WHERE  mis.organization_id = x_cascaded_table(n).to_organization_id
                                   AND    mis.inventory_item_id = x_cascaded_table(n).item_id
                                   AND    mis.secondary_inventory = x_cascaded_table(n).subinventory)
                       )
                   );

            IF (x_subinventory = 'notfound') THEN
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('subinventory not found. error ');
                END IF;

                rcv_error_pkg.set_error_message('RCV_DEST_SUB_INVALID');
                RAISE e_validation_error;
            END IF;

	    -- Bug 10253000: Start Validate material status on subinventory level

            IF x_cascaded_table(n).receipt_source_code = 'VENDOR' THEN
               l_transaction_type_id := 18;

            ELSIF x_cascaded_table(n).receipt_source_code = 'INVENTORY' THEN
               l_transaction_type_id := 12;

            ELSIF x_cascaded_table(n).receipt_source_code = 'INTERNAL ORDER' THEN
               l_transaction_type_id := 61;

            ELSIF x_cascaded_table(n).receipt_source_code = 'CUSTOMER' THEN
               l_transaction_type_id := 15;

            ELSE
               l_transaction_type_id := -99;
            END IF;

            IF (inv_material_status_grp.is_status_applicable
                                        (NULL,
                                         NULL,
                                         l_transaction_type_id,
                                         NULL,
                                         NULL,
                                         x_cascaded_table(n).to_organization_id,
                                         NULL,
                                         x_cascaded_table(n).subinventory,
                                         NULL,
                                         NULL,
                                         NULL,
                                         'Z') <> 'Y') THEN
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('subinventory is invalidate. error ');
                END IF;

                rcv_error_pkg.set_error_message('RCV_DEST_SUB_INVALID');
                RAISE e_validation_error;

            END IF;
            -- Bug 10253000: End

        ELSE --}{
            inv_rcv_integration_apis.validate_sub_loc(l_api_version,
                                                      'FALSE',
                                                      l_return_status,
                                                      l_msg_count,
                                                      l_msg_data,
                                                      x_cascaded_table(n).GROUP_ID,
                                                      x_cascaded_table(n).request_id,
                                                      x_cascaded_table(n).interface_transaction_id,
                                                      1
                                                     );

            IF (l_return_status = fnd_api.g_ret_sts_error) THEN
                RAISE fnd_api.g_exc_error;
            ELSIF(l_return_status = fnd_api.g_ret_sts_unexp_error) THEN
                RAISE fnd_api.g_exc_unexpected_error;
            END IF;
        END IF; --}
    EXCEPTION
        WHEN e_validation_error THEN
            x_cascaded_table(n).error_status   := x_error_status;
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;

            -- This case statement assigns the appropriate tokens
            -- all error messages must be found in the case statement
            -- if the error message has no token then use a null statement
            IF x_cascaded_table(n).error_message = 'RCV_DEST_SUB_NA' THEN
                NULL;
            ELSIF x_cascaded_table(n).error_message = 'RCV_DEST_SUB_INVALID' THEN
                NULL;
            END IF;

            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                                'SUBINVENTORY',
                                                FALSE
                                               );
        WHEN OTHERS THEN
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('validate_subinventory', l_progress);
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_error('SUBINVENTORY', FALSE);
    END validate_subinventory;

    PROCEDURE validate_locator(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        locator_record rcv_shipment_line_sv.locator_record_type;
        l_transaction_type_id  NUMBER;

    BEGIN
        /*
      ** Validate locator if inventory destination or if not inventory
      ** destintion make sure to null out the locator_id
      */
        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Trx Type = ' || x_cascaded_table(n).transaction_type || 'Auto Trx Code = ' || x_cascaded_table(n).auto_transact_code);
        END IF;

        IF (   x_cascaded_table(n).transaction_type = 'DELIVER'
            OR NVL(x_cascaded_table(n).auto_transact_code, 'RECEIVE') = 'DELIVER') THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Valid Loc - Destination Type Code = ' || x_cascaded_table(n).destination_type_code);
            END IF;

            IF (x_cascaded_table(n).destination_type_code = 'INVENTORY') THEN
                locator_record.locator_id                  := x_cascaded_table(n).locator_id;
                locator_record.subinventory                := x_cascaded_table(n).subinventory;
                locator_record.to_organization_id          := x_cascaded_table(n).to_organization_id;
                locator_record.destination_type_code       := x_cascaded_table(n).destination_type_code;
                locator_record.item_id                     := x_cascaded_table(n).item_id;
                locator_record.transaction_date            := x_cascaded_table(n).transaction_date;

                --Bug13844195
                locator_record.receipt_source_code         := x_cascaded_table(n).receipt_source_code; --Bug13844195
                locator_record.po_distribution_id         := x_cascaded_table(n).po_distribution_id; --Bug13844195
                locator_record.source_document_code   := x_cascaded_table(n).source_document_code; --Bug13844195
                locator_record.project_id         := x_cascaded_table(n).project_id; --Bug13844195
                locator_record.task_id   := x_cascaded_table(n).task_id; --Bug13844195
                --End Bug 13844195

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Locator = ' || TO_CHAR(locator_record.locator_id));
                    asn_debug.put_line('Subinventory = ' || locator_record.subinventory);
                    asn_debug.put_line('To Org = ' || locator_record.to_organization_id);
                    asn_debug.put_line('Dest Type = ' || locator_record.destination_type_code);
                    asn_debug.put_line('Item Id = ' || locator_record.item_id);
                END IF;

                locator_record.error_record.error_status   := 'S';
                locator_record.error_record.error_message  := NULL;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Validating Locator');
                END IF;

                rcv_transactions_interface_sv1.validate_locator(locator_record);
                IF (NVL(x_cascaded_table(n).mobile_txn, 'N') = 'N') THEN      ---add by bug 17965336, bypass the validate when it is mobile txn
                  rcv_transactions_interface_sv1.validate_project_locator(locator_record); --Bug13844195
                END IF;  ---add by bug 17965336
                x_cascaded_table(n).error_status           := locator_record.error_record.error_status;
                x_cascaded_table(n).error_message          := locator_record.error_record.error_message;

                -- Bug 13817635 added
                rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                                    'LOCATOR_ID',
                                                    FALSE
                                                   );
                -- Bug 13817635 ended

		/* Bug 5468345.
		 * If the user has specified locator_id or locator_num and org/sub/item is not under locator control,
		 * then the rcv_transactions_interface_sv1.validate_locator procedure nulls out the locator_id.
		 * We need to copy this back to the x_cascaded_table. This used to cause data corruption.
		 * Changed the code to null it.
		*/

	        if locator_record.locator_id is null then

                        asn_debug.put_line('Locator_id is nulled out');
			x_cascaded_table(n).locator_id := locator_record.locator_id;
	        end if;


                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Loc Error Status  = ' || locator_record.error_record.error_status);
                    asn_debug.put_line('Loc Error Msg  = ' || locator_record.error_record.error_message);
                    asn_debug.put_line('Locator_id  = ' || locator_record.locator_id);
                END IF;

                -- Bug 10253000 : Validate Material Status on locator level

                IF x_cascaded_table(n).receipt_source_code = 'VENDOR' THEN
                   l_transaction_type_id := 18;

                ELSIF x_cascaded_table(n).receipt_source_code = 'INVENTORY' THEN
                      l_transaction_type_id := 12;

                ELSIF x_cascaded_table(n).receipt_source_code = 'INTERNAL ORDER' THEN
                      l_transaction_type_id := 61;

                ELSIF x_cascaded_table(n).receipt_source_code = 'CUSTOMER' THEN
                      l_transaction_type_id := 15;

                ELSE
                      l_transaction_type_id := -99;
                END IF;

                IF (inv_material_status_grp.is_status_applicable
                                        (NULL,
                                         NULL,
                                         l_transaction_type_id,
                                         NULL,
                                         NULL,
                                         x_cascaded_table(n).to_organization_id,
                                         NULL,
                                         NULL,
                                         x_cascaded_table(n).locator_id,
                                         NULL,
                                         NULL,
                                         'L') <> 'Y') THEN
                    rcv_error_pkg.set_error_message('RCV_ALL_INVALID_LOCATOR');
                    x_cascaded_table(n).error_status := rcv_error_pkg.g_ret_sts_error;
                    x_cascaded_table(n).error_message := 'RCV_ALL_INVALID_LOCATOR';
                    locator_record.error_record.error_status := rcv_error_pkg.g_ret_sts_error;
                    locator_record.error_record.error_message := 'RCV_ALL_REQUIRED_LOCATOR';
                END IF;
                -- Bug 10253000 : End

                rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                                    'LOCATOR_ID',
                                                    FALSE
                                                   );
            ELSE --}{
                x_cascaded_table(n).locator_id  := NULL;
                x_cascaded_table(n).LOCATOR     := NULL;
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('locator_id ' || x_cascaded_table(n).locator_id);
                    asn_debug.put_line('locator ' || x_cascaded_table(n).locator);
		END IF;
            END IF; --}
        END IF;
    END validate_locator;

    PROCEDURE validate_tax_code(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER,
        /* Bug3454491 (4) */
        x_asn_type       IN            rcv_headers_interface.asn_type%TYPE
    ) IS
        tax_name_record rcv_shipment_line_sv.tax_name_record_type;
    BEGIN
        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        IF (x_cascaded_table(n).tax_name IS NOT NULL) THEN
            IF (x_asn_type = 'ASBN') THEN
                tax_name_record.tax_name                    := x_cascaded_table(n).tax_name;
                tax_name_record.error_record.error_status   := 'S';
                tax_name_record.error_record.error_message  := NULL;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Validating Tax Code');
                END IF;

                rcv_transactions_interface_sv1.validate_tax_code(tax_name_record);
                x_cascaded_table(n).error_status            := tax_name_record.error_record.error_status;
                x_cascaded_table(n).error_message           := tax_name_record.error_record.error_message;
                rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                                    'TAX_NAME',
                                                    FALSE
                                                   );
            END IF;
        END IF;
    END validate_tax_code;

    PROCEDURE validate_country_of_origin(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        country_of_origin_record rcv_shipment_line_sv.country_of_origin_record_type;
    BEGIN
        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        --FRKHAN 12/18/98 validate country of origin code
        IF (x_cascaded_table(n).country_of_origin_code IS NOT NULL) THEN
            country_of_origin_record.country_of_origin_code      := x_cascaded_table(n).country_of_origin_code;
            country_of_origin_record.error_record.error_status   := 'S';
            country_of_origin_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Validating Country of Origin Code');
            END IF;

            rcv_transactions_interface_sv1.validate_country_of_origin(country_of_origin_record);
            x_cascaded_table(n).error_status                     := country_of_origin_record.error_record.error_status;
            x_cascaded_table(n).error_message                    := country_of_origin_record.error_record.error_message;
            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                                'COUNTRY_OF_ORIGIN_CODE',
                                                FALSE
                                               );
        END IF;
    END validate_country_of_origin;

    PROCEDURE validate_asl(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        asl_record rcv_shipment_line_sv.ref_integrity_record_type;
    BEGIN
        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        asl_record.po_header_id                := x_cascaded_table(n).po_header_id;
        asl_record.vendor_id                   := x_cascaded_table(n).vendor_id;
        asl_record.vendor_site_id              := x_cascaded_table(n).vendor_site_id;
        asl_record.item_id                     := x_cascaded_table(n).item_id;
        asl_record.to_organization_id          := x_cascaded_table(n).to_organization_id;
        asl_record.error_record.error_status   := 'S';
        asl_record.error_record.error_message  := NULL;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Validating ASL');
        END IF;

        rcv_transactions_interface_sv1.validate_asl(asl_record);
        x_cascaded_table(n).error_status       := asl_record.error_record.error_status;
        x_cascaded_table(n).error_message      := asl_record.error_record.error_message;
        rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                            'SUPPLY_AGREEMENT_FLAG',
                                            FALSE
                                           );
    END validate_asl;

    PROCEDURE validate_shipped_qty(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        cum_quantity_record rcv_shipment_line_sv.cum_quantity_record_type;
    BEGIN
        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        IF NVL(x_cascaded_table(n).vendor_cum_shipped_qty, 0) <> 0 THEN
            cum_quantity_record.to_organization_id          := x_cascaded_table(n).to_organization_id;
            cum_quantity_record.po_header_id                := x_cascaded_table(n).po_header_id;
            cum_quantity_record.vendor_cum_shipped_qty      := x_cascaded_table(n).vendor_cum_shipped_qty;
            cum_quantity_record.item_id                     := x_cascaded_table(n).item_id;
            cum_quantity_record.vendor_id                   := x_cascaded_table(n).vendor_id;
            cum_quantity_record.vendor_site_id              := x_cascaded_table(n).vendor_site_id;
            cum_quantity_record.primary_unit_of_measure     := x_cascaded_table(n).primary_unit_of_measure;
            cum_quantity_record.quantity_shipped            := x_cascaded_table(n).quantity;
            cum_quantity_record.unit_of_measure             := x_cascaded_table(n).unit_of_measure;
            cum_quantity_record.transaction_date            := x_cascaded_table(n).transaction_date;
            cum_quantity_record.error_record.error_status   := 'S';
            cum_quantity_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Validating Cum Qty Shipped');
            END IF;

            rcv_transactions_interface_sv1.validate_cum_quantity_shipped(cum_quantity_record);
            x_cascaded_table(n).error_status                := cum_quantity_record.error_record.error_status;
            x_cascaded_table(n).error_message               := cum_quantity_record.error_record.error_message;
            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                                'VENDOR_CUM_SHIPPED_QTY',
                                                FALSE
                                               );
        END IF; -- vendor_cum_shipped_qty <> 0
    END validate_shipped_qty;

    PROCEDURE validate_ref_integrity(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER,
        x_header_record  IN            rcv_roi_preprocessor.header_rec_type
    ) IS
        ref_integrity_record rcv_shipment_line_sv.ref_integrity_record_type;
        l_job_id             po_lines.job_id%TYPE;
        l_item_description   po_lines.item_description%TYPE;
        l_category_id        po_lines.category_id%TYPE;
        x_error_status       VARCHAR2(1);
    BEGIN
        x_error_status                                   := rcv_error_pkg.g_ret_sts_error;

        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Validating ref integrity');
        END IF;

        ref_integrity_record.to_organization_id          := x_cascaded_table(n).to_organization_id;
        ref_integrity_record.po_line_location_id         := x_cascaded_table(n).po_line_location_id;
        ref_integrity_record.po_header_id                := x_cascaded_table(n).po_header_id;
        ref_integrity_record.po_line_id                  := x_cascaded_table(n).po_line_id;
        ref_integrity_record.vendor_id                   := x_cascaded_table(n).vendor_id;
        ref_integrity_record.vendor_site_id              := x_cascaded_table(n).vendor_site_id;
        ref_integrity_record.vendor_item_num             := x_cascaded_table(n).vendor_item_num;

	/*
	 Bug 6447564.
	 Added below line to pass parent_txn_id value to the proc validate_ref_integ()
	 So that we may take the vendor site id from parent txn if parent_txn_id not null.
	*/
        ref_integrity_record.parent_txn_id               := x_cascaded_table(n).PARENT_TRANSACTION_ID;


        /* Bug 3210821.
         * We default po_revision_num from RT for all the
         * transactions other than receive or direct delivery.
         * Hence we should not be validationg this against the
         * revision_num in PO header since it might heve been
         * changed. So set po_revision_num to null if it is any other
         * transaction other than RECEIVE. This would take care of
         * direct delivery also since trx_type will be receive for
         * that also.
        */
        IF (x_cascaded_table(n).transaction_type = 'RECEIVE') THEN
            ref_integrity_record.po_revision_num  := x_cascaded_table(n).po_revision_num;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Trx_type RECEIVE and revision num is ' || ref_integrity_record.po_revision_num);
            END IF;
        ELSE
            ref_integrity_record.po_revision_num  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Trx_type is not RECEIVE and revision num is ' || ref_integrity_record.po_revision_num);
            END IF;
        END IF;

        /* End of 3210821. */
        ref_integrity_record.error_record.error_status   := 'S';
        ref_integrity_record.error_record.error_message  := NULL;
        --replacing call with a validate_ref_integ call with the method in thid package
        -- rcv_transactions_interface_sv1.validate_ref_integ (ref_integrity_record,X_header_record);
        validate_ref_integ(ref_integrity_record, x_header_record);

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('After Validating Ref Integ: ' || ref_integrity_record.error_record.error_status);
        END IF;

        x_cascaded_table(n).error_status                 := ref_integrity_record.error_record.error_status;
        x_cascaded_table(n).error_message                := ref_integrity_record.error_record.error_message;
        rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status, 'TRANSACTIONS_INTERFACE_ID');

        IF (x_cascaded_table(n).matching_basis = 'AMOUNT') THEN --{
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('job_id ' || x_cascaded_table(n).job_id);
                asn_debug.put_line('item_description ' || x_cascaded_table(n).item_description);
                asn_debug.put_line('category_id ' || x_cascaded_table(n).category_id);
            END IF;

            IF (x_cascaded_table(n).job_id IS NOT NULL) THEN
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Before select l_job_id ' || l_job_id);
                END IF;

                SELECT NVL(MAX(job_id), 0)
                INTO   l_job_id
                FROM   po_lines
                WHERE  po_line_id = x_cascaded_table(n).po_line_id
                AND    job_id = x_cascaded_table(n).job_id;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('After select l_job_id ' || l_job_id);
                END IF;

                IF (l_job_id = 0) THEN
                    rcv_error_pkg.set_error_message('RCV_NOT_PO_JOB_ID');
                    RAISE e_validation_error;
                END IF;
            END IF;

            IF (x_cascaded_table(n).item_description IS NOT NULL) THEN

		/* Complex work.
		 * For work confirmations check in shipment level. If
		 * null then in po_lines. For other POs
		 * check in po_lines.
		*/

		If (nvl(x_header_record.header_record.asn_type,'STD') = 'WC') then --{

                  BEGIN
                    SELECT (description)
                    INTO   l_item_description
                    FROM   po_line_locations
                    WHERE  line_location_id =
				x_cascaded_table(n).po_line_location_id
                    AND    description = x_cascaded_table(n).item_description;

                  EXCEPTION
                    WHEN NO_DATA_FOUND THEN
			BEGIN
			SELECT (item_description)
			INTO   l_item_description
			FROM   po_lines
			WHERE  po_line_id = x_cascaded_table(n).po_line_id
			AND    item_description =
				x_cascaded_table(n).item_description;
			EXCEPTION
			WHEN NO_DATA_FOUND THEN
			l_item_description  := 'NO DATA';
			END;

                  END;

		else --}{
                  BEGIN
                    SELECT (item_description)
                    INTO   l_item_description
                    FROM   po_lines
                    WHERE  po_line_id = x_cascaded_table(n).po_line_id
                    AND    item_description = x_cascaded_table(n).item_description;
                  EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        l_item_description  := 'NO DATA';
                  END;

		End if; --}

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('After select l_item_description ' || l_item_description);
                END IF;

                IF (l_item_description = 'NO DATA') THEN
                    rcv_error_pkg.set_error_message('RCV_NOT_PO_ITEM_DESC');
                    RAISE e_validation_error;
                END IF;
            END IF;

            IF (x_cascaded_table(n).category_id IS NOT NULL) THEN
                SELECT NVL(MAX(category_id), 0)
                INTO   l_category_id
                FROM   po_lines
                WHERE  po_line_id = x_cascaded_table(n).po_line_id
                AND    category_id = x_cascaded_table(n).category_id;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('After select l_category_id ' || l_category_id);
                END IF;

                IF (l_category_id = 0) THEN
                    rcv_error_pkg.set_error_message('RCV_NOT_PO_CATEGORY');
                    RAISE e_validation_error;
                END IF;
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('l_job_id ' || l_job_id);
                asn_debug.put_line('l_item_description ' || l_item_description);
                asn_debug.put_line('l_category_id ' || l_category_id);
                asn_debug.put_line('x_cascaded_table(n).error_status ' || x_cascaded_table(n).error_status);
            END IF;
        END IF; --}

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Leave validate_ref_integrity');
        END IF;
    EXCEPTION
        WHEN e_validation_error THEN
            x_cascaded_table(n).error_status   := x_error_status;
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;

            IF x_cascaded_table(n).error_message = 'RCV_NOT_PO_JOB_ID' THEN
                rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                                    'JOB_ID',
                                                    FALSE
                                                   );
            ELSIF x_cascaded_table(n).error_message = 'RCV_NOT_PO_ITEM_DESC' THEN
                rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                                    'ITEM_DESCRIPTION',
                                                    FALSE
                                                   );
            ELSIF x_cascaded_table(n).error_message = 'RCV_NOT_PO_CATEGORY' THEN
                rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                                    'CATEGORY_ID',
                                                    FALSE
                                                   );
            END IF;
        WHEN rcv_error_pkg.e_fatal_error THEN
            NULL;
        WHEN OTHERS THEN
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('validate_ref_integrity', '000');
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_error('TRANSACTIONS_INTERFACE_ID', FALSE);
    END validate_ref_integrity;

    PROCEDURE exchange_sub_items(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        location_record rcv_shipment_line_sv.location_record_type;
        x_item_id       NUMBER;
        x_primary_uom   mtl_system_items.primary_unit_of_measure%TYPE   := NULL;
        x_uom_class     VARCHAR2(10);
        x_uom_count     NUMBER(10);
        prim_uom_qty    NUMBER;
        x_error_status  VARCHAR2(1);
	l_item_description mtl_system_items_vl.description%type; --bug 4697949
    BEGIN
        x_error_status  := rcv_error_pkg.g_ret_sts_error;

          -- If substitute item has been specified then we need to switch the item_id with the
        -- substitute item. Also make sure that we can receive the substitute item in the
        -- ASN UOM. Convert the primary_quantity in item.primary uom to the substitute_item.primary_uom
        -- If this fails then the transaction is in error

        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        IF x_cascaded_table(n).substitute_item_id IS NOT NULL THEN --{

                                                                      -- exchange_sub_item(x_cascaded_table,n);
                                                                   -- the call to exchange sub item is not made
                                                                   -- instead the code of exchange sub item is put there
            SELECT COUNT(*)
            INTO   x_uom_count
            FROM   mtl_item_uoms_view
            WHERE  organization_id = x_cascaded_table(n).to_organization_id
            AND    inventory_item_id(+) = x_cascaded_table(n).substitute_item_id
            AND    unit_of_measure = x_cascaded_table(n).unit_of_measure;

            IF x_uom_count = 0 THEN
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('The substitute item cannot be received in ASN uom' || x_cascaded_table(n).unit_of_measure);
                END IF;

                rcv_error_pkg.set_error_message('RCV_ITEM_SUB_NOT_ALLOWED');
                RAISE e_validation_error;
            END IF;

            SELECT MAX(primary_unit_of_measure)
            INTO   x_primary_uom
            FROM   mtl_system_items
            WHERE  mtl_system_items.inventory_item_id = x_cascaded_table(n).item_id
            AND    mtl_system_items.organization_id = x_cascaded_table(n).to_organization_id;

            IF x_primary_uom IS NULL THEN
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('No Primary UOM for substitute item');
                END IF;

                rcv_error_pkg.set_error_message('RCV_UOM_NO_CONV_PRIMARY');
                RAISE e_validation_error;
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Primary UOM for substitute item is ' || x_primary_uom);
            END IF;

            IF x_primary_uom <> x_cascaded_table(n).primary_unit_of_measure THEN --{
                prim_uom_qty                                 := rcv_transactions_interface_sv.convert_into_correct_qty(x_cascaded_table(n).quantity,
                                                                                                                       x_cascaded_table(n).unit_of_measure,
                                                                                                                       x_cascaded_table(n).item_id,
                                                                                                                       x_primary_uom
                                                                                                                      );

                IF prim_uom_qty = 0 THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Not possible to convert between asn and primary UOM');
                    END IF;

                    rcv_error_pkg.set_error_message('RCV_UOM_NO_CONV_PRIMARY');
                    RAISE e_validation_error;
                END IF;

                x_cascaded_table(n).primary_unit_of_measure  := x_primary_uom;
                x_cascaded_table(n).primary_quantity         := prim_uom_qty;
            END IF; --}

            /* added for bug 4697949. querying msi to get the description of
	       substitute item*/
	    BEGIN
	      select description
	      into   l_item_description
	      from   mtl_system_items_vl
	      where  inventory_item_id = x_cascaded_table(n).substitute_item_id
	      and    organization_id = x_cascaded_table(n).to_organization_id;
	    EXCEPTION
	      when others then
	        l_item_description := null;
	    END;

            x_item_id                               := x_cascaded_table(n).item_id;
            x_cascaded_table(n).item_id             := x_cascaded_table(n).substitute_item_id;
	    x_cascaded_table(n).item_description    := l_item_description; --bug 4697949
            x_cascaded_table(n).substitute_item_id  := x_item_id; -- Just for debugging purposes.

                                                                  -- end of exchange sub item code which has been copied over from rcvtisvb++++++++++++++++++++++
        END IF; --}
    EXCEPTION
        WHEN e_validation_error THEN
            x_cascaded_table(n).error_status   := x_error_status;
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;

            IF x_cascaded_table(n).error_message = 'RCV_ITEM_SUB_NOT_ALLOWED' THEN
                rcv_error_pkg.set_token('ITEM', x_cascaded_table(n).substitute_item_id);
            ELSIF x_cascaded_table(n).error_message = 'RCV_UOM_NO_CONV_PRIMARY' THEN
                rcv_error_pkg.set_token('SHIPMENT_UNIT', x_cascaded_table(n).primary_unit_of_measure);
                rcv_error_pkg.set_token('PRIMARY_UNIT', x_primary_uom);
            END IF;
    END exchange_sub_items;

    PROCEDURE validate_consigned_inventory(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER,
        /* Bug3454491 (5) */
        x_asn_type       IN            rcv_headers_interface.asn_type%TYPE
    ) IS
        l_consigned_po_rec        rcv_shipment_line_sv.po_line_location_id_rtype;
        l_consumption_po_rec      rcv_shipment_line_sv.document_num_record_type;
        l_consumption_release_rec rcv_shipment_line_sv.release_id_record_type;
    BEGIN
        /* <Consigned Inventory Pre-Processor FPI START> */

        /* Reject ASBN transaction if it's a shipment against Consigned PO */
        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        IF     (x_asn_type = 'ASBN')
           AND (x_cascaded_table(n).po_line_location_id IS NOT NULL) THEN
            l_consigned_po_rec.po_line_location_id         := x_cascaded_table(n).po_line_location_id;
            l_consigned_po_rec.error_record.error_status   := 'S';
            l_consigned_po_rec.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Validating ASBN for Consigned PO');
            END IF;

            rcv_transactions_interface_sv1.validate_consigned_po(l_consigned_po_rec);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('After Validating ASBN for Consigned PO');
            END IF;

            x_cascaded_table(n).error_status               := l_consigned_po_rec.error_record.error_status;
            x_cascaded_table(n).error_message              := l_consigned_po_rec.error_record.error_message;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Error status  ' || l_consigned_po_rec.error_record.error_status);
                asn_debug.put_line('Error name:  ' || l_consigned_po_rec.error_record.error_message);
            END IF;

            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status, 'PO_LINE_LOCATION_ID');
        END IF; -- IF ( (X_asn_type = 'ASBN')

        /*
        ** Reject ASN, ASBN or Receipt transactions against Consumption PO
        */
        IF     (x_cascaded_table(n).po_header_id IS NOT NULL)
           AND (x_cascaded_table(n).po_release_id IS NULL) THEN
            l_consumption_po_rec.po_header_id                := x_cascaded_table(n).po_header_id;
            l_consumption_po_rec.error_record.error_status   := 'S';
            l_consumption_po_rec.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Validating Consumption PO');
            END IF;

            rcv_transactions_interface_sv1.validate_consumption_po(l_consumption_po_rec);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('After Validating Consumption PO');
            END IF;

            x_cascaded_table(n).error_status                 := l_consumption_po_rec.error_record.error_status;
            x_cascaded_table(n).error_message                := l_consumption_po_rec.error_record.error_message;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Error status  ' || l_consumption_po_rec.error_record.error_status);
                asn_debug.put_line('Error name:  ' || l_consumption_po_rec.error_record.error_message);
            END IF;

            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status, 'PO_HEADER_ID');
        END IF;

        /*
        ** Reject ASN, ASBN or Receipt transactions against Consumption Release
        */
        IF (x_cascaded_table(n).po_release_id IS NOT NULL) THEN
            l_consumption_release_rec.po_release_id               := x_cascaded_table(n).po_release_id;
            l_consumption_release_rec.error_record.error_status   := 'S';
            l_consumption_release_rec.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Validating Consumption Release');
            END IF;

            rcv_transactions_interface_sv1.validate_consumption_release(l_consumption_release_rec);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('After Validating Consumption Release');
            END IF;

            x_cascaded_table(n).error_status                      := l_consumption_release_rec.error_record.error_status;
            x_cascaded_table(n).error_message                     := l_consumption_release_rec.error_record.error_message;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Error status  ' || l_consumption_release_rec.error_record.error_status);
                asn_debug.put_line('Error name:  ' || l_consumption_release_rec.error_record.error_message);
            END IF;

            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status, 'PO_RELEASE_ID');
        END IF;
    /* <Consigned Inventory Pre-Processor FPI END> */
    EXCEPTION
        WHEN rcv_error_pkg.e_fatal_error THEN
            NULL;
    END validate_consigned_inventory;

    PROCEDURE validate_ref_integ(
        x_ref_integrity_rec IN OUT NOCOPY rcv_shipment_line_sv.ref_integrity_record_type,
        x_header_record     IN            rcv_roi_preprocessor.header_rec_type
    ) IS
        x_po_vendor_id      po_headers.vendor_id%TYPE        := NULL;
        x_po_line_id        po_lines.po_line_id%TYPE;
        x_po_vendor_site_id po_headers.vendor_site_id%TYPE   := NULL;
        x_progress          VARCHAR2(3);
        x_error_status      VARCHAR2(1);
    BEGIN
        x_error_status  := rcv_error_pkg.g_ret_sts_error;

        IF (x_ref_integrity_rec.vendor_item_num IS NOT NULL) THEN
            SELECT NVL(MAX(po_line_id), 0)
            INTO   x_po_line_id
            FROM   po_lines
            WHERE  po_line_id = x_ref_integrity_rec.po_line_id
            AND    vendor_product_num = x_ref_integrity_rec.vendor_item_num;

            IF (x_po_line_id = 0) THEN
                rcv_error_pkg.set_error_message('RCV_NOT_PO_VEN_ITEM');
                RAISE e_validation_error;
            END IF;
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Validating vendor id in PO ' || TO_CHAR(x_ref_integrity_rec.vendor_id));
            asn_debug.put_line('PO Header Id ' || TO_CHAR(x_ref_integrity_rec.po_header_id));
        END IF;

        IF x_ref_integrity_rec.vendor_id IS NOT NULL THEN
            SELECT NVL(MAX(vendor_id), 0)
            INTO   x_po_vendor_id
            FROM   po_headers
            WHERE  po_header_id = x_ref_integrity_rec.po_header_id
            AND    vendor_id = x_ref_integrity_rec.vendor_id;

            IF (x_po_vendor_id = 0) THEN
                rcv_error_pkg.set_error_message('RCV_NOT_PO_VEN');
                RAISE e_validation_error;
            END IF;
        END IF;

        -- Check for header.vendor = lines.vendor
        IF x_header_record.header_record.vendor_id IS NOT NULL THEN
            IF x_header_record.header_record.vendor_id <> NVL(x_ref_integrity_rec.vendor_id, x_header_record.header_record.vendor_id) THEN
                rcv_error_pkg.set_error_message('RCV_ERC_MISMATCH_PO_VENDOR');
                RAISE e_validation_error;
            END IF;
        END IF;

        IF x_ref_integrity_rec.vendor_site_id IS NOT NULL THEN
            /*
	      BUG 6447564.
	      Changed the vendor_site_id validation code.
	      Added parent_txn_id condition so as to take into account,
	      the possibility that the vendor_site can change on a PO even after
	      receipts have been created.
	      So now incase of null parent txn id we see from PO_headers and
	      incase of non-null parent_txn_id we look for the parent txn's vendor_site_id.
	    */
	    IF (x_ref_integrity_rec.parent_txn_id IS NULL) THEN

		SELECT NVL(MAX(vendor_site_id), 0)
		INTO   x_po_vendor_site_id
	        FROM   po_headers
		WHERE  po_header_id = x_ref_integrity_rec.po_header_id
	        AND    vendor_site_id = x_ref_integrity_rec.vendor_site_id;

		asn_debug.put_line('vendor_site_id from PO_HEADERS ' || TO_CHAR(x_po_vendor_site_id));

	    END IF;

            IF (x_ref_integrity_rec.parent_txn_id IS NOT NULL) THEN

               SELECT NVL(MAX(vendor_site_id), 0)
               INTO   x_po_vendor_site_id
               FROM   rcv_transactions
               WHERE  po_header_id = x_ref_integrity_rec.po_header_id
               AND    transaction_id = x_ref_integrity_rec.parent_txn_id
               AND    vendor_site_id = x_ref_integrity_rec.vendor_site_id;

	       asn_debug.put_line('vendor_site_id from RCV_TRANSACTIONS ' || TO_CHAR(x_po_vendor_site_id));

            END IF;


            IF (x_po_vendor_site_id = 0) THEN
                rcv_error_pkg.set_error_message('RCV_NOT_PO_VEN_SITE');
                RAISE e_validation_error;
            END IF;
        END IF;

        IF x_ref_integrity_rec.po_revision_num IS NOT NULL THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('po_revision_num: ' || x_ref_integrity_rec.po_revision_num);
            END IF;

            SELECT NVL(MAX(vendor_site_id), 0)
            INTO   x_po_vendor_site_id
            FROM   po_headers
            WHERE  po_header_id = x_ref_integrity_rec.po_header_id
            AND    revision_num = x_ref_integrity_rec.po_revision_num;

            IF (x_po_vendor_site_id = 0) THEN
                rcv_error_pkg.set_error_message('RCV_NOT_PO_REVISION');
                RAISE e_validation_error;
            END IF;
        END IF;
    EXCEPTION
        WHEN e_validation_error THEN
            x_ref_integrity_rec.error_record.error_status   := x_error_status;
            x_ref_integrity_rec.error_record.error_message  := rcv_error_pkg.get_last_message;

            IF x_ref_integrity_rec.error_record.error_message = 'RCV_NOT_PO_VEN_ITEM' THEN
                rcv_error_pkg.set_token('PO_SUPPLIER_ITEM', '');
                rcv_error_pkg.set_token('SHIPMENT_SUPPLIER_ITEM', x_ref_integrity_rec.vendor_item_num);
            ELSIF x_ref_integrity_rec.error_record.error_message = 'RCV_NOT_PO_VEN' THEN
                rcv_error_pkg.set_token('PO_SUPPLIER', '');
                rcv_error_pkg.set_token('SHIPMENT_SUPPLIER', x_ref_integrity_rec.vendor_id);
            ELSIF x_ref_integrity_rec.error_record.error_message = 'RCV_ERC_MISMATCH_PO_VENDOR' THEN
                NULL;
            ELSIF x_ref_integrity_rec.error_record.error_message = 'RCV_NOT_PO_VEN_SITE' THEN
                rcv_error_pkg.set_token('PO_SUPPLIER_SITE', '');
                rcv_error_pkg.set_token('SHIPMENT_SUPPLIER_SITE', x_ref_integrity_rec.vendor_site_id);
            ELSIF x_ref_integrity_rec.error_record.error_message = 'RCV_NOT_PO_REVISION' THEN
                rcv_error_pkg.set_token('PO_REV', '');
                rcv_error_pkg.set_token('SHIPMENT_REV', x_ref_integrity_rec.po_revision_num);
            END IF;
    END validate_ref_integ;

    PROCEDURE validate_temp_labor_info(
        v_trans_tab     IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n               IN            BINARY_INTEGER,
        v_header_record IN            rcv_roi_preprocessor.header_rec_type
    ) IS
        x_error_status VARCHAR2(1);
    BEGIN
        x_error_status  := rcv_error_pkg.g_ret_sts_error;

        IF v_trans_tab(n).error_status NOT IN('S', 'W') THEN
            RETURN;
        END IF;

        IF     v_trans_tab(n).matching_basis = 'AMOUNT'
           AND v_trans_tab(n).purchase_basis = 'TEMP LABOR' THEN
            IF    v_trans_tab(n).job_id IS NULL
               OR v_trans_tab(n).timecard_id IS NULL
               OR v_trans_tab(n).timecard_ovn IS NULL THEN
                rcv_error_pkg.set_error_message('RCV_NO_TEMP_LABOR_INFO');
                RAISE e_validation_error;
            END IF;
        END IF;
    EXCEPTION
        WHEN e_validation_error THEN
            v_trans_tab(n).error_status   := x_error_status;
            v_trans_tab(n).error_message  := rcv_error_pkg.get_last_message;

            IF v_trans_tab(n).error_message = 'RCV_NO_TEMP_LABOR_INFO' THEN
                NULL;
            END IF;
    END validate_temp_labor_info;

    PROCEDURE validate_amount(
        v_trans_tab     IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n               IN            BINARY_INTEGER,
        v_header_record IN            rcv_roi_preprocessor.header_rec_type
    ) IS
        x_error_status VARCHAR2(1);
    BEGIN
        x_error_status  := rcv_error_pkg.g_ret_sts_error;

        IF v_trans_tab(n).error_status NOT IN('S', 'W') THEN
            RETURN;
        END IF;

        IF v_trans_tab(n).matching_basis = 'AMOUNT' THEN
            IF    v_trans_tab(n).amount IS NULL
               OR v_trans_tab(n).amount <= 0 THEN
                rcv_error_pkg.set_error_message('RCV_NO_AMOUNT');
                RAISE e_validation_error;
            END IF;
        END IF;
    EXCEPTION
        WHEN e_validation_error THEN
            v_trans_tab(n).error_status   := x_error_status;
            v_trans_tab(n).error_message  := rcv_error_pkg.get_last_message;

            IF v_trans_tab(n).error_message = 'RCV_NO_AMOUNT' THEN
                NULL;
            END IF;
    END validate_amount;

    PROCEDURE handle_rcv_asn_transactions(
        v_trans_tab     IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        v_header_record IN OUT NOCOPY rcv_roi_preprocessor.header_rec_type
    ) IS
        v_current_interface_id     NUMBER;
        v_prior_interface_id       NUMBER;
        i                          BINARY_INTEGER                                             := 0;
        e_o_t                      BINARY_INTEGER                                             := 0;
        x_rowid                    VARCHAR2(255);
        l_wms_return_status        VARCHAR2(1);
        l_wms_msg_count            NUMBER;
        l_wms_msg_data             VARCHAR2(400);
        lorgid                     NUMBER;                                  -- For Bug 2110031
                                           --WMS lot serial support
        l_orig_trx_id              rcv_transactions_interface.interface_transaction_id%TYPE;
        l_ls_table                 inv_rcv_integration_apis.child_rec_tb_tp;
        l_ls_table_idx             BINARY_INTEGER                                             := 0;
        l_api_version              NUMBER                                                     := 1.0;
        l_return_status            VARCHAR2(1);
        l_msg_count                NUMBER;
        l_msg_data                 fnd_new_messages.MESSAGE_TEXT%TYPE;
        l_group_id                 rcv_transactions_interface.GROUP_ID%TYPE;
        l_header_interface_id      rcv_transactions_interface.header_interface_id%TYPE;
        l_interface_transaction_id rcv_transactions_interface.interface_transaction_id%TYPE;
        l_return                   BOOLEAN                                                    := TRUE;
        l_message                  VARCHAR2(2000);
        l_trx_type                 rcv_transactions_interface.transaction_type%TYPE;
        l_src_doc_code             rcv_transactions_interface.source_document_code%TYPE;
        l_ship_head_id             rcv_transactions_interface.shipment_header_id%TYPE;
        l_count                    NUMBER;
        l_cnt                      NUMBER;
        x_fail_all_lines           VARCHAR2(1):='N';
    BEGIN
        IF v_trans_tab.COUNT > 0 THEN --{
            i                       := v_trans_tab.FIRST;
            e_o_t                   := v_trans_tab.LAST;
            v_current_interface_id  := -999;
            v_prior_interface_id    := -999;

            /* Delete only once from the rcv_transactions_interface table for every
            group of pl/sql table rows that have the same interface id */
            FOR j IN i .. e_o_t LOOP
                asn_debug.put_line('Transaction Type ' || v_trans_tab(j).transaction_type);
                v_current_interface_id  := v_trans_tab(j).interface_transaction_id;
                l_ls_table_idx          := l_ls_table.COUNT + 1;

                /* SELECT GROUP_SEQUENCE_ID_S.nextval into V_TRANS_TAB(j).GROUP_ID
                from dual;      -- Check whether this has to be unique  */
                -- Will use the group_id from the header_record as the pre-processor
                -- needs the header and transactions group id to be the same
                IF (v_trans_tab(j).transaction_type IN('RECEIVE', 'SHIP')) THEN
                    v_trans_tab(j).GROUP_ID  := v_header_record.header_record.GROUP_ID;
                END IF;

                asn_debug.put_line('Group id ' || TO_CHAR(v_trans_tab(j).GROUP_ID));
                /* Assigning to_organization_id to lorgid which is passed
                   as a parameter to WMS_INSTALL function .Also added
                   debug messages .*/
                lorgid                  := v_trans_tab(j).to_organization_id;
                asn_debug.put_line('organization id ' || TO_CHAR(v_trans_tab(j).to_organization_id));
                asn_debug.put_line('lorgid ' || TO_CHAR(lorgid));

                IF v_current_interface_id <> v_prior_interface_id THEN
                    asn_debug.put_line('Handle the original interface id ' || TO_CHAR(v_trans_tab(j).interface_transaction_id));
                    asn_debug.put_line('delete from rcv_transactions_interface rowid ' || v_trans_tab(j).row_id);
                    asn_debug.put_line('matching_basis=' || v_trans_tab(j).matching_basis);

                    /* WMS Changes */
                    IF v_trans_tab(j).matching_basis <> 'AMOUNT' THEN
                        l_orig_trx_id                                     := v_trans_tab(j).interface_transaction_id;
                        -- add to lot serial table
                        l_ls_table(l_ls_table_idx).orig_interface_trx_id  := l_orig_trx_id;
                        l_ls_table(l_ls_table_idx).new_interface_trx_id   := l_orig_trx_id;
                        l_ls_table(l_ls_table_idx).quantity               := v_trans_tab(j).quantity;
                    END IF;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Deleting RTI ' || v_trans_tab(j).interface_transaction_id);
                    END IF;

                    rcv_trx_interface_delete_pkg.delete_row(v_trans_tab(j).row_id);
                     /* V_TRANS_TAB(j).INTERFACE_TRANSACTION_ID := NULL; */  -- need to maintain the interface transaction id
                    -- for error reporting
                    x_rowid               := NULL;

                    /* FPJ WMS.
                * lpn_group_id should not be null if there is lpn info.
                    */
                    IF (    (   v_trans_tab(j).lpn_id IS NOT NULL
                             OR v_trans_tab(j).transfer_lpn_id IS NOT NULL
                             OR v_trans_tab(j).license_plate_number IS NOT NULL
                             OR v_trans_tab(j).transfer_license_plate_number IS NOT NULL)
                        AND v_trans_tab(j).lpn_group_id IS NULL
                       ) THEN
                        SELECT rcv_interface_groups_s.NEXTVAL
                        INTO   v_trans_tab(j).lpn_group_id
                        FROM   DUAL;
                    END IF;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Inserting new RTI');
                        asn_debug.put_line('category_id ' || v_trans_tab(j).category_id);
                        asn_debug.put_line('quantity ' || v_trans_tab(j).quantity);
                        asn_debug.put_line('amount ' || v_trans_tab(j).amount);
                        asn_debug.put_line('unit_of_measure ' || v_trans_tab(j).unit_of_measure);
                        asn_debug.put_line('interface_source_code ' || v_trans_tab(j).interface_source_code);
                        asn_debug.put_line('interface_source_line_id ' || v_trans_tab(j).interface_source_line_id);
                        asn_debug.put_line('inv_transaction_id ' || v_trans_tab(j).inv_transaction_id);
                        asn_debug.put_line('item_id ' || v_trans_tab(j).item_id);
                        asn_debug.put_line('item_description ' || v_trans_tab(j).item_description);
                        asn_debug.put_line('item_revision ' || v_trans_tab(j).item_revision);
                        asn_debug.put_line('uom_code ' || v_trans_tab(j).uom_code);
                        asn_debug.put_line('employee_id ' || v_trans_tab(j).employee_id);
                        asn_debug.put_line('auto_transact_code ' || v_trans_tab(j).auto_transact_code);
                        asn_debug.put_line('shipment_header_id ' || v_trans_tab(j).shipment_header_id);
                        asn_debug.put_line('shipment_header_id ' || v_header_record.header_record.receipt_header_id);
                        asn_debug.put_line('shipment_line_id ' || v_trans_tab(j).shipment_line_id);
                        asn_debug.put_line('ship_to_location_id ' || v_trans_tab(j).ship_to_location_id);
                        asn_debug.put_line('primary_quantity ' || v_trans_tab(j).primary_quantity);
                        asn_debug.put_line('primary_unit_of_measure ' || v_trans_tab(j).primary_unit_of_measure);
                        asn_debug.put_line('receipt_source_code ' || v_trans_tab(j).receipt_source_code);
                        asn_debug.put_line('vendor_id ' || v_trans_tab(j).vendor_id);
                        asn_debug.put_line('vendor_site_id ' || v_trans_tab(j).vendor_site_id);
                        asn_debug.put_line('from_organization_id ' || v_trans_tab(j).from_organization_id);
                        asn_debug.put_line('from_subinventory ' || v_trans_tab(j).from_subinventory);
                        asn_debug.put_line('to_organization_id ' || v_trans_tab(j).to_organization_id);
                        asn_debug.put_line('intransit_owning_org_id ' || v_trans_tab(j).intransit_owning_org_id);
                        asn_debug.put_line('routing_header_id ' || v_trans_tab(j).routing_header_id);
                        asn_debug.put_line('routing_step_id ' || v_trans_tab(j).routing_step_id);
                        asn_debug.put_line('source_document_code ' || v_trans_tab(j).source_document_code);
                        asn_debug.put_line('parent_transaction_id ' || v_trans_tab(j).parent_transaction_id);
                        asn_debug.put_line('po_header_id ' || v_trans_tab(j).po_header_id);
                        asn_debug.put_line('po_revision_num ' || v_trans_tab(j).po_revision_num);
                        asn_debug.put_line('po_line_id ' || v_trans_tab(j).po_line_id);
                        asn_debug.put_line('po_line_location_id ' || v_trans_tab(j).po_line_location_id);
                        asn_debug.put_line('po_unit_price ' || v_trans_tab(j).po_unit_price);
                        asn_debug.put_line('currency_code ' || v_trans_tab(j).currency_code);
                        asn_debug.put_line('currency_conversion_type ' || v_trans_tab(j).currency_conversion_type);
                        asn_debug.put_line('currency_conversion_rate ' || v_trans_tab(j).currency_conversion_rate);
                        asn_debug.put_line('currency_conversion_date ' || TO_CHAR(v_trans_tab(j).currency_conversion_date, 'DD-MON-YYYY HH24:MI:SS'));
                        asn_debug.put_line('po_distribution_id ' || v_trans_tab(j).po_distribution_id);
                        asn_debug.put_line('requisition_line_id ' || v_trans_tab(j).requisition_line_id);
                        asn_debug.put_line('req_distribution_id ' || v_trans_tab(j).req_distribution_id);
                        asn_debug.put_line('charge_account_id ' || v_trans_tab(j).charge_account_id);
                        asn_debug.put_line('substitute_unordered_code ' || v_trans_tab(j).substitute_unordered_code);
                        asn_debug.put_line('receipt_exception_flag ' || v_trans_tab(j).receipt_exception_flag);
                        asn_debug.put_line('accrual_status_code ' || v_trans_tab(j).accrual_status_code);
                        asn_debug.put_line('inspection_status_code ' || v_trans_tab(j).inspection_status_code);
                        asn_debug.put_line('inspection_quality_code ' || v_trans_tab(j).inspection_quality_code);
                        asn_debug.put_line('destination_type_code ' || v_trans_tab(j).destination_type_code);
                        asn_debug.put_line('deliver_to_person_id ' || v_trans_tab(j).deliver_to_person_id);
                        asn_debug.put_line('location_id ' || v_trans_tab(j).location_id);
                        asn_debug.put_line('deliver_to_location_id ' || v_trans_tab(j).deliver_to_location_id);
                        asn_debug.put_line('subinventory ' || v_trans_tab(j).subinventory);
                        asn_debug.put_line('locator_id ' || v_trans_tab(j).locator_id);
                        asn_debug.put_line('wip_entity_id ' || v_trans_tab(j).wip_entity_id);
                        asn_debug.put_line('wip_line_id ' || v_trans_tab(j).wip_line_id);
                        asn_debug.put_line('shipment_num ' || v_trans_tab(j).shipment_num);
                        asn_debug.put_line('source_doc_quantity ' || v_trans_tab(j).source_doc_quantity);
                        asn_debug.put_line('from_locator_id ' || v_trans_tab(j).from_locator_id);
                        asn_debug.put_line('oe_order_header_id ' || v_trans_tab(j).oe_order_header_id);
                        asn_debug.put_line('oe_order_line_id ' || v_trans_tab(j).oe_order_line_id);
                        asn_debug.put_line('customer_id ' || v_trans_tab(j).customer_id);
                        asn_debug.put_line('customer_site_id ' || v_trans_tab(j).customer_site_id);
                        asn_debug.put_line('lpn_id ' || v_trans_tab(j).lpn_id);
                        asn_debug.put_line('transfer_lpn_id ' || v_trans_tab(j).transfer_lpn_id);
                        asn_debug.put_line('lpn_group_id ' || v_trans_tab(j).lpn_group_id);
                        asn_debug.put_line('project_id ' || v_trans_tab(j).project_id);
                        asn_debug.put_line('task_id ' || v_trans_tab(j).task_id);
                        asn_debug.put_line('timecard_id ' ||
				v_trans_tab(j).timecard_id);
                        asn_debug.put_line('timecard_ovn ' ||
				v_trans_tab(j).timecard_ovn);
			asn_debug.put_line('org_id ' || v_trans_tab(j).org_id);  --<R12 MOAC>

                        asn_debug.put_line('matching_basis ' ||
				v_trans_tab(j).matching_basis);
		        asn_debug.put_line('amount_shipped ' ||
				v_trans_tab(j).amount_shipped);
                        asn_debug.put_line('requested_amount ' ||
				v_trans_tab(j).requested_amount);
		        asn_debug.put_line('material_stored_amount ' ||
				v_trans_tab(j).material_stored_amount);
		        asn_debug.put_line('replenish_order_line_id' ||
				v_trans_tab(j).replenish_order_line_id);
				asn_debug.put_line('express_transaction' || v_trans_tab(j).express_transaction); -- Bug 14067935
                        asn_debug.put_line('lcm_shipment_line_id' || v_trans_tab(j).lcm_shipment_line_id);
                        asn_debug.put_line('unit_landed_cost' || v_trans_tab(j).unit_landed_cost);

                    END IF;

                    rcv_asn_interface_trx_ins_pkg.insert_row(v_trans_tab(j).row_id,
                                                             v_trans_tab(j).interface_transaction_id,
                                                             v_trans_tab(j).GROUP_ID,
                                                             v_trans_tab(j).last_update_date,
                                                             v_trans_tab(j).last_updated_by,
                                                             v_trans_tab(j).creation_date,
                                                             v_trans_tab(j).created_by,
                                                             v_trans_tab(j).last_update_login,
                                                             v_trans_tab(j).request_id,
                                                             v_trans_tab(j).program_application_id,
                                                             v_trans_tab(j).program_id,
                                                             v_trans_tab(j).program_update_date,
                                                             v_trans_tab(j).transaction_type,
                                                             v_trans_tab(j).transaction_date,
                                                             v_trans_tab(j).processing_status_code,
                                                             v_trans_tab(j).processing_mode_code,
                                                             v_trans_tab(j).processing_request_id,
                                                             v_trans_tab(j).transaction_status_code,
                                                             v_trans_tab(j).category_id,
                                                             v_trans_tab(j).quantity,
                                                             v_trans_tab(j).unit_of_measure,
                                                             v_trans_tab(j).interface_source_code,
                                                             v_trans_tab(j).interface_source_line_id,
                                                             v_trans_tab(j).inv_transaction_id,
                                                             v_trans_tab(j).item_id,
                                                             v_trans_tab(j).item_description,
                                                             v_trans_tab(j).item_revision,
                                                             v_trans_tab(j).uom_code,
                                                             v_trans_tab(j).employee_id,
                                                             v_trans_tab(j).auto_transact_code,
                                                             NVL(v_trans_tab(j).shipment_header_id, v_header_record.header_record.receipt_header_id),
                                                             v_trans_tab(j).shipment_line_id,
                                                             v_trans_tab(j).ship_to_location_id,
                                                             v_trans_tab(j).primary_quantity,
                                                             v_trans_tab(j).primary_unit_of_measure,
                                                             v_trans_tab(j).receipt_source_code,
                                                             v_trans_tab(j).vendor_id,
                                                             v_trans_tab(j).vendor_site_id,
                                                             v_trans_tab(j).from_organization_id,
                                                             v_trans_tab(j).from_subinventory,
                                                             v_trans_tab(j).to_organization_id,
                                                             v_trans_tab(j).intransit_owning_org_id,
                                                             v_trans_tab(j).routing_header_id,
                                                             v_trans_tab(j).routing_step_id,
                                                             v_trans_tab(j).source_document_code,
                                                             v_trans_tab(j).parent_transaction_id,
                                                             v_trans_tab(j).po_header_id,
                                                             v_trans_tab(j).po_revision_num,
                                                             v_trans_tab(j).po_release_id,
                                                             v_trans_tab(j).po_line_id,
                                                             v_trans_tab(j).po_line_location_id,
                                                             v_trans_tab(j).po_unit_price,
                                                             v_trans_tab(j).currency_code,
                                                             v_trans_tab(j).currency_conversion_type,
                                                             v_trans_tab(j).currency_conversion_rate,
                                                             v_trans_tab(j).currency_conversion_date,
                                                             v_trans_tab(j).po_distribution_id,
                                                             v_trans_tab(j).requisition_line_id,
                                                             v_trans_tab(j).req_distribution_id,
                                                             v_trans_tab(j).charge_account_id,
                                                             v_trans_tab(j).substitute_unordered_code,
                                                             v_trans_tab(j).receipt_exception_flag,
                                                             v_trans_tab(j).accrual_status_code,
                                                             v_trans_tab(j).inspection_status_code,
                                                             v_trans_tab(j).inspection_quality_code,
                                                             v_trans_tab(j).destination_type_code,
                                                             v_trans_tab(j).deliver_to_person_id,
                                                             v_trans_tab(j).location_id,
                                                             v_trans_tab(j).deliver_to_location_id,
                                                             v_trans_tab(j).subinventory,
                                                             v_trans_tab(j).locator_id,
                                                             v_trans_tab(j).wip_entity_id,
                                                             v_trans_tab(j).wip_line_id,
                                                             v_trans_tab(j).department_code,
                                                             v_trans_tab(j).wip_repetitive_schedule_id,
                                                             v_trans_tab(j).wip_operation_seq_num,
                                                             v_trans_tab(j).wip_resource_seq_num,
                                                             v_trans_tab(j).bom_resource_id,
                                                             v_trans_tab(j).shipment_num,
                                                             v_trans_tab(j).freight_carrier_code,
                                                             v_trans_tab(j).bill_of_lading,
                                                             v_trans_tab(j).packing_slip,
                                                             v_trans_tab(j).shipped_date,
                                                             v_trans_tab(j).expected_receipt_date,
                                                             v_trans_tab(j).actual_cost,
                                                             v_trans_tab(j).transfer_cost,
                                                             v_trans_tab(j).transportation_cost,
                                                             v_trans_tab(j).transportation_account_id,
                                                             v_trans_tab(j).num_of_containers,
                                                             v_trans_tab(j).waybill_airbill_num,
                                                             v_trans_tab(j).vendor_item_num,
                                                             v_trans_tab(j).vendor_lot_num,
                                                             v_trans_tab(j).rma_reference,
                                                             v_trans_tab(j).comments,
                                                             v_trans_tab(j).attribute_category,
                                                             v_trans_tab(j).attribute1,
                                                             v_trans_tab(j).attribute2,
                                                             v_trans_tab(j).attribute3,
                                                             v_trans_tab(j).attribute4,
                                                             v_trans_tab(j).attribute5,
                                                             v_trans_tab(j).attribute6,
                                                             v_trans_tab(j).attribute7,
                                                             v_trans_tab(j).attribute8,
                                                             v_trans_tab(j).attribute9,
                                                             v_trans_tab(j).attribute10,
                                                             v_trans_tab(j).attribute11,
                                                             v_trans_tab(j).attribute12,
                                                             v_trans_tab(j).attribute13,
                                                             v_trans_tab(j).attribute14,
                                                             v_trans_tab(j).attribute15,
                                                             v_trans_tab(j).ship_head_attribute_category,
                                                             v_trans_tab(j).ship_head_attribute1,
                                                             v_trans_tab(j).ship_head_attribute2,
                                                             v_trans_tab(j).ship_head_attribute3,
                                                             v_trans_tab(j).ship_head_attribute4,
                                                             v_trans_tab(j).ship_head_attribute5,
                                                             v_trans_tab(j).ship_head_attribute6,
                                                             v_trans_tab(j).ship_head_attribute7,
                                                             v_trans_tab(j).ship_head_attribute8,
                                                             v_trans_tab(j).ship_head_attribute9,
                                                             v_trans_tab(j).ship_head_attribute10,
                                                             v_trans_tab(j).ship_head_attribute11,
                                                             v_trans_tab(j).ship_head_attribute12,
                                                             v_trans_tab(j).ship_head_attribute13,
                                                             v_trans_tab(j).ship_head_attribute14,
                                                             v_trans_tab(j).ship_head_attribute15,
                                                             v_trans_tab(j).ship_line_attribute_category,
                                                             v_trans_tab(j).ship_line_attribute1,
                                                             v_trans_tab(j).ship_line_attribute2,
                                                             v_trans_tab(j).ship_line_attribute3,
                                                             v_trans_tab(j).ship_line_attribute4,
                                                             v_trans_tab(j).ship_line_attribute5,
                                                             v_trans_tab(j).ship_line_attribute6,
                                                             v_trans_tab(j).ship_line_attribute7,
                                                             v_trans_tab(j).ship_line_attribute8,
                                                             v_trans_tab(j).ship_line_attribute9,
                                                             v_trans_tab(j).ship_line_attribute10,
                                                             v_trans_tab(j).ship_line_attribute11,
                                                             v_trans_tab(j).ship_line_attribute12,
                                                             v_trans_tab(j).ship_line_attribute13,
                                                             v_trans_tab(j).ship_line_attribute14,
                                                             v_trans_tab(j).ship_line_attribute15,
                                                             v_trans_tab(j).ussgl_transaction_code,
                                                             v_trans_tab(j).government_context,
                                                             v_trans_tab(j).reason_id,
                                                             v_trans_tab(j).destination_context,
                                                             v_trans_tab(j).source_doc_quantity,
                                                             v_trans_tab(j).source_doc_unit_of_measure,
                                                             v_trans_tab(j).movement_id,
                                                             v_trans_tab(j).header_interface_id,
                                                             v_trans_tab(j).vendor_cum_shipped_qty,
                                                             v_trans_tab(j).item_num,
                                                             v_trans_tab(j).document_num,
                                                             v_trans_tab(j).document_line_num,
                                                             v_trans_tab(j).truck_num,
                                                             v_trans_tab(j).ship_to_location_code,
                                                             v_trans_tab(j).container_num,
                                                             v_trans_tab(j).substitute_item_num,
                                                             v_trans_tab(j).notice_unit_price,
                                                             v_trans_tab(j).item_category,
                                                             v_trans_tab(j).location_code,
                                                             v_trans_tab(j).vendor_name,
                                                             v_trans_tab(j).vendor_num,
                                                             v_trans_tab(j).vendor_site_code,
                                                             v_trans_tab(j).from_organization_code,
                                                             v_trans_tab(j).to_organization_code,
                                                             v_trans_tab(j).intransit_owning_org_code,
                                                             v_trans_tab(j).routing_code,
                                                             v_trans_tab(j).routing_step,
                                                             v_trans_tab(j).release_num,
                                                             v_trans_tab(j).document_shipment_line_num,
                                                             v_trans_tab(j).document_distribution_num,
                                                             v_trans_tab(j).deliver_to_person_name,
                                                             v_trans_tab(j).deliver_to_location_code,
                                                             v_trans_tab(j).use_mtl_lot,
                                                             v_trans_tab(j).use_mtl_serial,
                                                             v_trans_tab(j).LOCATOR,
                                                             v_trans_tab(j).reason_name,
                                                             v_trans_tab(j).validation_flag,
                                                             v_trans_tab(j).substitute_item_id,
                                                             v_trans_tab(j).quantity_shipped,
                                                             v_trans_tab(j).quantity_invoiced,
                                                             v_trans_tab(j).tax_name,
                                                             v_trans_tab(j).tax_amount,
                                                             v_trans_tab(j).req_num,
                                                             v_trans_tab(j).req_line_num,
                                                             v_trans_tab(j).req_distribution_num,
                                                             v_trans_tab(j).wip_entity_name,
                                                             v_trans_tab(j).wip_line_code,
                                                             v_trans_tab(j).resource_code,
                                                             v_trans_tab(j).shipment_line_status_code,
                                                             v_trans_tab(j).barcode_label,
                                                             v_trans_tab(j).country_of_origin_code,
                                                             v_trans_tab(j).from_locator_id, --WMS Change
                                                             v_trans_tab(j).qa_collection_id,
                                                             v_trans_tab(j).oe_order_header_id,
                                                             v_trans_tab(j).oe_order_line_id,
                                                             v_trans_tab(j).customer_id,
                                                             v_trans_tab(j).customer_site_id,
                                                             v_trans_tab(j).customer_item_num,
                                                             v_trans_tab(j).create_debit_memo_flag,
                                                             v_trans_tab(j).put_away_rule_id,
                                                             v_trans_tab(j).put_away_strategy_id,
                                                             v_trans_tab(j).lpn_id,
                                                             v_trans_tab(j).transfer_lpn_id,
                                                             v_trans_tab(j).cost_group_id,
                                                             v_trans_tab(j).mobile_txn,
                                                             v_trans_tab(j).mmtt_temp_id,
                                                             v_trans_tab(j).transfer_cost_group_id,
                                                             v_trans_tab(j).secondary_quantity,
                                                             v_trans_tab(j).secondary_unit_of_measure,
                                                             v_trans_tab(j).secondary_uom_code,
                                                             v_trans_tab(j).qc_grade,
                                                             v_trans_tab(j).oe_order_num,
                                                             v_trans_tab(j).oe_order_line_num,
                                                             v_trans_tab(j).customer_account_number,
                                                             v_trans_tab(j).customer_party_name,
                                                             v_trans_tab(j).source_transaction_num,
                                                             v_trans_tab(j).parent_source_transaction_num,
                                                             v_trans_tab(j).parent_interface_txn_id,
                                                             v_trans_tab(j).customer_item_id,
                                                             v_trans_tab(j).interface_available_qty,
                                                             v_trans_tab(j).interface_transaction_qty,
                                                             v_trans_tab(j).from_locator,
                                                             v_trans_tab(j).lpn_group_id,
                                                             v_trans_tab(j).order_transaction_id,
                                                             v_trans_tab(j).license_plate_number,
                                                             v_trans_tab(j).transfer_license_plate_number,
                                                             v_trans_tab(j).amount,
                                                             v_trans_tab(j).job_id,
                                                             v_trans_tab(j).project_id,
                                                             v_trans_tab(j).task_id,
                                                             v_trans_tab(j).asn_attach_id,
                                                             v_trans_tab(j).timecard_id,
                                                             v_trans_tab(j).timecard_ovn,
                                                             v_trans_tab(j).interface_available_amt,
                                                             v_trans_tab(j).interface_transaction_amt,
							     v_trans_tab(j).org_id,  --<R12 MOAC>
                                                             v_trans_tab(j).matching_basis,
                                                             v_trans_tab(j).amount_shipped,
                                                             v_trans_tab(j).requested_amount,
                                                             v_trans_tab(j).material_stored_amount,
                                                             v_trans_tab(j).replenish_order_line_id,
							                                               v_trans_tab(j).express_transaction,--NULL,   -- Bug 14067935
                                                             v_trans_tab(j).lcm_shipment_line_id, -- lcm changes
                                                             v_trans_tab(j).unit_landed_cost  -- lcm changes
                                                            );
                    asn_debug.put_line('RowId ' || v_trans_tab(j).row_id);
                    asn_debug.put_line('Interface Id ' || TO_CHAR(v_trans_tab(j).interface_transaction_id));
                    v_prior_interface_id  := v_current_interface_id;
                    v_trans_tab.DELETE(j);
                ELSE
                    asn_debug.put_line('insert into rcv_transactions_interface with new id ');
                    /* Since we are inserting 1-> many rows need to generate a new interface id */
                    v_trans_tab(j).interface_transaction_id  := NULL;
                    x_rowid                                  := NULL;

                    /* FPJ WMS.
                * lpn_group_id should not be null if there is lpn info. But
                * since this is a split line coming from the original rti line,
                * this has to have the same lpn group id.
                    */
                    IF (    (   v_trans_tab(j).lpn_id IS NOT NULL
                             OR v_trans_tab(j).transfer_lpn_id IS NOT NULL
                             OR v_trans_tab(j).license_plate_number IS NOT NULL
                             OR v_trans_tab(j).transfer_license_plate_number IS NOT NULL)
                        AND v_trans_tab(j).lpn_group_id IS NULL
                       ) THEN
                        SELECT rcv_interface_groups_s.CURRVAL
                        INTO   v_trans_tab(j).lpn_group_id
                        FROM   DUAL;
                    END IF;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('category_id ' || v_trans_tab(j).category_id);
                        asn_debug.put_line('quantity ' || v_trans_tab(j).quantity);
                        asn_debug.put_line('amount ' || v_trans_tab(j).amount);
                        asn_debug.put_line('unit_of_measure ' || v_trans_tab(j).unit_of_measure);
                        asn_debug.put_line('interface_source_code ' || v_trans_tab(j).interface_source_code);
                        asn_debug.put_line('interface_source_line_id ' || v_trans_tab(j).interface_source_line_id);
                        asn_debug.put_line('inv_transaction_id ' || v_trans_tab(j).inv_transaction_id);
                        asn_debug.put_line('item_id ' || v_trans_tab(j).item_id);
                        asn_debug.put_line('item_description ' || v_trans_tab(j).item_description);
                        asn_debug.put_line('item_revision ' || v_trans_tab(j).item_revision);
                        asn_debug.put_line('uom_code ' || v_trans_tab(j).uom_code);
                        asn_debug.put_line('employee_id ' || v_trans_tab(j).employee_id);
                        asn_debug.put_line('auto_transact_code ' || v_trans_tab(j).auto_transact_code);
                        asn_debug.put_line('shipment_header_id ' || v_trans_tab(j).shipment_header_id);
                        asn_debug.put_line('shipment_header_id ' || v_header_record.header_record.receipt_header_id);
                        asn_debug.put_line('shipment_line_id ' || v_trans_tab(j).shipment_line_id);
                        asn_debug.put_line('ship_to_location_id ' || v_trans_tab(j).ship_to_location_id);
                        asn_debug.put_line('primary_quantity ' || v_trans_tab(j).primary_quantity);
                        asn_debug.put_line('primary_unit_of_measure ' || v_trans_tab(j).primary_unit_of_measure);
                        asn_debug.put_line('receipt_source_code ' || v_trans_tab(j).receipt_source_code);
                        asn_debug.put_line('vendor_id ' || v_trans_tab(j).vendor_id);
                        asn_debug.put_line('vendor_site_id ' || v_trans_tab(j).vendor_site_id);
                        asn_debug.put_line('from_organization_id ' || v_trans_tab(j).from_organization_id);
                        asn_debug.put_line('from_subinventory ' || v_trans_tab(j).from_subinventory);
                        asn_debug.put_line('to_organization_id ' || v_trans_tab(j).to_organization_id);
                        asn_debug.put_line('intransit_owning_org_id ' || v_trans_tab(j).intransit_owning_org_id);
                        asn_debug.put_line('routing_header_id ' || v_trans_tab(j).routing_header_id);
                        asn_debug.put_line('routing_step_id ' || v_trans_tab(j).routing_step_id);
                        asn_debug.put_line('source_document_code ' || v_trans_tab(j).source_document_code);
                        asn_debug.put_line('parent_transaction_id ' || v_trans_tab(j).parent_transaction_id);
                        asn_debug.put_line('po_header_id ' || v_trans_tab(j).po_header_id);
                        asn_debug.put_line('po_revision_num ' || v_trans_tab(j).po_revision_num);
                        asn_debug.put_line('po_line_id ' || v_trans_tab(j).po_line_id);
                        asn_debug.put_line('po_line_location_id ' || v_trans_tab(j).po_line_location_id);
                        asn_debug.put_line('po_unit_price ' || v_trans_tab(j).po_unit_price);
                        asn_debug.put_line('currency_code ' || v_trans_tab(j).currency_code);
                        asn_debug.put_line('currency_conversion_type ' || v_trans_tab(j).currency_conversion_type);
                        asn_debug.put_line('currency_conversion_rate ' || v_trans_tab(j).currency_conversion_rate);
                        asn_debug.put_line('currency_conversion_date ' || TO_CHAR(v_trans_tab(j).currency_conversion_date, 'DD-MON-YYYY HH24:MI:SS'));
                        asn_debug.put_line('po_distribution_id ' || v_trans_tab(j).po_distribution_id);
                        asn_debug.put_line('requisition_line_id ' || v_trans_tab(j).requisition_line_id);
                        asn_debug.put_line('req_distribution_id ' || v_trans_tab(j).req_distribution_id);
                        asn_debug.put_line('charge_account_id ' || v_trans_tab(j).charge_account_id);
                        asn_debug.put_line('substitute_unordered_code ' || v_trans_tab(j).substitute_unordered_code);
                        asn_debug.put_line('receipt_exception_flag ' || v_trans_tab(j).receipt_exception_flag);
                        asn_debug.put_line('accrual_status_code ' || v_trans_tab(j).accrual_status_code);
                        asn_debug.put_line('inspection_status_code ' || v_trans_tab(j).inspection_status_code);
                        asn_debug.put_line('inspection_quality_code ' || v_trans_tab(j).inspection_quality_code);
                        asn_debug.put_line('destination_type_code ' || v_trans_tab(j).destination_type_code);
                        asn_debug.put_line('deliver_to_person_id ' || v_trans_tab(j).deliver_to_person_id);
                        asn_debug.put_line('location_id ' || v_trans_tab(j).location_id);
                        asn_debug.put_line('deliver_to_location_id ' || v_trans_tab(j).deliver_to_location_id);
                        asn_debug.put_line('subinventory ' || v_trans_tab(j).subinventory);
                        asn_debug.put_line('locator_id ' || v_trans_tab(j).locator_id);
                        asn_debug.put_line('wip_entity_id ' || v_trans_tab(j).wip_entity_id);
                        asn_debug.put_line('wip_line_id ' || v_trans_tab(j).wip_line_id);
                        asn_debug.put_line('shipment_num ' || v_trans_tab(j).shipment_num);
                        asn_debug.put_line('source_doc_quantity ' || v_trans_tab(j).source_doc_quantity);
                        asn_debug.put_line('from_locator_id ' || v_trans_tab(j).from_locator_id);
                        asn_debug.put_line('oe_order_header_id ' || v_trans_tab(j).oe_order_header_id);
                        asn_debug.put_line('oe_order_line_id ' || v_trans_tab(j).oe_order_line_id);
                        asn_debug.put_line('customer_id ' || v_trans_tab(j).customer_id);
                        asn_debug.put_line('customer_site_id ' || v_trans_tab(j).customer_site_id);
                        asn_debug.put_line('lpn_id ' || v_trans_tab(j).lpn_id);
                        asn_debug.put_line('transfer_lpn_id ' || v_trans_tab(j).transfer_lpn_id);
                        asn_debug.put_line('lpn_group_id ' || v_trans_tab(j).lpn_group_id);
                        asn_debug.put_line('project_id ' || v_trans_tab(j).project_id);
                        asn_debug.put_line('task_id ' || v_trans_tab(j).task_id);
                        asn_debug.put_line('timecard_id ' || v_trans_tab(j).timecard_id);
                        asn_debug.put_line('timecard_ovn ' || v_trans_tab(j).timecard_ovn);
                        asn_debug.put_line('org_id ' || v_trans_tab(j).org_id);  --<R12 MOAC>
                        asn_debug.put_line('matching_basis ' ||
				v_trans_tab(j).matching_basis);
		        asn_debug.put_line('amount_shipped ' ||
				v_trans_tab(j).amount_shipped);
                        asn_debug.put_line('requested_amount ' ||
				v_trans_tab(j).requested_amount);
		        asn_debug.put_line('material_stored_amount ' ||
				v_trans_tab(j).material_stored_amount);
		        asn_debug.put_line('replenish_order_line_id' ||
				v_trans_tab(j).replenish_order_line_id);
				asn_debug.put_line('express_transaction' || v_trans_tab(j).express_transaction); -- Bug 14067935
                    END IF;

                    rcv_asn_interface_trx_ins_pkg.insert_row(v_trans_tab(j).row_id,
                                                             v_trans_tab(j).interface_transaction_id,
                                                             v_trans_tab(j).GROUP_ID,
                                                             v_trans_tab(j).last_update_date,
                                                             v_trans_tab(j).last_updated_by,
                                                             v_trans_tab(j).creation_date,
                                                             v_trans_tab(j).created_by,
                                                             v_trans_tab(j).last_update_login,
                                                             v_trans_tab(j).request_id,
                                                             v_trans_tab(j).program_application_id,
                                                             v_trans_tab(j).program_id,
                                                             v_trans_tab(j).program_update_date,
                                                             v_trans_tab(j).transaction_type,
                                                             v_trans_tab(j).transaction_date,
                                                             v_trans_tab(j).processing_status_code,
                                                             v_trans_tab(j).processing_mode_code,
                                                             v_trans_tab(j).processing_request_id,
                                                             v_trans_tab(j).transaction_status_code,
                                                             v_trans_tab(j).category_id,
                                                             v_trans_tab(j).quantity,
                                                             v_trans_tab(j).unit_of_measure,
                                                             v_trans_tab(j).interface_source_code,
                                                             v_trans_tab(j).interface_source_line_id,
                                                             v_trans_tab(j).inv_transaction_id,
                                                             v_trans_tab(j).item_id,
                                                             v_trans_tab(j).item_description,
                                                             v_trans_tab(j).item_revision,
                                                             v_trans_tab(j).uom_code,
                                                             v_trans_tab(j).employee_id,
                                                             v_trans_tab(j).auto_transact_code,
                                                             NVL(v_trans_tab(j).shipment_header_id, v_header_record.header_record.receipt_header_id),
                                                             v_trans_tab(j).shipment_line_id,
                                                             v_trans_tab(j).ship_to_location_id,
                                                             v_trans_tab(j).primary_quantity,
                                                             v_trans_tab(j).primary_unit_of_measure,
                                                             v_trans_tab(j).receipt_source_code,
                                                             v_trans_tab(j).vendor_id,
                                                             v_trans_tab(j).vendor_site_id,
                                                             v_trans_tab(j).from_organization_id,
                                                             v_trans_tab(j).from_subinventory,
                                                             v_trans_tab(j).to_organization_id,
                                                             v_trans_tab(j).intransit_owning_org_id,
                                                             v_trans_tab(j).routing_header_id,
                                                             v_trans_tab(j).routing_step_id,
                                                             v_trans_tab(j).source_document_code,
                                                             v_trans_tab(j).parent_transaction_id,
                                                             v_trans_tab(j).po_header_id,
                                                             v_trans_tab(j).po_revision_num,
                                                             v_trans_tab(j).po_release_id,
                                                             v_trans_tab(j).po_line_id,
                                                             v_trans_tab(j).po_line_location_id,
                                                             v_trans_tab(j).po_unit_price,
                                                             v_trans_tab(j).currency_code,
                                                             v_trans_tab(j).currency_conversion_type,
                                                             v_trans_tab(j).currency_conversion_rate,
                                                             v_trans_tab(j).currency_conversion_date,
                                                             v_trans_tab(j).po_distribution_id,
                                                             v_trans_tab(j).requisition_line_id,
                                                             v_trans_tab(j).req_distribution_id,
                                                             v_trans_tab(j).charge_account_id,
                                                             v_trans_tab(j).substitute_unordered_code,
                                                             v_trans_tab(j).receipt_exception_flag,
                                                             v_trans_tab(j).accrual_status_code,
                                                             v_trans_tab(j).inspection_status_code,
                                                             v_trans_tab(j).inspection_quality_code,
                                                             v_trans_tab(j).destination_type_code,
                                                             v_trans_tab(j).deliver_to_person_id,
                                                             v_trans_tab(j).location_id,
                                                             v_trans_tab(j).deliver_to_location_id,
                                                             v_trans_tab(j).subinventory,
                                                             v_trans_tab(j).locator_id,
                                                             v_trans_tab(j).wip_entity_id,
                                                             v_trans_tab(j).wip_line_id,
                                                             v_trans_tab(j).department_code,
                                                             v_trans_tab(j).wip_repetitive_schedule_id,
                                                             v_trans_tab(j).wip_operation_seq_num,
                                                             v_trans_tab(j).wip_resource_seq_num,
                                                             v_trans_tab(j).bom_resource_id,
                                                             v_trans_tab(j).shipment_num,
                                                             v_trans_tab(j).freight_carrier_code,
                                                             v_trans_tab(j).bill_of_lading,
                                                             v_trans_tab(j).packing_slip,
                                                             v_trans_tab(j).shipped_date,
                                                             v_trans_tab(j).expected_receipt_date,
                                                             v_trans_tab(j).actual_cost,
                                                             v_trans_tab(j).transfer_cost,
                                                             v_trans_tab(j).transportation_cost,
                                                             v_trans_tab(j).transportation_account_id,
                                                             v_trans_tab(j).num_of_containers,
                                                             v_trans_tab(j).waybill_airbill_num,
                                                             v_trans_tab(j).vendor_item_num,
                                                             v_trans_tab(j).vendor_lot_num,
                                                             v_trans_tab(j).rma_reference,
                                                             v_trans_tab(j).comments,
                                                             v_trans_tab(j).attribute_category,
                                                             v_trans_tab(j).attribute1,
                                                             v_trans_tab(j).attribute2,
                                                             v_trans_tab(j).attribute3,
                                                             v_trans_tab(j).attribute4,
                                                             v_trans_tab(j).attribute5,
                                                             v_trans_tab(j).attribute6,
                                                             v_trans_tab(j).attribute7,
                                                             v_trans_tab(j).attribute8,
                                                             v_trans_tab(j).attribute9,
                                                             v_trans_tab(j).attribute10,
                                                             v_trans_tab(j).attribute11,
                                                             v_trans_tab(j).attribute12,
                                                             v_trans_tab(j).attribute13,
                                                             v_trans_tab(j).attribute14,
                                                             v_trans_tab(j).attribute15,
                                                             v_trans_tab(j).ship_head_attribute_category,
                                                             v_trans_tab(j).ship_head_attribute1,
                                                             v_trans_tab(j).ship_head_attribute2,
                                                             v_trans_tab(j).ship_head_attribute3,
                                                             v_trans_tab(j).ship_head_attribute4,
                                                             v_trans_tab(j).ship_head_attribute5,
                                                             v_trans_tab(j).ship_head_attribute6,
                                                             v_trans_tab(j).ship_head_attribute7,
                                                             v_trans_tab(j).ship_head_attribute8,
                                                             v_trans_tab(j).ship_head_attribute9,
                                                             v_trans_tab(j).ship_head_attribute10,
                                                             v_trans_tab(j).ship_head_attribute11,
                                                             v_trans_tab(j).ship_head_attribute12,
                                                             v_trans_tab(j).ship_head_attribute13,
                                                             v_trans_tab(j).ship_head_attribute14,
                                                             v_trans_tab(j).ship_head_attribute15,
                                                             v_trans_tab(j).ship_line_attribute_category,
                                                             v_trans_tab(j).ship_line_attribute1,
                                                             v_trans_tab(j).ship_line_attribute2,
                                                             v_trans_tab(j).ship_line_attribute3,
                                                             v_trans_tab(j).ship_line_attribute4,
                                                             v_trans_tab(j).ship_line_attribute5,
                                                             v_trans_tab(j).ship_line_attribute6,
                                                             v_trans_tab(j).ship_line_attribute7,
                                                             v_trans_tab(j).ship_line_attribute8,
                                                             v_trans_tab(j).ship_line_attribute9,
                                                             v_trans_tab(j).ship_line_attribute10,
                                                             v_trans_tab(j).ship_line_attribute11,
                                                             v_trans_tab(j).ship_line_attribute12,
                                                             v_trans_tab(j).ship_line_attribute13,
                                                             v_trans_tab(j).ship_line_attribute14,
                                                             v_trans_tab(j).ship_line_attribute15,
                                                             v_trans_tab(j).ussgl_transaction_code,
                                                             v_trans_tab(j).government_context,
                                                             v_trans_tab(j).reason_id,
                                                             v_trans_tab(j).destination_context,
                                                             v_trans_tab(j).source_doc_quantity,
                                                             v_trans_tab(j).source_doc_unit_of_measure,
                                                             v_trans_tab(j).movement_id,
                                                             v_trans_tab(j).header_interface_id,
                                                             v_trans_tab(j).vendor_cum_shipped_qty,
                                                             v_trans_tab(j).item_num,
                                                             v_trans_tab(j).document_num,
                                                             v_trans_tab(j).document_line_num,
                                                             v_trans_tab(j).truck_num,
                                                             v_trans_tab(j).ship_to_location_code,
                                                             v_trans_tab(j).container_num,
                                                             v_trans_tab(j).substitute_item_num,
                                                             v_trans_tab(j).notice_unit_price,
                                                             v_trans_tab(j).item_category,
                                                             v_trans_tab(j).location_code,
                                                             v_trans_tab(j).vendor_name,
                                                             v_trans_tab(j).vendor_num,
                                                             v_trans_tab(j).vendor_site_code,
                                                             v_trans_tab(j).from_organization_code,
                                                             v_trans_tab(j).to_organization_code,
                                                             v_trans_tab(j).intransit_owning_org_code,
                                                             v_trans_tab(j).routing_code,
                                                             v_trans_tab(j).routing_step,
                                                             v_trans_tab(j).release_num,
                                                             v_trans_tab(j).document_shipment_line_num,
                                                             v_trans_tab(j).document_distribution_num,
                                                             v_trans_tab(j).deliver_to_person_name,
                                                             v_trans_tab(j).deliver_to_location_code,
                                                             v_trans_tab(j).use_mtl_lot,
                                                             v_trans_tab(j).use_mtl_serial,
                                                             v_trans_tab(j).LOCATOR,
                                                             v_trans_tab(j).reason_name,
                                                             v_trans_tab(j).validation_flag,
                                                             v_trans_tab(j).substitute_item_id,
                                                             v_trans_tab(j).quantity_shipped,
                                                             v_trans_tab(j).quantity_invoiced,
                                                             v_trans_tab(j).tax_name,
                                                             v_trans_tab(j).tax_amount,
                                                             v_trans_tab(j).req_num,
                                                             v_trans_tab(j).req_line_num,
                                                             v_trans_tab(j).req_distribution_num,
                                                             v_trans_tab(j).wip_entity_name,
                                                             v_trans_tab(j).wip_line_code,
                                                             v_trans_tab(j).resource_code,
                                                             v_trans_tab(j).shipment_line_status_code,
                                                             v_trans_tab(j).barcode_label,
                                                             v_trans_tab(j).country_of_origin_code,
                                                             v_trans_tab(j).from_locator_id, --WMS Change
                                                             v_trans_tab(j).qa_collection_id,
                                                             v_trans_tab(j).oe_order_header_id,
                                                             v_trans_tab(j).oe_order_line_id,
                                                             v_trans_tab(j).customer_id,
                                                             v_trans_tab(j).customer_site_id,
                                                             v_trans_tab(j).customer_item_num,
                                                             v_trans_tab(j).create_debit_memo_flag,
                                                             v_trans_tab(j).put_away_rule_id,
                                                             v_trans_tab(j).put_away_strategy_id,
                                                             v_trans_tab(j).lpn_id,
                                                             v_trans_tab(j).transfer_lpn_id,
                                                             v_trans_tab(j).cost_group_id,
                                                             v_trans_tab(j).mobile_txn,
                                                             v_trans_tab(j).mmtt_temp_id,
                                                             v_trans_tab(j).transfer_cost_group_id,
                                                             v_trans_tab(j).secondary_quantity,
                                                             v_trans_tab(j).secondary_unit_of_measure,
                                                             v_trans_tab(j).secondary_uom_code,
                                                             v_trans_tab(j).qc_grade,
                                                             v_trans_tab(j).oe_order_num,
                                                             v_trans_tab(j).oe_order_line_num,
                                                             v_trans_tab(j).customer_account_number,
                                                             v_trans_tab(j).customer_party_name,
                                                             v_trans_tab(j).source_transaction_num,
                                                             v_trans_tab(j).parent_source_transaction_num,
                                                             v_trans_tab(j).parent_interface_txn_id,
                                                             v_trans_tab(j).customer_item_id,
                                                             v_trans_tab(j).interface_available_qty,
                                                             v_trans_tab(j).interface_transaction_qty,
                                                             v_trans_tab(j).from_locator,
                                                             v_trans_tab(j).lpn_group_id,
                                                             v_trans_tab(j).order_transaction_id,
                                                             v_trans_tab(j).license_plate_number,
                                                             v_trans_tab(j).transfer_license_plate_number,
                                                             v_trans_tab(j).amount,
                                                             v_trans_tab(j).job_id,
                                                             v_trans_tab(j).project_id,
                                                             v_trans_tab(j).task_id,
                                                             v_trans_tab(j).asn_attach_id,
                                                             v_trans_tab(j).timecard_id,
                                                             v_trans_tab(j).timecard_ovn,
                                                             v_trans_tab(j).interface_available_amt,
                                                             v_trans_tab(j).interface_transaction_amt,
							     v_trans_tab(j).org_id,  --<R12 MOAC>
                                                             v_trans_tab(j).matching_basis,
                                                             v_trans_tab(j).amount_shipped,
                                                             v_trans_tab(j).requested_amount,
                                                             v_trans_tab(j).material_stored_amount,
                                                             v_trans_tab(j).replenish_order_line_id,
                                                             v_trans_tab(j).express_transaction -- Bug 14067935
                                                            );
                    asn_debug.put_line('RowId ' || v_trans_tab(j).row_id);
                    asn_debug.put_line('Interface Id ' || TO_CHAR(v_trans_tab(j).interface_transaction_id));
                    asn_debug.put_line('matching_basis=' || v_trans_tab(j).matching_basis);

                    IF v_trans_tab(j).matching_basis <> 'AMOUNT' THEN
                        l_ls_table(l_ls_table_idx).orig_interface_trx_id  := l_orig_trx_id;
                        l_ls_table(l_ls_table_idx).new_interface_trx_id   := v_trans_tab(j).interface_transaction_id;
                        l_ls_table(l_ls_table_idx).quantity               := v_trans_tab(j).quantity;
                    END IF;

                    v_trans_tab.DELETE(j);
                END IF;

                /* Checking if WMS is intalled before calling WMS_ASN_INTERFACE_PROCESS
                   for Bug 2110031 */
                IF (wms_install.check_install(l_wms_return_status,
                                              l_wms_msg_count,
                                              l_wms_msg_data,
                                              lorgid
                                             )) THEN
                    BEGIN
                        wms_asn_interface.process(l_wms_return_status,
                                                  l_wms_msg_count,
                                                  l_wms_msg_data,
                                                  v_current_interface_id
                                                 );
                    EXCEPTION
                        WHEN OTHERS THEN
                            NULL;
                    END;
                END IF;
            END LOOP;

            /* FPJ  WMS Change. Call WMS api to split lot and serial rows in
             * mtl_transaction_lots_interface and mtl_serial_numbers_interface
             * tables. This needs to be called for each split rti row with both
             * the original rti row interface_id since the interface rows are
             * still linked to rti with the interface_transaction_id. This api
             * will split the mtli and msni rows similar to rti rows and will
             * link with the correct ids.
            */
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('l_ls_table.COUNT: ' || l_ls_table.COUNT);
            END IF;

            IF l_ls_table.COUNT > 0 THEN --{
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Calling split_lot_serial');
                END IF;

                l_return  := inv_rcv_integration_apis.split_lot_serial(p_api_version       => l_api_version,
                                                                       p_init_msg_lst      => fnd_api.g_false,
                                                                       x_return_status     => l_return_status,
                                                                       x_msg_count         => l_msg_count,
                                                                       x_msg_data          => l_msg_data,
                                                                       p_new_rti_info      => l_ls_table
                                                                      );

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('After split_lot_serial Api');
                END IF;

                -- if lot serial validation failed, then fail all these split rows
                IF (   (NOT l_return)
                    OR (l_return_status <> fnd_api.g_ret_sts_success)) THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('split_lot_serial Api has errors');

                        IF l_return THEN
                            asn_debug.put_line('return value: true');
                        ELSE
                            asn_debug.put_line('return value: false');
                        END IF;

                        asn_debug.put_line('x_return_status: ' || l_return_status);
                        asn_debug.put_line('x_msg_count: ' || l_msg_count);
                        asn_debug.put_line('x_msg_data: ' || l_msg_data);
                    END IF;

                    l_message  := fnd_msg_pub.get(p_msg_index     => fnd_msg_pub.g_last, p_encoded => fnd_api.g_false);

                    FOR k IN l_ls_table.FIRST .. e_o_t LOOP
                        /* We error out the rti row here.
                         * Erroring out the other lpm_group rows
                         * or ASN rows are taken care in RCVPREPB.pls.
                        */
                        UPDATE rcv_transactions_interface
                           SET processing_status_code = 'ERROR'
                         WHERE interface_transaction_id = l_ls_table(k).new_interface_trx_id;

                        SELECT GROUP_ID,
                               header_interface_id,
                               interface_transaction_id,
                               transaction_type,
                               source_document_code,
                               shipment_header_id
                        INTO   l_group_id,
                               l_header_interface_id,
                               l_interface_transaction_id,
                               l_trx_type,
                               l_src_doc_code,
                               l_ship_head_id
                        FROM   rcv_transactions_interface
                        WHERE  interface_transaction_id = l_ls_table(k).new_interface_trx_id;

                        fnd_profile.get('RCV_FAIL_IF_LINE_FAILS', x_fail_all_lines);
                        IF ( x_fail_all_lines='Y') THEN
                           rcv_roi_preprocessor.update_rti_error
                           (null,
                            null,
                            l_header_interface_id,
                            null);
                        END IF;

                        IF (l_message IS NOT NULL) THEN
                            rcv_error_pkg.log_interface_error_message(l_message);
                        ELSE
                            rcv_error_pkg.set_error_message('RCV_SPLIT_LOT_SERIAL_ERROR');
                            rcv_error_pkg.log_interface_error('INTERFACE_TRANSACTION_ID', FALSE);
                        END IF;
                    END LOOP;
                    /*Bug 10351737 Deleteing the orphan rsh records*/

                    IF l_header_interface_id IS NOT NULL  THEN
                       SELECT  count(1)
                       INTO  l_count
                       FROM  rcv_transactions_interface
                       WHERE  header_interface_id=l_header_interface_id;

                       SELECT  count(1)
                       INTO  l_cnt
                       FROM  rcv_transactions_interface
                       WHERE  header_interface_id=l_header_interface_id
                       AND  processing_status_code='ERROR';

                       IF (l_count=l_cnt AND l_trx_type in ('SHIP','RECEIVE') AND l_src_doc_code='PO') THEN
                           UPDATE  rcv_headers_interface rhi
                           SET  processing_status_code='ERROR'
                           WHERE  header_interface_id=l_header_interface_id;

                           asn_debug.put_line('Deleting the rsh record with shipment_header_id = '||l_ship_head_id);
                           DELETE FROM rcv_shipment_headers rsh
                           WHERE  shipment_header_id=l_ship_head_id
                           AND NOT EXISTS (SELECT 1 from rcv_shipment_lines
                                           WHERE shipment_header_id=rsh.shipment_header_id)
                           AND NOT EXISTS (SELECT 1 from rcv_transactions rt
                                           WHERE rt.shipment_header_id = rsh.shipment_header_id);
                       END IF;
                    END IF;

                    /* update rcv_headers_interface rhi
                        set processing_status_code='ERROR'
                        where header_interface_id=l_header_interface_id
                        and not exists(select 1 from rcv_transactions_interface
                        where header_interface_id=l_header_interface_id
                        and processing_status_code='RUNNING');

                        delete from rcv_shipment_headers rsh
                        where
                        and not exists(select 1 from rcv_transactions_interface
                        where shipment_header_id=rsh.shipment_header_id
                        and processing_status_code='RUNNING');*/

                END IF; --}    if split_lot_serial failed
            END IF; --}    if l_ls_table.count > 0
        END IF; --}   if v_trans_tab.count > 0

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Exit handle_rcv_asn_transactions');
        END IF;
    END handle_rcv_asn_transactions;

    PROCEDURE derive_vendor_trans_del(
        x_cascaded_table    IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                   IN OUT NOCOPY BINARY_INTEGER,
        temp_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        x_header_record     IN            rcv_roi_preprocessor.header_rec_type
    ) IS
        test NUMBER;
    BEGIN
        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('enter derive_vendor_trans_del ');
        END IF;


        /* Derive the to_org_id */
        derive_ship_to_org_info(x_cascaded_table,
                                n,
                                x_header_record
                               );

        IF (x_cascaded_table(n).unit_of_measure IS NOT NULL) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('X_progress ' || x_progress);
            END IF;

            SELECT muom.uom_code
            INTO   x_cascaded_table(n).uom_code
            FROM   mtl_units_of_measure muom
            WHERE  muom.unit_of_measure = x_cascaded_table(n).unit_of_measure;
        ELSE
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('uom_code not derived as unit_of_measure is null');
            END IF;
        END IF;

        x_progress                              := '026';

        /* Locator info derivation is done for the Receiving locators FPJ
        * project. Need to verify this with karun to see whether this is
        * needed for Transfer also.
       */
        IF (x_cascaded_table(n).transaction_type = 'TRANSFER') THEN
            derive_location_info(x_cascaded_table, n);
            derive_from_locator_id(x_cascaded_table, n); -- WMS Change
            derive_to_locator_id(x_cascaded_table, n); -- WMS Change
        END IF;

        x_progress                              := '091';
        derive_reason_info(x_cascaded_table, n);
        /* Auto_transact_code is null for all these transaction types */
        x_cascaded_table(n).auto_transact_code  := NULL;
        derive_trans_del_line_quantity(x_cascaded_table,
                                       n,
                                       temp_cascaded_table
                                      );
    END derive_vendor_trans_del;

    PROCEDURE derive_parent_id(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN OUT NOCOPY BINARY_INTEGER
    ) IS
        derive_values_from_plsql_table BOOLEAN                                                  := FALSE;
        cascaded_table_index           NUMBER;
        derive_values_from_rti         BOOLEAN                                                  := FALSE;
        l_processing_status_code       rcv_transactions_interface.processing_status_code%TYPE;
        x_error_status                 VARCHAR2(1);
        e_unexpected_error             EXCEPTION;
				/*Bug 16791892 Revert the fix of 9855182*/
        /* Bug# 9855182 */
        --l_transaction_type             rcv_transactions_interface.transaction_type%TYPE;
        --l_auto_transact_code           rcv_transactions_interface.auto_transact_code%TYPE;
        /* Bug# 9855182 End*/
        /*Bug 16791892 Revert the fix of 9855182*/
    BEGIN
        x_error_status  := rcv_error_pkg.g_ret_sts_error;

        /* We need to derive parent_trx_id if we can. Else if it is
     * a child of a parent in this same run, we can get all the values
     * from rti since we would have already derived for that or
     * from the pl/sql table if we have not posted it back to rti.
     * Parent-Child relationship
         */


        /* This can be a third party which means we will have
         * parent_source_transaction_num populated or it is a child of
    * some other transaction.
        */
        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Enter Derive_parent_id');
        END IF;

        IF (x_cascaded_table(n).parent_interface_txn_id IS NOT NULL) THEN --{
            /* Check whether it is still in cascaded table */
            FOR i IN 1 ..(n - 1) LOOP
                IF (x_cascaded_table(i).interface_transaction_id = x_cascaded_table(n).parent_interface_txn_id) THEN
                    derive_values_from_plsql_table    := TRUE;
                    cascaded_table_index              := i;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('set derive_values_from_plsql_table true ' || cascaded_table_index);
                    END IF;

                    x_cascaded_table(n).derive        := 'Y';
                    x_cascaded_table(n).derive_index  := cascaded_table_index;
                    EXIT;
                END IF;
            END LOOP;

            /* Derive the values from RTI if already posted */
            IF (NOT derive_values_from_plsql_table) THEN --{
                derive_values_from_rti      := TRUE;
                x_cascaded_table(n).derive  := 'Y';

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('set derive_values_from_rti true ' || x_cascaded_table(n).derive_index);
                END IF;
            END IF; /*if (not derived_values_from_table) then */ --}
        END IF; --}

        -- Bug 7651646: Start
        IF (    (x_cascaded_table(n).parent_interface_txn_id IS NULL)
            AND (x_cascaded_table(n).parent_source_transaction_num IS NOT NULL)
             AND (x_cascaded_table(n).parent_transaction_id IS NULL) ) THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Deriving parent_transaction_id from parent_source_transaction_num');
                    END IF;

                    BEGIN
                        SELECT transaction_id
                        INTO   x_cascaded_table(n).parent_transaction_id
                        FROM   rcv_transactions
                        WHERE  source_transaction_num = x_cascaded_table(n).parent_source_transaction_num;
                    EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                            rcv_error_pkg.set_error_message('RCV_NO_PARENT_SRC_TRANSACTION');
                            rcv_error_pkg.set_token('VALUE',x_cascaded_table(n).parent_source_transaction_num);
                            RAISE e_validation_error;
                        WHEN TOO_MANY_ROWS THEN
                            rcv_error_pkg.set_error_message('RCV_DUP_SRC_TRANSACTION');
 	                         rcv_error_pkg.set_token('VALUE',x_cascaded_table(n).parent_source_transaction_num);
 	                         RAISE e_validation_error;
                    END;

        END IF;
        -- Bug 7651646: End

        IF (    x_cascaded_table(n).parent_interface_txn_id IS NULL
            AND x_cascaded_table(n).parent_transaction_id IS NULL) THEN --{
            /* This is an error. It will come here when the user has
               * provided parent_source_transaction_num but that did not match with
               * with any parent in rcv_transactions or with any
               * row in rti or the pl/sql table. Hence need to insert
               * into po_interface_errors saying that this is a child
               * without any parent in rti or rt.
               */
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('NO PARENT');
            END IF;

            rcv_error_pkg.set_error_message('RCV_NO_PARENT_TRANSACTION');
            RAISE e_validation_error;
        ELSIF(x_cascaded_table(n).parent_interface_txn_id IS NOT NULL) THEN --}{
            IF (NOT derive_values_from_plsql_table) THEN --{
                BEGIN
                    SELECT processing_status_code--,
                           /*Bug 16791892 Revert the fix of 9855182*/
                           /* Bug# 9855182 */
                           --transaction_type,
                           --auto_transact_code
                           /* Bug# 9855182 End*/
                    INTO   l_processing_status_code--,
                           /* Bug# 9855182 */
                           --l_transaction_type,
                           --l_auto_transact_code
                           /* Bug# 9855182 End*/
                           /*Bug 16791892 Revert the fix of 9855182*/
                    FROM   rcv_transactions_interface
                    WHERE  interface_transaction_id = x_cascaded_table(n).parent_interface_txn_id;
                EXCEPTION
                    WHEN OTHERS THEN
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Exception in rti with parent_interface_txn_id ');
                        END IF;

                        RAISE e_unexpected_error;
                END;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('l_processing_status_code from rti ' || l_processing_status_code);
                END IF;

                IF (l_processing_status_code = 'ERROR') THEN
                    rcv_error_pkg.set_error_message('RCV_PARENT_RECORD_ERRORED');
                    RAISE e_validation_error;
                END IF;
								/*Bug 16791892 Revert the fix of 9855182*/
                /* Bug# 9855182 */ /*
                IF ((x_cascaded_table(n).transaction_type = 'RETURN TO VENDOR') OR
                    (x_cascaded_table(n).transaction_type = 'CORRECT' AND
                     sign(x_cascaded_table(n).quantity) = -1)) THEN

                   IF l_transaction_type = 'RECEIVE' AND
                      l_auto_transact_code = 'DELIVER' THEN
                      rcv_error_pkg.set_error_message('RCV_INVALID_PARENT_TRX_TYPE');
                      RAISE e_validation_error;
                   END IF;
                END IF; */
                /* Bug# 9855182 End*/
								/*Bug 16791892 Revert the fix of 9855182*/

            ELSE --}{
                IF (x_cascaded_table(cascaded_table_index).processing_status_code = 'ERROR') THEN
                    rcv_error_pkg.set_error_message('RCV_PARENT_RECORD_ERRORED');
                    RAISE e_validation_error;
                END IF;
								/*Bug 16791892 Revert the fix of 9855182*/
                /* Bug# 9855182 */ /*
                IF ((x_cascaded_table(n).transaction_type = 'RETURN TO VENDOR') OR
                    (x_cascaded_table(n).transaction_type = 'CORRECT' AND
                     sign(x_cascaded_table(n).quantity) = -1)) THEN

                   IF x_cascaded_table(cascaded_table_index).transaction_type = 'RECEIVE' AND
                      x_cascaded_table(cascaded_table_index).auto_transact_code = 'DELIVER' THEN
                      rcv_error_pkg.set_error_message('RCV_INVALID_PARENT_TRX_TYPE');
                      RAISE e_validation_error;
                   END IF;
                END IF;	*/
                /* Bug# 9855182 End*/
								/*Bug 16791892 Revert the fix of 9855182*/
            END IF; --}
        END IF; /* Insert error if parent_interface_txn_id is null*/ --}
    EXCEPTION
        WHEN e_validation_error THEN
            x_cascaded_table(n).error_status   := x_error_status;
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;

            -- This case statement assigns the appropriate tokens
            -- all error messages must be found in the case statement
            -- if the error message has no token then use a null statement
            IF x_cascaded_table(n).error_message = 'RCV_NO_PARENT_TRANSACTION' THEN
                NULL;
            ELSIF x_cascaded_table(n).error_message = 'RCV_PARENT_RECORD_ERRORED' THEN
                NULL;
            END IF;

            rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);
        WHEN e_unexpected_error THEN
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('derive_parent_id', '000');
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_error('TRANSACTIONS_INTERFACE_ID', FALSE);
    END derive_parent_id;

    PROCEDURE derive_trans_del_line_quantity(
        x_cascaded_table    IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                   IN OUT NOCOPY BINARY_INTEGER,
        temp_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type
    ) IS
        x_include_closed_po           VARCHAR2(1); -- Bug 1887728
        /*
        ** Might be a compatibility issue between the two record definitions
        */
        x_record_count                NUMBER;
        x_remaining_quantity          NUMBER                                                  := 0;
        x_remaining_qty_po_uom        NUMBER                                                  := 0;
        x_bkp_qty                     NUMBER                                                  := 0;
        x_progress                    VARCHAR2(3);
        x_to_organization_code        VARCHAR2(5);
        x_converted_trx_qty           NUMBER                                                  := 0;
        transaction_ok                BOOLEAN                                                 := FALSE;
        x_expected_date               rcv_transactions_interface.expected_receipt_date%TYPE;
        high_range_date               DATE;
        low_range_date                DATE;
        rows_fetched                  NUMBER                                                  := 0;
        x_tolerable_qty               NUMBER                                                  := 0;
        x_first_trans                 BOOLEAN                                                 := TRUE;
        x_sysdate                     DATE                                                    := SYSDATE;
        current_n                     BINARY_INTEGER                                          := 0;
        insert_into_table             BOOLEAN                                                 := FALSE;
        x_qty_rcv_exception_code      po_line_locations.qty_rcv_exception_code%TYPE;
        tax_amount_factor             NUMBER;
        lastrecord                    BOOLEAN                                                 := FALSE;
        po_asn_uom_qty                NUMBER;
        po_primary_uom_qty            NUMBER;
        already_allocated_qty         NUMBER                                                  := 0;
        x_item_id                     NUMBER;
        x_approved_flag               VARCHAR(1);
        x_cancel_flag                 VARCHAR(1);
        x_closed_code                 VARCHAR(25);
        x_shipment_type               VARCHAR(25);
        x_ship_to_organization_id     NUMBER;
        x_ship_to_location_id         NUMBER;
        /* temp_ship_to_location_id       number;
        temp_mirror_ship_to_loc_id number ;
        temp_enf_ship_to_loc_code varchar(25) ; */
        /* The above 3 variables added for bug 1898283 */
        x_vendor_product_num          VARCHAR(25);
        x_temp_count                  NUMBER;
        x_full_name                   VARCHAR2(240)                                           := NULL; -- Bug 2392074
        /* 1887728 -Added the following variables */
        profile_user_id               NUMBER                                                  := -1;
        profile_appl_id               NUMBER                                                  := -1;
        profile_resp_id               NUMBER                                                  := -1;
        defined                       BOOLEAN;
        /* 1845702 */
        x_sob_id                      NUMBER                                                  := NULL;
        x_rate                        NUMBER;
        x_allow_rate_override         VARCHAR2(1);
        /* Bug# 1548597 */
        x_secondary_available_qty     NUMBER                                                  := 0;
        firstrecord                   BOOLEAN                                                 := TRUE;

/********************************************************************/
      /* Bug 3356796. Changed destination_subinventory from 0 to '' as
       * it is a varchar column.
      */
        CURSOR po_transfer(
            v_parent_trx_id      NUMBER,
            v_to_organization_id NUMBER
        ) IS
            SELECT   rsup.po_line_location_id,
                     rsup.po_header_id po_head_id,
                     rsup.po_line_id line_id,
                     rsup.rcv_transaction_id rcv_transaction_id,
                     poh.segment1 document_num,
                     pol.line_num line_number,
                     rt.transaction_date transaction_date,
                     rt.transaction_type,
                     rt.unit_of_measure unit_of_meas,
                     rt.primary_unit_of_measure,
                     rt.primary_quantity,
                     rsup.to_organization_id,
                     rt.po_unit_price unit_price,
                     rsl.category_id,
                     rsl.item_description,
                     rsup.po_line_id,
                     rt.location_id,
                     rsup.item_id,
                     0 deliver_to_person_id,
                     0 deliver_to_location_id,
                     '' destination_subinventory,
                     0 po_distribution_id,
                     rsup.destination_type_code,
                     0 code_combination_id,
                     0 req_distribution_id,
                     0 destination_organization_id,
                     0 wip_entity_id,
                     0 wip_operation_seq_num,
                     0 wip_resource_seq_num,
                     0 wip_repetitive_schedule_id,
                     0 wip_line_id,
                     0 bom_resource_id,
                     0 ussgl_transaction_code,
                     rt.quantity qty,
                     0 interface_available_qty
            FROM     rcv_supply rsup,
                     rcv_transactions rt,
                     rcv_shipment_lines rsl,
                     po_headers poh,
                     po_lines pol
            WHERE    rt.transaction_id = v_parent_trx_id
            AND      rsup.to_organization_id = NVL(v_to_organization_id, rsup.to_organization_id)
            AND      rsup.supply_type_code = 'RECEIVING'
            AND      poh.po_header_id = rsup.po_header_id
            AND      pol.po_line_id = rsup.po_line_id
            AND      pol.po_header_id = poh.po_header_id
            AND      rsl.shipment_line_id = rsup.shipment_line_id
            AND      rt.transaction_id = rsup.rcv_transaction_id
            AND      rt.transaction_type <> 'UNORDERED'
            ORDER BY transaction_date DESC,
                     document_num,
                     line_number;

        CURSOR po_transfer_rti(
            v_parent_inter_trx_id NUMBER
        ) IS
            SELECT rti.po_line_location_id,
                   rti.po_header_id po_head_id,
                   rti.po_line_id line_id,
                   rti.interface_transaction_id rcv_transaction_id,
                   rti.document_num,
                   rti.document_line_num line_number,
                   rti.transaction_date transaction_date,
                   rti.transaction_type,
                   rti.unit_of_measure unit_of_meas,
                   rti.primary_unit_of_measure,
                   rti.primary_quantity,
                   rti.to_organization_id,
                   rti.po_unit_price unit_price,
                   rti.category_id,
                   rti.item_description,
                   rti.po_line_id,
                   rti.location_id,
                   rti.item_id,
                   0 deliver_to_person_id,
                   0 deliver_to_location_id,
                   '' destination_subinventory,
                   0 po_distribution_id,
                   rti.destination_type_code,
                   0 code_combination_id,
                   0 req_distribution_id,
                   0 destination_organization_id,
                   0 wip_entity_id,
                   0 wip_operation_seq_num,
                   0 wip_resource_seq_num,
                   0 wip_repetitive_schedule_id,
                   0 wip_line_id,
                   0 bom_resource_id,
                   0 ussgl_transaction_code,
                   rti.quantity qty,
                   rti.interface_available_qty
            FROM   rcv_transactions_interface rti
            WHERE  interface_transaction_id = v_parent_inter_trx_id;

        /* Bug 3292329.
      We used to use the same cursor for single deliver and
      Transfers, inspections etc. Because of this we had the
      the join to po_distributions table. For transfers of
      a received shipment line against a PO shipment with multiple
      distribution, this results in multiple rows which is incorrect.
      So declared a new cursor for single deliver which is the same
      as that of tranfer cursor but with distribution info.
     */
        CURSOR po_single_deliver(
            v_parent_trx_id      NUMBER,
            v_to_organization_id NUMBER
        ) IS
            SELECT   rsup.po_line_location_id,
                     rsup.po_header_id po_head_id,
                     rsup.po_line_id line_id,
                     rsup.rcv_transaction_id rcv_transaction_id,
                     poh.segment1 document_num,
                     pol.line_num line_number,
                     rt.transaction_date transaction_date,
                     rt.transaction_type,
                     rt.unit_of_measure unit_of_meas,
                     rt.primary_unit_of_measure,
                     rt.primary_quantity,
                     rsup.to_organization_id,
                     rt.po_unit_price unit_price,
                     rsl.category_id,
                     rsl.item_description,
                     rsup.po_line_id,
                     rt.location_id,
                     rsup.item_id,
                     pod.deliver_to_person_id,
                     pod.deliver_to_location_id,
                     pod.destination_subinventory,
                     pod.po_distribution_id,
                     pod.destination_type_code,
                     pod.code_combination_id,
                     pod.req_distribution_id,
                     pod.destination_organization_id,
                     pod.wip_entity_id,
                     pod.wip_operation_seq_num,
                     pod.wip_resource_seq_num,
                     pod.wip_repetitive_schedule_id,
                     pod.wip_line_id,
                     pod.bom_resource_id,
                     pod.ussgl_transaction_code,
                     rt.quantity qty,
                     0 interface_available_qty
            FROM     rcv_supply rsup,
                     rcv_transactions rt,
                     rcv_shipment_lines rsl,
                     po_headers poh,
                     po_lines pol,
                     po_distributions pod
            WHERE    rt.transaction_id = v_parent_trx_id
            AND      rsup.to_organization_id = NVL(v_to_organization_id, rsup.to_organization_id)
            AND      rsup.supply_type_code = 'RECEIVING'
            AND      poh.po_header_id = rsup.po_header_id
            AND      pol.po_line_id = rsup.po_line_id
            AND      pol.po_header_id = poh.po_header_id
            AND      rsl.shipment_line_id = rsup.shipment_line_id
            AND      rt.transaction_id = rsup.rcv_transaction_id
            AND      rt.transaction_type <> 'UNORDERED'
            AND      rt.po_header_id = pod.po_header_id
            AND      pod.po_line_id = pol.po_line_id
            AND      rt.po_line_location_id = pod.line_location_id
            AND      (    pod.po_line_id IS NOT NULL
                      AND pod.line_location_id IS NOT NULL)
            ORDER BY transaction_date DESC,
                     document_num,
                     line_number;

    /* Bug 5354379:
       Added the condition  pod.line_location_id = rti.po_line_location_id to
       get the correct pod.po_distribution_id for the po_line_location_id
       populated in the RTI. */

        CURSOR po_single_deliver_rti(
            v_parent_inter_trx_id NUMBER
        ) IS
            SELECT rti.po_line_location_id,
                   rti.po_header_id po_head_id,
                   rti.po_line_id line_id,
                   rti.interface_transaction_id rcv_transaction_id,
                   rti.document_num,
                   rti.document_line_num line_number,
                   rti.transaction_date transaction_date,
                   rti.transaction_type,
                   rti.unit_of_measure unit_of_meas,
                   rti.primary_unit_of_measure,
                   rti.primary_quantity,
                   rti.to_organization_id,
                   rti.po_unit_price unit_price,
                   rti.category_id,
                   rti.item_description,
                   rti.po_line_id,
                   rti.location_id,
                   rti.item_id,
                   pod.deliver_to_person_id,
                   pod.deliver_to_location_id,
                   pod.destination_subinventory,
                   pod.po_distribution_id,
                   pod.destination_type_code,
                   pod.code_combination_id,
                   pod.req_distribution_id,
                   pod.destination_organization_id,
                   pod.wip_entity_id,
                   pod.wip_operation_seq_num,
                   pod.wip_resource_seq_num,
                   pod.wip_repetitive_schedule_id,
                   pod.wip_line_id,
                   pod.bom_resource_id,
                   pod.ussgl_transaction_code,
                   rti.quantity qty,
                   rti.interface_available_qty
            FROM   rcv_transactions_interface rti,
                   po_distributions pod
            WHERE  interface_transaction_id = v_parent_inter_trx_id
            AND    pod.line_location_id = rti.po_line_location_id --Bug:5354379
            AND    pod.po_header_id = rti.po_header_id
            AND    (    pod.po_line_id IS NOT NULL
                    AND pod.line_location_id IS NOT NULL);

        CURSOR po_deliver(
            v_parent_trx_id      NUMBER,
            v_to_organization_id NUMBER,
            x_dist_num           NUMBER
        ) IS
            SELECT   rsup.po_line_location_id,
                     rsup.po_header_id po_head_id,
                     rsup.po_line_id line_id,
                     rsup.rcv_transaction_id rcv_transaction_id,
                     poh.segment1 document_num,
                     pol.line_num line_number,
                     rt.transaction_date transaction_date,
                     rt.transaction_type,
                     rt.unit_of_measure unit_of_meas,
                     rt.primary_unit_of_measure,
                     rt.primary_quantity,
                     rsup.to_organization_id,
                     rt.po_unit_price unit_price,
                     rsl.category_id,
                     rsl.item_description,
                     rsup.po_line_id,
                     rt.location_id,
                     rsup.item_id,
                     pod.deliver_to_person_id,
                     pod.deliver_to_location_id,
                     pod.destination_subinventory,
                     pod.po_distribution_id,
                     pod.destination_type_code,
                     pod.code_combination_id,
                     pod.req_distribution_id,
                     pod.destination_organization_id,
                     pod.wip_entity_id,
                     pod.wip_operation_seq_num,
                     pod.wip_resource_seq_num,
                     pod.wip_repetitive_schedule_id,
                     pod.wip_line_id,
                     pod.bom_resource_id,
                     pod.ussgl_transaction_code,
                     rt.quantity qty,
                     0 interface_available_qty
            FROM     rcv_supply rsup,
                     rcv_transactions rt,
                     rcv_shipment_lines rsl,
                     po_headers poh,
                     po_lines pol,
                     po_distributions pod
            WHERE    rt.transaction_id = v_parent_trx_id
            AND      rsup.to_organization_id = NVL(v_to_organization_id, rsup.to_organization_id)
            AND      rsup.supply_type_code = 'RECEIVING'
            AND      poh.po_header_id = rsup.po_header_id
            AND      pol.po_line_id = rsup.po_line_id
            AND      pol.po_header_id = poh.po_header_id
            AND      rsl.shipment_line_id = rsup.shipment_line_id
            AND      rt.transaction_id = rsup.rcv_transaction_id
            AND      rt.transaction_type <> 'UNORDERED'
            AND      rt.po_line_location_id = pod.line_location_id
            AND      pod.distribution_num = x_dist_num
            AND      (    pod.po_line_id IS NOT NULL
                      AND pod.line_location_id IS NOT NULL)
            ORDER BY pod.po_distribution_id;

        CURSOR po_deliver_rti(
            v_parent_inter_trx_id NUMBER,
            x_dist_num            NUMBER
        ) IS
            SELECT rti.po_line_location_id,
                   rti.po_header_id po_head_id,
                   rti.po_line_id line_id,
                   rti.interface_transaction_id rcv_transaction_id,
                   rti.document_num,
                   rti.document_line_num line_number,
                   rti.transaction_date transaction_date,
                   rti.transaction_type,
                   rti.unit_of_measure unit_of_meas,
                   rti.primary_unit_of_measure,
                   rti.primary_quantity,
                   rti.to_organization_id,
                   rti.po_unit_price unit_price,
                   rti.category_id,
                   rti.item_description,
                   rti.po_line_id,
                   rti.location_id,
                   rti.item_id,
                   pod.deliver_to_person_id,
                   pod.deliver_to_location_id,
                   pod.destination_subinventory,
                   pod.po_distribution_id,
                   pod.destination_type_code,
                   pod.code_combination_id,
                   pod.req_distribution_id,
                   pod.destination_organization_id,
                   pod.wip_entity_id,
                   pod.wip_operation_seq_num,
                   pod.wip_resource_seq_num,
                   pod.wip_repetitive_schedule_id,
                   pod.wip_line_id,
                   pod.bom_resource_id,
                   pod.ussgl_transaction_code,
                   rti.quantity qty,
                   rti.interface_available_qty
            FROM   rcv_transactions_interface rti,
                   po_distributions pod
            WHERE  interface_transaction_id = v_parent_inter_trx_id
            AND    pod.distribution_num = x_dist_num
            AND    pod.po_header_id = rti.po_header_id
            AND    pod.line_location_id = rti.po_line_location_id --Bug:5354379
            AND    (    pod.po_line_id IS NOT NULL
                    AND pod.line_location_id IS NOT NULL);

        CURSOR cust_transfer(
            v_parent_trx_id      NUMBER,
            v_to_organization_id NUMBER
        ) IS
            SELECT rsup.po_line_location_id,
                   rsup.po_header_id po_head_id,
                   rsup.po_line_id line_id,
                   rsup.rcv_transaction_id rcv_transaction_id,
                   poh.segment1 document_num,
                   pol.line_num line_number,
                   rt.transaction_date transaction_date,
                   rt.transaction_type,
                   rt.unit_of_measure unit_of_meas,
                   rt.primary_unit_of_measure,
                   rt.primary_quantity,
                   rsup.to_organization_id,
                   rt.po_unit_price unit_price,
                   rsl.category_id,
                   rsl.item_description,
                   rsup.po_line_id,
                   rt.location_id,
                   rsup.item_id,
                   pod.deliver_to_person_id,
                   pod.deliver_to_location_id,
                   pod.destination_subinventory,
                   pod.po_distribution_id,
                   pod.destination_type_code,
                   pod.code_combination_id,
                   pod.req_distribution_id,
                   pod.destination_organization_id,
                   pod.wip_entity_id,
                   pod.wip_operation_seq_num,
                   pod.wip_resource_seq_num,
                   pod.wip_repetitive_schedule_id,
                   pod.wip_line_id,
                   pod.bom_resource_id,
                   pod.ussgl_transaction_code,
                   rt.quantity qty,
                   0 interface_available_qty
            FROM   rcv_supply rsup,
                   rcv_transactions rt,
                   rcv_shipment_lines rsl,
                   po_headers poh,
                   po_lines pol,
                   po_distributions pod
            WHERE  rt.transaction_id = v_parent_trx_id
            AND    rsup.to_organization_id = NVL(v_to_organization_id, rsup.to_organization_id)
            AND    rsup.supply_type_code = 'RECEIVING'
            AND    poh.po_header_id = rsup.po_header_id
            AND    pol.po_line_id = rsup.po_line_id
            AND    pol.po_header_id = poh.po_header_id
            AND    rsl.shipment_line_id = rsup.shipment_line_id
            AND    rt.transaction_id = rsup.rcv_transaction_id
            AND    rt.transaction_type <> 'UNORDERED'
            AND    rt.po_header_id = pod.po_header_id
            AND    (    pod.po_line_id IS NOT NULL
                    AND pod.line_location_id IS NOT NULL);

        --Bug 9072630 Added the below cursor rti_processed to find the total quantities of processed rtis in
        --Supply uom which is needed to calculate the effective qty that can be processed.
        CURSOR rti_processed(
            v_group_id NUMBER,
            v_po_line_location_id  NUMBER,
            v_rcv_transaction_id NUMBER,
            v_interface_transaction_id NUMBER
        ) IS
        SELECT nvl(quantity,0) quantity,unit_of_measure
            FROM rcv_transactions_interface
            WHERE (transaction_status_code = 'PENDING'
                  AND processing_status_code <> 'ERROR')
            AND transaction_type = 'DELIVER'
            AND group_id = v_group_id
            AND po_line_location_id = v_po_line_location_id
            AND parent_transaction_id=v_rcv_transaction_id
            AND interface_transaction_id < v_interface_transaction_id
            ORDER BY interface_transaction_id;

        /* Bug 3356796. Changed  x_po_transferrec to po_deliver%ROWTYPE
         * from po_transfer%ROWTYPE since po_deliver has all the columns
         * that are required for deliver and using po_transfer gives
         * PL/SQL conversion error.
        */
        l_unit_of_measure             po_line_locations.unit_meas_lookup_code%TYPE;
        x_po_transferrec              po_deliver%ROWTYPE;
        x_temp_parent_trx_qty         NUMBER                                                  := 0;
        x_converted_parent_trx_qty    NUMBER                                                  := 0;
        x_temp_convert_parent_trx_qty NUMBER                                                  := 0;
        x_remaining_qty_parent_uom    NUMBER                                                  := 0;
        l_to_organization_id          NUMBER                                                  := 0;
        x_temp_already_allocated_qty  NUMBER                                                  := 0;
        derive_values_from_table      BOOLEAN                                                 := FALSE;
        derive_values_from_rti        BOOLEAN                                                 := FALSE;
        already_derived               BOOLEAN                                                 := FALSE;
        cascaded_table_index          NUMBER;
        l_num_of_distributions        NUMBER;
        temp_index                    NUMBER;
        l_supply_code                 rcv_supply.supply_type_code%TYPE;
        l_transaction_type            rcv_transactions.transaction_type%TYPE;
        /* FPJ SERVICES */
        l_value_basis                 po_lines.order_type_lookup_code%TYPE;
        l_purchase_basis              po_lines.purchase_basis%TYPE;
        l_matching_basis              po_lines.matching_basis%TYPE;
        l_service_po_line_id          po_lines.po_line_id%TYPE;
        l_total_rec_quantity          NUMBER;
        l_converted_distribution_qty  NUMBER;
        l_distribution_qty            NUMBER;
        l_converted_transaction_qty   NUMBER;
        l_ship_unit                   po_line_locations.unit_meas_lookup_code%TYPE;
	l_po_header_id po_headers_all.po_header_id%type;
	l_return_status VARCHAR2(1) :='S';
	l_complex_flag   varchar2(1);

        /* Bug 5354379 */
        l_po_deliver_rti_cursor_opened  NUMBER := 0;
        l_fetch_mtl_supply  VARCHAR2(2) := 'S'; --'S' fetched mtl_supply successfully or 'E' error
        l_interface_txn_id  NUMBER := -1;
        l_transaction_id  NUMBER := -1;
        l_loop_exit_status  VARCHAR2(2) := 'S'; --'S' loop exited successfully by fetching RECEIVE txnid from RT or 'E' error
        l_exit VARCHAR2(2) := 'N';-- 'Y' exit loop, 'N' dont exit the loop
        l_parent_interface_txn_id  NUMBER := -1;
        l_parent_transaction_id  NUMBER := -1;
        l_parent_receive_txn_in_rt  VARCHAR2(2) := 'Y';-- 'Y'->Receive txn is in RT, so mtl_supply exists or 'N' RECEIVE txn still in RTI
        l_total_receiving_quantity NUMBER := 0; --Sum of received qty of preprocessed RECEIVE txn in RTI with same group_id
        l_total_deliver_quantity NUMBER := 0;--Sum of delivered qty of preprocessed DELIVER txn(excluding current DELIVER txn) in RTI with same group_id
        l_deliver_quantity NUMBER := 0; --Deliver qty for the current deliver txn
        l_receive_quantity NUMBER := 0;
        /* Bug 5354379 */

        /* Bug 5354379 */
        /** Bug:6030094
         *  PO number can be alpha numeric. So changing the
         *  l_po_num definition from NUMBER to po_headers_all.segment1%type
         */
        l_po_num po_headers_all.segment1%type := null;
        l_po_line_num NUMBER := 0;
        l_po_line_loc_num NUMBER := 0;
        l_po_dist_num NUMBER := 0;
        /* Bug 5354379 */
        l_po_rel_num NUMBER := -1; --5439085
        --Bug 8631613
        l_temp_qty NUMBER;
        l_pri_temp_qty NUMBER;
        --Bug 8631613

        -- <Bug 9342280 : Added for CLM project>
        l_is_clm_po           VARCHAR2(5) := 'N';
        l_partial_funded_flag VARCHAR2(5) := 'N';
        -- <CLM END>
    BEGIN
        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('enter derive_quantity ' || x_cascaded_table(n).parent_transaction_id);
        END IF;

        --Bug 7651646
 	     IF (x_cascaded_table(n).parent_transaction_id IS NOT NULL) THEN
 	             already_derived  := TRUE;
 	     END IF;

 	     IF ( NOT already_derived
 	          AND (x_cascaded_table(n).parent_interface_txn_id IS NULL)
 	          AND (x_cascaded_table(n).parent_source_transaction_num IS NOT NULL)) THEN
 	          BEGIN
 	             SELECT transaction_id
 	             INTO   x_cascaded_table(n).parent_transaction_id
 	             FROM   rcv_transactions
 	             WHERE  source_transaction_num = x_cascaded_table(n).parent_source_transaction_num;

 	             already_derived  := TRUE;
 	          EXCEPTION
 	             WHEN NO_DATA_FOUND THEN
                     rcv_error_pkg.set_error_message('RCV_NO_PARENT_SRC_TRANSACTION');
                     rcv_error_pkg.set_token('VALUE',x_cascaded_table(n).parent_source_transaction_num);
                     x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_error;
                     x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
                     rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);

                WHEN TOO_MANY_ROWS THEN
                     rcv_error_pkg.set_error_message('RCV_DUP_SRC_TRANSACTION');
                     rcv_error_pkg.set_token('VALUE',x_cascaded_table(n).parent_source_transaction_num);
                     x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_error;
                     x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
                     rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);
             END;
        END IF;

        IF (x_cascaded_table(n).parent_transaction_id IS NOT NULL) THEN --{
            SELECT po_header_id
            INTO   x_cascaded_table(n).po_header_id
            FROM   rcv_transactions
            WHERE  transaction_id = x_cascaded_table(n).parent_transaction_id;

            SELECT COUNT(*)
            INTO   l_num_of_distributions
            FROM   po_distributions pod,
                   rcv_supply rs
            WHERE  pod.line_location_id = rs.po_line_location_id
            AND    rs.rcv_transaction_id = x_cascaded_table(n).parent_transaction_id;

            IF  (l_num_of_distributions = 0) then
                /* FP for Bug 4654553.(fixed as a part of bug 5354379)Most probably this is due to non availability
                   of receiving supply in rcv_supply.Either the items are fully
                    delivered to inventory or returned back to supplier.
                   In such a case raise an error and fail the transaction.
                */

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('l_num_of_distributions is 0');
                END IF;

                x_cascaded_table(n).error_status  := 'F';
                rcv_error_pkg.set_error_message('RCV_NO_RECEIVE_SUPPLY', x_cascaded_table(n).error_message);
                rcv_error_pkg.log_interface_error('INTERFACE_TRANSACTION_ID', FALSE);
                return;

            END IF;  /* End of FP for bug 4654553 */
            IF (    (x_cascaded_table(n).transaction_type = 'DELIVER')
                AND (l_num_of_distributions > 1)) THEN --{
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line(' open po_deliver table ' || x_cascaded_table(n).parent_transaction_id);
                END IF;

                /* Bug3553796 - Deriving Distribution number when Distribution
                   id is available. */

                /* Bug3553796 - START */
                IF (    x_cascaded_table(n).po_distribution_id IS NOT NULL
                    AND (x_cascaded_table(n).document_distribution_num IS NULL)) THEN
                    BEGIN
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Deriving Distribution Number from Distribution Id:' || x_cascaded_table(n).po_distribution_id);
                        END IF;

                        SELECT distribution_num
                        INTO   x_cascaded_table(n).document_distribution_num
                        FROM   po_distributions
                        WHERE  po_distribution_id = x_cascaded_table(n).po_distribution_id;

                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Derived Distribution Number:' || x_cascaded_table(n).document_distribution_num);
                        END IF;
                    EXCEPTION
                        WHEN OTHERS THEN
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('wrong po_distribution_id entered in rcv_transactions_interface');
                            END IF;
                    END;
                END IF;

                /* Bug3553796 - END */
                IF (x_cascaded_table(n).document_distribution_num IS NULL) THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Distribution num is required for delivering multi distribution Po');
                    END IF;

                    x_cascaded_table(n).error_status  := 'F';
                    rcv_error_pkg.set_error_message('RCV_DIST_NUM_REQ', x_cascaded_table(n).error_message);
                    rcv_error_pkg.log_interface_error('INTERFACE_TRANSACTION_ID', FALSE);
                END IF; --}

                OPEN po_deliver(x_cascaded_table(n).parent_transaction_id,
                                x_cascaded_table(n).to_organization_id,
                                x_cascaded_table(n).document_distribution_num
                               );
                already_derived  := TRUE;
            ELSE      --}{ /* Transfer, accept, reject and deliver with only one distribution */
                 -- end if;
                already_derived  := TRUE;
            END IF; --}
        END IF; --}

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('l_num_of_distributions ' || l_num_of_distributions);
        END IF;

        IF already_derived THEN --{
            IF (    (x_cascaded_table(n).transaction_type = 'DELIVER')
                AND (l_num_of_distributions = 1)) THEN --{
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line(' open po_single_deliver table ' || x_cascaded_table(n).parent_transaction_id);
                END IF;

                OPEN po_single_deliver(x_cascaded_table(n).parent_transaction_id, x_cascaded_table(n).to_organization_id);
            ELSIF(x_cascaded_table(n).transaction_type <> 'DELIVER') THEN --}{
                /* For transfers, accept and reject */
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line(' open po_transfer table ' || x_cascaded_table(n).parent_transaction_id);
                END IF;

                OPEN po_transfer(x_cascaded_table(n).parent_transaction_id, x_cascaded_table(n).to_organization_id);
            END IF; --}
        END IF; ---}

        IF (NOT already_derived) THEN --{
            derive_parent_id(x_cascaded_table, n);

            /* This means that there was no error in
             * derive_parent_id which means that the
             * this is a child and need to get the values
             * from the rti and not from the plsql table.
            */
            IF (    (x_cascaded_table(n).error_status <> 'E')
                AND (    x_cascaded_table(n).derive = 'Y'
                     AND x_cascaded_table(n).derive_index = 0)) THEN --{
                /* if derive_values_from_table is true, then we
                 * derive the values from the pl/sql tables later
                 * at the time when we try to see which cursor is open.
                 * We will have x_cascaded_table(n).
                 * parent_interface_txn_id) populated with teh
                 * correct value.
                */
                SELECT COUNT(*)
                INTO   l_num_of_distributions
                FROM   po_distributions
                WHERE  line_location_id = (SELECT po_line_location_id
                                           FROM   rcv_transactions_interface
                                           WHERE  interface_transaction_id = x_cascaded_table(n).parent_interface_txn_id);

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('l_num_of_distributions ' || l_num_of_distributions);
                END IF;

                IF (    (x_cascaded_table(n).transaction_type = 'DELIVER')
                    AND (l_num_of_distributions = 1)) THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' open Single deliver cursor from rti');
                    END IF;

                    OPEN po_single_deliver_rti(x_cascaded_table(n).parent_interface_txn_id);
                ELSIF(    (x_cascaded_table(n).transaction_type = 'DELIVER')
                      AND (l_num_of_distributions > 1)) THEN --}{

               /* Bug 5354379: {
                       If the po_distribution_id is populated in RTI, then derive the
                       distribution number from po_distributions_all table */

                    IF (    x_cascaded_table(n).po_distribution_id IS NOT NULL
                           AND (x_cascaded_table(n).document_distribution_num IS NULL)) THEN

                       BEGIN
                          IF (g_asn_debug = 'Y') THEN
                             asn_debug.put_line('Deriving Distribution Number from Distribution Id:' || x_cascaded_table(n).po_distribution_id);
                          END IF;

                          SELECT  distribution_num
                            INTO  x_cascaded_table(n).document_distribution_num
                            FROM  po_distributions
                           WHERE  po_distribution_id = x_cascaded_table(n).po_distribution_id;

                          IF (g_asn_debug = 'Y') THEN
                              asn_debug.put_line('Derived Distribution Number:' || x_cascaded_table(n).document_distribution_num);
                          END IF;

                       EXCEPTION
                          WHEN OTHERS THEN
                             IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('wrong po_distribution_id entered in rcv_transactions_interface');
                             END IF;
                       END;
                    END IF;
                    -- } bug 5354379

                    IF (x_cascaded_table(n).document_distribution_num IS NULL) THEN --{
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Distribution num is required for delivering multi distribution Po');
                        END IF;

                        x_cascaded_table(n).error_status  := 'F';
                        rcv_error_pkg.set_error_message('RCV_DIST_NUM_REQ', x_cascaded_table(n).error_message);
                        rcv_error_pkg.log_interface_error('INTERFACE_TRANSACTION_ID', FALSE);
                    END IF; --}

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' open Multi deliver cursor from rti');
                    END IF;

                    OPEN po_deliver_rti(x_cascaded_table(n).parent_interface_txn_id, x_cascaded_table(n).document_distribution_num);
                    l_po_deliver_rti_cursor_opened := 1;--Bug 5354379
                ELSE --}{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' open transfer cursor from rti');
                    END IF;

                    OPEN po_transfer_rti(x_cascaded_table(n).parent_interface_txn_id);
                END IF; --}
            END IF; --}
        END IF; --}

/******************************************************************/
--check line quanity > 0
        x_progress  := '097';

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('X_progress ' || x_progress);
        END IF;

        IF     x_cascaded_table(n).error_status IN('S', 'W')
           AND x_cascaded_table(n).quantity <= 0 THEN --{
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Quantity is <= zero. Cascade will fail');
            END IF;

            x_cascaded_table(n).error_status  := 'F';
            rcv_error_pkg.set_error_message('RCV_ENTER_QTY_GT_ZERO', x_cascaded_table(n).error_message);
            rcv_error_pkg.log_interface_error('QUANTITY', FALSE);
        END IF; --} end qty > 0 check

                -- the following steps will create a set of rows linking the line_record with
                -- its corresponding po_line_location rows until the quantity value from
                -- the asn is consumed.  (Cascade)

        /* 2119137 : If the user populates rcv_transactions_interface
        with po_line_id, then ROI errors out with
        RCV_ASN_NO_PO_LINE_LOCATION_ID when the docment_line_num
        is not provided for one time items. Modified the "if" criteria in
        such a way that the ROI validation does'nt error out when
        po_line_id is populated for one time items. */
        x_progress  := '098';

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('X_progress ' || x_progress);
        END IF;

        IF (    (   x_cascaded_table(n).parent_transaction_id IS NOT NULL
                 OR x_cascaded_table(n).parent_interface_txn_id IS NOT NULL)
            AND x_cascaded_table(n).error_status IN('S', 'W')) THEN --{

                                                                    -- Copy record from main table to temp table
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Copy record from main table to temp table');
            END IF;

            current_n                       := 1;
            temp_cascaded_table(current_n)  := x_cascaded_table(n);

            -- Get all rows which meet this condition
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Get all rows which meet this condition');
                asn_debug.put_line('Transaction Type = ' || x_cascaded_table(n).transaction_type);
                asn_debug.put_line('Auto Transact Code = ' || x_cascaded_table(n).auto_transact_code);
            END IF;

            -- Assign shipped quantity to remaining quantity
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Assign populated quantity to remaining quantity ' || temp_cascaded_table(current_n).quantity);
                asn_debug.put_line('Pointer in temp_cascade ' || TO_CHAR(current_n));
            END IF;

            x_remaining_quantity            := temp_cascaded_table(current_n).quantity;
            x_bkp_qty                       := x_remaining_quantity; -- used for decrementing cum qty for first record
            x_remaining_qty_po_uom          := 0;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Have assigned the quantity ' || x_remaining_quantity);
            END IF;

            -- Calculate tax_amount_factor for calculating tax_amount for
            -- each cascaded line

            IF NVL(temp_cascaded_table(current_n).tax_amount, 0) <> 0 THEN
                tax_amount_factor  := temp_cascaded_table(current_n).tax_amount / x_remaining_quantity;
            ELSE
                tax_amount_factor  := 0;
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Tax Factor ' || TO_CHAR(tax_amount_factor));
                asn_debug.put_line('Shipped Quantity : ' || TO_CHAR(x_remaining_quantity));
            END IF;

            x_first_trans                   := TRUE;
            transaction_ok                  := FALSE;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Before starting Cascade');
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Record Count = ' || x_record_count);
            END IF;

            LOOP --{
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Backup Qty ' || TO_CHAR(x_bkp_qty));
                    asn_debug.put_line('Remaining Quantity ASN UOM ' || TO_CHAR(x_remaining_quantity));
                END IF;

                /*
                ** Fetch the appropriate record
                */
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('DEBUG: transaction_type = ' || x_cascaded_table(n).transaction_type);
                END IF;

                IF (po_transfer%ISOPEN) THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' fetch po_transfer');
                    END IF;

                    FETCH po_transfer INTO x_po_transferrec;

                    IF (po_transfer%NOTFOUND) THEN
                        lastrecord  := TRUE;
                    END IF;

                    rows_fetched  := po_transfer%ROWCOUNT;
                ELSIF(po_single_deliver%ISOPEN) THEN --}{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' fetch po_single_deliver');
                    END IF;

                    FETCH po_single_deliver INTO x_po_transferrec;

                    IF (po_single_deliver%NOTFOUND) THEN
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Single Deliver last row');
                        END IF;

                        lastrecord  := TRUE;
                    END IF;

                    rows_fetched  := po_single_deliver%ROWCOUNT;
                ELSIF(po_transfer_rti%ISOPEN) THEN --}{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' fetch po_transfer_rti');
                    END IF;

                    FETCH po_transfer_rti INTO x_po_transferrec;

                    IF (po_transfer_rti%NOTFOUND) THEN
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('transfer last row');
                        END IF;

                        lastrecord  := TRUE;
                    END IF;

                    rows_fetched  := po_transfer_rti%ROWCOUNT;
                ELSIF(po_single_deliver_rti%ISOPEN) THEN --}{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' fetch po_single_deliver_rti');
                    END IF;

                    FETCH po_single_deliver_rti INTO x_po_transferrec;

                    IF (po_single_deliver_rti%NOTFOUND) THEN
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('single_deliver_rti last row');
                        END IF;

                        lastrecord  := TRUE;
                    END IF;

                    rows_fetched  := po_single_deliver_rti%ROWCOUNT;
                ELSIF(    po_deliver%ISOPEN
                      AND x_cascaded_table(n).document_distribution_num IS NOT NULL) THEN --}{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' fetch po_deliver');
                    END IF;

                    FETCH po_deliver INTO x_po_transferrec;

                    IF (po_deliver%NOTFOUND) THEN
                        lastrecord  := TRUE;
                    END IF;

                    IF (firstrecord) THEN
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('first record for multi distributions');
                        END IF;

                        firstrecord  := FALSE;

                        SELECT quantity
                        INTO   l_total_rec_quantity
                        FROM   rcv_supply
                        WHERE  rcv_transaction_id = x_po_transferrec.rcv_transaction_id
                        AND    supply_type_code = 'RECEIVING';
                    END IF;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' l_total_rec_quantity ' || l_total_rec_quantity);
                    END IF;

                    rows_fetched  := po_deliver%ROWCOUNT;
                ELSIF(po_deliver_rti%ISOPEN) THEN --}{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' fetch po_deliver_rti');
                    END IF;

                    FETCH po_deliver_rti INTO x_po_transferrec;

                    IF (po_deliver_rti%NOTFOUND) THEN
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('deliver_rti last row');
                        END IF;

                        lastrecord  := TRUE;
                    END IF;

                    l_total_rec_quantity  := x_po_transferrec.qty;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' l_total_rec_quantity if multi distribution from rti ' || x_po_transferrec.qty);
                    END IF;

                    rows_fetched          := po_deliver_rti%ROWCOUNT;
                ELSIF(temp_cascaded_table(current_n).derive = 'Y') THEN --}{
                    /* GET VALUES FROM THE PLSQL TABLE */
                    /* Populate x_po_transferrec with these values since
                * we are using x_po_transferrec later.
                * We have temp_cascaded_table(current_n).
                * parent_interface_txn_id) populated with
                * with the correct value. Also we have cascaded_table_index
                * with the correct pl/sql table index number;
                    */
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' fetch pl/sql table');
                    END IF;

                    temp_index                                   := temp_cascaded_table(current_n).derive_index;
                    x_po_transferrec.po_line_location_id         := x_cascaded_table(temp_index).po_line_location_id;
                    x_po_transferrec.po_head_id                  := x_cascaded_table(temp_index).po_header_id;
                    x_po_transferrec.line_id                     := x_cascaded_table(temp_index).po_line_id;
                    x_po_transferrec.unit_of_meas                := x_cascaded_table(temp_index).unit_of_measure;
                    x_po_transferrec.document_num                := x_cascaded_table(temp_index).document_num;
                    x_po_transferrec.line_number                 := x_cascaded_table(temp_index).document_line_num;
                    x_po_transferrec.transaction_date            := x_cascaded_table(temp_index).transaction_date;
                    x_po_transferrec.transaction_type            := x_cascaded_table(temp_index).transaction_type;
                    x_po_transferrec.primary_unit_of_measure     := x_cascaded_table(temp_index).primary_unit_of_measure;
                    x_po_transferrec.primary_quantity            := x_cascaded_table(temp_index).primary_quantity;
                    x_po_transferrec.to_organization_id          := x_cascaded_table(temp_index).to_organization_id;
                    x_po_transferrec.unit_price                  := x_cascaded_table(temp_index).po_unit_price;
                    x_po_transferrec.category_id                 := x_cascaded_table(temp_index).category_id;
                    x_po_transferrec.item_description            := x_cascaded_table(temp_index).item_description;
                    x_po_transferrec.location_id                 := x_cascaded_table(temp_index).location_id;
                    x_po_transferrec.item_id                     := x_cascaded_table(temp_index).item_id;
                    x_po_transferrec.deliver_to_person_id        := x_cascaded_table(temp_index).deliver_to_person_id;
                    x_po_transferrec.deliver_to_location_id      := x_cascaded_table(temp_index).deliver_to_location_id;
                    x_po_transferrec.destination_subinventory    := x_cascaded_table(temp_index).subinventory;
                    x_po_transferrec.po_distribution_id          := x_cascaded_table(temp_index).po_distribution_id;
                    x_po_transferrec.destination_type_code       := x_cascaded_table(temp_index).destination_type_code;
                    x_po_transferrec.code_combination_id         := x_cascaded_table(temp_index).charge_account_id;
                    x_po_transferrec.req_distribution_id         := x_cascaded_table(temp_index).req_distribution_id;
                    x_po_transferrec.wip_entity_id               := x_cascaded_table(temp_index).wip_entity_id;
                    x_po_transferrec.wip_operation_seq_num       := x_cascaded_table(temp_index).wip_operation_seq_num;
                    x_po_transferrec.wip_resource_seq_num        := x_cascaded_table(temp_index).wip_resource_seq_num;
                    x_po_transferrec.wip_repetitive_schedule_id  := x_cascaded_table(temp_index).wip_repetitive_schedule_id;
                    x_po_transferrec.wip_line_id                 := x_cascaded_table(temp_index).wip_line_id;
                    x_po_transferrec.bom_resource_id             := x_cascaded_table(temp_index).bom_resource_id;
                    x_po_transferrec.ussgl_transaction_code      := x_cascaded_table(temp_index).ussgl_transaction_code;
                    x_po_transferrec.qty                         := x_cascaded_table(temp_index).quantity;
                    rows_fetched                                 := 1;
                    lastrecord                                   := TRUE;
                END IF; --}


                        --x_remaining_quantity:= temp_cascaded_table(current_n).quantity;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Transfer Rows fetched ' || TO_CHAR(rows_fetched));
                    asn_debug.put_line('po_line_id  ' || TO_CHAR(x_po_transferrec.po_line_id));
                    asn_debug.put_line('po_dist  ' || TO_CHAR(x_po_transferrec.po_distribution_id));
                    asn_debug.put_line('Transfer remainaing qty ' || x_remaining_quantity);
                END IF;

               /* { Bug 5354379:  To log meaningful error message with the PO number, PO line number
                               PO line location number and distribution number and transaction qty.
                               Using the message RCV_TRX_QTY_EXCEEDS_AVL_QTY_PO instead of
                               RCV_TRX_QTY_EXCEEDS_AVAILABLE */
               BEGIN
                   select segment1
                     into l_po_num
                     from po_headers_all
                    where po_header_id = x_po_transferrec.po_head_id;

                   select line_num
                     into l_po_line_num
                     from po_lines_all
                    where po_line_id = x_po_transferrec.po_line_id;

                   select shipment_num
                     into l_po_line_loc_num
                     from po_line_locations_all
                    where line_location_id = x_po_transferrec.po_line_location_id;

                   select distribution_num
                     into l_po_dist_num
                     from po_distributions_all
                    where po_distribution_id = x_po_transferrec.po_distribution_id;

                   if x_cascaded_table(n).po_release_id is not null then --5439085
                      select release_num
                        into l_po_rel_num
                        from po_releases_all
                       where po_release_id = x_cascaded_table(n).po_release_id;
                   end if;
               EXCEPTION
                 WHEN NO_DATA_FOUND THEN
                    IF (g_asn_debug = 'Y') THEN
                       asn_debug.put_line('No data found exception while getting document info for PO');
                    END IF;
               END;
               -- } Bug 5354379

                /* FPJ SERVICES START.
                 * We do not support Transfer/Deliver/Inspect transaction for a
                 * Serive based PO.
                */
		/* R12 Complex work.
		 * We do not support any other receiving transactions other
		 * than direct receipt. Error out if it is complex work PO.
		*/
                IF (x_cascaded_table(n).parent_transaction_id IS NOT NULL) THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Parent_txn_id ' || x_cascaded_table(n).parent_transaction_id);
                    END IF;

                    SELECT po_line_id,po_header_id
                    INTO   l_service_po_line_id,l_po_header_id
                    FROM   rcv_transactions
                    WHERE  transaction_id = x_cascaded_table(n).parent_transaction_id;
                ELSIF(x_cascaded_table(n).parent_interface_txn_id IS NOT NULL) THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('parent_interface_txn_id ' || x_cascaded_table(n).parent_interface_txn_id);
                    END IF;

                    SELECT po_line_id,po_header_id
                    INTO   l_service_po_line_id,l_po_header_id
                    FROM   rcv_transactions_interface
                    WHERE  interface_transaction_id = x_cascaded_table(n).parent_interface_txn_id;
                END IF;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('l_service_po_line_id ' || l_service_po_line_id);
                    asn_debug.put_line('l_po_header_id ' || l_po_header_id);
                END IF;

                IF l_service_po_line_id IS NOT NULL THEN --{
                    SELECT NVL(order_type_lookup_code, 'QUANTITY'),
                           NVL(purchase_basis, 'GOODS'),
                           NVL(matching_basis, 'QUANTITY')
                    INTO   l_value_basis,
                           l_purchase_basis,
                           l_matching_basis
                    FROM   po_lines
                    WHERE  po_line_id = l_service_po_line_id;

                    IF (l_matching_basis = 'AMOUNT') THEN
                        x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                        rcv_error_pkg.set_error_message('RCV_NO_SERVICE_SUPPORT_TRX', x_cascaded_table(n).error_message);
                        rcv_error_pkg.log_interface_error('TRANSACTION_TYPE', FALSE);
                    END IF;
                END IF; --}

                /* FPJ SERVICES END. */

		/* R12 Complex work.
		 * We do not support any other receiving transactions other
		 * than direct receipt. Error out if it is complex work PO.
		*/

		PO_COMPLEX_WORK_GRP.is_complex_work_po(
                         1.0,
                         l_po_header_id,
                         l_return_status,
                         l_complex_flag,
						 x_po_transferrec.po_line_id,             /* Complex PO Receiving ER */
						 x_po_transferrec.item_id,                /* Complex PO Receiving ER */
						 x_po_transferrec.item_description,       /* Complex PO Receiving ER */
						 x_po_transferrec.po_line_location_id);   /* Complex PO Receiving ER */

		IF (l_return_status IS NOT NULL AND
			  l_return_status = FND_API.g_ret_sts_success) THEN
			IF( g_asn_debug = 'Y' ) THEN
			    asn_debug.put_line('l_return_status ' || l_return_status);
			    asn_debug.put_line('l_po_header_id ' || l_po_header_id);
			END IF;
		ELSE
			IF( g_asn_debug = 'Y') THEN
			    asn_debug.put_line('l_return_status ' || l_return_status);
			END IF;
		END IF;

		IF (l_complex_flag = 'Y') THEN
			asn_debug.put_line('We do not support transaction type ' || x_cascaded_table(n).transaction_type || ' for complex work POs');
			rcv_error_pkg.set_error_message('RCV_INVALID_TRANSACTION_TYPE');
			rcv_error_pkg.log_interface_error('TRANSACTION_TYPE');
		End if;





                IF (   lastrecord
                    OR x_remaining_quantity <= 0) THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Hit exit condition');
                    END IF;

                    IF NOT x_first_trans THEN
                        -- x_first_trans has been reset which means some cascade has
                        -- happened. Otherwise current_n = 1
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('current_n before is ' || current_n);
                        END IF;

                        current_n  := current_n - 1;
                    END IF;

                    -- do the tolerance act here
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Temp table pointer ' || TO_CHAR(current_n));
                        asn_debug.put_line('Check which condition has occured');
                    END IF;

                    -- lastrecord...we have run out of rows and we still have quantity to allocate
                    IF (round(x_remaining_quantity,6) > 0) THEN --{ Bug 13703497
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('There is quantity remaining');
                            asn_debug.put_line('Need to check qty tolerances');
                        END IF;

                        IF     rows_fetched > 0
                           AND NOT x_first_trans THEN --{
                            NULL;

                            /* for transfer,accept an reject type we dont have the
                        * tolerance check. Hence error out.
                         * We cannot transfer quantities more than that was received.
                        */
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line(' in transfer Extra ASN UOM Quantity ' || TO_CHAR(x_remaining_quantity));
                                asn_debug.put_line('Extra PO UOM Quantity ' || TO_CHAR(x_remaining_qty_po_uom));
                            END IF;

                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('delete the temp table ');
                            END IF;

                            -- <Bug 9342280 : Added for CLM project>
                            IF x_cascaded_table(n).transaction_type = 'DELIVER' THEN
                               get_clm_info(  'QUANTITY',
                                              x_cascaded_table,
                                              n,
                                              l_is_clm_po,
                                              l_partial_funded_flag);
                            END IF;
                            -- <CLM END>

                            x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;

                            -- <Bug 9342280 : Added for CLM project>
                            IF (l_is_clm_po = 'Y' AND l_partial_funded_flag = 'Y' AND
                               x_cascaded_table(n).transaction_type = 'DELIVER') THEN

                               IF l_po_rel_num = -1 THEN

                                  rcv_error_pkg.set_error_message('RCV_ROI_TRX_QTY_EXCEEDS_FUNDED', x_cascaded_table(n).error_message);
                               ELSE
                                  rcv_error_pkg.set_error_message('RCV_ROI_TRX_QTY_EXCEED_FUNDED', x_cascaded_table(n).error_message);
                                  rcv_error_pkg.set_token('RELNUM', l_po_rel_num);
                               END IF;

                               rcv_error_pkg.set_token('TXNQTY', x_cascaded_table(n).quantity);
                               rcv_error_pkg.set_token('AVLQTY', x_cascaded_table(n).quantity - x_remaining_quantity);
                               rcv_error_pkg.set_token('PONUM', l_po_num);
                               rcv_error_pkg.set_token('LINENUM', l_po_line_num);
                               rcv_error_pkg.set_token('SHIPNUM', l_po_line_loc_num);
                               rcv_error_pkg.set_token('DISTNUM', l_po_dist_num);

                            ELSE
                            -- <CLM END>

                            IF l_po_rel_num = -1 THEN--Bug 5439085
                               rcv_error_pkg.set_error_message('RCV_TRX_QTY_EXCEEDS_AVL_QTY_PO', x_cascaded_table(n).error_message);
                            ELSE
                               rcv_error_pkg.set_error_message('RCV_TRX_QTY_EXCEED_AVL_QTY_PO', x_cascaded_table(n).error_message);
                               rcv_error_pkg.set_token('RELNUM',l_po_rel_num);
                            END IF;
                            rcv_error_pkg.set_token('TXNQTY',x_cascaded_table(n).quantity);
                            rcv_error_pkg.set_token('AVLQTY',x_cascaded_table(n).quantity - x_remaining_quantity);
                            rcv_error_pkg.set_token('PONUM', l_po_num );
                            rcv_error_pkg.set_token('LINENUM',l_po_line_num );
                            rcv_error_pkg.set_token('SHIPNUM',l_po_line_loc_num);
                            rcv_error_pkg.set_token('DISTNUM',l_po_dist_num);

                            END IF; -- <Bug 9342280 : Added for CLM project>

                            rcv_error_pkg.log_interface_error('QUANTITY', FALSE);

                            IF temp_cascaded_table.COUNT > 0 THEN
                                FOR i IN 1 .. temp_cascaded_table.COUNT LOOP
                                    temp_cascaded_table.DELETE(i);
                                END LOOP;
                            END IF;

                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('mark the actual table with error status');
                                asn_debug.put_line('Error Status ' || x_cascaded_table(n).error_status);
                                asn_debug.put_line('Error message ' || x_cascaded_table(n).error_message);
                            END IF;

                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('Need to insert a row into po_interface_errors for transfer');
                            END IF;
                        ELSE --}{ else for rows fetched = 0 OR x_first_trans = true
                            IF rows_fetched = 0 THEN
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('No rows were retrieved from cursor.');
                                END IF;
                            ELSIF x_first_trans THEN
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('No rows were cascaded');
                                END IF;
                            END IF;

                            x_temp_count                      := 1;
                            x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;

                            IF (x_cascaded_table(n).parent_transaction_id IS NOT NULL) THEN --{

                                SELECT transaction_type
                                INTO   l_transaction_type
                                FROM   rcv_transactions
                                WHERE  transaction_id = temp_cascaded_table(current_n).parent_transaction_id;

                                IF l_transaction_type = 'UNORDERED' THEN
                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_INVALID_PARENT_TRX_TYPE', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);
                                ELSE -- all other cases can be categorized as no receive supply
                                    rcv_error_pkg.set_error_message('RCV_NO_RECEIVE_SUPPLY', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);
                                END IF;
                            END IF; --}

                                    -- Delete the temp_cascaded_table just to be sure

                            IF temp_cascaded_table.COUNT > 0 THEN
                                FOR i IN 1 .. temp_cascaded_table.COUNT LOOP
                                    temp_cascaded_table.DELETE(i);
                                END LOOP;
                            END IF;
                        END IF;       --} end else for rows fetched = 0 OR x_first_trans = true
                                -- end x_remaining_qty > 0 => this is the last record
                    ELSE -- }{
                        -- Bug 13703497
                        x_remaining_quantity   := 0;
                        x_remaining_qty_po_uom := 0;

                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Remaining  UOM quantity is zero ' || TO_CHAR(x_remaining_quantity));
                            asn_debug.put_line('Return the cascaded rows back to the calling procedure');
                        END IF;
                    END IF; --} ends the check for whether last record has been reached

                            -- close cursors

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Close cursors shipments, count_shipments, distributions, count_disributions ' || current_n);
                    END IF;

                    IF po_transfer%ISOPEN THEN
                        CLOSE po_transfer;
                    END IF;

                    IF po_transfer_rti%ISOPEN THEN
                        CLOSE po_transfer_rti;
                    END IF;

                    IF po_single_deliver%ISOPEN THEN
                        CLOSE po_single_deliver;
                    END IF;

                    IF po_single_deliver_rti%ISOPEN THEN
                        CLOSE po_single_deliver_rti;
                    END IF;

                    IF po_deliver%ISOPEN THEN
                        CLOSE po_deliver;
                    END IF;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('before exit current_n is ' || current_n);
                    END IF;

                    EXIT;
                END IF; --} matches lastrecord or x_remaining_quantity <= 0

                        -- eliminate the row if it fails the date check

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line(' Entering qty calculateion for transfer');
                END IF;

                IF     (x_first_trans)
                   AND temp_cascaded_table(current_n).item_id IS NULL THEN
                    temp_cascaded_table(current_n).item_id                  := x_po_transferrec.item_id;
                    temp_cascaded_table(current_n).primary_unit_of_measure  := x_po_transferrec.primary_unit_of_measure;
                END IF;

                insert_into_table           := FALSE;
                already_allocated_qty       := 0;
                get_interface_available_qty(temp_cascaded_table,
                                            current_n,
                                            x_converted_parent_trx_qty
                                           );

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('trans_del interface qty ' || x_converted_parent_trx_qty);
                END IF;

                /* If this is a deliver for a multi distribution PO shipment
                 * line and if its parent is in rti, then x_converted_parent_trx_qty
                 * will not be 0 and l_num_of_distributions will be > 1. In this
                 * case we need to make sure that the transaction qty is less than
                 * or equal to the available qty in rti and also less than or
                 * equal to the qty in po_distributions.
                */
                IF (    (temp_cascaded_table(1).transaction_type = 'DELIVER')
                    AND (l_num_of_distributions > 1)) THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('before getting available qty for standard multi distributions deliver  ');
                    END IF;

                    -- <Bug 9342280 : Added for CLM project>
                    get_clm_info('QUANTITY',
                                 x_cascaded_table,
                                 n,
                                 l_is_clm_po,
                                 l_partial_funded_flag);
                    -- <CLM END>


                     /* Bug 5354379:
                       We should not compare the transaction quantity with the po_distributions_all.ordered_quantity,
                       because we won't be able to do DELIVER txn for the RECEIVE txns with overreceipt made.
                       If the RECEIVE txn for that DELIVER txns lies in RT, we have to make use of mtl_supply
                       to get the AVAILABLE quantity for DELIVER txn.
                       If the RECEIVE txn for that DELIVER txns lies in RTI, there is no mtl_supply or rcv_supply.
                       So, get the available qty from RTI for that DELIVER txn
                      */

                     IF l_po_deliver_rti_cursor_opened = 1 THEN --{ l_po_deliver_rti_cursor_opened = 1
                        IF (g_asn_debug = 'Y') THEN
                           asn_debug.put_line('In l_po_deliver_rti_cursor_opened...');
                        END IF;
                         l_interface_txn_id := x_cascaded_table(n).interface_transaction_id;

                          --In the following 2 loops, trying to get the RECEIVE txn id for the current DELIVER txn.
                             --Once the controll comes out of the LOOP successfully,
                             --If the "RECEIVE txn for the current DELIVER txn is available in RT,
                             --RECEIVE txn id is fetched from RT and it will be available in the variable l_parent_transaction_id

                             --If the "RECEIVE txn for the current DELIVER txn is available in RTI,
                             --RECEIVE interface txn id is fetched from RTI and it will be available in the variable l_parent_interface_txn_id

                         LOOP --{ loop1
                             IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('Inside LOOP1 to fetch RECEIVE txn_id....');
                                asn_debug.put_line('Fetching record from RTI, l_interface_txn_id'||l_interface_txn_id);
                             END IF;

                             BEGIN --{
                                SELECT parent_interface_txn_id,
                                       parent_transaction_id,
                                       transaction_type
                                  INTO l_parent_interface_txn_id,
                                       l_parent_transaction_id,
                                       l_transaction_type
                                  FROM rcv_transactions_interface
                                 WHERE interface_transaction_id = l_interface_txn_id;

                                IF l_parent_transaction_id IS NOT NULL THEN--{
                                   --parent txn is available in rcv_transactions table
                                   l_transaction_id := l_parent_transaction_id;
                                   LOOP --{ loop2
                                      --Fetch the record from rcv_transactions table
                                      IF (g_asn_debug = 'Y') THEN
                                         asn_debug.put_line('Inside LOOP2 to fetch RECEIVE txn_id....');
                                         asn_debug.put_line('Fetching record from RT, l_transaction_id'||l_transaction_id);
                                      END IF;

                                      SELECT transaction_type,
                                             parent_transaction_id
                                        INTO l_transaction_type,
                                             l_parent_transaction_id
                                        FROM rcv_transactions
                                       WHERE transaction_id = l_transaction_id;

                                       IF l_transaction_type = 'RECEIVE' THEN  --{
                                          --exit loop1 and loop2
                                          --return l_transaction_id
                                          l_parent_transaction_id := l_transaction_id;
                                          IF (g_asn_debug = 'Y') THEN
                                              asn_debug.put_line('Fetched RECEIVE txn_id from RT....'||l_parent_transaction_id);
                                          END IF;
                                          l_exit := 'Y';
                                          EXIT; --exit loop2
                                       ELSIF l_parent_transaction_id IS NOT NULL THEN
                                          --continue LOOP2, till you fetch RECEIVE txnid
                                          l_transaction_id := l_parent_transaction_id;
                                       ELSE
                                          --Error condition
                                          l_exit := 'Y';
                                          l_loop_exit_status := 'E';
                                          IF (g_asn_debug = 'Y') THEN
                                             asn_debug.put_line('Error condition..parent_txn_id is null, not able to fetch RECEIVE txn_id');
                                          END IF;
                                          EXIT; --exit loop2
                                       END IF; --} l_transaction_type = 'RECEIVE'
                                   END LOOP; --{ loop2

                               ELSIF l_parent_interface_txn_id IS NOT NULL THEN --{ l_parent_interface_txn_id IS NOT NULL
                                   --parent txn is available in rcv_transactions_intreface table
                                   --continue LOOP1, till you fetch RECEIVE txnid
                                    l_interface_txn_id := l_parent_interface_txn_id;
                                  --}l_parent_interface_txn_id IS NOT NULL
                               ELSE --{
                                   --Check whether, the RECEIVE txn for this DELIVER is in RTI
                                   --Then we have to get AVAILABLE qty from RTI, as there is no RS or MS
                                   --For the RECEIVE txn only RHI will be there, there won't be no parent_txn_id or
                                   --parent_interface_txn_id
                                   IF l_transaction_type = 'RECEIVE' THEN  --{
                                       --exit loop1 and return l_interface_txn_id
                                       --This is the RECEIVE txn in RTI
                                       l_parent_interface_txn_id := l_interface_txn_id;
                                       l_parent_receive_txn_in_rt := 'N';
                                       l_loop_exit_status := 'S';
                                       IF (g_asn_debug = 'Y') THEN
                                          asn_debug.put_line('Fetched RECEIVE interface txn_id from RTI....'||l_parent_interface_txn_id);
                                       END IF;
                                   ELSE
                                     --Error condtion
                                      l_loop_exit_status := 'E';
                                      IF (g_asn_debug = 'Y') THEN
                                         asn_debug.put_line('Error condition..parent_interface_txn_id is null, not able to fetch RECEIVE txn_id');
                                      END IF;
                                   END IF;
                                   l_exit := 'Y';
                                   EXIT; --exit loop1
                                  --}
                               END IF;--} l_parent_transaction_id is not null
                             EXCEPTION
                                 WHEN NO_DATA_FOUND then
                                    l_exit := 'Y';
                                    l_loop_exit_status := 'E';
                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('No data found exception occured in Fetching RECEIVE txn_id');
                                    END IF;
                             END;--} BEGIN ends

                             --Check Exit condition met
                             IF l_exit = 'Y' THEN
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('Exiting the loop to Fetch RECEIVE txn_id....');
                                END IF;
                                EXIT;--exit loop1
                             END IF;
                         END LOOP; --}loop1

                         --Check Loop exited successfuly by fetching the RECEIVE txn id
                         IF l_loop_exit_status = 'E' THEN --{
                            --Error out this DELIVER txn and set RTI record status to 'E'
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('Error out this DELIVER txn and set RTI record status to Error, as not able get RECEIVE txn_id....');
                            END IF;
                            x_cascaded_table(n).error_status  := 'E';
                         ELSIF l_loop_exit_status = 'S' THEN --{ l_loop_exit_status = 'S'
                            --Check where to get the AVAILABLE qty for this DELIVER txn
                              -- if l_parent_receive_txn_in_rt is 'Y', Fetch the AVAILABLE qty from mtl_supply
                              -- if l_parent_receive_txn_in_rt is 'N', Fetch the AVAILABLE qty from rcv_transactions_interface
                             IF l_parent_receive_txn_in_rt = 'Y' THEN--{ l_parent_receive_txn_in_rt = 'Y'
                                 --Fetch AVAILABLE qty from mtl_supply using l_parent_transaction_id

                                 BEGIN --{
                                    IF (g_asn_debug = 'Y') THEN
                                       asn_debug.put_line('Fetching mtl_supply, from the fetched RECEIVE txn_id....'||l_parent_transaction_id);
                                       asn_debug.put_line('PO distribution id....'||x_po_transferrec.po_distribution_id);
                                    END IF;
                                 /*Fetch the available qty for DELIVER txn based on the shipment line from mtl_supply.
                                   Reason: When RECEIPT txn is performed through forms, we won't get distribution details.
                                           For eg: Assume PO with 1 line(qty15) 1shipment(15) and
                                                    2distributions(1st distribution qty:10 and 2nd distribution qty:5)
                                           Through forms perform ACCEPT txn for qty 15 and perform delivery on
                                           ditribution1 for qty:15. Transaction is allowed.
                                           We should have same behavoiur, when it is done through ROI also.
                                    Another case, When user peforms Overreceipt for the similar PO(mentioned above)through
                                    forms for qty 30. As per Cascading logic, in mtl_supply we are having qty:10 for distribution1
                                    and qty:20 in case of distribution2. But user is not aware of this cascading done in mtl_supply.
                                    So, we have to allow over delivery on the specified distribution, if it is with in the
                                    received qty for that shipment line.
                                    So, modifying the following sql to get Available qty based on shipment_line*/
                                    -- x_cascaded_table(n) is holding current DELIVER txn record
                                    SELECT  nvl(sum(quantity),0)
                                      INTO  l_distribution_qty
                                      FROM  mtl_supply
                                     WHERE  supply_source_id = l_parent_transaction_id
                                       AND  po_line_location_id = x_cascaded_table(n).po_line_location_id
                                       AND  supply_type_code = 'RECEIVING';

                                    SELECT  unit_meas_lookup_code
                                      INTO  l_ship_unit
                                      FROM  po_line_locations
                                     WHERE  line_location_id = x_cascaded_table(n).po_line_location_id;

                                 EXCEPTION
                                     WHEN NO_DATA_FOUND THEN
                                        --Error out DELIVER txn and set RTI status to 'E'
                                        l_fetch_mtl_supply := 'E';
                                        IF (g_asn_debug = 'Y') THEN
                                            asn_debug.put_line('No data found exception in fetching mtl_supply');
                                        END IF;
                                 END; --} Begin ends

                                 IF  l_fetch_mtl_supply = 'E' THEN
                                     --Error out this DELIVER txn and set RTI record status to 'E'
                                      IF (g_asn_debug = 'Y') THEN
                                          asn_debug.put_line('mtl_supply doesnot exist. error out the DELIVER txn...');
                                      END IF;
                                      x_cascaded_table(n).error_status  := 'E';

                                      -- <Bug 9342280 : Added for CLM project>

                                      IF l_is_clm_po = 'Y' AND l_partial_funded_flag = 'Y' THEN

                                        IF l_po_rel_num = -1 THEN

                                           rcv_error_pkg.set_error_message('RCV_ROI_TRX_QTY_EXCEEDS_FUNDED',x_cascaded_table(n).error_message);
                                        ELSE
                                           rcv_error_pkg.set_error_message('RCV_ROI_TRX_QTY_EXCEED_FUNDED',x_cascaded_table(n).error_message);
                                           rcv_error_pkg.set_token('RELNUM', l_po_rel_num);
                                        END IF;

                                        rcv_error_pkg.set_token('TXNQTY', x_cascaded_table(n).quantity);
                                        rcv_error_pkg.set_token('AVLQTY', 0);
                                        rcv_error_pkg.set_token('PONUM', l_po_num);
                                        rcv_error_pkg.set_token('LINENUM', l_po_line_num);
                                        rcv_error_pkg.set_token('SHIPNUM', l_po_line_loc_num);
                                        rcv_error_pkg.set_token('DISTNUM', l_po_dist_num);

                                      ELSE
                                      -- <CLM END>

                                      IF l_po_rel_num = -1 THEN--Bug 5439085
                                         rcv_error_pkg.set_error_message('RCV_TRX_QTY_EXCEEDS_AVL_QTY_PO', x_cascaded_table(n).error_message);
                                      ELSE
                                         rcv_error_pkg.set_error_message('RCV_TRX_QTY_EXCEED_AVL_QTY_PO', x_cascaded_table(n).error_message);
                                         rcv_error_pkg.set_token('RELNUM',l_po_rel_num);
                                      END IF;
                                      rcv_error_pkg.set_token('TXNQTY',x_cascaded_table(n).quantity);
                                      rcv_error_pkg.set_token('AVLQTY',0);
                                      rcv_error_pkg.set_token('PONUM', l_po_num );
                                      rcv_error_pkg.set_token('LINENUM',l_po_line_num );
                                      rcv_error_pkg.set_token('SHIPNUM',l_po_line_loc_num);
                                      rcv_error_pkg.set_token('DISTNUM',l_po_dist_num);

                                      END IF; -- <Bug 9342280 : Added for CLM project>

                                      rcv_error_pkg.log_interface_error('QUANTITY', FALSE);
                                 END IF;

                                 IF (g_asn_debug = 'Y') THEN
                                     asn_debug.put_line('l_distribution_qty:'||l_distribution_qty);
                                     asn_debug.put_line('Check whether l_distribution_qty is already consumed by other DELIVER txn submitted with same group_id');
                                 END IF;

                                 --Fetch sum of quantity of only pre processed 'DELIVER' txns in RTI for that group_id
                                 --and po_shipment_line, to get total_deliver_qty for that po_shipment_line
                                 --( by this filter interface_transaction_id < x_po_transferrec.interface_transaction_id,
                                  --  only fetching preprocessed deliver txn)
                                  --Removing the condition on po_distribution_id, as we are honouring the DELIVER txn
                                  --based on the shipment_level quantity available in mtl_supply
                                 BEGIN--{
                                      SELECT nvl(sum(quantity),0)
                                        INTO l_total_deliver_quantity
                                        FROM rcv_transactions_interface
                                       WHERE (transaction_status_code = 'PENDING'
                                               AND processing_status_code <> 'ERROR')
                                         AND transaction_type = 'DELIVER'
                                         AND group_id = x_cascaded_table(n).group_id
                                         AND po_line_location_id = x_po_transferrec.po_line_location_id
                                         AND interface_transaction_id < x_cascaded_table(n).interface_transaction_id;
                                 EXCEPTION
                                      WHEN NO_DATA_FOUND then
                                          IF (g_asn_debug = 'Y') THEN
                                              asn_debug.put_line('No data found exception while fetching sum of delivered qty..');
                                           END IF;
                                          l_total_deliver_quantity := 0;
                                 END;--} Begin ends

                                 IF (g_asn_debug = 'Y') THEN
                                     asn_debug.put_line('Sum of delivered qty for preprocessed DELIVERED txns..'||l_total_deliver_quantity);
                                 END IF;

                                 --x_cascaded_table(n).quantity ->  transaction qty of current Deliver txn
                                 --          l_distribution_qty ->  qty available in mtl_supply
                                 --    l_total_deliver_quantity ->  Quantity already consumed by the DELIVER txns(only precprocessed RTI record) submitted with the same group_id
                                 IF x_cascaded_table(n).quantity > (l_distribution_qty - l_total_deliver_quantity) THEN --{ x_cascaded_table(n).quantity > (l_distribution_qty - l_total_deliver_quantity)
                                     --Error out this DELIVERY txn, as it results in Over delivery on that distribution
                                     IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('Error out this DELIVERY txn, as it results in Over delivery on that distribution'||x_po_transferrec.po_distribution_id);
                                     END IF;
                                     x_cascaded_table(n).error_status  := 'E';

                                     -- <Bug 9342280 : Added for CLM project>

                                     IF l_is_clm_po = 'Y' AND l_partial_funded_flag = 'Y' THEN

                                        IF l_po_rel_num = -1 THEN

                                           rcv_error_pkg.set_error_message('RCV_ROI_TRX_QTY_EXCEEDS_FUNDED',x_cascaded_table(n).error_message);
                                        ELSE

                                           rcv_error_pkg.set_error_message('RCV_ROI_TRX_QTY_EXCEED_FUNDED',x_cascaded_table(n).error_message);
                                           rcv_error_pkg.set_token('RELNUM', l_po_rel_num);
                                        END IF;

                                        rcv_error_pkg.set_token('TXNQTY', x_cascaded_table(n).quantity);
                                        rcv_error_pkg.set_token('AVLQTY',l_distribution_qty - l_total_deliver_quantity);
                                        rcv_error_pkg.set_token('PONUM', l_po_num);
                                        rcv_error_pkg.set_token('LINENUM', l_po_line_num);
                                        rcv_error_pkg.set_token('SHIPNUM', l_po_line_loc_num);
                                        rcv_error_pkg.set_token('DISTNUM', l_po_dist_num);

                                     ELSE
                                     -- <CLM END>

                                     IF l_po_rel_num = -1 THEN--Bug 5439085
                                        rcv_error_pkg.set_error_message('RCV_TRX_QTY_EXCEEDS_AVL_QTY_PO', x_cascaded_table(n).error_message);
                                     ELSE
                                        rcv_error_pkg.set_error_message('RCV_TRX_QTY_EXCEED_AVL_QTY_PO', x_cascaded_table(n).error_message);
                                        rcv_error_pkg.set_token('RELNUM',l_po_rel_num);
                                     END IF;
                                     rcv_error_pkg.set_token('TXNQTY',x_cascaded_table(n).quantity);
                                     rcv_error_pkg.set_token('AVLQTY',l_distribution_qty - l_total_deliver_quantity);
                                     rcv_error_pkg.set_token('PONUM', l_po_num );
                                     rcv_error_pkg.set_token('LINENUM',l_po_line_num );
                                     rcv_error_pkg.set_token('SHIPNUM',l_po_line_loc_num);
                                     rcv_error_pkg.set_token('DISTNUM',l_po_dist_num);

                                     END IF; -- <Bug 9342280 : Added for CLM project>

                                     rcv_error_pkg.log_interface_error('QUANTITY',FALSE);
                                 END IF;--} x_cascaded_table(n).quantity > (l_distribution_qty - l_total_deliver_quantity)
                               --} l_parent_receive_txn_in_rt = 'Y'
                             ELSIF l_parent_receive_txn_in_rt = 'N' THEN--{ l_parent_receive_txn_in_rt = 'N'
                                 --Fetch the AVAILABLE qty from rcv_transactions_interface using l_parent_interface_txn_id
                                 IF (g_asn_debug = 'Y') THEN
                                       asn_debug.put_line('Fetching AVAILABLE qty from fetched RECEIVE interface_txn_id....');
                                 END IF;

                                 --Fetch sum of quantity of all preprocessed 'RECEIVE' txns loaded in RTI for that group_id
                                 --and po_line_location_id, to get total_receive_qty for that po_line_location_id
                                 --( by this filter interface_transaction_id < x_po_transferrec.interface_transaction_id,
                                 --  only fetching preprocessed RECEIVE txn)
                                 --x_po_transferrec.interface_transaction_id is holding 'DELIVER' txn id
                                  IF (g_asn_debug = 'Y') THEN
                                      asn_debug.put_line('Fetching sum of received qty for preprocessed RECEIVE txns....');
                                  END IF;

                                  BEGIN --{
                                      SELECT nvl(sum(quantity),0)
                                        INTO l_total_receiving_quantity
                                        FROM rcv_transactions_interface
                                       WHERE (transaction_status_code = 'PENDING'
                                               AND processing_status_code <> 'ERROR')
                                         AND transaction_type = 'RECEIVE'
                                         AND auto_transact_code <> 'DELIVER'
                                         AND group_id = x_cascaded_table(n).group_id
                                         AND po_line_location_id = x_po_transferrec.po_line_location_id
                                         AND interface_transaction_id < x_cascaded_table(n).interface_transaction_id;
                                  EXCEPTION
                                      WHEN NO_DATA_FOUND then
                                          IF (g_asn_debug = 'Y') THEN
                                               asn_debug.put_line('No data found exception while fetching sum of received qty..');
                                           END IF;
                                           l_total_receiving_quantity := 0;
                                  END;--} Begin ends

                                  IF (g_asn_debug = 'Y') THEN
                                      asn_debug.put_line('Sum of received qty for preprocessed RECEIVE txns..'||l_total_receiving_quantity);
                                      asn_debug.put_line('Fetching sum of Delivered qty for preprocessed DELIVER txns, excluding current deliver txn...');
                                  END IF;

                                  --Fetch sum of quantity of only pre processed 'DELIVER' txns in RTI for that group_id
                                  --and po_line_location_id, to get total_deliver_qty for that po_distribution_id
                                  --( by this filter interface_transaction_id < x_po_transferrec.interface_transaction_id,
                                  --  only fetching preprocessed deliver txn)

                                  BEGIN
                                      SELECT nvl(sum(quantity),0)
                                        INTO l_total_deliver_quantity
                                        FROM rcv_transactions_interface
                                       WHERE (transaction_status_code = 'PENDING'
                                                AND processing_status_code <> 'ERROR')
                                         AND transaction_type = 'DELIVER'
                                         AND group_id = x_cascaded_table(n).group_id
                                         AND po_line_location_id = x_po_transferrec.po_line_location_id
                                         AND interface_transaction_id < x_cascaded_table(n).interface_transaction_id;
                                  EXCEPTION
                                     WHEN NO_DATA_FOUND then
                                         IF (g_asn_debug = 'Y') THEN
                                            asn_debug.put_line('No data found exception while fetching sum of delivered qty..');
                                         END IF;
                                         l_total_deliver_quantity := 0;
                                  END;

                                  IF (g_asn_debug = 'Y') THEN
                                      asn_debug.put_line('Sum of delivered qty for preprocessed DELIVERED txns..'||l_total_deliver_quantity);
                                      asn_debug.put_line('Fetching receive qty for RECEIVE txn...');
                                  END IF;

                                  --Fetch the receive quantity for the 'RECEIVE'txn of the current DELIVER txn
                                  SELECT quantity
                                    INTO l_receive_quantity
                                    FROM rcv_transactions_interface
                                   WHERE interface_transaction_id = l_parent_interface_txn_id;

                                  IF (g_asn_debug = 'Y') THEN
                                      asn_debug.put_line('Receive qty for RECEIVE txn...'||l_receive_quantity);
                                      asn_debug.put_line('Fetching deliver qty for DELIVER txn...');
                                  END IF;
                                  --Fetch the deliver quantity for the current 'DELIVER'txn
                                  SELECT quantity
                                    INTO l_deliver_quantity
                                    FROM rcv_transactions_interface
                                   WHERE interface_transaction_id = x_cascaded_table(n).interface_transaction_id;

                                  IF (g_asn_debug = 'Y') THEN
                                       asn_debug.put_line('Deliver qty for DELIVER txn...'||l_deliver_quantity);
                                  END IF;

                                  IF (l_total_deliver_quantity + l_deliver_quantity) <= l_total_receiving_quantity THEN --{ (l_total_deliver_quantity + l_deliver_quantity) <= l_total_receiving_quantity
                                      --Not over delivery txn
                                      --Check whether Receive txn line_location-id and deliver_txn line_location_id are same
                                      --and validate delivery qty is within the received qty
                                      IF (g_asn_debug = 'Y') THEN
                                            asn_debug.put_line('Not Over Delivery txn...');
                                      END IF;
                                      IF l_deliver_quantity <= l_receive_quantity THEN
                                           --Allow this deliver transaction
                                           IF (g_asn_debug = 'Y') THEN
                                               asn_debug.put_line('Delivery qty <= received qty...');
                                           END IF;
                                           l_distribution_qty := l_receive_quantity;
                                      ELSE
                                          --Over delivery for that Receive txn on the spefied distribution, error out this deliver txn
                                            IF (g_asn_debug = 'Y') THEN
                                               asn_debug.put_line('deliver qty > received qty.');
                                            END IF;
                                            x_cascaded_table(n).error_status  := 'E';

                                            -- <Bug 9342280 : Added for CLM project>

                                            IF l_is_clm_po = 'Y' AND l_partial_funded_flag = 'Y' THEN

                                               IF l_po_rel_num = -1 THEN

                                                  rcv_error_pkg.set_error_message('RCV_ROI_TRX_QTY_EXCEEDS_FUNDED',x_cascaded_table(n).error_message);
                                               ELSE
                                                  rcv_error_pkg.set_error_message('RCV_ROI_TRX_QTY_EXCEED_FUNDED',x_cascaded_table(n).error_message);
                                                  rcv_error_pkg.set_token('RELNUM', l_po_rel_num);
                                               END IF;

                                               rcv_error_pkg.set_token('TXNQTY',x_cascaded_table(n).quantity);
                                               rcv_error_pkg.set_token('AVLQTY', l_receive_quantity);
                                               rcv_error_pkg.set_token('PONUM', l_po_num);
                                               rcv_error_pkg.set_token('LINENUM', l_po_line_num);
                                               rcv_error_pkg.set_token('SHIPNUM', l_po_line_loc_num);
                                               rcv_error_pkg.set_token('DISTNUM', l_po_dist_num);

                                            ELSE
                                            -- <CLM END>

                                            IF l_po_rel_num = -1 THEN--Bug 5439085
                                               rcv_error_pkg.set_error_message('RCV_TRX_QTY_EXCEEDS_AVL_QTY_PO', x_cascaded_table(n).error_message);
                                            ELSE
                                               rcv_error_pkg.set_error_message('RCV_TRX_QTY_EXCEED_AVL_QTY_PO', x_cascaded_table(n).error_message);
                                               rcv_error_pkg.set_token('RELNUM',l_po_rel_num);
                                            END IF;
                                            rcv_error_pkg.set_token('TXNQTY',x_cascaded_table(n).quantity);
                                            rcv_error_pkg.set_token('AVLQTY',l_receive_quantity);
                                            rcv_error_pkg.set_token('PONUM', l_po_num );
                                            rcv_error_pkg.set_token('LINENUM',l_po_line_num );
                                            rcv_error_pkg.set_token('SHIPNUM',l_po_line_loc_num);
                                            rcv_error_pkg.set_token('DISTNUM',l_po_dist_num);

                                            END IF; -- <Bug 9342280 : Added for CLM project>

                                            rcv_error_pkg.log_interface_error('QUANTITY', FALSE);
                                      END IF;
                                   ELSE
                                      --Over delivery for that Receive txn on the spefied distribution, error out this deliver txn
                                      IF (g_asn_debug = 'Y') THEN
                                          asn_debug.put_line('Trying to perform over Delivery txn, on the specified distribution...Error out this Deliver txn..');
                                      END IF;
                                      x_cascaded_table(n).error_status  := 'E';

                                      -- <Bug 9342280 : Added for CLM project>
                                      IF l_is_clm_po = 'Y' AND l_partial_funded_flag = 'Y' THEN

                                         IF l_po_rel_num = -1 THEN

                                            rcv_error_pkg.set_error_message('RCV_ROI_TRX_QTY_EXCEEDS_FUNDED',x_cascaded_table(n).error_message);
                                         ELSE
                                            rcv_error_pkg.set_error_message('RCV_ROI_TRX_QTY_EXCEED_FUNDED',x_cascaded_table(n).error_message);
                                            rcv_error_pkg.set_token('RELNUM', l_po_rel_num);
                                         END IF;

                                         rcv_error_pkg.set_token('TXNQTY',x_cascaded_table(n).quantity);
                                         rcv_error_pkg.set_token('AVLQTY',l_total_receiving_quantity);
                                         rcv_error_pkg.set_token('PONUM', l_po_num);
                                         rcv_error_pkg.set_token('LINENUM', l_po_line_num);
                                         rcv_error_pkg.set_token('SHIPNUM', l_po_line_loc_num);
                                         rcv_error_pkg.set_token('DISTNUM', l_po_dist_num);

                                      ELSE
                                      -- <CLM END>

                                      IF l_po_rel_num = -1 THEN--Bug 5439085
                                         rcv_error_pkg.set_error_message('RCV_TRX_QTY_EXCEEDS_AVL_QTY_PO', x_cascaded_table(n).error_message);
                                      ELSE
                                         rcv_error_pkg.set_error_message('RCV_TRX_QTY_EXCEED_AVL_QTY_PO', x_cascaded_table(n).error_message);
                                         rcv_error_pkg.set_token('RELNUM',l_po_rel_num);
                                      END IF;
                                      rcv_error_pkg.set_token('TXNQTY',x_cascaded_table(n).quantity);
                                      rcv_error_pkg.set_token('AVLQTY',l_total_receiving_quantity);
                                      rcv_error_pkg.set_token('PONUM', l_po_num );
                                      rcv_error_pkg.set_token('LINENUM',l_po_line_num );
                                      rcv_error_pkg.set_token('SHIPNUM',l_po_line_loc_num);
                                      rcv_error_pkg.set_token('DISTNUM',l_po_dist_num);

                                      END IF; -- <Bug 9342280 : Added for CLM project>

                                      rcv_error_pkg.log_interface_error('QUANTITY', FALSE);
                                   END IF;--} (l_total_deliver_quantity + l_deliver_quantity) <= l_total_receiving_quantity
                               --} l_parent_receive_txn_in_rt = 'N'
                             END IF;--} l_parent_receive_txn_in_rt = 'Y'
                          --} l_loop_exit_status = 'S'
                         END IF; --} l_loop_exit_status = 'E
                         --}l_po_deliver_rti_cursor_opened = 1
                     ELSE--{ l_po_deliver_rti_cursor_opened != 1

                       -- <Bug 9342280 : Added for CLM project>
                       IF l_is_clm_po = 'Y' AND l_partial_funded_flag = 'Y' THEN

                          select ms.quantity, ms.unit_of_measure
                            into l_distribution_qty, l_ship_unit
                            from mtl_supply ms
                           where ms.supply_source_id = x_po_transferrec.rcv_transaction_id
                             and ms.po_distribution_id = x_po_transferrec.po_distribution_id
                             and ms.supply_type_code = 'RECEIVING';

                       ELSE
                       --<END CLM>

                        -- Bug 7675516: Picking l_ship_unit from MS instead of PLL.
                        --Bug 9072630 The query on mtl_supply should be based on line_location_id as for a
                        --Multi distributed PO user can deliver qty. for any of the distribution attached to it.
                        SELECT  nvl(sum(ms.quantity),0),
                                ms.unit_of_measure
                          INTO  l_distribution_qty,
                                l_ship_unit
                          FROM  mtl_supply ms
                         WHERE  ms.supply_source_id = x_po_transferrec.rcv_transaction_id
                           AND  ms.po_line_location_id = x_po_transferrec.po_line_location_id
                           AND  ms.supply_type_code = 'RECEIVING'
                         GROUP BY ms.unit_of_measure;
                        -- End Bug 7675516
                        --Bug 9072630 The qty. returned by mtl_supply should be used of considering the already
                        --processed qty. in rti.
                        l_total_deliver_quantity:=0;
                        FOR rtirec in rti_processed(x_cascaded_table(n).group_id,
                                x_po_transferrec.po_line_location_id,
                                x_po_transferrec.rcv_transaction_id,
                                x_cascaded_table(n).interface_transaction_id) LOOP
                           l_deliver_quantity:=rtirec.quantity;
                           l_unit_of_measure:=rtirec.unit_of_measure;
                           asn_debug.put_line('Quantity in RTI Processed before uom conversion is = '||l_deliver_quantity
                                               ||' in uom = '||l_unit_of_measure);
                           if(l_ship_unit<>l_unit_of_measure) then
                              l_deliver_quantity  := convert_into_correct_qty(l_deliver_quantity,
                                       l_unit_of_measure,
                                       temp_cascaded_table(current_n).item_id,
                                       l_ship_unit
                                      );
                           asn_debug.put_line('Quantity in RTI Processed after uom conversion is = '||l_deliver_quantity
                                               ||' in uom = '||l_ship_unit);
                           end if;
                           l_total_deliver_quantity:=l_total_deliver_quantity+l_deliver_quantity;
                           asn_debug.put_line('Total Quantity in RTI is = '||l_total_deliver_quantity
                                               ||' in uom = '||l_ship_unit);
                         END LOOP;
                         asn_debug.put_line('Total quantity in RTI Processed is = '||l_total_deliver_quantity
                                               ||' in uom = '||l_ship_unit);
                         l_distribution_qty:=l_distribution_qty-l_total_deliver_quantity;

                      END IF; -- <Bug 9342280 : Added for CLM project>

                        --} l_po_deliver_rti_cursor_opened != 1
                     END IF; ----}l_po_deliver_rti_cursor_opened = 1

                     -- Bug 7675516
                     IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('l_distribution_qty = ' || l_distribution_qty);
                        asn_debug.put_line('l_ship_unit = ' || l_ship_unit);
                        asn_debug.put_line('temp_cascaded_table(current_n).item_id = ' || temp_cascaded_table(current_n).item_id);
                        asn_debug.put_line('x_po_transferrec.unit_of_meas = ' || x_po_transferrec.unit_of_meas);
                        asn_debug.put_line('temp_cascaded_table(current_n).quantity = ' || temp_cascaded_table(current_n).quantity);
                        asn_debug.put_line('temp_cascaded_table(current_n).unit_of_measure = ' || temp_cascaded_table(current_n).unit_of_measure);
                     END IF;
                     -- End Bug 7675516
                     -- } bugfix 5354379

                    /* Convert ordered_qty in po_distributions to
                     * the parent's uom */
                    l_converted_distribution_qty  := convert_into_correct_qty(l_distribution_qty,
                                                                              l_ship_unit,
                                                                              temp_cascaded_table(current_n).item_id,
                                                                              x_po_transferrec.unit_of_meas
                                                                             ); -- in parents uom
                    /* Convert transaction_uom in rti to the parent's uom */
                    l_converted_transaction_qty   := convert_into_correct_qty(temp_cascaded_table(current_n).quantity,
                                                                              temp_cascaded_table(current_n).unit_of_measure,
                                                                              temp_cascaded_table(current_n).item_id,
                                                                              x_po_transferrec.unit_of_meas
                                                                             ); -- in parents uom

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('l_total_rec_quantity  ' || l_total_rec_quantity);
                        asn_debug.put_line('l_converted_transaction_qty  ' || l_converted_transaction_qty);
                        asn_debug.put_line('l_converted_distribution_qty  ' || l_converted_distribution_qty);
                    END IF;

                    IF (    (l_converted_transaction_qty <= l_total_rec_quantity)
                        AND (l_converted_transaction_qty <= l_converted_distribution_qty)) THEN
                        x_converted_parent_trx_qty  := l_total_rec_quantity;
                    ELSE
                        x_converted_parent_trx_qty  := 0;
                    END IF;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Available qty for standard multiple distributions deliver  ' || x_converted_parent_trx_qty);
                        asn_debug.put_line('l_converted_distribution_qty  ' || l_converted_distribution_qty);
                        asn_debug.put_line('l_converted_transaction_qty  ' || l_converted_transaction_qty);
                    END IF;
                END IF; --}

                IF (    (x_converted_parent_trx_qty = 0)
                    AND (   (temp_cascaded_table(1).transaction_type <> 'DELIVER')
                         OR (    temp_cascaded_table(1).transaction_type = 'DELIVER'
                             AND l_num_of_distributions = 1))) THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('calling transfer get_available_qty ');
                    END IF;

                    rcv_quantities_s.get_available_quantity('TRANSFER',
                                                            x_po_transferrec.rcv_transaction_id,
                                                            'VENDOR',
                                                            NULL,
                                                            x_po_transferrec.rcv_transaction_id,
                                                            NULL,
                                                            x_converted_parent_trx_qty,
                                                            x_tolerable_qty,
                                                            x_po_transferrec.unit_of_meas,
                                                            /*Bug# 1548597 */
                                                            x_secondary_available_qty
                                                           );
                END IF; --}

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('qty from GET_AVAILABLE_QUANTITY for transfer is ' || x_converted_parent_trx_qty);
                END IF;

                x_remaining_qty_parent_uom  := convert_into_correct_qty(x_remaining_quantity,
                                                                        temp_cascaded_table(1).unit_of_measure,
                                                                        temp_cascaded_table(1).item_id,
                                                                        x_po_transferrec.unit_of_meas
                                                                       );

                IF (x_remaining_qty_parent_uom = 0) THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' Transfer Need an error message in the interface tables');
                    END IF;
                ELSE
                    /* Converted qty successfully and we have some quantity on which we can act */
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Converted trx qty that is available ' || x_converted_parent_trx_qty);
                        asn_debug.put_line('Remaining qty in parents uom that is available ' || x_remaining_qty_parent_uom);
                    END IF;

                    IF (x_converted_parent_trx_qty > 0) THEN --{
                        --Bug 8631613 Rounding the remaining qty to 14 decimals.
                        IF (x_converted_parent_trx_qty < Round(x_remaining_qty_parent_uom,7)) THEN --{
                            /* Total quantity available to transfer is less than the qty
                             * that the user wants to transfer. Hence we would error out but
                             * to keep the old code we will get the remaining code here and
                             * error out later.
                            */
                            x_remaining_qty_parent_uom  := x_remaining_qty_parent_uom - x_converted_parent_trx_qty;

                            IF (temp_cascaded_table(current_n).unit_of_measure <> x_po_transferrec.unit_of_meas) THEN
                                x_remaining_quantity  := convert_into_correct_qty(x_remaining_qty_parent_uom,
                                                                                  x_po_transferrec.unit_of_meas,
                                                                                  temp_cascaded_table(1).item_id,
                                                                                  temp_cascaded_table(1).unit_of_measure
                                                                                 );
                            ELSE
                                x_remaining_quantity  := x_remaining_qty_parent_uom;
                            END IF;

                            insert_into_table           := TRUE;
                        ELSE --}{
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('We are in >= Qty branch ');
                            END IF;

                            x_converted_parent_trx_qty  := x_remaining_qty_parent_uom;
                            insert_into_table           := TRUE;
                            x_remaining_qty_parent_uom  := 0;
                            x_remaining_quantity        := 0;
                        END IF; --} /* if (x_converted_parent_trx_qty < x_remaining_qty_parent_uom) then */
                    ELSE /* x_converted_parent_trx_qty >0 */ --}{
                        IF rows_fetched = x_record_count THEN                             -- { last row needs to be inserted anyway
                                                              -- so that the row can be used based on qty tolerance
                                                                                           -- checks
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('Quantity is less then 0 but last record');
                            END IF;

                            insert_into_table    := TRUE;
                            x_converted_trx_qty  := 0;
                        ELSE --}{
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('<= 0 Quantity but more records in cursor');
                            END IF;

                            x_remaining_qty_po_uom  := 0; -- we may have a diff uom on the next iteration

                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('We have to deal with remaining_qty > 0 and x_converted_trx_qty -ve');
                            END IF;

                            insert_into_table       := FALSE;
                        END IF; --}
                    END IF; /*x_converted_parent_trx_qty >0 */ --}
                END IF;

                /* Converted qty successfully and we have some quantity on which we can act */
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Transaction qty in terms of the parents uom is ' || x_converted_parent_trx_qty);
                END IF;

                IF insert_into_table THEN --{ --start
                    IF (x_first_trans) THEN --{
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('First Time ' || TO_CHAR(current_n));
                        END IF;

                        x_first_trans  := FALSE;
                    ELSE --}{
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Next Time ' || TO_CHAR(current_n));
                        END IF;

                        temp_cascaded_table(current_n)  := temp_cascaded_table(current_n - 1);
                    END IF; --}

                    temp_cascaded_table(current_n).po_header_id             := x_po_transferrec.po_head_id;
                    temp_cascaded_table(current_n).po_line_id               := x_po_transferrec.line_id;
                    temp_cascaded_table(current_n).po_line_location_id      := x_po_transferrec.po_line_location_id;
                    temp_cascaded_table(current_n).primary_unit_of_measure  := x_po_transferrec.primary_unit_of_measure;

                    IF (temp_cascaded_table(current_n).unit_of_measure <> x_po_transferrec.unit_of_meas) THEN
                        --Bug 8631613 For some conversions residual qty. is causing issues while doing put away.
                        l_temp_qty := convert_into_correct_qty(x_converted_parent_trx_qty,
                                                                      x_po_transferrec.unit_of_meas,
                                                                      temp_cascaded_table(current_n).item_id,
                                                                      temp_cascaded_table(current_n).unit_of_measure
                                                                      );
                        IF ( Round(l_temp_qty,7) <> temp_cascaded_table(current_n).quantity  ) THEN
                           temp_cascaded_table(current_n).quantity := l_temp_qty;
                        END IF;
                        /*temp_cascaded_table(current_n).quantity  := convert_into_correct_qty(x_converted_parent_trx_qty,
                                                                                             x_po_transferrec.unit_of_meas,
                                                                                             temp_cascaded_table(current_n).item_id,
                                                                                             temp_cascaded_table(current_n).unit_of_measure
                                                                                            ); -- in asn uom*/
                        --Bug 8631613

                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Transaction qty in terms of the transaction uom is ' || temp_cascaded_table(current_n).quantity);
                        END IF;
                    ELSE
                        temp_cascaded_table(current_n).quantity  := x_converted_parent_trx_qty;
                    END IF;

                    IF (temp_cascaded_table(current_n).primary_unit_of_measure <> x_po_transferrec.unit_of_meas) THEN
		                  --Bug 8631613
                        l_pri_temp_qty := convert_into_correct_qty(x_converted_parent_trx_qty,
                                                                          x_po_transferrec.unit_of_meas,
                                                                          temp_cascaded_table(current_n).item_id,
                                                                          temp_cascaded_table(current_n).primary_unit_of_measure
                                                                         );
                        IF (Round(l_pri_temp_qty,7) <> NVL(temp_cascaded_table(current_n).primary_quantity,-1)) THEN
                           temp_cascaded_table(current_n).primary_quantity := l_pri_temp_qty;
                        END IF;
                        /*
                        temp_cascaded_table(current_n).primary_quantity  := convert_into_correct_qty(x_converted_parent_trx_qty,
                                                                                                     x_po_transferrec.unit_of_meas,
                                                                                                     temp_cascaded_table(current_n).item_id,
                                                                                                     temp_cascaded_table(current_n).primary_unit_of_measure
                                                                                                    ); */
                        --Bug 8631613                                                                       );
                    ELSE
                        temp_cascaded_table(current_n).primary_quantity  := x_converted_parent_trx_qty;
                    END IF;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Transaction qty in terms of the primary uom is ' || temp_cascaded_table(current_n).primary_quantity);
                    END IF;

                    IF (NVL(x_cascaded_table(n).transaction_type, 'RECEIVE') = 'DELIVER') THEN --{
                        temp_cascaded_table(current_n).po_distribution_id          := x_po_transferrec.po_distribution_id;
                        temp_cascaded_table(current_n).charge_account_id           := x_po_transferrec.code_combination_id;
                        temp_cascaded_table(current_n).req_distribution_id         := x_po_transferrec.req_distribution_id;
                        --          temp_cascaded_table(current_n).currency_conversion_date  := x_po_transferrec.rate_date;
                         --         temp_cascaded_table(current_n).currency_conversion_rate  := x_po_transferrec.rate;
                        temp_cascaded_table(current_n).destination_type_code       := x_po_transferrec.destination_type_code;
                        temp_cascaded_table(current_n).destination_context         := x_po_transferrec.destination_type_code;

                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line(' po_dist ' || temp_cascaded_table(current_n).po_distribution_id);
                        END IF;

                        IF (NVL(temp_cascaded_table(current_n).deliver_to_location_id, 0) = 0) THEN
                            temp_cascaded_table(current_n).deliver_to_location_id  := x_po_transferrec.deliver_to_location_id;
                        END IF;

                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line(' deliver_to_person_id ' || temp_cascaded_table(current_n).deliver_to_person_id);
                        END IF;

                        /* Bug 2392074 - If the deliver_to_person mentioned in the po_distributions is
                           invalid or inactive at the time of Receipt we need to clear the deliver to person,
                           as this is an optional field. */
                        IF (NVL(temp_cascaded_table(current_n).deliver_to_person_id, 0) = 0) THEN --{
                            temp_cascaded_table(current_n).deliver_to_person_id  := x_po_transferrec.deliver_to_person_id;

                            IF (temp_cascaded_table(current_n).deliver_to_person_id IS NOT NULL) THEN --{
                                BEGIN
                                    SELECT NVL(MAX(hre.full_name), 'notfound')
                                    INTO   x_full_name
                                    FROM   hr_employees_current_v hre
                                    WHERE  (   hre.inactive_date IS NULL
                                            OR hre.inactive_date > SYSDATE)
                                    AND    hre.employee_id = temp_cascaded_table(current_n).deliver_to_person_id;

                                    IF (x_full_name = 'notfound') THEN
                                        temp_cascaded_table(current_n).deliver_to_person_id  := NULL;
                                    END IF;
                                EXCEPTION
                                    WHEN NO_DATA_FOUND THEN
                                        temp_cascaded_table(current_n).deliver_to_person_id  := NULL;

                                        IF (g_asn_debug = 'Y') THEN
                                            asn_debug.put_line('The deliver to person entered in  PO is currently inactive');
                                            asn_debug.put_line(' So it is cleared off');
                                        END IF;
                                    WHEN OTHERS THEN
                                        temp_cascaded_table(current_n).deliver_to_person_id  := NULL;

                                        IF (g_asn_debug = 'Y') THEN
                                            asn_debug.put_line('Some exception has occured');
                                            asn_debug.put_line('This exception is due to the PO deliver to person');
                                            asn_debug.put_line('The deliver to person is optional');
                                            asn_debug.put_line('So cleared off the deliver to person');
                                        END IF;
                                END;
                            END IF; --}
                        END IF; --}

                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line(' subinventory ' || temp_cascaded_table(current_n).subinventory);
                        END IF;

                        IF (temp_cascaded_table(current_n).subinventory IS NULL) THEN
                            temp_cascaded_table(current_n).subinventory  := x_po_transferrec.destination_subinventory;
                        END IF;

			 /* Bug:6825954
 	                    During Crossdock scenario, WMS team now stamps wip_entity_id of the cross docked wip job,
 	                    for the deliver transaction of PO which doesn't have wip information. They are stamping
 	                    the wip_entity_id in order to make use of that wip_entity_id for label printing for
 	                    Putaway txn. if the transaction comes from mobile and rti.wip_entity_id is not null
 	                    and the pod.wip_entity_id is null, then don't override the rti.wip_entity_id value with
 	                    the defaulting logic value pod.wip_entity_id.
 	                    This fix is required only in this place, as CROSS DOCK happens at the time of deliver txn.
 	                  */

			  IF (g_asn_debug = 'Y') THEN
 	                      asn_debug.put_line('before defaulting...wip_entity_id ' || temp_cascaded_table(current_n).wip_entity_id);
 	                  END IF;

 	                  if ( temp_cascaded_table(current_n).wip_entity_id is not null
 	                       and nvl(temp_cascaded_table(current_n).mobile_txn,'N') = 'Y'
 	                       and x_po_transferrec.wip_entity_id is null ) then
 	                     if (g_asn_debug = 'Y') then
 	                        asn_debug.put_line('skiping the defaulting of wip_entity_id as per wms team request');
 	                     end if;
 	                  else
 	                     if (g_asn_debug = 'Y') then
 	                        asn_debug.put_line('defaulting the wip_entity_id from pod');
 	                     end if;
 	                     temp_cascaded_table(current_n).wip_entity_id               := x_po_transferrec.wip_entity_id;
 	                  end if; --bug 6825954

                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('after defaulting...wip_entity_id ' || temp_cascaded_table(current_n).wip_entity_id);
                        END IF;

                        temp_cascaded_table(current_n).wip_operation_seq_num       := x_po_transferrec.wip_operation_seq_num;
                        temp_cascaded_table(current_n).wip_resource_seq_num        := x_po_transferrec.wip_resource_seq_num;
                        temp_cascaded_table(current_n).wip_repetitive_schedule_id  := x_po_transferrec.wip_repetitive_schedule_id;
                        temp_cascaded_table(current_n).wip_line_id                 := x_po_transferrec.wip_line_id;
                        temp_cascaded_table(current_n).bom_resource_id             := x_po_transferrec.bom_resource_id;

                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line(' ussgl_transaction_code ' || temp_cascaded_table(current_n).ussgl_transaction_code);
                        END IF;

                        -- bug 1361786
                        IF (temp_cascaded_table(current_n).ussgl_transaction_code IS NULL) THEN
                            temp_cascaded_table(current_n).ussgl_transaction_code  := x_po_transferrec.ussgl_transaction_code;
                        END IF;
                    END IF;  --}

                    current_n                                               := current_n + 1;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Increment pointer by 1 ' || TO_CHAR(current_n));
                    END IF;
                END IF; --}
      /* Get the available qty in PRIMARY UOM */
/*
      PO_UOM_S.UOM_CONVERT (x_converted_trx_qty,
                            l_uom,
                            x_item_id,
                            x_primary_uom,
                            l_primary_available_qty );
*/
            END LOOP; --}
        ELSE   --} {
             -- error_status and error_message are set after validate_quantity_shipped
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('No parent_transaction_id or parent_interface_transaction_id ');
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Status = ' || x_cascaded_table(n).error_status);
            END IF;

            IF x_cascaded_table(n).error_status IN('S', 'W', 'F') THEN --{
                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;

                IF (x_cascaded_table(n).error_message IS NULL) THEN
                    rcv_error_pkg.set_error_message('RCV_NO_PARENT_TRANSACTION', x_cascaded_table(n).error_message);
                END IF;

                rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);
            END IF; --}
        END IF; -- } of (asn quantity_shipped was valid)

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('before closing cursors current_n is ' || temp_cascaded_table.COUNT);
        END IF;

        IF po_transfer%ISOPEN THEN
            CLOSE po_transfer;
        END IF;

        IF po_transfer_rti%ISOPEN THEN
            CLOSE po_transfer_rti;
        END IF;

        IF po_single_deliver%ISOPEN THEN
            CLOSE po_single_deliver;
        END IF;

        IF po_single_deliver_rti%ISOPEN THEN
            CLOSE po_single_deliver_rti;
        END IF;

        IF po_deliver%ISOPEN THEN
            CLOSE po_deliver;
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Exit explode_line_quantity');
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Exception in derive_trans_del_quantity ');
            END IF;

            IF po_transfer%ISOPEN THEN
                CLOSE po_transfer;
            END IF;

            IF po_transfer_rti%ISOPEN THEN
                CLOSE po_transfer_rti;
            END IF;

            IF po_single_deliver%ISOPEN THEN
                CLOSE po_single_deliver;
            END IF;

            IF po_single_deliver_rti%ISOPEN THEN
                CLOSE po_single_deliver_rti;
            END IF;

            IF po_deliver%ISOPEN THEN
                CLOSE po_deliver;
            END IF;

            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('derive_trans_del_line_quantity', x_progress);
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_error('TRANSACTIONS_INTERFACE_ID', FALSE);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line(TO_CHAR(n));
                asn_debug.put_line(SQLERRM);
                asn_debug.put_line('error ' || x_progress);
            END IF;
    END derive_trans_del_line_quantity;

    /*
     * Default information from parent transaction for transfer and deliver
     * This procedure was originally written for vendor source transactions
     * but since the code is the same for RMAs, the cursor has been expanded
     * to include RMA information as well and the procedure reused for RMAs.
     */
    PROCEDURE default_vendor_trans_del(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        p_trx_record             rcv_roi_header_common.common_default_record_type;

        CURSOR po_transfer(
            v_parent_trx_id NUMBER
        ) IS
            SELECT rt.po_revision_num,
                   rsl.item_description,
                   rsup.po_release_id,
                   rt.location_id loc_id,
                   rt.organization_id,
                   rt.inspection_status_code,
                   rt.routing_header_id,
                   rt.currency_code,
                   rt.currency_conversion_rate,
                   rt.currency_conversion_type,
                   rt.currency_conversion_date,
                   rt.location_id,
                   rsup.shipment_header_id,
                   rsup.shipment_line_id,
                   rsl.category_id,
                   rt.vendor_id,
                   rt.vendor_site_id,
                   rt.po_unit_price,
                   rt.movement_id,
                   rt.deliver_to_person_id,
                   rt.deliver_to_location_id,
                   rt.subinventory,
                   rt.transfer_lpn_id,
                   rt.oe_order_header_id,
                   rt.oe_order_line_id,
                   rt.customer_id,
                   rt.customer_site_id,
                   rt.source_document_code
            FROM   rcv_transactions rt,
                   rcv_shipment_lines rsl,
                   rcv_supply rsup
            WHERE  rt.transaction_id = v_parent_trx_id
            AND    rt.transaction_id = rsup.rcv_transaction_id
            AND    rsup.supply_type_code = 'RECEIVING'
            AND    rsl.shipment_line_id = rsup.shipment_line_id
            AND    rt.transaction_id = rsup.rcv_transaction_id
            AND    rt.transaction_type <> 'UNORDERED';

        CURSOR po_transfer_rti(
            v_parent_inter_trx_id NUMBER
        ) IS
            SELECT rti.po_revision_num,
                   rti.item_description,
                   rti.po_release_id,
                   rti.location_id loc_id,
                   rti.to_organization_id organization_id,
                   rti.inspection_status_code,
                   rti.routing_header_id,
                   rti.currency_code,
                   rti.currency_conversion_rate,
                   rti.currency_conversion_type,
                   rti.currency_conversion_date,
                   rti.location_id,
                   rti.shipment_header_id,
                   rti.shipment_line_id,
                   rti.category_id,
                   rti.vendor_id,
                   rti.vendor_site_id,
                   rti.po_unit_price,
                   rti.movement_id,
                   rti.deliver_to_person_id,
                   rti.deliver_to_location_id,
                   rti.subinventory,
                   rti.transfer_lpn_id,
                   rti.oe_order_header_id,
                   rti.oe_order_line_id,
                   rti.customer_id,
                   rti.customer_site_id,
                   rti.source_document_code
            FROM   rcv_transactions_interface rti
            WHERE  interface_transaction_id = v_parent_inter_trx_id;

        default_po_transfer_info po_transfer%ROWTYPE;
        x_progress               VARCHAR2(3);
        x_locator_control        NUMBER;
        x_default_subinventory   VARCHAR2(10);
        x_default_locator_id     NUMBER;
        x_success                BOOLEAN;
        x_tax_name               VARCHAR2(50); -- Bug 6331613
        x_vendor_site_id         NUMBER;
        x_vendor_site_code       VARCHAR2(20);
/*  default variables */
        l_project_id             NUMBER;
        l_task_id                NUMBER;
        l_locator_id             NUMBER;
        temp_index               NUMBER;
/* pjiang debug */
        err_num                  NUMBER;
        err_msg                  VARCHAR2(100);
    BEGIN
        -- default the fields that are covered in the common defaulting logic
        p_trx_record.destination_type_code           := x_cascaded_table(n).destination_type_code;
        p_trx_record.transaction_type                := x_cascaded_table(n).transaction_type;
        p_trx_record.processing_mode_code            := x_cascaded_table(n).processing_mode_code;
        p_trx_record.processing_status_code          := x_cascaded_table(n).processing_status_code;
        p_trx_record.transaction_status_code         := x_cascaded_table(n).transaction_status_code;
        p_trx_record.auto_transact_code              := x_cascaded_table(n).auto_transact_code;
        rcv_roi_header_common.commondefaultcode(p_trx_record);
        x_cascaded_table(n).destination_type_code    := p_trx_record.destination_type_code;
        x_cascaded_table(n).transaction_type         := p_trx_record.transaction_type;
        x_cascaded_table(n).processing_mode_code     := p_trx_record.processing_mode_code;
        x_cascaded_table(n).processing_status_code   := p_trx_record.processing_status_code;
        x_cascaded_table(n).transaction_status_code  := p_trx_record.transaction_status_code;
        x_cascaded_table(n).auto_transact_code       := p_trx_record.auto_transact_code;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Enter Default');
        END IF;

        IF x_cascaded_table(n).source_document_code IS NULL THEN
            IF x_cascaded_table(n).receipt_source_code = 'CUSTOMER' THEN
                x_cascaded_table(n).source_document_code  := 'RMA';
            ELSE
                x_cascaded_table(n).source_document_code  := 'PO';
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting SOURCE_DOCUMENT_CODE ' || x_cascaded_table(n).source_document_code);
            END IF;
        END IF;

        IF (x_cascaded_table(n).derive = 'Y') THEN --{
            IF (x_cascaded_table(n).derive_index <> 0) THEN --{
                NULL;
                /* Get the values from pl/sql table */
                temp_index                                    := x_cascaded_table(n).derive_index;
                x_cascaded_table(n).po_revision_num           := x_cascaded_table(temp_index).po_revision_num;
                x_cascaded_table(n).item_description          := x_cascaded_table(temp_index).item_description;
                x_cascaded_table(n).po_release_id             := x_cascaded_table(temp_index).po_release_id;
                x_cascaded_table(n).to_organization_id        := x_cascaded_table(temp_index).to_organization_id;
                x_cascaded_table(n).inspection_status_code    := x_cascaded_table(temp_index).inspection_status_code;
                x_cascaded_table(n).routing_header_id         := x_cascaded_table(temp_index).routing_header_id;
                x_cascaded_table(n).currency_code             := x_cascaded_table(temp_index).currency_code;
                x_cascaded_table(n).currency_conversion_rate  := x_cascaded_table(temp_index).currency_conversion_rate;
                x_cascaded_table(n).currency_conversion_type  := x_cascaded_table(temp_index).currency_conversion_type;
                x_cascaded_table(n).currency_conversion_date  := x_cascaded_table(temp_index).currency_conversion_date;
                x_cascaded_table(n).shipment_header_id        := x_cascaded_table(temp_index).shipment_header_id;
                x_cascaded_table(n).shipment_line_id          := x_cascaded_table(temp_index).shipment_line_id;
                x_cascaded_table(n).category_id               := x_cascaded_table(temp_index).category_id;
                x_cascaded_table(n).vendor_id                 := x_cascaded_table(temp_index).vendor_id;
                x_cascaded_table(n).vendor_site_id            := x_cascaded_table(temp_index).vendor_site_id;
                x_cascaded_table(n).po_unit_price             := x_cascaded_table(temp_index).po_unit_price;

                  -- default the parent's to_lpn into the child's from_lpn
                /* Bug 3444284.
                 * We dont need to default lpn_ids. WMS will take care of
                 * populating these columns. So this case of giving a warning
                 * will not arise as it will be defaulted by them
                */
                IF (x_cascaded_table(n).location_id IS NULL) THEN
                    x_cascaded_table(n).location_id  := x_cascaded_table(temp_index).location_id;
                END IF;

                IF (x_cascaded_table(n).transaction_type = 'DELIVER') THEN --{
                    IF (NVL(x_cascaded_table(n).deliver_to_person_id, 0) = 0) THEN
                        x_cascaded_table(n).deliver_to_person_id  := x_cascaded_table(temp_index).deliver_to_person_id;
                    END IF;

                    IF (NVL(x_cascaded_table(n).deliver_to_location_id, 0) = 0) THEN
                        x_cascaded_table(n).deliver_to_location_id  := x_cascaded_table(temp_index).deliver_to_location_id;
                    END IF;

                    IF (x_cascaded_table(n).subinventory IS NULL) THEN
                        x_cascaded_table(n).subinventory  := x_cascaded_table(temp_index).subinventory;
                    END IF;
                END IF; --}
            ELSE --} {
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('open cursor Default RTI');
                END IF;

                OPEN po_transfer_rti(x_cascaded_table(n).parent_interface_txn_id);
            END IF; --}
        ELSE -- } {
            OPEN po_transfer(x_cascaded_table(n).parent_transaction_id);
        END IF; --}

        IF (po_transfer%ISOPEN) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('fetch cursor Default');
            END IF;

            FETCH po_transfer INTO default_po_transfer_info;
        ELSIF(po_transfer_rti%ISOPEN) THEN
            FETCH po_transfer_rti INTO default_po_transfer_info;
        END IF;

        IF (   (    po_transfer%ISOPEN
                AND po_transfer%FOUND)
            OR (    po_transfer_rti%ISOPEN
                AND po_transfer_rti%FOUND)) THEN --{
            IF (g_asn_debug = 'Y') THEN --{
                asn_debug.put_line('Defaulting Transfer po_revision_num' || default_po_transfer_info.po_revision_num);
                asn_debug.put_line('Defaulting Transfer item_description' || default_po_transfer_info.item_description);
                asn_debug.put_line('Defaulting Transfer po_release_id' || default_po_transfer_info.po_release_id);
                asn_debug.put_line('Defaulting Transfer location_id' || default_po_transfer_info.loc_id);
                asn_debug.put_line('Defaulting Transfer organization_id' || default_po_transfer_info.organization_id);
                asn_debug.put_line('Defaulting Transfer routing_header_id' || default_po_transfer_info.routing_header_id);
                asn_debug.put_line('Defaulting Transfer currency_code' || default_po_transfer_info.currency_code);
                asn_debug.put_line('Defaulting Transfer currency_conversion_rate' || default_po_transfer_info.currency_conversion_rate);
                asn_debug.put_line('Defaulting Transfer currency_conversion_type' || default_po_transfer_info.currency_conversion_type);
                asn_debug.put_line('Defaulting Transfer currency_conversion_date' || default_po_transfer_info.currency_conversion_date);
                asn_debug.put_line('Defaulting Transfer shipment_header_id' || default_po_transfer_info.shipment_header_id);
                asn_debug.put_line('Defaulting Transfer shipment_line_id' || default_po_transfer_info.shipment_line_id);
                asn_debug.put_line('Defaulting Transfer category_id' || default_po_transfer_info.category_id);
                asn_debug.put_line('Defaulting Transfer vendor_id' || default_po_transfer_info.vendor_id);
                asn_debug.put_line('Defaulting Transfer vendor_site_id' || default_po_transfer_info.vendor_site_id);
                asn_debug.put_line('Defaulting Transfer DELIVER_TO_PERSON_ID' || default_po_transfer_info.deliver_to_person_id);
                asn_debug.put_line('Defaulting Transfer DELIVER_TO_LOCATION_ID' || default_po_transfer_info.deliver_to_location_id);
                asn_debug.put_line('Defaulting Transfer SUBINVENTORY' || default_po_transfer_info.subinventory);
                asn_debug.put_line('Defaulting Transfer CUSTOMER_ID' || default_po_transfer_info.customer_id);
                asn_debug.put_line('Defaulting Transfer CUSTOMER_SITE_ID' || default_po_transfer_info.customer_site_id);
            END IF; --}

            IF     x_cascaded_table(n).oe_order_header_id IS NULL
               AND x_cascaded_table(n).source_document_code = 'RMA' THEN
                x_cascaded_table(n).oe_order_header_id  := default_po_transfer_info.oe_order_header_id;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Defaulting Transfer oe_order_header_id ' || x_cascaded_table(n).oe_order_header_id);
                END IF;
            END IF;

            IF     x_cascaded_table(n).oe_order_line_id IS NULL
               AND x_cascaded_table(n).source_document_code = 'RMA' THEN
                x_cascaded_table(n).oe_order_line_id  := default_po_transfer_info.oe_order_line_id;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Defaulting Transfer oe_order_line_id ' || x_cascaded_table(n).oe_order_line_id);
                END IF;
            END IF;

            x_cascaded_table(n).po_revision_num           := default_po_transfer_info.po_revision_num;
            x_cascaded_table(n).item_description          := default_po_transfer_info.item_description;
            x_cascaded_table(n).po_release_id             := default_po_transfer_info.po_release_id;
            x_cascaded_table(n).to_organization_id        := default_po_transfer_info.organization_id;
            x_cascaded_table(n).inspection_status_code    := default_po_transfer_info.inspection_status_code;
            x_cascaded_table(n).routing_header_id         := default_po_transfer_info.routing_header_id;
            x_cascaded_table(n).currency_code             := default_po_transfer_info.currency_code;
            x_cascaded_table(n).currency_conversion_rate  := default_po_transfer_info.currency_conversion_rate;
            x_cascaded_table(n).currency_conversion_type  := default_po_transfer_info.currency_conversion_type;
            x_cascaded_table(n).currency_conversion_date  := default_po_transfer_info.currency_conversion_date;
            x_cascaded_table(n).shipment_header_id        := default_po_transfer_info.shipment_header_id;
            x_cascaded_table(n).shipment_line_id          := default_po_transfer_info.shipment_line_id;
            x_cascaded_table(n).category_id               := default_po_transfer_info.category_id;
            x_cascaded_table(n).vendor_id                 := default_po_transfer_info.vendor_id;
            x_cascaded_table(n).vendor_site_id            := default_po_transfer_info.vendor_site_id;

            /* We used to get the unit_price from the cursor where it picks
                  * up from the parent. But since PO unit_price can be change
                  * retroactively, we need to pick up the unit_price from PO
                  * directly. Since we would have derived line_location_id
                  * and po_line_id at this point, use the values here. Since
             * we come here for defaulting RMA also, we need to do this
             * only when receipt_source_code is VENDOR.
                  * x_cascaded_table(n).po_unit_price :=
                                             DEFAULT_Po_transfer_info.po_unit_price;
                 */
            IF (x_cascaded_table(n).receipt_source_code = 'VENDOR') THEN --{
                SELECT NVL(pll.price_override, pl.unit_price)
                INTO   x_cascaded_table(n).po_unit_price
                FROM   po_line_locations pll,
                       po_lines pl
                WHERE  pll.line_location_id = x_cascaded_table(n).po_line_location_id
                AND    pl.po_line_id = x_cascaded_table(n).po_line_id
                AND    pl.po_line_id = pll.po_line_id;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Defaulting Transfer po_unit_price' || x_cascaded_table(n).po_unit_price);
                END IF;
            END IF; --}

            x_cascaded_table(n).customer_id               := default_po_transfer_info.customer_id;
            x_cascaded_table(n).customer_site_id          := default_po_transfer_info.customer_site_id;

                  -- default the parent's to_lpn into the child's from_lpn
            /* Bug 3444284.
             * We dont need to default lpn_ids. WMS will take care of
             * populating these columns. So this case of giving a warning
             * will not arise as it will be defaulted by them

        */
            IF (x_cascaded_table(n).location_id IS NULL) THEN
                x_cascaded_table(n).location_id  := default_po_transfer_info.loc_id;
            END IF;

            IF (x_cascaded_table(n).transaction_type = 'DELIVER') THEN --{
                IF (NVL(x_cascaded_table(n).deliver_to_person_id, 0) = 0) THEN
                    x_cascaded_table(n).deliver_to_person_id  := default_po_transfer_info.deliver_to_person_id;
                END IF;

                IF (NVL(x_cascaded_table(n).deliver_to_location_id, 0) = 0) THEN
                    x_cascaded_table(n).deliver_to_location_id  := default_po_transfer_info.deliver_to_location_id;
                END IF;

                IF (x_cascaded_table(n).subinventory IS NULL) THEN
                    x_cascaded_table(n).subinventory  := default_po_transfer_info.subinventory;
                END IF;
            END IF; --}
        END IF; -- if po_transfer%found is true }

        /* The following code will be common for all the transactions not just for transfer to
         * get the use_mtl_lot and use_mtl_serial.
        */
        /*
        BEGIN Comment: Bug: 4735484
        IF x_cascaded_table(n).item_id IS NOT NULL THEN
            SELECT NVL(x_cascaded_table(n).use_mtl_lot, lot_control_code),
                   NVL(x_cascaded_table(n).use_mtl_serial, serial_number_control_code)
            INTO   x_cascaded_table(n).use_mtl_lot,
                   x_cascaded_table(n).use_mtl_serial
            FROM   mtl_system_items
            WHERE  mtl_system_items.inventory_item_id = NVL(x_cascaded_table(n).item_id, 0)
            AND    mtl_system_items.organization_id = x_cascaded_table(n).to_organization_id;
        END IF;
        END Comment: Bug: 4735484
        */
        x_cascaded_table(n).interface_source_code    := NVL(x_cascaded_table(n).interface_source_code,'RCV'); -- Bug 10127806;

        IF (x_cascaded_table(n).transaction_type = 'ACCEPT') THEN
            x_cascaded_table(n).inspection_status_code  := 'ACCEPTED';
            x_cascaded_table(n).destination_context     := 'RECEIVING';
        ELSIF(x_cascaded_table(n).transaction_type = 'REJECT') THEN
            x_cascaded_table(n).inspection_status_code  := 'REJECTED';
            x_cascaded_table(n).destination_context     := 'RECEIVING';
        END IF;

           /* Only for deliver, to_subinventory is  a required field. If the user
            * has not provided then we will not default for the other transactions.
            * from_subinventory will be the to_sub of the parent .
           */
        ---WMS Changes
        default_from_subloc_info(x_cascaded_table, n);

        /* Bug 3557343.
         * We need to default to_sub/to_loc for other transactions also. We
         * used to do it only for deliver transactions. Now do it for
         * ACCEPT/REJECT transactions also.
        */
        IF (x_cascaded_table(n).transaction_type IN('DELIVER', 'ACCEPT', 'REJECT')) THEN
            default_to_subloc_info(x_cascaded_table, n);
        END IF;

        /*
        ** Make sure to set the location_id properly
        */
        IF (x_cascaded_table(n).transaction_type = 'DELIVER') THEN
            x_cascaded_table(n).location_id  := x_cascaded_table(n).deliver_to_location_id;
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Set Location_id  = ' || TO_CHAR(x_cascaded_table(n).location_id));
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Exit default_vendor_trans_del');
        END IF;

        IF po_transfer%ISOPEN THEN
            CLOSE po_transfer;
        END IF;

        IF po_transfer_rti%ISOPEN THEN
            CLOSE po_transfer_rti;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('default_vendor_trans_del', '000');
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_error('TRANSACTIONS_INTERFACE_ID', FALSE);
    END default_vendor_trans_del;


    PROCEDURE derive_correction_line(
        x_cascaded_table    IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                   IN OUT NOCOPY BINARY_INTEGER,
        temp_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        x_header_record     IN            rcv_roi_preprocessor.header_rec_type
    ) IS
        l_po_header_id po_headers_all.po_header_id%type;
        l_return_status VARCHAR2(1) :='S';
        l_complex_flag   varchar2(1);
        l_asn_type rcv_shipment_headers.asn_type%TYPE; --9534775

    BEGIN
        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('enter derive_correction_line ');
            asn_debug.put_line('quantity ' || x_cascaded_table(n).quantity);
        END IF;

        /* Derive the to_org_id */
        derive_ship_to_org_info(x_cascaded_table,
                                n,
                                x_header_record
                               );

        IF (x_cascaded_table(n).unit_of_measure IS NOT NULL) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('X_progress ' || x_progress);
            END IF;

            SELECT muom.uom_code
            INTO   x_cascaded_table(n).uom_code
            FROM   mtl_units_of_measure muom
            WHERE  muom.unit_of_measure = x_cascaded_table(n).unit_of_measure;
        ELSE
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('uom_code not derived as unit_of_measure is null');
            END IF;
        END IF;

        x_progress                              := '091';
        derive_reason_info(x_cascaded_table, n);
        /* Auto_transact_code is null for all these transaction types */
        x_cascaded_table(n).auto_transact_code  := NULL;

        -- Determine whether this is a services line type
        IF (x_cascaded_table(n).parent_transaction_id IS NOT NULL) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('parent_transaction_id ' || x_cascaded_table(n).parent_transaction_id);
            END IF;

            SELECT po_line_id,po_header_id
            INTO   x_cascaded_table(n).po_line_id,l_po_header_id
            FROM   rcv_transactions
            WHERE  transaction_id = x_cascaded_table(n).parent_transaction_id;
        ELSIF(x_cascaded_table(n).parent_interface_txn_id IS NOT NULL) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('parent_interface_txn_id ' || x_cascaded_table(n).parent_interface_txn_id);
            END IF;

            SELECT po_line_id,po_header_id
            INTO   x_cascaded_table(n).po_line_id,l_po_header_id
            FROM   rcv_transactions_interface
            WHERE  interface_transaction_id = x_cascaded_table(n).parent_interface_txn_id;
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('po_line_id ' || x_cascaded_table(n).po_line_id);
            asn_debug.put_line('l_po_header_id ' || l_po_header_id);
        END IF;

	/* R12 Complex work.
	 * We do not support any other receiving transactions other
	 * than direct receipt. Error out if it is complex work PO.
	*/

	PO_COMPLEX_WORK_GRP.is_complex_work_po(
		 1.0,
		 l_po_header_id,
		 l_return_status,
		 l_complex_flag,
         x_cascaded_table(n).po_line_id,              /* Complex PO Receiving ER */
		 NULL,                                        /* Complex PO Receiving ER */
		 NULL,                                        /* Complex PO Receiving ER */
         x_cascaded_table(n).po_line_location_id);    /* Complex PO Receiving ER */


	IF (l_return_status IS NOT NULL AND
		  l_return_status = FND_API.g_ret_sts_success) THEN
		IF( g_asn_debug = 'Y' ) THEN
		    asn_debug.put_line('l_return_status ' || l_return_status);
		    asn_debug.put_line('l_po_header_id ' || l_po_header_id);
		END IF;
	ELSE
		IF( g_asn_debug = 'Y') THEN
		    asn_debug.put_line('l_return_status ' || l_return_status);
		END IF;
	END IF;

   /*Bug 9534775  need support wc -ve correction */
	IF (l_complex_flag = 'Y') THEN
	  select asn_type
    into l_asn_type
    from rcv_shipment_headers
    where shipment_header_id = x_cascaded_table(n).shipment_header_id;

    IF( g_asn_debug = 'Y') THEN
        asn_debug.put_line('enter l_complex_flag = Y ');
		    asn_debug.put_line('asn_type ' || l_asn_type);
        asn_debug.put_line('quantity ' || x_cascaded_table(n).quantity);
        asn_debug.put_line('amount ' || x_cascaded_table(n).amount);
		END IF;
    IF (l_asn_type ='WC'  AND (nvl(x_cascaded_table(n).quantity,0) >0 OR nvl(x_cascaded_table(n).amount,0) > 0) ) THEN
		   asn_debug.put_line('We do not support positive transaction type of ' || x_cascaded_table(n).transaction_type || ' for complex work POs');
		   rcv_error_pkg.set_error_message('RCV_INVALID_TRANSACTION_TYPE');
		   rcv_error_pkg.log_interface_error('TRANSACTION_TYPE');
		END IF;
	End if;

        IF x_cascaded_table(n).po_line_id IS NOT NULL THEN
            SELECT NVL(order_type_lookup_code, 'QUANTITY'),
                   NVL(purchase_basis, 'GOODS'),
                   NVL(matching_basis, 'QUANTITY')
            INTO   x_cascaded_table(n).value_basis,
                   x_cascaded_table(n).purchase_basis,
                   x_cascaded_table(n).matching_basis
            FROM   po_lines
            WHERE  po_line_id = x_cascaded_table(n).po_line_id;
        ELSE
            -- we require line info for receiving against services lines
            x_cascaded_table(n).matching_basis  := 'QUANTITY';
            x_cascaded_table(n).purchase_basis  := 'GOODS';
        END IF;

       /**Bug 9534775  wc -ve correct , fetch value_basis/matching_basis from po_line_locations **/
        IF x_cascaded_table(n).po_line_location_id IS NOT NULL
           AND l_complex_flag = 'Y'  THEN

           SELECT NVL(value_basis, 'QUANTITY'),
                   NVL(matching_basis, 'QUANTITY')
            INTO   x_cascaded_table(n).value_basis,
                   x_cascaded_table(n).matching_basis
            FROM   po_line_locations
            WHERE  line_location_id = x_cascaded_table(n).po_line_location_id;

        END IF;
       /**End Bug 9534775**/

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('matching_basis ' || x_cascaded_table(n).matching_basis);
        END IF;

        IF (x_cascaded_table(n).matching_basis = 'AMOUNT') THEN
            derive_correction_line_amt(x_cascaded_table,
                                       n,
                                       temp_cascaded_table
                                      );
        ELSE
            derive_correction_line_qty(x_cascaded_table,
                                       n,
                                       temp_cascaded_table
                                      );
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('exit derive_correction_line');
            asn_debug.put_line('quantity ' || temp_cascaded_table(n).quantity);
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('derive_correction_line', '000');
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_error('TRANSACTIONS_INTERFACE_ID', FALSE);
    END derive_correction_line;

    PROCEDURE derive_correction_line_qty(
        x_cascaded_table    IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                   IN OUT NOCOPY BINARY_INTEGER,
        temp_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type
    ) IS
        x_include_closed_po           VARCHAR2(1); -- Bug 1887728
        /*
        ** Might be a compatibility issue between the two record definitions
        */
        x_record_count                NUMBER;
        x_remaining_quantity          NUMBER                                                  := 0;
        x_remaining_qty_po_uom        NUMBER                                                  := 0;
        x_bkp_qty                     NUMBER                                                  := 0;
        x_progress                    VARCHAR2(3);
        x_to_organization_code        VARCHAR2(5);
        x_converted_trx_qty           NUMBER                                                  := 0;
        transaction_ok                BOOLEAN                                                 := FALSE;
        x_expected_date               rcv_transactions_interface.expected_receipt_date%TYPE;
        high_range_date               DATE;
        low_range_date                DATE;
        rows_fetched                  NUMBER                                                  := 0;
        x_tolerable_qty               NUMBER                                                  := 0;
        x_first_trans                 BOOLEAN                                                 := TRUE;
        x_sysdate                     DATE                                                    := SYSDATE;
        current_n                     BINARY_INTEGER                                          := 0;
        insert_into_table             BOOLEAN                                                 := FALSE;
        x_qty_rcv_exception_code      po_line_locations.qty_rcv_exception_code%TYPE;
        tax_amount_factor             NUMBER;
        lastrecord                    BOOLEAN                                                 := FALSE;
        po_asn_uom_qty                NUMBER;
        po_primary_uom_qty            NUMBER;
        already_allocated_qty         NUMBER                                                  := 0;
        x_item_id                     NUMBER;
        x_approved_flag               VARCHAR(1);
        x_cancel_flag                 VARCHAR(1);
        x_closed_code                 VARCHAR(25);
        x_shipment_type               VARCHAR(25);
        x_ship_to_organization_id     NUMBER;
        x_ship_to_location_id         NUMBER;
        /* temp_ship_to_location_id       number;
        temp_mirror_ship_to_loc_id number ;
        temp_enf_ship_to_loc_code varchar(25) ; */
        /* The above 3 variables added for bug 1898283 */
        x_vendor_product_num          VARCHAR(25);
        x_temp_count                  NUMBER;
        x_full_name                   VARCHAR2(240)                                           := NULL; -- Bug 2392074
        /* 1887728 -Added the following variables */
        profile_user_id               NUMBER                                                  := -1;
        profile_appl_id               NUMBER                                                  := -1;
        profile_resp_id               NUMBER                                                  := -1;
        defined                       BOOLEAN;
        /* 1845702 */
        x_sob_id                      NUMBER                                                  := NULL;
        x_rate                        NUMBER;
        x_allow_rate_override         VARCHAR2(1);
        /* Bug# 1548597 */
        x_secondary_available_qty     NUMBER                                                  := 0;

/********************************************************************/
        CURSOR po_correct(
            v_parent_trx_id      NUMBER,
            v_to_organization_id NUMBER
        ) IS
            SELECT   rt.po_line_location_id,
                     rt.po_header_id po_head_id,
                     rt.po_line_id line_id,
                     rt.transaction_id rcv_transaction_id,
                     rt.parent_transaction_id grand_parent_txn_id,
                     poh.segment1 document_num,
                     pol.line_num line_number,
                     rt.transaction_date transaction_date,
                     rt.transaction_type parent_transaction_type,
                     rt.quantity qty,
                     rt.unit_of_measure unit_of_meas,
                     rt.primary_unit_of_measure,
                     rt.primary_quantity,
                     rt.organization_id,
                     rt.po_unit_price unit_price,
                     rsl.category_id,
                     rsl.item_description,
                     rt.po_line_id,
                     rt.location_id,
                     rsl.item_id,
                     rt.deliver_to_person_id,
                     rt.deliver_to_location_id,
                     rt.subinventory destination_subinventory,
                     rt.po_distribution_id,
                     rt.destination_type_code,
                     rt.wip_entity_id,
                     rt.wip_operation_seq_num,
                     rt.wip_resource_seq_num,
                     rt.wip_repetitive_schedule_id,
                     rt.wip_line_id,
                     rt.bom_resource_id,
                     rsl.ussgl_transaction_code
            FROM     rcv_transactions rt,
                     rcv_shipment_lines rsl,
                     po_headers poh,
                     po_lines pol
            WHERE    rt.transaction_id = v_parent_trx_id
            AND      rt.organization_id = NVL(v_to_organization_id, rt.organization_id)
            AND      (   rt.transaction_type IN('RECEIVE', 'TRANSFER', 'ACCEPT', 'REJECT', 'MATCH')
                      OR (    rt.transaction_type IN('RETURN TO VENDOR', 'RETURN TO CUSTOMER')
                          AND NOT EXISTS(SELECT 'rtv to processed matched unordered receipt'
                                         FROM   rcv_transactions rt2,
                                                rcv_transactions rt3
                                         WHERE  rt2.transaction_id = rt.parent_transaction_id
                                         AND    rt2.transaction_type = 'UNORDERED'
                                         AND    rt3.transaction_type = 'MATCH'
                                         AND    rt3.parent_transaction_id = rt2.transaction_id)
                          AND NOT EXISTS(SELECT 'rtv to unprocessed matched unordered receipt'
                                         FROM   rcv_transactions rt2,
                                                rcv_transactions_interface rti
                                         WHERE  rt2.transaction_id = rt.parent_transaction_id
                                         AND    rt2.transaction_type = 'UNORDERED'
                                         AND    rti.transaction_type = 'MATCH'
                                         AND    rti.parent_transaction_id = rt2.transaction_id)
                         )
                      OR (    rt.transaction_type = 'DELIVER'
                          AND NOT(    rt.destination_type_code = 'INVENTORY'
                                  AND rt.source_document_code IN('REQ', 'INVENTORY', 'RMA')))
                      OR (    rt.transaction_type = 'UNORDERED'
                          AND NOT EXISTS(SELECT 'processed matched rows'
                                         FROM   rcv_transactions rt2
                                         WHERE  rt2.parent_transaction_id = rt.transaction_id
                                         AND    rt2.transaction_type = 'MATCH')
                          AND NOT EXISTS(SELECT 'unprocessed matched rows'
                                         FROM   rcv_transactions_interface rti
                                         WHERE  rti.parent_transaction_id = rt.transaction_id
                                         AND    rti.transaction_type = 'MATCH')
                         )
                     )
            AND      NOT EXISTS(SELECT 'purchase order shipment cancelled or fc'
                                FROM   po_line_locations pll
                                WHERE  pll.line_location_id = rt.po_line_location_id
                                AND    (   NVL(pll.cancel_flag, 'N') = 'Y'
                                        OR NVL(pll.closed_code, 'OPEN') = 'FINALLY CLOSED'))
            AND      (rt.shipment_line_id = rsl.shipment_line_id)
            AND      (poh.po_header_id = rt.po_header_id)
            AND      (pol.po_line_id = rt.po_line_id)
            AND      (   rt.dropship_type_code = 3
                      OR rt.dropship_type_code IS NULL)
            ORDER BY rt.transaction_id;

        CURSOR po_correct_rti(
            v_parent_interface_txn_id NUMBER
        ) IS
            SELECT rti.po_line_location_id,
                   rti.po_header_id po_head_id,
                   rti.po_line_id line_id,
                   rti.interface_transaction_id rcv_transaction_id,
                   rti.parent_transaction_id grand_parent_txn_id,
                   rti.document_num,
                   rti.document_line_num line_number,
                   rti.transaction_date transaction_date,
                   rti.transaction_type parent_transaction_type,
                   rti.quantity qty,
                   rti.unit_of_measure unit_of_meas,
                   rti.primary_unit_of_measure,
                   rti.primary_quantity,
                   rti.to_organization_id organization_id,
                   rti.po_unit_price unit_price,
                   rti.category_id,
                   rti.item_description,
                   rti.po_line_id,
                   rti.location_id,
                   rti.item_id,
                   rti.deliver_to_person_id,
                   rti.deliver_to_location_id,
                   rti.subinventory destination_subinventory,
                   rti.po_distribution_id,
                   rti.destination_type_code,
                   rti.wip_entity_id,
                   rti.wip_operation_seq_num,
                   rti.wip_resource_seq_num,
                   rti.wip_repetitive_schedule_id,
                   rti.wip_line_id,
                   rti.bom_resource_id,
                   rti.ussgl_transaction_code
            FROM   rcv_transactions_interface rti
            WHERE  interface_transaction_id = v_parent_interface_txn_id;

        x_po_correctrec               po_correct%ROWTYPE;
        x_temp_parent_trx_qty         NUMBER                                                  := 0;
        x_converted_parent_trx_qty    NUMBER                                                  := 0;
        x_temp_convert_parent_trx_qty NUMBER                                                  := 0;
        x_remaining_qty_parent_uom    NUMBER                                                  := 0;
        l_to_organization_id          NUMBER                                                  := 0;
        l_transaction_type            rcv_transactions.transaction_type%TYPE;
        x_temp_already_allocated_qty  NUMBER                                                  := 0;
        derive_values_from_table      BOOLEAN                                                 := FALSE;
        derive_values_from_rti        BOOLEAN                                                 := FALSE;
        already_derived               BOOLEAN                                                 := FALSE;
        cascaded_table_index          NUMBER;
        l_grand_parent_trx_id         rcv_transactions.parent_transaction_id%TYPE;
        temp_index                    NUMBER;
        l_line_loc_id                 po_line_locations.line_location_id%TYPE;
        l_exist                       VARCHAR2(30);
        l_exist1                      VARCHAR2(30);
        l_exist2                      VARCHAR2(30);
        l_destination_type_code       rcv_transactions.destination_type_code%TYPE;
        l_source_document_code        rcv_transactions.source_document_code%TYPE;
        /* Bug#5369121 */
        l_primary_uom                 rcv_transactions_interface.unit_of_measure%TYPE;
        l_transaction_uom             rcv_transactions.unit_of_measure%TYPE;
        l_interface_quantity          NUMBER;
        l_interface_qty_in_trx_uom    NUMBER;
        l_item_id                     NUMBER;
        /* Bug#5369121 */

        -- <Bug 9342280 : Added for CLM project>
        l_is_clm_po           VARCHAR2(5) := 'N';
        l_partial_funded_flag VARCHAR2(5) := 'N';
        -- <CLM END>
    BEGIN
        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('enter derive_quantity ' || x_cascaded_table(n).parent_transaction_id);
            asn_debug.put_line('quantity ' || x_cascaded_table(n).quantity);
        END IF;

        IF (x_cascaded_table(n).parent_transaction_id IS NOT NULL) THEN --{
            already_derived  := TRUE;
        END IF; --}

        IF (    NOT already_derived
            AND (x_cascaded_table(n).parent_interface_txn_id IS NULL)
            AND (x_cascaded_table(n).parent_source_transaction_num IS NOT NULL)) THEN --{
            /* This means that there can be a row in RT with src_txn_id
             * populated or it can be a child.
            */
            BEGIN
                SELECT transaction_id
                INTO   x_cascaded_table(n).parent_transaction_id
                FROM   rcv_transactions
                WHERE  source_transaction_num = x_cascaded_table(n).parent_source_transaction_num;

                already_derived  := TRUE;
            EXCEPTION
            -- Bug 7651646
                WHEN NO_DATA_FOUND THEN
                     rcv_error_pkg.set_error_message('RCV_NO_PARENT_SRC_TRANSACTION');
                     rcv_error_pkg.set_token('VALUE',x_cascaded_table(n).parent_source_transaction_num);
                     x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_error;
                     x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
                     rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);

                WHEN TOO_MANY_ROWS THEN
                     rcv_error_pkg.set_error_message('RCV_DUP_SRC_TRANSACTION');
                     rcv_error_pkg.set_token('VALUE',x_cascaded_table(n).parent_source_transaction_num);
                     x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_error;
                     x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
                     rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);
            END;
        END IF; --}

        IF already_derived THEN --{
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line(' open po_correct table ' || x_cascaded_table(n).parent_transaction_id);
            END IF;

            OPEN po_correct(x_cascaded_table(n).parent_transaction_id, x_cascaded_table(n).to_organization_id);
        END IF; ---}

        IF (NOT already_derived) THEN --{
            derive_parent_id(x_cascaded_table, n);

            /* This means that there was no error in
             * derive_parent_id which means that the
             * this is a child and need to get the values
             * from the rti and not from the plsql table.
            */
            IF (    (x_cascaded_table(n).error_status <> 'E')
                AND (    x_cascaded_table(n).derive = 'Y'
                     AND x_cascaded_table(n).derive_index = 0)) THEN
                /* if derive_values_from_table is true, then we
                 * derive the values from the pl/sql tables later
                 * at the time when we try to see which cursor is open.
                 * We will have x_cascaded_table(n).
                 * parent_interface_txn_id) populated with teh
                 * correct value.
                */
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line(' open correct cursor from rti');
                END IF;

                OPEN po_correct_rti(x_cascaded_table(n).parent_interface_txn_id);
            END IF;
        END IF; --}

/******************************************************************/
--check line quanity > 0
        x_progress  := '097';

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('X_progress ' || x_progress);
        END IF;

        IF     x_cascaded_table(n).error_status IN('S', 'W')
           AND x_cascaded_table(n).quantity = 0 THEN --{
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Quantity is <= zero. Cascade will fail');
            END IF;

            x_cascaded_table(n).error_status  := 'F';
            rcv_error_pkg.set_error_message('RCV_ENTER_QTY_GT_ZERO', x_cascaded_table(n).error_message);
            rcv_error_pkg.log_interface_error('QUANTITY', FALSE);
        END IF; --} end qty > 0 check

                -- the following steps will create a set of rows linking the line_record with
                -- its corresponding po_line_location rows until the quantity value from
                -- the asn is consumed.  (Cascade)

        /* 2119137 : If the user populates rcv_transactions_interface
        with po_line_id, then ROI errors out with
        RCV_ASN_NO_PO_LINE_LOCATION_ID when the docment_line_num
        is not provided for one time items. Modified the "if" criteria in
        such a way that the ROI validation does'nt error out when
        po_line_id is populated for one time items. */
        x_progress  := '098';

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('X_progress ' || x_progress);
        END IF;

        IF (    (   x_cascaded_table(n).parent_transaction_id IS NOT NULL
                 OR x_cascaded_table(n).parent_interface_txn_id IS NOT NULL)
            AND x_cascaded_table(n).error_status IN('S', 'W')) THEN --{

                                                                    -- Copy record from main table to temp table
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Copy record from main table to temp table');
            END IF;

            current_n                       := 1;
            temp_cascaded_table(current_n)  := x_cascaded_table(n);

            -- Get all rows which meet this condition
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Get all rows which meet this condition');
                asn_debug.put_line('Transaction Type = ' || x_cascaded_table(n).transaction_type);
                asn_debug.put_line('Auto Transact Code = ' || x_cascaded_table(n).auto_transact_code);
            END IF;

            -- Assign shipped quantity to remaining quantity
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Assign populated quantity to remaining quantity');
                asn_debug.put_line('Pointer in temp_cascade ' || TO_CHAR(current_n));
            END IF;

            x_remaining_quantity            := temp_cascaded_table(current_n).quantity;
            x_bkp_qty                       := x_remaining_quantity; -- used for decrementing cum qty for first record
            x_remaining_qty_po_uom          := 0;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Have assigned the quantity');
            END IF;

            -- Calculate tax_amount_factor for calculating tax_amount for
            -- each cascaded line

            IF NVL(temp_cascaded_table(current_n).tax_amount, 0) <> 0 THEN
                tax_amount_factor  := temp_cascaded_table(current_n).tax_amount / x_remaining_quantity;
            ELSE
                tax_amount_factor  := 0;
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Tax Factor ' || TO_CHAR(tax_amount_factor));
                asn_debug.put_line('transaction Quantity : ' || TO_CHAR(x_remaining_quantity));
            END IF;

            x_first_trans                   := TRUE;
            transaction_ok                  := FALSE;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Before starting Cascade');
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Record Count = ' || x_record_count);
            END IF;

            LOOP --{
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Backup Qty ' || TO_CHAR(x_bkp_qty));
                    asn_debug.put_line('Remaining Quantity  ' || TO_CHAR(x_remaining_quantity));
                END IF;

                /*
                ** Fetch the appropriate record
                */
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('DEBUG: transaction_type = ' || x_cascaded_table(n).transaction_type);
                END IF;

                IF (po_correct%ISOPEN) THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' fetch po_correct');
                    END IF;

                    FETCH po_correct INTO x_po_correctrec;

                    IF (po_correct%NOTFOUND) THEN
                        lastrecord  := TRUE;
                    END IF;

                    rows_fetched  := po_correct%ROWCOUNT;
                ELSIF(po_correct_rti%ISOPEN) THEN --}{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' fetch po_correct_rti');
                    END IF;

                    FETCH po_correct_rti INTO x_po_correctrec;

                    IF (po_correct_rti%NOTFOUND) THEN
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('correct last row');
                        END IF;

                        lastrecord  := TRUE;
                    END IF;

                    rows_fetched  := po_correct_rti%ROWCOUNT;
                ELSIF(temp_cascaded_table(current_n).derive = 'Y') THEN --}{
                    /* GET VALUES FROM THE PLSQL TABLE */
                    /* Populate x_po_correctrec with these values since
                     * we are using x_po_correctrec later.
                     * We have temp_cascaded_table(current_n).
                     * parent_interface_txn_id) populated with
                     * with the correct value. Also we have cascaded_table_index
                     * with the correct pl/sql table index number;
                    */
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' fetch pl/sql table');
                    END IF;

                    temp_index                                  := temp_cascaded_table(current_n).derive_index;
                    x_po_correctrec.po_line_location_id         := x_cascaded_table(temp_index).po_line_location_id;
                    x_po_correctrec.po_head_id                  := x_cascaded_table(temp_index).po_header_id;
                    x_po_correctrec.line_id                     := x_cascaded_table(temp_index).po_line_id;
                    x_po_correctrec.unit_of_meas                := x_cascaded_table(temp_index).unit_of_measure;
                    x_po_correctrec.grand_parent_txn_id         := x_cascaded_table(temp_index).parent_transaction_id;
                    x_po_correctrec.document_num                := x_cascaded_table(temp_index).document_num;
                    x_po_correctrec.line_number                 := x_cascaded_table(temp_index).document_line_num;
                    x_po_correctrec.transaction_date            := x_cascaded_table(temp_index).transaction_date;
                    x_po_correctrec.parent_transaction_type     := x_cascaded_table(temp_index).transaction_type;
                    x_po_correctrec.qty                         := x_cascaded_table(temp_index).quantity;
                    x_po_correctrec.primary_unit_of_measure     := x_cascaded_table(temp_index).primary_unit_of_measure;
                    x_po_correctrec.primary_quantity            := x_cascaded_table(temp_index).primary_quantity;
                    x_po_correctrec.organization_id             := x_cascaded_table(temp_index).to_organization_id;
                    x_po_correctrec.unit_price                  := x_cascaded_table(temp_index).po_unit_price;
                    x_po_correctrec.category_id                 := x_cascaded_table(temp_index).category_id;
                    x_po_correctrec.item_description            := x_cascaded_table(temp_index).item_description;
                    x_po_correctrec.location_id                 := x_cascaded_table(temp_index).location_id;
                    x_po_correctrec.item_id                     := x_cascaded_table(temp_index).item_id;
                    x_po_correctrec.deliver_to_person_id        := x_cascaded_table(temp_index).deliver_to_person_id;
                    x_po_correctrec.deliver_to_location_id      := x_cascaded_table(temp_index).deliver_to_location_id;
                    x_po_correctrec.destination_subinventory    := x_cascaded_table(temp_index).subinventory;
                    x_po_correctrec.po_distribution_id          := x_cascaded_table(temp_index).po_distribution_id;
                    x_po_correctrec.destination_type_code       := x_cascaded_table(temp_index).destination_type_code;
                    x_po_correctrec.wip_entity_id               := x_cascaded_table(temp_index).wip_entity_id;
                    x_po_correctrec.wip_operation_seq_num       := x_cascaded_table(temp_index).wip_operation_seq_num;
                    x_po_correctrec.wip_resource_seq_num        := x_cascaded_table(temp_index).wip_resource_seq_num;
                    x_po_correctrec.wip_repetitive_schedule_id  := x_cascaded_table(temp_index).wip_repetitive_schedule_id;
                    x_po_correctrec.wip_line_id                 := x_cascaded_table(temp_index).wip_line_id;
                    x_po_correctrec.bom_resource_id             := x_cascaded_table(temp_index).bom_resource_id;
                    x_po_correctrec.ussgl_transaction_code      := x_cascaded_table(temp_index).ussgl_transaction_code;
                    /* Also fetch parent transaction type and grand parent trx id into
                     * the correct variables.
                    */
                    rows_fetched                                := 1;
                    lastrecord                                  := TRUE;
                END IF;         --}
                        --x_remaining_quantity:= temp_cascaded_table(current_n).quantity;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Correct Rows fetched ' || TO_CHAR(rows_fetched));
                    asn_debug.put_line('po_line_id  ' || TO_CHAR(x_po_correctrec.po_line_id));
                    asn_debug.put_line('po_dist  ' || TO_CHAR(x_po_correctrec.po_distribution_id));
                    asn_debug.put_line('correct remainaing qty ' || x_remaining_quantity);
                END IF;

                IF (lastrecord) THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Hit exit condition');
                    END IF;

                    IF NOT x_first_trans THEN
                        -- x_first_trans has been reset which means some cascade has
                        -- happened. Otherwise current_n = 1
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('current_n before is ' || current_n);
                        END IF;

                        current_n  := current_n - 1;
                    END IF;

                    -- do the tolerance act here
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Temp table pointer ' || TO_CHAR(current_n));
                        asn_debug.put_line('Check which condition has occured');
                    END IF;

                    -- lastrecord...we have run out of rows and we still have quantity to allocate
                    /* Do abs(x_remaining_quantity) since it can be a negative
                     * or positive correction.
                    */
                    IF ABS(x_remaining_quantity) > 0 THEN --{
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('There is quantity remaining ');
                            asn_debug.put_line('tolerable quantity now in plsql table ' || temp_cascaded_table(current_n).quantity);
                            asn_debug.put_line('rows_fetched ' || rows_fetched);
                        END IF;

                        IF NOT x_first_trans THEN
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('not fisrt txn');
                            END IF;
                        END IF;

                        IF     rows_fetched > 0
                           AND NOT x_first_trans THEN --{
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line(' inside transaction_type ' || x_po_correctrec.parent_transaction_type);
                            END IF;

                            IF (SIGN(x_cascaded_table(current_n).quantity) = 1) THEN --{
                                IF (x_po_correctrec.parent_transaction_type IN('RECEIVE', 'MATCH')) THEN --{
                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('Need to check qty tolerances');
                                    END IF;

                                    SELECT NVL(po_line_locations.qty_rcv_exception_code, 'NONE')
                                    INTO   x_qty_rcv_exception_code
                                    FROM   po_line_locations
                                    WHERE  line_location_id = temp_cascaded_table(current_n).po_line_location_id;

                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('Qty tolerance exception code ' || NVL(x_qty_rcv_exception_code, 'NONE1'));
                                    END IF;

                                    IF x_qty_rcv_exception_code IN('NONE', 'WARNING') THEN --{
                                        /* Bug# 1807842 */
                                        IF (temp_cascaded_table(current_n).quantity <= x_converted_parent_trx_qty) THEN --{
                                            IF (g_asn_debug = 'Y') THEN
                                                asn_debug.put_line('Tolerable quantity ' || TO_CHAR(x_converted_parent_trx_qty));
                                                asn_debug.put_line('Current quantity ' || TO_CHAR(temp_cascaded_table(current_n).quantity));
                                                asn_debug.put_line('Current shipped quantity ' || TO_CHAR(temp_cascaded_table(current_n).quantity_shipped));
                                                asn_debug.put_line('Assign remaining ASN UOM qty ' || TO_CHAR(x_remaining_quantity) || ' to last record');
                                                asn_debug.put_line('Assign remaining PO UOM qty ' || TO_CHAR(x_remaining_qty_po_uom) || ' to last record');
                                            END IF;

                                            temp_cascaded_table(current_n).quantity          := temp_cascaded_table(current_n).quantity + x_remaining_quantity;
                                            temp_cascaded_table(current_n).primary_quantity  :=   temp_cascaded_table(current_n).primary_quantity
                                                                                                + rcv_transactions_interface_sv.convert_into_correct_qty(x_remaining_quantity,
                                                                                                                                                         temp_cascaded_table(1).unit_of_measure,
                                                                                                                                                         temp_cascaded_table(1).item_id,
                                                                                                                                                         temp_cascaded_table(1).primary_unit_of_measure
                                                                                                                                                        );
                                        END IF; /* Bug# 1807842 */ --}

                                        temp_cascaded_table(current_n).tax_amount  := ROUND(temp_cascaded_table(current_n).quantity * tax_amount_factor, 6);

                                        IF (g_asn_debug = 'Y') THEN
                                            asn_debug.put_line('Current quantity ' || TO_CHAR(temp_cascaded_table(current_n).quantity));
                                            asn_debug.put_line('Current shipped quantity ' || TO_CHAR(temp_cascaded_table(current_n).quantity_shipped));
                                            asn_debug.put_line('Current source document quantity ' || TO_CHAR(temp_cascaded_table(current_n).source_doc_quantity));
                                            asn_debug.put_line('Current primary quantity ' || TO_CHAR(temp_cascaded_table(current_n).primary_quantity));
                                            asn_debug.put_line('Current Tax Amount ' || TO_CHAR(temp_cascaded_table(current_n).tax_amount));
                                        END IF;

                                        -- <Bug 9342280 : Added for CLM project>
                                        get_clm_info(     'QUANTITY',
                                                          x_cascaded_table,
                                                          n,
                                                          l_is_clm_po,
                                                          l_partial_funded_flag);

                                        IF l_is_clm_po = 'Y' AND l_partial_funded_flag = 'Y' THEN

                                           x_qty_rcv_exception_code := 'REJECT';

                                        END IF;
                                        --<END CLM>

                                        IF x_qty_rcv_exception_code = 'WARNING' THEN --{
                                            IF (g_asn_debug = 'Y') THEN
                                                asn_debug.put_line('IN WARNING');
                                            END IF;

                                            temp_cascaded_table(current_n).error_status   := 'W';
                                            temp_cascaded_table(current_n).error_message  := 'RCV_ALL_QTY_OVER_TOLERANCE';

                                            IF (g_asn_debug = 'Y') THEN
                                                asn_debug.put_line('Group Id ' || TO_CHAR(temp_cascaded_table(current_n).GROUP_ID));
                                                asn_debug.put_line('Header Interface Id ' || TO_CHAR(temp_cascaded_table(current_n).header_interface_id));
                                                asn_debug.put_line('IN Trans Id ' || TO_CHAR(temp_cascaded_table(current_n).interface_transaction_id));
                                            END IF;

                                            x_cascaded_table(n).error_status              := rcv_error_pkg.g_ret_sts_warning;
                                            rcv_error_pkg.set_error_message('RCV_ENTER_QTY_GT_ZERO', x_cascaded_table(n).error_message);
                                            rcv_error_pkg.set_token('QTY_A', temp_cascaded_table(current_n).quantity);
                                            rcv_error_pkg.set_token('QTY_B', temp_cascaded_table(current_n).quantity - x_remaining_quantity);
                                            rcv_error_pkg.log_interface_warning('QUANTITY');

                                            IF (g_asn_debug = 'Y') THEN
                                                asn_debug.put_line('Error Status ' || temp_cascaded_table(current_n).error_status);
                                                asn_debug.put_line('Error message ' || temp_cascaded_table(current_n).error_message);
                                                asn_debug.put_line('Need to insert into po_interface_errors');
                                            END IF;
                                        END IF; --} matches x_qty_rcv_exception_code = 'WARNING'

                                        IF (g_asn_debug = 'Y') THEN
                                            asn_debug.put_line('Current quantity ' || TO_CHAR(temp_cascaded_table(current_n).quantity));
                                            asn_debug.put_line('Current shipped quantity ' || TO_CHAR(temp_cascaded_table(current_n).quantity_shipped));
                                            asn_debug.put_line('Current source document quantity ' || TO_CHAR(temp_cascaded_table(current_n).source_doc_quantity));
                                            asn_debug.put_line('Current primary quantity ' || TO_CHAR(temp_cascaded_table(current_n).primary_quantity));
                                            asn_debug.put_line('Current Tax Amount ' || TO_CHAR(temp_cascaded_table(current_n).tax_amount));
                                        END IF;
                                    END IF; --}
                                END IF; --}

                                IF (   (    (x_po_correctrec.parent_transaction_type IN('RECEIVE', 'MATCH'))
                                        AND x_qty_rcv_exception_code = 'REJECT')
                                    OR (x_po_correctrec.parent_transaction_type NOT IN('RECEIVE', 'MATCH'))) THEN --{
                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('Extra ASN UOM Quantity ' || TO_CHAR(x_remaining_quantity));
                                        asn_debug.put_line('Extra PO UOM Quantity ' || TO_CHAR(x_remaining_qty_po_uom));
                                    END IF;

                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('delete the temp table ');
                                    END IF;

                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;

                                    -- <Bug 9342280 : Added for CLM project>
                                    IF (x_po_correctrec.parent_transaction_type IN ('RECEIVE', 'MATCH', 'DELIVER')) AND
                                       (l_is_clm_po = 'Y' AND l_partial_funded_flag = 'Y') THEN

                                      rcv_error_pkg.set_error_message('RCV_TRX_QTY_EXCEEDS_CLM_FUNDED', x_cascaded_table(n).error_message);
                                      rcv_error_pkg.set_token('QTY_A', temp_cascaded_table(current_n).quantity);
                                      rcv_error_pkg.set_token('QTY_B', temp_cascaded_table(current_n).quantity - x_remaining_quantity);

                                    ELSE
                                    -- <CLM END>

                                    rcv_error_pkg.set_error_message('RCV_CORRECT_QTY_OVER_TOLERANCE', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('QTY_A', temp_cascaded_table(current_n).quantity);
                                    rcv_error_pkg.set_token('QTY_B', temp_cascaded_table(current_n).quantity - x_remaining_quantity);

                                    END IF; -- <Bug 9342280 : Added for CLM project>

                                    rcv_error_pkg.log_interface_error('QUANTITY', FALSE);

                                    IF temp_cascaded_table.COUNT > 0 THEN
                                        FOR i IN 1 .. temp_cascaded_table.COUNT LOOP
                                            temp_cascaded_table.DELETE(i);
                                        END LOOP;
                                    END IF;

                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('mark the actual table with error status');
                                        asn_debug.put_line('Error Status ' || x_cascaded_table(n).error_status);
                                        asn_debug.put_line('Error message ' || x_cascaded_table(n).error_message);
                                    END IF;

                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('Need to insert a row into po_interface_errors');
                                    END IF;
                                END IF; --} matches if(none/warning) and elseif(reject)
                            END IF; --}

                            IF (SIGN(x_cascaded_table(current_n).quantity) = -1) THEN --{
                                /* for correct,accept an reject type we dont have the
                            * tolerance check. Hence error out.
                             * We cannot correct quantities more than that was received.
                            */
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line(' in correct extra Quantity ' || TO_CHAR(x_remaining_quantity));
                                END IF;

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('delete the temp table ');
                                END IF;
                                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                rcv_error_pkg.set_error_message('RCV_CORRECT_QTY_OVER_TOLERANCE', x_cascaded_table(n).error_message);
                                rcv_error_pkg.set_token('QTY_A', x_cascaded_table(current_n).quantity);
                                rcv_error_pkg.set_token('QTY_B', temp_cascaded_table(current_n).quantity);
                                rcv_error_pkg.log_interface_error('QUANTITY', FALSE);

                                IF temp_cascaded_table.COUNT > 0 THEN
                                    FOR i IN 1 .. temp_cascaded_table.COUNT LOOP
                                        temp_cascaded_table.DELETE(i);
                                    END LOOP;
                                END IF;

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('mark the actual table with error status');
                                    asn_debug.put_line('Error Status ' || x_cascaded_table(n).error_status);
                                    asn_debug.put_line('Error message ' || x_cascaded_table(n).error_message);
                                END IF;

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('Need to insert a row into po_interface_errors for correct');
                                END IF;
                            END IF; --}
                        ELSE --}{ else for rows fetched = 0 OR x_first_trans = true
                            IF rows_fetched = 0 THEN
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('No rows were retrieved from cursor.');
                                END IF;
                            ELSIF x_first_trans THEN
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('No rows were cascaded');
                                END IF;
                            END IF;

                            x_temp_count                      := 1;
                            x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;

                            IF (x_cascaded_table(n).parent_transaction_id IS NOT NULL) THEN --{
                                /* Give an error just like it is done for the
                                 * the receipt transaction;
                                */
                                SELECT parent_transaction_id,
                                       transaction_type,
                                       po_line_location_id,
                                       destination_type_code,
                                       source_document_code
                                INTO   l_grand_parent_trx_id,
                                       l_transaction_type,
                                       l_line_loc_id,
                                       l_destination_type_code,
                                       l_source_document_code
                                FROM   rcv_transactions rt
                                WHERE  rt.transaction_id = temp_cascaded_table(current_n).parent_transaction_id;

                                IF (l_transaction_type = 'DELIVER') THEN --{
                                    IF (   l_destination_type_code = 'INVENTORY'
                                        OR l_source_document_code IN('REQ', 'INVENTORY', 'RMA')) THEN
                                        x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                        rcv_error_pkg.set_error_message('RCV_INVAL_SOURCE_DOC_FOR_DEL', x_cascaded_table(n).error_message);
                                        rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);
                                    END IF;
                                END IF; --}

                                IF (l_transaction_type = 'UNORDERED') THEN --{
                                    SELECT MAX('record_exist')
                                    INTO   l_exist
                                    FROM   rcv_transactions rt2
                                    WHERE  rt2.parent_transaction_id = temp_cascaded_table(current_n).parent_transaction_id
                                    AND    rt2.transaction_type = 'MATCH';

                                    SELECT MAX('record_exist')
                                    INTO   l_exist1
                                    FROM   rcv_transactions_interface rti
                                    WHERE  rti.parent_transaction_id = temp_cascaded_table(current_n).parent_transaction_id
                                    AND    rti.transaction_type = 'MATCH';

                                    IF l_exist = 'record_exist' THEN --{
                                        x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                        rcv_error_pkg.set_error_message('RCV_PROC_MATCH_UNORDER', x_cascaded_table(n).error_message);
                                        rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);
                                    END IF; --}

                                    IF l_exist1 = 'record_exist' THEN --{
                                        x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                        rcv_error_pkg.set_error_message('RCV_UNPROC_MATCH_UNORDER', x_cascaded_table(n).error_message);
                                        rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);
                                    END IF; --}
                                END IF; --}

                                IF (l_transaction_type = 'RETURN TO VENDOR') THEN --{
                                    SELECT MAX('record_exist')
                                    INTO   l_exist
                                    FROM   rcv_transactions rt2,
                                           rcv_transactions rt3
                                    WHERE  rt2.transaction_id = l_grand_parent_trx_id
                                    AND    rt2.transaction_type = 'UNORDERED'
                                    AND    rt3.transaction_type = 'MATCH'
                                    AND    rt3.parent_transaction_id = rt2.transaction_id;

                                    SELECT MAX('record_exist')
                                    INTO   l_exist1
                                    FROM   rcv_transactions rt2,
                                           rcv_transactions_interface rti
                                    WHERE  rt2.transaction_id = l_grand_parent_trx_id
                                    AND    rt2.transaction_type = 'UNORDERED'
                                    AND    rti.transaction_type = 'MATCH'
                                    AND    rti.parent_transaction_id = rt2.transaction_id;

                                    IF l_exist = 'record_exist' THEN --{
                                        x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                        rcv_error_pkg.set_error_message('RCV_RET_PROC_MATCH_UNORDER', x_cascaded_table(n).error_message);
                                        rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);
                                    END IF; --}

                                    IF l_exist1 = 'record_exist' THEN --{
                                        x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                        rcv_error_pkg.set_error_message('RCV_RET_UNPROC_MATCH_UNORDER', x_cascaded_table(n).error_message);
                                        rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);
                                    END IF; --}
                                END IF; --}

                                SELECT MAX('record_exist')
                                INTO   l_exist2
                                FROM   po_line_locations pll
                                WHERE  pll.line_location_id = l_line_loc_id
                                AND    (   NVL(pll.cancel_flag, 'N') = 'Y'
                                        OR NVL(pll.closed_code, 'OPEN') = 'FINALLY CLOSED');

                                IF l_exist2 = 'record_exist' THEN
                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_PO_SHIPMENT_CANCELLED', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);
                                END IF;
                            END IF; --}

                                    -- Delete the temp_cascaded_table just to be sure

                            IF temp_cascaded_table.COUNT > 0 THEN
                                FOR i IN 1 .. temp_cascaded_table.COUNT LOOP
                                    temp_cascaded_table.DELETE(i);
                                END LOOP;
                            END IF;
                        END IF; --}
                    ELSE -- }{
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Remaining  UOM quantity is zero ' || TO_CHAR(x_remaining_quantity));
                            asn_debug.put_line('Return the cascaded rows back to the calling procedure');
                        END IF;
                    END IF; --} ends the check for whether last record has been reached

                            -- close cursors

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Close cursors shipments, count_shipments, distributions, count_disributions ' || current_n);
                    END IF;

                    IF po_correct%ISOPEN THEN
                        CLOSE po_correct;
                    END IF;

                    IF po_correct_rti%ISOPEN THEN
                        CLOSE po_correct_rti;
                    END IF;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('before exit current_n is ' || current_n);
                    END IF;

                    EXIT;
                END IF; --} matches lastrecord or x_remaining_quantity <= 0

                -- bug fix 5269121 :it is wrong to
                --copy the parents unit of measure into the childs unit of measure, as this will be the one
                --which will be finally populated into RT for the child record (correction record).
                --temp_cascaded_table(current_n).unit_of_measure  := x_po_correctrec.unit_of_meas;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line(' Entering qty calculation for correct');
                END IF;

                IF     (x_first_trans)
                   AND temp_cascaded_table(current_n).item_id IS NULL THEN
                    temp_cascaded_table(current_n).item_id                  := x_po_correctrec.item_id;
                    temp_cascaded_table(current_n).primary_unit_of_measure  := x_po_correctrec.primary_unit_of_measure;
                END IF;

                insert_into_table                               := FALSE;
                already_allocated_qty                           := 0;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('calling Correct get_available_qty ' || x_po_correctrec.parent_transaction_type);
                END IF;

                get_interface_available_qty(temp_cascaded_table,
                                            current_n,
                                            x_converted_parent_trx_qty
                                           );

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('correct interface_available_qty ' || x_converted_parent_trx_qty);
                END IF;

                /* x_converted_parent_trx_qty will be 0 when this is not a child
                 * transaction to any rti row. Also for correct, grand parent
                 * may already be processed and for positive correction we
                 * might need to get the quantity from the grand parent.
                */
                IF (x_converted_parent_trx_qty = 0) THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('interface qty is 0');
                    END IF;

                    IF (SIGN(temp_cascaded_table(current_n).quantity) = -1) THEN --{
                        rcv_quantities_s.get_available_quantity('CORRECT',
                                                                x_po_correctrec.rcv_transaction_id,
                                                                'VENDOR',
                                                                x_po_correctrec.parent_transaction_type,
                                                                NULL,
                                                                'NEGATIVE',
                                                                x_converted_parent_trx_qty,
                                                                x_tolerable_qty,
                                                                x_po_correctrec.unit_of_meas,
                                                                x_secondary_available_qty
                                                               );

                         /* Bug#5369121 - START */
                         IF (g_asn_debug = 'Y') THEN
                             asn_debug.put_line('x_converted_parent_trx_qty:' || x_converted_parent_trx_qty);
                             asn_debug.put_line('transaction_quantity:' || temp_cascaded_table(current_n).quantity);
                         END IF;

                         IF (x_converted_parent_trx_qty < ABS(temp_cascaded_table(current_n).quantity)) THEN

                             SELECT  rt.unit_of_measure,
                                     rsl.item_id,
 				    rt.primary_unit_of_measure
                             INTO    l_transaction_uom,
                                     l_item_id,
 				    l_primary_uom
                             FROM    rcv_transactions rt,
                                     rcv_shipment_lines rsl
                             WHERE   rsl.shipment_line_id = rt.shipment_line_id
                             AND     rt.transaction_id = x_po_correctrec.rcv_transaction_id;

                             SELECT NVL(SUM(interface_transaction_qty),0)
                             INTO   l_interface_quantity
                             FROM   rcv_transactions_interface
                             WHERE  (transaction_status_code = 'PENDING'
                                    AND processing_status_code <> 'ERROR')
                             --bug# 9583207 to comment group_id condition
                             --AND    group_id = temp_cascaded_table(current_n).group_id
                             AND    transaction_type = 'CORRECT'
                             AND    parent_transaction_id IN ( SELECT transaction_id
                                            FROM rcv_transactions
                                            WHERE parent_transaction_id = x_po_correctrec.rcv_transaction_id);

                             IF (l_interface_quantity = 0) THEN

                                 /*
                                 ** There is no unprocessed quantity. Simply set the
                                 ** x_interface_qty_in_trx_uom to 0. There is no need for uom
                                 ** conversion.
                                 */

                                 l_interface_qty_in_trx_uom := 0;

                             ELSE

                                 /*
                                 ** There is unprocessed quantity. Convert it to the transaction uom
                                 ** so that the available quantity can be calculated in the trx uom
                                 */
                                 IF (g_asn_debug = 'Y') THEN
                                         asn_debug.put_line('Before uom_convert:');
                                         asn_debug.put_line('l_interface_quantity' || l_interface_quantity);
                                         asn_debug.put_line('l_primary_uom' || l_primary_uom);
                                         asn_debug.put_line('l_transaction_uom' || l_transaction_uom);
                                         asn_debug.put_line('l_item_id' || l_item_id);
                                 END IF;

                                 po_uom_s.uom_convert(l_interface_quantity, l_primary_uom, l_item_id,
                                                     l_transaction_uom, l_interface_qty_in_trx_uom);

                             END IF;

                             x_converted_parent_trx_qty := x_converted_parent_trx_qty - l_interface_qty_in_trx_uom;

                             IF (g_asn_debug = 'Y') THEN
                                 asn_debug.put_line('x_converted_parent_trx_qty:' || x_converted_parent_trx_qty);
                             END IF;

                         END IF;
                         /* Bug#5369121 - END */
                    ELSE --}{
                        IF (x_po_correctrec.parent_transaction_type NOT IN('RECEIVE', 'MATCH', 'UNORDERED')) THEN
                            l_grand_parent_trx_id  := x_po_correctrec.grand_parent_txn_id;
                        ELSIF(x_po_correctrec.parent_transaction_type IN('MATCH', 'RECEIVE')) THEN
                            IF (temp_cascaded_table(current_n).parent_transaction_id IS NOT NULL) THEN
                                l_grand_parent_trx_id  := x_po_correctrec.po_line_location_id;
                            ELSIF(temp_cascaded_table(current_n).parent_interface_txn_id IS NOT NULL) THEN
                                /* We would have the value derived in the x_cascaded_table
                                 * but not have inserted it back into rti.
                                */
                                l_grand_parent_trx_id  := temp_cascaded_table(current_n).po_line_location_id;
                            END IF;
                        ELSIF(x_po_correctrec.parent_transaction_type = 'UNORDERED') THEN
                            l_grand_parent_trx_id  := x_po_correctrec.rcv_transaction_id;
                        END IF;

                        IF (l_grand_parent_trx_id IS NOT NULL) THEN
                            rcv_quantities_s.get_available_quantity('CORRECT',
                                                                    x_po_correctrec.rcv_transaction_id,
                                                                    'VENDOR',
                                                                    x_po_correctrec.parent_transaction_type,
                                                                    l_grand_parent_trx_id,
                                                                    'POSITIVE',
                                                                    x_converted_parent_trx_qty,
                                                                    x_tolerable_qty,
                                                                    x_po_correctrec.unit_of_meas,
                                                                    x_secondary_available_qty
                                                                   );
                        END IF;
                    END IF; --}
                END IF; --} -- interface_available_qty is 0.

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('qty from GET_AVAILABLE_QUANTITY for correct is ' || x_converted_parent_trx_qty);
                    asn_debug.put_line('tolerable qty from GET_AVAILABLE_QUANTITY for correct is ' || x_tolerable_qty);
                END IF;

                IF (x_remaining_quantity = 0) THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' correct Need an error message in the interface tables');
                    END IF;
                ELSE
                    /* Converted successfully and have some quantity on which we can act */
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Converted trx qty that is available ' || x_converted_parent_trx_qty);
                        asn_debug.put_line('Remaining qty in parents uom that is available ' || x_remaining_quantity);
                    END IF;

                    /* x_tolerable_quantity will be > 0 only for correction
                     * against a receive transcation.
                    */
                    IF (    (SIGN(temp_cascaded_table(current_n).quantity) = 1)
                        AND (x_tolerable_qty > 0)) THEN --{
                        x_converted_parent_trx_qty  := x_tolerable_qty;

                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Last Row : ' || TO_CHAR(x_converted_parent_trx_qty));
                        END IF;
                    END IF; --}

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('x_converted_parent_trx_qty : ' || TO_CHAR(x_converted_parent_trx_qty));
                    END IF;

                    IF (x_converted_parent_trx_qty > 0) THEN --{
                        /* Compare with abs(x_remaining_qty) here since we want
                         * to make sure that the qty we have is greater than
                         * the available qty irrespective of whether this is
                         * positive or negative correction.
                        */
                        IF (x_converted_parent_trx_qty < ABS(x_remaining_quantity)) THEN --{
                            /* Total quantity available to correct is less than the qty
                             * that the user wants to correct. Hence we would error out but
                             * to keep the old code we will get the remaining code here and
                             * error out later.
                             */
                            x_remaining_quantity        := x_remaining_quantity - SIGN(temp_cascaded_table(current_n).quantity) * x_converted_parent_trx_qty;
                            x_converted_parent_trx_qty  := SIGN(temp_cascaded_table(current_n).quantity) * x_converted_parent_trx_qty;

                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('remaning qty after allocation is : ' || TO_CHAR(x_remaining_quantity));
                            END IF;

                            insert_into_table           := TRUE;
                        ELSE --}{
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('We are in >= Qty branch ');
                            END IF;

                            x_converted_parent_trx_qty  := x_remaining_quantity;
                            insert_into_table           := TRUE;
                            x_remaining_quantity        := 0;
                        END IF; --} /* if (x_converted_parent_trx_qty < x_remaining_quantity) then */
                    ELSE /* x_converted_parent_trx_qty >0 */ --}{

                         -- so that the row can be used based on qty tolerance
                                                      -- checks
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Quantity is less then 0 but last record');
                        END IF;

                        insert_into_table           := TRUE;
                        x_converted_parent_trx_qty  := 0;
                    END IF; /*x_converted_parent_trx_qty >0 */ --}
                END IF; --} just added this

                /* Converted qty successfully and we have some quantity on which we can act */
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Transaction qty in terms of the parents uom is ' || x_converted_parent_trx_qty);
                END IF;

                IF insert_into_table THEN --{
                    IF (x_first_trans) THEN --{
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('First Time ' || TO_CHAR(current_n));
                        END IF;

                        x_first_trans  := FALSE;
                    ELSE --}{
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Next Time ' || TO_CHAR(current_n));
                        END IF;

                        temp_cascaded_table(current_n)  := temp_cascaded_table(current_n - 1);
                    END IF; --}

                    temp_cascaded_table(current_n).po_header_id             := x_po_correctrec.po_head_id;
                    temp_cascaded_table(current_n).po_line_id               := x_po_correctrec.line_id;
                    temp_cascaded_table(current_n).po_line_location_id      := x_po_correctrec.po_line_location_id;
                    temp_cascaded_table(current_n).po_distribution_id       := x_po_correctrec.po_distribution_id;
                    temp_cascaded_table(current_n).primary_unit_of_measure  := x_po_correctrec.primary_unit_of_measure;
                    temp_cascaded_table(current_n).quantity                 := x_converted_parent_trx_qty;

                    IF (temp_cascaded_table(current_n).primary_unit_of_measure <> x_po_correctrec.unit_of_meas) THEN
                        temp_cascaded_table(current_n).primary_quantity  := convert_into_correct_qty(x_converted_parent_trx_qty,
                                                                                                     x_po_correctrec.unit_of_meas,
                                                                                                     temp_cascaded_table(current_n).item_id,
                                                                                                     temp_cascaded_table(current_n).primary_unit_of_measure
                                                                                                    );
                    ELSE
                        temp_cascaded_table(current_n).primary_quantity  := x_converted_parent_trx_qty;
                    END IF;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Transaction qty in terms of the primary uom is ' || temp_cascaded_table(current_n).primary_quantity);
                    END IF;

                    current_n                                               := current_n + 1;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Increment pointer by 1 ' || TO_CHAR(current_n));
                    END IF;
                END IF; --}
      /* Get the available qty in PRIMARY UOM */
/*
      PO_UOM_S.UOM_CONVERT (x_converted_trx_qty,
                            l_uom,
                            x_item_id,
                            x_primary_uom,
                            l_primary_available_qty );
*/
            END LOOP; --}
        ELSE   --} {
             -- error_status and error_message are set after validate_quantity_shipped
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('No po_header_id/item_id ');
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Status = ' || x_cascaded_table(n).error_status);
            END IF;

            IF x_cascaded_table(n).error_status IN('S', 'W', 'F') THEN --{
                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;

                IF (x_cascaded_table(n).error_message IS NULL) THEN
                    rcv_error_pkg.set_error_message('RCV_NO_PARENT_TRANSACTION', x_cascaded_table(n).error_message);
                END IF;

                rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID');
            END IF; --}

            RETURN;
        END IF; -- } of (asn quantity_shipped was valid)

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('before closing cursors current_n is ' || temp_cascaded_table.COUNT);
        END IF;

        IF po_correct%ISOPEN THEN
            CLOSE po_correct;
        END IF;

        IF po_correct_rti%ISOPEN THEN
            CLOSE po_correct_rti;
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Exit explode_line_quantity');
            asn_debug.put_line('quantity ' || x_cascaded_table(n).quantity);
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Exception in derive_correction_line_quantity ');
            END IF;

            IF po_correct%ISOPEN THEN
                CLOSE po_correct;
            END IF;

            IF po_correct_rti%ISOPEN THEN
                CLOSE po_correct_rti;
            END IF;

            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('derive_correction_line_qty', x_progress);
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_error('TRANSACTIONS_INTERFACE_ID', FALSE);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line(TO_CHAR(n));
                asn_debug.put_line(SQLERRM);
                asn_debug.put_line('error ' || x_progress);
            END IF;
    END derive_correction_line_qty;

    PROCEDURE derive_correction_line_amt(
        x_cascaded_table    IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                   IN OUT NOCOPY BINARY_INTEGER,
        temp_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type
    ) IS
        x_include_closed_po           VARCHAR2(1); -- Bug 1887728
        /*
        ** Might be a compatibility issue between the two record definitions
        */
        x_record_count                NUMBER;
        x_remaining_amount            NUMBER                                                  := 0;
        x_progress                    VARCHAR2(3);
        x_to_organization_code        VARCHAR2(5);
        x_converted_trx_amt           NUMBER                                                  := 0;
        transaction_ok                BOOLEAN                                                 := FALSE;
        x_expected_date               rcv_transactions_interface.expected_receipt_date%TYPE;
        high_range_date               DATE;
        low_range_date                DATE;
        rows_fetched                  NUMBER                                                  := 0;
        x_tolerable_amt               NUMBER                                                  := 0;
        x_first_trans                 BOOLEAN                                                 := TRUE;
        x_sysdate                     DATE                                                    := SYSDATE;
        current_n                     BINARY_INTEGER                                          := 0;
        insert_into_table             BOOLEAN                                                 := FALSE;
        x_qty_rcv_exception_code      po_line_locations.qty_rcv_exception_code%TYPE;
        tax_amount_factor             NUMBER;
        lastrecord                    BOOLEAN                                                 := FALSE;
        already_allocated_amt         NUMBER                                                  := 0;
        x_item_id                     NUMBER;
        x_approved_flag               VARCHAR(1);
        x_cancel_flag                 VARCHAR(1);
        x_closed_code                 VARCHAR(25);
        x_shipment_type               VARCHAR(25);
        x_temp_count                  NUMBER;
        x_full_name                   VARCHAR2(240)                                           := NULL; -- Bug 2392074
        profile_user_id               NUMBER                                                  := -1;
        profile_appl_id               NUMBER                                                  := -1;
        profile_resp_id               NUMBER                                                  := -1;
        defined                       BOOLEAN;
        x_sob_id                      NUMBER                                                  := NULL;
        x_rate                        NUMBER;
        x_allow_rate_override         VARCHAR2(1);

/********************************************************************/
        CURSOR po_correct(
            v_parent_trx_id      NUMBER,
            v_to_organization_id NUMBER
        ) IS
            SELECT   rt.po_line_location_id,
                     rt.po_header_id,
                     rt.po_line_id,
                     rt.transaction_id rcv_transaction_id,
                     rt.parent_transaction_id grand_parent_txn_id,
                     poh.segment1 document_num,
                     pol.line_num line_number,
                     rt.transaction_date transaction_date,
                     rt.transaction_type parent_transaction_type,
                     rt.amount,
                     rt.organization_id,
                     rt.location_id,
                     rsl.job_id,
                     rt.deliver_to_person_id,
                     rt.deliver_to_location_id,
                     rt.po_distribution_id,
                     rt.destination_type_code,
                     rsl.ussgl_transaction_code
            FROM     rcv_transactions rt,
                     rcv_shipment_lines rsl,
                     po_headers poh,
                     po_lines pol
            WHERE    rt.transaction_id = v_parent_trx_id
            AND      rt.organization_id = NVL(v_to_organization_id, rt.organization_id)
            AND      (   rt.transaction_type IN('RECEIVE', 'TRANSFER', 'ACCEPT', 'REJECT', 'MATCH')
                      OR (    rt.transaction_type IN('RETURN TO VENDOR', 'RETURN TO CUSTOMER')
                          AND NOT EXISTS(SELECT 'rtv to processed matched unordered receipt'
                                         FROM   rcv_transactions rt2,
                                                rcv_transactions rt3
                                         WHERE  rt2.transaction_id = rt.parent_transaction_id
                                         AND    rt2.transaction_type = 'UNORDERED'
                                         AND    rt3.transaction_type = 'MATCH'
                                         AND    rt3.parent_transaction_id = rt2.transaction_id)
                          AND NOT EXISTS(SELECT 'rtv to unprocessed matched unordered receipt'
                                         FROM   rcv_transactions rt2,
                                                rcv_transactions_interface rti
                                         WHERE  rt2.transaction_id = rt.parent_transaction_id
                                         AND    rt2.transaction_type = 'UNORDERED'
                                         AND    rti.transaction_type = 'MATCH'
                                         AND    rti.parent_transaction_id = rt2.transaction_id)
                         )
                      OR (    rt.transaction_type = 'DELIVER'
                          AND NOT(    rt.destination_type_code = 'INVENTORY'
                                  AND rt.source_document_code IN('REQ', 'INVENTORY', 'RMA')))
                      OR (    rt.transaction_type = 'UNORDERED'
                          AND NOT EXISTS(SELECT 'processed matched rows'
                                         FROM   rcv_transactions rt2
                                         WHERE  rt2.parent_transaction_id = rt.transaction_id
                                         AND    rt2.transaction_type = 'MATCH')
                          AND NOT EXISTS(SELECT 'unprocessed matched rows'
                                         FROM   rcv_transactions_interface rti
                                         WHERE  rti.parent_transaction_id = rt.transaction_id
                                         AND    rti.transaction_type = 'MATCH')
                         )
                     )
            AND      NOT EXISTS(SELECT 'purchase order shipment cancelled or fc'
                                FROM   po_line_locations pll
                                WHERE  pll.line_location_id = rt.po_line_location_id
                                AND    (   NVL(pll.cancel_flag, 'N') = 'Y'
                                        OR NVL(pll.closed_code, 'OPEN') = 'FINALLY CLOSED'))
            AND      (rt.shipment_line_id = rsl.shipment_line_id)
            AND      (poh.po_header_id = rt.po_header_id)
            AND      (pol.po_line_id = rt.po_line_id)
            ORDER BY rt.transaction_id;

        CURSOR po_correct_rti(
            v_parent_interface_txn_id NUMBER
        ) IS
            SELECT rti.po_line_location_id,
                   rti.po_header_id,
                   rti.po_line_id,
                   rti.interface_transaction_id rcv_transaction_id,
                   rti.parent_transaction_id grand_parent_txn_id,
                   rti.document_num,
                   rti.document_line_num line_number,
                   rti.transaction_date transaction_date,
                   rti.transaction_type parent_transaction_type,
                   rti.amount,
                   rti.to_organization_id organization_id,
                   rti.location_id,
                   rti.job_id,
                   rti.deliver_to_person_id,
                   rti.deliver_to_location_id,
                   rti.po_distribution_id,
                   rti.destination_type_code,
                   rti.ussgl_transaction_code
            FROM   rcv_transactions_interface rti
            WHERE  interface_transaction_id = v_parent_interface_txn_id;

        x_po_correctrec               po_correct%ROWTYPE;
        x_temp_parent_trx_amt         NUMBER                                                  := 0;
        x_converted_parent_trx_amt    NUMBER                                                  := 0;
        x_temp_convert_parent_trx_amt NUMBER                                                  := 0;
        l_to_organization_id          NUMBER                                                  := 0;
        l_transaction_type            rcv_transactions.transaction_type%TYPE;
        x_temp_already_allocated_qty  NUMBER                                                  := 0;
        derive_values_from_table      BOOLEAN                                                 := FALSE;
        derive_values_from_rti        BOOLEAN                                                 := FALSE;
        already_derived               BOOLEAN                                                 := FALSE;
        cascaded_table_index          NUMBER;
        l_grand_parent_trx_id         rcv_transactions.parent_transaction_id%TYPE;
        temp_index                    NUMBER;
        l_line_loc_id                 po_line_locations.line_location_id%TYPE;
        l_exist                       VARCHAR2(30);
        l_exist1                      VARCHAR2(30);
        l_exist2                      VARCHAR2(30);
        l_destination_type_code       rcv_transactions.destination_type_code%TYPE;
        l_source_document_code        rcv_transactions.source_document_code%TYPE;
        l_time_count                  NUMBER;

        -- <Bug 9342280 : Added for CLM project>
        l_is_clm_po           VARCHAR2(5) := 'N';
        l_partial_funded_flag VARCHAR2(5) := 'N';
        -- <CLM END>
    BEGIN
        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('enter derive_amount ' || x_cascaded_table(n).parent_transaction_id);
        END IF;

        IF (x_cascaded_table(n).parent_transaction_id IS NOT NULL) THEN --{
            already_derived  := TRUE;
        END IF; --}

        IF (    NOT already_derived
            AND (x_cascaded_table(n).parent_interface_txn_id IS NULL)
            AND (x_cascaded_table(n).parent_source_transaction_num IS NOT NULL)) THEN --{
            /* This means that there can be a row in RT with src_txn_id
             * populated or it can be a child.
            */
            BEGIN
                SELECT transaction_id
                INTO   x_cascaded_table(n).parent_transaction_id
                FROM   rcv_transactions
                WHERE  source_transaction_num = x_cascaded_table(n).parent_source_transaction_num;

                already_derived  := TRUE;
            EXCEPTION
                -- Bug 7651646
                WHEN NO_DATA_FOUND THEN
                     rcv_error_pkg.set_error_message('RCV_NO_PARENT_SRC_TRANSACTION');
                     rcv_error_pkg.set_token('VALUE',x_cascaded_table(n).parent_source_transaction_num);
                     x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_error;
                     x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
                     rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);

                WHEN TOO_MANY_ROWS THEN
                     rcv_error_pkg.set_error_message('RCV_DUP_SRC_TRANSACTION');
                     rcv_error_pkg.set_token('VALUE',x_cascaded_table(n).parent_source_transaction_num);
                     x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_error;
                     x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
                     rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);
            END;
        END IF; --}

        IF already_derived THEN --{
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line(' open po_correct table ' || x_cascaded_table(n).parent_transaction_id);
            END IF;

            OPEN po_correct(x_cascaded_table(n).parent_transaction_id, x_cascaded_table(n).to_organization_id);
        END IF; ---}

        IF (NOT already_derived) THEN --{
            derive_parent_id(x_cascaded_table, n);

            /* This means that there was no error in
             * derive_parent_id which means that the
             * this is a child and need to get the values
             * from the rti and not from the plsql table.
            */
            IF (    (x_cascaded_table(n).error_status <> 'E')
                AND (    x_cascaded_table(n).derive = 'Y'
                     AND x_cascaded_table(n).derive_index = 0)) THEN
                /* if derive_values_from_table is true, then we
                 * derive the values from the pl/sql tables later
                 * at the time when we try to see which cursor is open.
                 * We will have x_cascaded_table(n).
                 * parent_interface_txn_id) populated with teh
                 * correct value.
                */
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line(' open correct cursor from rti');
                END IF;

                OPEN po_correct_rti(x_cascaded_table(n).parent_interface_txn_id);
            END IF;
        END IF; --}

/******************************************************************/
--check line amount > 0
        x_progress  := '097';

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('X_progress ' || x_progress);
        END IF;
/* Bug 6610047.
 * To allow corrections to timecards with zero amounts.
 * Commented the validation which checks for zero amount on the correction.

/*      IF     x_cascaded_table(n).error_status IN('S', 'W')
           AND x_cascaded_table(n).amount = 0 THEN --{
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Amount is <= zero. Cascade will fail');
            END IF;

            x_cascaded_table(n).error_status  := 'F';
            rcv_error_pkg.set_error_message('RCV_ENTER_QTY_GT_ZERO', x_cascaded_table(n).error_message);
            rcv_error_pkg.log_interface_error('QUANTITY', FALSE);
        END IF; --} end qty > 0 check
*/
                -- the following steps will create a set of rows linking the line_record with
                -- its corresponding po_line_location rows until the quantity value from
                -- the asn is consumed.  (Cascade)

        /* 2119137 : If the user populates rcv_transactions_interface
        with po_line_id, then ROI errors out with
        RCV_ASN_NO_PO_LINE_LOCATION_ID when the docment_line_num
        is not provided for one time items. Modified the "if" criteria in
        such a way that the ROI validation does'nt error out when
        po_line_id is populated for one time items. */
        x_progress  := '098';

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('X_progress ' || x_progress);
        END IF;

        IF (    (   x_cascaded_table(n).parent_transaction_id IS NOT NULL
                 OR x_cascaded_table(n).parent_interface_txn_id IS NOT NULL)
            AND x_cascaded_table(n).error_status IN('S', 'W')) THEN --{

                                                                    -- Copy record from main table to temp table
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Copy record from main table to temp table');
            END IF;

            current_n                       := 1;
            temp_cascaded_table(current_n)  := x_cascaded_table(n);

            -- Get all rows which meet this condition
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Get all rows which meet this condition');
                asn_debug.put_line('Transaction Type = ' || x_cascaded_table(n).transaction_type);
                asn_debug.put_line('Auto Transact Code = ' || x_cascaded_table(n).auto_transact_code);
            END IF;

            -- Assign shipped amount to remaining amount
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Assign populated amount to remaining amount');
                asn_debug.put_line('Pointer in temp_cascade ' || TO_CHAR(current_n));
            END IF;

            x_remaining_amount              := temp_cascaded_table(current_n).amount;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Have assigned the amount');
            END IF;

            -- Calculate tax_amount_factor for calculating tax_amount for
            -- each cascaded line

            IF NVL(temp_cascaded_table(current_n).tax_amount, 0) <> 0 THEN
                tax_amount_factor  := temp_cascaded_table(current_n).tax_amount / x_remaining_amount;
            ELSE
                tax_amount_factor  := 0;
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Tax Factor ' || TO_CHAR(tax_amount_factor));
                asn_debug.put_line('transaction amount : ' || TO_CHAR(x_remaining_amount));
            END IF;

            x_first_trans                   := TRUE;
            transaction_ok                  := FALSE;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Before starting Cascade');
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Record Count = ' || x_record_count);
            END IF;

            LOOP --{
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Remaining Quantity  ' || TO_CHAR(x_remaining_amount));
                END IF;

                /*
                ** Fetch the appropriate record
                */
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('DEBUG: transaction_type = ' || x_cascaded_table(n).transaction_type);
                END IF;

                IF (po_correct%ISOPEN) THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' fetch po_correct');
                    END IF;

                    FETCH po_correct INTO x_po_correctrec;

                    IF (po_correct%NOTFOUND) THEN
                        lastrecord  := TRUE;
                    END IF;

                    rows_fetched  := po_correct%ROWCOUNT;
                ELSIF(po_correct_rti%ISOPEN) THEN --}{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' fetch po_correct_rti');
                    END IF;

                    FETCH po_correct_rti INTO x_po_correctrec;

                    IF (po_correct_rti%NOTFOUND) THEN
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('correct last row');
                        END IF;

                        lastrecord  := TRUE;
                    END IF;

                    rows_fetched  := po_correct_rti%ROWCOUNT;
                ELSIF(temp_cascaded_table(current_n).derive = 'Y') THEN --}{
                    /* GET VALUES FROM THE PLSQL TABLE */
                    /* Populate x_po_correctrec with these values since
                     * we are using x_po_correctrec later.
                     * We have temp_cascaded_table(current_n).
                     * parent_interface_txn_id) populated with
                     * with the correct value. Also we have cascaded_table_index
                     * with the correct pl/sql table index number;
                    */
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' fetch pl/sql table');
                    END IF;

                    temp_index                               := temp_cascaded_table(current_n).derive_index;
                    x_po_correctrec.po_line_location_id      := x_cascaded_table(temp_index).po_line_location_id;
                    x_po_correctrec.po_header_id             := x_cascaded_table(temp_index).po_header_id;
                    x_po_correctrec.po_line_id               := x_cascaded_table(temp_index).po_line_id;
                    x_po_correctrec.grand_parent_txn_id      := x_cascaded_table(temp_index).parent_transaction_id;
                    x_po_correctrec.document_num             := x_cascaded_table(temp_index).document_num;
                    x_po_correctrec.line_number              := x_cascaded_table(temp_index).document_line_num;
                    x_po_correctrec.transaction_date         := x_cascaded_table(temp_index).transaction_date;
                    x_po_correctrec.parent_transaction_type  := x_cascaded_table(temp_index).transaction_type;
                    x_po_correctrec.amount                   := x_cascaded_table(temp_index).amount;
                    x_po_correctrec.organization_id          := x_cascaded_table(temp_index).to_organization_id;
                    x_po_correctrec.location_id              := x_cascaded_table(temp_index).location_id;
                    x_po_correctrec.job_id                   := x_cascaded_table(temp_index).job_id;
                    x_po_correctrec.deliver_to_person_id     := x_cascaded_table(temp_index).deliver_to_person_id;
                    x_po_correctrec.deliver_to_location_id   := x_cascaded_table(temp_index).deliver_to_location_id;
                    x_po_correctrec.po_distribution_id       := x_cascaded_table(temp_index).po_distribution_id;
                    x_po_correctrec.destination_type_code    := x_cascaded_table(temp_index).destination_type_code;
                    x_po_correctrec.ussgl_transaction_code   := x_cascaded_table(temp_index).ussgl_transaction_code;
                    /* Also fetch parent transaction type and grand parent trx id into
                     * the correct variables.
                    */
                    rows_fetched                             := 1;
                    lastrecord                               := TRUE;
                END IF; --}

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Correct Rows fetched ' || TO_CHAR(rows_fetched));
                    asn_debug.put_line('po_line_id  ' || TO_CHAR(x_po_correctrec.po_line_id));
                    asn_debug.put_line('po_dist  ' || TO_CHAR(x_po_correctrec.po_distribution_id));
                    asn_debug.put_line('correct remainaing amount ' || x_remaining_amount);
                END IF;

                /* Support for RATE based from OTL */
                IF (    x_cascaded_table(n).value_basis = 'RATE'
                    AND x_cascaded_table(n).purchase_basis = 'TEMP LABOR') THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Rate/Temp Labor');
                    END IF;

                    /* Bug 3648861.
                     * The where condition has
                     * and pol.po_line_id=po_line_id.
                     * It should be
                     * and pol.po_line_id=x_cascaded_table(n).po_line_id
                     * Changed the condition.
                    */
                    SELECT COUNT(*)
                    INTO   l_time_count
                    FROM   hxc_time_building_blocks bb,
                           po_lines pol
                    WHERE  bb.time_building_block_id = x_cascaded_table(n).timecard_id
                    AND    bb.object_version_number = x_cascaded_table(n).timecard_ovn
                    AND    bb.SCOPE = 'TIMECARD'
                    AND    bb.resource_type = 'PERSON'
                    AND    bb.resource_id IN(SELECT person_id
                                             FROM   per_all_assignments_f
                                             WHERE  assignment_type = 'C')
                    AND    pol.po_line_id = x_cascaded_table(n).po_line_id
                    AND    pol.order_type_lookup_code = 'RATE'
                    AND    pol.purchase_basis = 'TEMP LABOR';

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('count ' || l_time_count);
                    END IF;

                    IF (l_time_count = 0) THEN --{
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('We do not support RATE/TEMP LABOR through ROI unless it comes through OTL');
                        END IF;

                        x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                        rcv_error_pkg.set_error_message('RCV_NO_RATE_UNLESS_OTL', x_cascaded_table(n).error_message);
                        rcv_error_pkg.log_interface_error('TRANSACTION_TYPE', FALSE);
                    END IF; --}
                END IF; --}

                IF (lastrecord) THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Hit exit condition');
                    END IF;

                    IF NOT x_first_trans THEN
                        -- x_first_trans has been reset which means some cascade has
                        -- happened. Otherwise current_n = 1
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('current_n before is ' || current_n);
                        END IF;

                        current_n  := current_n - 1;
                    END IF;

                    -- do the tolerance act here
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Temp table pointer ' || TO_CHAR(current_n));
                        asn_debug.put_line('Check which condition has occured');
                    END IF;

                    -- lastrecord...we have run out of rows and we still have quantity to allocate
                    /* Do abs(x_remaining_quantity) since it can be a negative
                     * or positive correction.
                    */
                    IF ABS(x_remaining_amount) > 0 THEN --{
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('There is amount remaining ');
                            asn_debug.put_line('tolerable amount now in plsql table ' || temp_cascaded_table(current_n).amount);
                            asn_debug.put_line('rows_fetched ' || rows_fetched);
                        END IF;

                        IF NOT x_first_trans THEN
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('not fisrt txn');
                            END IF;
                        END IF;

                        IF     rows_fetched > 0
                           AND NOT x_first_trans THEN --{
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line(' inside transaction_type ' || x_po_correctrec.parent_transaction_type);
                            END IF;

                            IF (SIGN(x_cascaded_table(current_n).amount) = 1) THEN --{
                                IF (x_po_correctrec.parent_transaction_type IN('RECEIVE', 'MATCH')) THEN --{
                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('Need to check amount tolerances');
                                    END IF;

                                    SELECT NVL(po_line_locations.qty_rcv_exception_code, 'NONE')
                                    INTO   x_qty_rcv_exception_code
                                    FROM   po_line_locations
                                    WHERE  line_location_id = temp_cascaded_table(current_n).po_line_location_id;

                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('Qty tolerance exception code ' || NVL(x_qty_rcv_exception_code, 'NONE1'));
                                    END IF;

                                    IF x_qty_rcv_exception_code IN('NONE', 'WARNING') THEN --{
                                        /* Bug# 1807842 */
                                        IF (temp_cascaded_table(current_n).amount <= x_converted_trx_amt) THEN --{
                                            IF (g_asn_debug = 'Y') THEN
                                                asn_debug.put_line('Tolerable quantity ' || TO_CHAR(x_converted_trx_amt));
                                                asn_debug.put_line('Current quantity ' || TO_CHAR(temp_cascaded_table(current_n).amount));
                                                asn_debug.put_line('Assign remaining amount ' || TO_CHAR(x_remaining_amount) || ' to last record');
                                            END IF;

                                            temp_cascaded_table(current_n).amount  := temp_cascaded_table(current_n).amount + x_remaining_amount;
                                        END IF; /* Bug# 1807842 */ --}

                                        temp_cascaded_table(current_n).tax_amount  := ROUND(temp_cascaded_table(current_n).amount * tax_amount_factor, 6);

                                        IF (g_asn_debug = 'Y') THEN
                                            asn_debug.put_line('Current amount ' || TO_CHAR(temp_cascaded_table(current_n).amount));
                                            asn_debug.put_line('Current Tax Amount ' || TO_CHAR(temp_cascaded_table(current_n).tax_amount));
                                        END IF;

                                        -- <Bug 9342280 : Added for CLM project>
                                        get_clm_info(     'AMOUNT',
                                                          x_cascaded_table,
                                                          n,
                                                          l_is_clm_po,
                                                          l_partial_funded_flag);

                                        IF l_is_clm_po = 'Y' AND l_partial_funded_flag = 'Y' THEN

                                           x_qty_rcv_exception_code := 'REJECT';

                                        END IF;
                                        --<END CLM>

                                        IF x_qty_rcv_exception_code = 'WARNING' THEN --{
                                            IF (g_asn_debug = 'Y') THEN
                                                asn_debug.put_line('IN WARNING');
                                            END IF;

                                            temp_cascaded_table(current_n).error_status   := 'W';
                                            temp_cascaded_table(current_n).error_message  := 'RCV_ALL_AMT_OVER_TOLERANCE';

                                            IF (g_asn_debug = 'Y') THEN
                                                asn_debug.put_line('Group Id ' || TO_CHAR(temp_cascaded_table(current_n).GROUP_ID));
                                                asn_debug.put_line('Header Interface Id ' || TO_CHAR(temp_cascaded_table(current_n).header_interface_id));
                                                asn_debug.put_line('IN Trans Id ' || TO_CHAR(temp_cascaded_table(current_n).interface_transaction_id));
                                            END IF;

                                            x_cascaded_table(n).error_status              := rcv_error_pkg.g_ret_sts_warning;
                                            rcv_error_pkg.set_error_message('RCV_ALL_AMT_OVER_TOLERANCE', x_cascaded_table(n).error_message);
                                            rcv_error_pkg.set_token('AMT_A', temp_cascaded_table(current_n).amount);
                                            rcv_error_pkg.set_token('AMT_B', temp_cascaded_table(current_n).amount - x_remaining_amount);
                                            rcv_error_pkg.log_interface_warning('AMOUNT');

                                            IF (g_asn_debug = 'Y') THEN
                                                asn_debug.put_line('Error Status ' || temp_cascaded_table(current_n).error_status);
                                                asn_debug.put_line('Error message ' || temp_cascaded_table(current_n).error_message);
                                                asn_debug.put_line('Need to insert into po_interface_errors');
                                            END IF;
                                        END IF; --} matches x_qty_rcv_exception_code = 'WARNING'

                                        IF (g_asn_debug = 'Y') THEN
                                            asn_debug.put_line('Current quantity ' || TO_CHAR(temp_cascaded_table(current_n).amount));
                                            asn_debug.put_line('Current Tax Amount ' || TO_CHAR(temp_cascaded_table(current_n).tax_amount));
                                        END IF;
                                    END IF; --}
                                END IF; --}

                                IF (   (    (x_po_correctrec.parent_transaction_type IN('RECEIVE', 'MATCH'))
                                        AND x_qty_rcv_exception_code = 'REJECT')
                                    OR (x_po_correctrec.parent_transaction_type NOT IN('RECEIVE', 'MATCH'))) THEN --{
                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('Extra amount ' || TO_CHAR(x_remaining_amount));
                                    END IF;

                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('delete the temp table ');
                                    END IF;

                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;

                                    -- <Bug 9342280 : Added for CLM project>
                                    IF (x_po_correctrec.parent_transaction_type IN ('RECEIVE', 'MATCH', 'DELIVER')) AND
                                       (l_is_clm_po = 'Y' AND l_partial_funded_flag = 'Y') THEN

                                    rcv_error_pkg.set_error_message('RCV_TRX_QTY_EXCEEDS_CLM_FUNDED', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('QTY_A',temp_cascaded_table(current_n).amount);
                                    rcv_error_pkg.set_token('QTY_B',temp_cascaded_table(current_n).amount - x_remaining_amount);

                                    ELSE
                                    -- <CLM END>

                                    rcv_error_pkg.set_error_message('RCV_CORRECT_AMT_OVER_TOLERANCE', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.set_token('AMT_A', temp_cascaded_table(current_n).amount);
                                    rcv_error_pkg.set_token('AMT_B', temp_cascaded_table(current_n).amount - x_remaining_amount);

                                    END IF; -- <Bug 9342280 : Added for CLM project>

                                    rcv_error_pkg.log_interface_error('AMOUNT', FALSE);
                                    temp_cascaded_table.DELETE;

                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('mark the actual table with error status');
                                        asn_debug.put_line('Error Status ' || x_cascaded_table(n).error_status);
                                        asn_debug.put_line('Error message ' || x_cascaded_table(n).error_message);
                                    END IF;

                                    IF (g_asn_debug = 'Y') THEN
                                        asn_debug.put_line('Need to insert a row into po_interface_errors');
                                    END IF;
                                END IF; --} matches if(none/warning) and elseif(reject)
                            END IF; --}

                            IF (SIGN(x_cascaded_table(current_n).amount) = -1) THEN --{
                                /* for correct,accept an reject type we dont have the
                            * tolerance check. Hence error out.
                             * We cannot correct quantities more than that was received.
                            */
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line(' in correct extra amount ' || TO_CHAR(x_remaining_amount));
                                    asn_debug.put_line('delete the temp table ');
                                END IF;

                                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                rcv_error_pkg.set_error_message('RCV_CORRECT_AMT_OVER_TOLERANCE', x_cascaded_table(n).error_message);
                                rcv_error_pkg.set_token('AMT_A', temp_cascaded_table(current_n).amount);
                                rcv_error_pkg.set_token('AMT_B', temp_cascaded_table(current_n).amount - x_remaining_amount);
                                rcv_error_pkg.log_interface_error('AMOUNT', FALSE);
                                temp_cascaded_table.DELETE;

                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('mark the actual table with error status');
                                    asn_debug.put_line('Error Status ' || x_cascaded_table(n).error_status);
                                    asn_debug.put_line('Error message ' || x_cascaded_table(n).error_message);
                                    asn_debug.put_line('Need to insert a row into po_interface_errors for correct');
                                END IF;
                            END IF; --}
                        ELSE --}{ else for rows fetched = 0 OR x_first_trans = true
                            IF rows_fetched = 0 THEN
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('No rows were retrieved from cursor.');
                                END IF;
                            ELSIF x_first_trans THEN
                                IF (g_asn_debug = 'Y') THEN
                                    asn_debug.put_line('No rows were cascaded');
                                END IF;
                            END IF;

                            x_temp_count                      := 1;
                            x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;

                            IF (x_cascaded_table(n).parent_transaction_id IS NOT NULL) THEN --{
                                /* Give an error just like it is done for the
                                 * the receipt transaction;
                                */
                                SELECT parent_transaction_id,
                                       transaction_type,
                                       po_line_location_id,
                                       destination_type_code,
                                       source_document_code
                                INTO   l_grand_parent_trx_id,
                                       l_transaction_type,
                                       l_line_loc_id,
                                       l_destination_type_code,
                                       l_source_document_code
                                FROM   rcv_transactions rt
                                WHERE  rt.transaction_id = temp_cascaded_table(current_n).parent_transaction_id;

                                IF (l_transaction_type = 'DELIVER') THEN --{
                                    IF (   l_destination_type_code = 'INVENTORY'
                                        OR l_source_document_code IN('REQ', 'INVENTORY', 'RMA')) THEN
                                        x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                        rcv_error_pkg.set_error_message('RCV_INVAL_SOURCE_DOC_FOR_DEL', x_cascaded_table(n).error_message);
                                        rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);
                                    END IF;
                                END IF; --}

                                IF (l_transaction_type = 'UNORDERED') THEN --{
                                    SELECT MAX('record_exist')
                                    INTO   l_exist
                                    FROM   rcv_transactions rt2
                                    WHERE  rt2.parent_transaction_id = temp_cascaded_table(current_n).parent_transaction_id
                                    AND    rt2.transaction_type = 'MATCH';

                                    SELECT MAX('record_exist')
                                    INTO   l_exist1
                                    FROM   rcv_transactions_interface rti
                                    WHERE  rti.parent_transaction_id = temp_cascaded_table(current_n).parent_transaction_id
                                    AND    rti.transaction_type = 'MATCH';

                                    IF l_exist = 'record_exist' THEN --{
                                        x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                        rcv_error_pkg.set_error_message('RCV_PROC_MATCH_UNORDER', x_cascaded_table(n).error_message);
                                        rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);
                                    END IF; --}

                                    IF l_exist1 = 'record_exist' THEN --{
                                        x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                        rcv_error_pkg.set_error_message('RCV_UNPROC_MATCH_UNORDER', x_cascaded_table(n).error_message);
                                        rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);
                                    END IF; --}
                                END IF; --}

                                IF (l_transaction_type = 'RETURN TO VENDOR') THEN --{
                                    SELECT MAX('record_exist')
                                    INTO   l_exist
                                    FROM   rcv_transactions rt2,
                                           rcv_transactions rt3
                                    WHERE  rt2.transaction_id = l_grand_parent_trx_id
                                    AND    rt2.transaction_type = 'UNORDERED'
                                    AND    rt3.transaction_type = 'MATCH'
                                    AND    rt3.parent_transaction_id = rt2.transaction_id;

                                    SELECT MAX('record_exist')
                                    INTO   l_exist1
                                    FROM   rcv_transactions rt2,
                                           rcv_transactions_interface rti
                                    WHERE  rt2.transaction_id = l_grand_parent_trx_id
                                    AND    rt2.transaction_type = 'UNORDERED'
                                    AND    rti.transaction_type = 'MATCH'
                                    AND    rti.parent_transaction_id = rt2.transaction_id;

                                    IF l_exist = 'record_exist' THEN --{
                                        x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                        rcv_error_pkg.set_error_message('RCV_RET_PROC_MATCH_UNORDER', x_cascaded_table(n).error_message);
                                        rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);
                                    END IF; --}

                                    IF l_exist1 = 'record_exist' THEN --{
                                        x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                        rcv_error_pkg.set_error_message('RCV_RET_UNPROC_MATCH_UNORDER', x_cascaded_table(n).error_message);
                                        rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);
                                    END IF; --}
                                END IF; --}

                                SELECT MAX('record_exist')
                                INTO   l_exist2
                                FROM   po_line_locations pll
                                WHERE  pll.line_location_id = l_line_loc_id
                                AND    (   NVL(pll.cancel_flag, 'N') = 'Y'
                                        OR NVL(pll.closed_code, 'OPEN') = 'FINALLY CLOSED');

                                IF l_exist2 = 'record_exist' THEN
                                    x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;
                                    rcv_error_pkg.set_error_message('RCV_PO_SHIPMENT_CANCELLED', x_cascaded_table(n).error_message);
                                    rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);
                                END IF;
                            END IF; --}

                                    -- Delete the temp_cascaded_table just to be sure

                            temp_cascaded_table.DELETE;
                        END IF; --}
                    ELSE -- }{
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Remaining amount is zero ' || TO_CHAR(x_remaining_amount));
                            asn_debug.put_line('Return the cascaded rows back to the calling procedure');
                        END IF;
                    END IF; --} ends the check for whether last record has been reached

                            -- close cursors

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Close cursors shipments, count_shipments, distributions, count_disributions ' || current_n);
                    END IF;

                    IF po_correct%ISOPEN THEN
                        CLOSE po_correct;
                    END IF;

                    IF po_correct_rti%ISOPEN THEN
                        CLOSE po_correct_rti;
                    END IF;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('before exit current_n is ' || current_n);
                    END IF;

                    EXIT;
                END IF; --} matches lastrecord or x_remaining_quantity <= 0

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line(' Entering amount calculation for correct');
                END IF;

                /* If destination_type_code is inventory then we need to make
                 * sure that we can correct this qty since it might have been
                 * already reserved in inventory.
                */
                IF (x_cascaded_table(n).destination_type_code = 'INVENTORY') THEN --{
                    rcv_roi_return.derive_inv_qty(x_cascaded_table, n);

                    IF (x_cascaded_table(n).error_status = 'E') THEN
                        /* Exit from loop */
                        EXIT;
                    END IF;
                END IF; --}

                insert_into_table      := FALSE;
                already_allocated_amt  := 0;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('calling Correct get_available_amount ' || x_po_correctrec.parent_transaction_type);
                END IF;

                get_interface_available_amt(temp_cascaded_table,
                                            current_n,
                                            x_converted_parent_trx_amt
                                           );

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('correct interface_available_amt ' || x_converted_parent_trx_amt);
                END IF;

                /* x_converted_parent_trx_qty will be 0 when this is not a child
                 * transaction to any rti row. Also for correct, grand parent
                 * may already be processed and for positive correction we
                 * might need to get the quantity from the grand parent.
                */
                IF (x_converted_parent_trx_amt = 0) THEN --{
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('interface amount is 0');
                    END IF;

                    IF (SIGN(temp_cascaded_table(current_n).amount) = -1) THEN --{
                        asn_debug.put_line('Before call to get_available_amt for negative correction');
                        rcv_quantities_s.get_available_amount('CORRECT',
                                                              x_po_correctrec.rcv_transaction_id,
                                                              'VENDOR',
                                                              x_po_correctrec.parent_transaction_type,
                                                              NULL,
                                                              'NEGATIVE',
                                                              x_converted_parent_trx_amt,
                                                              x_tolerable_amt
                                                             );
                    ELSE --}{
                        IF (x_po_correctrec.parent_transaction_type NOT IN('RECEIVE', 'MATCH', 'UNORDERED')) THEN
                            l_grand_parent_trx_id  := x_po_correctrec.grand_parent_txn_id;
                            asn_debug.put_line('Parent_trx not in receive and gp is ' || l_grand_parent_trx_id);
                        ELSIF(x_po_correctrec.parent_transaction_type IN('MATCH', 'RECEIVE')) THEN
                            IF (temp_cascaded_table(current_n).parent_transaction_id IS NOT NULL) THEN
                                l_grand_parent_trx_id  := x_po_correctrec.po_line_location_id;
                                asn_debug.put_line('Parent_trx in receive and parent_trx_id not null gp is ' || l_grand_parent_trx_id);
                            ELSIF(temp_cascaded_table(current_n).parent_interface_txn_id IS NOT NULL) THEN
                                /* We would have the value derived in the x_cascaded_table
                                 * but not have inserted it back into rti.
                                */
                                l_grand_parent_trx_id  := temp_cascaded_table(current_n).po_line_location_id;
                                asn_debug.put_line('Parent_trx in receive and parent_inter_trx_id not null gp is ' || l_grand_parent_trx_id);
                            END IF;
                        ELSIF(x_po_correctrec.parent_transaction_type = 'UNORDERED') THEN
                            l_grand_parent_trx_id  := x_po_correctrec.rcv_transaction_id;
                        END IF;

                        IF (l_grand_parent_trx_id IS NOT NULL) THEN
                            asn_debug.put_line('gp before get_avail_amt for +ve corr' || l_grand_parent_trx_id);
                            rcv_quantities_s.get_available_amount('CORRECT',
                                                                  x_po_correctrec.rcv_transaction_id,
                                                                  'VENDOR',
                                                                  x_po_correctrec.parent_transaction_type,
                                                                  l_grand_parent_trx_id,
                                                                  'POSITIVE',
                                                                  x_converted_parent_trx_amt,
                                                                  x_tolerable_amt
                                                                 );
                        END IF;
                    END IF; --}
                END IF; --} -- interface_available_qty is 0.

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('amount from GET_AVAILABLE_AMOUNT for correct is ' || x_converted_parent_trx_amt);
                END IF;

                IF (x_remaining_amount = 0) THEN
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line(' correct Need an error message in the interface tables');
                    END IF;
                ELSE
                    /* Converted successfully and have some quantity on which we can act */
                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Converted trx amt that is available ' || x_converted_parent_trx_amt);
                        asn_debug.put_line('Remaining amt that is available ' || x_remaining_amount);
                    END IF;

                    IF (    (rows_fetched = x_record_count)
                        AND (SIGN(temp_cascaded_table(current_n).amount) = 1)) THEN --{
                        x_converted_trx_amt  := x_tolerable_amt;

                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Last Row : ' || TO_CHAR(x_converted_trx_amt));
                        END IF;
                    END IF; --}

                    IF (x_converted_parent_trx_amt > 0) THEN --{
                        /* Compare with abs(x_remaining_qty) here since we want
                         * to make sure that the qty we have is greater than
                         * the available qty irrespective of whether this is
                         * positive or negative correction.
                        */
                        IF (x_converted_parent_trx_amt < ABS(x_remaining_amount)) THEN --{
                            /* Total quantity available to correct is less than the qty
                             * that the user wants to correct. Hence we would error out but
                             * to keep the old code we will get the remaining code here and
                             * error out later.
                             */
                            x_remaining_amount          := x_remaining_amount - SIGN(temp_cascaded_table(current_n).amount) * x_converted_parent_trx_amt;
                            x_converted_parent_trx_amt  := SIGN(temp_cascaded_table(current_n).amount) * x_converted_parent_trx_amt;

                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('remaning amt after allocation is : ' || TO_CHAR(x_remaining_amount));
                            END IF;

                            insert_into_table           := TRUE;
                        ELSE --}{
                            IF (g_asn_debug = 'Y') THEN
                                asn_debug.put_line('We are in >= amount branch ');
                            END IF;

                            x_converted_parent_trx_amt  := x_remaining_amount;
                            insert_into_table           := TRUE;
                            x_remaining_amount          := 0;
                        END IF; --} /* if (x_converted_parent_trx_qty < x_remaining_quantity) then */
                    ELSE /* x_converted_parent_trx_qty >0 */ --}{

                         -- so that the row can be used based on qty tolerance
                                                      -- checks
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('amount is less then 0 but last record');
                        END IF;

                        insert_into_table    := TRUE;
                        x_converted_trx_amt  := 0;
                    END IF; /*x_converted_parent_trx_qty >0 */ --}
                END IF; --} just added this

                /* Converted amt successfully and we have some amount on which we can act */
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Transaction amt is ' || x_converted_parent_trx_amt);
                END IF;

                IF insert_into_table THEN --{
                    IF (x_first_trans) THEN --{
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('First Time ' || TO_CHAR(current_n));
                        END IF;

                        x_first_trans  := FALSE;
                    ELSE --}{
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Next Time ' || TO_CHAR(current_n));
                        END IF;

                        temp_cascaded_table(current_n)  := temp_cascaded_table(current_n - 1);
                    END IF; --}

                    temp_cascaded_table(current_n).po_header_id         := x_po_correctrec.po_header_id;
                    temp_cascaded_table(current_n).po_line_id           := x_po_correctrec.po_line_id;
                    temp_cascaded_table(current_n).po_line_location_id  := x_po_correctrec.po_line_location_id;
                    temp_cascaded_table(current_n).po_distribution_id   := x_po_correctrec.po_distribution_id;
                    temp_cascaded_table(current_n).amount               := x_converted_parent_trx_amt;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Transaction amt ' || temp_cascaded_table(current_n).amount);
                    END IF;

                    current_n                                           := current_n + 1;

                    IF (g_asn_debug = 'Y') THEN
                        asn_debug.put_line('Increment pointer by 1 ' || TO_CHAR(current_n));
                    END IF;
                END IF; --}
            END LOOP; --}
        ELSE   --} {
             -- error_status and error_message are set after validate_quantity_shipped
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('No po_header_id/item_id ');
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Status = ' || x_cascaded_table(n).error_status);
            END IF;

            IF x_cascaded_table(n).error_status IN('S', 'W', 'F') THEN --{
                x_cascaded_table(n).error_status  := rcv_error_pkg.g_ret_sts_error;

                IF (x_cascaded_table(n).error_message IS NULL) THEN
                    rcv_error_pkg.set_error_message('RCV_NO_PARENT_TRANSACTION', x_cascaded_table(n).error_message);
                END IF;

                rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID');
            END IF; --}

            RETURN;
        END IF; -- } of (asn quantity_shipped was valid)

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('before closing cursors current_n is ' || temp_cascaded_table.COUNT);
        END IF;

        IF po_correct%ISOPEN THEN
            CLOSE po_correct;
        END IF;

        IF po_correct_rti%ISOPEN THEN
            CLOSE po_correct_rti;
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Exit derive_correction_line_amt');
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Exception in derive_correction_line_amt ');
            END IF;

            IF po_correct%ISOPEN THEN
                CLOSE po_correct;
            END IF;

            IF po_correct_rti%ISOPEN THEN
                CLOSE po_correct_rti;
            END IF;

            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('derive_correction_line_amt', x_progress);
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_error('TRANSACTIONS_INTERFACE_ID', FALSE);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line(TO_CHAR(n));
                asn_debug.put_line(SQLERRM);
                asn_debug.put_line('error ' || x_progress);
            END IF;
    END derive_correction_line_amt;

    PROCEDURE default_vendor_correct(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        p_trx_record            rcv_roi_header_common.common_default_record_type;

        CURSOR po_correct(
            v_parent_trx_id NUMBER
        ) IS
            SELECT   rt.po_revision_num,
                     rsl.item_description,
                     rt.po_release_id,
                     rt.location_id loc_id,
                     rt.organization_id,
                     rt.routing_header_id,
                     rt.destination_type_code,
                     rt.destination_context,
                     rt.inspection_status_code,
                     rt.currency_code,
                     rt.currency_conversion_rate,
                     rt.currency_conversion_type,
                     rt.currency_conversion_date,
                     rt.location_id,
                     rt.shipment_header_id,
                     rt.shipment_line_id,
                     rsl.category_id,
                     rt.vendor_id,
                     rt.vendor_site_id,
                     rt.po_unit_price,
                     rt.movement_id,
                     rt.deliver_to_person_id,
                     rt.deliver_to_location_id,
                     rt.subinventory,
                     rt.lpn_id,
                     rt.transfer_lpn_id,
                     rt.oe_order_header_id,
                     rt.oe_order_line_id,
                     rt.customer_id,
                     rt.customer_site_id,
                     rt.source_document_code,
                     rt.job_id
            FROM     rcv_transactions rt,
                     rcv_shipment_lines rsl
            WHERE    rt.transaction_id = v_parent_trx_id
            AND      (   rt.transaction_type IN('RECEIVE', 'TRANSFER', 'ACCEPT', 'REJECT', 'MATCH')
                      OR (    rt.transaction_type IN('RETURN TO VENDOR', 'RETURN TO CUSTOMER')
                          AND NOT EXISTS(SELECT 'rtv to processed matched unordered receipt'
                                         FROM   rcv_transactions rt2,
                                                rcv_transactions rt3
                                         WHERE  rt2.transaction_id = rt.parent_transaction_id
                                         AND    rt2.transaction_type = 'UNORDERED'
                                         AND    rt3.transaction_type = 'MATCH'
                                         AND    rt3.parent_transaction_id = rt2.transaction_id)
                          AND NOT EXISTS(SELECT 'rtv to unprocessed matched unordered receipt'
                                         FROM   rcv_transactions rt2,
                                                rcv_transactions_interface rti
                                         WHERE  rt2.transaction_id = rt.parent_transaction_id
                                         AND    rt2.transaction_type = 'UNORDERED'
                                         AND    rti.transaction_type = 'MATCH'
                                         AND    rti.parent_transaction_id = rt2.transaction_id)
                         )
                      OR (    rt.transaction_type = 'DELIVER'
                          AND NOT(    rt.destination_type_code = 'INVENTORY'
                                  AND rt.source_document_code IN('REQ', 'INVENTORY')))
                      OR (    rt.transaction_type = 'UNORDERED'
                          AND NOT EXISTS(SELECT 'processed matched rows'
                                         FROM   rcv_transactions rt2
                                         WHERE  rt2.parent_transaction_id = rt.transaction_id
                                         AND    rt2.transaction_type = 'MATCH')
                          AND NOT EXISTS(SELECT 'unprocessed matched rows'
                                         FROM   rcv_transactions_interface rti
                                         WHERE  rti.parent_transaction_id = rt.transaction_id
                                         AND    rti.transaction_type = 'MATCH')
                         )
                     )
            AND      NOT EXISTS(SELECT 'purchase order shipment cancelled or fc'
                                FROM   po_line_locations pll
                                WHERE  pll.line_location_id = rt.po_line_location_id
                                AND    (   NVL(pll.cancel_flag, 'N') = 'Y'
                                        OR NVL(pll.closed_code, 'OPEN') = 'FINALLY CLOSED'))
            AND      (rt.shipment_line_id = rsl.shipment_line_id)
            ORDER BY rt.transaction_id;

        CURSOR po_correct_rti(
            v_parent_inter_trx_id NUMBER
        ) IS
            SELECT rti.po_revision_num,
                   rti.item_description,
                   rti.po_release_id,
                   rti.location_id loc_id,
                   rti.to_organization_id organization_id,
                   rti.routing_header_id,
                   rti.destination_type_code,
                   rti.destination_context,
                   rti.inspection_status_code,
                   rti.currency_code,
                   rti.currency_conversion_rate,
                   rti.currency_conversion_type,
                   rti.currency_conversion_date,
                   rti.location_id,
                   rti.shipment_header_id,
                   rti.shipment_line_id,
                   rti.category_id,
                   rti.vendor_id,
                   rti.vendor_site_id,
                   rti.po_unit_price,
                   rti.movement_id,
                   rti.deliver_to_person_id,
                   rti.deliver_to_location_id,
                   rti.subinventory,
                   rti.lpn_id,
                   rti.transfer_lpn_id,
                   rti.oe_order_header_id,
                   rti.oe_order_line_id,
                   rti.customer_id,
                   rti.customer_site_id,
                   rti.source_document_code,
                   rti.job_id
            FROM   rcv_transactions_interface rti
            WHERE  interface_transaction_id = v_parent_inter_trx_id;

        default_po_correct_info po_correct%ROWTYPE;
        x_progress              VARCHAR2(3);
        x_locator_control       NUMBER;
        x_default_subinventory  VARCHAR2(10);
        x_default_locator_id    NUMBER;
        x_success               BOOLEAN;
        x_tax_name              VARCHAR2(50); -- Bug 6331613
        x_vendor_site_id        NUMBER;
        x_vendor_site_code      VARCHAR2(20);
        l_project_id            NUMBER;
        l_task_id               NUMBER;
        l_locator_id            NUMBER;
        temp_index              NUMBER;
        lpn_error               NUMBER                                           := 0;
    BEGIN
        p_trx_record.destination_type_code           := x_cascaded_table(n).destination_type_code;
        p_trx_record.transaction_type                := x_cascaded_table(n).transaction_type;
        p_trx_record.processing_mode_code            := x_cascaded_table(n).processing_mode_code;
        p_trx_record.processing_status_code          := x_cascaded_table(n).processing_status_code;
        p_trx_record.transaction_status_code         := x_cascaded_table(n).transaction_status_code;
        p_trx_record.auto_transact_code              := x_cascaded_table(n).auto_transact_code;
        rcv_roi_header_common.commondefaultcode(p_trx_record);
        x_cascaded_table(n).destination_type_code    := p_trx_record.destination_type_code;
        x_cascaded_table(n).transaction_type         := p_trx_record.transaction_type;
        x_cascaded_table(n).processing_mode_code     := p_trx_record.processing_mode_code;
        x_cascaded_table(n).processing_status_code   := p_trx_record.processing_status_code;
        x_cascaded_table(n).transaction_status_code  := p_trx_record.transaction_status_code;
        x_cascaded_table(n).auto_transact_code       := p_trx_record.auto_transact_code;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Enter Default for Correct transaction');
            asn_debug.put_line('quantity ' || x_cascaded_table(n).quantity);
        END IF;

        IF x_cascaded_table(n).source_document_code IS NULL THEN
            IF x_cascaded_table(n).receipt_source_code = 'CUSTOMER' THEN
                x_cascaded_table(n).source_document_code  := 'RMA';
            ELSE
                x_cascaded_table(n).source_document_code  := 'PO';
            END IF;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Defaulting SOURCE_DOCUMENT_CODE ' || x_cascaded_table(n).source_document_code);
            END IF;
        END IF;

        IF (x_cascaded_table(n).derive = 'Y') THEN --{
            IF (x_cascaded_table(n).derive_index <> 0) THEN --{
                NULL;
                /* Get the values from pl/sql table */
                temp_index                                    := x_cascaded_table(n).derive_index;
                x_cascaded_table(n).po_revision_num           := x_cascaded_table(temp_index).po_revision_num;
                x_cascaded_table(n).item_description          := x_cascaded_table(temp_index).item_description;
                x_cascaded_table(n).destination_type_code     := x_cascaded_table(temp_index).destination_type_code;
                x_cascaded_table(n).destination_context       := x_cascaded_table(temp_index).destination_context;
                x_cascaded_table(n).inspection_status_code    := x_cascaded_table(temp_index).inspection_status_code;
                x_cascaded_table(n).po_release_id             := x_cascaded_table(temp_index).po_release_id;
                x_cascaded_table(n).to_organization_id        := x_cascaded_table(temp_index).to_organization_id;
                x_cascaded_table(n).from_organization_id      := x_cascaded_table(temp_index).from_organization_id;
                x_cascaded_table(n).routing_header_id         := x_cascaded_table(temp_index).routing_header_id;
                x_cascaded_table(n).currency_code             := x_cascaded_table(temp_index).currency_code;
                x_cascaded_table(n).currency_conversion_rate  := x_cascaded_table(temp_index).currency_conversion_rate;
                x_cascaded_table(n).currency_conversion_type  := x_cascaded_table(temp_index).currency_conversion_type;
                x_cascaded_table(n).currency_conversion_date  := x_cascaded_table(temp_index).currency_conversion_date;
                x_cascaded_table(n).shipment_header_id        := x_cascaded_table(temp_index).shipment_header_id;
                x_cascaded_table(n).shipment_line_id          := x_cascaded_table(temp_index).shipment_line_id;
                x_cascaded_table(n).category_id               := x_cascaded_table(temp_index).category_id;
                x_cascaded_table(n).vendor_id                 := x_cascaded_table(temp_index).vendor_id;
                x_cascaded_table(n).vendor_site_id            := x_cascaded_table(temp_index).vendor_site_id;
                x_cascaded_table(n).po_unit_price             := x_cascaded_table(temp_index).po_unit_price;
                x_cascaded_table(n).location_id               := x_cascaded_table(temp_index).location_id;
                x_cascaded_table(n).deliver_to_person_id      := x_cascaded_table(temp_index).deliver_to_person_id;
                x_cascaded_table(n).deliver_to_location_id    := x_cascaded_table(temp_index).deliver_to_location_id;
                x_cascaded_table(n).subinventory              := x_cascaded_table(temp_index).subinventory;
                x_cascaded_table(n).job_id                    := x_cascaded_table(temp_index).job_id;
              -- LPN defaulting
            /* Bug 3444284.
             * We dont need to default lpn_ids. WMS will take care of
             * populating these columns. So this case of giving a warning
             * will not arise as it will be defaulted by them
             */
            ELSE --} {
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('open cursor Default RTI');
                END IF;

                OPEN po_correct_rti(x_cascaded_table(n).parent_interface_txn_id);
            END IF; --}
        ELSE -- } {
            OPEN po_correct(x_cascaded_table(n).parent_transaction_id);
        END IF; --}

        IF (po_correct%ISOPEN) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('fetch cursor Default ' || x_cascaded_table(n).parent_transaction_id);
            END IF;

            FETCH po_correct INTO default_po_correct_info;
        ELSIF(po_correct_rti%ISOPEN) THEN
            FETCH po_correct_rti INTO default_po_correct_info;
        END IF;

        IF (   (    po_correct%ISOPEN
                AND po_correct%FOUND)
            OR (    po_correct_rti%ISOPEN
                AND po_correct_rti%FOUND)) THEN --{
            IF (g_asn_debug = 'Y') THEN --{
                asn_debug.put_line('Defaulting Correct po_revision_num' || default_po_correct_info.po_revision_num);
                asn_debug.put_line('Defaulting Correct item_description' || default_po_correct_info.item_description);
                asn_debug.put_line('Defaulting Correct po_release_id' || default_po_correct_info.po_release_id);
                asn_debug.put_line('Defaulting Correct location_id' || default_po_correct_info.loc_id);
                asn_debug.put_line('Defaulting Correct organization_id' || default_po_correct_info.organization_id);
                asn_debug.put_line('Defaulting Correct routing_header_id' || default_po_correct_info.routing_header_id);
                asn_debug.put_line('Defaulting Correct currency_code' || default_po_correct_info.currency_code);
                asn_debug.put_line('Defaulting Correct currency_conversion_rate' || default_po_correct_info.currency_conversion_rate);
                asn_debug.put_line('Defaulting Correct currency_conversion_type' || default_po_correct_info.currency_conversion_type);
                asn_debug.put_line('Defaulting Correct currency_conversion_date' || default_po_correct_info.currency_conversion_date);
                asn_debug.put_line('Defaulting Correct shipment_header_id' || default_po_correct_info.shipment_header_id);
                asn_debug.put_line('Defaulting Correct shipment_line_id' || default_po_correct_info.shipment_line_id);
                asn_debug.put_line('Defaulting Correct category_id' || default_po_correct_info.category_id);
                asn_debug.put_line('Defaulting Correct vendor_id' || default_po_correct_info.vendor_id);
                asn_debug.put_line('Defaulting Correct vendor_site_id' || default_po_correct_info.vendor_site_id);
                asn_debug.put_line('Defaulting Correct po_unit_price' || default_po_correct_info.po_unit_price);
                asn_debug.put_line('Defaulting Correct DELIVER_TO_PERSON_ID' || default_po_correct_info.deliver_to_person_id);
                asn_debug.put_line('Defaulting Correct DELIVER_TO_LOCATION_ID' || default_po_correct_info.deliver_to_location_id);
                asn_debug.put_line('Defaulting Correct SUBINVENTORY' || default_po_correct_info.subinventory);
                asn_debug.put_line('Defaulting Correct CUSTOMER_ID' || default_po_correct_info.customer_id);
                asn_debug.put_line('Defaulting Correct CUSTOMER_SITE_ID' || default_po_correct_info.customer_site_id);
                asn_debug.put_line('Defaulting Correct job_id' || default_po_correct_info.job_id);
            END IF; --}

            IF     x_cascaded_table(n).oe_order_header_id IS NULL
               AND x_cascaded_table(n).source_document_code = 'RMA' THEN
                x_cascaded_table(n).oe_order_header_id  := default_po_correct_info.oe_order_header_id;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Defaulting Transfer oe_order_header_id ' || x_cascaded_table(n).oe_order_header_id);
                END IF;
            END IF;

            IF     x_cascaded_table(n).oe_order_line_id IS NULL
               AND x_cascaded_table(n).source_document_code = 'RMA' THEN
                x_cascaded_table(n).oe_order_line_id  := default_po_correct_info.oe_order_line_id;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Defaulting Transfer oe_order_line_id ' || x_cascaded_table(n).oe_order_line_id);
                END IF;
            END IF;

            x_cascaded_table(n).po_revision_num           := default_po_correct_info.po_revision_num;
            x_cascaded_table(n).item_description          := default_po_correct_info.item_description;
            x_cascaded_table(n).destination_type_code     := default_po_correct_info.destination_type_code;
            x_cascaded_table(n).destination_context       := default_po_correct_info.destination_context;
            x_cascaded_table(n).inspection_status_code    := default_po_correct_info.inspection_status_code;
            x_cascaded_table(n).po_release_id             := default_po_correct_info.po_release_id;
            x_cascaded_table(n).to_organization_id        := default_po_correct_info.organization_id;
            x_cascaded_table(n).from_organization_id      := default_po_correct_info.organization_id;
            x_cascaded_table(n).routing_header_id         := default_po_correct_info.routing_header_id;
            x_cascaded_table(n).currency_code             := default_po_correct_info.currency_code;
            x_cascaded_table(n).currency_conversion_rate  := default_po_correct_info.currency_conversion_rate;
            x_cascaded_table(n).currency_conversion_type  := default_po_correct_info.currency_conversion_type;
            x_cascaded_table(n).currency_conversion_date  := default_po_correct_info.currency_conversion_date;
            x_cascaded_table(n).shipment_header_id        := default_po_correct_info.shipment_header_id;
            x_cascaded_table(n).shipment_line_id          := default_po_correct_info.shipment_line_id;
            x_cascaded_table(n).category_id               := default_po_correct_info.category_id;
            x_cascaded_table(n).vendor_id                 := default_po_correct_info.vendor_id;
            x_cascaded_table(n).vendor_site_id            := default_po_correct_info.vendor_site_id;
            x_cascaded_table(n).job_id                    := default_po_correct_info.job_id;

            /* We used to get the unit_price from the cursor where it picks
             * up from the parent. But since PO unit_price can be change
             * retroactively, we need to pick up the unit_price from PO
             * directly. Since we would have derived line_location_id
             * and po_line_id at this point, use the values here. Since
        * we come here for defaulting RMA also, we need to do this
        * only when receipt_source_code is VENDOR.
             * x_cascaded_table(n).po_unit_price :=
                                            default_po_correct_info.po_unit_price;
            */
            IF (x_cascaded_table(n).receipt_source_code = 'VENDOR') THEN --{
                SELECT NVL(pll.price_override, pl.unit_price)
                INTO   x_cascaded_table(n).po_unit_price
                FROM   po_line_locations pll,
                       po_lines pl
                WHERE  pll.line_location_id = x_cascaded_table(n).po_line_location_id
                AND    pl.po_line_id = x_cascaded_table(n).po_line_id
                AND    pl.po_line_id = pll.po_line_id;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Defaulting Correct po_unit_price' || x_cascaded_table(n).po_unit_price);
                END IF;
            END IF; --}

            x_cascaded_table(n).location_id               := default_po_correct_info.loc_id;
            x_cascaded_table(n).deliver_to_person_id      := default_po_correct_info.deliver_to_person_id;
            x_cascaded_table(n).deliver_to_location_id    := default_po_correct_info.deliver_to_location_id;
            x_cascaded_table(n).subinventory              := default_po_correct_info.subinventory;
            -- LPN defaulting
            asn_debug.put_line(' defaulting lpn_id and transfer_lpn_id for int org cor');
        /* Bug 3444284.
         * We dont need to default lpn_ids. WMS will take care of
         * populating these columns. So this case of giving a warning
         * will not arise as it will be defaulted by them
         */
        END IF; -- if po_transfer%found is true }

        /* Default the from and to subinventory and locator_id */
        ----WMS Changes
        IF x_cascaded_table(n).matching_basis <> 'AMOUNT' THEN
            default_from_subloc_info(x_cascaded_table, n);
            default_to_subloc_info(x_cascaded_table, n);

            /* The following code will be common for all the transactions not just for transfer to
             * get the use_mtl_lot and use_mtl_serial.
            */
	    /* Bug 5076685: For one time items, item_id won't be available. We need to
               have a check for item_id not null, before hitting the
               mtl_system_items table.Added the IF - END IF statement. */
      /*
      BEGIN Comment: Bug: 4735484
            IF x_cascaded_table(n).item_id IS NOT NULL THEN
               SELECT NVL(x_cascaded_table(n).use_mtl_lot, lot_control_code),
                   NVL(x_cascaded_table(n).use_mtl_serial, serial_number_control_code)
               INTO   x_cascaded_table(n).use_mtl_lot,
                   x_cascaded_table(n).use_mtl_serial
               FROM   mtl_system_items
               WHERE  mtl_system_items.inventory_item_id = x_cascaded_table(n).item_id
               AND    mtl_system_items.organization_id = x_cascaded_table(n).to_organization_id;
	    END IF;
	    END Comment: Bug: 4735484
	    */
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Set Location_id  = ' || TO_CHAR(x_cascaded_table(n).location_id));
            asn_debug.put_line(' quantity ' || x_cascaded_table(n).quantity);
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Exit default_vendor_correct');
        END IF;

        IF po_correct%ISOPEN THEN
            CLOSE po_correct;
        END IF;

        IF po_correct_rti%ISOPEN THEN
            CLOSE po_correct_rti;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('default_vendor_correct', x_progress);
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_error('TRANSACTIONS_INTERFACE_ID', FALSE);
    END default_vendor_correct;

    FUNCTION convert_into_correct_qty(
        source_qty IN NUMBER,
        source_uom IN VARCHAR2,
        item_id    IN NUMBER,
        dest_uom   IN VARCHAR2
    )
        RETURN NUMBER IS
        correct_qty NUMBER;
    BEGIN
        IF source_uom <> dest_uom THEN
            po_uom_s.uom_convert(source_qty,
                                 source_uom,
                                 item_id,
                                 dest_uom,
                                 correct_qty
                                );
        ELSE
            correct_qty  := source_qty;
        END IF;

        RETURN(correct_qty);
    EXCEPTION
        WHEN OTHERS THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Could not convert between UOMs');
                asn_debug.put_line('Will return 0');
            END IF;

            correct_qty  := 0;
            RETURN(correct_qty);
    END;

    PROCEDURE validate_source_type(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        po_lookup_code_record rcv_shipment_line_sv.po_lookup_code_record_type;
    BEGIN
        /*
           ** Validate Source Type.  This value is always required
           */
        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        IF (x_cascaded_table(n).transaction_type <> 'RECEIVE') THEN --{
            IF (x_cascaded_table(n).source_document_code = 'PO') THEN --{
                SELECT type_lookup_code
                INTO   po_lookup_code_record.lookup_code
                FROM   po_headers
                WHERE  po_header_id = x_cascaded_table(n).po_header_id;

                po_lookup_code_record.lookup_type  := 'PO TYPE';
            ELSE --}{
                po_lookup_code_record.lookup_code  := x_cascaded_table(n).receipt_source_code;
                po_lookup_code_record.lookup_type  := 'SHIPMENT SOURCE TYPE';
            END IF; --}

            po_lookup_code_record.error_record.error_status   := 'S';
            po_lookup_code_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Validating Source Type Code');
            END IF;

            rcv_transactions_interface_sv1.validate_po_lookup_code(po_lookup_code_record);
            x_cascaded_table(n).error_status                  := po_lookup_code_record.error_record.error_status;
            x_cascaded_table(n).error_message                 := po_lookup_code_record.error_record.error_message;
            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                                'SOURCE_TYPE_CODE',
                                                FALSE
                                               );
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('validate_source_type', '000');
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_error('TRANSACTIONS_INTERFACE_ID', FALSE);
    END validate_source_type;

    PROCEDURE validate_transaction_type(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        po_lookup_code_record rcv_shipment_line_sv.po_lookup_code_record_type;
    BEGIN
        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        IF (x_cascaded_table(n).transaction_type <> 'RECEIVE') THEN --{
            po_lookup_code_record.lookup_code                 := x_cascaded_table(n).transaction_type;
            po_lookup_code_record.lookup_type                 := 'RCV TRANSACTION TYPE';
            po_lookup_code_record.error_record.error_status   := 'S';
            po_lookup_code_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Validating Destination Type Code');
            END IF;

            rcv_transactions_interface_sv1.validate_po_lookup_code(po_lookup_code_record);
            x_cascaded_table(n).error_status                  := po_lookup_code_record.error_record.error_status;
            x_cascaded_table(n).error_message                 := po_lookup_code_record.error_record.error_message;
            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                                'TRANSACTION_TYPE_CODE',
                                                FALSE
                                               );
        END IF; --}
    EXCEPTION
        WHEN OTHERS THEN
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('validate_transaction_type', '000');
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_error('TRANSACTIONS_INTERFACE_ID', FALSE);
    END validate_transaction_type;

    PROCEDURE validate_inspection_status(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        po_lookup_code_record rcv_shipment_line_sv.po_lookup_code_record_type;
    BEGIN
        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        IF (x_cascaded_table(n).inspection_status_code IS NOT NULL) THEN --{
            po_lookup_code_record.lookup_code                 := x_cascaded_table(n).inspection_status_code;
            po_lookup_code_record.lookup_type                 := 'INSPECTION STATUS';
            po_lookup_code_record.error_record.error_status   := 'S';
            po_lookup_code_record.error_record.error_message  := NULL;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Validating INSPECTION STATUS ');
            END IF;

            rcv_transactions_interface_sv1.validate_po_lookup_code(po_lookup_code_record);
            x_cascaded_table(n).error_status                  := po_lookup_code_record.error_record.error_status;
            x_cascaded_table(n).error_message                 := po_lookup_code_record.error_record.error_message;
            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                                'INSPECTION_STATUS_CODE',
                                                FALSE
                                               );
        END IF; --}
    EXCEPTION
        WHEN OTHERS THEN
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('validate_inspection_status', '000');
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_error('TRANSACTIONS_INTERFACE_ID', FALSE);
    END validate_inspection_status;

/** OPM change Bug# 3061052**/
-- added validate_opm_attributes to validate OPM specific columns.

     PROCEDURE validate_opm_attributes(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
       /*INVCONV, gml_opm_roi_grp.opm_record_type  to be removed , Punit Kumar */
        --l_opm_record_type            gml_opm_roi_grp.opm_record_type;

        l_att_rec		                RCV_TRANSACTIONS_INTERFACE_SV1.attributes_record_type;
        l_column_name                VARCHAR2(50);
        l_tokenname1                 VARCHAR2(30);
        l_tokenvalue1                VARCHAR2(1800);
        l_quantity_shipped           NUMBER;
        l_secondary_quantity_shipped NUMBER;
        l_transaction_id             NUMBER;       /*BUG#10380635 */

        /*INVCONV*/
        l_return_status VARCHAR2(1) := NULL;
        x_return_status VARCHAR2(1) :='S';
        l_msg_count     NUMBER;
        l_msg_data      VARCHAR2(100);
        /*end , INVCONV*/

    BEGIN

        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        /*INVCONV , It checks for OPM insatallation. This needs to be removed , Punit Kumar*/
        /*
         IF (    gml_process_flags.opm_installed = 1
            AND x_cascaded_table(n).item_id IS NOT NULL
            AND gml_process_flags.check_process_orgn(p_organization_id     => x_cascaded_table(n).to_organization_id) = 1 ) THEN
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('In validate opm attributes');
            END IF;
         */

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('In validate opm attributes');
            END IF;


            -- if receiving full qty against an ASN/Internal Order , default the secondary qty from shipment line
            -- if there is no secondary qty specified on the reciept line.
            /*INVCONV, added INVENTORY to account for Inter Org Transfers. Punit Kumar*/
            IF     x_cascaded_table(n).receipt_source_code IN('VENDOR', 'INTERNAL ORDER' , 'INVENTORY')
            /*end , INVCONV*/
               AND x_cascaded_table(n).shipment_header_id IS NOT NULL
               AND x_cascaded_table(n).shipment_line_id IS NOT NULL
               AND x_cascaded_table(n).secondary_quantity IS NULL THEN
                BEGIN
                    SELECT quantity_shipped,
                           secondary_quantity_shipped
                    INTO   l_quantity_shipped,
                           l_secondary_quantity_shipped
                    FROM   rcv_shipment_lines
                    WHERE  shipment_header_id = x_cascaded_table(n).shipment_header_id
                    AND    shipment_line_id = x_cascaded_table(n).shipment_line_id;
                EXCEPTION
                    WHEN OTHERS THEN
                        NULL;
                END;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('quantity shipped = ' || l_quantity_shipped);
                    asn_debug.put_line('secondary qty shipped = ' || l_secondary_quantity_shipped);
                END IF;

                IF l_quantity_shipped = x_cascaded_table(n).quantity THEN
                    x_cascaded_table(n).secondary_quantity  := l_secondary_quantity_shipped;
                END IF;
            ELSIF     x_cascaded_table(n).receipt_source_code = 'VENDOR'
                  AND x_cascaded_table(n).shipment_header_id IS NULL
                  AND x_cascaded_table(n).secondary_quantity IS NULL THEN
                -- if the receipt line qty is same as po shipment qty
                -- default the po shipment secondary qty to receipt line secondary  qty.

                BEGIN
                    SELECT quantity,
                           secondary_quantity
                    INTO   l_quantity_shipped,
                           l_secondary_quantity_shipped
                    FROM   po_line_locations
                    WHERE  line_location_id = x_cascaded_table(n).po_line_location_id;
                EXCEPTION
                    WHEN OTHERS THEN
                        NULL;
                END;

                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('po shipment qty = ' || l_quantity_shipped);
                    asn_debug.put_line('po shipment secondary qty = ' || l_secondary_quantity_shipped);
                END IF;

                IF l_quantity_shipped = x_cascaded_table(n).quantity THEN
                    x_cascaded_table(n).secondary_quantity  := l_secondary_quantity_shipped;
                END IF;
            END IF;

            /*INVCONV, Remove the population of l_opm_record_type and populate l_att_rec. Punit Kumar*/

            /*
            l_opm_record_type.receipt_source_code          := x_cascaded_table(n).receipt_source_code;
            l_opm_record_type.to_organization_id           := x_cascaded_table(n).to_organization_id;
            l_opm_record_type.item_num                     := x_cascaded_table(n).item_num;
            l_opm_record_type.item_id                      := x_cascaded_table(n).item_id;
            l_opm_record_type.unit_of_measure              := x_cascaded_table(n).unit_of_measure;
            l_opm_record_type.secondary_unit_of_measure    := x_cascaded_table(n).secondary_unit_of_measure;
            l_opm_record_type.secondary_uom_code           := x_cascaded_table(n).secondary_uom_code;
            l_opm_record_type.quantity                     := x_cascaded_table(n).quantity;
            l_opm_record_type.secondary_quantity           := x_cascaded_table(n).secondary_quantity;
            l_opm_record_type.qc_grade                     := x_cascaded_table(n).qc_grade;
            l_opm_record_type.rti_id                       := x_cascaded_table(n).interface_transaction_id;
            -- bug# 3664014
            -- added some more parameters. validate_opm_parameters API reads these parameters from
            -- rcv_transactions_interface table which does hold the latest data. All the latest data
            -- are in the cascaded table.

            l_opm_record_type.transaction_type             := x_cascaded_table(n).transaction_type;
            l_opm_record_type.destination_type_code        := x_cascaded_table(n).destination_type_code;
            l_opm_record_type.locator_id                   := x_cascaded_table(n).locator_id;
            l_opm_record_type.header_interface_id          := x_cascaded_table(n).header_interface_id;
            l_opm_record_type.GROUP_ID                     := x_cascaded_table(n).GROUP_ID;
            l_opm_record_type.primary_quantity             := x_cascaded_table(n).primary_quantity;
            l_opm_record_type.from_locator_id              := x_cascaded_table(n).from_locator_id;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('unit_of_measure = ' || l_opm_record_type.unit_of_measure);
                asn_debug.put_line('secondary unit_of_measure = ' || l_opm_record_type.secondary_unit_of_measure);
                asn_debug.put_line('Quantity = ' || l_opm_record_type.quantity);
                asn_debug.put_line('Secondary Quantity = ' || l_opm_record_type.secondary_quantity);
                asn_debug.put_line('Item Id = ' || l_opm_record_type.item_id);
            END IF;

            l_opm_record_type.error_record.error_status    := 'S';
            l_opm_record_type.error_record.error_message   := NULL;

            */

            l_att_rec.inventory_item_id    		   := x_cascaded_table(n).item_id ;                   /*RTI.item_id	 */
            l_att_rec.transaction_quantity	   	:= x_cascaded_table(n).quantity;                   /*RTI.quantity(transaction quantity)*/
            l_att_rec.transaction_unit_of_measure	:= x_cascaded_table(n).unit_of_measure;            /*RTI.UNIT_OF_MEASURE -(transaction unit_of_measure) */
            l_att_rec.secondary_quantity			   := x_cascaded_table(n).secondary_quantity;         /*RTI.secondary_quantity */
            l_att_rec.secondary_unit_of_measure		:= x_cascaded_table(n).secondary_unit_of_measure;  /*RTI.Secondary_UNIT_OF_MEASURE*/
            l_att_rec.secondary_uom_code		      := x_cascaded_table(n).secondary_uom_code;         /*RTI.secondary_uom_code*/
            l_att_rec.to_organization_id			   := x_cascaded_table(n).to_organization_id;         /*RTI.to_organization_id*/
            ---error handling
            l_att_rec.error_record.error_status    := 'S';
            l_att_rec.error_record.error_message   := NULL;
            l_transaction_id                       :=x_cascaded_table(n).interface_transaction_id;     /*BUG#10380635 */


            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('printing the values before calling  RCV_TRANSACTIONS_INTERFACE_SV1.VALIDATE_SECONDARY_PARAMETERS');
                asn_debug.put_line('unit_of_measure = ' || l_att_rec.transaction_unit_of_measure);
                asn_debug.put_line('secondary unit_of_measure = ' || l_att_rec.secondary_unit_of_measure);
                asn_debug.put_line('Quantity = ' || l_att_rec.transaction_quantity);
                asn_debug.put_line('Secondary Quantity = ' || l_att_rec.secondary_quantity);
                asn_debug.put_line('Item Id = ' || l_att_rec.inventory_item_id);
                asn_debug.put_line('Secondary_uom_code = ' || l_att_rec.secondary_uom_code);
                asn_debug.put_line('to organization id = ' || l_att_rec.to_organization_id);
                asn_debug.put_line('Transaction_id = ' || l_transaction_id);              /*BUG#10380635 */
            END IF;

            /*INVCONV ,validate_opm_parameters  procedure is being called to validate the OPM
               specific parameters.Now it shall be replaced with a new routine which shall
               validate these parameters for discrete items also.Remove the call to
               gml_opm_roi_grp.validate_opm_parameters(l_att_rec) , Punit Kumar
            */
            /*
            gml_opm_roi_grp.validate_opm_parameters(l_opm_record_type);
            x_cascaded_table(n).error_status               := l_opm_record_type.error_record.error_status;
            x_cascaded_table(n).error_message              := l_opm_record_type.error_record.error_message;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('OPM Error Status  = ' || l_opm_record_type.error_record.error_status);
                asn_debug.put_line('OPM Error Msg  = ' || l_opm_record_type.error_record.error_message);
            END IF;
            */

            IF  x_cascaded_table(n).item_id IS NOT NULL THEN

               IF (g_asn_debug = 'Y') THEN
                  asn_debug.put_line('Before calling new API RCV_TRANSACTIONS_INTERFACE_SV1.VALIDATE_SECONDARY_PARAMETERS');
               END IF;


               RCV_TRANSACTIONS_INTERFACE_SV1.VALIDATE_SECONDARY_PARAMETERS (
                                                                             1.0,
                                                                             'F',
                                                                             x_att_rec	         =>l_att_rec,
                                                                             x_return_status  	=>l_return_status,
                                                                             x_msg_count		   =>l_msg_count,
                                                                             x_msg_data         =>l_msg_data,
                                                                             p_transaction_id   => l_transaction_id  /*BUG#10380635 */
                                                                             );
            END IF;

            /* INVCONV , remove the following error handling.Introduced new error handling below*/
       /*
            IF x_cascaded_table(n).error_status NOT IN('S', 'W') THEN
                rcv_error_pkg.set_error_message(x_cascaded_table(n).error_message);

                IF (x_cascaded_table(n).error_message = 'PO_PDOI_INVALID_UOM_CODE') THEN
                    rcv_error_pkg.set_token('VALUE', x_cascaded_table(n).secondary_uom_code);
                END IF;
            END IF;

            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status, 'SECONDARY_UOM_CODE');

       */
            /* error handling , INVCONV*/
            x_cascaded_table(n).error_status            := l_att_rec.error_record.error_status;
            x_cascaded_table(n).error_message           := l_att_rec.error_record.error_message;

            IF (g_asn_debug = 'Y') THEN
               asn_debug.put_line('After calling new API RCV_TRANSACTIONS_INTERFACE_SV1.VALIDATE_SECONDARY_PARAMETERS');
               asn_debug.put_line('return status of RCV_TRANSACTIONS_INTERFACE_SV1.VALIDATE_SECONDARY_PARAMETERS = ' || x_cascaded_table(n).error_status);
               asn_debug.put_line('return message of RCV_TRANSACTIONS_INTERFACE_SV1.VALIDATE_SECONDARY_PARAMETERS = ' || x_cascaded_table(n).error_message);
            END IF;


            /*If call fails*/
            IF x_cascaded_table(n).error_status IN ('U' ,'E') THEN
               IF (g_asn_debug = 'Y') THEN
                  asn_debug.put_line('RCV_TRANSACTIONS_INTERFACE_SV1.VALIDATE_SECONDARY_PARAMETERS call failed');
               END IF;

               /*log error in po_interface_errors*/
               rcv_error_pkg.log_interface_message(
                                                   x_cascaded_table(n).error_status,
                                                   'Secondary Parameter',
                                                   FALSE
                                                   );
               RETURN;
            END IF;

            /*On successful call populate the following*/
            x_cascaded_table(n).secondary_unit_of_measure  := l_att_rec.secondary_unit_of_measure;
            x_cascaded_table(n).secondary_uom_code         := l_att_rec.secondary_uom_code;
            x_cascaded_table(n).secondary_quantity         := l_att_rec.secondary_quantity;

            -- Bug 17988360 added
            if ( x_cascaded_table(n).transaction_type = 'CORRECT' and x_cascaded_table(n).secondary_quantity is not null and
                SIGN(x_cascaded_table(n).quantity) = -1 ) then
               x_cascaded_table(n).secondary_quantity := -1 * ABS(x_cascaded_table(n).secondary_quantity);
            end if;
            -- Bug 17988360 ended

            IF (g_asn_debug = 'Y') THEN
               asn_debug.put_line('populating the return values from RCV_TRANSACTIONS_INTERFACE_SV1.VALIDATE_SECONDARY_PARAMETERS');
               asn_debug.put_line('secondary unit_of_measure = ' || x_cascaded_table(n).secondary_unit_of_measure);
               asn_debug.put_line('Secondary Quantity = ' ||x_cascaded_table(n).secondary_quantity );
               asn_debug.put_line('Secondary_uom_code = ' ||x_cascaded_table(n).secondary_uom_code);
            END IF;


        /* INVCONV ,qc_grade not handled here  */
        /*    x_cascaded_table(n).qc_grade                   := l_opm_record_type.qc_grade;
        */

     /* INVCONV, opm installation check no more required */
     /*
        ELSE --GML_PROCESS_FLAGS.opm_installed <> 1
            x_cascaded_table(n).secondary_uom_code         := NULL;
            x_cascaded_table(n).secondary_unit_of_measure  := NULL;
            x_cascaded_table(n).secondary_quantity         := NULL;
            x_cascaded_table(n).qc_grade                   := NULL;
        END IF; -- IF (GML_PROCESS_FLAGS.opm_installed = 1

     end , INVCONV */


    EXCEPTION
        WHEN rcv_error_pkg.e_fatal_error THEN
            NULL;
        WHEN OTHERS THEN
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('log_interface_error', '000');
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_error('TRANSACTIONS_INTERFACE_ID', FALSE);
    END validate_opm_attributes;


    PROCEDURE get_interface_available_qty(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER,
        x_interface_qty  OUT NOCOPY    NUMBER
    ) IS
        l_grandparent_interface_trx_id NUMBER;
        l_interface_qty                NUMBER;
        l_parent_trx_type              rcv_transactions_interface.transaction_type%TYPE;
        l_parent_uom                   rcv_transactions_interface.unit_of_measure%TYPE;
        l_grandparent_uom              rcv_transactions_interface.unit_of_measure%TYPE;
        test                           NUMBER;
    BEGIN
        x_interface_qty  := 0; --Initialise

        IF (x_cascaded_table(n).parent_transaction_id IS NOT NULL) THEN
            RETURN;
        END IF;

        BEGIN
            SELECT parent_interface_txn_id,
                   transaction_type,
                   unit_of_measure,
                   interface_available_qty
            INTO   l_grandparent_interface_trx_id,
                   l_parent_trx_type,
                   l_parent_uom,
                   l_interface_qty
            FROM   rcv_transactions_interface
            WHERE  interface_transaction_id = x_cascaded_table(n).parent_interface_txn_id;
        EXCEPTION
            /* For a receive transaction, both parent_trx_id and
             * interface_parent_trx_id will be null.
            */
            WHEN NO_DATA_FOUND THEN
                l_interface_qty  := 0;
        END;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('get_interface_qty l_grandparent_interface_trx_id ' || l_grandparent_interface_trx_id);
            asn_debug.put_line('get_interface_qty l_parent_trx_type ' || l_parent_trx_type);
            asn_debug.put_line('get_interface_qty l_parent_uom ' || l_parent_uom);
            asn_debug.put_line('get_interface_qty l_interface_qty ' || l_interface_qty);
        END IF;

        IF (    x_cascaded_table(n).transaction_type = 'CORRECT'
            AND SIGN(x_cascaded_table(n).quantity) = 1) THEN --{
            IF (l_grandparent_interface_trx_id IS NOT NULL) THEN --{
                BEGIN
                    SELECT interface_available_qty,
                           unit_of_measure
                    INTO   l_interface_qty,
                           l_grandparent_uom
                    FROM   rcv_transactions_interface
                    WHERE  interface_transaction_id = l_grandparent_interface_trx_id;

                    /* Should be in terms of parent transaction  uom */
                    x_interface_qty  := convert_into_correct_qty(l_interface_qty,
                                                                 l_grandparent_uom,
                                                                 x_cascaded_table(n).item_id,
                                                                 l_parent_uom
                                                                );
                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        x_interface_qty  := 0;
                END;
            END IF; --}
        ELSE --}{
            x_interface_qty  := l_interface_qty;
        END IF; --}

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('get_interface_qty x_interface_qty ' || x_interface_qty);
        END IF;

        x_interface_qty  := NVL(x_interface_qty, 0);
    EXCEPTION
        WHEN OTHERS THEN
            x_interface_qty                    := 0;
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('get_interface_available_qty', '000');
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_error('TRANSACTIONS_INTERFACE_ID', FALSE);
    END get_interface_available_qty;

    PROCEDURE get_interface_available_amt(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER,
        x_interface_amt  OUT NOCOPY    NUMBER
    ) IS
        l_grandparent_interface_trx_id NUMBER;
        l_interface_amt                NUMBER;
        l_parent_trx_type              rcv_transactions_interface.transaction_type%TYPE;
        test                           NUMBER;
    BEGIN
        x_interface_amt  := 0; --Initialise

        IF (x_cascaded_table(n).parent_transaction_id IS NOT NULL) THEN
            RETURN;
        END IF;

        BEGIN
            SELECT parent_interface_txn_id,
                   transaction_type,
                   interface_available_amt
            INTO   l_grandparent_interface_trx_id,
                   l_parent_trx_type,
                   l_interface_amt
            FROM   rcv_transactions_interface
            WHERE  interface_transaction_id = x_cascaded_table(n).parent_interface_txn_id;
        EXCEPTION
            /* For a receive transaction, both parent_trx_id and
             * interface_parent_trx_id will be null.
            */
            WHEN NO_DATA_FOUND THEN
                l_interface_amt  := 0;
        END;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('get_interface_qty l_grandparent_interface_trx_id ' || l_grandparent_interface_trx_id);
            asn_debug.put_line('get_interface_qty l_parent_trx_type ' || l_parent_trx_type);
            asn_debug.put_line('get_interface_amt l_interface_amt ' || l_interface_amt);
        END IF;

        IF (    x_cascaded_table(n).transaction_type = 'CORRECT'
            AND SIGN(x_cascaded_table(n).amount) = 1) THEN --{
            IF (l_grandparent_interface_trx_id IS NOT NULL) THEN --{
                BEGIN
                    SELECT interface_available_amt
                    INTO   x_interface_amt
                    FROM   rcv_transactions_interface
                    WHERE  interface_transaction_id = l_grandparent_interface_trx_id;
                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        x_interface_amt  := 0;
                END;
            END IF; --}
        ELSE --}{
            x_interface_amt  := l_interface_amt;
        END IF; --}

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('get_interface_amt x_interface_amt ' || x_interface_amt);
        END IF;

        x_interface_amt  := NVL(x_interface_amt, 0);
    EXCEPTION
        WHEN OTHERS THEN
            x_interface_amt                    := 0;
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('get_interface_available_amt', '000');
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_error('TRANSACTIONS_INTERFACE_ID', FALSE);
    END get_interface_available_amt;

    PROCEDURE update_interface_available_qty(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        l_grandparent_interface_trx_id NUMBER;
        l_parent_trx_type              rcv_transactions_interface.transaction_type%TYPE;
        l_interface_transaction_qty    rcv_transactions_interface.interface_transaction_qty%TYPE   := 0;
    BEGIN
        /* Update interface_available_qty for the current rti row. */
        x_cascaded_table(n).interface_available_qty  := x_cascaded_table(n).quantity;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('update_interace_qty x_interface_qty ' || x_cascaded_table(n).interface_available_qty);
        END IF;

        /* Update interface_available_qty in the parent rti row */
        BEGIN
            SELECT parent_interface_txn_id,
                   transaction_type
            INTO   l_grandparent_interface_trx_id,
                   l_parent_trx_type
            FROM   rcv_transactions_interface
            WHERE  interface_transaction_id = x_cascaded_table(n).parent_interface_txn_id;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                /* For an rti of receive or an rti row with parent in RT, select
                 * will not result any rows.
                */
                NULL;
        END;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('update_interace_qty l_grandparent_interface_trx_id ' || l_grandparent_interface_trx_id);
            asn_debug.put_line('update_interace_qty l_parent_trx_type ' || l_parent_trx_type);
        END IF;

        IF (x_cascaded_table(n).transaction_type = 'CORRECT') THEN --{
            UPDATE rcv_transactions_interface rti
               SET rti.interface_available_qty = rti.interface_available_qty + x_cascaded_table(n).quantity
             WHERE rti.interface_transaction_id = x_cascaded_table(n).parent_interface_txn_id;

            IF (l_grandparent_interface_trx_id IS NOT NULL) THEN
                UPDATE rcv_transactions_interface rti
                   SET rti.interface_available_qty = rti.interface_available_qty - x_cascaded_table(n).quantity
                 WHERE rti.interface_transaction_id = l_grandparent_interface_trx_id;
            END IF;
        ELSE --}{
            UPDATE rcv_transactions_interface rti
               SET rti.interface_available_qty = rti.interface_available_qty - x_cascaded_table(n).quantity
             WHERE rti.interface_transaction_id = x_cascaded_table(n).parent_interface_txn_id;

            IF (    x_cascaded_table(n).transaction_type = 'RETURN TO RECEIVING'
                AND l_grandparent_interface_trx_id IS NOT NULL) THEN
                UPDATE rcv_transactions_interface rti
                   SET rti.interface_available_qty = rti.interface_available_qty + x_cascaded_table(n).quantity
                 WHERE rti.interface_transaction_id = l_grandparent_interface_trx_id;
            END IF;
        END IF; --}

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('update_interace_qty calling update_total_transaction_qty ');
        END IF;

        /* Update temp table with the correct quantity*/
        update_total_transaction_qty(x_cascaded_table(n).interface_transaction_id,
                                     x_cascaded_table(n).parent_transaction_id,
                                     x_cascaded_table(n).parent_interface_txn_id,
                                     x_cascaded_table(n).primary_quantity,
                                     x_cascaded_table(n).transaction_type,
                                     l_interface_transaction_qty
                                    );

        IF (l_interface_transaction_qty <> 0) THEN
            x_cascaded_table(n).interface_transaction_qty  := l_interface_transaction_qty;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('update_interface_available_qty', '000');
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_error('TRANSACTIONS_INTERFACE_ID', FALSE);
    END update_interface_available_qty;

    PROCEDURE update_interface_available_amt(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
        l_grandparent_interface_trx_id NUMBER;
        l_parent_trx_type              rcv_transactions_interface.transaction_type%TYPE;
        l_interface_transaction_amt    rcv_transactions_interface.interface_transaction_amt%TYPE   := 0;
    BEGIN
        /* Update interface_available_qty for the current rti row. */
        x_cascaded_table(n).interface_available_amt  := x_cascaded_table(n).amount;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('update_interace_qty x_interface_amt ' || x_cascaded_table(n).interface_available_amt);
        END IF;

        /* Update interface_available_qty in the parent rti row */
        BEGIN
            SELECT parent_interface_txn_id,
                   transaction_type
            INTO   l_grandparent_interface_trx_id,
                   l_parent_trx_type
            FROM   rcv_transactions_interface
            WHERE  interface_transaction_id = x_cascaded_table(n).parent_interface_txn_id;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                /* For an rti of receive or an rti row with parent in RT, select
                 * will not result any rows.
                */
                NULL;
        END;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('update_interface_amt l_grandparent_interface_trx_id ' || l_grandparent_interface_trx_id);
            asn_debug.put_line('update_interface_amt l_parent_trx_type ' || l_parent_trx_type);
        END IF;

        IF (x_cascaded_table(n).transaction_type = 'CORRECT') THEN --{
            UPDATE rcv_transactions_interface rti
               SET rti.interface_available_amt = rti.interface_available_amt + x_cascaded_table(n).amount
             WHERE rti.interface_transaction_id = x_cascaded_table(n).parent_interface_txn_id;

            IF (l_grandparent_interface_trx_id IS NOT NULL) THEN
                UPDATE rcv_transactions_interface rti
                   SET rti.interface_available_amt = rti.interface_available_amt - x_cascaded_table(n).amount
                 WHERE rti.interface_transaction_id = l_grandparent_interface_trx_id;
            END IF;
        ELSE --}{
            UPDATE rcv_transactions_interface rti
               SET rti.interface_available_amt = rti.interface_available_amt - x_cascaded_table(n).amount
             WHERE rti.interface_transaction_id = x_cascaded_table(n).parent_interface_txn_id;

            IF (    x_cascaded_table(n).transaction_type = 'RETURN TO RECEIVING'
                AND l_grandparent_interface_trx_id IS NOT NULL) THEN
                UPDATE rcv_transactions_interface rti
                   SET rti.interface_available_amt = rti.interface_available_amt + x_cascaded_table(n).amount
                 WHERE rti.interface_transaction_id = l_grandparent_interface_trx_id;
            END IF;
        END IF; --}

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('update_interface_amt calling update_total_transaction_amt ');
        END IF;

        /* Update temp table with the correct quantity */
        update_total_transaction_amt(x_cascaded_table(n).interface_transaction_id,
                                     x_cascaded_table(n).parent_transaction_id,
                                     x_cascaded_table(n).parent_interface_txn_id,
                                     x_cascaded_table(n).amount,
                                     x_cascaded_table(n).transaction_type,
                                     l_interface_transaction_amt
                                    );

        IF (l_interface_transaction_amt <> 0) THEN
            x_cascaded_table(n).interface_transaction_amt  := l_interface_transaction_amt;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('update_interface_available_amt', '000');
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_error('TRANSACTIONS_INTERFACE_ID', FALSE);
    END update_interface_available_amt;

    PROCEDURE update_total_transaction_qty(
        p_interface_transaction_id  IN            rcv_transactions_interface.interface_transaction_id%TYPE,
        p_parent_transaction_id     IN            rcv_transactions_interface.parent_transaction_id%TYPE,
        p_parent_interface_txn_id   IN            rcv_transactions_interface.parent_interface_txn_id%TYPE,
        p_primary_quantity          IN            rcv_transactions_interface.quantity%TYPE,
        p_transaction_type          IN            rcv_transactions_interface.transaction_type%TYPE,
        x_interface_transaction_qty OUT NOCOPY    rcv_transactions_interface.interface_transaction_qty%TYPE
    ) IS
        l_child_count     NUMBER;
        l_grand_parent_id NUMBER;
    BEGIN
        x_interface_transaction_qty  := 0;

        /* Insert into temp table since we need to update this value
         * when we process children.
        */
        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('update_total_transaction_qty   p_parent_transaction_id  ' || p_parent_transaction_id);
            asn_debug.put_line('update_total_transaction_qty   child count ' || l_child_count);
            asn_debug.put_line('update_total_transaction_qty  p_primary_quantity ' || p_primary_quantity);
        END IF;

        /* Bug 3459152.
         * We need to update interface_transaction_qty for SHIP transaction
         * also. Otherwise we will be able to create 2 asn shipment lines
         * for the same shipment if they are run in the same group.
        */
        IF (   (    p_parent_transaction_id IS NULL
                AND p_transaction_type IN('RECEIVE', 'SHIP'))
            OR (p_parent_transaction_id IS NOT NULL)) THEN --{
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('update_total_transaction_qty  updating rti row with parent' || p_interface_transaction_id || ',quantity ' || p_primary_quantity);
            END IF;

            x_interface_transaction_qty  := p_primary_quantity;
            RETURN;
        END IF; --}

        IF (p_parent_interface_txn_id IS NOT NULL) THEN --{
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('update_total_transaction_qty  parent_interface_txn_id is not null ');
                asn_debug.put_line('update_total_transaction_qty  p_primary_quantity ' || p_primary_quantity);
            END IF;

            SELECT parent_transaction_id
            INTO   l_grand_parent_id
            FROM   rcv_transactions_interface
            WHERE  interface_transaction_id = p_parent_interface_txn_id;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('update_total_transaction_qty  l_grand_parent_id ' || l_grand_parent_id);
            END IF;

            IF (    (l_grand_parent_id IS NOT NULL)
                AND (p_transaction_type = 'CORRECT')) THEN
                UPDATE rcv_transactions_interface rti
                   SET rti.interface_transaction_qty = rti.interface_transaction_qty + p_primary_quantity
                 WHERE interface_transaction_id = p_parent_interface_txn_id;
            END IF;

            IF (    (l_grand_parent_id IS NOT NULL)
                AND (p_transaction_type = 'RETURN TO RECEIVING')) THEN
                UPDATE rcv_transactions_interface rti
                   SET rti.interface_transaction_qty = rti.interface_transaction_qty - p_primary_quantity
                 WHERE interface_transaction_id = p_parent_interface_txn_id;
            END IF;
        END IF; --}
    EXCEPTION
        WHEN OTHERS THEN
            rcv_error_pkg.set_sql_error_message('update_total_transaction_qty', '000');
            rcv_error_pkg.log_interface_error('TRANSACTIONS_INTERFACE_ID', FALSE);
            RAISE;
    END update_total_transaction_qty;

    PROCEDURE update_total_transaction_amt(
        p_interface_transaction_id  IN            rcv_transactions_interface.interface_transaction_id%TYPE,
        p_parent_transaction_id     IN            rcv_transactions_interface.parent_transaction_id%TYPE,
        p_parent_interface_txn_id   IN            rcv_transactions_interface.parent_interface_txn_id%TYPE,
        p_amount                    IN            rcv_transactions_interface.amount%TYPE,
        p_transaction_type          IN            rcv_transactions_interface.transaction_type%TYPE,
        x_interface_transaction_amt OUT NOCOPY    rcv_transactions_interface.interface_transaction_amt%TYPE
    ) IS
        l_child_count     NUMBER;
        l_grand_parent_id NUMBER;
    BEGIN
        x_interface_transaction_amt  := 0;

        /* Insert into temp table since we need to update this value
         * when we process children.
        */
        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('update_total_transaction_amt   p_parent_transaction_id  ' || p_parent_transaction_id);
            asn_debug.put_line('update_total_transaction_amt   child count ' || l_child_count);
            asn_debug.put_line('update_total_transaction_amt   p_primary_quantity ' || p_amount);
        END IF;

        IF (   (    p_parent_transaction_id IS NULL
                AND p_transaction_type IN('RECEIVE', 'SHIP'))
            OR (p_parent_transaction_id IS NOT NULL)) THEN --{
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('update_total_transaction_amt  updating rti row with parent' || p_interface_transaction_id || ',amount ' || p_amount);
            END IF;

            x_interface_transaction_amt  := p_amount;
            RETURN;
        END IF; --}

        IF (p_parent_interface_txn_id IS NOT NULL) THEN --{
            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('update_total_transaction_amt  parent_interface_txn_id is not null ');
                asn_debug.put_line('update_total_transaction_amt  p_amount ' || p_amount);
            END IF;

            SELECT parent_transaction_id
            INTO   l_grand_parent_id
            FROM   rcv_transactions_interface
            WHERE  interface_transaction_id = p_parent_interface_txn_id;

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('update_total_transaction_amt  l_grand_parent_id ' || l_grand_parent_id);
            END IF;

            IF (    (l_grand_parent_id IS NOT NULL)
                AND (p_transaction_type = 'CORRECT')) THEN
                UPDATE rcv_transactions_interface rti
                   SET rti.interface_transaction_amt = rti.interface_transaction_amt + p_amount
                 WHERE interface_transaction_id = p_parent_interface_txn_id;
            END IF;

            IF (    (l_grand_parent_id IS NOT NULL)
                AND (p_transaction_type = 'RETURN TO RECEIVING')) THEN
                UPDATE rcv_transactions_interface rti
                   SET rti.interface_transaction_amt = rti.interface_transaction_amt - p_amount
                 WHERE interface_transaction_id = p_parent_interface_txn_id;
            END IF;
        END IF; --}
    EXCEPTION
        WHEN OTHERS THEN
            rcv_error_pkg.set_sql_error_message('update_total_transaction_amt', '000');
            rcv_error_pkg.log_interface_error('TRANSACTIONS_INTERFACE_ID', FALSE);
            RAISE;
    END update_total_transaction_amt;

    PROCEDURE derive_matching_basis(
        x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                IN            BINARY_INTEGER
    ) IS
	x_progress varchar2(3);
    begin
	x_progress := '000';

	/* Complex Work Start.
	 * Only for Complex Work POs we can have mixed
	 * Service and quantity shipments. And for this
	 * PO we will always have the line and shipment
	 * information  provided. So first get the
	 * matching_basis from po_line_locations. For
	 * non complex work POs, all the shipment will
	 * have the same matching_basis as that of the
	 * line and  hence there wont be a problem if
	 * the shipment number is given for a service or
	 * quantity based POs. We will have po_line_id at
	 * this point since we would have derived it in
	 * derive_po_line_info.
	*/
	IF (g_asn_debug = 'Y') THEN
	asn_debug.put_line('po_line_id '
	    ||x_cascaded_table(n).po_line_id);
	asn_debug.put_line('po_line_location_id '
	    ||x_cascaded_table(n).po_line_location_id);
	asn_debug.put_line('shipment_num '
	    ||x_cascaded_table(n).document_shipment_line_num);
	END IF;

        IF(x_cascaded_table(n).po_line_id IS NOT NULL)
                        AND
           (x_cascaded_table(n).po_line_location_id is not null) THEN--{
	    begin

              SELECT NVL(pll.value_basis, 'QUANTITY'),
                   NVL(pll.matching_basis, 'QUANTITY'),
                   NVL(pl.purchase_basis,'GOODS')
              INTO   x_cascaded_table(n).value_basis,
                   x_cascaded_table(n).matching_basis,
                   x_cascaded_table(n).purchase_basis
              FROM   po_line_locations_all pll,
                     po_lines_all pl
              WHERE  pl.po_line_id = x_cascaded_table(n).po_line_id
              and pl.po_line_id = pll.po_line_id
              and    pll.line_location_id =x_cascaded_table(n).po_line_location_id;
	   exception
		when no_data_found then
		   IF (g_asn_debug = 'Y') THEN
		       asn_debug.put_line('NO data found in derive_match_basis '
			    ||'for PO shipments with line and line_loc_id info');
		   END IF;
		  x_cascaded_table(n).error_status   :=
                        rcv_error_pkg.g_ret_sts_unexp_error;
		  rcv_error_pkg.set_sql_error_message(
		       ' when no data in derive_matching_basis '||
			    'line and line_loc_id info' ,
                       x_progress);
                   x_cascaded_table(n).error_message  :=
                        rcv_error_pkg.get_last_message;
		when others then
		   IF (g_asn_debug = 'Y') THEN
		       asn_debug.put_line('when others in derive_match_basis '
			    ||'for PO shipments with line and line_loc_id info');
		   END IF;
		  x_cascaded_table(n).error_status   :=
                        rcv_error_pkg.g_ret_sts_unexp_error;
		  rcv_error_pkg.set_sql_error_message(
			'when others in derive_matching_basis with '||
			     'line and line_loc_id info',
                       x_progress);
                   x_cascaded_table(n).error_message  :=
                        rcv_error_pkg.get_last_message;
	   end;
        ELSIF((x_cascaded_table(n).po_line_id IS NOT NULL)
                        AND
           (x_cascaded_table(n).document_shipment_line_num is not null)) THEN--}{
            begin
              SELECT NVL(pll.value_basis, 'QUANTITY'),
                   NVL(pll.matching_basis, 'QUANTITY'),
                   NVL(pl.purchase_basis,'GOODS')
              INTO   x_cascaded_table(n).value_basis,
                   x_cascaded_table(n).matching_basis,
                   x_cascaded_table(n).purchase_basis
              FROM   po_line_locations_all pll,
                     po_lines_all pl
              WHERE  pl.po_line_id = x_cascaded_table(n).po_line_id
              and pl.po_line_id = pll.po_line_id
              and pll.shipment_num =
                        x_cascaded_table(n).document_shipment_line_num;
           exception
                when too_many_rows then
                   IF (g_asn_debug = 'Y') THEN
                       asn_debug.put_line('too many rows in derive_match_basis '                            ||'for PO shipments with line and ship info');
                   END IF;
                  x_cascaded_table(n).error_status   :=
                        rcv_error_pkg.g_ret_sts_unexp_error;
                  rcv_error_pkg.set_sql_error_message(
                       ' too many rows  in derive_matching_basis '||
                            'line and ship info' ,
                       x_progress);
                   x_cascaded_table(n).error_message  :=
                        rcv_error_pkg.get_last_message;
                when no_data_found then
                   IF (g_asn_debug = 'Y') THEN
                       asn_debug.put_line('NO data found in derive_match_basis '                            ||'for PO shipments with line and ship info');
                   END IF;
                  x_cascaded_table(n).error_status   :=
                        rcv_error_pkg.g_ret_sts_unexp_error;
                  rcv_error_pkg.set_sql_error_message(
                       ' when no data in derive_matching_basis '||
                            'line and ship info' ,
                       x_progress);
                   x_cascaded_table(n).error_message  :=
                        rcv_error_pkg.get_last_message;
                when others then
                   IF (g_asn_debug = 'Y') THEN
                       asn_debug.put_line('when others in derive_match_basis '
                            ||'for PO shipments with line and ship info');
                   END IF;
                  x_cascaded_table(n).error_status   :=
                        rcv_error_pkg.g_ret_sts_unexp_error;
                  rcv_error_pkg.set_sql_error_message(
                        'when others in derive_matching_basis with '||
                             'line and ship info',
                       x_progress);
                   x_cascaded_table(n).error_message  :=
                        rcv_error_pkg.get_last_message;
           end;
        ELSIF x_cascaded_table(n).po_line_id IS NOT NULL THEN --}{
	   begin
            SELECT NVL(order_type_lookup_code, 'QUANTITY'),
                   NVL(purchase_basis, 'GOODS'),
                   NVL(matching_basis, 'QUANTITY')
            INTO   x_cascaded_table(n).value_basis,
                   x_cascaded_table(n).purchase_basis,
                   x_cascaded_table(n).matching_basis
            FROM   po_lines_all
            WHERE  po_line_id = x_cascaded_table(n).po_line_id;
	   exception
		when no_data_found then
		   IF (g_asn_debug = 'Y') THEN
		       asn_debug.put_line('NO data found in derive_match_basis '
			    ||'for PO shipments with line info');
		   END IF;
		  x_cascaded_table(n).error_status   :=
                        rcv_error_pkg.g_ret_sts_unexp_error;
		  rcv_error_pkg.set_sql_error_message(
		       ' when no data in derive_matching_basis with '||
			     'line info ',
                       x_progress);
                   x_cascaded_table(n).error_message  :=
                        rcv_error_pkg.get_last_message;
		when others then
		   IF (g_asn_debug = 'Y') THEN
		       asn_debug.put_line('when others in derive_match_basis '
			    ||'for PO shipments with line info');
		   END IF;
		  x_cascaded_table(n).error_status   :=
                        rcv_error_pkg.g_ret_sts_unexp_error;
		  rcv_error_pkg.set_sql_error_message(
			'when others in derive_matching_basis with '||
			     'line info',
                       x_progress);
                   x_cascaded_table(n).error_message  :=
                        rcv_error_pkg.get_last_message;
	   end;
        ELSE --}{
            -- we require line info for receiving against services lines
            x_cascaded_table(n).matching_basis  := 'QUANTITY';
            x_cascaded_table(n).purchase_basis  := 'GOODS';
        END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('matching_basis ' ||
			x_cascaded_table(n).matching_basis);
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            rcv_error_pkg.set_sql_error_message(
			'update_total_transaction_amt',
		        '000');
            rcv_error_pkg.log_interface_error(
			'TRANSACTIONS_INTERFACE_ID',
			 FALSE);
            RAISE;
    END derive_matching_basis;

/* Procedure get_deliver_to_person_from_po() is added as part of Bug#6375015 fix.
   get_deliver_to_person_from_po() is called from validate_vendor_rcv_line().
   At that point of time, all the defaulting and derivation would have happened,
   so po_line_location_id or po_distribution_id would be available.
   This procedure tries to default the deliver_to_person_id mentioned in the pod of
   Purchase order. If po_distribution_id is not known, it will try to get the
   value based on po_line_location only if the poll has got single distribution.
 */
    PROCEDURE get_deliver_to_person_from_po(
        x_cascaded_table    IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                   IN BINARY_INTEGER
    ) IS
       l_deliver_to_person_id        NUMBER;
       l_distribution_count          NUMBER;
    BEGIN
      --At this point po_distribution_id or po_line_location_id would have been derived or defaulted.
       IF (g_asn_debug = 'Y') THEN
           asn_debug.put_line('Inside get_deliver_to_person_from_po...');
       END IF;
       IF (x_cascaded_table(n).po_distribution_id is not null) THEN
          IF (g_asn_debug = 'Y') THEN
             asn_debug.put_line('Inside pod is not null..pod value :'||x_cascaded_table(n).po_distribution_id);
          END IF;

          BEGIN
             select deliver_to_person_id
               into l_deliver_to_person_id
               from po_distributions_all
              where po_distribution_id = x_cascaded_table(n).po_distribution_id;

              x_cascaded_table(n).deliver_to_person_id := l_deliver_to_person_id;
              IF (g_asn_debug = 'Y') THEN
                 asn_debug.put_line('defaulted deliver_to_person_id as:'||l_deliver_to_person_id);
               END IF;
          EXCEPTION
              WHEN OTHERS then
                 IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Exception occured while getting deliver_to_person_id thru pod');
                 END IF;
          END;
       ELSIF (x_cascaded_table(n).po_line_location_id is not null) THEN
          IF (g_asn_debug = 'Y') THEN
             asn_debug.put_line('Inside poll not null..poll value :'||x_cascaded_table(n).po_line_location_id);
          END IF;

          BEGIN
             select count(po_distribution_id)
               into l_distribution_count
               from po_distributions_all
              where line_location_id = x_cascaded_table(n).po_line_location_id;

             IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Inside poll not null..l_distribution_count:'||l_distribution_count);
             END IF;

             IF l_distribution_count = 1 THEN
                select deliver_to_person_id
                  into l_deliver_to_person_id
                  from po_distributions_all
                 where line_location_id = x_cascaded_table(n).po_line_location_id;

                 x_cascaded_table(n).deliver_to_person_id := l_deliver_to_person_id;
                 IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('defaulted deliver_to_person_id as:'||l_deliver_to_person_id);
                 END IF;
             ELSE--l_distribution_count = 1
                 IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('deliver_to_person_id  not defalued as poll has multiple distributions');
                 END IF;
             END IF;--l_distribution_count = 1
          EXCEPTION
              WHEN OTHERS then
                 IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('Exception occured while getting deliver_to_person_id thru poll');
                 END IF;
          END;
       END IF;--(x_cascaded_table(n).po_distribution_id is not null)
    END get_deliver_to_person_from_po;

/* Function get_deliver_to_person_from_rt() is added as part of Bug#6375015 fix.
   This function is called from validate_vendor_rcv_line() and it tries to default
   the deliver_to_person_id mentioned in the parent transaction(i.e from rcv_transactions).
 */
    FUNCTION get_deliver_to_person_from_rt(
        x_cascaded_table    IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                   IN BINARY_INTEGER
    ) RETURN NUMBER IS
       l_parent_deliver_to_person_id NUMBER := null;
    BEGIN
       select deliver_to_person_id
         into l_parent_deliver_to_person_id
         from rcv_transactions
        where transaction_id = x_cascaded_table(n).parent_transaction_id;

        IF (g_asn_debug = 'Y') THEN
           asn_debug.put_line('Got deliver_to_person_id of parent txn as:'||l_parent_deliver_to_person_id);
        END IF;
        return l_parent_deliver_to_person_id;
    EXCEPTION
       WHEN OTHERS then
          IF (g_asn_debug = 'Y') THEN
             asn_debug.put_line('Exception occured in get_deliver_to_person_from_rt');
          END IF;
          return null;
    END get_deliver_to_person_from_rt;

/* Function get_deliver_to_person_from_rti() is added as part of Bug#6375015 fix.
   This function is called from validate_vendor_rcv_line() and it tries to default
   the deliver_to_person_id mentioned in the parent transaction(i.e from rcv_transactions_interface).
 */

    FUNCTION get_deliver_to_person_from_rti(
        x_cascaded_table    IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
        n                   IN BINARY_INTEGER
    ) RETURN NUMBER IS
       l_parent_deliver_to_person_id NUMBER := null;
    BEGIN
       select deliver_to_person_id
         into l_parent_deliver_to_person_id
         from rcv_transactions_interface
        where interface_transaction_id = x_cascaded_table(n).parent_transaction_id;

        IF (g_asn_debug = 'Y') THEN
           asn_debug.put_line('Got deliver_to_person_id of parent txn as:'||l_parent_deliver_to_person_id);
        END IF;
        return l_parent_deliver_to_person_id;
    EXCEPTION
       WHEN OTHERS then
          IF (g_asn_debug = 'Y') THEN
             asn_debug.put_line('Exception occured in get_deliver_to_person_from_rti');
          END IF;
          return null;
    END get_deliver_to_person_from_rti;

    PROCEDURE validate_lcm_line
    ( x_cascaded_table		   IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
      n                            IN binary_integer,
      x_asn_type                   IN rcv_headers_interface.asn_type%type,
      x_header_record              IN rcv_roi_preprocessor.header_rec_type
    ) IS

       l_pre_rcv_flag         VARCHAR2(1);
       l_lcm_shipment_flag    VARCHAR2(1);
       l_lsl_exists           NUMBER := 0;
       l_rsl_qty              NUMBER;
       l_rsl_uom              rcv_shipment_lines.unit_of_measure%type;
       -- Bug 7607281
       l_sec_rsl_qty          NUMBER;
       l_sec_rsl_uom          rcv_shipment_lines.secondary_unit_of_measure%type;
       l_lsl_id               NUMBER;
       v_sobid                NUMBER;
       l_lcm_date             rcv_shipment_headers.conversion_date%type;
       p_api_version          NUMBER := 1.0;
       p_init_msg_list        VARCHAR2(1);
       p_commit               VARCHAR2(1);
       x_return_status        VARCHAR2(1);
       x_msg_count            NUMBER;
       x_msg_data             VARCHAR2(2000);
       x_currency_code             rcv_transactions.currency_code%type;
       x_currency_conversion_type  rcv_transactions.currency_conversion_type%type;
       x_currency_conversion_rate  NUMBER;
       -- Bug 10357707
       l_functional_currency       cst_organization_definitions.currency_code%type;
       l_po_currency               po_headers_all.currency_code%type;

    BEGIN
	IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('In validate_lcm_line');
            asn_debug.put_line('x_cascaded_table(n).error_status ' || x_cascaded_table(n).error_status);
            asn_debug.put_line('x_cascaded_table(n).transaction_type ' || x_cascaded_table(n).transaction_type);
        END IF;

        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

	l_pre_rcv_flag := rcv_table_functions.is_pre_rcv_org(x_cascaded_table(n).to_organization_id);
	l_lcm_shipment_flag := rcv_table_functions.is_lcm_shipment (x_cascaded_table(n).po_line_location_id);

	IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('x_cascaded_table(n).to_organization_id ' || x_cascaded_table(n).to_organization_id);
            asn_debug.put_line('l_pre_rcv_flag => ' || l_pre_rcv_flag);
            asn_debug.put_line('x_cascaded_table(n).po_line_location_id ' || x_cascaded_table(n).po_line_location_id);
            asn_debug.put_line('l_lcm_shipment_flag => ' || l_lcm_shipment_flag);
            asn_debug.put_line('x_asn_type => ' || x_asn_type);
        END IF;

        IF (l_lcm_shipment_flag = 'Y') THEN

            IF (x_cascaded_table(n).transaction_type not in ('SHIP','RECEIVE')) THEN
	        IF (x_cascaded_table(n).lcm_shipment_line_id IS NULL) THEN
		    --
                    asn_debug.put_line('Error: lcm_shipment_line_id should not be null ');
                    x_cascaded_table(n).error_status := 'E';
                    rcv_error_pkg.set_error_message('PO_PDOI_COLUMN_NOT_NULL', x_cascaded_table(n).error_message);
                    rcv_error_pkg.set_token('COLUMN_NAME', 'LCM_SHIPMENT_LINE_ID');
                    rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,'LCM_SHIPMENT_LINE_ID',FALSE);
                    --
                END IF;
		RETURN;
            END IF;
            IF (l_pre_rcv_flag = 'Y') THEN
	        IF (x_asn_type = 'ASN') THEN
		    --
                    asn_debug.put_line('Error: ' || x_asn_type || ' is not supported as the org is pre-receive enabled ');
                    x_cascaded_table(n).error_status := 'E';
                    rcv_error_pkg.set_error_message('RCV_ASN_IMPORT_NOT_ALLOWED', x_cascaded_table(n).error_message);
                    rcv_error_pkg.set_token('ASN_TYPE',x_asn_type);
                    rcv_error_pkg.set_token('ORG_ID',x_cascaded_table(n).to_organization_id);
                    rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,'ASN_TYPE',FALSE);
		    RETURN;
                    --
                END IF;
	        IF (x_cascaded_table(n).lcm_shipment_line_id IS NULL) THEN
		    --
                    asn_debug.put_line('Error: lcm_shipment_line_id should not be null ');
                    x_cascaded_table(n).error_status := 'E';
                    rcv_error_pkg.set_error_message('PO_PDOI_COLUMN_NOT_NULL', x_cascaded_table(n).error_message);
                    rcv_error_pkg.set_token('COLUMN_NAME', 'LCM_SHIPMENT_LINE_ID');
                    rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,'LCM_SHIPMENT_LINE_ID',FALSE);
		    RETURN;
                    --
                END IF;
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('x_cascaded_table(n).lcm_shipment_line_id => ' || x_cascaded_table(n).lcm_shipment_line_id);
                END IF;
	        IF (x_cascaded_table(n).unit_landed_cost IS NULL) THEN
		    --
                    asn_debug.put_line('Error: unit_landed_cost should not be null ');
                    x_cascaded_table(n).error_status := 'E';
                    rcv_error_pkg.set_error_message('PO_PDOI_COLUMN_NOT_NULL', x_cascaded_table(n).error_message);
                    rcv_error_pkg.set_token('COLUMN_NAME', 'UNIT_LANDED_COST');
                    rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,'UNIT_LANDED_COST',FALSE);
		    RETURN;
                    --
                END IF;
                IF (g_asn_debug = 'Y') THEN
                    asn_debug.put_line('x_cascaded_table(n).unit_landed_cost => ' || x_cascaded_table(n).unit_landed_cost);
                END IF;
                IF (x_asn_type = 'LCM') THEN /* LCM import */
                    --
		    SELECT count(1)
		    INTO   l_lsl_exists
		    FROM   rcv_shipment_lines
		    WHERE  lcm_shipment_line_id is not null
		    AND    lcm_shipment_line_id = x_cascaded_table(n).lcm_shipment_line_id;

                    asn_debug.put_line('Checking RSL: l_lsl_exists => ' || l_lsl_exists, null, 14);

		    IF (l_lsl_exists = 0) THEN
		        SELECT count(1)
		        INTO   l_lsl_exists
		        FROM   rcv_transactions_interface
		        WHERE  lcm_shipment_line_id is not null
		        AND    lcm_shipment_line_id = x_cascaded_table(n).lcm_shipment_line_id
 		        AND    processing_status_code = 'RUNNING'
			AND    interface_transaction_id <> x_cascaded_table(n).interface_transaction_id;

                        asn_debug.put_line('Checking RTI: l_lsl_exists => ' || l_lsl_exists, null, 14);
		    END IF;

		    IF (l_lsl_exists > 0) THEN
                        --
                        asn_debug.put_line('Error: Duplicate lcm_shipment_line_id');
                        x_cascaded_table(n).error_status := 'E';
                        rcv_error_pkg.set_error_message('RCV_DUP_LCM_SHIPMENT_LINE', x_cascaded_table(n).error_message);
                        rcv_error_pkg.set_token('VALUE', x_cascaded_table(n).lcm_shipment_line_id);
                        rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,'LCM_SHIPMENT_LINE_ID',FALSE);
                        RETURN;
                        --
		    END IF;
                    --
                END IF;
	        IF (x_cascaded_table(n).transaction_type = 'RECEIVE' AND
                    x_cascaded_table(n).shipment_line_id IS NOT NULL) THEN
                    -- We need to restrict partial receipts of LCM shipment.
                    SELECT rsl.quantity_shipped,
		           rsl.unit_of_measure,
                           rsl.secondary_quantity_shipped,
			   rsl.secondary_unit_of_measure,
			   rsl.lcm_shipment_line_id
                    INTO   l_rsl_qty, l_rsl_uom, l_sec_rsl_qty, l_sec_rsl_uom, l_lsl_id
                    FROM   rcv_shipment_lines  rsl
                    WHERE  rsl.shipment_line_id = x_cascaded_table(n).shipment_line_id;
                    --
                    IF (l_rsl_qty <> x_cascaded_table(n).quantity) THEN
                        --
                        asn_debug.put_line('x_cascaded_table(n).shipment_line_id => ' || x_cascaded_table(n).shipment_line_id, null, 14);
                        asn_debug.put_line('l_rsl_qty => ' || l_rsl_qty, null, 14);
                        asn_debug.put_line('x_cascaded_table(n).quantity => ' || x_cascaded_table(n).quantity, null, 14);
                        asn_debug.put_line('Error: Partial receipt not allowed');
                        x_cascaded_table(n).error_status := 'E';
                        rcv_error_pkg.set_error_message('RCV_INVALID_ROI_VALUE', x_cascaded_table(n).error_message);
                        rcv_error_pkg.set_token('COLUMN', 'QUANTITY');
                        rcv_error_pkg.set_token('ROI_VALUE', x_cascaded_table(n).quantity);
                        rcv_error_pkg.set_token('SYS_VALUE', l_rsl_qty);
                        rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,'QUANTITY',FALSE);
                        RETURN;
                        --
                    END IF;
                    IF (l_rsl_uom <> x_cascaded_table(n).unit_of_measure) THEN
                        --
                        asn_debug.put_line('x_cascaded_table(n).shipment_line_id => ' || x_cascaded_table(n).shipment_line_id, null, 14);
                        asn_debug.put_line('l_rsl_uom => ' || l_rsl_uom, null, 14);
                        asn_debug.put_line('x_cascaded_table(n).unit_of_measure => ' || x_cascaded_table(n).unit_of_measure, null, 14);
                        asn_debug.put_line('Error: Partial receipt not allowed');
                        x_cascaded_table(n).error_status := 'E';
                        rcv_error_pkg.set_error_message('RCV_INVALID_ROI_VALUE', x_cascaded_table(n).error_message);
                        rcv_error_pkg.set_token('COLUMN', 'UNIT_OF_MEASURE');
                        rcv_error_pkg.set_token('ROI_VALUE', x_cascaded_table(n).unit_of_measure);
                        rcv_error_pkg.set_token('SYS_VALUE', l_rsl_uom);
                        rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,'UNIT_OF_MEASURE',FALSE);
                        RETURN;
                        --
                    END IF;
		    -- Bug 7607281
                    IF(x_cascaded_table(n).mobile_txn<>'Y') THEN
                          IF (nvl (l_sec_rsl_qty, -99) <> nvl(x_cascaded_table(n).secondary_quantity,-99)) THEN
                              --
                              asn_debug.put_line('x_cascaded_table(n).shipment_line_id => ' || x_cascaded_table(n).shipment_line_id, null, 14);
                              asn_debug.put_line('l_sec_rsl_qty => ' || l_sec_rsl_qty, null, 14);
                              asn_debug.put_line('x_cascaded_table(n).secondary_quantity => ' || x_cascaded_table(n).secondary_quantity, null, 14);
                              asn_debug.put_line('Error: Partial receipt not allowed');
                              x_cascaded_table(n).error_status := 'E';
                              rcv_error_pkg.set_error_message('RCV_INVALID_ROI_VALUE', x_cascaded_table(n).error_message);
                              rcv_error_pkg.set_token('COLUMN', 'SECONDARY_QUANTITY');
                              rcv_error_pkg.set_token('ROI_VALUE', x_cascaded_table(n).secondary_quantity);
                              rcv_error_pkg.set_token('SYS_VALUE', l_sec_rsl_qty);
                              rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,'SECONDARY_QUANTITY',FALSE);
                              RETURN;
                              --
                          END IF;
                          --
                          IF (nvl(l_sec_rsl_uom,'-99') <> nvl(x_cascaded_table(n).secondary_unit_of_measure,'-99')) THEN
                              --
                              asn_debug.put_line('x_cascaded_table(n).shipment_line_id => ' || x_cascaded_table(n).shipment_line_id, null, 14);
                              asn_debug.put_line('l_sec_rsl_uom => ' || l_sec_rsl_uom, null, 14);
                              asn_debug.put_line('x_cascaded_table(n).secondary_unit_of_measure => ' || x_cascaded_table(n).secondary_unit_of_measure, null, 14);
                              asn_debug.put_line('Error: Partial receipt not allowed');
                              x_cascaded_table(n).error_status := 'E';
                              rcv_error_pkg.set_error_message('RCV_INVALID_ROI_VALUE', x_cascaded_table(n).error_message);
                              rcv_error_pkg.set_token('COLUMN', 'SECONDARY_UNIT_OF_MEASURE');
                              rcv_error_pkg.set_token('ROI_VALUE', x_cascaded_table(n).secondary_unit_of_measure);
                              rcv_error_pkg.set_token('SYS_VALUE', l_sec_rsl_uom);
                              rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,'SECONDARY_UNIT_OF_MEASURE',FALSE);
                              RETURN;
                              --
                          END IF;
                    END IF;

                    -- Bug 10357707: Start
                    SELECT cod.currency_code, poh.currency_code
                    INTO   l_functional_currency, l_po_currency
                    FROM   cst_organization_definitions cod,
                           po_headers_all               poh
                    WHERE  cod.operating_unit  = poh.org_id
                    AND    cod.organization_id = x_cascaded_table(n).to_organization_id
                    AND    poh.po_header_id    = x_cascaded_table(n).po_header_id;

                    IF (l_functional_currency = l_po_currency) THEN
                        IF (g_asn_debug = 'Y') THEN
                            asn_debug.put_line('Returning since PO uses functional currency');
                        END IF;
                        RETURN;
                    END IF;
                    -- Bug 10357707: End

                    -- Bug 9689804: Start
                    inl_integration_grp.Get_CurrencyInfo
                                 (  p_api_version              => p_api_version,
                                    p_init_msg_list            => p_init_msg_list,
                                    p_commit                   => p_commit,
                                    p_ship_line_id             => l_lsl_id,
                                    x_return_status            => x_return_status,
                                    x_msg_count                => x_msg_count,
                                    x_msg_data                 => x_msg_data,
                                    x_currency_code            => x_currency_code,
                                    x_currency_conversion_type => x_currency_conversion_type,
                                    x_currency_conversion_date => l_lcm_date,
                                    x_currency_conversion_rate => x_currency_conversion_rate );

                    asn_debug.put_line('x_return_status            : ' || x_return_status);
		    asn_debug.put_line('x_currency_code            : ' || x_currency_code);
		    asn_debug.put_line('x_currency_conversion_type : ' || x_currency_conversion_type);
		    asn_debug.put_line('l_lcm_date                 : ' || l_lcm_date);
		    asn_debug.put_line('x_currency_conversion_rate : ' || x_currency_conversion_rate);

                    IF (x_return_status <> 'S') THEN
                        raise fnd_api.g_exc_error;
                    END IF;

		    IF (x_currency_code IS NULL) THEN
		        x_cascaded_table(n).error_status := 'E';
		        rcv_error_pkg.set_error_message('RCV_LCM_CURRENCY_CODE_NULL', x_cascaded_table(n).error_message);
		        rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,'SECONDARY_UNIT_OF_MEASURE',FALSE);
		        RETURN;
		    ELSIF (x_currency_conversion_type IS NULL) THEN
		        x_cascaded_table(n).error_status := 'E';
		        rcv_error_pkg.set_error_message('RCV_LCM_CURRENCY_TYPE_NULL', x_cascaded_table(n).error_message);
		        rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,'SECONDARY_UNIT_OF_MEASURE',FALSE);
		        RETURN;
		    ELSIF (x_currency_conversion_rate IS NULL) THEN
		        x_cascaded_table(n).error_status := 'E';
		        rcv_error_pkg.set_error_message('RCV_LCM_CURRENCY_RATE_NULL', x_cascaded_table(n).error_message);
		        rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,'SECONDARY_UNIT_OF_MEASURE',FALSE);
		        RETURN;
		    ELSIF (l_lcm_date IS NULL) THEN
		        x_cascaded_table(n).error_status := 'E';
		        rcv_error_pkg.set_error_message('RCV_LCM_CURRENCY_DATE_NULL', x_cascaded_table(n).error_message);
		        rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,'SECONDARY_UNIT_OF_MEASURE',FALSE);
		        RETURN;
		    END IF;

 	            x_cascaded_table(n).currency_code := x_currency_code;
 	            x_cascaded_table(n).currency_conversion_type := x_currency_conversion_type;
 	            x_cascaded_table(n).currency_conversion_date := l_lcm_date;
 	            x_cascaded_table(n).currency_conversion_rate := x_currency_conversion_rate;
                    -- Bug 9689804: End

	        END IF;
	    END IF;
	ELSE
	    IF (x_asn_type = 'LCM') THEN
		--
                asn_debug.put_line('Error: Non-lcm shipment line cannot be attached to an LCM shipment');
                x_cascaded_table(n).error_status := 'E';
                rcv_error_pkg.set_error_message('RCV_INVALID_LCM_SHIPMENT', x_cascaded_table(n).error_message);
                rcv_error_pkg.set_token('SHIPMENT', x_header_record.header_record.shipment_num);
                rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,'PO_LINE_LOCATION_ID',FALSE);
                RETURN;
                --
            END IF;
	    IF (x_cascaded_table(n).lcm_shipment_line_id IS NOT NULL) THEN
                --
                asn_debug.put_line('Error: lcm_shipment_line_id should be null for a non-lcm shipment');
                x_cascaded_table(n).error_status := 'E';
                rcv_error_pkg.set_error_message('PO_PDOI_COLUMN_NULL', x_cascaded_table(n).error_message);
                rcv_error_pkg.set_token('COLUMN_NAME', 'LCM_SHIPMENT_LINE_ID');
                rcv_error_pkg.set_token('VALUE', x_cascaded_table(n).lcm_shipment_line_id);
                rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,'LCM_SHIPMENT_LINE_ID',FALSE);
                RETURN;
                --
            END IF;

	END IF;

        IF (g_asn_debug = 'Y') THEN
            asn_debug.put_line('Exitting validate_lcm_line');
        END IF;

    EXCEPTION
       WHEN OTHERS THEN
            x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
            rcv_error_pkg.set_sql_error_message('validate_lcm_line' , '000');
            x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,'LCM_SHIPMENT_LINE_ID',FALSE);

            IF (g_asn_debug = 'Y') THEN
                asn_debug.put_line('Unexpected exception in validate_lcm_line: ' || SQLERRM);
            END IF;

    END validate_lcm_line;

    -- Bug 7651646
    PROCEDURE validate_src_txn(
         x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
         n                IN            BINARY_INTEGER
    ) IS
        l_count NUMBER := 0;
    BEGIN
         IF (x_cascaded_table(n).source_transaction_num is not null) THEN
            SELECT count(1)
            INTO   l_count
            FROM   rcv_transactions
            WHERE  source_transaction_num = x_cascaded_table(n).source_transaction_num;

            asn_debug.put_line('RT l_count : ' || l_count);

            IF (l_count = 0) then

                 SELECT count(1)
                 INTO   l_count
                 FROM   rcv_transactions_interface
                 WHERE  source_transaction_num = x_cascaded_table(n).source_transaction_num
                 AND    processing_status_code = 'RUNNING'
                 AND    interface_transaction_id <> x_cascaded_table(n).interface_transaction_id;

                 asn_debug.put_line('RTI l_count : ' || l_count);
            END IF;

            IF (l_count >0 ) then
                 rcv_error_pkg.set_error_message('RCV_DUP_SRC_TRANSACTION');
                 rcv_error_pkg.set_token('VALUE',x_cascaded_table(n).source_transaction_num);
                 x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_error;
                 x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
                 rcv_error_pkg.log_interface_error('SOURCE_TRANSACTION_NUM', FALSE);
            END IF;
         End IF;
    EXCEPTION
        WHEN OTHERS then
           IF (g_asn_debug = 'Y') THEN
               asn_debug.put_line('Exception in the validate_src_txn');
           END IF;
    END validate_src_txn;

  -- <Bug 9342280 : Added for CLM project>
  PROCEDURE get_clm_info(p_validate_type       VARCHAR2,
                         x_cascaded_table      IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
                         n                     IN BINARY_INTEGER,
                         x_is_clm_po           IN OUT NOCOPY VARCHAR2,
                         x_partial_funded_flag IN OUT NOCOPY VARCHAR2) IS

    l_distribution_type      VARCHAR2(100);
    l_matching_basis         VARCHAR2(100);
    l_accrue_on_receipt_flag VARCHAR2(100);
    l_code_combination_id    NUMBER;
    l_budget_account_id      NUMBER;
    l_unit_meas_lookup_code  VARCHAR2(100);
    l_funded_value           NUMBER;
    l_quantity_funded        NUMBER;
    l_amount_funded          NUMBER;
    l_quantity_received      NUMBER;
    l_amount_received        NUMBER;
    l_quantity_delivered     NUMBER;
    l_amount_delivered       NUMBER;
    l_quantity_billed        NUMBER;
    l_amount_billed          NUMBER;
    l_quantity_cancelled     NUMBER;
    l_amount_cancelled       NUMBER;
    l_return_status_clm      VARCHAR2(100);

  BEGIN

    IF (x_cascaded_table(n).error_status NOT IN ('S', 'W')) THEN

      RETURN;

    END IF;

    x_is_clm_po           := 'N';
    x_partial_funded_flag := 'N';

    IF (g_asn_debug = 'Y') THEN
      asn_debug.put_line('before calling po_clm_intg_grp.is_clm_po()');
    END IF;

    x_is_clm_po := po_clm_intg_grp.is_clm_po(p_po_header_id        => NULL,
                                             p_po_line_id          => NULL,
                                             p_po_line_location_id => x_cascaded_table(n).po_line_location_id,
                                             p_po_distribution_id  => x_cascaded_table(n).po_distribution_id);

    IF (g_asn_debug = 'Y') THEN
      asn_debug.put_line('p_po_line_location_id : ' || x_cascaded_table(n).po_line_location_id);
      asn_debug.put_line('p_po_distribution_id : ' || x_cascaded_table(n).po_distribution_id);
      asn_debug.put_line('x_is_clm_po: ' || x_is_clm_po);
    END IF;

    IF x_is_clm_po = 'Y' THEN

      IF (g_asn_debug = 'Y') THEN
        asn_debug.put_line('before calling po_clm_intg_grp.get_funding_info()');
      END IF;

      po_clm_intg_grp.get_funding_info(p_po_header_id           => NULL,
                                       p_po_line_id             => NULL,
                                       p_line_location_id       => x_cascaded_table(n).po_line_location_id,
                                       p_po_distribution_id     => x_cascaded_table(n).po_distribution_id,
                                       x_distribution_type      => l_distribution_type,
                                       x_matching_basis         => l_matching_basis,
                                       x_accrue_on_receipt_flag => l_accrue_on_receipt_flag,
                                       x_code_combination_id    => l_code_combination_id,
                                       x_budget_account_id      => l_budget_account_id,
                                       x_partial_funded_flag    => x_partial_funded_flag,
                                       x_unit_meas_lookup_code  => l_unit_meas_lookup_code,
                                       x_funded_value           => l_funded_value,
                                       x_quantity_funded        => l_quantity_funded,
                                       x_amount_funded          => l_amount_funded,
                                       x_quantity_received      => l_quantity_received,
                                       x_amount_received        => l_amount_received,
                                       x_quantity_delivered     => l_quantity_delivered,
                                       x_amount_delivered       => l_amount_delivered,
                                       x_quantity_billed        => l_quantity_billed,
                                       x_amount_billed          => l_amount_billed,
                                       x_quantity_cancelled     => l_quantity_cancelled,
                                       x_amount_cancelled       => l_amount_cancelled,
                                       x_return_status          => l_return_status_clm);

      IF (g_asn_debug = 'Y') THEN
        asn_debug.put_line('x_partial_funded_flag : ' ||  x_partial_funded_flag);
      END IF;

      IF p_validate_type = 'QUANTITY' THEN
        ASN_DEBug.put_line('l_quantity_funded: ' || l_quantity_funded);
        asn_debug.put_line('l_quantity_received : ' || l_quantity_received);
        asn_debug.put_line('l_quantity_delivered : ' || l_quantity_delivered);
        asn_debug.put_line('l_quantity_cancelled: ' || l_quantity_cancelled);
      ELSE
        asn_debug.put_line('l_amount_funded: ' || l_amount_funded);
        asn_debug.put_line('l_amount_received : ' || l_amount_received);
        asn_debug.put_line('l_amount_delivered : ' || l_amount_delivered);
        asn_debug.put_line('l_amount_cancelled: ' || l_amount_cancelled);
      END IF;

    END IF;

  EXCEPTION
    WHEN OTHERS THEN
      x_cascaded_table(n).error_status := rcv_error_pkg.g_ret_sts_unexp_error;
      rcv_error_pkg.set_sql_error_message('get_clm_info', '000');
      x_cascaded_table(n).error_message := rcv_error_pkg.get_last_message;
      rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,
                                          'po_line_location_id',
                                          FALSE);
      IF (g_asn_debug = 'Y') THEN
        asn_debug.put_line('Unexpected exception in get_clm_info: ' ||
                           SQLERRM);
      END IF;
  END get_clm_info;
  -- <CLM END>

  -- Bug#9705269 :Start
  PROCEDURE validate_shipment_source(
      x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
      n                IN            BINARY_INTEGER
  ) IS
        l_mmt_transaction_id  rcv_shipment_lines.mmt_transaction_id%type;
        l_record_exists number := 0;
        x_error_status VARCHAR2(1);
  BEGIN
        IF (x_cascaded_table(n).error_status NOT IN('S', 'W')) THEN
            RETURN;
        END IF;

        x_error_status  := rcv_error_pkg.g_ret_sts_error;
        asn_debug.put_line('Before rcv_roi_transaction.validate_shipment_source');
        asn_debug.put_line('shipment_line_id: '||x_cascaded_table(n).shipment_line_id);

        IF x_cascaded_table(n).shipment_line_id IS NOT NULL THEN
           SELECT mmt_transaction_id
           INTO   l_mmt_transaction_id
           FROM   rcv_shipment_lines
           WHERE  shipment_line_id = x_cascaded_table(n).shipment_line_id;

           IF l_mmt_transaction_id IS NOT NULL THEN
              SELECT COUNT(*)
              INTO   l_record_exists
              FROM   mtl_material_transactions
              WHERE  transaction_id = l_mmt_transaction_id;

              IF l_record_exists = 0 THEN
                 rcv_error_pkg.set_error_message('RCV_INVALID_SHIPMENT_SOURCE');
                 RAISE e_validation_error;
              END IF;
           END IF;
        END IF;
        asn_debug.put_line('after rcv_roi_transaction.validate_shipment_source');
  EXCEPTION
       WHEN rcv_error_pkg.e_fatal_error THEN
            NULL;
       WHEN e_validation_error THEN
            x_cascaded_table(n).error_status := x_error_status;
            x_cascaded_table(n).error_message:= rcv_error_pkg.get_last_message;
            rcv_error_pkg.set_token('MMT_TXN_ID', l_mmt_transaction_id);
            rcv_error_pkg.set_token('RSL_ID', x_cascaded_table(n).shipment_line_id);
            rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status,'MMT_TRANSACTION_ID',FALSE);
  END validate_shipment_source;
  -- Bug#9705269 :End

  -- rtv project : start
  PROCEDURE validate_parent_rtv
        ( x_cascaded_table IN OUT NOCOPY rcv_roi_preprocessor.cascaded_trans_tab_type,
          n                IN BINARY_INTEGER) IS

      l_count number := 0;
  BEGIN
      IF (x_cascaded_table(n).error_status NOT IN ('S', 'W')) THEN
          RETURN;
      END IF;

      IF (x_cascaded_table(n).transaction_type = 'CORRECT' and x_cascaded_table(n).po_header_id is not null ) THEN
          select count(*)
          into   l_count
          from   rcv_transactions      rt,
                 wsh_delivery_details  wdd
          where  rt.transaction_id = x_cascaded_table(n).parent_transaction_id
          and    rt.transaction_type in ('RETURN TO RECEIVING', 'RETURN TO VENDOR')
          and    rt.interface_source_line_id = wdd.delivery_detail_id
          and    wdd.source_code ='RTV';

          IF ( l_count > 0 ) THEN
               rcv_error_pkg.set_error_message ('RCV_RTV_CORRECT_NOT_ALLOWED');
               rcv_error_pkg.set_token('RTV_PARENT', x_cascaded_table(n).PARENT_TRANSACTION_ID);
               x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_error;
               x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
               rcv_error_pkg.log_interface_message(x_cascaded_table(n).error_status, 'PARENT_TRANSACTION_ID', FALSE );
          END IF;
      END IF;

  EXCEPTION
      WHEN OTHERS THEN
           rcv_error_pkg.set_sql_error_message('validate_parent_rtv', '000');
           x_cascaded_table(n).error_status   := rcv_error_pkg.g_ret_sts_unexp_error;
           x_cascaded_table(n).error_message  := rcv_error_pkg.get_last_message;
           rcv_error_pkg.log_interface_error('PARENT_TRANSACTION_ID', FALSE);
  END validate_parent_rtv;
  -- rtv project: end

END rcv_roi_transaction;

/
