--------------------------------------------------------
--  DDL for Package Body RLM_RLMDPPSR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."RLM_RLMDPPSR_XMLP_PKG" AS
/* $Header: RLMDPPSRB.pls 120.1 2008/02/12 13:26:12 dwkrishn noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_CURRENT_ORG_ID NUMBER;
    L_OU_NAME VARCHAR2(240);
  BEGIN
    BEGIN
      BEGIN
        P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
        M_2 := M_2FORMATTRIGGER;
        /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      EXCEPTION
        WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
          /*SRW.MESSAGE(1000
                     ,'Failed in BEFORE REPORT trigger')*/NULL;
          RETURN (FALSE);
      END;
      L_CURRENT_ORG_ID := MO_GLOBAL.GET_CURRENT_ORG_ID;
      IF (L_CURRENT_ORG_ID IS NULL AND P_ORG_ID IS NOT NULL) THEN
        MO_GLOBAL.SET_POLICY_CONTEXT(P_ACCESS_MODE => 'S'
                                    ,P_ORG_ID => P_ORG_ID);
        L_CURRENT_ORG_ID := P_ORG_ID;
      END IF;
      L_OU_NAME := FND_ACCESS_CONTROL_UTIL.GET_ORG_NAME(L_CURRENT_ORG_ID);
      CP_DEFAULT_OU := L_OU_NAME;
      IF (P_REQUEST_ID IS NOT NULL) THEN
        P_WHERE_CLAUSE := ' and e.request_id = ' || P_REQUEST_ID;
      END IF;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in AFTER REPORT TRIGGER')*/NULL;
        RETURN (FALSE);
    END;
    IF (P_REQUEST_ID IS NOT NULL) THEN
      DELETE FROM RLM_DEMAND_EXCEPTIONS
       WHERE REQUEST_ID = P_REQUEST_ID
         AND PURGE_STATUS is not null;
      COMMIT;
    END IF;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_SCHEDULE_TYPEFORMULA(SCHEDULE_TYPE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      X_SCHEDULE_TYPE VARCHAR2(80);
    BEGIN
      SELECT
        MEANING
      INTO X_SCHEDULE_TYPE
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'RLM_SCHEDULE_TYPE'
        AND LOOKUP_CODE = SCHEDULE_TYPE;
      RETURN X_SCHEDULE_TYPE;
    EXCEPTION
      WHEN OTHERS THEN
        RETURN '-1';
    END;
    RETURN NULL;
  END CF_SCHEDULE_TYPEFORMULA;

  FUNCTION CF_PURGE_STATUSFORMULA(PURGE_STATUS IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      V_PURGE_STATUS VARCHAR(20);
      X_YES VARCHAR2(20);
    BEGIN
      IF (P_EXECUTION_MODE = 'V') THEN
        SELECT
          MEANING
        INTO X_YES
        FROM
          FND_LOOKUPS
        WHERE LOOKUP_TYPE = 'YES_NO'
          AND LOOKUP_CODE = 'N';
        RETURN X_YES;
      ELSE
        SELECT
          MEANING
        INTO X_YES
        FROM
          FND_LOOKUPS
        WHERE LOOKUP_TYPE = 'YES_NO'
          AND LOOKUP_CODE = PURGE_STATUS;
        RETURN X_YES;
      END IF;
    END;
    RETURN NULL;
  END CF_PURGE_STATUSFORMULA;

  FUNCTION CF_1FORMULA RETURN NUMBER IS
  BEGIN
    DECLARE
      V_COUNT NUMBER;
      V_COUNT1 NUMBER;
      V_COUNT2 NUMBER;
    BEGIN
      SELECT
        count(distinct SCHEDULE_HEADER_ID)
      INTO V_COUNT1
      FROM
        RLM_DEMAND_EXCEPTIONS
      WHERE REQUEST_ID = P_REQUEST_ID
        AND ( MESSAGE_NAME like '%SUCCESS%'
      OR MESSAGE_NAME like '%PURGABLE%'
      OR MESSAGE_NAME IS NULL );
      SELECT
        count(distinct SCHEDULE_HEADER_ID)
      INTO V_COUNT2
      FROM
        RLM_DEMAND_EXCEPTIONS
      WHERE REQUEST_ID = P_REQUEST_ID
        AND MESSAGE_NAME NOT like '%SUCCESS%'
        AND MESSAGE_NAME NOT like '%PURGABLE%'
        AND MESSAGE_NAME IS NOT NULL;
      V_COUNT := V_COUNT1 + V_COUNT2;
      RETURN V_COUNT;
    END;
    RETURN NULL;
  END CF_1FORMULA;

  FUNCTION CF_COUNT2FORMULA RETURN NUMBER IS
  BEGIN
    DECLARE
      V_COUNT NUMBER;
    BEGIN
      SELECT
        count(distinct SCHEDULE_HEADER_ID)
      INTO V_COUNT
      FROM
        RLM_DEMAND_EXCEPTIONS
      WHERE REQUEST_ID = P_REQUEST_ID
        AND ( MESSAGE_NAME like '%SUCCESS%'
      OR MESSAGE_NAME like '%PURGABLE%'
      OR MESSAGE_NAME IS NULL );
      RETURN V_COUNT;
    END;
    RETURN NULL;
  END CF_COUNT2FORMULA;

  FUNCTION CF_COUNT3FORMULA RETURN NUMBER IS
  BEGIN
    DECLARE
      V_COUNT NUMBER;
    BEGIN
      SELECT
        count(distinct SCHEDULE_HEADER_ID)
      INTO V_COUNT
      FROM
        RLM_DEMAND_EXCEPTIONS
      WHERE REQUEST_ID = P_REQUEST_ID
        AND MESSAGE_NAME NOT like '%SUCCESS%'
        AND MESSAGE_NAME NOT like '%PURGABLE%'
        AND MESSAGE_NAME IS NOT NULL;
      RETURN V_COUNT;
    END;
    RETURN NULL;
  END CF_COUNT3FORMULA;

  FUNCTION CF_1FORMULA0006 RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      V_REF VARCHAR2(35);
    BEGIN
      IF (P_SCHEDULE_REF_NO IS NOT NULL) THEN
        SELECT
          DISTINCT
          SCHEDULE_REFERENCE_NUM
        INTO V_REF
        FROM
          RLM_DEMAND_EXCEPTIONS
        WHERE REQUEST_ID = P_REQUEST_ID;
        RETURN V_REF;
      ELSE
        RETURN NULL;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        RETURN '-1';
    END;
    RETURN NULL;
  END CF_1FORMULA0006;

  FUNCTION CF_1FORMULA0004 RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      V_REF VARCHAR2(40);
    BEGIN
      IF (P_SHIP_TO_ADDRESS_ID_FROM IS NOT NULL) THEN
        SELECT
          ACCT_SITE.ECE_TP_LOCATION_CODE
        INTO V_REF
        FROM
          HZ_CUST_ACCT_SITES ACCT_SITE
        WHERE ACCT_SITE.CUST_ACCT_SITE_ID = P_SHIP_TO_ADDRESS_ID_FROM;
        RETURN V_REF;
      ELSE
        RETURN NULL;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        RETURN '-1';
    END;
    RETURN NULL;
  END CF_1FORMULA0004;

  FUNCTION CF_SHIP_TO_TOFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      V_REF VARCHAR2(40);
    BEGIN
      IF (P_SHIP_TO_ADDRESS_ID_TO IS NOT NULL) THEN
        SELECT
          ACCT_SITE.ECE_TP_LOCATION_CODE
        INTO V_REF
        FROM
          HZ_CUST_ACCT_SITES ACCT_SITE
        WHERE ACCT_SITE.CUST_ACCT_SITE_ID = P_SHIP_TO_ADDRESS_ID_TO;
        RETURN V_REF;
      ELSE
        RETURN NULL;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        RETURN '-1';
    END;
    RETURN NULL;
  END CF_SHIP_TO_TOFORMULA;

  FUNCTION CF_P_SCHED_TYPEFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      X_SCHEDULE_TYPE VARCHAR2(80);
    BEGIN
      IF (P_SCHEDULE_TYPE IS NULL) THEN
        RETURN NULL;
      ELSE
        SELECT
          MEANING
        INTO X_SCHEDULE_TYPE
        FROM
          FND_LOOKUPS
        WHERE LOOKUP_TYPE = 'RLM_SCHEDULE_TYPE'
          AND LOOKUP_CODE = P_SCHEDULE_TYPE;
        RETURN X_SCHEDULE_TYPE;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        RETURN '-1';
    END;
    RETURN NULL;
  END CF_P_SCHED_TYPEFORMULA;

  FUNCTION CF_EXECUTIONFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      X_EXEC VARCHAR2(80);
    BEGIN
      SELECT
        MEANING
      INTO X_EXEC
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'RLM_EXECUTION_MODE'
        AND LOOKUP_CODE = P_EXECUTION_MODE;
      RETURN X_EXEC;
    EXCEPTION
      WHEN OTHERS THEN
        RETURN '-1';
    END;
    RETURN NULL;
  END CF_EXECUTIONFORMULA;

  FUNCTION CF_YES_NOFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      X_YES VARCHAR2(80);
    BEGIN
      SELECT
        MEANING
      INTO X_YES
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'YES_NO'
        AND LOOKUP_CODE = P_AUTHORIZATION;
      RETURN X_YES;
    EXCEPTION
      WHEN OTHERS THEN
        RETURN '-1';
    END;
    RETURN NULL;
  END CF_YES_NOFORMULA;

  FUNCTION CF_PURGE_ELIGIBLEFORMULA(PURGE_STATUS IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      V_PURGE_STATUS VARCHAR(20);
      X_YES VARCHAR2(20);
    BEGIN
      SELECT
        MEANING
      INTO X_YES
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'YES_NO'
        AND LOOKUP_CODE = PURGE_STATUS;
      RETURN X_YES;
    END;
    RETURN NULL;
  END CF_PURGE_ELIGIBLEFORMULA;

  FUNCTION CF_STATUS RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      X_STATUS VARCHAR2(80);
    BEGIN
      SELECT
        MEANING
      INTO X_STATUS
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'RLM_STATUS'
        AND LOOKUP_CODE = P_STATUS;
      RETURN X_STATUS;
    EXCEPTION
      WHEN OTHERS THEN
        RETURN '-1';
    END;
    RETURN NULL;
  END CF_STATUS;

  FUNCTION CF_CUSTOMERFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      V_CUSTOMER_NAME VARCHAR2(50);
    BEGIN
      IF (P_CUSTOMER IS NOT NULL) THEN
        SELECT
          SUBSTRB(PARTY.PARTY_NAME
                 ,1
                 ,50) CUSTOMER_NAME
        INTO V_CUSTOMER_NAME
        FROM
          HZ_PARTIES PARTY,
          HZ_CUST_ACCOUNTS CUST_ACCT
        WHERE CUST_ACCT.CUST_ACCOUNT_ID = P_CUSTOMER
          AND CUST_ACCT.PARTY_ID = PARTY.PARTY_ID;
      END IF;
      RETURN V_CUSTOMER_NAME;
    EXCEPTION
      WHEN OTHERS THEN
        RETURN '-1';
    END;
  END CF_CUSTOMERFORMULA;

  FUNCTION CP_DEFAULT_OU_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DEFAULT_OU;
  END CP_DEFAULT_OU_P;

  FUNCTION M_2FORMATTRIGGER RETURN VARCHAR2 IS
  BEGIN

    DECLARE
    V_COUNT NUMBER;


  BEGIN

   SELECT COUNT(*) INTO V_COUNT FROM RLM_DEMAND_EXCEPTIONS
   WHERE REQUEST_ID = P_REQUEST_ID;

   IF(V_COUNT > 0) THEN
     RETURN ('Y');
   ELSE
      RETURN ('N');
    END IF;


  END;

  RETURN ('N');

END;

END RLM_RLMDPPSR_XMLP_PKG;

/
