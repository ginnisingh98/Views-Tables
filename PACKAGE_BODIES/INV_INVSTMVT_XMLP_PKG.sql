--------------------------------------------------------
--  DDL for Package Body INV_INVSTMVT_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."INV_INVSTMVT_XMLP_PKG" AS
/* $Header: INVSTMVTB.pls 120.1 2007/12/25 11:01:56 dwkrishn noship $ */
  FUNCTION CF_PARENT_MVT_TERR_CODEFORMULA(C_DISPATCH_TERR_EU_CODE IN VARCHAR2
                                         ,C_DESTINATION_TERR_EU_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF P_MOVEMENT_TYPE = 'A' OR P_MOVEMENT_TYPE = 'AA' THEN
      RETURN (C_DISPATCH_TERR_EU_CODE);
    ELSIF P_MOVEMENT_TYPE = 'D' OR P_MOVEMENT_TYPE = 'DA' THEN
      RETURN (C_DESTINATION_TERR_EU_CODE);
    ELSE
      RETURN (NULL);
    END IF;
    RETURN NULL;
  END CF_PARENT_MVT_TERR_CODEFORMULA;

  PROCEDURE FORMAT_QUANTITY(P_PRECISION IN NUMBER) IS
  BEGIN
    /* SRW.ATTR.MASK := SRW.FORMATMASK_ATTR;
    IF P_PRECISION = 0 THEN
      --SRW.ATTR.FORMATMASK := '-NNN,NNN,NNN,NN0';
    ELSIF P_PRECISION = 1 THEN
      --SRW.ATTR.FORMATMASK := '-NNN,NNN,NNN,NN0.0';
    ELSIF P_PRECISION = 2 THEN
      --SRW.ATTR.FORMATMASK := '-NNN,NNN,NNN,NN0.00';
    ELSIF P_PRECISION = 3 THEN
      --SRW.ATTR.FORMATMASK := '-NN,NNN,NNN,NN0.000';
    ELSIF P_PRECISION = 4 THEN
      --SRW.ATTR.FORMATMASK := '-N,NNN,NNN,NN0.0000';
    ELSIF P_PRECISION = 5 THEN
      --SRW.ATTR.FORMATMASK := '-NNN,NNN,NN0.00000';
    ELSIF P_PRECISION = 6 THEN
      --SRW.ATTR.FORMATMASK := '-NN,NNN,NN0.000000';
    ELSIF P_PRECISION = 7 THEN
      --SRW.ATTR.FORMATMASK := '-NNNNNNNNNNN0';
    ELSIF P_PRECISION = 8 THEN
      --SRW.ATTR.FORMATMASK := '-NNNNNNNNNNN0.0';
    ELSIF P_PRECISION = 9 THEN
      --SRW.ATTR.FORMATMASK := '-NNNNNNNNNN0.00';
    ELSIF P_PRECISION = 10 THEN
      --SRW.ATTR.FORMATMASK := '-NNNNNNNNNN0.000';
    ELSIF P_PRECISION = 11 THEN
--      SRW.ATTR.FORMATMASK := '-NNNNNNNNN0.0000';
    ELSIF P_PRECISION = 12 THEN
  --    SRW.ATTR.FORMATMASK := '-NNNNNNNN0.00000';
    ELSIF P_PRECISION = 13 THEN
    --  SRW.ATTR.FORMATMASK := '-NNNNNNN0.000000';
    ELSE
--      SRW.ATTR.FORMATMASK := '-NNN,NNN,NNN,NN0.00';
    END IF;
    */
    /*SRW.SET_ATTR(0
                ,SRW.ATTR)*/NULL;
  END FORMAT_QUANTITY;

  FUNCTION CF_COMMODITY_FIELDFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN (NULL);
  END CF_COMMODITY_FIELDFORMULA;

  FUNCTION CF_1FORMULA RETURN VARCHAR2 IS
  BEGIN
    IF ((P_REPORT_OPTION = 'S/S' OR P_REPORT_OPTION = 'O/S') AND P_MOVEMENT_TYPE = 'A') THEN
      CP_REPORT_TITLE := 'Arrival Movement Statistics Summary';
    ELSIF (P_REPORT_OPTION = 'S/D' AND P_MOVEMENT_TYPE = 'A') THEN
      CP_REPORT_TITLE := ' Arrival Movement Statistics Detail';
    ELSIF ((P_REPORT_OPTION = 'S/S' OR P_REPORT_OPTION = 'O/S') AND P_MOVEMENT_TYPE = 'AA') THEN
      CP_REPORT_TITLE := 'Arrival Adjustment Movement Statistics Summary';
    ELSIF (P_REPORT_OPTION = 'S/D' AND P_MOVEMENT_TYPE = 'AA') THEN
      CP_REPORT_TITLE := 'Arrival Adjustment Movement Statistics Detail';
    ELSIF ((P_REPORT_OPTION = 'S/S' OR P_REPORT_OPTION = 'O/S') AND P_MOVEMENT_TYPE = 'D') THEN
      CP_REPORT_TITLE := 'Dispatch Movement Statistics Summary';
    ELSIF (P_REPORT_OPTION = 'S/D' AND P_MOVEMENT_TYPE = 'D') THEN
      CP_REPORT_TITLE := 'Dispatch Movement Statistics Detail';
    ELSIF ((P_REPORT_OPTION = 'S/S' OR P_REPORT_OPTION = 'O/S') AND P_MOVEMENT_TYPE = 'DA') THEN
      CP_REPORT_TITLE := 'Dispatch Adjustment Movement Statistics Summary';
    ELSIF (P_REPORT_OPTION = 'S/D' AND P_MOVEMENT_TYPE = 'DA') THEN
      CP_REPORT_TITLE := 'Dispatch Adjustment Movement Statistics Detail';
    END IF;
    RETURN NULL;
  END CF_1FORMULA;

  FUNCTION CF_INVOICEFORMULA(C_DOCUMENT_SOURCE_TYPE IN VARCHAR2
                            ,C_INVOICE_REFERENCE IN VARCHAR2
                            ,C_INVOICE_ID IN NUMBER
                            ,C_MOVEMENT_TYPE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    DECLARE
      L_INVOICE VARCHAR2(50);
    BEGIN
      IF P_REPORT_OPTION = 'S/D' THEN
        IF C_DOCUMENT_SOURCE_TYPE = 'MISC' THEN
          L_INVOICE := C_INVOICE_REFERENCE;
        ELSIF C_DOCUMENT_SOURCE_TYPE in ('PO','RTV') AND C_INVOICE_ID IS NOT NULL THEN
          BEGIN
            SELECT
              INVOICE_NUM
            INTO L_INVOICE
            FROM
              AP_INVOICES_ALL
            WHERE INVOICE_ID = C_INVOICE_ID
              AND ROWNUM < 2;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_INVOICE := NULL;
          END;
        ELSIF C_DOCUMENT_SOURCE_TYPE in ('SO','RMA') AND C_INVOICE_ID IS NOT NULL THEN
          BEGIN
            SELECT
              TRX_NUMBER
            INTO L_INVOICE
            FROM
              RA_CUSTOMER_TRX_ALL
            WHERE CUSTOMER_TRX_ID = C_INVOICE_ID
              AND ROWNUM < 2;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              IF C_MOVEMENT_TYPE = 'A' THEN
                BEGIN
                  SELECT
                    INVOICE_NUM
                  INTO L_INVOICE
                  FROM
                    AP_INVOICES_ALL
                  WHERE INVOICE_ID = C_INVOICE_ID
                    AND ROWNUM < 2;
                EXCEPTION
                  WHEN OTHERS THEN
                    L_INVOICE := NULL;
                END;
              ELSE
                L_INVOICE := NULL;
              END IF;
          END;
        ELSE
          L_INVOICE := NULL;
        END IF;
      ELSE
        L_INVOICE := NULL;
      END IF;
      RETURN (L_INVOICE);
    END;
    RETURN NULL;
  END CF_INVOICEFORMULA;

  FUNCTION CF_INVOICE_BATCHFORMULA(C_DOCUMENT_SOURCE_TYPE IN VARCHAR2
                                  ,C_INVOICE_BATCH_REFERENCE IN VARCHAR2
                                  ,C_INVOICE_BATCH_ID IN NUMBER) RETURN CHAR IS
  BEGIN
    DECLARE
      L_INVOICE_BATCH VARCHAR2(50);
    BEGIN
      IF P_REPORT_OPTION = 'S/D' THEN
        IF C_DOCUMENT_SOURCE_TYPE = 'MISC' THEN
          L_INVOICE_BATCH := C_INVOICE_BATCH_REFERENCE;
        ELSIF C_DOCUMENT_SOURCE_TYPE in ('PO','RTV') AND C_INVOICE_BATCH_ID IS NOT NULL THEN
          BEGIN
            SELECT
              BATCH_NAME
            INTO L_INVOICE_BATCH
            FROM
              AP_BATCHES_ALL
            WHERE BATCH_ID = C_INVOICE_BATCH_ID
              AND ROWNUM < 2;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_INVOICE_BATCH := NULL;
          END;
        ELSIF C_DOCUMENT_SOURCE_TYPE in ('SO','RMA') AND C_INVOICE_BATCH_ID IS NOT NULL THEN
          BEGIN
            SELECT
              NAME
            INTO L_INVOICE_BATCH
            FROM
              RA_BATCHES_ALL
            WHERE BATCH_ID = C_INVOICE_BATCH_ID
              AND ROWNUM < 2;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_INVOICE_BATCH := NULL;
          END;
        ELSE
          L_INVOICE_BATCH := NULL;
        END IF;
      ELSE
        L_INVOICE_BATCH := NULL;
      END IF;
      RETURN (L_INVOICE_BATCH);
    END;
    RETURN NULL;
  END CF_INVOICE_BATCHFORMULA;

  FUNCTION CF_INVOICE_LINEFORMULA(C_DOCUMENT_SOURCE_TYPE IN VARCHAR2
                                 ,C_INVOICE_LINE_REFERENCE IN VARCHAR2
                                 ,C_MOVEMENT_TYPE IN VARCHAR2
                                 ,C_DISTRIBUTION_LINE_NUMBER IN NUMBER
                                 ,C_CUSTOMER_TRX_LINE_ID IN NUMBER) RETURN CHAR IS
  BEGIN
    DECLARE
      L_INVOICE_LINE VARCHAR2(50);
    BEGIN
      IF P_REPORT_OPTION = 'S/D' THEN
        IF C_DOCUMENT_SOURCE_TYPE = 'MISC' THEN
          L_INVOICE_LINE := C_INVOICE_LINE_REFERENCE;
        ELSIF (C_DOCUMENT_SOURCE_TYPE in ('PO','RTV') OR (C_DOCUMENT_SOURCE_TYPE = 'SO' AND C_MOVEMENT_TYPE = 'A')) THEN
          L_INVOICE_LINE := C_DISTRIBUTION_LINE_NUMBER;
        ELSIF C_DOCUMENT_SOURCE_TYPE in ('SO','RMA') THEN
          BEGIN
            SELECT
              LINE_NUMBER
            INTO L_INVOICE_LINE
            FROM
              RA_CUSTOMER_TRX_LINES_ALL
            WHERE CUSTOMER_TRX_LINE_ID = C_CUSTOMER_TRX_LINE_ID
              AND ROWNUM < 2;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_INVOICE_LINE := NULL;
          END;
        ELSE
          L_INVOICE_LINE := NULL;
        END IF;
      ELSE
        L_INVOICE_LINE := NULL;
      END IF;
      RETURN (L_INVOICE_LINE);
    END;
    RETURN NULL;
  END CF_INVOICE_LINEFORMULA;

  FUNCTION CF_INVOICE_UOM_CODEFORMULA(C_CUSTOMER_TRX_LINE_ID IN NUMBER
                                     ,C_TRANSACTION_UOM_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_INVOICE_UOM_CODE VARCHAR2(3);
    BEGIN
      IF P_REPORT_OPTION = 'S/D' THEN
        IF C_CUSTOMER_TRX_LINE_ID IS NOT NULL THEN
          BEGIN
            SELECT
              UOM_CODE
            INTO L_INVOICE_UOM_CODE
            FROM
              RA_CUSTOMER_TRX_LINES_ALL
            WHERE CUSTOMER_TRX_LINE_ID = C_CUSTOMER_TRX_LINE_ID;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_INVOICE_UOM_CODE := NULL;
          END;
        ELSE
          L_INVOICE_UOM_CODE := C_TRANSACTION_UOM_CODE;
        END IF;
      ELSE
        L_INVOICE_UOM_CODE := NULL;
      END IF;
      RETURN (L_INVOICE_UOM_CODE);
    END;
    RETURN NULL;
  END CF_INVOICE_UOM_CODEFORMULA;

  FUNCTION CF_RECEIPT_NUMBERFORMULA(C_DOCUMENT_SOURCE_TYPE IN VARCHAR2
                                   ,C_RECEIPT_REFERENCE IN VARCHAR2
                                   ,C_PICK_SLIP_REFERENCE IN VARCHAR2
                                   ,C_SHIPMENT_HEADER_ID IN NUMBER
                                   ,C_SHIPMENT_REFERENCE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_RECEIPT_NUMBER VARCHAR2(50);
    BEGIN
      IF P_REPORT_OPTION = 'S/D' THEN
        IF C_DOCUMENT_SOURCE_TYPE = 'MISC' THEN
          IF P_MOVEMENT_TYPE = 'A' OR P_MOVEMENT_TYPE = 'AA' THEN
            L_RECEIPT_NUMBER := C_RECEIPT_REFERENCE;
          ELSE
            L_RECEIPT_NUMBER := C_PICK_SLIP_REFERENCE;
          END IF;
        ELSIF C_DOCUMENT_SOURCE_TYPE in ('PO','RTV','RMA') AND C_SHIPMENT_HEADER_ID IS NOT NULL THEN
          BEGIN
            SELECT
              RECEIPT_NUM
            INTO L_RECEIPT_NUMBER
            FROM
              RCV_SHIPMENT_HEADERS
            WHERE SHIPMENT_HEADER_ID = C_SHIPMENT_HEADER_ID
              AND ROWNUM < 2;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_RECEIPT_NUMBER := NULL;
          END;
        ELSIF C_DOCUMENT_SOURCE_TYPE = 'SO' THEN
          L_RECEIPT_NUMBER := C_SHIPMENT_REFERENCE;
        ELSE
          L_RECEIPT_NUMBER := NULL;
        END IF;
      ELSE
        L_RECEIPT_NUMBER := NULL;
      END IF;
      RETURN (L_RECEIPT_NUMBER);
    END;
    RETURN NULL;
  END CF_RECEIPT_NUMBERFORMULA;

  FUNCTION CF_SHIPMENT_LINEFORMULA(C_DOCUMENT_SOURCE_TYPE IN VARCHAR2
                                  ,C_SHIPMENT_LINE_REFERENCE IN VARCHAR2
                                  ,C_SHIPMENT_LINE_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_SHIPMENT_LINE VARCHAR2(30);
    BEGIN
      IF P_REPORT_OPTION = 'S/D' THEN
        IF C_DOCUMENT_SOURCE_TYPE = 'MISC' THEN
          L_SHIPMENT_LINE := C_SHIPMENT_LINE_REFERENCE;
        ELSIF C_DOCUMENT_SOURCE_TYPE in ('PO','RTV') THEN
          BEGIN
            SELECT
              LINE_NUM
            INTO L_SHIPMENT_LINE
            FROM
              RCV_SHIPMENT_LINES
            WHERE SHIPMENT_LINE_ID = C_SHIPMENT_LINE_ID
              AND ROWNUM < 2;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_SHIPMENT_LINE := NULL;
          END;
        ELSE
          L_SHIPMENT_LINE := NULL;
        END IF;
      ELSE
        L_SHIPMENT_LINE := NULL;
      END IF;
      RETURN (L_SHIPMENT_LINE);
    END;
    RETURN NULL;
  END CF_SHIPMENT_LINEFORMULA;

  FUNCTION CF_SHIPMENT_NUMBERFORMULA(C_DOCUMENT_SOURCE_TYPE IN VARCHAR2
                                    ,C_SHIPMENT_REFERENCE IN VARCHAR2
                                    ,C_PO_LINE_LOCATION_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_SHIPMENT_NUMBER VARCHAR2(50);
    BEGIN
      IF P_REPORT_OPTION = 'S/D' THEN
        IF C_DOCUMENT_SOURCE_TYPE = 'MISC' THEN
          L_SHIPMENT_NUMBER := C_SHIPMENT_REFERENCE;
        ELSIF C_DOCUMENT_SOURCE_TYPE in ('PO','RTV') THEN
          BEGIN
            SELECT
              SHIPMENT_NUM
            INTO L_SHIPMENT_NUMBER
            FROM
              PO_LINE_LOCATIONS_ALL
            WHERE LINE_LOCATION_ID = C_PO_LINE_LOCATION_ID
              AND ROWNUM < 2;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_SHIPMENT_NUMBER := NULL;
          END;
        ELSE
          L_SHIPMENT_NUMBER := NULL;
        END IF;
      ELSE
        L_SHIPMENT_NUMBER := NULL;
      END IF;
      RETURN (L_SHIPMENT_NUMBER);
    END;
    RETURN NULL;
  END CF_SHIPMENT_NUMBERFORMULA;

  FUNCTION CF_SOURCE_LINE_NUMBERFORMULA(C_DOCUMENT_SOURCE_TYPE IN VARCHAR2
                                       ,C_DOCUMENT_LINE_REFERENCE IN VARCHAR2
                                       ,C_PO_LINE_ID IN NUMBER
                                       ,C_ORDER_LINE_ID IN NUMBER
                                       ,C_MOVEMENT_TYPE IN VARCHAR2
                                       ,C_REQUISITION_LINE_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_SOURCE_LINE_NUMBER VARCHAR2(30);
    BEGIN
      IF P_REPORT_OPTION = 'S/D' THEN
        IF C_DOCUMENT_SOURCE_TYPE = 'MISC' THEN
          L_SOURCE_LINE_NUMBER := C_DOCUMENT_LINE_REFERENCE;
        ELSIF C_DOCUMENT_SOURCE_TYPE in ('PO','RTV') THEN
          BEGIN
            SELECT
              LINE_NUM
            INTO L_SOURCE_LINE_NUMBER
            FROM
              PO_LINES_ALL
            WHERE PO_LINE_ID = C_PO_LINE_ID
              AND ROWNUM < 2;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_SOURCE_LINE_NUMBER := NULL;
          END;
        ELSIF C_DOCUMENT_SOURCE_TYPE in ('SO','RMA') THEN
          IF P_OE_OR_OM = 'OE' THEN
            BEGIN
              SELECT
                LINE_NUMBER
              INTO L_SOURCE_LINE_NUMBER
              FROM
                SO_LINES_ALL
              WHERE LINE_ID = C_ORDER_LINE_ID
                AND ROWNUM < 2;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                L_SOURCE_LINE_NUMBER := NULL;
            END;
          ELSE
            BEGIN
              SELECT
                LINE_NUMBER
              INTO L_SOURCE_LINE_NUMBER
              FROM
                OE_ORDER_LINES_ALL
              WHERE LINE_ID = C_ORDER_LINE_ID
                AND ROWNUM < 2;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                L_SOURCE_LINE_NUMBER := NULL;
            END;
          END IF;
        ELSIF C_DOCUMENT_SOURCE_TYPE = 'IO' THEN
          IF C_MOVEMENT_TYPE in ('A','AA') THEN
            BEGIN
              SELECT
                LINE_NUM
              INTO L_SOURCE_LINE_NUMBER
              FROM
                PO_REQUISITION_LINES_ALL
              WHERE REQUISITION_LINE_ID = C_REQUISITION_LINE_ID
                AND ROWNUM < 2;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                L_SOURCE_LINE_NUMBER := NULL;
            END;
          ELSE
            IF P_OE_OR_OM = 'OE' THEN
              BEGIN
                SELECT
                  LINE_NUMBER
                INTO L_SOURCE_LINE_NUMBER
                FROM
                  SO_LINES_ALL
                WHERE LINE_ID = C_ORDER_LINE_ID
                  AND ROWNUM < 2;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  L_SOURCE_LINE_NUMBER := NULL;
              END;
            ELSE
              BEGIN
                SELECT
                  LINE_NUMBER
                INTO L_SOURCE_LINE_NUMBER
                FROM
                  OE_ORDER_LINES_ALL
                WHERE LINE_ID = C_ORDER_LINE_ID
                  AND ROWNUM < 2;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  L_SOURCE_LINE_NUMBER := NULL;
              END;
            END IF;
          END IF;
        ELSE
          L_SOURCE_LINE_NUMBER := NULL;
        END IF;
      ELSE
        L_SOURCE_LINE_NUMBER := NULL;
      END IF;
      RETURN (L_SOURCE_LINE_NUMBER);
    END;
    RETURN NULL;
  END CF_SOURCE_LINE_NUMBERFORMULA;

  FUNCTION CF_SOURCE_NUMBERFORMULA(C_DOCUMENT_SOURCE_TYPE IN VARCHAR2
                                  ,C_DOCUMENT_REFERENCE IN VARCHAR2
                                  ,C_PO_HEADER_ID IN NUMBER
                                  ,C_ORDER_HEADER_ID IN NUMBER
                                  ,C_MOVEMENT_TYPE IN VARCHAR2
                                  ,C_REQUISITION_HEADER_ID IN NUMBER
                                  ,C_MTL_TRANSACTION_ID IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_SOURCE_NUMBER VARCHAR2(50);
    BEGIN
      IF P_REPORT_OPTION = 'S/D' THEN
        IF C_DOCUMENT_SOURCE_TYPE = 'MISC' THEN
          L_SOURCE_NUMBER := C_DOCUMENT_REFERENCE;
        ELSIF C_DOCUMENT_SOURCE_TYPE in ('PO','RTV') THEN
          BEGIN
            SELECT
              SEGMENT1
            INTO L_SOURCE_NUMBER
            FROM
              PO_HEADERS_ALL
            WHERE PO_HEADER_ID = C_PO_HEADER_ID
              AND ROWNUM < 2;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              L_SOURCE_NUMBER := NULL;
          END;
        ELSIF C_DOCUMENT_SOURCE_TYPE in ('SO','RMA') THEN
          IF P_OE_OR_OM = 'OE' THEN
            BEGIN
              SELECT
                ORDER_NUMBER
              INTO L_SOURCE_NUMBER
              FROM
                SO_HEADERS_ALL
              WHERE HEADER_ID = C_ORDER_HEADER_ID
                AND ROWNUM < 2;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                L_SOURCE_NUMBER := NULL;
            END;
          ELSE
            BEGIN
              SELECT
                ORDER_NUMBER
              INTO L_SOURCE_NUMBER
              FROM
                OE_ORDER_HEADERS_ALL
              WHERE HEADER_ID = C_ORDER_HEADER_ID
                AND ROWNUM < 2;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                L_SOURCE_NUMBER := NULL;
            END;
          END IF;
        ELSIF C_DOCUMENT_SOURCE_TYPE = 'IO' THEN
          IF C_MOVEMENT_TYPE in ('A','AA') THEN
            BEGIN
              SELECT
                SEGMENT1
              INTO L_SOURCE_NUMBER
              FROM
                PO_REQUISITION_HEADERS_ALL
              WHERE REQUISITION_HEADER_ID = C_REQUISITION_HEADER_ID
                AND ROWNUM < 2;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                L_SOURCE_NUMBER := NULL;
            END;
          ELSE
            IF P_OE_OR_OM = 'OE' THEN
              BEGIN
                SELECT
                  ORDER_NUMBER
                INTO L_SOURCE_NUMBER
                FROM
                  SO_HEADERS_ALL
                WHERE HEADER_ID = C_ORDER_HEADER_ID
                  AND ROWNUM < 2;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  L_SOURCE_NUMBER := NULL;
              END;
            ELSE
              BEGIN
                SELECT
                  ORDER_NUMBER
                INTO L_SOURCE_NUMBER
                FROM
                  OE_ORDER_HEADERS_ALL
                WHERE HEADER_ID = C_ORDER_HEADER_ID
                  AND ROWNUM < 2;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  L_SOURCE_NUMBER := NULL;
              END;
            END IF;
          END IF;
        ELSIF C_DOCUMENT_SOURCE_TYPE = 'INV' THEN
          L_SOURCE_NUMBER := TO_CHAR(C_MTL_TRANSACTION_ID);
        ELSE
          L_SOURCE_NUMBER := NULL;
        END IF;
      ELSE
        L_SOURCE_NUMBER := NULL;
      END IF;
      RETURN (L_SOURCE_NUMBER);
    END;
    RETURN NULL;
  END CF_SOURCE_NUMBERFORMULA;

  FUNCTION CF_TRADER_NAMEFORMULA(C_DOCUMENT_SOURCE_TYPE IN VARCHAR2
                                ,C_CUSTOMER_NAME IN VARCHAR2
                                ,C_SHIP_TO_CUSTOMER_ID IN NUMBER
                                ,C_VENDOR_NAME IN VARCHAR2
                                ,C_FROM_ORGANIZATION_ID IN NUMBER
                                ,C_TO_ORGANIZATION_ID IN NUMBER
                                ,C_TRANSACTING_FROM_ORG IN VARCHAR2
                                ,C_TRANSACTING_TO_ORG IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_TRADER_NAME VARCHAR2(240);
    BEGIN
      IF P_REPORT_OPTION = 'S/D' THEN
        IF C_DOCUMENT_SOURCE_TYPE in ('SO','RMA') THEN
          IF C_CUSTOMER_NAME IS NOT NULL THEN
            L_TRADER_NAME := C_CUSTOMER_NAME;
          ELSE
            IF C_SHIP_TO_CUSTOMER_ID IS NOT NULL THEN
              BEGIN
                SELECT
                  HP.PARTY_NAME
                INTO L_TRADER_NAME
                FROM
                  HZ_PARTIES HP,
                  HZ_CUST_ACCOUNTS HCA
                WHERE HP.PARTY_ID = HCA.PARTY_ID
                  AND HCA.CUST_ACCOUNT_ID = C_SHIP_TO_CUSTOMER_ID;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  L_TRADER_NAME := NULL;
              END;
            ELSE
              L_TRADER_NAME := NULL;
            END IF;
          END IF;
        ELSIF C_DOCUMENT_SOURCE_TYPE in ('PO','RTV') THEN
          L_TRADER_NAME := C_VENDOR_NAME;
        ELSIF C_DOCUMENT_SOURCE_TYPE in ('IO','INV') THEN
          IF P_MOVEMENT_TYPE in ('A','AA') THEN
            IF C_FROM_ORGANIZATION_ID IS NOT NULL THEN
              BEGIN
                SELECT
                  NAME
                INTO L_TRADER_NAME
                FROM
                  HR_ORGANIZATION_UNITS
                WHERE ORGANIZATION_ID = C_FROM_ORGANIZATION_ID
                  AND ROWNUM < 2;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  L_TRADER_NAME := NULL;
              END;
            ELSE
              L_TRADER_NAME := NULL;
            END IF;
          ELSE
            IF C_TO_ORGANIZATION_ID IS NOT NULL THEN
              BEGIN
                SELECT
                  NAME
                INTO L_TRADER_NAME
                FROM
                  HR_ORGANIZATION_UNITS
                WHERE ORGANIZATION_ID = C_TO_ORGANIZATION_ID
                  AND ROWNUM < 2;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  L_TRADER_NAME := NULL;
              END;
            ELSE
              L_TRADER_NAME := NULL;
            END IF;
          END IF;
        ELSIF C_DOCUMENT_SOURCE_TYPE = 'MISC' THEN
          IF C_CUSTOMER_NAME IS NOT NULL THEN
            L_TRADER_NAME := C_CUSTOMER_NAME;
          ELSIF C_VENDOR_NAME IS NOT NULL THEN
            L_TRADER_NAME := C_VENDOR_NAME;
          ELSIF C_TRANSACTING_FROM_ORG IS NOT NULL THEN
            L_TRADER_NAME := C_TRANSACTING_FROM_ORG;
          ELSIF C_TRANSACTING_TO_ORG IS NOT NULL THEN
            L_TRADER_NAME := C_TRANSACTING_TO_ORG;
          ELSE
            L_TRADER_NAME := NULL;
          END IF;
        ELSE
          L_TRADER_NAME := NULL;
        END IF;
      ELSE
        L_TRADER_NAME := NULL;
      END IF;
      RETURN (L_TRADER_NAME);
    END;
    RETURN NULL;
  END CF_TRADER_NAMEFORMULA;

  FUNCTION CF_TRADER_NUMBERFORMULA(C_DOCUMENT_SOURCE_TYPE IN VARCHAR2
                                  ,C_CUSTOMER_NUMBER IN VARCHAR2
                                  ,C_SHIP_TO_CUSTOMER_ID IN NUMBER
                                  ,C_VENDOR_NUMBER IN VARCHAR2
                                  ,C_TRANSACTING_FROM_ORG IN VARCHAR2
                                  ,C_TRANSACTING_TO_ORG IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_TRADER_NUMBER VARCHAR2(50);
    BEGIN
      IF P_REPORT_OPTION = 'S/D' THEN
        IF C_DOCUMENT_SOURCE_TYPE in ('SO','RMA') THEN
          IF C_CUSTOMER_NUMBER IS NOT NULL THEN
            L_TRADER_NUMBER := C_CUSTOMER_NUMBER;
          ELSE
            IF C_SHIP_TO_CUSTOMER_ID IS NOT NULL THEN
              BEGIN
                SELECT
                  HCA.ACCOUNT_NUMBER
                INTO L_TRADER_NUMBER
                FROM
                  HZ_PARTIES HP,
                  HZ_CUST_ACCOUNTS HCA
                WHERE HP.PARTY_ID = HCA.PARTY_ID
                  AND HCA.CUST_ACCOUNT_ID = C_SHIP_TO_CUSTOMER_ID;
              EXCEPTION
                WHEN NO_DATA_FOUND THEN
                  L_TRADER_NUMBER := NULL;
              END;
            ELSE
              L_TRADER_NUMBER := NULL;
            END IF;
          END IF;
        ELSIF C_DOCUMENT_SOURCE_TYPE in ('PO','RTV') THEN
          L_TRADER_NUMBER := C_VENDOR_NUMBER;
        ELSIF C_DOCUMENT_SOURCE_TYPE in ('IO','INV') THEN
          L_TRADER_NUMBER := NULL;
        ELSIF C_DOCUMENT_SOURCE_TYPE = 'MISC' THEN
          IF C_CUSTOMER_NUMBER IS NOT NULL THEN
            L_TRADER_NUMBER := C_CUSTOMER_NUMBER;
          ELSIF C_VENDOR_NUMBER IS NOT NULL THEN
            L_TRADER_NUMBER := C_VENDOR_NUMBER;
          ELSIF C_TRANSACTING_FROM_ORG IS NOT NULL THEN
            L_TRADER_NUMBER := NULL;
          ELSIF C_TRANSACTING_TO_ORG IS NOT NULL THEN
            L_TRADER_NUMBER := NULL;
          ELSE
            L_TRADER_NUMBER := NULL;
          END IF;
        ELSE
          L_TRADER_NUMBER := NULL;
        END IF;
      ELSE
        L_TRADER_NUMBER := NULL;
      END IF;
      RETURN (L_TRADER_NUMBER);
    END;
    RETURN NULL;
  END CF_TRADER_NUMBERFORMULA;

  FUNCTION CF_TRADER_SITEFORMULA(C_DOCUMENT_SOURCE_TYPE IN VARCHAR2
                                ,C_CUSTOMER_LOCATION IN VARCHAR2
                                ,C_SHIP_TO_SITE_USE_ID IN NUMBER
                                ,C_VENDOR_SITE IN VARCHAR2
                                ,C_CUSTOMER_NAME IN VARCHAR2
                                ,C_VENDOR_NAME IN VARCHAR2
                                ,C_TRANSACTING_FROM_ORG IN VARCHAR2
                                ,C_TRANSACTING_TO_ORG IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_TRADER_SITE VARCHAR2(50);
    BEGIN
      IF P_REPORT_OPTION = 'S/D' THEN
        IF C_DOCUMENT_SOURCE_TYPE in ('SO','RMA') THEN
          IF C_CUSTOMER_LOCATION IS NOT NULL THEN
            L_TRADER_SITE := C_CUSTOMER_LOCATION;
          ELSIF C_SHIP_TO_SITE_USE_ID IS NOT NULL THEN
            BEGIN
              SELECT
                LOCATION
              INTO L_TRADER_SITE
              FROM
                HZ_CUST_SITE_USES_ALL
              WHERE SITE_USE_ID = C_SHIP_TO_SITE_USE_ID;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                L_TRADER_SITE := NULL;
            END;
          ELSE
            L_TRADER_SITE := NULL;
          END IF;
        ELSIF C_DOCUMENT_SOURCE_TYPE in ('PO','RTV') THEN
          L_TRADER_SITE := C_VENDOR_SITE;
        ELSIF C_DOCUMENT_SOURCE_TYPE in ('IO','INV') THEN
          L_TRADER_SITE := NULL;
        ELSIF C_DOCUMENT_SOURCE_TYPE = 'MISC' THEN
          IF C_CUSTOMER_NAME IS NOT NULL THEN
            L_TRADER_SITE := C_CUSTOMER_LOCATION;
          ELSIF C_VENDOR_NAME IS NOT NULL THEN
            L_TRADER_SITE := C_VENDOR_SITE;
          ELSIF C_TRANSACTING_FROM_ORG IS NOT NULL THEN
            L_TRADER_SITE := NULL;
          ELSIF C_TRANSACTING_TO_ORG IS NOT NULL THEN
            L_TRADER_SITE := NULL;
          ELSE
            L_TRADER_SITE := NULL;
          END IF;
        ELSE
          L_TRADER_SITE := NULL;
        END IF;
      ELSE
        L_TRADER_SITE := NULL;
      END IF;
      RETURN (L_TRADER_SITE);
    END;
    RETURN NULL;
  END CF_TRADER_SITEFORMULA;

  FUNCTION CF_TRADER_TYPEFORMULA(C_DOCUMENT_SOURCE_TYPE IN VARCHAR2
                                ,C_CUSTOMER_NAME IN VARCHAR2
                                ,C_VENDOR_NAME IN VARCHAR2
                                ,C_TRANSACTING_FROM_ORG IN VARCHAR2
                                ,C_TRANSACTING_TO_ORG IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_TRADER_TYPE VARCHAR2(20);
    BEGIN
      IF P_REPORT_OPTION = 'S/D' THEN
        IF C_DOCUMENT_SOURCE_TYPE in ('SO','RMA') THEN
          L_TRADER_TYPE := 'Customer';
        ELSIF C_DOCUMENT_SOURCE_TYPE in ('PO','RTV') THEN
          L_TRADER_TYPE := 'Vendor';
        ELSIF C_DOCUMENT_SOURCE_TYPE in ('IO','INV') THEN
          L_TRADER_TYPE := 'Organization';
        ELSIF C_DOCUMENT_SOURCE_TYPE = 'MISC' THEN
          IF C_CUSTOMER_NAME IS NOT NULL THEN
            L_TRADER_TYPE := 'Customer';
          ELSIF C_VENDOR_NAME IS NOT NULL THEN
            L_TRADER_TYPE := 'Vendor';
          ELSIF C_TRANSACTING_FROM_ORG IS NOT NULL OR C_TRANSACTING_TO_ORG IS NOT NULL THEN
            L_TRADER_TYPE := 'Organization';
          ELSE
            L_TRADER_TYPE := NULL;
          END IF;
        ELSE
          L_TRADER_TYPE := NULL;
        END IF;
      ELSE
        L_TRADER_TYPE := NULL;
      END IF;
      RETURN (L_TRADER_TYPE);
    END;
    RETURN NULL;
  END CF_TRADER_TYPEFORMULA;

  FUNCTION AFTERREPORT(CS_NO_COUNT IN NUMBER) RETURN BOOLEAN IS
  BEGIN
    IF P_REPORT_OPTION = 'O/S' THEN
      IF CS_NO_COUNT <> 0 THEN
        UPDATE
          MTL_MOVEMENT_STATISTICS
        SET
          MOVEMENT_STATUS = 'F'
          ,REPORT_REFERENCE = TO_CHAR(P_LEGAL_ENTITY_ID) || P_ZONE_CODE || P_PERIOD_NAME || P_USAGE_TYPE || P_STAT_TYPE || P_MOVEMENT_TYPE
        WHERE ENTITY_ORG_ID = P_LEGAL_ENTITY_ID
          AND ZONE_CODE = P_ZONE_CODE
          AND PERIOD_NAME = P_PERIOD_NAME
          AND USAGE_TYPE = P_USAGE_TYPE
          AND STAT_TYPE = P_STAT_TYPE
          AND MOVEMENT_TYPE = P_MOVEMENT_TYPE
          AND MOVEMENT_STATUS = 'V';
      END IF;
      COMMIT;
    END IF;
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in srwexit')*/NULL;
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_PARENT_MVT_QUANTITYFORMULA(CS_ALTERNATE_QUANTITY IN VARCHAR2
                                        ,CS_TRANSACTION_QUANTITY IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    IF CS_ALTERNATE_QUANTITY IS NULL THEN
      RETURN (CS_TRANSACTION_QUANTITY);
    ELSE
      RETURN (CS_ALTERNATE_QUANTITY);
    END IF;
  END CF_PARENT_MVT_QUANTITYFORMULA;

  FUNCTION CF_PARENT_MVT_UOMFORMULA(C_ALTERNATE_UOM_CODE IN VARCHAR2
                                   ,C_TRANSACTION_UOM_CODE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    IF C_ALTERNATE_UOM_CODE IS NULL THEN
      RETURN (C_TRANSACTION_UOM_CODE);
    ELSE
      RETURN (C_ALTERNATE_UOM_CODE);
    END IF;
  END CF_PARENT_MVT_UOMFORMULA;

  FUNCTION CF_STATISTICAL_VALUE_RFORMUL(CS_STATISTICAL_VALUE IN VARCHAR2) RETURN NUMBER IS
    L_STAT_VALUE NUMBER;
  BEGIN
    L_STAT_VALUE := INV_MGD_MVT_UTILS_PKG.ROUND_NUMBER(P_NUMBER => CS_STATISTICAL_VALUE
                                                      ,P_PRECISION => P_REP_PRECISION
                                                      ,P_ROUNDING_METHOD => P_REP_ROUNDING);
    RETURN (L_STAT_VALUE);
  END CF_STATISTICAL_VALUE_RFORMUL;

  FUNCTION CF_TRANSACTION_VALUE_RFORMUL(CS_TRANSACTION_VALUE IN VARCHAR2) RETURN NUMBER IS
    L_TRANS_VALUE NUMBER;
  BEGIN
    L_TRANS_VALUE := INV_MGD_MVT_UTILS_PKG.ROUND_NUMBER(P_NUMBER => CS_TRANSACTION_VALUE
                                                       ,P_PRECISION => P_REP_PRECISION
                                                       ,P_ROUNDING_METHOD => P_REP_ROUNDING);
    RETURN (L_TRANS_VALUE);
  END CF_TRANSACTION_VALUE_RFORMUL;

  FUNCTION CF_INVOICE_LINE_EXT_VAL_RFORMU(CS_INVOICE_VALUE IN VARCHAR2
                                         ,CF_PRECISION_TRX IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND(CS_INVOICE_VALUE
                ,CF_PRECISION_TRX));
  END CF_INVOICE_LINE_EXT_VAL_RFORMU;

  FUNCTION CF_DOCUMENT_LINE_EXT_VAL_RFORM(CS_DOC_VALUE IN VARCHAR2
                                         ,CF_PRECISION_TRX IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND(CS_DOC_VALUE
                ,CF_PRECISION_TRX));
  END CF_DOCUMENT_LINE_EXT_VAL_RFORM;

  FUNCTION CF_REPORT_TRANSACTION_VAL_RFOR(CS_REPORT_TRANSACTION_VAL IN NUMBER) RETURN NUMBER IS
    L_REP_TRANS_VALUE NUMBER;
  BEGIN
    L_REP_TRANS_VALUE := INV_MGD_MVT_UTILS_PKG.ROUND_NUMBER(P_NUMBER => CS_REPORT_TRANSACTION_VAL
                                                           ,P_PRECISION => P_REP_PRECISION
                                                           ,P_ROUNDING_METHOD => P_REP_ROUNDING);
    RETURN (L_REP_TRANS_VALUE);
  END CF_REPORT_TRANSACTION_VAL_RFOR;

  FUNCTION CF_REPORT_STATISTICAL_VAL_RFOR(CS_REPORT_STATISTICAL_VAL IN NUMBER) RETURN NUMBER IS
    L_REP_STAT_VALUE NUMBER;
  BEGIN
    L_REP_STAT_VALUE := INV_MGD_MVT_UTILS_PKG.ROUND_NUMBER(P_NUMBER => CS_REPORT_STATISTICAL_VAL
                                                          ,P_PRECISION => P_REP_PRECISION
                                                          ,P_ROUNDING_METHOD => P_REP_ROUNDING);
    RETURN (L_REP_STAT_VALUE);
  END CF_REPORT_STATISTICAL_VAL_RFOR;

  FUNCTION CF_OUTSIDE_VALUE_RFORMULA(CS_OUTSIDE_VALUE IN VARCHAR2
                                    ,CF_PRECISION_TRX IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND(CS_OUTSIDE_VALUE
                ,CF_PRECISION_TRX));
  END CF_OUTSIDE_VALUE_RFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    P_OE_OR_OM := OE_INSTALL.GET_ACTIVE_PRODUCT;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CF_PRECISION_TRXFORMULA(C_MOVEMENT_CURRENCY_CODE IN VARCHAR2) RETURN NUMBER IS
    L_PRECISION_TRX NUMBER;
  BEGIN
    SELECT
      PRECISION
    INTO L_PRECISION_TRX
    FROM
      FND_CURRENCIES
    WHERE CURRENCY_CODE = C_MOVEMENT_CURRENCY_CODE;
    RETURN L_PRECISION_TRX;
  END CF_PRECISION_TRXFORMULA;

  FUNCTION CF_RELEASE_NUMBERFORMULA(C_RCV_TRANSACTION_ID IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      L_PO_RELEASE_ID NUMBER;
      L_RELEASE_NUM NUMBER;
    BEGIN
      IF C_RCV_TRANSACTION_ID IS NOT NULL THEN
        BEGIN
          SELECT
            PO_RELEASE_ID
          INTO L_PO_RELEASE_ID
          FROM
            RCV_TRANSACTIONS
          WHERE TRANSACTION_ID = C_RCV_TRANSACTION_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            L_RELEASE_NUM := NULL;
            RETURN (L_RELEASE_NUM);
        END;
        IF L_PO_RELEASE_ID IS NOT NULL THEN
          SELECT
            RELEASE_NUM
          INTO L_RELEASE_NUM
          FROM
            PO_RELEASES_ALL
          WHERE PO_RELEASE_ID = L_PO_RELEASE_ID;
        END IF;
      ELSE
        L_RELEASE_NUM := NULL;
      END IF;
      RETURN (L_RELEASE_NUM);
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(100
                   ,'Failed in CF_RELEASE_NUMBER ')*/NULL;
    END;
    RETURN NULL;
  END CF_RELEASE_NUMBERFORMULA;

  FUNCTION CP_REQUESTED_BY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_REQUESTED_BY;
  END CP_REQUESTED_BY_P;

  FUNCTION CP_APPLICATION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_APPLICATION;
  END CP_APPLICATION_P;

  FUNCTION CP_RESPONSIBILITY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_RESPONSIBILITY;
  END CP_RESPONSIBILITY_P;

  FUNCTION CP_REQUEST_TIME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_REQUEST_TIME;
  END CP_REQUEST_TIME_P;

  FUNCTION CP_LEGAL_ENTITY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_LEGAL_ENTITY_NAME;
  END CP_LEGAL_ENTITY_NAME_P;

  FUNCTION CP_ENTITY_ADDRESS_LINE_1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ENTITY_ADDRESS_LINE_1;
  END CP_ENTITY_ADDRESS_LINE_1_P;

  FUNCTION CP_ENTITY_ADDRESS_LINE_2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ENTITY_ADDRESS_LINE_2;
  END CP_ENTITY_ADDRESS_LINE_2_P;

  FUNCTION CP_ENTITY_ADDRESS_LINE_3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ENTITY_ADDRESS_LINE_3;
  END CP_ENTITY_ADDRESS_LINE_3_P;

  FUNCTION CP_TELEPHONE_NUMBER_1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TELEPHONE_NUMBER_1;
  END CP_TELEPHONE_NUMBER_1_P;

  FUNCTION CP_TELEPHONE_NUMBER_2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TELEPHONE_NUMBER_2;
  END CP_TELEPHONE_NUMBER_2_P;

  FUNCTION CP_CONTACT_PERSON_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CONTACT_PERSON_NAME;
  END CP_CONTACT_PERSON_NAME_P;

  FUNCTION CP_VAT_REGISTRATION_NUMBER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_VAT_REGISTRATION_NUMBER;
  END CP_VAT_REGISTRATION_NUMBER_P;

  FUNCTION CP_SET_OF_BOOKS_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SET_OF_BOOKS_NAME;
  END CP_SET_OF_BOOKS_NAME_P;

  FUNCTION CP_TAX_OFFICE_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TAX_OFFICE_NAME;
  END CP_TAX_OFFICE_NAME_P;

  FUNCTION CP_TAX_OFFICE_ADDRESS_LINE_1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TAX_OFFICE_ADDRESS_LINE_1;
  END CP_TAX_OFFICE_ADDRESS_LINE_1_P;

  FUNCTION CP_TAX_OFFICE_ADDRESS_LINE_2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TAX_OFFICE_ADDRESS_LINE_2;
  END CP_TAX_OFFICE_ADDRESS_LINE_2_P;

  FUNCTION CP_TAX_OFFICE_ADDRESS_LINE_3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_TAX_OFFICE_ADDRESS_LINE_3;
  END CP_TAX_OFFICE_ADDRESS_LINE_3_P;

  FUNCTION CP_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN CP_START_DATE;
  END CP_START_DATE_P;

  FUNCTION CP_END_DATE_P RETURN DATE IS
  BEGIN
    RETURN CP_END_DATE;
  END CP_END_DATE_P;

  FUNCTION CP_STANDARD_UOM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_STANDARD_UOM;
  END CP_STANDARD_UOM_P;

  FUNCTION CP_SYSDATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SYSDATE;
  END CP_SYSDATE_P;

  FUNCTION CP_EXT_PRECISION_FUNC_P RETURN NUMBER IS
  BEGIN
    RETURN CP_EXT_PRECISION_FUNC;
  END CP_EXT_PRECISION_FUNC_P;

  FUNCTION CP_ZONE_NAME_COV_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ZONE_NAME_COV;
  END CP_ZONE_NAME_COV_P;

  FUNCTION CP_MV_TYPE_COV_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_MV_TYPE_COV;
  END CP_MV_TYPE_COV_P;

  FUNCTION CP_REP_OPTION_COV_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_REP_OPTION_COV;
  END CP_REP_OPTION_COV_P;

  FUNCTION CP_USAGE_TYPE_COV_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_USAGE_TYPE_COV;
  END CP_USAGE_TYPE_COV_P;

  FUNCTION CP_STAT_TYPE_COV_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_STAT_TYPE_COV;
  END CP_STAT_TYPE_COV_P;

  FUNCTION CP_PRECISION_FUNC_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PRECISION_FUNC;
  END CP_PRECISION_FUNC_P;

  FUNCTION CP_REPORT_TITLE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_REPORT_TITLE;
  END CP_REPORT_TITLE_P;

 FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
QTY_PRECISION:= inv_common_xmlp_pkg.get_precision(P_QUANTITY_PRECISION);
	/*
	BEGIN
	SRW.USER_EXIT('FND SRWINIT');
	EXCEPTION
	  WHEN SRW.USER_EXIT_FAILURE THEN
	    SRW.Message(10,'Failed in SRWINIT');
	RAISE;
	END;
	*/

	-------------------------------------------------
	--Convert exchange rate from char to number
	-------------------------------------------------
	BEGIN
	p_conc_request_id := FND_GLOBAL.CONC_REQUEST_ID;
	  P_EXCHANGE_RATE := fnd_number.canonical_to_number(P_EXCHANGE_RATE_CHAR);
	END;


	-------------------------------------------------
	--if report option is official summary, check if
	--movement status is verified
	-------------------------------------------------
	BEGIN
	DECLARE
	  l_invalid_status          EXCEPTION;
	  l_nnverified_status_count NUMBER;
	  l_message                 VARCHAR2(2000);
	BEGIN
	  IF p_report_option = 'O/S'
	  THEN
	    SELECT
	      COUNT(*)
	    INTO
	      l_nnverified_status_count
	    FROM
	      MTL_MOVEMENT_STATISTICS mms
	    WHERE mms.entity_org_id = p_legal_entity_id
	      AND mms.zone_code = p_zone_code
	      AND mms.period_name = p_period_name
	      AND mms.usage_type = p_usage_type
	      AND mms.stat_type = p_stat_type
	      AND mms.movement_type = p_movement_type
	      AND movement_status = 'O';
	    IF l_nnverified_status_count > 0
	    THEN
	     RAISE l_invalid_status;
	    END IF;
	  END IF;
	EXCEPTION
	  WHEN l_invalid_status THEN
	    FND_MESSAGE.SET_NAME('INV', 'INV_MGD_MVT_STAT_INVALID_STS');
	    l_message := FND_MESSAGE.Get;
	    --SRW.Message(1, l_message);
	    RAISE;
	  WHEN OTHERS THEN
	    --SRW.Message(31, 'Failed in check movement status');
	    null;
	END;

	END;



	-------------------------------------------------
	-- Initialization for Request By, Request time --
	-- Responsibility and Application              --
	-------------------------------------------------
	BEGIN
	SELECT
	    frv.responsibility_name
	  , TO_CHAR(fcr.request_date, 'YYYY/MM/DD HH24:MI:SS')
	  , fav.application_name
	  , fu.user_name
	  INTO
	    cp_responsibility
	  , cp_request_time
	  , cp_application
	  , cp_requested_by
	  FROM
	    fnd_concurrent_requests fcr
	  , fnd_responsibility_vl frv
	  , fnd_application_vl fav
	  , fnd_user fu
	  WHERE fcr.request_id = p_conc_request_id
	    AND fcr.responsibility_application_id = frv.application_id
	    AND fcr.responsibility_id = frv.responsibility_id
	    AND frv.application_id = fav.application_id
	    AND fu.user_id = fcr.requested_by;
	EXCEPTION
	  WHEN OTHERS THEN
	  --  SRW.Message(31, 'Failed Request By and Request time Init.');
	  null;
	END;

	--------------------------------------------------
	--Change sysdate formatting
	--------------------------------------------------
	SELECT
	  TO_CHAR(SYSDATE, 'YYYY/MM/DD HH24:MI')
	INTO
	  CP_SYSDATE
	FROM
	  DUAL;


	--------------------------------------
	-- Initialization for Set of Books  --
	-- and Legal Entity                 --
	--------------------------------------
	BEGIN
	  --Get VAT number
	  CP_VAT_REGISTRATION_NUMBER :=
	  INV_MGD_MVT_UTILS_PKG.Get_Org_VAT_Number
	  ( p_entity_org_id => p_legal_entity_id
	  , p_date          => sysdate);

	  --Get other values
	SELECT
	  gllv.legal_entity_name,      hl.address_line_1,
	  hl.address_line_2,           hl.address_line_3,
	  hl.telephone_number_1,       hl.telephone_number_2,
	  ppf.full_name,              -- hle.vat_registration_number,
	  gllv.ledger_name
	INTO
	  CP_LEGAL_ENTITY_NAME,       CP_ENTITY_ADDRESS_LINE_1,
	  CP_ENTITY_ADDRESS_LINE_2,   CP_ENTITY_ADDRESS_LINE_3,
	  CP_TELEPHONE_NUMBER_1,      CP_TELEPHONE_NUMBER_2,
	  CP_CONTACT_PERSON_NAME,     --CP_VAT_REGISTRATION_NUMBER,
	  CP_SET_OF_BOOKS_NAME
	FROM
	  hr_locations_no_join hl,
	  per_people_f ppf,
	  gl_ledger_le_v gllv
	WHERE gllv.legal_entity_id = P_LEGAL_ENTITY_ID
	  AND gllv.ledger_category_code = 'PRIMARY'
	  AND gllv.location_id = hl.location_id
	  AND hl.designated_receiver_id = ppf.person_id(+)
	  AND rownum < 2;

	EXCEPTION
	  WHEN OTHERS THEN
	  --  SRW.Message(31, 'Failed in Set_of_books and Legal_Entity Init.');
	  null;

	END;


	----------------------------------------
	-- Initialize currency precision for
	-- functional currency and transaction
	-- currency
	----------------------------------------
	BEGIN
	SELECT
	  nvl(fc.extended_precision,1)
	, nvl(fc.precision,1)
	INTO
	  CP_EXT_PRECISION_FUNC
	, CP_PRECISION_FUNC
	FROM
	  fnd_currencies fc
	WHERE fc.currency_code = P_CURRENCY_CODE
	  AND rownum < 2;

	EXCEPTION
	  WHEN OTHERS THEN
	  --  SRW.Message(31, 'Failed in currency precision.');
	 null;
	END;


	----------------------------------------
	-- Initialization for Tax information --
	----------------------------------------
	BEGIN
	DECLARE
	l_location_id NUMBER;
	BEGIN
	  SELECT
	    tax_office_name
	  , weight_uom_code
	  , tax_office_location_id
	  INTO
	    CP_TAX_OFFICE_NAME
	  , CP_STANDARD_UOM
	  , l_location_id
	  FROM
	    mtl_stat_type_usages
	  WHERE legal_entity_id = P_LEGAL_ENTITY_ID
	    AND zone_code = P_ZONE_CODE
	    AND stat_type = P_STAT_TYPE
	    AND usage_type = P_USAGE_TYPE;

	  BEGIN
	    SELECT
	      address_line_1
	    , address_line_2
	    , address_line_3
	    INTO
	      CP_TAX_OFFICE_ADDRESS_LINE_1
	    , CP_TAX_OFFICE_ADDRESS_LINE_2
	    , CP_TAX_OFFICE_ADDRESS_LINE_3
	    FROM
	      hr_locations_no_join
	    WHERE location_id = l_location_id;

	    EXCEPTION
	      WHEN NO_DATA_FOUND THEN
		BEGIN
		  SELECT
		    address1
		  , address2
		  , address3
		  INTO
		    CP_TAX_OFFICE_ADDRESS_LINE_1
		  , CP_TAX_OFFICE_ADDRESS_LINE_2
		  , CP_TAX_OFFICE_ADDRESS_LINE_3
		  FROM
		    hz_locations
		  WHERE location_id = l_location_id;

		  EXCEPTION
		    WHEN OTHERS THEN
		    --  SRW.Message(31, 'Failed in Tax Office Init');
		    null;
		END;

	      WHEN OTHERS THEN
		--SRW.Message(31, 'Failed in Tax Office Init');
		null;
	  END;
	END;
	END;


	------------------------------------------------
	-- Initialization for Start Date, End Date of --
	-- one period                                 --
	------------------------------------------------
	BEGIN
	  SELECT
	    start_date
	  , end_date
	  INTO
	    CP_start_date
	  , CP_end_date
	  FROM
	    GL_PERIODS
	  WHERE period_name = P_period_name
	    AND rownum < 2;

	EXCEPTION
	    WHEN OTHERS THEN
	--    SRW.Message(31, 'Failed in start_date and end_date Init');
		null;
	END;


	/*
	Fix bug 2230047, get commodity code from mtl_movement_statistics table directly
	not use flexfield anymore
	------------------------------------------------
	-- Initialization for Commodity Structure id  --
	-- of one Legal Entity                        --
	------------------------------------------------
	BEGIN
	SELECT
	 mcs.structure_id
	INTO
	 PLEX_COMMODITY_STRUCT_NUM
	FROM
	 mtl_stat_type_usages mstu
	,mtl_category_sets mcs
	WHERE mstu.legal_entity_id = P_LEGAL_ENTITY_ID
	  AND mstu.zone_code = P_ZONE_CODE
	  AND mstu.category_set_id = mcs.category_set_id
	  AND rownum < 2;
	EXCEPTION
	  WHEN OTHERS THEN
	   SRW.Message(31, 'Failed in conversion Init');
	END;
	*/
	------------------------
	-- Flexfield for ITEM --
	------------------------
	/*
	BEGIN
	SRW.USER_EXIT('FND FLEXSQL CODE="MSTK" NUM="PLEX_ITEM_STRUCT_NUM" APPL_SHORT_NAME="INV"
		       OUTPUT="PLEX_ITEM_FLEX"
		       MODE="SELECT"
		       DISPLAY="ALL"
		       TABLEALIAS="MSI"');
	EXCEPTION
	  WHEN SRW.USER_EXIT_FAILURE THEN
	    SRW.Message(60,'Failed in ITEM Flexfield');
	   WHEN OTHERS THEN
	    SRW.Message(31, 'Failed in ITEM Flexfield');
	END;
	*/
	/*
	Fix bug 2230047, get commodity code from mtl_movement_statistics table directly
	not use flexfield anymore
	----------------------------------
	-- Flexfield for COMMODITY_CODE --
	----------------------------------
	BEGIN
	SRW.USER_EXIT('FND FLEXSQL CODE="MCAT"
		       NUM="PLEX_COMMODITY_STRUCT_NUM"
		       APPL_SHORT_NAME="INV"
		       OUTPUT="PLEX_COMMODITY_FLEX"
		       MODE="SELECT"
		       DISPLAY="ALL"
		       TABLEALIAS="MC"');
	EXCEPTION
	  WHEN SRW.USER_EXIT_FAILURE THEN
	    SRW.Message(70,'Failed in COMMODITY_CODE Flexfield');
	  WHEN OTHERS THEN
	    SRW.Message(31, 'Failed in COMMODITY_CODE Flexfield ');
	END;

	BEGIN
	SRW.USER_EXIT('FND FLEXSQL CODE="MCAT"
		       NUM="PLEX_COMMODITY_STRUCT_NUM"
		       APPL_SHORT_NAME="INV"
		       OUTPUT="PLEX_COMMODITY_ORDER_BY"
		       MODE="ORDER BY"
		       DISPLAY="ALL"
		       TABLEALIAS="MC"');
	EXCEPTION
	  WHEN SRW.USER_EXIT_FAILURE THEN
	    SRW.Message(70,'Failed in COMMODITY_CODE Flexfield');
	  WHEN OTHERS THEN
	    SRW.Message(31, 'Failed in COMMODITY_CODE Flexfield');
	END;
	*/
	-------------------------------------------
	-- Populate report parameter placeholders
	-- Displayed on cover page
	-------------------------------------------
	BEGIN
	SELECT zone_display_name
	  INTO cp_zone_name_cov
	  FROM mtl_economic_zones_vl
	 WHERE zone_code = p_zone_code
	   AND rownum<2;

	SELECT meaning
	  INTO cp_rep_option_cov
	  FROM fnd_lookup_values
	 WHERE lookup_type = 'INTRASTAT_REPORT_OPTION'
	   AND lookup_code = p_report_option
	   AND enabled_flag = 'Y'
	   AND language = userenv('LANG')
	   AND rownum<2;

	SELECT meaning
	  INTO cp_mv_type_cov
	  FROM fnd_lookups
	 WHERE lookup_type = 'MVT_MOVEMENT_TYPE'
	   AND lookup_code = p_movement_type
	   AND enabled_flag = 'Y'
	   AND rownum<2;

	SELECT meaning
	  INTO cp_usage_type_cov
	  FROM fnd_lookups
	 WHERE lookup_type = 'MVT_USAGE_TYPES'
	   AND lookup_code = p_usage_type
	   AND enabled_flag = 'Y'
	   AND rownum<2;

	SELECT meaning
	  INTO cp_stat_type_cov
	  FROM fnd_lookups
	 WHERE lookup_type = 'MVT_STAT_TYPES'
	   AND lookup_code = p_stat_type
	   AND enabled_flag = 'Y'
	   AND rownum<2;


	EXCEPTION
	  WHEN OTHERS THEN
	--    SRW.Message(31, 'Failed cover page parameters initialization.');
		null;
	END;

	-------------------------------------------
	-- Populate p_mvt_id_where, used in main
	-- query
	-------------------------------------------
	BEGIN
	  IF P_MOVEMENT_TYPE IN ('A', 'D')
	  THEN
	    P_MVT_ID_WHERE := 'and mms.parent_movement_id = mms.movement_id';
	  ELSE
	    P_MVT_ID_WHERE :='and movement_id = (select min(movement_id)
			       from mtl_movement_statistics
			       where parent_movement_id = mms.parent_movement_id
			       and movement_type = '''||P_MOVEMENT_TYPE||''' group by mms.parent_movement_id)';

	  END IF;
	END;
	--srw.message(01,'in bef rep');

	--------------------------------------------------------
	--Populate reporting precision and rounding method
	--from setup form. Can not create place holder in May-06
	--somehow, so create user parameters to hold the value
	--Fix bug 5203245
	--------------------------------------------------------
	BEGIN
	  INV_MGD_MVT_UTILS_PKG.Get_Weight_Precision
	      (p_legal_entity_id   => p_legal_entity_id
	      , p_zone_code        => p_zone_code
	      , p_usage_type       => p_usage_type
	      , p_stat_type        => p_stat_type
	      , x_weight_precision => p_rep_precision
	      , x_rep_rounding     => p_rep_rounding);

	  IF p_amount_display = 'W'
	  THEN
	    p_rep_precision := 0;
	  ELSE
	    --same as before, report according to currency precision
	    p_rep_precision := cp_precision_func;
	  END IF;

	END;

	RETURN (TRUE);
END BEFOREREPORT;
END INV_INVSTMVT_XMLP_PKG;


/
