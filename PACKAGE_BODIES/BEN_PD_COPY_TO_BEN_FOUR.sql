--------------------------------------------------------
--  DDL for Package Body BEN_PD_COPY_TO_BEN_FOUR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."BEN_PD_COPY_TO_BEN_FOUR" as
/* $Header: bepdccp4.pkb 120.7 2006/04/10 05:41:20 gsehgal noship $ */
--
-- ----------------------------------------------------------------------------
--UPD Changes New procedure for getting the dtmodes
--
procedure get_dt_modes(p_effective_date       in date,
                       p_effective_end_date   in date,
                       p_effective_start_date in date,
                       p_dml_operation        in varchar2,
                       p_datetrack_mode       in out nocopy varchar2
          --             p_update                  out nocopy boolean
                      ) is
  l_update            boolean := true ;
  l_datetrack_mode    varchar2(80) := p_datetrack_mode ;
begin
  --
  hr_utility.set_location('Intering get_dt_modes p_dt_mode '||l_datetrack_mode,10);
  hr_utility.set_location('p_effective_start_date '||p_effective_start_date,10);
  hr_utility.set_location('p_effective_end_date '||p_effective_end_date,10);
  hr_utility.set_location('p_effective_date '||p_effective_date,10);
  --
  if p_effective_end_date <> hr_api.g_eot then
    --
    if p_dml_operation = 'INSERT' then
      --
      l_datetrack_mode := hr_api.g_update;
      l_update  := true;
      --
    elsif l_datetrack_mode in ('CORRECTION') then
      --
      l_datetrack_mode := hr_api.g_correction ;
      l_update := true;
      --
    elsif l_datetrack_mode in ('UPDATE_OVERRIDE','UPDATE' ) then
      --
      if p_effective_date = p_effective_start_date then
        l_datetrack_mode := hr_api.g_correction ;
        l_update := true;
      else
        --
        if l_datetrack_mode in ('UPDATE_OVERRIDE') then
         --
         l_datetrack_mode := hr_api.g_update_override ;
         l_update := false ;
         --
        elsif l_datetrack_mode in ('UPDATE') then
         --
         l_datetrack_mode := hr_api.g_update;
         --
        end if;
        --
      end if;
      --
    elsif l_datetrack_mode in ('UPDATE_CHANGE_INSERT') then
      --
      if p_effective_date = p_effective_start_date then
        l_datetrack_mode := hr_api.g_correction ;
        l_update := true;
      else
        l_datetrack_mode := hr_api.g_update_change_insert ;
        l_update := true;
      end if;
      --
    else
      --
      l_datetrack_mode := hr_api.g_update;
      l_update  := false;
      --
    end if;
    --
  else
    --
    if p_dml_operation = 'INSERT' then
      --
      l_datetrack_mode := hr_api.g_update;
      l_update  := false;
      --
    elsif l_datetrack_mode in ('CORRECTION') then
      --
      l_datetrack_mode := hr_api.g_correction ;
      l_update := false;
      --
    elsif l_datetrack_mode in ('UPDATE_OVERRIDE','UPDATE' ) then
      --
      if p_effective_date = p_effective_start_date then
        l_datetrack_mode := hr_api.g_correction ;
        l_update := true;
      else
        l_datetrack_mode := hr_api.g_update ;
        l_update := false ;
      end if;
      --
    elsif l_datetrack_mode in ('UPDATE_CHANGE_INSERT') then
      --
      if p_effective_date = p_effective_start_date then
        l_datetrack_mode := hr_api.g_correction ;
        l_update := false;
      else
        l_datetrack_mode := hr_api.g_update ;
        l_update := false;
      end if;
      --
    else
      --
      l_datetrack_mode := hr_api.g_update;
      l_update  := false;
      --
    end if;
    --
  end if ;
  --
  p_datetrack_mode := l_datetrack_mode ;
 --  p_update  := l_update ;
  --
  hr_utility.set_location('Leaving get_dt_modes p_dt_mode '||p_datetrack_mode,10);
  --
end get_dt_modes ;

-- |------------------------< get_fk >------------------------|
-- ----------------------------------------------------------------------------
-- {Start Of Comments}
--
-- {End Of Comments}
--
/*
function get_fk(p_col_name varchar2, p_old_val number,l_datetrack_mode) return number is
l_counter number;
l_ret_id  number := null;
begin
--
l_counter := nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl.LAST, 0);
if l_counter > 0  and p_old_val is not null then
   for i in 1..l_counter loop
       if BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(i).pk_id_column = p_col_name and
          BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(i).old_value    = p_old_val
       then
          l_ret_id := BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(i).new_value;
          exit;
       end if;
   end loop;
   hr_utility.set_location(' ** In the get_fk ** ',111);
   hr_utility.set_location(' l_counter '||l_counter,111);
   hr_utility.set_location(' p_col_name '||p_col_name,111);
   hr_utility.set_location(' p_old_val  '||p_old_val,111);
   hr_utility.set_location(' p_new_val  '||l_ret_id,111);
end if;
--
return l_ret_id;
--
end;
*/

function get_fk(p_col_name varchar2, p_old_val number,p_dml_operation varchar2 default null) return number is
  l_counter number;
  l_ret_id  number := null;
begin
  --
  /*
  if p_dml_operation = 'UPDATE' then
    --
    l_ret_id := p_old_val ;
    --
  else
  */
    --
    l_counter := nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl.LAST, 0);
    if l_counter > 0  and p_old_val is not null then
       for i in 1..l_counter loop
           if BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(i).pk_id_column = p_col_name and
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(i).old_value    = p_old_val
           then
              l_ret_id := BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(i).new_value;
              exit;
           end if;
       end loop;
       --
    end if;
    --
  /*
  end if;
  */
  return l_ret_id;
  --
end;
--
-- ----------------------------------------------------------------------------
-- |------------------------< update_cer_with_target >------------------------|
-- ----------------------------------------------------------------------------
-- {Start Of Comments}
--
-- Private procedure to update the cer with target details
--
-- {End Of Comments}
--
procedure update_cer_with_target(c_pk_rec BEN_PD_COPY_TO_BEN_ONE.g_pk_rec_type, p_copy_entity_txn_id in number) is
begin
 hr_utility.set_location('Inside update_cer_with_target ',233);
     update ben_copy_entity_results
       set information9     = c_pk_rec.copy_reuse_type||'-'||c_pk_rec.new_value
       where copy_entity_txn_id = p_copy_entity_txn_id
       and   table_route_id     = c_pk_rec.table_route_id
       and   information1       = c_pk_rec.old_value ;
end update_cer_with_target ;

--
--------------------------------------------------------------
----------------------< create_EAN_rows >-----------------------
---------------------------------------------------------------
--

procedure create_EAN_rows
(
     p_validate                       in  number     default 0
    ,p_copy_entity_txn_id             in  number
    ,p_effective_date                 in  date
    ,p_prefix_suffix_text             in  varchar2  default null
    ,p_reuse_object_flag              in  varchar2  default null
    ,p_target_business_group_id       in  varchar2  default null
    ,p_prefix_suffix_cd               in  varchar2  default null
) is
--
    l_ASSIGNMENT_SET_ID  number;
    l_ELIGY_PRFL_ID  number;
    cursor c_unique_EAN(l_table_alias varchar2) is
    select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
    ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = tr.table_route_id
    -- and   tr.where_clause        = l_BEN_ELIG_ASNT_SET_PRTE_F
    and tr.table_alias = l_table_alias
    and   cpe.number_of_copies   = 1 -- ADDITION
    group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
    order by information1, information2; --added for bug: 5151945
    --
    --
    cursor c_EAN_min_max_dates(c_table_route_id  number,
                c_information1   number) is
    select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1 ;
    --
    cursor c_EAN(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
    select
     cpe.*
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1
    and   cpe.information2       = c_information2
    and   cpe.information3       = c_information3
    and rownum = 1 ;
    -- Date Track target record
    cursor c_find_EAN_in_target(
                    c_effective_start_date    date,
                    c_effective_end_date      date,
                    c_business_group_id       number,
                    c_new_pk_id               number) is
    select
     EAN.elig_asnt_set_prte_id new_value
    from BEN_ELIG_ASNT_SET_PRTE_F EAN
    where
    EAN.ASSIGNMENT_SET_ID     = l_ASSIGNMENT_SET_ID  and
    EAN.ELIGY_PRFL_ID         = l_ELIGY_PRFL_ID  and
    EAN.business_group_id  = c_business_group_id
    and   EAN.elig_asnt_set_prte_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
    and exists ( select null
                from BEN_ELIG_ASNT_SET_PRTE_F EAN1
                where
                EAN1.ASSIGNMENT_SET_ID     = l_ASSIGNMENT_SET_ID  and
                EAN1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EAN1.business_group_id  = c_business_group_id
                and   EAN1.effective_start_date <= c_effective_start_date )
    and exists ( select null
                from BEN_ELIG_ASNT_SET_PRTE_F EAN2
                where
                EAN2.ASSIGNMENT_SET_ID     = l_ASSIGNMENT_SET_ID  and
                EAN2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EAN2.business_group_id  = c_business_group_id
                and   EAN2.effective_end_date >= c_effective_end_date )
                ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
    --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

    l_prev_pk_id              number := null ;
    l_first_rec               boolean := true ;
    r_EAN                     c_EAN%rowtype;
    l_elig_asnt_set_prte_id             number ;
    l_object_version_number   number ;
    l_effective_start_date    date ;
    l_effective_end_date      date ;
    l_prefix                  pqh_copy_entity_attribs.information1%type := null;
    l_suffix                  pqh_copy_entity_attribs.information1%type := null;
    l_new_value               number(15);
    l_object_found_in_target  boolean := false ;
    l_min_esd                 date;
    l_max_eed                 date;
    l_effective_date          date;
    --
    begin
    -- Initialization
    l_object_found_in_target := false ;
    -- End Initialization
    -- Derive the prefix - sufix
    if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
    elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
    else
     l_prefix := null ;
     l_suffix  := null ;
    end if ;
    -- End Prefix Sufix derivation
    for r_EAN_unique in c_unique_EAN('EAN') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EAN_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EAN_unique.table_route_id '||r_EAN_unique.table_route_id,10);
       hr_utility.set_location(' r_EAN_unique.information1 '||r_EAN_unique.information1,10);
       hr_utility.set_location( 'r_EAN_unique.information2 '||r_EAN_unique.information2,10);
       hr_utility.set_location( 'r_EAN_unique.information3 '||r_EAN_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EAN_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EAN(r_EAN_unique.table_route_id,
                r_EAN_unique.information1,
                r_EAN_unique.information2,
                r_EAN_unique.information3 ) ;
       --
       fetch c_EAN into r_EAN ;
       --
       close c_EAN ;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_ASSIGNMENT_SET_ID := r_EAN.information176;
       else
         l_ASSIGNMENT_SET_ID := r_EAN.information174;
       end if;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EAN.INFORMATION263,l_dml_operation);

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EAN_unique.information2 and r_EAN_unique.information3 then
               l_update := true;
               if r_EAN_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <> 'ELIG_ASNT_SET_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_ASNT_SET_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EAN_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EAN_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EAN_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- -- log_data('EAN',l_new_value,l_prefix || r_EAN_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EAN_min_max_dates(r_EAN_unique.table_route_id, r_EAN_unique.information1 ) ;
       fetch c_EAN_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;

       l_min_esd := greatest(l_min_esd,r_EAN_unique.information2);
/**********************moved up from here **********************
       open c_EAN(r_EAN_unique.table_route_id,
                r_EAN_unique.information1,
                r_EAN_unique.information2,
                r_EAN_unique.information3 ) ;
       --
       fetch c_EAN into r_EAN ;
       --
       close c_EAN ;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_ASSIGNMENT_SET_ID := r_EAN.information176;
       else
         l_ASSIGNMENT_SET_ID := r_EAN.information174;
       end if;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EAN.INFORMATION263,l_dml_operation);

**********************************************************/


       if l_ASSIGNMENT_SET_ID is null then
         close c_EAN_min_max_dates;
         --
         BEN_PD_COPY_TO_BEN_three.log_nomapping_data(p_parent_table_alias =>'ELP'
                     ,p_parent_pk_id         => r_EAN.information263
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'EAN'
                     ,p_child_data           => r_EAN.information173 );

         --
       else
         if p_reuse_object_flag = 'Y' then
           if c_EAN_min_max_dates%found then
                   -- cursor to find the object
                   open c_find_EAN_in_target( l_min_esd,l_max_eed,
                                         p_target_business_group_id, nvl(l_elig_asnt_set_prte_id, -999)  ) ;
                   fetch c_find_EAN_in_target into l_new_value ;
                   if c_find_EAN_in_target%found then
                     --
                     --TEMPIK
                     l_dt_rec_found :=   dt_api.check_min_max_dates
                         (p_base_table_name => 'BEN_ELIG_ASNT_SET_PRTE_F',
                          p_base_key_column => 'ELIG_ASNT_SET_PRTE_ID',
                          p_base_key_value  => l_new_value,
                          p_from_date       => l_min_esd,
                          p_to_date         => l_max_eed );
                     if l_dt_rec_found THEN
                     --END TEMPIK
                     if r_EAN_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                        nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_ASNT_SET_PRTE_ID'  then
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_ASNT_SET_PRTE_ID' ;
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EAN_unique.information1 ;
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                        BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EAN_unique.table_route_id;
                        --
                        -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                        --
                        BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                     end if ;
                     --
                     l_object_found_in_target := true ;
                     --TEMPIK
                     end if; -- l_dt_rec_found
                     --END TEMPIK
                   end if;
                   close c_find_EAN_in_target ;
                 --
           end if;
         end if ;
         --
         close c_EAN_min_max_dates ;

	 end if; -- bug 4565106

      end if; --if p_dml_operation
       --
       if (not l_object_found_in_target OR l_update) and l_assignment_set_id is not null  then

           --kopp
           l_current_pk_id := r_EAN.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_EAN.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_ELIG_ASNT_SET_PRTE_F CREATE_ELIG_ASNT_SET_PRTE ',20);
             BEN_ELIG_ASNT_SET_PRTE_API.CREATE_ELIG_ASNT_SET_PRTE(
                     --
                     P_VALIDATE               => false
                     ,P_EFFECTIVE_DATE        => l_effective_date
                     ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                     --
					 ,P_ASSIGNMENT_SET_ID      => l_ASSIGNMENT_SET_ID
					 ,P_EAN_ATTRIBUTE1      => r_EAN.INFORMATION111
					 ,P_EAN_ATTRIBUTE10      => r_EAN.INFORMATION120
					 ,P_EAN_ATTRIBUTE11      => r_EAN.INFORMATION121
					 ,P_EAN_ATTRIBUTE12      => r_EAN.INFORMATION122
					 ,P_EAN_ATTRIBUTE13      => r_EAN.INFORMATION123
					 ,P_EAN_ATTRIBUTE14      => r_EAN.INFORMATION124
					 ,P_EAN_ATTRIBUTE15      => r_EAN.INFORMATION125
					 ,P_EAN_ATTRIBUTE16      => r_EAN.INFORMATION126
					 ,P_EAN_ATTRIBUTE17      => r_EAN.INFORMATION127
					 ,P_EAN_ATTRIBUTE18      => r_EAN.INFORMATION128
					 ,P_EAN_ATTRIBUTE19      => r_EAN.INFORMATION129
					 ,P_EAN_ATTRIBUTE2      => r_EAN.INFORMATION112
					 ,P_EAN_ATTRIBUTE20      => r_EAN.INFORMATION130
					 ,P_EAN_ATTRIBUTE21      => r_EAN.INFORMATION131
					 ,P_EAN_ATTRIBUTE22      => r_EAN.INFORMATION132
					 ,P_EAN_ATTRIBUTE23      => r_EAN.INFORMATION133
					 ,P_EAN_ATTRIBUTE24      => r_EAN.INFORMATION134
					 ,P_EAN_ATTRIBUTE25      => r_EAN.INFORMATION135
					 ,P_EAN_ATTRIBUTE26      => r_EAN.INFORMATION136
					 ,P_EAN_ATTRIBUTE27      => r_EAN.INFORMATION137
					 ,P_EAN_ATTRIBUTE28      => r_EAN.INFORMATION138
					 ,P_EAN_ATTRIBUTE29      => r_EAN.INFORMATION139
					 ,P_EAN_ATTRIBUTE3      => r_EAN.INFORMATION113
					 ,P_EAN_ATTRIBUTE30      => r_EAN.INFORMATION140
					 ,P_EAN_ATTRIBUTE4      => r_EAN.INFORMATION114
					 ,P_EAN_ATTRIBUTE5      => r_EAN.INFORMATION115
					 ,P_EAN_ATTRIBUTE6      => r_EAN.INFORMATION116
					 ,P_EAN_ATTRIBUTE7      => r_EAN.INFORMATION117
					 ,P_EAN_ATTRIBUTE8      => r_EAN.INFORMATION118
					 ,P_EAN_ATTRIBUTE9      => r_EAN.INFORMATION119
					 ,P_EAN_ATTRIBUTE_CATEGORY      => r_EAN.INFORMATION110
					 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
					 ,P_ELIG_ASNT_SET_PRTE_ID      => l_elig_asnt_set_prte_id
					 ,P_EXCLD_FLAG      => r_EAN.INFORMATION11
					 ,P_ORDR_NUM      => r_EAN.INFORMATION260
--			****** END CHANGE LINES

		   --

					 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
					 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
					 ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
                                         ,P_CRITERIA_SCORE      => r_ean.INFORMATION295
                                         ,P_CRITERIA_WEIGHT      => r_ean.INFORMATION296
				 );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_elig_asnt_set_prte_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_ASNT_SET_PRTE_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EAN.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_ASNT_SET_PRTE_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EAN_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             hr_utility.set_location(' BEN_ELIG_ASNT_SET_PRTE_F UPDATE_ELIG_ASNT_SET_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EAN.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EAN.information3,
               p_effective_start_date  => r_EAN.information2,
               p_dml_operation         => r_EAN.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_ASNT_SET_PRTE_ID   := r_EAN.information1;
             l_object_version_number := r_EAN.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END




             BEN_ELIG_ASNT_SET_PRTE_API.UPDATE_ELIG_ASNT_SET_PRTE(
                     --
                     P_VALIDATE               => false
                     ,P_EFFECTIVE_DATE        => l_effective_date
                     ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                     --
					 ,P_ASSIGNMENT_SET_ID      => l_ASSIGNMENT_SET_ID
					 ,P_EAN_ATTRIBUTE1      => r_EAN.INFORMATION111
					 ,P_EAN_ATTRIBUTE10      => r_EAN.INFORMATION120
					 ,P_EAN_ATTRIBUTE11      => r_EAN.INFORMATION121
					 ,P_EAN_ATTRIBUTE12      => r_EAN.INFORMATION122
					 ,P_EAN_ATTRIBUTE13      => r_EAN.INFORMATION123
					 ,P_EAN_ATTRIBUTE14      => r_EAN.INFORMATION124
					 ,P_EAN_ATTRIBUTE15      => r_EAN.INFORMATION125
					 ,P_EAN_ATTRIBUTE16      => r_EAN.INFORMATION126
					 ,P_EAN_ATTRIBUTE17      => r_EAN.INFORMATION127
					 ,P_EAN_ATTRIBUTE18      => r_EAN.INFORMATION128
					 ,P_EAN_ATTRIBUTE19      => r_EAN.INFORMATION129
					 ,P_EAN_ATTRIBUTE2      => r_EAN.INFORMATION112
					 ,P_EAN_ATTRIBUTE20      => r_EAN.INFORMATION130
					 ,P_EAN_ATTRIBUTE21      => r_EAN.INFORMATION131
					 ,P_EAN_ATTRIBUTE22      => r_EAN.INFORMATION132
					 ,P_EAN_ATTRIBUTE23      => r_EAN.INFORMATION133
					 ,P_EAN_ATTRIBUTE24      => r_EAN.INFORMATION134
					 ,P_EAN_ATTRIBUTE25      => r_EAN.INFORMATION135
					 ,P_EAN_ATTRIBUTE26      => r_EAN.INFORMATION136
					 ,P_EAN_ATTRIBUTE27      => r_EAN.INFORMATION137
					 ,P_EAN_ATTRIBUTE28      => r_EAN.INFORMATION138
					 ,P_EAN_ATTRIBUTE29      => r_EAN.INFORMATION139
					 ,P_EAN_ATTRIBUTE3      => r_EAN.INFORMATION113
					 ,P_EAN_ATTRIBUTE30      => r_EAN.INFORMATION140
					 ,P_EAN_ATTRIBUTE4      => r_EAN.INFORMATION114
					 ,P_EAN_ATTRIBUTE5      => r_EAN.INFORMATION115
					 ,P_EAN_ATTRIBUTE6      => r_EAN.INFORMATION116
					 ,P_EAN_ATTRIBUTE7      => r_EAN.INFORMATION117
					 ,P_EAN_ATTRIBUTE8      => r_EAN.INFORMATION118
					 ,P_EAN_ATTRIBUTE9      => r_EAN.INFORMATION119
					 ,P_EAN_ATTRIBUTE_CATEGORY      => r_EAN.INFORMATION110
					 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
					 ,P_ELIG_ASNT_SET_PRTE_ID      => l_elig_asnt_set_prte_id
					 ,P_EXCLD_FLAG      => r_EAN.INFORMATION11
					 ,P_ORDR_NUM      => r_EAN.INFORMATION260
		   --
--		   ****** END CHANGE LINES

		   --
					 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
					 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
					 ,P_OBJECT_VERSION_NUMBER => l_object_version_number
					 ,P_DATETRACK_MODE        => l_datetrack_mode
                                         ,P_CRITERIA_SCORE      => r_ean.INFORMATION295
                                         ,P_CRITERIA_WEIGHT      => r_ean.INFORMATION296
				 );

	end if;  -- l_update
             --
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
               trunc(l_max_eed) = trunc(r_EAN.information3)) then
                     --
                     BEN_ELIG_ASNT_SET_PRTE_API.delete_ELIG_ASNT_SET_PRTE(
                        --
                        p_validate                       => false
                        ,p_elig_asnt_set_prte_id                   => l_elig_asnt_set_prte_id
                        ,p_effective_start_date           => l_effective_start_date
                        ,p_effective_end_date             => l_effective_end_date
                        ,p_object_version_number          => l_object_version_number
                        ,p_effective_date                 => l_max_eed
                        ,p_datetrack_mode                 => hr_api.g_delete
                        --
                        );
                        --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
        -- end if; -- bug 4565106
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EAN',r_EAN.information5 ) ;
     --
end create_EAN_rows;

    --
    ---------------------------------------------------------------
    ----------------------< create_CGP_rows >-----------------------
    ---------------------------------------------------------------
    --
    procedure create_CGP_rows
    (
          p_validate                       in  number     default 0
         ,p_copy_entity_txn_id             in  number
         ,p_effective_date                 in  date
         ,p_prefix_suffix_text             in  varchar2  default null
         ,p_reuse_object_flag              in  varchar2  default null
         ,p_target_business_group_id       in  varchar2  default null
         ,p_prefix_suffix_cd               in  varchar2  default null
    ) is
    --
    l_ELIGY_PRFL_ID  number;
    l_PYMT_MUST_BE_RCVD_RL  number;
    -- IK
    l_PYMT_MUST_BE_RCVD_NUM BEN_CNTNG_PRTN_ELIG_PRFL_F.PYMT_MUST_BE_RCVD_NUM%type;
    l_PYMT_MUST_BE_RCVD_UOM BEN_CNTNG_PRTN_ELIG_PRFL_F.PYMT_MUST_BE_RCVD_UOM%type;
    -- IK
    cursor c_unique_CGP(l_table_alias varchar2) is
    select distinct cpe.information1,
      cpe.information2,
      cpe.information3,
      cpe.information170 name,
      cpe.table_route_id
    ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
         pqh_table_route tr
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = tr.table_route_id
    -- and   tr.where_clause        = l_BEN_CNTNG_PRTN_ELIG_PRFL_F
    and tr.table_alias = l_table_alias
    and   cpe.number_of_copies   = 1 -- ADDITION
    group by cpe.information1,cpe.information2,cpe.information3, cpe.information170, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
    --
    --
    cursor c_CGP_min_max_dates(c_table_route_id  number,
                 c_information1   number) is
    select
      min(cpe.information2) min_esd,
      max(cpe.information3) min_eed
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1 ;
    --
    cursor c_CGP(c_table_route_id  number,
                 c_information1   number,
                 c_information2   date,
                 c_information3   date)  is
    select
      cpe.*
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1
    and   cpe.information2       = c_information2
    and   cpe.information3       = c_information3
    and rownum = 1 ;
    -- Date Track target record
    cursor c_find_CGP_in_target(
                                 c_effective_start_date    date,
                                 c_effective_end_date      date,
                                 c_business_group_id       number,
                                 c_new_pk_id               number) is
    select
      CGP.cntng_prtn_elig_prfl_id new_value
    from BEN_CNTNG_PRTN_ELIG_PRFL_F CGP
    where
    CGP.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
    -- IK
    nvl(CGP.PYMT_MUST_BE_RCVD_RL,-999) = nvl(l_PYMT_MUST_BE_RCVD_RL,-999) and
    nvl(CGP.PYMT_MUST_BE_RCVD_NUM,-999)= nvl(l_PYMT_MUST_BE_RCVD_NUM,-999) and
    nvl(CGP.PYMT_MUST_BE_RCVD_UOM,-999)= nvl(l_PYMT_MUST_BE_RCVD_UOM,-999) and
    -- IK
    CGP.business_group_id  = c_business_group_id
    and   CGP.cntng_prtn_elig_prfl_id  <> c_new_pk_id
--TEMPIK
   and c_effective_start_date between effective_start_date
                            and effective_end_date ;
--END TEMPIK
/*TEMPIK
    and exists ( select null
                 from BEN_CNTNG_PRTN_ELIG_PRFL_F CGP1
                 where
                 CGP1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                 -- IK
                 nvl(CGP1.PYMT_MUST_BE_RCVD_RL,-999) = nvl(l_PYMT_MUST_BE_RCVD_RL,-999) and
                 nvl(CGP1.PYMT_MUST_BE_RCVD_NUM,-999)= nvl(l_PYMT_MUST_BE_RCVD_NUM,-999) and
                 nvl(CGP1.PYMT_MUST_BE_RCVD_UOM,-999)= nvl(l_PYMT_MUST_BE_RCVD_UOM,-999) and
                 -- IK
                 CGP1.business_group_id  = c_business_group_id
                 and   CGP1.effective_start_date <= c_effective_start_date )
    and exists ( select null
                 from BEN_CNTNG_PRTN_ELIG_PRFL_F CGP2
                 where
                 CGP2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                 -- IK
                 nvl(CGP2.PYMT_MUST_BE_RCVD_RL,-999) = nvl(l_PYMT_MUST_BE_RCVD_RL,-999) and
                 nvl(CGP2.PYMT_MUST_BE_RCVD_NUM,-999)= nvl(l_PYMT_MUST_BE_RCVD_NUM,-999) and
                 nvl(CGP2.PYMT_MUST_BE_RCVD_UOM,-999)= nvl(l_PYMT_MUST_BE_RCVD_UOM,-999) and
                 -- IK
                 CGP2.business_group_id  = c_business_group_id
                 and   CGP2.effective_end_date >= c_effective_end_date )
                 ;
TEMPIK */
   --TEMPIK
   l_dt_rec_found            boolean ;
   --END TEMPIK
    --
    --l_current_pk_id           number := null ;
--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;


    l_prev_pk_id              number := null ;
    l_first_rec               boolean := true ;
    r_CGP                     c_CGP%rowtype;
    l_cntng_prtn_elig_prfl_id             number ;
    l_object_version_number   number ;
    l_effective_start_date    date ;
    l_effective_end_date      date ;
    l_prefix                  pqh_copy_entity_attribs.information1%type := null;
    l_suffix                  pqh_copy_entity_attribs.information1%type := null;
    l_new_value               number(15);
    l_object_found_in_target  boolean := false ;
    l_min_esd                 date;
    l_max_eed                 date;
    l_effective_date          date;
    --
  begin
    -- Initialization
    l_object_found_in_target := false ;
    -- End Initialization
    -- Derive the prefix - sufix
    if   p_prefix_suffix_cd = 'PREFIX' then
      l_prefix  := p_prefix_suffix_text ;
    elsif p_prefix_suffix_cd = 'SUFFIX' then
      l_suffix   := p_prefix_suffix_text ;
    else
      l_prefix := null ;
      l_suffix  := null ;
    end if ;
    -- End Prefix Sufix derivation
    for r_CGP_unique in c_unique_CGP('CGP') loop
      --
      if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_CGP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
        --
        hr_utility.set_location(' r_CGP_unique.table_route_id '||r_CGP_unique.table_route_id,10);
        hr_utility.set_location(' r_CGP_unique.information1 '||r_CGP_unique.information1,10);
        hr_utility.set_location( 'r_CGP_unique.information2 '||r_CGP_unique.information2,10);
        hr_utility.set_location( 'r_CGP_unique.information3 '||r_CGP_unique.information3,10);
        -- If reuse objects flag is 'Y' then check for the object in the target business group
        -- if found insert the record into PLSql table and exit the loop else try create the
        -- object in the target business group
        --
        l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_CGP_unique.dml_operation ;
       --
/* ***Moved here from below ******/
        open c_CGP(r_CGP_unique.table_route_id,
                 r_CGP_unique.information1,
                 r_CGP_unique.information2,
                 r_CGP_unique.information3 ) ;
        --
        fetch c_CGP into r_CGP ;
        --
        close c_CGP ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_CGP.INFORMATION263,l_dml_operation);
        l_PYMT_MUST_BE_RCVD_RL := get_fk('FORMULA_ID', r_CGP.INFORMATION260,l_dml_operation);
        l_PYMT_MUST_BE_RCVD_NUM := r_CGP.INFORMATION259 ;
        l_PYMT_MUST_BE_RCVD_UOM := r_CGP.INFORMATION11 ;
      /**********************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_CGP_unique.information2 and r_CGP_unique.information3 then
               l_update := true;
               if r_CGP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'CNTNG_PRTN_ELIG_PRFL_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'CNTNG_PRTN_ELIG_PRFL_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CGP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_CGP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CGP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- -- log_data('CGP',l_new_value,l_prefix || r_CGP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
        l_min_esd := null ;
        l_max_eed := null ;
        open c_CGP_min_max_dates(r_CGP_unique.table_route_id, r_CGP_unique.information1 ) ;
        fetch c_CGP_min_max_dates into l_min_esd,l_max_eed ;
        --

        if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
             l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
          l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
        end if;
        l_min_esd := greatest(l_min_esd,r_CGP_unique.information2);
/* ***Moved up ******
        open c_CGP(r_CGP_unique.table_route_id,
                 r_CGP_unique.information1,
                 r_CGP_unique.information2,
                 r_CGP_unique.information3 ) ;
        --
        fetch c_CGP into r_CGP ;
        --
        close c_CGP ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_CGP.INFORMATION263,l_dml_operation);
        l_PYMT_MUST_BE_RCVD_RL := get_fk('FORMULA_ID', r_CGP.INFORMATION260,l_dml_operation);
        l_PYMT_MUST_BE_RCVD_NUM := r_CGP.INFORMATION259 ;
        l_PYMT_MUST_BE_RCVD_UOM := r_CGP.INFORMATION11 ;
       **********************/
        if p_reuse_object_flag = 'Y' then
          if c_CGP_min_max_dates%found then
            -- cursor to find the object
            open c_find_CGP_in_target( l_min_esd,l_max_eed,
                                  p_target_business_group_id, nvl(l_cntng_prtn_elig_prfl_id, -999)  ) ;
            fetch c_find_CGP_in_target into l_new_value ;
            if c_find_CGP_in_target%found then
              --
                    --TEMPIK
                    l_dt_rec_found :=   dt_api.check_min_max_dates
                        (p_base_table_name => 'BEN_CNTNG_PRTN_ELIG_PRFL_F',
                         p_base_key_column => 'CNTNG_PRTN_ELIG_PRFL_ID',
                         p_base_key_value  => l_new_value,
                         p_from_date       => l_min_esd,
                         p_to_date         => l_max_eed );
                    if l_dt_rec_found THEN
                    --END TEMPIK
              if r_CGP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                 nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'CNTNG_PRTN_ELIG_PRFL_ID'  then
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'CNTNG_PRTN_ELIG_PRFL_ID' ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_CGP_unique.information1 ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CGP_unique.table_route_id;
                 --
                 -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                 --
                 BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
              end if ;
              --
              l_object_found_in_target := true ;
                    --TEMPIK
                    end if; -- l_dt_rec_found
                    --END TEMPIK
            end if;
            close c_find_CGP_in_target ;
          --
          end if;
        end if ;
        --
        close c_CGP_min_max_dates ;
        end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

          --
          l_current_pk_id := r_CGP.information1;
          --
          hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
          hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
          --
          if l_current_pk_id =  l_prev_pk_id  then
            --
            l_first_rec := false ;
            --
          else
            --
            l_first_rec := true ;
            --
          end if ;
          --
          ben_pd_copy_to_ben_one.ben_chk_col_len('NAME' ,'BEN_CNTNG_PRTN_ELIG_PRFL_F',l_prefix || r_CGP.information170 || l_suffix);
          --

          l_effective_date := r_CGP.information2;
          if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
               l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
            l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
          end if;

          if l_first_rec and not l_update then
            -- Call Create routine.
            hr_utility.set_location(' BEN_CNTNG_PRTN_ELIG_PRFL_F CREATE_CNTNG_PRTN_ELIG_PRFL ',20);
            BEN_CNTNG_PRTN_ELIG_PRFL_API.CREATE_CNTNG_PRTN_ELIG_PRFL(
              --
              P_VALIDATE               => false
              ,P_EFFECTIVE_DATE        => l_effective_date
              ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
              --
             ,P_CGP_ATTRIBUTE1      => r_CGP.INFORMATION111
             ,P_CGP_ATTRIBUTE10      => r_CGP.INFORMATION120
             ,P_CGP_ATTRIBUTE11      => r_CGP.INFORMATION121
             ,P_CGP_ATTRIBUTE12      => r_CGP.INFORMATION122
             ,P_CGP_ATTRIBUTE13      => r_CGP.INFORMATION123
             ,P_CGP_ATTRIBUTE14      => r_CGP.INFORMATION124
             ,P_CGP_ATTRIBUTE15      => r_CGP.INFORMATION125
             ,P_CGP_ATTRIBUTE16      => r_CGP.INFORMATION126
             ,P_CGP_ATTRIBUTE17      => r_CGP.INFORMATION127
             ,P_CGP_ATTRIBUTE18      => r_CGP.INFORMATION128
             ,P_CGP_ATTRIBUTE19      => r_CGP.INFORMATION129
             ,P_CGP_ATTRIBUTE2      => r_CGP.INFORMATION112
             ,P_CGP_ATTRIBUTE20      => r_CGP.INFORMATION130
             ,P_CGP_ATTRIBUTE21      => r_CGP.INFORMATION131
             ,P_CGP_ATTRIBUTE22      => r_CGP.INFORMATION132
             ,P_CGP_ATTRIBUTE23      => r_CGP.INFORMATION133
             ,P_CGP_ATTRIBUTE24      => r_CGP.INFORMATION134
             ,P_CGP_ATTRIBUTE25      => r_CGP.INFORMATION135
             ,P_CGP_ATTRIBUTE26      => r_CGP.INFORMATION136
             ,P_CGP_ATTRIBUTE27      => r_CGP.INFORMATION137
             ,P_CGP_ATTRIBUTE28      => r_CGP.INFORMATION138
             ,P_CGP_ATTRIBUTE29      => r_CGP.INFORMATION139
             ,P_CGP_ATTRIBUTE3      => r_CGP.INFORMATION113
             ,P_CGP_ATTRIBUTE30      => r_CGP.INFORMATION140
             ,P_CGP_ATTRIBUTE4      => r_CGP.INFORMATION114
             ,P_CGP_ATTRIBUTE5      => r_CGP.INFORMATION115
             ,P_CGP_ATTRIBUTE6      => r_CGP.INFORMATION116
             ,P_CGP_ATTRIBUTE7      => r_CGP.INFORMATION117
             ,P_CGP_ATTRIBUTE8      => r_CGP.INFORMATION118
             ,P_CGP_ATTRIBUTE9      => r_CGP.INFORMATION119
             ,P_CGP_ATTRIBUTE_CATEGORY      => r_CGP.INFORMATION110
             ,P_CNTNG_PRTN_ELIG_PRFL_ID      => l_cntng_prtn_elig_prfl_id
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_NAME      => l_prefix || r_CGP.INFORMATION170 || l_suffix
             ,P_PYMT_MUST_BE_RCVD_NUM      => r_CGP.INFORMATION259
             ,P_PYMT_MUST_BE_RCVD_RL      => l_PYMT_MUST_BE_RCVD_RL
             ,P_PYMT_MUST_BE_RCVD_UOM      => r_CGP.INFORMATION11
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
         );

            -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            -- Update all relevent cer records with new pk_id
            hr_utility.set_location('Before plsql table ',222);
            hr_utility.set_location('new_value id '||l_cntng_prtn_elig_prfl_id,222);
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'CNTNG_PRTN_ELIG_PRFL_ID' ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_CGP.information1 ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_CNTNG_PRTN_ELIG_PRFL_ID ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_CGP_unique.table_route_id;
            hr_utility.set_location('After plsql table ',222);
            --
            -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
            --
            BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
            --
          else
            --
            -- Call Update routine for the pk_id created in prev run .
            -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            hr_utility.set_location(' BEN_CNTNG_PRTN_ELIG_PRFL_F UPDATE_CNTNG_PRTN_ELIG_PRFL ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_CGP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_CGP.information3,
               p_effective_start_date  => r_CGP.information2,
               p_dml_operation         => r_CGP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_CNTNG_PRTN_ELIG_PRFL_ID   := r_CGP.information1;
             l_object_version_number := r_CGP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


            BEN_CNTNG_PRTN_ELIG_PRFL_API.UPDATE_CNTNG_PRTN_ELIG_PRFL(
              --
              P_VALIDATE               => false
              ,P_EFFECTIVE_DATE        => l_effective_date
              ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
              --
             ,P_CGP_ATTRIBUTE1      => r_CGP.INFORMATION111
             ,P_CGP_ATTRIBUTE10      => r_CGP.INFORMATION120
             ,P_CGP_ATTRIBUTE11      => r_CGP.INFORMATION121
             ,P_CGP_ATTRIBUTE12      => r_CGP.INFORMATION122
             ,P_CGP_ATTRIBUTE13      => r_CGP.INFORMATION123
             ,P_CGP_ATTRIBUTE14      => r_CGP.INFORMATION124
             ,P_CGP_ATTRIBUTE15      => r_CGP.INFORMATION125
             ,P_CGP_ATTRIBUTE16      => r_CGP.INFORMATION126
             ,P_CGP_ATTRIBUTE17      => r_CGP.INFORMATION127
             ,P_CGP_ATTRIBUTE18      => r_CGP.INFORMATION128
             ,P_CGP_ATTRIBUTE19      => r_CGP.INFORMATION129
             ,P_CGP_ATTRIBUTE2      => r_CGP.INFORMATION112
             ,P_CGP_ATTRIBUTE20      => r_CGP.INFORMATION130
             ,P_CGP_ATTRIBUTE21      => r_CGP.INFORMATION131
             ,P_CGP_ATTRIBUTE22      => r_CGP.INFORMATION132
             ,P_CGP_ATTRIBUTE23      => r_CGP.INFORMATION133
             ,P_CGP_ATTRIBUTE24      => r_CGP.INFORMATION134
             ,P_CGP_ATTRIBUTE25      => r_CGP.INFORMATION135
             ,P_CGP_ATTRIBUTE26      => r_CGP.INFORMATION136
             ,P_CGP_ATTRIBUTE27      => r_CGP.INFORMATION137
             ,P_CGP_ATTRIBUTE28      => r_CGP.INFORMATION138
             ,P_CGP_ATTRIBUTE29      => r_CGP.INFORMATION139
             ,P_CGP_ATTRIBUTE3      => r_CGP.INFORMATION113
             ,P_CGP_ATTRIBUTE30      => r_CGP.INFORMATION140
             ,P_CGP_ATTRIBUTE4      => r_CGP.INFORMATION114
             ,P_CGP_ATTRIBUTE5      => r_CGP.INFORMATION115
             ,P_CGP_ATTRIBUTE6      => r_CGP.INFORMATION116
             ,P_CGP_ATTRIBUTE7      => r_CGP.INFORMATION117
             ,P_CGP_ATTRIBUTE8      => r_CGP.INFORMATION118
             ,P_CGP_ATTRIBUTE9      => r_CGP.INFORMATION119
             ,P_CGP_ATTRIBUTE_CATEGORY      => r_CGP.INFORMATION110
             ,P_CNTNG_PRTN_ELIG_PRFL_ID      => l_cntng_prtn_elig_prfl_id
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_NAME      => l_prefix || r_CGP.INFORMATION170 || l_suffix
             ,P_PYMT_MUST_BE_RCVD_NUM      => r_CGP.INFORMATION259
             ,P_PYMT_MUST_BE_RCVD_RL      => l_PYMT_MUST_BE_RCVD_RL
             ,P_PYMT_MUST_BE_RCVD_UOM      => r_CGP.INFORMATION11
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
         );
	end if;  -- l_update
            --
          end if;
          --
          -- Delete the row if it is end dated.
          --
          if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
              trunc(l_max_eed) = trunc(r_CGP.information3)) then
              --
              BEN_CNTNG_PRTN_ELIG_PRFL_API.delete_CNTNG_PRTN_ELIG_PRFL(
                 --
                 p_validate                       => false
                 ,p_cntng_prtn_elig_prfl_id                   => l_cntng_prtn_elig_prfl_id
                 ,p_effective_start_date           => l_effective_start_date
                 ,p_effective_end_date             => l_effective_end_date
                 ,p_object_version_number          => l_object_version_number
                 ,p_effective_date                 => l_max_eed
                 ,p_datetrack_mode                 => hr_api.g_delete
                 --
                 );
                 --
          end if;
          --
          l_prev_pk_id := l_current_pk_id ;
          --
        end if;
        --
      end if;
      --
    end loop;
    --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'CGP',l_prefix || r_CGP.information170 || l_suffix) ;
     --
  end create_CGP_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_EAP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EAP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_AGE_FCTR_ID  number;
   l_ELIGY_PRFL_ID  number;
   cursor c_unique_EAP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_AGE_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION

   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EAP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EAP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EAP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EAP.elig_age_prte_id new_value
   from BEN_ELIG_AGE_PRTE_F EAP
   where
   EAP.AGE_FCTR_ID     = l_AGE_FCTR_ID  and        -- IK
   EAP.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EAP.business_group_id  = c_business_group_id
   and   EAP.elig_age_prte_id  <> c_new_pk_id
 --TEMPIK
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_AGE_PRTE_F EAP1
                where
                EAP1.AGE_FCTR_ID     = l_AGE_FCTR_ID  and  -- IK
                EAP1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EAP1.business_group_id  = c_business_group_id
                and   EAP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_AGE_PRTE_F EAP2
                where
                EAP2.AGE_FCTR_ID     = l_AGE_FCTR_ID  and  -- IK
                EAP2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EAP2.business_group_id  = c_business_group_id
                and   EAP2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --
   --l_current_pk_id           number := null ;
--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EAP                     c_EAP%rowtype;
   l_elig_age_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EAP_unique in c_unique_EAP('EAP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EAP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EAP_unique.table_route_id '||r_EAP_unique.table_route_id,10);
       hr_utility.set_location(' r_EAP_unique.information1 '||r_EAP_unique.information1,10);
       hr_utility.set_location( 'r_EAP_unique.information2 '||r_EAP_unique.information2,10);
       hr_utility.set_location( 'r_EAP_unique.information3 '||r_EAP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EAP_unique.dml_operation ;
       --
/*****************moved from below *******************/
       open c_EAP(r_EAP_unique.table_route_id,
                r_EAP_unique.information1,
                r_EAP_unique.information2,
                r_EAP_unique.information3 ) ;
       --
       fetch c_EAP into r_EAP ;
       --
       close c_EAP ;
       --
       l_AGE_FCTR_ID := get_fk('AGE_FCTR_ID', r_EAP.INFORMATION246,l_dml_operation);

       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EAP.INFORMATION263,l_dml_operation);
/***********************************************/
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EAP_unique.information2 and r_EAP_unique.information3 then
               l_update := true;
               if r_EAP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_AGE_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_AGE_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EAP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EAP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EAP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- -- log_data('EAP',l_new_value,l_prefix || r_EAP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EAP_min_max_dates(r_EAP_unique.table_route_id, r_EAP_unique.information1 ) ;
       fetch c_EAP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EAP_unique.information2);
/*****************moved from here *******************
       open c_EAP(r_EAP_unique.table_route_id,
                r_EAP_unique.information1,
                r_EAP_unique.information2,
                r_EAP_unique.information3 ) ;
       --
       fetch c_EAP into r_EAP ;
       --
       close c_EAP ;
       --
       l_AGE_FCTR_ID := get_fk('AGE_FCTR_ID', r_EAP.INFORMATION246,l_dml_operation);

       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EAP.INFORMATION263,l_dml_operation);
***********************************************/
       if p_reuse_object_flag = 'Y' then
         if c_EAP_min_max_dates%found then
           -- cursor to find the object
           open c_find_EAP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_age_prte_id, -999)  ) ;
           fetch c_find_EAP_in_target into l_new_value ;
           if c_find_EAP_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_AGE_PRTE_F',
                   p_base_key_column => 'ELIG_AGE_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EAP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_AGE_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_AGE_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EAP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EAP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EAP_in_target ;
         --
         end if;
       end if ;
       --
       close c_EAP_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EAP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EAP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_AGE_PRTE_F CREATE_ELIG_AGE_PRTE ',20);
           BEN_ELIG_AGE_PRTE_API.CREATE_ELIG_AGE_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_AGE_FCTR_ID      => l_AGE_FCTR_ID
             ,P_EAP_ATTRIBUTE1      => r_EAP.INFORMATION111
             ,P_EAP_ATTRIBUTE10      => r_EAP.INFORMATION120
             ,P_EAP_ATTRIBUTE11      => r_EAP.INFORMATION121
             ,P_EAP_ATTRIBUTE12      => r_EAP.INFORMATION122
             ,P_EAP_ATTRIBUTE13      => r_EAP.INFORMATION123
             ,P_EAP_ATTRIBUTE14      => r_EAP.INFORMATION124
             ,P_EAP_ATTRIBUTE15      => r_EAP.INFORMATION125
             ,P_EAP_ATTRIBUTE16      => r_EAP.INFORMATION126
             ,P_EAP_ATTRIBUTE17      => r_EAP.INFORMATION127
             ,P_EAP_ATTRIBUTE18      => r_EAP.INFORMATION128
             ,P_EAP_ATTRIBUTE19      => r_EAP.INFORMATION129
             ,P_EAP_ATTRIBUTE2      => r_EAP.INFORMATION112
             ,P_EAP_ATTRIBUTE20      => r_EAP.INFORMATION130
             ,P_EAP_ATTRIBUTE21      => r_EAP.INFORMATION131
             ,P_EAP_ATTRIBUTE22      => r_EAP.INFORMATION132
             ,P_EAP_ATTRIBUTE23      => r_EAP.INFORMATION133
             ,P_EAP_ATTRIBUTE24      => r_EAP.INFORMATION134
             ,P_EAP_ATTRIBUTE25      => r_EAP.INFORMATION135
             ,P_EAP_ATTRIBUTE26      => r_EAP.INFORMATION136
             ,P_EAP_ATTRIBUTE27      => r_EAP.INFORMATION137
             ,P_EAP_ATTRIBUTE28      => r_EAP.INFORMATION138
             ,P_EAP_ATTRIBUTE29      => r_EAP.INFORMATION139
             ,P_EAP_ATTRIBUTE3      => r_EAP.INFORMATION113
             ,P_EAP_ATTRIBUTE30      => r_EAP.INFORMATION140
             ,P_EAP_ATTRIBUTE4      => r_EAP.INFORMATION114
             ,P_EAP_ATTRIBUTE5      => r_EAP.INFORMATION115
             ,P_EAP_ATTRIBUTE6      => r_EAP.INFORMATION116
             ,P_EAP_ATTRIBUTE7      => r_EAP.INFORMATION117
             ,P_EAP_ATTRIBUTE8      => r_EAP.INFORMATION118
             ,P_EAP_ATTRIBUTE9      => r_EAP.INFORMATION119
             ,P_EAP_ATTRIBUTE_CATEGORY      => r_EAP.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_AGE_PRTE_ID      => l_elig_age_prte_id
             ,P_EXCLD_FLAG      => r_EAP.INFORMATION11
             ,P_ORDR_NUM      => r_EAP.INFORMATION260
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_eap.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_eap.INFORMATION296
         );

           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_age_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_AGE_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EAP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_AGE_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EAP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_AGE_PRTE_F UPDATE_ELIG_AGE_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EAP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EAP.information3,
               p_effective_start_date  => r_EAP.information2,
               p_dml_operation         => r_EAP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_AGE_PRTE_ID   := r_EAP.information1;
             l_object_version_number := r_EAP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_AGE_PRTE_API.UPDATE_ELIG_AGE_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_AGE_FCTR_ID      => l_AGE_FCTR_ID
             ,P_EAP_ATTRIBUTE1      => r_EAP.INFORMATION111
             ,P_EAP_ATTRIBUTE10      => r_EAP.INFORMATION120
             ,P_EAP_ATTRIBUTE11      => r_EAP.INFORMATION121
             ,P_EAP_ATTRIBUTE12      => r_EAP.INFORMATION122
             ,P_EAP_ATTRIBUTE13      => r_EAP.INFORMATION123
             ,P_EAP_ATTRIBUTE14      => r_EAP.INFORMATION124
             ,P_EAP_ATTRIBUTE15      => r_EAP.INFORMATION125
             ,P_EAP_ATTRIBUTE16      => r_EAP.INFORMATION126
             ,P_EAP_ATTRIBUTE17      => r_EAP.INFORMATION127
             ,P_EAP_ATTRIBUTE18      => r_EAP.INFORMATION128
             ,P_EAP_ATTRIBUTE19      => r_EAP.INFORMATION129
             ,P_EAP_ATTRIBUTE2      => r_EAP.INFORMATION112
             ,P_EAP_ATTRIBUTE20      => r_EAP.INFORMATION130
             ,P_EAP_ATTRIBUTE21      => r_EAP.INFORMATION131
             ,P_EAP_ATTRIBUTE22      => r_EAP.INFORMATION132
             ,P_EAP_ATTRIBUTE23      => r_EAP.INFORMATION133
             ,P_EAP_ATTRIBUTE24      => r_EAP.INFORMATION134
             ,P_EAP_ATTRIBUTE25      => r_EAP.INFORMATION135
             ,P_EAP_ATTRIBUTE26      => r_EAP.INFORMATION136
             ,P_EAP_ATTRIBUTE27      => r_EAP.INFORMATION137
             ,P_EAP_ATTRIBUTE28      => r_EAP.INFORMATION138
             ,P_EAP_ATTRIBUTE29      => r_EAP.INFORMATION139
             ,P_EAP_ATTRIBUTE3      => r_EAP.INFORMATION113
             ,P_EAP_ATTRIBUTE30      => r_EAP.INFORMATION140
             ,P_EAP_ATTRIBUTE4      => r_EAP.INFORMATION114
             ,P_EAP_ATTRIBUTE5      => r_EAP.INFORMATION115
             ,P_EAP_ATTRIBUTE6      => r_EAP.INFORMATION116
             ,P_EAP_ATTRIBUTE7      => r_EAP.INFORMATION117
             ,P_EAP_ATTRIBUTE8      => r_EAP.INFORMATION118
             ,P_EAP_ATTRIBUTE9      => r_EAP.INFORMATION119
             ,P_EAP_ATTRIBUTE_CATEGORY      => r_EAP.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_AGE_PRTE_ID      => l_elig_age_prte_id
             ,P_EXCLD_FLAG      => r_EAP.INFORMATION11
             ,P_ORDR_NUM      => r_EAP.INFORMATION260
   --
   -- ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_eap.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_eap.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EAP.information3)) then
             --
             BEN_ELIG_AGE_PRTE_API.delete_ELIG_AGE_PRTE(
                --
                p_validate                       => false
                ,p_elig_age_prte_id                   => l_elig_age_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EAP',r_EAP.information5 ) ;
     --
 end create_EAP_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_EBN_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EBN_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_BENFTS_GRP_ID  number;
   l_ELIGY_PRFL_ID  number;
   cursor c_unique_EBN(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_BENFTS_GRP_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EBN_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EBN(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EBN_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EBN.elig_benfts_grp_prte_id new_value
   from BEN_ELIG_BENFTS_GRP_PRTE_F EBN
   where
   EBN.BENFTS_GRP_ID     = l_BENFTS_GRP_ID  and  -- IK
   EBN.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EBN.business_group_id  = c_business_group_id
   and   EBN.elig_benfts_grp_prte_id  <> c_new_pk_id
 --TEMPIK
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_BENFTS_GRP_PRTE_F EBN1
                where
                EBN1.BENFTS_GRP_ID     = l_BENFTS_GRP_ID  and  -- IK
                EBN1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EBN1.business_group_id  = c_business_group_id
                and   EBN1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_BENFTS_GRP_PRTE_F EBN2
                where
                EBN2.BENFTS_GRP_ID     = l_BENFTS_GRP_ID  and  -- IK
                EBN2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EBN2.business_group_id  = c_business_group_id
                and   EBN2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EBN                     c_EBN%rowtype;
   l_elig_benfts_grp_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EBN_unique in c_unique_EBN('EBN') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EBN_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EBN_unique.table_route_id '||r_EBN_unique.table_route_id,10);
       hr_utility.set_location(' r_EBN_unique.information1 '||r_EBN_unique.information1,10);
       hr_utility.set_location( 'r_EBN_unique.information2 '||r_EBN_unique.information2,10);
       hr_utility.set_location( 'r_EBN_unique.information3 '||r_EBN_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EBN_unique.dml_operation ;
/*********************moved from below *** *****/
       open c_EBN(r_EBN_unique.table_route_id,
                r_EBN_unique.information1,
                r_EBN_unique.information2,
                r_EBN_unique.information3 ) ;
       --
       fetch c_EBN into r_EBN ;
       --
       close c_EBN ;
       --
       l_BENFTS_GRP_ID := get_fk('BENFTS_GRP_ID', r_EBN.INFORMATION222,l_dml_operation);

       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EBN.INFORMATION263,l_dml_operation);
/*******************************************/
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EBN_unique.information2 and r_EBN_unique.information3 then
               l_update := true;
               if r_EBN_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_BENFTS_GRP_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_BENFTS_GRP_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EBN_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EBN_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EBN_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- -- log_data('EBN',l_new_value,l_prefix || r_EBN_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EBN_min_max_dates(r_EBN_unique.table_route_id, r_EBN_unique.information1 ) ;
       fetch c_EBN_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EBN_unique.information2);
/*********************moved from here *** please see above   *****
       open c_EBN(r_EBN_unique.table_route_id,
                r_EBN_unique.information1,
                r_EBN_unique.information2,
                r_EBN_unique.information3 ) ;
       --
       fetch c_EBN into r_EBN ;
       --
       close c_EBN ;
       --
       l_BENFTS_GRP_ID := get_fk('BENFTS_GRP_ID', r_EBN.INFORMATION222,l_dml_operation);

       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EBN.INFORMATION263,l_dml_operation);
 *******************************************/
       if p_reuse_object_flag = 'Y' then
         if c_EBN_min_max_dates%found then
           -- cursor to find the object
           open c_find_EBN_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_benfts_grp_prte_id, -999)  ) ;
           fetch c_find_EBN_in_target into l_new_value ;
           if c_find_EBN_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_BENFTS_GRP_PRTE_F',
                   p_base_key_column => 'ELIG_BENFTS_GRP_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EBN_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_BENFTS_GRP_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_BENFTS_GRP_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EBN_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EBN_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EBN_in_target ;
         --
         end if;
       end if ;
       --
       close c_EBN_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EBN.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EBN.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_BENFTS_GRP_PRTE_F CREATE_ELIG_BENFTS_GRP_PRTE ',20);
           BEN_ELIG_BENFTS_GRP_PRTE_API.CREATE_ELIG_BENFTS_GRP_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_BENFTS_GRP_ID      => l_BENFTS_GRP_ID
             ,P_EBN_ATTRIBUTE1      => r_EBN.INFORMATION111
             ,P_EBN_ATTRIBUTE10      => r_EBN.INFORMATION120
             ,P_EBN_ATTRIBUTE11      => r_EBN.INFORMATION121
             ,P_EBN_ATTRIBUTE12      => r_EBN.INFORMATION122
             ,P_EBN_ATTRIBUTE13      => r_EBN.INFORMATION123
             ,P_EBN_ATTRIBUTE14      => r_EBN.INFORMATION124
             ,P_EBN_ATTRIBUTE15      => r_EBN.INFORMATION125
             ,P_EBN_ATTRIBUTE16      => r_EBN.INFORMATION126
             ,P_EBN_ATTRIBUTE17      => r_EBN.INFORMATION127
             ,P_EBN_ATTRIBUTE18      => r_EBN.INFORMATION128
             ,P_EBN_ATTRIBUTE19      => r_EBN.INFORMATION129
             ,P_EBN_ATTRIBUTE2      => r_EBN.INFORMATION112
             ,P_EBN_ATTRIBUTE20      => r_EBN.INFORMATION130
             ,P_EBN_ATTRIBUTE21      => r_EBN.INFORMATION131
             ,P_EBN_ATTRIBUTE22      => r_EBN.INFORMATION132
             ,P_EBN_ATTRIBUTE23      => r_EBN.INFORMATION133
             ,P_EBN_ATTRIBUTE24      => r_EBN.INFORMATION134
             ,P_EBN_ATTRIBUTE25      => r_EBN.INFORMATION135
             ,P_EBN_ATTRIBUTE26      => r_EBN.INFORMATION136
             ,P_EBN_ATTRIBUTE27      => r_EBN.INFORMATION137
             ,P_EBN_ATTRIBUTE28      => r_EBN.INFORMATION138
             ,P_EBN_ATTRIBUTE29      => r_EBN.INFORMATION139
             ,P_EBN_ATTRIBUTE3      => r_EBN.INFORMATION113
             ,P_EBN_ATTRIBUTE30      => r_EBN.INFORMATION140
             ,P_EBN_ATTRIBUTE4      => r_EBN.INFORMATION114
             ,P_EBN_ATTRIBUTE5      => r_EBN.INFORMATION115
             ,P_EBN_ATTRIBUTE6      => r_EBN.INFORMATION116
             ,P_EBN_ATTRIBUTE7      => r_EBN.INFORMATION117
             ,P_EBN_ATTRIBUTE8      => r_EBN.INFORMATION118
             ,P_EBN_ATTRIBUTE9      => r_EBN.INFORMATION119
             ,P_EBN_ATTRIBUTE_CATEGORY      => r_EBN.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_BENFTS_GRP_PRTE_ID      => l_elig_benfts_grp_prte_id
             ,P_EXCLD_FLAG      => r_EBN.INFORMATION11
             ,P_ORDR_NUM      => r_EBN.INFORMATION260
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE      => r_ebn.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_ebn.INFORMATION296
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_benfts_grp_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_BENFTS_GRP_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EBN.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_BENFTS_GRP_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EBN_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_BENFTS_GRP_PRTE_F UPDATE_ELIG_BENFTS_GRP_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EBN.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EBN.information3,
               p_effective_start_date  => r_EBN.information2,
               p_dml_operation         => r_EBN.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_BENFTS_GRP_PRTE_ID   := r_EBN.information1;
             l_object_version_number := r_EBN.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_BENFTS_GRP_PRTE_API.UPDATE_ELIG_BENFTS_GRP_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_BENFTS_GRP_ID      => l_BENFTS_GRP_ID
             ,P_EBN_ATTRIBUTE1      => r_EBN.INFORMATION111
             ,P_EBN_ATTRIBUTE10      => r_EBN.INFORMATION120
             ,P_EBN_ATTRIBUTE11      => r_EBN.INFORMATION121
             ,P_EBN_ATTRIBUTE12      => r_EBN.INFORMATION122
             ,P_EBN_ATTRIBUTE13      => r_EBN.INFORMATION123
             ,P_EBN_ATTRIBUTE14      => r_EBN.INFORMATION124
             ,P_EBN_ATTRIBUTE15      => r_EBN.INFORMATION125
             ,P_EBN_ATTRIBUTE16      => r_EBN.INFORMATION126
             ,P_EBN_ATTRIBUTE17      => r_EBN.INFORMATION127
             ,P_EBN_ATTRIBUTE18      => r_EBN.INFORMATION128
             ,P_EBN_ATTRIBUTE19      => r_EBN.INFORMATION129
             ,P_EBN_ATTRIBUTE2      => r_EBN.INFORMATION112
             ,P_EBN_ATTRIBUTE20      => r_EBN.INFORMATION130
             ,P_EBN_ATTRIBUTE21      => r_EBN.INFORMATION131
             ,P_EBN_ATTRIBUTE22      => r_EBN.INFORMATION132
             ,P_EBN_ATTRIBUTE23      => r_EBN.INFORMATION133
             ,P_EBN_ATTRIBUTE24      => r_EBN.INFORMATION134
             ,P_EBN_ATTRIBUTE25      => r_EBN.INFORMATION135
             ,P_EBN_ATTRIBUTE26      => r_EBN.INFORMATION136
             ,P_EBN_ATTRIBUTE27      => r_EBN.INFORMATION137
             ,P_EBN_ATTRIBUTE28      => r_EBN.INFORMATION138
             ,P_EBN_ATTRIBUTE29      => r_EBN.INFORMATION139
             ,P_EBN_ATTRIBUTE3      => r_EBN.INFORMATION113
             ,P_EBN_ATTRIBUTE30      => r_EBN.INFORMATION140
             ,P_EBN_ATTRIBUTE4      => r_EBN.INFORMATION114
             ,P_EBN_ATTRIBUTE5      => r_EBN.INFORMATION115
             ,P_EBN_ATTRIBUTE6      => r_EBN.INFORMATION116
             ,P_EBN_ATTRIBUTE7      => r_EBN.INFORMATION117
             ,P_EBN_ATTRIBUTE8      => r_EBN.INFORMATION118
             ,P_EBN_ATTRIBUTE9      => r_EBN.INFORMATION119
             ,P_EBN_ATTRIBUTE_CATEGORY      => r_EBN.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_BENFTS_GRP_PRTE_ID      => l_elig_benfts_grp_prte_id
             ,P_EXCLD_FLAG      => r_EBN.INFORMATION11
             ,P_ORDR_NUM      => r_EBN.INFORMATION260
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE      => r_ebn.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_ebn.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EBN.information3)) then
             --
             BEN_ELIG_BENFTS_GRP_PRTE_API.delete_ELIG_BENFTS_GRP_PRTE(
                --
                p_validate                       => false
                ,p_elig_benfts_grp_prte_id                   => l_elig_benfts_grp_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EBN',r_EBN.information5 ) ;
     --
 end create_EBN_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_EBU_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EBU_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_BRGNG_UNIT_CD  varchar2(30) ;
   --
   cursor c_unique_EBU(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_BRGNG_UNIT_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EBU_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EBU(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EBU_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EBU.elig_brgng_unit_prte_id new_value
   from BEN_ELIG_BRGNG_UNIT_PRTE_F EBU
   where
   EBU.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EBU.BRGNG_UNIT_CD     = l_BRGNG_UNIT_CD and   -- IK
   EBU.business_group_id  = c_business_group_id
   and   EBU.elig_brgng_unit_prte_id  <> c_new_pk_id
 --TEMPIK
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_BRGNG_UNIT_PRTE_F EBU1
                where
                EBU1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EBU1.BRGNG_UNIT_CD     = l_BRGNG_UNIT_CD  and  -- IK
                EBU1.business_group_id  = c_business_group_id
                and   EBU1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_BRGNG_UNIT_PRTE_F EBU2
                where
                EBU2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EBU2.BRGNG_UNIT_CD     = l_BRGNG_UNIT_CD  and  -- IK
                EBU2.business_group_id  = c_business_group_id
                and   EBU2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EBU                     c_EBU%rowtype;
   l_elig_brgng_unit_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EBU_unique in c_unique_EBU('EBU') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EBU_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EBU_unique.table_route_id '||r_EBU_unique.table_route_id,10);
       hr_utility.set_location(' r_EBU_unique.information1 '||r_EBU_unique.information1,10);
       hr_utility.set_location( 'r_EBU_unique.information2 '||r_EBU_unique.information2,10);
       hr_utility.set_location( 'r_EBU_unique.information3 '||r_EBU_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EBU_unique.dml_operation ;
       --

/**********************moved from below ********************/
       open c_EBU(r_EBU_unique.table_route_id,
                r_EBU_unique.information1,
                r_EBU_unique.information2,
                r_EBU_unique.information3 ) ;
       --
       fetch c_EBU into r_EBU ;
       --
       close c_EBU ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EBU.INFORMATION263,l_dml_operation);
       l_BRGNG_UNIT_CD  :=   r_EBU.information11 ;

/***********************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EBU_unique.information2 and r_EBU_unique.information3 then
               l_update := true;
               if r_EBU_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_BRGNG_UNIT_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_BRGNG_UNIT_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EBU_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EBU_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EBU_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- -- log_data('EBU',l_new_value,l_prefix || r_EBU_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EBU_min_max_dates(r_EBU_unique.table_route_id, r_EBU_unique.information1 ) ;
       fetch c_EBU_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EBU_unique.information2);
/**********************moved above ********************
       open c_EBU(r_EBU_unique.table_route_id,
                r_EBU_unique.information1,
                r_EBU_unique.information2,
                r_EBU_unique.information3 ) ;
       --
       fetch c_EBU into r_EBU ;
       --
       close c_EBU ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EBU.INFORMATION263,l_dml_operation);
       l_BRGNG_UNIT_CD  :=   r_EBU.information11 ;

***********************************************/
       if p_reuse_object_flag = 'Y' then
         if c_EBU_min_max_dates%found then
           -- cursor to find the object
           open c_find_EBU_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_brgng_unit_prte_id, -999)  ) ;
           fetch c_find_EBU_in_target into l_new_value ;
           if c_find_EBU_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_BRGNG_UNIT_PRTE_F',
                   p_base_key_column => 'ELIG_BRGNG_UNIT_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EBU_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_BRGNG_UNIT_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_BRGNG_UNIT_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EBU_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EBU_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EBU_in_target ;
         --
         end if;
       end if ;
       --
       close c_EBU_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EBU.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EBU.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_BRGNG_UNIT_PRTE_F CREATE_ELIG_BRGNG_UNIT_PRTE ',20);
           BEN_ELIG_BRGNG_UNIT_PRTE_API.CREATE_ELIG_BRGNG_UNIT_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_BRGNG_UNIT_CD      => r_EBU.INFORMATION11
             ,P_EBU_ATTRIBUTE1      => r_EBU.INFORMATION111
             ,P_EBU_ATTRIBUTE10      => r_EBU.INFORMATION120
             ,P_EBU_ATTRIBUTE11      => r_EBU.INFORMATION121
             ,P_EBU_ATTRIBUTE12      => r_EBU.INFORMATION122
             ,P_EBU_ATTRIBUTE13      => r_EBU.INFORMATION123
             ,P_EBU_ATTRIBUTE14      => r_EBU.INFORMATION124
             ,P_EBU_ATTRIBUTE15      => r_EBU.INFORMATION125
             ,P_EBU_ATTRIBUTE16      => r_EBU.INFORMATION126
             ,P_EBU_ATTRIBUTE17      => r_EBU.INFORMATION127
             ,P_EBU_ATTRIBUTE18      => r_EBU.INFORMATION128
             ,P_EBU_ATTRIBUTE19      => r_EBU.INFORMATION129
             ,P_EBU_ATTRIBUTE2      => r_EBU.INFORMATION112
             ,P_EBU_ATTRIBUTE20      => r_EBU.INFORMATION130
             ,P_EBU_ATTRIBUTE21      => r_EBU.INFORMATION131
             ,P_EBU_ATTRIBUTE22      => r_EBU.INFORMATION132
             ,P_EBU_ATTRIBUTE23      => r_EBU.INFORMATION133
             ,P_EBU_ATTRIBUTE24      => r_EBU.INFORMATION134
             ,P_EBU_ATTRIBUTE25      => r_EBU.INFORMATION135
             ,P_EBU_ATTRIBUTE26      => r_EBU.INFORMATION136
             ,P_EBU_ATTRIBUTE27      => r_EBU.INFORMATION137
             ,P_EBU_ATTRIBUTE28      => r_EBU.INFORMATION138
             ,P_EBU_ATTRIBUTE29      => r_EBU.INFORMATION139
             ,P_EBU_ATTRIBUTE3      => r_EBU.INFORMATION113
             ,P_EBU_ATTRIBUTE30      => r_EBU.INFORMATION140
             ,P_EBU_ATTRIBUTE4      => r_EBU.INFORMATION114
             ,P_EBU_ATTRIBUTE5      => r_EBU.INFORMATION115
             ,P_EBU_ATTRIBUTE6      => r_EBU.INFORMATION116
             ,P_EBU_ATTRIBUTE7      => r_EBU.INFORMATION117
             ,P_EBU_ATTRIBUTE8      => r_EBU.INFORMATION118
             ,P_EBU_ATTRIBUTE9      => r_EBU.INFORMATION119
             ,P_EBU_ATTRIBUTE_CATEGORY      => r_EBU.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_BRGNG_UNIT_PRTE_ID      => l_elig_brgng_unit_prte_id
             ,P_EXCLD_FLAG      => r_EBU.INFORMATION12
             ,P_ORDR_NUM      => r_EBU.INFORMATION260
             --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE      => r_ebu.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_ebu.INFORMATION296
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_brgng_unit_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_BRGNG_UNIT_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EBU.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_BRGNG_UNIT_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EBU_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_BRGNG_UNIT_PRTE_F UPDATE_ELIG_BRGNG_UNIT_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EBU.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EBU.information3,
               p_effective_start_date  => r_EBU.information2,
               p_dml_operation         => r_EBU.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_BRGNG_UNIT_PRTE_ID   := r_EBU.information1;
             l_object_version_number := r_EBU.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_BRGNG_UNIT_PRTE_API.UPDATE_ELIG_BRGNG_UNIT_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_BRGNG_UNIT_CD      => r_EBU.INFORMATION11
             ,P_EBU_ATTRIBUTE1      => r_EBU.INFORMATION111
             ,P_EBU_ATTRIBUTE10      => r_EBU.INFORMATION120
             ,P_EBU_ATTRIBUTE11      => r_EBU.INFORMATION121
             ,P_EBU_ATTRIBUTE12      => r_EBU.INFORMATION122
             ,P_EBU_ATTRIBUTE13      => r_EBU.INFORMATION123
             ,P_EBU_ATTRIBUTE14      => r_EBU.INFORMATION124
             ,P_EBU_ATTRIBUTE15      => r_EBU.INFORMATION125
             ,P_EBU_ATTRIBUTE16      => r_EBU.INFORMATION126
             ,P_EBU_ATTRIBUTE17      => r_EBU.INFORMATION127
             ,P_EBU_ATTRIBUTE18      => r_EBU.INFORMATION128
             ,P_EBU_ATTRIBUTE19      => r_EBU.INFORMATION129
             ,P_EBU_ATTRIBUTE2      => r_EBU.INFORMATION112
             ,P_EBU_ATTRIBUTE20      => r_EBU.INFORMATION130
             ,P_EBU_ATTRIBUTE21      => r_EBU.INFORMATION131
             ,P_EBU_ATTRIBUTE22      => r_EBU.INFORMATION132
             ,P_EBU_ATTRIBUTE23      => r_EBU.INFORMATION133
             ,P_EBU_ATTRIBUTE24      => r_EBU.INFORMATION134
             ,P_EBU_ATTRIBUTE25      => r_EBU.INFORMATION135
             ,P_EBU_ATTRIBUTE26      => r_EBU.INFORMATION136
             ,P_EBU_ATTRIBUTE27      => r_EBU.INFORMATION137
             ,P_EBU_ATTRIBUTE28      => r_EBU.INFORMATION138
             ,P_EBU_ATTRIBUTE29      => r_EBU.INFORMATION139
             ,P_EBU_ATTRIBUTE3      => r_EBU.INFORMATION113
             ,P_EBU_ATTRIBUTE30      => r_EBU.INFORMATION140
             ,P_EBU_ATTRIBUTE4      => r_EBU.INFORMATION114
             ,P_EBU_ATTRIBUTE5      => r_EBU.INFORMATION115
             ,P_EBU_ATTRIBUTE6      => r_EBU.INFORMATION116
             ,P_EBU_ATTRIBUTE7      => r_EBU.INFORMATION117
             ,P_EBU_ATTRIBUTE8      => r_EBU.INFORMATION118
             ,P_EBU_ATTRIBUTE9      => r_EBU.INFORMATION119
             ,P_EBU_ATTRIBUTE_CATEGORY      => r_EBU.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_BRGNG_UNIT_PRTE_ID      => l_elig_brgng_unit_prte_id
             ,P_EXCLD_FLAG      => r_EBU.INFORMATION12
             ,P_ORDR_NUM      => r_EBU.INFORMATION260
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE      => r_ebu.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_ebu.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EBU.information3)) then
             --
             BEN_ELIG_BRGNG_UNIT_PRTE_API.delete_ELIG_BRGNG_UNIT_PRTE(
                --
                p_validate                       => false
                ,p_elig_brgng_unit_prte_id                   => l_elig_brgng_unit_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EBU',r_EBU.information5 ) ;
     --
 end create_EBU_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_ECL_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ECL_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_COMP_LVL_FCTR_ID  number;
   l_ELIGY_PRFL_ID  number;
   cursor c_unique_ECL(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_COMP_LVL_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ECL_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ECL(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ECL_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ECL.elig_comp_lvl_prte_id new_value
   from BEN_ELIG_COMP_LVL_PRTE_F ECL
   where
   ECL.COMP_LVL_FCTR_ID     = l_COMP_LVL_FCTR_ID  and  -- IK removed nvl for all
   ECL.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   ECL.business_group_id  = c_business_group_id
   and   ECL.elig_comp_lvl_prte_id  <> c_new_pk_id
 --TEMPIK
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_COMP_LVL_PRTE_F ECL1
                where
                ECL1.COMP_LVL_FCTR_ID     = l_COMP_LVL_FCTR_ID  and
                ECL1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                ECL1.business_group_id  = c_business_group_id
                and   ECL1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_COMP_LVL_PRTE_F ECL2
                where
                ECL2.COMP_LVL_FCTR_ID     = l_COMP_LVL_FCTR_ID  and
                ECL2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                ECL2.business_group_id  = c_business_group_id
                and   ECL2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ECL                     c_ECL%rowtype;
   l_elig_comp_lvl_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ECL_unique in c_unique_ECL('ECL') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ECL_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_ECL_unique.table_route_id '||r_ECL_unique.table_route_id,10);
       hr_utility.set_location(' r_ECL_unique.information1 '||r_ECL_unique.information1,10);
       hr_utility.set_location( 'r_ECL_unique.information2 '||r_ECL_unique.information2,10);
       hr_utility.set_location( 'r_ECL_unique.information3 '||r_ECL_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ECL_unique.dml_operation ;
       --
/*************************moved from below ***************************/
       open c_ECL(r_ECL_unique.table_route_id,
                r_ECL_unique.information1,
                r_ECL_unique.information2,
                r_ECL_unique.information3 ) ;
       --
       fetch c_ECL into r_ECL ;
       --
       close c_ECL ;
       --
       l_COMP_LVL_FCTR_ID := get_fk('COMP_LVL_FCTR_ID', r_ECL.INFORMATION254,l_dml_operation);
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ECL.INFORMATION263,l_dml_operation);

/********************************************/
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ECL_unique.information2 and r_ECL_unique.information3 then
               l_update := true;
               if r_ECL_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_COMP_LVL_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_COMP_LVL_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ECL_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ECL_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ECL_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- -- log_data('ECL',l_new_value,l_prefix || r_ECL_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ECL_min_max_dates(r_ECL_unique.table_route_id, r_ECL_unique.information1 ) ;
       fetch c_ECL_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ECL_unique.information2);
/*************************moved above ***************************
       open c_ECL(r_ECL_unique.table_route_id,
                r_ECL_unique.information1,
                r_ECL_unique.information2,
                r_ECL_unique.information3 ) ;
       --
       fetch c_ECL into r_ECL ;
       --
       close c_ECL ;
       --
       l_COMP_LVL_FCTR_ID := get_fk('COMP_LVL_FCTR_ID', r_ECL.INFORMATION254,l_dml_operation);
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ECL.INFORMATION263,l_dml_operation);

********************************************/
       if p_reuse_object_flag = 'Y' then
         if c_ECL_min_max_dates%found then
           -- cursor to find the object
           open c_find_ECL_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_comp_lvl_prte_id, -999)  ) ;
           fetch c_find_ECL_in_target into l_new_value ;
           if c_find_ECL_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_COMP_LVL_PRTE_F',
                   p_base_key_column => 'ELIG_COMP_LVL_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_ECL_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_COMP_LVL_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_COMP_LVL_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ECL_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ECL_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_ECL_in_target ;
         --
         end if;
       end if ;
       --
       close c_ECL_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_ECL.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_ECL.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_COMP_LVL_PRTE_F CREATE_ELIG_COMP_LVL_PRTE ',20);
           BEN_ELIG_COMP_LVL_PRTE_API.CREATE_ELIG_COMP_LVL_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_COMP_LVL_FCTR_ID      => l_COMP_LVL_FCTR_ID
             ,P_ECL_ATTRIBUTE1      => r_ECL.INFORMATION111
             ,P_ECL_ATTRIBUTE10      => r_ECL.INFORMATION120
             ,P_ECL_ATTRIBUTE11      => r_ECL.INFORMATION121
             ,P_ECL_ATTRIBUTE12      => r_ECL.INFORMATION122
             ,P_ECL_ATTRIBUTE13      => r_ECL.INFORMATION123
             ,P_ECL_ATTRIBUTE14      => r_ECL.INFORMATION124
             ,P_ECL_ATTRIBUTE15      => r_ECL.INFORMATION125
             ,P_ECL_ATTRIBUTE16      => r_ECL.INFORMATION126
             ,P_ECL_ATTRIBUTE17      => r_ECL.INFORMATION127
             ,P_ECL_ATTRIBUTE18      => r_ECL.INFORMATION128
             ,P_ECL_ATTRIBUTE19      => r_ECL.INFORMATION129
             ,P_ECL_ATTRIBUTE2      => r_ECL.INFORMATION112
             ,P_ECL_ATTRIBUTE20      => r_ECL.INFORMATION130
             ,P_ECL_ATTRIBUTE21      => r_ECL.INFORMATION131
             ,P_ECL_ATTRIBUTE22      => r_ECL.INFORMATION132
             ,P_ECL_ATTRIBUTE23      => r_ECL.INFORMATION133
             ,P_ECL_ATTRIBUTE24      => r_ECL.INFORMATION134
             ,P_ECL_ATTRIBUTE25      => r_ECL.INFORMATION135
             ,P_ECL_ATTRIBUTE26      => r_ECL.INFORMATION136
             ,P_ECL_ATTRIBUTE27      => r_ECL.INFORMATION137
             ,P_ECL_ATTRIBUTE28      => r_ECL.INFORMATION138
             ,P_ECL_ATTRIBUTE29      => r_ECL.INFORMATION139
             ,P_ECL_ATTRIBUTE3      => r_ECL.INFORMATION113
             ,P_ECL_ATTRIBUTE30      => r_ECL.INFORMATION140
             ,P_ECL_ATTRIBUTE4      => r_ECL.INFORMATION114
             ,P_ECL_ATTRIBUTE5      => r_ECL.INFORMATION115
             ,P_ECL_ATTRIBUTE6      => r_ECL.INFORMATION116
             ,P_ECL_ATTRIBUTE7      => r_ECL.INFORMATION117
             ,P_ECL_ATTRIBUTE8      => r_ECL.INFORMATION118
             ,P_ECL_ATTRIBUTE9      => r_ECL.INFORMATION119
             ,P_ECL_ATTRIBUTE_CATEGORY      => r_ECL.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_COMP_LVL_PRTE_ID      => l_elig_comp_lvl_prte_id
             ,P_EXCLD_FLAG      => r_ECL.INFORMATION11
             ,P_ORDR_NUM      => r_ECL.INFORMATION260
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE      => r_ecl.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_ecl.INFORMATION296
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_comp_lvl_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_COMP_LVL_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ECL.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_COMP_LVL_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ECL_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_COMP_LVL_PRTE_F UPDATE_ELIG_COMP_LVL_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ECL.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ECL.information3,
               p_effective_start_date  => r_ECL.information2,
               p_dml_operation         => r_ECL.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_COMP_LVL_PRTE_ID   := r_ECL.information1;
             l_object_version_number := r_ECL.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_COMP_LVL_PRTE_API.UPDATE_ELIG_COMP_LVL_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_COMP_LVL_FCTR_ID      => l_COMP_LVL_FCTR_ID
             ,P_ECL_ATTRIBUTE1      => r_ECL.INFORMATION111
             ,P_ECL_ATTRIBUTE10      => r_ECL.INFORMATION120
             ,P_ECL_ATTRIBUTE11      => r_ECL.INFORMATION121
             ,P_ECL_ATTRIBUTE12      => r_ECL.INFORMATION122
             ,P_ECL_ATTRIBUTE13      => r_ECL.INFORMATION123
             ,P_ECL_ATTRIBUTE14      => r_ECL.INFORMATION124
             ,P_ECL_ATTRIBUTE15      => r_ECL.INFORMATION125
             ,P_ECL_ATTRIBUTE16      => r_ECL.INFORMATION126
             ,P_ECL_ATTRIBUTE17      => r_ECL.INFORMATION127
             ,P_ECL_ATTRIBUTE18      => r_ECL.INFORMATION128
             ,P_ECL_ATTRIBUTE19      => r_ECL.INFORMATION129
             ,P_ECL_ATTRIBUTE2      => r_ECL.INFORMATION112
             ,P_ECL_ATTRIBUTE20      => r_ECL.INFORMATION130
             ,P_ECL_ATTRIBUTE21      => r_ECL.INFORMATION131
             ,P_ECL_ATTRIBUTE22      => r_ECL.INFORMATION132
             ,P_ECL_ATTRIBUTE23      => r_ECL.INFORMATION133
             ,P_ECL_ATTRIBUTE24      => r_ECL.INFORMATION134
             ,P_ECL_ATTRIBUTE25      => r_ECL.INFORMATION135
             ,P_ECL_ATTRIBUTE26      => r_ECL.INFORMATION136
             ,P_ECL_ATTRIBUTE27      => r_ECL.INFORMATION137
             ,P_ECL_ATTRIBUTE28      => r_ECL.INFORMATION138
             ,P_ECL_ATTRIBUTE29      => r_ECL.INFORMATION139
             ,P_ECL_ATTRIBUTE3      => r_ECL.INFORMATION113
             ,P_ECL_ATTRIBUTE30      => r_ECL.INFORMATION140
             ,P_ECL_ATTRIBUTE4      => r_ECL.INFORMATION114
             ,P_ECL_ATTRIBUTE5      => r_ECL.INFORMATION115
             ,P_ECL_ATTRIBUTE6      => r_ECL.INFORMATION116
             ,P_ECL_ATTRIBUTE7      => r_ECL.INFORMATION117
             ,P_ECL_ATTRIBUTE8      => r_ECL.INFORMATION118
             ,P_ECL_ATTRIBUTE9      => r_ECL.INFORMATION119
             ,P_ECL_ATTRIBUTE_CATEGORY      => r_ECL.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_COMP_LVL_PRTE_ID      => l_elig_comp_lvl_prte_id
             ,P_EXCLD_FLAG      => r_ECL.INFORMATION11
             ,P_ORDR_NUM      => r_ECL.INFORMATION260
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_ecl.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_ecl.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_ECL.information3)) then
             --
             BEN_ELIG_COMP_LVL_PRTE_API.delete_ELIG_COMP_LVL_PRTE(
                --
                p_validate                       => false
                ,p_elig_comp_lvl_prte_id                   => l_elig_comp_lvl_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ECL',r_ECL.information5 ) ;
     --
 end create_ECL_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_ECP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ECP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_CMBN_AGE_LOS_FCTR_ID  number;
   l_ELIGY_PRFL_ID  number;
   cursor c_unique_ECP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_CMBN_AGE_LOS_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ECP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ECP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ECP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ECP.elig_cmbn_age_los_prte_id new_value
   from BEN_ELIG_CMBN_AGE_LOS_PRTE_F ECP
   where
   ECP.CMBN_AGE_LOS_FCTR_ID    = l_CMBN_AGE_LOS_FCTR_ID  and  -- IK removed nvl
   ECP.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   ECP.business_group_id  = c_business_group_id
   and   ECP.elig_cmbn_age_los_prte_id  <> c_new_pk_id
 --TEMPIK
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_CMBN_AGE_LOS_PRTE_F ECP1
                where
                ECP1.CMBN_AGE_LOS_FCTR_ID     = l_CMBN_AGE_LOS_FCTR_ID  and
                ECP1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                ECP1.business_group_id  = c_business_group_id
                and   ECP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_CMBN_AGE_LOS_PRTE_F ECP2
                where
                ECP2.CMBN_AGE_LOS_FCTR_ID     = l_CMBN_AGE_LOS_FCTR_ID  and
                ECP2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                ECP2.business_group_id  = c_business_group_id
                and   ECP2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ECP                     c_ECP%rowtype;
   l_elig_cmbn_age_los_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ECP_unique in c_unique_ECP('ECP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ECP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_ECP_unique.table_route_id '||r_ECP_unique.table_route_id,10);
       hr_utility.set_location(' r_ECP_unique.information1 '||r_ECP_unique.information1,10);
       hr_utility.set_location( 'r_ECP_unique.information2 '||r_ECP_unique.information2,10);
       hr_utility.set_location( 'r_ECP_unique.information3 '||r_ECP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ECP_unique.dml_operation ;
       --

/**********************moved from below ***************************/
       open c_ECP(r_ECP_unique.table_route_id,
                r_ECP_unique.information1,
                r_ECP_unique.information2,
                r_ECP_unique.information3 ) ;
       --
       fetch c_ECP into r_ECP ;
       --
       close c_ECP ;
       --
       l_CMBN_AGE_LOS_FCTR_ID := get_fk('CMBN_AGE_LOS_FCTR_ID', r_ECP.INFORMATION223,l_dml_operation);
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ECP.INFORMATION263,l_dml_operation);

/*****************************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ECP_unique.information2 and r_ECP_unique.information3 then
               l_update := true;
               if r_ECP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_CMBN_AGE_LOS_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_CMBN_AGE_LOS_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ECP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ECP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ECP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- -- log_data('ECP',l_new_value,l_prefix || r_ECP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ECP_min_max_dates(r_ECP_unique.table_route_id, r_ECP_unique.information1 ) ;
       fetch c_ECP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ECP_unique.information2);

/**********************moved above ***************************
       open c_ECP(r_ECP_unique.table_route_id,
                r_ECP_unique.information1,
                r_ECP_unique.information2,
                r_ECP_unique.information3 ) ;
       --
       fetch c_ECP into r_ECP ;
       --
       close c_ECP ;
       --
       l_CMBN_AGE_LOS_FCTR_ID := get_fk('CMBN_AGE_LOS_FCTR_ID', r_ECP.INFORMATION223,l_dml_operation);
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ECP.INFORMATION263,l_dml_operation);

*****************************************************************/
       if p_reuse_object_flag = 'Y' then
         if c_ECP_min_max_dates%found then
           -- cursor to find the object
           open c_find_ECP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_cmbn_age_los_prte_id, -999)  ) ;
           fetch c_find_ECP_in_target into l_new_value ;
           if c_find_ECP_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_CMBN_AGE_LOS_PRTE_F',
                   p_base_key_column => 'ELIG_CMBN_AGE_LOS_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_ECP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_CMBN_AGE_LOS_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_CMBN_AGE_LOS_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ECP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ECP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_ECP_in_target ;
         --
         end if;
       end if ;
       --
       close c_ECP_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_ECP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_ECP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_CMBN_AGE_LOS_PRTE_F CREATE_ELIG_CMBN_AGE_LOS ',20);
           BEN_ELIG_CMBN_AGE_LOS_API.CREATE_ELIG_CMBN_AGE_LOS(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CMBN_AGE_LOS_FCTR_ID      => l_CMBN_AGE_LOS_FCTR_ID
             ,P_ECP_ATTRIBUTE1      => r_ECP.INFORMATION111
             ,P_ECP_ATTRIBUTE10      => r_ECP.INFORMATION120
             ,P_ECP_ATTRIBUTE11      => r_ECP.INFORMATION121
             ,P_ECP_ATTRIBUTE12      => r_ECP.INFORMATION122
             ,P_ECP_ATTRIBUTE13      => r_ECP.INFORMATION123
             ,P_ECP_ATTRIBUTE14      => r_ECP.INFORMATION124
             ,P_ECP_ATTRIBUTE15      => r_ECP.INFORMATION125
             ,P_ECP_ATTRIBUTE16      => r_ECP.INFORMATION126
             ,P_ECP_ATTRIBUTE17      => r_ECP.INFORMATION127
             ,P_ECP_ATTRIBUTE18      => r_ECP.INFORMATION128
             ,P_ECP_ATTRIBUTE19      => r_ECP.INFORMATION129
             ,P_ECP_ATTRIBUTE2      => r_ECP.INFORMATION112
             ,P_ECP_ATTRIBUTE20      => r_ECP.INFORMATION130
             ,P_ECP_ATTRIBUTE21      => r_ECP.INFORMATION131
             ,P_ECP_ATTRIBUTE22      => r_ECP.INFORMATION132
             ,P_ECP_ATTRIBUTE23      => r_ECP.INFORMATION133
             ,P_ECP_ATTRIBUTE24      => r_ECP.INFORMATION134
             ,P_ECP_ATTRIBUTE25      => r_ECP.INFORMATION135
             ,P_ECP_ATTRIBUTE26      => r_ECP.INFORMATION136
             ,P_ECP_ATTRIBUTE27      => r_ECP.INFORMATION137
             ,P_ECP_ATTRIBUTE28      => r_ECP.INFORMATION138
             ,P_ECP_ATTRIBUTE29      => r_ECP.INFORMATION139
             ,P_ECP_ATTRIBUTE3      => r_ECP.INFORMATION113
             ,P_ECP_ATTRIBUTE30      => r_ECP.INFORMATION140
             ,P_ECP_ATTRIBUTE4      => r_ECP.INFORMATION114
             ,P_ECP_ATTRIBUTE5      => r_ECP.INFORMATION115
             ,P_ECP_ATTRIBUTE6      => r_ECP.INFORMATION116
             ,P_ECP_ATTRIBUTE7      => r_ECP.INFORMATION117
             ,P_ECP_ATTRIBUTE8      => r_ECP.INFORMATION118
             ,P_ECP_ATTRIBUTE9      => r_ECP.INFORMATION119
             ,P_ECP_ATTRIBUTE_CATEGORY      => r_ECP.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_CMBN_AGE_LOS_PRTE_ID      => l_elig_cmbn_age_los_prte_id
             ,P_EXCLD_FLAG      => r_ECP.INFORMATION11
             ,P_MNDTRY_FLAG      => r_ECP.INFORMATION12
             ,P_ORDR_NUM      => r_ECP.INFORMATION260
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE      => r_ecp.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_ecp.INFORMATION296
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_cmbn_age_los_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_CMBN_AGE_LOS_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ECP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_CMBN_AGE_LOS_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ECP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_CMBN_AGE_LOS_PRTE_F UPDATE_ELIG_CMBN_AGE_LOS ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ECP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ECP.information3,
               p_effective_start_date  => r_ECP.information2,
               p_dml_operation         => r_ECP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_CMBN_AGE_LOS_PRTE_ID   := r_ECP.information1;
             l_object_version_number := r_ECP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_CMBN_AGE_LOS_API.UPDATE_ELIG_CMBN_AGE_LOS(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CMBN_AGE_LOS_FCTR_ID      => l_CMBN_AGE_LOS_FCTR_ID
             ,P_ECP_ATTRIBUTE1      => r_ECP.INFORMATION111
             ,P_ECP_ATTRIBUTE10      => r_ECP.INFORMATION120
             ,P_ECP_ATTRIBUTE11      => r_ECP.INFORMATION121
             ,P_ECP_ATTRIBUTE12      => r_ECP.INFORMATION122
             ,P_ECP_ATTRIBUTE13      => r_ECP.INFORMATION123
             ,P_ECP_ATTRIBUTE14      => r_ECP.INFORMATION124
             ,P_ECP_ATTRIBUTE15      => r_ECP.INFORMATION125
             ,P_ECP_ATTRIBUTE16      => r_ECP.INFORMATION126
             ,P_ECP_ATTRIBUTE17      => r_ECP.INFORMATION127
             ,P_ECP_ATTRIBUTE18      => r_ECP.INFORMATION128
             ,P_ECP_ATTRIBUTE19      => r_ECP.INFORMATION129
             ,P_ECP_ATTRIBUTE2      => r_ECP.INFORMATION112
             ,P_ECP_ATTRIBUTE20      => r_ECP.INFORMATION130
             ,P_ECP_ATTRIBUTE21      => r_ECP.INFORMATION131
             ,P_ECP_ATTRIBUTE22      => r_ECP.INFORMATION132
             ,P_ECP_ATTRIBUTE23      => r_ECP.INFORMATION133
             ,P_ECP_ATTRIBUTE24      => r_ECP.INFORMATION134
             ,P_ECP_ATTRIBUTE25      => r_ECP.INFORMATION135
             ,P_ECP_ATTRIBUTE26      => r_ECP.INFORMATION136
             ,P_ECP_ATTRIBUTE27      => r_ECP.INFORMATION137
             ,P_ECP_ATTRIBUTE28      => r_ECP.INFORMATION138
             ,P_ECP_ATTRIBUTE29      => r_ECP.INFORMATION139
             ,P_ECP_ATTRIBUTE3      => r_ECP.INFORMATION113
             ,P_ECP_ATTRIBUTE30      => r_ECP.INFORMATION140
             ,P_ECP_ATTRIBUTE4      => r_ECP.INFORMATION114
             ,P_ECP_ATTRIBUTE5      => r_ECP.INFORMATION115
             ,P_ECP_ATTRIBUTE6      => r_ECP.INFORMATION116
             ,P_ECP_ATTRIBUTE7      => r_ECP.INFORMATION117
             ,P_ECP_ATTRIBUTE8      => r_ECP.INFORMATION118
             ,P_ECP_ATTRIBUTE9      => r_ECP.INFORMATION119
             ,P_ECP_ATTRIBUTE_CATEGORY      => r_ECP.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_CMBN_AGE_LOS_PRTE_ID      => l_elig_cmbn_age_los_prte_id
             ,P_EXCLD_FLAG      => r_ECP.INFORMATION11
             ,P_MNDTRY_FLAG      => r_ECP.INFORMATION12
             ,P_ORDR_NUM      => r_ECP.INFORMATION260
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_ecp.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_ecp.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_ECP.information3)) then
             --
             BEN_ELIG_CMBN_AGE_LOS_API.delete_ELIG_CMBN_AGE_LOS(
                --
                p_validate                       => false
                ,p_elig_cmbn_age_los_prte_id                   => l_elig_cmbn_age_los_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ECP',r_ECP.information5 ) ;
     --
 end create_ECP_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_ECQ_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ECQ_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_PGM_ID  number;
   l_PTIP_ID  number;
   cursor c_unique_ECQ(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_CBR_QUALD_BNF_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ECQ_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ECQ(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ECQ_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ECQ.elig_cbr_quald_bnf_id new_value
   from BEN_ELIG_CBR_QUALD_BNF_F ECQ
   where
   ECQ.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   nvl(ECQ.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and    -- IK Added nvl conditions
   nvl(ECQ.PTIP_ID,-999)    = nvl(l_PTIP_ID,-999)  and
   ECQ.business_group_id  = c_business_group_id
   and   ECQ.elig_cbr_quald_bnf_id  <> c_new_pk_id
 --TEMPIK
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_CBR_QUALD_BNF_F ECQ1
                where
                ECQ1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                nvl(ECQ1.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
                nvl(ECQ1.PTIP_ID,-999)     = nvl(l_PTIP_ID,-999)  and
                ECQ1.business_group_id  = c_business_group_id
                and   ECQ1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_CBR_QUALD_BNF_F ECQ2
                where
                ECQ2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                nvl(ECQ2.PGM_ID,-999)     = nvl(l_PGM_ID,-999)  and
                nvl(ECQ2.PTIP_ID,-999)     = nvl(l_PTIP_ID,-999)  and
                ECQ2.business_group_id  = c_business_group_id
                and   ECQ2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ECQ                     c_ECQ%rowtype;
   l_elig_cbr_quald_bnf_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ECQ_unique in c_unique_ECQ('ECQ') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ECQ_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_ECQ_unique.table_route_id '||r_ECQ_unique.table_route_id,10);
       hr_utility.set_location(' r_ECQ_unique.information1 '||r_ECQ_unique.information1,10);
       hr_utility.set_location( 'r_ECQ_unique.information2 '||r_ECQ_unique.information2,10);
       hr_utility.set_location( 'r_ECQ_unique.information3 '||r_ECQ_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ECQ_unique.dml_operation ;

/**********************moved from below ***************************/
       open c_ECQ(r_ECQ_unique.table_route_id,
                r_ECQ_unique.information1,
                r_ECQ_unique.information2,
                r_ECQ_unique.information3 ) ;
       --
       fetch c_ECQ into r_ECQ ;
       --
       close c_ECQ ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ECQ.INFORMATION263,l_dml_operation);

       -- Only For Use by Create Wizard - Same Business Group
       l_PGM_ID := NVL(get_fk('PGM_ID', r_ECQ.INFORMATION260,l_dml_operation),
                       r_ECQ.INFORMATION260);
       l_PTIP_ID := NVL(get_fk('PTIP_ID', r_ECQ.INFORMATION259,l_dml_operation),
                       r_ECQ.INFORMATION259);


/*****************************************************************/

       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ECQ_unique.information2 and r_ECQ_unique.information3 then
               l_update := true;
               if r_ECQ_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_CBR_QUALD_BNF_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_CBR_QUALD_BNF_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ECQ_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ECQ_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ECQ_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- -- log_data('ECQ',l_new_value,l_prefix || r_ECQ_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ECQ_min_max_dates(r_ECQ_unique.table_route_id, r_ECQ_unique.information1 ) ;
       fetch c_ECQ_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ECQ_unique.information2);

/**********************moved above ***************************
       open c_ECQ(r_ECQ_unique.table_route_id,
                r_ECQ_unique.information1,
                r_ECQ_unique.information2,
                r_ECQ_unique.information3 ) ;
       --
       fetch c_ECQ into r_ECQ ;
       --
       close c_ECQ ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ECQ.INFORMATION263,l_dml_operation);

       -- Only For Use by Create Wizard - Same Business Group
       l_PGM_ID := NVL(get_fk('PGM_ID', r_ECQ.INFORMATION260,l_dml_operation),
                       r_ECQ.INFORMATION260);
       l_PTIP_ID := NVL(get_fk('PTIP_ID', r_ECQ.INFORMATION259,l_dml_operation),
                       r_ECQ.INFORMATION259);


*****************************************************************/
       if p_reuse_object_flag = 'Y' then
         if c_ECQ_min_max_dates%found then
           -- cursor to find the object
           open c_find_ECQ_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_cbr_quald_bnf_id, -999)  ) ;
           fetch c_find_ECQ_in_target into l_new_value ;
           if c_find_ECQ_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_CBR_QUALD_BNF_F',
                   p_base_key_column => 'ELIG_CBR_QUALD_BNF_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_ECQ_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_CBR_QUALD_BNF_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_CBR_QUALD_BNF_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ECQ_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ECQ_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_ECQ_in_target ;
         --
         end if;
       end if ;
       --
       close c_ECQ_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_ECQ.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_ECQ.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_CBR_QUALD_BNF_F CREATE_ELIG_CBR_QUALD_BNF ',20);
           BEN_ELIG_CBR_QUALD_BNF_API.CREATE_ELIG_CBR_QUALD_BNF(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ECQ_ATTRIBUTE1      => r_ECQ.INFORMATION111
             ,P_ECQ_ATTRIBUTE10      => r_ECQ.INFORMATION120
             ,P_ECQ_ATTRIBUTE11      => r_ECQ.INFORMATION121
             ,P_ECQ_ATTRIBUTE12      => r_ECQ.INFORMATION122
             ,P_ECQ_ATTRIBUTE13      => r_ECQ.INFORMATION123
             ,P_ECQ_ATTRIBUTE14      => r_ECQ.INFORMATION124
             ,P_ECQ_ATTRIBUTE15      => r_ECQ.INFORMATION125
             ,P_ECQ_ATTRIBUTE16      => r_ECQ.INFORMATION126
             ,P_ECQ_ATTRIBUTE17      => r_ECQ.INFORMATION127
             ,P_ECQ_ATTRIBUTE18      => r_ECQ.INFORMATION128
             ,P_ECQ_ATTRIBUTE19      => r_ECQ.INFORMATION129
             ,P_ECQ_ATTRIBUTE2      => r_ECQ.INFORMATION112
             ,P_ECQ_ATTRIBUTE20      => r_ECQ.INFORMATION130
             ,P_ECQ_ATTRIBUTE21      => r_ECQ.INFORMATION131
             ,P_ECQ_ATTRIBUTE22      => r_ECQ.INFORMATION132
             ,P_ECQ_ATTRIBUTE23      => r_ECQ.INFORMATION133
             ,P_ECQ_ATTRIBUTE24      => r_ECQ.INFORMATION134
             ,P_ECQ_ATTRIBUTE25      => r_ECQ.INFORMATION135
             ,P_ECQ_ATTRIBUTE26      => r_ECQ.INFORMATION136
             ,P_ECQ_ATTRIBUTE27      => r_ECQ.INFORMATION137
             ,P_ECQ_ATTRIBUTE28      => r_ECQ.INFORMATION138
             ,P_ECQ_ATTRIBUTE29      => r_ECQ.INFORMATION139
             ,P_ECQ_ATTRIBUTE3      => r_ECQ.INFORMATION113
             ,P_ECQ_ATTRIBUTE30      => r_ECQ.INFORMATION140
             ,P_ECQ_ATTRIBUTE4      => r_ECQ.INFORMATION114
             ,P_ECQ_ATTRIBUTE5      => r_ECQ.INFORMATION115
             ,P_ECQ_ATTRIBUTE6      => r_ECQ.INFORMATION116
             ,P_ECQ_ATTRIBUTE7      => r_ECQ.INFORMATION117
             ,P_ECQ_ATTRIBUTE8      => r_ECQ.INFORMATION118
             ,P_ECQ_ATTRIBUTE9      => r_ECQ.INFORMATION119
             ,P_ECQ_ATTRIBUTE_CATEGORY      => r_ECQ.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_CBR_QUALD_BNF_ID      => l_elig_cbr_quald_bnf_id
             ,P_ORDR_NUM      => r_ECQ.INFORMATION262
             ,P_PGM_ID      => l_PGM_ID
             ,P_PTIP_ID      => l_PTIP_ID
             ,P_QUALD_BNF_FLAG      => r_ECQ.INFORMATION11
   --
    -- ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE      => r_ecq.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_ecq.INFORMATION296
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_cbr_quald_bnf_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_CBR_QUALD_BNF_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ECQ.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_CBR_QUALD_BNF_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ECQ_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_CBR_QUALD_BNF_F UPDATE_ELIG_CBR_QUALD_BNF ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ECQ.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ECQ.information3,
               p_effective_start_date  => r_ECQ.information2,
               p_dml_operation         => r_ECQ.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_CBR_QUALD_BNF_ID   := r_ECQ.information1;
             l_object_version_number := r_ECQ.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_CBR_QUALD_BNF_API.UPDATE_ELIG_CBR_QUALD_BNF(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ECQ_ATTRIBUTE1      => r_ECQ.INFORMATION111
             ,P_ECQ_ATTRIBUTE10      => r_ECQ.INFORMATION120
             ,P_ECQ_ATTRIBUTE11      => r_ECQ.INFORMATION121
             ,P_ECQ_ATTRIBUTE12      => r_ECQ.INFORMATION122
             ,P_ECQ_ATTRIBUTE13      => r_ECQ.INFORMATION123
             ,P_ECQ_ATTRIBUTE14      => r_ECQ.INFORMATION124
             ,P_ECQ_ATTRIBUTE15      => r_ECQ.INFORMATION125
             ,P_ECQ_ATTRIBUTE16      => r_ECQ.INFORMATION126
             ,P_ECQ_ATTRIBUTE17      => r_ECQ.INFORMATION127
             ,P_ECQ_ATTRIBUTE18      => r_ECQ.INFORMATION128
             ,P_ECQ_ATTRIBUTE19      => r_ECQ.INFORMATION129
             ,P_ECQ_ATTRIBUTE2      => r_ECQ.INFORMATION112
             ,P_ECQ_ATTRIBUTE20      => r_ECQ.INFORMATION130
             ,P_ECQ_ATTRIBUTE21      => r_ECQ.INFORMATION131
             ,P_ECQ_ATTRIBUTE22      => r_ECQ.INFORMATION132
             ,P_ECQ_ATTRIBUTE23      => r_ECQ.INFORMATION133
             ,P_ECQ_ATTRIBUTE24      => r_ECQ.INFORMATION134
             ,P_ECQ_ATTRIBUTE25      => r_ECQ.INFORMATION135
             ,P_ECQ_ATTRIBUTE26      => r_ECQ.INFORMATION136
             ,P_ECQ_ATTRIBUTE27      => r_ECQ.INFORMATION137
             ,P_ECQ_ATTRIBUTE28      => r_ECQ.INFORMATION138
             ,P_ECQ_ATTRIBUTE29      => r_ECQ.INFORMATION139
             ,P_ECQ_ATTRIBUTE3      => r_ECQ.INFORMATION113
             ,P_ECQ_ATTRIBUTE30      => r_ECQ.INFORMATION140
             ,P_ECQ_ATTRIBUTE4      => r_ECQ.INFORMATION114
             ,P_ECQ_ATTRIBUTE5      => r_ECQ.INFORMATION115
             ,P_ECQ_ATTRIBUTE6      => r_ECQ.INFORMATION116
             ,P_ECQ_ATTRIBUTE7      => r_ECQ.INFORMATION117
             ,P_ECQ_ATTRIBUTE8      => r_ECQ.INFORMATION118
             ,P_ECQ_ATTRIBUTE9      => r_ECQ.INFORMATION119
             ,P_ECQ_ATTRIBUTE_CATEGORY      => r_ECQ.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_CBR_QUALD_BNF_ID      => l_elig_cbr_quald_bnf_id
             ,P_ORDR_NUM      => r_ECQ.INFORMATION262
             ,P_PGM_ID      => l_PGM_ID
             ,P_PTIP_ID      => l_PTIP_ID
             ,P_QUALD_BNF_FLAG      => r_ECQ.INFORMATION11
   --
   --****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_ecq.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_ecq.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_ECQ.information3)) then
             --
             BEN_ELIG_CBR_QUALD_BNF_API.delete_ELIG_CBR_QUALD_BNF(
                --
                p_validate                       => false
                ,p_elig_cbr_quald_bnf_id                   => l_elig_cbr_quald_bnf_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ECQ',r_ECQ.information5 ) ;
     --
 end create_ECQ_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_ECY_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ECY_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_COMPETENCE_ID  number;
   l_ELIGY_PRFL_ID  number;
   l_RATING_LEVEL_ID  number;
   cursor c_unique_ECY(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_COMPTNCY_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ECY_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ECY(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   -- IK 9999 Get Competency and rating from mapped columns Needs to Look at Padma Code in bepdcprf.
   cursor c_find_ECY_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ECY.elig_comptncy_prte_id new_value
   from BEN_ELIG_COMPTNCY_PRTE_F ECY
   where
   ECY.COMPETENCE_ID     = l_COMPETENCE_ID  and
   ECY.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   ECY.RATING_LEVEL_ID     = l_RATING_LEVEL_ID  and
   ECY.business_group_id  = c_business_group_id
   and   ECY.elig_comptncy_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_COMPTNCY_PRTE_F ECY1
                where
                ECY1.COMPETENCE_ID     = l_COMPETENCE_ID  and
                ECY1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                ECY1.RATING_LEVEL_ID     = l_RATING_LEVEL_ID  and
                ECY1.business_group_id  = c_business_group_id
                and   ECY1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_COMPTNCY_PRTE_F ECY2
                where
                ECY2.COMPETENCE_ID     = l_COMPETENCE_ID  and
                ECY2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                ECY2.RATING_LEVEL_ID     = l_RATING_LEVEL_ID  and
                ECY2.business_group_id  = c_business_group_id
                and   ECY2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ECY                     c_ECY%rowtype;
   l_elig_comptncy_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --

   --Bug 5081751
   l_mapping_done boolean := true;
--End Bug 5081751


 begin

   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ECY_unique in c_unique_ECY('ECY') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ECY_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_ECY_unique.table_route_id '||r_ECY_unique.table_route_id,10);
       hr_utility.set_location(' r_ECY_unique.information1 '||r_ECY_unique.information1,10);
       hr_utility.set_location( 'r_ECY_unique.information2 '||r_ECY_unique.information2,10);
       hr_utility.set_location( 'r_ECY_unique.information3 '||r_ECY_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ECY_unique.dml_operation ;
       --
/**********************moved from below ***************************/
       open c_ECY(r_ECY_unique.table_route_id,
                r_ECY_unique.information1,
                r_ECY_unique.information2,
                r_ECY_unique.information3 ) ;
       --
       fetch c_ECY into r_ECY ;
       --
       close c_ECY ;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_COMPETENCE_ID := r_ECY.INFORMATION176;
         l_RATING_LEVEL_ID := r_ECY.INFORMATION180;
       else
         l_COMPETENCE_ID := r_ECY.INFORMATION174;
         l_RATING_LEVEL_ID := r_ECY.information178;
       end if;

       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ECY.INFORMATION263,l_dml_operation);

/*****************************************************************/


       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ECY_unique.information2 and r_ECY_unique.information3 then
               l_update := true;
               if r_ECY_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_COMPTNCY_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_COMPTNCY_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ECY_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ECY_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ECY_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- -- log_data('ECY',l_new_value,l_prefix || r_ECY_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ECY_min_max_dates(r_ECY_unique.table_route_id, r_ECY_unique.information1 ) ;
       fetch c_ECY_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ECY_unique.information2);

/**********************moved above ***************************
       open c_ECY(r_ECY_unique.table_route_id,
                r_ECY_unique.information1,
                r_ECY_unique.information2,
                r_ECY_unique.information3 ) ;
       --
       fetch c_ECY into r_ECY ;
       --
       close c_ECY ;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_COMPETENCE_ID := r_ECY.INFORMATION176;
         l_RATING_LEVEL_ID := r_ECY.INFORMATION180;
       else
         l_COMPETENCE_ID := r_ECY.INFORMATION174;
         l_RATING_LEVEL_ID := r_ECY.information178;
       end if;

       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ECY.INFORMATION263,l_dml_operation);

*****************************************************************/


       if l_COMPETENCE_ID is null or l_RATING_LEVEL_ID is null then
         close c_ECY_min_max_dates;
         --
         BEN_PD_COPY_TO_BEN_three.log_nomapping_data(p_parent_table_alias =>'ELP'
                     ,p_parent_pk_id         => r_ECY.information263
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'ECY'
                     ,p_child_data           => r_ECY.information173 );
   --Bug 5081751 Set the boolean variable if mapping is not done
		l_mapping_done := false;
   --End Bug 5081751

         --
       else
         if p_reuse_object_flag = 'Y' then
            if c_ECY_min_max_dates%found then
              -- cursor to find the object
              open c_find_ECY_in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_elig_comptncy_prte_id, -999)  ) ;
              fetch c_find_ECY_in_target into l_new_value ;
              if c_find_ECY_in_target%found then
                --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_COMPTNCY_PRTE_F',
                   p_base_key_column => 'ELIG_COMPTNCY_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
                if r_ECY_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_COMPTNCY_PRTE_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_COMPTNCY_PRTE_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ECY_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ECY_unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
              end if;
              close c_find_ECY_in_target ;
            --
            end if;
         end if ;
         --
         close c_ECY_min_max_dates ;

	 end if; -- bug 4565106

       end if; --if p_dml_operation
       --
--Bug 5081751 Bypass all the further statements if mapping is not done
       if ((not l_object_found_in_target OR l_update) and (l_mapping_done))  then
-- End Bug 5081751
           --
           l_current_pk_id := r_ECY.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_ECY.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_ELIG_COMPTNCY_PRTE_F CREATE_ELIG_COMPTNCY_PRTE ',20);
             BEN_ELIG_COMPTNCY_PRTE_API.CREATE_ELIG_COMPTNCY_PRTE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
				 ,P_COMPETENCE_ID      => l_COMPETENCE_ID
				 ,P_ECY_ATTRIBUTE1      => r_ECY.INFORMATION111
				 ,P_ECY_ATTRIBUTE10      => r_ECY.INFORMATION120
				 ,P_ECY_ATTRIBUTE11      => r_ECY.INFORMATION121
				 ,P_ECY_ATTRIBUTE12      => r_ECY.INFORMATION122
				 ,P_ECY_ATTRIBUTE13      => r_ECY.INFORMATION123
				 ,P_ECY_ATTRIBUTE14      => r_ECY.INFORMATION124
				 ,P_ECY_ATTRIBUTE15      => r_ECY.INFORMATION125
				 ,P_ECY_ATTRIBUTE16      => r_ECY.INFORMATION126
				 ,P_ECY_ATTRIBUTE17      => r_ECY.INFORMATION127
				 ,P_ECY_ATTRIBUTE18      => r_ECY.INFORMATION128
				 ,P_ECY_ATTRIBUTE19      => r_ECY.INFORMATION129
				 ,P_ECY_ATTRIBUTE2      => r_ECY.INFORMATION112
				 ,P_ECY_ATTRIBUTE20      => r_ECY.INFORMATION130
				 ,P_ECY_ATTRIBUTE21      => r_ECY.INFORMATION131
				 ,P_ECY_ATTRIBUTE22      => r_ECY.INFORMATION132
				 ,P_ECY_ATTRIBUTE23      => r_ECY.INFORMATION133
				 ,P_ECY_ATTRIBUTE24      => r_ECY.INFORMATION134
				 ,P_ECY_ATTRIBUTE25      => r_ECY.INFORMATION135
				 ,P_ECY_ATTRIBUTE26      => r_ECY.INFORMATION136
				 ,P_ECY_ATTRIBUTE27      => r_ECY.INFORMATION137
				 ,P_ECY_ATTRIBUTE28      => r_ECY.INFORMATION138
				 ,P_ECY_ATTRIBUTE29      => r_ECY.INFORMATION139
				 ,P_ECY_ATTRIBUTE3      => r_ECY.INFORMATION113
				 ,P_ECY_ATTRIBUTE30      => r_ECY.INFORMATION140
				 ,P_ECY_ATTRIBUTE4      => r_ECY.INFORMATION114
				 ,P_ECY_ATTRIBUTE5      => r_ECY.INFORMATION115
				 ,P_ECY_ATTRIBUTE6      => r_ECY.INFORMATION116
				 ,P_ECY_ATTRIBUTE7      => r_ECY.INFORMATION117
				 ,P_ECY_ATTRIBUTE8      => r_ECY.INFORMATION118
				 ,P_ECY_ATTRIBUTE9      => r_ECY.INFORMATION119
				 ,P_ECY_ATTRIBUTE_CATEGORY      => r_ECY.INFORMATION110
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_COMPTNCY_PRTE_ID      => l_elig_comptncy_prte_id
				 ,P_EXCLD_FLAG      => r_ECY.INFORMATION11
				 ,P_ORDR_NUM      => r_ECY.INFORMATION257
				 ,P_RATING_LEVEL_ID      => l_RATING_LEVEL_ID
	   --
	--    ****** END CHANGE LINES

	   --

				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
                                 ,P_CRITERIA_SCORE       => r_ecy.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_ecy.INFORMATION296
			 );
              -- insert the table_name,old_pk_id,new_pk_id into a plsql record
              -- Update all relevent cer records with new pk_id
              hr_utility.set_location('Before plsql table ',222);
              hr_utility.set_location('new_value id '||l_elig_comptncy_prte_id,222);
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_COMPTNCY_PRTE_ID' ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ECY.information1 ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_COMPTNCY_PRTE_ID ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ECY_unique.table_route_id;
              hr_utility.set_location('After plsql table ',222);
              --
              -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
              --
              BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
              --
            else  /* l_first_rec and not l_update */
              --
              -- Call Update routine for the pk_id created in prev run .
              -- insert the table_name,old_pk_id,new_pk_id into a plsql record
              hr_utility.set_location(' BEN_ELIG_COMPTNCY_PRTE_F UPDATE_ELIG_COMPTNCY_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ECY.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ECY.information3,
               p_effective_start_date  => r_ECY.information2,
               p_dml_operation         => r_ECY.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_COMPTNCY_PRTE_ID   := r_ECY.information1;
             l_object_version_number := r_ECY.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


              BEN_ELIG_COMPTNCY_PRTE_API.UPDATE_ELIG_COMPTNCY_PRTE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_COMPETENCE_ID      => l_COMPETENCE_ID
             ,P_ECY_ATTRIBUTE1      => r_ECY.INFORMATION111
             ,P_ECY_ATTRIBUTE10      => r_ECY.INFORMATION120
             ,P_ECY_ATTRIBUTE11      => r_ECY.INFORMATION121
             ,P_ECY_ATTRIBUTE12      => r_ECY.INFORMATION122
             ,P_ECY_ATTRIBUTE13      => r_ECY.INFORMATION123
             ,P_ECY_ATTRIBUTE14      => r_ECY.INFORMATION124
             ,P_ECY_ATTRIBUTE15      => r_ECY.INFORMATION125
             ,P_ECY_ATTRIBUTE16      => r_ECY.INFORMATION126
             ,P_ECY_ATTRIBUTE17      => r_ECY.INFORMATION127
             ,P_ECY_ATTRIBUTE18      => r_ECY.INFORMATION128
             ,P_ECY_ATTRIBUTE19      => r_ECY.INFORMATION129
             ,P_ECY_ATTRIBUTE2      => r_ECY.INFORMATION112
             ,P_ECY_ATTRIBUTE20      => r_ECY.INFORMATION130
             ,P_ECY_ATTRIBUTE21      => r_ECY.INFORMATION131
             ,P_ECY_ATTRIBUTE22      => r_ECY.INFORMATION132
             ,P_ECY_ATTRIBUTE23      => r_ECY.INFORMATION133
             ,P_ECY_ATTRIBUTE24      => r_ECY.INFORMATION134
             ,P_ECY_ATTRIBUTE25      => r_ECY.INFORMATION135
             ,P_ECY_ATTRIBUTE26      => r_ECY.INFORMATION136
             ,P_ECY_ATTRIBUTE27      => r_ECY.INFORMATION137
             ,P_ECY_ATTRIBUTE28      => r_ECY.INFORMATION138
             ,P_ECY_ATTRIBUTE29      => r_ECY.INFORMATION139
             ,P_ECY_ATTRIBUTE3      => r_ECY.INFORMATION113
             ,P_ECY_ATTRIBUTE30      => r_ECY.INFORMATION140
             ,P_ECY_ATTRIBUTE4      => r_ECY.INFORMATION114
             ,P_ECY_ATTRIBUTE5      => r_ECY.INFORMATION115
             ,P_ECY_ATTRIBUTE6      => r_ECY.INFORMATION116
             ,P_ECY_ATTRIBUTE7      => r_ECY.INFORMATION117
             ,P_ECY_ATTRIBUTE8      => r_ECY.INFORMATION118
             ,P_ECY_ATTRIBUTE9      => r_ECY.INFORMATION119
             ,P_ECY_ATTRIBUTE_CATEGORY      => r_ECY.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_COMPTNCY_PRTE_ID      => l_elig_comptncy_prte_id
             ,P_EXCLD_FLAG      => r_ECY.INFORMATION11
             ,P_ORDR_NUM      => r_ECY.INFORMATION257
             ,P_RATING_LEVEL_ID      => l_RATING_LEVEL_ID
   --
   --****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_ecy.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_ecy.INFORMATION296
         );
	end if;  -- l_update
              --
       end if; /* l_first_rec and not l_update */
            --
            -- Delete the row if it is end dated.
            --
            if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = trunc(r_ECY.information3)) then
                --
                BEN_ELIG_COMPTNCY_PRTE_API.delete_ELIG_COMPTNCY_PRTE(
                   --
                   p_validate                       => false
                   ,p_elig_comptncy_prte_id                   => l_elig_comptncy_prte_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
            end if;
            --
            l_prev_pk_id := l_current_pk_id ;
            --
         -- end if; -- bug 4565106
          --
       end if;
       --
     end if;
     --
   end loop;

/*
      ----------------------< DISPLAY START >---------------------------
   -- Print the Not Copied data to Log File BEN_PD_COPY_TO_BEN_THREE.G_NOT_COPIED_TBL
   --
   if l_not_copied_ecy_table_count > 0
   then
     --
      l_prev_parent_pk_id :=null;
      l_prev_ecy_id       := null;

      open c_display_name('ELP');
        --
        fetch c_display_name into l_elp_display_name, l_elp_table_route_id;
        --
      close c_display_name;
      --
      open c_display_name('ECY');
        --
        fetch c_display_name into l_ecy_display_name, l_ecy_table_route_id;
        --
      close c_display_name;
      --
      --
      ben_pd_copy_to_ben_three.g_not_copied_tbl(ben_pd_copy_to_ben_three.g_not_copied_tbl_count).text
                                                                             :=  l_label_start_tag ||
                                                                                       l_elp_display_name ||
                                                                                 l_label_end_tag;
      --
      ben_pd_copy_to_ben_three.g_not_copied_tbl_count := ben_pd_copy_to_ben_three.g_not_copied_tbl_count + 1;
      --
      FOR i IN l_not_copied_egl_tbl.FIRST .. l_not_copied_egl_tbl.LAST
      LOOP
        --
        if nvl(l_prev_parent_pk_id, -1) <> l_not_copied_egl_tbl(i).eligy_prfl_id
        then
          --
          open c_parent_data ( l_not_copied_egl_tbl(i).eligy_prfl_id, p_copy_entity_txn_id, l_elp_table_route_id );
            --
            fetch c_parent_data into l_elpro_name;
            --
          close c_parent_data;
          --
          ben_pd_copy_to_ben_three.g_not_copied_tbl(ben_pd_copy_to_ben_three.g_not_copied_tbl_count).text
                                                                             :=  l_para_spacer || l_elpro_name;
          --
          ben_pd_copy_to_ben_three.g_not_copied_tbl_count := ben_pd_copy_to_ben_three.g_not_copied_tbl_count + 1;
          --
          ben_pd_copy_to_ben_three.g_not_copied_tbl(ben_pd_copy_to_ben_three.g_not_copied_tbl_count).text
                                                                             :=  l_label_start_tag || l_para_spacer || l_para_spacer ||
                                                                                       l_ecv_display_name ||
                                                                                 l_label_end_tag;
          --
          ben_pd_copy_to_ben_three.g_not_copied_tbl_count := ben_pd_copy_to_ben_three.g_not_copied_tbl_count + 1;
          --
          l_prev_parent_pk_id := l_not_copied_egl_tbl(i).eligy_prfl_id;
          --
        end if;
        --
        IF nvl(l_prev_ecy_id, -1) <> l_not_copied_egl_tbl(i).elig_comptncy_prte_id
        THEN
          --
          ben_pd_copy_to_ben_three.g_not_copied_tbl(ben_pd_copy_to_ben_three.g_not_copied_tbl_count).text
                                                                             :=  l_para_spacer ||
                                                                                 l_para_spacer     || l_para_spacer ||
                                                                                       l_not_copied_egl_tbl(i).text;
          --
          ben_pd_copy_to_ben_three.g_not_copied_tbl_count := ben_pd_copy_to_ben_three.g_not_copied_tbl_count + 1;
          --
          l_prev_ecy_id := l_not_copied_egl_tbl(i).elig_comptncy_prte_id;
          --
        END IF;
        --
      END LOOP;
     --
   end if;
   --
   ----------------------< DISPLAY END >---------------------------
*/

   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ECY',r_ECY.information5 ) ;
     --
 end create_ECY_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_EDG_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EDG_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_PGM_ID  number;
   l_ordr_num number;
   cursor c_unique_EDG(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELG_DPNT_CVR_OTHR_PGM_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EDG_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EDG(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EDG_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EDG.elig_dpnt_cvrd_othr_pgm_id new_value
   from BEN_ELIG_DPNT_CVRD_OTHR_PGM_F EDG
   where
   EDG.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EDG.PGM_ID     = l_PGM_ID  and
   EDG.ORDR_NUM   = l_ORDR_NUM and
   EDG.business_group_id  = c_business_group_id
   and   EDG.elig_dpnt_cvrd_othr_pgm_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_DPNT_CVRD_OTHR_PGM_F EDG1
                where
                EDG1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EDG1.PGM_ID     = l_PGM_ID  and
                EDG1.ORDR_NUM   = l_ORDR_NUM and
                EDG1.business_group_id  = c_business_group_id
                and   EDG1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_DPNT_CVRD_OTHR_PGM_F EDG2
                where
                EDG2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EDG2.PGM_ID     = l_PGM_ID  and
                EDG2.ORDR_NUM   = l_ORDR_NUM and
                EDG2.business_group_id  = c_business_group_id
                and   EDG2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EDG                     c_EDG%rowtype;
   l_elig_dpnt_cvrd_othr_pgm_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EDG_unique in c_unique_EDG('EDG') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EDG_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EDG_unique.table_route_id '||r_EDG_unique.table_route_id,10);
       hr_utility.set_location(' r_EDG_unique.information1 '||r_EDG_unique.information1,10);
       hr_utility.set_location( 'r_EDG_unique.information2 '||r_EDG_unique.information2,10);
       hr_utility.set_location( 'r_EDG_unique.information3 '||r_EDG_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EDG_unique.dml_operation ;
       --

/**********************moved from below **********************/
       open c_EDG(r_EDG_unique.table_route_id,
                r_EDG_unique.information1,
                r_EDG_unique.information2,
                r_EDG_unique.information3 ) ;
       --
       fetch c_EDG into r_EDG ;
       --
       close c_EDG ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EDG.INFORMATION263,l_dml_operation);
       l_ordr_num := r_EDG.INFORMATION261 ; -- IK

       -- Only For Use by Create Wizard - Same Business Group
       l_PGM_ID := NVL(get_fk('PGM_ID', r_EDG.INFORMATION260,l_dml_operation),
                       r_EDG.INFORMATION260);
/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EDG_unique.information2 and r_EDG_unique.information3 then
               l_update := true;
               if r_EDG_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_DPNT_CVRD_OTHR_PGM_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_DPNT_CVRD_OTHR_PGM_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EDG_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EDG_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDG_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EDG',l_new_value,l_prefix || r_EDG_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EDG_min_max_dates(r_EDG_unique.table_route_id, r_EDG_unique.information1 ) ;
       fetch c_EDG_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EDG_unique.information2);
/**********************moved up from here **********************
       open c_EDG(r_EDG_unique.table_route_id,
                r_EDG_unique.information1,
                r_EDG_unique.information2,
                r_EDG_unique.information3 ) ;
       --
       fetch c_EDG into r_EDG ;
       --
       close c_EDG ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EDG.INFORMATION263,l_dml_operation);
       l_ordr_num := r_EDG.INFORMATION261 ; -- IK

       -- Only For Use by Create Wizard - Same Business Group
       l_PGM_ID := NVL(get_fk('PGM_ID', r_EDG.INFORMATION260,l_dml_operation),
                       r_EDG.INFORMATION260);
**********************************************************/

       if p_reuse_object_flag = 'Y' then
         if c_EDG_min_max_dates%found then
           -- cursor to find the object
           open c_find_EDG_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_dpnt_cvrd_othr_pgm_id, -999)  ) ;
           fetch c_find_EDG_in_target into l_new_value ;
           if c_find_EDG_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_DPNT_CVRD_OTHR_PGM_F',
                   p_base_key_column => 'ELIG_DPNT_CVRD_OTHR_PGM_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EDG_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_DPNT_CVRD_OTHR_PGM_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_DPNT_CVRD_OTHR_PGM_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EDG_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDG_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EDG_in_target ;
         --
         end if;
       end if ;
       --
       close c_EDG_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EDG.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EDG.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_DPNT_CVRD_OTHR_PGM_F CREATE_ELIG_DPNT_CVRD_O_PGM ',20);
           BEN_ELIG_DPNT_CVRD_O_PGM_API.CREATE_ELIG_DPNT_CVRD_O_PGM(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EDG_ATTRIBUTE1      => r_EDG.INFORMATION111
             ,P_EDG_ATTRIBUTE10      => r_EDG.INFORMATION120
             ,P_EDG_ATTRIBUTE11      => r_EDG.INFORMATION121
             ,P_EDG_ATTRIBUTE12      => r_EDG.INFORMATION122
             ,P_EDG_ATTRIBUTE13      => r_EDG.INFORMATION123
             ,P_EDG_ATTRIBUTE14      => r_EDG.INFORMATION124
             ,P_EDG_ATTRIBUTE15      => r_EDG.INFORMATION125
             ,P_EDG_ATTRIBUTE16      => r_EDG.INFORMATION126
             ,P_EDG_ATTRIBUTE17      => r_EDG.INFORMATION127
             ,P_EDG_ATTRIBUTE18      => r_EDG.INFORMATION128
             ,P_EDG_ATTRIBUTE19      => r_EDG.INFORMATION129
             ,P_EDG_ATTRIBUTE2      => r_EDG.INFORMATION112
             ,P_EDG_ATTRIBUTE20      => r_EDG.INFORMATION130
             ,P_EDG_ATTRIBUTE21      => r_EDG.INFORMATION131
             ,P_EDG_ATTRIBUTE22      => r_EDG.INFORMATION132
             ,P_EDG_ATTRIBUTE23      => r_EDG.INFORMATION133
             ,P_EDG_ATTRIBUTE24      => r_EDG.INFORMATION134
             ,P_EDG_ATTRIBUTE25      => r_EDG.INFORMATION135
             ,P_EDG_ATTRIBUTE26      => r_EDG.INFORMATION136
             ,P_EDG_ATTRIBUTE27      => r_EDG.INFORMATION137
             ,P_EDG_ATTRIBUTE28      => r_EDG.INFORMATION138
             ,P_EDG_ATTRIBUTE29      => r_EDG.INFORMATION139
             ,P_EDG_ATTRIBUTE3      => r_EDG.INFORMATION113
             ,P_EDG_ATTRIBUTE30      => r_EDG.INFORMATION140
             ,P_EDG_ATTRIBUTE4      => r_EDG.INFORMATION114
             ,P_EDG_ATTRIBUTE5      => r_EDG.INFORMATION115
             ,P_EDG_ATTRIBUTE6      => r_EDG.INFORMATION116
             ,P_EDG_ATTRIBUTE7      => r_EDG.INFORMATION117
             ,P_EDG_ATTRIBUTE8      => r_EDG.INFORMATION118
             ,P_EDG_ATTRIBUTE9      => r_EDG.INFORMATION119
             ,P_EDG_ATTRIBUTE_CATEGORY      => r_EDG.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_DPNT_CVRD_OTHR_PGM_ID      => l_elig_dpnt_cvrd_othr_pgm_id
             ,P_ENRL_DET_DT_CD      => r_EDG.INFORMATION13
             ,P_EXCLD_FLAG      => r_EDG.INFORMATION11
             ,P_ONLY_PLS_SUBJ_COBRA_FLAG      => r_EDG.INFORMATION12
             ,P_ORDR_NUM      => r_EDG.INFORMATION261
             ,P_PGM_ID      => l_PGM_ID
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_dpnt_cvrd_othr_pgm_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_DPNT_CVRD_OTHR_PGM_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EDG.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_DPNT_CVRD_OTHR_PGM_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDG_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_DPNT_CVRD_OTHR_PGM_F UPDATE_ELIG_DPNT_CVRD_O_PGM ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EDG.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EDG.information3,
               p_effective_start_date  => r_EDG.information2,
               p_dml_operation         => r_EDG.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_DPNT_CVRD_OTHR_PGM_ID   := r_EDG.information1;
             l_object_version_number := r_EDG.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_DPNT_CVRD_O_PGM_API.UPDATE_ELIG_DPNT_CVRD_O_PGM(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EDG_ATTRIBUTE1      => r_EDG.INFORMATION111
             ,P_EDG_ATTRIBUTE10      => r_EDG.INFORMATION120
             ,P_EDG_ATTRIBUTE11      => r_EDG.INFORMATION121
             ,P_EDG_ATTRIBUTE12      => r_EDG.INFORMATION122
             ,P_EDG_ATTRIBUTE13      => r_EDG.INFORMATION123
             ,P_EDG_ATTRIBUTE14      => r_EDG.INFORMATION124
             ,P_EDG_ATTRIBUTE15      => r_EDG.INFORMATION125
             ,P_EDG_ATTRIBUTE16      => r_EDG.INFORMATION126
             ,P_EDG_ATTRIBUTE17      => r_EDG.INFORMATION127
             ,P_EDG_ATTRIBUTE18      => r_EDG.INFORMATION128
             ,P_EDG_ATTRIBUTE19      => r_EDG.INFORMATION129
             ,P_EDG_ATTRIBUTE2      => r_EDG.INFORMATION112
             ,P_EDG_ATTRIBUTE20      => r_EDG.INFORMATION130
             ,P_EDG_ATTRIBUTE21      => r_EDG.INFORMATION131
             ,P_EDG_ATTRIBUTE22      => r_EDG.INFORMATION132
             ,P_EDG_ATTRIBUTE23      => r_EDG.INFORMATION133
             ,P_EDG_ATTRIBUTE24      => r_EDG.INFORMATION134
             ,P_EDG_ATTRIBUTE25      => r_EDG.INFORMATION135
             ,P_EDG_ATTRIBUTE26      => r_EDG.INFORMATION136
             ,P_EDG_ATTRIBUTE27      => r_EDG.INFORMATION137
             ,P_EDG_ATTRIBUTE28      => r_EDG.INFORMATION138
             ,P_EDG_ATTRIBUTE29      => r_EDG.INFORMATION139
             ,P_EDG_ATTRIBUTE3      => r_EDG.INFORMATION113
             ,P_EDG_ATTRIBUTE30      => r_EDG.INFORMATION140
             ,P_EDG_ATTRIBUTE4      => r_EDG.INFORMATION114
             ,P_EDG_ATTRIBUTE5      => r_EDG.INFORMATION115
             ,P_EDG_ATTRIBUTE6      => r_EDG.INFORMATION116
             ,P_EDG_ATTRIBUTE7      => r_EDG.INFORMATION117
             ,P_EDG_ATTRIBUTE8      => r_EDG.INFORMATION118
             ,P_EDG_ATTRIBUTE9      => r_EDG.INFORMATION119
             ,P_EDG_ATTRIBUTE_CATEGORY      => r_EDG.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_DPNT_CVRD_OTHR_PGM_ID      => l_elig_dpnt_cvrd_othr_pgm_id
             ,P_ENRL_DET_DT_CD      => r_EDG.INFORMATION13
             ,P_EXCLD_FLAG      => r_EDG.INFORMATION11
             ,P_ONLY_PLS_SUBJ_COBRA_FLAG      => r_EDG.INFORMATION12
             ,P_ORDR_NUM      => r_EDG.INFORMATION261
             ,P_PGM_ID      => l_PGM_ID
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EDG.information3)) then
             --
             BEN_ELIG_DPNT_CVRD_O_PGM_API.delete_ELIG_DPNT_CVRD_O_PGM(
                --
                p_validate                       => false
                ,p_elig_dpnt_cvrd_othr_pgm_id                   => l_elig_dpnt_cvrd_othr_pgm_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EDG',r_EDG.information5 ) ;
     --
 end create_EDG_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_EDI_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EDI_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_PLIP_ID  number;
   l_ORDR_NUM number;
   --
   cursor c_unique_EDI(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_DPNT_CVRD_PLIP_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EDI_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EDI(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EDI_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EDI.elig_dpnt_cvrd_plip_id new_value
   from BEN_ELIG_DPNT_CVRD_PLIP_F EDI
   where
   EDI.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EDI.PLIP_ID     = l_PLIP_ID  and
   EDI.ORDR_NUM    = l_ORDR_NUM and        -- IK Added this
   EDI.business_group_id  = c_business_group_id
   and   EDI.elig_dpnt_cvrd_plip_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_DPNT_CVRD_PLIP_F EDI1
                where
                EDI1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EDI1.PLIP_ID     = l_PLIP_ID  and
                EDI1.ORDR_NUM    = l_ORDR_NUM and
                EDI1.business_group_id  = c_business_group_id
                and   EDI1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_DPNT_CVRD_PLIP_F EDI2
                where
                EDI2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EDI2.PLIP_ID     = l_PLIP_ID  and
                EDI2.ORDR_NUM    = l_ORDR_NUM and
                EDI2.business_group_id  = c_business_group_id
                and   EDI2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EDI                     c_EDI%rowtype;
   l_elig_dpnt_cvrd_plip_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EDI_unique in c_unique_EDI('EDI') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EDI_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EDI_unique.table_route_id '||r_EDI_unique.table_route_id,10);
       hr_utility.set_location(' r_EDI_unique.information1 '||r_EDI_unique.information1,10);
       hr_utility.set_location( 'r_EDI_unique.information2 '||r_EDI_unique.information2,10);
       hr_utility.set_location( 'r_EDI_unique.information3 '||r_EDI_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EDI_unique.dml_operation ;
       --

/**********************moved from below **********************/

       open c_EDI(r_EDI_unique.table_route_id,
                r_EDI_unique.information1,
                r_EDI_unique.information2,
                r_EDI_unique.information3 ) ;
       --
       fetch c_EDI into r_EDI ;
       --
       close c_EDI ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EDI.INFORMATION263,l_dml_operation);
       l_ORDR_NUM := r_EDI.INFORMATION260 ; -- IK

       -- Only For Use by Create Wizard - Same Business Group
       l_PLIP_ID := NVL(get_fk('PLIP_ID', r_EDI.INFORMATION256,l_dml_operation),
                        r_EDI.INFORMATION256);
/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EDI_unique.information2 and r_EDI_unique.information3 then
               l_update := true;
               if r_EDI_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_DPNT_CVRD_PLIP_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_DPNT_CVRD_PLIP_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EDI_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EDI_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDI_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EDI',l_new_value,l_prefix || r_EDI_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EDI_min_max_dates(r_EDI_unique.table_route_id, r_EDI_unique.information1 ) ;
       fetch c_EDI_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
        l_min_esd := greatest(l_min_esd,r_EDI_unique.information2);
/**********************moved up from here **********************

       open c_EDI(r_EDI_unique.table_route_id,
                r_EDI_unique.information1,
                r_EDI_unique.information2,
                r_EDI_unique.information3 ) ;
       --
       fetch c_EDI into r_EDI ;
       --
       close c_EDI ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EDI.INFORMATION263,l_dml_operation);
       l_ORDR_NUM := r_EDI.INFORMATION260 ; -- IK

       -- Only For Use by Create Wizard - Same Business Group
       l_PLIP_ID := NVL(get_fk('PLIP_ID', r_EDI.INFORMATION256,l_dml_operation),
                        r_EDI.INFORMATION256);

**********************************************************/

       if p_reuse_object_flag = 'Y' then
         if c_EDI_min_max_dates%found then
           -- cursor to find the object
           open c_find_EDI_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_dpnt_cvrd_plip_id, -999)  ) ;
           fetch c_find_EDI_in_target into l_new_value ;
           if c_find_EDI_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_DPNT_CVRD_PLIP_F',
                   p_base_key_column => 'ELIG_DPNT_CVRD_PLIP_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EDI_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
              nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_DPNT_CVRD_PLIP_ID'  then
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_DPNT_CVRD_PLIP_ID' ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EDI_unique.information1 ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDI_unique.table_route_id;
               --
               -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
               --
               BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EDI_in_target ;
           --
         end if;
       end if ;
       --
       close c_EDI_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EDI.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EDI.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_DPNT_CVRD_PLIP_F CREATE_ELIG_DPNT_CVRD_PLIP ',20);
           BEN_ELIG_DPNT_CVRD_PLIP_API.CREATE_ELIG_DPNT_CVRD_PLIP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EDI_ATTRIBUTE1      => r_EDI.INFORMATION111
             ,P_EDI_ATTRIBUTE10      => r_EDI.INFORMATION120
             ,P_EDI_ATTRIBUTE11      => r_EDI.INFORMATION121
             ,P_EDI_ATTRIBUTE12      => r_EDI.INFORMATION122
             ,P_EDI_ATTRIBUTE13      => r_EDI.INFORMATION123
             ,P_EDI_ATTRIBUTE14      => r_EDI.INFORMATION124
             ,P_EDI_ATTRIBUTE15      => r_EDI.INFORMATION125
             ,P_EDI_ATTRIBUTE16      => r_EDI.INFORMATION126
             ,P_EDI_ATTRIBUTE17      => r_EDI.INFORMATION127
             ,P_EDI_ATTRIBUTE18      => r_EDI.INFORMATION128
             ,P_EDI_ATTRIBUTE19      => r_EDI.INFORMATION129
             ,P_EDI_ATTRIBUTE2      => r_EDI.INFORMATION112
             ,P_EDI_ATTRIBUTE20      => r_EDI.INFORMATION130
             ,P_EDI_ATTRIBUTE21      => r_EDI.INFORMATION131
             ,P_EDI_ATTRIBUTE22      => r_EDI.INFORMATION132
             ,P_EDI_ATTRIBUTE23      => r_EDI.INFORMATION133
             ,P_EDI_ATTRIBUTE24      => r_EDI.INFORMATION134
             ,P_EDI_ATTRIBUTE25      => r_EDI.INFORMATION135
             ,P_EDI_ATTRIBUTE26      => r_EDI.INFORMATION136
             ,P_EDI_ATTRIBUTE27      => r_EDI.INFORMATION137
             ,P_EDI_ATTRIBUTE28      => r_EDI.INFORMATION138
             ,P_EDI_ATTRIBUTE29      => r_EDI.INFORMATION139
             ,P_EDI_ATTRIBUTE3      => r_EDI.INFORMATION113
             ,P_EDI_ATTRIBUTE30      => r_EDI.INFORMATION140
             ,P_EDI_ATTRIBUTE4      => r_EDI.INFORMATION114
             ,P_EDI_ATTRIBUTE5      => r_EDI.INFORMATION115
             ,P_EDI_ATTRIBUTE6      => r_EDI.INFORMATION116
             ,P_EDI_ATTRIBUTE7      => r_EDI.INFORMATION117
             ,P_EDI_ATTRIBUTE8      => r_EDI.INFORMATION118
             ,P_EDI_ATTRIBUTE9      => r_EDI.INFORMATION119
             ,P_EDI_ATTRIBUTE_CATEGORY      => r_EDI.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_DPNT_CVRD_PLIP_ID      => l_elig_dpnt_cvrd_plip_id
             ,P_ENRL_DET_DT_CD      => r_EDI.INFORMATION11
             ,P_EXCLD_FLAG      => r_EDI.INFORMATION12
             ,P_ORDR_NUM      => r_EDI.INFORMATION260
             ,P_PLIP_ID      => l_PLIP_ID
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_dpnt_cvrd_plip_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_DPNT_CVRD_PLIP_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EDI.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_DPNT_CVRD_PLIP_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDI_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_DPNT_CVRD_PLIP_F UPDATE_ELIG_DPNT_CVRD_PLIP ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EDI.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EDI.information3,
               p_effective_start_date  => r_EDI.information2,
               p_dml_operation         => r_EDI.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_DPNT_CVRD_PLIP_ID   := r_EDI.information1;
             l_object_version_number := r_EDI.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_DPNT_CVRD_PLIP_API.UPDATE_ELIG_DPNT_CVRD_PLIP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EDI_ATTRIBUTE1      => r_EDI.INFORMATION111
             ,P_EDI_ATTRIBUTE10      => r_EDI.INFORMATION120
             ,P_EDI_ATTRIBUTE11      => r_EDI.INFORMATION121
             ,P_EDI_ATTRIBUTE12      => r_EDI.INFORMATION122
             ,P_EDI_ATTRIBUTE13      => r_EDI.INFORMATION123
             ,P_EDI_ATTRIBUTE14      => r_EDI.INFORMATION124
             ,P_EDI_ATTRIBUTE15      => r_EDI.INFORMATION125
             ,P_EDI_ATTRIBUTE16      => r_EDI.INFORMATION126
             ,P_EDI_ATTRIBUTE17      => r_EDI.INFORMATION127
             ,P_EDI_ATTRIBUTE18      => r_EDI.INFORMATION128
             ,P_EDI_ATTRIBUTE19      => r_EDI.INFORMATION129
             ,P_EDI_ATTRIBUTE2      => r_EDI.INFORMATION112
             ,P_EDI_ATTRIBUTE20      => r_EDI.INFORMATION130
             ,P_EDI_ATTRIBUTE21      => r_EDI.INFORMATION131
             ,P_EDI_ATTRIBUTE22      => r_EDI.INFORMATION132
             ,P_EDI_ATTRIBUTE23      => r_EDI.INFORMATION133
             ,P_EDI_ATTRIBUTE24      => r_EDI.INFORMATION134
             ,P_EDI_ATTRIBUTE25      => r_EDI.INFORMATION135
             ,P_EDI_ATTRIBUTE26      => r_EDI.INFORMATION136
             ,P_EDI_ATTRIBUTE27      => r_EDI.INFORMATION137
             ,P_EDI_ATTRIBUTE28      => r_EDI.INFORMATION138
             ,P_EDI_ATTRIBUTE29      => r_EDI.INFORMATION139
             ,P_EDI_ATTRIBUTE3      => r_EDI.INFORMATION113
             ,P_EDI_ATTRIBUTE30      => r_EDI.INFORMATION140
             ,P_EDI_ATTRIBUTE4      => r_EDI.INFORMATION114
             ,P_EDI_ATTRIBUTE5      => r_EDI.INFORMATION115
             ,P_EDI_ATTRIBUTE6      => r_EDI.INFORMATION116
             ,P_EDI_ATTRIBUTE7      => r_EDI.INFORMATION117
             ,P_EDI_ATTRIBUTE8      => r_EDI.INFORMATION118
             ,P_EDI_ATTRIBUTE9      => r_EDI.INFORMATION119
             ,P_EDI_ATTRIBUTE_CATEGORY      => r_EDI.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_DPNT_CVRD_PLIP_ID      => l_elig_dpnt_cvrd_plip_id
             ,P_ENRL_DET_DT_CD      => r_EDI.INFORMATION11
             ,P_EXCLD_FLAG      => r_EDI.INFORMATION12
             ,P_ORDR_NUM      => r_EDI.INFORMATION260
             ,P_PLIP_ID      => l_PLIP_ID
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EDI.information3)) then
             --
             BEN_ELIG_DPNT_CVRD_PLIP_API.delete_ELIG_DPNT_CVRD_PLIP(
                --
                p_validate                       => false
                ,p_elig_dpnt_cvrd_plip_id                   => l_elig_dpnt_cvrd_plip_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EDI',r_EDI.information5 ) ;
     --
 end create_EDI_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_EDP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EDP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_PL_ID  number;
   l_ORDR_NUM number ;
   cursor c_unique_EDP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_DPNT_CVRD_OTHR_PL_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EDP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EDP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EDP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EDP.elig_dpnt_cvrd_othr_pl_id new_value
   from BEN_ELIG_DPNT_CVRD_OTHR_PL_F EDP
   where
   EDP.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EDP.PL_ID     = l_PL_ID  and
   EDP.ORDR_NUM  = l_ORDR_NUM and
   EDP.business_group_id  = c_business_group_id
   and   EDP.elig_dpnt_cvrd_othr_pl_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_DPNT_CVRD_OTHR_PL_F EDP1
                where
                EDP1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EDP1.PL_ID     = l_PL_ID  and
                EDP1.ORDR_NUM  = l_ORDR_NUM and
                EDP1.business_group_id  = c_business_group_id
                and   EDP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_DPNT_CVRD_OTHR_PL_F EDP2
                where
                EDP2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EDP2.PL_ID     = l_PL_ID  and
                EDP2.ORDR_NUM  = l_ORDR_NUM and
                EDP2.business_group_id  = c_business_group_id
                and   EDP2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EDP                     c_EDP%rowtype;
   l_elig_dpnt_cvrd_othr_pl_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EDP_unique in c_unique_EDP('EDP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EDP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EDP_unique.table_route_id '||r_EDP_unique.table_route_id,10);
       hr_utility.set_location(' r_EDP_unique.information1 '||r_EDP_unique.information1,10);
       hr_utility.set_location( 'r_EDP_unique.information2 '||r_EDP_unique.information2,10);
       hr_utility.set_location( 'r_EDP_unique.information3 '||r_EDP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EDP_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EDP(r_EDP_unique.table_route_id,
                r_EDP_unique.information1,
                r_EDP_unique.information2,
                r_EDP_unique.information3 ) ;
       --
       fetch c_EDP into r_EDP ;
       --
       close c_EDP ;
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EDP.information263,l_dml_operation);
       l_ORDR_NUM := r_EDP.INFORMATION260 ; -- IK Added this

       -- Only For Use by Create Wizard - Same Business Group
       l_PL_ID := NVL(get_fk('PL_ID', r_EDP.information261,l_dml_operation),
                      r_EDP.information261);
/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EDP_unique.information2 and r_EDP_unique.information3 then
               l_update := true;
               if r_EDP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_DPNT_CVRD_OTHR_PL_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_DPNT_CVRD_OTHR_PL_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EDP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EDP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EDP',l_new_value,l_prefix || r_EDP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EDP_min_max_dates(r_EDP_unique.table_route_id, r_EDP_unique.information1 ) ;
       fetch c_EDP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EDP_unique.information2);
/**********************moved up from here **********************
       open c_EDP(r_EDP_unique.table_route_id,
                r_EDP_unique.information1,
                r_EDP_unique.information2,
                r_EDP_unique.information3 ) ;
       --
       fetch c_EDP into r_EDP ;
       --
       close c_EDP ;
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EDP.information263,l_dml_operation);
       l_ORDR_NUM := r_EDP.INFORMATION260 ; -- IK Added this

       -- Only For Use by Create Wizard - Same Business Group
       l_PL_ID := NVL(get_fk('PL_ID', r_EDP.information261,l_dml_operation),
                      r_EDP.information261);

**********************************************************/


       if p_reuse_object_flag = 'Y' then
         if c_EDP_min_max_dates%found then
           -- cursor to find the object
           open c_find_EDP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_dpnt_cvrd_othr_pl_id, -999)  ) ;
           fetch c_find_EDP_in_target into l_new_value ;
           if c_find_EDP_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_DPNT_CVRD_OTHR_PL_F',
                   p_base_key_column => 'ELIG_DPNT_CVRD_OTHR_PL_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EDP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_DPNT_CVRD_OTHR_PL_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_DPNT_CVRD_OTHR_PL_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EDP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EDP_in_target ;
         --
         end if;
       end if ;
       --
       close c_EDP_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EDP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EDP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_DPNT_CVRD_OTHR_PL_F CREATE_ELIG_DPNT_CVD_OTHR_PL ',20);
           BEN_ELIG_DPNT_CVD_OTHR_PL_API.CREATE_ELIG_DPNT_CVD_OTHR_PL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CVG_DET_DT_CD      => r_EDP.INFORMATION12
             ,P_EDP_ATTRIBUTE1      => r_EDP.INFORMATION111
             ,P_EDP_ATTRIBUTE10      => r_EDP.INFORMATION120
             ,P_EDP_ATTRIBUTE11      => r_EDP.INFORMATION121
             ,P_EDP_ATTRIBUTE12      => r_EDP.INFORMATION122
             ,P_EDP_ATTRIBUTE13      => r_EDP.INFORMATION123
             ,P_EDP_ATTRIBUTE14      => r_EDP.INFORMATION124
             ,P_EDP_ATTRIBUTE15      => r_EDP.INFORMATION125
             ,P_EDP_ATTRIBUTE16      => r_EDP.INFORMATION126
             ,P_EDP_ATTRIBUTE17      => r_EDP.INFORMATION127
             ,P_EDP_ATTRIBUTE18      => r_EDP.INFORMATION128
             ,P_EDP_ATTRIBUTE19      => r_EDP.INFORMATION129
             ,P_EDP_ATTRIBUTE2      => r_EDP.INFORMATION112
             ,P_EDP_ATTRIBUTE20      => r_EDP.INFORMATION130
             ,P_EDP_ATTRIBUTE21      => r_EDP.INFORMATION131
             ,P_EDP_ATTRIBUTE22      => r_EDP.INFORMATION132
             ,P_EDP_ATTRIBUTE23      => r_EDP.INFORMATION133
             ,P_EDP_ATTRIBUTE24      => r_EDP.INFORMATION134
             ,P_EDP_ATTRIBUTE25      => r_EDP.INFORMATION135
             ,P_EDP_ATTRIBUTE26      => r_EDP.INFORMATION136
             ,P_EDP_ATTRIBUTE27      => r_EDP.INFORMATION137
             ,P_EDP_ATTRIBUTE28      => r_EDP.INFORMATION138
             ,P_EDP_ATTRIBUTE29      => r_EDP.INFORMATION139
             ,P_EDP_ATTRIBUTE3      => r_EDP.INFORMATION113
             ,P_EDP_ATTRIBUTE30      => r_EDP.INFORMATION140
             ,P_EDP_ATTRIBUTE4      => r_EDP.INFORMATION114
             ,P_EDP_ATTRIBUTE5      => r_EDP.INFORMATION115
             ,P_EDP_ATTRIBUTE6      => r_EDP.INFORMATION116
             ,P_EDP_ATTRIBUTE7      => r_EDP.INFORMATION117
             ,P_EDP_ATTRIBUTE8      => r_EDP.INFORMATION118
             ,P_EDP_ATTRIBUTE9      => r_EDP.INFORMATION119
             ,P_EDP_ATTRIBUTE_CATEGORY      => r_EDP.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_DPNT_CVRD_OTHR_PL_ID      => l_elig_dpnt_cvrd_othr_pl_id
             ,P_EXCLD_FLAG      => r_EDP.INFORMATION11
             ,P_ORDR_NUM      => r_EDP.INFORMATION260
             ,P_PL_ID      => l_PL_ID
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_dpnt_cvrd_othr_pl_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_DPNT_CVRD_OTHR_PL_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EDP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_DPNT_CVRD_OTHR_PL_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_DPNT_CVRD_OTHR_PL_F UPDATE_ELIG_DPNT_CVD_OTHR_PL ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EDP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EDP.information3,
               p_effective_start_date  => r_EDP.information2,
               p_dml_operation         => r_EDP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_DPNT_CVRD_OTHR_PL_ID   := r_EDP.information1;
             l_object_version_number := r_EDP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_DPNT_CVD_OTHR_PL_API.UPDATE_ELIG_DPNT_CVD_OTHR_PL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CVG_DET_DT_CD      => r_EDP.INFORMATION12
             ,P_EDP_ATTRIBUTE1      => r_EDP.INFORMATION111
             ,P_EDP_ATTRIBUTE10      => r_EDP.INFORMATION120
             ,P_EDP_ATTRIBUTE11      => r_EDP.INFORMATION121
             ,P_EDP_ATTRIBUTE12      => r_EDP.INFORMATION122
             ,P_EDP_ATTRIBUTE13      => r_EDP.INFORMATION123
             ,P_EDP_ATTRIBUTE14      => r_EDP.INFORMATION124
             ,P_EDP_ATTRIBUTE15      => r_EDP.INFORMATION125
             ,P_EDP_ATTRIBUTE16      => r_EDP.INFORMATION126
             ,P_EDP_ATTRIBUTE17      => r_EDP.INFORMATION127
             ,P_EDP_ATTRIBUTE18      => r_EDP.INFORMATION128
             ,P_EDP_ATTRIBUTE19      => r_EDP.INFORMATION129
             ,P_EDP_ATTRIBUTE2      => r_EDP.INFORMATION112
             ,P_EDP_ATTRIBUTE20      => r_EDP.INFORMATION130
             ,P_EDP_ATTRIBUTE21      => r_EDP.INFORMATION131
             ,P_EDP_ATTRIBUTE22      => r_EDP.INFORMATION132
             ,P_EDP_ATTRIBUTE23      => r_EDP.INFORMATION133
             ,P_EDP_ATTRIBUTE24      => r_EDP.INFORMATION134
             ,P_EDP_ATTRIBUTE25      => r_EDP.INFORMATION135
             ,P_EDP_ATTRIBUTE26      => r_EDP.INFORMATION136
             ,P_EDP_ATTRIBUTE27      => r_EDP.INFORMATION137
             ,P_EDP_ATTRIBUTE28      => r_EDP.INFORMATION138
             ,P_EDP_ATTRIBUTE29      => r_EDP.INFORMATION139
             ,P_EDP_ATTRIBUTE3      => r_EDP.INFORMATION113
             ,P_EDP_ATTRIBUTE30      => r_EDP.INFORMATION140
             ,P_EDP_ATTRIBUTE4      => r_EDP.INFORMATION114
             ,P_EDP_ATTRIBUTE5      => r_EDP.INFORMATION115
             ,P_EDP_ATTRIBUTE6      => r_EDP.INFORMATION116
             ,P_EDP_ATTRIBUTE7      => r_EDP.INFORMATION117
             ,P_EDP_ATTRIBUTE8      => r_EDP.INFORMATION118
             ,P_EDP_ATTRIBUTE9      => r_EDP.INFORMATION119
             ,P_EDP_ATTRIBUTE_CATEGORY      => r_EDP.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_DPNT_CVRD_OTHR_PL_ID      => l_elig_dpnt_cvrd_othr_pl_id
             ,P_EXCLD_FLAG      => r_EDP.INFORMATION11
             ,P_ORDR_NUM      => r_EDP.INFORMATION260
             ,P_PL_ID      => l_PL_ID
   --
   -- ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EDP.information3)) then
             --
             BEN_ELIG_DPNT_CVD_OTHR_PL_API.delete_ELIG_DPNT_CVD_OTHR_PL(
                --
                p_validate                       => false
                ,p_elig_dpnt_cvrd_othr_pl_id                   => l_elig_dpnt_cvrd_othr_pl_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EDP',r_EDP.information5 ) ;
     --
 end create_EDP_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_EDT_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EDT_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_PTIP_ID  number;
   l_ORDR_NUM      number ;
   cursor c_unique_EDT(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELG_DPNT_CVR_OTR_PTIP_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EDT_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EDT(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date)  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EDT_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EDT.elig_dpnt_cvrd_othr_ptip_id new_value
   from BEN_ELIG_DPNT_CVRD_OTHR_PTIP_F EDT
   where
   EDT.ELIGY_PRFL_ID    = l_ELIGY_PRFL_ID  and
   EDT.PTIP_ID     = l_PTIP_ID  and
   EDT.ORDR_NUM     = l_ORDR_NUM and
   EDT.business_group_id  = c_business_group_id
   and   EDT.elig_dpnt_cvrd_othr_ptip_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_DPNT_CVRD_OTHR_PTIP_F EDT1
                where
                EDT1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EDT1.PTIP_ID     = l_PTIP_ID  and
                EDT1.ORDR_NUM     = l_ORDR_NUM and
                EDT1.business_group_id  = c_business_group_id
                and   EDT1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_DPNT_CVRD_OTHR_PTIP_F EDT2
                where
                EDT2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EDT2.PTIP_ID     = l_PTIP_ID  and
                EDT2.ORDR_NUM     = l_ORDR_NUM and
                EDT2.business_group_id  = c_business_group_id
                and   EDT2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EDT                     c_EDT%rowtype;
   l_elig_dpnt_cvrd_othr_ptip_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EDT_unique in c_unique_EDT('EDT') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EDT_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EDT_unique.table_route_id '||r_EDT_unique.table_route_id,10);
       hr_utility.set_location(' r_EDT_unique.information1 '||r_EDT_unique.information1,10);
       hr_utility.set_location( 'r_EDT_unique.information2 '||r_EDT_unique.information2,10);
       hr_utility.set_location( 'r_EDT_unique.information3 '||r_EDT_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EDT_unique.dml_operation ;
/**********************moved from below **********************/
       open c_EDT(r_EDT_unique.table_route_id,
                r_EDT_unique.information1,
                r_EDT_unique.information2,
                r_EDT_unique.information3 ) ;
       --
       fetch c_EDT into r_EDT ;
       --
       close c_EDT ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EDT.INFORMATION263,l_dml_operation);
       l_ORDR_NUM := r_EDT.INFORMATION261 ; -- IK Added

       -- Only For Use by Create Wizard - Same Business Group
       l_PTIP_ID := NVL(get_fk('PTIP_ID', r_EDT.INFORMATION259,l_dml_operation),
                        r_EDT.INFORMATION259);
/**********************************************************/
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EDT_unique.information2 and r_EDT_unique.information3 then
               l_update := true;
               if r_EDT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_DPNT_CVRD_OTHR_PTIP_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_DPNT_CVRD_OTHR_PTIP_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EDT_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EDT_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDT_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EDT',l_new_value,l_prefix || r_EDT_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EDT_min_max_dates(r_EDT_unique.table_route_id, r_EDT_unique.information1 ) ;
       fetch c_EDT_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
         l_min_esd := greatest(l_min_esd,r_EDT_unique.information2);
/**********************moved up from here **********************
       open c_EDT(r_EDT_unique.table_route_id,
                r_EDT_unique.information1,
                r_EDT_unique.information2,
                r_EDT_unique.information3 ) ;
       --
       fetch c_EDT into r_EDT ;
       --
       close c_EDT ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EDT.INFORMATION263,l_dml_operation);
       l_ORDR_NUM := r_EDT.INFORMATION261 ; -- IK Added

       -- Only For Use by Create Wizard - Same Business Group
       l_PTIP_ID := NVL(get_fk('PTIP_ID', r_EDT.INFORMATION259,l_dml_operation),
                        r_EDT.INFORMATION259);
**********************************************************/

       if p_reuse_object_flag = 'Y' then
         if c_EDT_min_max_dates%found then
           -- cursor to find the object
           open c_find_EDT_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_dpnt_cvrd_othr_ptip_id, -999)  ) ;
           fetch c_find_EDT_in_target into l_new_value ;
           if c_find_EDT_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_DPNT_CVRD_OTHR_PTIP_F',
                   p_base_key_column => 'ELIG_DPNT_CVRD_OTHR_PTIP_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EDT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_DPNT_CVRD_OTHR_PTIP_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_DPNT_CVRD_OTHR_PTIP_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EDT_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDT_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EDT_in_target ;
         --
         end if;
       end if ;
       --
       close c_EDT_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EDT.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EDT.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_DPNT_CVRD_OTHR_PTIP_F CREATE_ELIG_DPNT_CVRD_O_PTIP ',20);
           BEN_ELIG_DPNT_CVRD_O_PTIP_API.CREATE_ELIG_DPNT_CVRD_O_PTIP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EDT_ATTRIBUTE1      => r_EDT.INFORMATION111
             ,P_EDT_ATTRIBUTE10      => r_EDT.INFORMATION120
             ,P_EDT_ATTRIBUTE11      => r_EDT.INFORMATION121
             ,P_EDT_ATTRIBUTE12      => r_EDT.INFORMATION122
             ,P_EDT_ATTRIBUTE13      => r_EDT.INFORMATION123
             ,P_EDT_ATTRIBUTE14      => r_EDT.INFORMATION124
             ,P_EDT_ATTRIBUTE15      => r_EDT.INFORMATION125
             ,P_EDT_ATTRIBUTE16      => r_EDT.INFORMATION126
             ,P_EDT_ATTRIBUTE17      => r_EDT.INFORMATION127
             ,P_EDT_ATTRIBUTE18      => r_EDT.INFORMATION128
             ,P_EDT_ATTRIBUTE19      => r_EDT.INFORMATION129
             ,P_EDT_ATTRIBUTE2      => r_EDT.INFORMATION112
             ,P_EDT_ATTRIBUTE20      => r_EDT.INFORMATION130
             ,P_EDT_ATTRIBUTE21      => r_EDT.INFORMATION131
             ,P_EDT_ATTRIBUTE22      => r_EDT.INFORMATION132
             ,P_EDT_ATTRIBUTE23      => r_EDT.INFORMATION133
             ,P_EDT_ATTRIBUTE24      => r_EDT.INFORMATION134
             ,P_EDT_ATTRIBUTE25      => r_EDT.INFORMATION135
             ,P_EDT_ATTRIBUTE26      => r_EDT.INFORMATION136
             ,P_EDT_ATTRIBUTE27      => r_EDT.INFORMATION137
             ,P_EDT_ATTRIBUTE28      => r_EDT.INFORMATION138
             ,P_EDT_ATTRIBUTE29      => r_EDT.INFORMATION139
             ,P_EDT_ATTRIBUTE3      => r_EDT.INFORMATION113
             ,P_EDT_ATTRIBUTE30      => r_EDT.INFORMATION140
             ,P_EDT_ATTRIBUTE4      => r_EDT.INFORMATION114
             ,P_EDT_ATTRIBUTE5      => r_EDT.INFORMATION115
             ,P_EDT_ATTRIBUTE6      => r_EDT.INFORMATION116
             ,P_EDT_ATTRIBUTE7      => r_EDT.INFORMATION117
             ,P_EDT_ATTRIBUTE8      => r_EDT.INFORMATION118
             ,P_EDT_ATTRIBUTE9      => r_EDT.INFORMATION119
             ,P_EDT_ATTRIBUTE_CATEGORY      => r_EDT.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_DPNT_CVRD_OTHR_PTIP_ID      => l_elig_dpnt_cvrd_othr_ptip_id
             ,P_ENRL_DET_DT_CD      => r_EDT.INFORMATION13
             ,P_EXCLD_FLAG      => r_EDT.INFORMATION11
             ,P_ONLY_PLS_SUBJ_COBRA_FLAG      => r_EDT.INFORMATION12
             ,P_ORDR_NUM      => r_EDT.INFORMATION261
             ,P_PTIP_ID      => l_PTIP_ID
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_dpnt_cvrd_othr_ptip_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_DPNT_CVRD_OTHR_PTIP_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EDT.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_DPNT_CVRD_OTHR_PTIP_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDT_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_DPNT_CVRD_OTHR_PTIP_F UPDATE_ELIG_DPNT_CVRD_O_PTIP ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EDT.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EDT.information3,
               p_effective_start_date  => r_EDT.information2,
               p_dml_operation         => r_EDT.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_DPNT_CVRD_OTHR_PTIP_ID   := r_EDT.information1;
             l_object_version_number := r_EDT.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_DPNT_CVRD_O_PTIP_API.UPDATE_ELIG_DPNT_CVRD_O_PTIP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EDT_ATTRIBUTE1      => r_EDT.INFORMATION111
             ,P_EDT_ATTRIBUTE10      => r_EDT.INFORMATION120
             ,P_EDT_ATTRIBUTE11      => r_EDT.INFORMATION121
             ,P_EDT_ATTRIBUTE12      => r_EDT.INFORMATION122
             ,P_EDT_ATTRIBUTE13      => r_EDT.INFORMATION123
             ,P_EDT_ATTRIBUTE14      => r_EDT.INFORMATION124
             ,P_EDT_ATTRIBUTE15      => r_EDT.INFORMATION125
             ,P_EDT_ATTRIBUTE16      => r_EDT.INFORMATION126
             ,P_EDT_ATTRIBUTE17      => r_EDT.INFORMATION127
             ,P_EDT_ATTRIBUTE18      => r_EDT.INFORMATION128
             ,P_EDT_ATTRIBUTE19      => r_EDT.INFORMATION129
             ,P_EDT_ATTRIBUTE2      => r_EDT.INFORMATION112
             ,P_EDT_ATTRIBUTE20      => r_EDT.INFORMATION130
             ,P_EDT_ATTRIBUTE21      => r_EDT.INFORMATION131
             ,P_EDT_ATTRIBUTE22      => r_EDT.INFORMATION132
             ,P_EDT_ATTRIBUTE23      => r_EDT.INFORMATION133
             ,P_EDT_ATTRIBUTE24      => r_EDT.INFORMATION134
             ,P_EDT_ATTRIBUTE25      => r_EDT.INFORMATION135
             ,P_EDT_ATTRIBUTE26      => r_EDT.INFORMATION136
             ,P_EDT_ATTRIBUTE27      => r_EDT.INFORMATION137
             ,P_EDT_ATTRIBUTE28      => r_EDT.INFORMATION138
             ,P_EDT_ATTRIBUTE29      => r_EDT.INFORMATION139
             ,P_EDT_ATTRIBUTE3      => r_EDT.INFORMATION113
             ,P_EDT_ATTRIBUTE30      => r_EDT.INFORMATION140
             ,P_EDT_ATTRIBUTE4      => r_EDT.INFORMATION114
             ,P_EDT_ATTRIBUTE5      => r_EDT.INFORMATION115
             ,P_EDT_ATTRIBUTE6      => r_EDT.INFORMATION116
             ,P_EDT_ATTRIBUTE7      => r_EDT.INFORMATION117
             ,P_EDT_ATTRIBUTE8      => r_EDT.INFORMATION118
             ,P_EDT_ATTRIBUTE9      => r_EDT.INFORMATION119
             ,P_EDT_ATTRIBUTE_CATEGORY      => r_EDT.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_DPNT_CVRD_OTHR_PTIP_ID      => l_elig_dpnt_cvrd_othr_ptip_id
             ,P_ENRL_DET_DT_CD      => r_EDT.INFORMATION13
             ,P_EXCLD_FLAG      => r_EDT.INFORMATION11
             ,P_ONLY_PLS_SUBJ_COBRA_FLAG      => r_EDT.INFORMATION12
             ,P_ORDR_NUM      => r_EDT.INFORMATION261
             ,P_PTIP_ID      => l_PTIP_ID
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EDT.information3)) then
             --
             BEN_ELIG_DPNT_CVRD_O_PTIP_API.delete_ELIG_DPNT_CVRD_O_PTIP(
                --
                p_validate                       => false
                ,p_elig_dpnt_cvrd_othr_ptip_id                   => l_elig_dpnt_cvrd_othr_ptip_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EDT',r_EDT.information5 ) ;
     --
 end create_EDT_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_ERL_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ERL_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_FORMULA_ID  number;
   l_ORDR_TO_APLY_NUM      number ;
   cursor c_unique_ERL(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIGY_PRFL_RL_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ERL_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ERL(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ERL_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ERL.eligy_prfl_rl_id new_value
   from BEN_ELIGY_PRFL_RL_F ERL
   where
   ERL.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   ERL.FORMULA_ID     = l_FORMULA_ID  and
   ERL.ORDR_TO_APLY_NUM     = l_ORDR_TO_APLY_NUM and -- IK Added
   ERL.business_group_id  = c_business_group_id
   and   ERL.eligy_prfl_rl_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIGY_PRFL_RL_F ERL1
                where
                ERL1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                ERL1.FORMULA_ID     = l_FORMULA_ID  and
                ERL1.ORDR_TO_APLY_NUM     = l_ORDR_TO_APLY_NUM and -- IK Added
                ERL1.business_group_id  = c_business_group_id
                and   ERL1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIGY_PRFL_RL_F ERL2
                where
                ERL2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                ERL2.FORMULA_ID     = l_FORMULA_ID  and
                ERL2.ORDR_TO_APLY_NUM     = l_ORDR_TO_APLY_NUM and -- IK Added
                ERL2.business_group_id  = c_business_group_id
                and   ERL2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ERL                     c_ERL%rowtype;
   l_eligy_prfl_rl_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ERL_unique in c_unique_ERL('ERL') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ERL_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_ERL_unique.table_route_id '||r_ERL_unique.table_route_id,10);
       hr_utility.set_location(' r_ERL_unique.information1 '||r_ERL_unique.information1,10);
       hr_utility.set_location( 'r_ERL_unique.information2 '||r_ERL_unique.information2,10);
       hr_utility.set_location( 'r_ERL_unique.information3 '||r_ERL_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ERL_unique.dml_operation ;
       --

/**********************moved from below **********************/
       open c_ERL(r_ERL_unique.table_route_id,
                r_ERL_unique.information1,
                r_ERL_unique.information2,
                r_ERL_unique.information3 ) ;
       --
       fetch c_ERL into r_ERL ;
       --
       close c_ERL ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ERL.INFORMATION263,l_dml_operation);
       l_FORMULA_ID := get_fk('FORMULA_ID', r_ERL.INFORMATION251,l_dml_operation);
       l_ORDR_TO_APLY_NUM    :=  r_ERL.INFORMATION260;
/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ERL_unique.information2 and r_ERL_unique.information3 then
               l_update := true;
               if r_ERL_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIGY_PRFL_RL_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIGY_PRFL_RL_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ERL_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ERL_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ERL_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ERL',l_new_value,l_prefix || r_ERL_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ERL_min_max_dates(r_ERL_unique.table_route_id, r_ERL_unique.information1 ) ;
       fetch c_ERL_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ERL_unique.information2);
/**********************moved up from here **********************
       open c_ERL(r_ERL_unique.table_route_id,
                r_ERL_unique.information1,
                r_ERL_unique.information2,
                r_ERL_unique.information3 ) ;
       --
       fetch c_ERL into r_ERL ;
       --
       close c_ERL ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ERL.INFORMATION263,l_dml_operation);
       l_FORMULA_ID := get_fk('FORMULA_ID', r_ERL.INFORMATION251,l_dml_operation);
       l_ORDR_TO_APLY_NUM    :=  r_ERL.INFORMATION260;
**********************************************************/

       --
       if p_reuse_object_flag = 'Y' then
         if c_ERL_min_max_dates%found then
           -- cursor to find the object
           open c_find_ERL_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_eligy_prfl_rl_id, -999)  ) ;
           fetch c_find_ERL_in_target into l_new_value ;
           if c_find_ERL_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIGY_PRFL_RL_F',
                   p_base_key_column => 'ELIGY_PRFL_RL_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_ERL_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIGY_PRFL_RL_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIGY_PRFL_RL_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ERL_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ERL_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_ERL_in_target ;
         --
         end if;
       end if ;
       --
       close c_ERL_min_max_dates ;
       end if; --if p_dml_operation
       --
       if ( not l_object_found_in_target OR l_update ) and (l_FORMULA_ID is not null)  then -- bug # 4251900

         --
         l_current_pk_id := r_ERL.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_ERL.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIGY_PRFL_RL_F CREATE_ELIGY_PROFILE_RULE ',20);
           BEN_ELIGY_PROFILE_RULE_API.CREATE_ELIGY_PROFILE_RULE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_DRVBL_FCTR_APLS_FLAG      => r_ERL.INFORMATION11
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIGY_PRFL_RL_ID      => l_eligy_prfl_rl_id
             ,P_ERL_ATTRIBUTE1      => r_ERL.INFORMATION111
             ,P_ERL_ATTRIBUTE10      => r_ERL.INFORMATION120
             ,P_ERL_ATTRIBUTE11      => r_ERL.INFORMATION121
             ,P_ERL_ATTRIBUTE12      => r_ERL.INFORMATION122
             ,P_ERL_ATTRIBUTE13      => r_ERL.INFORMATION123
             ,P_ERL_ATTRIBUTE14      => r_ERL.INFORMATION124
             ,P_ERL_ATTRIBUTE15      => r_ERL.INFORMATION125
             ,P_ERL_ATTRIBUTE16      => r_ERL.INFORMATION126
             ,P_ERL_ATTRIBUTE17      => r_ERL.INFORMATION127
             ,P_ERL_ATTRIBUTE18      => r_ERL.INFORMATION128
             ,P_ERL_ATTRIBUTE19      => r_ERL.INFORMATION129
             ,P_ERL_ATTRIBUTE2      => r_ERL.INFORMATION112
             ,P_ERL_ATTRIBUTE20      => r_ERL.INFORMATION130
             ,P_ERL_ATTRIBUTE21      => r_ERL.INFORMATION131
             ,P_ERL_ATTRIBUTE22      => r_ERL.INFORMATION132
             ,P_ERL_ATTRIBUTE23      => r_ERL.INFORMATION133
             ,P_ERL_ATTRIBUTE24      => r_ERL.INFORMATION134
             ,P_ERL_ATTRIBUTE25      => r_ERL.INFORMATION135
             ,P_ERL_ATTRIBUTE26      => r_ERL.INFORMATION136
             ,P_ERL_ATTRIBUTE27      => r_ERL.INFORMATION137
             ,P_ERL_ATTRIBUTE28      => r_ERL.INFORMATION138
             ,P_ERL_ATTRIBUTE29      => r_ERL.INFORMATION139
             ,P_ERL_ATTRIBUTE3      => r_ERL.INFORMATION113
             ,P_ERL_ATTRIBUTE30      => r_ERL.INFORMATION140
             ,P_ERL_ATTRIBUTE4      => r_ERL.INFORMATION114
             ,P_ERL_ATTRIBUTE5      => r_ERL.INFORMATION115
             ,P_ERL_ATTRIBUTE6      => r_ERL.INFORMATION116
             ,P_ERL_ATTRIBUTE7      => r_ERL.INFORMATION117
             ,P_ERL_ATTRIBUTE8      => r_ERL.INFORMATION118
             ,P_ERL_ATTRIBUTE9      => r_ERL.INFORMATION119
             ,P_ERL_ATTRIBUTE_CATEGORY      => r_ERL.INFORMATION110
             ,P_FORMULA_ID      => l_FORMULA_ID
             ,P_ORDR_TO_APLY_NUM      => r_ERL.INFORMATION260
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
	     ,P_CRITERIA_SCORE       => r_ERL.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_ERL.INFORMATION296

         );

           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_eligy_prfl_rl_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIGY_PRFL_RL_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ERL.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIGY_PRFL_RL_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ERL_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIGY_PRFL_RL_F UPDATE_ELIGY_PROFILE_RULE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ERL.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ERL.information3,
               p_effective_start_date  => r_ERL.information2,
               p_dml_operation         => r_ERL.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIGY_PRFL_RL_ID   := r_ERL.information1;
             l_object_version_number := r_ERL.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIGY_PROFILE_RULE_API.UPDATE_ELIGY_PROFILE_RULE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_DRVBL_FCTR_APLS_FLAG      => r_ERL.INFORMATION11
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIGY_PRFL_RL_ID      => l_eligy_prfl_rl_id
             ,P_ERL_ATTRIBUTE1      => r_ERL.INFORMATION111
             ,P_ERL_ATTRIBUTE10      => r_ERL.INFORMATION120
             ,P_ERL_ATTRIBUTE11      => r_ERL.INFORMATION121
             ,P_ERL_ATTRIBUTE12      => r_ERL.INFORMATION122
             ,P_ERL_ATTRIBUTE13      => r_ERL.INFORMATION123
             ,P_ERL_ATTRIBUTE14      => r_ERL.INFORMATION124
             ,P_ERL_ATTRIBUTE15      => r_ERL.INFORMATION125
             ,P_ERL_ATTRIBUTE16      => r_ERL.INFORMATION126
             ,P_ERL_ATTRIBUTE17      => r_ERL.INFORMATION127
             ,P_ERL_ATTRIBUTE18      => r_ERL.INFORMATION128
             ,P_ERL_ATTRIBUTE19      => r_ERL.INFORMATION129
             ,P_ERL_ATTRIBUTE2      => r_ERL.INFORMATION112
             ,P_ERL_ATTRIBUTE20      => r_ERL.INFORMATION130
             ,P_ERL_ATTRIBUTE21      => r_ERL.INFORMATION131
             ,P_ERL_ATTRIBUTE22      => r_ERL.INFORMATION132
             ,P_ERL_ATTRIBUTE23      => r_ERL.INFORMATION133
             ,P_ERL_ATTRIBUTE24      => r_ERL.INFORMATION134
             ,P_ERL_ATTRIBUTE25      => r_ERL.INFORMATION135
             ,P_ERL_ATTRIBUTE26      => r_ERL.INFORMATION136
             ,P_ERL_ATTRIBUTE27      => r_ERL.INFORMATION137
             ,P_ERL_ATTRIBUTE28      => r_ERL.INFORMATION138
             ,P_ERL_ATTRIBUTE29      => r_ERL.INFORMATION139
             ,P_ERL_ATTRIBUTE3      => r_ERL.INFORMATION113
             ,P_ERL_ATTRIBUTE30      => r_ERL.INFORMATION140
             ,P_ERL_ATTRIBUTE4      => r_ERL.INFORMATION114
             ,P_ERL_ATTRIBUTE5      => r_ERL.INFORMATION115
             ,P_ERL_ATTRIBUTE6      => r_ERL.INFORMATION116
             ,P_ERL_ATTRIBUTE7      => r_ERL.INFORMATION117
             ,P_ERL_ATTRIBUTE8      => r_ERL.INFORMATION118
             ,P_ERL_ATTRIBUTE9      => r_ERL.INFORMATION119
             ,P_ERL_ATTRIBUTE_CATEGORY      => r_ERL.INFORMATION110
             ,P_FORMULA_ID      => l_FORMULA_ID
             ,P_ORDR_TO_APLY_NUM      => r_ERL.INFORMATION260
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
	     ,P_CRITERIA_SCORE       => r_ERL.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_ERL.INFORMATION296

         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_ERL.information3)) then
             --
             BEN_ELIGY_PROFILE_RULE_API.delete_ELIGY_PROFILE_RULE(
                --
                p_validate                       => false
                ,p_eligy_prfl_rl_id                   => l_eligy_prfl_rl_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ERL',r_ERL.information5 ) ;
     --
 end create_ERL_rows;

--
   --
   ---------------------------------------------------------------
   ----------------------< create_EHW_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EHW_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_HRS_WKD_IN_PERD_FCTR_ID  number;
   cursor c_unique_EHW(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_HRS_WKD_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EHW_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EHW(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EHW_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EHW.elig_hrs_wkd_prte_id new_value
   from BEN_ELIG_HRS_WKD_PRTE_F EHW
   where
   EHW.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EHW.HRS_WKD_IN_PERD_FCTR_ID     = l_HRS_WKD_IN_PERD_FCTR_ID  and
   EHW.business_group_id  = c_business_group_id
   and   EHW.elig_hrs_wkd_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_HRS_WKD_PRTE_F EHW1
                where
                EHW1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EHW1.HRS_WKD_IN_PERD_FCTR_ID     = l_HRS_WKD_IN_PERD_FCTR_ID  and
                EHW1.business_group_id  = c_business_group_id
                and   EHW1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_HRS_WKD_PRTE_F EHW2
                where
                EHW2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EHW2.HRS_WKD_IN_PERD_FCTR_ID     = l_HRS_WKD_IN_PERD_FCTR_ID  and
                EHW2.business_group_id  = c_business_group_id
                and   EHW2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EHW                     c_EHW%rowtype;
   l_elig_hrs_wkd_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EHW_unique in c_unique_EHW('EHW') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EHW_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EHW_unique.table_route_id '||r_EHW_unique.table_route_id,10);
       hr_utility.set_location(' r_EHW_unique.information1 '||r_EHW_unique.information1,10);
       hr_utility.set_location( 'r_EHW_unique.information2 '||r_EHW_unique.information2,10);
       hr_utility.set_location( 'r_EHW_unique.information3 '||r_EHW_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EHW_unique.dml_operation ;
       --

/**********************moved from below **********************/
       open c_EHW(r_EHW_unique.table_route_id,
                r_EHW_unique.information1,
                r_EHW_unique.information2,
                r_EHW_unique.information3 ) ;
       --
       fetch c_EHW into r_EHW ;
       --
       close c_EHW ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EHW.INFORMATION263,l_dml_operation);
       l_HRS_WKD_IN_PERD_FCTR_ID := get_fk('HRS_WKD_IN_PERD_FCTR_ID', r_EHW.INFORMATION224,l_dml_operation);

/**********************************************************/
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EHW_unique.information2 and r_EHW_unique.information3 then
               l_update := true;
               if r_EHW_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_HRS_WKD_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_HRS_WKD_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EHW_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EHW_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EHW_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EHW',l_new_value,l_prefix || r_EHW_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EHW_min_max_dates(r_EHW_unique.table_route_id, r_EHW_unique.information1 ) ;
       fetch c_EHW_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EHW_unique.information2);
/**********************moved up from here **********************
       open c_EHW(r_EHW_unique.table_route_id,
                r_EHW_unique.information1,
                r_EHW_unique.information2,
                r_EHW_unique.information3 ) ;
       --
       fetch c_EHW into r_EHW ;
       --
       close c_EHW ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EHW.INFORMATION263,l_dml_operation);
       l_HRS_WKD_IN_PERD_FCTR_ID := get_fk('HRS_WKD_IN_PERD_FCTR_ID', r_EHW.INFORMATION224,l_dml_operation);

**********************************************************/

       if p_reuse_object_flag = 'Y' then
         if c_EHW_min_max_dates%found then
           -- cursor to find the object
           open c_find_EHW_in_target( l_min_esd,l_max_eed, p_target_business_group_id,
                                               nvl(l_elig_hrs_wkd_prte_id, -999)  ) ;
           fetch c_find_EHW_in_target into l_new_value ;
           if c_find_EHW_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_HRS_WKD_PRTE_F',
                   p_base_key_column => 'ELIG_HRS_WKD_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EHW_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_HRS_WKD_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_HRS_WKD_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EHW_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EHW_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EHW_in_target ;
         --
         end if;
       end if ;
       --
       close c_EHW_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EHW.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EHW.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_HRS_WKD_PRTE_F CREATE_ELIG_HRS_WKD_PRTE ',20);
           BEN_ELIG_HRS_WKD_PRTE_API.CREATE_ELIG_HRS_WKD_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EHW_ATTRIBUTE1      => r_EHW.INFORMATION111
             ,P_EHW_ATTRIBUTE10      => r_EHW.INFORMATION120
             ,P_EHW_ATTRIBUTE11      => r_EHW.INFORMATION121
             ,P_EHW_ATTRIBUTE12      => r_EHW.INFORMATION122
             ,P_EHW_ATTRIBUTE13      => r_EHW.INFORMATION123
             ,P_EHW_ATTRIBUTE14      => r_EHW.INFORMATION124
             ,P_EHW_ATTRIBUTE15      => r_EHW.INFORMATION125
             ,P_EHW_ATTRIBUTE16      => r_EHW.INFORMATION126
             ,P_EHW_ATTRIBUTE17      => r_EHW.INFORMATION127
             ,P_EHW_ATTRIBUTE18      => r_EHW.INFORMATION128
             ,P_EHW_ATTRIBUTE19      => r_EHW.INFORMATION129
             ,P_EHW_ATTRIBUTE2      => r_EHW.INFORMATION112
             ,P_EHW_ATTRIBUTE20      => r_EHW.INFORMATION130
             ,P_EHW_ATTRIBUTE21      => r_EHW.INFORMATION131
             ,P_EHW_ATTRIBUTE22      => r_EHW.INFORMATION132
             ,P_EHW_ATTRIBUTE23      => r_EHW.INFORMATION133
             ,P_EHW_ATTRIBUTE24      => r_EHW.INFORMATION134
             ,P_EHW_ATTRIBUTE25      => r_EHW.INFORMATION135
             ,P_EHW_ATTRIBUTE26      => r_EHW.INFORMATION136
             ,P_EHW_ATTRIBUTE27      => r_EHW.INFORMATION137
             ,P_EHW_ATTRIBUTE28      => r_EHW.INFORMATION138
             ,P_EHW_ATTRIBUTE29      => r_EHW.INFORMATION139
             ,P_EHW_ATTRIBUTE3      => r_EHW.INFORMATION113
             ,P_EHW_ATTRIBUTE30      => r_EHW.INFORMATION140
             ,P_EHW_ATTRIBUTE4      => r_EHW.INFORMATION114
             ,P_EHW_ATTRIBUTE5      => r_EHW.INFORMATION115
             ,P_EHW_ATTRIBUTE6      => r_EHW.INFORMATION116
             ,P_EHW_ATTRIBUTE7      => r_EHW.INFORMATION117
             ,P_EHW_ATTRIBUTE8      => r_EHW.INFORMATION118
             ,P_EHW_ATTRIBUTE9      => r_EHW.INFORMATION119
             ,P_EHW_ATTRIBUTE_CATEGORY      => r_EHW.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_HRS_WKD_PRTE_ID      => l_elig_hrs_wkd_prte_id
             ,P_EXCLD_FLAG      => r_EHW.INFORMATION11
             ,P_HRS_WKD_IN_PERD_FCTR_ID      => l_HRS_WKD_IN_PERD_FCTR_ID
             ,P_ORDR_NUM      => r_EHW.INFORMATION260
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_ehw.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_ehw.INFORMATION296
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_hrs_wkd_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_HRS_WKD_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EHW.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_HRS_WKD_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EHW_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_HRS_WKD_PRTE_F UPDATE_ELIG_HRS_WKD_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EHW.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EHW.information3,
               p_effective_start_date  => r_EHW.information2,
               p_dml_operation         => r_EHW.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_HRS_WKD_PRTE_ID   := r_EHW.information1;
             l_object_version_number := r_EHW.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_HRS_WKD_PRTE_API.UPDATE_ELIG_HRS_WKD_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EHW_ATTRIBUTE1      => r_EHW.INFORMATION111
             ,P_EHW_ATTRIBUTE10      => r_EHW.INFORMATION120
             ,P_EHW_ATTRIBUTE11      => r_EHW.INFORMATION121
             ,P_EHW_ATTRIBUTE12      => r_EHW.INFORMATION122
             ,P_EHW_ATTRIBUTE13      => r_EHW.INFORMATION123
             ,P_EHW_ATTRIBUTE14      => r_EHW.INFORMATION124
             ,P_EHW_ATTRIBUTE15      => r_EHW.INFORMATION125
             ,P_EHW_ATTRIBUTE16      => r_EHW.INFORMATION126
             ,P_EHW_ATTRIBUTE17      => r_EHW.INFORMATION127
             ,P_EHW_ATTRIBUTE18      => r_EHW.INFORMATION128
             ,P_EHW_ATTRIBUTE19      => r_EHW.INFORMATION129
             ,P_EHW_ATTRIBUTE2      => r_EHW.INFORMATION112
             ,P_EHW_ATTRIBUTE20      => r_EHW.INFORMATION130
             ,P_EHW_ATTRIBUTE21      => r_EHW.INFORMATION131
             ,P_EHW_ATTRIBUTE22      => r_EHW.INFORMATION132
             ,P_EHW_ATTRIBUTE23      => r_EHW.INFORMATION133
             ,P_EHW_ATTRIBUTE24      => r_EHW.INFORMATION134
             ,P_EHW_ATTRIBUTE25      => r_EHW.INFORMATION135
             ,P_EHW_ATTRIBUTE26      => r_EHW.INFORMATION136
             ,P_EHW_ATTRIBUTE27      => r_EHW.INFORMATION137
             ,P_EHW_ATTRIBUTE28      => r_EHW.INFORMATION138
             ,P_EHW_ATTRIBUTE29      => r_EHW.INFORMATION139
             ,P_EHW_ATTRIBUTE3      => r_EHW.INFORMATION113
             ,P_EHW_ATTRIBUTE30      => r_EHW.INFORMATION140
             ,P_EHW_ATTRIBUTE4      => r_EHW.INFORMATION114
             ,P_EHW_ATTRIBUTE5      => r_EHW.INFORMATION115
             ,P_EHW_ATTRIBUTE6      => r_EHW.INFORMATION116
             ,P_EHW_ATTRIBUTE7      => r_EHW.INFORMATION117
             ,P_EHW_ATTRIBUTE8      => r_EHW.INFORMATION118
             ,P_EHW_ATTRIBUTE9      => r_EHW.INFORMATION119
             ,P_EHW_ATTRIBUTE_CATEGORY      => r_EHW.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_HRS_WKD_PRTE_ID      => l_elig_hrs_wkd_prte_id
             ,P_EXCLD_FLAG      => r_EHW.INFORMATION11
             ,P_HRS_WKD_IN_PERD_FCTR_ID      => l_HRS_WKD_IN_PERD_FCTR_ID
             ,P_ORDR_NUM      => r_EHW.INFORMATION260
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_ehw.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_ehw.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EHW.information3)) then
             --
             BEN_ELIG_HRS_WKD_PRTE_API.delete_ELIG_HRS_WKD_PRTE(
                --
                p_validate                       => false
                ,p_elig_hrs_wkd_prte_id                   => l_elig_hrs_wkd_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EHW',r_EHW.information5 ) ;
     --
 end create_EHW_rows;



   --
   ---------------------------------------------------------------
   ----------------------< create_EJP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EJP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_JOB_ID  number; -- IK 9999 Mapping fix needed
   l_ORDR_NUM  number ;
   cursor c_unique_EJP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_JOB_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EJP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EJP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EJP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EJP.elig_job_prte_id new_value
   from BEN_ELIG_JOB_PRTE_F EJP
   where
   EJP.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EJP.JOB_ID     = l_JOB_ID  and
   EJP.ORDR_NUM   = l_ORDR_NUM  and
   EJP.business_group_id  = c_business_group_id
   and   EJP.elig_job_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_JOB_PRTE_F EJP1
                where
                EJP1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EJP1.JOB_ID     = l_JOB_ID  and
                EJP1.ORDR_NUM   = l_ORDR_NUM and
                EJP1.business_group_id  = c_business_group_id
                and   EJP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_JOB_PRTE_F EJP2
                where
                EJP2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EJP2.JOB_ID     = l_JOB_ID  and
                EJP2.ORDR_NUM   = l_ORDR_NUM and
                EJP2.business_group_id  = c_business_group_id
                and   EJP2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EJP                     c_EJP%rowtype;
   l_elig_job_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EJP_unique in c_unique_EJP('EJP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EJP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EJP_unique.table_route_id '||r_EJP_unique.table_route_id,10);
       hr_utility.set_location(' r_EJP_unique.information1 '||r_EJP_unique.information1,10);
       hr_utility.set_location( 'r_EJP_unique.information2 '||r_EJP_unique.information2,10);
       hr_utility.set_location( 'r_EJP_unique.information3 '||r_EJP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EJP_unique.dml_operation ;
/**********************moved from below **********************/
       open c_EJP(r_EJP_unique.table_route_id,
                r_EJP_unique.information1,
                r_EJP_unique.information2,
                r_EJP_unique.information3 ) ;
       --
       fetch c_EJP into r_EJP ;
       --
       close c_EJP ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EJP.INFORMATION263,l_dml_operation);
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_JOB_ID := r_EJP.information176;
       else
         l_JOB_ID := r_EJP.information174;
       end if;
       --
       l_ORDR_NUM  := r_EJP.information260 ;


/**********************************************************/
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EJP_unique.information2 and r_EJP_unique.information3 then
               l_update := true;
               if r_EJP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_JOB_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_JOB_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EJP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EJP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EJP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EJP',l_new_value,l_prefix || r_EJP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EJP_min_max_dates(r_EJP_unique.table_route_id, r_EJP_unique.information1 ) ;
       fetch c_EJP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EJP_unique.information2);
/**********************moved up from here **********************
       open c_EJP(r_EJP_unique.table_route_id,
                r_EJP_unique.information1,
                r_EJP_unique.information2,
                r_EJP_unique.information3 ) ;
       --
       fetch c_EJP into r_EJP ;
       --
       close c_EJP ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EJP.INFORMATION263,l_dml_operation);

**********************************************************/


       if l_JOB_ID is null then
         close c_EJP_min_max_dates;
         --
         BEN_PD_COPY_TO_BEN_three.log_nomapping_data(p_parent_table_alias =>'ELP'
                     ,p_parent_pk_id         => r_EJP.information263
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'EJP'
                     ,p_child_data           => r_EJP.information173 );

         --
       else
         if p_reuse_object_flag = 'Y' then
           if c_EJP_min_max_dates%found then
              -- cursor to find the object
              open c_find_EJP_in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_elig_job_prte_id, -999)  ) ;
              fetch c_find_EJP_in_target into l_new_value ;
              if c_find_EJP_in_target%found then
                --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_JOB_PRTE_F',
                   p_base_key_column => 'ELIG_JOB_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
                if r_EJP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_JOB_PRTE_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_JOB_PRTE_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EJP_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EJP_unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
              end if;
              close c_find_EJP_in_target ;
           --
           end if;
         end if ;
         --
         close c_EJP_min_max_dates ;

	 end if ; -- -- bug 4565106
       end if; --if p_dml_operation
       --
       if ( not l_object_found_in_target OR l_update ) and l_job_id is not null then

           --
           l_current_pk_id := r_EJP.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_EJP.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_ELIG_JOB_PRTE_F CREATE_ELIGY_JOB_PRTE ',20);
             BEN_ELIGY_JOB_PRTE_API.CREATE_ELIGY_JOB_PRTE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
				 ,P_EJP_ATTRIBUTE1      => r_EJP.INFORMATION111
				 ,P_EJP_ATTRIBUTE10      => r_EJP.INFORMATION120
				 ,P_EJP_ATTRIBUTE11      => r_EJP.INFORMATION121
				 ,P_EJP_ATTRIBUTE12      => r_EJP.INFORMATION122
				 ,P_EJP_ATTRIBUTE13      => r_EJP.INFORMATION123
				 ,P_EJP_ATTRIBUTE14      => r_EJP.INFORMATION124
				 ,P_EJP_ATTRIBUTE15      => r_EJP.INFORMATION125
				 ,P_EJP_ATTRIBUTE16      => r_EJP.INFORMATION126
				 ,P_EJP_ATTRIBUTE17      => r_EJP.INFORMATION127
				 ,P_EJP_ATTRIBUTE18      => r_EJP.INFORMATION128
				 ,P_EJP_ATTRIBUTE19      => r_EJP.INFORMATION129
				 ,P_EJP_ATTRIBUTE2      => r_EJP.INFORMATION112
				 ,P_EJP_ATTRIBUTE20      => r_EJP.INFORMATION130
				 ,P_EJP_ATTRIBUTE21      => r_EJP.INFORMATION131
				 ,P_EJP_ATTRIBUTE22      => r_EJP.INFORMATION132
				 ,P_EJP_ATTRIBUTE23      => r_EJP.INFORMATION133
				 ,P_EJP_ATTRIBUTE24      => r_EJP.INFORMATION134
				 ,P_EJP_ATTRIBUTE25      => r_EJP.INFORMATION135
				 ,P_EJP_ATTRIBUTE26      => r_EJP.INFORMATION136
				 ,P_EJP_ATTRIBUTE27      => r_EJP.INFORMATION137
				 ,P_EJP_ATTRIBUTE28      => r_EJP.INFORMATION138
				 ,P_EJP_ATTRIBUTE29      => r_EJP.INFORMATION139
				 ,P_EJP_ATTRIBUTE3      => r_EJP.INFORMATION113
				 ,P_EJP_ATTRIBUTE30      => r_EJP.INFORMATION140
				 ,P_EJP_ATTRIBUTE4      => r_EJP.INFORMATION114
				 ,P_EJP_ATTRIBUTE5      => r_EJP.INFORMATION115
				 ,P_EJP_ATTRIBUTE6      => r_EJP.INFORMATION116
				 ,P_EJP_ATTRIBUTE7      => r_EJP.INFORMATION117
				 ,P_EJP_ATTRIBUTE8      => r_EJP.INFORMATION118
				 ,P_EJP_ATTRIBUTE9      => r_EJP.INFORMATION119
				 ,P_EJP_ATTRIBUTE_CATEGORY      => r_EJP.INFORMATION110
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_JOB_PRTE_ID      => l_elig_job_prte_id
				 ,P_EXCLD_FLAG      => r_EJP.INFORMATION11
				 ,P_JOB_ID      => l_JOB_ID
				 ,P_ORDR_NUM      => r_EJP.INFORMATION260
	   --
--		****** END CHANGE LINES

	   --

				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
                                 ,P_CRITERIA_SCORE       => r_ejp.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_ejp.INFORMATION296
			 );
              -- insert the table_name,old_pk_id,new_pk_id into a plsql record
              -- Update all relevent cer records with new pk_id
              hr_utility.set_location('Before plsql table ',222);
              hr_utility.set_location('new_value id '||l_elig_job_prte_id,222);
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_JOB_PRTE_ID' ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EJP.information1 ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_JOB_PRTE_ID ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EJP_unique.table_route_id;
              hr_utility.set_location('After plsql table ',222);
              --
              -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
              --
              BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
              --
            else
              --
              -- Call Update routine for the pk_id created in prev run .
              -- insert the table_name,old_pk_id,new_pk_id into a plsql record
              hr_utility.set_location(' BEN_ELIG_JOB_PRTE_F UPDATE_ELIGY_JOB_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EJP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EJP.information3,
               p_effective_start_date  => r_EJP.information2,
               p_dml_operation         => r_EJP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_JOB_PRTE_ID   := r_EJP.information1;
             l_object_version_number := r_EJP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


              BEN_ELIGY_JOB_PRTE_API.UPDATE_ELIGY_JOB_PRTE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
				 ,P_EJP_ATTRIBUTE1      => r_EJP.INFORMATION111
				 ,P_EJP_ATTRIBUTE10      => r_EJP.INFORMATION120
				 ,P_EJP_ATTRIBUTE11      => r_EJP.INFORMATION121
				 ,P_EJP_ATTRIBUTE12      => r_EJP.INFORMATION122
				 ,P_EJP_ATTRIBUTE13      => r_EJP.INFORMATION123
				 ,P_EJP_ATTRIBUTE14      => r_EJP.INFORMATION124
				 ,P_EJP_ATTRIBUTE15      => r_EJP.INFORMATION125
				 ,P_EJP_ATTRIBUTE16      => r_EJP.INFORMATION126
				 ,P_EJP_ATTRIBUTE17      => r_EJP.INFORMATION127
				 ,P_EJP_ATTRIBUTE18      => r_EJP.INFORMATION128
				 ,P_EJP_ATTRIBUTE19      => r_EJP.INFORMATION129
				 ,P_EJP_ATTRIBUTE2      => r_EJP.INFORMATION112
				 ,P_EJP_ATTRIBUTE20      => r_EJP.INFORMATION130
				 ,P_EJP_ATTRIBUTE21      => r_EJP.INFORMATION131
				 ,P_EJP_ATTRIBUTE22      => r_EJP.INFORMATION132
				 ,P_EJP_ATTRIBUTE23      => r_EJP.INFORMATION133
				 ,P_EJP_ATTRIBUTE24      => r_EJP.INFORMATION134
				 ,P_EJP_ATTRIBUTE25      => r_EJP.INFORMATION135
				 ,P_EJP_ATTRIBUTE26      => r_EJP.INFORMATION136
				 ,P_EJP_ATTRIBUTE27      => r_EJP.INFORMATION137
				 ,P_EJP_ATTRIBUTE28      => r_EJP.INFORMATION138
				 ,P_EJP_ATTRIBUTE29      => r_EJP.INFORMATION139
				 ,P_EJP_ATTRIBUTE3      => r_EJP.INFORMATION113
				 ,P_EJP_ATTRIBUTE30      => r_EJP.INFORMATION140
				 ,P_EJP_ATTRIBUTE4      => r_EJP.INFORMATION114
				 ,P_EJP_ATTRIBUTE5      => r_EJP.INFORMATION115
				 ,P_EJP_ATTRIBUTE6      => r_EJP.INFORMATION116
				 ,P_EJP_ATTRIBUTE7      => r_EJP.INFORMATION117
				 ,P_EJP_ATTRIBUTE8      => r_EJP.INFORMATION118
				 ,P_EJP_ATTRIBUTE9      => r_EJP.INFORMATION119
				 ,P_EJP_ATTRIBUTE_CATEGORY      => r_EJP.INFORMATION110
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_JOB_PRTE_ID      => l_elig_job_prte_id
				 ,P_EXCLD_FLAG      => r_EJP.INFORMATION11
				 ,P_JOB_ID      => l_JOB_ID
				 ,P_ORDR_NUM      => r_EJP.INFORMATION260
	   --
	--   ****** END CHANGE LINES

	   --
				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER => l_object_version_number
				 ,P_DATETRACK_MODE        => l_datetrack_mode
                                 ,P_CRITERIA_SCORE       => r_ejp.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_ejp.INFORMATION296
			 );
	end if;  -- l_update
              --
            end if;
            --
            -- Delete the row if it is end dated.
            --
            if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = trunc(r_EJP.information3)) then
                --
                BEN_ELIGY_JOB_PRTE_API.delete_ELIGY_JOB_PRTE(
                   --
                   p_validate                       => false
                   ,p_elig_job_prte_id                   => l_elig_job_prte_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
            end if;
            --
            l_prev_pk_id := l_current_pk_id ;
            --
        --  end if; -- bug 4565106
          --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EJP',r_EJP.information5 ) ;
     --
 end create_EJP_rows;



   --
   ---------------------------------------------------------------
   ----------------------< create_ELU_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ELU_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_LBR_MMBR_FLAG  varchar2(30); --IK Added
   cursor c_unique_ELU(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_LBR_MMBR_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ELU_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ELU(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ELU_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ELU.elig_lbr_mmbr_prte_id new_value
   from BEN_ELIG_LBR_MMBR_PRTE_F ELU
   where
   ELU.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   ELU.LBR_MMBR_FLAG    = l_LBR_MMBR_FLAG and  -- IK Added
   ELU.business_group_id  = c_business_group_id
   and   ELU.elig_lbr_mmbr_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_LBR_MMBR_PRTE_F ELU1
                where
                ELU1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                ELU1.LBR_MMBR_FLAG    = l_LBR_MMBR_FLAG and
                ELU1.business_group_id  = c_business_group_id
                and   ELU1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_LBR_MMBR_PRTE_F ELU2
                where
                ELU2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                ELU2.LBR_MMBR_FLAG    = l_LBR_MMBR_FLAG and
                ELU2.business_group_id  = c_business_group_id
                and   ELU2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ELU                     c_ELU%rowtype;
   l_elig_lbr_mmbr_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ELU_unique in c_unique_ELU('ELU') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ELU_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_ELU_unique.table_route_id '||r_ELU_unique.table_route_id,10);
       hr_utility.set_location(' r_ELU_unique.information1 '||r_ELU_unique.information1,10);
       hr_utility.set_location( 'r_ELU_unique.information2 '||r_ELU_unique.information2,10);
       hr_utility.set_location( 'r_ELU_unique.information3 '||r_ELU_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ELU_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_ELU(r_ELU_unique.table_route_id,
                r_ELU_unique.information1,
                r_ELU_unique.information2,
                r_ELU_unique.information3 ) ;
       --
       fetch c_ELU into r_ELU ;
       --
       close c_ELU ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ELU.INFORMATION263,l_dml_operation);--changed from 11
       l_LBR_MMBR_FLAG := r_ELU.INFORMATION12 ; -- IK Added
/**********************************************************/
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ELU_unique.information2 and r_ELU_unique.information3 then
               l_update := true;
               if r_ELU_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_LBR_MMBR_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_LBR_MMBR_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ELU_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ELU_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ELU_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ELU',l_new_value,l_prefix || r_ELU_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ELU_min_max_dates(r_ELU_unique.table_route_id, r_ELU_unique.information1 ) ;
       fetch c_ELU_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
        l_min_esd := greatest(l_min_esd,r_ELU_unique.information2);
/**********************moved up from here **********************
       open c_ELU(r_ELU_unique.table_route_id,
                r_ELU_unique.information1,
                r_ELU_unique.information2,
                r_ELU_unique.information3 ) ;
       --
       fetch c_ELU into r_ELU ;
       --
       close c_ELU ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ELU.INFORMATION263,l_dml_operation);--changed from 11
       l_LBR_MMBR_FLAG := r_ELU.INFORMATION12 ; -- IK Added
**********************************************************/

       if p_reuse_object_flag = 'Y' then
         if c_ELU_min_max_dates%found then
           -- cursor to find the object
           open c_find_ELU_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_lbr_mmbr_prte_id, -999)  ) ;
           fetch c_find_ELU_in_target into l_new_value ;
           if c_find_ELU_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_LBR_MMBR_PRTE_F',
                   p_base_key_column => 'ELIG_LBR_MMBR_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_ELU_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_LBR_MMBR_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_LBR_MMBR_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ELU_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ELU_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_ELU_in_target ;
         --
         end if;
       end if ;
       --
       close c_ELU_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_ELU.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_ELU.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_LBR_MMBR_PRTE_F CREATE_ELIG_LBR_MMBR_PRTE ',20);
           BEN_ELIG_LBR_MMBR_PRTE_API.CREATE_ELIG_LBR_MMBR_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_LBR_MMBR_PRTE_ID      => l_elig_lbr_mmbr_prte_id
             ,P_ELU_ATTRIBUTE1      => r_ELU.INFORMATION111
             ,P_ELU_ATTRIBUTE10      => r_ELU.INFORMATION120
             ,P_ELU_ATTRIBUTE11      => r_ELU.INFORMATION121
             ,P_ELU_ATTRIBUTE12      => r_ELU.INFORMATION122
             ,P_ELU_ATTRIBUTE13      => r_ELU.INFORMATION123
             ,P_ELU_ATTRIBUTE14      => r_ELU.INFORMATION124
             ,P_ELU_ATTRIBUTE15      => r_ELU.INFORMATION125
             ,P_ELU_ATTRIBUTE16      => r_ELU.INFORMATION126
             ,P_ELU_ATTRIBUTE17      => r_ELU.INFORMATION127
             ,P_ELU_ATTRIBUTE18      => r_ELU.INFORMATION128
             ,P_ELU_ATTRIBUTE19      => r_ELU.INFORMATION129
             ,P_ELU_ATTRIBUTE2      => r_ELU.INFORMATION112
             ,P_ELU_ATTRIBUTE20      => r_ELU.INFORMATION130
             ,P_ELU_ATTRIBUTE21      => r_ELU.INFORMATION131
             ,P_ELU_ATTRIBUTE22      => r_ELU.INFORMATION132
             ,P_ELU_ATTRIBUTE23      => r_ELU.INFORMATION133
             ,P_ELU_ATTRIBUTE24      => r_ELU.INFORMATION134
             ,P_ELU_ATTRIBUTE25      => r_ELU.INFORMATION135
             ,P_ELU_ATTRIBUTE26      => r_ELU.INFORMATION136
             ,P_ELU_ATTRIBUTE27      => r_ELU.INFORMATION137
             ,P_ELU_ATTRIBUTE28      => r_ELU.INFORMATION138
             ,P_ELU_ATTRIBUTE29      => r_ELU.INFORMATION139
             ,P_ELU_ATTRIBUTE3      => r_ELU.INFORMATION113
             ,P_ELU_ATTRIBUTE30      => r_ELU.INFORMATION140
             ,P_ELU_ATTRIBUTE4      => r_ELU.INFORMATION114
             ,P_ELU_ATTRIBUTE5      => r_ELU.INFORMATION115
             ,P_ELU_ATTRIBUTE6      => r_ELU.INFORMATION116
             ,P_ELU_ATTRIBUTE7      => r_ELU.INFORMATION117
             ,P_ELU_ATTRIBUTE8      => r_ELU.INFORMATION118
             ,P_ELU_ATTRIBUTE9      => r_ELU.INFORMATION119
             ,P_ELU_ATTRIBUTE_CATEGORY      => r_ELU.INFORMATION110
             ,P_EXCLD_FLAG      => r_ELU.INFORMATION11
             ,P_LBR_MMBR_FLAG      => r_ELU.INFORMATION12
             ,P_ORDR_NUM      => r_ELU.INFORMATION260
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_elu.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_elu.INFORMATION296
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_lbr_mmbr_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_LBR_MMBR_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ELU.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_LBR_MMBR_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ELU_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_LBR_MMBR_PRTE_F UPDATE_ELIG_LBR_MMBR_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ELU.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ELU.information3,
               p_effective_start_date  => r_ELU.information2,
               p_dml_operation         => r_ELU.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_LBR_MMBR_PRTE_ID   := r_ELU.information1;
             l_object_version_number := r_ELU.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_LBR_MMBR_PRTE_API.UPDATE_ELIG_LBR_MMBR_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_LBR_MMBR_PRTE_ID      => l_elig_lbr_mmbr_prte_id
             ,P_ELU_ATTRIBUTE1      => r_ELU.INFORMATION111
             ,P_ELU_ATTRIBUTE10      => r_ELU.INFORMATION120
             ,P_ELU_ATTRIBUTE11      => r_ELU.INFORMATION121
             ,P_ELU_ATTRIBUTE12      => r_ELU.INFORMATION122
             ,P_ELU_ATTRIBUTE13      => r_ELU.INFORMATION123
             ,P_ELU_ATTRIBUTE14      => r_ELU.INFORMATION124
             ,P_ELU_ATTRIBUTE15      => r_ELU.INFORMATION125
             ,P_ELU_ATTRIBUTE16      => r_ELU.INFORMATION126
             ,P_ELU_ATTRIBUTE17      => r_ELU.INFORMATION127
             ,P_ELU_ATTRIBUTE18      => r_ELU.INFORMATION128
             ,P_ELU_ATTRIBUTE19      => r_ELU.INFORMATION129
             ,P_ELU_ATTRIBUTE2      => r_ELU.INFORMATION112
             ,P_ELU_ATTRIBUTE20      => r_ELU.INFORMATION130
             ,P_ELU_ATTRIBUTE21      => r_ELU.INFORMATION131
             ,P_ELU_ATTRIBUTE22      => r_ELU.INFORMATION132
             ,P_ELU_ATTRIBUTE23      => r_ELU.INFORMATION133
             ,P_ELU_ATTRIBUTE24      => r_ELU.INFORMATION134
             ,P_ELU_ATTRIBUTE25      => r_ELU.INFORMATION135
             ,P_ELU_ATTRIBUTE26      => r_ELU.INFORMATION136
             ,P_ELU_ATTRIBUTE27      => r_ELU.INFORMATION137
             ,P_ELU_ATTRIBUTE28      => r_ELU.INFORMATION138
             ,P_ELU_ATTRIBUTE29      => r_ELU.INFORMATION139
             ,P_ELU_ATTRIBUTE3      => r_ELU.INFORMATION113
             ,P_ELU_ATTRIBUTE30      => r_ELU.INFORMATION140
             ,P_ELU_ATTRIBUTE4      => r_ELU.INFORMATION114
             ,P_ELU_ATTRIBUTE5      => r_ELU.INFORMATION115
             ,P_ELU_ATTRIBUTE6      => r_ELU.INFORMATION116
             ,P_ELU_ATTRIBUTE7      => r_ELU.INFORMATION117
             ,P_ELU_ATTRIBUTE8      => r_ELU.INFORMATION118
             ,P_ELU_ATTRIBUTE9      => r_ELU.INFORMATION119
             ,P_ELU_ATTRIBUTE_CATEGORY      => r_ELU.INFORMATION110
             ,P_EXCLD_FLAG      => r_ELU.INFORMATION11
             ,P_LBR_MMBR_FLAG      => r_ELU.INFORMATION12
             ,P_ORDR_NUM      => r_ELU.INFORMATION260
   --
   -- ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_elu.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_elu.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_ELU.information3)) then
             --
             BEN_ELIG_LBR_MMBR_PRTE_API.delete_ELIG_LBR_MMBR_PRTE(
                --
                p_validate                       => false
                ,p_elig_lbr_mmbr_prte_id                   => l_elig_lbr_mmbr_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ELU',r_ELU.information5 ) ;
     --
 end create_ELU_rows;


   --
   ---------------------------------------------------------------
   ----------------------< create_ELN_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ELN_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_ORGANIZATION_ID  number; -- IK 9999 Padma Mapping Required
   cursor c_unique_ELN(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_LGL_ENTY_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ELN_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ELN(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ELN_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ELN.elig_lgl_enty_prte_id new_value
   from BEN_ELIG_LGL_ENTY_PRTE_F ELN
   where
   ELN.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   ELN.ORGANIZATION_ID     = l_ORGANIZATION_ID  and
   ELN.business_group_id  = c_business_group_id
   and   ELN.elig_lgl_enty_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_LGL_ENTY_PRTE_F ELN1
                where
                ELN1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                ELN1.ORGANIZATION_ID     = l_ORGANIZATION_ID  and
                ELN1.business_group_id  = c_business_group_id
                and   ELN1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_LGL_ENTY_PRTE_F ELN2
                where
                ELN2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                ELN2.ORGANIZATION_ID     = l_ORGANIZATION_ID  and
                ELN2.business_group_id  = c_business_group_id
                and   ELN2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ELN                     c_ELN%rowtype;
   l_elig_lgl_enty_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ELN_unique in c_unique_ELN('ELN') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ELN_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_ELN_unique.table_route_id '||r_ELN_unique.table_route_id,10);
       hr_utility.set_location(' r_ELN_unique.information1 '||r_ELN_unique.information1,10);
       hr_utility.set_location( 'r_ELN_unique.information2 '||r_ELN_unique.information2,10);
       hr_utility.set_location( 'r_ELN_unique.information3 '||r_ELN_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ELN_unique.dml_operation ;

/**********************moved from below **********************/
       open c_ELN(r_ELN_unique.table_route_id,
                r_ELN_unique.information1,
                r_ELN_unique.information2,
                r_ELN_unique.information3 ) ;
       --
       fetch c_ELN into r_ELN ;
       --
       close c_ELN ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ELN.INFORMATION263,l_dml_operation);-- changed from information11

       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_ORGANIZATION_ID := r_ELN.information176;
       else
         l_ORGANIZATION_ID := r_ELN.information174;
       end if;

/**********************************************************/
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ELN_unique.information2 and r_ELN_unique.information3 then
               l_update := true;
               if r_ELN_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_LGL_ENTY_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_LGL_ENTY_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ELN_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ELN_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ELN_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ELN',l_new_value,l_prefix || r_ELN_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ELN_min_max_dates(r_ELN_unique.table_route_id, r_ELN_unique.information1 ) ;
       fetch c_ELN_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
        l_min_esd := greatest(l_min_esd,r_ELN_unique.information2);
/**********************moved up from here **********************
       open c_ELN(r_ELN_unique.table_route_id,
                r_ELN_unique.information1,
                r_ELN_unique.information2,
                r_ELN_unique.information3 ) ;
       --
       fetch c_ELN into r_ELN ;
       --
       close c_ELN ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ELN.INFORMATION263,l_dml_operation);-- changed from information11
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_ORGANIZATION_ID := r_ELN.information176;
       else
         l_ORGANIZATION_ID := r_ELN.information174;
       end if;

**********************************************************/
       --
       if l_ORGANIZATION_ID is null then
         close c_ELN_min_max_dates;
         --
         BEN_PD_COPY_TO_BEN_three.log_nomapping_data(p_parent_table_alias =>'ELP'
                     ,p_parent_pk_id         => r_ELN.information263
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'ELN'
                     ,p_child_data           => r_ELN.information173 );

         --
       else
         if p_reuse_object_flag = 'Y' then
           if c_ELN_min_max_dates%found then
              -- cursor to find the object
              open c_find_ELN_in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_elig_lgl_enty_prte_id, -999)  ) ;
              fetch c_find_ELN_in_target into l_new_value ;
              if c_find_ELN_in_target%found then
                --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_LGL_ENTY_PRTE_F',
                   p_base_key_column => 'ELIG_LGL_ENTY_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
                if r_ELN_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_LGL_ENTY_PRTE_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_LGL_ENTY_PRTE_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ELN_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ELN_unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
              end if;
              close c_find_ELN_in_target ;
           --
           end if;
         end if ;
         --
         close c_ELN_min_max_dates ;
	 end if ; -- bug 4565106

       end if; --if p_dml_operation
       --
       if (not l_object_found_in_target OR l_update) and l_organization_id is not null  then

           --
           l_current_pk_id := r_ELN.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_ELN.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_ELIG_LGL_ENTY_PRTE_F CREATE_ELIG_LGL_ENTY_PRTE ',20);
             BEN_ELIG_LGL_ENTY_PRTE_API.CREATE_ELIG_LGL_ENTY_PRTE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_LGL_ENTY_PRTE_ID      => l_elig_lgl_enty_prte_id
				 ,P_ELN_ATTRIBUTE1      => r_ELN.INFORMATION111
				 ,P_ELN_ATTRIBUTE10      => r_ELN.INFORMATION120
				 ,P_ELN_ATTRIBUTE11      => r_ELN.INFORMATION121
				 ,P_ELN_ATTRIBUTE12      => r_ELN.INFORMATION122
				 ,P_ELN_ATTRIBUTE13      => r_ELN.INFORMATION123
				 ,P_ELN_ATTRIBUTE14      => r_ELN.INFORMATION124
				 ,P_ELN_ATTRIBUTE15      => r_ELN.INFORMATION125
				 ,P_ELN_ATTRIBUTE16      => r_ELN.INFORMATION126
				 ,P_ELN_ATTRIBUTE17      => r_ELN.INFORMATION127
				 ,P_ELN_ATTRIBUTE18      => r_ELN.INFORMATION128
				 ,P_ELN_ATTRIBUTE19      => r_ELN.INFORMATION129
				 ,P_ELN_ATTRIBUTE2      => r_ELN.INFORMATION112
				 ,P_ELN_ATTRIBUTE20      => r_ELN.INFORMATION130
				 ,P_ELN_ATTRIBUTE21      => r_ELN.INFORMATION131
				 ,P_ELN_ATTRIBUTE22      => r_ELN.INFORMATION132
				 ,P_ELN_ATTRIBUTE23      => r_ELN.INFORMATION133
				 ,P_ELN_ATTRIBUTE24      => r_ELN.INFORMATION134
				 ,P_ELN_ATTRIBUTE25      => r_ELN.INFORMATION135
				 ,P_ELN_ATTRIBUTE26      => r_ELN.INFORMATION136
				 ,P_ELN_ATTRIBUTE27      => r_ELN.INFORMATION137
				 ,P_ELN_ATTRIBUTE28      => r_ELN.INFORMATION138
				 ,P_ELN_ATTRIBUTE29      => r_ELN.INFORMATION139
				 ,P_ELN_ATTRIBUTE3      => r_ELN.INFORMATION113
				 ,P_ELN_ATTRIBUTE30      => r_ELN.INFORMATION140
				 ,P_ELN_ATTRIBUTE4      => r_ELN.INFORMATION114
				 ,P_ELN_ATTRIBUTE5      => r_ELN.INFORMATION115
				 ,P_ELN_ATTRIBUTE6      => r_ELN.INFORMATION116
				 ,P_ELN_ATTRIBUTE7      => r_ELN.INFORMATION117
				 ,P_ELN_ATTRIBUTE8      => r_ELN.INFORMATION118
				 ,P_ELN_ATTRIBUTE9      => r_ELN.INFORMATION119
				 ,P_ELN_ATTRIBUTE_CATEGORY      => r_ELN.INFORMATION110
				 ,P_EXCLD_FLAG      => r_ELN.INFORMATION11
				 ,P_ORDR_NUM      => r_ELN.INFORMATION260
				 ,P_ORGANIZATION_ID      => l_ORGANIZATION_ID
	   --
	--    ****** END CHANGE LINES

	   --

				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
                                 ,P_CRITERIA_SCORE       => r_eln.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_eln.INFORMATION296
			 );
              -- insert the table_name,old_pk_id,new_pk_id into a plsql record
              -- Update all relevent cer records with new pk_id
              hr_utility.set_location('Before plsql table ',222);
              hr_utility.set_location('new_value id '||l_elig_lgl_enty_prte_id,222);
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_LGL_ENTY_PRTE_ID' ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ELN.information1 ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_LGL_ENTY_PRTE_ID ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ELN_unique.table_route_id;
              hr_utility.set_location('After plsql table ',222);
              --
              -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
              --
              BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
              --
            else
              --
              -- Call Update routine for the pk_id created in prev run .
              -- insert the table_name,old_pk_id,new_pk_id into a plsql record
              hr_utility.set_location(' BEN_ELIG_LGL_ENTY_PRTE_F UPDATE_ELIG_LGL_ENTY_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ELN.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ELN.information3,
               p_effective_start_date  => r_ELN.information2,
               p_dml_operation         => r_ELN.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_LGL_ENTY_PRTE_ID   := r_ELN.information1;
             l_object_version_number := r_ELN.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


              BEN_ELIG_LGL_ENTY_PRTE_API.UPDATE_ELIG_LGL_ENTY_PRTE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_LGL_ENTY_PRTE_ID      => l_elig_lgl_enty_prte_id
				 ,P_ELN_ATTRIBUTE1      => r_ELN.INFORMATION111
				 ,P_ELN_ATTRIBUTE10      => r_ELN.INFORMATION120
				 ,P_ELN_ATTRIBUTE11      => r_ELN.INFORMATION121
				 ,P_ELN_ATTRIBUTE12      => r_ELN.INFORMATION122
				 ,P_ELN_ATTRIBUTE13      => r_ELN.INFORMATION123
				 ,P_ELN_ATTRIBUTE14      => r_ELN.INFORMATION124
				 ,P_ELN_ATTRIBUTE15      => r_ELN.INFORMATION125
				 ,P_ELN_ATTRIBUTE16      => r_ELN.INFORMATION126
				 ,P_ELN_ATTRIBUTE17      => r_ELN.INFORMATION127
				 ,P_ELN_ATTRIBUTE18      => r_ELN.INFORMATION128
				 ,P_ELN_ATTRIBUTE19      => r_ELN.INFORMATION129
				 ,P_ELN_ATTRIBUTE2      => r_ELN.INFORMATION112
				 ,P_ELN_ATTRIBUTE20      => r_ELN.INFORMATION130
				 ,P_ELN_ATTRIBUTE21      => r_ELN.INFORMATION131
				 ,P_ELN_ATTRIBUTE22      => r_ELN.INFORMATION132
				 ,P_ELN_ATTRIBUTE23      => r_ELN.INFORMATION133
				 ,P_ELN_ATTRIBUTE24      => r_ELN.INFORMATION134
				 ,P_ELN_ATTRIBUTE25      => r_ELN.INFORMATION135
				 ,P_ELN_ATTRIBUTE26      => r_ELN.INFORMATION136
				 ,P_ELN_ATTRIBUTE27      => r_ELN.INFORMATION137
				 ,P_ELN_ATTRIBUTE28      => r_ELN.INFORMATION138
				 ,P_ELN_ATTRIBUTE29      => r_ELN.INFORMATION139
				 ,P_ELN_ATTRIBUTE3      => r_ELN.INFORMATION113
				 ,P_ELN_ATTRIBUTE30      => r_ELN.INFORMATION140
				 ,P_ELN_ATTRIBUTE4      => r_ELN.INFORMATION114
				 ,P_ELN_ATTRIBUTE5      => r_ELN.INFORMATION115
				 ,P_ELN_ATTRIBUTE6      => r_ELN.INFORMATION116
				 ,P_ELN_ATTRIBUTE7      => r_ELN.INFORMATION117
				 ,P_ELN_ATTRIBUTE8      => r_ELN.INFORMATION118
				 ,P_ELN_ATTRIBUTE9      => r_ELN.INFORMATION119
				 ,P_ELN_ATTRIBUTE_CATEGORY      => r_ELN.INFORMATION110
				 ,P_EXCLD_FLAG      => r_ELN.INFORMATION11
				 ,P_ORDR_NUM      => r_ELN.INFORMATION260
				 ,P_ORGANIZATION_ID      => l_ORGANIZATION_ID
	   --
--	   ****** END CHANGE LINES

	   --
				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER => l_object_version_number
				 ,P_DATETRACK_MODE        => l_datetrack_mode
                                 ,P_CRITERIA_SCORE       => r_eln.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_eln.INFORMATION296
			 );
	end if;  -- l_update
              --
            end if;
            --
            -- Delete the row if it is end dated.
            --
            if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = trunc(r_ELN.information3)) then
                --
                BEN_ELIG_LGL_ENTY_PRTE_API.delete_ELIG_LGL_ENTY_PRTE(
                   --
                   p_validate                       => false
                   ,p_elig_lgl_enty_prte_id                   => l_elig_lgl_enty_prte_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
            end if;
            --
            l_prev_pk_id := l_current_pk_id ;
            --
         -- end if; -- bug 4565106
          --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ELN',r_ELN.information5 ) ;
     --
 end create_ELN_rows;


   --
   ---------------------------------------------------------------
   ----------------------< create_ELR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ELR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ABSENCE_ATTENDANCE_TYPE_ID  number; -- IK 9999 Mapping required
   l_ABS_ATTENDANCE_REASON_ID  number;
   l_ELIGY_PRFL_ID  number;
   cursor c_unique_ELR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_LOA_RSN_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ELR_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ELR(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ELR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ELR.elig_loa_rsn_prte_id new_value
   from BEN_ELIG_LOA_RSN_PRTE_F ELR
   where
   ELR.ABSENCE_ATTENDANCE_TYPE_ID     = l_ABSENCE_ATTENDANCE_TYPE_ID  and
   nvl(ELR.ABS_ATTENDANCE_REASON_ID,-999)     = NVL(l_ABS_ATTENDANCE_REASON_ID,-999)  and -- 3570016
   ELR.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   ELR.business_group_id  = c_business_group_id
   and   ELR.elig_loa_rsn_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_LOA_RSN_PRTE_F ELR1
                where
                ELR1.ABSENCE_ATTENDANCE_TYPE_ID     = l_ABSENCE_ATTENDANCE_TYPE_ID  and
                nvl(ELR1.ABS_ATTENDANCE_REASON_ID,-999)     = l_ABS_ATTENDANCE_REASON_ID  and
                ELR1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                ELR1.business_group_id  = c_business_group_id
                and   ELR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_LOA_RSN_PRTE_F ELR2
                where
                ELR2.ABSENCE_ATTENDANCE_TYPE_ID     = l_ABSENCE_ATTENDANCE_TYPE_ID  and
                nvl(ELR2.ABS_ATTENDANCE_REASON_ID,-999)     = l_ABS_ATTENDANCE_REASON_ID  and
                ELR2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                ELR2.business_group_id  = c_business_group_id
                and   ELR2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ELR                     c_ELR%rowtype;
   l_elig_loa_rsn_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
--   hr_utility.trace_on(null,'TRC');
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ELR_unique in c_unique_ELR('ELR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ELR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_ELR_unique.table_route_id '||r_ELR_unique.table_route_id,10);
       hr_utility.set_location(' r_ELR_unique.information1 '||r_ELR_unique.information1,10);
       hr_utility.set_location( 'r_ELR_unique.information2 '||r_ELR_unique.information2,10);
       hr_utility.set_location( 'r_ELR_unique.information3 '||r_ELR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ELR_unique.dml_operation ;
       --

/**********************moved from below **********************/
       open c_ELR(r_ELR_unique.table_route_id,
                r_ELR_unique.information1,
                r_ELR_unique.information2,
                r_ELR_unique.information3 ) ;
       --
       fetch c_ELR into r_ELR ;
       --
       close c_ELR ;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_ABSENCE_ATTENDANCE_TYPE_ID := r_ELR.information176;
         --l_ABSENCE_ATTENDANCE_TYPE_ID := r_ELR.information180;  -- For bug 3570016
       else
         l_ABSENCE_ATTENDANCE_TYPE_ID := r_ELR.information174;
--		   l_ABSENCE_ATTENDANCE_TYPE_ID := r_ELR.information178;  -- For bug 3570016
       end if;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_ABS_ATTENDANCE_REASON_ID := r_ELR.information180;
         --l_ABS_ATTENDANCE_REASON_ID := r_ELR.information176;  -- For bug 3570016
       else
         l_ABS_ATTENDANCE_REASON_ID := r_ELR.information178;
         --l_ABS_ATTENDANCE_REASON_ID := r_ELR.information174;  -- For bug 3570016
       end if;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ELR.INFORMATION263,l_dml_operation);

       hr_utility.set_location(' ELIGY_PRFL_ID '|| l_ELIGY_PRFL_ID,10);
       hr_utility.set_location(' l_ABS_ATTENDANCE_REASON_ID '|| l_ABS_ATTENDANCE_REASON_ID, 10);
       hr_utility.set_location(' l_ABSENCE_ATTENDANCE_TYPE_ID '|| l_ABSENCE_ATTENDANCE_TYPE_ID, 10);
/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ELR_unique.information2 and r_ELR_unique.information3 then
               l_update := true;
               if r_ELR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_LOA_RSN_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_LOA_RSN_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ELR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ELR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ELR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ELR',l_new_value,l_prefix || r_ELR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ELR_min_max_dates(r_ELR_unique.table_route_id, r_ELR_unique.information1 ) ;
       fetch c_ELR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ELR_unique.information2);
/**********************moved up from here **********************
       open c_ELR(r_ELR_unique.table_route_id,
                r_ELR_unique.information1,
                r_ELR_unique.information2,
                r_ELR_unique.information3 ) ;
       --
       fetch c_ELR into r_ELR ;
       --
       close c_ELR ;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_ABSENCE_ATTENDANCE_TYPE_ID := r_ELR.information176;
         --l_ABSENCE_ATTENDANCE_TYPE_ID := r_ELR.information180;  -- For bug 3570016
       else
         l_ABSENCE_ATTENDANCE_TYPE_ID := r_ELR.information174;
--		   l_ABSENCE_ATTENDANCE_TYPE_ID := r_ELR.information178;  -- For bug 3570016
       end if;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_ABS_ATTENDANCE_REASON_ID := r_ELR.information180;
         --l_ABS_ATTENDANCE_REASON_ID := r_ELR.information176;  -- For bug 3570016
       else
         l_ABS_ATTENDANCE_REASON_ID := r_ELR.information178;
         --l_ABS_ATTENDANCE_REASON_ID := r_ELR.information174;  -- For bug 3570016
       end if;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ELR.INFORMATION263,l_dml_operation);

       hr_utility.set_location(' ELIGY_PRFL_ID '|| l_ELIGY_PRFL_ID,10);
       hr_utility.set_location(' l_ABS_ATTENDANCE_REASON_ID '|| l_ABS_ATTENDANCE_REASON_ID, 10);
       hr_utility.set_location(' l_ABSENCE_ATTENDANCE_TYPE_ID '|| l_ABSENCE_ATTENDANCE_TYPE_ID, 10);
**********************************************************/

       if l_ABSENCE_ATTENDANCE_TYPE_ID is null then
         close c_ELR_min_max_dates;
         --
         BEN_PD_COPY_TO_BEN_three.log_nomapping_data(p_parent_table_alias =>'ELP'
                     ,p_parent_pk_id         => r_ELR.information263
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'ELR'
                     ,p_child_data           => r_ELR.information173 );

         --
       else
         if p_reuse_object_flag = 'Y' then
            if c_ELR_min_max_dates%found then
              -- cursor to find the object
              open c_find_ELR_in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_elig_loa_rsn_prte_id, -999)  ) ;
              fetch c_find_ELR_in_target into l_new_value ;
              if c_find_ELR_in_target%found then
                --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_LOA_RSN_PRTE_F',
                   p_base_key_column => 'ELIG_LOA_RSN_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
                if r_ELR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_LOA_RSN_PRTE_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_LOA_RSN_PRTE_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ELR_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ELR_unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
              end if;
              close c_find_ELR_in_target ;
            --
            end if;
         end if ;
         --
         close c_ELR_min_max_dates ;

	 end if; -- bug 4565106

       end if; --if p_dml_operation
       --
       if ( not l_object_found_in_target OR l_update) and (l_ABSENCE_ATTENDANCE_TYPE_ID is not null) then -- bug # 4251900

           --
           l_current_pk_id := r_ELR.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_ELR.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;
           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_ELIG_LOA_RSN_PRTE_F CREATE_ELIG_LOA_RSN_PRTE ',20);
             BEN_ELIG_LOA_RSN_PRTE_API.CREATE_ELIG_LOA_RSN_PRTE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
				 ,P_ABSENCE_ATTENDANCE_TYPE_ID      => l_ABSENCE_ATTENDANCE_TYPE_ID
				 ,P_ABS_ATTENDANCE_REASON_ID      => l_ABS_ATTENDANCE_REASON_ID
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_LOA_RSN_PRTE_ID      => l_elig_loa_rsn_prte_id
				 ,P_ELR_ATTRIBUTE1      => r_ELR.INFORMATION111
				 ,P_ELR_ATTRIBUTE10      => r_ELR.INFORMATION120
				 ,P_ELR_ATTRIBUTE11      => r_ELR.INFORMATION121
				 ,P_ELR_ATTRIBUTE12      => r_ELR.INFORMATION122
				 ,P_ELR_ATTRIBUTE13      => r_ELR.INFORMATION123
				 ,P_ELR_ATTRIBUTE14      => r_ELR.INFORMATION124
				 ,P_ELR_ATTRIBUTE15      => r_ELR.INFORMATION125
				 ,P_ELR_ATTRIBUTE16      => r_ELR.INFORMATION126
				 ,P_ELR_ATTRIBUTE17      => r_ELR.INFORMATION127
				 ,P_ELR_ATTRIBUTE18      => r_ELR.INFORMATION128
				 ,P_ELR_ATTRIBUTE19      => r_ELR.INFORMATION129
				 ,P_ELR_ATTRIBUTE2      => r_ELR.INFORMATION112
				 ,P_ELR_ATTRIBUTE20      => r_ELR.INFORMATION130
				 ,P_ELR_ATTRIBUTE21      => r_ELR.INFORMATION131
				 ,P_ELR_ATTRIBUTE22      => r_ELR.INFORMATION132
				 ,P_ELR_ATTRIBUTE23      => r_ELR.INFORMATION133
				 ,P_ELR_ATTRIBUTE24      => r_ELR.INFORMATION134
				 ,P_ELR_ATTRIBUTE25      => r_ELR.INFORMATION135
				 ,P_ELR_ATTRIBUTE26      => r_ELR.INFORMATION136
				 ,P_ELR_ATTRIBUTE27      => r_ELR.INFORMATION137
				 ,P_ELR_ATTRIBUTE28      => r_ELR.INFORMATION138
				 ,P_ELR_ATTRIBUTE29      => r_ELR.INFORMATION139
				 ,P_ELR_ATTRIBUTE3      => r_ELR.INFORMATION113
				 ,P_ELR_ATTRIBUTE30      => r_ELR.INFORMATION140
				 ,P_ELR_ATTRIBUTE4      => r_ELR.INFORMATION114
				 ,P_ELR_ATTRIBUTE5      => r_ELR.INFORMATION115
				 ,P_ELR_ATTRIBUTE6      => r_ELR.INFORMATION116
				 ,P_ELR_ATTRIBUTE7      => r_ELR.INFORMATION117
				 ,P_ELR_ATTRIBUTE8      => r_ELR.INFORMATION118
				 ,P_ELR_ATTRIBUTE9      => r_ELR.INFORMATION119
				 ,P_ELR_ATTRIBUTE_CATEGORY      => r_ELR.INFORMATION110
				 ,P_EXCLD_FLAG      => r_ELR.INFORMATION11
				 ,P_ORDR_NUM      => r_ELR.INFORMATION259
	   --
--		****** END CHANGE LINES

	   --

				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
                                 ,P_CRITERIA_SCORE       => r_elr.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_elr.INFORMATION296
			 );
              -- insert the table_name,old_pk_id,new_pk_id into a plsql record
              -- Update all relevent cer records with new pk_id
              hr_utility.set_location('Before plsql table ',222);
              hr_utility.set_location('new_value id '||l_elig_loa_rsn_prte_id,222);
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_LOA_RSN_PRTE_ID' ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ELR.information1 ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_LOA_RSN_PRTE_ID ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ELR_unique.table_route_id;
              hr_utility.set_location('After plsql table ',222);
              --
              -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
              --
              BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
              --
            else

              --
              -- Call Update routine for the pk_id created in prev run .
              -- insert the table_name,old_pk_id,new_pk_id into a plsql record
              hr_utility.set_location(' BEN_ELIG_LOA_RSN_PRTE_F UPDATE_ELIG_LOA_RSN_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ELR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ELR.information3,
               p_effective_start_date  => r_ELR.information2,
               p_dml_operation         => r_ELR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_LOA_RSN_PRTE_ID   := r_ELR.information1;
             l_object_version_number := r_ELR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


              BEN_ELIG_LOA_RSN_PRTE_API.UPDATE_ELIG_LOA_RSN_PRTE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
				 ,P_ABSENCE_ATTENDANCE_TYPE_ID      => l_ABSENCE_ATTENDANCE_TYPE_ID
				 ,P_ABS_ATTENDANCE_REASON_ID      => l_ABS_ATTENDANCE_REASON_ID
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_LOA_RSN_PRTE_ID      => l_elig_loa_rsn_prte_id
				 ,P_ELR_ATTRIBUTE1      => r_ELR.INFORMATION111
				 ,P_ELR_ATTRIBUTE10      => r_ELR.INFORMATION120
				 ,P_ELR_ATTRIBUTE11      => r_ELR.INFORMATION121
				 ,P_ELR_ATTRIBUTE12      => r_ELR.INFORMATION122
				 ,P_ELR_ATTRIBUTE13      => r_ELR.INFORMATION123
				 ,P_ELR_ATTRIBUTE14      => r_ELR.INFORMATION124
				 ,P_ELR_ATTRIBUTE15      => r_ELR.INFORMATION125
				 ,P_ELR_ATTRIBUTE16      => r_ELR.INFORMATION126
				 ,P_ELR_ATTRIBUTE17      => r_ELR.INFORMATION127
				 ,P_ELR_ATTRIBUTE18      => r_ELR.INFORMATION128
				 ,P_ELR_ATTRIBUTE19      => r_ELR.INFORMATION129
				 ,P_ELR_ATTRIBUTE2      => r_ELR.INFORMATION112
				 ,P_ELR_ATTRIBUTE20      => r_ELR.INFORMATION130
				 ,P_ELR_ATTRIBUTE21      => r_ELR.INFORMATION131
				 ,P_ELR_ATTRIBUTE22      => r_ELR.INFORMATION132
				 ,P_ELR_ATTRIBUTE23      => r_ELR.INFORMATION133
				 ,P_ELR_ATTRIBUTE24      => r_ELR.INFORMATION134
				 ,P_ELR_ATTRIBUTE25      => r_ELR.INFORMATION135
				 ,P_ELR_ATTRIBUTE26      => r_ELR.INFORMATION136
				 ,P_ELR_ATTRIBUTE27      => r_ELR.INFORMATION137
				 ,P_ELR_ATTRIBUTE28      => r_ELR.INFORMATION138
				 ,P_ELR_ATTRIBUTE29      => r_ELR.INFORMATION139
				 ,P_ELR_ATTRIBUTE3      => r_ELR.INFORMATION113
				 ,P_ELR_ATTRIBUTE30      => r_ELR.INFORMATION140
				 ,P_ELR_ATTRIBUTE4      => r_ELR.INFORMATION114
				 ,P_ELR_ATTRIBUTE5      => r_ELR.INFORMATION115
				 ,P_ELR_ATTRIBUTE6      => r_ELR.INFORMATION116
				 ,P_ELR_ATTRIBUTE7      => r_ELR.INFORMATION117
				 ,P_ELR_ATTRIBUTE8      => r_ELR.INFORMATION118
				 ,P_ELR_ATTRIBUTE9      => r_ELR.INFORMATION119
				 ,P_ELR_ATTRIBUTE_CATEGORY      => r_ELR.INFORMATION110
				 ,P_EXCLD_FLAG      => r_ELR.INFORMATION11
				 ,P_ORDR_NUM      => r_ELR.INFORMATION259
	   --
	--   ****** END CHANGE LINES

	   --
				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER => l_object_version_number
				 ,P_DATETRACK_MODE        => l_datetrack_mode
                                 ,P_CRITERIA_SCORE       => r_elr.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_elr.INFORMATION296
			 );
	end if;  -- l_update
              --
            end if;
            --
            -- Delete the row if it is end dated.
            --
            if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = trunc(r_ELR.information3)) then
                --
                BEN_ELIG_LOA_RSN_PRTE_API.delete_ELIG_LOA_RSN_PRTE(
                   --
                   p_validate                       => false
                   ,p_elig_loa_rsn_prte_id                   => l_elig_loa_rsn_prte_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
            end if;
            --
            l_prev_pk_id := l_current_pk_id ;
            --
         -- end if; ---- bug 4565106
          --
       end if;
       --
     end if;
     --
   end loop;
   --
--   hr_utility.trace_off;
 exception when others then
     --
--   hr_utility.trace_off;
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ELR',r_ELR.information5 ) ;
     --
 end create_ELR_rows;



   --
   ---------------------------------------------------------------
   ----------------------< create_ELS_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ELS_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_LOS_FCTR_ID  number;
   cursor c_unique_ELS(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_LOS_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ELS_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ELS(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ELS_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ELS.elig_los_prte_id new_value
   from BEN_ELIG_LOS_PRTE_F ELS
   where
   ELS.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   ELS.LOS_FCTR_ID     = l_LOS_FCTR_ID  and
   ELS.business_group_id  = c_business_group_id
   and   ELS.elig_los_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_LOS_PRTE_F ELS1
                where
                ELS1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                ELS1.LOS_FCTR_ID     = l_LOS_FCTR_ID  and
                ELS1.business_group_id  = c_business_group_id
                and   ELS1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_LOS_PRTE_F ELS2
                where
                ELS2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                ELS2.LOS_FCTR_ID     = l_LOS_FCTR_ID  and
                ELS2.business_group_id  = c_business_group_id
                and   ELS2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ELS                     c_ELS%rowtype;
   l_elig_los_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ELS_unique in c_unique_ELS('ELS') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ELS_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_ELS_unique.table_route_id '||r_ELS_unique.table_route_id,10);
       hr_utility.set_location(' r_ELS_unique.information1 '||r_ELS_unique.information1,10);
       hr_utility.set_location( 'r_ELS_unique.information2 '||r_ELS_unique.information2,10);
       hr_utility.set_location( 'r_ELS_unique.information3 '||r_ELS_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ELS_unique.dml_operation ;
       --

/**********************moved from below **********************/
       open c_ELS(r_ELS_unique.table_route_id,
                r_ELS_unique.information1,
                r_ELS_unique.information2,
                r_ELS_unique.information3 ) ;
       --
       fetch c_ELS into r_ELS ;
       --
       close c_ELS ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ELS.INFORMATION263,l_dml_operation);
       l_LOS_FCTR_ID := get_fk('LOS_FCTR_ID', r_ELS.INFORMATION243,l_dml_operation);

/**********************************************************/
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ELS_unique.information2 and r_ELS_unique.information3 then
               l_update := true;
               if r_ELS_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_LOS_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_LOS_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ELS_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ELS_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ELS_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ELS',l_new_value,l_prefix || r_ELS_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ELS_min_max_dates(r_ELS_unique.table_route_id, r_ELS_unique.information1 ) ;
       fetch c_ELS_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ELS_unique.information2);
/**********************moved up from here **********************
       open c_ELS(r_ELS_unique.table_route_id,
                r_ELS_unique.information1,
                r_ELS_unique.information2,
                r_ELS_unique.information3 ) ;
       --
       fetch c_ELS into r_ELS ;
       --
       close c_ELS ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ELS.INFORMATION263,l_dml_operation);
       l_LOS_FCTR_ID := get_fk('LOS_FCTR_ID', r_ELS.INFORMATION243,l_dml_operation);

**********************************************************/

       if p_reuse_object_flag = 'Y' then
         if c_ELS_min_max_dates%found then
           -- cursor to find the object
           open c_find_ELS_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_los_prte_id, -999)  ) ;
           fetch c_find_ELS_in_target into l_new_value ;
           if c_find_ELS_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_LOS_PRTE_F',
                   p_base_key_column => 'ELIG_LOS_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_ELS_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_LOS_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_LOS_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ELS_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ELS_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_ELS_in_target ;
         --
         end if;
       end if ;
       --
       close c_ELS_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_ELS.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_ELS.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_LOS_PRTE_F CREATE_ELIG_LOS_PRTE ',20);
           BEN_ELIG_LOS_PRTE_API.CREATE_ELIG_LOS_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_LOS_PRTE_ID      => l_elig_los_prte_id
             ,P_ELS_ATTRIBUTE1      => r_ELS.INFORMATION111
             ,P_ELS_ATTRIBUTE10      => r_ELS.INFORMATION120
             ,P_ELS_ATTRIBUTE11      => r_ELS.INFORMATION121
             ,P_ELS_ATTRIBUTE12      => r_ELS.INFORMATION122
             ,P_ELS_ATTRIBUTE13      => r_ELS.INFORMATION123
             ,P_ELS_ATTRIBUTE14      => r_ELS.INFORMATION124
             ,P_ELS_ATTRIBUTE15      => r_ELS.INFORMATION125
             ,P_ELS_ATTRIBUTE16      => r_ELS.INFORMATION126
             ,P_ELS_ATTRIBUTE17      => r_ELS.INFORMATION127
             ,P_ELS_ATTRIBUTE18      => r_ELS.INFORMATION128
             ,P_ELS_ATTRIBUTE19      => r_ELS.INFORMATION129
             ,P_ELS_ATTRIBUTE2      => r_ELS.INFORMATION112
             ,P_ELS_ATTRIBUTE20      => r_ELS.INFORMATION130
             ,P_ELS_ATTRIBUTE21      => r_ELS.INFORMATION131
             ,P_ELS_ATTRIBUTE22      => r_ELS.INFORMATION132
             ,P_ELS_ATTRIBUTE23      => r_ELS.INFORMATION133
             ,P_ELS_ATTRIBUTE24      => r_ELS.INFORMATION134
             ,P_ELS_ATTRIBUTE25      => r_ELS.INFORMATION135
             ,P_ELS_ATTRIBUTE26      => r_ELS.INFORMATION136
             ,P_ELS_ATTRIBUTE27      => r_ELS.INFORMATION137
             ,P_ELS_ATTRIBUTE28      => r_ELS.INFORMATION138
             ,P_ELS_ATTRIBUTE29      => r_ELS.INFORMATION139
             ,P_ELS_ATTRIBUTE3      => r_ELS.INFORMATION113
             ,P_ELS_ATTRIBUTE30      => r_ELS.INFORMATION140
             ,P_ELS_ATTRIBUTE4      => r_ELS.INFORMATION114
             ,P_ELS_ATTRIBUTE5      => r_ELS.INFORMATION115
             ,P_ELS_ATTRIBUTE6      => r_ELS.INFORMATION116
             ,P_ELS_ATTRIBUTE7      => r_ELS.INFORMATION117
             ,P_ELS_ATTRIBUTE8      => r_ELS.INFORMATION118
             ,P_ELS_ATTRIBUTE9      => r_ELS.INFORMATION119
             ,P_ELS_ATTRIBUTE_CATEGORY      => r_ELS.INFORMATION110
             ,P_EXCLD_FLAG      => r_ELS.INFORMATION11
             ,P_LOS_FCTR_ID      => l_LOS_FCTR_ID
             ,P_ORDR_NUM      => r_ELS.INFORMATION260
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_els.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_els.INFORMATION296
         );

           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_los_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_LOS_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ELS.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_LOS_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ELS_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_LOS_PRTE_F UPDATE_ELIG_LOS_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ELS.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ELS.information3,
               p_effective_start_date  => r_ELS.information2,
               p_dml_operation         => r_ELS.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_LOS_PRTE_ID   := r_ELS.information1;
             l_object_version_number := r_ELS.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_LOS_PRTE_API.UPDATE_ELIG_LOS_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_LOS_PRTE_ID      => l_elig_los_prte_id
             ,P_ELS_ATTRIBUTE1      => r_ELS.INFORMATION111
             ,P_ELS_ATTRIBUTE10      => r_ELS.INFORMATION120
             ,P_ELS_ATTRIBUTE11      => r_ELS.INFORMATION121
             ,P_ELS_ATTRIBUTE12      => r_ELS.INFORMATION122
             ,P_ELS_ATTRIBUTE13      => r_ELS.INFORMATION123
             ,P_ELS_ATTRIBUTE14      => r_ELS.INFORMATION124
             ,P_ELS_ATTRIBUTE15      => r_ELS.INFORMATION125
             ,P_ELS_ATTRIBUTE16      => r_ELS.INFORMATION126
             ,P_ELS_ATTRIBUTE17      => r_ELS.INFORMATION127
             ,P_ELS_ATTRIBUTE18      => r_ELS.INFORMATION128
             ,P_ELS_ATTRIBUTE19      => r_ELS.INFORMATION129
             ,P_ELS_ATTRIBUTE2      => r_ELS.INFORMATION112
             ,P_ELS_ATTRIBUTE20      => r_ELS.INFORMATION130
             ,P_ELS_ATTRIBUTE21      => r_ELS.INFORMATION131
             ,P_ELS_ATTRIBUTE22      => r_ELS.INFORMATION132
             ,P_ELS_ATTRIBUTE23      => r_ELS.INFORMATION133
             ,P_ELS_ATTRIBUTE24      => r_ELS.INFORMATION134
             ,P_ELS_ATTRIBUTE25      => r_ELS.INFORMATION135
             ,P_ELS_ATTRIBUTE26      => r_ELS.INFORMATION136
             ,P_ELS_ATTRIBUTE27      => r_ELS.INFORMATION137
             ,P_ELS_ATTRIBUTE28      => r_ELS.INFORMATION138
             ,P_ELS_ATTRIBUTE29      => r_ELS.INFORMATION139
             ,P_ELS_ATTRIBUTE3      => r_ELS.INFORMATION113
             ,P_ELS_ATTRIBUTE30      => r_ELS.INFORMATION140
             ,P_ELS_ATTRIBUTE4      => r_ELS.INFORMATION114
             ,P_ELS_ATTRIBUTE5      => r_ELS.INFORMATION115
             ,P_ELS_ATTRIBUTE6      => r_ELS.INFORMATION116
             ,P_ELS_ATTRIBUTE7      => r_ELS.INFORMATION117
             ,P_ELS_ATTRIBUTE8      => r_ELS.INFORMATION118
             ,P_ELS_ATTRIBUTE9      => r_ELS.INFORMATION119
             ,P_ELS_ATTRIBUTE_CATEGORY      => r_ELS.INFORMATION110
             ,P_EXCLD_FLAG      => r_ELS.INFORMATION11
             ,P_LOS_FCTR_ID      => l_LOS_FCTR_ID
             ,P_ORDR_NUM      => r_ELS.INFORMATION260
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_els.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_els.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_ELS.information3)) then
             --
             BEN_ELIG_LOS_PRTE_API.delete_ELIG_LOS_PRTE(
                --
                p_validate                       => false
                ,p_elig_los_prte_id                   => l_elig_los_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ELS',r_ELS.information5 ) ;
     --
 end create_ELS_rows;



   --
   ---------------------------------------------------------------
   ----------------------< create_ELV_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ELV_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_LVG_RSN_CD     varchar2(30); -- IK Added
   cursor c_unique_ELV(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_LVG_RSN_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ELV_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ELV(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ELV_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ELV.elig_lvg_rsn_prte_id new_value
   from BEN_ELIG_LVG_RSN_PRTE_F ELV
   where
   ELV.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   ELV.LVG_RSN_CD        = l_LVG_RSN_CD and
   ELV.business_group_id  = c_business_group_id
   and   ELV.elig_lvg_rsn_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_LVG_RSN_PRTE_F ELV1
                where
                ELV1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                ELV1.LVG_RSN_CD        = l_LVG_RSN_CD and
                ELV1.business_group_id  = c_business_group_id
                and   ELV1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_LVG_RSN_PRTE_F ELV2
                where
                ELV2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                ELV2.LVG_RSN_CD        = l_LVG_RSN_CD and
                ELV2.business_group_id  = c_business_group_id
                and   ELV2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ELV                     c_ELV%rowtype;
   l_elig_lvg_rsn_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ELV_unique in c_unique_ELV('ELV') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
          (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
           r_ELV_unique.information3 >=
                   ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_ELV_unique.table_route_id '||r_ELV_unique.table_route_id,10);
       hr_utility.set_location(' r_ELV_unique.information1 '||r_ELV_unique.information1,10);
       hr_utility.set_location( 'r_ELV_unique.information2 '||r_ELV_unique.information2,10);
       hr_utility.set_location( 'r_ELV_unique.information3 '||r_ELV_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ELV_unique.dml_operation ;
       --

/**********************moved from below **********************/
       open c_ELV(r_ELV_unique.table_route_id,
                r_ELV_unique.information1,
                r_ELV_unique.information2,
                r_ELV_unique.information3 ) ;
       --
       fetch c_ELV into r_ELV ;
       --
       close c_ELV ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ELV.INFORMATION263,l_dml_operation);
       l_LVG_RSN_CD    := r_ELV.INFORMATION12 ;

/**********************************************************/
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ELV_unique.information2 and r_ELV_unique.information3 then
               l_update := true;
               if r_ELV_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_LVG_RSN_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_LVG_RSN_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ELV_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ELV_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ELV_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ELV',l_new_value,l_prefix || r_ELV_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ELV_min_max_dates(r_ELV_unique.table_route_id, r_ELV_unique.information1 ) ;
       fetch c_ELV_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ELV_unique.information2);
/**********************moved up from here **********************
       open c_ELV(r_ELV_unique.table_route_id,
                r_ELV_unique.information1,
                r_ELV_unique.information2,
                r_ELV_unique.information3 ) ;
       --
       fetch c_ELV into r_ELV ;
       --
       close c_ELV ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ELV.INFORMATION263,l_dml_operation);
       l_LVG_RSN_CD    := r_ELV.INFORMATION12 ;

**********************************************************/

       --
       if p_reuse_object_flag = 'Y' then
         if c_ELV_min_max_dates%found then
           -- cursor to find the object
           open c_find_ELV_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_lvg_rsn_prte_id, -999)  ) ;
           fetch c_find_ELV_in_target into l_new_value ;
           if c_find_ELV_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_LVG_RSN_PRTE_F',
                   p_base_key_column => 'ELIG_LVG_RSN_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_ELV_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_LVG_RSN_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_LVG_RSN_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ELV_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ELV_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_ELV_in_target ;
         --
         end if;
       end if ;
       --
       close c_ELV_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_ELV.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_ELV.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_LVG_RSN_PRTE_F CREATE_ELIG_LVG_RSN_PRTE ',20);
           BEN_ELIG_LVG_RSN_PRTE_API.CREATE_ELIG_LVG_RSN_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_LVG_RSN_PRTE_ID      => l_elig_lvg_rsn_prte_id
             ,P_ELV_ATTRIBUTE1      => r_ELV.INFORMATION111
             ,P_ELV_ATTRIBUTE10      => r_ELV.INFORMATION120
             ,P_ELV_ATTRIBUTE11      => r_ELV.INFORMATION121
             ,P_ELV_ATTRIBUTE12      => r_ELV.INFORMATION122
             ,P_ELV_ATTRIBUTE13      => r_ELV.INFORMATION123
             ,P_ELV_ATTRIBUTE14      => r_ELV.INFORMATION124
             ,P_ELV_ATTRIBUTE15      => r_ELV.INFORMATION125
             ,P_ELV_ATTRIBUTE16      => r_ELV.INFORMATION126
             ,P_ELV_ATTRIBUTE17      => r_ELV.INFORMATION127
             ,P_ELV_ATTRIBUTE18      => r_ELV.INFORMATION128
             ,P_ELV_ATTRIBUTE19      => r_ELV.INFORMATION129
             ,P_ELV_ATTRIBUTE2      => r_ELV.INFORMATION112
             ,P_ELV_ATTRIBUTE20      => r_ELV.INFORMATION130
             ,P_ELV_ATTRIBUTE21      => r_ELV.INFORMATION131
             ,P_ELV_ATTRIBUTE22      => r_ELV.INFORMATION132
             ,P_ELV_ATTRIBUTE23      => r_ELV.INFORMATION133
             ,P_ELV_ATTRIBUTE24      => r_ELV.INFORMATION134
             ,P_ELV_ATTRIBUTE25      => r_ELV.INFORMATION135
             ,P_ELV_ATTRIBUTE26      => r_ELV.INFORMATION136
             ,P_ELV_ATTRIBUTE27      => r_ELV.INFORMATION137
             ,P_ELV_ATTRIBUTE28      => r_ELV.INFORMATION138
             ,P_ELV_ATTRIBUTE29      => r_ELV.INFORMATION139
             ,P_ELV_ATTRIBUTE3      => r_ELV.INFORMATION113
             ,P_ELV_ATTRIBUTE30      => r_ELV.INFORMATION140
             ,P_ELV_ATTRIBUTE4      => r_ELV.INFORMATION114
             ,P_ELV_ATTRIBUTE5      => r_ELV.INFORMATION115
             ,P_ELV_ATTRIBUTE6      => r_ELV.INFORMATION116
             ,P_ELV_ATTRIBUTE7      => r_ELV.INFORMATION117
             ,P_ELV_ATTRIBUTE8      => r_ELV.INFORMATION118
             ,P_ELV_ATTRIBUTE9      => r_ELV.INFORMATION119
             ,P_ELV_ATTRIBUTE_CATEGORY      => r_ELV.INFORMATION110
             ,P_EXCLD_FLAG      => r_ELV.INFORMATION11
             ,P_LVG_RSN_CD      => r_ELV.INFORMATION12
             ,P_ORDR_NUM      => r_ELV.INFORMATION260
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_elv.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_elv.INFORMATION296
         );

           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_lvg_rsn_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_LVG_RSN_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ELV.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_LVG_RSN_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ELV_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_LVG_RSN_PRTE_F UPDATE_ELIG_LVG_RSN_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ELV.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ELV.information3,
               p_effective_start_date  => r_ELV.information2,
               p_dml_operation         => r_ELV.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_LVG_RSN_PRTE_ID   := r_ELV.information1;
             l_object_version_number := r_ELV.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_LVG_RSN_PRTE_API.UPDATE_ELIG_LVG_RSN_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_LVG_RSN_PRTE_ID      => l_elig_lvg_rsn_prte_id
             ,P_ELV_ATTRIBUTE1      => r_ELV.INFORMATION111
             ,P_ELV_ATTRIBUTE10      => r_ELV.INFORMATION120
             ,P_ELV_ATTRIBUTE11      => r_ELV.INFORMATION121
             ,P_ELV_ATTRIBUTE12      => r_ELV.INFORMATION122
             ,P_ELV_ATTRIBUTE13      => r_ELV.INFORMATION123
             ,P_ELV_ATTRIBUTE14      => r_ELV.INFORMATION124
             ,P_ELV_ATTRIBUTE15      => r_ELV.INFORMATION125
             ,P_ELV_ATTRIBUTE16      => r_ELV.INFORMATION126
             ,P_ELV_ATTRIBUTE17      => r_ELV.INFORMATION127
             ,P_ELV_ATTRIBUTE18      => r_ELV.INFORMATION128
             ,P_ELV_ATTRIBUTE19      => r_ELV.INFORMATION129
             ,P_ELV_ATTRIBUTE2      => r_ELV.INFORMATION112
             ,P_ELV_ATTRIBUTE20      => r_ELV.INFORMATION130
             ,P_ELV_ATTRIBUTE21      => r_ELV.INFORMATION131
             ,P_ELV_ATTRIBUTE22      => r_ELV.INFORMATION132
             ,P_ELV_ATTRIBUTE23      => r_ELV.INFORMATION133
             ,P_ELV_ATTRIBUTE24      => r_ELV.INFORMATION134
             ,P_ELV_ATTRIBUTE25      => r_ELV.INFORMATION135
             ,P_ELV_ATTRIBUTE26      => r_ELV.INFORMATION136
             ,P_ELV_ATTRIBUTE27      => r_ELV.INFORMATION137
             ,P_ELV_ATTRIBUTE28      => r_ELV.INFORMATION138
             ,P_ELV_ATTRIBUTE29      => r_ELV.INFORMATION139
             ,P_ELV_ATTRIBUTE3      => r_ELV.INFORMATION113
             ,P_ELV_ATTRIBUTE30      => r_ELV.INFORMATION140
             ,P_ELV_ATTRIBUTE4      => r_ELV.INFORMATION114
             ,P_ELV_ATTRIBUTE5      => r_ELV.INFORMATION115
             ,P_ELV_ATTRIBUTE6      => r_ELV.INFORMATION116
             ,P_ELV_ATTRIBUTE7      => r_ELV.INFORMATION117
             ,P_ELV_ATTRIBUTE8      => r_ELV.INFORMATION118
             ,P_ELV_ATTRIBUTE9      => r_ELV.INFORMATION119
             ,P_ELV_ATTRIBUTE_CATEGORY      => r_ELV.INFORMATION110
             ,P_EXCLD_FLAG      => r_ELV.INFORMATION11
             ,P_LVG_RSN_CD      => r_ELV.INFORMATION12
             ,P_ORDR_NUM      => r_ELV.INFORMATION260
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_elv.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_elv.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_ELV.information3)) then
             --
             BEN_ELIG_LVG_RSN_PRTE_API.delete_ELIG_LVG_RSN_PRTE(
                --
                p_validate                       => false
                ,p_elig_lvg_rsn_prte_id                   => l_elig_lvg_rsn_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ELV',r_ELV.information5 ) ;
     --
 end create_ELV_rows;



   --
   ---------------------------------------------------------------
   ----------------------< create_EMP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EMP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_MARITAL_STATUS  ben_elig_mrtl_sts_prte_f.marital_status%type;

   cursor c_unique_EMP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_MRTL_STS_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EMP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EMP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EMP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EMP.elig_mrtl_sts_prte_id new_value
   from BEN_ELIG_MRTL_STS_PRTE_F EMP
   where
   EMP.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EMP.business_group_id  = c_business_group_id and
   EMP.MARITAL_STATUS     = l_MARITAL_STATUS and
   EMP.elig_mrtl_sts_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_MRTL_STS_PRTE_F EMP1
                where
                EMP1.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                EMP1.MARITAL_STATUS = l_MARITAL_STATUS and
                EMP1.business_group_id  = c_business_group_id
                and   EMP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_MRTL_STS_PRTE_F EMP2
                where
                EMP2.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                EMP2.MARITAL_STATUS = l_MARITAL_STATUS and
                EMP2.business_group_id  = c_business_group_id
                and   EMP2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EMP                     c_EMP%rowtype;
   l_elig_mrtl_sts_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EMP_unique in c_unique_EMP('EMP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EMP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EMP_unique.table_route_id '||r_EMP_unique.table_route_id,10);
       hr_utility.set_location(' r_EMP_unique.information1 '||r_EMP_unique.information1,10);
       hr_utility.set_location( 'r_EMP_unique.information2 '||r_EMP_unique.information2,10);
       hr_utility.set_location( 'r_EMP_unique.information3 '||r_EMP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EMP_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EMP(r_EMP_unique.table_route_id,
                r_EMP_unique.information1,
                r_EMP_unique.information2,
                r_EMP_unique.information3 ) ;
       --
       fetch c_EMP into r_EMP ;
       --
       close c_EMP ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EMP.INFORMATION263,l_dml_operation);
       l_MARITAL_STATUS :=  r_EMP.INFORMATION11;

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EMP_unique.information2 and r_EMP_unique.information3 then
               l_update := true;
               if r_EMP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_MRTL_STS_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_MRTL_STS_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EMP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EMP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EMP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EMP',l_new_value,l_prefix || r_EMP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EMP_min_max_dates(r_EMP_unique.table_route_id, r_EMP_unique.information1 ) ;
       fetch c_EMP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EMP_unique.information2);
/**********************moved up from here **********************
       open c_EMP(r_EMP_unique.table_route_id,
                r_EMP_unique.information1,
                r_EMP_unique.information2,
                r_EMP_unique.information3 ) ;
       --
       fetch c_EMP into r_EMP ;
       --
       close c_EMP ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EMP.INFORMATION263,l_dml_operation);
       l_MARITAL_STATUS :=  r_EMP.INFORMATION11;

**********************************************************/


       if p_reuse_object_flag = 'Y' then
         if c_EMP_min_max_dates%found then
           -- cursor to find the object
           open c_find_EMP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_mrtl_sts_prte_id, -999)  ) ;
           fetch c_find_EMP_in_target into l_new_value ;
           if c_find_EMP_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_MRTL_STS_PRTE_F',
                   p_base_key_column => 'ELIG_MRTL_STS_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EMP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_MRTL_STS_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_MRTL_STS_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EMP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EMP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EMP_in_target ;
         --
         end if;
       end if ;
       --
       close c_EMP_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EMP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EMP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_MRTL_STS_PRTE_F CREATE_ELIG_MRTL_STS_PRTE ',20);
           BEN_ELIG_MRTL_STS_PRTE_API.CREATE_ELIG_MRTL_STS_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_MRTL_STS_PRTE_ID      => l_elig_mrtl_sts_prte_id
             ,P_EMP_ATTRIBUTE1      => r_EMP.INFORMATION111
             ,P_EMP_ATTRIBUTE10      => r_EMP.INFORMATION120
             ,P_EMP_ATTRIBUTE11      => r_EMP.INFORMATION121
             ,P_EMP_ATTRIBUTE12      => r_EMP.INFORMATION122
             ,P_EMP_ATTRIBUTE13      => r_EMP.INFORMATION123
             ,P_EMP_ATTRIBUTE14      => r_EMP.INFORMATION124
             ,P_EMP_ATTRIBUTE15      => r_EMP.INFORMATION125
             ,P_EMP_ATTRIBUTE16      => r_EMP.INFORMATION126
             ,P_EMP_ATTRIBUTE17      => r_EMP.INFORMATION127
             ,P_EMP_ATTRIBUTE18      => r_EMP.INFORMATION128
             ,P_EMP_ATTRIBUTE19      => r_EMP.INFORMATION129
             ,P_EMP_ATTRIBUTE2      => r_EMP.INFORMATION112
             ,P_EMP_ATTRIBUTE20      => r_EMP.INFORMATION130
             ,P_EMP_ATTRIBUTE21      => r_EMP.INFORMATION131
             ,P_EMP_ATTRIBUTE22      => r_EMP.INFORMATION132
             ,P_EMP_ATTRIBUTE23      => r_EMP.INFORMATION133
             ,P_EMP_ATTRIBUTE24      => r_EMP.INFORMATION134
             ,P_EMP_ATTRIBUTE25      => r_EMP.INFORMATION135
             ,P_EMP_ATTRIBUTE26      => r_EMP.INFORMATION136
             ,P_EMP_ATTRIBUTE27      => r_EMP.INFORMATION137
             ,P_EMP_ATTRIBUTE28      => r_EMP.INFORMATION138
             ,P_EMP_ATTRIBUTE29      => r_EMP.INFORMATION139
             ,P_EMP_ATTRIBUTE3      => r_EMP.INFORMATION113
             ,P_EMP_ATTRIBUTE30      => r_EMP.INFORMATION140
             ,P_EMP_ATTRIBUTE4      => r_EMP.INFORMATION114
             ,P_EMP_ATTRIBUTE5      => r_EMP.INFORMATION115
             ,P_EMP_ATTRIBUTE6      => r_EMP.INFORMATION116
             ,P_EMP_ATTRIBUTE7      => r_EMP.INFORMATION117
             ,P_EMP_ATTRIBUTE8      => r_EMP.INFORMATION118
             ,P_EMP_ATTRIBUTE9      => r_EMP.INFORMATION119
             ,P_EMP_ATTRIBUTE_CATEGORY      => r_EMP.INFORMATION110
             ,P_EXCLD_FLAG      => r_EMP.INFORMATION12
             ,P_MARITAL_STATUS      => r_EMP.INFORMATION11
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_emp.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_emp.INFORMATION296
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_mrtl_sts_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_MRTL_STS_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EMP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_MRTL_STS_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EMP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_MRTL_STS_PRTE_F UPDATE_ELIG_MRTL_STS_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EMP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EMP.information3,
               p_effective_start_date  => r_EMP.information2,
               p_dml_operation         => r_EMP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_MRTL_STS_PRTE_ID   := r_EMP.information1;
             l_object_version_number := r_EMP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_MRTL_STS_PRTE_API.UPDATE_ELIG_MRTL_STS_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_MRTL_STS_PRTE_ID      => l_elig_mrtl_sts_prte_id
             ,P_EMP_ATTRIBUTE1      => r_EMP.INFORMATION111
             ,P_EMP_ATTRIBUTE10      => r_EMP.INFORMATION120
             ,P_EMP_ATTRIBUTE11      => r_EMP.INFORMATION121
             ,P_EMP_ATTRIBUTE12      => r_EMP.INFORMATION122
             ,P_EMP_ATTRIBUTE13      => r_EMP.INFORMATION123
             ,P_EMP_ATTRIBUTE14      => r_EMP.INFORMATION124
             ,P_EMP_ATTRIBUTE15      => r_EMP.INFORMATION125
             ,P_EMP_ATTRIBUTE16      => r_EMP.INFORMATION126
             ,P_EMP_ATTRIBUTE17      => r_EMP.INFORMATION127
             ,P_EMP_ATTRIBUTE18      => r_EMP.INFORMATION128
             ,P_EMP_ATTRIBUTE19      => r_EMP.INFORMATION129
             ,P_EMP_ATTRIBUTE2      => r_EMP.INFORMATION112
             ,P_EMP_ATTRIBUTE20      => r_EMP.INFORMATION130
             ,P_EMP_ATTRIBUTE21      => r_EMP.INFORMATION131
             ,P_EMP_ATTRIBUTE22      => r_EMP.INFORMATION132
             ,P_EMP_ATTRIBUTE23      => r_EMP.INFORMATION133
             ,P_EMP_ATTRIBUTE24      => r_EMP.INFORMATION134
             ,P_EMP_ATTRIBUTE25      => r_EMP.INFORMATION135
             ,P_EMP_ATTRIBUTE26      => r_EMP.INFORMATION136
             ,P_EMP_ATTRIBUTE27      => r_EMP.INFORMATION137
             ,P_EMP_ATTRIBUTE28      => r_EMP.INFORMATION138
             ,P_EMP_ATTRIBUTE29      => r_EMP.INFORMATION139
             ,P_EMP_ATTRIBUTE3      => r_EMP.INFORMATION113
             ,P_EMP_ATTRIBUTE30      => r_EMP.INFORMATION140
             ,P_EMP_ATTRIBUTE4      => r_EMP.INFORMATION114
             ,P_EMP_ATTRIBUTE5      => r_EMP.INFORMATION115
             ,P_EMP_ATTRIBUTE6      => r_EMP.INFORMATION116
             ,P_EMP_ATTRIBUTE7      => r_EMP.INFORMATION117
             ,P_EMP_ATTRIBUTE8      => r_EMP.INFORMATION118
             ,P_EMP_ATTRIBUTE9      => r_EMP.INFORMATION119
             ,P_EMP_ATTRIBUTE_CATEGORY      => r_EMP.INFORMATION110

             ,P_EXCLD_FLAG      => r_EMP.INFORMATION12
             ,P_MARITAL_STATUS      => r_EMP.INFORMATION11
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_emp.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_emp.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EMP.information3)) then
             --
             BEN_ELIG_MRTL_STS_PRTE_API.delete_ELIG_MRTL_STS_PRTE(
                --
                p_validate                       => false
                ,p_elig_mrtl_sts_prte_id                   => l_elig_mrtl_sts_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EMP',r_EMP.information5 ) ;
     --
 end create_EMP_rows;



   --
   ---------------------------------------------------------------
   ----------------------< create_ENO_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ENO_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_COORD_BEN_NO_CVG_FLAG  varchar2(30);

   cursor c_unique_ENO(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_NO_OTHR_CVG_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ENO_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ENO(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ENO_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ENO.elig_no_othr_cvg_prte_id new_value
   from BEN_ELIG_NO_OTHR_CVG_PRTE_F ENO
   where
   ENO.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   ENO.COORD_BEN_NO_CVG_FLAG = l_COORD_BEN_NO_CVG_FLAG and
   ENO.business_group_id  = c_business_group_id
   and   ENO.elig_no_othr_cvg_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_NO_OTHR_CVG_PRTE_F ENO1
                where
                ENO1.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                ENO1.COORD_BEN_NO_CVG_FLAG = l_COORD_BEN_NO_CVG_FLAG and
                ENO1.business_group_id  = c_business_group_id
                and   ENO1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_NO_OTHR_CVG_PRTE_F ENO2
                where
                ENO2.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                ENO2.COORD_BEN_NO_CVG_FLAG = l_COORD_BEN_NO_CVG_FLAG and
                ENO2.business_group_id  = c_business_group_id
                and   ENO2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ENO                     c_ENO%rowtype;
   l_elig_no_othr_cvg_prte_id  number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ENO_unique in c_unique_ENO('ENO') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ENO_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_ENO_unique.table_route_id '||r_ENO_unique.table_route_id,10);
       hr_utility.set_location(' r_ENO_unique.information1 '||r_ENO_unique.information1,10);
       hr_utility.set_location( 'r_ENO_unique.information2 '||r_ENO_unique.information2,10);
       hr_utility.set_location( 'r_ENO_unique.information3 '||r_ENO_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ENO_unique.dml_operation ;
       --

/**********************moved from below **********************/
       open c_ENO(r_ENO_unique.table_route_id,
                r_ENO_unique.information1,
                r_ENO_unique.information2,
                r_ENO_unique.information3 ) ;
       --
       fetch c_ENO into r_ENO ;
       --
       close c_ENO ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ENO.INFORMATION263,l_dml_operation);--changed from information13
       l_COORD_BEN_NO_CVG_FLAG :=  r_ENO.information11 ;

/**********************************************************/
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ENO_unique.information2 and r_ENO_unique.information3 then
               l_update := true;
               if r_ENO_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_NO_OTHR_CVG_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_NO_OTHR_CVG_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ENO_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ENO_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ENO_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ENO',l_new_value,l_prefix || r_ENO_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ENO_min_max_dates(r_ENO_unique.table_route_id, r_ENO_unique.information1 ) ;
       fetch c_ENO_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ENO_unique.information2);
/**********************moved up from here **********************
       open c_ENO(r_ENO_unique.table_route_id,
                r_ENO_unique.information1,
                r_ENO_unique.information2,
                r_ENO_unique.information3 ) ;
       --
       fetch c_ENO into r_ENO ;
       --
       close c_ENO ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ENO.INFORMATION263,l_dml_operation);--changed from information13
       l_COORD_BEN_NO_CVG_FLAG :=  r_ENO.information11 ;

**********************************************************/

       if p_reuse_object_flag = 'Y' then
         if c_ENO_min_max_dates%found then
           -- cursor to find the object
           open c_find_ENO_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_no_othr_cvg_prte_id, -999)  ) ;
           fetch c_find_ENO_in_target into l_new_value ;
           if c_find_ENO_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_NO_OTHR_CVG_PRTE_F',
                   p_base_key_column => 'ELIG_NO_OTHR_CVG_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_ENO_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_NO_OTHR_CVG_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_NO_OTHR_CVG_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ENO_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ENO_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_ENO_in_target ;
         --
         end if;
       end if ;
       --
       close c_ENO_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_ENO.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_ENO.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_NO_OTHR_CVG_PRTE_F CREATE_ELIG_NO_OTHR_CVG_PRTE ',20);
           BEN_ELIG_NO_OTHR_CVG_PRTE_API.CREATE_ELIG_NO_OTHR_CVG_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_COORD_BEN_NO_CVG_FLAG      => r_ENO.INFORMATION11
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_NO_OTHR_CVG_PRTE_ID      => l_elig_no_othr_cvg_prte_id
             ,P_ENO_ATTRIBUTE1      => r_ENO.INFORMATION111
             ,P_ENO_ATTRIBUTE10      => r_ENO.INFORMATION120
             ,P_ENO_ATTRIBUTE11      => r_ENO.INFORMATION121
             ,P_ENO_ATTRIBUTE12      => r_ENO.INFORMATION122
             ,P_ENO_ATTRIBUTE13      => r_ENO.INFORMATION123
             ,P_ENO_ATTRIBUTE14      => r_ENO.INFORMATION124
             ,P_ENO_ATTRIBUTE15      => r_ENO.INFORMATION125
             ,P_ENO_ATTRIBUTE16      => r_ENO.INFORMATION126
             ,P_ENO_ATTRIBUTE17      => r_ENO.INFORMATION127
             ,P_ENO_ATTRIBUTE18      => r_ENO.INFORMATION128
             ,P_ENO_ATTRIBUTE19      => r_ENO.INFORMATION129
             ,P_ENO_ATTRIBUTE2      => r_ENO.INFORMATION112
             ,P_ENO_ATTRIBUTE20      => r_ENO.INFORMATION130
             ,P_ENO_ATTRIBUTE21      => r_ENO.INFORMATION131
             ,P_ENO_ATTRIBUTE22      => r_ENO.INFORMATION132
             ,P_ENO_ATTRIBUTE23      => r_ENO.INFORMATION133
             ,P_ENO_ATTRIBUTE24      => r_ENO.INFORMATION134
             ,P_ENO_ATTRIBUTE25      => r_ENO.INFORMATION135
             ,P_ENO_ATTRIBUTE26      => r_ENO.INFORMATION136
             ,P_ENO_ATTRIBUTE27      => r_ENO.INFORMATION137
             ,P_ENO_ATTRIBUTE28      => r_ENO.INFORMATION138
             ,P_ENO_ATTRIBUTE29      => r_ENO.INFORMATION139
             ,P_ENO_ATTRIBUTE3      => r_ENO.INFORMATION113
             ,P_ENO_ATTRIBUTE30      => r_ENO.INFORMATION140
             ,P_ENO_ATTRIBUTE4      => r_ENO.INFORMATION114
             ,P_ENO_ATTRIBUTE5      => r_ENO.INFORMATION115
             ,P_ENO_ATTRIBUTE6      => r_ENO.INFORMATION116
             ,P_ENO_ATTRIBUTE7      => r_ENO.INFORMATION117
             ,P_ENO_ATTRIBUTE8      => r_ENO.INFORMATION118
             ,P_ENO_ATTRIBUTE9      => r_ENO.INFORMATION119
             ,P_ENO_ATTRIBUTE_CATEGORY      => r_ENO.INFORMATION110
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_no_othr_cvg_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_NO_OTHR_CVG_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ENO.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_NO_OTHR_CVG_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ENO_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_NO_OTHR_CVG_PRTE_F UPDATE_ELIG_NO_OTHR_CVG_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ENO.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ENO.information3,
               p_effective_start_date  => r_ENO.information2,
               p_dml_operation         => r_ENO.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_NO_OTHR_CVG_PRTE_ID   := r_ENO.information1;
             l_object_version_number := r_ENO.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_NO_OTHR_CVG_PRTE_API.UPDATE_ELIG_NO_OTHR_CVG_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_COORD_BEN_NO_CVG_FLAG      => r_ENO.INFORMATION11
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_NO_OTHR_CVG_PRTE_ID      => l_elig_no_othr_cvg_prte_id
             ,P_ENO_ATTRIBUTE1      => r_ENO.INFORMATION111
             ,P_ENO_ATTRIBUTE10      => r_ENO.INFORMATION120
             ,P_ENO_ATTRIBUTE11      => r_ENO.INFORMATION121
             ,P_ENO_ATTRIBUTE12      => r_ENO.INFORMATION122
             ,P_ENO_ATTRIBUTE13      => r_ENO.INFORMATION123
             ,P_ENO_ATTRIBUTE14      => r_ENO.INFORMATION124
             ,P_ENO_ATTRIBUTE15      => r_ENO.INFORMATION125
             ,P_ENO_ATTRIBUTE16      => r_ENO.INFORMATION126
             ,P_ENO_ATTRIBUTE17      => r_ENO.INFORMATION127
             ,P_ENO_ATTRIBUTE18      => r_ENO.INFORMATION128
             ,P_ENO_ATTRIBUTE19      => r_ENO.INFORMATION129
             ,P_ENO_ATTRIBUTE2      => r_ENO.INFORMATION112
             ,P_ENO_ATTRIBUTE20      => r_ENO.INFORMATION130
             ,P_ENO_ATTRIBUTE21      => r_ENO.INFORMATION131
             ,P_ENO_ATTRIBUTE22      => r_ENO.INFORMATION132
             ,P_ENO_ATTRIBUTE23      => r_ENO.INFORMATION133
             ,P_ENO_ATTRIBUTE24      => r_ENO.INFORMATION134
             ,P_ENO_ATTRIBUTE25      => r_ENO.INFORMATION135
             ,P_ENO_ATTRIBUTE26      => r_ENO.INFORMATION136
             ,P_ENO_ATTRIBUTE27      => r_ENO.INFORMATION137
             ,P_ENO_ATTRIBUTE28      => r_ENO.INFORMATION138
             ,P_ENO_ATTRIBUTE29      => r_ENO.INFORMATION139
             ,P_ENO_ATTRIBUTE3      => r_ENO.INFORMATION113
             ,P_ENO_ATTRIBUTE30      => r_ENO.INFORMATION140
             ,P_ENO_ATTRIBUTE4      => r_ENO.INFORMATION114
             ,P_ENO_ATTRIBUTE5      => r_ENO.INFORMATION115
             ,P_ENO_ATTRIBUTE6      => r_ENO.INFORMATION116
             ,P_ENO_ATTRIBUTE7      => r_ENO.INFORMATION117
             ,P_ENO_ATTRIBUTE8      => r_ENO.INFORMATION118
             ,P_ENO_ATTRIBUTE9      => r_ENO.INFORMATION119
             ,P_ENO_ATTRIBUTE_CATEGORY      => r_ENO.INFORMATION110
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_ENO.information3)) then
             --
             BEN_ELIG_NO_OTHR_CVG_PRTE_API.delete_ELIG_NO_OTHR_CVG_PRTE(
                --
                p_validate                       => false
                ,p_elig_no_othr_cvg_prte_id                   => l_elig_no_othr_cvg_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ENO',r_ENO.information5 ) ;
     --
 end create_ENO_rows;


   --
   ---------------------------------------------------------------
   ----------------------< create_EOM_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EOM_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_OPTD_MDCR_FLAG  varchar2(30);
   --
   cursor c_unique_EOM(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_OPTD_MDCR_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EOM_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EOM(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EOM_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EOM.elig_optd_mdcr_prte_id new_value
   from BEN_ELIG_OPTD_MDCR_PRTE_F EOM
   where
   EOM.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EOM.OPTD_MDCR_FLAG    = l_OPTD_MDCR_FLAG and
   EOM.business_group_id  = c_business_group_id
   and   EOM.elig_optd_mdcr_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_OPTD_MDCR_PRTE_F EOM1
                where
                EOM1.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                EOM1.OPTD_MDCR_FLAG    = l_OPTD_MDCR_FLAG and
                EOM1.business_group_id  = c_business_group_id
                and   EOM1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_OPTD_MDCR_PRTE_F EOM2
                where
                EOM2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EOM2.OPTD_MDCR_FLAG    = l_OPTD_MDCR_FLAG and
                EOM2.business_group_id  = c_business_group_id
                and   EOM2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EOM                     c_EOM%rowtype;
   l_elig_optd_mdcr_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EOM_unique in c_unique_EOM('EOM') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EOM_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EOM_unique.table_route_id '||r_EOM_unique.table_route_id,10);
       hr_utility.set_location(' r_EOM_unique.information1 '||r_EOM_unique.information1,10);
       hr_utility.set_location( 'r_EOM_unique.information2 '||r_EOM_unique.information2,10);
       hr_utility.set_location( 'r_EOM_unique.information3 '||r_EOM_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EOM_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EOM(r_EOM_unique.table_route_id,
                r_EOM_unique.information1,
                r_EOM_unique.information2,
                r_EOM_unique.information3 ) ;
       --
       fetch c_EOM into r_EOM ;
       --
       close c_EOM ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EOM.INFORMATION263,l_dml_operation);
       l_OPTD_MDCR_FLAG := r_EOM.INFORMATION11 ;

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EOM_unique.information2 and r_EOM_unique.information3 then
               l_update := true;
               if r_EOM_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_OPTD_MDCR_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_OPTD_MDCR_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EOM_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EOM_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EOM_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EOM',l_new_value,l_prefix || r_EOM_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EOM_min_max_dates(r_EOM_unique.table_route_id, r_EOM_unique.information1 ) ;
       fetch c_EOM_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;

       l_min_esd := greatest(l_min_esd,r_EOM_unique.information2);
/**********************moved up from here **********************
       open c_EOM(r_EOM_unique.table_route_id,
                r_EOM_unique.information1,
                r_EOM_unique.information2,
                r_EOM_unique.information3 ) ;
       --
       fetch c_EOM into r_EOM ;
       --
       close c_EOM ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EOM.INFORMATION263,l_dml_operation);
       l_OPTD_MDCR_FLAG := r_EOM.INFORMATION11 ;

**********************************************************/

       if p_reuse_object_flag = 'Y' then
         if c_EOM_min_max_dates%found then
           -- cursor to find the object
           open c_find_EOM_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_optd_mdcr_prte_id, -999)  ) ;
           fetch c_find_EOM_in_target into l_new_value ;
           if c_find_EOM_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_OPTD_MDCR_PRTE_F',
                   p_base_key_column => 'ELIG_OPTD_MDCR_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EOM_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_OPTD_MDCR_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_OPTD_MDCR_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EOM_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EOM_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EOM_in_target ;
         --
         end if;
       end if ;
       --
       close c_EOM_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EOM.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EOM.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_OPTD_MDCR_PRTE_F CREATE_ELIG_OPTD_MDCR_PRTE ',20);
           BEN_ELIG_OPTD_MDCR_PRTE_API.CREATE_ELIG_OPTD_MDCR_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_OPTD_MDCR_PRTE_ID      => l_elig_optd_mdcr_prte_id
             ,P_EOM_ATTRIBUTE1      => r_EOM.INFORMATION111
             ,P_EOM_ATTRIBUTE10      => r_EOM.INFORMATION120
             ,P_EOM_ATTRIBUTE11      => r_EOM.INFORMATION121
             ,P_EOM_ATTRIBUTE12      => r_EOM.INFORMATION122
             ,P_EOM_ATTRIBUTE13      => r_EOM.INFORMATION123
             ,P_EOM_ATTRIBUTE14      => r_EOM.INFORMATION124
             ,P_EOM_ATTRIBUTE15      => r_EOM.INFORMATION125
             ,P_EOM_ATTRIBUTE16      => r_EOM.INFORMATION126
             ,P_EOM_ATTRIBUTE17      => r_EOM.INFORMATION127
             ,P_EOM_ATTRIBUTE18      => r_EOM.INFORMATION128
             ,P_EOM_ATTRIBUTE19      => r_EOM.INFORMATION129
             ,P_EOM_ATTRIBUTE2      => r_EOM.INFORMATION112
             ,P_EOM_ATTRIBUTE20      => r_EOM.INFORMATION130
             ,P_EOM_ATTRIBUTE21      => r_EOM.INFORMATION131
             ,P_EOM_ATTRIBUTE22      => r_EOM.INFORMATION132
             ,P_EOM_ATTRIBUTE23      => r_EOM.INFORMATION133
             ,P_EOM_ATTRIBUTE24      => r_EOM.INFORMATION134
             ,P_EOM_ATTRIBUTE25      => r_EOM.INFORMATION135
             ,P_EOM_ATTRIBUTE26      => r_EOM.INFORMATION136
             ,P_EOM_ATTRIBUTE27      => r_EOM.INFORMATION137
             ,P_EOM_ATTRIBUTE28      => r_EOM.INFORMATION138
             ,P_EOM_ATTRIBUTE29      => r_EOM.INFORMATION139
             ,P_EOM_ATTRIBUTE3      => r_EOM.INFORMATION113
             ,P_EOM_ATTRIBUTE30      => r_EOM.INFORMATION140
             ,P_EOM_ATTRIBUTE4      => r_EOM.INFORMATION114
             ,P_EOM_ATTRIBUTE5      => r_EOM.INFORMATION115
             ,P_EOM_ATTRIBUTE6      => r_EOM.INFORMATION116
             ,P_EOM_ATTRIBUTE7      => r_EOM.INFORMATION117
             ,P_EOM_ATTRIBUTE8      => r_EOM.INFORMATION118
             ,P_EOM_ATTRIBUTE9      => r_EOM.INFORMATION119
             ,P_EOM_ATTRIBUTE_CATEGORY      => r_EOM.INFORMATION110
             ,P_EXLCD_FLAG      => r_EOM.INFORMATION12
             ,P_OPTD_MDCR_FLAG      => r_EOM.INFORMATION11
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_optd_mdcr_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_OPTD_MDCR_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EOM.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_OPTD_MDCR_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EOM_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_OPTD_MDCR_PRTE_F UPDATE_ELIG_OPTD_MDCR_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EOM.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EOM.information3,
               p_effective_start_date  => r_EOM.information2,
               p_dml_operation         => r_EOM.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_OPTD_MDCR_PRTE_ID   := r_EOM.information1;
             l_object_version_number := r_EOM.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_OPTD_MDCR_PRTE_API.UPDATE_ELIG_OPTD_MDCR_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_OPTD_MDCR_PRTE_ID      => l_elig_optd_mdcr_prte_id
             ,P_EOM_ATTRIBUTE1      => r_EOM.INFORMATION111
             ,P_EOM_ATTRIBUTE10      => r_EOM.INFORMATION120
             ,P_EOM_ATTRIBUTE11      => r_EOM.INFORMATION121
             ,P_EOM_ATTRIBUTE12      => r_EOM.INFORMATION122
             ,P_EOM_ATTRIBUTE13      => r_EOM.INFORMATION123
             ,P_EOM_ATTRIBUTE14      => r_EOM.INFORMATION124
             ,P_EOM_ATTRIBUTE15      => r_EOM.INFORMATION125
             ,P_EOM_ATTRIBUTE16      => r_EOM.INFORMATION126
             ,P_EOM_ATTRIBUTE17      => r_EOM.INFORMATION127
             ,P_EOM_ATTRIBUTE18      => r_EOM.INFORMATION128
             ,P_EOM_ATTRIBUTE19      => r_EOM.INFORMATION129
             ,P_EOM_ATTRIBUTE2      => r_EOM.INFORMATION112
             ,P_EOM_ATTRIBUTE20      => r_EOM.INFORMATION130
             ,P_EOM_ATTRIBUTE21      => r_EOM.INFORMATION131
             ,P_EOM_ATTRIBUTE22      => r_EOM.INFORMATION132
             ,P_EOM_ATTRIBUTE23      => r_EOM.INFORMATION133
             ,P_EOM_ATTRIBUTE24      => r_EOM.INFORMATION134
             ,P_EOM_ATTRIBUTE25      => r_EOM.INFORMATION135
             ,P_EOM_ATTRIBUTE26      => r_EOM.INFORMATION136
             ,P_EOM_ATTRIBUTE27      => r_EOM.INFORMATION137
             ,P_EOM_ATTRIBUTE28      => r_EOM.INFORMATION138
             ,P_EOM_ATTRIBUTE29      => r_EOM.INFORMATION139
             ,P_EOM_ATTRIBUTE3      => r_EOM.INFORMATION113
             ,P_EOM_ATTRIBUTE30      => r_EOM.INFORMATION140
             ,P_EOM_ATTRIBUTE4      => r_EOM.INFORMATION114
             ,P_EOM_ATTRIBUTE5      => r_EOM.INFORMATION115
             ,P_EOM_ATTRIBUTE6      => r_EOM.INFORMATION116
             ,P_EOM_ATTRIBUTE7      => r_EOM.INFORMATION117
             ,P_EOM_ATTRIBUTE8      => r_EOM.INFORMATION118
             ,P_EOM_ATTRIBUTE9      => r_EOM.INFORMATION119
             ,P_EOM_ATTRIBUTE_CATEGORY      => r_EOM.INFORMATION110
             ,P_EXLCD_FLAG      => r_EOM.INFORMATION12
             ,P_OPTD_MDCR_FLAG      => r_EOM.INFORMATION11
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EOM.information3)) then
             --
             BEN_ELIG_OPTD_MDCR_PRTE_API.delete_ELIG_OPTD_MDCR_PRTE(
                --
                p_validate                       => false
                ,p_elig_optd_mdcr_prte_id                   => l_elig_optd_mdcr_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EOM',r_EOM.information5 ) ;
     --
   --
 end create_EOM_rows;
   --
   ---------------------------------------------------------------
   ----------------------< create_EOU_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EOU_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_ORGANIZATION_ID  number;
   cursor c_unique_EOU(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_ORG_UNIT_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EOU_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EOU(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EOU_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EOU.elig_org_unit_prte_id new_value
   from BEN_ELIG_ORG_UNIT_PRTE_F EOU
   where
   EOU.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EOU.ORGANIZATION_ID     = l_ORGANIZATION_ID  and
   EOU.business_group_id  = c_business_group_id
   and   EOU.elig_org_unit_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_ORG_UNIT_PRTE_F EOU1
                where
                EOU1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EOU1.ORGANIZATION_ID = l_ORGANIZATION_ID  and
                EOU1.business_group_id  = c_business_group_id
                and   EOU1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_ORG_UNIT_PRTE_F EOU2
                where
                EOU2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EOU2.ORGANIZATION_ID     = l_ORGANIZATION_ID  and
                EOU2.business_group_id  = c_business_group_id
                and   EOU2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EOU                     c_EOU%rowtype;
   l_elig_org_unit_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EOU_unique in c_unique_EOU('EOU') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EOU_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EOU_unique.table_route_id '||r_EOU_unique.table_route_id,10);
       hr_utility.set_location(' r_EOU_unique.information1 '||r_EOU_unique.information1,10);
       hr_utility.set_location( 'r_EOU_unique.information2 '||r_EOU_unique.information2,10);
       hr_utility.set_location( 'r_EOU_unique.information3 '||r_EOU_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EOU_unique.dml_operation ;

/**********************moved from below **********************/
       open c_EOU(r_EOU_unique.table_route_id,
                r_EOU_unique.information1,
                r_EOU_unique.information2,
                r_EOU_unique.information3 ) ;
       --
       fetch c_EOU into r_EOU ;
       --
       close c_EOU ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EOU.INFORMATION263,l_dml_operation);
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_ORGANIZATION_ID := r_EOU.information176;
       else
         l_ORGANIZATION_ID := r_EOU.information174;
       end if;

/**********************************************************/
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EOU_unique.information2 and r_EOU_unique.information3 then
               l_update := true;
               if r_EOU_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_ORG_UNIT_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_ORG_UNIT_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EOU_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EOU_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EOU_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EOU',l_new_value,l_prefix || r_EOU_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EOU_min_max_dates(r_EOU_unique.table_route_id, r_EOU_unique.information1 ) ;
       fetch c_EOU_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EOU_unique.information2);
/**********************moved up from here **********************
       open c_EOU(r_EOU_unique.table_route_id,
                r_EOU_unique.information1,
                r_EOU_unique.information2,
                r_EOU_unique.information3 ) ;
       --
       fetch c_EOU into r_EOU ;
       --
       close c_EOU ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EOU.INFORMATION263,l_dml_operation);
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_ORGANIZATION_ID := r_EOU.information176;
       else
         l_ORGANIZATION_ID := r_EOU.information174;
       end if;

**********************************************************/

       --
       if l_ORGANIZATION_ID is null then
         close c_EOU_min_max_dates;
         --
         BEN_PD_COPY_TO_BEN_three.log_nomapping_data(p_parent_table_alias =>'ELP'
                     ,p_parent_pk_id         => r_EOU.information263
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'EOU'
                     ,p_child_data           => r_EOU.information173 );

         --
       else
         if p_reuse_object_flag = 'Y' then
            if c_EOU_min_max_dates%found then
              -- cursor to find the object
              open c_find_EOU_in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_elig_org_unit_prte_id, -999)  ) ;
              fetch c_find_EOU_in_target into l_new_value ;
              if c_find_EOU_in_target%found then
                --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_ORG_UNIT_PRTE_F',
                   p_base_key_column => 'ELIG_ORG_UNIT_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
                if r_EOU_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_ORG_UNIT_PRTE_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_ORG_UNIT_PRTE_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EOU_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EOU_unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
              end if;
              close c_find_EOU_in_target ;
            --
            end if;
         end if ;
         --
         close c_EOU_min_max_dates ;
	 end if ; ---- bug 4565106

       end if; --if p_dml_operation
       --
       -- Added l_ORGANIZATION_ID is not null clause for bug 4101596
       --
       if (not l_object_found_in_target OR l_update ) AND l_ORGANIZATION_ID is not null then

           --
           l_current_pk_id := r_EOU.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_EOU.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_ELIG_ORG_UNIT_PRTE_F CREATE_ELIG_ORG_UNIT_PRTE ',20);
             BEN_ELIG_ORG_UNIT_PRTE_API.CREATE_ELIG_ORG_UNIT_PRTE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_ORG_UNIT_PRTE_ID      => l_elig_org_unit_prte_id
             ,P_EOU_ATTRIBUTE1      => r_EOU.INFORMATION111
             ,P_EOU_ATTRIBUTE10      => r_EOU.INFORMATION120
             ,P_EOU_ATTRIBUTE11      => r_EOU.INFORMATION121
             ,P_EOU_ATTRIBUTE12      => r_EOU.INFORMATION122
             ,P_EOU_ATTRIBUTE13      => r_EOU.INFORMATION123
             ,P_EOU_ATTRIBUTE14      => r_EOU.INFORMATION124
             ,P_EOU_ATTRIBUTE15      => r_EOU.INFORMATION125
             ,P_EOU_ATTRIBUTE16      => r_EOU.INFORMATION126
             ,P_EOU_ATTRIBUTE17      => r_EOU.INFORMATION127
             ,P_EOU_ATTRIBUTE18      => r_EOU.INFORMATION128
             ,P_EOU_ATTRIBUTE19      => r_EOU.INFORMATION129
             ,P_EOU_ATTRIBUTE2      => r_EOU.INFORMATION112
             ,P_EOU_ATTRIBUTE20      => r_EOU.INFORMATION130
             ,P_EOU_ATTRIBUTE21      => r_EOU.INFORMATION131
             ,P_EOU_ATTRIBUTE22      => r_EOU.INFORMATION132
             ,P_EOU_ATTRIBUTE23      => r_EOU.INFORMATION133
             ,P_EOU_ATTRIBUTE24      => r_EOU.INFORMATION134
             ,P_EOU_ATTRIBUTE25      => r_EOU.INFORMATION135
             ,P_EOU_ATTRIBUTE26      => r_EOU.INFORMATION136
             ,P_EOU_ATTRIBUTE27      => r_EOU.INFORMATION137
             ,P_EOU_ATTRIBUTE28      => r_EOU.INFORMATION138
             ,P_EOU_ATTRIBUTE29      => r_EOU.INFORMATION139
             ,P_EOU_ATTRIBUTE3      => r_EOU.INFORMATION113
             ,P_EOU_ATTRIBUTE30      => r_EOU.INFORMATION140
             ,P_EOU_ATTRIBUTE4      => r_EOU.INFORMATION114
             ,P_EOU_ATTRIBUTE5      => r_EOU.INFORMATION115
             ,P_EOU_ATTRIBUTE6      => r_EOU.INFORMATION116
             ,P_EOU_ATTRIBUTE7      => r_EOU.INFORMATION117
             ,P_EOU_ATTRIBUTE8      => r_EOU.INFORMATION118
             ,P_EOU_ATTRIBUTE9      => r_EOU.INFORMATION119
             ,P_EOU_ATTRIBUTE_CATEGORY      => r_EOU.INFORMATION110
             ,P_EXCLD_FLAG      => r_EOU.INFORMATION11
             ,P_ORDR_NUM      => r_EOU.INFORMATION260
             ,P_ORGANIZATION_ID      => l_ORGANIZATION_ID
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_eou.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_eou.INFORMATION296
         );
              -- insert the table_name,old_pk_id,new_pk_id into a plsql record
              -- Update all relevent cer records with new pk_id
              hr_utility.set_location('Before plsql table ',222);
              hr_utility.set_location('new_value id '||l_elig_org_unit_prte_id,222);
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_ORG_UNIT_PRTE_ID' ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EOU.information1 ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_ORG_UNIT_PRTE_ID ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EOU_unique.table_route_id;
              hr_utility.set_location('After plsql table ',222);
              --
              -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
              --
              BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
              --
            else
              --
              -- Call Update routine for the pk_id created in prev run .
              -- insert the table_name,old_pk_id,new_pk_id into a plsql record
              hr_utility.set_location(' BEN_ELIG_ORG_UNIT_PRTE_F UPDATE_ELIG_ORG_UNIT_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EOU.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EOU.information3,
               p_effective_start_date  => r_EOU.information2,
               p_dml_operation         => r_EOU.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_ORG_UNIT_PRTE_ID   := r_EOU.information1;
             l_object_version_number := r_EOU.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


              BEN_ELIG_ORG_UNIT_PRTE_API.UPDATE_ELIG_ORG_UNIT_PRTE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_ORG_UNIT_PRTE_ID      => l_elig_org_unit_prte_id
				 ,P_EOU_ATTRIBUTE1      => r_EOU.INFORMATION111
				 ,P_EOU_ATTRIBUTE10      => r_EOU.INFORMATION120
				 ,P_EOU_ATTRIBUTE11      => r_EOU.INFORMATION121
				 ,P_EOU_ATTRIBUTE12      => r_EOU.INFORMATION122
				 ,P_EOU_ATTRIBUTE13      => r_EOU.INFORMATION123
				 ,P_EOU_ATTRIBUTE14      => r_EOU.INFORMATION124
				 ,P_EOU_ATTRIBUTE15      => r_EOU.INFORMATION125
				 ,P_EOU_ATTRIBUTE16      => r_EOU.INFORMATION126
				 ,P_EOU_ATTRIBUTE17      => r_EOU.INFORMATION127
				 ,P_EOU_ATTRIBUTE18      => r_EOU.INFORMATION128
				 ,P_EOU_ATTRIBUTE19      => r_EOU.INFORMATION129
				 ,P_EOU_ATTRIBUTE2      => r_EOU.INFORMATION112
				 ,P_EOU_ATTRIBUTE20      => r_EOU.INFORMATION130
				 ,P_EOU_ATTRIBUTE21      => r_EOU.INFORMATION131
				 ,P_EOU_ATTRIBUTE22      => r_EOU.INFORMATION132
				 ,P_EOU_ATTRIBUTE23      => r_EOU.INFORMATION133
				 ,P_EOU_ATTRIBUTE24      => r_EOU.INFORMATION134
				 ,P_EOU_ATTRIBUTE25      => r_EOU.INFORMATION135
				 ,P_EOU_ATTRIBUTE26      => r_EOU.INFORMATION136
				 ,P_EOU_ATTRIBUTE27      => r_EOU.INFORMATION137
				 ,P_EOU_ATTRIBUTE28      => r_EOU.INFORMATION138
				 ,P_EOU_ATTRIBUTE29      => r_EOU.INFORMATION139
				 ,P_EOU_ATTRIBUTE3      => r_EOU.INFORMATION113
				 ,P_EOU_ATTRIBUTE30      => r_EOU.INFORMATION140
				 ,P_EOU_ATTRIBUTE4      => r_EOU.INFORMATION114
				 ,P_EOU_ATTRIBUTE5      => r_EOU.INFORMATION115
				 ,P_EOU_ATTRIBUTE6      => r_EOU.INFORMATION116
				 ,P_EOU_ATTRIBUTE7      => r_EOU.INFORMATION117
				 ,P_EOU_ATTRIBUTE8      => r_EOU.INFORMATION118
				 ,P_EOU_ATTRIBUTE9      => r_EOU.INFORMATION119
				 ,P_EOU_ATTRIBUTE_CATEGORY      => r_EOU.INFORMATION110
				 ,P_EXCLD_FLAG      => r_EOU.INFORMATION11
				 ,P_ORDR_NUM      => r_EOU.INFORMATION260
				 ,P_ORGANIZATION_ID      => l_ORGANIZATION_ID
	   --
	--   ****** END CHANGE LINES

	   --
				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER => l_object_version_number
				 ,P_DATETRACK_MODE        => l_datetrack_mode
                                 ,P_CRITERIA_SCORE       => r_eou.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_eou.INFORMATION296
			 );
	end if;  -- l_update
              --
            end if;
            --
            -- Delete the row if it is end dated.
            --
            if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = trunc(r_EOU.information3)) then
                --
                BEN_ELIG_ORG_UNIT_PRTE_API.delete_ELIG_ORG_UNIT_PRTE(
                   --
                   p_validate                       => false
                   ,p_elig_org_unit_prte_id                   => l_elig_org_unit_prte_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
            end if;
            --
            l_prev_pk_id := l_current_pk_id ;
            --
         -- end if; -- bug 4565106
          --
        end if;
        --
      end if;
      --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EOU',r_EOU.information5 ) ;
     --
 end create_EOU_rows;



   --
   ---------------------------------------------------------------
   ----------------------< create_EOY_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EOY_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_PTIP_ID  number;
   l_ORDR_NUM      number ;
   cursor c_unique_EOY(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_OTHR_PTIP_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EOY_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EOY(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EOY_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EOY.elig_othr_ptip_prte_id new_value
   from BEN_ELIG_OTHR_PTIP_PRTE_F EOY
   where
   EOY.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EOY.PTIP_ID     = l_PTIP_ID  and
   EOY.business_group_id  = c_business_group_id
   and   EOY.elig_othr_ptip_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_OTHR_PTIP_PRTE_F EOY1
                where
                EOY1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EOY1.PTIP_ID     = l_PTIP_ID  and
                EOY1.business_group_id  = c_business_group_id
                and   EOY1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_OTHR_PTIP_PRTE_F EOY2
                where
                EOY2.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                EOY2.PTIP_ID  = l_PTIP_ID  and
                EOY2.business_group_id  = c_business_group_id
                and   EOY2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EOY                     c_EOY%rowtype;
   l_elig_othr_ptip_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EOY_unique in c_unique_EOY('EOY') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EOY_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EOY_unique.table_route_id '||r_EOY_unique.table_route_id,10);
       hr_utility.set_location(' r_EOY_unique.information1 '||r_EOY_unique.information1,10);
       hr_utility.set_location( 'r_EOY_unique.information2 '||r_EOY_unique.information2,10);
       hr_utility.set_location( 'r_EOY_unique.information3 '||r_EOY_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EOY_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EOY(r_EOY_unique.table_route_id,
                r_EOY_unique.information1,
                r_EOY_unique.information2,
                r_EOY_unique.information3 ) ;
       --
       fetch c_EOY into r_EOY ;
       --
       close c_EOY ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EOY.INFORMATION263,l_dml_operation);

       -- Only For Use by Create Wizard - Same Business Group
       l_PTIP_ID := NVL(get_fk('PTIP_ID', r_EOY.INFORMATION259,l_dml_operation),
                        r_EOY.INFORMATION259);
/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EOY_unique.information2 and r_EOY_unique.information3 then
               l_update := true;
               if r_EOY_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_OTHR_PTIP_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_OTHR_PTIP_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EOY_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EOY_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EOY_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EOY',l_new_value,l_prefix || r_EOY_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EOY_min_max_dates(r_EOY_unique.table_route_id, r_EOY_unique.information1 ) ;
       fetch c_EOY_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EOY_unique.information2);
/**********************moved up from here **********************
       open c_EOY(r_EOY_unique.table_route_id,
                r_EOY_unique.information1,
                r_EOY_unique.information2,
                r_EOY_unique.information3 ) ;
       --
       fetch c_EOY into r_EOY ;
       --
       close c_EOY ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EOY.INFORMATION263,l_dml_operation);

       -- Only For Use by Create Wizard - Same Business Group
       l_PTIP_ID := NVL(get_fk('PTIP_ID', r_EOY.INFORMATION259,l_dml_operation),
                        r_EOY.INFORMATION259);
**********************************************************/

       if p_reuse_object_flag = 'Y' then
         if c_EOY_min_max_dates%found then
           -- cursor to find the object
           open c_find_EOY_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_othr_ptip_prte_id, -999)  ) ;
           fetch c_find_EOY_in_target into l_new_value ;
           if c_find_EOY_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_OTHR_PTIP_PRTE_F',
                   p_base_key_column => 'ELIG_OTHR_PTIP_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EOY_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_OTHR_PTIP_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_OTHR_PTIP_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EOY_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EOY_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EOY_in_target ;
         --
         end if;
       end if ;
       --
       close c_EOY_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EOY.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EOY.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_OTHR_PTIP_PRTE_F CREATE_ELIG_OTHR_PTIP_PRTE ',20);
           BEN_ELIG_OTHR_PTIP_PRTE_API.CREATE_ELIG_OTHR_PTIP_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_OTHR_PTIP_PRTE_ID      => l_elig_othr_ptip_prte_id
             ,P_EOY_ATTRIBUTE1      => r_EOY.INFORMATION111
             ,P_EOY_ATTRIBUTE10      => r_EOY.INFORMATION120
             ,P_EOY_ATTRIBUTE11      => r_EOY.INFORMATION121
             ,P_EOY_ATTRIBUTE12      => r_EOY.INFORMATION122
             ,P_EOY_ATTRIBUTE13      => r_EOY.INFORMATION123
             ,P_EOY_ATTRIBUTE14      => r_EOY.INFORMATION124
             ,P_EOY_ATTRIBUTE15      => r_EOY.INFORMATION125
             ,P_EOY_ATTRIBUTE16      => r_EOY.INFORMATION126
             ,P_EOY_ATTRIBUTE17      => r_EOY.INFORMATION127
             ,P_EOY_ATTRIBUTE18      => r_EOY.INFORMATION128
             ,P_EOY_ATTRIBUTE19      => r_EOY.INFORMATION129
             ,P_EOY_ATTRIBUTE2      => r_EOY.INFORMATION112
             ,P_EOY_ATTRIBUTE20      => r_EOY.INFORMATION130
             ,P_EOY_ATTRIBUTE21      => r_EOY.INFORMATION131
             ,P_EOY_ATTRIBUTE22      => r_EOY.INFORMATION132
             ,P_EOY_ATTRIBUTE23      => r_EOY.INFORMATION133
             ,P_EOY_ATTRIBUTE24      => r_EOY.INFORMATION134
             ,P_EOY_ATTRIBUTE25      => r_EOY.INFORMATION135
             ,P_EOY_ATTRIBUTE26      => r_EOY.INFORMATION136
             ,P_EOY_ATTRIBUTE27      => r_EOY.INFORMATION137
             ,P_EOY_ATTRIBUTE28      => r_EOY.INFORMATION138
             ,P_EOY_ATTRIBUTE29      => r_EOY.INFORMATION139
             ,P_EOY_ATTRIBUTE3      => r_EOY.INFORMATION113
             ,P_EOY_ATTRIBUTE30      => r_EOY.INFORMATION140
             ,P_EOY_ATTRIBUTE4      => r_EOY.INFORMATION114
             ,P_EOY_ATTRIBUTE5      => r_EOY.INFORMATION115
             ,P_EOY_ATTRIBUTE6      => r_EOY.INFORMATION116
             ,P_EOY_ATTRIBUTE7      => r_EOY.INFORMATION117
             ,P_EOY_ATTRIBUTE8      => r_EOY.INFORMATION118
             ,P_EOY_ATTRIBUTE9      => r_EOY.INFORMATION119
             ,P_EOY_ATTRIBUTE_CATEGORY      => r_EOY.INFORMATION110
             ,P_EXCLD_FLAG      => r_EOY.INFORMATION11
             ,P_ONLY_PLS_SUBJ_COBRA_FLAG      => r_EOY.INFORMATION12
             ,P_ORDR_NUM      => r_EOY.INFORMATION261
             ,P_PTIP_ID      => l_PTIP_ID
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_othr_ptip_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_OTHR_PTIP_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EOY.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_OTHR_PTIP_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EOY_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_OTHR_PTIP_PRTE_F UPDATE_ELIG_OTHR_PTIP_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EOY.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EOY.information3,
               p_effective_start_date  => r_EOY.information2,
               p_dml_operation         => r_EOY.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_OTHR_PTIP_PRTE_ID   := r_EOY.information1;
             l_object_version_number := r_EOY.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_OTHR_PTIP_PRTE_API.UPDATE_ELIG_OTHR_PTIP_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_OTHR_PTIP_PRTE_ID      => l_elig_othr_ptip_prte_id
             ,P_EOY_ATTRIBUTE1      => r_EOY.INFORMATION111
             ,P_EOY_ATTRIBUTE10      => r_EOY.INFORMATION120
             ,P_EOY_ATTRIBUTE11      => r_EOY.INFORMATION121
             ,P_EOY_ATTRIBUTE12      => r_EOY.INFORMATION122
             ,P_EOY_ATTRIBUTE13      => r_EOY.INFORMATION123
             ,P_EOY_ATTRIBUTE14      => r_EOY.INFORMATION124
             ,P_EOY_ATTRIBUTE15      => r_EOY.INFORMATION125
             ,P_EOY_ATTRIBUTE16      => r_EOY.INFORMATION126
             ,P_EOY_ATTRIBUTE17      => r_EOY.INFORMATION127
             ,P_EOY_ATTRIBUTE18      => r_EOY.INFORMATION128
             ,P_EOY_ATTRIBUTE19      => r_EOY.INFORMATION129
             ,P_EOY_ATTRIBUTE2      => r_EOY.INFORMATION112
             ,P_EOY_ATTRIBUTE20      => r_EOY.INFORMATION130
             ,P_EOY_ATTRIBUTE21      => r_EOY.INFORMATION131
             ,P_EOY_ATTRIBUTE22      => r_EOY.INFORMATION132
             ,P_EOY_ATTRIBUTE23      => r_EOY.INFORMATION133
             ,P_EOY_ATTRIBUTE24      => r_EOY.INFORMATION134
             ,P_EOY_ATTRIBUTE25      => r_EOY.INFORMATION135
             ,P_EOY_ATTRIBUTE26      => r_EOY.INFORMATION136
             ,P_EOY_ATTRIBUTE27      => r_EOY.INFORMATION137
             ,P_EOY_ATTRIBUTE28      => r_EOY.INFORMATION138
             ,P_EOY_ATTRIBUTE29      => r_EOY.INFORMATION139
             ,P_EOY_ATTRIBUTE3      => r_EOY.INFORMATION113
             ,P_EOY_ATTRIBUTE30      => r_EOY.INFORMATION140
             ,P_EOY_ATTRIBUTE4      => r_EOY.INFORMATION114
             ,P_EOY_ATTRIBUTE5      => r_EOY.INFORMATION115
             ,P_EOY_ATTRIBUTE6      => r_EOY.INFORMATION116
             ,P_EOY_ATTRIBUTE7      => r_EOY.INFORMATION117
             ,P_EOY_ATTRIBUTE8      => r_EOY.INFORMATION118
             ,P_EOY_ATTRIBUTE9      => r_EOY.INFORMATION119
             ,P_EOY_ATTRIBUTE_CATEGORY      => r_EOY.INFORMATION110
             ,P_EXCLD_FLAG      => r_EOY.INFORMATION11
             ,P_ONLY_PLS_SUBJ_COBRA_FLAG      => r_EOY.INFORMATION12
             ,P_ORDR_NUM      => r_EOY.INFORMATION261
             ,P_PTIP_ID      => l_PTIP_ID
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EOY.information3)) then
             --
             BEN_ELIG_OTHR_PTIP_PRTE_API.delete_ELIG_OTHR_PTIP_PRTE(
                --
                p_validate                       => false
                ,p_elig_othr_ptip_prte_id                   => l_elig_othr_ptip_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EOY',r_EOY.information5 ) ;
     --
 end create_EOY_rows;



   --
   ---------------------------------------------------------------
   ----------------------< create_EPF_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EPF_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_PCT_FL_TM_FCTR_ID  number;
   l_ORDR_NUM           number;
   cursor c_unique_EPF(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_PCT_FL_TM_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EPF_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EPF(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EPF_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EPF.elig_pct_fl_tm_prte_id new_value
   from BEN_ELIG_PCT_FL_TM_PRTE_F EPF
   where
   EPF.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EPF.PCT_FL_TM_FCTR_ID     = l_PCT_FL_TM_FCTR_ID  and
   EPF.ORDR_NUM              = l_ORDR_NUM and
   EPF.business_group_id  = c_business_group_id
   and   EPF.elig_pct_fl_tm_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_PCT_FL_TM_PRTE_F EPF1
                where
                EPF1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EPF1.PCT_FL_TM_FCTR_ID = l_PCT_FL_TM_FCTR_ID  and
                EPF1.ORDR_NUM              = l_ORDR_NUM and
                EPF1.business_group_id  = c_business_group_id
                and   EPF1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_PCT_FL_TM_PRTE_F EPF2
                where
                EPF2.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                EPF2.PCT_FL_TM_FCTR_ID = l_PCT_FL_TM_FCTR_ID  and
                EPF2.ORDR_NUM              = l_ORDR_NUM and
                EPF2.business_group_id  = c_business_group_id
                and   EPF2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EPF                     c_EPF%rowtype;
   l_elig_pct_fl_tm_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EPF_unique in c_unique_EPF('EPF') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
          (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
           r_EPF_unique.information3 >=
                   ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_EPF_unique.table_route_id '||r_EPF_unique.table_route_id,10);
       hr_utility.set_location(' r_EPF_unique.information1 '||r_EPF_unique.information1,10);
       hr_utility.set_location( 'r_EPF_unique.information2 '||r_EPF_unique.information2,10);
       hr_utility.set_location( 'r_EPF_unique.information3 '||r_EPF_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EPF_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EPF(r_EPF_unique.table_route_id,
                r_EPF_unique.information1,
                r_EPF_unique.information2,
                r_EPF_unique.information3 ) ;
       --
       fetch c_EPF into r_EPF ;
       --
       close c_EPF ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EPF.INFORMATION263,l_dml_operation);
       l_PCT_FL_TM_FCTR_ID := get_fk('PCT_FL_TM_FCTR_ID', r_EPF.INFORMATION233,l_dml_operation);
       l_ORDR_NUM          := r_EPF.INFORMATION260;
/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EPF_unique.information2 and r_EPF_unique.information3 then
               l_update := true;
               if r_EPF_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_PCT_FL_TM_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_PCT_FL_TM_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPF_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EPF_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPF_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EPF',l_new_value,l_prefix || r_EPF_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EPF_min_max_dates(r_EPF_unique.table_route_id, r_EPF_unique.information1 ) ;
       fetch c_EPF_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;

       l_min_esd := greatest(l_min_esd,r_EPF_unique.information2);
/**********************moved up from here **********************
       open c_EPF(r_EPF_unique.table_route_id,
                r_EPF_unique.information1,
                r_EPF_unique.information2,
                r_EPF_unique.information3 ) ;
       --
       fetch c_EPF into r_EPF ;
       --
       close c_EPF ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EPF.INFORMATION263,l_dml_operation);
       l_PCT_FL_TM_FCTR_ID := get_fk('PCT_FL_TM_FCTR_ID', r_EPF.INFORMATION233,l_dml_operation);
       l_ORDR_NUM          := r_EPF.INFORMATION260;
**********************************************************/

       --
       if p_reuse_object_flag = 'Y' then
         if c_EPF_min_max_dates%found then
           -- cursor to find the object
           open c_find_EPF_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_pct_fl_tm_prte_id, -999)  ) ;
           fetch c_find_EPF_in_target into l_new_value ;
           if c_find_EPF_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_PCT_FL_TM_PRTE_F',
                   p_base_key_column => 'ELIG_PCT_FL_TM_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EPF_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_PCT_FL_TM_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_PCT_FL_TM_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPF_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPF_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EPF_in_target ;
         --
         end if;
       end if ;
       --
       close c_EPF_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EPF.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EPF.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_PCT_FL_TM_PRTE_F CREATE_ELIG_PCT_FL_TM_PRTE ',20);
           BEN_ELIG_PCT_FL_TM_PRTE_API.CREATE_ELIG_PCT_FL_TM_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_PCT_FL_TM_PRTE_ID      => l_elig_pct_fl_tm_prte_id
             ,P_EPF_ATTRIBUTE1      => r_EPF.INFORMATION111
             ,P_EPF_ATTRIBUTE10      => r_EPF.INFORMATION120
             ,P_EPF_ATTRIBUTE11      => r_EPF.INFORMATION121
             ,P_EPF_ATTRIBUTE12      => r_EPF.INFORMATION122
             ,P_EPF_ATTRIBUTE13      => r_EPF.INFORMATION123
             ,P_EPF_ATTRIBUTE14      => r_EPF.INFORMATION124
             ,P_EPF_ATTRIBUTE15      => r_EPF.INFORMATION125
             ,P_EPF_ATTRIBUTE16      => r_EPF.INFORMATION126
             ,P_EPF_ATTRIBUTE17      => r_EPF.INFORMATION127
             ,P_EPF_ATTRIBUTE18      => r_EPF.INFORMATION128
             ,P_EPF_ATTRIBUTE19      => r_EPF.INFORMATION129
             ,P_EPF_ATTRIBUTE2      => r_EPF.INFORMATION112
             ,P_EPF_ATTRIBUTE20      => r_EPF.INFORMATION130
             ,P_EPF_ATTRIBUTE21      => r_EPF.INFORMATION131
             ,P_EPF_ATTRIBUTE22      => r_EPF.INFORMATION132
             ,P_EPF_ATTRIBUTE23      => r_EPF.INFORMATION133
             ,P_EPF_ATTRIBUTE24      => r_EPF.INFORMATION134
             ,P_EPF_ATTRIBUTE25      => r_EPF.INFORMATION135
             ,P_EPF_ATTRIBUTE26      => r_EPF.INFORMATION136
             ,P_EPF_ATTRIBUTE27      => r_EPF.INFORMATION137
             ,P_EPF_ATTRIBUTE28      => r_EPF.INFORMATION138
             ,P_EPF_ATTRIBUTE29      => r_EPF.INFORMATION139
             ,P_EPF_ATTRIBUTE3      => r_EPF.INFORMATION113
             ,P_EPF_ATTRIBUTE30      => r_EPF.INFORMATION140
             ,P_EPF_ATTRIBUTE4      => r_EPF.INFORMATION114
             ,P_EPF_ATTRIBUTE5      => r_EPF.INFORMATION115
             ,P_EPF_ATTRIBUTE6      => r_EPF.INFORMATION116
             ,P_EPF_ATTRIBUTE7      => r_EPF.INFORMATION117
             ,P_EPF_ATTRIBUTE8      => r_EPF.INFORMATION118
             ,P_EPF_ATTRIBUTE9      => r_EPF.INFORMATION119
             ,P_EPF_ATTRIBUTE_CATEGORY      => r_EPF.INFORMATION110
             ,P_EXCLD_FLAG      => r_EPF.INFORMATION11
             ,P_ORDR_NUM      => r_EPF.INFORMATION260
             ,P_PCT_FL_TM_FCTR_ID      => l_PCT_FL_TM_FCTR_ID
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_epf.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_epf.INFORMATION296
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_pct_fl_tm_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_PCT_FL_TM_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EPF.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_PCT_FL_TM_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPF_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_PCT_FL_TM_PRTE_F UPDATE_ELIG_PCT_FL_TM_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EPF.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EPF.information3,
               p_effective_start_date  => r_EPF.information2,
               p_dml_operation         => r_EPF.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_PCT_FL_TM_PRTE_ID   := r_EPF.information1;
             l_object_version_number := r_EPF.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_PCT_FL_TM_PRTE_API.UPDATE_ELIG_PCT_FL_TM_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_PCT_FL_TM_PRTE_ID      => l_elig_pct_fl_tm_prte_id
             ,P_EPF_ATTRIBUTE1      => r_EPF.INFORMATION111
             ,P_EPF_ATTRIBUTE10      => r_EPF.INFORMATION120
             ,P_EPF_ATTRIBUTE11      => r_EPF.INFORMATION121
             ,P_EPF_ATTRIBUTE12      => r_EPF.INFORMATION122
             ,P_EPF_ATTRIBUTE13      => r_EPF.INFORMATION123
             ,P_EPF_ATTRIBUTE14      => r_EPF.INFORMATION124
             ,P_EPF_ATTRIBUTE15      => r_EPF.INFORMATION125
             ,P_EPF_ATTRIBUTE16      => r_EPF.INFORMATION126
             ,P_EPF_ATTRIBUTE17      => r_EPF.INFORMATION127
             ,P_EPF_ATTRIBUTE18      => r_EPF.INFORMATION128
             ,P_EPF_ATTRIBUTE19      => r_EPF.INFORMATION129
             ,P_EPF_ATTRIBUTE2      => r_EPF.INFORMATION112
             ,P_EPF_ATTRIBUTE20      => r_EPF.INFORMATION130
             ,P_EPF_ATTRIBUTE21      => r_EPF.INFORMATION131
             ,P_EPF_ATTRIBUTE22      => r_EPF.INFORMATION132
             ,P_EPF_ATTRIBUTE23      => r_EPF.INFORMATION133
             ,P_EPF_ATTRIBUTE24      => r_EPF.INFORMATION134
             ,P_EPF_ATTRIBUTE25      => r_EPF.INFORMATION135
             ,P_EPF_ATTRIBUTE26      => r_EPF.INFORMATION136
             ,P_EPF_ATTRIBUTE27      => r_EPF.INFORMATION137
             ,P_EPF_ATTRIBUTE28      => r_EPF.INFORMATION138
             ,P_EPF_ATTRIBUTE29      => r_EPF.INFORMATION139
             ,P_EPF_ATTRIBUTE3      => r_EPF.INFORMATION113
             ,P_EPF_ATTRIBUTE30      => r_EPF.INFORMATION140
             ,P_EPF_ATTRIBUTE4      => r_EPF.INFORMATION114
             ,P_EPF_ATTRIBUTE5      => r_EPF.INFORMATION115
             ,P_EPF_ATTRIBUTE6      => r_EPF.INFORMATION116
             ,P_EPF_ATTRIBUTE7      => r_EPF.INFORMATION117
             ,P_EPF_ATTRIBUTE8      => r_EPF.INFORMATION118
             ,P_EPF_ATTRIBUTE9      => r_EPF.INFORMATION119
             ,P_EPF_ATTRIBUTE_CATEGORY      => r_EPF.INFORMATION110
             ,P_EXCLD_FLAG      => r_EPF.INFORMATION11
             ,P_ORDR_NUM      => r_EPF.INFORMATION260
             ,P_PCT_FL_TM_FCTR_ID      => l_PCT_FL_TM_FCTR_ID
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_epf.INFORMATION29
	     ,P_CRITERIA_WEIGHT      => r_epf.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EPF.information3)) then
             --
             BEN_ELIG_PCT_FL_TM_PRTE_API.delete_ELIG_PCT_FL_TM_PRTE(
                --
                p_validate                       => false
                ,p_elig_pct_fl_tm_prte_id                   => l_elig_pct_fl_tm_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EPF',r_EPF.information5 ) ;
     --
 end create_EPF_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_EPT_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EPT_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_PERSON_TYPE_ID  number;
   l_ORDR_NUM   number;
   cursor c_unique_EPT(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_PER_TYP_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EPT_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EPT(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EPT_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EPT.elig_per_typ_prte_id new_value
   from BEN_ELIG_PER_TYP_PRTE_F EPT
   where
   EPT.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EPT.PERSON_TYPE_ID     = l_PERSON_TYPE_ID  and
   EPT.ordr_num = l_ORDR_NUM and
   EPT.business_group_id  = c_business_group_id
   and   EPT.elig_per_typ_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_PER_TYP_PRTE_F EPT1
                where
                EPT1.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                EPT1.PERSON_TYPE_ID = l_PERSON_TYPE_ID  and
                EPT1.ordr_num = l_ORDR_NUM and -- Added this criteria
                EPT1.business_group_id  = c_business_group_id
                and   EPT1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_PER_TYP_PRTE_F EPT2
                where
                EPT2.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                EPT2.PERSON_TYPE_ID = l_PERSON_TYPE_ID  and
                EPT2.ordr_num = l_ORDR_NUM and -- Added this criteria
                EPT2.business_group_id  = c_business_group_id
                and   EPT2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EPT                     c_EPT%rowtype;
   l_elig_per_typ_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EPT_unique in c_unique_EPT('EPT') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EPT_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EPT_unique.table_route_id '||r_EPT_unique.table_route_id,10);
       hr_utility.set_location(' r_EPT_unique.information1 '||r_EPT_unique.information1,10);
       hr_utility.set_location( 'r_EPT_unique.information2 '||r_EPT_unique.information2,10);
       hr_utility.set_location( 'r_EPT_unique.information3 '||r_EPT_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EPT_unique.dml_operation ;
       --

/**********************moved from below **********************/
       open c_EPT(r_EPT_unique.table_route_id,
                r_EPT_unique.information1,
                r_EPT_unique.information2,
                r_EPT_unique.information3 ) ;
       --
       fetch c_EPT into r_EPT ;
       --
       close c_EPT ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EPT.INFORMATION263,l_dml_operation);

       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_PERSON_TYPE_ID := r_EPT.information176;
       else
         l_PERSON_TYPE_ID := r_EPT.information174;
       end if;

       l_ORDR_NUM := r_EPT.information260; -- Added this criteria

/**********************************************************/
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EPT_unique.information2 and r_EPT_unique.information3 then
               l_update := true;
               if r_EPT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_PER_TYP_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_PER_TYP_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPT_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EPT_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPT_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EPT',l_new_value,l_prefix || r_EPT_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EPT_min_max_dates(r_EPT_unique.table_route_id, r_EPT_unique.information1 ) ;
       fetch c_EPT_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EPT_unique.information2);
/**********************moved up from here **********************
       open c_EPT(r_EPT_unique.table_route_id,
                r_EPT_unique.information1,
                r_EPT_unique.information2,
                r_EPT_unique.information3 ) ;
       --
       fetch c_EPT into r_EPT ;
       --
       close c_EPT ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EPT.INFORMATION263,l_dml_operation);

       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_PERSON_TYPE_ID := r_EPT.information176;
       else
         l_PERSON_TYPE_ID := r_EPT.information174;
       end if;

       l_ORDR_NUM := r_EPT.information260; -- Added this criteria

**********************************************************/


       if l_PERSON_TYPE_ID is null then
         close c_EPT_min_max_dates;
         --
         BEN_PD_COPY_TO_BEN_three.log_nomapping_data(p_parent_table_alias =>'ELP'
                     ,p_parent_pk_id         => r_EPT.information263
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'EPT'
                     ,p_child_data           => r_EPT.information173 );

         --
       else
         if p_reuse_object_flag = 'Y' then
           if c_EPT_min_max_dates%found then
             -- cursor to find the object
             open c_find_EPT_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_per_typ_prte_id, -999)  ) ;
             fetch c_find_EPT_in_target into l_new_value ;
             if c_find_EPT_in_target%found then
               --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_PER_TYP_PRTE_F',
                   p_base_key_column => 'ELIG_PER_TYP_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
               if r_EPT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_PER_TYP_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_PER_TYP_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPT_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPT_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
               end if ;
               --
               l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
             end if;
             close c_find_EPT_in_target ;
           --
           end if;
         end if ;
         --
         close c_EPT_min_max_dates ;
	 end if; -- bug 4565106
      end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
           l_current_pk_id := r_EPT.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_EPT.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_ELIG_PER_TYP_PRTE_F CREATE_ELIG_PER_TYP_PRTE ',20);
             BEN_ELIG_PER_TYP_PRTE_API.CREATE_ELIG_PER_TYP_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_PER_TYP_PRTE_ID      => l_elig_per_typ_prte_id
             ,P_EPT_ATTRIBUTE1      => r_EPT.INFORMATION111
             ,P_EPT_ATTRIBUTE10      => r_EPT.INFORMATION120
             ,P_EPT_ATTRIBUTE11      => r_EPT.INFORMATION121
             ,P_EPT_ATTRIBUTE12      => r_EPT.INFORMATION122
             ,P_EPT_ATTRIBUTE13      => r_EPT.INFORMATION123
             ,P_EPT_ATTRIBUTE14      => r_EPT.INFORMATION124
             ,P_EPT_ATTRIBUTE15      => r_EPT.INFORMATION125
             ,P_EPT_ATTRIBUTE16      => r_EPT.INFORMATION126
             ,P_EPT_ATTRIBUTE17      => r_EPT.INFORMATION127
             ,P_EPT_ATTRIBUTE18      => r_EPT.INFORMATION128
             ,P_EPT_ATTRIBUTE19      => r_EPT.INFORMATION129
             ,P_EPT_ATTRIBUTE2      => r_EPT.INFORMATION112
             ,P_EPT_ATTRIBUTE20      => r_EPT.INFORMATION130
             ,P_EPT_ATTRIBUTE21      => r_EPT.INFORMATION131
             ,P_EPT_ATTRIBUTE22      => r_EPT.INFORMATION132
             ,P_EPT_ATTRIBUTE23      => r_EPT.INFORMATION133
             ,P_EPT_ATTRIBUTE24      => r_EPT.INFORMATION134
             ,P_EPT_ATTRIBUTE25      => r_EPT.INFORMATION135
             ,P_EPT_ATTRIBUTE26      => r_EPT.INFORMATION136
             ,P_EPT_ATTRIBUTE27      => r_EPT.INFORMATION137
             ,P_EPT_ATTRIBUTE28      => r_EPT.INFORMATION138
             ,P_EPT_ATTRIBUTE29      => r_EPT.INFORMATION139
             ,P_EPT_ATTRIBUTE3      => r_EPT.INFORMATION113
             ,P_EPT_ATTRIBUTE30      => r_EPT.INFORMATION140
             ,P_EPT_ATTRIBUTE4      => r_EPT.INFORMATION114
             ,P_EPT_ATTRIBUTE5      => r_EPT.INFORMATION115
             ,P_EPT_ATTRIBUTE6      => r_EPT.INFORMATION116
             ,P_EPT_ATTRIBUTE7      => r_EPT.INFORMATION117
             ,P_EPT_ATTRIBUTE8      => r_EPT.INFORMATION118
             ,P_EPT_ATTRIBUTE9      => r_EPT.INFORMATION119
             ,P_EPT_ATTRIBUTE_CATEGORY      => r_EPT.INFORMATION110
             ,P_EXCLD_FLAG      => r_EPT.INFORMATION11
             ,P_ORDR_NUM      => r_EPT.INFORMATION260
             ,P_PERSON_TYPE_ID      => l_PERSON_TYPE_ID
             ,P_PER_TYP_CD      => r_EPT.INFORMATION12
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_ept.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_ept.INFORMATION296
         );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_elig_per_typ_prte_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_PER_TYP_PRTE_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EPT.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_PER_TYP_PRTE_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPT_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             hr_utility.set_location(' BEN_ELIG_PER_TYP_PRTE_F UPDATE_ELIG_PER_TYP_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EPT.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EPT.information3,
               p_effective_start_date  => r_EPT.information2,
               p_dml_operation         => r_EPT.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_PER_TYP_PRTE_ID   := r_EPT.information1;
             l_object_version_number := r_EPT.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


             BEN_ELIG_PER_TYP_PRTE_API.UPDATE_ELIG_PER_TYP_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_PER_TYP_PRTE_ID      => l_elig_per_typ_prte_id
             ,P_EPT_ATTRIBUTE1      => r_EPT.INFORMATION111
             ,P_EPT_ATTRIBUTE10      => r_EPT.INFORMATION120
             ,P_EPT_ATTRIBUTE11      => r_EPT.INFORMATION121
             ,P_EPT_ATTRIBUTE12      => r_EPT.INFORMATION122
             ,P_EPT_ATTRIBUTE13      => r_EPT.INFORMATION123
             ,P_EPT_ATTRIBUTE14      => r_EPT.INFORMATION124
             ,P_EPT_ATTRIBUTE15      => r_EPT.INFORMATION125
             ,P_EPT_ATTRIBUTE16      => r_EPT.INFORMATION126
             ,P_EPT_ATTRIBUTE17      => r_EPT.INFORMATION127
             ,P_EPT_ATTRIBUTE18      => r_EPT.INFORMATION128
             ,P_EPT_ATTRIBUTE19      => r_EPT.INFORMATION129
             ,P_EPT_ATTRIBUTE2      => r_EPT.INFORMATION112
             ,P_EPT_ATTRIBUTE20      => r_EPT.INFORMATION130
             ,P_EPT_ATTRIBUTE21      => r_EPT.INFORMATION131
             ,P_EPT_ATTRIBUTE22      => r_EPT.INFORMATION132
             ,P_EPT_ATTRIBUTE23      => r_EPT.INFORMATION133
             ,P_EPT_ATTRIBUTE24      => r_EPT.INFORMATION134
             ,P_EPT_ATTRIBUTE25      => r_EPT.INFORMATION135
             ,P_EPT_ATTRIBUTE26      => r_EPT.INFORMATION136
             ,P_EPT_ATTRIBUTE27      => r_EPT.INFORMATION137
             ,P_EPT_ATTRIBUTE28      => r_EPT.INFORMATION138
             ,P_EPT_ATTRIBUTE29      => r_EPT.INFORMATION139
             ,P_EPT_ATTRIBUTE3      => r_EPT.INFORMATION113
             ,P_EPT_ATTRIBUTE30      => r_EPT.INFORMATION140
             ,P_EPT_ATTRIBUTE4      => r_EPT.INFORMATION114
             ,P_EPT_ATTRIBUTE5      => r_EPT.INFORMATION115
             ,P_EPT_ATTRIBUTE6      => r_EPT.INFORMATION116
             ,P_EPT_ATTRIBUTE7      => r_EPT.INFORMATION117
             ,P_EPT_ATTRIBUTE8      => r_EPT.INFORMATION118
             ,P_EPT_ATTRIBUTE9      => r_EPT.INFORMATION119
             ,P_EPT_ATTRIBUTE_CATEGORY      => r_EPT.INFORMATION110
             ,P_EXCLD_FLAG      => r_EPT.INFORMATION11
             ,P_ORDR_NUM      => r_EPT.INFORMATION260
             ,P_PERSON_TYPE_ID      => l_PERSON_TYPE_ID
             ,P_PER_TYP_CD      => r_EPT.INFORMATION12
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_ept.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_ept.INFORMATION296
         );
	end if;  -- l_update
             --
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
               trunc(l_max_eed) = trunc(r_EPT.information3)) then
             --
             BEN_ELIG_PER_TYP_PRTE_API.delete_ELIG_PER_TYP_PRTE(
                --
                p_validate                       => false
                ,p_elig_per_typ_prte_id                   => l_elig_per_typ_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
        -- end if; -- bug 4565106
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EPT',r_EPT.information5 ) ;
     --
 end create_EPT_rows;


   --
   ---------------------------------------------------------------
   ----------------------< create_EPG_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EPG_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_PEOPLE_GROUP_ID  number;
   l_ORDR_NUM number;
   cursor c_unique_EPG(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_PPL_GRP_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,  cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EPG_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EPG(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EPG_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EPG.elig_ppl_grp_prte_id new_value
   from BEN_ELIG_PPL_GRP_PRTE_F EPG
   where
   EPG.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EPG.PEOPLE_GROUP_ID     = l_PEOPLE_GROUP_ID  and
   EPG.business_group_id  = c_business_group_id
   and   EPG.elig_ppl_grp_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_PPL_GRP_PRTE_F EPG1
                where
                EPG1.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                EPG1.PEOPLE_GROUP_ID = l_PEOPLE_GROUP_ID  and
                EPG1.ORDR_NUM = l_ORDR_NUM and
                EPG1.business_group_id  = c_business_group_id
                and   EPG1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_PPL_GRP_PRTE_F EPG2
                where
                EPG2.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                EPG2.PEOPLE_GROUP_ID = l_PEOPLE_GROUP_ID  and
                EPG2.ORDR_NUM = l_ORDR_NUM and
                EPG2.business_group_id  = c_business_group_id
                and   EPG2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EPG                     c_EPG%rowtype;
   l_elig_ppl_grp_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EPG_unique in c_unique_EPG('EPG') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EPG_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EPG_unique.table_route_id '||r_EPG_unique.table_route_id,10);
       hr_utility.set_location(' r_EPG_unique.information1 '||r_EPG_unique.information1,10);
       hr_utility.set_location( 'r_EPG_unique.information2 '||r_EPG_unique.information2,10);
       hr_utility.set_location( 'r_EPG_unique.information3 '||r_EPG_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EPG_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EPG(r_EPG_unique.table_route_id,
                r_EPG_unique.information1,
                r_EPG_unique.information2,
                r_EPG_unique.information3 ) ;
       --
       fetch c_EPG into r_EPG ;
       --
       close c_EPG ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EPG.INFORMATION263,l_dml_operation);

       -- Only For Use by Create Wizard - Same Business Group
       l_PEOPLE_GROUP_ID := NVL(get_fk('PEOPLE_GROUP_ID', r_EPG.INFORMATION261,l_dml_operation),
                            r_EPG.INFORMATION261);

       l_ORDR_NUM := r_EPG.INFORMATION257;

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EPG_unique.information2 and r_EPG_unique.information3 then
               l_update := true;
               if r_EPG_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_PPL_GRP_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_PPL_GRP_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPG_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EPG_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPG_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EPG',l_new_value,l_prefix || r_EPG_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EPG_min_max_dates(r_EPG_unique.table_route_id, r_EPG_unique.information1 ) ;
       fetch c_EPG_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EPG_unique.information2);
/**********************moved up from here **********************
       open c_EPG(r_EPG_unique.table_route_id,
                r_EPG_unique.information1,
                r_EPG_unique.information2,
                r_EPG_unique.information3 ) ;
       --
       fetch c_EPG into r_EPG ;
       --
       close c_EPG ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EPG.INFORMATION263,l_dml_operation);

       -- Only For Use by Create Wizard - Same Business Group
       l_PEOPLE_GROUP_ID := NVL(get_fk('PEOPLE_GROUP_ID', r_EPG.INFORMATION261,l_dml_operation),
                            r_EPG.INFORMATION261);

       l_ORDR_NUM := r_EPG.INFORMATION257;

**********************************************************/

       if p_reuse_object_flag = 'Y' then
         if c_EPG_min_max_dates%found then
           -- cursor to find the object
           open c_find_EPG_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_ppl_grp_prte_id, -999)  ) ;
           fetch c_find_EPG_in_target into l_new_value ;
           if c_find_EPG_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_PPL_GRP_PRTE_F',
                   p_base_key_column => 'ELIG_PPL_GRP_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EPG_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_PPL_GRP_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_PPL_GRP_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPG_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPG_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EPG_in_target ;
         --
         end if;
       end if ;
       --
       close c_EPG_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EPG.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EPG.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_PPL_GRP_PRTE_F CREATE_ELIG_PPL_GRP_PRTE ',20);
           BEN_ELIG_PPL_GRP_PRTE_API.CREATE_ELIG_PPL_GRP_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_PPL_GRP_PRTE_ID      => l_elig_ppl_grp_prte_id
             ,P_EPG_ATTRIBUTE1      => r_EPG.INFORMATION111
             ,P_EPG_ATTRIBUTE10      => r_EPG.INFORMATION120
             ,P_EPG_ATTRIBUTE11      => r_EPG.INFORMATION121
             ,P_EPG_ATTRIBUTE12      => r_EPG.INFORMATION122
             ,P_EPG_ATTRIBUTE13      => r_EPG.INFORMATION123
             ,P_EPG_ATTRIBUTE14      => r_EPG.INFORMATION124
             ,P_EPG_ATTRIBUTE15      => r_EPG.INFORMATION125
             ,P_EPG_ATTRIBUTE16      => r_EPG.INFORMATION126
             ,P_EPG_ATTRIBUTE17      => r_EPG.INFORMATION127
             ,P_EPG_ATTRIBUTE18      => r_EPG.INFORMATION128
             ,P_EPG_ATTRIBUTE19      => r_EPG.INFORMATION129
             ,P_EPG_ATTRIBUTE2      => r_EPG.INFORMATION112
             ,P_EPG_ATTRIBUTE20      => r_EPG.INFORMATION130
             ,P_EPG_ATTRIBUTE21      => r_EPG.INFORMATION131
             ,P_EPG_ATTRIBUTE22      => r_EPG.INFORMATION132
             ,P_EPG_ATTRIBUTE23      => r_EPG.INFORMATION133
             ,P_EPG_ATTRIBUTE24      => r_EPG.INFORMATION134
             ,P_EPG_ATTRIBUTE25      => r_EPG.INFORMATION135
             ,P_EPG_ATTRIBUTE26      => r_EPG.INFORMATION136
             ,P_EPG_ATTRIBUTE27      => r_EPG.INFORMATION137
             ,P_EPG_ATTRIBUTE28      => r_EPG.INFORMATION138
             ,P_EPG_ATTRIBUTE29      => r_EPG.INFORMATION139
             ,P_EPG_ATTRIBUTE3      => r_EPG.INFORMATION113
             ,P_EPG_ATTRIBUTE30      => r_EPG.INFORMATION140
             ,P_EPG_ATTRIBUTE4      => r_EPG.INFORMATION114
             ,P_EPG_ATTRIBUTE5      => r_EPG.INFORMATION115
             ,P_EPG_ATTRIBUTE6      => r_EPG.INFORMATION116
             ,P_EPG_ATTRIBUTE7      => r_EPG.INFORMATION117
             ,P_EPG_ATTRIBUTE8      => r_EPG.INFORMATION118
             ,P_EPG_ATTRIBUTE9      => r_EPG.INFORMATION119
             ,P_EPG_ATTRIBUTE_CATEGORY      => r_EPG.INFORMATION110
             ,P_EXCLD_FLAG      => r_EPG.INFORMATION11
             ,P_ORDR_NUM      => r_EPG.INFORMATION257
             ,P_PEOPLE_GROUP_ID      => l_PEOPLE_GROUP_ID
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_epg.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_epg.INFORMATION296
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_ppl_grp_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_PPL_GRP_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EPG.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_PPL_GRP_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPG_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_PPL_GRP_PRTE_F UPDATE_ELIG_PPL_GRP_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EPG.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EPG.information3,
               p_effective_start_date  => r_EPG.information2,
               p_dml_operation         => r_EPG.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_PPL_GRP_PRTE_ID   := r_EPG.information1;
             l_object_version_number := r_EPG.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_PPL_GRP_PRTE_API.UPDATE_ELIG_PPL_GRP_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_PPL_GRP_PRTE_ID      => l_elig_ppl_grp_prte_id
             ,P_EPG_ATTRIBUTE1      => r_EPG.INFORMATION111
             ,P_EPG_ATTRIBUTE10      => r_EPG.INFORMATION120
             ,P_EPG_ATTRIBUTE11      => r_EPG.INFORMATION121
             ,P_EPG_ATTRIBUTE12      => r_EPG.INFORMATION122
             ,P_EPG_ATTRIBUTE13      => r_EPG.INFORMATION123
             ,P_EPG_ATTRIBUTE14      => r_EPG.INFORMATION124
             ,P_EPG_ATTRIBUTE15      => r_EPG.INFORMATION125
             ,P_EPG_ATTRIBUTE16      => r_EPG.INFORMATION126
             ,P_EPG_ATTRIBUTE17      => r_EPG.INFORMATION127
             ,P_EPG_ATTRIBUTE18      => r_EPG.INFORMATION128
             ,P_EPG_ATTRIBUTE19      => r_EPG.INFORMATION129
             ,P_EPG_ATTRIBUTE2      => r_EPG.INFORMATION112
             ,P_EPG_ATTRIBUTE20      => r_EPG.INFORMATION130
             ,P_EPG_ATTRIBUTE21      => r_EPG.INFORMATION131
             ,P_EPG_ATTRIBUTE22      => r_EPG.INFORMATION132
             ,P_EPG_ATTRIBUTE23      => r_EPG.INFORMATION133
             ,P_EPG_ATTRIBUTE24      => r_EPG.INFORMATION134
             ,P_EPG_ATTRIBUTE25      => r_EPG.INFORMATION135
             ,P_EPG_ATTRIBUTE26      => r_EPG.INFORMATION136
             ,P_EPG_ATTRIBUTE27      => r_EPG.INFORMATION137
             ,P_EPG_ATTRIBUTE28      => r_EPG.INFORMATION138
             ,P_EPG_ATTRIBUTE29      => r_EPG.INFORMATION139
             ,P_EPG_ATTRIBUTE3      => r_EPG.INFORMATION113
             ,P_EPG_ATTRIBUTE30      => r_EPG.INFORMATION140
             ,P_EPG_ATTRIBUTE4      => r_EPG.INFORMATION114
             ,P_EPG_ATTRIBUTE5      => r_EPG.INFORMATION115
             ,P_EPG_ATTRIBUTE6      => r_EPG.INFORMATION116
             ,P_EPG_ATTRIBUTE7      => r_EPG.INFORMATION117
             ,P_EPG_ATTRIBUTE8      => r_EPG.INFORMATION118
             ,P_EPG_ATTRIBUTE9      => r_EPG.INFORMATION119
             ,P_EPG_ATTRIBUTE_CATEGORY      => r_EPG.INFORMATION110
             ,P_EXCLD_FLAG      => r_EPG.INFORMATION11
             ,P_ORDR_NUM      => r_EPG.INFORMATION257
             ,P_PEOPLE_GROUP_ID      => l_PEOPLE_GROUP_ID
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_epg.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_epg.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EPG.information3)) then
             --
             BEN_ELIG_PPL_GRP_PRTE_API.delete_ELIG_PPL_GRP_PRTE(
                --
                p_validate                       => false
                ,p_elig_ppl_grp_prte_id                   => l_elig_ppl_grp_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EPG',r_EPG.information5 ) ;
     --
 end create_EPG_rows;

 --

    --
    ---------------------------------------------------------------
    ----------------------< create_EPB_rows >-----------------------
    ---------------------------------------------------------------
    --
    procedure create_EPB_rows
    (
          p_validate                       in  number     default 0
         ,p_copy_entity_txn_id             in  number
         ,p_effective_date                 in  date
         ,p_prefix_suffix_text             in  varchar2  default null
         ,p_reuse_object_flag              in  varchar2  default null
         ,p_target_business_group_id       in  varchar2  default null
         ,p_prefix_suffix_cd               in  varchar2  default null
    ) is
    --
    l_ELIGY_PRFL_ID  number;
    l_PAY_BASIS_ID  number;
    cursor c_unique_EPB(l_table_alias varchar2) is
    select distinct cpe.information1,
      cpe.information2,
      cpe.information3,
      cpe.table_route_id
    ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
         pqh_table_route tr
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = tr.table_route_id
    -- and   tr.where_clause        = l_BEN_ELIG_PY_BSS_PRTE_F
   and tr.table_alias = l_table_alias
    and   cpe.number_of_copies   = 1 -- ADDITION
    group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
    --
    --
    cursor c_EPB_min_max_dates(c_table_route_id  number,
                 c_information1   number) is
    select
      min(cpe.information2) min_esd,
      max(cpe.information3) min_eed
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1 ;
    --
    cursor c_EPB(c_table_route_id  number,
                 c_information1   number,
                 c_information2   date,
                 c_information3   date )  is
    select
      cpe.*
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1
    and   cpe.information2       = c_information2
    and   cpe.information3       = c_information3
    and rownum = 1 ;
    -- Date Track target record
    cursor c_find_EPB_in_target(
                                 c_effective_start_date    date,
                                 c_effective_end_date      date,
                                 c_business_group_id       number,
                                 c_new_pk_id               number) is
    select
      EPB.elig_py_bss_prte_id new_value
    from BEN_ELIG_PY_BSS_PRTE_F EPB
    where
    EPB.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
    EPB.PAY_BASIS_ID     = l_PAY_BASIS_ID  and
    EPB.business_group_id  = c_business_group_id
    and   EPB.elig_py_bss_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
    and exists ( select null
                 from BEN_ELIG_PY_BSS_PRTE_F EPB1
                 where
                 EPB1.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 EPB1.PAY_BASIS_ID = l_PAY_BASIS_ID  and
                 EPB1.business_group_id  = c_business_group_id
                 and   EPB1.effective_start_date <= c_effective_start_date )
    and exists ( select null
                 from BEN_ELIG_PY_BSS_PRTE_F EPB2
                 where
                 EPB2.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 EPB2.PAY_BASIS_ID = l_PAY_BASIS_ID  and
                 EPB2.business_group_id  = c_business_group_id
                 and   EPB2.effective_end_date >= c_effective_end_date )
                 ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
    --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

    l_prev_pk_id              number := null ;
    l_first_rec               boolean := true ;
    r_EPB                     c_EPB%rowtype;
    l_elig_py_bss_prte_id             number ;
    l_object_version_number   number ;
    l_effective_start_date    date ;
    l_effective_end_date      date ;
    l_prefix                  pqh_copy_entity_attribs.information1%type := null;
    l_suffix                  pqh_copy_entity_attribs.information1%type := null;
    l_new_value               number(15);
    l_object_found_in_target  boolean := false ;
    l_min_esd                 date;
    l_max_eed                 date;
    l_effective_date          date;
    --
  begin
    -- Initialization
    l_object_found_in_target := false ;
    -- End Initialization
    -- Derive the prefix - sufix
    if   p_prefix_suffix_cd = 'PREFIX' then
      l_prefix  := p_prefix_suffix_text ;
    elsif p_prefix_suffix_cd = 'SUFFIX' then
      l_suffix   := p_prefix_suffix_text ;
    else
      l_prefix := null ;
      l_suffix  := null ;
    end if ;
    -- End Prefix Sufix derivation
    for r_EPB_unique in c_unique_EPB('EPB') loop

      if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EPB_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
        --
        hr_utility.set_location(' r_EPB_unique.table_route_id '||r_EPB_unique.table_route_id,10);
        hr_utility.set_location(' r_EPB_unique.information1 '||r_EPB_unique.information1,10);
        hr_utility.set_location( 'r_EPB_unique.information2 '||r_EPB_unique.information2,10);
        hr_utility.set_location( 'r_EPB_unique.information3 '||r_EPB_unique.information3,10);
        -- If reuse objects flag is 'Y' then check for the object in the target business group
        -- if found insert the record into PLSql table and exit the loop else try create the
        -- object in the target business group
        --
        l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EPB_unique.dml_operation ;
       --
/**********************moved from below **********************/
        open c_EPB(r_EPB_unique.table_route_id,
                 r_EPB_unique.information1,
                 r_EPB_unique.information2,
                 r_EPB_unique.information3 ) ;
        --
        fetch c_EPB into r_EPB ;
        --
        close c_EPB ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EPB.INFORMATION263,l_dml_operation);
        if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
          l_PAY_BASIS_ID := r_EPB.information176;
        else
          l_PAY_BASIS_ID := r_EPB.information174;
        end if;
/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EPB_unique.information2 and r_EPB_unique.information3 then
               l_update := true;
               if r_EPB_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_PY_BSS_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_PY_BSS_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPB_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EPB_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPB_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EPB',l_new_value,l_prefix || r_EPB_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
        l_min_esd := null ;
        l_max_eed := null ;
        open c_EPB_min_max_dates(r_EPB_unique.table_route_id, r_EPB_unique.information1 ) ;
        fetch c_EPB_min_max_dates into l_min_esd,l_max_eed ;
        --

        if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
             l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
        end if;
       l_min_esd := greatest(l_min_esd,r_EPB_unique.information2);
/**********************moved up from here **********************
        open c_EPB(r_EPB_unique.table_route_id,
                 r_EPB_unique.information1,
                 r_EPB_unique.information2,
                 r_EPB_unique.information3 ) ;
        --
        fetch c_EPB into r_EPB ;
        --
        close c_EPB ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EPB.INFORMATION263,l_dml_operation);
        if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
          l_PAY_BASIS_ID := r_EPB.information176;
        else
          l_PAY_BASIS_ID := r_EPB.information174;
        end if;
**********************************************************/

        --
        if l_PAY_BASIS_ID is null then
          close c_EPB_min_max_dates;
          --
          BEN_PD_COPY_TO_BEN_three.log_nomapping_data(p_parent_table_alias =>'ELP'
                     ,p_parent_pk_id         => r_EPB.information263
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'EPB'
                     ,p_child_data           => r_EPB.information173 );

          --
        else
          if p_reuse_object_flag = 'Y' then
            if c_EPB_min_max_dates%found then
               -- cursor to find the object
               open c_find_EPB_in_target( l_min_esd,l_max_eed,
                                     p_target_business_group_id, nvl(l_elig_py_bss_prte_id, -999)  ) ;
               fetch c_find_EPB_in_target into l_new_value ;
               if c_find_EPB_in_target%found then
                 --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_PY_BSS_PRTE_F',
                   p_base_key_column => 'ELIG_PY_BSS_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
                 if r_EPB_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                    nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_PY_BSS_PRTE_ID'  then
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_PY_BSS_PRTE_ID' ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPB_unique.information1 ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPB_unique.table_route_id;
                    --
                    -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                    --
                    BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                 end if ;
                 --
                 l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
               end if;
               close c_find_EPB_in_target ;
             --
             end if;
          end if ;
          --
          close c_EPB_min_max_dates ;
	   end if ; -- bug 4565106
       end if; --if p_dml_operation
       --
       if (not l_object_found_in_target OR l_update ) AND l_pay_basis_id is not null then

            --
            l_current_pk_id := r_EPB.information1;
            --
            hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
            hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
            --
            if l_current_pk_id =  l_prev_pk_id  then
              --
              l_first_rec := false ;
              --
            else
              --
              l_first_rec := true ;
              --
            end if ;
            --

            l_effective_date := r_EPB.information2;
            if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                 l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
              l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
            end if;

            if l_first_rec and not l_update then
              -- Call Create routine.
              hr_utility.set_location(' BEN_ELIG_PY_BSS_PRTE_F CREATE_ELIG_PY_BSS_PRTE ',20);
              BEN_ELIG_PY_BSS_PRTE_API.CREATE_ELIG_PY_BSS_PRTE(
                 --
                 P_VALIDATE               => false
                 ,P_EFFECTIVE_DATE        => l_effective_date
                 ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                 --
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_PY_BSS_PRTE_ID      => l_elig_py_bss_prte_id
				 ,P_EPB_ATTRIBUTE1      => r_EPB.INFORMATION111
				 ,P_EPB_ATTRIBUTE10      => r_EPB.INFORMATION120
				 ,P_EPB_ATTRIBUTE11      => r_EPB.INFORMATION121
				 ,P_EPB_ATTRIBUTE12      => r_EPB.INFORMATION122
				 ,P_EPB_ATTRIBUTE13      => r_EPB.INFORMATION123
				 ,P_EPB_ATTRIBUTE14      => r_EPB.INFORMATION124
				 ,P_EPB_ATTRIBUTE15      => r_EPB.INFORMATION125
				 ,P_EPB_ATTRIBUTE16      => r_EPB.INFORMATION126
				 ,P_EPB_ATTRIBUTE17      => r_EPB.INFORMATION127
				 ,P_EPB_ATTRIBUTE18      => r_EPB.INFORMATION128
				 ,P_EPB_ATTRIBUTE19      => r_EPB.INFORMATION129
				 ,P_EPB_ATTRIBUTE2      => r_EPB.INFORMATION112
				 ,P_EPB_ATTRIBUTE20      => r_EPB.INFORMATION130
				 ,P_EPB_ATTRIBUTE21      => r_EPB.INFORMATION131
				 ,P_EPB_ATTRIBUTE22      => r_EPB.INFORMATION132
				 ,P_EPB_ATTRIBUTE23      => r_EPB.INFORMATION133
				 ,P_EPB_ATTRIBUTE24      => r_EPB.INFORMATION134
				 ,P_EPB_ATTRIBUTE25      => r_EPB.INFORMATION135
				 ,P_EPB_ATTRIBUTE26      => r_EPB.INFORMATION136
				 ,P_EPB_ATTRIBUTE27      => r_EPB.INFORMATION137
				 ,P_EPB_ATTRIBUTE28      => r_EPB.INFORMATION138
				 ,P_EPB_ATTRIBUTE29      => r_EPB.INFORMATION139
				 ,P_EPB_ATTRIBUTE3      => r_EPB.INFORMATION113
				 ,P_EPB_ATTRIBUTE30      => r_EPB.INFORMATION140
				 ,P_EPB_ATTRIBUTE4      => r_EPB.INFORMATION114
				 ,P_EPB_ATTRIBUTE5      => r_EPB.INFORMATION115
				 ,P_EPB_ATTRIBUTE6      => r_EPB.INFORMATION116
				 ,P_EPB_ATTRIBUTE7      => r_EPB.INFORMATION117
				 ,P_EPB_ATTRIBUTE8      => r_EPB.INFORMATION118
				 ,P_EPB_ATTRIBUTE9      => r_EPB.INFORMATION119
				 ,P_EPB_ATTRIBUTE_CATEGORY      => r_EPB.INFORMATION110
				 ,P_EXCLD_FLAG      => r_EPB.INFORMATION11
				 ,P_ORDR_NUM      => r_EPB.INFORMATION260
				 ,P_PAY_BASIS_ID      => l_PAY_BASIS_ID
	   --
	--    ****** END CHANGE LINES

	   --

				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
                                 ,P_CRITERIA_SCORE       => r_epb.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_epb.INFORMATION296
			 );
               -- insert the table_name,old_pk_id,new_pk_id into a plsql record
               -- Update all relevent cer records with new pk_id
               hr_utility.set_location('Before plsql table ',222);
               hr_utility.set_location('new_value id '||l_elig_py_bss_prte_id,222);
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_PY_BSS_PRTE_ID' ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EPB.information1 ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_PY_BSS_PRTE_ID ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPB_unique.table_route_id;
               hr_utility.set_location('After plsql table ',222);
               --
               -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
               --
               BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
               --
             else
               --
               -- Call Update routine for the pk_id created in prev run .
               -- insert the table_name,old_pk_id,new_pk_id into a plsql record
               hr_utility.set_location(' BEN_ELIG_PY_BSS_PRTE_F UPDATE_ELIG_PY_BSS_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EPB.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EPB.information3,
               p_effective_start_date  => r_EPB.information2,
               p_dml_operation         => r_EPB.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_PY_BSS_PRTE_ID   := r_EPB.information1;
             l_object_version_number := r_EPB.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


               BEN_ELIG_PY_BSS_PRTE_API.UPDATE_ELIG_PY_BSS_PRTE(
                 --
                 P_VALIDATE               => false
                 ,P_EFFECTIVE_DATE        => l_effective_date
                 ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                 --
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_PY_BSS_PRTE_ID      => l_elig_py_bss_prte_id
				 ,P_EPB_ATTRIBUTE1      => r_EPB.INFORMATION111
				 ,P_EPB_ATTRIBUTE10      => r_EPB.INFORMATION120
				 ,P_EPB_ATTRIBUTE11      => r_EPB.INFORMATION121
				 ,P_EPB_ATTRIBUTE12      => r_EPB.INFORMATION122
				 ,P_EPB_ATTRIBUTE13      => r_EPB.INFORMATION123
				 ,P_EPB_ATTRIBUTE14      => r_EPB.INFORMATION124
				 ,P_EPB_ATTRIBUTE15      => r_EPB.INFORMATION125
				 ,P_EPB_ATTRIBUTE16      => r_EPB.INFORMATION126
				 ,P_EPB_ATTRIBUTE17      => r_EPB.INFORMATION127
				 ,P_EPB_ATTRIBUTE18      => r_EPB.INFORMATION128
				 ,P_EPB_ATTRIBUTE19      => r_EPB.INFORMATION129
				 ,P_EPB_ATTRIBUTE2      => r_EPB.INFORMATION112
				 ,P_EPB_ATTRIBUTE20      => r_EPB.INFORMATION130
				 ,P_EPB_ATTRIBUTE21      => r_EPB.INFORMATION131
				 ,P_EPB_ATTRIBUTE22      => r_EPB.INFORMATION132
				 ,P_EPB_ATTRIBUTE23      => r_EPB.INFORMATION133
				 ,P_EPB_ATTRIBUTE24      => r_EPB.INFORMATION134
				 ,P_EPB_ATTRIBUTE25      => r_EPB.INFORMATION135
				 ,P_EPB_ATTRIBUTE26      => r_EPB.INFORMATION136
				 ,P_EPB_ATTRIBUTE27      => r_EPB.INFORMATION137
				 ,P_EPB_ATTRIBUTE28      => r_EPB.INFORMATION138
				 ,P_EPB_ATTRIBUTE29      => r_EPB.INFORMATION139
				 ,P_EPB_ATTRIBUTE3      => r_EPB.INFORMATION113
				 ,P_EPB_ATTRIBUTE30      => r_EPB.INFORMATION140
				 ,P_EPB_ATTRIBUTE4      => r_EPB.INFORMATION114
				 ,P_EPB_ATTRIBUTE5      => r_EPB.INFORMATION115
				 ,P_EPB_ATTRIBUTE6      => r_EPB.INFORMATION116
				 ,P_EPB_ATTRIBUTE7      => r_EPB.INFORMATION117
				 ,P_EPB_ATTRIBUTE8      => r_EPB.INFORMATION118
				 ,P_EPB_ATTRIBUTE9      => r_EPB.INFORMATION119
				 ,P_EPB_ATTRIBUTE_CATEGORY      => r_EPB.INFORMATION110
				 ,P_EXCLD_FLAG      => r_EPB.INFORMATION11
				 ,P_ORDR_NUM      => r_EPB.INFORMATION260
				 ,P_PAY_BASIS_ID      => l_PAY_BASIS_ID
	   --
	--   ****** END CHANGE LINES

	   --
				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER => l_object_version_number
				 ,P_DATETRACK_MODE        => l_datetrack_mode
                                 ,P_CRITERIA_SCORE       => r_epb.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_epb.INFORMATION296
			 );
	end if;  -- l_update
               --
             end if;
             --
             -- Delete the row if it is end dated.
             --
             if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                 trunc(l_max_eed) = trunc(r_EPB.information3)) then
                 --
                 BEN_ELIG_PY_BSS_PRTE_API.delete_ELIG_PY_BSS_PRTE(
                    --
                    p_validate                       => false
                    ,p_elig_py_bss_prte_id                   => l_elig_py_bss_prte_id
                    ,p_effective_start_date           => l_effective_start_date
                    ,p_effective_end_date             => l_effective_end_date
                    ,p_object_version_number          => l_object_version_number
                    ,p_effective_date                 => l_max_eed
                    ,p_datetrack_mode                 => hr_api.g_delete
                    --
                    );
                    --
             end if;
             --
             l_prev_pk_id := l_current_pk_id ;
             --
           -- end if; -- bug 4565106
           --
        end if;
        --
      end if;
      --
    end loop;
    --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EPB',r_EPB.information5 ) ;
     --
  end create_EPB_rows;

    --
    ---------------------------------------------------------------
    ----------------------< create_EPN_rows >-----------------------
    ---------------------------------------------------------------
    --
    procedure create_EPN_rows
    (
          p_validate                       in  number     default 0
         ,p_copy_entity_txn_id             in  number
         ,p_effective_date                 in  date
         ,p_prefix_suffix_text             in  varchar2  default null
         ,p_reuse_object_flag              in  varchar2  default null
         ,p_target_business_group_id       in  varchar2  default null
         ,p_prefix_suffix_cd               in  varchar2  default null
    ) is
    --
    l_ELIGY_PRFL_ID  number;
    l_PROBATION_PERIOD number;
    l_PROBATION_UNIT BEN_ELIG_PRBTN_PERD_PRTE_F.probation_unit%type;
    l_ORDR_NUM number;

    cursor c_unique_EPN(l_table_alias varchar2) is
    select distinct cpe.information1,
      cpe.information2,
      cpe.information3,
      cpe.table_route_id
    ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
         pqh_table_route tr
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = tr.table_route_id
    -- and   tr.where_clause        = l_BEN_ELIG_PRBTN_PERD_PRTE_F
   and tr.table_alias = l_table_alias
    and   cpe.number_of_copies   = 1 -- ADDITION
    group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
    --
    --
    cursor c_EPN_min_max_dates(c_table_route_id  number,
                 c_information1   number) is
    select
      min(cpe.information2) min_esd,
      max(cpe.information3) min_eed
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1 ;
    --
    cursor c_EPN(c_table_route_id  number,
                 c_information1   number,
                 c_information2   date,
                 c_information3   date )  is
    select
      cpe.*
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1
    and   cpe.information2       = c_information2
    and   cpe.information3       = c_information3
    and rownum = 1 ;
    -- Date Track target record
    cursor c_find_EPN_in_target(
                                 c_effective_start_date    date,
                                 c_effective_end_date      date,
                                 c_business_group_id       number,
                                 c_new_pk_id               number) is
    select
      EPN.elig_prbtn_perd_prte_id new_value
    from BEN_ELIG_PRBTN_PERD_PRTE_F EPN
    where
    EPN.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
    EPN.business_group_id  = c_business_group_id and
    EPN.PROBATION_PERIOD = l_PROBATION_PERIOD and
    EPN.PROBATION_UNIT = l_PROBATION_UNIT and
    EPN.ORDR_NUM = l_ORDR_NUM and
    EPN.elig_prbtn_perd_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
    and exists ( select null
                 from BEN_ELIG_PRBTN_PERD_PRTE_F EPN1
                 where
                 EPN1.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 EPN1.PROBATION_PERIOD = l_PROBATION_PERIOD and -- Added this criteria
                 EPN1.PROBATION_UNIT = l_PROBATION_UNIT and -- Added this criteria
                 EPN1.ORDR_NUM = l_ORDR_NUM and -- Added this criteria
                 EPN1.business_group_id  = c_business_group_id
                 and   EPN1.effective_start_date <= c_effective_start_date )
    and exists ( select null
                 from BEN_ELIG_PRBTN_PERD_PRTE_F EPN2
                 where
                 EPN2.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 EPN2.PROBATION_PERIOD = l_PROBATION_PERIOD and -- Added this criteria
                 EPN2.PROBATION_UNIT = l_PROBATION_UNIT and  -- Added this criteria
                 EPN2.ORDR_NUM = l_ORDR_NUM and -- Added this criteria
                 EPN2.business_group_id  = c_business_group_id
                 and   EPN2.effective_end_date >= c_effective_end_date )
                 ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
    --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

    l_prev_pk_id              number := null ;
    l_first_rec               boolean := true ;
    r_EPN                     c_EPN%rowtype;
    l_elig_prbtn_perd_prte_id             number ;
    l_object_version_number   number ;
    l_effective_start_date    date ;
    l_effective_end_date      date ;
    l_prefix                  pqh_copy_entity_attribs.information1%type := null;
    l_suffix                  pqh_copy_entity_attribs.information1%type := null;
    l_new_value               number(15);
    l_object_found_in_target  boolean := false ;
    l_min_esd                 date;
    l_max_eed                 date;
    l_effective_date          date;
    --
  begin
    -- Initialization
    l_object_found_in_target := false ;
    -- End Initialization
    -- Derive the prefix - sufix
    if   p_prefix_suffix_cd = 'PREFIX' then
      l_prefix  := p_prefix_suffix_text ;
    elsif p_prefix_suffix_cd = 'SUFFIX' then
      l_suffix   := p_prefix_suffix_text ;
    else
      l_prefix := null ;
      l_suffix  := null ;
    end if ;
    -- End Prefix Sufix derivation
    for r_EPN_unique in c_unique_EPN('EPN') loop

      if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EPN_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
        --
        hr_utility.set_location(' r_EPN_unique.table_route_id '||r_EPN_unique.table_route_id,10);
        hr_utility.set_location(' r_EPN_unique.information1 '||r_EPN_unique.information1,10);
        hr_utility.set_location( 'r_EPN_unique.information2 '||r_EPN_unique.information2,10);
        hr_utility.set_location( 'r_EPN_unique.information3 '||r_EPN_unique.information3,10);
        -- If reuse objects flag is 'Y' then check for the object in the target business group
        -- if found insert the record into PLSql table and exit the loop else try create the
        -- object in the target business group
        --
        l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EPN_unique.dml_operation ;

/**********************moved from below **********************/
        open c_EPN(r_EPN_unique.table_route_id,
                 r_EPN_unique.information1,
                 r_EPN_unique.information2,
                 r_EPN_unique.information3 ) ;
        --
        fetch c_EPN into r_EPN ;
        --
        close c_EPN ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EPN.INFORMATION263,l_dml_operation); -- Changed from 11
        l_PROBATION_PERIOD := r_EPN.INFORMATION287; -- Added this criteria
        l_PROBATION_UNIT := r_EPN.INFORMATION11; -- Added this criteria
        l_ORDR_NUM := r_EPN.INFORMATION257; -- Added this criteria

/**********************************************************/
       --
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EPN_unique.information2 and r_EPN_unique.information3 then
               l_update := true;
               if r_EPN_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_PRBTN_PERD_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_PRBTN_PERD_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPN_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EPN_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPN_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EPN',l_new_value,l_prefix || r_EPN_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
        l_min_esd := null ;
        l_max_eed := null ;
        open c_EPN_min_max_dates(r_EPN_unique.table_route_id, r_EPN_unique.information1 ) ;
        fetch c_EPN_min_max_dates into l_min_esd,l_max_eed ;
        --

        if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
        end if;
       l_min_esd := greatest(l_min_esd,r_EPN_unique.information2);
/**********************moved up from here **********************
        open c_EPN(r_EPN_unique.table_route_id,
                 r_EPN_unique.information1,
                 r_EPN_unique.information2,
                 r_EPN_unique.information3 ) ;
        --
        fetch c_EPN into r_EPN ;
        --
        close c_EPN ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EPN.INFORMATION263,l_dml_operation); -- Changed from 11
        l_PROBATION_PERIOD := r_EPN.INFORMATION287; -- Added this criteria
        l_PROBATION_UNIT := r_EPN.INFORMATION11; -- Added this criteria
        l_ORDR_NUM := r_EPN.INFORMATION257; -- Added this criteria

**********************************************************/


        if p_reuse_object_flag = 'Y' then
          if c_EPN_min_max_dates%found then
            -- cursor to find the object
            open c_find_EPN_in_target( l_min_esd,l_max_eed,
                                  p_target_business_group_id, nvl(l_elig_prbtn_perd_prte_id, -999)  ) ;
            fetch c_find_EPN_in_target into l_new_value ;
            if c_find_EPN_in_target%found then
              --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_PRBTN_PERD_PRTE_F',
                   p_base_key_column => 'ELIG_PRBTN_PERD_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
              if r_EPN_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                 nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_PRBTN_PERD_PRTE_ID'  then
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_PRBTN_PERD_PRTE_ID' ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPN_unique.information1 ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPN_unique.table_route_id;
                 --
                 -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                 --
                 BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
              end if ;
              --
              l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
            end if;
            close c_find_EPN_in_target ;
          --
          end if;
        end if ;
        --
        close c_EPN_min_max_dates ;
        end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

          --
          l_current_pk_id := r_EPN.information1;
          --
          hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
          hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
          --
          if l_current_pk_id =  l_prev_pk_id  then
            --
            l_first_rec := false ;
            --
          else
            --
            l_first_rec := true ;
            --
          end if ;
          --

          l_effective_date := r_EPN.information2;
          if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
            l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
          end if;

          if l_first_rec and not l_update then
            -- Call Create routine.
            hr_utility.set_location(' BEN_ELIG_PRBTN_PERD_PRTE_F CREATE_ELIG_PRBTN_PERD_PRTE ',20);
            BEN_ELIG_PRBTN_PERD_PRTE_API.CREATE_ELIG_PRBTN_PERD_PRTE(
              --
              P_VALIDATE               => false
              ,P_EFFECTIVE_DATE        => l_effective_date
              ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
              --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_PRBTN_PERD_PRTE_ID      => l_elig_prbtn_perd_prte_id
             ,P_EPN_ATTRIBUTE1      => r_EPN.INFORMATION111
             ,P_EPN_ATTRIBUTE10      => r_EPN.INFORMATION120
             ,P_EPN_ATTRIBUTE11      => r_EPN.INFORMATION121
             ,P_EPN_ATTRIBUTE12      => r_EPN.INFORMATION122
             ,P_EPN_ATTRIBUTE13      => r_EPN.INFORMATION123
             ,P_EPN_ATTRIBUTE14      => r_EPN.INFORMATION124
             ,P_EPN_ATTRIBUTE15      => r_EPN.INFORMATION125
             ,P_EPN_ATTRIBUTE16      => r_EPN.INFORMATION126
             ,P_EPN_ATTRIBUTE17      => r_EPN.INFORMATION127
             ,P_EPN_ATTRIBUTE18      => r_EPN.INFORMATION128
             ,P_EPN_ATTRIBUTE19      => r_EPN.INFORMATION129
             ,P_EPN_ATTRIBUTE2      => r_EPN.INFORMATION112
             ,P_EPN_ATTRIBUTE20      => r_EPN.INFORMATION130
             ,P_EPN_ATTRIBUTE21      => r_EPN.INFORMATION131
             ,P_EPN_ATTRIBUTE22      => r_EPN.INFORMATION132
             ,P_EPN_ATTRIBUTE23      => r_EPN.INFORMATION133
             ,P_EPN_ATTRIBUTE24      => r_EPN.INFORMATION134
             ,P_EPN_ATTRIBUTE25      => r_EPN.INFORMATION135
             ,P_EPN_ATTRIBUTE26      => r_EPN.INFORMATION136
             ,P_EPN_ATTRIBUTE27      => r_EPN.INFORMATION137
             ,P_EPN_ATTRIBUTE28      => r_EPN.INFORMATION138
             ,P_EPN_ATTRIBUTE29      => r_EPN.INFORMATION139
             ,P_EPN_ATTRIBUTE3      => r_EPN.INFORMATION113
             ,P_EPN_ATTRIBUTE30      => r_EPN.INFORMATION140
             ,P_EPN_ATTRIBUTE4      => r_EPN.INFORMATION114
             ,P_EPN_ATTRIBUTE5      => r_EPN.INFORMATION115
             ,P_EPN_ATTRIBUTE6      => r_EPN.INFORMATION116
             ,P_EPN_ATTRIBUTE7      => r_EPN.INFORMATION117
             ,P_EPN_ATTRIBUTE8      => r_EPN.INFORMATION118
             ,P_EPN_ATTRIBUTE9      => r_EPN.INFORMATION119
             ,P_EPN_ATTRIBUTE_CATEGORY      => r_EPN.INFORMATION110
             ,P_EXCLD_FLAG      => r_EPN.INFORMATION12
             ,P_ORDR_NUM      => r_EPN.INFORMATION257
             ,P_PROBATION_PERIOD      => r_EPN.INFORMATION287
             ,P_PROBATION_UNIT      => r_EPN.INFORMATION11
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_epn.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_epn.INFORMATION296
         );
            -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            -- Update all relevent cer records with new pk_id
            hr_utility.set_location('Before plsql table ',222);
            hr_utility.set_location('new_value id '||l_elig_prbtn_perd_prte_id,222);
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_PRBTN_PERD_PRTE_ID' ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EPN.information1 ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_PRBTN_PERD_PRTE_ID ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPN_unique.table_route_id;
            hr_utility.set_location('After plsql table ',222);
            --
            -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
            --
            BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
            --
          else
            --
            -- Call Update routine for the pk_id created in prev run .
            -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            hr_utility.set_location(' BEN_ELIG_PRBTN_PERD_PRTE_F UPDATE_ELIG_PRBTN_PERD_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EPN.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EPN.information3,
               p_effective_start_date  => r_EPN.information2,
               p_dml_operation         => r_EPN.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_PRBTN_PERD_PRTE_ID   := r_EPN.information1;
             l_object_version_number := r_EPN.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


            BEN_ELIG_PRBTN_PERD_PRTE_API.UPDATE_ELIG_PRBTN_PERD_PRTE(
              --
              P_VALIDATE               => false
              ,P_EFFECTIVE_DATE        => l_effective_date
              ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
              --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_PRBTN_PERD_PRTE_ID      => l_elig_prbtn_perd_prte_id
             ,P_EPN_ATTRIBUTE1      => r_EPN.INFORMATION111
             ,P_EPN_ATTRIBUTE10      => r_EPN.INFORMATION120
             ,P_EPN_ATTRIBUTE11      => r_EPN.INFORMATION121
             ,P_EPN_ATTRIBUTE12      => r_EPN.INFORMATION122
             ,P_EPN_ATTRIBUTE13      => r_EPN.INFORMATION123
             ,P_EPN_ATTRIBUTE14      => r_EPN.INFORMATION124
             ,P_EPN_ATTRIBUTE15      => r_EPN.INFORMATION125
             ,P_EPN_ATTRIBUTE16      => r_EPN.INFORMATION126
             ,P_EPN_ATTRIBUTE17      => r_EPN.INFORMATION127
             ,P_EPN_ATTRIBUTE18      => r_EPN.INFORMATION128
             ,P_EPN_ATTRIBUTE19      => r_EPN.INFORMATION129
             ,P_EPN_ATTRIBUTE2      => r_EPN.INFORMATION112
             ,P_EPN_ATTRIBUTE20      => r_EPN.INFORMATION130
             ,P_EPN_ATTRIBUTE21      => r_EPN.INFORMATION131
             ,P_EPN_ATTRIBUTE22      => r_EPN.INFORMATION132
             ,P_EPN_ATTRIBUTE23      => r_EPN.INFORMATION133
             ,P_EPN_ATTRIBUTE24      => r_EPN.INFORMATION134
             ,P_EPN_ATTRIBUTE25      => r_EPN.INFORMATION135
             ,P_EPN_ATTRIBUTE26      => r_EPN.INFORMATION136
             ,P_EPN_ATTRIBUTE27      => r_EPN.INFORMATION137
             ,P_EPN_ATTRIBUTE28      => r_EPN.INFORMATION138
             ,P_EPN_ATTRIBUTE29      => r_EPN.INFORMATION139
             ,P_EPN_ATTRIBUTE3      => r_EPN.INFORMATION113
             ,P_EPN_ATTRIBUTE30      => r_EPN.INFORMATION140
             ,P_EPN_ATTRIBUTE4      => r_EPN.INFORMATION114
             ,P_EPN_ATTRIBUTE5      => r_EPN.INFORMATION115
             ,P_EPN_ATTRIBUTE6      => r_EPN.INFORMATION116
             ,P_EPN_ATTRIBUTE7      => r_EPN.INFORMATION117
             ,P_EPN_ATTRIBUTE8      => r_EPN.INFORMATION118
             ,P_EPN_ATTRIBUTE9      => r_EPN.INFORMATION119
             ,P_EPN_ATTRIBUTE_CATEGORY      => r_EPN.INFORMATION110
             ,P_EXCLD_FLAG      => r_EPN.INFORMATION12
             ,P_ORDR_NUM      => r_EPN.INFORMATION257
             ,P_PROBATION_PERIOD      => r_EPN.INFORMATION287
             ,P_PROBATION_UNIT      => r_EPN.INFORMATION11
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_epn.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_epn.INFORMATION296
         );
	end if;  -- l_update
            --
          end if;
          --
          -- Delete the row if it is end dated.
          --
          if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
              trunc(l_max_eed) = trunc(r_EPN.information3)) then
              --
              BEN_ELIG_PRBTN_PERD_PRTE_API.delete_ELIG_PRBTN_PERD_PRTE(
                 --
                 p_validate                       => false
                 ,p_elig_prbtn_perd_prte_id                   => l_elig_prbtn_perd_prte_id
                 ,p_effective_start_date           => l_effective_start_date
                 ,p_effective_end_date             => l_effective_end_date
                 ,p_object_version_number          => l_object_version_number
                 ,p_effective_date                 => l_max_eed
                 ,p_datetrack_mode                 => hr_api.g_delete
                 --
                 );
                 --
          end if;
          --
          l_prev_pk_id := l_current_pk_id ;
          --
        end if;
        --
      end if;
      --
    end loop;
    --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EPN',r_EPN.information5 ) ;
     --
  end create_EPN_rows;

    --
    ---------------------------------------------------------------
    ----------------------< create_EPP_rows >-----------------------
    ---------------------------------------------------------------
    --
    procedure create_EPP_rows
    (
          p_validate                       in  number     default 0
         ,p_copy_entity_txn_id             in  number
         ,p_effective_date                 in  date
         ,p_prefix_suffix_text             in  varchar2  default null
         ,p_reuse_object_flag              in  varchar2  default null
         ,p_target_business_group_id       in  varchar2  default null
         ,p_prefix_suffix_cd               in  varchar2  default null
    ) is
    --
    l_ELIGY_PRFL_ID  number;
    l_PL_ID  number;
    l_ORDR_NUM  number;
    cursor c_unique_EPP(l_table_alias varchar2) is
    select distinct cpe.information1,
      cpe.information2,
      cpe.information3,
      cpe.table_route_id
    ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
         pqh_table_route tr
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = tr.table_route_id
    -- and   tr.where_clause        = l_BEN_ELG_PRTT_ANTR_PL_PRTE_F
   and tr.table_alias = l_table_alias
    and   cpe.number_of_copies   = 1 -- ADDITION
    group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
    --
    --
    cursor c_EPP_min_max_dates(c_table_route_id  number,
                 c_information1   number) is
    select
      min(cpe.information2) min_esd,
      max(cpe.information3) min_eed
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1 ;
    --
    cursor c_EPP(c_table_route_id  number,
                 c_information1   number,
                 c_information2   date,
                 c_information3   date )  is
    select
      cpe.*
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1
    and   cpe.information2       = c_information2
    and   cpe.information3       = c_information3
    and rownum = 1 ;
    -- Date Track target record
    cursor c_find_EPP_in_target(
                                 c_effective_start_date    date,
                                 c_effective_end_date      date,
                                 c_business_group_id       number,
                                 c_new_pk_id               number) is
    select
      EPP.elig_prtt_anthr_pl_prte_id new_value
    from BEN_ELIG_PRTT_ANTHR_PL_PRTE_F EPP
    where
    EPP.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
    EPP.PL_ID     = l_PL_ID  and
    EPP.business_group_id  = c_business_group_id
    and   EPP.elig_prtt_anthr_pl_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
    and exists ( select null
                 from BEN_ELIG_PRTT_ANTHR_PL_PRTE_F EPP1
                 where
                 EPP1.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 EPP1.PL_ID    = l_PL_ID  and
                 EPP1.ORDR_NUM = l_ORDR_NUM and -- Added this criteria
                 EPP1.business_group_id  = c_business_group_id
                 and   EPP1.effective_start_date <= c_effective_start_date )
    and exists ( select null
                 from BEN_ELIG_PRTT_ANTHR_PL_PRTE_F EPP2
                 where
                 EPP2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                 EPP2.PL_ID     = l_PL_ID  and
                 EPP2.ORDR_NUM = l_ORDR_NUM and -- Added this criteria
                 EPP2.business_group_id  = c_business_group_id
                 and   EPP2.effective_end_date >= c_effective_end_date )
                 ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
    --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

    l_prev_pk_id              number := null ;
    l_first_rec               boolean := true ;
    r_EPP                     c_EPP%rowtype;
    l_elig_prtt_anthr_pl_prte_id             number ;
    l_object_version_number   number ;
    l_effective_start_date    date ;
    l_effective_end_date      date ;
    l_prefix                  pqh_copy_entity_attribs.information1%type := null;
    l_suffix                  pqh_copy_entity_attribs.information1%type := null;
    l_new_value               number(15);
    l_object_found_in_target  boolean := false ;
    l_min_esd                 date;
    l_max_eed                 date;
    l_effective_date          date;
    --
  begin
    -- Initialization
    l_object_found_in_target := false ;
    -- End Initialization
    -- Derive the prefix - sufix
    if   p_prefix_suffix_cd = 'PREFIX' then
      l_prefix  := p_prefix_suffix_text ;
    elsif p_prefix_suffix_cd = 'SUFFIX' then
      l_suffix   := p_prefix_suffix_text ;
    else
      l_prefix := null ;
      l_suffix  := null ;
    end if ;
    -- End Prefix Sufix derivation
    for r_EPP_unique in c_unique_EPP('EPP') loop

      if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EPP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
        --
        hr_utility.set_location(' r_EPP_unique.table_route_id '||r_EPP_unique.table_route_id,10);
        hr_utility.set_location(' r_EPP_unique.information1 '||r_EPP_unique.information1,10);
        hr_utility.set_location( 'r_EPP_unique.information2 '||r_EPP_unique.information2,10);
        hr_utility.set_location( 'r_EPP_unique.information3 '||r_EPP_unique.information3,10);
        -- If reuse objects flag is 'Y' then check for the object in the target business group
        -- if found insert the record into PLSql table and exit the loop else try create the
        -- object in the target business group
        --
        l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EPP_unique.dml_operation ;
       --
/**********************moved from below **********************/
        open c_EPP(r_EPP_unique.table_route_id,
                 r_EPP_unique.information1,
                 r_EPP_unique.information2,
                 r_EPP_unique.information3 ) ;
        --
        fetch c_EPP into r_EPP ;
        --
        close c_EPP ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EPP.information263,l_dml_operation);

        -- Only For Use by Create Wizard - Same Business Group
        l_PL_ID := NVL(get_fk('PL_ID', r_EPP.information261,l_dml_operation),
                       r_EPP.information261);

        l_ORDR_NUM  := r_EPP.information260;

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EPP_unique.information2 and r_EPP_unique.information3 then
               l_update := true;
               if r_EPP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_PRTT_ANTHR_PL_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_PRTT_ANTHR_PL_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EPP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EPP',l_new_value,l_prefix || r_EPP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
        l_min_esd := null ;
        l_max_eed := null ;
        open c_EPP_min_max_dates(r_EPP_unique.table_route_id, r_EPP_unique.information1 ) ;
        fetch c_EPP_min_max_dates into l_min_esd,l_max_eed ;
        --

        if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
             l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
          l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
        end if;
       l_min_esd := greatest(l_min_esd,r_EPP_unique.information2);
/**********************moved up from here **********************
        open c_EPP(r_EPP_unique.table_route_id,
                 r_EPP_unique.information1,
                 r_EPP_unique.information2,
                 r_EPP_unique.information3 ) ;
        --
        fetch c_EPP into r_EPP ;
        --
        close c_EPP ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EPP.information263,l_dml_operation);

        -- Only For Use by Create Wizard - Same Business Group
        l_PL_ID := NVL(get_fk('PL_ID', r_EPP.information261,l_dml_operation),
                       r_EPP.information261);

        l_ORDR_NUM  := r_EPP.information260;

**********************************************************/

        if p_reuse_object_flag = 'Y' then
          if c_EPP_min_max_dates%found then
            -- cursor to find the object
            open c_find_EPP_in_target( l_min_esd,l_max_eed,
                                  p_target_business_group_id, nvl(l_elig_prtt_anthr_pl_prte_id, -999)  ) ;
            fetch c_find_EPP_in_target into l_new_value ;
            if c_find_EPP_in_target%found then
              --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_PRTT_ANTHR_PL_PRTE_F',
                   p_base_key_column => 'ELIG_PRTT_ANTHR_PL_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
              if r_EPP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                 nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_PRTT_ANTHR_PL_PRTE_ID'  then
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_PRTT_ANTHR_PL_PRTE_ID' ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPP_unique.information1 ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPP_unique.table_route_id;
                 --
                 -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                 --
                 BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
              end if ;
              --
              l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
            end if;
            close c_find_EPP_in_target ;
          --
          end if;
        end if ;
        --
        close c_EPP_min_max_dates ;
        end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

          --
          l_current_pk_id := r_EPP.information1;
          --
          hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
          hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
          --
          if l_current_pk_id =  l_prev_pk_id  then
            --
            l_first_rec := false ;
            --
          else
            --
            l_first_rec := true ;
            --
          end if ;
          --

          l_effective_date := r_EPP.information2;
          if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
          end if;

          if l_first_rec and not l_update then
            -- Call Create routine.
            hr_utility.set_location(' BEN_ELIG_PRTT_ANTHR_PL_PRTE_F CREATE_ELG_PRT_ANTHR_PL_PT ',20);
            BEN_ELG_PRT_ANTHR_PL_PT_API.CREATE_ELG_PRT_ANTHR_PL_PT(
              --
              P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
              --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_PRTT_ANTHR_PL_PRTE_ID      => l_elig_prtt_anthr_pl_prte_id
             ,P_EPP_ATTRIBUTE1      => r_EPP.INFORMATION111
             ,P_EPP_ATTRIBUTE10      => r_EPP.INFORMATION120
             ,P_EPP_ATTRIBUTE11      => r_EPP.INFORMATION121
             ,P_EPP_ATTRIBUTE12      => r_EPP.INFORMATION122
             ,P_EPP_ATTRIBUTE13      => r_EPP.INFORMATION123
             ,P_EPP_ATTRIBUTE14      => r_EPP.INFORMATION124
             ,P_EPP_ATTRIBUTE15      => r_EPP.INFORMATION125
             ,P_EPP_ATTRIBUTE16      => r_EPP.INFORMATION126
             ,P_EPP_ATTRIBUTE17      => r_EPP.INFORMATION127
             ,P_EPP_ATTRIBUTE18      => r_EPP.INFORMATION128
             ,P_EPP_ATTRIBUTE19      => r_EPP.INFORMATION129
             ,P_EPP_ATTRIBUTE2      => r_EPP.INFORMATION112
             ,P_EPP_ATTRIBUTE20      => r_EPP.INFORMATION130
             ,P_EPP_ATTRIBUTE21      => r_EPP.INFORMATION131
             ,P_EPP_ATTRIBUTE22      => r_EPP.INFORMATION132
             ,P_EPP_ATTRIBUTE23      => r_EPP.INFORMATION133
             ,P_EPP_ATTRIBUTE24      => r_EPP.INFORMATION134
             ,P_EPP_ATTRIBUTE25      => r_EPP.INFORMATION135
             ,P_EPP_ATTRIBUTE26      => r_EPP.INFORMATION136
             ,P_EPP_ATTRIBUTE27      => r_EPP.INFORMATION137
             ,P_EPP_ATTRIBUTE28      => r_EPP.INFORMATION138
             ,P_EPP_ATTRIBUTE29      => r_EPP.INFORMATION139
             ,P_EPP_ATTRIBUTE3      => r_EPP.INFORMATION113
             ,P_EPP_ATTRIBUTE30      => r_EPP.INFORMATION140
             ,P_EPP_ATTRIBUTE4      => r_EPP.INFORMATION114
             ,P_EPP_ATTRIBUTE5      => r_EPP.INFORMATION115
             ,P_EPP_ATTRIBUTE6      => r_EPP.INFORMATION116
             ,P_EPP_ATTRIBUTE7      => r_EPP.INFORMATION117
             ,P_EPP_ATTRIBUTE8      => r_EPP.INFORMATION118
             ,P_EPP_ATTRIBUTE9      => r_EPP.INFORMATION119
             ,P_EPP_ATTRIBUTE_CATEGORY      => r_EPP.INFORMATION110
             ,P_EXCLD_FLAG      => r_EPP.INFORMATION11
             ,P_ORDR_NUM      => r_EPP.INFORMATION260
             ,P_PL_ID      => l_PL_ID
             --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>   l_object_version_number
            );
            -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            -- Update all relevent cer records with new pk_id
            hr_utility.set_location('Before plsql table ',222);
            hr_utility.set_location('new_value id '||l_elig_prtt_anthr_pl_prte_id,222);
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_PRTT_ANTHR_PL_PRTE_ID' ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EPP.information1 ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_PRTT_ANTHR_PL_PRTE_ID ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPP_unique.table_route_id;
            hr_utility.set_location('After plsql table ',222);
            --
            -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
            --
            BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
            --
          else
            --
            -- Call Update routine for the pk_id created in prev run .
            -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            hr_utility.set_location(' BEN_ELIG_PRTT_ANTHR_PL_PRTE_F UPDATE_ELG_PRT_ANTHR_PL_PT ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EPP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EPP.information3,
               p_effective_start_date  => r_EPP.information2,
               p_dml_operation         => r_EPP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_PRTT_ANTHR_PL_PRTE_ID   := r_EPP.information1;
             l_object_version_number := r_EPP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


            BEN_ELG_PRT_ANTHR_PL_PT_API.UPDATE_ELG_PRT_ANTHR_PL_PT(
              --
              P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
              --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_PRTT_ANTHR_PL_PRTE_ID      => l_elig_prtt_anthr_pl_prte_id
             ,P_EPP_ATTRIBUTE1      => r_EPP.INFORMATION111
             ,P_EPP_ATTRIBUTE10      => r_EPP.INFORMATION120
             ,P_EPP_ATTRIBUTE11      => r_EPP.INFORMATION121
             ,P_EPP_ATTRIBUTE12      => r_EPP.INFORMATION122
             ,P_EPP_ATTRIBUTE13      => r_EPP.INFORMATION123
             ,P_EPP_ATTRIBUTE14      => r_EPP.INFORMATION124
             ,P_EPP_ATTRIBUTE15      => r_EPP.INFORMATION125
             ,P_EPP_ATTRIBUTE16      => r_EPP.INFORMATION126
             ,P_EPP_ATTRIBUTE17      => r_EPP.INFORMATION127
             ,P_EPP_ATTRIBUTE18      => r_EPP.INFORMATION128
             ,P_EPP_ATTRIBUTE19      => r_EPP.INFORMATION129
             ,P_EPP_ATTRIBUTE2      => r_EPP.INFORMATION112
             ,P_EPP_ATTRIBUTE20      => r_EPP.INFORMATION130
             ,P_EPP_ATTRIBUTE21      => r_EPP.INFORMATION131
             ,P_EPP_ATTRIBUTE22      => r_EPP.INFORMATION132
             ,P_EPP_ATTRIBUTE23      => r_EPP.INFORMATION133
             ,P_EPP_ATTRIBUTE24      => r_EPP.INFORMATION134
             ,P_EPP_ATTRIBUTE25      => r_EPP.INFORMATION135
             ,P_EPP_ATTRIBUTE26      => r_EPP.INFORMATION136
             ,P_EPP_ATTRIBUTE27      => r_EPP.INFORMATION137
             ,P_EPP_ATTRIBUTE28      => r_EPP.INFORMATION138
             ,P_EPP_ATTRIBUTE29      => r_EPP.INFORMATION139
             ,P_EPP_ATTRIBUTE3      => r_EPP.INFORMATION113
             ,P_EPP_ATTRIBUTE30      => r_EPP.INFORMATION140
             ,P_EPP_ATTRIBUTE4      => r_EPP.INFORMATION114
             ,P_EPP_ATTRIBUTE5      => r_EPP.INFORMATION115
             ,P_EPP_ATTRIBUTE6      => r_EPP.INFORMATION116
             ,P_EPP_ATTRIBUTE7      => r_EPP.INFORMATION117
             ,P_EPP_ATTRIBUTE8      => r_EPP.INFORMATION118
             ,P_EPP_ATTRIBUTE9      => r_EPP.INFORMATION119
             ,P_EPP_ATTRIBUTE_CATEGORY      => r_EPP.INFORMATION110
             ,P_EXCLD_FLAG      => r_EPP.INFORMATION11
             ,P_ORDR_NUM      => r_EPP.INFORMATION260
             ,P_PL_ID      => l_PL_ID
               --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
            );
	end if;  -- l_update
            --
          end if;
          --
          -- Delete the row if it is end dated.
          --
          if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
              trunc(l_max_eed) = trunc(r_EPP.information3)) then
              --
              BEN_ELG_PRT_ANTHR_PL_PT_API.delete_ELG_PRT_ANTHR_PL_PT(
                 --
                 p_validate                       => false
                 ,p_elig_prtt_anthr_pl_prte_id                   => l_elig_prtt_anthr_pl_prte_id
                 ,p_effective_start_date           => l_effective_start_date
                 ,p_effective_end_date             => l_effective_end_date
                 ,p_object_version_number          => l_object_version_number
                 ,p_effective_date                 => l_max_eed
                 ,p_datetrack_mode                 => hr_api.g_delete
                 --
                 );
                 --
          end if;
          --
          l_prev_pk_id := l_current_pk_id ;
          --
        end if;
        --
      end if;
      --
    end loop;
    --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EPP',r_EPP.information5 ) ;
     --
  end create_EPP_rows;

    --
    ---------------------------------------------------------------
    ----------------------< create_EPS_rows >-----------------------
    ---------------------------------------------------------------
    --
    procedure create_EPS_rows
    (
          p_validate                       in  number     default 0
         ,p_copy_entity_txn_id             in  number
         ,p_effective_date                 in  date
         ,p_prefix_suffix_text             in  varchar2  default null
         ,p_reuse_object_flag              in  varchar2  default null
         ,p_target_business_group_id       in  varchar2  default null
         ,p_prefix_suffix_cd               in  varchar2  default null
    ) is
    --
    l_ELIGY_PRFL_ID  number;
    l_POSITION_ID  number;
    cursor c_unique_EPS(l_table_alias varchar2) is
    select distinct cpe.information1,
      cpe.information2,
      cpe.information3,
      cpe.table_route_id
    ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
         pqh_table_route tr
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = tr.table_route_id
    -- and   tr.where_clause        = l_BEN_ELIG_PSTN_PRTE_F
   and tr.table_alias = l_table_alias
    and   cpe.number_of_copies   = 1 -- ADDITION
    group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
    --
    --
    cursor c_EPS_min_max_dates(c_table_route_id  number,
                 c_information1   number) is
    select
      min(cpe.information2) min_esd,
      max(cpe.information3) min_eed
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1 ;
    --
    cursor c_EPS(c_table_route_id  number,
                 c_information1   number,
                 c_information2   date,
                 c_information3   date )  is
    select
      cpe.*
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1
    and   cpe.information2       = c_information2
    and   cpe.information3       = c_information3
    and rownum = 1 ;
    -- Date Track target record
    cursor c_find_EPS_in_target(
                                 c_effective_start_date    date,
                                 c_effective_end_date      date,
                                 c_business_group_id       number,
                                 c_new_pk_id               number) is
    select
      EPS.elig_pstn_prte_id new_value
    from BEN_ELIG_PSTN_PRTE_F EPS
    where
    EPS.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
    EPS.POSITION_ID     = l_POSITION_ID  and
    EPS.business_group_id  = c_business_group_id
    and   EPS.elig_pstn_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
    and exists ( select null
                 from BEN_ELIG_PSTN_PRTE_F EPS1
                 where
                 EPS1.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 EPS1.POSITION_ID = l_POSITION_ID  and
                 EPS1.business_group_id  = c_business_group_id
                 and   EPS1.effective_start_date <= c_effective_start_date )
    and exists ( select null
                 from BEN_ELIG_PSTN_PRTE_F EPS2
                 where
                 EPS2.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 EPS2.POSITION_ID = l_POSITION_ID  and
                 EPS2.business_group_id  = c_business_group_id
                 and   EPS2.effective_end_date >= c_effective_end_date )
                 ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
    --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

    l_prev_pk_id              number := null ;
    l_first_rec               boolean := true ;
    r_EPS                     c_EPS%rowtype;
    l_elig_pstn_prte_id             number ;
    l_object_version_number   number ;
    l_effective_start_date    date ;
    l_effective_end_date      date ;
    l_prefix                  pqh_copy_entity_attribs.information1%type := null;
    l_suffix                  pqh_copy_entity_attribs.information1%type := null;
    l_new_value               number(15);
    l_object_found_in_target  boolean := false ;
    l_min_esd                 date;
    l_max_eed                 date;
    l_effective_date          date;
    --
  begin
    -- Initialization
    l_object_found_in_target := false ;
    -- End Initialization
    -- Derive the prefix - sufix
    if   p_prefix_suffix_cd = 'PREFIX' then
      l_prefix  := p_prefix_suffix_text ;
    elsif p_prefix_suffix_cd = 'SUFFIX' then
      l_suffix   := p_prefix_suffix_text ;
    else
      l_prefix := null ;
      l_suffix  := null ;
    end if ;
    -- End Prefix Sufix derivation
    for r_EPS_unique in c_unique_EPS('EPS') loop

      if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EPS_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
        --
        hr_utility.set_location(' r_EPS_unique.table_route_id '||r_EPS_unique.table_route_id,10);
        hr_utility.set_location(' r_EPS_unique.information1 '||r_EPS_unique.information1,10);
        hr_utility.set_location( 'r_EPS_unique.information2 '||r_EPS_unique.information2,10);
        hr_utility.set_location( 'r_EPS_unique.information3 '||r_EPS_unique.information3,10);
        -- If reuse objects flag is 'Y' then check for the object in the target business group
        -- if found insert the record into PLSql table and exit the loop else try create the
        -- object in the target business group
        --
        l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EPS_unique.dml_operation ;
       --
/**********************moved from below **********************/
        open c_EPS(r_EPS_unique.table_route_id,
                 r_EPS_unique.information1,
                 r_EPS_unique.information2,
                 r_EPS_unique.information3 ) ;
        --
        fetch c_EPS into r_EPS ;
        --
        close c_EPS ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EPS.INFORMATION263,l_dml_operation);
        if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
          l_POSITION_ID := r_EPS.information176;
        else
          l_POSITION_ID := r_EPS.information174;
        end if;

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EPS_unique.information2 and r_EPS_unique.information3 then
               l_update := true;
               if r_EPS_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_PSTN_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_PSTN_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPS_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EPS_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPS_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EPS',l_new_value,l_prefix || r_EPS_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
        l_min_esd := null ;
        l_max_eed := null ;
        open c_EPS_min_max_dates(r_EPS_unique.table_route_id, r_EPS_unique.information1 ) ;
        fetch c_EPS_min_max_dates into l_min_esd,l_max_eed ;
        --

        if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
             l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
          l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
        end if;
       l_min_esd := greatest(l_min_esd,r_EPS_unique.information2);
/**********************moved up from here **********************
        open c_EPS(r_EPS_unique.table_route_id,
                 r_EPS_unique.information1,
                 r_EPS_unique.information2,
                 r_EPS_unique.information3 ) ;
        --
        fetch c_EPS into r_EPS ;
        --
        close c_EPS ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EPS.INFORMATION263,l_dml_operation);
        if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
          l_POSITION_ID := r_EPS.information176;
        else
          l_POSITION_ID := r_EPS.information174;
        end if;

**********************************************************/

        --
        if l_POSITION_ID is null then
          close c_EPS_min_max_dates;
          --
          BEN_PD_COPY_TO_BEN_three.log_nomapping_data(p_parent_table_alias =>'ELP'
                     ,p_parent_pk_id         => r_EPS.information263
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'EPS'
                     ,p_child_data           => r_EPS.information173 );

          --
        else
          if p_reuse_object_flag = 'Y' then
             if c_EPS_min_max_dates%found then
               -- cursor to find the object
               open c_find_EPS_in_target( l_min_esd,l_max_eed,
                                     p_target_business_group_id, nvl(l_elig_pstn_prte_id, -999)  ) ;
               fetch c_find_EPS_in_target into l_new_value ;
               if c_find_EPS_in_target%found then
                 --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_PSTN_PRTE_F',
                   p_base_key_column => 'ELIG_PSTN_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
                 if r_EPS_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                    nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_PSTN_PRTE_ID'  then
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_PSTN_PRTE_ID' ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPS_unique.information1 ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPS_unique.table_route_id;
                    --
                    -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                    --
                    BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                 end if ;
                 --
                 l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
               end if;
               close c_find_EPS_in_target ;
             --
             end if;
          end if ;
          --
          close c_EPS_min_max_dates ;

       end if; -- bug 4565106

      end if; --if p_dml_operation
       --
       if ( not l_object_found_in_target OR l_update ) and ( l_POSITION_ID is not null)  then -- bug# 4251900

            --
            l_current_pk_id := r_EPS.information1;
            --
            hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
            hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
            --
            if l_current_pk_id =  l_prev_pk_id  then
              --
              l_first_rec := false ;
              --
            else
              --
              l_first_rec := true ;
              --
            end if ;
            --

            l_effective_date := r_EPS.information2;
            if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
              l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
            end if;

            if l_first_rec and not l_update then
              -- Call Create routine.
              hr_utility.set_location(' BEN_ELIG_PSTN_PRTE_F CREATE_ELIG_PSTN_PRTE ',20);
              BEN_ELIG_PSTN_PRTE_API.CREATE_ELIG_PSTN_PRTE(
                 --
                 P_VALIDATE               => false
                 ,P_EFFECTIVE_DATE        => l_effective_date
                 ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                 --
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_PSTN_PRTE_ID      => l_elig_pstn_prte_id
				 ,P_EPS_ATTRIBUTE1      => r_EPS.INFORMATION111
				 ,P_EPS_ATTRIBUTE10      => r_EPS.INFORMATION120
				 ,P_EPS_ATTRIBUTE11      => r_EPS.INFORMATION121
				 ,P_EPS_ATTRIBUTE12      => r_EPS.INFORMATION122
				 ,P_EPS_ATTRIBUTE13      => r_EPS.INFORMATION123
				 ,P_EPS_ATTRIBUTE14      => r_EPS.INFORMATION124
				 ,P_EPS_ATTRIBUTE15      => r_EPS.INFORMATION125
				 ,P_EPS_ATTRIBUTE16      => r_EPS.INFORMATION126
				 ,P_EPS_ATTRIBUTE17      => r_EPS.INFORMATION127
				 ,P_EPS_ATTRIBUTE18      => r_EPS.INFORMATION128
				 ,P_EPS_ATTRIBUTE19      => r_EPS.INFORMATION129
				 ,P_EPS_ATTRIBUTE2      => r_EPS.INFORMATION112
				 ,P_EPS_ATTRIBUTE20      => r_EPS.INFORMATION130
				 ,P_EPS_ATTRIBUTE21      => r_EPS.INFORMATION131
				 ,P_EPS_ATTRIBUTE22      => r_EPS.INFORMATION132
				 ,P_EPS_ATTRIBUTE23      => r_EPS.INFORMATION133
				 ,P_EPS_ATTRIBUTE24      => r_EPS.INFORMATION134
				 ,P_EPS_ATTRIBUTE25      => r_EPS.INFORMATION135
				 ,P_EPS_ATTRIBUTE26      => r_EPS.INFORMATION136
				 ,P_EPS_ATTRIBUTE27      => r_EPS.INFORMATION137
				 ,P_EPS_ATTRIBUTE28      => r_EPS.INFORMATION138
				 ,P_EPS_ATTRIBUTE29      => r_EPS.INFORMATION139
				 ,P_EPS_ATTRIBUTE3      => r_EPS.INFORMATION113
				 ,P_EPS_ATTRIBUTE30      => r_EPS.INFORMATION140
				 ,P_EPS_ATTRIBUTE4      => r_EPS.INFORMATION114
				 ,P_EPS_ATTRIBUTE5      => r_EPS.INFORMATION115
				 ,P_EPS_ATTRIBUTE6      => r_EPS.INFORMATION116
				 ,P_EPS_ATTRIBUTE7      => r_EPS.INFORMATION117
				 ,P_EPS_ATTRIBUTE8      => r_EPS.INFORMATION118
				 ,P_EPS_ATTRIBUTE9      => r_EPS.INFORMATION119
				 ,P_EPS_ATTRIBUTE_CATEGORY      => r_EPS.INFORMATION110
				 ,P_EXCLD_FLAG      => r_EPS.INFORMATION11
				 ,P_ORDR_NUM      => r_EPS.INFORMATION261
				 ,P_POSITION_ID      => l_POSITION_ID
	   --
	--    ****** END CHANGE LINES

	   --

				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
                                 ,P_CRITERIA_SCORE       => r_eps.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_eps.INFORMATION296
			 );
               -- insert the table_name,old_pk_id,new_pk_id into a plsql record
               -- Update all relevent cer records with new pk_id
               hr_utility.set_location('Before plsql table ',222);
               hr_utility.set_location('new_value id '||l_elig_pstn_prte_id,222);
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_PSTN_PRTE_ID' ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EPS.information1 ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_PSTN_PRTE_ID ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPS_unique.table_route_id;
               hr_utility.set_location('After plsql table ',222);
               --
               -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
               --
               BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
               --
             else
               --
               -- Call Update routine for the pk_id created in prev run .
               -- insert the table_name,old_pk_id,new_pk_id into a plsql record
               hr_utility.set_location(' BEN_ELIG_PSTN_PRTE_F UPDATE_ELIG_PSTN_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EPS.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EPS.information3,
               p_effective_start_date  => r_EPS.information2,
               p_dml_operation         => r_EPS.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_PSTN_PRTE_ID   := r_EPS.information1;
             l_object_version_number := r_EPS.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


               BEN_ELIG_PSTN_PRTE_API.UPDATE_ELIG_PSTN_PRTE(
                 --
                 P_VALIDATE               => false
                 ,P_EFFECTIVE_DATE        => l_effective_date
                 ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                 --
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_PSTN_PRTE_ID      => l_elig_pstn_prte_id
				 ,P_EPS_ATTRIBUTE1      => r_EPS.INFORMATION111
				 ,P_EPS_ATTRIBUTE10      => r_EPS.INFORMATION120
				 ,P_EPS_ATTRIBUTE11      => r_EPS.INFORMATION121
				 ,P_EPS_ATTRIBUTE12      => r_EPS.INFORMATION122
				 ,P_EPS_ATTRIBUTE13      => r_EPS.INFORMATION123
				 ,P_EPS_ATTRIBUTE14      => r_EPS.INFORMATION124
				 ,P_EPS_ATTRIBUTE15      => r_EPS.INFORMATION125
				 ,P_EPS_ATTRIBUTE16      => r_EPS.INFORMATION126
				 ,P_EPS_ATTRIBUTE17      => r_EPS.INFORMATION127
				 ,P_EPS_ATTRIBUTE18      => r_EPS.INFORMATION128
				 ,P_EPS_ATTRIBUTE19      => r_EPS.INFORMATION129
				 ,P_EPS_ATTRIBUTE2      => r_EPS.INFORMATION112
				 ,P_EPS_ATTRIBUTE20      => r_EPS.INFORMATION130
				 ,P_EPS_ATTRIBUTE21      => r_EPS.INFORMATION131
				 ,P_EPS_ATTRIBUTE22      => r_EPS.INFORMATION132
				 ,P_EPS_ATTRIBUTE23      => r_EPS.INFORMATION133
				 ,P_EPS_ATTRIBUTE24      => r_EPS.INFORMATION134
				 ,P_EPS_ATTRIBUTE25      => r_EPS.INFORMATION135
				 ,P_EPS_ATTRIBUTE26      => r_EPS.INFORMATION136
				 ,P_EPS_ATTRIBUTE27      => r_EPS.INFORMATION137
				 ,P_EPS_ATTRIBUTE28      => r_EPS.INFORMATION138
				 ,P_EPS_ATTRIBUTE29      => r_EPS.INFORMATION139
				 ,P_EPS_ATTRIBUTE3      => r_EPS.INFORMATION113
				 ,P_EPS_ATTRIBUTE30      => r_EPS.INFORMATION140
				 ,P_EPS_ATTRIBUTE4      => r_EPS.INFORMATION114
				 ,P_EPS_ATTRIBUTE5      => r_EPS.INFORMATION115
				 ,P_EPS_ATTRIBUTE6      => r_EPS.INFORMATION116
				 ,P_EPS_ATTRIBUTE7      => r_EPS.INFORMATION117
				 ,P_EPS_ATTRIBUTE8      => r_EPS.INFORMATION118
				 ,P_EPS_ATTRIBUTE9      => r_EPS.INFORMATION119
				 ,P_EPS_ATTRIBUTE_CATEGORY      => r_EPS.INFORMATION110
				 ,P_EXCLD_FLAG      => r_EPS.INFORMATION11
				 ,P_ORDR_NUM      => r_EPS.INFORMATION261
				 ,P_POSITION_ID      => l_POSITION_ID
	   --
	--   ****** END CHANGE LINES

	   --
				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER => l_object_version_number
				 ,P_DATETRACK_MODE        => l_datetrack_mode
                                 ,P_CRITERIA_SCORE       => r_eps.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_eps.INFORMATION296
			 );
	end if;  -- l_update
               --
             end if;
             --
             -- Delete the row if it is end dated.
             --
             if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                 trunc(l_max_eed) = trunc(r_EPS.information3)) then
                 --
                 BEN_ELIG_PSTN_PRTE_API.delete_ELIG_PSTN_PRTE(
                    --
                    p_validate                       => false
                    ,p_elig_pstn_prte_id                   => l_elig_pstn_prte_id
                    ,p_effective_start_date           => l_effective_start_date
                    ,p_effective_end_date             => l_effective_end_date
                    ,p_object_version_number          => l_object_version_number
                    ,p_effective_date                 => l_max_eed
                    ,p_datetrack_mode                 => hr_api.g_delete
                    --
                    );
                    --
             end if;
             --
             l_prev_pk_id := l_current_pk_id ;
             --
          -- end if; ---- bug 4565106
           --
        end if;
        --
      end if;
      --
    end loop;
    --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EPS',r_EPS.information5 ) ;
     --
  end create_EPS_rows;

    --
    ---------------------------------------------------------------
    ----------------------< create_EPY_rows >-----------------------
    ---------------------------------------------------------------
    --
    procedure create_EPY_rows
    (
          p_validate                       in  number     default 0
         ,p_copy_entity_txn_id             in  number
         ,p_effective_date                 in  date
         ,p_prefix_suffix_text             in  varchar2  default null
         ,p_reuse_object_flag              in  varchar2  default null
         ,p_target_business_group_id       in  varchar2  default null
         ,p_prefix_suffix_cd               in  varchar2  default null
    ) is
    --
    l_ELIGY_PRFL_ID  number;
    l_PAYROLL_ID  number;
    cursor c_unique_EPY(l_table_alias varchar2) is
    select distinct cpe.information1,
      cpe.information2,
      cpe.information3,
      cpe.table_route_id
    ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
         pqh_table_route tr
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = tr.table_route_id
    -- and   tr.where_clause        = l_BEN_ELIG_PYRL_PRTE_F
   and tr.table_alias = l_table_alias
    and   cpe.number_of_copies   = 1 -- ADDITION
    group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
    --
    --
    cursor c_EPY_min_max_dates(c_table_route_id  number,
                 c_information1   number) is
    select
      min(cpe.information2) min_esd,
      max(cpe.information3) min_eed
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1 ;
    --
    cursor c_EPY(c_table_route_id  number,
                 c_information1   number,
                 c_information2   date,
                 c_information3   date )  is
    select
      cpe.*
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1
    and   cpe.information2       = c_information2
    and   cpe.information3       = c_information3
    and rownum = 1 ;
    -- Date Track target record
    cursor c_find_EPY_in_target(
                                 c_effective_start_date    date,
                                 c_effective_end_date      date,
                                 c_business_group_id       number,
                                 c_new_pk_id               number) is
    select
      EPY.elig_pyrl_prte_id new_value
    from BEN_ELIG_PYRL_PRTE_F EPY
    where
    EPY.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
    EPY.PAYROLL_ID     = l_PAYROLL_ID  and
    EPY.business_group_id  = c_business_group_id
    and   EPY.elig_pyrl_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
    and exists ( select null
                 from BEN_ELIG_PYRL_PRTE_F EPY1
                 where
                 EPY1.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 EPY1.PAYROLL_ID = l_PAYROLL_ID  and
                 EPY1.business_group_id  = c_business_group_id
                 and   EPY1.effective_start_date <= c_effective_start_date )
    and exists ( select null
                 from BEN_ELIG_PYRL_PRTE_F EPY2
                 where
                 EPY2.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 EPY2.PAYROLL_ID = l_PAYROLL_ID  and
                 EPY2.business_group_id  = c_business_group_id
                 and   EPY2.effective_end_date >= c_effective_end_date )
                 ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
    --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

    l_prev_pk_id              number := null ;
    l_first_rec               boolean := true ;
    r_EPY                     c_EPY%rowtype;
    l_elig_pyrl_prte_id             number ;
    l_object_version_number   number ;
    l_effective_start_date    date ;
    l_effective_end_date      date ;
    l_prefix                  pqh_copy_entity_attribs.information1%type := null;
    l_suffix                  pqh_copy_entity_attribs.information1%type := null;
    l_new_value               number(15);
    l_object_found_in_target  boolean := false ;
    l_min_esd                 date;
    l_max_eed                 date;
    l_effective_date          date;
    --
  begin
    -- Initialization
    l_object_found_in_target := false ;
    -- End Initialization
    -- Derive the prefix - sufix
    if   p_prefix_suffix_cd = 'PREFIX' then
      l_prefix  := p_prefix_suffix_text ;
    elsif p_prefix_suffix_cd = 'SUFFIX' then
      l_suffix   := p_prefix_suffix_text ;
    else
      l_prefix := null ;
      l_suffix  := null ;
    end if ;
    -- End Prefix Sufix derivation
    for r_EPY_unique in c_unique_EPY('EPY') loop

      if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
         (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
          r_EPY_unique.information3 >=
                  ben_pd_copy_to_ben_one.g_copy_effective_date)
         ) then
        --
        hr_utility.set_location(' r_EPY_unique.table_route_id '||r_EPY_unique.table_route_id,10);
        hr_utility.set_location(' r_EPY_unique.information1 '||r_EPY_unique.information1,10);
        hr_utility.set_location( 'r_EPY_unique.information2 '||r_EPY_unique.information2,10);
        hr_utility.set_location( 'r_EPY_unique.information3 '||r_EPY_unique.information3,10);
        -- If reuse objects flag is 'Y' then check for the object in the target business group
        -- if found insert the record into PLSql table and exit the loop else try create the
        -- object in the target business group
        --
        l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EPY_unique.dml_operation ;
       --
/**********************moved from below **********************/
        open c_EPY(r_EPY_unique.table_route_id,
                 r_EPY_unique.information1,
                 r_EPY_unique.information2,
                 r_EPY_unique.information3 ) ;
        --
        fetch c_EPY into r_EPY ;
        --
        close c_EPY ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EPY.INFORMATION263,l_dml_operation);
        if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
          l_PAYROLL_ID := r_EPY.information176;
        else
          l_PAYROLL_ID := r_EPY.information174;
        end if;

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EPY_unique.information2 and r_EPY_unique.information3 then
               l_update := true;
               if r_EPY_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_PYRL_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_PYRL_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPY_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EPY_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPY_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EPY',l_new_value,l_prefix || r_EPY_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
        l_min_esd := null ;
        l_max_eed := null ;
        open c_EPY_min_max_dates(r_EPY_unique.table_route_id, r_EPY_unique.information1 ) ;
        fetch c_EPY_min_max_dates into l_min_esd,l_max_eed ;
        --

        if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
             l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
          l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
        end if;
       l_min_esd := greatest(l_min_esd,r_EPY_unique.information2);
/**********************moved up from here **********************
        open c_EPY(r_EPY_unique.table_route_id,
                 r_EPY_unique.information1,
                 r_EPY_unique.information2,
                 r_EPY_unique.information3 ) ;
        --
        fetch c_EPY into r_EPY ;
        --
        close c_EPY ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EPY.INFORMATION263,l_dml_operation);
        if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
          l_PAYROLL_ID := r_EPY.information176;
        else
          l_PAYROLL_ID := r_EPY.information174;
        end if;

**********************************************************/

        --
        if l_PAYROLL_ID is null then
          close c_EPY_min_max_dates;
          --
          BEN_PD_COPY_TO_BEN_three.log_nomapping_data(p_parent_table_alias =>'ELP'
                     ,p_parent_pk_id         => r_EPY.information263
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'EPY'
                     ,p_child_data           => r_EPY.information173 );

          --
        else
          if p_reuse_object_flag = 'Y' then
             if c_EPY_min_max_dates%found then
               -- cursor to find the object
               open c_find_EPY_in_target( l_min_esd,l_max_eed,
                                     p_target_business_group_id, nvl(l_elig_pyrl_prte_id, -999)  ) ;
               fetch c_find_EPY_in_target into l_new_value ;
               if c_find_EPY_in_target%found then
                 --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_PYRL_PRTE_F',
                   p_base_key_column => 'ELIG_PYRL_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
                 if r_EPY_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                    nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_PYRL_PRTE_ID'  then
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_PYRL_PRTE_ID' ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPY_unique.information1 ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPY_unique.table_route_id;
                    --
                    -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                    --
                    BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                 end if ;
                 --
                 l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
               end if;
               close c_find_EPY_in_target ;
             --
             end if;
          end if ;
          --
          close c_EPY_min_max_dates ;
          end if; --if p_dml_operation
       --
       if (not l_object_found_in_target OR l_update ) and l_payroll_id is not null then

            --
            l_current_pk_id := r_EPY.information1;
            --
            hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
            hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
            --
            if l_current_pk_id =  l_prev_pk_id  then
              --
              l_first_rec := false ;
              --
            else
              --
              l_first_rec := true ;
              --
            end if ;
            --

            l_effective_date := r_EPY.information2;
            if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                 l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
              l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
            end if;

            if l_first_rec and not l_update then
              -- Call Create routine.
              hr_utility.set_location(' BEN_ELIG_PYRL_PRTE_F CREATE_ELIG_PYRL_PRTE ',20);
              BEN_ELIG_PYRL_PRTE_API.CREATE_ELIG_PYRL_PRTE(
                 --
                 P_VALIDATE               => false
                 ,P_EFFECTIVE_DATE        => l_effective_date
                 ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                 --
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_PYRL_PRTE_ID      => l_elig_pyrl_prte_id
				 ,P_EPY_ATTRIBUTE1      => r_EPY.INFORMATION111
				 ,P_EPY_ATTRIBUTE10      => r_EPY.INFORMATION120
				 ,P_EPY_ATTRIBUTE11      => r_EPY.INFORMATION121
				 ,P_EPY_ATTRIBUTE12      => r_EPY.INFORMATION122
				 ,P_EPY_ATTRIBUTE13      => r_EPY.INFORMATION123
				 ,P_EPY_ATTRIBUTE14      => r_EPY.INFORMATION124
				 ,P_EPY_ATTRIBUTE15      => r_EPY.INFORMATION125
				 ,P_EPY_ATTRIBUTE16      => r_EPY.INFORMATION126
				 ,P_EPY_ATTRIBUTE17      => r_EPY.INFORMATION127
				 ,P_EPY_ATTRIBUTE18      => r_EPY.INFORMATION128
				 ,P_EPY_ATTRIBUTE19      => r_EPY.INFORMATION129
				 ,P_EPY_ATTRIBUTE2      => r_EPY.INFORMATION112
				 ,P_EPY_ATTRIBUTE20      => r_EPY.INFORMATION130
				 ,P_EPY_ATTRIBUTE21      => r_EPY.INFORMATION131
				 ,P_EPY_ATTRIBUTE22      => r_EPY.INFORMATION132
				 ,P_EPY_ATTRIBUTE23      => r_EPY.INFORMATION133
				 ,P_EPY_ATTRIBUTE24      => r_EPY.INFORMATION134
				 ,P_EPY_ATTRIBUTE25      => r_EPY.INFORMATION135
				 ,P_EPY_ATTRIBUTE26      => r_EPY.INFORMATION136
				 ,P_EPY_ATTRIBUTE27      => r_EPY.INFORMATION137
				 ,P_EPY_ATTRIBUTE28      => r_EPY.INFORMATION138
				 ,P_EPY_ATTRIBUTE29      => r_EPY.INFORMATION139
				 ,P_EPY_ATTRIBUTE3      => r_EPY.INFORMATION113
				 ,P_EPY_ATTRIBUTE30      => r_EPY.INFORMATION140
				 ,P_EPY_ATTRIBUTE4      => r_EPY.INFORMATION114
				 ,P_EPY_ATTRIBUTE5      => r_EPY.INFORMATION115
				 ,P_EPY_ATTRIBUTE6      => r_EPY.INFORMATION116
				 ,P_EPY_ATTRIBUTE7      => r_EPY.INFORMATION117
				 ,P_EPY_ATTRIBUTE8      => r_EPY.INFORMATION118
				 ,P_EPY_ATTRIBUTE9      => r_EPY.INFORMATION119
				 ,P_EPY_ATTRIBUTE_CATEGORY      => r_EPY.INFORMATION110
				 ,P_EXCLD_FLAG      => r_EPY.INFORMATION11
				 ,P_ORDR_NUM      => r_EPY.INFORMATION260
				 ,P_PAYROLL_ID      => l_PAYROLL_ID
	   --
	--    ****** END CHANGE LINES

	   --

				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
                                 ,P_CRITERIA_SCORE       => r_epy.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_epy.INFORMATION296
			 );
              -- insert the table_name,old_pk_id,new_pk_id into a plsql record
              -- Update all relevent cer records with new pk_id
              hr_utility.set_location('Before plsql table ',222);
              hr_utility.set_location('new_value id '||l_elig_pyrl_prte_id,222);
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_PYRL_PRTE_ID' ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EPY.information1 ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_PYRL_PRTE_ID ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPY_unique.table_route_id;
              hr_utility.set_location('After plsql table ',222);
              --
              -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
              --
              BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
              --
            else
              --
              -- Call Update routine for the pk_id created in prev run .
              -- insert the table_name,old_pk_id,new_pk_id into a plsql record
              hr_utility.set_location(' BEN_ELIG_PYRL_PRTE_F UPDATE_ELIG_PYRL_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EPY.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EPY.information3,
               p_effective_start_date  => r_EPY.information2,
               p_dml_operation         => r_EPY.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_PYRL_PRTE_ID   := r_EPY.information1;
             l_object_version_number := r_EPY.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


              BEN_ELIG_PYRL_PRTE_API.UPDATE_ELIG_PYRL_PRTE(
                 --
                 P_VALIDATE               => false
                 ,P_EFFECTIVE_DATE        => l_effective_date
                 ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                 --
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_PYRL_PRTE_ID      => l_elig_pyrl_prte_id
				 ,P_EPY_ATTRIBUTE1      => r_EPY.INFORMATION111
				 ,P_EPY_ATTRIBUTE10      => r_EPY.INFORMATION120
				 ,P_EPY_ATTRIBUTE11      => r_EPY.INFORMATION121
				 ,P_EPY_ATTRIBUTE12      => r_EPY.INFORMATION122
				 ,P_EPY_ATTRIBUTE13      => r_EPY.INFORMATION123
				 ,P_EPY_ATTRIBUTE14      => r_EPY.INFORMATION124
				 ,P_EPY_ATTRIBUTE15      => r_EPY.INFORMATION125
				 ,P_EPY_ATTRIBUTE16      => r_EPY.INFORMATION126
				 ,P_EPY_ATTRIBUTE17      => r_EPY.INFORMATION127
				 ,P_EPY_ATTRIBUTE18      => r_EPY.INFORMATION128
				 ,P_EPY_ATTRIBUTE19      => r_EPY.INFORMATION129
				 ,P_EPY_ATTRIBUTE2      => r_EPY.INFORMATION112
				 ,P_EPY_ATTRIBUTE20      => r_EPY.INFORMATION130
				 ,P_EPY_ATTRIBUTE21      => r_EPY.INFORMATION131
				 ,P_EPY_ATTRIBUTE22      => r_EPY.INFORMATION132
				 ,P_EPY_ATTRIBUTE23      => r_EPY.INFORMATION133
				 ,P_EPY_ATTRIBUTE24      => r_EPY.INFORMATION134
				 ,P_EPY_ATTRIBUTE25      => r_EPY.INFORMATION135
				 ,P_EPY_ATTRIBUTE26      => r_EPY.INFORMATION136
				 ,P_EPY_ATTRIBUTE27      => r_EPY.INFORMATION137
				 ,P_EPY_ATTRIBUTE28      => r_EPY.INFORMATION138
				 ,P_EPY_ATTRIBUTE29      => r_EPY.INFORMATION139
				 ,P_EPY_ATTRIBUTE3      => r_EPY.INFORMATION113
				 ,P_EPY_ATTRIBUTE30      => r_EPY.INFORMATION140
				 ,P_EPY_ATTRIBUTE4      => r_EPY.INFORMATION114
				 ,P_EPY_ATTRIBUTE5      => r_EPY.INFORMATION115
				 ,P_EPY_ATTRIBUTE6      => r_EPY.INFORMATION116
				 ,P_EPY_ATTRIBUTE7      => r_EPY.INFORMATION117
				 ,P_EPY_ATTRIBUTE8      => r_EPY.INFORMATION118
				 ,P_EPY_ATTRIBUTE9      => r_EPY.INFORMATION119
				 ,P_EPY_ATTRIBUTE_CATEGORY      => r_EPY.INFORMATION110
				 ,P_EXCLD_FLAG      => r_EPY.INFORMATION11
				 ,P_ORDR_NUM      => r_EPY.INFORMATION260
				 ,P_PAYROLL_ID      => l_PAYROLL_ID
	   --
	--   ****** END CHANGE LINES

	   --
				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER => l_object_version_number
				 ,P_DATETRACK_MODE        => l_datetrack_mode
                                 ,P_CRITERIA_SCORE       => r_epy.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_epy.INFORMATION296
			 );
	end if;  -- l_update
              --
            end if;
            --
            -- Delete the row if it is end dated.
            --
            if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                 trunc(l_max_eed) = trunc(r_EPY.information3)) then
                 --
                 BEN_ELIG_PYRL_PRTE_API.delete_ELIG_PYRL_PRTE(
                    --
                    p_validate                       => false
                    ,p_elig_pyrl_prte_id                   => l_elig_pyrl_prte_id
                    ,p_effective_start_date           => l_effective_start_date
                    ,p_effective_end_date             => l_effective_end_date
                    ,p_object_version_number          => l_object_version_number
                    ,p_effective_date                 => l_max_eed
                    ,p_datetrack_mode                 => hr_api.g_delete
                    --
                    );
                    --
            end if;
            --
            l_prev_pk_id := l_current_pk_id ;
            --
          end if;
          --
        end if;
        --
      end if;
      --
    end loop;
    --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EPY',r_EPY.information5 ) ;
     --
  end create_EPY_rows;

    --
    ---------------------------------------------------------------
    ----------------------< create_EPZ_rows >-----------------------
    ---------------------------------------------------------------
    --
    procedure create_EPZ_rows
    (
          p_validate                       in  number     default 0
         ,p_copy_entity_txn_id             in  number
         ,p_effective_date                 in  date
         ,p_prefix_suffix_text             in  varchar2  default null
         ,p_reuse_object_flag              in  varchar2  default null
         ,p_target_business_group_id       in  varchar2  default null
         ,p_prefix_suffix_cd               in  varchar2  default null
    ) is
    --
    l_ELIGY_PRFL_ID  number;
    l_PSTL_ZIP_RNG_ID  number;
    cursor c_unique_EPZ(l_table_alias varchar2) is
    select distinct cpe.information1,
      cpe.information2,
      cpe.information3,
      cpe.table_route_id
    ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
         pqh_table_route tr
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = tr.table_route_id
    -- and   tr.where_clause        = l_BEN_ELG_PSL_CD_R_RNG_PRTE_F
   and tr.table_alias = l_table_alias
    and   cpe.number_of_copies   = 1 -- ADDITION
    group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
    --
    --
    cursor c_EPZ_min_max_dates(c_table_route_id  number,
                 c_information1   number) is
    select
      min(cpe.information2) min_esd,
      max(cpe.information3) min_eed
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1 ;
    --
    cursor c_EPZ(c_table_route_id  number,
                 c_information1   number,
                 c_information2   date,
                 c_information3   date )  is
    select
      cpe.*
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1
    and   cpe.information2       = c_information2
    and   cpe.information3       = c_information3
    and rownum = 1 ;
    -- Date Track target record
    cursor c_find_EPZ_in_target(
                                 c_effective_start_date    date,
                                 c_effective_end_date      date,
                                 c_business_group_id       number,
                                 c_new_pk_id               number) is
    select
      EPZ.elig_pstl_cd_r_rng_prte_id new_value
    from BEN_ELIG_PSTL_CD_R_RNG_PRTE_F EPZ
    where
    EPZ.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
    EPZ.PSTL_ZIP_RNG_ID     = l_PSTL_ZIP_RNG_ID  and
    EPZ.business_group_id  = c_business_group_id
    and   EPZ.elig_pstl_cd_r_rng_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
    and exists ( select null
                 from BEN_ELIG_PSTL_CD_R_RNG_PRTE_F EPZ1
                 where
                 EPZ1.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 EPZ1.PSTL_ZIP_RNG_ID = l_PSTL_ZIP_RNG_ID  and
                 EPZ1.business_group_id  = c_business_group_id
                 and   EPZ1.effective_start_date <= c_effective_start_date )
    and exists ( select null
                 from BEN_ELIG_PSTL_CD_R_RNG_PRTE_F EPZ2
                 where
                 EPZ2.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 EPZ2.PSTL_ZIP_RNG_ID = l_PSTL_ZIP_RNG_ID  and
                 EPZ2.business_group_id  = c_business_group_id
                 and   EPZ2.effective_end_date >= c_effective_end_date )
                 ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
    --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

    l_prev_pk_id              number := null ;
    l_first_rec               boolean := true ;
    r_EPZ                     c_EPZ%rowtype;
    l_elig_pstl_cd_r_rng_prte_id             number ;
    l_object_version_number   number ;
    l_effective_start_date    date ;
    l_effective_end_date      date ;
    l_prefix                  pqh_copy_entity_attribs.information1%type := null;
    l_suffix                  pqh_copy_entity_attribs.information1%type := null;
    l_new_value               number(15);
    l_object_found_in_target  boolean := false ;
    l_min_esd                 date;
    l_max_eed                 date;
    l_effective_date          date;
    --
  begin
    -- Initialization
    l_object_found_in_target := false ;
    -- End Initialization
    -- Derive the prefix - sufix
    if   p_prefix_suffix_cd = 'PREFIX' then
      l_prefix  := p_prefix_suffix_text ;
    elsif p_prefix_suffix_cd = 'SUFFIX' then
      l_suffix   := p_prefix_suffix_text ;
    else
      l_prefix := null ;
      l_suffix  := null ;
    end if ;
    -- End Prefix Sufix derivation
    for r_EPZ_unique in c_unique_EPZ('EPZ') loop

      if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EPZ_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
        --
        hr_utility.set_location(' r_EPZ_unique.table_route_id '||r_EPZ_unique.table_route_id,10);
        hr_utility.set_location(' r_EPZ_unique.information1 '||r_EPZ_unique.information1,10);
        hr_utility.set_location( 'r_EPZ_unique.information2 '||r_EPZ_unique.information2,10);
        hr_utility.set_location( 'r_EPZ_unique.information3 '||r_EPZ_unique.information3,10);
        -- If reuse objects flag is 'Y' then check for the object in the target business group
        -- if found insert the record into PLSql table and exit the loop else try create the
        -- object in the target business group
        --
        l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EPZ_unique.dml_operation ;
       --
/**********************moved from below **********************/
        open c_EPZ(r_EPZ_unique.table_route_id,
                 r_EPZ_unique.information1,
                 r_EPZ_unique.information2,
                 r_EPZ_unique.information3 ) ;
        --
        fetch c_EPZ into r_EPZ ;
        --
        close c_EPZ ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EPZ.information263,l_dml_operation);
        l_PSTL_ZIP_RNG_ID := get_fk('PSTL_ZIP_RNG_ID', r_EPZ.information245,l_dml_operation);

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EPZ_unique.information2 and r_EPZ_unique.information3 then
               l_update := true;
               if r_EPZ_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_PSTL_CD_R_RNG_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_PSTL_CD_R_RNG_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPZ_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EPZ_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPZ_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EPZ',l_new_value,l_prefix || r_EPZ_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
        l_min_esd := null ;
        l_max_eed := null ;
        open c_EPZ_min_max_dates(r_EPZ_unique.table_route_id, r_EPZ_unique.information1 ) ;
        fetch c_EPZ_min_max_dates into l_min_esd,l_max_eed ;
        --

        if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
             l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
          l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
        end if;
        l_min_esd := greatest(l_min_esd,r_EPZ_unique.information2);
/**********************moved up from here **********************
        open c_EPZ(r_EPZ_unique.table_route_id,
                 r_EPZ_unique.information1,
                 r_EPZ_unique.information2,
                 r_EPZ_unique.information3 ) ;
        --
        fetch c_EPZ into r_EPZ ;
        --
        close c_EPZ ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EPZ.information263,l_dml_operation);
        l_PSTL_ZIP_RNG_ID := get_fk('PSTL_ZIP_RNG_ID', r_EPZ.information245,l_dml_operation);

**********************************************************/

        if p_reuse_object_flag = 'Y' then
          if c_EPZ_min_max_dates%found then
            -- cursor to find the object
            open c_find_EPZ_in_target( l_min_esd,l_max_eed,
                                  p_target_business_group_id, nvl(l_elig_pstl_cd_r_rng_prte_id, -999)  ) ;
            fetch c_find_EPZ_in_target into l_new_value ;
            if c_find_EPZ_in_target%found then
              --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_PSTL_CD_R_RNG_PRTE_F',
                   p_base_key_column => 'ELIG_PSTL_CD_R_RNG_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
              if r_EPZ_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                 nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_PSTL_CD_R_RNG_PRTE_ID'  then
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_PSTL_CD_R_RNG_PRTE_ID' ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EPZ_unique.information1 ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPZ_unique.table_route_id;
                 --
                 -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                 --
                 BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
              end if ;
              --
              l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
            end if;
            close c_find_EPZ_in_target ;
          --
          end if;
        end if ;
        --
        close c_EPZ_min_max_dates ;
        end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

          --
          l_current_pk_id := r_EPZ.information1;
          --
          hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
          hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
          --
          if l_current_pk_id =  l_prev_pk_id  then
            --
            l_first_rec := false ;
            --
          else
            --
            l_first_rec := true ;
            --
          end if ;
          --

          l_effective_date := r_EPZ.information2;
          if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
               l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
            l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
          end if;

          if l_first_rec and not l_update then
            -- Call Create routine.
            hr_utility.set_location(' BEN_ELIG_PSTL_CD_R_RNG_PRTE_F CREATE_ELIG_PSTL_CD_RNG_PRTE ',20);
            BEN_ELIG_PSTL_CD_RNG_PRTE_API.CREATE_ELIG_PSTL_CD_RNG_PRTE(
              --
              P_VALIDATE               => false
              ,P_EFFECTIVE_DATE        => l_effective_date
              ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
              --
              ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
              ,P_ELIG_PSTL_CD_R_RNG_PRTE_ID      => l_elig_pstl_cd_r_rng_prte_id
              ,P_EPZ_ATTRIBUTE1      => r_EPZ.INFORMATION111
              ,P_EPZ_ATTRIBUTE10      => r_EPZ.INFORMATION120
              ,P_EPZ_ATTRIBUTE11      => r_EPZ.INFORMATION121
              ,P_EPZ_ATTRIBUTE12      => r_EPZ.INFORMATION122
              ,P_EPZ_ATTRIBUTE13      => r_EPZ.INFORMATION123
              ,P_EPZ_ATTRIBUTE14      => r_EPZ.INFORMATION124
              ,P_EPZ_ATTRIBUTE15      => r_EPZ.INFORMATION125
              ,P_EPZ_ATTRIBUTE16      => r_EPZ.INFORMATION126
              ,P_EPZ_ATTRIBUTE17      => r_EPZ.INFORMATION127
              ,P_EPZ_ATTRIBUTE18      => r_EPZ.INFORMATION128
              ,P_EPZ_ATTRIBUTE19      => r_EPZ.INFORMATION129
              ,P_EPZ_ATTRIBUTE2      => r_EPZ.INFORMATION112
              ,P_EPZ_ATTRIBUTE20      => r_EPZ.INFORMATION130
              ,P_EPZ_ATTRIBUTE21      => r_EPZ.INFORMATION131
              ,P_EPZ_ATTRIBUTE22      => r_EPZ.INFORMATION132
              ,P_EPZ_ATTRIBUTE23      => r_EPZ.INFORMATION133
              ,P_EPZ_ATTRIBUTE24      => r_EPZ.INFORMATION134
              ,P_EPZ_ATTRIBUTE25      => r_EPZ.INFORMATION135
              ,P_EPZ_ATTRIBUTE26      => r_EPZ.INFORMATION136
              ,P_EPZ_ATTRIBUTE27      => r_EPZ.INFORMATION137
              ,P_EPZ_ATTRIBUTE28      => r_EPZ.INFORMATION138
              ,P_EPZ_ATTRIBUTE29      => r_EPZ.INFORMATION139
              ,P_EPZ_ATTRIBUTE3      => r_EPZ.INFORMATION113
              ,P_EPZ_ATTRIBUTE30      => r_EPZ.INFORMATION140
              ,P_EPZ_ATTRIBUTE4      => r_EPZ.INFORMATION114
              ,P_EPZ_ATTRIBUTE5      => r_EPZ.INFORMATION115
              ,P_EPZ_ATTRIBUTE6      => r_EPZ.INFORMATION116
              ,P_EPZ_ATTRIBUTE7      => r_EPZ.INFORMATION117
              ,P_EPZ_ATTRIBUTE8      => r_EPZ.INFORMATION118
              ,P_EPZ_ATTRIBUTE9      => r_EPZ.INFORMATION119
              ,P_EPZ_ATTRIBUTE_CATEGORY      => r_EPZ.INFORMATION110
              ,P_EXCLD_FLAG      => r_EPZ.INFORMATION11
              ,P_ORDR_NUM      => r_EPZ.INFORMATION260
              ,P_PSTL_ZIP_RNG_ID      => l_PSTL_ZIP_RNG_ID
              --
              ,P_EFFECTIVE_START_DATE  => l_effective_start_date
              ,P_EFFECTIVE_END_DATE    => l_effective_end_date
              ,P_OBJECT_VERSION_NUMBER =>   l_object_version_number
              ,P_CRITERIA_SCORE       => r_epz.INFORMATION295
              ,P_CRITERIA_WEIGHT      => r_epz.INFORMATION296
            );
            -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            -- Update all relevent cer records with new pk_id
            hr_utility.set_location('Before plsql table ',222);
            hr_utility.set_location('new_value id '||l_elig_pstl_cd_r_rng_prte_id,222);
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_PSTL_CD_R_RNG_PRTE_ID' ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EPZ.information1 ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_PSTL_CD_R_RNG_PRTE_ID ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EPZ_unique.table_route_id;
            hr_utility.set_location('After plsql table ',222);
            --
            -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
            --
            BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
            --
          else
            --
            -- Call Update routine for the pk_id created in prev run .
            -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            hr_utility.set_location(' BEN_ELIG_PSTL_CD_R_RNG_PRTE_F UPDATE_ELIG_PSTL_CD_RNG_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EPZ.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EPZ.information3,
               p_effective_start_date  => r_EPZ.information2,
               p_dml_operation         => r_EPZ.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_PSTL_CD_R_RNG_PRTE_ID   := r_EPZ.information1;
             l_object_version_number := r_EPZ.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


            BEN_ELIG_PSTL_CD_RNG_PRTE_API.UPDATE_ELIG_PSTL_CD_RNG_PRTE(
              --
              P_VALIDATE               => false
              ,P_EFFECTIVE_DATE        => l_effective_date
              ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
              --
              ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
              ,P_ELIG_PSTL_CD_R_RNG_PRTE_ID      => l_elig_pstl_cd_r_rng_prte_id
              ,P_EPZ_ATTRIBUTE1      => r_EPZ.INFORMATION111
              ,P_EPZ_ATTRIBUTE10      => r_EPZ.INFORMATION120
              ,P_EPZ_ATTRIBUTE11      => r_EPZ.INFORMATION121
              ,P_EPZ_ATTRIBUTE12      => r_EPZ.INFORMATION122
              ,P_EPZ_ATTRIBUTE13      => r_EPZ.INFORMATION123
              ,P_EPZ_ATTRIBUTE14      => r_EPZ.INFORMATION124
              ,P_EPZ_ATTRIBUTE15      => r_EPZ.INFORMATION125
              ,P_EPZ_ATTRIBUTE16      => r_EPZ.INFORMATION126
              ,P_EPZ_ATTRIBUTE17      => r_EPZ.INFORMATION127
              ,P_EPZ_ATTRIBUTE18      => r_EPZ.INFORMATION128
              ,P_EPZ_ATTRIBUTE19      => r_EPZ.INFORMATION129
              ,P_EPZ_ATTRIBUTE2      => r_EPZ.INFORMATION112
              ,P_EPZ_ATTRIBUTE20      => r_EPZ.INFORMATION130
              ,P_EPZ_ATTRIBUTE21      => r_EPZ.INFORMATION131
              ,P_EPZ_ATTRIBUTE22      => r_EPZ.INFORMATION132
              ,P_EPZ_ATTRIBUTE23      => r_EPZ.INFORMATION133
              ,P_EPZ_ATTRIBUTE24      => r_EPZ.INFORMATION134
              ,P_EPZ_ATTRIBUTE25      => r_EPZ.INFORMATION135
              ,P_EPZ_ATTRIBUTE26      => r_EPZ.INFORMATION136
              ,P_EPZ_ATTRIBUTE27      => r_EPZ.INFORMATION137
              ,P_EPZ_ATTRIBUTE28      => r_EPZ.INFORMATION138
              ,P_EPZ_ATTRIBUTE29      => r_EPZ.INFORMATION139
              ,P_EPZ_ATTRIBUTE3      => r_EPZ.INFORMATION113
              ,P_EPZ_ATTRIBUTE30      => r_EPZ.INFORMATION140
              ,P_EPZ_ATTRIBUTE4      => r_EPZ.INFORMATION114
              ,P_EPZ_ATTRIBUTE5      => r_EPZ.INFORMATION115
              ,P_EPZ_ATTRIBUTE6      => r_EPZ.INFORMATION116
              ,P_EPZ_ATTRIBUTE7      => r_EPZ.INFORMATION117
              ,P_EPZ_ATTRIBUTE8      => r_EPZ.INFORMATION118
              ,P_EPZ_ATTRIBUTE9      => r_EPZ.INFORMATION119
              ,P_EPZ_ATTRIBUTE_CATEGORY      => r_EPZ.INFORMATION110
              ,P_EXCLD_FLAG      => r_EPZ.INFORMATION11
              ,P_ORDR_NUM      => r_EPZ.INFORMATION260
              ,P_PSTL_ZIP_RNG_ID      => l_PSTL_ZIP_RNG_ID
              --
              ,P_EFFECTIVE_START_DATE  => l_effective_start_date
              ,P_EFFECTIVE_END_DATE    => l_effective_end_date
              ,P_OBJECT_VERSION_NUMBER => l_object_version_number
              ,P_DATETRACK_MODE        => l_datetrack_mode
              ,P_CRITERIA_SCORE       => r_epz.INFORMATION295
              ,P_CRITERIA_WEIGHT      => r_epz.INFORMATION296
            );
	end if;  -- l_update
            --
          end if;
          --
          -- Delete the row if it is end dated.
          --
          if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
              trunc(l_max_eed) = trunc(r_EPZ.information3)) then
              --
              BEN_ELIG_PSTL_CD_RNG_PRTE_API.delete_ELIG_PSTL_CD_RNG_PRTE(
                 --
                 p_validate                       => false
                 ,p_elig_pstl_cd_r_rng_prte_id                   => l_elig_pstl_cd_r_rng_prte_id
                 ,p_effective_start_date           => l_effective_start_date
                 ,p_effective_end_date             => l_effective_end_date
                 ,p_object_version_number          => l_object_version_number
                 ,p_effective_date                 => l_max_eed
                 ,p_datetrack_mode                 => hr_api.g_delete
                 --
                 );
                 --
          end if;
          --
          l_prev_pk_id := l_current_pk_id ;
          --
        end if;
        --
      end if;
      --
    end loop;
    --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EPZ',r_EPZ.information5 ) ;
     --
  end create_EPZ_rows;

    --
    ---------------------------------------------------------------
    ----------------------< create_EQT_rows >-----------------------
    ---------------------------------------------------------------
    --
    procedure create_EQT_rows
    (
          p_validate                       in  number     default 0
         ,p_copy_entity_txn_id             in  number
         ,p_effective_date                 in  date
         ,p_prefix_suffix_text             in  varchar2  default null
         ,p_reuse_object_flag              in  varchar2  default null
         ,p_target_business_group_id       in  varchar2  default null
         ,p_prefix_suffix_cd               in  varchar2  default null
    ) is
    --
    l_ELIGY_PRFL_ID  number;
    l_QUALIFICATION_TYPE_ID  number;
    cursor c_unique_EQT(l_table_alias varchar2) is
    select distinct cpe.information1,
      cpe.information2,
      cpe.information3,
      cpe.table_route_id
    ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
         pqh_table_route tr
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = tr.table_route_id
    -- and   tr.where_clause        = l_BEN_ELIG_QUAL_TITL_PRTE_F
   and tr.table_alias = l_table_alias
    and   cpe.number_of_copies   = 1 -- ADDITION
    group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
    --
    --
    cursor c_EQT_min_max_dates(c_table_route_id  number,
                 c_information1   number) is
    select
      min(cpe.information2) min_esd,
      max(cpe.information3) min_eed
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1 ;
    --
    cursor c_EQT(c_table_route_id  number,
                 c_information1   number,
                 c_information2   date,
                 c_information3   date )  is
    select
      cpe.*
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1
    and   cpe.information2       = c_information2
    and   cpe.information3       = c_information3
    and rownum = 1 ;
    -- Date Track target record
    cursor c_find_EQT_in_target(
                                 c_effective_start_date    date,
                                 c_effective_end_date      date,
                                 c_business_group_id       number,
                                 c_new_pk_id               number) is
    select
      EQT.elig_qual_titl_prte_id new_value
    from BEN_ELIG_QUAL_TITL_PRTE_F EQT
    where
    EQT.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
    EQT.QUALIFICATION_TYPE_ID     = l_QUALIFICATION_TYPE_ID  and
    EQT.business_group_id  = c_business_group_id
    and   EQT.elig_qual_titl_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
    and exists ( select null
                 from BEN_ELIG_QUAL_TITL_PRTE_F EQT1
                 where
                 EQT1.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 EQT1.QUALIFICATION_TYPE_ID = l_QUALIFICATION_TYPE_ID  and
                 EQT1.business_group_id  = c_business_group_id
                 and   EQT1.effective_start_date <= c_effective_start_date )
    and exists ( select null
                 from BEN_ELIG_QUAL_TITL_PRTE_F EQT2
                 where
                 EQT2.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 EQT2.QUALIFICATION_TYPE_ID = l_QUALIFICATION_TYPE_ID  and
                 EQT2.business_group_id  = c_business_group_id
                 and   EQT2.effective_end_date >= c_effective_end_date )
                 ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
    --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

    l_prev_pk_id              number := null ;
    l_first_rec               boolean := true ;
    r_EQT                     c_EQT%rowtype;
    l_elig_qual_titl_prte_id             number ;
    l_object_version_number   number ;
    l_effective_start_date    date ;
    l_effective_end_date      date ;
    l_prefix                  pqh_copy_entity_attribs.information1%type := null;
    l_suffix                  pqh_copy_entity_attribs.information1%type := null;
    l_new_value               number(15);
    l_object_found_in_target  boolean := false ;
    l_min_esd                 date;
    l_max_eed                 date;
    l_effective_date          date;
    --
  begin
    -- Initialization
    l_object_found_in_target := false ;
    -- End Initialization
    -- Derive the prefix - sufix
    if   p_prefix_suffix_cd = 'PREFIX' then
      l_prefix  := p_prefix_suffix_text ;
    elsif p_prefix_suffix_cd = 'SUFFIX' then
      l_suffix   := p_prefix_suffix_text ;
    else
      l_prefix := null ;
      l_suffix  := null ;
    end if ;
    -- End Prefix Sufix derivation
    for r_EQT_unique in c_unique_EQT('EQT') loop

      if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
          r_EQT_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
        --
        hr_utility.set_location(' r_EQT_unique.table_route_id '||r_EQT_unique.table_route_id,10);
        hr_utility.set_location(' r_EQT_unique.information1 '||r_EQT_unique.information1,10);
        hr_utility.set_location( 'r_EQT_unique.information2 '||r_EQT_unique.information2,10);
        hr_utility.set_location( 'r_EQT_unique.information3 '||r_EQT_unique.information3,10);
        -- If reuse objects flag is 'Y' then check for the object in the target business group
        -- if found insert the record into PLSql table and exit the loop else try create the
        -- object in the target business group
        --
        l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EQT_unique.dml_operation ;
       --
/**********************moved from below **********************/
        open c_EQT(r_EQT_unique.table_route_id,
                 r_EQT_unique.information1,
                 r_EQT_unique.information2,
                 r_EQT_unique.information3 ) ;
        --
        fetch c_EQT into r_EQT ;
        --
        close c_EQT ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EQT.INFORMATION263,l_dml_operation);
        if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
          l_QUALIFICATION_TYPE_ID := r_EQT.information176;
        else
          l_QUALIFICATION_TYPE_ID := r_EQT.information174;
        end if;

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EQT_unique.information2 and r_EQT_unique.information3 then
               l_update := true;
               if r_EQT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_QUAL_TITL_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_QUAL_TITL_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EQT_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EQT_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EQT_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EQT',l_new_value,l_prefix || r_EQT_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
        l_min_esd := null ;
        l_max_eed := null ;
        open c_EQT_min_max_dates(r_EQT_unique.table_route_id, r_EQT_unique.information1 ) ;
        fetch c_EQT_min_max_dates into l_min_esd,l_max_eed ;
        --

        if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
             l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
          l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
        end if;
       l_min_esd := greatest(l_min_esd,r_EQT_unique.information2);
/**********************moved up from here **********************
        open c_EQT(r_EQT_unique.table_route_id,
                 r_EQT_unique.information1,
                 r_EQT_unique.information2,
                 r_EQT_unique.information3 ) ;
        --
        fetch c_EQT into r_EQT ;
        --
        close c_EQT ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EQT.INFORMATION263,l_dml_operation);
        if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
          l_QUALIFICATION_TYPE_ID := r_EQT.information176;
        else
          l_QUALIFICATION_TYPE_ID := r_EQT.information174;
        end if;

**********************************************************/

        --
        if l_QUALIFICATION_TYPE_ID is null then
          close c_EQT_min_max_dates;
          --
          BEN_PD_COPY_TO_BEN_three.log_nomapping_data(p_parent_table_alias =>'ELP'
                     ,p_parent_pk_id         => r_EQT.information263
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'EQT'
                     ,p_child_data           => r_EQT.information173 );

          --
        else
          if p_reuse_object_flag = 'Y' then
            if c_EQT_min_max_dates%found then
               -- cursor to find the object
               open c_find_EQT_in_target( l_min_esd,l_max_eed,
                                     p_target_business_group_id, nvl(l_elig_qual_titl_prte_id, -999)  ) ;
               fetch c_find_EQT_in_target into l_new_value ;
               if c_find_EQT_in_target%found then
                 --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_QUAL_TITL_PRTE_F',
                   p_base_key_column => 'ELIG_QUAL_TITL_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
                 if r_EQT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                    nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_QUAL_TITL_PRTE_ID'  then
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_QUAL_TITL_PRTE_ID' ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EQT_unique.information1 ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EQT_unique.table_route_id;
                    --
                    -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                    --
                    BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                 end if ;
                 --
                 l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
               end if;
               close c_find_EQT_in_target ;
            --
            end if;
          end if ;
          --
          close c_EQT_min_max_dates ;
          end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

            --
            l_current_pk_id := r_EQT.information1;
            --
            hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
            hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
            --
            if l_current_pk_id =  l_prev_pk_id  then
              --
              l_first_rec := false ;
              --
            else
              --
              l_first_rec := true ;
              --
            end if ;
            --

            l_effective_date := r_EQT.information2;
            if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                 l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
              l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
            end if;

            if l_first_rec and not l_update then
              -- Call Create routine.
              hr_utility.set_location(' BEN_ELIG_QUAL_TITL_PRTE_F CREATE_ELIG_QUAL_TITL_PRTE ',20);
              BEN_ELIG_QUAL_TITL_PRTE_API.CREATE_ELIG_QUAL_TITL_PRTE(
                 --
                 P_VALIDATE               => false
                 ,P_EFFECTIVE_DATE        => l_effective_date
                 ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                 --
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_QUAL_TITL_PRTE_ID      => l_elig_qual_titl_prte_id
				 ,P_EQT_ATTRIBUTE1      => r_EQT.INFORMATION111
				 ,P_EQT_ATTRIBUTE10      => r_EQT.INFORMATION120
				 ,P_EQT_ATTRIBUTE11      => r_EQT.INFORMATION121
				 ,P_EQT_ATTRIBUTE12      => r_EQT.INFORMATION122
				 ,P_EQT_ATTRIBUTE13      => r_EQT.INFORMATION123
				 ,P_EQT_ATTRIBUTE14      => r_EQT.INFORMATION124
				 ,P_EQT_ATTRIBUTE15      => r_EQT.INFORMATION125
				 ,P_EQT_ATTRIBUTE16      => r_EQT.INFORMATION126
				 ,P_EQT_ATTRIBUTE17      => r_EQT.INFORMATION127
				 ,P_EQT_ATTRIBUTE18      => r_EQT.INFORMATION128
				 ,P_EQT_ATTRIBUTE19      => r_EQT.INFORMATION129
				 ,P_EQT_ATTRIBUTE2      => r_EQT.INFORMATION112
				 ,P_EQT_ATTRIBUTE20      => r_EQT.INFORMATION130
				 ,P_EQT_ATTRIBUTE21      => r_EQT.INFORMATION131
				 ,P_EQT_ATTRIBUTE22      => r_EQT.INFORMATION132
				 ,P_EQT_ATTRIBUTE23      => r_EQT.INFORMATION133
				 ,P_EQT_ATTRIBUTE24      => r_EQT.INFORMATION134
				 ,P_EQT_ATTRIBUTE25      => r_EQT.INFORMATION135
				 ,P_EQT_ATTRIBUTE26      => r_EQT.INFORMATION136
				 ,P_EQT_ATTRIBUTE27      => r_EQT.INFORMATION137
				 ,P_EQT_ATTRIBUTE28      => r_EQT.INFORMATION138
				 ,P_EQT_ATTRIBUTE29      => r_EQT.INFORMATION139
				 ,P_EQT_ATTRIBUTE3      => r_EQT.INFORMATION113
				 ,P_EQT_ATTRIBUTE30      => r_EQT.INFORMATION140
				 ,P_EQT_ATTRIBUTE4      => r_EQT.INFORMATION114
				 ,P_EQT_ATTRIBUTE5      => r_EQT.INFORMATION115
				 ,P_EQT_ATTRIBUTE6      => r_EQT.INFORMATION116
				 ,P_EQT_ATTRIBUTE7      => r_EQT.INFORMATION117
				 ,P_EQT_ATTRIBUTE8      => r_EQT.INFORMATION118
				 ,P_EQT_ATTRIBUTE9      => r_EQT.INFORMATION119
				 ,P_EQT_ATTRIBUTE_CATEGORY      => r_EQT.INFORMATION110
				 ,P_EXCLD_FLAG      => r_EQT.INFORMATION11
				 ,P_ORDR_NUM      => r_EQT.INFORMATION260
				 ,P_QUALIFICATION_TYPE_ID      => l_QUALIFICATION_TYPE_ID
				 ,P_TITLE      => r_EQT.INFORMATION141
	   --
	--    ****** END CHANGE LINES

	   --

				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
                                 ,P_CRITERIA_SCORE       => r_eqt.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_eqt.INFORMATION296
			 );
               -- insert the table_name,old_pk_id,new_pk_id into a plsql record
               -- Update all relevent cer records with new pk_id
               hr_utility.set_location('Before plsql table ',222);
               hr_utility.set_location('new_value id '||l_elig_qual_titl_prte_id,222);
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_QUAL_TITL_PRTE_ID' ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EQT.information1 ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_QUAL_TITL_PRTE_ID ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EQT_unique.table_route_id;
               hr_utility.set_location('After plsql table ',222);
               --
               -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
               --
               BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
               --
             else
               --
               -- Call Update routine for the pk_id created in prev run .
               -- insert the table_name,old_pk_id,new_pk_id into a plsql record
               hr_utility.set_location(' BEN_ELIG_QUAL_TITL_PRTE_F UPDATE_ELIG_QUAL_TITL_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EQT.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EQT.information3,
               p_effective_start_date  => r_EQT.information2,
               p_dml_operation         => r_EQT.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_QUAL_TITL_PRTE_ID   := r_EQT.information1;
             l_object_version_number := r_EQT.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


               BEN_ELIG_QUAL_TITL_PRTE_API.UPDATE_ELIG_QUAL_TITL_PRTE(
                 --
                 P_VALIDATE               => false
                 ,P_EFFECTIVE_DATE        => l_effective_date
                 ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                 --
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_QUAL_TITL_PRTE_ID      => l_elig_qual_titl_prte_id
				 ,P_EQT_ATTRIBUTE1      => r_EQT.INFORMATION111
				 ,P_EQT_ATTRIBUTE10      => r_EQT.INFORMATION120
				 ,P_EQT_ATTRIBUTE11      => r_EQT.INFORMATION121
				 ,P_EQT_ATTRIBUTE12      => r_EQT.INFORMATION122
				 ,P_EQT_ATTRIBUTE13      => r_EQT.INFORMATION123
				 ,P_EQT_ATTRIBUTE14      => r_EQT.INFORMATION124
				 ,P_EQT_ATTRIBUTE15      => r_EQT.INFORMATION125
				 ,P_EQT_ATTRIBUTE16      => r_EQT.INFORMATION126
				 ,P_EQT_ATTRIBUTE17      => r_EQT.INFORMATION127
				 ,P_EQT_ATTRIBUTE18      => r_EQT.INFORMATION128
				 ,P_EQT_ATTRIBUTE19      => r_EQT.INFORMATION129
				 ,P_EQT_ATTRIBUTE2      => r_EQT.INFORMATION112
				 ,P_EQT_ATTRIBUTE20      => r_EQT.INFORMATION130
				 ,P_EQT_ATTRIBUTE21      => r_EQT.INFORMATION131
				 ,P_EQT_ATTRIBUTE22      => r_EQT.INFORMATION132
				 ,P_EQT_ATTRIBUTE23      => r_EQT.INFORMATION133
				 ,P_EQT_ATTRIBUTE24      => r_EQT.INFORMATION134
				 ,P_EQT_ATTRIBUTE25      => r_EQT.INFORMATION135
				 ,P_EQT_ATTRIBUTE26      => r_EQT.INFORMATION136
				 ,P_EQT_ATTRIBUTE27      => r_EQT.INFORMATION137
				 ,P_EQT_ATTRIBUTE28      => r_EQT.INFORMATION138
				 ,P_EQT_ATTRIBUTE29      => r_EQT.INFORMATION139
				 ,P_EQT_ATTRIBUTE3      => r_EQT.INFORMATION113
				 ,P_EQT_ATTRIBUTE30      => r_EQT.INFORMATION140
				 ,P_EQT_ATTRIBUTE4      => r_EQT.INFORMATION114
				 ,P_EQT_ATTRIBUTE5      => r_EQT.INFORMATION115
				 ,P_EQT_ATTRIBUTE6      => r_EQT.INFORMATION116
				 ,P_EQT_ATTRIBUTE7      => r_EQT.INFORMATION117
				 ,P_EQT_ATTRIBUTE8      => r_EQT.INFORMATION118
				 ,P_EQT_ATTRIBUTE9      => r_EQT.INFORMATION119
				 ,P_EQT_ATTRIBUTE_CATEGORY      => r_EQT.INFORMATION110
				 ,P_EXCLD_FLAG      => r_EQT.INFORMATION11
				 ,P_ORDR_NUM      => r_EQT.INFORMATION260
				 ,P_QUALIFICATION_TYPE_ID      => l_QUALIFICATION_TYPE_ID
				 ,P_TITLE      => r_EQT.INFORMATION141
	   --
	--   ****** END CHANGE LINES

	   --
				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER => l_object_version_number
				 ,P_DATETRACK_MODE        => l_datetrack_mode
                                 ,P_CRITERIA_SCORE       => r_eqt.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_eqt.INFORMATION296
			 );
	end if;  -- l_update
               --
             end if;
             --
             -- Delete the row if it is end dated.
             --
             if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                 trunc(l_max_eed) = trunc(r_EQT.information3)) then
                 --
                 BEN_ELIG_QUAL_TITL_PRTE_API.delete_ELIG_QUAL_TITL_PRTE(
                    --
                    p_validate                       => false
                    ,p_elig_qual_titl_prte_id                   => l_elig_qual_titl_prte_id
                    ,p_effective_start_date           => l_effective_start_date
                    ,p_effective_end_date             => l_effective_end_date
                    ,p_object_version_number          => l_object_version_number
                    ,p_effective_date                 => l_max_eed
                    ,p_datetrack_mode                 => hr_api.g_delete
                    --
                    );
                    --
             end if;
             --
             l_prev_pk_id := l_current_pk_id ;
             --
           end if;
           --
         end if;
         --
       end if;
       --
    end loop;
    --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EQT',r_EQT.information5 ) ;
     --
  end create_EQT_rows;

    --
    ---------------------------------------------------------------
    ----------------------< create_ESA_rows >-----------------------
    ---------------------------------------------------------------
    --
    procedure create_ESA_rows
    (
          p_validate                       in  number     default 0
         ,p_copy_entity_txn_id             in  number
         ,p_effective_date                 in  date
         ,p_prefix_suffix_text             in  varchar2  default null
         ,p_reuse_object_flag              in  varchar2  default null
         ,p_target_business_group_id       in  varchar2  default null
         ,p_prefix_suffix_cd               in  varchar2  default null
    ) is
    --
    l_ELIGY_PRFL_ID  number;
    l_SVC_AREA_ID  number;
    l_ORDR_NUM number;

    cursor c_unique_ESA(l_table_alias varchar2) is
    select distinct cpe.information1,
      cpe.information2,
      cpe.information3,
      cpe.table_route_id
    ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
         pqh_table_route tr
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = tr.table_route_id
    -- and   tr.where_clause        = l_BEN_ELIG_SVC_AREA_PRTE_F
   and tr.table_alias = l_table_alias
    and   cpe.number_of_copies   = 1 -- ADDITION
    group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
    --
    --
    cursor c_ESA_min_max_dates(c_table_route_id  number,
                 c_information1   number) is
    select
      min(cpe.information2) min_esd,
      max(cpe.information3) min_eed
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1 ;
    --
    cursor c_ESA(c_table_route_id  number,
                 c_information1   number,
                 c_information2   date,
                 c_information3   date )  is
    select
      cpe.*
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1
    and   cpe.information2       = c_information2
    and   cpe.information3       = c_information3
    and rownum = 1 ;
    -- Date Track target record
    cursor c_find_ESA_in_target(
                                 c_effective_start_date    date,
                                 c_effective_end_date      date,
                                 c_business_group_id       number,
                                 c_new_pk_id               number) is
    select
      ESA.elig_svc_area_prte_id new_value
    from BEN_ELIG_SVC_AREA_PRTE_F ESA
    where
    ESA.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
    ESA.SVC_AREA_ID     = l_SVC_AREA_ID  and
    ESA.business_group_id  = c_business_group_id
    and   ESA.elig_svc_area_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
    and exists ( select null
                 from BEN_ELIG_SVC_AREA_PRTE_F ESA1
                 where
                 ESA1.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 ESA1.SVC_AREA_ID = l_SVC_AREA_ID  and
                 ESA1.ORDR_NUM = l_ORDR_NUM and -- Added this criteria
                 ESA1.business_group_id  = c_business_group_id
                 and   ESA1.effective_start_date <= c_effective_start_date )
    and exists ( select null
                 from BEN_ELIG_SVC_AREA_PRTE_F ESA2
                 where
                 ESA2.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 ESA2.SVC_AREA_ID = l_SVC_AREA_ID  and
                 ESA2.ORDR_NUM = l_ORDR_NUM and -- Added this criteria
                 ESA2.business_group_id  = c_business_group_id
                 and   ESA2.effective_end_date >= c_effective_end_date )
                 ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
    --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

    l_prev_pk_id              number := null ;
    l_first_rec               boolean := true ;
    r_ESA                     c_ESA%rowtype;
    l_elig_svc_area_prte_id             number ;
    l_object_version_number   number ;
    l_effective_start_date    date ;
    l_effective_end_date      date ;
    l_prefix                  pqh_copy_entity_attribs.information1%type := null;
    l_suffix                  pqh_copy_entity_attribs.information1%type := null;
    l_new_value               number(15);
    l_object_found_in_target  boolean := false ;
    l_min_esd                 date;
    l_max_eed                 date;
    l_effective_date          date;
    --
  begin
    -- Initialization
    l_object_found_in_target := false ;
    -- End Initialization
    -- Derive the prefix - sufix
    if   p_prefix_suffix_cd = 'PREFIX' then
      l_prefix  := p_prefix_suffix_text ;
    elsif p_prefix_suffix_cd = 'SUFFIX' then
      l_suffix   := p_prefix_suffix_text ;
    else
      l_prefix := null ;
      l_suffix  := null ;
    end if ;
    -- End Prefix Sufix derivation
    for r_ESA_unique in c_unique_ESA('ESA') loop

      if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ESA_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
        --
        hr_utility.set_location(' r_ESA_unique.table_route_id '||r_ESA_unique.table_route_id,10);
        hr_utility.set_location(' r_ESA_unique.information1 '||r_ESA_unique.information1,10);
        hr_utility.set_location( 'r_ESA_unique.information2 '||r_ESA_unique.information2,10);
        hr_utility.set_location( 'r_ESA_unique.information3 '||r_ESA_unique.information3,10);
        -- If reuse objects flag is 'Y' then check for the object in the target business group
        -- if found insert the record into PLSql table and exit the loop else try create the
        -- object in the target business group
        --
        l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ESA_unique.dml_operation ;
       --
/**********************moved from below **********************/
        open c_ESA(r_ESA_unique.table_route_id,
                 r_ESA_unique.information1,
                 r_ESA_unique.information2,
                 r_ESA_unique.information3 ) ;
        --
        fetch c_ESA into r_ESA ;
        --
        close c_ESA ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ESA.INFORMATION263,l_dml_operation);
        l_SVC_AREA_ID := get_fk('SVC_AREA_ID', r_ESA.INFORMATION241,l_dml_operation);
        l_ORDR_NUM := r_ESA.INFORMATION260; -- Added this criteria
        hr_utility.set_location(' r_ESA.information46 '||r_ESA.information46,99);
        hr_utility.set_location(' l_SVC_AREA_ID '||l_SVC_AREA_ID,99);
        hr_utility.set_location(' l_ELIGY_PRFL_ID '||l_ELIGY_PRFL_ID,99);
        hr_utility.set_location(' l_ORDR_NUM '||l_ORDR_NUM,99);

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ESA_unique.information2 and r_ESA_unique.information3 then
               l_update := true;
               if r_ESA_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_SVC_AREA_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_SVC_AREA_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ESA_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ESA_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ESA_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ESA',l_new_value,l_prefix || r_ESA_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
        l_min_esd := null ;
        l_max_eed := null ;
        open c_ESA_min_max_dates(r_ESA_unique.table_route_id, r_ESA_unique.information1 ) ;
        fetch c_ESA_min_max_dates into l_min_esd,l_max_eed ;
        --

        if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
             l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
          l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
        end if;
       l_min_esd := greatest(l_min_esd,r_ESA_unique.information2);
/**********************moved up from here **********************
        open c_ESA(r_ESA_unique.table_route_id,
                 r_ESA_unique.information1,
                 r_ESA_unique.information2,
                 r_ESA_unique.information3 ) ;
        --
        fetch c_ESA into r_ESA ;
        --
        close c_ESA ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ESA.INFORMATION263,l_dml_operation);
        l_SVC_AREA_ID := get_fk('SVC_AREA_ID', r_ESA.INFORMATION241,l_dml_operation);
        l_ORDR_NUM := r_ESA.INFORMATION260; -- Added this criteria
        hr_utility.set_location(' r_ESA.information46 '||r_ESA.information46,99);
        hr_utility.set_location(' l_SVC_AREA_ID '||l_SVC_AREA_ID,99);
        hr_utility.set_location(' l_ELIGY_PRFL_ID '||l_ELIGY_PRFL_ID,99);
        hr_utility.set_location(' l_ORDR_NUM '||l_ORDR_NUM,99);

**********************************************************/

        --
        if p_reuse_object_flag = 'Y' then
          if c_ESA_min_max_dates%found then
            -- cursor to find the object
            open c_find_ESA_in_target( l_min_esd,l_max_eed,
                                  p_target_business_group_id, nvl(l_elig_svc_area_prte_id, -999)  ) ;
            fetch c_find_ESA_in_target into l_new_value ;
            if c_find_ESA_in_target%found then
              --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_SVC_AREA_PRTE_F',
                   p_base_key_column => 'ELIG_SVC_AREA_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
              if r_ESA_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                 nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_SVC_AREA_PRTE_ID'  then
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_SVC_AREA_PRTE_ID' ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ESA_unique.information1 ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ESA_unique.table_route_id;
                 --
                 -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                 --
                 BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
              end if ;
              --
              l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
            end if;
            close c_find_ESA_in_target ;
          --
          end if;
        end if ;
        --
        close c_ESA_min_max_dates ;
        end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

          --
          l_current_pk_id := r_ESA.information1;
          --
          hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
          hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
          --
          if l_current_pk_id =  l_prev_pk_id  then
            --
            l_first_rec := false ;
            --
          else
            --
            l_first_rec := true ;
            --
          end if ;
          --

          l_effective_date := r_ESA.information2;
          if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
            l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
          end if;

          if l_first_rec and not l_update then
            -- Call Create routine.
            hr_utility.set_location(' BEN_ELIG_SVC_AREA_PRTE_F CREATE_ELIG_SVC_AREA_PRTE ',20);
            BEN_ELIG_SVC_AREA_PRTE_API.CREATE_ELIG_SVC_AREA_PRTE(
              --
              P_VALIDATE               => false
              ,P_EFFECTIVE_DATE        => l_effective_date
              ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
              --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_SVC_AREA_PRTE_ID      => l_elig_svc_area_prte_id
             ,P_ESA_ATTRIBUTE1      => r_ESA.INFORMATION111
             ,P_ESA_ATTRIBUTE10      => r_ESA.INFORMATION120
             ,P_ESA_ATTRIBUTE11      => r_ESA.INFORMATION121
             ,P_ESA_ATTRIBUTE12      => r_ESA.INFORMATION122
             ,P_ESA_ATTRIBUTE13      => r_ESA.INFORMATION123
             ,P_ESA_ATTRIBUTE14      => r_ESA.INFORMATION124
             ,P_ESA_ATTRIBUTE15      => r_ESA.INFORMATION125
             ,P_ESA_ATTRIBUTE16      => r_ESA.INFORMATION126
             ,P_ESA_ATTRIBUTE17      => r_ESA.INFORMATION127
             ,P_ESA_ATTRIBUTE18      => r_ESA.INFORMATION128
             ,P_ESA_ATTRIBUTE19      => r_ESA.INFORMATION129
             ,P_ESA_ATTRIBUTE2      => r_ESA.INFORMATION112
             ,P_ESA_ATTRIBUTE20      => r_ESA.INFORMATION130
             ,P_ESA_ATTRIBUTE21      => r_ESA.INFORMATION131
             ,P_ESA_ATTRIBUTE22      => r_ESA.INFORMATION132
             ,P_ESA_ATTRIBUTE23      => r_ESA.INFORMATION133
             ,P_ESA_ATTRIBUTE24      => r_ESA.INFORMATION134
             ,P_ESA_ATTRIBUTE25      => r_ESA.INFORMATION135
             ,P_ESA_ATTRIBUTE26      => r_ESA.INFORMATION136
             ,P_ESA_ATTRIBUTE27      => r_ESA.INFORMATION137
             ,P_ESA_ATTRIBUTE28      => r_ESA.INFORMATION138
             ,P_ESA_ATTRIBUTE29      => r_ESA.INFORMATION139
             ,P_ESA_ATTRIBUTE3      => r_ESA.INFORMATION113
             ,P_ESA_ATTRIBUTE30      => r_ESA.INFORMATION140
             ,P_ESA_ATTRIBUTE4      => r_ESA.INFORMATION114
             ,P_ESA_ATTRIBUTE5      => r_ESA.INFORMATION115
             ,P_ESA_ATTRIBUTE6      => r_ESA.INFORMATION116
             ,P_ESA_ATTRIBUTE7      => r_ESA.INFORMATION117
             ,P_ESA_ATTRIBUTE8      => r_ESA.INFORMATION118
             ,P_ESA_ATTRIBUTE9      => r_ESA.INFORMATION119
             ,P_ESA_ATTRIBUTE_CATEGORY      => r_ESA.INFORMATION110
             ,P_EXCLD_FLAG      => r_ESA.INFORMATION11
             ,P_ORDR_NUM      => r_ESA.INFORMATION260
             ,P_SVC_AREA_ID      => l_SVC_AREA_ID
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_esa.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_esa.INFORMATION296
         );
            -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            -- Update all relevent cer records with new pk_id
            hr_utility.set_location('Before plsql table ',222);
            hr_utility.set_location('new_value id '||l_elig_svc_area_prte_id,222);
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_SVC_AREA_PRTE_ID' ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ESA.information1 ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_SVC_AREA_PRTE_ID ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ESA_unique.table_route_id;
            hr_utility.set_location('After plsql table ',222);
            --
            -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
            --
            BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
            --
          else
            --
            -- Call Update routine for the pk_id created in prev run .
            -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            hr_utility.set_location(' BEN_ELIG_SVC_AREA_PRTE_F UPDATE_ELIG_SVC_AREA_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ESA.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ESA.information3,
               p_effective_start_date  => r_ESA.information2,
               p_dml_operation         => r_ESA.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_SVC_AREA_PRTE_ID   := r_ESA.information1;
             l_object_version_number := r_ESA.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


            BEN_ELIG_SVC_AREA_PRTE_API.UPDATE_ELIG_SVC_AREA_PRTE(
              --
              P_VALIDATE               => false
              ,P_EFFECTIVE_DATE        => l_effective_date
              ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
              --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_SVC_AREA_PRTE_ID      => l_elig_svc_area_prte_id
             ,P_ESA_ATTRIBUTE1      => r_ESA.INFORMATION111
             ,P_ESA_ATTRIBUTE10      => r_ESA.INFORMATION120
             ,P_ESA_ATTRIBUTE11      => r_ESA.INFORMATION121
             ,P_ESA_ATTRIBUTE12      => r_ESA.INFORMATION122
             ,P_ESA_ATTRIBUTE13      => r_ESA.INFORMATION123
             ,P_ESA_ATTRIBUTE14      => r_ESA.INFORMATION124
             ,P_ESA_ATTRIBUTE15      => r_ESA.INFORMATION125
             ,P_ESA_ATTRIBUTE16      => r_ESA.INFORMATION126
             ,P_ESA_ATTRIBUTE17      => r_ESA.INFORMATION127
             ,P_ESA_ATTRIBUTE18      => r_ESA.INFORMATION128
             ,P_ESA_ATTRIBUTE19      => r_ESA.INFORMATION129
             ,P_ESA_ATTRIBUTE2      => r_ESA.INFORMATION112
             ,P_ESA_ATTRIBUTE20      => r_ESA.INFORMATION130
             ,P_ESA_ATTRIBUTE21      => r_ESA.INFORMATION131
             ,P_ESA_ATTRIBUTE22      => r_ESA.INFORMATION132
             ,P_ESA_ATTRIBUTE23      => r_ESA.INFORMATION133
             ,P_ESA_ATTRIBUTE24      => r_ESA.INFORMATION134
             ,P_ESA_ATTRIBUTE25      => r_ESA.INFORMATION135
             ,P_ESA_ATTRIBUTE26      => r_ESA.INFORMATION136
             ,P_ESA_ATTRIBUTE27      => r_ESA.INFORMATION137
             ,P_ESA_ATTRIBUTE28      => r_ESA.INFORMATION138
             ,P_ESA_ATTRIBUTE29      => r_ESA.INFORMATION139
             ,P_ESA_ATTRIBUTE3      => r_ESA.INFORMATION113
             ,P_ESA_ATTRIBUTE30      => r_ESA.INFORMATION140
             ,P_ESA_ATTRIBUTE4      => r_ESA.INFORMATION114
             ,P_ESA_ATTRIBUTE5      => r_ESA.INFORMATION115
             ,P_ESA_ATTRIBUTE6      => r_ESA.INFORMATION116
             ,P_ESA_ATTRIBUTE7      => r_ESA.INFORMATION117
             ,P_ESA_ATTRIBUTE8      => r_ESA.INFORMATION118
             ,P_ESA_ATTRIBUTE9      => r_ESA.INFORMATION119
             ,P_ESA_ATTRIBUTE_CATEGORY      => r_ESA.INFORMATION110
             ,P_EXCLD_FLAG      => r_ESA.INFORMATION11
             ,P_ORDR_NUM      => r_ESA.INFORMATION260
             ,P_SVC_AREA_ID      => l_SVC_AREA_ID
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_esa.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_esa.INFORMATION296
         );
	end if;  -- l_update
            --
          end if;
          --
          -- Delete the row if it is end dated.
          --
          if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
              trunc(l_max_eed) = trunc(r_ESA.information3)) then
              --
              BEN_ELIG_SVC_AREA_PRTE_API.delete_ELIG_SVC_AREA_PRTE(
                 --
                 p_validate                       => false
                 ,p_elig_svc_area_prte_id                   => l_elig_svc_area_prte_id
                 ,p_effective_start_date           => l_effective_start_date
                 ,p_effective_end_date             => l_effective_end_date
                 ,p_object_version_number          => l_object_version_number
                 ,p_effective_date                 => l_max_eed
                 ,p_datetrack_mode                 => hr_api.g_delete
                 --
                 );
                 --
          end if;
          --
          l_prev_pk_id := l_current_pk_id ;
          --
        end if;
        --
      end if;
      --
    end loop;
    --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ESA',r_ESA.information5 ) ;
     --
  end create_ESA_rows;

    --
    ---------------------------------------------------------------
    ----------------------< create_ESH_rows >-----------------------
    ---------------------------------------------------------------
    --
    procedure create_ESH_rows
    (
          p_validate                       in  number     default 0
         ,p_copy_entity_txn_id             in  number
         ,p_effective_date                 in  date
         ,p_prefix_suffix_text             in  varchar2  default null
         ,p_reuse_object_flag              in  varchar2  default null
         ,p_target_business_group_id       in  varchar2  default null
         ,p_prefix_suffix_cd               in  varchar2  default null
    ) is
    --
    l_ELIGY_PRFL_ID  number;
    l_HRS_NUM number;
    l_FREQ_CD varchar2(30);
    l_DETERMINATION_CD varchar2(30);
    l_DETERMINATION_RL number;
    l_MAX_HRS_NUM number;
    l_ROUNDING_CD varchar2(30);
    l_ROUNDING_RL number;
    l_SCHEDD_HRS_RL number;
    l_ORDR_NUM number;

    cursor c_unique_ESH(l_table_alias varchar2) is
    select distinct cpe.information1,
      cpe.information2,
      cpe.information3,
      cpe.table_route_id
    ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
         pqh_table_route tr
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = tr.table_route_id
    -- and   tr.where_clause        = l_BEN_ELIG_SCHEDD_HRS_PRTE_F
   and tr.table_alias = l_table_alias
    and   cpe.number_of_copies   = 1 -- ADDITION
    group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
    --
    --
    cursor c_ESH_min_max_dates(c_table_route_id  number,
                 c_information1   number) is
    select
      min(cpe.information2) min_esd,
      max(cpe.information3) min_eed
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1 ;
    --
    cursor c_ESH(c_table_route_id  number,
                 c_information1   number,
                 c_information2   date,
                 c_information3   date )  is
    select
      cpe.*
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1
    and   cpe.information2       = c_information2
    and   cpe.information3       = c_information3
    and rownum = 1 ;
    -- Date Track target record
    cursor c_find_ESH_in_target(
                                 c_effective_start_date    date,
                                 c_effective_end_date      date,
                                 c_business_group_id       number,
                                 c_new_pk_id               number) is
    select
      ESH.elig_schedd_hrs_prte_id new_value
    from BEN_ELIG_SCHEDD_HRS_PRTE_F ESH
    where
    ESH.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
    NVL(ESH.HRS_NUM,-999)  = NVL(l_HRS_NUM,-999) and
    NVL(ESH.FREQ_CD,-999) =  NVL(l_FREQ_CD,-999) and
    NVL(ESH.DETERMINATION_CD,-999) = NVL(l_DETERMINATION_CD,-999) and
    NVL(ESH.DETERMINATION_RL,-999) = NVL(l_DETERMINATION_RL,-999) and
    NVL(ESH.MAX_HRS_NUM,-999) = NVL(l_MAX_HRS_NUM,-999) and
    NVL(ESH.ROUNDING_CD,-999) = NVL(l_ROUNDING_CD,-999) and
    NVL(ESH.ROUNDING_RL,-999) = NVL(l_ROUNDING_RL,-999) and
    NVL(ESH.SCHEDD_HRS_RL,-999) = NVL(l_SCHEDD_HRS_RL,-999) and
    ESH.ORDR_NUM      = l_ORDR_NUM and
    ESH.business_group_id  = c_business_group_id
    and   ESH.elig_schedd_hrs_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
    and exists ( select null
                 from BEN_ELIG_SCHEDD_HRS_PRTE_F ESH1
                 where
                 ESH1.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 NVL(ESH1.HRS_NUM,-999)  = NVL(l_HRS_NUM,-999) and
                 NVL(ESH1.FREQ_CD,-999) =  NVL(l_FREQ_CD,-999) and
                 NVL(ESH1.DETERMINATION_CD,-999) = NVL(l_DETERMINATION_CD,-999) and
                 NVL(ESH1.DETERMINATION_RL,-999) = NVL(l_DETERMINATION_RL,-999) and
                 NVL(ESH1.MAX_HRS_NUM,-999) = NVL(l_MAX_HRS_NUM,-999) and
                 NVL(ESH1.ROUNDING_CD,-999) = NVL(l_ROUNDING_CD,-999) and
                 NVL(ESH1.ROUNDING_RL,-999) = NVL(l_ROUNDING_RL,-999) and
                 NVL(ESH1.SCHEDD_HRS_RL,-999) = NVL(l_SCHEDD_HRS_RL,-999) and
                 ESH1.ORDR_NUM      = l_ORDR_NUM and
                 ESH1.business_group_id  = c_business_group_id
                 and   ESH1.effective_start_date <= c_effective_start_date )
    and exists ( select null
                 from BEN_ELIG_SCHEDD_HRS_PRTE_F ESH2
                 where
                 ESH2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                 NVL(ESH2.HRS_NUM,-999)  = NVL(l_HRS_NUM,-999) and
                 NVL(ESH2.FREQ_CD,-999) =  NVL(l_FREQ_CD,-999) and
                 NVL(ESH2.DETERMINATION_CD,-999) = NVL(l_DETERMINATION_CD,-999) and
                 NVL(ESH2.DETERMINATION_RL,-999) = NVL(l_DETERMINATION_RL,-999) and
                 NVL(ESH2.MAX_HRS_NUM,-999) = NVL(l_MAX_HRS_NUM,-999) and
                 NVL(ESH2.ROUNDING_CD,-999) = NVL(l_ROUNDING_CD,-999) and
                 NVL(ESH2.ROUNDING_RL,-999) = NVL(l_ROUNDING_RL,-999) and
                 NVL(ESH2.SCHEDD_HRS_RL,-999) = NVL(l_SCHEDD_HRS_RL,-999) and
                 ESH2.ORDR_NUM      = l_ORDR_NUM and
                 ESH2.business_group_id  = c_business_group_id
                 and   ESH2.effective_end_date >= c_effective_end_date )
                 ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
    --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

    l_prev_pk_id              number := null ;
    l_first_rec               boolean := true ;
    r_ESH                     c_ESH%rowtype;
    l_elig_schedd_hrs_prte_id             number ;
    l_object_version_number   number ;
    l_effective_start_date    date ;
    l_effective_end_date      date ;
    l_prefix                  pqh_copy_entity_attribs.information1%type := null;
    l_suffix                  pqh_copy_entity_attribs.information1%type := null;
    l_new_value               number(15);
    l_object_found_in_target  boolean := false ;
    l_min_esd                 date;
    l_max_eed                 date;
    l_effective_date          date;
    --
  begin
    -- Initialization
    l_object_found_in_target := false ;
    -- End Initialization
    -- Derive the prefix - sufix
    if   p_prefix_suffix_cd = 'PREFIX' then
      l_prefix  := p_prefix_suffix_text ;
    elsif p_prefix_suffix_cd = 'SUFFIX' then
      l_suffix   := p_prefix_suffix_text ;
    else
      l_prefix := null ;
      l_suffix  := null ;
    end if ;
    -- End Prefix Sufix derivation
    for r_ESH_unique in c_unique_ESH('ESH') loop

      if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ESH_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
        --
        hr_utility.set_location(' r_ESH_unique.table_route_id '||r_ESH_unique.table_route_id,10);
        hr_utility.set_location(' r_ESH_unique.information1 '||r_ESH_unique.information1,10);
        hr_utility.set_location( 'r_ESH_unique.information2 '||r_ESH_unique.information2,10);
        hr_utility.set_location( 'r_ESH_unique.information3 '||r_ESH_unique.information3,10);
        -- If reuse objects flag is 'Y' then check for the object in the target business group
        -- if found insert the record into PLSql table and exit the loop else try create the
        -- object in the target business group
        --
        l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ESH_unique.dml_operation ;
       --
/**********************moved from below **********************/
        open c_ESH(r_ESH_unique.table_route_id,
                 r_ESH_unique.information1,
                 r_ESH_unique.information2,
                 r_ESH_unique.information3 ) ;
        --
        fetch c_ESH into r_ESH ;
        --
        close c_ESH ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ESH.INFORMATION263,l_dml_operation); -- Changed from 11
        l_HRS_NUM :=  r_ESH.INFORMATION288; --Added this criteria
        l_FREQ_CD :=  r_ESH.INFORMATION14; --Added this criteria
        l_DETERMINATION_CD := r_ESH.INFORMATION11;
        l_DETERMINATION_RL := get_fk('FORMULA_ID', r_ESH.INFORMATION259,l_dml_operation);
        l_MAX_HRS_NUM      := r_ESH.INFORMATION287;
        l_ROUNDING_CD      := r_ESH.INFORMATION12;
        l_ROUNDING_RL      := get_fk('FORMULA_ID', r_ESH.INFORMATION257,l_dml_operation);
        l_SCHEDD_HRS_RL    := get_fk('FORMULA_ID', r_ESH.INFORMATION258,l_dml_operation);
        l_ORDR_NUM         := r_ESH.INFORMATION264;

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ESH_unique.information2 and r_ESH_unique.information3 then
               l_update := true;
               if r_ESH_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_SCHEDD_HRS_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_SCHEDD_HRS_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ESH_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ESH_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ESH_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ESH',l_new_value,l_prefix || r_ESH_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
        l_min_esd := null ;
        l_max_eed := null ;
        open c_ESH_min_max_dates(r_ESH_unique.table_route_id, r_ESH_unique.information1 ) ;
        fetch c_ESH_min_max_dates into l_min_esd,l_max_eed ;
        --

        if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
             l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
          l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
        end if;
       l_min_esd := greatest(l_min_esd,r_ESH_unique.information2);
/**********************moved up from here **********************
        open c_ESH(r_ESH_unique.table_route_id,
                 r_ESH_unique.information1,
                 r_ESH_unique.information2,
                 r_ESH_unique.information3 ) ;
        --
        fetch c_ESH into r_ESH ;
        --
        close c_ESH ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ESH.INFORMATION263,l_dml_operation); -- Changed from 11
        l_HRS_NUM :=  r_ESH.INFORMATION288; --Added this criteria
        l_FREQ_CD :=  r_ESH.INFORMATION14; --Added this criteria
        l_DETERMINATION_CD := r_ESH.INFORMATION11;
        l_DETERMINATION_RL := get_fk('FORMULA_ID', r_ESH.INFORMATION259,l_dml_operation);
        l_MAX_HRS_NUM      := r_ESH.INFORMATION287;
        l_ROUNDING_CD      := r_ESH.INFORMATION12;
        l_ROUNDING_RL      := get_fk('FORMULA_ID', r_ESH.INFORMATION257,l_dml_operation);
        l_SCHEDD_HRS_RL    := get_fk('FORMULA_ID', r_ESH.INFORMATION258,l_dml_operation);
        l_ORDR_NUM         := r_ESH.INFORMATION264;

**********************************************************/


        if p_reuse_object_flag = 'Y' then
          if c_ESH_min_max_dates%found then
            -- cursor to find the object
            open c_find_ESH_in_target( l_min_esd,l_max_eed,
                                  p_target_business_group_id, nvl(l_elig_schedd_hrs_prte_id, -999)  ) ;
            fetch c_find_ESH_in_target into l_new_value ;
            if c_find_ESH_in_target%found then
              --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_SCHEDD_HRS_PRTE_F',
                   p_base_key_column => 'ELIG_SCHEDD_HRS_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
              if r_ESH_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                 nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_SCHEDD_HRS_PRTE_ID'  then
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_SCHEDD_HRS_PRTE_ID' ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ESH_unique.information1 ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ESH_unique.table_route_id;
                 --
                 -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                 --
                 BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
              end if ;
              --
              l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
            end if;
            close c_find_ESH_in_target ;
          --
          end if;
        end if ;
        --
        close c_ESH_min_max_dates ;
        end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

          --
          l_current_pk_id := r_ESH.information1;
          --
          hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
          hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
          --
          if l_current_pk_id =  l_prev_pk_id  then
            --
            l_first_rec := false ;
            --
          else
            --
            l_first_rec := true ;
            --
          end if ;
          --

          l_effective_date := r_ESH.information2;
          if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
            l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
          end if;

          if l_first_rec and not l_update then
            -- Call Create routine.
            hr_utility.set_location(' BEN_ELIG_SCHEDD_HRS_PRTE_F CREATE_ELIG_SCHEDD_HRS_PRTE ',20);
            BEN_ELIG_SCHEDD_HRS_PRTE_API.CREATE_ELIG_SCHEDD_HRS_PRTE(
              --
              P_VALIDATE               => false
              ,P_EFFECTIVE_DATE        => l_effective_date
              ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
              --
             ,P_DETERMINATION_CD      => r_ESH.INFORMATION11
             ,P_DETERMINATION_RL      => l_DETERMINATION_RL
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_SCHEDD_HRS_PRTE_ID      => l_elig_schedd_hrs_prte_id
             ,P_ESH_ATTRIBUTE1      => r_ESH.INFORMATION111
             ,P_ESH_ATTRIBUTE10      => r_ESH.INFORMATION120
             ,P_ESH_ATTRIBUTE11      => r_ESH.INFORMATION121
             ,P_ESH_ATTRIBUTE12      => r_ESH.INFORMATION122
             ,P_ESH_ATTRIBUTE13      => r_ESH.INFORMATION123
             ,P_ESH_ATTRIBUTE14      => r_ESH.INFORMATION124
             ,P_ESH_ATTRIBUTE15      => r_ESH.INFORMATION125
             ,P_ESH_ATTRIBUTE16      => r_ESH.INFORMATION126
             ,P_ESH_ATTRIBUTE17      => r_ESH.INFORMATION127
             ,P_ESH_ATTRIBUTE18      => r_ESH.INFORMATION128
             ,P_ESH_ATTRIBUTE19      => r_ESH.INFORMATION129
             ,P_ESH_ATTRIBUTE2      => r_ESH.INFORMATION112
             ,P_ESH_ATTRIBUTE20      => r_ESH.INFORMATION130
             ,P_ESH_ATTRIBUTE21      => r_ESH.INFORMATION131
             ,P_ESH_ATTRIBUTE22      => r_ESH.INFORMATION132
             ,P_ESH_ATTRIBUTE23      => r_ESH.INFORMATION133
             ,P_ESH_ATTRIBUTE24      => r_ESH.INFORMATION134
             ,P_ESH_ATTRIBUTE25      => r_ESH.INFORMATION135
             ,P_ESH_ATTRIBUTE26      => r_ESH.INFORMATION136
             ,P_ESH_ATTRIBUTE27      => r_ESH.INFORMATION137
             ,P_ESH_ATTRIBUTE28      => r_ESH.INFORMATION138
             ,P_ESH_ATTRIBUTE29      => r_ESH.INFORMATION139
             ,P_ESH_ATTRIBUTE3      => r_ESH.INFORMATION113
             ,P_ESH_ATTRIBUTE30      => r_ESH.INFORMATION140
             ,P_ESH_ATTRIBUTE4      => r_ESH.INFORMATION114
             ,P_ESH_ATTRIBUTE5      => r_ESH.INFORMATION115
             ,P_ESH_ATTRIBUTE6      => r_ESH.INFORMATION116
             ,P_ESH_ATTRIBUTE7      => r_ESH.INFORMATION117
             ,P_ESH_ATTRIBUTE8      => r_ESH.INFORMATION118
             ,P_ESH_ATTRIBUTE9      => r_ESH.INFORMATION119
             ,P_ESH_ATTRIBUTE_CATEGORY      => r_ESH.INFORMATION110
             ,P_EXCLD_FLAG      => r_ESH.INFORMATION13
             ,P_FREQ_CD      => r_ESH.INFORMATION14
             ,P_HRS_NUM      => r_ESH.INFORMATION288
             ,P_MAX_HRS_NUM      => r_ESH.INFORMATION287
             ,P_ORDR_NUM      => r_ESH.INFORMATION264
             ,P_ROUNDING_CD      => r_ESH.INFORMATION12
             ,P_ROUNDING_RL      => l_ROUNDING_RL
             ,P_SCHEDD_HRS_RL      => l_SCHEDD_HRS_RL
   --
    --****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_esh.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_esh.INFORMATION296
         );
            -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            -- Update all relevent cer records with new pk_id
            hr_utility.set_location('Before plsql table ',222);
            hr_utility.set_location('new_value id '||l_elig_schedd_hrs_prte_id,222);
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_SCHEDD_HRS_PRTE_ID' ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ESH.information1 ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_SCHEDD_HRS_PRTE_ID ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ESH_unique.table_route_id;
            hr_utility.set_location('After plsql table ',222);
            --
            -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
            --
            BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
            --
          else
            --
            -- Call Update routine for the pk_id created in prev run .
            -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            hr_utility.set_location(' BEN_ELIG_SCHEDD_HRS_PRTE_F UPDATE_ELIG_SCHEDD_HRS_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ESH.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ESH.information3,
               p_effective_start_date  => r_ESH.information2,
               p_dml_operation         => r_ESH.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_SCHEDD_HRS_PRTE_ID   := r_ESH.information1;
             l_object_version_number := r_ESH.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


            BEN_ELIG_SCHEDD_HRS_PRTE_API.UPDATE_ELIG_SCHEDD_HRS_PRTE(
              --
              P_VALIDATE               => false
              ,P_EFFECTIVE_DATE        => l_effective_date
              ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
              --
             ,P_DETERMINATION_CD      => r_ESH.INFORMATION11
             ,P_DETERMINATION_RL      => l_DETERMINATION_RL
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_SCHEDD_HRS_PRTE_ID      => l_elig_schedd_hrs_prte_id
             ,P_ESH_ATTRIBUTE1      => r_ESH.INFORMATION111
             ,P_ESH_ATTRIBUTE10      => r_ESH.INFORMATION120
             ,P_ESH_ATTRIBUTE11      => r_ESH.INFORMATION121
             ,P_ESH_ATTRIBUTE12      => r_ESH.INFORMATION122
             ,P_ESH_ATTRIBUTE13      => r_ESH.INFORMATION123
             ,P_ESH_ATTRIBUTE14      => r_ESH.INFORMATION124
             ,P_ESH_ATTRIBUTE15      => r_ESH.INFORMATION125
             ,P_ESH_ATTRIBUTE16      => r_ESH.INFORMATION126
             ,P_ESH_ATTRIBUTE17      => r_ESH.INFORMATION127
             ,P_ESH_ATTRIBUTE18      => r_ESH.INFORMATION128
             ,P_ESH_ATTRIBUTE19      => r_ESH.INFORMATION129
             ,P_ESH_ATTRIBUTE2      => r_ESH.INFORMATION112
             ,P_ESH_ATTRIBUTE20      => r_ESH.INFORMATION130
             ,P_ESH_ATTRIBUTE21      => r_ESH.INFORMATION131
             ,P_ESH_ATTRIBUTE22      => r_ESH.INFORMATION132
             ,P_ESH_ATTRIBUTE23      => r_ESH.INFORMATION133
             ,P_ESH_ATTRIBUTE24      => r_ESH.INFORMATION134
             ,P_ESH_ATTRIBUTE25      => r_ESH.INFORMATION135
             ,P_ESH_ATTRIBUTE26      => r_ESH.INFORMATION136
             ,P_ESH_ATTRIBUTE27      => r_ESH.INFORMATION137
             ,P_ESH_ATTRIBUTE28      => r_ESH.INFORMATION138
             ,P_ESH_ATTRIBUTE29      => r_ESH.INFORMATION139
             ,P_ESH_ATTRIBUTE3      => r_ESH.INFORMATION113
             ,P_ESH_ATTRIBUTE30      => r_ESH.INFORMATION140
             ,P_ESH_ATTRIBUTE4      => r_ESH.INFORMATION114
             ,P_ESH_ATTRIBUTE5      => r_ESH.INFORMATION115
             ,P_ESH_ATTRIBUTE6      => r_ESH.INFORMATION116
             ,P_ESH_ATTRIBUTE7      => r_ESH.INFORMATION117
             ,P_ESH_ATTRIBUTE8      => r_ESH.INFORMATION118
             ,P_ESH_ATTRIBUTE9      => r_ESH.INFORMATION119
             ,P_ESH_ATTRIBUTE_CATEGORY      => r_ESH.INFORMATION110
             ,P_EXCLD_FLAG      => r_ESH.INFORMATION13
             ,P_FREQ_CD      => r_ESH.INFORMATION14
             ,P_HRS_NUM      => r_ESH.INFORMATION288
             ,P_MAX_HRS_NUM      => r_ESH.INFORMATION287
             ,P_ORDR_NUM      => r_ESH.INFORMATION264
             ,P_ROUNDING_CD      => r_ESH.INFORMATION12
             ,P_ROUNDING_RL      => l_ROUNDING_RL
             ,P_SCHEDD_HRS_RL      => l_SCHEDD_HRS_RL
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_esh.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_esh.INFORMATION296
         );
	end if;  -- l_update
            --
          end if;
          --
          -- Delete the row if it is end dated.
          --
          if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
              trunc(l_max_eed) = trunc(r_ESH.information3)) then
              --
              BEN_ELIG_SCHEDD_HRS_PRTE_API.delete_ELIG_SCHEDD_HRS_PRTE(
                 --
                 p_validate                       => false
                 ,p_elig_schedd_hrs_prte_id                   => l_elig_schedd_hrs_prte_id
                 ,p_effective_start_date           => l_effective_start_date
                 ,p_effective_end_date             => l_effective_end_date
                 ,p_object_version_number          => l_object_version_number
                 ,p_effective_date                 => l_max_eed
                 ,p_datetrack_mode                 => hr_api.g_delete
                 --
                 );
                 --
          end if;
          --
          l_prev_pk_id := l_current_pk_id ;
          --
        end if;
        --
      end if;
      --
    end loop;
    --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ESH',r_ESH.information5 ) ;
     --
  end create_ESH_rows;

    --
    ---------------------------------------------------------------
    ----------------------< create_ESP_rows >-----------------------
    ---------------------------------------------------------------
    --
    procedure create_ESP_rows
    (
          p_validate                       in  number     default 0
         ,p_copy_entity_txn_id             in  number
         ,p_effective_date                 in  date
         ,p_prefix_suffix_text             in  varchar2  default null
         ,p_reuse_object_flag              in  varchar2  default null
         ,p_target_business_group_id       in  varchar2  default null
         ,p_prefix_suffix_cd               in  varchar2  default null
    ) is
    --
    l_ELIGY_PRFL_ID  number;
    l_SPECIAL_CEILING_STEP_ID  number;
    l_ORDR_NUM number;
    cursor c_unique_ESP(l_table_alias varchar2) is
    select distinct cpe.information1,
      cpe.information2,
      cpe.information3,
      cpe.table_route_id
    ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
         pqh_table_route tr
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = tr.table_route_id
    -- and   tr.where_clause        = l_BEN_ELIG_SP_CLNG_PRG_PRTE_F
   and tr.table_alias = l_table_alias
    and   cpe.number_of_copies   = 1 -- ADDITION
    group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
    --
    --
    cursor c_ESP_min_max_dates(c_table_route_id  number,
                 c_information1   number) is
    select
      min(cpe.information2) min_esd,
      max(cpe.information3) min_eed
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1 ;
    --
    cursor c_ESP(c_table_route_id  number,
                 c_information1   number,
                 c_information2   date,
                 c_information3   date )  is
    select
      cpe.*
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1
    and   cpe.information2       = c_information2
    and   cpe.information3       = c_information3
    and rownum = 1 ;
    -- Date Track target record
    cursor c_find_ESP_in_target(
                                 c_effective_start_date    date,
                                 c_effective_end_date      date,
                                 c_business_group_id       number,
                                 c_new_pk_id               number) is
    select
      ESP.elig_sp_clng_prg_prte_id new_value
    from BEN_ELIG_SP_CLNG_PRG_PRTE_F ESP
    where
    ESP.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
    ESP.SPECIAL_CEILING_STEP_ID     = l_SPECIAL_CEILING_STEP_ID  and
    ESP.business_group_id  = c_business_group_id
    and   ESP.elig_sp_clng_prg_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
    and exists ( select null
                 from BEN_ELIG_SP_CLNG_PRG_PRTE_F ESP1
                 where
                 ESP1.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 ESP1.SPECIAL_CEILING_STEP_ID = l_SPECIAL_CEILING_STEP_ID  and
                 ESP1.ORDR_NUM = l_ORDR_NUM and     -- Added this criteria
                 ESP1.business_group_id  = c_business_group_id
                 and   ESP1.effective_start_date <= c_effective_start_date )
    and exists ( select null
                 from BEN_ELIG_SP_CLNG_PRG_PRTE_F ESP2
                 where
                 ESP2.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 ESP2.SPECIAL_CEILING_STEP_ID = l_SPECIAL_CEILING_STEP_ID  and
                 ESP2.ORDR_NUM = l_ORDR_NUM and     -- Added this criteria
                 ESP2.business_group_id  = c_business_group_id
                 and   ESP2.effective_end_date >= c_effective_end_date )
                 ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
    --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

    l_prev_pk_id              number := null ;
    l_first_rec               boolean := true ;
    r_ESP                     c_ESP%rowtype;
    l_elig_sp_clng_prg_prte_id             number ;
    l_object_version_number   number ;
    l_effective_start_date    date ;
    l_effective_end_date      date ;
    l_prefix                  pqh_copy_entity_attribs.information1%type := null;
    l_suffix                  pqh_copy_entity_attribs.information1%type := null;
    l_new_value               number(15);
    l_object_found_in_target  boolean := false ;
    l_min_esd                 date;
    l_max_eed                 date;
    l_effective_date          date;
    --
  begin
    -- Initialization
    l_object_found_in_target := false ;
    -- End Initialization
    -- Derive the prefix - sufix
    if   p_prefix_suffix_cd = 'PREFIX' then
      l_prefix  := p_prefix_suffix_text ;
    elsif p_prefix_suffix_cd = 'SUFFIX' then
      l_suffix   := p_prefix_suffix_text ;
    else
      l_prefix := null ;
      l_suffix  := null ;
    end if ;
    -- End Prefix Sufix derivation
    for r_ESP_unique in c_unique_ESP('ESP') loop

      if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ESP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
        --
        hr_utility.set_location(' r_ESP_unique.table_route_id '||r_ESP_unique.table_route_id,10);
        hr_utility.set_location(' r_ESP_unique.information1 '||r_ESP_unique.information1,10);
        hr_utility.set_location( 'r_ESP_unique.information2 '||r_ESP_unique.information2,10);
        hr_utility.set_location( 'r_ESP_unique.information3 '||r_ESP_unique.information3,10);
        -- If reuse objects flag is 'Y' then check for the object in the target business group
        -- if found insert the record into PLSql table and exit the loop else try create the
        -- object in the target business group
        --
        l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ESP_unique.dml_operation ;
       --
/**********************moved from below **********************/
        open c_ESP(r_ESP_unique.table_route_id,
                 r_ESP_unique.information1,
                 r_ESP_unique.information2,
                 r_ESP_unique.information3 ) ;
        --
        fetch c_ESP into r_ESP ;
        --
        close c_ESP ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ESP.INFORMATION263,l_dml_operation);
        if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
          l_SPECIAL_CEILING_STEP_ID := r_ESP.information176;
        else
          l_SPECIAL_CEILING_STEP_ID := r_ESP.information174;
        end if;
        --
        l_ORDR_NUM := r_ESP.INFORMATION257; -- Added this criteria

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ESP_unique.information2 and r_ESP_unique.information3 then
               l_update := true;
               if r_ESP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_SP_CLNG_PRG_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_SP_CLNG_PRG_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ESP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ESP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ESP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ESP',l_new_value,l_prefix || r_ESP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
        l_min_esd := null ;
        l_max_eed := null ;
        open c_ESP_min_max_dates(r_ESP_unique.table_route_id, r_ESP_unique.information1 ) ;
        fetch c_ESP_min_max_dates into l_min_esd,l_max_eed ;
        --

        if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
             l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
          l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
        end if;
        l_min_esd := greatest(l_min_esd,r_ESP_unique.information2);
/**********************moved up from here **********************
        open c_ESP(r_ESP_unique.table_route_id,
                 r_ESP_unique.information1,
                 r_ESP_unique.information2,
                 r_ESP_unique.information3 ) ;
        --
        fetch c_ESP into r_ESP ;
        --
        close c_ESP ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ESP.INFORMATION263,l_dml_operation);
        if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
          l_SPECIAL_CEILING_STEP_ID := r_ESP.information176;
        else
          l_SPECIAL_CEILING_STEP_ID := r_ESP.information174;
        end if;
        --
        l_ORDR_NUM := r_ESP.INFORMATION257; -- Added this criteria

**********************************************************/


        if l_SPECIAL_CEILING_STEP_ID is null then
          close c_ESP_min_max_dates;
          --
          BEN_PD_COPY_TO_BEN_three.log_nomapping_data(p_parent_table_alias =>'ELP'
                     ,p_parent_pk_id         => r_ESP.information263
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'ESP'
                     ,p_child_data           => r_ESP.information173 );

          --
        else
          if p_reuse_object_flag = 'Y' then
             if c_ESP_min_max_dates%found then
               -- cursor to find the object
               open c_find_ESP_in_target( l_min_esd,l_max_eed,
                                     p_target_business_group_id, nvl(l_elig_sp_clng_prg_prte_id, -999)  ) ;
               fetch c_find_ESP_in_target into l_new_value ;
               if c_find_ESP_in_target%found then
                 --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_SP_CLNG_PRG_PRTE_F',
                   p_base_key_column => 'ELIG_SP_CLNG_PRG_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
                 if r_ESP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                    nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_SP_CLNG_PRG_PRTE_ID'  then
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_SP_CLNG_PRG_PRTE_ID' ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ESP_unique.information1 ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ESP_unique.table_route_id;
                    --
                    -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                    --
                    BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                 end if ;
                 --
                 l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
               end if;
               close c_find_ESP_in_target ;
             --
             end if;
          end if ;
          --
          close c_ESP_min_max_dates ;
          end if; --if p_dml_operation
       --
       if ( not l_object_found_in_target OR l_update) and (l_SPECIAL_CEILING_STEP_ID is not null)  then -- bug # 4251900


            --
            l_current_pk_id := r_ESP.information1;
            --
            hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
            hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
            --
            if l_current_pk_id =  l_prev_pk_id  then
              --
              l_first_rec := false ;
              --
            else
              --
              l_first_rec := true ;
              --
            end if ;
            --

            l_effective_date := r_ESP.information2;
            if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
            end if;

            if l_first_rec and not l_update then
              -- Call Create routine.
              hr_utility.set_location(' BEN_ELIG_SP_CLNG_PRG_PRTE_F CREATE_ELIG_SP_CLNG_PRG_PRTE ',20);
              BEN_ELIG_SP_CLNG_PRG_PRTE_API.CREATE_ELIG_SP_CLNG_PRG_PRTE(
                 --
                 P_VALIDATE               => false
                 ,P_EFFECTIVE_DATE        => l_effective_date
                 ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                 --
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_SP_CLNG_PRG_PRTE_ID      => l_elig_sp_clng_prg_prte_id
				 ,P_ESP_ATTRIBUTE1      => r_ESP.INFORMATION111
				 ,P_ESP_ATTRIBUTE10      => r_ESP.INFORMATION120
				 ,P_ESP_ATTRIBUTE11      => r_ESP.INFORMATION121
				 ,P_ESP_ATTRIBUTE12      => r_ESP.INFORMATION122
				 ,P_ESP_ATTRIBUTE13      => r_ESP.INFORMATION123
				 ,P_ESP_ATTRIBUTE14      => r_ESP.INFORMATION124
				 ,P_ESP_ATTRIBUTE15      => r_ESP.INFORMATION125
				 ,P_ESP_ATTRIBUTE16      => r_ESP.INFORMATION126
				 ,P_ESP_ATTRIBUTE17      => r_ESP.INFORMATION127
				 ,P_ESP_ATTRIBUTE18      => r_ESP.INFORMATION128
				 ,P_ESP_ATTRIBUTE19      => r_ESP.INFORMATION129
				 ,P_ESP_ATTRIBUTE2      => r_ESP.INFORMATION112
				 ,P_ESP_ATTRIBUTE20      => r_ESP.INFORMATION130
				 ,P_ESP_ATTRIBUTE21      => r_ESP.INFORMATION131
				 ,P_ESP_ATTRIBUTE22      => r_ESP.INFORMATION132
				 ,P_ESP_ATTRIBUTE23      => r_ESP.INFORMATION133
				 ,P_ESP_ATTRIBUTE24      => r_ESP.INFORMATION134
				 ,P_ESP_ATTRIBUTE25      => r_ESP.INFORMATION135
				 ,P_ESP_ATTRIBUTE26      => r_ESP.INFORMATION136
				 ,P_ESP_ATTRIBUTE27      => r_ESP.INFORMATION137
				 ,P_ESP_ATTRIBUTE28      => r_ESP.INFORMATION138
				 ,P_ESP_ATTRIBUTE29      => r_ESP.INFORMATION139
				 ,P_ESP_ATTRIBUTE3      => r_ESP.INFORMATION113
				 ,P_ESP_ATTRIBUTE30      => r_ESP.INFORMATION140
				 ,P_ESP_ATTRIBUTE4      => r_ESP.INFORMATION114
				 ,P_ESP_ATTRIBUTE5      => r_ESP.INFORMATION115
				 ,P_ESP_ATTRIBUTE6      => r_ESP.INFORMATION116
				 ,P_ESP_ATTRIBUTE7      => r_ESP.INFORMATION117
				 ,P_ESP_ATTRIBUTE8      => r_ESP.INFORMATION118
				 ,P_ESP_ATTRIBUTE9      => r_ESP.INFORMATION119
				 ,P_ESP_ATTRIBUTE_CATEGORY      => r_ESP.INFORMATION110
				 ,P_EXCLD_FLAG      => r_ESP.INFORMATION11
				 ,P_ORDR_NUM      => r_ESP.INFORMATION257
				 ,P_SPECIAL_CEILING_STEP_ID      => l_SPECIAL_CEILING_STEP_ID
	   --
		-- ****** END CHANGE LINES

	   --

				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
                                 ,P_CRITERIA_SCORE       => r_esp.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_esp.INFORMATION296
			 );
               -- insert the table_name,old_pk_id,new_pk_id into a plsql record
               -- Update all relevent cer records with new pk_id
               hr_utility.set_location('Before plsql table ',222);
               hr_utility.set_location('new_value id '||l_elig_sp_clng_prg_prte_id,222);
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_SP_CLNG_PRG_PRTE_ID' ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ESP.information1 ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_SP_CLNG_PRG_PRTE_ID ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ESP_unique.table_route_id;
               hr_utility.set_location('After plsql table ',222);
               --
               -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
               --
               BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
               --
             else
               --
               -- Call Update routine for the pk_id created in prev run .
               -- insert the table_name,old_pk_id,new_pk_id into a plsql record
               hr_utility.set_location(' BEN_ELIG_SP_CLNG_PRG_PRTE_F UPDATE_ELIG_SP_CLNG_PRG_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ESP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ESP.information3,
               p_effective_start_date  => r_ESP.information2,
               p_dml_operation         => r_ESP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_SP_CLNG_PRG_PRTE_ID   := r_ESP.information1;
             l_object_version_number := r_ESP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


               BEN_ELIG_SP_CLNG_PRG_PRTE_API.UPDATE_ELIG_SP_CLNG_PRG_PRTE(
                 --
                 P_VALIDATE               => false
                 ,P_EFFECTIVE_DATE        => l_effective_date
                 ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                 --
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_SP_CLNG_PRG_PRTE_ID      => l_elig_sp_clng_prg_prte_id
				 ,P_ESP_ATTRIBUTE1      => r_ESP.INFORMATION111
				 ,P_ESP_ATTRIBUTE10      => r_ESP.INFORMATION120
				 ,P_ESP_ATTRIBUTE11      => r_ESP.INFORMATION121
				 ,P_ESP_ATTRIBUTE12      => r_ESP.INFORMATION122
				 ,P_ESP_ATTRIBUTE13      => r_ESP.INFORMATION123
				 ,P_ESP_ATTRIBUTE14      => r_ESP.INFORMATION124
				 ,P_ESP_ATTRIBUTE15      => r_ESP.INFORMATION125
				 ,P_ESP_ATTRIBUTE16      => r_ESP.INFORMATION126
				 ,P_ESP_ATTRIBUTE17      => r_ESP.INFORMATION127
				 ,P_ESP_ATTRIBUTE18      => r_ESP.INFORMATION128
				 ,P_ESP_ATTRIBUTE19      => r_ESP.INFORMATION129
				 ,P_ESP_ATTRIBUTE2      => r_ESP.INFORMATION112
				 ,P_ESP_ATTRIBUTE20      => r_ESP.INFORMATION130
				 ,P_ESP_ATTRIBUTE21      => r_ESP.INFORMATION131
				 ,P_ESP_ATTRIBUTE22      => r_ESP.INFORMATION132
				 ,P_ESP_ATTRIBUTE23      => r_ESP.INFORMATION133
				 ,P_ESP_ATTRIBUTE24      => r_ESP.INFORMATION134
				 ,P_ESP_ATTRIBUTE25      => r_ESP.INFORMATION135
				 ,P_ESP_ATTRIBUTE26      => r_ESP.INFORMATION136
				 ,P_ESP_ATTRIBUTE27      => r_ESP.INFORMATION137
				 ,P_ESP_ATTRIBUTE28      => r_ESP.INFORMATION138
				 ,P_ESP_ATTRIBUTE29      => r_ESP.INFORMATION139
				 ,P_ESP_ATTRIBUTE3      => r_ESP.INFORMATION113
				 ,P_ESP_ATTRIBUTE30      => r_ESP.INFORMATION140
				 ,P_ESP_ATTRIBUTE4      => r_ESP.INFORMATION114
				 ,P_ESP_ATTRIBUTE5      => r_ESP.INFORMATION115
				 ,P_ESP_ATTRIBUTE6      => r_ESP.INFORMATION116
				 ,P_ESP_ATTRIBUTE7      => r_ESP.INFORMATION117
				 ,P_ESP_ATTRIBUTE8      => r_ESP.INFORMATION118
				 ,P_ESP_ATTRIBUTE9      => r_ESP.INFORMATION119
				 ,P_ESP_ATTRIBUTE_CATEGORY      => r_ESP.INFORMATION110
				 ,P_EXCLD_FLAG      => r_ESP.INFORMATION11
				 ,P_ORDR_NUM      => r_ESP.INFORMATION257
				 ,P_SPECIAL_CEILING_STEP_ID      => l_SPECIAL_CEILING_STEP_ID
	   --
	--   ****** END CHANGE LINES

	   --
				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER => l_object_version_number
				 ,P_DATETRACK_MODE        => l_datetrack_mode
                                 ,P_CRITERIA_SCORE       => r_esp.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_esp.INFORMATION296
			 );
	end if;  -- l_update
               --
             end if;
             --
             -- Delete the row if it is end dated.
             --
             if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                 trunc(l_max_eed) = trunc(r_ESP.information3)) then
                 --
                 BEN_ELIG_SP_CLNG_PRG_PRTE_API.delete_ELIG_SP_CLNG_PRG_PRTE(
                    --
                    p_validate                       => false
                    ,p_elig_sp_clng_prg_prte_id                   => l_elig_sp_clng_prg_prte_id
                    ,p_effective_start_date           => l_effective_start_date
                    ,p_effective_end_date             => l_effective_end_date
                    ,p_object_version_number          => l_object_version_number
                    ,p_effective_date                 => l_max_eed
                    ,p_datetrack_mode                 => hr_api.g_delete
                    --
                    );
                    --
             end if;
             --
             l_prev_pk_id := l_current_pk_id ;
             --
           end if;
           --
         end if;
         --
       end if;
       --
    end loop;
    --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ESP',r_ESP.information5 ) ;
     --
  end create_ESP_rows;

    --
    ---------------------------------------------------------------
    ----------------------< create_EST_rows >-----------------------
    ---------------------------------------------------------------
    --
    procedure create_EST_rows
    (
          p_validate                       in  number     default 0
         ,p_copy_entity_txn_id             in  number
         ,p_effective_date                 in  date
         ,p_prefix_suffix_text             in  varchar2  default null
         ,p_reuse_object_flag              in  varchar2  default null
         ,p_target_business_group_id       in  varchar2  default null
         ,p_prefix_suffix_cd               in  varchar2  default null
    ) is
    --
    l_ELIGY_PRFL_ID  number;
    l_JOB_GROUP_ID  number;
    l_JOB_ID  number;
    cursor c_unique_EST(l_table_alias varchar2) is
    select distinct cpe.information1,
      cpe.information2,
      cpe.information3,
      cpe.table_route_id
    ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
         pqh_table_route tr
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = tr.table_route_id
    -- and   tr.where_clause        = l_BEN_ELIG_SUPPL_ROLE_PRTE_F
   and tr.table_alias = l_table_alias
    and   cpe.number_of_copies   = 1 -- ADDITION
    group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
    --
    --
    cursor c_EST_min_max_dates(c_table_route_id  number,
                 c_information1   number) is
    select
      min(cpe.information2) min_esd,
      max(cpe.information3) min_eed
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1 ;
    --
    cursor c_EST(c_table_route_id  number,
                 c_information1   number,
                 c_information2   date,
                 c_information3   date )  is
    select
      cpe.*
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1
    and   cpe.information2       = c_information2
    and   cpe.information3       = c_information3
    and rownum = 1 ;
    -- Date Track target record
    cursor c_find_EST_in_target(
                                 c_effective_start_date    date,
                                 c_effective_end_date      date,
                                 c_business_group_id       number,
                                 c_new_pk_id               number) is
    select
      EST.elig_suppl_role_prte_id new_value
    from BEN_ELIG_SUPPL_ROLE_PRTE_F EST
    where
    nvl(EST.ELIGY_PRFL_ID,-999)     = l_ELIGY_PRFL_ID  and
    nvl(EST.JOB_GROUP_ID,-999)     = l_JOB_GROUP_ID  and
    nvl(EST.JOB_ID,-999)     = l_JOB_ID  and
    EST.business_group_id  = c_business_group_id
    and   EST.elig_suppl_role_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
    and exists ( select null
                 from BEN_ELIG_SUPPL_ROLE_PRTE_F EST1
                 where
                 EST1.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 EST1.JOB_GROUP_ID = l_JOB_GROUP_ID  and
                 EST1.JOB_ID = l_JOB_ID  and
                 EST1.business_group_id  = c_business_group_id
                 and   EST1.effective_start_date <= c_effective_start_date )
    and exists ( select null
                 from BEN_ELIG_SUPPL_ROLE_PRTE_F EST2
                 where
                 EST2.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 EST2.JOB_GROUP_ID = l_JOB_GROUP_ID  and
                 EST2.JOB_ID = l_JOB_ID  and
                 EST2.business_group_id  = c_business_group_id
                 and   EST2.effective_end_date >= c_effective_end_date )
                 ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
    --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

    l_prev_pk_id              number := null ;
    l_first_rec               boolean := true ;
    r_EST                     c_EST%rowtype;
    l_elig_suppl_role_prte_id             number ;
    l_object_version_number   number ;
    l_effective_start_date    date ;
    l_effective_end_date      date ;
    l_prefix                  pqh_copy_entity_attribs.information1%type := null;
    l_suffix                  pqh_copy_entity_attribs.information1%type := null;
    l_new_value               number(15);
    l_object_found_in_target  boolean := false ;
    l_min_esd                 date;
    l_max_eed                 date;
    l_effective_date          date;
    --
  begin
    -- Initialization
    l_object_found_in_target := false ;
    -- End Initialization
    -- Derive the prefix - sufix
    if   p_prefix_suffix_cd = 'PREFIX' then
      l_prefix  := p_prefix_suffix_text ;
    elsif p_prefix_suffix_cd = 'SUFFIX' then
      l_suffix   := p_prefix_suffix_text ;
    else
      l_prefix := null ;
      l_suffix  := null ;
    end if ;
    -- End Prefix Sufix derivation
    for r_EST_unique in c_unique_EST('EST') loop

      if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EST_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
        --
        hr_utility.set_location(' r_EST_unique.table_route_id '||r_EST_unique.table_route_id,10);
        hr_utility.set_location(' r_EST_unique.information1 '||r_EST_unique.information1,10);
        hr_utility.set_location( 'r_EST_unique.information2 '||r_EST_unique.information2,10);
        hr_utility.set_location( 'r_EST_unique.information3 '||r_EST_unique.information3,10);
        -- If reuse objects flag is 'Y' then check for the object in the target business group
        -- if found insert the record into PLSql table and exit the loop else try create the
        -- object in the target business group
        --
        l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EST_unique.dml_operation ;
       --

/**********************moved from below **********************/
        open c_EST(r_EST_unique.table_route_id,
                 r_EST_unique.information1,
                 r_EST_unique.information2,
                 r_EST_unique.information3 ) ;
        --
        fetch c_EST into r_EST ;
        --
        close c_EST ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EST.INFORMATION263,l_dml_operation);

        if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
          l_JOB_GROUP_ID := r_EST.information176;
          l_JOB_ID := r_EST.information180;
        else
          l_JOB_GROUP_ID := r_EST.information174;
          l_JOB_ID :=  r_EST.information178;
        end if;

/**********************************************************/
       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EST_unique.information2 and r_EST_unique.information3 then
               l_update := true;
               if r_EST_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_SUPPL_ROLE_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_SUPPL_ROLE_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EST_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EST_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EST_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EST',l_new_value,l_prefix || r_EST_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
        l_min_esd := null ;
        l_max_eed := null ;
        open c_EST_min_max_dates(r_EST_unique.table_route_id, r_EST_unique.information1 ) ;
        fetch c_EST_min_max_dates into l_min_esd,l_max_eed ;
        --

        if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
             l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
          l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
        end if;
       l_min_esd := greatest(l_min_esd,r_EST_unique.information2);
/**********************moved up from here **********************
        open c_EST(r_EST_unique.table_route_id,
                 r_EST_unique.information1,
                 r_EST_unique.information2,
                 r_EST_unique.information3 ) ;
        --
        fetch c_EST into r_EST ;
        --
        close c_EST ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EST.INFORMATION263,l_dml_operation);

        if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
          l_JOB_GROUP_ID := r_EST.information176;
          l_JOB_ID := r_EST.information180;
        else
          l_JOB_GROUP_ID := r_EST.information174;
          l_JOB_ID :=  r_EST.information178;
        end if;

**********************************************************/


        if l_JOB_GROUP_ID is null or l_JOB_ID is null then
          close c_EST_min_max_dates;
          --
          BEN_PD_COPY_TO_BEN_three.log_nomapping_data(p_parent_table_alias =>'ELP'
                     ,p_parent_pk_id         => r_EST.information263
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'EST'
                     ,p_child_data           => r_EST.information173 );

          --
        else
          if p_reuse_object_flag = 'Y' then
            if c_EST_min_max_dates%found then
               -- cursor to find the object
               open c_find_EST_in_target( l_min_esd,l_max_eed,
                                     p_target_business_group_id, nvl(l_elig_suppl_role_prte_id, -999)  ) ;
               fetch c_find_EST_in_target into l_new_value ;
               if c_find_EST_in_target%found then
                 --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_SUPPL_ROLE_PRTE_F',
                   p_base_key_column => 'ELIG_SUPPL_ROLE_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
                 if r_EST_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                    nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_SUPPL_ROLE_PRTE_ID'  then
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_SUPPL_ROLE_PRTE_ID' ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EST_unique.information1 ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EST_unique.table_route_id;
                    --
                    -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                    --
                    BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                 end if ;
                 --
                 l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
               end if;
               close c_find_EST_in_target ;
             --
             end if;
          end if ;
          --
          close c_EST_min_max_dates ;
          end if; --if p_dml_operation
       --
       if ( not l_object_found_in_target OR l_update ) and ( l_JOB_GROUP_ID is not null ) and ( l_JOB_ID is not null )   then -- bug # 4251900

            --
            l_current_pk_id := r_EST.information1;
            --
            hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
            hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
            --
            if l_current_pk_id =  l_prev_pk_id  then
              --
              l_first_rec := false ;
              --
            else
              --
              l_first_rec := true ;
              --
            end if ;
            --

            l_effective_date := r_EST.information2;
            if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
              l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
            end if;

            if l_first_rec and not l_update then
              -- Call Create routine.
              hr_utility.set_location(' BEN_ELIG_SUPPL_ROLE_PRTE_F CREATE_ELIG_SUPPL_ROLE_PRTE ',20);
              BEN_ELIG_SUPPL_ROLE_PRTE_API.CREATE_ELIG_SUPPL_ROLE_PRTE(
                 --
                 P_VALIDATE               => false
                 ,P_EFFECTIVE_DATE        => l_effective_date
                 ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                 --
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_SUPPL_ROLE_PRTE_ID      => l_elig_suppl_role_prte_id
				 ,P_EST_ATTRIBUTE1      => r_EST.INFORMATION111
				 ,P_EST_ATTRIBUTE10      => r_EST.INFORMATION120
				 ,P_EST_ATTRIBUTE11      => r_EST.INFORMATION121
				 ,P_EST_ATTRIBUTE12      => r_EST.INFORMATION122
				 ,P_EST_ATTRIBUTE13      => r_EST.INFORMATION123
				 ,P_EST_ATTRIBUTE14      => r_EST.INFORMATION124
				 ,P_EST_ATTRIBUTE15      => r_EST.INFORMATION125
				 ,P_EST_ATTRIBUTE16      => r_EST.INFORMATION126
				 ,P_EST_ATTRIBUTE17      => r_EST.INFORMATION127
				 ,P_EST_ATTRIBUTE18      => r_EST.INFORMATION128
				 ,P_EST_ATTRIBUTE19      => r_EST.INFORMATION129
				 ,P_EST_ATTRIBUTE2      => r_EST.INFORMATION112
				 ,P_EST_ATTRIBUTE20      => r_EST.INFORMATION130
				 ,P_EST_ATTRIBUTE21      => r_EST.INFORMATION131
				 ,P_EST_ATTRIBUTE22      => r_EST.INFORMATION132
				 ,P_EST_ATTRIBUTE23      => r_EST.INFORMATION133
				 ,P_EST_ATTRIBUTE24      => r_EST.INFORMATION134
				 ,P_EST_ATTRIBUTE25      => r_EST.INFORMATION135
				 ,P_EST_ATTRIBUTE26      => r_EST.INFORMATION136
				 ,P_EST_ATTRIBUTE27      => r_EST.INFORMATION137
				 ,P_EST_ATTRIBUTE28      => r_EST.INFORMATION138
				 ,P_EST_ATTRIBUTE29      => r_EST.INFORMATION139
				 ,P_EST_ATTRIBUTE3      => r_EST.INFORMATION113
				 ,P_EST_ATTRIBUTE30      => r_EST.INFORMATION140
				 ,P_EST_ATTRIBUTE4      => r_EST.INFORMATION114
				 ,P_EST_ATTRIBUTE5      => r_EST.INFORMATION115
				 ,P_EST_ATTRIBUTE6      => r_EST.INFORMATION116
				 ,P_EST_ATTRIBUTE7      => r_EST.INFORMATION117
				 ,P_EST_ATTRIBUTE8      => r_EST.INFORMATION118
				 ,P_EST_ATTRIBUTE9      => r_EST.INFORMATION119
				 ,P_EST_ATTRIBUTE_CATEGORY      => r_EST.INFORMATION110
				 ,P_EXCLD_FLAG      => r_EST.INFORMATION11
				 ,P_JOB_GROUP_ID      => l_JOB_GROUP_ID
				 ,P_JOB_ID      => l_JOB_ID
				 ,P_ORDR_NUM      => r_EST.INFORMATION257
	   --
		-- *** END CHANGE LINES

	   --

				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
                                 ,P_CRITERIA_SCORE       => r_est.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_est.INFORMATION296
			 );
               -- insert the table_name,old_pk_id,new_pk_id into a plsql record
               -- Update all relevent cer records with new pk_id
               hr_utility.set_location('Before plsql table ',222);
               hr_utility.set_location('new_value id '||l_elig_suppl_role_prte_id,222);
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_SUPPL_ROLE_PRTE_ID' ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EST.information1 ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_SUPPL_ROLE_PRTE_ID ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EST_unique.table_route_id;
               hr_utility.set_location('After plsql table ',222);
               --
               -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
               --
               BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
               --
             else
               --
               -- Call Update routine for the pk_id created in prev run .
               -- insert the table_name,old_pk_id,new_pk_id into a plsql record
               hr_utility.set_location(' BEN_ELIG_SUPPL_ROLE_PRTE_F UPDATE_ELIG_SUPPL_ROLE_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EST.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EST.information3,
               p_effective_start_date  => r_EST.information2,
               p_dml_operation         => r_EST.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_SUPPL_ROLE_PRTE_ID   := r_EST.information1;
             l_object_version_number := r_EST.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


               BEN_ELIG_SUPPL_ROLE_PRTE_API.UPDATE_ELIG_SUPPL_ROLE_PRTE(
                 --
                 P_VALIDATE               => false
                 ,P_EFFECTIVE_DATE        => l_effective_date
                 ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                 --
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_SUPPL_ROLE_PRTE_ID      => l_elig_suppl_role_prte_id
				 ,P_EST_ATTRIBUTE1      => r_EST.INFORMATION111
				 ,P_EST_ATTRIBUTE10      => r_EST.INFORMATION120
				 ,P_EST_ATTRIBUTE11      => r_EST.INFORMATION121
				 ,P_EST_ATTRIBUTE12      => r_EST.INFORMATION122
				 ,P_EST_ATTRIBUTE13      => r_EST.INFORMATION123
				 ,P_EST_ATTRIBUTE14      => r_EST.INFORMATION124
				 ,P_EST_ATTRIBUTE15      => r_EST.INFORMATION125
				 ,P_EST_ATTRIBUTE16      => r_EST.INFORMATION126
				 ,P_EST_ATTRIBUTE17      => r_EST.INFORMATION127
				 ,P_EST_ATTRIBUTE18      => r_EST.INFORMATION128
				 ,P_EST_ATTRIBUTE19      => r_EST.INFORMATION129
				 ,P_EST_ATTRIBUTE2      => r_EST.INFORMATION112
				 ,P_EST_ATTRIBUTE20      => r_EST.INFORMATION130
				 ,P_EST_ATTRIBUTE21      => r_EST.INFORMATION131
				 ,P_EST_ATTRIBUTE22      => r_EST.INFORMATION132
				 ,P_EST_ATTRIBUTE23      => r_EST.INFORMATION133
				 ,P_EST_ATTRIBUTE24      => r_EST.INFORMATION134
				 ,P_EST_ATTRIBUTE25      => r_EST.INFORMATION135
				 ,P_EST_ATTRIBUTE26      => r_EST.INFORMATION136
				 ,P_EST_ATTRIBUTE27      => r_EST.INFORMATION137
				 ,P_EST_ATTRIBUTE28      => r_EST.INFORMATION138
				 ,P_EST_ATTRIBUTE29      => r_EST.INFORMATION139
				 ,P_EST_ATTRIBUTE3      => r_EST.INFORMATION113
				 ,P_EST_ATTRIBUTE30      => r_EST.INFORMATION140
				 ,P_EST_ATTRIBUTE4      => r_EST.INFORMATION114
				 ,P_EST_ATTRIBUTE5      => r_EST.INFORMATION115
				 ,P_EST_ATTRIBUTE6      => r_EST.INFORMATION116
				 ,P_EST_ATTRIBUTE7      => r_EST.INFORMATION117
				 ,P_EST_ATTRIBUTE8      => r_EST.INFORMATION118
				 ,P_EST_ATTRIBUTE9      => r_EST.INFORMATION119
				 ,P_EST_ATTRIBUTE_CATEGORY      => r_EST.INFORMATION110
				 ,P_EXCLD_FLAG      => r_EST.INFORMATION11
				 ,P_JOB_GROUP_ID      => l_JOB_GROUP_ID
				 ,P_JOB_ID      => l_JOB_ID
				 ,P_ORDR_NUM      => r_EST.INFORMATION257
	   --
	--   ****** END CHANGE LINES

	   --
				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER => l_object_version_number
				 ,P_DATETRACK_MODE        => l_datetrack_mode
                                 ,P_CRITERIA_SCORE       => r_est.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_est.INFORMATION296
			 );
	end if;  -- l_update
               --
             end if;
             --
             -- Delete the row if it is end dated.
             --
             if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                 trunc(l_max_eed) = trunc(r_EST.information3)) then
                 --
                 BEN_ELIG_SUPPL_ROLE_PRTE_API.delete_ELIG_SUPPL_ROLE_PRTE(
                    --
                    p_validate                       => false
                    ,p_elig_suppl_role_prte_id                   => l_elig_suppl_role_prte_id
                    ,p_effective_start_date           => l_effective_start_date
                    ,p_effective_end_date             => l_effective_end_date
                    ,p_object_version_number          => l_object_version_number
                    ,p_effective_date                 => l_max_eed
                    ,p_datetrack_mode                 => hr_api.g_delete
                    --
                    );
                    --
             end if;
             --
             l_prev_pk_id := l_current_pk_id ;
             --
           end if;
           --
        end if;
        --
      end if;
      --
    end loop;
    --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EST',r_EST.information5 ) ;
     --
  end create_EST_rows;

    --
    ---------------------------------------------------------------
    ----------------------< create_EWL_rows >-----------------------
    ---------------------------------------------------------------
    --
    procedure create_EWL_rows
    (
          p_validate                       in  number     default 0
         ,p_copy_entity_txn_id             in  number
         ,p_effective_date                 in  date
         ,p_prefix_suffix_text             in  varchar2  default null
         ,p_reuse_object_flag              in  varchar2  default null
         ,p_target_business_group_id       in  varchar2  default null
         ,p_prefix_suffix_cd               in  varchar2  default null
    ) is
    --
    l_ELIGY_PRFL_ID  number;
    l_LOCATION_ID  number;
    cursor c_unique_EWL(l_table_alias varchar2) is
    select distinct cpe.information1,
      cpe.information2,
      cpe.information3,
      cpe.table_route_id
    ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
         pqh_table_route tr
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = tr.table_route_id
    -- and   tr.where_clause        = l_BEN_ELIG_WK_LOC_PRTE_F
   and tr.table_alias = l_table_alias
    and   cpe.number_of_copies   = 1 -- ADDITION
    group by cpe.information1,cpe.information2,cpe.information3,  cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
    --
    --
    cursor c_EWL_min_max_dates(c_table_route_id  number,
                 c_information1   number) is
    select
      min(cpe.information2) min_esd,
      max(cpe.information3) min_eed
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1 ;
    --
    cursor c_EWL(c_table_route_id  number,
                 c_information1   number,
                 c_information2   date,
                 c_information3   date )  is
    select
      cpe.*
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1
    and   cpe.information2       = c_information2
    and   cpe.information3       = c_information3
    and rownum = 1 ;
    -- Date Track target record
    cursor c_find_EWL_in_target(
                                 c_effective_start_date    date,
                                 c_effective_end_date      date,
                                 c_business_group_id       number,
                                 c_new_pk_id               number) is
    select
      EWL.elig_wk_loc_prte_id new_value
    from BEN_ELIG_WK_LOC_PRTE_F EWL
    where
    EWL.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
    EWL.LOCATION_ID     = l_LOCATION_ID  and
    EWL.business_group_id  = c_business_group_id
    and   EWL.elig_wk_loc_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
    and exists ( select null
                 from BEN_ELIG_WK_LOC_PRTE_F EWL1
                 where
                 EWL1.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 EWL1.LOCATION_ID = l_LOCATION_ID  and
                 EWL1.business_group_id  = c_business_group_id
                 and   EWL1.effective_start_date <= c_effective_start_date )
    and exists ( select null
                 from BEN_ELIG_WK_LOC_PRTE_F EWL2
                 where
                 EWL2.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and
                 EWL2.LOCATION_ID = l_LOCATION_ID  and
                 EWL2.business_group_id  = c_business_group_id
                 and   EWL2.effective_end_date >= c_effective_end_date )
                 ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
    --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

    l_prev_pk_id              number := null ;
    l_first_rec               boolean := true ;
    r_EWL                     c_EWL%rowtype;
    l_elig_wk_loc_prte_id             number ;
    l_object_version_number   number ;
    l_effective_start_date    date ;
    l_effective_end_date      date ;
    l_prefix                  pqh_copy_entity_attribs.information1%type := null;
    l_suffix                  pqh_copy_entity_attribs.information1%type := null;
    l_new_value               number(15);
    l_object_found_in_target  boolean := false ;
    l_min_esd                 date;
    l_max_eed                 date;
    l_effective_date          date;
    --
  begin
    -- Initialization
    l_object_found_in_target := false ;
    -- End Initialization
    -- Derive the prefix - sufix
    if   p_prefix_suffix_cd = 'PREFIX' then
      l_prefix  := p_prefix_suffix_text ;
    elsif p_prefix_suffix_cd = 'SUFFIX' then
      l_suffix   := p_prefix_suffix_text ;
    else
      l_prefix := null ;
      l_suffix  := null ;
    end if ;
    -- End Prefix Sufix derivation
    for r_EWL_unique in c_unique_EWL('EWL') loop

      if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EWL_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
        --
        hr_utility.set_location(' r_EWL_unique.table_route_id '||r_EWL_unique.table_route_id,10);
        hr_utility.set_location(' r_EWL_unique.information1 '||r_EWL_unique.information1,10);
        hr_utility.set_location( 'r_EWL_unique.information2 '||r_EWL_unique.information2,10);
        hr_utility.set_location( 'r_EWL_unique.information3 '||r_EWL_unique.information3,10);
        -- If reuse objects flag is 'Y' then check for the object in the target business group
        -- if found insert the record into PLSql table and exit the loop else try create the
        -- object in the target business group
        --
        l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EWL_unique.dml_operation ;
       --
/**********************moved from below **********************/
        open c_EWL(r_EWL_unique.table_route_id,
                 r_EWL_unique.information1,
                 r_EWL_unique.information2,
                 r_EWL_unique.information3 ) ;
        --
        fetch c_EWL into r_EWL ;
        --
        close c_EWL ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EWL.INFORMATION263,l_dml_operation);
        if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
          l_LOCATION_ID := r_EWL.information176;
        else
          l_LOCATION_ID := r_EWL.information174;
        end if;

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EWL_unique.information2 and r_EWL_unique.information3 then
               l_update := true;
               if r_EWL_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_WK_LOC_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_WK_LOC_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EWL_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EWL_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EWL_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EWL',l_new_value,l_prefix || r_EWL_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
        l_min_esd := null ;
        l_max_eed := null ;
        open c_EWL_min_max_dates(r_EWL_unique.table_route_id, r_EWL_unique.information1 ) ;
        fetch c_EWL_min_max_dates into l_min_esd,l_max_eed ;
        --

        if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
             l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
          l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
        end if;
       l_min_esd := greatest(l_min_esd,r_EWL_unique.information2);
/**********************moved up from here **********************
        open c_EWL(r_EWL_unique.table_route_id,
                 r_EWL_unique.information1,
                 r_EWL_unique.information2,
                 r_EWL_unique.information3 ) ;
        --
        fetch c_EWL into r_EWL ;
        --
        close c_EWL ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EWL.INFORMATION263,l_dml_operation);
        if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
          l_LOCATION_ID := r_EWL.information176;
        else
          l_LOCATION_ID := r_EWL.information174;
        end if;

**********************************************************/

        if l_LOCATION_ID is null then
          close c_EWL_min_max_dates;
          --
          BEN_PD_COPY_TO_BEN_three.log_nomapping_data(p_parent_table_alias =>'ELP'
                     ,p_parent_pk_id         => r_EWL.information263
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'EWL'
                     ,p_child_data           => r_EWL.information173 );

          --
        else
          if p_reuse_object_flag = 'Y' then
             if c_EWL_min_max_dates%found then
               -- cursor to find the object
               open c_find_EWL_in_target( l_min_esd,l_max_eed,
                                     p_target_business_group_id, nvl(l_elig_wk_loc_prte_id, -999)  ) ;
               fetch c_find_EWL_in_target into l_new_value ;
               if c_find_EWL_in_target%found then
                 --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_WK_LOC_PRTE_F',
                   p_base_key_column => 'ELIG_WK_LOC_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
                 if r_EWL_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                    nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_WK_LOC_PRTE_ID'  then
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_WK_LOC_PRTE_ID' ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EWL_unique.information1 ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                    BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EWL_unique.table_route_id;
                    --
                    -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                    --
                    BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                 end if ;
                 --
                 l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
               end if;
               close c_find_EWL_in_target ;
             --
             end if;
          end if ;
          --
          close c_EWL_min_max_dates ;

	  end if; -- bug 4565106

       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

            --
            l_current_pk_id := r_EWL.information1;
            --
            hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
            hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
            --
            if l_current_pk_id =  l_prev_pk_id  then
              --
              l_first_rec := false ;
              --
            else
              --
              l_first_rec := true ;
              --
            end if ;
            --

            l_effective_date := r_EWL.information2;
            if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
              l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
            end if;

            if l_first_rec and not l_update then
              -- Call Create routine.
              hr_utility.set_location(' BEN_ELIG_WK_LOC_PRTE_F CREATE_ELIG_WK_LOC_PRTE ',20);
              BEN_ELIG_WK_LOC_PRTE_API.CREATE_ELIG_WK_LOC_PRTE(
                 --
                 P_VALIDATE               => false
                 ,P_EFFECTIVE_DATE        => l_effective_date
                 ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                 --
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_WK_LOC_PRTE_ID      => l_elig_wk_loc_prte_id
				 ,P_EWL_ATTRIBUTE1      => r_EWL.INFORMATION111
				 ,P_EWL_ATTRIBUTE10      => r_EWL.INFORMATION120
				 ,P_EWL_ATTRIBUTE11      => r_EWL.INFORMATION121
				 ,P_EWL_ATTRIBUTE12      => r_EWL.INFORMATION122
				 ,P_EWL_ATTRIBUTE13      => r_EWL.INFORMATION123
				 ,P_EWL_ATTRIBUTE14      => r_EWL.INFORMATION124
				 ,P_EWL_ATTRIBUTE15      => r_EWL.INFORMATION125
				 ,P_EWL_ATTRIBUTE16      => r_EWL.INFORMATION126
				 ,P_EWL_ATTRIBUTE17      => r_EWL.INFORMATION127
				 ,P_EWL_ATTRIBUTE18      => r_EWL.INFORMATION128
				 ,P_EWL_ATTRIBUTE19      => r_EWL.INFORMATION129
				 ,P_EWL_ATTRIBUTE2      => r_EWL.INFORMATION112
				 ,P_EWL_ATTRIBUTE20      => r_EWL.INFORMATION130
				 ,P_EWL_ATTRIBUTE21      => r_EWL.INFORMATION131
				 ,P_EWL_ATTRIBUTE22      => r_EWL.INFORMATION132
				 ,P_EWL_ATTRIBUTE23      => r_EWL.INFORMATION133
				 ,P_EWL_ATTRIBUTE24      => r_EWL.INFORMATION134
				 ,P_EWL_ATTRIBUTE25      => r_EWL.INFORMATION135
				 ,P_EWL_ATTRIBUTE26      => r_EWL.INFORMATION136
				 ,P_EWL_ATTRIBUTE27      => r_EWL.INFORMATION137
				 ,P_EWL_ATTRIBUTE28      => r_EWL.INFORMATION138
				 ,P_EWL_ATTRIBUTE29      => r_EWL.INFORMATION139
				 ,P_EWL_ATTRIBUTE3      => r_EWL.INFORMATION113
				 ,P_EWL_ATTRIBUTE30      => r_EWL.INFORMATION140
				 ,P_EWL_ATTRIBUTE4      => r_EWL.INFORMATION114
				 ,P_EWL_ATTRIBUTE5      => r_EWL.INFORMATION115
				 ,P_EWL_ATTRIBUTE6      => r_EWL.INFORMATION116
				 ,P_EWL_ATTRIBUTE7      => r_EWL.INFORMATION117
				 ,P_EWL_ATTRIBUTE8      => r_EWL.INFORMATION118
				 ,P_EWL_ATTRIBUTE9      => r_EWL.INFORMATION119
				 ,P_EWL_ATTRIBUTE_CATEGORY      => r_EWL.INFORMATION110
				 ,P_EXCLD_FLAG      => r_EWL.INFORMATION11
				 ,P_LOCATION_ID      => l_LOCATION_ID
				 ,P_ORDR_NUM      => r_EWL.INFORMATION260
	   --
	--    ****** END CHANGE LINES

	   --

				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
                                 ,P_CRITERIA_SCORE       => r_ewl.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_ewl.INFORMATION296
			 );
               -- insert the table_name,old_pk_id,new_pk_id into a plsql record
               -- Update all relevent cer records with new pk_id
               hr_utility.set_location('Before plsql table ',222);
               hr_utility.set_location('new_value id '||l_elig_wk_loc_prte_id,222);
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_WK_LOC_PRTE_ID' ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EWL.information1 ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_WK_LOC_PRTE_ID ;
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
               BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EWL_unique.table_route_id;
               hr_utility.set_location('After plsql table ',222);
               --
               -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
               --
               BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
               --
             else
               --
               -- Call Update routine for the pk_id created in prev run .
               -- insert the table_name,old_pk_id,new_pk_id into a plsql record
               hr_utility.set_location(' BEN_ELIG_WK_LOC_PRTE_F UPDATE_ELIG_WK_LOC_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EWL.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EWL.information3,
               p_effective_start_date  => r_EWL.information2,
               p_dml_operation         => r_EWL.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_WK_LOC_PRTE_ID   := r_EWL.information1;
             l_object_version_number := r_EWL.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


               BEN_ELIG_WK_LOC_PRTE_API.UPDATE_ELIG_WK_LOC_PRTE(
                 --
                 P_VALIDATE               => false
                 ,P_EFFECTIVE_DATE        => l_effective_date
                 ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                 --
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_WK_LOC_PRTE_ID      => l_elig_wk_loc_prte_id
				 ,P_EWL_ATTRIBUTE1      => r_EWL.INFORMATION111
				 ,P_EWL_ATTRIBUTE10      => r_EWL.INFORMATION120
				 ,P_EWL_ATTRIBUTE11      => r_EWL.INFORMATION121
				 ,P_EWL_ATTRIBUTE12      => r_EWL.INFORMATION122
				 ,P_EWL_ATTRIBUTE13      => r_EWL.INFORMATION123
				 ,P_EWL_ATTRIBUTE14      => r_EWL.INFORMATION124
				 ,P_EWL_ATTRIBUTE15      => r_EWL.INFORMATION125
				 ,P_EWL_ATTRIBUTE16      => r_EWL.INFORMATION126
				 ,P_EWL_ATTRIBUTE17      => r_EWL.INFORMATION127
				 ,P_EWL_ATTRIBUTE18      => r_EWL.INFORMATION128
				 ,P_EWL_ATTRIBUTE19      => r_EWL.INFORMATION129
				 ,P_EWL_ATTRIBUTE2      => r_EWL.INFORMATION112
				 ,P_EWL_ATTRIBUTE20      => r_EWL.INFORMATION130
				 ,P_EWL_ATTRIBUTE21      => r_EWL.INFORMATION131
				 ,P_EWL_ATTRIBUTE22      => r_EWL.INFORMATION132
				 ,P_EWL_ATTRIBUTE23      => r_EWL.INFORMATION133
				 ,P_EWL_ATTRIBUTE24      => r_EWL.INFORMATION134
				 ,P_EWL_ATTRIBUTE25      => r_EWL.INFORMATION135
				 ,P_EWL_ATTRIBUTE26      => r_EWL.INFORMATION136
				 ,P_EWL_ATTRIBUTE27      => r_EWL.INFORMATION137
				 ,P_EWL_ATTRIBUTE28      => r_EWL.INFORMATION138
				 ,P_EWL_ATTRIBUTE29      => r_EWL.INFORMATION139
				 ,P_EWL_ATTRIBUTE3      => r_EWL.INFORMATION113
				 ,P_EWL_ATTRIBUTE30      => r_EWL.INFORMATION140
				 ,P_EWL_ATTRIBUTE4      => r_EWL.INFORMATION114
				 ,P_EWL_ATTRIBUTE5      => r_EWL.INFORMATION115
				 ,P_EWL_ATTRIBUTE6      => r_EWL.INFORMATION116
				 ,P_EWL_ATTRIBUTE7      => r_EWL.INFORMATION117
				 ,P_EWL_ATTRIBUTE8      => r_EWL.INFORMATION118
				 ,P_EWL_ATTRIBUTE9      => r_EWL.INFORMATION119
				 ,P_EWL_ATTRIBUTE_CATEGORY      => r_EWL.INFORMATION110
				 ,P_EXCLD_FLAG      => r_EWL.INFORMATION11
				 ,P_LOCATION_ID      => l_LOCATION_ID
				 ,P_ORDR_NUM      => r_EWL.INFORMATION260
	   --
	--   ****** END CHANGE LINES

	   --
				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER => l_object_version_number
				 ,P_DATETRACK_MODE        => l_datetrack_mode
                                 ,P_CRITERIA_SCORE       => r_ewl.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_ewl.INFORMATION296
			 );
	end if;  -- l_update
               --
             end if;
             --
             -- Delete the row if it is end dated.
             --
             if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                 trunc(l_max_eed) = trunc(r_EWL.information3)) then
                 --
                 BEN_ELIG_WK_LOC_PRTE_API.delete_ELIG_WK_LOC_PRTE(
                    --
                    p_validate                       => false
                    ,p_elig_wk_loc_prte_id                   => l_elig_wk_loc_prte_id
                    ,p_effective_start_date           => l_effective_start_date
                    ,p_effective_end_date             => l_effective_end_date
                    ,p_object_version_number          => l_object_version_number
                    ,p_effective_date                 => l_max_eed
                    ,p_datetrack_mode                 => hr_api.g_delete
                    --
                    );
                    --
             end if;
             --
             l_prev_pk_id := l_current_pk_id ;
             --
          -- end if; -- bug 4565106
           --
        end if;
        --
      end if;
      --
    end loop;
    --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EWL',r_EWL.information5 ) ;
     --
  end create_EWL_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_ETD_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_ETD_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_PTIP_ID  number;
   l_ORDR_NUM number(15);

   cursor c_unique_ETD(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_DPNT_OTHR_PTIP_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ETD_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ETD(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ETD_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ETD.elig_dpnt_othr_ptip_id new_value
   from BEN_ELIG_DPNT_OTHR_PTIP_F ETD
   where
   ETD.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   ETD.PTIP_ID     = l_PTIP_ID  and
   ETD.business_group_id  = c_business_group_id
   and   ETD.elig_dpnt_othr_ptip_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_DPNT_OTHR_PTIP_F ETD1
                where
                ETD1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                ETD1.PTIP_ID     = l_PTIP_ID  and
                -- additional filter condition
                ETD1.ORDR_NUM          = l_ORDR_NUM and
                ETD1.business_group_id  = c_business_group_id
                and   ETD1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_DPNT_OTHR_PTIP_F ETD2
                where
                ETD2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                ETD2.PTIP_ID    = l_PTIP_ID  and
                -- additional filter condition
                ETD2.ORDR_NUM          = l_ORDR_NUM and
                ETD2.business_group_id  = c_business_group_id
                and   ETD2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ETD                     c_ETD%rowtype;
   l_elig_dpnt_othr_ptip_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ETD_unique in c_unique_ETD('ETD') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
          (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
           r_ETD_unique.information3 >=
                   ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_ETD_unique.table_route_id '||r_ETD_unique.table_route_id,10);
       hr_utility.set_location(' r_ETD_unique.information1 '||r_ETD_unique.information1,10);
       hr_utility.set_location( 'r_ETD_unique.information2 '||r_ETD_unique.information2,10);
       hr_utility.set_location( 'r_ETD_unique.information3 '||r_ETD_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ETD_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_ETD(r_ETD_unique.table_route_id,
                r_ETD_unique.information1,
                r_ETD_unique.information2,
                r_ETD_unique.information3 ) ;
       --
       fetch c_ETD into r_ETD ;
       --
       close c_ETD ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ETD.INFORMATION263,l_dml_operation);

       -- Only For Use by Create Wizard - Same Business Group
       l_PTIP_ID       := NVL(get_fk('PTIP_ID', r_ETD.INFORMATION259,l_dml_operation),
                               r_ETD.INFORMATION259);
       -- Additional Change
       l_ORDR_NUM      := r_ETD.INFORMATION257;
/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ETD_unique.information2 and r_ETD_unique.information3 then
               l_update := true;
               if r_ETD_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_DPNT_OTHR_PTIP_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_DPNT_OTHR_PTIP_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ETD_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ETD_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ETD_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ETD',l_new_value,l_prefix || r_ETD_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ETD_min_max_dates(r_ETD_unique.table_route_id, r_ETD_unique.information1 ) ;
       fetch c_ETD_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ETD_unique.information2);
/**********************moved up from here **********************
       open c_ETD(r_ETD_unique.table_route_id,
                r_ETD_unique.information1,
                r_ETD_unique.information2,
                r_ETD_unique.information3 ) ;
       --
       fetch c_ETD into r_ETD ;
       --
       close c_ETD ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ETD.INFORMATION263,l_dml_operation);

       -- Only For Use by Create Wizard - Same Business Group
       l_PTIP_ID       := NVL(get_fk('PTIP_ID', r_ETD.INFORMATION259,l_dml_operation),
                               r_ETD.INFORMATION259);
       -- Additional Change
       l_ORDR_NUM      := r_ETD.INFORMATION257;
**********************************************************/


       if p_reuse_object_flag = 'Y' then
         if c_ETD_min_max_dates%found then
           -- cursor to find the object
           open c_find_ETD_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_dpnt_othr_ptip_id, -999)  ) ;
           fetch c_find_ETD_in_target into l_new_value ;
           if c_find_ETD_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_DPNT_OTHR_PTIP_F',
                   p_base_key_column => 'ELIG_DPNT_OTHR_PTIP_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_ETD_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_DPNT_OTHR_PTIP_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_DPNT_OTHR_PTIP_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ETD_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ETD_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_ETD_in_target ;
         --
         end if;
       end if ;
       --
       close c_ETD_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_ETD.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_ETD.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_DPNT_OTHR_PTIP_F CREATE_ELIG_DPNT_OTHR_PTIP ',20);
           BEN_ELIG_DPNT_OTHR_PTIP_API.CREATE_ELIG_DPNT_OTHR_PTIP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_DPNT_OTHR_PTIP_ID      => l_elig_dpnt_othr_ptip_id
             ,P_ETD_ATTRIBUTE1      => r_ETD.INFORMATION111
             ,P_ETD_ATTRIBUTE10      => r_ETD.INFORMATION120
             ,P_ETD_ATTRIBUTE11      => r_ETD.INFORMATION121
             ,P_ETD_ATTRIBUTE12      => r_ETD.INFORMATION122
             ,P_ETD_ATTRIBUTE13      => r_ETD.INFORMATION123
             ,P_ETD_ATTRIBUTE14      => r_ETD.INFORMATION124
             ,P_ETD_ATTRIBUTE15      => r_ETD.INFORMATION125
             ,P_ETD_ATTRIBUTE16      => r_ETD.INFORMATION126
             ,P_ETD_ATTRIBUTE17      => r_ETD.INFORMATION127
             ,P_ETD_ATTRIBUTE18      => r_ETD.INFORMATION128
             ,P_ETD_ATTRIBUTE19      => r_ETD.INFORMATION129
             ,P_ETD_ATTRIBUTE2      => r_ETD.INFORMATION112
             ,P_ETD_ATTRIBUTE20      => r_ETD.INFORMATION130
             ,P_ETD_ATTRIBUTE21      => r_ETD.INFORMATION131
             ,P_ETD_ATTRIBUTE22      => r_ETD.INFORMATION132
             ,P_ETD_ATTRIBUTE23      => r_ETD.INFORMATION133
             ,P_ETD_ATTRIBUTE24      => r_ETD.INFORMATION134
             ,P_ETD_ATTRIBUTE25      => r_ETD.INFORMATION135
             ,P_ETD_ATTRIBUTE26      => r_ETD.INFORMATION136
             ,P_ETD_ATTRIBUTE27      => r_ETD.INFORMATION137
             ,P_ETD_ATTRIBUTE28      => r_ETD.INFORMATION138
             ,P_ETD_ATTRIBUTE29      => r_ETD.INFORMATION139
             ,P_ETD_ATTRIBUTE3      => r_ETD.INFORMATION113
             ,P_ETD_ATTRIBUTE30      => r_ETD.INFORMATION140
             ,P_ETD_ATTRIBUTE4      => r_ETD.INFORMATION114
             ,P_ETD_ATTRIBUTE5      => r_ETD.INFORMATION115
             ,P_ETD_ATTRIBUTE6      => r_ETD.INFORMATION116
             ,P_ETD_ATTRIBUTE7      => r_ETD.INFORMATION117
             ,P_ETD_ATTRIBUTE8      => r_ETD.INFORMATION118
             ,P_ETD_ATTRIBUTE9      => r_ETD.INFORMATION119
             ,P_ETD_ATTRIBUTE_CATEGORY      => r_ETD.INFORMATION110
             ,P_EXCLD_FLAG      => r_ETD.INFORMATION11
             ,P_ORDR_NUM      => r_ETD.INFORMATION257
             ,P_PTIP_ID      => l_PTIP_ID
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_dpnt_othr_ptip_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_DPNT_OTHR_PTIP_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ETD.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_DPNT_OTHR_PTIP_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ETD_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_DPNT_OTHR_PTIP_F UPDATE_ELIG_DPNT_OTHR_PTIP ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ETD.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ETD.information3,
               p_effective_start_date  => r_ETD.information2,
               p_dml_operation         => r_ETD.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_DPNT_OTHR_PTIP_ID   := r_ETD.information1;
             l_object_version_number := r_ETD.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_DPNT_OTHR_PTIP_API.UPDATE_ELIG_DPNT_OTHR_PTIP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             -- Changed From r_ETD.information11 To r_ETD.information12
             --
             --,P_ELIGY_PRFL_ID        => r_ETD.information11
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_DPNT_OTHR_PTIP_ID      => l_elig_dpnt_othr_ptip_id
             ,P_ETD_ATTRIBUTE1      => r_ETD.INFORMATION111
             ,P_ETD_ATTRIBUTE10      => r_ETD.INFORMATION120
             ,P_ETD_ATTRIBUTE11      => r_ETD.INFORMATION121
             ,P_ETD_ATTRIBUTE12      => r_ETD.INFORMATION122
             ,P_ETD_ATTRIBUTE13      => r_ETD.INFORMATION123
             ,P_ETD_ATTRIBUTE14      => r_ETD.INFORMATION124
             ,P_ETD_ATTRIBUTE15      => r_ETD.INFORMATION125
             ,P_ETD_ATTRIBUTE16      => r_ETD.INFORMATION126
             ,P_ETD_ATTRIBUTE17      => r_ETD.INFORMATION127
             ,P_ETD_ATTRIBUTE18      => r_ETD.INFORMATION128
             ,P_ETD_ATTRIBUTE19      => r_ETD.INFORMATION129
             ,P_ETD_ATTRIBUTE2      => r_ETD.INFORMATION112
             ,P_ETD_ATTRIBUTE20      => r_ETD.INFORMATION130
             ,P_ETD_ATTRIBUTE21      => r_ETD.INFORMATION131
             ,P_ETD_ATTRIBUTE22      => r_ETD.INFORMATION132
             ,P_ETD_ATTRIBUTE23      => r_ETD.INFORMATION133
             ,P_ETD_ATTRIBUTE24      => r_ETD.INFORMATION134
             ,P_ETD_ATTRIBUTE25      => r_ETD.INFORMATION135
             ,P_ETD_ATTRIBUTE26      => r_ETD.INFORMATION136
             ,P_ETD_ATTRIBUTE27      => r_ETD.INFORMATION137
             ,P_ETD_ATTRIBUTE28      => r_ETD.INFORMATION138
             ,P_ETD_ATTRIBUTE29      => r_ETD.INFORMATION139
             ,P_ETD_ATTRIBUTE3      => r_ETD.INFORMATION113
             ,P_ETD_ATTRIBUTE30      => r_ETD.INFORMATION140
             ,P_ETD_ATTRIBUTE4      => r_ETD.INFORMATION114
             ,P_ETD_ATTRIBUTE5      => r_ETD.INFORMATION115
             ,P_ETD_ATTRIBUTE6      => r_ETD.INFORMATION116
             ,P_ETD_ATTRIBUTE7      => r_ETD.INFORMATION117
             ,P_ETD_ATTRIBUTE8      => r_ETD.INFORMATION118
             ,P_ETD_ATTRIBUTE9      => r_ETD.INFORMATION119
             ,P_ETD_ATTRIBUTE_CATEGORY      => r_ETD.INFORMATION110
             ,P_EXCLD_FLAG      => r_ETD.INFORMATION11
             ,P_ORDR_NUM      => r_ETD.INFORMATION257
             ,P_PTIP_ID      => l_PTIP_ID
   --
   -- ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_ETD.information3)) then
             --
             BEN_ELIG_DPNT_OTHR_PTIP_API.delete_ELIG_DPNT_OTHR_PTIP(
                --
                p_validate                       => false
                ,p_elig_dpnt_othr_ptip_id                   => l_elig_dpnt_othr_ptip_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ETD',r_ETD.information5 ) ;
     --
 end create_ETD_rows;

    --
    ---------------------------------------------------------------
    ----------------------< create_ECT_rows >-----------------------
    ---------------------------------------------------------------
    --
    procedure create_ECT_rows
    (
          p_validate                       in  number     default 0
         ,p_copy_entity_txn_id             in  number
         ,p_effective_date                 in  date
         ,p_prefix_suffix_text             in  varchar2  default null
         ,p_reuse_object_flag              in  varchar2  default null
         ,p_target_business_group_id       in  varchar2  default null
         ,p_prefix_suffix_cd               in  varchar2  default null
    ) is
    --
    l_ELIGY_PRFL_ID  number;
    l_CATEGORY       varchar2(30) ;
    l_ORDR_NUM       number(15);

    cursor c_unique_ECT(l_table_alias varchar2) is
    select distinct cpe.information1,
      cpe.information2,
      cpe.information3,
      cpe.table_route_id
    ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
         pqh_table_route tr
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = tr.table_route_id
    -- and   tr.where_clause        = l_BEN_ELIG_DSBLTY_CTG_PRTE_F
   and tr.table_alias = l_table_alias
    and   cpe.number_of_copies   = 1 -- ADDITION
    group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
    --
    --
    cursor c_ECT_min_max_dates(c_table_route_id  number,
                 c_information1   number) is
    select
      min(cpe.information2) min_esd,
      max(cpe.information3) min_eed
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1 ;
    --
    cursor c_ECT(c_table_route_id  number,
                 c_information1   number,
                 c_information2   date,
                 c_information3   date )  is
    select
      cpe.*
    from ben_copy_entity_results cpe
    where cpe.copy_entity_txn_id = p_copy_entity_txn_id
    and   cpe.table_route_id     = c_table_route_id
    and   cpe.information1       = c_information1
    and   cpe.information2       = c_information2
    and   cpe.information3       = c_information3
    and rownum = 1 ;
    -- Date Track target record
    cursor c_find_ECT_in_target(
                                 c_effective_start_date    date,
                                 c_effective_end_date      date,
                                 c_business_group_id       number,
                                 c_new_pk_id               number) is
    select
      ECT.elig_dsblty_ctg_prte_id new_value
    from BEN_ELIG_DSBLTY_CTG_PRTE_F ECT
    where
    ECT.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
    ECT.CATEGORY          =l_CATEGORY  and
    ECT.ORDR_NUM          =l_ORDR_NUM and
    ECT.business_group_id  = c_business_group_id
    and   ECT.elig_dsblty_ctg_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
    and exists ( select null
                 from BEN_ELIG_DSBLTY_CTG_PRTE_F ECT1
                 where
                 ECT1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                 -- Additional Filter Condition
                 ECT1.CATEGORY          =l_CATEGORY  and
                 ECT1.ORDR_NUM          =l_ORDR_NUM and

                 ECT1.business_group_id  = c_business_group_id
                 and   ECT1.effective_start_date <= c_effective_start_date )
    and exists ( select null
                 from BEN_ELIG_DSBLTY_CTG_PRTE_F ECT2
                 where
                 ECT2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                 -- Additional Filter Condition
                 ECT2.CATEGORY          = l_CATEGORY  and
                 ECT2.ORDR_NUM          =l_ORDR_NUM and

                 ECT2.business_group_id  = c_business_group_id
                 and   ECT2.effective_end_date >= c_effective_end_date )
                 ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
    --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

    l_prev_pk_id              number := null ;
    l_first_rec               boolean := true ;
    r_ECT                     c_ECT%rowtype;
    l_elig_dsblty_ctg_prte_id             number ;
    l_object_version_number   number ;
    l_effective_start_date    date ;
    l_effective_end_date      date ;
    l_prefix                  pqh_copy_entity_attribs.information1%type := null;
    l_suffix                  pqh_copy_entity_attribs.information1%type := null;
    l_new_value               number(15);
    l_object_found_in_target  boolean := false ;
    l_min_esd                 date;
    l_max_eed                 date;
    l_effective_date          date;
    --
  begin
    -- Initialization
    l_object_found_in_target := false ;
    -- End Initialization
    -- Derive the prefix - sufix
    if   p_prefix_suffix_cd = 'PREFIX' then
      l_prefix  := p_prefix_suffix_text ;
    elsif p_prefix_suffix_cd = 'SUFFIX' then
      l_suffix   := p_prefix_suffix_text ;
    else
      l_prefix := null ;
      l_suffix  := null ;
    end if ;
    -- End Prefix Sufix derivation
    for r_ECT_unique in c_unique_ECT('ECT') loop

      if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
          (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
           r_ECT_unique.information3 >=
                   ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
        --
        hr_utility.set_location(' r_ECT_unique.table_route_id '||r_ECT_unique.table_route_id,10);
        hr_utility.set_location(' r_ECT_unique.information1 '||r_ECT_unique.information1,10);
        hr_utility.set_location( 'r_ECT_unique.information2 '||r_ECT_unique.information2,10);
        hr_utility.set_location( 'r_ECT_unique.information3 '||r_ECT_unique.information3,10);
        -- If reuse objects flag is 'Y' then check for the object in the target business group
        -- if found insert the record into PLSql table and exit the loop else try create the
        -- object in the target business group
        --
        l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ECT_unique.dml_operation ;
       --
/**********************moved from below **********************/
        open c_ECT(r_ECT_unique.table_route_id,
                 r_ECT_unique.information1,
                 r_ECT_unique.information2,
                 r_ECT_unique.information3 ) ;
        --
        fetch c_ECT into r_ECT ;
        --
        close c_ECT ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ECT.INFORMATION263,l_dml_operation);

        -- Additional Change
        l_CATEGORY      := r_ECT.INFORMATION12 ;
        l_ORDR_NUM      := r_ECT.INFORMATION260 ;
/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ECT_unique.information2 and r_ECT_unique.information3 then
               l_update := true;
               if r_ECT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_DSBLTY_CTG_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_DSBLTY_CTG_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ECT_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ECT_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ECT_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ECT',l_new_value,l_prefix || r_ECT_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
        l_min_esd := null ;
        l_max_eed := null ;
        open c_ECT_min_max_dates(r_ECT_unique.table_route_id, r_ECT_unique.information1 ) ;
        fetch c_ECT_min_max_dates into l_min_esd,l_max_eed ;
        --

        if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
             l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
          l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
        end if;
       l_min_esd := greatest(l_min_esd,r_ECT_unique.information2);
/**********************moved up from here **********************
        open c_ECT(r_ECT_unique.table_route_id,
                 r_ECT_unique.information1,
                 r_ECT_unique.information2,
                 r_ECT_unique.information3 ) ;
        --
        fetch c_ECT into r_ECT ;
        --
        close c_ECT ;
        --
        l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ECT.INFORMATION263,l_dml_operation);

        -- Additional Change
        l_CATEGORY      := r_ECT.INFORMATION12 ;
        l_ORDR_NUM      := r_ECT.INFORMATION260 ;
**********************************************************/


        if p_reuse_object_flag = 'Y' then
          if c_ECT_min_max_dates%found then
            -- cursor to find the object
            open c_find_ECT_in_target( l_min_esd,l_max_eed,
                                  p_target_business_group_id, nvl(l_elig_dsblty_ctg_prte_id, -999)  ) ;
            fetch c_find_ECT_in_target into l_new_value ;
            if c_find_ECT_in_target%found then
              --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_DSBLTY_CTG_PRTE_F',
                   p_base_key_column => 'ELIG_DSBLTY_CTG_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
              if r_ECT_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                 nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_DSBLTY_CTG_PRTE_ID'  then
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_DSBLTY_CTG_PRTE_ID' ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ECT_unique.information1 ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                 BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ECT_unique.table_route_id;
                 --
                 -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                 --
                 BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
              end if ;
              --
              l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
            end if;
            close c_find_ECT_in_target ;
          --
          end if;
        end if ;
        --
        close c_ECT_min_max_dates ;
        end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

          --
          l_current_pk_id := r_ECT.information1;
          --
          hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
          hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
          --
          if l_current_pk_id =  l_prev_pk_id  then
            --
            l_first_rec := false ;
            --
          else
            --
            l_first_rec := true ;
            --
          end if ;
          --

          l_effective_date := r_ECT.information2;
          if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
            l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
          end if;

          if l_first_rec and not l_update then
            -- Call Create routine.
            hr_utility.set_location(' BEN_ELIG_DSBLTY_CTG_PRTE_F CREATE_ELIG_DSBLTY_CTG_PRTE ',20);
            BEN_ELIG_DSBLTY_CTG_PRTE_API.CREATE_ELIG_DSBLTY_CTG_PRTE(
              --
              P_VALIDATE               => false
              ,P_EFFECTIVE_DATE        => l_effective_date
              ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
              --
				 ,P_CATEGORY      => r_ECT.INFORMATION12
				 ,P_ECT_ATTRIBUTE1      => r_ECT.INFORMATION111
				 ,P_ECT_ATTRIBUTE10      => r_ECT.INFORMATION120
				 ,P_ECT_ATTRIBUTE11      => r_ECT.INFORMATION121
				 ,P_ECT_ATTRIBUTE12      => r_ECT.INFORMATION122
				 ,P_ECT_ATTRIBUTE13      => r_ECT.INFORMATION123
				 ,P_ECT_ATTRIBUTE14      => r_ECT.INFORMATION124
				 ,P_ECT_ATTRIBUTE15      => r_ECT.INFORMATION125
				 ,P_ECT_ATTRIBUTE16      => r_ECT.INFORMATION126
				 ,P_ECT_ATTRIBUTE17      => r_ECT.INFORMATION127
				 ,P_ECT_ATTRIBUTE18      => r_ECT.INFORMATION128
				 ,P_ECT_ATTRIBUTE19      => r_ECT.INFORMATION129
				 ,P_ECT_ATTRIBUTE2      => r_ECT.INFORMATION112
				 ,P_ECT_ATTRIBUTE20      => r_ECT.INFORMATION130
				 ,P_ECT_ATTRIBUTE21      => r_ECT.INFORMATION131
				 ,P_ECT_ATTRIBUTE22      => r_ECT.INFORMATION132
				 ,P_ECT_ATTRIBUTE23      => r_ECT.INFORMATION133
				 ,P_ECT_ATTRIBUTE24      => r_ECT.INFORMATION134
				 ,P_ECT_ATTRIBUTE25      => r_ECT.INFORMATION135
				 ,P_ECT_ATTRIBUTE26      => r_ECT.INFORMATION136
				 ,P_ECT_ATTRIBUTE27      => r_ECT.INFORMATION137
				 ,P_ECT_ATTRIBUTE28      => r_ECT.INFORMATION138
				 ,P_ECT_ATTRIBUTE29      => r_ECT.INFORMATION139
				 ,P_ECT_ATTRIBUTE3      => r_ECT.INFORMATION113
				 ,P_ECT_ATTRIBUTE30      => r_ECT.INFORMATION140
				 ,P_ECT_ATTRIBUTE4      => r_ECT.INFORMATION114
				 ,P_ECT_ATTRIBUTE5      => r_ECT.INFORMATION115
				 ,P_ECT_ATTRIBUTE6      => r_ECT.INFORMATION116
				 ,P_ECT_ATTRIBUTE7      => r_ECT.INFORMATION117
				 ,P_ECT_ATTRIBUTE8      => r_ECT.INFORMATION118
				 ,P_ECT_ATTRIBUTE9      => r_ECT.INFORMATION119
				 ,P_ECT_ATTRIBUTE_CATEGORY      => r_ECT.INFORMATION110
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_DSBLTY_CTG_PRTE_ID      => l_elig_dsblty_ctg_prte_id
				 ,P_EXCLD_FLAG      => r_ECT.INFORMATION11
				 ,P_ORDR_NUM      => r_ECT.INFORMATION260
	   --
	--    ****** END CHANGE LINES

	   --

				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
                                 ,P_CRITERIA_SCORE        => r_ect.INFORMATION295
                                 ,P_CRITERIA_WEIGHT       => r_ect.INFORMATION296
			 );
            -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            -- Update all relevent cer records with new pk_id
            hr_utility.set_location('Before plsql table ',222);
            hr_utility.set_location('new_value id '||l_elig_dsblty_ctg_prte_id,222);
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_DSBLTY_CTG_PRTE_ID' ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ECT.information1 ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_DSBLTY_CTG_PRTE_ID ;
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
            BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ECT_unique.table_route_id;
            hr_utility.set_location('After plsql table ',222);
            --
            -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
            --
            BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
            --
          else
            --
            -- Call Update routine for the pk_id created in prev run .
            -- insert the table_name,old_pk_id,new_pk_id into a plsql record
            hr_utility.set_location(' BEN_ELIG_DSBLTY_CTG_PRTE_F UPDATE_ELIG_DSBLTY_CTG_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ECT.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ECT.information3,
               p_effective_start_date  => r_ECT.information2,
               p_dml_operation         => r_ECT.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_DSBLTY_CTG_PRTE_ID   := r_ECT.information1;
             l_object_version_number := r_ECT.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


            BEN_ELIG_DSBLTY_CTG_PRTE_API.UPDATE_ELIG_DSBLTY_CTG_PRTE(
              --
              P_VALIDATE               => false
              ,P_EFFECTIVE_DATE        => l_effective_date
              ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
              --
             ,P_CATEGORY      => r_ECT.INFORMATION12
             ,P_ECT_ATTRIBUTE1      => r_ECT.INFORMATION111
             ,P_ECT_ATTRIBUTE10      => r_ECT.INFORMATION120
             ,P_ECT_ATTRIBUTE11      => r_ECT.INFORMATION121
             ,P_ECT_ATTRIBUTE12      => r_ECT.INFORMATION122
             ,P_ECT_ATTRIBUTE13      => r_ECT.INFORMATION123
             ,P_ECT_ATTRIBUTE14      => r_ECT.INFORMATION124
             ,P_ECT_ATTRIBUTE15      => r_ECT.INFORMATION125
             ,P_ECT_ATTRIBUTE16      => r_ECT.INFORMATION126
             ,P_ECT_ATTRIBUTE17      => r_ECT.INFORMATION127
             ,P_ECT_ATTRIBUTE18      => r_ECT.INFORMATION128
             ,P_ECT_ATTRIBUTE19      => r_ECT.INFORMATION129
             ,P_ECT_ATTRIBUTE2      => r_ECT.INFORMATION112
             ,P_ECT_ATTRIBUTE20      => r_ECT.INFORMATION130
             ,P_ECT_ATTRIBUTE21      => r_ECT.INFORMATION131
             ,P_ECT_ATTRIBUTE22      => r_ECT.INFORMATION132
             ,P_ECT_ATTRIBUTE23      => r_ECT.INFORMATION133
             ,P_ECT_ATTRIBUTE24      => r_ECT.INFORMATION134
             ,P_ECT_ATTRIBUTE25      => r_ECT.INFORMATION135
             ,P_ECT_ATTRIBUTE26      => r_ECT.INFORMATION136
             ,P_ECT_ATTRIBUTE27      => r_ECT.INFORMATION137
             ,P_ECT_ATTRIBUTE28      => r_ECT.INFORMATION138
             ,P_ECT_ATTRIBUTE29      => r_ECT.INFORMATION139
             ,P_ECT_ATTRIBUTE3      => r_ECT.INFORMATION113
             ,P_ECT_ATTRIBUTE30      => r_ECT.INFORMATION140
             ,P_ECT_ATTRIBUTE4      => r_ECT.INFORMATION114
             ,P_ECT_ATTRIBUTE5      => r_ECT.INFORMATION115
             ,P_ECT_ATTRIBUTE6      => r_ECT.INFORMATION116
             ,P_ECT_ATTRIBUTE7      => r_ECT.INFORMATION117
             ,P_ECT_ATTRIBUTE8      => r_ECT.INFORMATION118
             ,P_ECT_ATTRIBUTE9      => r_ECT.INFORMATION119
             ,P_ECT_ATTRIBUTE_CATEGORY      => r_ECT.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_DSBLTY_CTG_PRTE_ID      => l_elig_dsblty_ctg_prte_id
             ,P_EXCLD_FLAG      => r_ECT.INFORMATION11
             ,P_ORDR_NUM      => r_ECT.INFORMATION260
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE        => r_ect.INFORMATION295
             ,P_CRITERIA_WEIGHT       => r_ect.INFORMATION296
         );
	end if;  -- l_update
            --
          end if;
          --
          -- Delete the row if it is end dated.
          --
          if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
              trunc(l_max_eed) = trunc(r_ECT.information3)) then
              --
              BEN_ELIG_DSBLTY_CTG_PRTE_API.delete_ELIG_DSBLTY_CTG_PRTE(
                 --
                 p_validate                       => false
                 ,p_elig_dsblty_ctg_prte_id                   => l_elig_dsblty_ctg_prte_id
                 ,p_effective_start_date           => l_effective_start_date
                 ,p_effective_end_date             => l_effective_end_date
                 ,p_object_version_number          => l_object_version_number
                 ,p_effective_date                 => l_max_eed
                 ,p_datetrack_mode                 => hr_api.g_delete
                 --
                 );
                 --
          end if;
          --
          l_prev_pk_id := l_current_pk_id ;
          --
        end if;
        --
      end if;
      --
    end loop;
    --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ECT',r_ECT.information5 ) ;
     --
  end create_ECT_rows;

   ---------------------------------------------------------------
   ----------------------< create_EDD_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EDD_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_DEGREE         number;
   l_ORDR_NUM       number;

   cursor c_unique_EDD(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_DSBLTY_DGR_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EDD_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EDD(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EDD_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EDD.elig_dsblty_dgr_prte_id new_value
   from BEN_ELIG_DSBLTY_DGR_PRTE_F EDD
   where
   EDD.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EDD.DEGREE     =l_DEGREE  and
   EDD.ORDR_NUM      = l_ORDR_NUM  and
   EDD.business_group_id  = c_business_group_id
   and   EDD.elig_dsblty_dgr_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_DSBLTY_DGR_PRTE_F EDD1
                where
                EDD1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and

                -- Additional Filters
                EDD1.DEGREE     =l_DEGREE  and
                EDD1.ORDR_NUM      = l_ORDR_NUM  and

                EDD1.business_group_id  = c_business_group_id
                and   EDD1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_DSBLTY_DGR_PRTE_F EDD2
                where
                EDD2.ELIGY_PRFL_ID = l_ELIGY_PRFL_ID  and

                -- Additional Filters
                EDD2.DEGREE    = l_DEGREE   and
                EDD2.ORDR_NUM      = l_ORDR_NUM  and

                EDD2.business_group_id  = c_business_group_id
                and   EDD2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EDD                     c_EDD%rowtype;
   l_elig_dsblty_dgr_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EDD_unique in c_unique_EDD('EDD') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EDD_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EDD_unique.table_route_id '||r_EDD_unique.table_route_id,10);
       hr_utility.set_location(' r_EDD_unique.information1 '||r_EDD_unique.information1,10);
       hr_utility.set_location( 'r_EDD_unique.information2 '||r_EDD_unique.information2,10);
       hr_utility.set_location( 'r_EDD_unique.information3 '||r_EDD_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EDD_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EDD(r_EDD_unique.table_route_id,
                r_EDD_unique.information1,
                r_EDD_unique.information2,
                r_EDD_unique.information3 ) ;
       --
       fetch c_EDD into r_EDD ;
       --
       close c_EDD ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EDD.INFORMATION263,l_dml_operation);

       -- Additional Changes
       l_DEGREE        := r_EDD.INFORMATION287 ;
       l_ORDR_NUM      :=r_EDD.INFORMATION288 ;

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EDD_unique.information2 and r_EDD_unique.information3 then
               l_update := true;
               if r_EDD_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_DSBLTY_DGR_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_DSBLTY_DGR_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EDD_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EDD_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDD_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EDD',l_new_value,l_prefix || r_EDD_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EDD_min_max_dates(r_EDD_unique.table_route_id, r_EDD_unique.information1 ) ;
       fetch c_EDD_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
        l_min_esd := greatest(l_min_esd,r_EDD_unique.information2);
/**********************moved up from here **********************
       open c_EDD(r_EDD_unique.table_route_id,
                r_EDD_unique.information1,
                r_EDD_unique.information2,
                r_EDD_unique.information3 ) ;
       --
       fetch c_EDD into r_EDD ;
       --
       close c_EDD ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EDD.INFORMATION263,l_dml_operation);

       -- Additional Changes
       l_DEGREE        := r_EDD.INFORMATION287 ;
       l_ORDR_NUM      :=r_EDD.INFORMATION288 ;

**********************************************************/


       if p_reuse_object_flag = 'Y' then
         if c_EDD_min_max_dates%found then
           -- cursor to find the object
           open c_find_EDD_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_dsblty_dgr_prte_id, -999)  ) ;
           fetch c_find_EDD_in_target into l_new_value ;
           if c_find_EDD_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_DSBLTY_DGR_PRTE_F',
                   p_base_key_column => 'ELIG_DSBLTY_DGR_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EDD_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_DSBLTY_DGR_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_DSBLTY_DGR_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EDD_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDD_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EDD_in_target ;
         --
         end if;
       end if ;
       --
       close c_EDD_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EDD.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EDD.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_DSBLTY_DGR_PRTE_F CREATE_ELIG_DSBLTY_DGR_PRTE ',20);
           BEN_ELIG_DSBLTY_DGR_PRTE_API.CREATE_ELIG_DSBLTY_DGR_PRTE(
             --
              P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_DEGREE      => r_EDD.INFORMATION287
             ,P_EDD_ATTRIBUTE1      => r_EDD.INFORMATION111
             ,P_EDD_ATTRIBUTE10      => r_EDD.INFORMATION120
             ,P_EDD_ATTRIBUTE11      => r_EDD.INFORMATION121
             ,P_EDD_ATTRIBUTE12      => r_EDD.INFORMATION122
             ,P_EDD_ATTRIBUTE13      => r_EDD.INFORMATION123
             ,P_EDD_ATTRIBUTE14      => r_EDD.INFORMATION124
             ,P_EDD_ATTRIBUTE15      => r_EDD.INFORMATION125
             ,P_EDD_ATTRIBUTE16      => r_EDD.INFORMATION126
             ,P_EDD_ATTRIBUTE17      => r_EDD.INFORMATION127
             ,P_EDD_ATTRIBUTE18      => r_EDD.INFORMATION128
             ,P_EDD_ATTRIBUTE19      => r_EDD.INFORMATION129
             ,P_EDD_ATTRIBUTE2      => r_EDD.INFORMATION112
             ,P_EDD_ATTRIBUTE20      => r_EDD.INFORMATION130
             ,P_EDD_ATTRIBUTE21      => r_EDD.INFORMATION131
             ,P_EDD_ATTRIBUTE22      => r_EDD.INFORMATION132
             ,P_EDD_ATTRIBUTE23      => r_EDD.INFORMATION133
             ,P_EDD_ATTRIBUTE24      => r_EDD.INFORMATION134
             ,P_EDD_ATTRIBUTE25      => r_EDD.INFORMATION135
             ,P_EDD_ATTRIBUTE26      => r_EDD.INFORMATION136
             ,P_EDD_ATTRIBUTE27      => r_EDD.INFORMATION137
             ,P_EDD_ATTRIBUTE28      => r_EDD.INFORMATION138
             ,P_EDD_ATTRIBUTE29      => r_EDD.INFORMATION139
             ,P_EDD_ATTRIBUTE3      => r_EDD.INFORMATION113
             ,P_EDD_ATTRIBUTE30      => r_EDD.INFORMATION140
             ,P_EDD_ATTRIBUTE4      => r_EDD.INFORMATION114
             ,P_EDD_ATTRIBUTE5      => r_EDD.INFORMATION115
             ,P_EDD_ATTRIBUTE6      => r_EDD.INFORMATION116
             ,P_EDD_ATTRIBUTE7      => r_EDD.INFORMATION117
             ,P_EDD_ATTRIBUTE8      => r_EDD.INFORMATION118
             ,P_EDD_ATTRIBUTE9      => r_EDD.INFORMATION119
             ,P_EDD_ATTRIBUTE_CATEGORY      => r_EDD.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_DSBLTY_DGR_PRTE_ID      => l_elig_dsblty_dgr_prte_id
             ,P_EXCLD_FLAG      => r_EDD.INFORMATION11
             ,P_ORDR_NUM      => r_EDD.INFORMATION288
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_edd.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_edd.INFORMATION296
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_dsblty_dgr_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_DSBLTY_DGR_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EDD.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_DSBLTY_DGR_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDD_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_DSBLTY_DGR_PRTE_F UPDATE_ELIG_DSBLTY_DGR_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EDD.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EDD.information3,
               p_effective_start_date  => r_EDD.information2,
               p_dml_operation         => r_EDD.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_DSBLTY_DGR_PRTE_ID   := r_EDD.information1;
             l_object_version_number := r_EDD.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_DSBLTY_DGR_PRTE_API.UPDATE_ELIG_DSBLTY_DGR_PRTE(
             --
              P_VALIDATE               => false
              ,P_EFFECTIVE_DATE        => l_effective_date
              ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
              --
             ,P_DEGREE      => r_EDD.INFORMATION287
             ,P_EDD_ATTRIBUTE1      => r_EDD.INFORMATION111
             ,P_EDD_ATTRIBUTE10      => r_EDD.INFORMATION120
             ,P_EDD_ATTRIBUTE11      => r_EDD.INFORMATION121
             ,P_EDD_ATTRIBUTE12      => r_EDD.INFORMATION122
             ,P_EDD_ATTRIBUTE13      => r_EDD.INFORMATION123
             ,P_EDD_ATTRIBUTE14      => r_EDD.INFORMATION124
             ,P_EDD_ATTRIBUTE15      => r_EDD.INFORMATION125
             ,P_EDD_ATTRIBUTE16      => r_EDD.INFORMATION126
             ,P_EDD_ATTRIBUTE17      => r_EDD.INFORMATION127
             ,P_EDD_ATTRIBUTE18      => r_EDD.INFORMATION128
             ,P_EDD_ATTRIBUTE19      => r_EDD.INFORMATION129
             ,P_EDD_ATTRIBUTE2      => r_EDD.INFORMATION112
             ,P_EDD_ATTRIBUTE20      => r_EDD.INFORMATION130
             ,P_EDD_ATTRIBUTE21      => r_EDD.INFORMATION131
             ,P_EDD_ATTRIBUTE22      => r_EDD.INFORMATION132
             ,P_EDD_ATTRIBUTE23      => r_EDD.INFORMATION133
             ,P_EDD_ATTRIBUTE24      => r_EDD.INFORMATION134
             ,P_EDD_ATTRIBUTE25      => r_EDD.INFORMATION135
             ,P_EDD_ATTRIBUTE26      => r_EDD.INFORMATION136
             ,P_EDD_ATTRIBUTE27      => r_EDD.INFORMATION137
             ,P_EDD_ATTRIBUTE28      => r_EDD.INFORMATION138
             ,P_EDD_ATTRIBUTE29      => r_EDD.INFORMATION139
             ,P_EDD_ATTRIBUTE3      => r_EDD.INFORMATION113
             ,P_EDD_ATTRIBUTE30      => r_EDD.INFORMATION140
             ,P_EDD_ATTRIBUTE4      => r_EDD.INFORMATION114
             ,P_EDD_ATTRIBUTE5      => r_EDD.INFORMATION115
             ,P_EDD_ATTRIBUTE6      => r_EDD.INFORMATION116
             ,P_EDD_ATTRIBUTE7      => r_EDD.INFORMATION117
             ,P_EDD_ATTRIBUTE8      => r_EDD.INFORMATION118
             ,P_EDD_ATTRIBUTE9      => r_EDD.INFORMATION119
             ,P_EDD_ATTRIBUTE_CATEGORY      => r_EDD.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_DSBLTY_DGR_PRTE_ID      => l_elig_dsblty_dgr_prte_id
             ,P_EXCLD_FLAG      => r_EDD.INFORMATION11
             ,P_ORDR_NUM      => r_EDD.INFORMATION288
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_edd.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_edd.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EDD.information3)) then
             --
             BEN_ELIG_DSBLTY_DGR_PRTE_API.delete_ELIG_DSBLTY_DGR_PRTE(
                --
                p_validate                       => false
                ,p_elig_dsblty_dgr_prte_id                   => l_elig_dsblty_dgr_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EDD',r_EDD.information5 ) ;
     --
 end create_EDD_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_EDR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EDR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_REASON         varchar2(30); -- bug# 4251900
   l_ORDR_NUM       number;

   cursor c_unique_EDR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_DSBLTY_RSN_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EDR_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EDR(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EDR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EDR.elig_dsblty_rsn_prte_id new_value
   from BEN_ELIG_DSBLTY_RSN_PRTE_F EDR
   where
   EDR.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EDR.REASON         = l_REASON  and
   EDR.ORDR_NUM       = l_ORDR_NUM       and
   EDR.business_group_id  = c_business_group_id
   and   EDR.elig_dsblty_rsn_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_DSBLTY_RSN_PRTE_F EDR1
                where
                EDR1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and

                -- Additional Filters
                EDR1.REASON         = l_REASON  and
                EDR1.ORDR_NUM       = l_ORDR_NUM       and

                EDR1.business_group_id  = c_business_group_id
                and   EDR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_DSBLTY_RSN_PRTE_F EDR2
                where
                EDR2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and

                -- Additional Filters
                EDR2.REASON            = l_REASON  and
                EDR2.ORDR_NUM          = l_ORDR_NUM       and

                EDR2.business_group_id  = c_business_group_id
                and   EDR2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EDR                     c_EDR%rowtype;
   l_elig_dsblty_rsn_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin



   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EDR_unique in c_unique_EDR('EDR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EDR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EDR_unique.table_route_id '||r_EDR_unique.table_route_id,10);
       hr_utility.set_location(' r_EDR_unique.information1 '||r_EDR_unique.information1,10);
       hr_utility.set_location( 'r_EDR_unique.information2 '||r_EDR_unique.information2,10);
       hr_utility.set_location( 'r_EDR_unique.information3 '||r_EDR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EDR_unique.dml_operation ;


       --
/**********************moved from below **********************/
       open c_EDR(r_EDR_unique.table_route_id,
                r_EDR_unique.information1,
                r_EDR_unique.information2,
                r_EDR_unique.information3 ) ;
       --
       fetch c_EDR into r_EDR ;
       --
       close c_EDR ;

       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EDR.INFORMATION263,l_dml_operation);




       -- Additional Filters
       l_REASON        := r_EDR.INFORMATION11 ;

       l_ORDR_NUM      := r_EDR.INFORMATION257 ;

/**********************************************************/


       if l_dml_operation = 'UPDATE' then


         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EDR_unique.information2 and r_EDR_unique.information3 then
               l_update := true;
               if r_EDR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_DSBLTY_RSN_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_DSBLTY_RSN_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EDR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EDR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EDR',l_new_value,l_prefix || r_EDR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --

           l_update := false;
           --
         end if;
       else
         --
         --UPD END

       l_min_esd := null ;
       l_max_eed := null ;

       open c_EDR_min_max_dates(r_EDR_unique.table_route_id, r_EDR_unique.information1 ) ;
       fetch c_EDR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then

         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EDR_unique.information2);
/**********************moved up from here **********************
       open c_EDR(r_EDR_unique.table_route_id,
                r_EDR_unique.information1,
                r_EDR_unique.information2,
                r_EDR_unique.information3 ) ;
       --
       fetch c_EDR into r_EDR ;
       --
       close c_EDR ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EDR.INFORMATION263,l_dml_operation);

       -- Additional Filters
       l_REASON        := r_EDR.INFORMATION11 ;
       l_ORDR_NUM      := r_EDR.INFORMATION257 ;
**********************************************************/


       if p_reuse_object_flag = 'Y' then
         if c_EDR_min_max_dates%found then


           -- cursor to find the object
           open c_find_EDR_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_dsblty_rsn_prte_id, -999)  ) ;
           fetch c_find_EDR_in_target into l_new_value ;
           if c_find_EDR_in_target%found then

             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_DSBLTY_RSN_PRTE_F',
                   p_base_key_column => 'ELIG_DSBLTY_RSN_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EDR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_DSBLTY_RSN_PRTE_ID'  then


                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_DSBLTY_RSN_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EDR_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDR_unique.table_route_id;

                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;

              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EDR_in_target ;
         --
         end if;
       end if ;
       --
       close c_EDR_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EDR.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EDR.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_DSBLTY_RSN_PRTE_F CREATE_ELIG_DSBLTY_RSN_PRTE ',20);
           BEN_ELIG_DSBLTY_RSN_PRTE_API.CREATE_ELIG_DSBLTY_RSN_PRTE(
             --
              P_VALIDATE               => false
              ,P_EFFECTIVE_DATE        => l_effective_date
              ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             ,P_EDR_ATTRIBUTE1      => r_EDR.INFORMATION111
             ,P_EDR_ATTRIBUTE10      => r_EDR.INFORMATION120
             ,P_EDR_ATTRIBUTE11      => r_EDR.INFORMATION121
             ,P_EDR_ATTRIBUTE12      => r_EDR.INFORMATION122
             ,P_EDR_ATTRIBUTE13      => r_EDR.INFORMATION123
             ,P_EDR_ATTRIBUTE14      => r_EDR.INFORMATION124
             ,P_EDR_ATTRIBUTE15      => r_EDR.INFORMATION125
             ,P_EDR_ATTRIBUTE16      => r_EDR.INFORMATION126
             ,P_EDR_ATTRIBUTE17      => r_EDR.INFORMATION127
             ,P_EDR_ATTRIBUTE18      => r_EDR.INFORMATION128
             ,P_EDR_ATTRIBUTE19      => r_EDR.INFORMATION129
             ,P_EDR_ATTRIBUTE2      => r_EDR.INFORMATION112
             ,P_EDR_ATTRIBUTE20      => r_EDR.INFORMATION130
             ,P_EDR_ATTRIBUTE21      => r_EDR.INFORMATION131
             ,P_EDR_ATTRIBUTE22      => r_EDR.INFORMATION132
             ,P_EDR_ATTRIBUTE23      => r_EDR.INFORMATION133
             ,P_EDR_ATTRIBUTE24      => r_EDR.INFORMATION134
             ,P_EDR_ATTRIBUTE25      => r_EDR.INFORMATION135
             ,P_EDR_ATTRIBUTE26      => r_EDR.INFORMATION136
             ,P_EDR_ATTRIBUTE27      => r_EDR.INFORMATION137
             ,P_EDR_ATTRIBUTE28      => r_EDR.INFORMATION138
             ,P_EDR_ATTRIBUTE29      => r_EDR.INFORMATION139
             ,P_EDR_ATTRIBUTE3      => r_EDR.INFORMATION113
             ,P_EDR_ATTRIBUTE30      => r_EDR.INFORMATION140
             ,P_EDR_ATTRIBUTE4      => r_EDR.INFORMATION114
             ,P_EDR_ATTRIBUTE5      => r_EDR.INFORMATION115
             ,P_EDR_ATTRIBUTE6      => r_EDR.INFORMATION116
             ,P_EDR_ATTRIBUTE7      => r_EDR.INFORMATION117
             ,P_EDR_ATTRIBUTE8      => r_EDR.INFORMATION118
             ,P_EDR_ATTRIBUTE9      => r_EDR.INFORMATION119
             ,P_EDR_ATTRIBUTE_CATEGORY      => r_EDR.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_DSBLTY_RSN_PRTE_ID      => l_elig_dsblty_rsn_prte_id
             ,P_EXCLD_FLAG      => r_EDR.INFORMATION12
             ,P_ORDR_NUM      => r_EDR.INFORMATION257
             ,P_REASON      => r_EDR.INFORMATION11
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_edr.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_edr.INFORMATION296
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_dsblty_rsn_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_DSBLTY_RSN_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EDR.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_DSBLTY_RSN_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDR_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_DSBLTY_RSN_PRTE_F UPDATE_ELIG_DSBLTY_RSN_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EDR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EDR.information3,
               p_effective_start_date  => r_EDR.information2,
               p_dml_operation         => r_EDR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_DSBLTY_RSN_PRTE_ID   := r_EDR.information1;
             l_object_version_number := r_EDR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_DSBLTY_RSN_PRTE_API.UPDATE_ELIG_DSBLTY_RSN_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             ,P_EDR_ATTRIBUTE1      => r_EDR.INFORMATION111
             ,P_EDR_ATTRIBUTE10      => r_EDR.INFORMATION120
             ,P_EDR_ATTRIBUTE11      => r_EDR.INFORMATION121
             ,P_EDR_ATTRIBUTE12      => r_EDR.INFORMATION122
             ,P_EDR_ATTRIBUTE13      => r_EDR.INFORMATION123
             ,P_EDR_ATTRIBUTE14      => r_EDR.INFORMATION124
             ,P_EDR_ATTRIBUTE15      => r_EDR.INFORMATION125
             ,P_EDR_ATTRIBUTE16      => r_EDR.INFORMATION126
             ,P_EDR_ATTRIBUTE17      => r_EDR.INFORMATION127
             ,P_EDR_ATTRIBUTE18      => r_EDR.INFORMATION128
             ,P_EDR_ATTRIBUTE19      => r_EDR.INFORMATION129
             ,P_EDR_ATTRIBUTE2      => r_EDR.INFORMATION112
             ,P_EDR_ATTRIBUTE20      => r_EDR.INFORMATION130
             ,P_EDR_ATTRIBUTE21      => r_EDR.INFORMATION131
             ,P_EDR_ATTRIBUTE22      => r_EDR.INFORMATION132
             ,P_EDR_ATTRIBUTE23      => r_EDR.INFORMATION133
             ,P_EDR_ATTRIBUTE24      => r_EDR.INFORMATION134
             ,P_EDR_ATTRIBUTE25      => r_EDR.INFORMATION135
             ,P_EDR_ATTRIBUTE26      => r_EDR.INFORMATION136
             ,P_EDR_ATTRIBUTE27      => r_EDR.INFORMATION137
             ,P_EDR_ATTRIBUTE28      => r_EDR.INFORMATION138
             ,P_EDR_ATTRIBUTE29      => r_EDR.INFORMATION139
             ,P_EDR_ATTRIBUTE3      => r_EDR.INFORMATION113
             ,P_EDR_ATTRIBUTE30      => r_EDR.INFORMATION140
             ,P_EDR_ATTRIBUTE4      => r_EDR.INFORMATION114
             ,P_EDR_ATTRIBUTE5      => r_EDR.INFORMATION115
             ,P_EDR_ATTRIBUTE6      => r_EDR.INFORMATION116
             ,P_EDR_ATTRIBUTE7      => r_EDR.INFORMATION117
             ,P_EDR_ATTRIBUTE8      => r_EDR.INFORMATION118
             ,P_EDR_ATTRIBUTE9      => r_EDR.INFORMATION119
             ,P_EDR_ATTRIBUTE_CATEGORY      => r_EDR.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_DSBLTY_RSN_PRTE_ID      => l_elig_dsblty_rsn_prte_id
             ,P_EXCLD_FLAG      => r_EDR.INFORMATION12
             ,P_ORDR_NUM      => r_EDR.INFORMATION257
             ,P_REASON      => r_EDR.INFORMATION11
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_edr.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_edr.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EDR.information3)) then
             --
             BEN_ELIG_DSBLTY_RSN_PRTE_API.delete_ELIG_DSBLTY_RSN_PRTE(
                --
                p_validate                       => false
                ,p_elig_dsblty_rsn_prte_id                   => l_elig_dsblty_rsn_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --

     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EDR',r_EDR.information5 ) ;
     --
 end create_EDR_rows;

   ---------------------------------------------------------------
   ----------------------< create_EES_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EES_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ASSIGNMENT_STATUS_TYPE_ID  number;
   l_ELIGY_PRFL_ID  number;
   cursor c_unique_EES(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_EE_STAT_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EES_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EES(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EES_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EES.elig_ee_stat_prte_id new_value
   from BEN_ELIG_EE_STAT_PRTE_F EES
   where
   EES.ASSIGNMENT_STATUS_TYPE_ID     = l_ASSIGNMENT_STATUS_TYPE_ID  and
   EES.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EES.business_group_id  = c_business_group_id
   and   EES.elig_ee_stat_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_EE_STAT_PRTE_F EES1
                where
                EES1.ASSIGNMENT_STATUS_TYPE_ID   = l_ASSIGNMENT_STATUS_TYPE_ID  and
                EES1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EES1.business_group_id  = c_business_group_id
                and   EES1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_EE_STAT_PRTE_F EES2
                where
                EES2.ASSIGNMENT_STATUS_TYPE_ID    = l_ASSIGNMENT_STATUS_TYPE_ID  and
                EES2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EES2.business_group_id  = c_business_group_id
                and   EES2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EES                     c_EES%rowtype;
   l_elig_ee_stat_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EES_unique in c_unique_EES('EES') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EES_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EES_unique.table_route_id '||r_EES_unique.table_route_id,10);
       hr_utility.set_location(' r_EES_unique.information1 '||r_EES_unique.information1,10);
       hr_utility.set_location( 'r_EES_unique.information2 '||r_EES_unique.information2,10);
       hr_utility.set_location( 'r_EES_unique.information3 '||r_EES_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EES_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EES(r_EES_unique.table_route_id,
                r_EES_unique.information1,
                r_EES_unique.information2,
                r_EES_unique.information3 ) ;
       --
       fetch c_EES into r_EES ;
       --
       close c_EES ;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_ASSIGNMENT_STATUS_TYPE_ID := r_EES.information176;
       else
         l_ASSIGNMENT_STATUS_TYPE_ID := r_EES.information174;
       end if;
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EES.INFORMATION263,l_dml_operation);
/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EES_unique.information2 and r_EES_unique.information3 then
               l_update := true;
               if r_EES_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_EE_STAT_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_EE_STAT_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EES_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EES_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EES_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EES',l_new_value,l_prefix || r_EES_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EES_min_max_dates(r_EES_unique.table_route_id, r_EES_unique.information1 ) ;
       fetch c_EES_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
        l_min_esd := greatest(l_min_esd,r_EES_unique.information2);
/**********************moved up from here **********************
       open c_EES(r_EES_unique.table_route_id,
                r_EES_unique.information1,
                r_EES_unique.information2,
                r_EES_unique.information3 ) ;
       --
       fetch c_EES into r_EES ;
       --
       close c_EES ;
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_ASSIGNMENT_STATUS_TYPE_ID := r_EES.information176;
       else
         l_ASSIGNMENT_STATUS_TYPE_ID := r_EES.information174;
       end if;
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EES.INFORMATION263,l_dml_operation);
**********************************************************/

       --
       if l_ASSIGNMENT_STATUS_TYPE_ID is null then
         close c_EES_min_max_dates;
         --
         BEN_PD_COPY_TO_BEN_three.log_nomapping_data(p_parent_table_alias =>'ELP'
                     ,p_parent_pk_id         => r_EES.information263
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'EES'
                     ,p_child_data           => r_EES.information173 );

         --
       else
         if p_reuse_object_flag = 'Y' then
            if c_EES_min_max_dates%found then
              -- cursor to find the object
              open c_find_EES_in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_elig_ee_stat_prte_id, -999)  ) ;
              fetch c_find_EES_in_target into l_new_value ;
              if c_find_EES_in_target%found then
                --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_EE_STAT_PRTE_F',
                   p_base_key_column => 'ELIG_EE_STAT_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
                if r_EES_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_EE_STAT_PRTE_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_EE_STAT_PRTE_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EES_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EES_unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
              end if;
              close c_find_EES_in_target ;
            --
            end if;
         end if ;
         --
         close c_EES_min_max_dates ;

	 end if ; -- bug 4565106

       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

           --
           l_current_pk_id := r_EES.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_EES.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_ELIG_EE_STAT_PRTE_F CREATE_ELIG_EE_STAT_PRTE ',20);
             BEN_ELIG_EE_STAT_PRTE_API.CREATE_ELIG_EE_STAT_PRTE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
				 ,P_ASSIGNMENT_STATUS_TYPE_ID      => l_ASSIGNMENT_STATUS_TYPE_ID
				 ,P_EES_ATTRIBUTE1      => r_EES.INFORMATION111
				 ,P_EES_ATTRIBUTE10      => r_EES.INFORMATION120
				 ,P_EES_ATTRIBUTE11      => r_EES.INFORMATION121
				 ,P_EES_ATTRIBUTE12      => r_EES.INFORMATION122
				 ,P_EES_ATTRIBUTE13      => r_EES.INFORMATION123
				 ,P_EES_ATTRIBUTE14      => r_EES.INFORMATION124
				 ,P_EES_ATTRIBUTE15      => r_EES.INFORMATION125
				 ,P_EES_ATTRIBUTE16      => r_EES.INFORMATION126
				 ,P_EES_ATTRIBUTE17      => r_EES.INFORMATION127
				 ,P_EES_ATTRIBUTE18      => r_EES.INFORMATION128
				 ,P_EES_ATTRIBUTE19      => r_EES.INFORMATION129
				 ,P_EES_ATTRIBUTE2      => r_EES.INFORMATION112
				 ,P_EES_ATTRIBUTE20      => r_EES.INFORMATION130
				 ,P_EES_ATTRIBUTE21      => r_EES.INFORMATION131
				 ,P_EES_ATTRIBUTE22      => r_EES.INFORMATION132
				 ,P_EES_ATTRIBUTE23      => r_EES.INFORMATION133
				 ,P_EES_ATTRIBUTE24      => r_EES.INFORMATION134
				 ,P_EES_ATTRIBUTE25      => r_EES.INFORMATION135
				 ,P_EES_ATTRIBUTE26      => r_EES.INFORMATION136
				 ,P_EES_ATTRIBUTE27      => r_EES.INFORMATION137
				 ,P_EES_ATTRIBUTE28      => r_EES.INFORMATION138
				 ,P_EES_ATTRIBUTE29      => r_EES.INFORMATION139
				 ,P_EES_ATTRIBUTE3      => r_EES.INFORMATION113
				 ,P_EES_ATTRIBUTE30      => r_EES.INFORMATION140
				 ,P_EES_ATTRIBUTE4      => r_EES.INFORMATION114
				 ,P_EES_ATTRIBUTE5      => r_EES.INFORMATION115
				 ,P_EES_ATTRIBUTE6      => r_EES.INFORMATION116
				 ,P_EES_ATTRIBUTE7      => r_EES.INFORMATION117
				 ,P_EES_ATTRIBUTE8      => r_EES.INFORMATION118
				 ,P_EES_ATTRIBUTE9      => r_EES.INFORMATION119
				 ,P_EES_ATTRIBUTE_CATEGORY      => r_EES.INFORMATION110
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_EE_STAT_PRTE_ID      => l_elig_ee_stat_prte_id
				 ,P_EXCLD_FLAG      => r_EES.INFORMATION11
				 ,P_ORDR_NUM      => r_EES.INFORMATION260
	   --
	--    ****** END CHANGE LINES

	   --

				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
                                 ,P_CRITERIA_SCORE       => r_ees.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_ees.INFORMATION296
			 );
              -- insert the table_name,old_pk_id,new_pk_id into a plsql record
              -- Update all relevent cer records with new pk_id
              hr_utility.set_location('Before plsql table ',222);
              hr_utility.set_location('new_value id '||l_elig_ee_stat_prte_id,222);
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_EE_STAT_PRTE_ID' ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EES.information1 ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_EE_STAT_PRTE_ID ;
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
              BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EES_unique.table_route_id;
              hr_utility.set_location('After plsql table ',222);
              --
              -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
              --
              BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
              --
            else
              --
              -- Call Update routine for the pk_id created in prev run .
              -- insert the table_name,old_pk_id,new_pk_id into a plsql record
              hr_utility.set_location(' BEN_ELIG_EE_STAT_PRTE_F UPDATE_ELIG_EE_STAT_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EES.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EES.information3,
               p_effective_start_date  => r_EES.information2,
               p_dml_operation         => r_EES.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_EE_STAT_PRTE_ID   := r_EES.information1;
             l_object_version_number := r_EES.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


              BEN_ELIG_EE_STAT_PRTE_API.UPDATE_ELIG_EE_STAT_PRTE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
				 ,P_ASSIGNMENT_STATUS_TYPE_ID      => l_ASSIGNMENT_STATUS_TYPE_ID
				 ,P_EES_ATTRIBUTE1      => r_EES.INFORMATION111
				 ,P_EES_ATTRIBUTE10      => r_EES.INFORMATION120
				 ,P_EES_ATTRIBUTE11      => r_EES.INFORMATION121
				 ,P_EES_ATTRIBUTE12      => r_EES.INFORMATION122
				 ,P_EES_ATTRIBUTE13      => r_EES.INFORMATION123
				 ,P_EES_ATTRIBUTE14      => r_EES.INFORMATION124
				 ,P_EES_ATTRIBUTE15      => r_EES.INFORMATION125
				 ,P_EES_ATTRIBUTE16      => r_EES.INFORMATION126
				 ,P_EES_ATTRIBUTE17      => r_EES.INFORMATION127
				 ,P_EES_ATTRIBUTE18      => r_EES.INFORMATION128
				 ,P_EES_ATTRIBUTE19      => r_EES.INFORMATION129
				 ,P_EES_ATTRIBUTE2      => r_EES.INFORMATION112
				 ,P_EES_ATTRIBUTE20      => r_EES.INFORMATION130
				 ,P_EES_ATTRIBUTE21      => r_EES.INFORMATION131
				 ,P_EES_ATTRIBUTE22      => r_EES.INFORMATION132
				 ,P_EES_ATTRIBUTE23      => r_EES.INFORMATION133
				 ,P_EES_ATTRIBUTE24      => r_EES.INFORMATION134
				 ,P_EES_ATTRIBUTE25      => r_EES.INFORMATION135
				 ,P_EES_ATTRIBUTE26      => r_EES.INFORMATION136
				 ,P_EES_ATTRIBUTE27      => r_EES.INFORMATION137
				 ,P_EES_ATTRIBUTE28      => r_EES.INFORMATION138
				 ,P_EES_ATTRIBUTE29      => r_EES.INFORMATION139
				 ,P_EES_ATTRIBUTE3      => r_EES.INFORMATION113
				 ,P_EES_ATTRIBUTE30      => r_EES.INFORMATION140
				 ,P_EES_ATTRIBUTE4      => r_EES.INFORMATION114
				 ,P_EES_ATTRIBUTE5      => r_EES.INFORMATION115
				 ,P_EES_ATTRIBUTE6      => r_EES.INFORMATION116
				 ,P_EES_ATTRIBUTE7      => r_EES.INFORMATION117
				 ,P_EES_ATTRIBUTE8      => r_EES.INFORMATION118
				 ,P_EES_ATTRIBUTE9      => r_EES.INFORMATION119
				 ,P_EES_ATTRIBUTE_CATEGORY      => r_EES.INFORMATION110
				 ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
				 ,P_ELIG_EE_STAT_PRTE_ID      => l_elig_ee_stat_prte_id
				 ,P_EXCLD_FLAG      => r_EES.INFORMATION11
				 ,P_ORDR_NUM      => r_EES.INFORMATION260
	   --
	--   ****** END CHANGE LINES

	   --
				 ,P_EFFECTIVE_START_DATE  => l_effective_start_date
				 ,P_EFFECTIVE_END_DATE    => l_effective_end_date
				 ,P_OBJECT_VERSION_NUMBER => l_object_version_number
				 ,P_DATETRACK_MODE        => l_datetrack_mode
                                 ,P_CRITERIA_SCORE       => r_ees.INFORMATION295
                                 ,P_CRITERIA_WEIGHT      => r_ees.INFORMATION296
			 );
	end if;  -- l_update
              --
            end if;
            --
            -- Delete the row if it is end dated.
            --
            if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = trunc(r_EES.information3)) then
                --
                BEN_ELIG_EE_STAT_PRTE_API.delete_ELIG_EE_STAT_PRTE(
                   --
                   p_validate                       => false
                   ,p_elig_ee_stat_prte_id                   => l_elig_ee_stat_prte_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
            end if;
            --
            l_prev_pk_id := l_current_pk_id ;
            --
          --end if; -- bug 4565106
          --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EES',r_EES.information5 ) ;
     --
 end create_EES_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_EEI_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EEI_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_OIPL_ID  number;
   cursor c_unique_EEI(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_ENRLD_ANTHR_OIPL_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EEI_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EEI(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EEI_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EEI.elig_enrld_anthr_oipl_id new_value
   from BEN_ELIG_ENRLD_ANTHR_OIPL_F EEI
   where
   EEI.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EEI.OIPL_ID     = l_OIPL_ID  and
   EEI.business_group_id  = c_business_group_id
   and   EEI.elig_enrld_anthr_oipl_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_ENRLD_ANTHR_OIPL_F EEI1
                where
                EEI1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EEI1.OIPL_ID           = l_OIPL_ID  and
                EEI1.business_group_id  = c_business_group_id
                and   EEI1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_ENRLD_ANTHR_OIPL_F EEI2
                where
                EEI2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EEI2.OIPL_ID      = l_OIPL_ID  and
                EEI2.business_group_id  = c_business_group_id
                and   EEI2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EEI                     c_EEI%rowtype;
   l_elig_enrld_anthr_oipl_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EEI_unique in c_unique_EEI('EEI') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
          (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
           r_EEI_unique.information3 >=
                   ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_EEI_unique.table_route_id '||r_EEI_unique.table_route_id,10);
       hr_utility.set_location(' r_EEI_unique.information1 '||r_EEI_unique.information1,10);
       hr_utility.set_location( 'r_EEI_unique.information2 '||r_EEI_unique.information2,10);
       hr_utility.set_location( 'r_EEI_unique.information3 '||r_EEI_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EEI_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EEI(r_EEI_unique.table_route_id,
                r_EEI_unique.information1,
                r_EEI_unique.information2,
                r_EEI_unique.information3 ) ;
       --
       fetch c_EEI into r_EEI ;
       --
       close c_EEI ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EEI.INFORMATION263,l_dml_operation);

       -- Only For Use by Create Wizard - Same Business Group
       l_OIPL_ID := NVL(get_fk('OIPL_ID', r_EEI.INFORMATION258,l_dml_operation),
                        r_EEI.INFORMATION258);
/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EEI_unique.information2 and r_EEI_unique.information3 then
               l_update := true;
               if r_EEI_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_ENRLD_ANTHR_OIPL_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_ENRLD_ANTHR_OIPL_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EEI_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EEI_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EEI_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EEI',l_new_value,l_prefix || r_EEI_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EEI_min_max_dates(r_EEI_unique.table_route_id, r_EEI_unique.information1 ) ;
       fetch c_EEI_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EEI_unique.information2);
/**********************moved up from here **********************
       open c_EEI(r_EEI_unique.table_route_id,
                r_EEI_unique.information1,
                r_EEI_unique.information2,
                r_EEI_unique.information3 ) ;
       --
       fetch c_EEI into r_EEI ;
       --
       close c_EEI ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EEI.INFORMATION263,l_dml_operation);

       -- Only For Use by Create Wizard - Same Business Group
       l_OIPL_ID := NVL(get_fk('OIPL_ID', r_EEI.INFORMATION258,l_dml_operation),
                        r_EEI.INFORMATION258);
**********************************************************/


       if p_reuse_object_flag = 'Y' then
         if c_EEI_min_max_dates%found then
           -- cursor to find the object
           open c_find_EEI_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_enrld_anthr_oipl_id, -999)  ) ;
           fetch c_find_EEI_in_target into l_new_value ;
           if c_find_EEI_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_ENRLD_ANTHR_OIPL_F',
                   p_base_key_column => 'ELIG_ENRLD_ANTHR_OIPL_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EEI_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_ENRLD_ANTHR_OIPL_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_ENRLD_ANTHR_OIPL_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EEI_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EEI_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EEI_in_target ;
         --
         end if;
       end if ;
       --
       close c_EEI_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EEI.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EEI.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_ENRLD_ANTHR_OIPL_F CREATE_ELIG_ENRLD_ANTHR_OIPL ',20);
           BEN_ELIG_ENRLD_ANTHR_OIPL_API.CREATE_ELIG_ENRLD_ANTHR_OIPL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EEI_ATTRIBUTE1      => r_EEI.INFORMATION111
             ,P_EEI_ATTRIBUTE10      => r_EEI.INFORMATION120
             ,P_EEI_ATTRIBUTE11      => r_EEI.INFORMATION121
             ,P_EEI_ATTRIBUTE12      => r_EEI.INFORMATION122
             ,P_EEI_ATTRIBUTE13      => r_EEI.INFORMATION123
             ,P_EEI_ATTRIBUTE14      => r_EEI.INFORMATION124
             ,P_EEI_ATTRIBUTE15      => r_EEI.INFORMATION125
             ,P_EEI_ATTRIBUTE16      => r_EEI.INFORMATION126
             ,P_EEI_ATTRIBUTE17      => r_EEI.INFORMATION127
             ,P_EEI_ATTRIBUTE18      => r_EEI.INFORMATION128
             ,P_EEI_ATTRIBUTE19      => r_EEI.INFORMATION129
             ,P_EEI_ATTRIBUTE2      => r_EEI.INFORMATION112
             ,P_EEI_ATTRIBUTE20      => r_EEI.INFORMATION130
             ,P_EEI_ATTRIBUTE21      => r_EEI.INFORMATION131
             ,P_EEI_ATTRIBUTE22      => r_EEI.INFORMATION132
             ,P_EEI_ATTRIBUTE23      => r_EEI.INFORMATION133
             ,P_EEI_ATTRIBUTE24      => r_EEI.INFORMATION134
             ,P_EEI_ATTRIBUTE25      => r_EEI.INFORMATION135
             ,P_EEI_ATTRIBUTE26      => r_EEI.INFORMATION136
             ,P_EEI_ATTRIBUTE27      => r_EEI.INFORMATION137
             ,P_EEI_ATTRIBUTE28      => r_EEI.INFORMATION138
             ,P_EEI_ATTRIBUTE29      => r_EEI.INFORMATION139
             ,P_EEI_ATTRIBUTE3      => r_EEI.INFORMATION113
             ,P_EEI_ATTRIBUTE30      => r_EEI.INFORMATION140
             ,P_EEI_ATTRIBUTE4      => r_EEI.INFORMATION114
             ,P_EEI_ATTRIBUTE5      => r_EEI.INFORMATION115
             ,P_EEI_ATTRIBUTE6      => r_EEI.INFORMATION116
             ,P_EEI_ATTRIBUTE7      => r_EEI.INFORMATION117
             ,P_EEI_ATTRIBUTE8      => r_EEI.INFORMATION118
             ,P_EEI_ATTRIBUTE9      => r_EEI.INFORMATION119
             ,P_EEI_ATTRIBUTE_CATEGORY      => r_EEI.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_ENRLD_ANTHR_OIPL_ID      => l_elig_enrld_anthr_oipl_id
             ,P_ENRL_DET_DT_CD      => r_EEI.INFORMATION12
             ,P_EXCLD_FLAG      => r_EEI.INFORMATION11
             ,P_OIPL_ID      => l_OIPL_ID
             ,P_ORDR_NUM      => r_EEI.INFORMATION261
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_enrld_anthr_oipl_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_ENRLD_ANTHR_OIPL_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EEI.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_ENRLD_ANTHR_OIPL_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EEI_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_ENRLD_ANTHR_OIPL_F UPDATE_ELIG_ENRLD_ANTHR_OIPL ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EEI.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EEI.information3,
               p_effective_start_date  => r_EEI.information2,
               p_dml_operation         => r_EEI.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_ENRLD_ANTHR_OIPL_ID   := r_EEI.information1;
             l_object_version_number := r_EEI.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_ENRLD_ANTHR_OIPL_API.UPDATE_ELIG_ENRLD_ANTHR_OIPL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EEI_ATTRIBUTE1      => r_EEI.INFORMATION111
             ,P_EEI_ATTRIBUTE10      => r_EEI.INFORMATION120
             ,P_EEI_ATTRIBUTE11      => r_EEI.INFORMATION121
             ,P_EEI_ATTRIBUTE12      => r_EEI.INFORMATION122
             ,P_EEI_ATTRIBUTE13      => r_EEI.INFORMATION123
             ,P_EEI_ATTRIBUTE14      => r_EEI.INFORMATION124
             ,P_EEI_ATTRIBUTE15      => r_EEI.INFORMATION125
             ,P_EEI_ATTRIBUTE16      => r_EEI.INFORMATION126
             ,P_EEI_ATTRIBUTE17      => r_EEI.INFORMATION127
             ,P_EEI_ATTRIBUTE18      => r_EEI.INFORMATION128
             ,P_EEI_ATTRIBUTE19      => r_EEI.INFORMATION129
             ,P_EEI_ATTRIBUTE2      => r_EEI.INFORMATION112
             ,P_EEI_ATTRIBUTE20      => r_EEI.INFORMATION130
             ,P_EEI_ATTRIBUTE21      => r_EEI.INFORMATION131
             ,P_EEI_ATTRIBUTE22      => r_EEI.INFORMATION132
             ,P_EEI_ATTRIBUTE23      => r_EEI.INFORMATION133
             ,P_EEI_ATTRIBUTE24      => r_EEI.INFORMATION134
             ,P_EEI_ATTRIBUTE25      => r_EEI.INFORMATION135
             ,P_EEI_ATTRIBUTE26      => r_EEI.INFORMATION136
             ,P_EEI_ATTRIBUTE27      => r_EEI.INFORMATION137
             ,P_EEI_ATTRIBUTE28      => r_EEI.INFORMATION138
             ,P_EEI_ATTRIBUTE29      => r_EEI.INFORMATION139
             ,P_EEI_ATTRIBUTE3      => r_EEI.INFORMATION113
             ,P_EEI_ATTRIBUTE30      => r_EEI.INFORMATION140
             ,P_EEI_ATTRIBUTE4      => r_EEI.INFORMATION114
             ,P_EEI_ATTRIBUTE5      => r_EEI.INFORMATION115
             ,P_EEI_ATTRIBUTE6      => r_EEI.INFORMATION116
             ,P_EEI_ATTRIBUTE7      => r_EEI.INFORMATION117
             ,P_EEI_ATTRIBUTE8      => r_EEI.INFORMATION118
             ,P_EEI_ATTRIBUTE9      => r_EEI.INFORMATION119
             ,P_EEI_ATTRIBUTE_CATEGORY      => r_EEI.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_ENRLD_ANTHR_OIPL_ID      => l_elig_enrld_anthr_oipl_id
             ,P_ENRL_DET_DT_CD      => r_EEI.INFORMATION12
             ,P_EXCLD_FLAG      => r_EEI.INFORMATION11
             ,P_OIPL_ID      => l_OIPL_ID
             ,P_ORDR_NUM      => r_EEI.INFORMATION261
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EEI.information3)) then
             --
             BEN_ELIG_ENRLD_ANTHR_OIPL_API.delete_ELIG_ENRLD_ANTHR_OIPL(
                --
                p_validate                       => false
                ,p_elig_enrld_anthr_oipl_id                   => l_elig_enrld_anthr_oipl_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EEI',r_EEI.information5 ) ;
     --
 end create_EEI_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_EEG_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EEG_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_PGM_ID  number;
   cursor c_unique_EEG(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_ENRLD_ANTHR_PGM_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EEG_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EEG(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EEG_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EEG.elig_enrld_anthr_pgm_id new_value
   from BEN_ELIG_ENRLD_ANTHR_PGM_F EEG
   where
   EEG.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EEG.PGM_ID     = l_PGM_ID  and
   EEG.business_group_id  = c_business_group_id
   and   EEG.elig_enrld_anthr_pgm_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_ENRLD_ANTHR_PGM_F EEG1
                where
                EEG1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EEG1.PGM_ID            = l_PGM_ID  and
                EEG1.business_group_id  = c_business_group_id
                and   EEG1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_ENRLD_ANTHR_PGM_F EEG2
                where
                EEG2.ELIGY_PRFL_ID    = l_ELIGY_PRFL_ID  and
                EEG2.PGM_ID           = l_PGM_ID  and
                EEG2.business_group_id  = c_business_group_id
                and   EEG2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EEG                     c_EEG%rowtype;
   l_elig_enrld_anthr_pgm_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EEG_unique in c_unique_EEG('EEG') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EEG_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EEG_unique.table_route_id '||r_EEG_unique.table_route_id,10);
       hr_utility.set_location(' r_EEG_unique.information1 '||r_EEG_unique.information1,10);
       hr_utility.set_location( 'r_EEG_unique.information2 '||r_EEG_unique.information2,10);
       hr_utility.set_location( 'r_EEG_unique.information3 '||r_EEG_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EEG_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EEG(r_EEG_unique.table_route_id,
                r_EEG_unique.information1,
                r_EEG_unique.information2,
                r_EEG_unique.information3 ) ;
       --
       fetch c_EEG into r_EEG ;
       --
       close c_EEG ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EEG.INFORMATION263,l_dml_operation);

       -- Only For Use by Create Wizard - Same Business Group
       l_PGM_ID := NVL(get_fk('PGM_ID', r_EEG.INFORMATION260,l_dml_operation),
                       r_EEG.INFORMATION260);
/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EEG_unique.information2 and r_EEG_unique.information3 then
               l_update := true;
               if r_EEG_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_ENRLD_ANTHR_PGM_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_ENRLD_ANTHR_PGM_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EEG_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EEG_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EEG_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EEG',l_new_value,l_prefix || r_EEG_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EEG_min_max_dates(r_EEG_unique.table_route_id, r_EEG_unique.information1 ) ;
       fetch c_EEG_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EEG_unique.information2);
/**********************moved up from here **********************
       open c_EEG(r_EEG_unique.table_route_id,
                r_EEG_unique.information1,
                r_EEG_unique.information2,
                r_EEG_unique.information3 ) ;
       --
       fetch c_EEG into r_EEG ;
       --
       close c_EEG ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EEG.INFORMATION263,l_dml_operation);

       -- Only For Use by Create Wizard - Same Business Group
       l_PGM_ID := NVL(get_fk('PGM_ID', r_EEG.INFORMATION260,l_dml_operation),
                       r_EEG.INFORMATION260);
**********************************************************/


       if p_reuse_object_flag = 'Y' then
         if c_EEG_min_max_dates%found then
           -- cursor to find the object
           open c_find_EEG_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_enrld_anthr_pgm_id, -999)  ) ;
           fetch c_find_EEG_in_target into l_new_value ;
           if c_find_EEG_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_ENRLD_ANTHR_PGM_F',
                   p_base_key_column => 'ELIG_ENRLD_ANTHR_PGM_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EEG_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_ENRLD_ANTHR_PGM_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_ENRLD_ANTHR_PGM_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EEG_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EEG_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EEG_in_target ;
         --
         end if;
       end if ;
       --
       close c_EEG_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EEG.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EEG.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_ENRLD_ANTHR_PGM_F CREATE_ELIG_ENRLD_ANTHR_PGM ',20);
           BEN_ELIG_ENRLD_ANTHR_PGM_API.CREATE_ELIG_ENRLD_ANTHR_PGM(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EEG_ATTRIBUTE1      => r_EEG.INFORMATION111
             ,P_EEG_ATTRIBUTE10      => r_EEG.INFORMATION120
             ,P_EEG_ATTRIBUTE11      => r_EEG.INFORMATION121
             ,P_EEG_ATTRIBUTE12      => r_EEG.INFORMATION122
             ,P_EEG_ATTRIBUTE13      => r_EEG.INFORMATION123
             ,P_EEG_ATTRIBUTE14      => r_EEG.INFORMATION124
             ,P_EEG_ATTRIBUTE15      => r_EEG.INFORMATION125
             ,P_EEG_ATTRIBUTE16      => r_EEG.INFORMATION126
             ,P_EEG_ATTRIBUTE17      => r_EEG.INFORMATION127
             ,P_EEG_ATTRIBUTE18      => r_EEG.INFORMATION128
             ,P_EEG_ATTRIBUTE19      => r_EEG.INFORMATION129
             ,P_EEG_ATTRIBUTE2      => r_EEG.INFORMATION112
             ,P_EEG_ATTRIBUTE20      => r_EEG.INFORMATION130
             ,P_EEG_ATTRIBUTE21      => r_EEG.INFORMATION131
             ,P_EEG_ATTRIBUTE22      => r_EEG.INFORMATION132
             ,P_EEG_ATTRIBUTE23      => r_EEG.INFORMATION133
             ,P_EEG_ATTRIBUTE24      => r_EEG.INFORMATION134
             ,P_EEG_ATTRIBUTE25      => r_EEG.INFORMATION135
             ,P_EEG_ATTRIBUTE26      => r_EEG.INFORMATION136
             ,P_EEG_ATTRIBUTE27      => r_EEG.INFORMATION137
             ,P_EEG_ATTRIBUTE28      => r_EEG.INFORMATION138
             ,P_EEG_ATTRIBUTE29      => r_EEG.INFORMATION139
             ,P_EEG_ATTRIBUTE3      => r_EEG.INFORMATION113
             ,P_EEG_ATTRIBUTE30      => r_EEG.INFORMATION140
             ,P_EEG_ATTRIBUTE4      => r_EEG.INFORMATION114
             ,P_EEG_ATTRIBUTE5      => r_EEG.INFORMATION115
             ,P_EEG_ATTRIBUTE6      => r_EEG.INFORMATION116
             ,P_EEG_ATTRIBUTE7      => r_EEG.INFORMATION117
             ,P_EEG_ATTRIBUTE8      => r_EEG.INFORMATION118
             ,P_EEG_ATTRIBUTE9      => r_EEG.INFORMATION119
             ,P_EEG_ATTRIBUTE_CATEGORY      => r_EEG.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_ENRLD_ANTHR_PGM_ID      => l_elig_enrld_anthr_pgm_id
             ,P_ENRL_DET_DT_CD      => r_EEG.INFORMATION11
             ,P_EXCLD_FLAG      => r_EEG.INFORMATION12
             ,P_ORDR_NUM      => r_EEG.INFORMATION261
             ,P_PGM_ID      => l_PGM_ID
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_enrld_anthr_pgm_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_ENRLD_ANTHR_PGM_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EEG.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_ENRLD_ANTHR_PGM_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EEG_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_ENRLD_ANTHR_PGM_F UPDATE_ELIG_ENRLD_ANTHR_PGM ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EEG.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EEG.information3,
               p_effective_start_date  => r_EEG.information2,
               p_dml_operation         => r_EEG.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_ENRLD_ANTHR_PGM_ID   := r_EEG.information1;
             l_object_version_number := r_EEG.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_ENRLD_ANTHR_PGM_API.UPDATE_ELIG_ENRLD_ANTHR_PGM(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EEG_ATTRIBUTE1      => r_EEG.INFORMATION111
             ,P_EEG_ATTRIBUTE10      => r_EEG.INFORMATION120
             ,P_EEG_ATTRIBUTE11      => r_EEG.INFORMATION121
             ,P_EEG_ATTRIBUTE12      => r_EEG.INFORMATION122
             ,P_EEG_ATTRIBUTE13      => r_EEG.INFORMATION123
             ,P_EEG_ATTRIBUTE14      => r_EEG.INFORMATION124
             ,P_EEG_ATTRIBUTE15      => r_EEG.INFORMATION125
             ,P_EEG_ATTRIBUTE16      => r_EEG.INFORMATION126
             ,P_EEG_ATTRIBUTE17      => r_EEG.INFORMATION127
             ,P_EEG_ATTRIBUTE18      => r_EEG.INFORMATION128
             ,P_EEG_ATTRIBUTE19      => r_EEG.INFORMATION129
             ,P_EEG_ATTRIBUTE2      => r_EEG.INFORMATION112
             ,P_EEG_ATTRIBUTE20      => r_EEG.INFORMATION130
             ,P_EEG_ATTRIBUTE21      => r_EEG.INFORMATION131
             ,P_EEG_ATTRIBUTE22      => r_EEG.INFORMATION132
             ,P_EEG_ATTRIBUTE23      => r_EEG.INFORMATION133
             ,P_EEG_ATTRIBUTE24      => r_EEG.INFORMATION134
             ,P_EEG_ATTRIBUTE25      => r_EEG.INFORMATION135
             ,P_EEG_ATTRIBUTE26      => r_EEG.INFORMATION136
             ,P_EEG_ATTRIBUTE27      => r_EEG.INFORMATION137
             ,P_EEG_ATTRIBUTE28      => r_EEG.INFORMATION138
             ,P_EEG_ATTRIBUTE29      => r_EEG.INFORMATION139
             ,P_EEG_ATTRIBUTE3      => r_EEG.INFORMATION113
             ,P_EEG_ATTRIBUTE30      => r_EEG.INFORMATION140
             ,P_EEG_ATTRIBUTE4      => r_EEG.INFORMATION114
             ,P_EEG_ATTRIBUTE5      => r_EEG.INFORMATION115
             ,P_EEG_ATTRIBUTE6      => r_EEG.INFORMATION116
             ,P_EEG_ATTRIBUTE7      => r_EEG.INFORMATION117
             ,P_EEG_ATTRIBUTE8      => r_EEG.INFORMATION118
             ,P_EEG_ATTRIBUTE9      => r_EEG.INFORMATION119
             ,P_EEG_ATTRIBUTE_CATEGORY      => r_EEG.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_ENRLD_ANTHR_PGM_ID      => l_elig_enrld_anthr_pgm_id
             ,P_ENRL_DET_DT_CD      => r_EEG.INFORMATION11
             ,P_EXCLD_FLAG      => r_EEG.INFORMATION12
             ,P_ORDR_NUM      => r_EEG.INFORMATION261
             ,P_PGM_ID      => l_PGM_ID
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EEG.information3)) then
             --
             BEN_ELIG_ENRLD_ANTHR_PGM_API.delete_ELIG_ENRLD_ANTHR_PGM(
                --
                p_validate                       => false
                ,p_elig_enrld_anthr_pgm_id                   => l_elig_enrld_anthr_pgm_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EEG',r_EEG.information5 ) ;
     --
 end create_EEG_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_EAI_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EAI_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_PLIP_ID  number;
   cursor c_unique_EAI(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_ENRLD_ANTHR_PLIP_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,  cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EAI_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EAI(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EAI_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EAI.elig_enrld_anthr_plip_id new_value
   from BEN_ELIG_ENRLD_ANTHR_PLIP_F EAI
   where
   EAI.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EAI.PLIP_ID     = l_PLIP_ID  and
   EAI.business_group_id  = c_business_group_id
   and   EAI.elig_enrld_anthr_plip_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_ENRLD_ANTHR_PLIP_F EAI1
                where
                EAI1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EAI1.PLIP_ID     = l_PLIP_ID  and
                EAI1.business_group_id  = c_business_group_id
                and   EAI1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_ENRLD_ANTHR_PLIP_F EAI2
                where
                EAI2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EAI2.PLIP_ID     = l_PLIP_ID  and
                EAI2.business_group_id  = c_business_group_id
                and   EAI2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EAI                     c_EAI%rowtype;
   l_elig_enrld_anthr_plip_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EAI_unique in c_unique_EAI('EAI') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EAI_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EAI_unique.table_route_id '||r_EAI_unique.table_route_id,10);
       hr_utility.set_location(' r_EAI_unique.information1 '||r_EAI_unique.information1,10);
       hr_utility.set_location( 'r_EAI_unique.information2 '||r_EAI_unique.information2,10);
       hr_utility.set_location( 'r_EAI_unique.information3 '||r_EAI_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EAI_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EAI(r_EAI_unique.table_route_id,
                r_EAI_unique.information1,
                r_EAI_unique.information2,
                r_EAI_unique.information3 ) ;
       --
       fetch c_EAI into r_EAI ;
       --
       close c_EAI ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EAI.INFORMATION263,l_dml_operation);

       -- Only For Use by Create Wizard - Same Business Group
       l_PLIP_ID := NVL(get_fk('PLIP_ID', r_EAI.INFORMATION256,l_dml_operation),
                        r_EAI.INFORMATION256);
/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EAI_unique.information2 and r_EAI_unique.information3 then
               l_update := true;
               if r_EAI_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_ENRLD_ANTHR_PLIP_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_ENRLD_ANTHR_PLIP_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EAI_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EAI_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EAI_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EAI',l_new_value,l_prefix || r_EAI_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EAI_min_max_dates(r_EAI_unique.table_route_id, r_EAI_unique.information1 ) ;
       fetch c_EAI_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EAI_unique.information2);
/**********************moved up from here **********************
       open c_EAI(r_EAI_unique.table_route_id,
                r_EAI_unique.information1,
                r_EAI_unique.information2,
                r_EAI_unique.information3 ) ;
       --
       fetch c_EAI into r_EAI ;
       --
       close c_EAI ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EAI.INFORMATION263,l_dml_operation);

       -- Only For Use by Create Wizard - Same Business Group
       l_PLIP_ID := NVL(get_fk('PLIP_ID', r_EAI.INFORMATION256,l_dml_operation),
                        r_EAI.INFORMATION256);
**********************************************************/

       if p_reuse_object_flag = 'Y' then
         if c_EAI_min_max_dates%found then
           -- cursor to find the object
           open c_find_EAI_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_enrld_anthr_plip_id, -999)  ) ;
           fetch c_find_EAI_in_target into l_new_value ;
           if c_find_EAI_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_ENRLD_ANTHR_PLIP_F',
                   p_base_key_column => 'ELIG_ENRLD_ANTHR_PLIP_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EAI_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_ENRLD_ANTHR_PLIP_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_ENRLD_ANTHR_PLIP_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EAI_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EAI_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EAI_in_target ;
         --
         end if;
       end if ;
       --
       close c_EAI_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EAI.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EAI.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_ENRLD_ANTHR_PLIP_F CREATE_ELIG_ENRLD_ANTHR_PLIP ',20);
           BEN_ELIG_ENRLD_ANTHR_PLIP_API.CREATE_ELIG_ENRLD_ANTHR_PLIP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EAI_ATTRIBUTE1      => r_EAI.INFORMATION111
             ,P_EAI_ATTRIBUTE10      => r_EAI.INFORMATION120
             ,P_EAI_ATTRIBUTE11      => r_EAI.INFORMATION121
             ,P_EAI_ATTRIBUTE12      => r_EAI.INFORMATION122
             ,P_EAI_ATTRIBUTE13      => r_EAI.INFORMATION123
             ,P_EAI_ATTRIBUTE14      => r_EAI.INFORMATION124
             ,P_EAI_ATTRIBUTE15      => r_EAI.INFORMATION125
             ,P_EAI_ATTRIBUTE16      => r_EAI.INFORMATION126
             ,P_EAI_ATTRIBUTE17      => r_EAI.INFORMATION127
             ,P_EAI_ATTRIBUTE18      => r_EAI.INFORMATION128
             ,P_EAI_ATTRIBUTE19      => r_EAI.INFORMATION129
             ,P_EAI_ATTRIBUTE2      => r_EAI.INFORMATION112
             ,P_EAI_ATTRIBUTE20      => r_EAI.INFORMATION130
             ,P_EAI_ATTRIBUTE21      => r_EAI.INFORMATION131
             ,P_EAI_ATTRIBUTE22      => r_EAI.INFORMATION132
             ,P_EAI_ATTRIBUTE23      => r_EAI.INFORMATION133
             ,P_EAI_ATTRIBUTE24      => r_EAI.INFORMATION134
             ,P_EAI_ATTRIBUTE25      => r_EAI.INFORMATION135
             ,P_EAI_ATTRIBUTE26      => r_EAI.INFORMATION136
             ,P_EAI_ATTRIBUTE27      => r_EAI.INFORMATION137
             ,P_EAI_ATTRIBUTE28      => r_EAI.INFORMATION138
             ,P_EAI_ATTRIBUTE29      => r_EAI.INFORMATION139
             ,P_EAI_ATTRIBUTE3      => r_EAI.INFORMATION113
             ,P_EAI_ATTRIBUTE30      => r_EAI.INFORMATION140
             ,P_EAI_ATTRIBUTE4      => r_EAI.INFORMATION114
             ,P_EAI_ATTRIBUTE5      => r_EAI.INFORMATION115
             ,P_EAI_ATTRIBUTE6      => r_EAI.INFORMATION116
             ,P_EAI_ATTRIBUTE7      => r_EAI.INFORMATION117
             ,P_EAI_ATTRIBUTE8      => r_EAI.INFORMATION118
             ,P_EAI_ATTRIBUTE9      => r_EAI.INFORMATION119
             ,P_EAI_ATTRIBUTE_CATEGORY      => r_EAI.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_ENRLD_ANTHR_PLIP_ID      => l_elig_enrld_anthr_plip_id
             ,P_ENRL_DET_DT_CD      => r_EAI.INFORMATION12
             ,P_EXCLD_FLAG      => r_EAI.INFORMATION11
             ,P_ORDR_NUM      => r_EAI.INFORMATION260
             ,P_PLIP_ID      => l_PLIP_ID
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_enrld_anthr_plip_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_ENRLD_ANTHR_PLIP_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EAI.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_ENRLD_ANTHR_PLIP_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EAI_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_ENRLD_ANTHR_PLIP_F UPDATE_ELIG_ENRLD_ANTHR_PLIP ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EAI.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EAI.information3,
               p_effective_start_date  => r_EAI.information2,
               p_dml_operation         => r_EAI.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_ENRLD_ANTHR_PLIP_ID   := r_EAI.information1;
             l_object_version_number := r_EAI.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_ENRLD_ANTHR_PLIP_API.UPDATE_ELIG_ENRLD_ANTHR_PLIP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EAI_ATTRIBUTE1      => r_EAI.INFORMATION111
             ,P_EAI_ATTRIBUTE10      => r_EAI.INFORMATION120
             ,P_EAI_ATTRIBUTE11      => r_EAI.INFORMATION121
             ,P_EAI_ATTRIBUTE12      => r_EAI.INFORMATION122
             ,P_EAI_ATTRIBUTE13      => r_EAI.INFORMATION123
             ,P_EAI_ATTRIBUTE14      => r_EAI.INFORMATION124
             ,P_EAI_ATTRIBUTE15      => r_EAI.INFORMATION125
             ,P_EAI_ATTRIBUTE16      => r_EAI.INFORMATION126
             ,P_EAI_ATTRIBUTE17      => r_EAI.INFORMATION127
             ,P_EAI_ATTRIBUTE18      => r_EAI.INFORMATION128
             ,P_EAI_ATTRIBUTE19      => r_EAI.INFORMATION129
             ,P_EAI_ATTRIBUTE2      => r_EAI.INFORMATION112
             ,P_EAI_ATTRIBUTE20      => r_EAI.INFORMATION130
             ,P_EAI_ATTRIBUTE21      => r_EAI.INFORMATION131
             ,P_EAI_ATTRIBUTE22      => r_EAI.INFORMATION132
             ,P_EAI_ATTRIBUTE23      => r_EAI.INFORMATION133
             ,P_EAI_ATTRIBUTE24      => r_EAI.INFORMATION134
             ,P_EAI_ATTRIBUTE25      => r_EAI.INFORMATION135
             ,P_EAI_ATTRIBUTE26      => r_EAI.INFORMATION136
             ,P_EAI_ATTRIBUTE27      => r_EAI.INFORMATION137
             ,P_EAI_ATTRIBUTE28      => r_EAI.INFORMATION138
             ,P_EAI_ATTRIBUTE29      => r_EAI.INFORMATION139
             ,P_EAI_ATTRIBUTE3      => r_EAI.INFORMATION113
             ,P_EAI_ATTRIBUTE30      => r_EAI.INFORMATION140
             ,P_EAI_ATTRIBUTE4      => r_EAI.INFORMATION114
             ,P_EAI_ATTRIBUTE5      => r_EAI.INFORMATION115
             ,P_EAI_ATTRIBUTE6      => r_EAI.INFORMATION116
             ,P_EAI_ATTRIBUTE7      => r_EAI.INFORMATION117
             ,P_EAI_ATTRIBUTE8      => r_EAI.INFORMATION118
             ,P_EAI_ATTRIBUTE9      => r_EAI.INFORMATION119
             ,P_EAI_ATTRIBUTE_CATEGORY      => r_EAI.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_ENRLD_ANTHR_PLIP_ID      => l_elig_enrld_anthr_plip_id
             ,P_ENRL_DET_DT_CD      => r_EAI.INFORMATION12
             ,P_EXCLD_FLAG      => r_EAI.INFORMATION11
             ,P_ORDR_NUM      => r_EAI.INFORMATION260
             ,P_PLIP_ID      => l_PLIP_ID
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EAI.information3)) then
             --
             BEN_ELIG_ENRLD_ANTHR_PLIP_API.delete_ELIG_ENRLD_ANTHR_PLIP(
                --
                p_validate                       => false
                ,p_elig_enrld_anthr_plip_id                   => l_elig_enrld_anthr_plip_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EAI',r_EAI.information5 ) ;
     --
 end create_EAI_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_EEP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EEP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_PL_ID  number;
   cursor c_unique_EEP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_ENRLD_ANTHR_PL_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,  cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EEP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EEP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EEP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EEP.elig_enrld_anthr_pl_id new_value
   from BEN_ELIG_ENRLD_ANTHR_PL_F EEP
   where
   EEP.ELIGY_PRFL_ID    = l_ELIGY_PRFL_ID  and
   EEP.PL_ID     = l_PL_ID  and
   EEP.business_group_id  = c_business_group_id
   and   EEP.elig_enrld_anthr_pl_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_ENRLD_ANTHR_PL_F EEP1
                where
                EEP1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EEP1.PL_ID             = l_PL_ID  and
                EEP1.business_group_id  = c_business_group_id
                and   EEP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_ENRLD_ANTHR_PL_F EEP2
                where
                EEP2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EEP2.PL_ID             = l_PL_ID  and
                EEP2.business_group_id  = c_business_group_id
                and   EEP2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EEP                     c_EEP%rowtype;
   l_elig_enrld_anthr_pl_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EEP_unique in c_unique_EEP('EEP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EEP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EEP_unique.table_route_id '||r_EEP_unique.table_route_id,10);
       hr_utility.set_location(' r_EEP_unique.information1 '||r_EEP_unique.information1,10);
       hr_utility.set_location( 'r_EEP_unique.information2 '||r_EEP_unique.information2,10);
       hr_utility.set_location( 'r_EEP_unique.information3 '||r_EEP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EEP_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EEP(r_EEP_unique.table_route_id,
                r_EEP_unique.information1,
                r_EEP_unique.information2,
                r_EEP_unique.information3 ) ;
       --
       fetch c_EEP into r_EEP ;
       --
       close c_EEP ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EEP.INFORMATION263,l_dml_operation);

       l_PL_ID := NVL(get_fk('PL_ID', r_EEP.INFORMATION261,l_dml_operation),
                      r_EEP.INFORMATION261);
/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EEP_unique.information2 and r_EEP_unique.information3 then
               l_update := true;
               if r_EEP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_ENRLD_ANTHR_PL_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_ENRLD_ANTHR_PL_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EEP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EEP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EEP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EEP',l_new_value,l_prefix || r_EEP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EEP_min_max_dates(r_EEP_unique.table_route_id, r_EEP_unique.information1 ) ;
       fetch c_EEP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EEP_unique.information2);
/**********************moved up from here **********************
       open c_EEP(r_EEP_unique.table_route_id,
                r_EEP_unique.information1,
                r_EEP_unique.information2,
                r_EEP_unique.information3 ) ;
       --
       fetch c_EEP into r_EEP ;
       --
       close c_EEP ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EEP.INFORMATION263,l_dml_operation);

       l_PL_ID := NVL(get_fk('PL_ID', r_EEP.INFORMATION261,l_dml_operation),
                      r_EEP.INFORMATION261);
**********************************************************/

       if p_reuse_object_flag = 'Y' then
         if c_EEP_min_max_dates%found then
           -- cursor to find the object
           open c_find_EEP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_enrld_anthr_pl_id, -999)  ) ;
           fetch c_find_EEP_in_target into l_new_value ;
           if c_find_EEP_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_ENRLD_ANTHR_PL_F',
                   p_base_key_column => 'ELIG_ENRLD_ANTHR_PL_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EEP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_ENRLD_ANTHR_PL_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_ENRLD_ANTHR_PL_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EEP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EEP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EEP_in_target ;
         --
         end if;
       end if ;
       --
       close c_EEP_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EEP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EEP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_ENRLD_ANTHR_PL_F CREATE_ELIG_ENRLD_ANTHR_PL ',20);
           BEN_ELIG_ENRLD_ANTHR_PL_API.CREATE_ELIG_ENRLD_ANTHR_PL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EEP_ATTRIBUTE1      => r_EEP.INFORMATION111
             ,P_EEP_ATTRIBUTE10      => r_EEP.INFORMATION120
             ,P_EEP_ATTRIBUTE11      => r_EEP.INFORMATION121
             ,P_EEP_ATTRIBUTE12      => r_EEP.INFORMATION122
             ,P_EEP_ATTRIBUTE13      => r_EEP.INFORMATION123
             ,P_EEP_ATTRIBUTE14      => r_EEP.INFORMATION124
             ,P_EEP_ATTRIBUTE15      => r_EEP.INFORMATION125
             ,P_EEP_ATTRIBUTE16      => r_EEP.INFORMATION126
             ,P_EEP_ATTRIBUTE17      => r_EEP.INFORMATION127
             ,P_EEP_ATTRIBUTE18      => r_EEP.INFORMATION128
             ,P_EEP_ATTRIBUTE19      => r_EEP.INFORMATION129
             ,P_EEP_ATTRIBUTE2      => r_EEP.INFORMATION112
             ,P_EEP_ATTRIBUTE20      => r_EEP.INFORMATION130
             ,P_EEP_ATTRIBUTE21      => r_EEP.INFORMATION131
             ,P_EEP_ATTRIBUTE22      => r_EEP.INFORMATION132
             ,P_EEP_ATTRIBUTE23      => r_EEP.INFORMATION133
             ,P_EEP_ATTRIBUTE24      => r_EEP.INFORMATION134
             ,P_EEP_ATTRIBUTE25      => r_EEP.INFORMATION135
             ,P_EEP_ATTRIBUTE26      => r_EEP.INFORMATION136
             ,P_EEP_ATTRIBUTE27      => r_EEP.INFORMATION137
             ,P_EEP_ATTRIBUTE28      => r_EEP.INFORMATION138
             ,P_EEP_ATTRIBUTE29      => r_EEP.INFORMATION139
             ,P_EEP_ATTRIBUTE3      => r_EEP.INFORMATION113
             ,P_EEP_ATTRIBUTE30      => r_EEP.INFORMATION140
             ,P_EEP_ATTRIBUTE4      => r_EEP.INFORMATION114
             ,P_EEP_ATTRIBUTE5      => r_EEP.INFORMATION115
             ,P_EEP_ATTRIBUTE6      => r_EEP.INFORMATION116
             ,P_EEP_ATTRIBUTE7      => r_EEP.INFORMATION117
             ,P_EEP_ATTRIBUTE8      => r_EEP.INFORMATION118
             ,P_EEP_ATTRIBUTE9      => r_EEP.INFORMATION119
             ,P_EEP_ATTRIBUTE_CATEGORY      => r_EEP.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_ENRLD_ANTHR_PL_ID      => l_elig_enrld_anthr_pl_id
             ,P_ENRL_DET_DT_CD      => r_EEP.INFORMATION11
             ,P_EXCLD_FLAG      => r_EEP.INFORMATION12
             ,P_ORDR_NUM      => r_EEP.INFORMATION260
             ,P_PL_ID      => l_PL_ID
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_enrld_anthr_pl_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_ENRLD_ANTHR_PL_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EEP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_ENRLD_ANTHR_PL_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EEP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_ENRLD_ANTHR_PL_F UPDATE_ELIG_ENRLD_ANTHR_PL ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EEP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EEP.information3,
               p_effective_start_date  => r_EEP.information2,
               p_dml_operation         => r_EEP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_ENRLD_ANTHR_PL_ID   := r_EEP.information1;
             l_object_version_number := r_EEP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_ENRLD_ANTHR_PL_API.UPDATE_ELIG_ENRLD_ANTHR_PL(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EEP_ATTRIBUTE1      => r_EEP.INFORMATION111
             ,P_EEP_ATTRIBUTE10      => r_EEP.INFORMATION120
             ,P_EEP_ATTRIBUTE11      => r_EEP.INFORMATION121
             ,P_EEP_ATTRIBUTE12      => r_EEP.INFORMATION122
             ,P_EEP_ATTRIBUTE13      => r_EEP.INFORMATION123
             ,P_EEP_ATTRIBUTE14      => r_EEP.INFORMATION124
             ,P_EEP_ATTRIBUTE15      => r_EEP.INFORMATION125
             ,P_EEP_ATTRIBUTE16      => r_EEP.INFORMATION126
             ,P_EEP_ATTRIBUTE17      => r_EEP.INFORMATION127
             ,P_EEP_ATTRIBUTE18      => r_EEP.INFORMATION128
             ,P_EEP_ATTRIBUTE19      => r_EEP.INFORMATION129
             ,P_EEP_ATTRIBUTE2      => r_EEP.INFORMATION112
             ,P_EEP_ATTRIBUTE20      => r_EEP.INFORMATION130
             ,P_EEP_ATTRIBUTE21      => r_EEP.INFORMATION131
             ,P_EEP_ATTRIBUTE22      => r_EEP.INFORMATION132
             ,P_EEP_ATTRIBUTE23      => r_EEP.INFORMATION133
             ,P_EEP_ATTRIBUTE24      => r_EEP.INFORMATION134
             ,P_EEP_ATTRIBUTE25      => r_EEP.INFORMATION135
             ,P_EEP_ATTRIBUTE26      => r_EEP.INFORMATION136
             ,P_EEP_ATTRIBUTE27      => r_EEP.INFORMATION137
             ,P_EEP_ATTRIBUTE28      => r_EEP.INFORMATION138
             ,P_EEP_ATTRIBUTE29      => r_EEP.INFORMATION139
             ,P_EEP_ATTRIBUTE3      => r_EEP.INFORMATION113
             ,P_EEP_ATTRIBUTE30      => r_EEP.INFORMATION140
             ,P_EEP_ATTRIBUTE4      => r_EEP.INFORMATION114
             ,P_EEP_ATTRIBUTE5      => r_EEP.INFORMATION115
             ,P_EEP_ATTRIBUTE6      => r_EEP.INFORMATION116
             ,P_EEP_ATTRIBUTE7      => r_EEP.INFORMATION117
             ,P_EEP_ATTRIBUTE8      => r_EEP.INFORMATION118
             ,P_EEP_ATTRIBUTE9      => r_EEP.INFORMATION119
             ,P_EEP_ATTRIBUTE_CATEGORY      => r_EEP.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_ENRLD_ANTHR_PL_ID      => l_elig_enrld_anthr_pl_id
             ,P_ENRL_DET_DT_CD      => r_EEP.INFORMATION11
             ,P_EXCLD_FLAG      => r_EEP.INFORMATION12
             ,P_ORDR_NUM      => r_EEP.INFORMATION260
             ,P_PL_ID      => l_PL_ID
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EEP.information3)) then
             --
             BEN_ELIG_ENRLD_ANTHR_PL_API.delete_ELIG_ENRLD_ANTHR_PL(
                --
                p_validate                       => false
                ,p_elig_enrld_anthr_pl_id                   => l_elig_enrld_anthr_pl_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EEP',r_EEP.information5 ) ;
     --
 end create_EEP_rows;

       --
   ---------------------------------------------------------------
   ----------------------< create_EET_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EET_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_PTIP_ID  number;
   cursor c_unique_EET(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_ENRLD_ANTHR_PTIP_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,  cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EET_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EET(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EET_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EET.elig_enrld_anthr_ptip_id new_value
   from BEN_ELIG_ENRLD_ANTHR_PTIP_F EET
   where
   EET.ELIGY_PRFL_ID    = l_ELIGY_PRFL_ID  and
   EET.PTIP_ID     = l_PTIP_ID  and
   EET.business_group_id  = c_business_group_id
   and   EET.elig_enrld_anthr_ptip_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_ENRLD_ANTHR_PTIP_F EET1
                where
                EET1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EET1.PTIP_ID     = l_PTIP_ID  and
                EET1.business_group_id  = c_business_group_id
                and   EET1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_ENRLD_ANTHR_PTIP_F EET2
                where
                EET2.ELIGY_PRFL_ID    = l_ELIGY_PRFL_ID  and
                EET2.PTIP_ID      = l_PTIP_ID  and
                EET2.business_group_id  = c_business_group_id
                and   EET2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EET                     c_EET%rowtype;
   l_elig_enrld_anthr_ptip_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EET_unique in c_unique_EET('EET') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EET_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EET_unique.table_route_id '||r_EET_unique.table_route_id,10);
       hr_utility.set_location(' r_EET_unique.information1 '||r_EET_unique.information1,10);
       hr_utility.set_location( 'r_EET_unique.information2 '||r_EET_unique.information2,10);
       hr_utility.set_location( 'r_EET_unique.information3 '||r_EET_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EET_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EET(r_EET_unique.table_route_id,
                r_EET_unique.information1,
                r_EET_unique.information2,
                r_EET_unique.information3 ) ;
       --
       fetch c_EET into r_EET ;
       --
       close c_EET ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EET.INFORMATION263,l_dml_operation);

       -- Only For Use by Create Wizard - Same Business Group
       l_PTIP_ID := NVL(get_fk('PTIP_ID', r_EET.INFORMATION259,l_dml_operation),
                        r_EET.INFORMATION259);

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EET_unique.information2 and r_EET_unique.information3 then
               l_update := true;
               if r_EET_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_ENRLD_ANTHR_PTIP_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_ENRLD_ANTHR_PTIP_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EET_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EET_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EET_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EET',l_new_value,l_prefix || r_EET_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EET_min_max_dates(r_EET_unique.table_route_id, r_EET_unique.information1 ) ;
       fetch c_EET_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EET_unique.information2);
/**********************moved up from here **********************
       open c_EET(r_EET_unique.table_route_id,
                r_EET_unique.information1,
                r_EET_unique.information2,
                r_EET_unique.information3 ) ;
       --
       fetch c_EET into r_EET ;
       --
       close c_EET ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EET.INFORMATION263,l_dml_operation);

       -- Only For Use by Create Wizard - Same Business Group
       l_PTIP_ID := NVL(get_fk('PTIP_ID', r_EET.INFORMATION259,l_dml_operation),
                        r_EET.INFORMATION259);

**********************************************************/


       if p_reuse_object_flag = 'Y' then
         if c_EET_min_max_dates%found then
           -- cursor to find the object
           open c_find_EET_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_enrld_anthr_ptip_id, -999)  ) ;
           fetch c_find_EET_in_target into l_new_value ;
           if c_find_EET_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_ENRLD_ANTHR_PTIP_F',
                   p_base_key_column => 'ELIG_ENRLD_ANTHR_PTIP_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EET_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_ENRLD_ANTHR_PTIP_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_ENRLD_ANTHR_PTIP_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EET_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EET_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EET_in_target ;
         --
         end if;
       end if ;
       --
       close c_EET_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EET.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EET.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_ENRLD_ANTHR_PTIP_F CREATE_ELIG_ENRLD_ANTHR_PTIP ',20);
           BEN_ELIG_ENRLD_ANTHR_PTIP_API.CREATE_ELIG_ENRLD_ANTHR_PTIP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EET_ATTRIBUTE1      => r_EET.INFORMATION111
             ,P_EET_ATTRIBUTE10      => r_EET.INFORMATION120
             ,P_EET_ATTRIBUTE11      => r_EET.INFORMATION121
             ,P_EET_ATTRIBUTE12      => r_EET.INFORMATION122
             ,P_EET_ATTRIBUTE13      => r_EET.INFORMATION123
             ,P_EET_ATTRIBUTE14      => r_EET.INFORMATION124
             ,P_EET_ATTRIBUTE15      => r_EET.INFORMATION125
             ,P_EET_ATTRIBUTE16      => r_EET.INFORMATION126
             ,P_EET_ATTRIBUTE17      => r_EET.INFORMATION127
             ,P_EET_ATTRIBUTE18      => r_EET.INFORMATION128
             ,P_EET_ATTRIBUTE19      => r_EET.INFORMATION129
             ,P_EET_ATTRIBUTE2      => r_EET.INFORMATION112
             ,P_EET_ATTRIBUTE20      => r_EET.INFORMATION130
             ,P_EET_ATTRIBUTE21      => r_EET.INFORMATION131
             ,P_EET_ATTRIBUTE22      => r_EET.INFORMATION132
             ,P_EET_ATTRIBUTE23      => r_EET.INFORMATION133
             ,P_EET_ATTRIBUTE24      => r_EET.INFORMATION134
             ,P_EET_ATTRIBUTE25      => r_EET.INFORMATION135
             ,P_EET_ATTRIBUTE26      => r_EET.INFORMATION136
             ,P_EET_ATTRIBUTE27      => r_EET.INFORMATION137
             ,P_EET_ATTRIBUTE28      => r_EET.INFORMATION138
             ,P_EET_ATTRIBUTE29      => r_EET.INFORMATION139
             ,P_EET_ATTRIBUTE3      => r_EET.INFORMATION113
             ,P_EET_ATTRIBUTE30      => r_EET.INFORMATION140
             ,P_EET_ATTRIBUTE4      => r_EET.INFORMATION114
             ,P_EET_ATTRIBUTE5      => r_EET.INFORMATION115
             ,P_EET_ATTRIBUTE6      => r_EET.INFORMATION116
             ,P_EET_ATTRIBUTE7      => r_EET.INFORMATION117
             ,P_EET_ATTRIBUTE8      => r_EET.INFORMATION118
             ,P_EET_ATTRIBUTE9      => r_EET.INFORMATION119
             ,P_EET_ATTRIBUTE_CATEGORY      => r_EET.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_ENRLD_ANTHR_PTIP_ID      => l_elig_enrld_anthr_ptip_id
             ,P_ENRL_DET_DT_CD      => r_EET.INFORMATION13
             ,P_EXCLD_FLAG      => r_EET.INFORMATION11
             ,P_ONLY_PLS_SUBJ_COBRA_FLAG      => r_EET.INFORMATION12
             ,P_ORDR_NUM      => r_EET.INFORMATION261
             ,P_PTIP_ID      => l_PTIP_ID
   ----
    --****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_enrld_anthr_ptip_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_ENRLD_ANTHR_PTIP_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EET.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_ENRLD_ANTHR_PTIP_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EET_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_ENRLD_ANTHR_PTIP_F UPDATE_ELIG_ENRLD_ANTHR_PTIP ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EET.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EET.information3,
               p_effective_start_date  => r_EET.information2,
               p_dml_operation         => r_EET.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_ENRLD_ANTHR_PTIP_ID   := r_EET.information1;
             l_object_version_number := r_EET.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_ENRLD_ANTHR_PTIP_API.UPDATE_ELIG_ENRLD_ANTHR_PTIP(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EET_ATTRIBUTE1      => r_EET.INFORMATION111
             ,P_EET_ATTRIBUTE10      => r_EET.INFORMATION120
             ,P_EET_ATTRIBUTE11      => r_EET.INFORMATION121
             ,P_EET_ATTRIBUTE12      => r_EET.INFORMATION122
             ,P_EET_ATTRIBUTE13      => r_EET.INFORMATION123
             ,P_EET_ATTRIBUTE14      => r_EET.INFORMATION124
             ,P_EET_ATTRIBUTE15      => r_EET.INFORMATION125
             ,P_EET_ATTRIBUTE16      => r_EET.INFORMATION126
             ,P_EET_ATTRIBUTE17      => r_EET.INFORMATION127
             ,P_EET_ATTRIBUTE18      => r_EET.INFORMATION128
             ,P_EET_ATTRIBUTE19      => r_EET.INFORMATION129
             ,P_EET_ATTRIBUTE2      => r_EET.INFORMATION112
             ,P_EET_ATTRIBUTE20      => r_EET.INFORMATION130
             ,P_EET_ATTRIBUTE21      => r_EET.INFORMATION131
             ,P_EET_ATTRIBUTE22      => r_EET.INFORMATION132
             ,P_EET_ATTRIBUTE23      => r_EET.INFORMATION133
             ,P_EET_ATTRIBUTE24      => r_EET.INFORMATION134
             ,P_EET_ATTRIBUTE25      => r_EET.INFORMATION135
             ,P_EET_ATTRIBUTE26      => r_EET.INFORMATION136
             ,P_EET_ATTRIBUTE27      => r_EET.INFORMATION137
             ,P_EET_ATTRIBUTE28      => r_EET.INFORMATION138
             ,P_EET_ATTRIBUTE29      => r_EET.INFORMATION139
             ,P_EET_ATTRIBUTE3      => r_EET.INFORMATION113
             ,P_EET_ATTRIBUTE30      => r_EET.INFORMATION140
             ,P_EET_ATTRIBUTE4      => r_EET.INFORMATION114
             ,P_EET_ATTRIBUTE5      => r_EET.INFORMATION115
             ,P_EET_ATTRIBUTE6      => r_EET.INFORMATION116
             ,P_EET_ATTRIBUTE7      => r_EET.INFORMATION117
             ,P_EET_ATTRIBUTE8      => r_EET.INFORMATION118
             ,P_EET_ATTRIBUTE9      => r_EET.INFORMATION119
             ,P_EET_ATTRIBUTE_CATEGORY      => r_EET.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_ENRLD_ANTHR_PTIP_ID      => l_elig_enrld_anthr_ptip_id
             ,P_ENRL_DET_DT_CD      => r_EET.INFORMATION13
             ,P_EXCLD_FLAG      => r_EET.INFORMATION11
             ,P_ONLY_PLS_SUBJ_COBRA_FLAG      => r_EET.INFORMATION12
             ,P_ORDR_NUM      => r_EET.INFORMATION261
             ,P_PTIP_ID      => l_PTIP_ID
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EET.information3)) then
             --
             BEN_ELIG_ENRLD_ANTHR_PTIP_API.delete_ELIG_ENRLD_ANTHR_PTIP(
                --
                p_validate                       => false
                ,p_elig_enrld_anthr_ptip_id                   => l_elig_enrld_anthr_ptip_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EET',r_EET.information5 ) ;
     --
 end create_EET_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_EFP_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EFP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_FL_TM_PT_TM_CD varchar2(50) ;
   l_ORDR_NUM       number ;
   --
   cursor c_unique_EFP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_FL_TM_PT_TM_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,  cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EFP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EFP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EFP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EFP.elig_fl_tm_pt_tm_prte_id new_value
   from BEN_ELIG_FL_TM_PT_TM_PRTE_F EFP
   where
   EFP.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EFP.FL_TM_PT_TM_CD    = l_FL_TM_PT_TM_CD and
   EFP.ORDR_NUM          = l_ORDR_NUM and
   EFP.business_group_id  = c_business_group_id
   and   EFP.elig_fl_tm_pt_tm_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_FL_TM_PT_TM_PRTE_F EFP1
                where
                EFP1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                -- Additional Filter
                EFP1.FL_TM_PT_TM_CD    = l_FL_TM_PT_TM_CD and
                EFP1.ORDR_NUM          = l_ORDR_NUM and
                EFP1.business_group_id  = c_business_group_id
                and   EFP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_FL_TM_PT_TM_PRTE_F EFP2
                where
                EFP2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                -- Additional Filter
                EFP2.FL_TM_PT_TM_CD    = l_FL_TM_PT_TM_CD and
                EFP2.ORDR_NUM          = l_ORDR_NUM and
                EFP2.business_group_id  = c_business_group_id
                and   EFP2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EFP                     c_EFP%rowtype;
   l_elig_fl_tm_pt_tm_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EFP_unique in c_unique_EFP('EFP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EFP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EFP_unique.table_route_id '||r_EFP_unique.table_route_id,10);
       hr_utility.set_location(' r_EFP_unique.information1 '||r_EFP_unique.information1,10);
       hr_utility.set_location( 'r_EFP_unique.information2 '||r_EFP_unique.information2,10);
       hr_utility.set_location( 'r_EFP_unique.information3 '||r_EFP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EFP_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EFP(r_EFP_unique.table_route_id,
                r_EFP_unique.information1,
                r_EFP_unique.information2,
                r_EFP_unique.information3 ) ;
       --
       fetch c_EFP into r_EFP ;
       --
       close c_EFP ;
       --
       l_ELIGY_PRFL_ID  := get_fk('ELIGY_PRFL_ID', r_EFP.INFORMATION263,l_dml_operation);
       -- Additional Changes
       l_FL_TM_PT_TM_CD := r_EFP.INFORMATION12 ;
       l_ORDR_NUM       := r_EFP.INFORMATION260 ;
/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EFP_unique.information2 and r_EFP_unique.information3 then
               l_update := true;
               if r_EFP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_FL_TM_PT_TM_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_FL_TM_PT_TM_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EFP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EFP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EFP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EFP',l_new_value,l_prefix || r_EFP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EFP_min_max_dates(r_EFP_unique.table_route_id, r_EFP_unique.information1 ) ;
       fetch c_EFP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
        l_min_esd := greatest(l_min_esd,r_EFP_unique.information2);
/**********************moved up from here **********************
       open c_EFP(r_EFP_unique.table_route_id,
                r_EFP_unique.information1,
                r_EFP_unique.information2,
                r_EFP_unique.information3 ) ;
       --
       fetch c_EFP into r_EFP ;
       --
       close c_EFP ;
       --
       l_ELIGY_PRFL_ID  := get_fk('ELIGY_PRFL_ID', r_EFP.INFORMATION263,l_dml_operation);
       -- Additional Changes
       l_FL_TM_PT_TM_CD := r_EFP.INFORMATION12 ;
       l_ORDR_NUM       := r_EFP.INFORMATION260 ;
**********************************************************/


       --
       if p_reuse_object_flag = 'Y' then
         if c_EFP_min_max_dates%found then
           -- cursor to find the object
           open c_find_EFP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_fl_tm_pt_tm_prte_id, -999)  ) ;
           fetch c_find_EFP_in_target into l_new_value ;
           if c_find_EFP_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_FL_TM_PT_TM_PRTE_F',
                   p_base_key_column => 'ELIG_FL_TM_PT_TM_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EFP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_FL_TM_PT_TM_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_FL_TM_PT_TM_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EFP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EFP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EFP_in_target ;
         --
         end if;
       end if ;
       --
       close c_EFP_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EFP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EFP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_FL_TM_PT_TM_PRTE_F CREATE_ELIG_FL_TM_PT_TM_PRTE ',20);
           BEN_ELIG_FL_TM_PT_TM_PRTE_API.CREATE_ELIG_FL_TM_PT_TM_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EFP_ATTRIBUTE1      => r_EFP.INFORMATION111
             ,P_EFP_ATTRIBUTE10      => r_EFP.INFORMATION120
             ,P_EFP_ATTRIBUTE11      => r_EFP.INFORMATION121
             ,P_EFP_ATTRIBUTE12      => r_EFP.INFORMATION122
             ,P_EFP_ATTRIBUTE13      => r_EFP.INFORMATION123
             ,P_EFP_ATTRIBUTE14      => r_EFP.INFORMATION124
             ,P_EFP_ATTRIBUTE15      => r_EFP.INFORMATION125
             ,P_EFP_ATTRIBUTE16      => r_EFP.INFORMATION126
             ,P_EFP_ATTRIBUTE17      => r_EFP.INFORMATION127
             ,P_EFP_ATTRIBUTE18      => r_EFP.INFORMATION128
             ,P_EFP_ATTRIBUTE19      => r_EFP.INFORMATION129
             ,P_EFP_ATTRIBUTE2      => r_EFP.INFORMATION112
             ,P_EFP_ATTRIBUTE20      => r_EFP.INFORMATION130
             ,P_EFP_ATTRIBUTE21      => r_EFP.INFORMATION131
             ,P_EFP_ATTRIBUTE22      => r_EFP.INFORMATION132
             ,P_EFP_ATTRIBUTE23      => r_EFP.INFORMATION133
             ,P_EFP_ATTRIBUTE24      => r_EFP.INFORMATION134
             ,P_EFP_ATTRIBUTE25      => r_EFP.INFORMATION135
             ,P_EFP_ATTRIBUTE26      => r_EFP.INFORMATION136
             ,P_EFP_ATTRIBUTE27      => r_EFP.INFORMATION137
             ,P_EFP_ATTRIBUTE28      => r_EFP.INFORMATION138
             ,P_EFP_ATTRIBUTE29      => r_EFP.INFORMATION139
             ,P_EFP_ATTRIBUTE3      => r_EFP.INFORMATION113
             ,P_EFP_ATTRIBUTE30      => r_EFP.INFORMATION140
             ,P_EFP_ATTRIBUTE4      => r_EFP.INFORMATION114
             ,P_EFP_ATTRIBUTE5      => r_EFP.INFORMATION115
             ,P_EFP_ATTRIBUTE6      => r_EFP.INFORMATION116
             ,P_EFP_ATTRIBUTE7      => r_EFP.INFORMATION117
             ,P_EFP_ATTRIBUTE8      => r_EFP.INFORMATION118
             ,P_EFP_ATTRIBUTE9      => r_EFP.INFORMATION119
             ,P_EFP_ATTRIBUTE_CATEGORY      => r_EFP.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_FL_TM_PT_TM_PRTE_ID      => l_elig_fl_tm_pt_tm_prte_id
             ,P_EXCLD_FLAG      => r_EFP.INFORMATION11
             ,P_FL_TM_PT_TM_CD      => r_EFP.INFORMATION12
             ,P_ORDR_NUM      => r_EFP.INFORMATION260
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_efp.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_efp.INFORMATION296
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_fl_tm_pt_tm_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_FL_TM_PT_TM_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EFP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_FL_TM_PT_TM_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EFP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_FL_TM_PT_TM_PRTE_F UPDATE_ELIG_FL_TM_PT_TM_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EFP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EFP.information3,
               p_effective_start_date  => r_EFP.information2,
               p_dml_operation         => r_EFP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_FL_TM_PT_TM_PRTE_ID   := r_EFP.information1;
             l_object_version_number := r_EFP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_FL_TM_PT_TM_PRTE_API.UPDATE_ELIG_FL_TM_PT_TM_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EFP_ATTRIBUTE1      => r_EFP.INFORMATION111
             ,P_EFP_ATTRIBUTE10      => r_EFP.INFORMATION120
             ,P_EFP_ATTRIBUTE11      => r_EFP.INFORMATION121
             ,P_EFP_ATTRIBUTE12      => r_EFP.INFORMATION122
             ,P_EFP_ATTRIBUTE13      => r_EFP.INFORMATION123
             ,P_EFP_ATTRIBUTE14      => r_EFP.INFORMATION124
             ,P_EFP_ATTRIBUTE15      => r_EFP.INFORMATION125
             ,P_EFP_ATTRIBUTE16      => r_EFP.INFORMATION126
             ,P_EFP_ATTRIBUTE17      => r_EFP.INFORMATION127
             ,P_EFP_ATTRIBUTE18      => r_EFP.INFORMATION128
             ,P_EFP_ATTRIBUTE19      => r_EFP.INFORMATION129
             ,P_EFP_ATTRIBUTE2      => r_EFP.INFORMATION112
             ,P_EFP_ATTRIBUTE20      => r_EFP.INFORMATION130
             ,P_EFP_ATTRIBUTE21      => r_EFP.INFORMATION131
             ,P_EFP_ATTRIBUTE22      => r_EFP.INFORMATION132
             ,P_EFP_ATTRIBUTE23      => r_EFP.INFORMATION133
             ,P_EFP_ATTRIBUTE24      => r_EFP.INFORMATION134
             ,P_EFP_ATTRIBUTE25      => r_EFP.INFORMATION135
             ,P_EFP_ATTRIBUTE26      => r_EFP.INFORMATION136
             ,P_EFP_ATTRIBUTE27      => r_EFP.INFORMATION137
             ,P_EFP_ATTRIBUTE28      => r_EFP.INFORMATION138
             ,P_EFP_ATTRIBUTE29      => r_EFP.INFORMATION139
             ,P_EFP_ATTRIBUTE3      => r_EFP.INFORMATION113
             ,P_EFP_ATTRIBUTE30      => r_EFP.INFORMATION140
             ,P_EFP_ATTRIBUTE4      => r_EFP.INFORMATION114
             ,P_EFP_ATTRIBUTE5      => r_EFP.INFORMATION115
             ,P_EFP_ATTRIBUTE6      => r_EFP.INFORMATION116
             ,P_EFP_ATTRIBUTE7      => r_EFP.INFORMATION117
             ,P_EFP_ATTRIBUTE8      => r_EFP.INFORMATION118
             ,P_EFP_ATTRIBUTE9      => r_EFP.INFORMATION119
             ,P_EFP_ATTRIBUTE_CATEGORY      => r_EFP.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_FL_TM_PT_TM_PRTE_ID      => l_elig_fl_tm_pt_tm_prte_id
             ,P_EXCLD_FLAG      => r_EFP.INFORMATION11
             ,P_FL_TM_PT_TM_CD      => r_EFP.INFORMATION12
             ,P_ORDR_NUM      => r_EFP.INFORMATION260
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_efp.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_efp.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EFP.information3)) then
             --
             BEN_ELIG_FL_TM_PT_TM_PRTE_API.delete_ELIG_FL_TM_PT_TM_PRTE(
                --
                p_validate                       => false
                ,p_elig_fl_tm_pt_tm_prte_id                   => l_elig_fl_tm_pt_tm_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EFP',r_EFP.information5 ) ;
     --
 end create_EFP_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_EGR_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EGR_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_GRADE_ID  number;
   l_ORDR_NUM  number ;

   cursor c_unique_EGR(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_GRD_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,  cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EGR_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EGR(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EGR_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EGR.elig_grd_prte_id new_value
   from BEN_ELIG_GRD_PRTE_F EGR
   where
   EGR.ELIGY_PRFL_ID    = l_ELIGY_PRFL_ID  and
   EGR.GRADE_ID     = l_GRADE_ID  and
   EGR.ORDR_NUM          = l_ORDR_NUM  and
   EGR.business_group_id  = c_business_group_id
   and   EGR.elig_grd_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_GRD_PRTE_F EGR1
                where
                EGR1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and

                -- Additional Filter
                EGR1.GRADE_ID          = l_GRADE_ID  and
                EGR1.ORDR_NUM          = l_ORDR_NUM  and

                EGR1.business_group_id  = c_business_group_id
                and   EGR1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_GRD_PRTE_F EGR2
                where
                EGR2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and

                -- Additional Filter
                EGR2.GRADE_ID          = l_GRADE_ID  and
                EGR2.ORDR_NUM          = l_ORDR_NUM  and

                EGR2.business_group_id  = c_business_group_id
                and   EGR2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EGR                     c_EGR%rowtype;
   l_elig_grd_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EGR_unique in c_unique_EGR('EGR') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EGR_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EGR_unique.table_route_id '||r_EGR_unique.table_route_id,10);
       hr_utility.set_location(' r_EGR_unique.information1 '||r_EGR_unique.information1,10);
       hr_utility.set_location( 'r_EGR_unique.information2 '||r_EGR_unique.information2,10);
       hr_utility.set_location( 'r_EGR_unique.information3 '||r_EGR_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EGR_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EGR(r_EGR_unique.table_route_id,
                r_EGR_unique.information1,
                r_EGR_unique.information2,
                r_EGR_unique.information3 ) ;
       --
       fetch c_EGR into r_EGR ;
       --
       close c_EGR ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EGR.INFORMATION263,l_dml_operation);
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_GRADE_ID := r_EGR.information176;
       else
         l_GRADE_ID := r_EGR.information174;
       end if;
       --
       l_ORDR_NUM := r_EGR.INFORMATION260 ;
/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EGR_unique.information2 and r_EGR_unique.information3 then
               l_update := true;
               if r_EGR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_GRD_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_GRD_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EGR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EGR_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EGR_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EGR',l_new_value,l_prefix || r_EGR_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EGR_min_max_dates(r_EGR_unique.table_route_id, r_EGR_unique.information1 ) ;
       fetch c_EGR_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EGR_unique.information2);
/**********************moved up from here **********************
       open c_EGR(r_EGR_unique.table_route_id,
                r_EGR_unique.information1,
                r_EGR_unique.information2,
                r_EGR_unique.information3 ) ;
       --
       fetch c_EGR into r_EGR ;
       --
       close c_EGR ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EGR.INFORMATION263,l_dml_operation);
       --
       if BEN_PD_COPY_TO_BEN_ONE.g_mapping_done then
         l_GRADE_ID := r_EGR.information176;
       else
         l_GRADE_ID := r_EGR.information174;
       end if;
       --
       l_ORDR_NUM := r_EGR.INFORMATION260 ;
**********************************************************/


       if l_GRADE_ID is null then
         close c_EGR_min_max_dates;
         --
         BEN_PD_COPY_TO_BEN_three.log_nomapping_data(p_parent_table_alias =>'ELP'
                     ,p_parent_pk_id         => r_EGR.information263
                     ,p_copy_entity_txn_id   => p_copy_entity_txn_id
                     ,p_child_table_alias    => 'EGR'
                     ,p_child_data           => r_EGR.information173 );

         --
       else
         if p_reuse_object_flag = 'Y' then
            if c_EGR_min_max_dates%found then
              -- cursor to find the object
              open c_find_EGR_in_target( l_min_esd,l_max_eed,
                                    p_target_business_group_id, nvl(l_elig_grd_prte_id, -999)  ) ;
              fetch c_find_EGR_in_target into l_new_value ;
              if c_find_EGR_in_target%found then
                --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_GRD_PRTE_F',
                   p_base_key_column => 'ELIG_GRD_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
                if r_EGR_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                   nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_GRD_PRTE_ID'  then
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_GRD_PRTE_ID' ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EGR_unique.information1 ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                   BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EGR_unique.table_route_id;
                   --
                   -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                   --
                   BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                end if ;
                --
                l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
              end if;
              close c_find_EGR_in_target ;
            --
            end if;
         end if ;
         --
         close c_EGR_min_max_dates ;

	  end if; -- bug 4565106

      end if; --if p_dml_operation
       --
       if (not l_object_found_in_target OR l_update) and l_grade_id is not null  then

           --
           l_current_pk_id := r_EGR.information1;
           --
           hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
           hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
           --
           if l_current_pk_id =  l_prev_pk_id  then
             --
             l_first_rec := false ;
             --
           else
             --
             l_first_rec := true ;
             --
           end if ;
           --

           l_effective_date := r_EGR.information2;
           if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
             l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
           end if;

           if l_first_rec and not l_update then
             -- Call Create routine.
             hr_utility.set_location(' BEN_ELIG_GRD_PRTE_F CREATE_ELIG_GRD_PRTE ',20);
             BEN_ELIG_GRD_PRTE_API.CREATE_ELIG_GRD_PRTE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_EGR_ATTRIBUTE1      => r_EGR.INFORMATION111
             ,P_EGR_ATTRIBUTE10      => r_EGR.INFORMATION120
             ,P_EGR_ATTRIBUTE11      => r_EGR.INFORMATION121
             ,P_EGR_ATTRIBUTE12      => r_EGR.INFORMATION122
             ,P_EGR_ATTRIBUTE13      => r_EGR.INFORMATION123
             ,P_EGR_ATTRIBUTE14      => r_EGR.INFORMATION124
             ,P_EGR_ATTRIBUTE15      => r_EGR.INFORMATION125
             ,P_EGR_ATTRIBUTE16      => r_EGR.INFORMATION126
             ,P_EGR_ATTRIBUTE17      => r_EGR.INFORMATION127
             ,P_EGR_ATTRIBUTE18      => r_EGR.INFORMATION128
             ,P_EGR_ATTRIBUTE19      => r_EGR.INFORMATION129
             ,P_EGR_ATTRIBUTE2      => r_EGR.INFORMATION112
             ,P_EGR_ATTRIBUTE20      => r_EGR.INFORMATION130
             ,P_EGR_ATTRIBUTE21      => r_EGR.INFORMATION131
             ,P_EGR_ATTRIBUTE22      => r_EGR.INFORMATION132
             ,P_EGR_ATTRIBUTE23      => r_EGR.INFORMATION133
             ,P_EGR_ATTRIBUTE24      => r_EGR.INFORMATION134
             ,P_EGR_ATTRIBUTE25      => r_EGR.INFORMATION135
             ,P_EGR_ATTRIBUTE26      => r_EGR.INFORMATION136
             ,P_EGR_ATTRIBUTE27      => r_EGR.INFORMATION137
             ,P_EGR_ATTRIBUTE28      => r_EGR.INFORMATION138
             ,P_EGR_ATTRIBUTE29      => r_EGR.INFORMATION139
             ,P_EGR_ATTRIBUTE3      => r_EGR.INFORMATION113
             ,P_EGR_ATTRIBUTE30      => r_EGR.INFORMATION140
             ,P_EGR_ATTRIBUTE4      => r_EGR.INFORMATION114
             ,P_EGR_ATTRIBUTE5      => r_EGR.INFORMATION115
             ,P_EGR_ATTRIBUTE6      => r_EGR.INFORMATION116
             ,P_EGR_ATTRIBUTE7      => r_EGR.INFORMATION117
             ,P_EGR_ATTRIBUTE8      => r_EGR.INFORMATION118
             ,P_EGR_ATTRIBUTE9      => r_EGR.INFORMATION119
             ,P_EGR_ATTRIBUTE_CATEGORY      => r_EGR.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_GRD_PRTE_ID      => l_elig_grd_prte_id
             ,P_EXCLD_FLAG      => r_EGR.INFORMATION11
             ,P_GRADE_ID      => l_GRADE_ID
             ,P_ORDR_NUM      => r_EGR.INFORMATION260
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_egr.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_egr.INFORMATION296
         );
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             -- Update all relevent cer records with new pk_id
             hr_utility.set_location('Before plsql table ',222);
             hr_utility.set_location('new_value id '||l_elig_grd_prte_id,222);
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_GRD_PRTE_ID' ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EGR.information1 ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_GRD_PRTE_ID ;
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
             BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EGR_unique.table_route_id;
             hr_utility.set_location('After plsql table ',222);
             --
             -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
             --
             BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             --
           else
             --
             -- Call Update routine for the pk_id created in prev run .
             -- insert the table_name,old_pk_id,new_pk_id into a plsql record
             hr_utility.set_location(' BEN_ELIG_GRD_PRTE_F UPDATE_ELIG_GRD_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EGR.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EGR.information3,
               p_effective_start_date  => r_EGR.information2,
               p_dml_operation         => r_EGR.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_GRD_PRTE_ID   := r_EGR.information1;
             l_object_version_number := r_EGR.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


             BEN_ELIG_GRD_PRTE_API.UPDATE_ELIG_GRD_PRTE(
                --
                P_VALIDATE               => false
                ,P_EFFECTIVE_DATE        => l_effective_date
                ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
                --
             ,P_EGR_ATTRIBUTE1      => r_EGR.INFORMATION111
             ,P_EGR_ATTRIBUTE10      => r_EGR.INFORMATION120
             ,P_EGR_ATTRIBUTE11      => r_EGR.INFORMATION121
             ,P_EGR_ATTRIBUTE12      => r_EGR.INFORMATION122
             ,P_EGR_ATTRIBUTE13      => r_EGR.INFORMATION123
             ,P_EGR_ATTRIBUTE14      => r_EGR.INFORMATION124
             ,P_EGR_ATTRIBUTE15      => r_EGR.INFORMATION125
             ,P_EGR_ATTRIBUTE16      => r_EGR.INFORMATION126
             ,P_EGR_ATTRIBUTE17      => r_EGR.INFORMATION127
             ,P_EGR_ATTRIBUTE18      => r_EGR.INFORMATION128
             ,P_EGR_ATTRIBUTE19      => r_EGR.INFORMATION129
             ,P_EGR_ATTRIBUTE2      => r_EGR.INFORMATION112
             ,P_EGR_ATTRIBUTE20      => r_EGR.INFORMATION130
             ,P_EGR_ATTRIBUTE21      => r_EGR.INFORMATION131
             ,P_EGR_ATTRIBUTE22      => r_EGR.INFORMATION132
             ,P_EGR_ATTRIBUTE23      => r_EGR.INFORMATION133
             ,P_EGR_ATTRIBUTE24      => r_EGR.INFORMATION134
             ,P_EGR_ATTRIBUTE25      => r_EGR.INFORMATION135
             ,P_EGR_ATTRIBUTE26      => r_EGR.INFORMATION136
             ,P_EGR_ATTRIBUTE27      => r_EGR.INFORMATION137
             ,P_EGR_ATTRIBUTE28      => r_EGR.INFORMATION138
             ,P_EGR_ATTRIBUTE29      => r_EGR.INFORMATION139
             ,P_EGR_ATTRIBUTE3      => r_EGR.INFORMATION113
             ,P_EGR_ATTRIBUTE30      => r_EGR.INFORMATION140
             ,P_EGR_ATTRIBUTE4      => r_EGR.INFORMATION114
             ,P_EGR_ATTRIBUTE5      => r_EGR.INFORMATION115
             ,P_EGR_ATTRIBUTE6      => r_EGR.INFORMATION116
             ,P_EGR_ATTRIBUTE7      => r_EGR.INFORMATION117
             ,P_EGR_ATTRIBUTE8      => r_EGR.INFORMATION118
             ,P_EGR_ATTRIBUTE9      => r_EGR.INFORMATION119
             ,P_EGR_ATTRIBUTE_CATEGORY      => r_EGR.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_GRD_PRTE_ID      => l_elig_grd_prte_id
             ,P_EXCLD_FLAG      => r_EGR.INFORMATION11
             ,P_GRADE_ID      => l_GRADE_ID
             ,P_ORDR_NUM      => r_EGR.INFORMATION260
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_egr.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_egr.INFORMATION296
         );
	end if;  -- l_update
             --
           end if;
           --
           -- Delete the row if it is end dated.
           --
           if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
                trunc(l_max_eed) = trunc(r_EGR.information3)) then
                --
                BEN_ELIG_GRD_PRTE_API.delete_ELIG_GRD_PRTE(
                   --
                   p_validate                       => false
                   ,p_elig_grd_prte_id                   => l_elig_grd_prte_id
                   ,p_effective_start_date           => l_effective_start_date
                   ,p_effective_end_date             => l_effective_end_date
                   ,p_object_version_number          => l_object_version_number
                   ,p_effective_date                 => l_max_eed
                   ,p_datetrack_mode                 => hr_api.g_delete
                   --
                   );
                   --
           end if;
           --
           l_prev_pk_id := l_current_pk_id ;
           --
        -- end if; -- bug 4565106
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EGR',r_EGR.information5 ) ;
     --
 end create_EGR_rows;

   --
   ---------------------------------------------------------------
   ----------------------< create_EHS_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EHS_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_HRLY_SLRD_CD   varchar2(30);

   cursor c_unique_EHS(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_HRLY_SLRD_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3,  cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EHS_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EHS(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EHS_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EHS.elig_hrly_slrd_prte_id new_value
   from BEN_ELIG_HRLY_SLRD_PRTE_F EHS
   where
   EHS.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EHS.business_group_id  = c_business_group_id
   and   EHS.elig_hrly_slrd_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_HRLY_SLRD_PRTE_F EHS1
                where
                EHS1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and

                -- Additional  Filter Condition
                EHS1.HRLY_SLRD_CD      = l_HRLY_SLRD_CD   and

                EHS1.business_group_id  = c_business_group_id
                and   EHS1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_HRLY_SLRD_PRTE_F EHS2
                where
                EHS2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and

                -- Additional  Filter Condition
                EHS2.HRLY_SLRD_CD      = l_HRLY_SLRD_CD   and

                EHS2.business_group_id  = c_business_group_id
                and   EHS2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EHS                     c_EHS%rowtype;
   l_elig_hrly_slrd_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EHS_unique in c_unique_EHS('EHS') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EHS_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EHS_unique.table_route_id '||r_EHS_unique.table_route_id,10);
       hr_utility.set_location(' r_EHS_unique.information1 '||r_EHS_unique.information1,10);
       hr_utility.set_location( 'r_EHS_unique.information2 '||r_EHS_unique.information2,10);
       hr_utility.set_location( 'r_EHS_unique.information3 '||r_EHS_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EHS_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EHS(r_EHS_unique.table_route_id,
                r_EHS_unique.information1,
                r_EHS_unique.information2,
                r_EHS_unique.information3 ) ;
       --
       fetch c_EHS into r_EHS ;
       --
       close c_EHS ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EHS.INFORMATION263,l_dml_operation);
       -- Additional Change
       l_HRLY_SLRD_CD  := r_EHS.INFORMATION11 ;

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EHS_unique.information2 and r_EHS_unique.information3 then
               l_update := true;
               if r_EHS_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_HRLY_SLRD_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_HRLY_SLRD_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EHS_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EHS_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EHS_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EHS',l_new_value,l_prefix || r_EHS_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EHS_min_max_dates(r_EHS_unique.table_route_id, r_EHS_unique.information1 ) ;
       fetch c_EHS_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
        l_min_esd := greatest(l_min_esd,r_EHS_unique.information2);
/**********************moved up from here **********************
       open c_EHS(r_EHS_unique.table_route_id,
                r_EHS_unique.information1,
                r_EHS_unique.information2,
                r_EHS_unique.information3 ) ;
       --
       fetch c_EHS into r_EHS ;
       --
       close c_EHS ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EHS.INFORMATION263,l_dml_operation);
       -- Additional Change
       l_HRLY_SLRD_CD  := r_EHS.INFORMATION11 ;

**********************************************************/


       if p_reuse_object_flag = 'Y' then
         if c_EHS_min_max_dates%found then
           -- cursor to find the object
           open c_find_EHS_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_hrly_slrd_prte_id, -999)  ) ;
           fetch c_find_EHS_in_target into l_new_value ;
           if c_find_EHS_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_HRLY_SLRD_PRTE_F',
                   p_base_key_column => 'ELIG_HRLY_SLRD_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EHS_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_HRLY_SLRD_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_HRLY_SLRD_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EHS_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EHS_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EHS_in_target ;
         --
         end if;
       end if ;
       --
       close c_EHS_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EHS.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EHS.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_HRLY_SLRD_PRTE_F CREATE_ELIG_HRLY_SLRD_PRTE ',20);
           BEN_ELIG_HRLY_SLRD_PRTE_API.CREATE_ELIG_HRLY_SLRD_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EHS_ATTRIBUTE1      => r_EHS.INFORMATION111
             ,P_EHS_ATTRIBUTE10      => r_EHS.INFORMATION120
             ,P_EHS_ATTRIBUTE11      => r_EHS.INFORMATION121
             ,P_EHS_ATTRIBUTE12      => r_EHS.INFORMATION122
             ,P_EHS_ATTRIBUTE13      => r_EHS.INFORMATION123
             ,P_EHS_ATTRIBUTE14      => r_EHS.INFORMATION124
             ,P_EHS_ATTRIBUTE15      => r_EHS.INFORMATION125
             ,P_EHS_ATTRIBUTE16      => r_EHS.INFORMATION126
             ,P_EHS_ATTRIBUTE17      => r_EHS.INFORMATION127
             ,P_EHS_ATTRIBUTE18      => r_EHS.INFORMATION128
             ,P_EHS_ATTRIBUTE19      => r_EHS.INFORMATION129
             ,P_EHS_ATTRIBUTE2      => r_EHS.INFORMATION112
             ,P_EHS_ATTRIBUTE20      => r_EHS.INFORMATION130
             ,P_EHS_ATTRIBUTE21      => r_EHS.INFORMATION131
             ,P_EHS_ATTRIBUTE22      => r_EHS.INFORMATION132
             ,P_EHS_ATTRIBUTE23      => r_EHS.INFORMATION133
             ,P_EHS_ATTRIBUTE24      => r_EHS.INFORMATION134
             ,P_EHS_ATTRIBUTE25      => r_EHS.INFORMATION135
             ,P_EHS_ATTRIBUTE26      => r_EHS.INFORMATION136
             ,P_EHS_ATTRIBUTE27      => r_EHS.INFORMATION137
             ,P_EHS_ATTRIBUTE28      => r_EHS.INFORMATION138
             ,P_EHS_ATTRIBUTE29      => r_EHS.INFORMATION139
             ,P_EHS_ATTRIBUTE3      => r_EHS.INFORMATION113
             ,P_EHS_ATTRIBUTE30      => r_EHS.INFORMATION140
             ,P_EHS_ATTRIBUTE4      => r_EHS.INFORMATION114
             ,P_EHS_ATTRIBUTE5      => r_EHS.INFORMATION115
             ,P_EHS_ATTRIBUTE6      => r_EHS.INFORMATION116
             ,P_EHS_ATTRIBUTE7      => r_EHS.INFORMATION117
             ,P_EHS_ATTRIBUTE8      => r_EHS.INFORMATION118
             ,P_EHS_ATTRIBUTE9      => r_EHS.INFORMATION119
             ,P_EHS_ATTRIBUTE_CATEGORY      => r_EHS.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_HRLY_SLRD_PRTE_ID      => l_elig_hrly_slrd_prte_id
             ,P_EXCLD_FLAG      => r_EHS.INFORMATION12
             ,P_HRLY_SLRD_CD      => r_EHS.INFORMATION11
             ,P_ORDR_NUM      => r_EHS.INFORMATION260
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_ehs.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_ehs.INFORMATION296
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_hrly_slrd_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_HRLY_SLRD_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EHS.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_HRLY_SLRD_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EHS_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_HRLY_SLRD_PRTE_F UPDATE_ELIG_HRLY_SLRD_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EHS.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EHS.information3,
               p_effective_start_date  => r_EHS.information2,
               p_dml_operation         => r_EHS.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_HRLY_SLRD_PRTE_ID   := r_EHS.information1;
             l_object_version_number := r_EHS.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_HRLY_SLRD_PRTE_API.UPDATE_ELIG_HRLY_SLRD_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EHS_ATTRIBUTE1      => r_EHS.INFORMATION111
             ,P_EHS_ATTRIBUTE10      => r_EHS.INFORMATION120
             ,P_EHS_ATTRIBUTE11      => r_EHS.INFORMATION121
             ,P_EHS_ATTRIBUTE12      => r_EHS.INFORMATION122
             ,P_EHS_ATTRIBUTE13      => r_EHS.INFORMATION123
             ,P_EHS_ATTRIBUTE14      => r_EHS.INFORMATION124
             ,P_EHS_ATTRIBUTE15      => r_EHS.INFORMATION125
             ,P_EHS_ATTRIBUTE16      => r_EHS.INFORMATION126
             ,P_EHS_ATTRIBUTE17      => r_EHS.INFORMATION127
             ,P_EHS_ATTRIBUTE18      => r_EHS.INFORMATION128
             ,P_EHS_ATTRIBUTE19      => r_EHS.INFORMATION129
             ,P_EHS_ATTRIBUTE2      => r_EHS.INFORMATION112
             ,P_EHS_ATTRIBUTE20      => r_EHS.INFORMATION130
             ,P_EHS_ATTRIBUTE21      => r_EHS.INFORMATION131
             ,P_EHS_ATTRIBUTE22      => r_EHS.INFORMATION132
             ,P_EHS_ATTRIBUTE23      => r_EHS.INFORMATION133
             ,P_EHS_ATTRIBUTE24      => r_EHS.INFORMATION134
             ,P_EHS_ATTRIBUTE25      => r_EHS.INFORMATION135
             ,P_EHS_ATTRIBUTE26      => r_EHS.INFORMATION136
             ,P_EHS_ATTRIBUTE27      => r_EHS.INFORMATION137
             ,P_EHS_ATTRIBUTE28      => r_EHS.INFORMATION138
             ,P_EHS_ATTRIBUTE29      => r_EHS.INFORMATION139
             ,P_EHS_ATTRIBUTE3      => r_EHS.INFORMATION113
             ,P_EHS_ATTRIBUTE30      => r_EHS.INFORMATION140
             ,P_EHS_ATTRIBUTE4      => r_EHS.INFORMATION114
             ,P_EHS_ATTRIBUTE5      => r_EHS.INFORMATION115
             ,P_EHS_ATTRIBUTE6      => r_EHS.INFORMATION116
             ,P_EHS_ATTRIBUTE7      => r_EHS.INFORMATION117
             ,P_EHS_ATTRIBUTE8      => r_EHS.INFORMATION118
             ,P_EHS_ATTRIBUTE9      => r_EHS.INFORMATION119
             ,P_EHS_ATTRIBUTE_CATEGORY      => r_EHS.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_HRLY_SLRD_PRTE_ID      => l_elig_hrly_slrd_prte_id
             ,P_EXCLD_FLAG      => r_EHS.INFORMATION12
             ,P_HRLY_SLRD_CD      => r_EHS.INFORMATION11
             ,P_ORDR_NUM      => r_EHS.INFORMATION260
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_ehs.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_ehs.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EHS.information3)) then
             --
             BEN_ELIG_HRLY_SLRD_PRTE_API.delete_ELIG_HRLY_SLRD_PRTE(
                --
                p_validate                       => false
                ,p_elig_hrly_slrd_prte_id                   => l_elig_hrly_slrd_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EHS',r_EHS.information5 ) ;
     --
 end create_EHS_rows;

 --
 ---------------------------------------------------------------
 ----------------------< create_ERG_rows >-----------------------
 ---------------------------------------------------------------
 --
   procedure create_ERG_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_EVENT_TYPE     ben_elig_perf_rtng_prte_f.event_type%type;
   l_ORDR_NUM       ben_elig_perf_rtng_prte_f.ordr_num%type;
   l_PERF_RTNG_CD   ben_elig_perf_rtng_prte_f.perf_rtng_cd%type;

   cursor c_unique_ERG(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_PERF_RTNG_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ERG_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ERG(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ERG_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ERG.elig_perf_rtng_prte_id new_value
   from BEN_ELIG_PERF_RTNG_PRTE_F ERG
   where
   ERG.ELIGY_PRFL_ID      = l_ELIGY_PRFL_ID  and
   ERG.EVENT_TYPE         = l_EVENT_TYPE  and
   ERG.ORDR_NUM           = l_ORDR_NUM  and
   ERG.PERF_RTNG_CD       = l_PERF_RTNG_CD  and
   ERG.business_group_id  = c_business_group_id
   and   ERG.elig_perf_rtng_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_PERF_RTNG_PRTE_F ERG1
                where
                ERG1.ELIGY_PRFL_ID      = l_ELIGY_PRFL_ID  and
                ERG1.EVENT_TYPE         = l_EVENT_TYPE  and
                ERG1.ORDR_NUM           = l_ORDR_NUM  and
                ERG1.PERF_RTNG_CD       = l_PERF_RTNG_CD  and
                ERG1.business_group_id  = c_business_group_id
                and   ERG1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_PERF_RTNG_PRTE_F ERG2
                where
                ERG2.ELIGY_PRFL_ID      = l_ELIGY_PRFL_ID  and
                ERG2.EVENT_TYPE         = l_EVENT_TYPE  and
                ERG2.ORDR_NUM           = l_ORDR_NUM  and
                ERG2.PERF_RTNG_CD       = l_PERF_RTNG_CD  and
                ERG2.business_group_id  = c_business_group_id
                and   ERG2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ERG                     c_ERG%rowtype;
   l_elig_perf_rtng_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ERG_unique in c_unique_ERG('ERG') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ERG_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_ERG_unique.table_route_id '||r_ERG_unique.table_route_id,10);
       hr_utility.set_location(' r_ERG_unique.information1 '||r_ERG_unique.information1,10);
       hr_utility.set_location( 'r_ERG_unique.information2 '||r_ERG_unique.information2,10);
       hr_utility.set_location( 'r_ERG_unique.information3 '||r_ERG_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ERG_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_ERG(r_ERG_unique.table_route_id,
                r_ERG_unique.information1,
                r_ERG_unique.information2,
                r_ERG_unique.information3 ) ;
       --
       fetch c_ERG into r_ERG ;
       --
       close c_ERG ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ERG.INFORMATION263,l_dml_operation);
       l_EVENT_TYPE    := r_ERG.INFORMATION13;
       l_ORDR_NUM      := r_ERG.INFORMATION257;
       l_PERF_RTNG_CD  := r_ERG.INFORMATION12;
/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ERG_unique.information2 and r_ERG_unique.information3 then
               l_update := true;
               if r_ERG_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_PERF_RTNG_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_PERF_RTNG_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ERG_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ERG_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ERG_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ERG',l_new_value,l_prefix || r_ERG_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ERG_min_max_dates(r_ERG_unique.table_route_id, r_ERG_unique.information1 ) ;
       fetch c_ERG_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
        l_min_esd := greatest(l_min_esd,r_ERG_unique.information2);
/**********************moved up from here **********************
       open c_ERG(r_ERG_unique.table_route_id,
                r_ERG_unique.information1,
                r_ERG_unique.information2,
                r_ERG_unique.information3 ) ;
       --
       fetch c_ERG into r_ERG ;
       --
       close c_ERG ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ERG.INFORMATION263,l_dml_operation);
       l_EVENT_TYPE    := r_ERG.INFORMATION13;
       l_ORDR_NUM      := r_ERG.INFORMATION257;
       l_PERF_RTNG_CD  := r_ERG.INFORMATION12;
**********************************************************/


       if p_reuse_object_flag = 'Y' then
         if c_ERG_min_max_dates%found then
           -- cursor to find the object
           open c_find_ERG_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_perf_rtng_prte_id, -999)  ) ;
           fetch c_find_ERG_in_target into l_new_value ;
           if c_find_ERG_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_PERF_RTNG_PRTE_F',
                   p_base_key_column => 'ELIG_PERF_RTNG_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_ERG_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_PERF_RTNG_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_PERF_RTNG_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ERG_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ERG_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_ERG_in_target ;
         --
         end if;
       end if ;
       --
       close c_ERG_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_ERG.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_ERG.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
                l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_PERF_RTNG_PRTE_F CREATE_ELIG_PERF_RTNG_PRTE ',20);
           BEN_ELIG_PERF_RTNG_PRTE_API.CREATE_ELIG_PERF_RTNG_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_PERF_RTNG_PRTE_ID      => l_elig_perf_rtng_prte_id
             ,P_ERG_ATTRIBUTE1      => r_ERG.INFORMATION111
             ,P_ERG_ATTRIBUTE10      => r_ERG.INFORMATION120
             ,P_ERG_ATTRIBUTE11      => r_ERG.INFORMATION121
             ,P_ERG_ATTRIBUTE12      => r_ERG.INFORMATION122
             ,P_ERG_ATTRIBUTE13      => r_ERG.INFORMATION123
             ,P_ERG_ATTRIBUTE14      => r_ERG.INFORMATION124
             ,P_ERG_ATTRIBUTE15      => r_ERG.INFORMATION125
             ,P_ERG_ATTRIBUTE16      => r_ERG.INFORMATION126
             ,P_ERG_ATTRIBUTE17      => r_ERG.INFORMATION127
             ,P_ERG_ATTRIBUTE18      => r_ERG.INFORMATION128
             ,P_ERG_ATTRIBUTE19      => r_ERG.INFORMATION129
             ,P_ERG_ATTRIBUTE2      => r_ERG.INFORMATION112
             ,P_ERG_ATTRIBUTE20      => r_ERG.INFORMATION130
             ,P_ERG_ATTRIBUTE21      => r_ERG.INFORMATION131
             ,P_ERG_ATTRIBUTE22      => r_ERG.INFORMATION132
             ,P_ERG_ATTRIBUTE23      => r_ERG.INFORMATION133
             ,P_ERG_ATTRIBUTE24      => r_ERG.INFORMATION134
             ,P_ERG_ATTRIBUTE25      => r_ERG.INFORMATION135
             ,P_ERG_ATTRIBUTE26      => r_ERG.INFORMATION136
             ,P_ERG_ATTRIBUTE27      => r_ERG.INFORMATION137
             ,P_ERG_ATTRIBUTE28      => r_ERG.INFORMATION138
             ,P_ERG_ATTRIBUTE29      => r_ERG.INFORMATION139
             ,P_ERG_ATTRIBUTE3      => r_ERG.INFORMATION113
             ,P_ERG_ATTRIBUTE30      => r_ERG.INFORMATION140
             ,P_ERG_ATTRIBUTE4      => r_ERG.INFORMATION114
             ,P_ERG_ATTRIBUTE5      => r_ERG.INFORMATION115
             ,P_ERG_ATTRIBUTE6      => r_ERG.INFORMATION116
             ,P_ERG_ATTRIBUTE7      => r_ERG.INFORMATION117
             ,P_ERG_ATTRIBUTE8      => r_ERG.INFORMATION118
             ,P_ERG_ATTRIBUTE9      => r_ERG.INFORMATION119
             ,P_ERG_ATTRIBUTE_CATEGORY      => r_ERG.INFORMATION110
             ,P_EVENT_TYPE      => r_ERG.INFORMATION13
             ,P_EXCLD_FLAG      => r_ERG.INFORMATION11
             ,P_ORDR_NUM      => r_ERG.INFORMATION257
             ,P_PERF_RTNG_CD      => r_ERG.INFORMATION12
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_erg.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_erg.INFORMATION296
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_perf_rtng_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_PERF_RTNG_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ERG.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_PERF_RTNG_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ERG_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_PERF_RTNG_PRTE_F UPDATE_ELIG_PERF_RTNG_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ERG.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ERG.information3,
               p_effective_start_date  => r_ERG.information2,
               p_dml_operation         => r_ERG.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_PERF_RTNG_PRTE_ID   := r_ERG.information1;
             l_object_version_number := r_ERG.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_PERF_RTNG_PRTE_API.UPDATE_ELIG_PERF_RTNG_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_PERF_RTNG_PRTE_ID      => l_elig_perf_rtng_prte_id
             ,P_ERG_ATTRIBUTE1      => r_ERG.INFORMATION111
             ,P_ERG_ATTRIBUTE10      => r_ERG.INFORMATION120
             ,P_ERG_ATTRIBUTE11      => r_ERG.INFORMATION121
             ,P_ERG_ATTRIBUTE12      => r_ERG.INFORMATION122
             ,P_ERG_ATTRIBUTE13      => r_ERG.INFORMATION123
             ,P_ERG_ATTRIBUTE14      => r_ERG.INFORMATION124
             ,P_ERG_ATTRIBUTE15      => r_ERG.INFORMATION125
             ,P_ERG_ATTRIBUTE16      => r_ERG.INFORMATION126
             ,P_ERG_ATTRIBUTE17      => r_ERG.INFORMATION127
             ,P_ERG_ATTRIBUTE18      => r_ERG.INFORMATION128
             ,P_ERG_ATTRIBUTE19      => r_ERG.INFORMATION129
             ,P_ERG_ATTRIBUTE2      => r_ERG.INFORMATION112
             ,P_ERG_ATTRIBUTE20      => r_ERG.INFORMATION130
             ,P_ERG_ATTRIBUTE21      => r_ERG.INFORMATION131
             ,P_ERG_ATTRIBUTE22      => r_ERG.INFORMATION132
             ,P_ERG_ATTRIBUTE23      => r_ERG.INFORMATION133
             ,P_ERG_ATTRIBUTE24      => r_ERG.INFORMATION134
             ,P_ERG_ATTRIBUTE25      => r_ERG.INFORMATION135
             ,P_ERG_ATTRIBUTE26      => r_ERG.INFORMATION136
             ,P_ERG_ATTRIBUTE27      => r_ERG.INFORMATION137
             ,P_ERG_ATTRIBUTE28      => r_ERG.INFORMATION138
             ,P_ERG_ATTRIBUTE29      => r_ERG.INFORMATION139
             ,P_ERG_ATTRIBUTE3      => r_ERG.INFORMATION113
             ,P_ERG_ATTRIBUTE30      => r_ERG.INFORMATION140
             ,P_ERG_ATTRIBUTE4      => r_ERG.INFORMATION114
             ,P_ERG_ATTRIBUTE5      => r_ERG.INFORMATION115
             ,P_ERG_ATTRIBUTE6      => r_ERG.INFORMATION116
             ,P_ERG_ATTRIBUTE7      => r_ERG.INFORMATION117
             ,P_ERG_ATTRIBUTE8      => r_ERG.INFORMATION118
             ,P_ERG_ATTRIBUTE9      => r_ERG.INFORMATION119
             ,P_ERG_ATTRIBUTE_CATEGORY      => r_ERG.INFORMATION110
             ,P_EVENT_TYPE      => r_ERG.INFORMATION13
             ,P_EXCLD_FLAG      => r_ERG.INFORMATION11
             ,P_ORDR_NUM      => r_ERG.INFORMATION257
             ,P_PERF_RTNG_CD      => r_ERG.INFORMATION12
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_erg.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_erg.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_ERG.information3)) then
             --
             BEN_ELIG_PERF_RTNG_PRTE_API.delete_ELIG_PERF_RTNG_PRTE(
                --
                p_validate                       => false
                ,p_elig_perf_rtng_prte_id                   => l_elig_perf_rtng_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ERG',r_ERG.information5 ) ;
     --
 end create_ERG_rows;

 --
 ---------------------------------------------------------------
 ----------------------< create_EQG_rows >-----------------------
 ---------------------------------------------------------------
 --
 procedure create_EQG_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_QUAR_IN_GRADE_CD ben_elig_qua_in_gr_prte_f.quar_in_grade_cd%type;
   l_ORDR_NUM         ben_elig_qua_in_gr_prte_f.ordr_num%type;

   cursor c_unique_EQG(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_QUA_IN_GR_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EQG_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EQG(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EQG_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EQG.elig_qua_in_gr_prte_id new_value
   from BEN_ELIG_QUA_IN_GR_PRTE_F EQG
   where
   EQG.ELIGY_PRFL_ID      = l_ELIGY_PRFL_ID  and
   EQG.QUAR_IN_GRADE_CD   = l_QUAR_IN_GRADE_CD and
   EQG.ORDR_NUM           = l_ORDR_NUM and
   EQG.business_group_id  = c_business_group_id
   and   EQG.elig_qua_in_gr_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_QUA_IN_GR_PRTE_F EQG1
                where
                EQG1.ELIGY_PRFL_ID      = l_ELIGY_PRFL_ID  and
                EQG1.QUAR_IN_GRADE_CD   = l_QUAR_IN_GRADE_CD and
                EQG1.ORDR_NUM           = l_ORDR_NUM and
                EQG1.business_group_id  = c_business_group_id
                and   EQG1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_QUA_IN_GR_PRTE_F EQG2
                where
                EQG2.ELIGY_PRFL_ID      = l_ELIGY_PRFL_ID  and
                EQG2.QUAR_IN_GRADE_CD   = l_QUAR_IN_GRADE_CD and
                EQG2.ORDR_NUM           = l_ORDR_NUM and
                EQG2.business_group_id  = c_business_group_id
                and   EQG2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EQG                     c_EQG%rowtype;
   l_elig_qua_in_gr_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EQG_unique in c_unique_EQG('EQG') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_EQG_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_EQG_unique.table_route_id '||r_EQG_unique.table_route_id,10);
       hr_utility.set_location(' r_EQG_unique.information1 '||r_EQG_unique.information1,10);
       hr_utility.set_location( 'r_EQG_unique.information2 '||r_EQG_unique.information2,10);
       hr_utility.set_location( 'r_EQG_unique.information3 '||r_EQG_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EQG_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EQG(r_EQG_unique.table_route_id,
                r_EQG_unique.information1,
                r_EQG_unique.information2,
                r_EQG_unique.information3 ) ;
       --
       fetch c_EQG into r_EQG ;
       --
       close c_EQG ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EQG.INFORMATION263,l_dml_operation);
       l_QUAR_IN_GRADE_CD := r_EQG.INFORMATION11;
       l_ORDR_NUM :=   r_EQG.INFORMATION260;
/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EQG_unique.information2 and r_EQG_unique.information3 then
               l_update := true;
               if r_EQG_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_QUA_IN_GR_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_QUA_IN_GR_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EQG_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EQG_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EQG_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EQG',l_new_value,l_prefix || r_EQG_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EQG_min_max_dates(r_EQG_unique.table_route_id, r_EQG_unique.information1 ) ;
       fetch c_EQG_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EQG_unique.information2);
/**********************moved up from here **********************
       open c_EQG(r_EQG_unique.table_route_id,
                r_EQG_unique.information1,
                r_EQG_unique.information2,
                r_EQG_unique.information3 ) ;
       --
       fetch c_EQG into r_EQG ;
       --
       close c_EQG ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EQG.INFORMATION263,l_dml_operation);
       l_QUAR_IN_GRADE_CD := r_EQG.INFORMATION11;
       l_ORDR_NUM :=   r_EQG.INFORMATION260;
**********************************************************/


       if p_reuse_object_flag = 'Y' then
         if c_EQG_min_max_dates%found then
           -- cursor to find the object
           open c_find_EQG_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_qua_in_gr_prte_id, -999)  ) ;
           fetch c_find_EQG_in_target into l_new_value ;
           if c_find_EQG_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_QUA_IN_GR_PRTE_F',
                   p_base_key_column => 'ELIG_QUA_IN_GR_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EQG_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_QUA_IN_GR_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_QUA_IN_GR_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EQG_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EQG_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EQG_in_target ;
         --
         end if;
       end if ;
       --
       close c_EQG_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EQG.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EQG.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_QUA_IN_GR_PRTE_F CREATE_ELIG_QUA_IN_GR_PRTE ',20);
           BEN_ELIG_QUA_IN_GR_PRTE_API.CREATE_ELIG_QUA_IN_GR_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_QUA_IN_GR_PRTE_ID      => l_elig_qua_in_gr_prte_id
             ,P_EQG_ATTRIBUTE1      => r_EQG.INFORMATION111
             ,P_EQG_ATTRIBUTE10      => r_EQG.INFORMATION120
             ,P_EQG_ATTRIBUTE11      => r_EQG.INFORMATION121
             ,P_EQG_ATTRIBUTE12      => r_EQG.INFORMATION122
             ,P_EQG_ATTRIBUTE13      => r_EQG.INFORMATION123
             ,P_EQG_ATTRIBUTE14      => r_EQG.INFORMATION124
             ,P_EQG_ATTRIBUTE15      => r_EQG.INFORMATION125
             ,P_EQG_ATTRIBUTE16      => r_EQG.INFORMATION126
             ,P_EQG_ATTRIBUTE17      => r_EQG.INFORMATION127
             ,P_EQG_ATTRIBUTE18      => r_EQG.INFORMATION128
             ,P_EQG_ATTRIBUTE19      => r_EQG.INFORMATION129
             ,P_EQG_ATTRIBUTE2      => r_EQG.INFORMATION112
             ,P_EQG_ATTRIBUTE20      => r_EQG.INFORMATION130
             ,P_EQG_ATTRIBUTE21      => r_EQG.INFORMATION131
             ,P_EQG_ATTRIBUTE22      => r_EQG.INFORMATION132
             ,P_EQG_ATTRIBUTE23      => r_EQG.INFORMATION133
             ,P_EQG_ATTRIBUTE24      => r_EQG.INFORMATION134
             ,P_EQG_ATTRIBUTE25      => r_EQG.INFORMATION135
             ,P_EQG_ATTRIBUTE26      => r_EQG.INFORMATION136
             ,P_EQG_ATTRIBUTE27      => r_EQG.INFORMATION137
             ,P_EQG_ATTRIBUTE28      => r_EQG.INFORMATION138
             ,P_EQG_ATTRIBUTE29      => r_EQG.INFORMATION139
             ,P_EQG_ATTRIBUTE3      => r_EQG.INFORMATION113
             ,P_EQG_ATTRIBUTE30      => r_EQG.INFORMATION140
             ,P_EQG_ATTRIBUTE4      => r_EQG.INFORMATION114
             ,P_EQG_ATTRIBUTE5      => r_EQG.INFORMATION115
             ,P_EQG_ATTRIBUTE6      => r_EQG.INFORMATION116
             ,P_EQG_ATTRIBUTE7      => r_EQG.INFORMATION117
             ,P_EQG_ATTRIBUTE8      => r_EQG.INFORMATION118
             ,P_EQG_ATTRIBUTE9      => r_EQG.INFORMATION119
             ,P_EQG_ATTRIBUTE_CATEGORY      => r_EQG.INFORMATION110
             ,P_EXCLD_FLAG      => r_EQG.INFORMATION12
             ,P_ORDR_NUM      => r_EQG.INFORMATION260
             ,P_QUAR_IN_GRADE_CD      => r_EQG.INFORMATION11
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_eqg.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_eqg.INFORMATION296
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_qua_in_gr_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_QUA_IN_GR_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EQG.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_QUA_IN_GR_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EQG_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_QUA_IN_GR_PRTE_F UPDATE_ELIG_QUA_IN_GR_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EQG.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EQG.information3,
               p_effective_start_date  => r_EQG.information2,
               p_dml_operation         => r_EQG.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_QUA_IN_GR_PRTE_ID   := r_EQG.information1;
             l_object_version_number := r_EQG.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_QUA_IN_GR_PRTE_API.UPDATE_ELIG_QUA_IN_GR_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_QUA_IN_GR_PRTE_ID      => l_elig_qua_in_gr_prte_id
             ,P_EQG_ATTRIBUTE1      => r_EQG.INFORMATION111
             ,P_EQG_ATTRIBUTE10      => r_EQG.INFORMATION120
             ,P_EQG_ATTRIBUTE11      => r_EQG.INFORMATION121
             ,P_EQG_ATTRIBUTE12      => r_EQG.INFORMATION122
             ,P_EQG_ATTRIBUTE13      => r_EQG.INFORMATION123
             ,P_EQG_ATTRIBUTE14      => r_EQG.INFORMATION124
             ,P_EQG_ATTRIBUTE15      => r_EQG.INFORMATION125
             ,P_EQG_ATTRIBUTE16      => r_EQG.INFORMATION126
             ,P_EQG_ATTRIBUTE17      => r_EQG.INFORMATION127
             ,P_EQG_ATTRIBUTE18      => r_EQG.INFORMATION128
             ,P_EQG_ATTRIBUTE19      => r_EQG.INFORMATION129
             ,P_EQG_ATTRIBUTE2      => r_EQG.INFORMATION112
             ,P_EQG_ATTRIBUTE20      => r_EQG.INFORMATION130
             ,P_EQG_ATTRIBUTE21      => r_EQG.INFORMATION131
             ,P_EQG_ATTRIBUTE22      => r_EQG.INFORMATION132
             ,P_EQG_ATTRIBUTE23      => r_EQG.INFORMATION133
             ,P_EQG_ATTRIBUTE24      => r_EQG.INFORMATION134
             ,P_EQG_ATTRIBUTE25      => r_EQG.INFORMATION135
             ,P_EQG_ATTRIBUTE26      => r_EQG.INFORMATION136
             ,P_EQG_ATTRIBUTE27      => r_EQG.INFORMATION137
             ,P_EQG_ATTRIBUTE28      => r_EQG.INFORMATION138
             ,P_EQG_ATTRIBUTE29      => r_EQG.INFORMATION139
             ,P_EQG_ATTRIBUTE3      => r_EQG.INFORMATION113
             ,P_EQG_ATTRIBUTE30      => r_EQG.INFORMATION140
             ,P_EQG_ATTRIBUTE4      => r_EQG.INFORMATION114
             ,P_EQG_ATTRIBUTE5      => r_EQG.INFORMATION115
             ,P_EQG_ATTRIBUTE6      => r_EQG.INFORMATION116
             ,P_EQG_ATTRIBUTE7      => r_EQG.INFORMATION117
             ,P_EQG_ATTRIBUTE8      => r_EQG.INFORMATION118
             ,P_EQG_ATTRIBUTE9      => r_EQG.INFORMATION119
             ,P_EQG_ATTRIBUTE_CATEGORY      => r_EQG.INFORMATION110
             ,P_EXCLD_FLAG      => r_EQG.INFORMATION12
             ,P_ORDR_NUM      => r_EQG.INFORMATION260
             ,P_QUAR_IN_GRADE_CD      => r_EQG.INFORMATION11
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_eqg.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_eqg.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EQG.information3)) then
             --
             BEN_ELIG_QUA_IN_GR_PRTE_API.delete_ELIG_QUA_IN_GR_PRTE(
                --
                p_validate                       => false
                ,p_elig_qua_in_gr_prte_id                   => l_elig_qua_in_gr_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EQG',r_EQG.information5 ) ;
     --
 end create_EQG_rows;

 --
 ---------------------------------------------------------------
 ----------------------< create_EGN_rows >-----------------------
 ---------------------------------------------------------------
 --
 procedure create_EGN_rows
 (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
 ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_SEX            ben_elig_gndr_prte_f.sex%type;
   l_ORDR_NUM       ben_elig_gndr_prte_f.ordr_num%type;
   cursor c_unique_EGN(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_GNDR_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EGN_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EGN(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EGN_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EGN.elig_gndr_prte_id new_value
   from BEN_ELIG_GNDR_PRTE_F EGN
   where
   EGN.ELIGY_PRFL_ID      = l_ELIGY_PRFL_ID  and
   EGN.sex                = l_SEX and
   EGN.ordr_num           = l_ORDR_NUM and
   EGN.business_group_id  = c_business_group_id
   and   EGN.elig_gndr_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_GNDR_PRTE_F EGN1
                where
                EGN1.ELIGY_PRFL_ID      = l_ELIGY_PRFL_ID  and
                EGN1.sex                = l_SEX and
                EGN1.ordr_num           = l_ORDR_NUM and
                EGN1.business_group_id  = c_business_group_id
                and   EGN1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_GNDR_PRTE_F EGN2
                where
                EGN2.ELIGY_PRFL_ID      = l_ELIGY_PRFL_ID  and
                EGN2.sex                = l_SEX and
                EGN2.ordr_num           = l_ORDR_NUM and
                EGN2.business_group_id  = c_business_group_id
                and   EGN2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EGN                     c_EGN%rowtype;
   l_elig_gndr_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EGN_unique in c_unique_EGN('EGN') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
          (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
           r_EGN_unique.information3 >=
                   ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_EGN_unique.table_route_id '||r_EGN_unique.table_route_id,10);
       hr_utility.set_location(' r_EGN_unique.information1 '||r_EGN_unique.information1,10);
       hr_utility.set_location( 'r_EGN_unique.information2 '||r_EGN_unique.information2,10);
       hr_utility.set_location( 'r_EGN_unique.information3 '||r_EGN_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EGN_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EGN(r_EGN_unique.table_route_id,
                r_EGN_unique.information1,
                r_EGN_unique.information2,
                r_EGN_unique.information3 ) ;
       --
       fetch c_EGN into r_EGN ;
       --
       close c_EGN ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EGN.INFORMATION263,l_dml_operation);
       l_SEX :=  r_EGN.INFORMATION11;
       l_ORDR_NUM := r_EGN.INFORMATION257;

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EGN_unique.information2 and r_EGN_unique.information3 then
               l_update := true;
               if r_EGN_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_GNDR_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_GNDR_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EGN_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EGN_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EGN_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EGN',l_new_value,l_prefix || r_EGN_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EGN_min_max_dates(r_EGN_unique.table_route_id, r_EGN_unique.information1 ) ;
       fetch c_EGN_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EGN_unique.information2);
/**********************moved up from here **********************
       open c_EGN(r_EGN_unique.table_route_id,
                r_EGN_unique.information1,
                r_EGN_unique.information2,
                r_EGN_unique.information3 ) ;
       --
       fetch c_EGN into r_EGN ;
       --
       close c_EGN ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EGN.INFORMATION263,l_dml_operation);
       l_SEX :=  r_EGN.INFORMATION11;
       l_ORDR_NUM := r_EGN.INFORMATION257;

**********************************************************/


       if p_reuse_object_flag = 'Y' then
         if c_EGN_min_max_dates%found then
           -- cursor to find the object
           open c_find_EGN_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_gndr_prte_id, -999)  ) ;
           fetch c_find_EGN_in_target into l_new_value ;
           if c_find_EGN_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_GNDR_PRTE_F',
                   p_base_key_column => 'ELIG_GNDR_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EGN_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_GNDR_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_GNDR_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EGN_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EGN_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EGN_in_target ;
         --
         end if;
       end if ;
       --
       close c_EGN_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EGN.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EGN.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_GNDR_PRTE_F CREATE_ELIG_GNDR_PRTE ',20);
           BEN_ELIG_GNDR_PRTE_API.CREATE_ELIG_GNDR_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EGN_ATTRIBUTE1      => r_EGN.INFORMATION111
             ,P_EGN_ATTRIBUTE10      => r_EGN.INFORMATION120
             ,P_EGN_ATTRIBUTE11      => r_EGN.INFORMATION121
             ,P_EGN_ATTRIBUTE12      => r_EGN.INFORMATION122
             ,P_EGN_ATTRIBUTE13      => r_EGN.INFORMATION123
             ,P_EGN_ATTRIBUTE14      => r_EGN.INFORMATION124
             ,P_EGN_ATTRIBUTE15      => r_EGN.INFORMATION125
             ,P_EGN_ATTRIBUTE16      => r_EGN.INFORMATION126
             ,P_EGN_ATTRIBUTE17      => r_EGN.INFORMATION127
             ,P_EGN_ATTRIBUTE18      => r_EGN.INFORMATION128
             ,P_EGN_ATTRIBUTE19      => r_EGN.INFORMATION129
             ,P_EGN_ATTRIBUTE2      => r_EGN.INFORMATION112
             ,P_EGN_ATTRIBUTE20      => r_EGN.INFORMATION130
             ,P_EGN_ATTRIBUTE21      => r_EGN.INFORMATION131
             ,P_EGN_ATTRIBUTE22      => r_EGN.INFORMATION132
             ,P_EGN_ATTRIBUTE23      => r_EGN.INFORMATION133
             ,P_EGN_ATTRIBUTE24      => r_EGN.INFORMATION134
             ,P_EGN_ATTRIBUTE25      => r_EGN.INFORMATION135
             ,P_EGN_ATTRIBUTE26      => r_EGN.INFORMATION136
             ,P_EGN_ATTRIBUTE27      => r_EGN.INFORMATION137
             ,P_EGN_ATTRIBUTE28      => r_EGN.INFORMATION138
             ,P_EGN_ATTRIBUTE29      => r_EGN.INFORMATION139
             ,P_EGN_ATTRIBUTE3      => r_EGN.INFORMATION113
             ,P_EGN_ATTRIBUTE30      => r_EGN.INFORMATION140
             ,P_EGN_ATTRIBUTE4      => r_EGN.INFORMATION114
             ,P_EGN_ATTRIBUTE5      => r_EGN.INFORMATION115
             ,P_EGN_ATTRIBUTE6      => r_EGN.INFORMATION116
             ,P_EGN_ATTRIBUTE7      => r_EGN.INFORMATION117
             ,P_EGN_ATTRIBUTE8      => r_EGN.INFORMATION118
             ,P_EGN_ATTRIBUTE9      => r_EGN.INFORMATION119
             ,P_EGN_ATTRIBUTE_CATEGORY      => r_EGN.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_GNDR_PRTE_ID      => l_elig_gndr_prte_id
             ,P_EXCLD_FLAG      => r_EGN.INFORMATION12
             ,P_ORDR_NUM      => r_EGN.INFORMATION257
             ,P_SEX      => r_EGN.INFORMATION11
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_egn.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_egn.INFORMATION296
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_gndr_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_GNDR_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EGN.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_GNDR_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EGN_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_GNDR_PRTE_F UPDATE_ELIG_GNDR_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EGN.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EGN.information3,
               p_effective_start_date  => r_EGN.information2,
               p_dml_operation         => r_EGN.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_GNDR_PRTE_ID   := r_EGN.information1;
             l_object_version_number := r_EGN.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_GNDR_PRTE_API.UPDATE_ELIG_GNDR_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EGN_ATTRIBUTE1      => r_EGN.INFORMATION111
             ,P_EGN_ATTRIBUTE10      => r_EGN.INFORMATION120
             ,P_EGN_ATTRIBUTE11      => r_EGN.INFORMATION121
             ,P_EGN_ATTRIBUTE12      => r_EGN.INFORMATION122
             ,P_EGN_ATTRIBUTE13      => r_EGN.INFORMATION123
             ,P_EGN_ATTRIBUTE14      => r_EGN.INFORMATION124
             ,P_EGN_ATTRIBUTE15      => r_EGN.INFORMATION125
             ,P_EGN_ATTRIBUTE16      => r_EGN.INFORMATION126
             ,P_EGN_ATTRIBUTE17      => r_EGN.INFORMATION127
             ,P_EGN_ATTRIBUTE18      => r_EGN.INFORMATION128
             ,P_EGN_ATTRIBUTE19      => r_EGN.INFORMATION129
             ,P_EGN_ATTRIBUTE2      => r_EGN.INFORMATION112
             ,P_EGN_ATTRIBUTE20      => r_EGN.INFORMATION130
             ,P_EGN_ATTRIBUTE21      => r_EGN.INFORMATION131
             ,P_EGN_ATTRIBUTE22      => r_EGN.INFORMATION132
             ,P_EGN_ATTRIBUTE23      => r_EGN.INFORMATION133
             ,P_EGN_ATTRIBUTE24      => r_EGN.INFORMATION134
             ,P_EGN_ATTRIBUTE25      => r_EGN.INFORMATION135
             ,P_EGN_ATTRIBUTE26      => r_EGN.INFORMATION136
             ,P_EGN_ATTRIBUTE27      => r_EGN.INFORMATION137
             ,P_EGN_ATTRIBUTE28      => r_EGN.INFORMATION138
             ,P_EGN_ATTRIBUTE29      => r_EGN.INFORMATION139
             ,P_EGN_ATTRIBUTE3      => r_EGN.INFORMATION113
             ,P_EGN_ATTRIBUTE30      => r_EGN.INFORMATION140
             ,P_EGN_ATTRIBUTE4      => r_EGN.INFORMATION114
             ,P_EGN_ATTRIBUTE5      => r_EGN.INFORMATION115
             ,P_EGN_ATTRIBUTE6      => r_EGN.INFORMATION116
             ,P_EGN_ATTRIBUTE7      => r_EGN.INFORMATION117
             ,P_EGN_ATTRIBUTE8      => r_EGN.INFORMATION118
             ,P_EGN_ATTRIBUTE9      => r_EGN.INFORMATION119
             ,P_EGN_ATTRIBUTE_CATEGORY      => r_EGN.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_GNDR_PRTE_ID      => l_elig_gndr_prte_id
             ,P_EXCLD_FLAG      => r_EGN.INFORMATION12
             ,P_ORDR_NUM      => r_EGN.INFORMATION257
             ,P_SEX      => r_EGN.INFORMATION11
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_egn.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_egn.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EGN.information3)) then
             --
             BEN_ELIG_GNDR_PRTE_API.delete_ELIG_GNDR_PRTE(
                --
                p_validate                       => false
                ,p_elig_gndr_prte_id                   => l_elig_gndr_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EGN',r_EGN.information5 ) ;
     --
 end create_EGN_rows;

 --
 ---------------------------------------------------------------
 ----------------------< create_ETU_rows >-----------------------
 ---------------------------------------------------------------
 --
 procedure create_ETU_rows
 (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
 ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_USES_TBCO_FLAG ben_elig_tbco_use_prte_f.uses_tbco_flag%type;

   cursor c_unique_ETU(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_TBCO_USE_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ETU_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ETU(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ETU_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ETU.elig_tbco_use_prte_id new_value
   from BEN_ELIG_TBCO_USE_PRTE_F ETU
   where
   ETU.ELIGY_PRFL_ID      = l_ELIGY_PRFL_ID  and
   ETU.USES_TBCO_FLAG     = l_USES_TBCO_FLAG and
   ETU.business_group_id  = c_business_group_id
   and   ETU.elig_tbco_use_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_TBCO_USE_PRTE_F ETU1
                where
                ETU1.ELIGY_PRFL_ID      = l_ELIGY_PRFL_ID  and
                ETU1.USES_TBCO_FLAG     = l_USES_TBCO_FLAG and
                ETU1.business_group_id  = c_business_group_id
                and   ETU1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_TBCO_USE_PRTE_F ETU2
                where
                ETU2.ELIGY_PRFL_ID      = l_ELIGY_PRFL_ID  and
                ETU2.USES_TBCO_FLAG     = l_USES_TBCO_FLAG and
                ETU2.business_group_id  = c_business_group_id
                and   ETU2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ETU                     c_ETU%rowtype;
   l_elig_tbco_use_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ETU_unique in c_unique_ETU('ETU') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ETU_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_ETU_unique.table_route_id '||r_ETU_unique.table_route_id,10);
       hr_utility.set_location(' r_ETU_unique.information1 '||r_ETU_unique.information1,10);
       hr_utility.set_location( 'r_ETU_unique.information2 '||r_ETU_unique.information2,10);
       hr_utility.set_location( 'r_ETU_unique.information3 '||r_ETU_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ETU_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_ETU(r_ETU_unique.table_route_id,
                r_ETU_unique.information1,
                r_ETU_unique.information2,
                r_ETU_unique.information3 ) ;
       --
       fetch c_ETU into r_ETU ;
       --
       close c_ETU ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ETU.INFORMATION263,l_dml_operation);
       l_USES_TBCO_FLAG := r_ETU.INFORMATION12;
/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ETU_unique.information2 and r_ETU_unique.information3 then
               l_update := true;
               if r_ETU_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_TBCO_USE_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_TBCO_USE_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ETU_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ETU_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ETU_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ETU',l_new_value,l_prefix || r_ETU_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ETU_min_max_dates(r_ETU_unique.table_route_id, r_ETU_unique.information1 ) ;
       fetch c_ETU_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ETU_unique.information2);
/**********************moved up from here **********************
       open c_ETU(r_ETU_unique.table_route_id,
                r_ETU_unique.information1,
                r_ETU_unique.information2,
                r_ETU_unique.information3 ) ;
       --
       fetch c_ETU into r_ETU ;
       --
       close c_ETU ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ETU.INFORMATION263,l_dml_operation);
       l_USES_TBCO_FLAG := r_ETU.INFORMATION12;
**********************************************************/


       if p_reuse_object_flag = 'Y' then
         if c_ETU_min_max_dates%found then
           -- cursor to find the object
           open c_find_ETU_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_tbco_use_prte_id, -999)  ) ;
           fetch c_find_ETU_in_target into l_new_value ;
           if c_find_ETU_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_TBCO_USE_PRTE_F',
                   p_base_key_column => 'ELIG_TBCO_USE_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_ETU_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_TBCO_USE_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_TBCO_USE_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ETU_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ETU_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_ETU_in_target ;
         --
         end if;
       end if ;
       --
       close c_ETU_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_ETU.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_ETU.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_TBCO_USE_PRTE_F CREATE_ELIG_TBCO_USE_PRTE ',20);
           BEN_ELIG_TBCO_USE_PRTE_API.CREATE_ELIG_TBCO_USE_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_TBCO_USE_PRTE_ID      => l_elig_tbco_use_prte_id
             ,P_ETU_ATTRIBUTE1      => r_ETU.INFORMATION111
             ,P_ETU_ATTRIBUTE10      => r_ETU.INFORMATION120
             ,P_ETU_ATTRIBUTE11      => r_ETU.INFORMATION121
             ,P_ETU_ATTRIBUTE12      => r_ETU.INFORMATION122
             ,P_ETU_ATTRIBUTE13      => r_ETU.INFORMATION123
             ,P_ETU_ATTRIBUTE14      => r_ETU.INFORMATION124
             ,P_ETU_ATTRIBUTE15      => r_ETU.INFORMATION125
             ,P_ETU_ATTRIBUTE16      => r_ETU.INFORMATION126
             ,P_ETU_ATTRIBUTE17      => r_ETU.INFORMATION127
             ,P_ETU_ATTRIBUTE18      => r_ETU.INFORMATION128
             ,P_ETU_ATTRIBUTE19      => r_ETU.INFORMATION129
             ,P_ETU_ATTRIBUTE2      => r_ETU.INFORMATION112
             ,P_ETU_ATTRIBUTE20      => r_ETU.INFORMATION130
             ,P_ETU_ATTRIBUTE21      => r_ETU.INFORMATION131
             ,P_ETU_ATTRIBUTE22      => r_ETU.INFORMATION132
             ,P_ETU_ATTRIBUTE23      => r_ETU.INFORMATION133
             ,P_ETU_ATTRIBUTE24      => r_ETU.INFORMATION134
             ,P_ETU_ATTRIBUTE25      => r_ETU.INFORMATION135
             ,P_ETU_ATTRIBUTE26      => r_ETU.INFORMATION136
             ,P_ETU_ATTRIBUTE27      => r_ETU.INFORMATION137
             ,P_ETU_ATTRIBUTE28      => r_ETU.INFORMATION138
             ,P_ETU_ATTRIBUTE29      => r_ETU.INFORMATION139
             ,P_ETU_ATTRIBUTE3      => r_ETU.INFORMATION113
             ,P_ETU_ATTRIBUTE30      => r_ETU.INFORMATION140
             ,P_ETU_ATTRIBUTE4      => r_ETU.INFORMATION114
             ,P_ETU_ATTRIBUTE5      => r_ETU.INFORMATION115
             ,P_ETU_ATTRIBUTE6      => r_ETU.INFORMATION116
             ,P_ETU_ATTRIBUTE7      => r_ETU.INFORMATION117
             ,P_ETU_ATTRIBUTE8      => r_ETU.INFORMATION118
             ,P_ETU_ATTRIBUTE9      => r_ETU.INFORMATION119
             ,P_ETU_ATTRIBUTE_CATEGORY      => r_ETU.INFORMATION110
             ,P_EXCLD_FLAG      => r_ETU.INFORMATION11
             ,P_ORDR_NUM      => r_ETU.INFORMATION260
             ,P_USES_TBCO_FLAG      => r_ETU.INFORMATION12
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_etu.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_etu.INFORMATION296
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_tbco_use_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_TBCO_USE_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ETU.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_TBCO_USE_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ETU_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_TBCO_USE_PRTE_F UPDATE_ELIG_TBCO_USE_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ETU.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ETU.information3,
               p_effective_start_date  => r_ETU.information2,
               p_dml_operation         => r_ETU.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_TBCO_USE_PRTE_ID   := r_ETU.information1;
             l_object_version_number := r_ETU.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_TBCO_USE_PRTE_API.UPDATE_ELIG_TBCO_USE_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_TBCO_USE_PRTE_ID      => l_elig_tbco_use_prte_id
             ,P_ETU_ATTRIBUTE1      => r_ETU.INFORMATION111
             ,P_ETU_ATTRIBUTE10      => r_ETU.INFORMATION120
             ,P_ETU_ATTRIBUTE11      => r_ETU.INFORMATION121
             ,P_ETU_ATTRIBUTE12      => r_ETU.INFORMATION122
             ,P_ETU_ATTRIBUTE13      => r_ETU.INFORMATION123
             ,P_ETU_ATTRIBUTE14      => r_ETU.INFORMATION124
             ,P_ETU_ATTRIBUTE15      => r_ETU.INFORMATION125
             ,P_ETU_ATTRIBUTE16      => r_ETU.INFORMATION126
             ,P_ETU_ATTRIBUTE17      => r_ETU.INFORMATION127
             ,P_ETU_ATTRIBUTE18      => r_ETU.INFORMATION128
             ,P_ETU_ATTRIBUTE19      => r_ETU.INFORMATION129
             ,P_ETU_ATTRIBUTE2      => r_ETU.INFORMATION112
             ,P_ETU_ATTRIBUTE20      => r_ETU.INFORMATION130
             ,P_ETU_ATTRIBUTE21      => r_ETU.INFORMATION131
             ,P_ETU_ATTRIBUTE22      => r_ETU.INFORMATION132
             ,P_ETU_ATTRIBUTE23      => r_ETU.INFORMATION133
             ,P_ETU_ATTRIBUTE24      => r_ETU.INFORMATION134
             ,P_ETU_ATTRIBUTE25      => r_ETU.INFORMATION135
             ,P_ETU_ATTRIBUTE26      => r_ETU.INFORMATION136
             ,P_ETU_ATTRIBUTE27      => r_ETU.INFORMATION137
             ,P_ETU_ATTRIBUTE28      => r_ETU.INFORMATION138
             ,P_ETU_ATTRIBUTE29      => r_ETU.INFORMATION139
             ,P_ETU_ATTRIBUTE3      => r_ETU.INFORMATION113
             ,P_ETU_ATTRIBUTE30      => r_ETU.INFORMATION140
             ,P_ETU_ATTRIBUTE4      => r_ETU.INFORMATION114
             ,P_ETU_ATTRIBUTE5      => r_ETU.INFORMATION115
             ,P_ETU_ATTRIBUTE6      => r_ETU.INFORMATION116
             ,P_ETU_ATTRIBUTE7      => r_ETU.INFORMATION117
             ,P_ETU_ATTRIBUTE8      => r_ETU.INFORMATION118
             ,P_ETU_ATTRIBUTE9      => r_ETU.INFORMATION119
             ,P_ETU_ATTRIBUTE_CATEGORY      => r_ETU.INFORMATION110
             ,P_EXCLD_FLAG      => r_ETU.INFORMATION11
             ,P_ORDR_NUM      => r_ETU.INFORMATION260
             ,P_USES_TBCO_FLAG      => r_ETU.INFORMATION12
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE       => r_etu.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_etu.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_ETU.information3)) then
             --
             BEN_ELIG_TBCO_USE_PRTE_API.delete_ELIG_TBCO_USE_PRTE(
                --
                p_validate                       => false
                ,p_elig_tbco_use_prte_id                   => l_elig_tbco_use_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ETU',r_ETU.information5 ) ;
     --
 end create_ETU_rows;

 --
 ---------------------------------------------------------------
 ----------------------< create_EDB_rows >-----------------------
 ---------------------------------------------------------------
 --
 procedure create_EDB_rows
 (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
 ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_DSBLD_CD       ben_elig_dsbld_prte_f.dsbld_cd%type;

   cursor c_unique_EDB(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_DSBLD_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EDB_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EDB(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EDB_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EDB.elig_dsbld_prte_id new_value
   from BEN_ELIG_DSBLD_PRTE_F EDB
   where
   EDB.ELIGY_PRFL_ID      = l_ELIGY_PRFL_ID  and
   EDB.DSBLD_CD           = l_DSBLD_CD and
   EDB.business_group_id  = c_business_group_id
   and   EDB.elig_dsbld_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_DSBLD_PRTE_F EDB1
                where
                EDB1.ELIGY_PRFL_ID      = l_ELIGY_PRFL_ID  and
                EDB1.DSBLD_CD           = l_DSBLD_CD and
                EDB1.business_group_id  = c_business_group_id
                and   EDB1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_DSBLD_PRTE_F EDB2
                where
                EDB2.ELIGY_PRFL_ID      = l_ELIGY_PRFL_ID  and
                EDB2.DSBLD_CD           = l_DSBLD_CD and
                EDB2.business_group_id  = c_business_group_id
                and   EDB2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EDB                     c_EDB%rowtype;
   l_elig_dsbld_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EDB_unique in c_unique_EDB('EDB') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
          (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
           r_EDB_unique.information3 >=
                   ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_EDB_unique.table_route_id '||r_EDB_unique.table_route_id,10);
       hr_utility.set_location(' r_EDB_unique.information1 '||r_EDB_unique.information1,10);
       hr_utility.set_location( 'r_EDB_unique.information2 '||r_EDB_unique.information2,10);
       hr_utility.set_location( 'r_EDB_unique.information3 '||r_EDB_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EDB_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EDB(r_EDB_unique.table_route_id,
                r_EDB_unique.information1,
                r_EDB_unique.information2,
                r_EDB_unique.information3 ) ;
       --
       fetch c_EDB into r_EDB ;
       --
       close c_EDB ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EDB.INFORMATION263,l_dml_operation);
       l_DSBLD_CD      := r_EDB.INFORMATION12;

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EDB_unique.information2 and r_EDB_unique.information3 then
               l_update := true;
               if r_EDB_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_DSBLD_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_DSBLD_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EDB_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EDB_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDB_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EDB',l_new_value,l_prefix || r_EDB_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EDB_min_max_dates(r_EDB_unique.table_route_id, r_EDB_unique.information1 ) ;
       fetch c_EDB_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EDB_unique.information2);
/**********************moved up from here **********************
       open c_EDB(r_EDB_unique.table_route_id,
                r_EDB_unique.information1,
                r_EDB_unique.information2,
                r_EDB_unique.information3 ) ;
       --
       fetch c_EDB into r_EDB ;
       --
       close c_EDB ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EDB.INFORMATION263,l_dml_operation);
       l_DSBLD_CD      := r_EDB.INFORMATION12;

**********************************************************/

       if p_reuse_object_flag = 'Y' then
         if c_EDB_min_max_dates%found then
           -- cursor to find the object
           open c_find_EDB_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_dsbld_prte_id, -999)  ) ;
           fetch c_find_EDB_in_target into l_new_value ;
           if c_find_EDB_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_DSBLD_PRTE_F',
                   p_base_key_column => 'ELIG_DSBLD_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPI
             if r_EDB_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_DSBLD_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_DSBLD_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EDB_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDB_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EDB_in_target ;
         --
         end if;
       end if ;
       --
       close c_EDB_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EDB.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EDB.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_DSBLD_PRTE_F CREATE_ELIG_DSBLD_PRTE ',20);
           BEN_ELIG_DSBLD_PRTE_API.CREATE_ELIG_DSBLD_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_DSBLD_CD      => r_EDB.INFORMATION12
             ,P_EDB_ATTRIBUTE1      => r_EDB.INFORMATION111
             ,P_EDB_ATTRIBUTE10      => r_EDB.INFORMATION120
             ,P_EDB_ATTRIBUTE11      => r_EDB.INFORMATION121
             ,P_EDB_ATTRIBUTE12      => r_EDB.INFORMATION122
             ,P_EDB_ATTRIBUTE13      => r_EDB.INFORMATION123
             ,P_EDB_ATTRIBUTE14      => r_EDB.INFORMATION124
             ,P_EDB_ATTRIBUTE15      => r_EDB.INFORMATION125
             ,P_EDB_ATTRIBUTE16      => r_EDB.INFORMATION126
             ,P_EDB_ATTRIBUTE17      => r_EDB.INFORMATION127
             ,P_EDB_ATTRIBUTE18      => r_EDB.INFORMATION128
             ,P_EDB_ATTRIBUTE19      => r_EDB.INFORMATION129
             ,P_EDB_ATTRIBUTE2      => r_EDB.INFORMATION112
             ,P_EDB_ATTRIBUTE20      => r_EDB.INFORMATION130
             ,P_EDB_ATTRIBUTE21      => r_EDB.INFORMATION131
             ,P_EDB_ATTRIBUTE22      => r_EDB.INFORMATION132
             ,P_EDB_ATTRIBUTE23      => r_EDB.INFORMATION133
             ,P_EDB_ATTRIBUTE24      => r_EDB.INFORMATION134
             ,P_EDB_ATTRIBUTE25      => r_EDB.INFORMATION135
             ,P_EDB_ATTRIBUTE26      => r_EDB.INFORMATION136
             ,P_EDB_ATTRIBUTE27      => r_EDB.INFORMATION137
             ,P_EDB_ATTRIBUTE28      => r_EDB.INFORMATION138
             ,P_EDB_ATTRIBUTE29      => r_EDB.INFORMATION139
             ,P_EDB_ATTRIBUTE3      => r_EDB.INFORMATION113
             ,P_EDB_ATTRIBUTE30      => r_EDB.INFORMATION140
             ,P_EDB_ATTRIBUTE4      => r_EDB.INFORMATION114
             ,P_EDB_ATTRIBUTE5      => r_EDB.INFORMATION115
             ,P_EDB_ATTRIBUTE6      => r_EDB.INFORMATION116
             ,P_EDB_ATTRIBUTE7      => r_EDB.INFORMATION117
             ,P_EDB_ATTRIBUTE8      => r_EDB.INFORMATION118
             ,P_EDB_ATTRIBUTE9      => r_EDB.INFORMATION119
             ,P_EDB_ATTRIBUTE_CATEGORY      => r_EDB.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_DSBLD_PRTE_ID      => l_elig_dsbld_prte_id
             ,P_EXCLD_FLAG      => r_EDB.INFORMATION11
             ,P_ORDR_NUM      => r_EDB.INFORMATION260
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
             ,P_CRITERIA_SCORE       => r_edb.INFORMATION295
             ,P_CRITERIA_WEIGHT      => r_edb.INFORMATION296
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_dsbld_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_DSBLD_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EDB.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_DSBLD_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EDB_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_DSBLD_PRTE_F UPDATE_ELIG_DSBLD_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EDB.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EDB.information3,
               p_effective_start_date  => r_EDB.information2,
               p_dml_operation         => r_EDB.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_DSBLD_PRTE_ID   := r_EDB.information1;
             l_object_version_number := r_EDB.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_DSBLD_PRTE_API.UPDATE_ELIG_DSBLD_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_DSBLD_CD      => r_EDB.INFORMATION12
             ,P_EDB_ATTRIBUTE1      => r_EDB.INFORMATION111
             ,P_EDB_ATTRIBUTE10      => r_EDB.INFORMATION120
             ,P_EDB_ATTRIBUTE11      => r_EDB.INFORMATION121
             ,P_EDB_ATTRIBUTE12      => r_EDB.INFORMATION122
             ,P_EDB_ATTRIBUTE13      => r_EDB.INFORMATION123
             ,P_EDB_ATTRIBUTE14      => r_EDB.INFORMATION124
             ,P_EDB_ATTRIBUTE15      => r_EDB.INFORMATION125
             ,P_EDB_ATTRIBUTE16      => r_EDB.INFORMATION126
             ,P_EDB_ATTRIBUTE17      => r_EDB.INFORMATION127
             ,P_EDB_ATTRIBUTE18      => r_EDB.INFORMATION128
             ,P_EDB_ATTRIBUTE19      => r_EDB.INFORMATION129
             ,P_EDB_ATTRIBUTE2      => r_EDB.INFORMATION112
             ,P_EDB_ATTRIBUTE20      => r_EDB.INFORMATION130
             ,P_EDB_ATTRIBUTE21      => r_EDB.INFORMATION131
             ,P_EDB_ATTRIBUTE22      => r_EDB.INFORMATION132
             ,P_EDB_ATTRIBUTE23      => r_EDB.INFORMATION133
             ,P_EDB_ATTRIBUTE24      => r_EDB.INFORMATION134
             ,P_EDB_ATTRIBUTE25      => r_EDB.INFORMATION135
             ,P_EDB_ATTRIBUTE26      => r_EDB.INFORMATION136
             ,P_EDB_ATTRIBUTE27      => r_EDB.INFORMATION137
             ,P_EDB_ATTRIBUTE28      => r_EDB.INFORMATION138
             ,P_EDB_ATTRIBUTE29      => r_EDB.INFORMATION139
             ,P_EDB_ATTRIBUTE3      => r_EDB.INFORMATION113
             ,P_EDB_ATTRIBUTE30      => r_EDB.INFORMATION140
             ,P_EDB_ATTRIBUTE4      => r_EDB.INFORMATION114
             ,P_EDB_ATTRIBUTE5      => r_EDB.INFORMATION115
             ,P_EDB_ATTRIBUTE6      => r_EDB.INFORMATION116
             ,P_EDB_ATTRIBUTE7      => r_EDB.INFORMATION117
             ,P_EDB_ATTRIBUTE8      => r_EDB.INFORMATION118
             ,P_EDB_ATTRIBUTE9      => r_EDB.INFORMATION119
             ,P_EDB_ATTRIBUTE_CATEGORY      => r_EDB.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_DSBLD_PRTE_ID      => l_elig_dsbld_prte_id
             ,P_EXCLD_FLAG      => r_EDB.INFORMATION11
             ,P_ORDR_NUM      => r_EDB.INFORMATION260
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
             ,P_CRITERIA_SCORE      => r_edb.INFORMATION295
            ,P_CRITERIA_WEIGHT      => r_edb.INFORMATION296
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EDB.information3)) then
             --
             BEN_ELIG_DSBLD_PRTE_API.delete_ELIG_DSBLD_PRTE(
                --
                p_validate                       => false
                ,p_elig_dsbld_prte_id                   => l_elig_dsbld_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EDB',r_EDB.information5 ) ;
     --
 end create_EDB_rows;

 --
 ---------------------------------------------------------------
 ----------------------< create_ETP_rows >-----------------------
 ---------------------------------------------------------------
 --
 procedure create_ETP_rows
 (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
 ) is
 --
   l_ELIGY_PRFL_ID  number;
   l_PRTT_DET_RL  number;

   l_PRTT_DET_CD      ben_elig_ttl_prtt_prte_f.prtt_det_cd%type;
   l_MN_PRTT_NUM      ben_elig_ttl_prtt_prte_f.mn_prtt_num%type;
   l_MX_PRTT_NUM      ben_elig_ttl_prtt_prte_f.mx_prtt_num%type;
   l_NO_MN_PRTT_NUM_APLS_FLAG      ben_elig_ttl_prtt_prte_f.no_mn_prtt_num_apls_flag%type;
   l_NO_MX_PRTT_NUM_APLS_FLAG      ben_elig_ttl_prtt_prte_f.no_mx_prtt_num_apls_flag%type;

   cursor c_unique_ETP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_TTL_PRTT_PRTE_F
   and tr.table_alias = l_table_alias
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ETP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ETP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ETP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ETP.elig_ttl_prtt_prte_id new_value
   from BEN_ELIG_TTL_PRTT_PRTE_F ETP
   where
   ETP.ELIGY_PRFL_ID      = l_ELIGY_PRFL_ID  and
   nvl(ETP.PRTT_DET_CD, '-YYYY') = nvl(l_PRTT_DET_CD, '-YYYY') and
   nvl(ETP.PRTT_DET_RL, -999) = nvl(l_PRTT_DET_RL , -999)and
   nvl(ETP.MN_PRTT_NUM, -999) = nvl(l_MN_PRTT_NUM, -999) and
   nvl(ETP.MX_PRTT_NUM, -999) = nvl(l_MX_PRTT_NUM, -999) and
   nvl(ETP.NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY') = nvl(l_NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY')  and
   nvl(ETP.NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY') = nvl(l_NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY')  and
   ETP.business_group_id  = c_business_group_id
   and   ETP.elig_ttl_prtt_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_TTL_PRTT_PRTE_F ETP1
                where
                ETP1.ELIGY_PRFL_ID      = l_ELIGY_PRFL_ID  and
                nvl(ETP1.PRTT_DET_CD, '-YYYY') = nvl(l_PRTT_DET_CD, '-YYYY') and
                nvl(ETP1.PRTT_DET_RL, -999) = nvl(l_PRTT_DET_RL , -999)and
                nvl(ETP1.MN_PRTT_NUM, -999) = nvl(l_MN_PRTT_NUM, -999) and
                nvl(ETP1.MX_PRTT_NUM, -999) = nvl(l_MX_PRTT_NUM, -999) and
                nvl(ETP1.NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY') = nvl(l_NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY')  and
                nvl(ETP1.NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY') = nvl(l_NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY')  and
                ETP1.business_group_id  = c_business_group_id
                and   ETP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_TTL_PRTT_PRTE_F ETP2
                where
                ETP2.ELIGY_PRFL_ID      = l_ELIGY_PRFL_ID  and
                nvl(ETP2.PRTT_DET_CD, '-YYYY') = nvl(l_PRTT_DET_CD, '-YYYY') and
                nvl(ETP2.PRTT_DET_RL, -999) = nvl(l_PRTT_DET_RL , -999)and
                nvl(ETP2.MN_PRTT_NUM, -999) = nvl(l_MN_PRTT_NUM, -999) and
                nvl(ETP2.MX_PRTT_NUM, -999) = nvl(l_MX_PRTT_NUM, -999) and
                nvl(ETP2.NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY') = nvl(l_NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY')  and
                nvl(ETP2.NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY') = nvl(l_NO_MN_PRTT_NUM_APLS_FLAG, '-YYYY')  and
                ETP2.business_group_id  = c_business_group_id
                and   ETP2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ETP                     c_ETP%rowtype;
   l_elig_ttl_prtt_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ETP_unique in c_unique_ETP('ETP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ETP_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_ETP_unique.table_route_id '||r_ETP_unique.table_route_id,10);
       hr_utility.set_location(' r_ETP_unique.information1 '||r_ETP_unique.information1,10);
       hr_utility.set_location( 'r_ETP_unique.information2 '||r_ETP_unique.information2,10);
       hr_utility.set_location( 'r_ETP_unique.information3 '||r_ETP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ETP_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_ETP(r_ETP_unique.table_route_id,
                r_ETP_unique.information1,
                r_ETP_unique.information2,
                r_ETP_unique.information3 ) ;
       --
       fetch c_ETP into r_ETP ;
       --
       close c_ETP ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ETP.INFORMATION263,l_dml_operation);
       l_PRTT_DET_RL := get_fk('FORMULA_ID', r_ETP.INFORMATION262,l_dml_operation);

       l_MN_PRTT_NUM    := r_ETP.INFORMATION260;
       l_MX_PRTT_NUM    := r_ETP.INFORMATION261;
       l_NO_MN_PRTT_NUM_APLS_FLAG      := r_ETP.INFORMATION12;
       l_NO_MX_PRTT_NUM_APLS_FLAG      := r_ETP.INFORMATION13;
       l_PRTT_DET_CD      := r_ETP.INFORMATION11;

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ETP_unique.information2 and r_ETP_unique.information3 then
               l_update := true;
               if r_ETP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_TTL_PRTT_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_TTL_PRTT_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ETP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ETP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ETP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ETP',l_new_value,l_prefix || r_ETP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ETP_min_max_dates(r_ETP_unique.table_route_id, r_ETP_unique.information1 ) ;
       fetch c_ETP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ETP_unique.information2);
/**********************moved up from here **********************
       open c_ETP(r_ETP_unique.table_route_id,
                r_ETP_unique.information1,
                r_ETP_unique.information2,
                r_ETP_unique.information3 ) ;
       --
       fetch c_ETP into r_ETP ;
       --
       close c_ETP ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ETP.INFORMATION263,l_dml_operation);
       l_PRTT_DET_RL := get_fk('FORMULA_ID', r_ETP.INFORMATION262,l_dml_operation);

       l_MN_PRTT_NUM    := r_ETP.INFORMATION260;
       l_MX_PRTT_NUM    := r_ETP.INFORMATION261;
       l_NO_MN_PRTT_NUM_APLS_FLAG      := r_ETP.INFORMATION12;
       l_NO_MX_PRTT_NUM_APLS_FLAG      := r_ETP.INFORMATION13;
       l_PRTT_DET_CD      := r_ETP.INFORMATION11;

**********************************************************/

       if p_reuse_object_flag = 'Y' then
         if c_ETP_min_max_dates%found then
           -- cursor to find the object
           open c_find_ETP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_ttl_prtt_prte_id, -999)  ) ;
           fetch c_find_ETP_in_target into l_new_value ;
           if c_find_ETP_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_TTL_PRTT_PRTE_F',
                   p_base_key_column => 'ELIG_TTL_PRTT_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_ETP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_TTL_PRTT_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_TTL_PRTT_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ETP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ETP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_ETP_in_target ;
         --
         end if;
       end if ;
       --
       close c_ETP_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_ETP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_ETP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_TTL_PRTT_PRTE_F CREATE_ELIG_TTL_PRTT_PRTE ',20);
           BEN_ELIG_TTL_PRTT_PRTE_API.CREATE_ELIG_TTL_PRTT_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_TTL_PRTT_PRTE_ID      => l_elig_ttl_prtt_prte_id
             ,P_ETP_ATTRIBUTE1      => r_ETP.INFORMATION111
             ,P_ETP_ATTRIBUTE10      => r_ETP.INFORMATION120
             ,P_ETP_ATTRIBUTE11      => r_ETP.INFORMATION121
             ,P_ETP_ATTRIBUTE12      => r_ETP.INFORMATION122
             ,P_ETP_ATTRIBUTE13      => r_ETP.INFORMATION123
             ,P_ETP_ATTRIBUTE14      => r_ETP.INFORMATION124
             ,P_ETP_ATTRIBUTE15      => r_ETP.INFORMATION125
             ,P_ETP_ATTRIBUTE16      => r_ETP.INFORMATION126
             ,P_ETP_ATTRIBUTE17      => r_ETP.INFORMATION127
             ,P_ETP_ATTRIBUTE18      => r_ETP.INFORMATION128
             ,P_ETP_ATTRIBUTE19      => r_ETP.INFORMATION129
             ,P_ETP_ATTRIBUTE2      => r_ETP.INFORMATION112
             ,P_ETP_ATTRIBUTE20      => r_ETP.INFORMATION130
             ,P_ETP_ATTRIBUTE21      => r_ETP.INFORMATION131
             ,P_ETP_ATTRIBUTE22      => r_ETP.INFORMATION132
             ,P_ETP_ATTRIBUTE23      => r_ETP.INFORMATION133
             ,P_ETP_ATTRIBUTE24      => r_ETP.INFORMATION134
             ,P_ETP_ATTRIBUTE25      => r_ETP.INFORMATION135
             ,P_ETP_ATTRIBUTE26      => r_ETP.INFORMATION136
             ,P_ETP_ATTRIBUTE27      => r_ETP.INFORMATION137
             ,P_ETP_ATTRIBUTE28      => r_ETP.INFORMATION138
             ,P_ETP_ATTRIBUTE29      => r_ETP.INFORMATION139
             ,P_ETP_ATTRIBUTE3      => r_ETP.INFORMATION113
             ,P_ETP_ATTRIBUTE30      => r_ETP.INFORMATION140
             ,P_ETP_ATTRIBUTE4      => r_ETP.INFORMATION114
             ,P_ETP_ATTRIBUTE5      => r_ETP.INFORMATION115
             ,P_ETP_ATTRIBUTE6      => r_ETP.INFORMATION116
             ,P_ETP_ATTRIBUTE7      => r_ETP.INFORMATION117
             ,P_ETP_ATTRIBUTE8      => r_ETP.INFORMATION118
             ,P_ETP_ATTRIBUTE9      => r_ETP.INFORMATION119
             ,P_ETP_ATTRIBUTE_CATEGORY      => r_ETP.INFORMATION110
             ,P_EXCLD_FLAG      => r_ETP.INFORMATION14
             ,P_MN_PRTT_NUM      => r_ETP.INFORMATION260
             ,P_MX_PRTT_NUM      => r_ETP.INFORMATION261
             ,P_NO_MN_PRTT_NUM_APLS_FLAG      => r_ETP.INFORMATION12
             ,P_NO_MX_PRTT_NUM_APLS_FLAG      => r_ETP.INFORMATION13
             ,P_ORDR_NUM      => r_ETP.INFORMATION259
             ,P_PRTT_DET_CD      => r_ETP.INFORMATION11
             ,P_PRTT_DET_RL      => l_PRTT_DET_RL
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_ttl_prtt_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_TTL_PRTT_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ETP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_TTL_PRTT_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ETP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_TTL_PRTT_PRTE_F UPDATE_ELIG_TTL_PRTT_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ETP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ETP.information3,
               p_effective_start_date  => r_ETP.information2,
               p_dml_operation         => r_ETP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_TTL_PRTT_PRTE_ID   := r_ETP.information1;
             l_object_version_number := r_ETP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_TTL_PRTT_PRTE_API.UPDATE_ELIG_TTL_PRTT_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_TTL_PRTT_PRTE_ID      => l_elig_ttl_prtt_prte_id
             ,P_ETP_ATTRIBUTE1      => r_ETP.INFORMATION111
             ,P_ETP_ATTRIBUTE10      => r_ETP.INFORMATION120
             ,P_ETP_ATTRIBUTE11      => r_ETP.INFORMATION121
             ,P_ETP_ATTRIBUTE12      => r_ETP.INFORMATION122
             ,P_ETP_ATTRIBUTE13      => r_ETP.INFORMATION123
             ,P_ETP_ATTRIBUTE14      => r_ETP.INFORMATION124
             ,P_ETP_ATTRIBUTE15      => r_ETP.INFORMATION125
             ,P_ETP_ATTRIBUTE16      => r_ETP.INFORMATION126
             ,P_ETP_ATTRIBUTE17      => r_ETP.INFORMATION127
             ,P_ETP_ATTRIBUTE18      => r_ETP.INFORMATION128
             ,P_ETP_ATTRIBUTE19      => r_ETP.INFORMATION129
             ,P_ETP_ATTRIBUTE2      => r_ETP.INFORMATION112
             ,P_ETP_ATTRIBUTE20      => r_ETP.INFORMATION130
             ,P_ETP_ATTRIBUTE21      => r_ETP.INFORMATION131
             ,P_ETP_ATTRIBUTE22      => r_ETP.INFORMATION132
             ,P_ETP_ATTRIBUTE23      => r_ETP.INFORMATION133
             ,P_ETP_ATTRIBUTE24      => r_ETP.INFORMATION134
             ,P_ETP_ATTRIBUTE25      => r_ETP.INFORMATION135
             ,P_ETP_ATTRIBUTE26      => r_ETP.INFORMATION136
             ,P_ETP_ATTRIBUTE27      => r_ETP.INFORMATION137
             ,P_ETP_ATTRIBUTE28      => r_ETP.INFORMATION138
             ,P_ETP_ATTRIBUTE29      => r_ETP.INFORMATION139
             ,P_ETP_ATTRIBUTE3      => r_ETP.INFORMATION113
             ,P_ETP_ATTRIBUTE30      => r_ETP.INFORMATION140
             ,P_ETP_ATTRIBUTE4      => r_ETP.INFORMATION114
             ,P_ETP_ATTRIBUTE5      => r_ETP.INFORMATION115
             ,P_ETP_ATTRIBUTE6      => r_ETP.INFORMATION116
             ,P_ETP_ATTRIBUTE7      => r_ETP.INFORMATION117
             ,P_ETP_ATTRIBUTE8      => r_ETP.INFORMATION118
             ,P_ETP_ATTRIBUTE9      => r_ETP.INFORMATION119
             ,P_ETP_ATTRIBUTE_CATEGORY      => r_ETP.INFORMATION110
             ,P_EXCLD_FLAG      => r_ETP.INFORMATION14
             ,P_MN_PRTT_NUM      => r_ETP.INFORMATION260
             ,P_MX_PRTT_NUM      => r_ETP.INFORMATION261
             ,P_NO_MN_PRTT_NUM_APLS_FLAG      => r_ETP.INFORMATION12
             ,P_NO_MX_PRTT_NUM_APLS_FLAG      => r_ETP.INFORMATION13
             ,P_ORDR_NUM      => r_ETP.INFORMATION259
             ,P_PRTT_DET_CD      => r_ETP.INFORMATION11
             ,P_PRTT_DET_RL      => l_PRTT_DET_RL
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_ETP.information3)) then
             --
             BEN_ELIG_TTL_PRTT_PRTE_API.delete_ELIG_TTL_PRTT_PRTE(
                --
                p_validate                       => false
                ,p_elig_ttl_prtt_prte_id                   => l_elig_ttl_prtt_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ETP',r_ETP.information5 ) ;
     --
 end create_ETP_rows;

 --
 ---------------------------------------------------------------
 ----------------------< create_ETC_rows >-----------------------
 ---------------------------------------------------------------
 --
 procedure create_ETC_rows
 (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
 ) is
   --
   l_CVG_VOL_DET_RL  number;
   l_ELIGY_PRFL_ID  number;

   l_CVG_VOL_DET_CD      ben_elig_ttl_cvg_vol_prte_f.cvg_vol_det_cd%type;
   l_MN_CVG_VOL_AMT      ben_elig_ttl_cvg_vol_prte_f.mn_cvg_vol_amt%type;
   l_MX_CVG_VOL_AMT      ben_elig_ttl_cvg_vol_prte_f.mx_cvg_vol_amt%type;
   l_NO_MN_CVG_VOL_AMT_APLS_FLAG      ben_elig_ttl_cvg_vol_prte_f.no_mn_cvg_vol_amt_apls_flag%type;
   l_NO_MX_CVG_VOL_AMT_APLS_FLAG      ben_elig_ttl_cvg_vol_prte_f.no_mx_cvg_vol_amt_apls_flag%type;

   cursor c_unique_ETC(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_TTL_CVG_VOL_PRTE_F
   and tr.table_alias = l_table_alias
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_ETC_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_ETC(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_ETC_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     ETC.elig_ttl_cvg_vol_prte_id new_value
   from BEN_ELIG_TTL_CVG_VOL_PRTE_F ETC
   where
   ETC.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   nvl(ETC.CVG_VOL_DET_CD, '-YYYY') = nvl(l_CVG_VOL_DET_CD, '-YYYY') and
   nvl(ETC.CVG_VOL_DET_RL, -999) = nvl(l_CVG_VOL_DET_RL , -999)and
   nvl(ETC.MN_CVG_VOL_AMT, -999) = nvl(l_MN_CVG_VOL_AMT, -999) and
   nvl(ETC.MX_CVG_VOL_AMT, -999) = nvl(l_MX_CVG_VOL_AMT, -999) and
   nvl(ETC.NO_MN_CVG_VOL_AMT_APLS_FLAG, '-YYYY') = nvl(l_NO_MN_CVG_VOL_AMT_APLS_FLAG, '-YYYY') and
   nvl(ETC.NO_MX_CVG_VOL_AMT_APLS_FLAG, '-YYYY') = nvl(l_NO_MX_CVG_VOL_AMT_APLS_FLAG, '-YYYY') and
   ETC.business_group_id  = c_business_group_id
   and   ETC.elig_ttl_cvg_vol_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_TTL_CVG_VOL_PRTE_F ETC1
                where
                ETC1.ELIGY_PRFL_ID      = l_ELIGY_PRFL_ID  and
                nvl(ETC1.CVG_VOL_DET_CD, '-YYYY') = nvl(l_CVG_VOL_DET_CD, '-YYYY') and
                nvl(ETC1.CVG_VOL_DET_RL, -999) = nvl(l_CVG_VOL_DET_RL , -999)and
                nvl(ETC1.MN_CVG_VOL_AMT, -999) = nvl(l_MN_CVG_VOL_AMT, -999) and
                nvl(ETC1.MX_CVG_VOL_AMT, -999) = nvl(l_MX_CVG_VOL_AMT, -999) and
                nvl(ETC1.NO_MN_CVG_VOL_AMT_APLS_FLAG, '-YYYY') = nvl(l_NO_MN_CVG_VOL_AMT_APLS_FLAG, '-YYYY') and
                nvl(ETC1.NO_MX_CVG_VOL_AMT_APLS_FLAG, '-YYYY') = nvl(l_NO_MX_CVG_VOL_AMT_APLS_FLAG, '-YYYY') and
                ETC1.business_group_id  = c_business_group_id
                and   ETC1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_TTL_CVG_VOL_PRTE_F ETC2
                where
                ETC2.ELIGY_PRFL_ID      = l_ELIGY_PRFL_ID  and
                nvl(ETC2.CVG_VOL_DET_CD, '-YYYY') = nvl(l_CVG_VOL_DET_CD, '-YYYY') and
                nvl(ETC2.CVG_VOL_DET_RL, -999) = nvl(l_CVG_VOL_DET_RL , -999)and
                nvl(ETC2.MN_CVG_VOL_AMT, -999) = nvl(l_MN_CVG_VOL_AMT, -999) and
                nvl(ETC2.MX_CVG_VOL_AMT, -999) = nvl(l_MX_CVG_VOL_AMT, -999) and
                nvl(ETC2.NO_MN_CVG_VOL_AMT_APLS_FLAG, '-YYYY') = nvl(l_NO_MN_CVG_VOL_AMT_APLS_FLAG, '-YYYY') and
                nvl(ETC2.NO_MX_CVG_VOL_AMT_APLS_FLAG, '-YYYY') = nvl(l_NO_MX_CVG_VOL_AMT_APLS_FLAG, '-YYYY') and
                ETC2.business_group_id  = c_business_group_id
                and   ETC2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_ETC                     c_ETC%rowtype;
   l_elig_ttl_cvg_vol_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_ETC_unique in c_unique_ETC('ETC') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
        (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
         r_ETC_unique.information3 >=
                 ben_pd_copy_to_ben_one.g_copy_effective_date)
        ) then
       --
       hr_utility.set_location(' r_ETC_unique.table_route_id '||r_ETC_unique.table_route_id,10);
       hr_utility.set_location(' r_ETC_unique.information1 '||r_ETC_unique.information1,10);
       hr_utility.set_location( 'r_ETC_unique.information2 '||r_ETC_unique.information2,10);
       hr_utility.set_location( 'r_ETC_unique.information3 '||r_ETC_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_ETC_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_ETC(r_ETC_unique.table_route_id,
                r_ETC_unique.information1,
                r_ETC_unique.information2,
                r_ETC_unique.information3 ) ;
       --
       fetch c_ETC into r_ETC ;
       --
       close c_ETC ;
       --
       l_CVG_VOL_DET_RL := get_fk('FORMULA_ID', r_ETC.INFORMATION261,l_dml_operation);
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ETC.INFORMATION263,l_dml_operation);

       l_CVG_VOL_DET_CD      :=  r_ETC.INFORMATION14;
       l_MN_CVG_VOL_AMT      :=  r_ETC.INFORMATION293;
       l_MX_CVG_VOL_AMT      :=  r_ETC.INFORMATION294;
       l_NO_MN_CVG_VOL_AMT_APLS_FLAG      :=  r_ETC.INFORMATION12;
       l_NO_MX_CVG_VOL_AMT_APLS_FLAG      :=  r_ETC.INFORMATION13;

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_ETC_unique.information2 and r_ETC_unique.information3 then
               l_update := true;
               if r_ETC_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_TTL_CVG_VOL_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_TTL_CVG_VOL_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ETC_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_ETC_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ETC_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('ETC',l_new_value,l_prefix || r_ETC_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_ETC_min_max_dates(r_ETC_unique.table_route_id, r_ETC_unique.information1 ) ;
       fetch c_ETC_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_ETC_unique.information2);
/**********************moved up from here **********************
       open c_ETC(r_ETC_unique.table_route_id,
                r_ETC_unique.information1,
                r_ETC_unique.information2,
                r_ETC_unique.information3 ) ;
       --
       fetch c_ETC into r_ETC ;
       --
       close c_ETC ;
       --
       l_CVG_VOL_DET_RL := get_fk('FORMULA_ID', r_ETC.INFORMATION261,l_dml_operation);
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_ETC.INFORMATION263,l_dml_operation);

       l_CVG_VOL_DET_CD      :=  r_ETC.INFORMATION14;
       l_MN_CVG_VOL_AMT      :=  r_ETC.INFORMATION293;
       l_MX_CVG_VOL_AMT      :=  r_ETC.INFORMATION294;
       l_NO_MN_CVG_VOL_AMT_APLS_FLAG      :=  r_ETC.INFORMATION12;
       l_NO_MX_CVG_VOL_AMT_APLS_FLAG      :=  r_ETC.INFORMATION13;

**********************************************************/


       if p_reuse_object_flag = 'Y' then
         if c_ETC_min_max_dates%found then
           -- cursor to find the object
           open c_find_ETC_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_ttl_cvg_vol_prte_id, -999)  ) ;
           fetch c_find_ETC_in_target into l_new_value ;
           if c_find_ETC_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_TTL_CVG_VOL_PRTE_F',
                   p_base_key_column => 'ELIG_TTL_CVG_VOL_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_ETC_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_TTL_CVG_VOL_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_TTL_CVG_VOL_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_ETC_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ETC_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_ETC_in_target ;
         --
         end if;
       end if ;
       --
       close c_ETC_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_ETC.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_ETC.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_TTL_CVG_VOL_PRTE_F CREATE_ELIG_TTL_CVG_VOL_PRTE ',20);
           BEN_ELIG_TTL_CVG_VOL_PRTE_API.CREATE_ELIG_TTL_CVG_VOL_PRTE(
              --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CVG_VOL_DET_CD      => r_ETC.INFORMATION14
             ,P_CVG_VOL_DET_RL      => l_CVG_VOL_DET_RL
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_TTL_CVG_VOL_PRTE_ID      => l_elig_ttl_cvg_vol_prte_id
             ,P_ETC_ATTRIBUTE1      => r_ETC.INFORMATION111
             ,P_ETC_ATTRIBUTE10      => r_ETC.INFORMATION120
             ,P_ETC_ATTRIBUTE11      => r_ETC.INFORMATION121
             ,P_ETC_ATTRIBUTE12      => r_ETC.INFORMATION122
             ,P_ETC_ATTRIBUTE13      => r_ETC.INFORMATION123
             ,P_ETC_ATTRIBUTE14      => r_ETC.INFORMATION124
             ,P_ETC_ATTRIBUTE15      => r_ETC.INFORMATION125
             ,P_ETC_ATTRIBUTE16      => r_ETC.INFORMATION126
             ,P_ETC_ATTRIBUTE17      => r_ETC.INFORMATION127
             ,P_ETC_ATTRIBUTE18      => r_ETC.INFORMATION128
             ,P_ETC_ATTRIBUTE19      => r_ETC.INFORMATION129
             ,P_ETC_ATTRIBUTE2      => r_ETC.INFORMATION112
             ,P_ETC_ATTRIBUTE20      => r_ETC.INFORMATION130
             ,P_ETC_ATTRIBUTE21      => r_ETC.INFORMATION131
             ,P_ETC_ATTRIBUTE22      => r_ETC.INFORMATION132
             ,P_ETC_ATTRIBUTE23      => r_ETC.INFORMATION133
             ,P_ETC_ATTRIBUTE24      => r_ETC.INFORMATION134
             ,P_ETC_ATTRIBUTE25      => r_ETC.INFORMATION135
             ,P_ETC_ATTRIBUTE26      => r_ETC.INFORMATION136
             ,P_ETC_ATTRIBUTE27      => r_ETC.INFORMATION137
             ,P_ETC_ATTRIBUTE28      => r_ETC.INFORMATION138
             ,P_ETC_ATTRIBUTE29      => r_ETC.INFORMATION139
             ,P_ETC_ATTRIBUTE3      => r_ETC.INFORMATION113
             ,P_ETC_ATTRIBUTE30      => r_ETC.INFORMATION140
             ,P_ETC_ATTRIBUTE4      => r_ETC.INFORMATION114
             ,P_ETC_ATTRIBUTE5      => r_ETC.INFORMATION115
             ,P_ETC_ATTRIBUTE6      => r_ETC.INFORMATION116
             ,P_ETC_ATTRIBUTE7      => r_ETC.INFORMATION117
             ,P_ETC_ATTRIBUTE8      => r_ETC.INFORMATION118
             ,P_ETC_ATTRIBUTE9      => r_ETC.INFORMATION119
             ,P_ETC_ATTRIBUTE_CATEGORY      => r_ETC.INFORMATION110
             ,P_EXCLD_FLAG      => r_ETC.INFORMATION11
             ,P_MN_CVG_VOL_AMT      => r_ETC.INFORMATION293
             ,P_MX_CVG_VOL_AMT      => r_ETC.INFORMATION294
             ,P_NO_MN_CVG_VOL_AMT_APLS_FLAG      => r_ETC.INFORMATION12
             ,P_NO_MX_CVG_VOL_AMT_APLS_FLAG      => r_ETC.INFORMATION13
             ,P_ORDR_NUM      => r_ETC.INFORMATION260
   --
--    ****** END CHANGE LINES

   --

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_ttl_cvg_vol_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_TTL_CVG_VOL_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_ETC.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_TTL_CVG_VOL_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_ETC_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_TTL_CVG_VOL_PRTE_F UPDATE_ELIG_TTL_CVG_VOL_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_ETC.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_ETC.information3,
               p_effective_start_date  => r_ETC.information2,
               p_dml_operation         => r_ETC.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_TTL_CVG_VOL_PRTE_ID   := r_ETC.information1;
             l_object_version_number := r_ETC.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_TTL_CVG_VOL_PRTE_API.UPDATE_ELIG_TTL_CVG_VOL_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_CVG_VOL_DET_CD      => r_ETC.INFORMATION14
             ,P_CVG_VOL_DET_RL      => l_CVG_VOL_DET_RL
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_TTL_CVG_VOL_PRTE_ID      => l_elig_ttl_cvg_vol_prte_id
             ,P_ETC_ATTRIBUTE1      => r_ETC.INFORMATION111
             ,P_ETC_ATTRIBUTE10      => r_ETC.INFORMATION120
             ,P_ETC_ATTRIBUTE11      => r_ETC.INFORMATION121
             ,P_ETC_ATTRIBUTE12      => r_ETC.INFORMATION122
             ,P_ETC_ATTRIBUTE13      => r_ETC.INFORMATION123
             ,P_ETC_ATTRIBUTE14      => r_ETC.INFORMATION124
             ,P_ETC_ATTRIBUTE15      => r_ETC.INFORMATION125
             ,P_ETC_ATTRIBUTE16      => r_ETC.INFORMATION126
             ,P_ETC_ATTRIBUTE17      => r_ETC.INFORMATION127
             ,P_ETC_ATTRIBUTE18      => r_ETC.INFORMATION128
             ,P_ETC_ATTRIBUTE19      => r_ETC.INFORMATION129
             ,P_ETC_ATTRIBUTE2      => r_ETC.INFORMATION112
             ,P_ETC_ATTRIBUTE20      => r_ETC.INFORMATION130
             ,P_ETC_ATTRIBUTE21      => r_ETC.INFORMATION131
             ,P_ETC_ATTRIBUTE22      => r_ETC.INFORMATION132
             ,P_ETC_ATTRIBUTE23      => r_ETC.INFORMATION133
             ,P_ETC_ATTRIBUTE24      => r_ETC.INFORMATION134
             ,P_ETC_ATTRIBUTE25      => r_ETC.INFORMATION135
             ,P_ETC_ATTRIBUTE26      => r_ETC.INFORMATION136
             ,P_ETC_ATTRIBUTE27      => r_ETC.INFORMATION137
             ,P_ETC_ATTRIBUTE28      => r_ETC.INFORMATION138
             ,P_ETC_ATTRIBUTE29      => r_ETC.INFORMATION139
             ,P_ETC_ATTRIBUTE3      => r_ETC.INFORMATION113
             ,P_ETC_ATTRIBUTE30      => r_ETC.INFORMATION140
             ,P_ETC_ATTRIBUTE4      => r_ETC.INFORMATION114
             ,P_ETC_ATTRIBUTE5      => r_ETC.INFORMATION115
             ,P_ETC_ATTRIBUTE6      => r_ETC.INFORMATION116
             ,P_ETC_ATTRIBUTE7      => r_ETC.INFORMATION117
             ,P_ETC_ATTRIBUTE8      => r_ETC.INFORMATION118
             ,P_ETC_ATTRIBUTE9      => r_ETC.INFORMATION119
             ,P_ETC_ATTRIBUTE_CATEGORY      => r_ETC.INFORMATION110
             ,P_EXCLD_FLAG      => r_ETC.INFORMATION11
             ,P_MN_CVG_VOL_AMT      => r_ETC.INFORMATION293
             ,P_MX_CVG_VOL_AMT      => r_ETC.INFORMATION294
             ,P_NO_MN_CVG_VOL_AMT_APLS_FLAG      => r_ETC.INFORMATION12
             ,P_NO_MX_CVG_VOL_AMT_APLS_FLAG      => r_ETC.INFORMATION13
             ,P_ORDR_NUM      => r_ETC.INFORMATION260
   --
--   ****** END CHANGE LINES

   --
             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_ETC.information3)) then
             --
             BEN_ELIG_TTL_CVG_VOL_PRTE_API.delete_ELIG_TTL_CVG_VOL_PRTE(
                --
                p_validate                       => false
                ,p_elig_ttl_cvg_vol_prte_id                   => l_elig_ttl_cvg_vol_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'ETC',r_ETC.information5 ) ;
     --
 end create_ETC_rows;
 --
   ---------------------------------------------------------------
   ----------------------< create_EHC_rows >-----------------------
   ---------------------------------------------------------------
   --
   procedure create_EHC_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_PL_TYP_OPT_TYP_ID  number;
   l_OIPL_ID  number;
   cursor c_unique_EHC(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_HLTH_CVG_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EHC_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EHC(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EHC_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EHC.elig_hlth_cvg_prte_id new_value
   from BEN_ELIG_HLTH_CVG_PRTE_F EHC
   where
   EHC.ELIGY_PRFL_ID       = l_ELIGY_PRFL_ID  and
   EHC.OIPL_ID             = l_OIPL_ID  and
   EHC.PL_TYP_OPT_TYP_ID   = l_PL_TYP_OPT_TYP_ID  and
   EHC.business_group_id   = c_business_group_id
   and   EHC.elig_hlth_cvg_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_HLTH_CVG_PRTE_F EHC1
                where
                EHC1.ELIGY_PRFL_ID       = l_ELIGY_PRFL_ID  and
                EHC1.OIPL_ID             = l_OIPL_ID  and
                EHC1.PL_TYP_OPT_TYP_ID   = l_PL_TYP_OPT_TYP_ID  and
                EHC1.business_group_id   = c_business_group_id
                and   EHC1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_HLTH_CVG_PRTE_F EHC2
                where
                EHC2.ELIGY_PRFL_ID       = l_ELIGY_PRFL_ID  and
                EHC2.OIPL_ID             = l_OIPL_ID  and
                EHC2.PL_TYP_OPT_TYP_ID   = l_PL_TYP_OPT_TYP_ID  and
                EHC2.business_group_id   = c_business_group_id
                and   EHC2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EHC                     c_EHC%rowtype;
   l_elig_hlth_cvg_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EHC_unique in c_unique_EHC('EHC') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
          (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
           r_EHC_unique.information3 >=
                   ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_EHC_unique.table_route_id '||r_EHC_unique.table_route_id,10);
       hr_utility.set_location(' r_EHC_unique.information1 '||r_EHC_unique.information1,10);
       hr_utility.set_location( 'r_EHC_unique.information2 '||r_EHC_unique.information2,10);
       hr_utility.set_location( 'r_EHC_unique.information3 '||r_EHC_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EHC_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EHC(r_EHC_unique.table_route_id,
                r_EHC_unique.information1,
                r_EHC_unique.information2,
                r_EHC_unique.information3 ) ;
       --
       fetch c_EHC into r_EHC ;
       --
       close c_EHC ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EHC.INFORMATION263,l_dml_operation);

       -- Only For Use by Create Wizard - Same Business Group
       l_OIPL_ID := NVL(get_fk('OIPL_ID', r_EHC.INFORMATION258,l_dml_operation),
                        r_EHC.INFORMATION258);

       l_PL_TYP_OPT_TYP_ID := NVL(get_fk('PL_TYP_OPT_TYP_ID',r_EHC.INFORMATION228,l_dml_operation),
                        r_EHC.INFORMATION228);

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EHC_unique.information2 and r_EHC_unique.information3 then
               l_update := true;
               if r_EHC_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_HLTH_CVG_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_HLTH_CVG_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EHC_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EHC_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EHC_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EHC',l_new_value,l_prefix || r_EHC_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EHC_min_max_dates(r_EHC_unique.table_route_id, r_EHC_unique.information1 ) ;
       fetch c_EHC_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EHC_unique.information2);
/**********************moved up from here **********************
       open c_EHC(r_EHC_unique.table_route_id,
                r_EHC_unique.information1,
                r_EHC_unique.information2,
                r_EHC_unique.information3 ) ;
       --
       fetch c_EHC into r_EHC ;
       --
       close c_EHC ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EHC.INFORMATION263,l_dml_operation);

       -- Only For Use by Create Wizard - Same Business Group
       l_OIPL_ID := NVL(get_fk('OIPL_ID', r_EHC.INFORMATION258,l_dml_operation),
                        r_EHC.INFORMATION258);

       l_PL_TYP_OPT_TYP_ID := NVL(get_fk('PL_TYP_OPT_TYP_ID',r_EHC.INFORMATION228,l_dml_operation),
                        r_EHC.INFORMATION228);

**********************************************************/


       if p_reuse_object_flag = 'Y' then
         if c_EHC_min_max_dates%found then
           -- cursor to find the object
           open c_find_EHC_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_hlth_cvg_prte_id, -999)  ) ;
           fetch c_find_EHC_in_target into l_new_value ;
           if c_find_EHC_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_HLTH_CVG_PRTE_F',
                   p_base_key_column => 'ELIG_HLTH_CVG_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EHC_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_HLTH_CVG_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_HLTH_CVG_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EHC_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EHC_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EHC_in_target ;
         --
         end if;
       end if ;
       --
       close c_EHC_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EHC.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EHC.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_HLTH_CVG_PRTE_F CREATE_ELIG_HLTH_CVG_PRTE ',20);
           BEN_ELIG_HLTH_CVG_PRTE_API.CREATE_ELIG_HLTH_CVG_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EHC_ATTRIBUTE1      => r_EHC.INFORMATION111
             ,P_EHC_ATTRIBUTE10      => r_EHC.INFORMATION120
             ,P_EHC_ATTRIBUTE11      => r_EHC.INFORMATION121
             ,P_EHC_ATTRIBUTE12      => r_EHC.INFORMATION122
             ,P_EHC_ATTRIBUTE13      => r_EHC.INFORMATION123
             ,P_EHC_ATTRIBUTE14      => r_EHC.INFORMATION124
             ,P_EHC_ATTRIBUTE15      => r_EHC.INFORMATION125
             ,P_EHC_ATTRIBUTE16      => r_EHC.INFORMATION126
             ,P_EHC_ATTRIBUTE17      => r_EHC.INFORMATION127
             ,P_EHC_ATTRIBUTE18      => r_EHC.INFORMATION128
             ,P_EHC_ATTRIBUTE19      => r_EHC.INFORMATION129
             ,P_EHC_ATTRIBUTE2      => r_EHC.INFORMATION112
             ,P_EHC_ATTRIBUTE20      => r_EHC.INFORMATION130
             ,P_EHC_ATTRIBUTE21      => r_EHC.INFORMATION131
             ,P_EHC_ATTRIBUTE22      => r_EHC.INFORMATION132
             ,P_EHC_ATTRIBUTE23      => r_EHC.INFORMATION133
             ,P_EHC_ATTRIBUTE24      => r_EHC.INFORMATION134
             ,P_EHC_ATTRIBUTE25      => r_EHC.INFORMATION135
             ,P_EHC_ATTRIBUTE26      => r_EHC.INFORMATION136
             ,P_EHC_ATTRIBUTE27      => r_EHC.INFORMATION137
             ,P_EHC_ATTRIBUTE28      => r_EHC.INFORMATION138
             ,P_EHC_ATTRIBUTE29      => r_EHC.INFORMATION139
             ,P_EHC_ATTRIBUTE3      => r_EHC.INFORMATION113
             ,P_EHC_ATTRIBUTE30      => r_EHC.INFORMATION140
             ,P_EHC_ATTRIBUTE4      => r_EHC.INFORMATION114
             ,P_EHC_ATTRIBUTE5      => r_EHC.INFORMATION115
             ,P_EHC_ATTRIBUTE6      => r_EHC.INFORMATION116
             ,P_EHC_ATTRIBUTE7      => r_EHC.INFORMATION117
             ,P_EHC_ATTRIBUTE8      => r_EHC.INFORMATION118
             ,P_EHC_ATTRIBUTE9      => r_EHC.INFORMATION119
             ,P_EHC_ATTRIBUTE_CATEGORY      => r_EHC.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_HLTH_CVG_PRTE_ID      => l_elig_hlth_cvg_prte_id
             ,P_EXCLD_FLAG      => r_EHC.INFORMATION11
             ,P_OIPL_ID      => l_OIPL_ID
             ,P_ORDR_NUM      => r_EHC.INFORMATION261
             ,P_PL_TYP_OPT_TYP_ID      => l_PL_TYP_OPT_TYP_ID

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_hlth_cvg_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_HLTH_CVG_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EHC.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_HLTH_CVG_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EHC_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_HLTH_CVG_PRTE_F UPDATE_ELIG_HLTH_CVG_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EHC.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EHC.information3,
               p_effective_start_date  => r_EHC.information2,
               p_dml_operation         => r_EHC.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_HLTH_CVG_PRTE_ID   := r_EHC.information1;
             l_object_version_number := r_EHC.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_HLTH_CVG_PRTE_API.UPDATE_ELIG_HLTH_CVG_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_EHC_ATTRIBUTE1       => r_EHC.INFORMATION111
             ,P_EHC_ATTRIBUTE10      => r_EHC.INFORMATION120
             ,P_EHC_ATTRIBUTE11      => r_EHC.INFORMATION121
             ,P_EHC_ATTRIBUTE12      => r_EHC.INFORMATION122
             ,P_EHC_ATTRIBUTE13      => r_EHC.INFORMATION123
             ,P_EHC_ATTRIBUTE14      => r_EHC.INFORMATION124
             ,P_EHC_ATTRIBUTE15      => r_EHC.INFORMATION125
             ,P_EHC_ATTRIBUTE16      => r_EHC.INFORMATION126
             ,P_EHC_ATTRIBUTE17      => r_EHC.INFORMATION127
             ,P_EHC_ATTRIBUTE18      => r_EHC.INFORMATION128
             ,P_EHC_ATTRIBUTE19      => r_EHC.INFORMATION129
             ,P_EHC_ATTRIBUTE2       => r_EHC.INFORMATION112
             ,P_EHC_ATTRIBUTE20      => r_EHC.INFORMATION130
             ,P_EHC_ATTRIBUTE21      => r_EHC.INFORMATION131
             ,P_EHC_ATTRIBUTE22      => r_EHC.INFORMATION132
             ,P_EHC_ATTRIBUTE23      => r_EHC.INFORMATION133
             ,P_EHC_ATTRIBUTE24      => r_EHC.INFORMATION134
             ,P_EHC_ATTRIBUTE25      => r_EHC.INFORMATION135
             ,P_EHC_ATTRIBUTE26      => r_EHC.INFORMATION136
             ,P_EHC_ATTRIBUTE27      => r_EHC.INFORMATION137
             ,P_EHC_ATTRIBUTE28      => r_EHC.INFORMATION138
             ,P_EHC_ATTRIBUTE29      => r_EHC.INFORMATION139
             ,P_EHC_ATTRIBUTE3       => r_EHC.INFORMATION113
             ,P_EHC_ATTRIBUTE30      => r_EHC.INFORMATION140
             ,P_EHC_ATTRIBUTE4       => r_EHC.INFORMATION114
             ,P_EHC_ATTRIBUTE5       => r_EHC.INFORMATION115
             ,P_EHC_ATTRIBUTE6       => r_EHC.INFORMATION116
             ,P_EHC_ATTRIBUTE7       => r_EHC.INFORMATION117
             ,P_EHC_ATTRIBUTE8       => r_EHC.INFORMATION118
             ,P_EHC_ATTRIBUTE9       => r_EHC.INFORMATION119
             ,P_EHC_ATTRIBUTE_CATEGORY      => r_EHC.INFORMATION110
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_HLTH_CVG_PRTE_ID      => l_elig_hlth_cvg_prte_id
             ,P_EXCLD_FLAG      => r_EHC.INFORMATION11
             ,P_OIPL_ID      => l_OIPL_ID
             ,P_ORDR_NUM      => r_EHC.INFORMATION261
             ,P_PL_TYP_OPT_TYP_ID      => l_PL_TYP_OPT_TYP_ID

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EHC.information3)) then
             --
             BEN_ELIG_HLTH_CVG_PRTE_API.delete_ELIG_HLTH_CVG_PRTE(
                --
                p_validate                       => false
                ,p_elig_hlth_cvg_prte_id          => l_elig_hlth_cvg_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EHC',r_EHC.information5 ) ;
     --
 end create_EHC_rows;

 ---------------------------------------------------------------
 ----------------------< create_EOP_rows >-----------------------
 ---------------------------------------------------------------
   --
   procedure create_EOP_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
   --
   l_ELIGY_PRFL_ID  number;
   l_PL_ID  number;
   cursor c_unique_EOP(l_table_alias varchar2) is
   select distinct cpe.information1,
     cpe.information2,
     cpe.information3,
     cpe.table_route_id
   ,cpe.dml_operation,cpe.datetrack_mode from ben_copy_entity_results cpe,
        pqh_table_route tr
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = tr.table_route_id
   -- and   tr.where_clause        = l_BEN_ELIG_ANTHR_PL_PRTE_F
   and tr.table_alias = l_table_alias
   and   cpe.number_of_copies   = 1 -- ADDITION
   group by cpe.information1,cpe.information2,cpe.information3, cpe.table_route_id,cpe.dml_operation,cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   --
   cursor c_EOP_min_max_dates(c_table_route_id  number,
                c_information1   number) is
   select
     min(cpe.information2) min_esd,
     max(cpe.information3) min_eed
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1 ;
   --
   cursor c_EOP(c_table_route_id  number,
                c_information1   number,
                c_information2   date,
                c_information3   date )  is
   select
     cpe.*
   from ben_copy_entity_results cpe
   where cpe.copy_entity_txn_id = p_copy_entity_txn_id
   and   cpe.table_route_id     = c_table_route_id
   and   cpe.information1       = c_information1
   and   cpe.information2       = c_information2
   and   cpe.information3       = c_information3
   and rownum = 1 ;
   -- Date Track target record
   cursor c_find_EOP_in_target(
                                c_effective_start_date    date,
                                c_effective_end_date      date,
                                c_business_group_id       number,
                                c_new_pk_id               number) is
   select
     EOP.elig_anthr_pl_prte_id new_value
   from BEN_ELIG_ANTHR_PL_PRTE_F EOP
   where
   EOP.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
   EOP.PL_ID     = l_PL_ID  and
   EOP.business_group_id  = c_business_group_id
   and   EOP.elig_anthr_pl_prte_id  <> c_new_pk_id
    and c_effective_start_date between effective_start_date
                             and effective_end_date ;
 --END TEMPIK
 /*TEMPIK
   and exists ( select null
                from BEN_ELIG_ANTHR_PL_PRTE_F EOP1
                where
                EOP1.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EOP1.PL_ID           = l_PL_ID  and
                EOP1.business_group_id  = c_business_group_id
                and   EOP1.effective_start_date <= c_effective_start_date )
   and exists ( select null
                from BEN_ELIG_ANTHR_PL_PRTE_F EOP2
                where
                EOP2.ELIGY_PRFL_ID     = l_ELIGY_PRFL_ID  and
                EOP2.PL_ID      = l_PL_ID  and
                EOP2.business_group_id  = c_business_group_id
                and   EOP2.effective_end_date >= c_effective_end_date )
                ;
 TEMPIK */
    --TEMPIK
    l_dt_rec_found            boolean ;
    --END TEMPIK
   --

--UPD START
   --
   l_update                  boolean      := false ;
   l_datetrack_mode          varchar2(80) := hr_api.g_update;
   l_process_date            date;
   l_dml_operation           ben_copy_entity_results.dml_operation%TYPE ;
   --
   --UPD END
   l_current_pk_id           number := null ;

   l_prev_pk_id              number := null ;
   l_first_rec               boolean := true ;
   r_EOP                     c_EOP%rowtype;
   l_elig_anthr_pl_prte_id             number ;
   l_object_version_number   number ;
   l_effective_start_date    date ;
   l_effective_end_date      date ;
   l_prefix                  pqh_copy_entity_attribs.information1%type := null;
   l_suffix                  pqh_copy_entity_attribs.information1%type := null;
   l_new_value               number(15);
   l_object_found_in_target  boolean := false ;
   l_min_esd                 date;
   l_max_eed                 date;
   l_effective_date          date;
   --
 begin
   -- Initialization
   l_object_found_in_target := false ;
   -- End Initialization
   -- Derive the prefix - sufix
   if   p_prefix_suffix_cd = 'PREFIX' then
     l_prefix  := p_prefix_suffix_text ;
   elsif p_prefix_suffix_cd = 'SUFFIX' then
     l_suffix   := p_prefix_suffix_text ;
   else
     l_prefix := null ;
     l_suffix  := null ;
   end if ;
   -- End Prefix Sufix derivation
   for r_EOP_unique in c_unique_EOP('EOP') loop

     if (ben_pd_copy_to_ben_one.g_copy_effective_date is null or
          (ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
           r_EOP_unique.information3 >=
                   ben_pd_copy_to_ben_one.g_copy_effective_date)
          ) then
       --
       hr_utility.set_location(' r_EOP_unique.table_route_id '||r_EOP_unique.table_route_id,10);
       hr_utility.set_location(' r_EOP_unique.information1 '||r_EOP_unique.information1,10);
       hr_utility.set_location( 'r_EOP_unique.information2 '||r_EOP_unique.information2,10);
       hr_utility.set_location( 'r_EOP_unique.information3 '||r_EOP_unique.information3,10);
       -- If reuse objects flag is 'Y' then check for the object in the target business group
       -- if found insert the record into PLSql table and exit the loop else try create the
       -- object in the target business group
       --
       l_object_found_in_target := false ;
       --UPD START
       l_update := false;
       l_process_date := p_effective_date;
       l_dml_operation:= r_EOP_unique.dml_operation ;
       --
/**********************moved from below **********************/
       open c_EOP(r_EOP_unique.table_route_id,
                r_EOP_unique.information1,
                r_EOP_unique.information2,
                r_EOP_unique.information3 ) ;
       --
       fetch c_EOP into r_EOP ;
       --
       close c_EOP ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EOP.INFORMATION263,l_dml_operation);

       -- Only For Use by Create Wizard - Same Business Group
       l_PL_ID := NVL(get_fk('PL_ID', r_EOP.INFORMATION261,l_dml_operation),
                      r_EOP.INFORMATION261);

/**********************************************************/

       if l_dml_operation = 'UPDATE' then
         --
         l_object_found_in_target := TRUE;
         --
         if l_process_date between r_EOP_unique.information2 and r_EOP_unique.information3 then
               l_update := true;
               if r_EOP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                  nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_ANTHR_PL_PRTE_ID'  then
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_ANTHR_PL_PRTE_ID' ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EOP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := r_EOP_unique.information1 ;
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                  BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EOP_unique.table_route_id;
                  --
                  -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                  --
                  BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
                  --
                  -- log_data('EOP',l_new_value,l_prefix || r_EOP_unique.name|| l_suffix,'REUSED');
                  --
               end if ;
               hr_utility.set_location( 'found record for update',10);
           --
         else
           --
           l_update := false;
           --
         end if;
       else
         --
         --UPD END
       l_min_esd := null ;
       l_max_eed := null ;
       open c_EOP_min_max_dates(r_EOP_unique.table_route_id, r_EOP_unique.information1 ) ;
       fetch c_EOP_min_max_dates into l_min_esd,l_max_eed ;
       --

       if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
            l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
         l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
       end if;
       l_min_esd := greatest(l_min_esd,r_EOP_unique.information2);
/**********************moved up from here **********************
       open c_EOP(r_EOP_unique.table_route_id,
                r_EOP_unique.information1,
                r_EOP_unique.information2,
                r_EOP_unique.information3 ) ;
       --
       fetch c_EOP into r_EOP ;
       --
       close c_EOP ;
       --
       l_ELIGY_PRFL_ID := get_fk('ELIGY_PRFL_ID', r_EOP.INFORMATION263,l_dml_operation);

       -- Only For Use by Create Wizard - Same Business Group
       l_PL_ID := NVL(get_fk('PL_ID', r_EOP.INFORMATION261,l_dml_operation),
                      r_EOP.INFORMATION261);

**********************************************************/

       if p_reuse_object_flag = 'Y' then
         if c_EOP_min_max_dates%found then
           -- cursor to find the object
           open c_find_EOP_in_target( l_min_esd,l_max_eed,
                                 p_target_business_group_id, nvl(l_elig_anthr_pl_prte_id, -999)  ) ;
           fetch c_find_EOP_in_target into l_new_value ;
           if c_find_EOP_in_target%found then
             --
              --TEMPIK
              l_dt_rec_found :=   dt_api.check_min_max_dates
                  (p_base_table_name => 'BEN_ELIG_ANTHR_PL_PRTE_F',
                   p_base_key_column => 'ELIG_ANTHR_PL_PRTE_ID',
                   p_base_key_value  => l_new_value,
                   p_from_date       => l_min_esd,
                   p_to_date         => l_max_eed );
              if l_dt_rec_found THEN
              --END TEMPIK
             if r_EOP_unique.information1 <> nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).old_value, -999) or
                nvl(BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count-1).pk_id_column, '999') <>  'ELIG_ANTHR_PL_PRTE_ID'  then
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column    := 'ELIG_ANTHR_PL_PRTE_ID' ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value       := r_EOP_unique.information1 ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value       := l_new_value ;
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type := 'REUSED';
                BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EOP_unique.table_route_id;
                --
                -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                --
                BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
             end if ;
             --
             l_object_found_in_target := true ;
              --TEMPIK
              end if; -- l_dt_rec_found
              --END TEMPIK
           end if;
           close c_find_EOP_in_target ;
         --
         end if;
       end if ;
       --
       close c_EOP_min_max_dates ;
       end if; --if p_dml_operation
       --
       if not l_object_found_in_target OR l_update  then

         --
         l_current_pk_id := r_EOP.information1;
         --
         hr_utility.set_location(' l_current_pk_id '||l_current_pk_id,20);
         hr_utility.set_location(' l_prev_pk_id '||l_prev_pk_id,20);
         --
         if l_current_pk_id =  l_prev_pk_id  then
           --
           l_first_rec := false ;
           --
         else
           --
           l_first_rec := true ;
           --
         end if ;
         --

         l_effective_date := r_EOP.information2;
         if ( ben_pd_copy_to_ben_one.g_copy_effective_date is not null and
              l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date ) then
           l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
         end if;

         if l_first_rec and not l_update then
           -- Call Create routine.
           hr_utility.set_location(' BEN_ELIG_ANTHR_PL_PRTE_F CREATE_ELIG_ANTHR_PL_PRTE ',20);
           BEN_ELIG_ANTHR_PL_PRTE_API.CREATE_ELIG_ANTHR_PL_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_ANTHR_PL_PRTE_ID      => l_elig_anthr_pl_prte_id
             ,P_EOP_ATTRIBUTE1      => r_EOP.INFORMATION111
             ,P_EOP_ATTRIBUTE10      => r_EOP.INFORMATION120
             ,P_EOP_ATTRIBUTE11      => r_EOP.INFORMATION121
             ,P_EOP_ATTRIBUTE12      => r_EOP.INFORMATION122
             ,P_EOP_ATTRIBUTE13      => r_EOP.INFORMATION123
             ,P_EOP_ATTRIBUTE14      => r_EOP.INFORMATION124
             ,P_EOP_ATTRIBUTE15      => r_EOP.INFORMATION125
             ,P_EOP_ATTRIBUTE16      => r_EOP.INFORMATION126
             ,P_EOP_ATTRIBUTE17      => r_EOP.INFORMATION127
             ,P_EOP_ATTRIBUTE18      => r_EOP.INFORMATION128
             ,P_EOP_ATTRIBUTE19      => r_EOP.INFORMATION129
             ,P_EOP_ATTRIBUTE2      => r_EOP.INFORMATION112
             ,P_EOP_ATTRIBUTE20      => r_EOP.INFORMATION130
             ,P_EOP_ATTRIBUTE21      => r_EOP.INFORMATION131
             ,P_EOP_ATTRIBUTE22      => r_EOP.INFORMATION132
             ,P_EOP_ATTRIBUTE23      => r_EOP.INFORMATION133
             ,P_EOP_ATTRIBUTE24      => r_EOP.INFORMATION134
             ,P_EOP_ATTRIBUTE25      => r_EOP.INFORMATION135
             ,P_EOP_ATTRIBUTE26      => r_EOP.INFORMATION136
             ,P_EOP_ATTRIBUTE27      => r_EOP.INFORMATION137
             ,P_EOP_ATTRIBUTE28      => r_EOP.INFORMATION138
             ,P_EOP_ATTRIBUTE29      => r_EOP.INFORMATION139
             ,P_EOP_ATTRIBUTE3      => r_EOP.INFORMATION113
             ,P_EOP_ATTRIBUTE30      => r_EOP.INFORMATION140
             ,P_EOP_ATTRIBUTE4      => r_EOP.INFORMATION114
             ,P_EOP_ATTRIBUTE5      => r_EOP.INFORMATION115
             ,P_EOP_ATTRIBUTE6      => r_EOP.INFORMATION116
             ,P_EOP_ATTRIBUTE7      => r_EOP.INFORMATION117
             ,P_EOP_ATTRIBUTE8      => r_EOP.INFORMATION118
             ,P_EOP_ATTRIBUTE9      => r_EOP.INFORMATION119
             ,P_EOP_ATTRIBUTE_CATEGORY      => r_EOP.INFORMATION110
             ,P_EXCLD_FLAG      => r_EOP.INFORMATION11
             ,P_ORDR_NUM      => r_EOP.INFORMATION257
             ,P_PL_ID      => l_PL_ID

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER =>	l_object_version_number
         );
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           -- Update all relevent cer records with new pk_id
           hr_utility.set_location('Before plsql table ',222);
           hr_utility.set_location('new_value id '||l_elig_anthr_pl_prte_id,222);
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).pk_id_column := 'ELIG_ANTHR_PL_PRTE_ID' ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).old_value    := r_EOP.information1 ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).new_value    := l_ELIG_ANTHR_PL_PRTE_ID ;
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).copy_reuse_type  := 'COPIED';
           BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count).table_route_id  := r_EOP_unique.table_route_id;
           hr_utility.set_location('After plsql table ',222);
           --
           -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
           --
           BEN_PD_COPY_TO_BEN_ONE.g_count := BEN_PD_COPY_TO_BEN_ONE.g_count + 1 ;
           --
         else
           --
           -- Call Update routine for the pk_id created in prev run .
           -- insert the table_name,old_pk_id,new_pk_id into a plsql record
           hr_utility.set_location(' BEN_ELIG_ANTHR_PL_PRTE_F UPDATE_ELIG_ANTHR_PL_PRTE ',30);
--UPD START
           hr_utility.set_location('Before call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           if l_update then
             --
             l_datetrack_mode := r_EOP.datetrack_mode ;
             --
             get_dt_modes(
               p_effective_date        => l_process_date,
               p_effective_end_date    => r_EOP.information3,
               p_effective_start_date  => r_EOP.information2,
               p_dml_operation         => r_EOP.dml_operation,
               p_datetrack_mode        => l_datetrack_mode );
           --    p_update                => l_update
             --
             l_effective_date := l_process_date;
             l_ELIG_ANTHR_PL_PRTE_ID   := r_EOP.information1;
             l_object_version_number := r_EOP.information265;
             --
           end if;
           --
           hr_utility.set_location('After call to get_dt_modes l_dt_mode'||l_datetrack_mode,5);
           --
           IF l_update OR l_dml_operation <> 'UPDATE' THEN
           --UPD END


           BEN_ELIG_ANTHR_PL_PRTE_API.UPDATE_ELIG_ANTHR_PL_PRTE(
             --
             P_VALIDATE               => false
             ,P_EFFECTIVE_DATE        => l_effective_date
             ,P_BUSINESS_GROUP_ID     => p_target_business_group_id
             --
             ,P_ELIGY_PRFL_ID      => l_ELIGY_PRFL_ID
             ,P_ELIG_ANTHR_PL_PRTE_ID      => l_elig_anthr_pl_prte_id
             ,P_EOP_ATTRIBUTE1      => r_EOP.INFORMATION111
             ,P_EOP_ATTRIBUTE10      => r_EOP.INFORMATION120
             ,P_EOP_ATTRIBUTE11      => r_EOP.INFORMATION121
             ,P_EOP_ATTRIBUTE12      => r_EOP.INFORMATION122
             ,P_EOP_ATTRIBUTE13      => r_EOP.INFORMATION123
             ,P_EOP_ATTRIBUTE14      => r_EOP.INFORMATION124
             ,P_EOP_ATTRIBUTE15      => r_EOP.INFORMATION125
             ,P_EOP_ATTRIBUTE16      => r_EOP.INFORMATION126
             ,P_EOP_ATTRIBUTE17      => r_EOP.INFORMATION127
             ,P_EOP_ATTRIBUTE18      => r_EOP.INFORMATION128
             ,P_EOP_ATTRIBUTE19      => r_EOP.INFORMATION129
             ,P_EOP_ATTRIBUTE2      => r_EOP.INFORMATION112
             ,P_EOP_ATTRIBUTE20      => r_EOP.INFORMATION130
             ,P_EOP_ATTRIBUTE21      => r_EOP.INFORMATION131
             ,P_EOP_ATTRIBUTE22      => r_EOP.INFORMATION132
             ,P_EOP_ATTRIBUTE23      => r_EOP.INFORMATION133
             ,P_EOP_ATTRIBUTE24      => r_EOP.INFORMATION134
             ,P_EOP_ATTRIBUTE25      => r_EOP.INFORMATION135
             ,P_EOP_ATTRIBUTE26      => r_EOP.INFORMATION136
             ,P_EOP_ATTRIBUTE27      => r_EOP.INFORMATION137
             ,P_EOP_ATTRIBUTE28      => r_EOP.INFORMATION138
             ,P_EOP_ATTRIBUTE29      => r_EOP.INFORMATION139
             ,P_EOP_ATTRIBUTE3      => r_EOP.INFORMATION113
             ,P_EOP_ATTRIBUTE30      => r_EOP.INFORMATION140
             ,P_EOP_ATTRIBUTE4      => r_EOP.INFORMATION114
             ,P_EOP_ATTRIBUTE5      => r_EOP.INFORMATION115
             ,P_EOP_ATTRIBUTE6      => r_EOP.INFORMATION116
             ,P_EOP_ATTRIBUTE7      => r_EOP.INFORMATION117
             ,P_EOP_ATTRIBUTE8      => r_EOP.INFORMATION118
             ,P_EOP_ATTRIBUTE9      => r_EOP.INFORMATION119
             ,P_EOP_ATTRIBUTE_CATEGORY      => r_EOP.INFORMATION110
             ,P_EXCLD_FLAG      => r_EOP.INFORMATION11
             ,P_ORDR_NUM      => r_EOP.INFORMATION257
             ,P_PL_ID      => l_PL_ID

             ,P_EFFECTIVE_START_DATE  => l_effective_start_date
             ,P_EFFECTIVE_END_DATE    => l_effective_end_date
             ,P_OBJECT_VERSION_NUMBER => l_object_version_number
             ,P_DATETRACK_MODE        => l_datetrack_mode
         );
	end if;  -- l_update
           --
         end if;
         --
         -- Delete the row if it is end dated.
         --
         if (trunc(l_max_eed) <> trunc(hr_api.g_eot) and
             trunc(l_max_eed) <> l_effective_end_date and      /* Bug 4302963 */
             trunc(l_max_eed) = trunc(r_EOP.information3)) then
             --
             BEN_ELIG_ANTHR_PL_PRTE_API.delete_ELIG_ANTHR_PL_PRTE(
                --
                p_validate                       => false
                ,p_elig_anthr_pl_prte_id          => l_elig_anthr_pl_prte_id
                ,p_effective_start_date           => l_effective_start_date
                ,p_effective_end_date             => l_effective_end_date
                ,p_object_version_number          => l_object_version_number
                ,p_effective_date                 => l_max_eed
                ,p_datetrack_mode                 => hr_api.g_delete
                --
                );
                --
         end if;
         --
         l_prev_pk_id := l_current_pk_id ;
         --
       end if;
       --
     end if;
     --
   end loop;
   --
 exception when others then
     --
     BEN_PD_COPY_TO_BEN_ONE.raise_error_message( 'EOP',r_EOP.information5 ) ;
     --
 end create_EOP_rows;
--
-- Bug 4169120 : Rate By Criteria
--
---------------------------------------------------------------
------------------< map_org_hrchy_in_target >------------------
---------------------------------------------------------------
FUNCTION  map_org_hrchy_in_target (
   p_org_stru_name                  IN   VARCHAR2,
   p_start_org_name                 IN   VARCHAR2,
   p_target_business_group_id       IN   NUMBER,
   p_effective_date                 IN   DATE,
   p_org_structure_version_id       OUT  NOCOPY NUMBER,
   p_organization_id                OUT  NOCOPY NUMBER
) RETURN BOOLEAN
IS
   --
   l_map_succeed           BOOLEAN;
   --
   CURSOR c_org_stru_ver (
      cv_org_stru_name       VARCHAR2,
      cv_effective_date      DATE,
      cv_business_group_id   NUMBER
   )
   IS
      SELECT osv.org_structure_version_id
        FROM per_organization_structures_v os,
             per_org_structure_versions osv
       WHERE os.business_group_id = cv_business_group_id
         AND os.organization_structure_id = osv.organization_structure_id
         AND os.NAME = cv_org_stru_name
         AND cv_effective_date BETWEEN osv.date_from
                                   AND NVL (osv.date_to, cv_effective_date);
   --
   CURSOR c_start_org_name (
      cv_org_structure_version_id   NUMBER,
      cv_org_name                   VARCHAR2,
      cv_business_group_id          NUMBER
   )
   IS
      SELECT organization_id
        FROM hr_all_organization_units org, per_org_structure_elements ose
       WHERE ose.org_structure_version_id = cv_org_structure_version_id
         AND (   ose.organization_id_parent = org.organization_id
              OR ose.organization_id_child = org.organization_id
             )
         AND org.NAME = cv_org_name
         AND org.business_group_id = cv_business_group_id;
   --
BEGIN
   --
   -- Get Organization Hierarchy
   --
   open c_org_stru_ver (cv_org_stru_name        => p_org_stru_name,
                        cv_effective_date       => p_effective_date,
                        cv_business_group_id    => p_target_business_group_id );
      --
      fetch c_org_stru_ver into p_org_structure_version_id;
      --
      if c_org_stru_ver%found
      then
        --
        l_map_succeed := true;
        --
      else
        --
        l_map_succeed := false;
        --
      end if;
      --
      if l_map_succeed = true
      then
        --
        -- Get Start Organization
        --
        open c_start_org_name ( cv_org_structure_version_id      => p_org_structure_version_id,
                                cv_org_name                      => p_start_org_name,
                                cv_business_group_id             => p_target_business_group_id );
          --
          fetch c_start_org_name into p_organization_id;
          --
          if c_start_org_name%found
          then
            --
            l_map_succeed := true;
            --
          else
            --
            l_map_succeed := false;
            --
          end if; /* c_start_org_name%found */
          --
        close c_start_org_name;
        --
      end if;  /* l_map_succeed = true */
      --
   close c_org_stru_ver;
   --
   if l_map_succeed = false
   then
     --
     p_org_structure_version_id := null;
     p_organization_id := null;
     --
   end if;
   --
   return l_map_succeed;
   --
END map_org_hrchy_in_target;
--
---------------------------------------------------------------
------------------< map_pos_hrchy_in_target >------------------
---------------------------------------------------------------
FUNCTION  map_pos_hrchy_in_target (
   p_pos_stru_name                  IN   VARCHAR2,
   p_start_pos_name                 IN   VARCHAR2,
   p_target_business_group_id       IN   NUMBER,
   p_effective_date                 IN   DATE,
   p_pos_structure_version_id       OUT  NOCOPY NUMBER,
   p_position_id                    OUT  NOCOPY NUMBER
) RETURN BOOLEAN
IS
   --
   l_map_succeed           BOOLEAN;
   --
   CURSOR c_pos_stru_ver (
      cv_pos_stru_name       VARCHAR2,
      cv_effective_date      DATE,
      cv_business_group_id   NUMBER
   )
   IS
      SELECT psv.pos_structure_version_id
        FROM per_position_structures_v ps, per_pos_structure_versions psv
       WHERE ps.business_group_id = cv_business_group_id
         AND ps.position_structure_id = psv.position_structure_id
         AND ps.NAME = cv_pos_stru_name
         AND cv_effective_date BETWEEN psv.date_from
                                   AND NVL (psv.date_to, cv_effective_date);
   --
   CURSOR c_start_pos_name (
      cv_pos_structure_version_id   NUMBER,
      cv_pos_name                   VARCHAR2,
      cv_business_group_id          NUMBER,
      cv_effective_date             DATE
   )
   IS
      SELECT position_id
        FROM hr_all_positions_f_vl pos, per_pos_structure_elements pse
       WHERE pse.pos_structure_version_id = cv_pos_structure_version_id
         AND (   pse.parent_position_id = pos.position_id
              OR pse.subordinate_position_id = pos.position_id
             )
         AND pos.NAME = cv_pos_name
         AND cv_effective_date BETWEEN pos.effective_start_date
                                   AND pos.effective_end_date
         AND pos.business_group_id = cv_business_group_id;
   --
BEGIN
   --
   -- Get Position Hierarchy
   --
   open c_pos_stru_ver (cv_pos_stru_name        => p_pos_stru_name,
                        cv_effective_date       => p_effective_date,
                        cv_business_group_id    => p_target_business_group_id );
      --
      fetch c_pos_stru_ver into p_pos_structure_version_id;
      --
      if c_pos_stru_ver%found
      then
        --
        l_map_succeed := true;
        --
      else
        --
        l_map_succeed := false;
        --
      end if;
      --
      if l_map_succeed = true
      then
        --
        -- Get Start Position
        --
        open c_start_pos_name ( cv_pos_structure_version_id      => p_pos_structure_version_id,
                                cv_pos_name                      => p_start_pos_name,
                                cv_effective_date                => p_effective_date,
                                cv_business_group_id             => p_target_business_group_id );
          --
          fetch c_start_pos_name into p_position_id;
          --
          if c_start_pos_name%found
          then
            --
            l_map_succeed := true;
            --
          else
            --
            l_map_succeed := false;
            --
          end if; /* c_start_pos_name%found */
          --
        close c_start_pos_name;
        --
      end if;  /* l_map_succeed = true */
      --
   close c_pos_stru_ver;
   --
   if l_map_succeed = false
   then
     --
     p_pos_structure_version_id := null;
     p_position_id := null;
     --
   end if;
   --
   return l_map_succeed;
   --
END map_pos_hrchy_in_target;
--
---------------------------------------------------------------
----------------------< create_ECV_rows >-----------------------
---------------------------------------------------------------
--
PROCEDURE create_ecv_rows (
   p_validate                   IN   NUMBER DEFAULT 0,
   p_copy_entity_txn_id         IN   NUMBER,
   p_effective_date             IN   DATE,
   p_prefix_suffix_text         IN   VARCHAR2 DEFAULT NULL,
   p_reuse_object_flag          IN   VARCHAR2 DEFAULT NULL,
   p_target_business_group_id   IN   VARCHAR2 DEFAULT NULL,
   p_prefix_suffix_cd           IN   VARCHAR2 DEFAULT NULL
)
IS
   --
   l_eligy_prfl_id            NUMBER;
   l_eligy_criteria_id        NUMBER;
   --
   CURSOR c_unique_ecv (cv_table_alias VARCHAR2)
   IS
      SELECT DISTINCT cpe.information1, cpe.information2, cpe.information3,
                      cpe.table_route_id, cpe.dml_operation,
                      cpe.datetrack_mode, cpe.information263
                 FROM ben_copy_entity_results cpe, pqh_table_route tr
                WHERE cpe.copy_entity_txn_id = p_copy_entity_txn_id
                  AND cpe.table_route_id = tr.table_route_id
                  AND tr.table_alias = cv_table_alias
                  AND cpe.number_of_copies = 1
             GROUP BY cpe.information263,
                      cpe.information1,
                      cpe.information2,
                      cpe.information3,
                      cpe.table_route_id,
                      cpe.dml_operation,
                      cpe.datetrack_mode
   order by information1, information2; --added for bug: 5151945
   --
   CURSOR c_ecv_min_max_dates (cv_table_route_id NUMBER, cv_information1 NUMBER)
   IS
      SELECT MIN (cpe.information2) min_esd, MAX (cpe.information3) min_eed
        FROM ben_copy_entity_results cpe
       WHERE cpe.copy_entity_txn_id = p_copy_entity_txn_id
         AND cpe.table_route_id = cv_table_route_id
         AND cpe.information1 = cv_information1;
   --
   CURSOR c_ecv (
      cv_table_route_id   NUMBER,
      cv_information1     NUMBER,
      cv_information2     DATE,
      cv_information3     DATE
   )
   IS
      SELECT cpe.*
        FROM ben_copy_entity_results cpe
       WHERE cpe.copy_entity_txn_id = p_copy_entity_txn_id
         AND cpe.table_route_id = cv_table_route_id
         AND cpe.information1 = cv_information1
         AND cpe.information2 = cv_information2
         AND cpe.information3 = cv_information3
         AND ROWNUM = 1;
   --
   CURSOR c_find_ecv_in_target (
      cv_effective_start_date   DATE,
      cv_effective_end_date     DATE,
      cv_business_group_id      NUMBER,
      cv_new_pk_id              NUMBER
   )
   IS
      SELECT ecv.eligy_crit_values_id new_value
        FROM ben_eligy_crit_values_f ecv
       WHERE ecv.eligy_prfl_id = l_eligy_prfl_id
         AND ecv.eligy_criteria_id = l_eligy_criteria_id
         AND ecv.business_group_id = cv_business_group_id
         AND ecv.eligy_crit_values_id <> cv_new_pk_id
         AND cv_effective_start_date BETWEEN effective_start_date
                                         AND effective_end_date;
   --
   CURSOR c_unique_ecv_id (cv_table_alias VARCHAR2)
   IS
      SELECT DISTINCT cpe.information1, cpe.information5, cpe.information263
                 FROM ben_copy_entity_results cpe, pqh_table_route tr
                WHERE cpe.copy_entity_txn_id = p_copy_entity_txn_id
                  AND cpe.table_route_id = tr.table_route_id
                  AND tr.table_alias = cv_table_alias
                  AND cpe.number_of_copies = 1
             GROUP BY cpe.information1,
                      cpe.information5,
                      cpe.information263
             ORDER BY cpe.information263;
   --
   CURSOR c_target_type
   IS
      SELECT information3
        FROM pqh_copy_entity_attribs
       WHERE copy_entity_Txn_id = p_copy_entity_txn_id;
   --
   CURSOR c_display_name (p_table_alias VARCHAR2)
   IS
      SELECT display_name, table_route_id
        FROM pqh_table_route
       WHERE table_alias = p_table_alias;
   --
   CURSOR c_parent_data (
      p_parent_pk_id         NUMBER,
      p_copy_entity_txn_id   NUMBER,
      p_table_route_id       NUMBER
   )
   IS
      SELECT information5
        FROM ben_copy_entity_results
       WHERE table_route_id = p_table_route_id
         AND copy_entity_txn_id = p_copy_entity_txn_id
         AND information1 = p_parent_pk_id;
   --
   l_dt_rec_found             BOOLEAN;
   l_update                   BOOLEAN                                 := FALSE;
   l_datetrack_mode           VARCHAR2 (80)                 := hr_api.g_update;
   l_process_date             DATE;
   l_dml_operation            ben_copy_entity_results.dml_operation%TYPE;
   l_current_pk_id            NUMBER                                   := NULL;
   l_prev_pk_id               NUMBER                                   := NULL;
   l_first_rec                BOOLEAN                                  := TRUE;
   r_ecv                      c_ecv%ROWTYPE;
   l_eligy_crit_values_id     NUMBER;
   l_object_version_number    NUMBER;
   l_effective_start_date     DATE;
   l_effective_end_date       DATE;
   l_prefix                   pqh_copy_entity_attribs.information1%TYPE
                                                                       := NULL;
   l_suffix                   pqh_copy_entity_attribs.information1%TYPE
                                                                       := NULL;
   l_new_value                NUMBER (15);
   l_object_found_in_target   BOOLEAN                                 := FALSE;
   l_min_esd                  DATE;
   l_max_eed                  DATE;
   l_effective_date           DATE;
   l_target_type              VARCHAR2(30);
   --
   l_para_spacer              VARCHAR2(50) := '&nbsp;&nbsp;&nbsp;&nbsp;';
   l_label_start_tag          VARCHAR2(50) := '<B>';
   l_label_end_tag            VARCHAR2(50) := '</B>';
   l_elpro_name               VARCHAR2(240);
   l_elp_display_name         VARCHAR2(80);
   l_elp_table_route_id       NUMBER(15);
   l_ecv_display_name         VARCHAR2(80);
   l_ecv_table_route_id       NUMBER(15);
   l_prev_parent_pk_id        NUMBER(15);
   l_prev_ecv_id              NUMBER(15);
   l_map_succeed              BOOLEAN;
   l_number_value1            NUMBER(15);
   l_number_value2            NUMBER(15);
   --
   TYPE l_not_copied_egl_rec_type IS RECORD (
      eligy_crit_values_id   NUMBER (15),
      eligy_prfl_id          NUMBER (15),
      text                   VARCHAR2 (2000)
   );
   --
   TYPE not_copied_egl_tbl IS TABLE OF l_not_copied_egl_rec_type
      INDEX BY BINARY_INTEGER;
   --
   l_not_copied_egl_tbl         NOT_COPIED_EGL_TBL;
   l_not_copied_egl_table_count NUMBER(15) := 0;
--
BEGIN
   --
   l_object_found_in_target := FALSE;
   --
   IF p_prefix_suffix_cd = 'PREFIX'
   THEN
      --
      l_prefix := p_prefix_suffix_text;
      --
   ELSIF p_prefix_suffix_cd = 'SUFFIX'
   THEN
      --
      l_suffix := p_prefix_suffix_text;
      --
   ELSE
      --
      l_prefix := NULL;
      l_suffix := NULL;
      --
   END IF;
   --
   open c_target_type;
     --
     fetch c_target_type into l_target_type;
     --
   close c_target_type;
   --
   --
   --
--   IF l_target_type = 'BEN_PDSMBG'
--   THEN
      --
      FOR r_ecv_unique IN c_unique_ecv ('ECV')
      LOOP
         IF (   ben_pd_copy_to_ben_one.g_copy_effective_date IS NULL
             OR (    ben_pd_copy_to_ben_one.g_copy_effective_date IS NOT NULL
                 AND r_ecv_unique.information3 >=
                                     ben_pd_copy_to_ben_one.g_copy_effective_date
                )
            )
         THEN
            --
            hr_utility.set_location(' r_ecv_unique.table_route_id ' || r_ecv_unique.table_route_id,10);
            hr_utility.set_location(' r_ecv_unique.information1 '   || r_ecv_unique.information1,10);
            hr_utility.set_location( 'r_ecv_unique.information2 '   || r_ecv_unique.information2,10);
            hr_utility.set_location( 'r_ecv_unique.information3 '   || r_ecv_unique.information3,10);
            --
            -- If reuse objects flag is 'Y' then check for the object in the target business group
            -- if found insert the record into PLSql table and exit the loop else try create the
            -- object in the target business group
            --
            l_object_found_in_target := FALSE;
            l_update := FALSE;
            l_process_date := p_effective_date;
            l_dml_operation := r_ecv_unique.dml_operation;
            --
            OPEN c_ecv (r_ecv_unique.table_route_id,
                        r_ecv_unique.information1,
                        r_ecv_unique.information2,
                        r_ecv_unique.information3
                       );
            --
            FETCH c_ecv INTO r_ecv;
            --
            CLOSE c_ecv;
            --
            l_eligy_prfl_id :=  get_fk ('ELIGY_PRFL_ID', r_ecv.information263, l_dml_operation);
            --
            -- Only For Use by Create Wizard - Same Business Group
            --
            l_eligy_criteria_id :=  get_fk ('ELIGY_CRITERIA_ID', r_ecv.information272, l_dml_operation); /* Bug 4314927 */
            --
            IF l_dml_operation = 'UPDATE'
            THEN
               --
               l_object_found_in_target := TRUE;
               --
               IF l_process_date BETWEEN r_ecv_unique.information2
                                     AND r_ecv_unique.information3
               THEN
                  --
                  l_update := TRUE;
                  --
                  IF    r_ecv_unique.information1
                        <> NVL (ben_pd_copy_to_ben_one.g_pk_tbl (ben_pd_copy_to_ben_one.g_count - 1).old_value, -999 )
                     OR NVL (ben_pd_copy_to_ben_one.g_pk_tbl (ben_pd_copy_to_ben_one.g_count - 1).pk_id_column, '999')
                        <> 'ELIGY_CRIT_VALUES_ID'
                  THEN
                     --
                     ben_pd_copy_to_ben_one.g_pk_tbl (ben_pd_copy_to_ben_one.g_count).pk_id_column :='ELIGY_CRIT_VALUES_ID';
                     ben_pd_copy_to_ben_one.g_pk_tbl (ben_pd_copy_to_ben_one.g_count).old_value := r_ecv_unique.information1;
                     ben_pd_copy_to_ben_one.g_pk_tbl (ben_pd_copy_to_ben_one.g_count).new_value := r_ecv_unique.information1;
                     ben_pd_copy_to_ben_one.g_pk_tbl (ben_pd_copy_to_ben_one.g_count).copy_reuse_type := 'REUSED';
                     ben_pd_copy_to_ben_one.g_pk_tbl (ben_pd_copy_to_ben_one.g_count).table_route_id := r_ecv_unique.table_route_id;
                     --
                     -- update_cer_with_target( g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                     --
                     ben_pd_copy_to_ben_one.g_count := ben_pd_copy_to_ben_one.g_count + 1;
                  --
                  -- log_data('ecv',l_new_value,l_prefix || r_ecv_unique.name|| l_suffix,'REUSED');
                  --
                  END IF;
                  --
                  hr_utility.set_location ('found record for update', 10);
                  --
               ELSE
                  --
                  l_update := FALSE;
                  --
               END IF;
               --
            ELSE
               --
               l_min_esd := NULL;
               l_max_eed := NULL;
               OPEN c_ecv_min_max_dates (r_ecv_unique.table_route_id,
                                         r_ecv_unique.information1
                                        );
               FETCH c_ecv_min_max_dates INTO l_min_esd, l_max_eed;
               --
               IF (    ben_pd_copy_to_ben_one.g_copy_effective_date IS NOT NULL
                   AND l_min_esd < ben_pd_copy_to_ben_one.g_copy_effective_date
                  )
               THEN
                  l_min_esd := ben_pd_copy_to_ben_one.g_copy_effective_date;
               END IF;

               l_min_esd := GREATEST (l_min_esd, r_ecv_unique.information2);

               IF p_reuse_object_flag = 'Y'
               THEN
                  IF c_ecv_min_max_dates%FOUND
                  THEN
                     -- cursor to find the object
                     OPEN c_find_ecv_in_target (l_min_esd,
                                                l_max_eed,
                                                p_target_business_group_id,
                                                NVL (l_eligy_crit_values_id, -999)
                                               );
                     FETCH c_find_ecv_in_target INTO l_new_value;
                     --
                     IF c_find_ecv_in_target%FOUND
                     THEN
                        --
                        l_dt_rec_found :=
                           dt_api.check_min_max_dates (p_base_table_name      => 'BEN_ELIGY_CRIT_VALUES_F',
                                                       p_base_key_column      => 'ELIGY_CRIT_VALUES_ID',
                                                       p_base_key_value       => l_new_value,
                                                       p_from_date            => l_min_esd,
                                                       p_to_date              => l_max_eed
                                                      );

                        IF l_dt_rec_found
                        THEN
                           IF    r_ecv_unique.information1 <>
                                    NVL (ben_pd_copy_to_ben_one.g_pk_tbl (ben_pd_copy_to_ben_one.g_count - 1).old_value, -999)
                              OR NVL (ben_pd_copy_to_ben_one.g_pk_tbl (  ben_pd_copy_to_ben_one.g_count - 1).pk_id_column, '999')
                                     <> 'ELIGY_CRIT_VALUES_ID'
                           THEN
                              ben_pd_copy_to_ben_one.g_pk_tbl (ben_pd_copy_to_ben_one.g_count).pk_id_column := 'ELIGY_CRIT_VALUES_ID';
                              ben_pd_copy_to_ben_one.g_pk_tbl (ben_pd_copy_to_ben_one.g_count).old_value := r_ecv_unique.information1;
                              ben_pd_copy_to_ben_one.g_pk_tbl (ben_pd_copy_to_ben_one.g_count).new_value := l_new_value;
                              ben_pd_copy_to_ben_one.g_pk_tbl (ben_pd_copy_to_ben_one.g_count).copy_reuse_type := 'REUSED';
                              ben_pd_copy_to_ben_one.g_pk_tbl (ben_pd_copy_to_ben_one.g_count).table_route_id := r_ecv_unique.table_route_id;
                              --
                              -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count) , p_copy_entity_txn_id) ;
                              --
                              ben_pd_copy_to_ben_one.g_count := ben_pd_copy_to_ben_one.g_count + 1;
                           END IF;

                           --
                           l_object_found_in_target := TRUE;
                        END IF; -- l_dt_rec_found
                     END IF;

                     CLOSE c_find_ecv_in_target;
                  --
                  END IF;
               END IF;

               --
               CLOSE c_ecv_min_max_dates;
            END IF;

            --
            IF NOT l_object_found_in_target OR l_update
            THEN
               --
               l_current_pk_id := r_ecv.information1;
               --
               hr_utility.set_location (' l_current_pk_id ' || l_current_pk_id, 20 );
               hr_utility.set_location (' l_prev_pk_id ' || l_prev_pk_id, 20);
               --
               IF l_current_pk_id = l_prev_pk_id
               THEN
                  --
                  l_first_rec := FALSE;
               --
               ELSE
                  --
                  l_first_rec := TRUE;
               --
               END IF;
               --
               l_effective_date := r_ecv.information2;
               --
               IF (    ben_pd_copy_to_ben_one.g_copy_effective_date IS NOT NULL
                   AND l_effective_date < ben_pd_copy_to_ben_one.g_copy_effective_date
                  )
               THEN
                  --
                  l_effective_date := ben_pd_copy_to_ben_one.g_copy_effective_date;
                  --
               END IF;
               --
               --
               -- For 1. Organization Hierarchy
               --               ORG_STRUCTURE_NAME	INFORMATION13
               --               START_ORGANIZATION_NAME	INFORMATION187
               --
               --     2. Position Hierarchy
               --               POS_STRUCTURE_NAME	INFORMATION14
               --               START_POSITION_NAME	INFORMATION188
               --
               -- we will try to auto map in the target business group
               -- If we are unable to auto map, then we will not copy corresponding ECV record
               --
               --
               l_map_succeed := true;
               l_number_value1 := r_ecv.information293;
               l_number_value2 := r_ecv.information294;
               --
               if r_ecv.information13 is not null
               then
                 --
                 l_map_succeed := map_org_hrchy_in_target ( p_org_stru_name            => r_ecv.information13,
                                                            p_start_org_name           => r_ecv.information187,
                                                            p_target_business_group_id => p_target_business_Group_id,
                                                            p_effective_date           => l_effective_date,
                                                            p_org_structure_version_id => l_number_value1,
                                                            p_organization_id          => l_number_value2 );
                 --
               elsif r_ecv.information14 is not null
               then
                 --
                 l_map_succeed := map_pos_hrchy_in_target ( p_pos_stru_name            => r_ecv.information14,
                                                            p_start_pos_name           => r_ecv.information188,
                                                            p_target_business_group_id => p_target_business_Group_id,
                                                            p_effective_date           => l_effective_date,
                                                            p_pos_structure_version_id => l_number_value1,
                                                            p_position_id              => l_number_value2 );
                 --
               end if;
               --
               IF l_map_succeed = true
               THEN
                  --
                  IF l_first_rec AND NOT l_update
                  THEN
                     -- Call Create routine.
                     hr_utility.set_location ('BEN_ELIGY_CRIT_VALUES_API.CREATE_ELIGY_CRIT_VALUES ', 20);
                     --
                     ben_eligy_crit_values_api.create_eligy_crit_values
                          (
                           p_validate                    => FALSE,
                           p_eligy_crit_values_id        => l_eligy_crit_values_id,
                           p_eligy_prfl_id               => l_eligy_prfl_id,
                           p_eligy_criteria_id           => l_eligy_criteria_id,
                           p_effective_start_date        => l_effective_start_date,
                           p_effective_end_date          => l_effective_end_date,
                           p_ordr_num                    => r_ecv.information260,  /* Bug 4314927 */
                           p_number_value1               => l_number_value1,
                           p_number_value2               => l_number_value2,
                           p_char_value1                 => r_ecv.information185,
                           p_char_value2                 => r_ecv.information186,
                           p_date_value1                 => r_ecv.information306,
                           p_date_value2                 => r_ecv.information307,
                           p_excld_flag                  => r_ecv.information11,
                           p_business_group_id           => p_target_business_group_id,
       		       --Bug 4592554
		           p_char_value3		 => r_ecv.information181,
		           p_char_value4		 => r_ecv.information182,
		           p_number_value3		 => r_ecv.information297,
		           p_number_value4		 => r_ecv.information298,
		           p_date_value3		 => r_ecv.information308,
		           p_date_value4		 => r_ecv.information309,
       		       --End Bug 4592554
                           p_ecv_attribute_category      => r_ecv.information110,
                           p_ecv_attribute1              => r_ecv.information111,
                           p_ecv_attribute2              => r_ecv.information112,
                           p_ecv_attribute3              => r_ecv.information113,
                           p_ecv_attribute4              => r_ecv.information114,
                           p_ecv_attribute5              => r_ecv.information115,
                           p_ecv_attribute6              => r_ecv.information116,
                           p_ecv_attribute7              => r_ecv.information117,
                           p_ecv_attribute8              => r_ecv.information118,
                           p_ecv_attribute9              => r_ecv.information119,
                           p_ecv_attribute10             => r_ecv.information120,
                           p_ecv_attribute11             => r_ecv.information121,
                           p_ecv_attribute12             => r_ecv.information122,
                           p_ecv_attribute13             => r_ecv.information123,
                           p_ecv_attribute14             => r_ecv.information124,
                           p_ecv_attribute15             => r_ecv.information125,
                           p_ecv_attribute16             => r_ecv.information126,
                           p_ecv_attribute17             => r_ecv.information127,
                           p_ecv_attribute18             => r_ecv.information128,
                           p_ecv_attribute19             => r_ecv.information129,
                           p_ecv_attribute20             => r_ecv.information130,
                           p_ecv_attribute21             => r_ecv.information131,
                           p_ecv_attribute22             => r_ecv.information132,
                           p_ecv_attribute23             => r_ecv.information133,
                           p_ecv_attribute24             => r_ecv.information134,
                           p_ecv_attribute25             => r_ecv.information135,
                           p_ecv_attribute26             => r_ecv.information136,
                           p_ecv_attribute27             => r_ecv.information137,
                           p_ecv_attribute28             => r_ecv.information138,
                           p_ecv_attribute29             => r_ecv.information139,
                           p_ecv_attribute30             => r_ecv.information140,
                           p_object_version_number       => l_object_version_number,
                           p_effective_date              => l_effective_date,
                           P_CRITERIA_SCORE       => r_ecv.INFORMATION295,
                           P_CRITERIA_WEIGHT      => r_ecv.INFORMATION296
                          );
                     --
                     -- insert the table_name,old_pk_id,new_pk_id into a plsql record
                     -- Update all relevent cer records with new pk_id
                     --
                     hr_utility.set_location ('Before plsql table ', 222);
                     hr_utility.set_location ('new_value id ' || l_eligy_crit_values_id, 222);
                     --
                     ben_pd_copy_to_ben_one.g_pk_tbl (ben_pd_copy_to_ben_one.g_count).pk_id_column := 'ELIGY_CRIT_VALUES_ID';
                     ben_pd_copy_to_ben_one.g_pk_tbl (ben_pd_copy_to_ben_one.g_count).old_value := r_ecv.information1;
                     ben_pd_copy_to_ben_one.g_pk_tbl (ben_pd_copy_to_ben_one.g_count).new_value := l_eligy_crit_values_id;
                     ben_pd_copy_to_ben_one.g_pk_tbl (ben_pd_copy_to_ben_one.g_count).copy_reuse_type := 'COPIED';
                     ben_pd_copy_to_ben_one.g_pk_tbl (ben_pd_copy_to_ben_one.g_count).table_route_id := r_ecv_unique.table_route_id;
                     --
                     hr_utility.set_location ('After plsql table ', 222);
                     --
                     -- update_cer_with_target( BEN_PD_COPY_TO_BEN_ONE.g_pk_tbl(BEN_PD_COPY_TO_BEN_ONE.g_count),p_copy_entity_txn_id ) ;
                     --
                     ben_pd_copy_to_ben_one.g_count := ben_pd_copy_to_ben_one.g_count + 1;
                  --
                  ELSE
                     --
                     -- Call Update routine for the pk_id created in prev run .
                     -- insert the table_name,old_pk_id,new_pk_id into a plsql record
                     --
                     hr_utility.set_location ('BEN_ELIGY_CRIT_VALUES_API.UPDATE_ELIGY_CRIT_VALUES ', 30);
                     hr_utility.set_location ('Before call to get_dt_modes l_dt_mode' || l_datetrack_mode, 5);
                     --
                     IF l_update
                     THEN
                        --
                        l_datetrack_mode := r_ecv.datetrack_mode;
                        --
                        get_dt_modes (p_effective_date            => l_process_date,
                                      p_effective_end_date        => r_ecv.information3,
                                      p_effective_start_date      => r_ecv.information2,
                                      p_dml_operation             => r_ecv.dml_operation,
                                      p_datetrack_mode            => l_datetrack_mode
                                     );
                        --
                        l_effective_date := l_process_date;
                        l_eligy_crit_values_id := r_ecv.information1;
                        l_object_version_number := r_ecv.information265;
                     --
                     END IF;
                     --
                     hr_utility.set_location ('After call to get_dt_modes l_dt_mode' || l_datetrack_mode, 5);
                     --
                     IF l_update OR l_dml_operation <> 'UPDATE'
                     THEN
                        --
                        ben_eligy_crit_values_api.update_eligy_crit_values
                             (
                              p_validate                    => FALSE,
                              p_eligy_crit_values_id        => l_eligy_crit_values_id,
                              p_eligy_prfl_id               => l_eligy_prfl_id,
                              p_eligy_criteria_id           => l_eligy_criteria_id,
                              p_effective_start_date        => l_effective_start_date,
                              p_effective_end_date          => l_effective_end_date,
                              p_ordr_num                    => r_ecv.information260,  /* Bug 4402051 */
                              p_number_value1               => l_number_value1,
                              p_number_value2               => l_number_value2,
                              p_char_value1                 => r_ecv.information185,
                              p_char_value2                 => r_ecv.information186,
                              p_date_value1                 => r_ecv.information306,
                              p_date_value2                 => r_ecv.information307,
                              p_excld_flag                  => r_ecv.information11,
                              p_business_group_id           => p_target_business_group_id,
         		      --Bug 4592554
		              p_char_value3		 => r_ecv.information181,
		              p_char_value4		 => r_ecv.information182,
		              p_number_value3		 => r_ecv.information297,
		              p_number_value4		 => r_ecv.information298,
		              p_date_value3		 => r_ecv.information308,
		              p_date_value4		 => r_ecv.information309,
        		      --End Bug 4592554
                              p_ecv_attribute_category      => r_ecv.information110,
                              p_ecv_attribute1              => r_ecv.information111,
                              p_ecv_attribute2              => r_ecv.information112,
                              p_ecv_attribute3              => r_ecv.information113,
                              p_ecv_attribute4              => r_ecv.information114,
                              p_ecv_attribute5              => r_ecv.information115,
                              p_ecv_attribute6              => r_ecv.information116,
                              p_ecv_attribute7              => r_ecv.information117,
                              p_ecv_attribute8              => r_ecv.information118,
                              p_ecv_attribute9              => r_ecv.information119,
                              p_ecv_attribute10             => r_ecv.information120,
                              p_ecv_attribute11             => r_ecv.information121,
                              p_ecv_attribute12             => r_ecv.information122,
                              p_ecv_attribute13             => r_ecv.information123,
                              p_ecv_attribute14             => r_ecv.information124,
                              p_ecv_attribute15             => r_ecv.information125,
                              p_ecv_attribute16             => r_ecv.information126,
                              p_ecv_attribute17             => r_ecv.information127,
                              p_ecv_attribute18             => r_ecv.information128,
                              p_ecv_attribute19             => r_ecv.information129,
                              p_ecv_attribute20             => r_ecv.information130,
                              p_ecv_attribute21             => r_ecv.information131,
                              p_ecv_attribute22             => r_ecv.information132,
                              p_ecv_attribute23             => r_ecv.information133,
                              p_ecv_attribute24             => r_ecv.information134,
                              p_ecv_attribute25             => r_ecv.information135,
                              p_ecv_attribute26             => r_ecv.information136,
                              p_ecv_attribute27             => r_ecv.information137,
                              p_ecv_attribute28             => r_ecv.information138,
                              p_ecv_attribute29             => r_ecv.information139,
                              p_ecv_attribute30             => r_ecv.information140,
                              p_object_version_number       => l_object_version_number,
                              p_effective_date              => l_effective_date,
                              p_datetrack_mode              => l_datetrack_mode,
                              P_CRITERIA_SCORE       => r_ecv.INFORMATION295,
                              P_CRITERIA_WEIGHT      => r_ecv.INFORMATION296
                             );
                        ---
                     END IF;
                     --
                  END IF;
                  --
               ELSE /* l_map_succeed = true */
                  --
                  -- Prepare Log messages for section Did Not Copy Following Objects.
                  l_not_copied_egl_tbl(l_not_copied_egl_table_count).eligy_crit_values_id := r_ecv.information1;
                  l_not_copied_egl_tbl(l_not_copied_egl_table_count).eligy_prfl_id := r_ecv.information263;
                  l_not_copied_egl_tbl(l_not_copied_egl_table_count).text := r_ecv.information5;
                  l_not_copied_egl_table_count := l_not_copied_egl_table_count + 1;
                  --
               END IF; /* l_map_succeed = true */
               --
               --
               -- Delete the row if it is end dated.
               --
               IF (    TRUNC (l_max_eed) <> TRUNC (hr_api.g_eot)
                   AND TRUNC (l_max_eed) <> l_effective_end_date       /* Bug 4302963 */
                   AND TRUNC (l_max_eed) = TRUNC (r_ecv.information3)
                  )
               THEN
                  --
                  ben_eligy_crit_values_api.delete_eligy_crit_values
                       (
                        p_validate                   => FALSE,
                        p_eligy_crit_values_id       => l_eligy_crit_values_id,
                        p_effective_start_date       => l_effective_start_date,
                        p_effective_end_date         => l_effective_end_date,
                        p_object_version_number      => l_object_version_number,
                        p_effective_date             => l_max_eed,
                        p_datetrack_mode             => hr_api.g_delete
                       );
                  --
               END IF;
               --
               l_prev_pk_id := l_current_pk_id;
            --
            END IF;
         --
         END IF;
      --
      END LOOP;
      --
   --
   ----------------------< DISPLAY START >---------------------------
   -- Print the Not Copied data to Log File BEN_PD_COPY_TO_BEN_THREE.G_NOT_COPIED_TBL
   --
   if l_not_copied_egl_table_count > 0
   then
     --
      l_prev_parent_pk_id := null;
      l_prev_ecv_id := null;
      --
      open c_display_name('ELP');
        --
        fetch c_display_name into l_elp_display_name, l_elp_table_route_id;
        --
      close c_display_name;
      --
      open c_display_name('ECV');
        --
        fetch c_display_name into l_ecv_display_name, l_ecv_table_route_id;
        --
      close c_display_name;
      --
      --
      ben_pd_copy_to_ben_three.g_not_copied_tbl(ben_pd_copy_to_ben_three.g_not_copied_tbl_count).text
                                                                             :=  l_label_start_tag ||
                                                                                       l_elp_display_name ||
                                                                                 l_label_end_tag;
      --
      ben_pd_copy_to_ben_three.g_not_copied_tbl_count := ben_pd_copy_to_ben_three.g_not_copied_tbl_count + 1;
      --
      FOR i IN l_not_copied_egl_tbl.FIRST .. l_not_copied_egl_tbl.LAST
      LOOP
        --
        if nvl(l_prev_parent_pk_id, -1) <> l_not_copied_egl_tbl(i).eligy_prfl_id
        then
          --
          open c_parent_data ( l_not_copied_egl_tbl(i).eligy_prfl_id, p_copy_entity_txn_id, l_elp_table_route_id );
            --
            fetch c_parent_data into l_elpro_name;
            --
          close c_parent_data;
          --
          ben_pd_copy_to_ben_three.g_not_copied_tbl(ben_pd_copy_to_ben_three.g_not_copied_tbl_count).text
                                                                             :=  l_para_spacer || l_elpro_name;
          --
          ben_pd_copy_to_ben_three.g_not_copied_tbl_count := ben_pd_copy_to_ben_three.g_not_copied_tbl_count + 1;
          --
          ben_pd_copy_to_ben_three.g_not_copied_tbl(ben_pd_copy_to_ben_three.g_not_copied_tbl_count).text
                                                                             :=  l_label_start_tag || l_para_spacer || l_para_spacer ||
                                                                                       l_ecv_display_name ||
                                                                                 l_label_end_tag;
          --
          ben_pd_copy_to_ben_three.g_not_copied_tbl_count := ben_pd_copy_to_ben_three.g_not_copied_tbl_count + 1;
          --
          l_prev_parent_pk_id := l_not_copied_egl_tbl(i).eligy_prfl_id;
          --
        end if;
        --
        IF nvl(l_prev_ecv_id, -1) <> l_not_copied_egl_tbl(i).eligy_crit_values_id
        THEN
          --
          ben_pd_copy_to_ben_three.g_not_copied_tbl(ben_pd_copy_to_ben_three.g_not_copied_tbl_count).text
                                                                             :=  l_para_spacer ||
                                                                                 l_para_spacer     || l_para_spacer ||
                                                                                       l_not_copied_egl_tbl(i).text;
          --
          ben_pd_copy_to_ben_three.g_not_copied_tbl_count := ben_pd_copy_to_ben_three.g_not_copied_tbl_count + 1;
          --
          l_prev_ecv_id := l_not_copied_egl_tbl(i).eligy_crit_values_id;
          --
        END IF;
        --
      END LOOP;
     --
   end if;
   --
   ----------------------< DISPLAY END >---------------------------
--
EXCEPTION
   WHEN OTHERS
   THEN
      --
      ben_pd_copy_to_ben_one.raise_error_message ('ecv', r_ecv.information5);
      --
END create_ecv_rows;
--
--
procedure create_all_elig_prf_ben_rows
   (
         p_validate                       in  number     default 0
        ,p_copy_entity_txn_id             in  number
        ,p_effective_date                 in  date
        ,p_prefix_suffix_text             in  varchar2  default null
        ,p_reuse_object_flag              in  varchar2  default null
        ,p_target_business_group_id       in  varchar2  default null
        ,p_prefix_suffix_cd               in  varchar2  default null
   ) is
    --
    CURSOR c_source_business_group
    IS
       SELECT context_business_group_id
         FROM ben_copy_entity_txns_vw
        WHERE copy_entity_txn_id = p_copy_entity_txn_id;
    --
    l_source_business_group_id number(15);
    --
  begin
   --
  -- hr_utility.trace_on(null,'pdw');
  open c_source_business_group;
    --
    fetch c_source_business_group into l_source_business_group_id;
    --
  close c_source_business_group;
  --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EAN') then
   create_EAN_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
 --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('CGP') then
    create_CGP_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EAP') then
   create_EAP_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EBN') then
   create_EBN_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EBU') then
   create_EBU_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ECL') then
   create_ECL_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ECP') then
   create_ECP_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --

  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ECY') then
   create_ECY_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ERL') then
   create_ERL_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EHW') then
   create_EHW_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EJP') then
   create_EJP_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ELU') then
   create_ELU_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ELN') then
   create_ELN_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ELR') then
   create_ELR_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ELS') then
   create_ELS_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ELV') then
   create_ELV_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EMP') then
   create_EMP_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ENO') then
   create_ENO_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EOM') then
   create_EOM_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EOU') then
   create_EOU_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EPF') then
   create_EPF_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;

  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EPT') then
   create_EPT_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EPB') then
    create_EPB_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EPN') then
    create_EPN_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EPS') then
    create_EPS_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EPY') then
    create_EPY_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EPZ') then
    create_EPZ_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EQT') then
    create_EQT_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --


  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ESA') then
    create_ESA_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );

  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ESH') then
    create_ESH_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ESP') then
    create_ESP_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EST') then
    create_EST_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EWL') then
    create_EWL_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ECT') then
    create_ECT_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EDD') then
   create_EDD_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EDR') then
   create_EDR_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EES') then
   create_EES_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EFP') then
   create_EFP_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EGR') then
   create_EGR_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EHS') then
   create_EHS_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ERG') then
   create_ERG_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EQG') then
   create_EQG_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EGN') then
   create_EGN_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ETU') then
   create_ETU_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );

  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EDB') then
   create_EDB_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );

  end if;
  --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ETP') then
   create_ETP_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );

  end if;
  --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ETC') then
   create_ETC_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
  --
  -- Bug 4169120 : Rate By Criteria
  --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ECV')
  then
    --
     create_ECV_rows(
        p_validate                   => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
    --
  end if;
  --
 --
 -- Foll. Criteria to be copied only in Create Plan Wizard flow
 --
 if BEN_PD_COPY_TO_BEN_ONE.g_transaction_category = 'BEN_PDCRWZ' then

  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ECQ') then
   create_ECQ_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EDG') then
   create_EDG_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EDI') then
   create_EDI_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EDP') then
   create_EDP_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EDT') then
   create_EDT_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EOY') then
   create_EOY_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EPG') then
   create_EPG_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EPP') then
    create_EPP_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('ETD') then
   create_ETD_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EEI') then
   create_EEI_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EEG') then
   create_EEG_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EAI') then
   create_EAI_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EEP') then
   create_EEP_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EET') then
   create_EET_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
   --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EHC') then
   create_EHC_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );

  end if;
  --
  if BEN_PD_COPY_TO_BEN_ONE.data_exists_for_table('EOP') then
   create_EOP_rows(
        p_validate                  => p_validate
        ,p_copy_entity_txn_id        => p_copy_entity_txn_id
        ,p_effective_date            => p_effective_date
        ,p_prefix_suffix_text        => p_prefix_suffix_text
        ,p_reuse_object_flag         => p_reuse_object_flag
        ,p_target_business_group_id  => p_target_business_group_id
        ,p_prefix_suffix_cd          => p_prefix_suffix_cd   );
  end if;
  --
 end if;
end;


END BEN_PD_COPY_TO_BEN_FOUR;

/
