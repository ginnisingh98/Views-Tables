--------------------------------------------------------
--  DDL for Package Body JA_JAINASST_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JA_JAINASST_XMLP_PKG" AS
/* $Header: JAINASSTB.pls 120.1 2007/12/25 16:13:14 dwkrishn noship $ */
  FUNCTION CF_1FORMULA RETURN VARCHAR2 IS
    N VARCHAR2(100);
  BEGIN
    SELECT
      COMPANY_NAME
    INTO N
    FROM
      FA_SYSTEM_CONTROLS;
    RETURN (N);
  END CF_1FORMULA;

  FUNCTION CF_3FORMULA(OP_TOT IN NUMBER
                      ,COS_TOT IN NUMBER
                      ,CS_4 IN NUMBER) RETURN NUMBER IS
    N NUMBER;
  BEGIN
    N := NVL(OP_TOT
            ,0) + NVL(COS_TOT
            ,0) - NVL(CS_4
            ,0);
    IF N <= 0 THEN
      N := 0;
    END IF;
    RETURN (N);
  END CF_3FORMULA;

  FUNCTION CF_4FORMULA(BLOCK_ID IN NUMBER
                      ,TYPE IN VARCHAR2
                      ,RATE IN NUMBER) RETURN NUMBER IS
    V_TYPE JAI_FA_AST_BLOCKS.TYPE%TYPE;
    V_RATE NUMBER;
    V_SALE NUMBER;
    V_BLOCK_ID NUMBER;
    V_BLOCK_ID1 NUMBER;
    CURSOR TYPE_RATE_CUR IS
      SELECT
        TYPE,
        RATE
      FROM
        JAI_FA_AST_BLOCKS
      WHERE BLOCK_ID = CF_4FORMULA.BLOCK_ID
        AND BOOK_TYPE_CODE = BOOK_NAME;
    CURSOR BLOCK_ID_CUR_RET IS
      SELECT
        BLOCK_ID
      FROM
        JAI_FA_AST_BLOCKS
      WHERE TYPE = CF_4FORMULA.TYPE
        AND RATE = CF_4FORMULA.RATE
        AND START_DATE < JA_JAINASST_XMLP_PKG.START_DATE
        AND BOOK_TYPE_CODE = BOOK_NAME;
    CURSOR SALE_CUR(CP_OWNED_LEASED IN FA_ADDITIONS.OWNED_LEASED%TYPE,CP_STATUS IN FA_RETIREMENTS.STATUS%TYPE) IS
      SELECT
        NVL(SUM(FAR.PROCEEDS_OF_SALE - FAR.COST_OF_REMOVAL)
           ,0) SALE
      FROM
        JAI_FA_AST_BLOCK_DTLS JBA,
        FA_ADDITIONS FA,
        JAI_FA_AST_BLOCKS JABLOA,
        FA_RETIREMENTS FAR
      WHERE FA.OWNED_LEASED = CP_OWNED_LEASED
        AND FA.ASSET_ID = JBA.ASSET_ID
        AND JBA.BLOCK_ID = JABLOA.BLOCK_ID
        AND FAR.BOOK_TYPE_CODE = JABLOA.BOOK_TYPE_CODE
        AND JABLOA.BOOK_TYPE_CODE = BOOK_NAME
        AND JABLOA.TYPE = CF_4FORMULA.TYPE
        AND JABLOA.RATE = CF_4FORMULA.RATE
        AND JBA.ASSET_ID = FAR.ASSET_ID
        AND FAR.STATUS = CP_STATUS
        AND FAR.DATE_RETIRED between JA_JAINASST_XMLP_PKG.START_DATE
        AND JA_JAINASST_XMLP_PKG.END_DATE;
  BEGIN
    OPEN TYPE_RATE_CUR;
    FETCH TYPE_RATE_CUR
     INTO V_TYPE,V_RATE;
    CLOSE TYPE_RATE_CUR;
    OPEN BLOCK_ID_CUR_RET;
    FETCH BLOCK_ID_CUR_RET
     INTO V_BLOCK_ID;
    CLOSE BLOCK_ID_CUR_RET;
    OPEN SALE_CUR('OWNED','PROCESSED');
    FETCH SALE_CUR
     INTO V_SALE;
    CLOSE SALE_CUR;
    IF NVL(V_SALE
       ,0) < 0 THEN
      V_SALE := 0;
    END IF;
    RETURN (V_SALE);
  END CF_4FORMULA;

  FUNCTION CF_5FORMULA(ASSET_ID IN NUMBER
                      ,BLOCK_ID1 IN NUMBER) RETURN NUMBER IS
    CURSOR DEPN_OF_ASSET_CUR IS
      SELECT
        DEPN_OF_ASSETS
      FROM
        JAI_FA_DEP_BLOCKS
      WHERE UNPLANNED_DEPN = ASSET_ID
        AND BLOCK_ID = BLOCK_ID1;
    V_DEPN_OF_ASSET NUMBER;
  BEGIN
    OPEN DEPN_OF_ASSET_CUR;
    FETCH DEPN_OF_ASSET_CUR
     INTO V_DEPN_OF_ASSET;
    CLOSE DEPN_OF_ASSET_CUR;
    RETURN (V_DEPN_OF_ASSET);
  END CF_5FORMULA;

  FUNCTION CF_6FORMULA(BLOCK_ID IN NUMBER
                      ,TYPE IN VARCHAR2
                      ,OP_TOT IN NUMBER
                      ,COS_TOT IN NUMBER
                      ,RATE IN NUMBER) RETURN NUMBER IS
    LV_ASSEST_CAPITALIZED JAI_FA_AST_BLOCK_DTLS.ASSET_TYPE%TYPE;
    LV_FLAG FA_BOOKS.CAPITALIZE_FLAG%TYPE;
    LV_ASSET_TYPE JAI_FA_AST_BLOCK_DTLS.ASSET_TYPE%TYPE;
    CURSOR CUR_GET_VALID_ASSETS IS
      SELECT
        '1'
      FROM
        JAI_FA_AST_BLOCK_DTLS JBA,
        FA_BOOKS FAB,
        JAI_FA_AST_BLOCKS JABOA
      WHERE JBA.ASSET_ID = FAB.ASSET_ID
        AND ( ( JBA.ASSET_TYPE = LV_ASSEST_CAPITALIZED
        AND FAB.CAPITALIZE_FLAG = LV_FLAG )
      OR JBA.ASSET_TYPE = LV_ASSET_TYPE )
        AND JBA.DATE_OF_ACQUISITION BETWEEN JABOA.START_DATE
        AND NVL(JABOA.YEAR_ENDED
         ,END_DATE)
        AND FAB.DATE_INEFFECTIVE IS NULL
        AND FAB.TRANSACTION_HEADER_ID_OUT IS NULL
        AND FAB.PERIOD_COUNTER_FULLY_RETIRED IS NULL
        AND JBA.BLOCK_ID = TO_CHAR(JABOA.BLOCK_ID)
        AND JABOA.BOOK_TYPE_CODE = FAB.BOOK_TYPE_CODE
        AND JABOA.BOOK_TYPE_CODE = BOOK_NAME
        AND JABOA.TYPE = (
        SELECT
          TYPE
        FROM
          JAI_FA_AST_BLOCKS
        WHERE BLOCK_ID = CF_6FORMULA.BLOCK_ID )
        AND ( JABOA.START_DATE <= NVL(JA_JAINASST_XMLP_PKG.START_DATE
         ,JABOA.START_DATE)
      OR JABOA.START_DATE BETWEEN NVL(JA_JAINASST_XMLP_PKG.START_DATE
         ,JABOA.START_DATE)
        AND NVL(END_DATE
         ,JABOA.YEAR_ENDED) );
    CURSOR CUR_GET_ST_OP_BAL(CP_BLOCK_ID IN JAI_FA_AST_BLOCKS.BLOCK_ID%TYPE) IS
      SELECT
        OPENING_WDV
      FROM
        JAI_FA_AST_BLOCKS JABOA
      WHERE JABOA.BOOK_TYPE_CODE = BOOK_NAME
        AND JABOA.TYPE = (
        SELECT
          TYPE
        FROM
          JAI_FA_AST_BLOCKS
        WHERE BLOCK_ID = CP_BLOCK_ID )
      ORDER BY
        START_DATE ASC;
    LV_EXISTS VARCHAR2(1);
    LN_OPENING_WDV JAI_FA_AST_BLOCKS.OPENING_WDV%TYPE;
    CURSOR DEPR_CUR1 IS
      SELECT
        A.ASSET_ID,
        A.COST,
        A.TRANSACTION_HEADER_ID_IN,
        A.DATE_EFFECTIVE
      FROM
        FA_BOOKS A,
        JAI_FA_AST_BLOCKS B,
        JAI_FA_AST_BLOCK_DTLS C,
        JAI_FA_AST_PERIOD_RATES D
      WHERE A.ASSET_ID = C.ASSET_ID
        AND ( ( C.ASSET_TYPE = LV_ASSEST_CAPITALIZED
        AND A.CAPITALIZE_FLAG = LV_FLAG )
      OR C.ASSET_TYPE = LV_ASSET_TYPE )
        AND B.BLOCK_ID = CF_6FORMULA.BLOCK_ID
        AND TO_CHAR(B.BLOCK_ID) = C.BLOCK_ID
        AND A.BOOK_TYPE_CODE = B.BOOK_TYPE_CODE
        AND A.BOOK_TYPE_CODE = BOOK_NAME
        AND C.DATE_OF_ACQUISITION between D.START_DATE
        AND D.END_DATE
        AND B.START_DATE between NVL(JA_JAINASST_XMLP_PKG.START_DATE
         ,B.START_DATE)
        AND NVL(END_DATE
         ,B.YEAR_ENDED)
        AND D.START_DATE >= ADD_MONTHS(JA_JAINASST_XMLP_PKG.START_DATE,6)
        AND D.SLNO = 2
        AND A.DATE_INEFFECTIVE is null
        AND A.TRANSACTION_HEADER_ID_OUT is null;
    CURSOR BLOCK_RET_CUR_FIR(P_BLOCK_TYPE IN VARCHAR2) IS
      SELECT
        NVL(SUM(C.PROCEEDS_OF_SALE - C.COST_OF_REMOVAL)
           ,0) SALE
      FROM
        JAI_FA_AST_BLOCKS A,
        FA_ADDITIONS B,
        FA_RETIREMENTS C,
        JAI_FA_AST_PERIOD_RATES D
      WHERE B.CONTEXT = P_CONTEXT_VALUE
        AND TO_CHAR(A.BLOCK_ID) = B.ATTRIBUTE2
        AND A.BOOK_TYPE_CODE = BOOK_NAME
        AND B.OWNED_LEASED = 'OWNED'
        AND B.ASSET_TYPE IN ( 'CAPITALIZED' , 'EXPENSED' )
        AND TO_DATE(B.ATTRIBUTE1
             ,'DD-MON-RRRR') between D.START_DATE
        AND D.END_DATE
        AND D.START_DATE < ADD_MONTHS(JA_JAINASST_XMLP_PKG.START_DATE
                ,6)
        AND D.SLNO = 1
        AND B.ASSET_ID = C.ASSET_ID
        AND C.STATUS = 'PROCESSED'
        AND A.TYPE = P_BLOCK_TYPE
        AND A.BLOCK_ID = CF_6FORMULA.BLOCK_ID
        AND C.DATE_RETIRED BETWEEN JA_JAINASST_XMLP_PKG.START_DATE
        AND JA_JAINASST_XMLP_PKG.END_DATE;
    CURSOR BLOCK_RET_CUR_SEC(P_BLOCK_TYPE IN VARCHAR2) IS
      SELECT
        NVL(SUM(C.PROCEEDS_OF_SALE - C.COST_OF_REMOVAL)
           ,0) SALE
      FROM
        JAI_FA_AST_BLOCKS A,
        FA_ADDITIONS B,
        FA_RETIREMENTS C,
        JAI_FA_AST_PERIOD_RATES D
      WHERE B.CONTEXT = P_CONTEXT_VALUE
        AND TO_CHAR(A.BLOCK_ID) = B.ATTRIBUTE2
        AND A.BOOK_TYPE_CODE = BOOK_NAME
        AND B.OWNED_LEASED = 'OWNED'
        AND B.ASSET_TYPE IN ( 'CAPITALIZED' , 'EXPENSED' )
        AND TO_DATE(B.ATTRIBUTE1
             ,'DD-MON-RRRR') between D.START_DATE
        AND D.END_DATE
        AND D.START_DATE >= ADD_MONTHS(JA_JAINASST_XMLP_PKG.START_DATE
                ,6)
        AND D.SLNO = 2
        AND B.ASSET_ID = C.ASSET_ID
        AND C.STATUS = 'PROCESSED'
        AND A.TYPE = P_BLOCK_TYPE
        AND A.BLOCK_ID = CF_6FORMULA.BLOCK_ID
        AND C.DATE_RETIRED BETWEEN JA_JAINASST_XMLP_PKG.START_DATE
        AND JA_JAINASST_XMLP_PKG.END_DATE;
    V_COST NUMBER;
    V_TOTAL1 NUMBER;
    V_TOTAL2 NUMBER;
    V_DEPRN NUMBER;
    V_DEPRNAFTER NUMBER;
    V_DEPRNBEFORE NUMBER;
    LN_TOTAL_SEC_HF_COST NUMBER := 0;
    V_FIR_DEDUCTION NUMBER;
    V_SEC_DEDUCTION NUMBER;
  BEGIN
    LV_ASSEST_CAPITALIZED := 'CAPITALIZED';
    LV_FLAG := 'YES';
    LV_ASSET_TYPE := 'EXPENSED';
    OPEN CUR_GET_VALID_ASSETS;
    FETCH CUR_GET_VALID_ASSETS
     INTO LV_EXISTS;
    OPEN CUR_GET_ST_OP_BAL(CP_BLOCK_ID => BLOCK_ID);
    FETCH CUR_GET_ST_OP_BAL
     INTO LN_OPENING_WDV;
    CLOSE CUR_GET_ST_OP_BAL;
    IF CUR_GET_VALID_ASSETS%NOTFOUND AND LN_OPENING_WDV = 0 THEN
      /*SRW.MESSAGE(1275
                 ,'1.1 opening wdv for the first period record for the type and book name is 0')*/NULL;
      V_DEPRN := 0;
    ELSE
      V_FIR_DEDUCTION := NULL;
      V_SEC_DEDUCTION := NULL;
      OPEN BLOCK_RET_CUR_FIR(TYPE);
      FETCH BLOCK_RET_CUR_FIR
       INTO V_FIR_DEDUCTION;
      CLOSE BLOCK_RET_CUR_FIR;
      OPEN BLOCK_RET_CUR_SEC(TYPE);
      FETCH BLOCK_RET_CUR_SEC
       INTO V_SEC_DEDUCTION;
      CLOSE BLOCK_RET_CUR_SEC;
      LV_ASSEST_CAPITALIZED := 'CAPITALIZED';
      LV_FLAG := 'YES';
      LV_ASSET_TYPE := 'EXPENSED';
      FOR rec_depr_cur IN DEPR_CUR1 LOOP
        LN_TOTAL_SEC_HF_COST := CALCULATE_ACTUAL_COST(P_TRANSACTION_HEADER_ID_IN => REC_DEPR_CUR.TRANSACTION_HEADER_ID_IN
                                                     ,P_DATE_EFFECTIVE => REC_DEPR_CUR.DATE_EFFECTIVE
                                                     ,P_BOOK_NAME => BOOK_NAME
                                                     ,P_ASSET_ID => REC_DEPR_CUR.ASSET_ID
                                                     ,P_COST => NVL(REC_DEPR_CUR.COST
                                                        ,0)) + LN_TOTAL_SEC_HF_COST;
      END LOOP;
      /*SRW.MESSAGE(1275
                 ,'CF_6 1.ln_total_sec_hf_cost ->' || LN_TOTAL_SEC_HF_COST)*/NULL;
      V_TOTAL2 := NVL(OP_TOT
                     ,0) + NVL(COS_TOT
                     ,0) - NVL(LN_TOTAL_SEC_HF_COST
                     ,0) - NVL(V_FIR_DEDUCTION
                     ,0);
      V_DEPRNBEFORE := V_TOTAL2 * (RATE / 100);
      /*SRW.MESSAGE(1275
                 ,'CF_6 2.1 V_Total2 -> ' || V_TOTAL2 || ', v_DeprnBefore -> ' || V_DEPRNBEFORE)*/NULL;
      IF V_TOTAL2 < 0 THEN
        V_DEPRNBEFORE := 0;
        LN_TOTAL_SEC_HF_COST := NVL(LN_TOTAL_SEC_HF_COST
                                   ,0) + V_TOTAL2;
      ELSE
        V_DEPRNBEFORE := V_TOTAL2 * (RATE / 100);
      END IF;
      LN_TOTAL_SEC_HF_COST := NVL(LN_TOTAL_SEC_HF_COST
                                 ,0) - NVL(V_SEC_DEDUCTION
                                 ,0);
      V_DEPRNAFTER := NVL(LN_TOTAL_SEC_HF_COST
                         ,0) * (RATE / 100) * 0.5;
      V_DEPRN := V_DEPRNBEFORE + V_DEPRNAFTER;
      IF V_DEPRN <= 0 THEN
        V_DEPRN := 0;
      END IF;
    END IF;
    CLOSE CUR_GET_VALID_ASSETS;
    RETURN (V_DEPRN);
  END CF_6FORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_8FORMULA(BLOCK_ID IN NUMBER) RETURN NUMBER IS
    LV_ASSEST_CAPITALIZED JAI_FA_AST_BLOCK_DTLS.ASSET_TYPE%TYPE;
    LV_FLAG FA_BOOKS.CAPITALIZE_FLAG%TYPE;
    LV_ASSET_TYPE JAI_FA_AST_BLOCK_DTLS.ASSET_TYPE%TYPE;
    CURSOR ASSET_COST IS
      SELECT
        NVL(SUM(COST)
           ,0) COST
      FROM
        FA_BOOKS A,
        JAI_FA_AST_BLOCK_DTLS B
      WHERE A.ASSET_ID NOT IN (
        SELECT
          ASSET_ID
        FROM
          FA_RETIREMENTS
        WHERE BOOK_TYPE_CODE = BOOK_NAME
          AND STATUS = 'PROCESSED'
          AND DATE_RETIRED between START_DATE
          AND END_DATE )
        AND B.ASSET_ID = A.ASSET_ID
        AND ( ( B.ASSET_TYPE = LV_ASSEST_CAPITALIZED
        AND A.CAPITALIZE_FLAG = LV_FLAG )
      OR B.ASSET_TYPE = LV_ASSET_TYPE )
        AND B.BLOCK_ID = TO_CHAR(BLOCK_ID)
        AND A.BOOK_TYPE_CODE = BOOK_NAME
        AND B.DATE_OF_ACQUISITION between START_DATE
        AND END_DATE
        AND A.RETIREMENT_PENDING_FLAG = 'NO'
      GROUP BY
        B.BLOCK_ID;
    V_ASSET_COST NUMBER;
  BEGIN
    LV_ASSEST_CAPITALIZED := 'CAPITALIZED';
    LV_FLAG := 'YES';
    LV_ASSET_TYPE := 'EXPENSED';
    OPEN ASSET_COST;
    FETCH ASSET_COST
     INTO V_ASSET_COST;
    CLOSE ASSET_COST;
    RETURN (V_ASSET_COST);
  END CF_8FORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR C_PROGRAM_ID(P_REQUEST_ID IN NUMBER) IS
      SELECT
        CONCURRENT_PROGRAM_ID,
        NVL(ENABLE_TRACE
           ,'N')
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_REQUEST_ID;
    CURSOR GET_AUDSID IS
      SELECT
        A.SID,
        A.SERIAL#,
        B.SPID
      FROM
        V$SESSION A,
        V$PROCESS B
      WHERE AUDSID = USERENV('SESSIONID')
        AND A.PADDR = B.ADDR;
    CURSOR GET_DBNAME IS
      SELECT
        NAME
      FROM
        V$DATABASE;
    V_AUDSID NUMBER := USERENV('SESSIONID');
    V_SID NUMBER;
    V_SERIAL NUMBER;
    V_SPID VARCHAR2(9);
    V_DBNAME VARCHAR2(25);
    V_ENABLE_TRACE FND_CONCURRENT_PROGRAMS.ENABLE_TRACE%TYPE;
    V_PROGRAM_ID FND_CONCURRENT_PROGRAMS.CONCURRENT_PROGRAM_ID%TYPE;
  BEGIN
    /*SRW.MESSAGE(1275
               ,'Report Version is 120.4 Last modified date is 13/10/2006')*/NULL;
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    BEGIN
      OPEN C_PROGRAM_ID(P_CONC_REQUEST_ID);
      FETCH C_PROGRAM_ID
       INTO V_PROGRAM_ID,V_ENABLE_TRACE;
      CLOSE C_PROGRAM_ID;
      /*SRW.MESSAGE(1275
                 ,'v_program_id -> ' || V_PROGRAM_ID || ', v_enable_trace -> ' || V_ENABLE_TRACE || ', request_id -> ' || P_CONC_REQUEST_ID)*/NULL;
      IF V_ENABLE_TRACE = 'Y' THEN
        OPEN GET_AUDSID;
        FETCH GET_AUDSID
         INTO V_SID,V_SERIAL,V_SPID;
        CLOSE GET_AUDSID;
        OPEN GET_DBNAME;
        FETCH GET_DBNAME
         INTO V_DBNAME;
        CLOSE GET_DBNAME;
        /*SRW.MESSAGE(1275
                   ,'TraceFile Name = ' || LOWER(V_DBNAME) || '_ora_' || V_SPID || '.trc')*/NULL;
        EXECUTE IMMEDIATE
          'ALTER SESSION SET EVENTS ''10046 trace name context forever, level 4''';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1275
                   ,'Error during enabling the trace. ErrCode -> ' || SQLCODE || ', ErrMesg -> ' || SQLERRM)*/NULL;
    END;
    P_CONTEXT_VALUE := 'India B Of Assets';
    LSTART_DATE:=to_char(START_DATE,'DD/MON/YYYY');
    LEND_DATE:=to_char(END_DATE,'DD/MON/YYYY');

    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_ADDITIONS_COSTFORMULA(COST IN NUMBER
                                   ,TRANSACTION_HEADER_ID_IN IN NUMBER
                                   ,DATE_EFFECTIVE IN DATE
                                   ,ASSET_ID IN NUMBER) RETURN NUMBER IS
    CURSOR CUR_GET_ADDITION_COST(CP_TRANSACTION_HEADER_ID_IN IN FA_BOOKS.TRANSACTION_HEADER_ID_IN%TYPE,CP_DATE_EFFECTIVE IN FA_BOOKS.DATE_EFFECTIVE%TYPE,CP_BOOK_NAME IN FA_BOOKS.BOOK_TYPE_CODE%TYPE,CP_ASSET_ID IN FA_BOOKS.ASSET_ID%TYPE) IS
      SELECT
        TRANSACTION_HEADER_ID_IN,
        DATE_EFFECTIVE,
        FAB.COST
      FROM
        FA_BOOKS FAB
      WHERE FAB.TRANSACTION_HEADER_ID_OUT = CP_TRANSACTION_HEADER_ID_IN
        AND TRUNC(FAB.DATE_INEFFECTIVE) = TRUNC(CP_DATE_EFFECTIVE)
        AND FAB.BOOK_TYPE_CODE = CP_BOOK_NAME
        AND FAB.ASSET_ID = CP_ASSET_ID
        AND FAB.RETIREMENT_ID IS NOT NULL;
    REC_CUR_GET_ADDITION_COST CUR_GET_ADDITION_COST%ROWTYPE;
    LN_ADDITION_COST FA_BOOKS.COST%TYPE;
    LN_TRANSACTION_HEADER_ID_IN FA_BOOKS.TRANSACTION_HEADER_ID_IN%TYPE;
    LD_DATE_EFFECTIVE FA_BOOKS.DATE_EFFECTIVE%TYPE;
  BEGIN
    /*SRW.MESSAGE(1275
               ,'in cf8 formula column processing')*/NULL;
    IF NVL(COST
       ,0) <> 0 THEN
      LN_ADDITION_COST := COST;
      LN_TRANSACTION_HEADER_ID_IN := TRANSACTION_HEADER_ID_IN;
      LD_DATE_EFFECTIVE := DATE_EFFECTIVE;
      LOOP
        OPEN CUR_GET_ADDITION_COST(CP_TRANSACTION_HEADER_ID_IN => LN_TRANSACTION_HEADER_ID_IN,CP_DATE_EFFECTIVE => LD_DATE_EFFECTIVE,CP_BOOK_NAME => BOOK_NAME,CP_ASSET_ID => ASSET_ID);
        FETCH CUR_GET_ADDITION_COST
         INTO REC_CUR_GET_ADDITION_COST;
        IF CUR_GET_ADDITION_COST%NOTFOUND THEN
          CLOSE CUR_GET_ADDITION_COST;
          EXIT;
        ELSE
          LN_TRANSACTION_HEADER_ID_IN := REC_CUR_GET_ADDITION_COST.TRANSACTION_HEADER_ID_IN;
          LD_DATE_EFFECTIVE := REC_CUR_GET_ADDITION_COST.DATE_EFFECTIVE;
          LN_ADDITION_COST := REC_CUR_GET_ADDITION_COST.COST;
          CLOSE CUR_GET_ADDITION_COST;
        END IF;
      END LOOP;
      /*SRW.MESSAGE(1275
                 ,'value of  ln_addition_cost is ' || LN_ADDITION_COST)*/NULL;
      RETURN (LN_ADDITION_COST);
    ELSE
      RETURN 0;
    END IF;
  END CF_ADDITIONS_COSTFORMULA;

  FUNCTION CF_CLOSING_WDV_TOTALFORMULA(DEP_TOT IN NUMBER
                                      ,CF_3 IN NUMBER) RETURN NUMBER IS
    LN_CLOSING_WDV_TOTAL JAI_FA_AST_BLOCKS.CLOSING_WDV%TYPE;
  BEGIN
    IF NVL(DEP_TOT
       ,0) = 0 THEN
      LN_CLOSING_WDV_TOTAL := 0;
    ELSE
      LN_CLOSING_WDV_TOTAL := NVL(CF_3 - DEP_TOT
                                 ,0);
    END IF;
    IF LN_CLOSING_WDV_TOTAL < 0 THEN
      LN_CLOSING_WDV_TOTAL := 0;
    END IF;
    RETURN (LN_CLOSING_WDV_TOTAL);
  END CF_CLOSING_WDV_TOTALFORMULA;

  FUNCTION CALCULATE_ACTUAL_COST(P_TRANSACTION_HEADER_ID_IN IN FA_BOOKS.TRANSACTION_HEADER_ID_IN%TYPE
                                ,P_DATE_EFFECTIVE IN FA_BOOKS.DATE_EFFECTIVE%TYPE
                                ,P_BOOK_NAME IN FA_BOOKS.BOOK_TYPE_CODE%TYPE
                                ,P_ASSET_ID IN FA_BOOKS.ASSET_ID%TYPE
                                ,P_COST IN FA_BOOKS.COST%TYPE) RETURN NUMBER IS
    CURSOR CUR_GET_ADDITION_COST(CP_TRANSACTION_HEADER_ID_IN IN FA_BOOKS.TRANSACTION_HEADER_ID_IN%TYPE,CP_DATE_EFFECTIVE IN FA_BOOKS.DATE_EFFECTIVE%TYPE,CP_BOOK_NAME IN FA_BOOKS.BOOK_TYPE_CODE%TYPE,CP_ASSET_ID IN FA_BOOKS.ASSET_ID%TYPE) IS
      SELECT
        TRANSACTION_HEADER_ID_IN,
        DATE_EFFECTIVE,
        FAB.COST
      FROM
        FA_BOOKS FAB
      WHERE FAB.TRANSACTION_HEADER_ID_OUT = CP_TRANSACTION_HEADER_ID_IN
        AND TRUNC(FAB.DATE_INEFFECTIVE) = TRUNC(CP_DATE_EFFECTIVE)
        AND FAB.BOOK_TYPE_CODE = CP_BOOK_NAME
        AND FAB.ASSET_ID = CP_ASSET_ID
        AND FAB.RETIREMENT_ID IS NOT NULL;
    REC_CUR_GET_ADDITION_COST CUR_GET_ADDITION_COST%ROWTYPE;
    LN_ADDITION_COST FA_BOOKS.COST%TYPE;
    LN_TRANSACTION_HEADER_ID_IN FA_BOOKS.TRANSACTION_HEADER_ID_IN%TYPE;
    LD_DATE_EFFECTIVE FA_BOOKS.DATE_EFFECTIVE%TYPE;
  BEGIN
    /*SRW.MESSAGE(1275
               ,'in function calculate_actual_cost for actual cost processing')*/NULL;
    LN_ADDITION_COST := P_COST;
    LN_TRANSACTION_HEADER_ID_IN := P_TRANSACTION_HEADER_ID_IN;
    LD_DATE_EFFECTIVE := P_DATE_EFFECTIVE;
    LOOP
      OPEN CUR_GET_ADDITION_COST(CP_TRANSACTION_HEADER_ID_IN => LN_TRANSACTION_HEADER_ID_IN,CP_DATE_EFFECTIVE => LD_DATE_EFFECTIVE,CP_BOOK_NAME => P_BOOK_NAME,CP_ASSET_ID => P_ASSET_ID);
      FETCH CUR_GET_ADDITION_COST
       INTO REC_CUR_GET_ADDITION_COST;
      IF CUR_GET_ADDITION_COST%NOTFOUND THEN
        CLOSE CUR_GET_ADDITION_COST;
        EXIT;
      ELSE
        LN_TRANSACTION_HEADER_ID_IN := REC_CUR_GET_ADDITION_COST.TRANSACTION_HEADER_ID_IN;
        LD_DATE_EFFECTIVE := REC_CUR_GET_ADDITION_COST.DATE_EFFECTIVE;
        LN_ADDITION_COST := REC_CUR_GET_ADDITION_COST.COST;
        CLOSE CUR_GET_ADDITION_COST;
      END IF;
    END LOOP;
    /*SRW.MESSAGE(1275
               ,'Asset ->' || P_ASSET_ID || ' Book_name ' || P_BOOK_NAME || 'value of ln_addition_cost is ' || LN_ADDITION_COST)*/NULL;
    RETURN (LN_ADDITION_COST);
  END CALCULATE_ACTUAL_COST;

END JA_JAINASST_XMLP_PKG;



/
