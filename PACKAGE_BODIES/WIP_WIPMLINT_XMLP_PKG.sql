--------------------------------------------------------
--  DDL for Package Body WIP_WIPMLINT_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."WIP_WIPMLINT_XMLP_PKG" AS
/* $Header: WIPMLINTB.pls 120.1 2008/01/31 12:26:29 npannamp noship $ */
  FUNCTION C_SUCCESSFORMULA(PPHASE IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (PPHASE = 4) THEN
      RETURN (1);
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SUCCESSFORMULA;
  FUNCTION C_SUCCESS_REPETITIVEFORMULA(PPHASE1 IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (PPHASE1 = 4) THEN
      RETURN (1);
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SUCCESS_REPETITIVEFORMULA;
  FUNCTION C_SUCCESS_RESCHEDULEFORMULA(PPHASE2 IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF (PPHASE2 = 4) THEN
      RETURN (1);
    ELSE
      RETURN (0);
    END IF;
    RETURN NULL;
  END C_SUCCESS_RESCHEDULEFORMULA;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
    qty_precision:=wip_common_xmlp_pkg.get_precision(P_qty_precision);
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      /*SRW.USER_EXIT('FND FLEXSQL CODE="MSTK"
                    APPL_SHORT_NAME="INV" OUTPUT="P_FLEXDATA"
                    MODE="SELECT" DISPLAY="ALL" TABLEALIAS="MSI" ')*/NULL;
      RETURN TRUE;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION C_FLEXFIELDFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN NULL;
  END C_FLEXFIELDFORMULA;
  FUNCTION C_FLEXFIELD1FORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN NULL;
  END C_FLEXFIELD1FORMULA;
  FUNCTION C_FLEXFIELD2FORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN NULL;
  END C_FLEXFIELD2FORMULA;
  FUNCTION GROUPID RETURN CHARACTER IS
    GRP_ID VARCHAR2(500);
  BEGIN
    IF (P_GROUP_ID IS NOT NULL) THEN
      GRP_ID := 'and wjsi.group_id = ''' || P_GROUP_ID || '''ORDER BY 1 ASC,2 ASC , wjsi.load_type,wjsi.process_phase,wjsi.process_status,wjsi.wip_entity_id,wjsi.repetitive_schedule_id';
    ELSE
      GRP_ID := 'ORDER BY 1 ASC,2 ASC , wjsi.load_type,wjsi.process_phase,wjsi.process_status,wjsi.wip_entity_id, wjsi.repetitive_schedule_id';
    END IF;
    RETURN (GRP_ID);
  END GROUPID;
  FUNCTION C_FAILFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN NULL;
  END C_FAILFORMULA;
  FUNCTION C_FAIL_REPFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN NULL;
  END C_FAIL_REPFORMULA;
  FUNCTION C_FAIL_RESFORMULA RETURN VARCHAR2 IS
  BEGIN
    RETURN NULL;
  END C_FAIL_RESFORMULA;
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;
  FUNCTION INCLUDE_WARNINGS RETURN CHARACTER IS
    INCLUDE_WARNINGS VARCHAR2(500);
  BEGIN
    IF (P_INCLUDE_WARNINGS = 2) THEN
      INCLUDE_WARNINGS := 'and wie.error_type = 1 order by 1';
    ELSE
      INCLUDE_WARNINGS := 'order by 1';
    END IF;
    RETURN (INCLUDE_WARNINGS);
  END INCLUDE_WARNINGS;
  FUNCTION C_STATUS_TYPEFORMULA(STATUS_TYPE IN NUMBER) RETURN CHAR IS
    L_STATUS_MEANING MFG_LOOKUPS.MEANING%TYPE;
  BEGIN
    SELECT
      MEANING
    INTO L_STATUS_MEANING
    FROM
      MFG_LOOKUPS
    WHERE LOOKUP_CODE = STATUS_TYPE
      AND LOOKUP_TYPE = 'WIP_JOB_STATUS';
    RETURN (L_STATUS_MEANING);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END C_STATUS_TYPEFORMULA;
END WIP_WIPMLINT_XMLP_PKG;



/
