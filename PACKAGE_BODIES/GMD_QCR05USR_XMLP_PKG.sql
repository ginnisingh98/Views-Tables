--------------------------------------------------------
--  DDL for Package Body GMD_QCR05USR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GMD_QCR05USR_XMLP_PKG" AS
/* $Header: QCR05USRB.pls 120.0 2007/12/24 13:09:26 krreddy noship $ */
  FUNCTION EXPIREDCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(EXPIRED_ITEMS)*/NULL;
    IF EXPIRED_ITEMS = 'Yes' THEN
      EXPIREDCP := ' and ((mln.EXPIRATION_DATE  <= ''' || TO_CHAR(SYSDATE) || ''') ';
    ELSE
      EXPIREDCP := '   ';
    END IF;
    /*SRW.MESSAGE(1000
               ,' :ExpiredCP ' || EXPIREDCP)*/NULL;
    RETURN (EXPIREDCP);
  END EXPIREDCFFORMULA;

  FUNCTION EXPIREDCPFORMULA(EXPIREDCF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(EXPIREDCF)*/NULL;
    RETURN NULL;
  END EXPIREDCPFORMULA;

  FUNCTION RETEST_REQCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF (EXPIRED_ITEMS = 'Yes') THEN
      IF (RETEST_ITEMS = 'Yes') THEN
        RETEST_REQCP := ' or (mln.RETEST_DATE  <= ''' || TO_CHAR(SYSDATE) || ''')) ';
      ELSE
        RETEST_REQCP := ')';
      END IF;
    ELSE
      IF (RETEST_ITEMS = 'Yes') THEN
        RETEST_REQCP := ' and (mln.RETEST_DATE  <=''' || TO_CHAR(SYSDATE) || ''') ';
      ELSE
        RETEST_REQCP := '   ';
      END IF;
    END IF;
    /*SRW.MESSAGE(1000
               ,':Retest_ReqCP ' || RETEST_REQCP)*/NULL;
    RETURN (RETEST_REQCP);
  END RETEST_REQCFFORMULA;

  FUNCTION FUTURE_EXPIRECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(FUTURE_EXPIRE)*/NULL;
    /*SRW.REFERENCE(EXPIRY_WITHIN)*/NULL;
    IF FUTURE_EXPIRE = 'Yes' THEN
      IF EXPIRY_WITHIN IS NULL THEN
        FUTURE_EXPIRYCP := 'and ((mln.expiration_date >= ''' || TO_CHAR(SYSDATE) || ''')';
      ELSE
        FUTURE_EXPIRYCP := ' and (((mln.expiration_date <= ''' || TO_CHAR(SYSDATE + EXPIRY_WITHIN) || ''')
                           					   and (mln.expiration_date >= ''' || TO_CHAR(SYSDATE) || '''))';
      END IF;
    ELSE
      FUTURE_EXPIRYCP := '   ';
    END IF;
    /*SRW.MESSAGE(1000
               ,' :Future_ExpiryCP ' || FUTURE_EXPIRYCP)*/NULL;
    RETURN (FUTURE_EXPIRYCP);
  END FUTURE_EXPIRECFFORMULA;

  FUNCTION FUTURE_EXPIRYCPFORMULA(FUTURE_EXPIRYCF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(FUTURE_EXPIRYCF)*/NULL;
    RETURN NULL;
  END FUTURE_EXPIRYCPFORMULA;

  FUNCTION FUTURERETESTCPFORMULA(FUTURERETESTCF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(FUTURERETESTCF)*/NULL;
    RETURN NULL;
  END FUTURERETESTCPFORMULA;

  FUNCTION FUTURERETESTCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(FUTURE_EXPIRE)*/NULL;
    /*SRW.REFERENCE(FUTURE_RETEST)*/NULL;
    /*SRW.REFERENCE(RETEST_WITHIN)*/NULL;
    IF (FUTURE_EXPIRE = 'Yes') THEN
      IF (FUTURE_RETEST = 'Yes') THEN
        FUTURERETESTCP := ' or (mln.retest_date <=''' || TO_CHAR(SYSDATE + NVL(RETEST_WITHIN
                                     ,0)) || ''')) ';
      ELSE
        FUTURERETESTCP := ')';
      END IF;
    ELSE
      IF (FUTURE_RETEST = 'Yes') THEN
        FUTURERETESTCP := ' and (mln.retest_date<=''' || TO_CHAR(SYSDATE) || ''') ';
      ELSE
        FUTURERETESTCP := '   ';
      END IF;
    END IF;
    RETURN (FUTURERETESTCP);
    /*SRW.MESSAGE(1000
               ,':FutureRetestCP ' || FUTURERETESTCP)*/NULL;
  END FUTURERETESTCFFORMULA;

  FUNCTION EXCLUSIVE_TESTSCPFORMULA(EXCLUSIVE_TESTSCF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(EXCLUSIVE_TESTSCF)*/NULL;
    RETURN NULL;
  END EXCLUSIVE_TESTSCPFORMULA;

  FUNCTION EXCLUSIVE_TESTSCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(EXCLUSIVE_TEST)*/NULL;
    IF EXCLUSIVE_TEST = 'Yes' THEN
      EXCLUSIVE_TESTSCP := ' and t.test_id
                           		 not in
                                              (select test_id
                           		     from gmd_results r
                           		      where
                                                  r.result_date > ''' || TO_CHAR(SYSDATE - NVL(EXCLUSIVE_WITHIN
                                      ,0)) || ''')';
    ELSE
      EXCLUSIVE_TESTSCP := '   ';
    END IF;
    RETURN (EXCLUSIVE_TESTSCP);
  END EXCLUSIVE_TESTSCFFORMULA;

  FUNCTION EXCLUSIVE_TESTVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END EXCLUSIVE_TESTVALIDTRIGGER;

  FUNCTION EXPIRED_ITEMSVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END EXPIRED_ITEMSVALIDTRIGGER;

  FUNCTION EXCLUSIVE_WITHINVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END EXCLUSIVE_WITHINVALIDTRIGGER;

  FUNCTION EXPIRY_WITHINVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END EXPIRY_WITHINVALIDTRIGGER;

  FUNCTION FUTURE_EXPIREVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END FUTURE_EXPIREVALIDTRIGGER;

  FUNCTION FUTURE_RETESTVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END FUTURE_RETESTVALIDTRIGGER;

  FUNCTION RETEST_ITEMSVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END RETEST_ITEMSVALIDTRIGGER;

  FUNCTION RETEST_WITHINVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END RETEST_WITHINVALIDTRIGGER;

  FUNCTION FROM_WHSEVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END FROM_WHSEVALIDTRIGGER;

  FUNCTION TO_WHSEVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END TO_WHSEVALIDTRIGGER;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    IF FROM_WHSE IS NULL THEN
      IF TO_WHSE IS NOT NULL THEN
        /*SRW.MESSAGE(100
                   ,GGM_MESSAGE.GET('IC_FRM_REQD_FOR_THRU'))*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      END IF;
    END IF;
    IF FROM_LOTSTATUS IS NULL THEN
      IF TO_LOTSTATUS IS NOT NULL THEN
        /*SRW.MESSAGE(100
                   ,GGM_MESSAGE.GET('IC_FRM_REQD_FOR_THRU'))*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      END IF;
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION SUBINVENTORYCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_SUBINVENTORY IS NULL THEN
      IF TO_SUBINVENTORY IS NULL THEN
        RETURN ('  ');
      END IF;
    ELSE
      IF TO_SUBINVENTORY IS NULL THEN
        RETURN (' and moqd.subinventory_code >= ''' || FROM_SUBINVENTORY || '''');
      ELSE
        RETURN (' and moqd.subinventory_code >= ''' || FROM_SUBINVENTORY || ''' and moqd.subinventory_code <= ''' || TO_SUBINVENTORY || '''');
      END IF;
    END IF;
    RETURN '  ';
  END SUBINVENTORYCFFORMULA;

  FUNCTION LOT_STATUSCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_LOTSTATUS IS NULL THEN
      IF TO_LOTSTATUS IS NULL THEN
        RETURN ('  ');
      END IF;
    ELSE
      IF TO_LOTSTATUS IS NULL THEN
        RETURN (' AND mln.status_id >= ''' || FROM_LOTSTATUS || '''');
      ELSE
        RETURN (' AND  mln.status_id  >=''' || FROM_LOTSTATUS || ''' and  mln.status_id  <=''' || TO_LOTSTATUS || '''');
      END IF;
    END IF;
    RETURN '  ';
  END LOT_STATUSCFFORMULA;

  FUNCTION FROM_SUBINVENTORYCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_SUBINVENTORY IS NULL THEN
      FROM_SUBINVENTORYCP := SY_ALL;
    ELSE
      FROM_SUBINVENTORYCP := FROM_SUBINVENTORY;
    END IF;
    /*SRW.MESSAGE(1000
               ,':FROM_SUBINVENTORYCP ' || FROM_SUBINVENTORYCP)*/NULL;
    RETURN (FROM_SUBINVENTORYCP);
  END FROM_SUBINVENTORYCFFORMULA;

  FUNCTION FROM_LOTSTATUSCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_LOTSTATUS IS NULL THEN
      FROM_LOTSTATUSCP := SY_ALL;
    ELSE
      FROM_LOTSTATUSCP := FROM_LOTSTATUS;
    END IF;
    RETURN (FROM_LOTSTATUSCP);
  END FROM_LOTSTATUSCFFORMULA;

  FUNCTION TO_LOTSTATUSCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF TO_LOTSTATUS IS NULL THEN
      TO_LOTSTATUSCP := SY_ALL;
    ELSE
      TO_LOTSTATUSCP := TO_LOTSTATUS;
    END IF;
    RETURN (TO_LOTSTATUSCP);
  END TO_LOTSTATUSCFFORMULA;

  FUNCTION TO_SUBINVENTORYCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF TO_SUBINVENTORY IS NULL THEN
      TO_SUBINVENTORYCP := SY_ALL;
    ELSE
      TO_SUBINVENTORYCP := TO_SUBINVENTORY;
    END IF;
    /*SRW.MESSAGE(1000
               ,':TO_SUBINVENTORYCP ' || TO_SUBINVENTORYCP)*/NULL;
    RETURN (TO_SUBINVENTORYCP);
  END TO_SUBINVENTORYCFFORMULA;

  PROCEDURE QCRO5USR_HEADER IS
  BEGIN
    NULL;
  END QCRO5USR_HEADER;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_MINFORMULA(MIN_SPEC IN VARCHAR2
                        ,TEST_TYPE IN VARCHAR2
                        ,PRECISION IN NUMBER) RETURN CHAR IS
    L_PRECISION VARCHAR2(25);
    L_NUMBER NUMBER;
    L_MIN_SPEC VARCHAR2(25);
  BEGIN
    IF MIN_SPEC IS NOT NULL THEN
      IF TEST_TYPE in ('N','L','E') THEN
        L_PRECISION := '999999999999999D' || TO_CHAR(POWER(10
                                    ,PRECISION) - 1);
        L_NUMBER := MIN_SPEC;
        L_MIN_SPEC := LTRIM(TO_CHAR(TO_NUMBER(TO_CHAR(L_NUMBER))
                                   ,L_PRECISION));
        RETURN (L_MIN_SPEC);
      ELSE
        L_NUMBER := MIN_SPEC;
        RETURN L_NUMBER;
      END IF;
    ELSE
      RETURN NULL;
    END IF;
  END CF_MINFORMULA;

  FUNCTION CF_MAXFORMULA(MAX_SPEC IN VARCHAR2
                        ,TEST_TYPE IN VARCHAR2
                        ,PRECISION IN NUMBER) RETURN CHAR IS
    L_PRECISION VARCHAR2(25);
    L_NUMBER NUMBER;
    L_MAX_SPEC VARCHAR2(25);
  BEGIN
    IF MAX_SPEC IS NOT NULL THEN
      IF TEST_TYPE in ('N','L','E') THEN
        L_PRECISION := '999999999999999D' || TO_CHAR(POWER(10
                                    ,PRECISION) - 1);
        L_NUMBER := MAX_SPEC;
        L_MAX_SPEC := LTRIM(TO_CHAR(TO_NUMBER(TO_CHAR(L_NUMBER))
                                   ,L_PRECISION));
        RETURN (L_MAX_SPEC);
      ELSE
        L_NUMBER := MAX_SPEC;
        RETURN L_NUMBER;
      END IF;
    ELSE
      RETURN NULL;
    END IF;
  END CF_MAXFORMULA;

  FUNCTION CF_TARGETFORMULA(TARGET_SPEC IN NUMBER
                           ,TEST_TYPE IN VARCHAR2
                           ,PRECISION IN NUMBER) RETURN CHAR IS
    L_PRECISION VARCHAR2(25);
    L_NUMBER NUMBER;
    L_TARGET_SPEC VARCHAR2(25);
  BEGIN
    IF TARGET_SPEC IS NOT NULL THEN
      IF TEST_TYPE in ('N','L','E') THEN
        L_PRECISION := '999999999999999D' || TO_CHAR(POWER(10
                                    ,PRECISION) - 1);
        L_NUMBER := TARGET_SPEC;
        L_TARGET_SPEC := LTRIM(TO_CHAR(TO_NUMBER(TO_CHAR(L_NUMBER))
                                      ,L_PRECISION));
        RETURN (L_TARGET_SPEC);
      ELSE
        L_NUMBER := TARGET_SPEC;
        RETURN L_NUMBER;
      END IF;
    ELSE
      RETURN NULL;
    END IF;
  END CF_TARGETFORMULA;

  FUNCTION ORGCFFORMULA RETURN CHAR IS
    ORG_CODE VARCHAR2(3);
  BEGIN
    SELECT
      DISTINCT
      ORGANIZATION_CODE
    INTO ORG_CODE
    FROM
      MTL_PARAMETERS
    WHERE ORGANIZATION_ID = P_ORGANIZATION_ID;
    ORGCP := ORG_CODE;
    /*SRW.MESSAGE(1000
               ,':ORGCP ' || ORGCP)*/NULL;
    RETURN (ORGCP);
  END ORGCFFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION EXPIREDCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN EXPIREDCP;
  END EXPIREDCP_P;

  FUNCTION RETEST_REQCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RETEST_REQCP;
  END RETEST_REQCP_P;

  FUNCTION FUTURE_EXPIRYCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FUTURE_EXPIRYCP;
  END FUTURE_EXPIRYCP_P;

  FUNCTION FUTURERETESTCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FUTURERETESTCP;
  END FUTURERETESTCP_P;

  FUNCTION EXCLUSIVE_TESTSCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN EXCLUSIVE_TESTSCP;
  END EXCLUSIVE_TESTSCP_P;

  FUNCTION FROM_SUBINVENTORYCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_SUBINVENTORYCP;
  END FROM_SUBINVENTORYCP_P;

  FUNCTION FROM_LOTSTATUSCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_LOTSTATUSCP;
  END FROM_LOTSTATUSCP_P;

  FUNCTION TO_LOTSTATUSCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_LOTSTATUSCP;
  END TO_LOTSTATUSCP_P;

  FUNCTION TO_SUBINVENTORYCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_SUBINVENTORYCP;
  END TO_SUBINVENTORYCP_P;

  FUNCTION ORGCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ORGCP;
  END ORGCP_P;

END GMD_QCR05USR_XMLP_PKG;


/
