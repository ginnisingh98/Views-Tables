--------------------------------------------------------
--  DDL for Package Body PSP_PSPLDAWD_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PSP_PSPLDAWD_XMLP_PKG" AS
/* $Header: PSPLDAWDB.pls 120.4 2007/10/29 07:37:47 amakrish noship $ */
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    CURSOR C1(P_LOOKUP_CODE IN VARCHAR2,P_TEMPLATE_ID IN NUMBER) IS
      SELECT
        COUNT(1)
      FROM
        PSP_REPORT_TEMPLATE_DETAILS
      WHERE TEMPLATE_ID = P_TEMPLATE_ID
        AND CRITERIA_LOOKUP_TYPE = 'PSP_SELECTION_CRITERIA'
        AND CRITERIA_LOOKUP_CODE = P_LOOKUP_CODE;
    L_NUM NUMBER;
    L_NUM2 NUMBER;
  BEGIN
    IF P_AWD_TEMPLATE_ID IS NULL THEN
      P_AWARD_ID := ' and 1 = 1 ';
    ELSE
      OPEN C1('AWD',P_AWD_TEMPLATE_ID);
      FETCH C1
       INTO L_NUM;
      CLOSE C1;
      IF L_NUM <> 0 THEN
        P_AWARD_ID := ' and a.award_id  IN (select criteria_value1 from psp_report_template_details
                               where template_id = ' || P_AWD_TEMPLATE_ID || '
                               and   criteria_lookup_type = ''PSP_SELECTION_CRITERIA''
                               and   criteria_lookup_code = ''AWD'' ' || ' ) ';
      ELSE
        P_AWARD_ID := ' and 1 = 1 ';
      END IF;
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION BEFOREPFORM(ORIENTATION IN VARCHAR2) RETURN BOOLEAN IS
  BEGIN
    --ORIENTATION := 'LANDSCAPE';
    RETURN (TRUE);
  END BEFOREPFORM;

  FUNCTION CF_EMPLOYEE_NUMBERFORMULA RETURN VARCHAR2 IS
    V_EMPLOYEE_NUMBER VARCHAR2(30);
  BEGIN
    RETURN NULL;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'ERROR';
  END CF_EMPLOYEE_NUMBERFORMULA;

  FUNCTION CF_INSTITUTION_NAMEFORMULA RETURN VARCHAR2 IS
    V_INSTITUTION_NAME HR_ALL_ORGANIZATION_UNITS_TL.NAME%TYPE;
    V_INSTITUTION_ID VARCHAR2(30);
  BEGIN
    V_INSTITUTION_ID := VALUE('PSP_ORG_REPORT');
    IF V_INSTITUTION_ID IS NULL THEN
      RETURN NULL;
    END IF;
    SELECT
      DISTINCT
      NAME
    INTO V_INSTITUTION_NAME
    FROM
      HR_ORGANIZATION_UNITS
    WHERE ORGANIZATION_ID = TO_NUMBER(V_INSTITUTION_ID);
    RETURN V_INSTITUTION_NAME;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END CF_INSTITUTION_NAMEFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    --HR_STANDARD.EVENT('BEFORE REPORT');
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION CF_CURRENCY_FORMATFORMULA(CURRENCY_CODE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CURRENCY_CODE)*/NULL;
    RETURN (FND_CURRENCY.GET_FORMAT_MASK(CURRENCY_CODE
                                       ,30));
  END CF_CURRENCY_FORMATFORMULA;

  FUNCTION CF_SUM_CURRENCY_CODEFORMULA(CURRENCY_CODE IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CURRENCY_CODE)*/NULL;
    RETURN ('(' || CURRENCY_CODE || ')');
  END CF_SUM_CURRENCY_CODEFORMULA;

  FUNCTION CF_CURR_AWD_AMT_TOTALFORMULA(CF_CURRENCY_FORMAT IN VARCHAR2
                                       ,CS_CURR_AWD_AMT_TOTAL IN NUMBER) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CF_CURRENCY_FORMAT)*/NULL;
    /*SRW.REFERENCE(CS_CURR_AWD_AMT_TOTAL)*/NULL;
    RETURN (TO_CHAR(CS_CURR_AWD_AMT_TOTAL
                  ,CF_CURRENCY_FORMAT));
  END CF_CURR_AWD_AMT_TOTALFORMULA;

  FUNCTION CF_EARNINGS_AMOUNTFORMULA(CF_CURRENCY_FORMAT IN VARCHAR2
                                    ,EARNINGS_AMOUNT IN NUMBER) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(CF_CURRENCY_FORMAT)*/NULL;
    /*SRW.REFERENCE(EARNINGS_AMOUNT)*/NULL;
    RETURN (TO_CHAR(EARNINGS_AMOUNT
                  ,CF_CURRENCY_FORMAT));
  END CF_EARNINGS_AMOUNTFORMULA;

  FUNCTION CF_AWARD_NAMEFORMULA(AWARD_ID IN NUMBER) RETURN VARCHAR2 IS
    V_AWARD_NAME VARCHAR2(50);
  BEGIN
    SELECT
      AWARD_NUMBER
    INTO V_AWARD_NAME
    FROM
      GMS_AWARDS_ALL
    WHERE AWARD_ID = CF_AWARD_NAMEFORMULA.AWARD_ID;
    RETURN V_AWARD_NAME;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'ERROR';
  END CF_AWARD_NAMEFORMULA;

  FUNCTION CF_EMPLOYEE_NAMEFORMULA(PERSON_ID IN NUMBER) RETURN VARCHAR2 IS
    V_PERSON_NAME VARCHAR2(240);
  BEGIN
    SELECT
      FULL_NAME
    INTO V_PERSON_NAME
    FROM
      PER_ALL_PEOPLE_F
    WHERE PERSON_ID = CF_EMPLOYEE_NAMEFORMULA.PERSON_ID
      AND ( P_END_DATE Between EFFECTIVE_START_DATE
      AND EFFECTIVE_END_DATE );
    RETURN V_PERSON_NAME;
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN 'No_data_Found';
    WHEN OTHERS THEN
      RETURN 'ERROR';
  END CF_EMPLOYEE_NAMEFORMULA;

  FUNCTION CF_ASSIGNMENT_NUMBERFORMULA(ASSIGNMENT_ID IN NUMBER
                                      ,PERSON_ID IN NUMBER) RETURN VARCHAR2 IS
    V_ASSIGNMENT_NUMBER VARCHAR2(50);
  BEGIN
    SELECT
      ASSIGNMENT_NUMBER
    INTO V_ASSIGNMENT_NUMBER
    FROM
      PER_ASSIGNMENTS_F
    WHERE ASSIGNMENT_ID = CF_ASSIGNMENT_NUMBERFORMULA.ASSIGNMENT_ID
      AND PERSON_ID = CF_ASSIGNMENT_NUMBERFORMULA.PERSON_ID
      AND ( P_END_DATE BETWEEN EFFECTIVE_START_DATE
      AND EFFECTIVE_END_DATE )
      AND PERIOD_OF_SERVICE_ID IS NOT NULL;
    RETURN V_ASSIGNMENT_NUMBER;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'ERROR';
  END CF_ASSIGNMENT_NUMBERFORMULA;

  FUNCTION CF_ELEMENT_NAMEFORMULA(ELEMENT_TYPE_ID IN NUMBER) RETURN VARCHAR2 IS
    V_ELEMENT_NAME VARCHAR2(80);
  BEGIN
    SELECT
      ELEMENT_NAME
    INTO V_ELEMENT_NAME
    FROM
      PAY_ELEMENT_TYPES_F
    WHERE ELEMENT_TYPE_ID = CF_ELEMENT_NAMEFORMULA.ELEMENT_TYPE_ID
      AND ( P_END_DATE Between EFFECTIVE_START_DATE
      AND EFFECTIVE_END_DATE );
    RETURN V_ELEMENT_NAME;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'ERROR';
  END CF_ELEMENT_NAMEFORMULA;

  FUNCTION CF_TIME_PERIOD_NAMEFORMULA(TIME_PERIOD_ID IN NUMBER) RETURN VARCHAR2 IS
    V_PERIOD_NAME VARCHAR2(35);
  BEGIN
    SELECT
      DISTINCT
      PERIOD_NAME
    INTO V_PERIOD_NAME
    FROM
      PER_TIME_PERIODS
    WHERE TIME_PERIOD_ID = CF_TIME_PERIOD_NAMEFORMULA.TIME_PERIOD_ID;
    RETURN V_PERIOD_NAME;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'ERROR';
  END CF_TIME_PERIOD_NAMEFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    --HR_STANDARD.EVENT('AFTER REPORT');
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_DATE_FORMATFORMULA RETURN CHAR IS
  BEGIN
    RETURN (VALUE('ICX_DATE_FORMAT_MASK'));
  END CF_DATE_FORMATFORMULA;

  FUNCTION CF_START_DATE_DISPLAYFORMULA(CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(P_START_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(P_START_DATE
                  ,CF_DATE_FORMAT));
  END CF_START_DATE_DISPLAYFORMULA;

  FUNCTION CF_END_DATE_DISPFORMULA(CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(P_END_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(P_END_DATE
                  ,CF_DATE_FORMAT));
  END CF_END_DATE_DISPFORMULA;

  FUNCTION CF_CHARGING_INSTRUCTIONSFORMUL(EXPENDITURE_ORGANIZATION_ID IN NUMBER
                                         ,TASK_ID IN NUMBER
                                         ,PROJECT_ID IN NUMBER
                                         ,AWARD_ID IN VARCHAR2
                                         ,EXPENDITURE_TYPE IN VARCHAR2) RETURN CHAR IS
    L_PROJECT_NUMBER PA_PROJECTS_ALL.SEGMENT1%TYPE;
    L_TASK_NUMBER PA_TASKS.TASK_NUMBER%TYPE;
    L_EXP_ORG HR_ORGANIZATION_UNITS.NAME%TYPE;
    V_AWARD_NAME VARCHAR2(50);
  BEGIN
   SELECT
      AWARD_NUMBER
    INTO V_AWARD_NAME
    FROM
      GMS_AWARDS_ALL
    WHERE AWARD_ID = CF_CHARGING_INSTRUCTIONSFORMUL.AWARD_ID;
    IF EXPENDITURE_ORGANIZATION_ID IS NOT NULL THEN
      SELECT
        NAME
      INTO L_EXP_ORG
      FROM
        HR_ALL_ORGANIZATION_UNITS
      WHERE ORGANIZATION_ID = EXPENDITURE_ORGANIZATION_ID
        AND ROWNUM = 1;
    ELSE
      L_EXP_ORG := '';
    END IF;
    IF TASK_ID IS NOT NULL THEN
      SELECT
        TASK_NUMBER
      INTO L_TASK_NUMBER
      FROM
        PA_TASKS
      WHERE TASK_ID = cf_charging_instructionsformul.TASK_ID;
    ELSE
      L_TASK_NUMBER := '';
    END IF;
    IF PROJECT_ID IS NOT NULL THEN
      SELECT
        SEGMENT1
      INTO L_PROJECT_NUMBER
      FROM
        PA_PROJECTS_ALL
      WHERE PROJECT_ID = cf_charging_instructionsformul.PROJECT_ID;
    ELSE
      L_PROJECT_NUMBER := '';
    END IF;
    RETURN (L_PROJECT_NUMBER || '-' || L_TASK_NUMBER || '-' || V_AWARD_NAME || '-' || EXPENDITURE_TYPE || '-' || L_EXP_ORG);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'ERROR';
  END CF_CHARGING_INSTRUCTIONSFORMUL;

  FUNCTION CF_DATE_RUNFORMULA(CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(SYSDATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(SYSDATE
                  ,CF_DATE_FORMAT));
  END CF_DATE_RUNFORMULA;

  PROCEDURE PUT(NAME IN VARCHAR2
               ,VAL IN VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_PROFILE.PUT(:NAME, :VAL); end;');
    STPROC.BIND_I(NAME);
    STPROC.BIND_I(VAL);
    STPROC.EXECUTE;*/
    null;
  END PUT;

  FUNCTION DEFINED(NAME IN VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    /*STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := FND_PROFILE.DEFINED(:NAME); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(NAME);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,X0);*/
    RETURN X0;
  END DEFINED;

  PROCEDURE GET(NAME IN VARCHAR2
               ,VAL OUT NOCOPY VARCHAR2) IS
  BEGIN
  /*
    STPROC.INIT('begin FND_PROFILE.GET(:NAME, :VAL); end;');
    STPROC.BIND_I(NAME);
    STPROC.BIND_O(VAL);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,VAL);*/
		   null;
  END GET;

  FUNCTION VALUE(NAME IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    --STPROC.INIT('begin :X0 := FND_PROFILE.VALUE(:NAME); end;');
	begin
	X0 := FND_PROFILE.VALUE(NAME);
	end;
   /* STPROC.BIND_O(X0);
    STPROC.BIND_I(NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    RETURN X0;
  END VALUE;

  FUNCTION SAVE_USER(X_NAME IN VARCHAR2
                    ,X_VALUE IN VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
  /*
    STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := FND_PROFILE.SAVE_USER(:X_NAME, :X_VALUE); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(X_NAME);
    STPROC.BIND_I(X_VALUE);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,X0);*/
    RETURN X0;
  END SAVE_USER;

  FUNCTION SAVE(X_NAME IN VARCHAR2
               ,X_VALUE IN VARCHAR2
               ,X_LEVEL_NAME IN VARCHAR2
               ,X_LEVEL_VALUE IN VARCHAR2
               ,X_LEVEL_VALUE_APP_ID IN VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
  /*
    STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := FND_PROFILE.SAVE(:X_NAME, :X_VALUE, :X_LEVEL_NAME, :X_LEVEL_VALUE, :X_LEVEL_VALUE_APP_ID); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(X_NAME);
    STPROC.BIND_I(X_VALUE);
    STPROC.BIND_I(X_LEVEL_NAME);
    STPROC.BIND_I(X_LEVEL_VALUE);
    STPROC.BIND_I(X_LEVEL_VALUE_APP_ID);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(6
                   ,X0);*/
    RETURN X0;
  END SAVE;

  PROCEDURE GET_SPECIFIC(NAME_Z IN VARCHAR2
                        ,USER_ID_Z IN NUMBER
                        ,RESPONSIBILITY_ID_Z IN NUMBER
                        ,APPLICATION_ID_Z IN NUMBER
                        ,VAL_Z OUT NOCOPY VARCHAR2
                        ,DEFINED_Z OUT NOCOPY BOOLEAN) IS
  BEGIN
/*    STPROC.INIT('declare DEFINED_Z BOOLEAN; begin DEFINED_Z := sys.diutil.int_to_bool(:DEFINED_Z); FND_PROFILE.GET_SPECIFIC(:NAME_Z, :USER_ID_Z, :RESPONSIBILITY_ID_Z, :APPLICATION_ID_Z, :VAL_Z, DEFINED_Z);
	:DEFINED_Z := sys.diutil.bool_to_int(DEFINED_Z); end;');
    STPROC.BIND_O(DEFINED_Z);
    STPROC.BIND_I(NAME_Z);
    STPROC.BIND_I(USER_ID_Z);
    STPROC.BIND_I(RESPONSIBILITY_ID_Z);
    STPROC.BIND_I(APPLICATION_ID_Z);
    STPROC.BIND_O(VAL_Z);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,DEFINED_Z);
    STPROC.RETRIEVE(6
                   ,VAL_Z);*/
		   null;
  END GET_SPECIFIC;

  FUNCTION VALUE_SPECIFIC(NAME IN VARCHAR2
                         ,USER_ID IN NUMBER
                         ,RESPONSIBILITY_ID IN NUMBER
                         ,APPLICATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
  /*
    STPROC.INIT('begin :X0 := FND_PROFILE.VALUE_SPECIFIC(:NAME, :USER_ID, :RESPONSIBILITY_ID, :APPLICATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(NAME);
    STPROC.BIND_I(USER_ID);
    STPROC.BIND_I(RESPONSIBILITY_ID);
    STPROC.BIND_I(APPLICATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    RETURN X0;
  END VALUE_SPECIFIC;

  PROCEDURE INITIALIZE(USER_ID_Z IN NUMBER
                      ,RESPONSIBILITY_ID_Z IN NUMBER
                      ,APPLICATION_ID_Z IN NUMBER
                      ,SITE_ID_Z IN NUMBER) IS
  BEGIN
  /*
    STPROC.INIT('begin FND_PROFILE.INITIALIZE(:USER_ID_Z, :RESPONSIBILITY_ID_Z, :APPLICATION_ID_Z, :SITE_ID_Z); end;');
    STPROC.BIND_I(USER_ID_Z);
    STPROC.BIND_I(RESPONSIBILITY_ID_Z);
    STPROC.BIND_I(APPLICATION_ID_Z);
    STPROC.BIND_I(SITE_ID_Z);
    STPROC.EXECUTE;*/
    null;
  END INITIALIZE;

  PROCEDURE PUTMULTIPLE(NAMES IN VARCHAR2
                       ,VALS IN VARCHAR2
                       ,NUM IN NUMBER) IS
  BEGIN
  /*
    STPROC.INIT('begin FND_PROFILE.PUTMULTIPLE(:NAMES, :VALS, :NUM); end;');
    STPROC.BIND_I(NAMES);
    STPROC.BIND_I(VALS);
    STPROC.BIND_I(NUM);
    STPROC.EXECUTE;*/
    null;
  END PUTMULTIPLE;

END PSP_PSPLDAWD_XMLP_PKG;

/
