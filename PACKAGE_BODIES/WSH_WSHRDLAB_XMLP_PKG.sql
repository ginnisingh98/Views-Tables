--------------------------------------------------------
--  DDL for Package Body WSH_WSHRDLAB_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."WSH_WSHRDLAB_XMLP_PKG" AS
/* $Header: WSHRDLABB.pls 120.3.12010000.2 2009/03/20 09:45:46 gbhargav ship $ */
  FUNCTION CF_ORDER_NUMBERFORMULA(DELIVERY_DETAIL_ID IN NUMBER) RETURN VARCHAR2 IS
    CURSOR C_GET_NUM_DELIVERY_DETAILS(V_DELIVERY_DETAIL_ID IN NUMBER) IS
      SELECT
        decode(P_STANDALONE ,'N', source_header_number,nvl(reference_number,source_header_number))  --STANDALONE CHANGES
      FROM
        WSH_DELIVERY_DETAILS
      WHERE CONTAINER_FLAG = 'N'
        AND DELIVERY_DETAIL_ID = V_DELIVERY_DETAIL_ID;
    CURSOR C_GET_DELIVERY_DETAILS(P_DELIVERY_DETAIL_ID IN NUMBER) IS
      SELECT
        DELIVERY_DETAIL_ID
      FROM
        WSH_DELIVERY_ASSIGNMENTS_V DA
      START WITH DELIVERY_DETAIL_ID = P_DELIVERY_DETAIL_ID
      CONNECT BY prior DELIVERY_DETAIL_ID = PARENT_DELIVERY_DETAIL_ID;
    L_ORDER_NUMBER WSH_DELIVERY_DETAILS.SOURCE_HEADER_NUMBER%TYPE;
    L_FIRST_ORDER_NUMBER WSH_DELIVERY_DETAILS.SOURCE_HEADER_NUMBER%TYPE;
    L_DELIVERY_DETAIL_ID NUMBER;
    L_ORDER_COUNT NUMBER := 0;
    L_COUNT NUMBER := 0;
  BEGIN
    /*SRW.REFERENCE(DELIVERY_DETAIL_ID)*/NULL;
    OPEN C_GET_DELIVERY_DETAILS(DELIVERY_DETAIL_ID);
    LOOP
      FETCH C_GET_DELIVERY_DETAILS
       INTO L_DELIVERY_DETAIL_ID;
      EXIT WHEN C_GET_DELIVERY_DETAILS%NOTFOUND;
      OPEN C_GET_NUM_DELIVERY_DETAILS(L_DELIVERY_DETAIL_ID);
      FETCH C_GET_NUM_DELIVERY_DETAILS
       INTO L_ORDER_NUMBER;
      IF C_GET_NUM_DELIVERY_DETAILS%FOUND THEN
        IF L_COUNT = 0 THEN
          L_FIRST_ORDER_NUMBER := L_ORDER_NUMBER;
          L_ORDER_COUNT := 1;
        END IF;
        L_COUNT := L_COUNT + 1;
        IF L_ORDER_NUMBER <> L_FIRST_ORDER_NUMBER THEN
          L_ORDER_COUNT := 2;
          CLOSE C_GET_NUM_DELIVERY_DETAILS;
          EXIT;
        END IF;
      END IF;
      CLOSE C_GET_NUM_DELIVERY_DETAILS;
    END LOOP;
    CLOSE C_GET_DELIVERY_DETAILS;
    IF (L_ORDER_COUNT = 1) THEN
      RETURN (L_ORDER_NUMBER);
    ELSE
      RETURN NULL;
    END IF;
  END CF_ORDER_NUMBERFORMULA;

  FUNCTION CP_SHIP_TO_ADDRESS1FORMULA RETURN CHAR IS
  BEGIN
    NULL;
  END CP_SHIP_TO_ADDRESS1FORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    CURSOR C_GET_DELIVERY_DETAIL_ID(P_CONTAINER_NAME IN VARCHAR2) IS
      SELECT
        DELIVERY_DETAIL_ID
      FROM
        WSH_DELIVERY_DETAILS WDD
      WHERE CONTAINER_NAME = P_CONTAINER_NAME
        AND NVL(WDD.LINE_DIRECTION
         ,'O') IN ( 'O' , 'IO' )
        AND CONTAINER_FLAG = 'Y';
    L_DELIVERY_DETAIL_ID NUMBER;
  BEGIN
    IF P_CONTAINER_ID IS NOT NULL THEN
      LP_CONTAINER_ID := 'AND wdd.delivery_detail_id = :P_CONTAINER_ID';
    ELSE
      LP_MASTER_FLAG := 'AND wda.parent_delivery_detail_id IS NULL';
    END IF;
    IF (LP_CONTAINER_ID IS NULL) THEN
	    LP_CONTAINER_ID := ' ';
    END IF;
    IF (LP_MASTER_FLAG IS NULL) THEN
	    LP_MASTER_FLAG := ' ';
    END IF;
    IF P_DELIVERY_ID IS NOT NULL THEN
      LP_DELIVERY_ID := 'AND wnd.delivery_id = :P_DELIVERY_ID';
    END IF;

    IF (LP_DELIVERY_ID IS NULL) THEN
	    LP_DELIVERY_ID := ' ';
    END IF;

    IF P_FREIGHT_CODE IS NOT NULL THEN
      LP_FREIGHT_CODE := 'AND wnd.ship_method_code = :P_FREIGHT_CODE';
    END IF;

    IF (LP_FREIGHT_CODE IS NULL) THEN
	    LP_FREIGHT_CODE := ' ';
    END IF;

    IF P_ORGANIZATION_ID IS NOT NULL THEN
      LP_ORGANIZATION_ID := 'AND wnd.organization_id = :P_ORGANIZATION_ID';
    END IF;

    IF (LP_ORGANIZATION_ID IS NULL) THEN
	    LP_ORGANIZATION_ID := ' ';
    END IF;

    IF P_TRIP_STOP_ID IS NOT NULL THEN
      LP_TRIP_STOP_ID := 'AND wnd.delivery_id in (select distinct delivery_id from wsh_delivery_legs where (pick_up_stop_id =
                                                    :P_TRIP_STOP_ID  OR drop_off_stop_id =  :P_TRIP_STOP_ID ))';
    END IF;
    IF (LP_TRIP_STOP_ID IS NULL) THEN
	    LP_TRIP_STOP_ID := ' ';
    END IF;
    IF P_TRIP_ID IS NOT NULL THEN
      LP_TRIP_ID := 'AND wnd.delivery_id in (select distinct delivery_id from wsh_delivery_legs wdl , wsh_trip_stops wts
                    						where  wdl.pick_up_stop_id = wts.stop_id and
                    						      wts.trip_id = :P_TRIP_ID )';
    END IF;

    IF (LP_TRIP_ID IS NULL) THEN
    LP_TRIP_ID := ' ';
    END IF;

    IF P_DEPARTURE_DATE_HIGH IS NOT NULL THEN
      CP_DEPARTURE_DATE_HIGH := P_DEPARTURE_DATE_HIGH + (86399 / 86400);
    END IF;
    IF P_DEPARTURE_DATE_LOW IS NOT NULL OR P_DEPARTURE_DATE_HIGH IS NOT NULL THEN
      IF P_DEPARTURE_DATE_LOW IS NULL THEN
        LP_DATE_RANGE := 'AND wnd.delivery_id in (select distinct delivery_id from wsh_delivery_legs where pick_up_stop_id in (select stop_id from wsh_trip_stops where planned_departure_date <= :P_DEPARTURE_DATE_HIGH))';
      ELSIF P_DEPARTURE_DATE_HIGH IS NULL THEN
        LP_DATE_RANGE := 'AND wnd.delivery_id in (select distinct delivery_id from wsh_delivery_legs where pick_up_stop_id in (select stop_id from wsh_trip_stops where planned_departure_date >= :P_DEPARTURE_DATE_LOW))';
      ELSE
        LP_DATE_RANGE := 'AND wnd.delivery_id in (select distinct delivery_id from wsh_delivery_legs where pick_up_stop_id in (select stop_id from wsh_trip_stops where planned_departure_date between :P_DEPARTURE_DATE_LOW and :P_DEPARTURE_DATE_HIGH))';
      END IF;
    END IF;
    IF (LP_DATE_RANGE IS NULL) THEN
	    LP_DATE_RANGE := ' ';
    END IF;
    --STANDALONE CHANGES
    IF WMS_DEPLOY.WMS_DEPLOYMENT_MODE = 'D' THEN
        P_STANDALONE := 'Y';
    ELSE
        P_STANDALONE := 'N';
    END IF;

    RETURN (TRUE);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      NULL;
  END AFTERPFORM;

  FUNCTION CF_SHIP_TO_CUST_NAMEFORMULA(C_SHIP_TO_SITE_USE_ID IN NUMBER) RETURN CHAR IS
  BEGIN
    DECLARE
      SHIP_TO_CUST_NAME HZ_PARTIES.PARTY_NAME%TYPE;
      L_PERSON_TITLE HZ_PARTIES.PERSON_TITLE%TYPE;
      L_ADDRESSEE HZ_PARTY_SITES.ADDRESSEE%TYPE;
      L_PERSON_TITLE_UP HZ_PARTIES.PERSON_TITLE%TYPE;
      L_LOOKUP_TYPE VARCHAR2(20);
    BEGIN
      /*SRW.REFERENCE(C_SHIP_TO_SITE_USE_ID)*/NULL;
      SELECT
        HP.PARTY_NAME,
        NVL(HP.PERSON_PRE_NAME_ADJUNCT
           ,HP.PERSON_TITLE) TITLE,
        PS.ADDRESSEE
      INTO SHIP_TO_CUST_NAME,L_PERSON_TITLE,L_ADDRESSEE
      FROM
        HZ_PARTY_SITES PS,
        HZ_CUST_ACCT_SITES_ALL CA,
        HZ_CUST_SITE_USES_ALL SU,
        HZ_PARTIES HP
      WHERE SU.SITE_USE_ID = C_SHIP_TO_SITE_USE_ID
        AND SU.CUST_ACCT_SITE_ID = CA.CUST_ACCT_SITE_ID
        AND CA.PARTY_SITE_ID = PS.PARTY_SITE_ID
        AND HP.PARTY_ID = PS.PARTY_ID;
      IF L_PERSON_TITLE IS NOT NULL THEN
        BEGIN
          L_LOOKUP_TYPE := 'RESPONSIBILITY';
          L_PERSON_TITLE_UP := UPPER(L_PERSON_TITLE);
          SELECT
            MEANING || ' ' || SHIP_TO_CUST_NAME
          INTO SHIP_TO_CUST_NAME
          FROM
            AR_LOOKUPS
          WHERE LOOKUP_CODE = L_PERSON_TITLE_UP
            AND LOOKUP_TYPE = L_LOOKUP_TYPE;
        EXCEPTION
          WHEN OTHERS THEN
            SHIP_TO_CUST_NAME := L_PERSON_TITLE || ' ' || SHIP_TO_CUST_NAME;
        END;
      END IF;
      CP_ADDRESSEE := L_ADDRESSEE;
      IF SQL%NOTFOUND THEN
        RETURN (NULL);
      END IF;
      RETURN (SHIP_TO_CUST_NAME);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN (NULL);
      WHEN OTHERS THEN
        RAISE;
    END;
  END CF_SHIP_TO_CUST_NAMEFORMULA;

  FUNCTION CF_FREIGHT_CARRIERFORMULA(CARRIER_NAME IN VARCHAR2
                                    ,DEL_ORGANIZATION_ID IN NUMBER
                                    ,DELIVERY_ID1 IN NUMBER) RETURN CHAR IS
    L_CARRIER VARCHAR2(35);
    L_COUNT NUMBER;
    L_SHIP_METHOD_CODE WSH_TRIPS.SHIP_METHOD_CODE%TYPE;
    L_TRIP_PRESENT BOOLEAN := FALSE;
    L_SHIP_METHOD_MEANING VARCHAR2(50);
  BEGIN
    /*SRW.REFERENCE(CARRIER_NAME)*/NULL;
    /*SRW.REFERENCE(DEL_ORGANIZATION_ID)*/NULL;
    /*SRW.REFERENCE(P_ORGANIZATION_ID)*/NULL;
    /*SRW.REFERENCE(DELIVERY_ID)*/NULL;
    IF CARRIER_NAME IS NOT NULL THEN
      RETURN (CARRIER_NAME);
    ELSE
      BEGIN
        L_SHIP_METHOD_CODE := NULL;
        SELECT
          SHIP_METHOD_CODE
        INTO L_SHIP_METHOD_CODE
        FROM
          WSH_NEW_DELIVERIES
        WHERE DELIVERY_ID = DELIVERY_ID1;
	--WHERE DELIVERY_ID = DELIVERY_ID;
        IF SQL%NOTFOUND THEN
          NULL;
        END IF;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          L_SHIP_METHOD_CODE := NULL;
      END;
      IF L_SHIP_METHOD_CODE IS NULL THEN
        BEGIN
          SELECT
            WT.SHIP_METHOD_CODE
          INTO L_SHIP_METHOD_CODE
          FROM
            WSH_TRIPS WT,
            WSH_TRIP_STOPS WTS,
            WSH_DELIVERY_ASSIGNMENTS_V WDA,
            WSH_DELIVERY_LEGS WDL
          WHERE WTS.STOP_ID = WDL.PICK_UP_STOP_ID
            --AND WDA.DELIVERY_ID = DELIVERY_ID
	    AND WDA.DELIVERY_ID = DELIVERY_ID1
            AND WDA.DELIVERY_ID = WDL.DELIVERY_ID
            AND WTS.TRIP_ID = WT.TRIP_ID
            AND ROWNUM = 1;
          IF SQL%NOTFOUND THEN
            NULL;
          END IF;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            L_SHIP_METHOD_CODE := NULL;
        END;
      END IF;
      IF L_SHIP_METHOD_CODE IS NULL THEN
        L_SHIP_METHOD_MEANING := NULL;
      ELSE
        L_CARRIER := L_SHIP_METHOD_CODE;
        BEGIN
          SELECT
            SUBSTR(SHIP_METHOD_MEANING
                  ,1
                  ,50)
          INTO L_SHIP_METHOD_MEANING
          FROM
            WSH_CARRIER_SERVICES
          WHERE SHIP_METHOD_CODE = L_CARRIER;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            L_SHIP_METHOD_MEANING := L_CARRIER;
        END;
      END IF;
      RETURN (L_SHIP_METHOD_MEANING);
    END IF;
  END CF_FREIGHT_CARRIERFORMULA;

  FUNCTION CF_SHIP_TO_COUNTRY_NAMEFORMULA(SHIP_TO_COUNTRY IN VARCHAR2) RETURN CHAR IS
    L_SHIP_TO_COUNTRY_NAME VARCHAR2(80);
  BEGIN
    SELECT
      TERRITORY_SHORT_NAME
    INTO L_SHIP_TO_COUNTRY_NAME
    FROM
      FND_TERRITORIES_VL
    WHERE TERRITORY_CODE = SHIP_TO_COUNTRY;
    RETURN L_SHIP_TO_COUNTRY_NAME;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
  END CF_SHIP_TO_COUNTRY_NAMEFORMULA;

  FUNCTION CF_DEL_TO_COUNTRY_NAMEFORMULA(DEL_TO_COUNTRY IN VARCHAR2) RETURN CHAR IS
    L_DEL_TO_COUNTRY_NAME VARCHAR2(80);
  BEGIN
    SELECT
      TERRITORY_SHORT_NAME
    INTO L_DEL_TO_COUNTRY_NAME
    FROM
      FND_TERRITORIES_VL
    WHERE TERRITORY_CODE = DEL_TO_COUNTRY;
    RETURN L_DEL_TO_COUNTRY_NAME;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
  END CF_DEL_TO_COUNTRY_NAMEFORMULA;

  FUNCTION CF_CONTACT_NAMEFORMULA(CONTACT_NAME IN VARCHAR2
                                 ,CONTACT_PHONE_NUMBER IN VARCHAR2
                                 ,DELIVERY_DETAIL_ID IN NUMBER) RETURN CHAR IS
    CURSOR C_IS_CONTAINER(P_DEL_DET_ID_1 IN NUMBER) IS
      SELECT
        1
      FROM
        WSH_DELIVERY_DETAILS
      WHERE DELIVERY_DETAIL_ID = P_DEL_DET_ID_1
        AND CONTAINER_FLAG = 'Y';
    CURSOR C_GET_DETAIL_HAVING_ST_CONTACT(P_DEL_DET_ID_2 IN NUMBER) IS
      SELECT
        DELIVERY_DETAIL_ID
      FROM
        WSH_DELIVERY_DETAILS
      WHERE DELIVERY_DETAIL_ID in (
        SELECT
          WDA.DELIVERY_DETAIL_ID
        FROM
          WSH_DELIVERY_ASSIGNMENTS_V WDA
        START WITH WDA.PARENT_DELIVERY_DETAIL_ID = P_DEL_DET_ID_2
        CONNECT BY prior WDA.DELIVERY_DETAIL_ID = PARENT_DELIVERY_DETAIL_ID )
        AND SHIP_TO_CONTACT_ID is not null
        AND CONTAINER_FLAG IN ( 'N' , 'Y' )
        AND ROWNUM < 2;
    CURSOR C_GET_CONTACT_INFO(P_DEL_DET_ID_3 IN NUMBER) IS
      SELECT
        CONTACT_NAME,
        CONTACT_PHONE_NUMBER
      FROM
        (   SELECT
            DISTINCT
            CONTACT.PERSON_PRE_NAME_ADJUNCT || ' ' || SUBSTRB(CONTACT.PERSON_FIRST_NAME
                   ,1
                   ,40) || ' ' || SUBSTRB(CONTACT.PERSON_LAST_NAME
                   ,1
                   ,50) CONTACT_NAME,
            DECODE(PHONES.CONTACT_POINT_TYPE
                  ,'TLX'
                  ,PHONES.TELEX_NUMBER
                  ,PHONES.PHONE_NUMBER) CONTACT_PHONE_NUMBER
          FROM
            (   SELECT
                PARTY.PERSON_PRE_NAME_ADJUNCT,
                PARTY.PERSON_FIRST_NAME,
                PARTY.PERSON_LAST_NAME,
                ACCT_ROLE.CUST_ACCOUNT_ROLE_ID
              FROM
                HZ_CUST_ACCOUNT_ROLES ACCT_ROLE,
                HZ_PARTIES PARTY,
                HZ_RELATIONSHIPS REL,
                HZ_ORG_CONTACTS ORG_CONT,
                HZ_CUST_ACCOUNTS ROLE_ACCT
              WHERE ACCT_ROLE.PARTY_ID = REL.PARTY_ID
                AND ACCT_ROLE.ROLE_TYPE = 'CONTACT'
                AND ORG_CONT.PARTY_RELATIONSHIP_ID = REL.RELATIONSHIP_ID
                AND REL.SUBJECT_ID = PARTY.PARTY_ID
                AND REL.SUBJECT_TABLE_NAME = 'HZ_PARTIES'
                AND REL.OBJECT_TABLE_NAME = 'HZ_PARTIES'
                AND ACCT_ROLE.CUST_ACCOUNT_ID = ROLE_ACCT.CUST_ACCOUNT_ID
                AND ROLE_ACCT.PARTY_ID = REL.OBJECT_ID ) CONTACT,
            (   SELECT
                CONT_POINT.PHONE_LINE_TYPE PHONE_LINE_TYPE,
                CONT_POINT.CONTACT_POINT_TYPE CONTACT_POINT_TYPE,
                CAR.CUST_ACCOUNT_ROLE_ID CUST_ACCOUNT_ROLE_ID,
                CONT_POINT.TELEX_NUMBER TELEX_NUMBER,
                CONT_POINT.PHONE_NUMBER PHONE_NUMBER,
                NVL(CONT_POINT.PHONE_LINE_TYPE
                   ,CONT_POINT.CONTACT_POINT_TYPE) PHONE_TYPE
              FROM
                HZ_CONTACT_POINTS CONT_POINT,
                HZ_CUST_ACCOUNT_ROLES CAR
              WHERE CAR.PARTY_ID = CONT_POINT.OWNER_TABLE_ID
                AND CONT_POINT.OWNER_TABLE_NAME = 'HZ_PARTIES'
                AND CONT_POINT.CONTACT_POINT_TYPE not in ( 'EDI' , 'EMAIL' , 'WEB' ) ) PHONES,
            WSH_DELIVERY_DETAILS WDD
          WHERE WDD.DELIVERY_DETAIL_ID = P_DEL_DET_ID_3
            AND WDD.SHIP_TO_CONTACT_ID = contact.cust_account_role_id (+)
            AND CONTACT.CUST_ACCOUNT_ROLE_ID = phones.cust_account_role_id (+)
            AND phones.phone_type (+) = 'PHONE' )
      WHERE ROWNUM < 2;
    L_CONTACT_NAME VARCHAR2(122);
    L_CONTACT_PHONE VARCHAR2(50);
    L_DELIVERY_DETAIL_ID NUMBER;
    L_TEMP NUMBER;
  BEGIN
    L_CONTACT_NAME := CONTACT_NAME;
    L_CONTACT_PHONE := CONTACT_PHONE_NUMBER;
    IF RTRIM(L_CONTACT_NAME) IS NULL AND RTRIM(L_CONTACT_PHONE) IS NULL THEN
      OPEN C_IS_CONTAINER(DELIVERY_DETAIL_ID);
      FETCH C_IS_CONTAINER
       INTO L_TEMP;
      IF C_IS_CONTAINER%FOUND THEN
        OPEN C_GET_DETAIL_HAVING_ST_CONTACT(DELIVERY_DETAIL_ID);
        FETCH C_GET_DETAIL_HAVING_ST_CONTACT
         INTO L_DELIVERY_DETAIL_ID;
        IF C_GET_DETAIL_HAVING_ST_CONTACT%FOUND AND L_DELIVERY_DETAIL_ID IS NOT NULL THEN
          OPEN C_GET_CONTACT_INFO(L_DELIVERY_DETAIL_ID);
          FETCH C_GET_CONTACT_INFO
           INTO L_CONTACT_NAME,L_CONTACT_PHONE;
          CLOSE C_GET_CONTACT_INFO;
        END IF;
        CLOSE C_GET_DETAIL_HAVING_ST_CONTACT;
      END IF;
      CLOSE C_IS_CONTAINER;
    END IF;
    CP_CONTACT_PHONE := L_CONTACT_PHONE;
    RETURN L_CONTACT_NAME;
  EXCEPTION
    WHEN OTHERS THEN
      CP_CONTACT_PHONE := L_CONTACT_PHONE;
      RETURN L_CONTACT_NAME;
  END CF_CONTACT_NAMEFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed FND SRWINIT.')*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in SRWEXIT')*/NULL;
        RAISE;
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CP_CONTACT_PHONE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_CONTACT_PHONE;
  END CP_CONTACT_PHONE_P;

  FUNCTION CP_ADDRESSEE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_ADDRESSEE;
  END CP_ADDRESSEE_P;

  FUNCTION CP_DELIVER_TO_LOCATION_ID_P RETURN NUMBER IS
  BEGIN
    RETURN CP_DELIVER_TO_LOCATION_ID;
  END CP_DELIVER_TO_LOCATION_ID_P;

  FUNCTION CP_SHIP_TO_ADDRESS1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SHIP_TO_ADDRESS1;
  END CP_SHIP_TO_ADDRESS1_P;

  FUNCTION CP_SHIP_TO_ADDRESS2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SHIP_TO_ADDRESS2;
  END CP_SHIP_TO_ADDRESS2_P;

  FUNCTION CP_SHIP_TO_ADDRESS3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SHIP_TO_ADDRESS3;
  END CP_SHIP_TO_ADDRESS3_P;

  FUNCTION CP_SHIP_TO_CSZ_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SHIP_TO_CSZ;
  END CP_SHIP_TO_CSZ_P;

  FUNCTION CP_SHIP_TO_COUNTRY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SHIP_TO_COUNTRY;
  END CP_SHIP_TO_COUNTRY_P;

  FUNCTION CP_DEL_TO_ADDRESS1_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DEL_TO_ADDRESS1;
  END CP_DEL_TO_ADDRESS1_P;

  FUNCTION CP_DEL_TO_ADDRESS2_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DEL_TO_ADDRESS2;
  END CP_DEL_TO_ADDRESS2_P;

  FUNCTION CP_DEL_TO_ADDRESS3_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DEL_TO_ADDRESS3;
  END CP_DEL_TO_ADDRESS3_P;

  FUNCTION CP_DEL_TO_CSZ_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DEL_TO_CSZ;
  END CP_DEL_TO_CSZ_P;

  FUNCTION CP_DEL_TO_COUNTRY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DEL_TO_COUNTRY;
  END CP_DEL_TO_COUNTRY_P;

END WSH_WSHRDLAB_XMLP_PKG;


/
