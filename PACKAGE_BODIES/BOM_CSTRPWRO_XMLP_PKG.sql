--------------------------------------------------------
--  DDL for Package Body BOM_CSTRPWRO_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."BOM_CSTRPWRO_XMLP_PKG" AS
/* $Header: CSTRPWROB.pls 120.1 2008/01/02 15:04:57 dwkrishn noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
    qty_precision:=bom_common_xmlp_pkg.get_precision(P_qty_precision);
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      IF (GET_CHART_OF_ACCOUNTS_ID <> TRUE) THEN
        /*SRW.MESSAGE('2'
                   ,'Init failed')*/NULL;
      END IF;
      SELECT
        NAME
      INTO LEGAL_ENTITY_NAME
      FROM
        XLE_FIRSTPARTY_INFORMATION_V
      WHERE LEGAL_ENTITY_ID = P_LEGAL_ENTITY;
      SELECT
        COST_TYPE
      INTO COST_TYPE_NAME
      FROM
        CST_COST_TYPES
      WHERE COST_TYPE_ID = P_COST_TYPE;
      SELECT
        COST_GROUP
      INTO COST_GROUP_NAME
      FROM
        CST_COST_GROUPS
      WHERE COST_GROUP_ID = P_COST_GROUP
        AND LEGAL_ENTITY = P_LEGAL_ENTITY;
      SELECT
        PERIOD_NAME
      INTO PERIOD_NAME
      FROM
        CST_PAC_PERIODS
      WHERE PAC_PERIOD_ID = P_PERIOD_ID
        AND COST_TYPE_ID = P_COST_TYPE
        AND LEGAL_ENTITY = P_LEGAL_ENTITY;
      SELECT
        FND_DATE.DATE_TO_CANONICAL(PERIOD_START_DATE),
        FND_DATE.DATE_TO_CANONICAL(PERIOD_END_DATE),
        TO_CHAR(PERIOD_START_DATE
               ,'DD-MON-RRRR'),
        TO_CHAR(PERIOD_END_DATE
               ,'DD-MON-RRRR')
      INTO P_WRITE_OFF_DATE_FROM,P_WRITE_OFF_DATE_TO,FROM_DATE,TO_DATE
      FROM
        CST_PAC_PERIODS CPP
      WHERE CPP.PAC_PERIOD_ID = P_PERIOD_ID
        AND CPP.LEGAL_ENTITY = P_LEGAL_ENTITY
        AND CPP.COST_TYPE_ID = P_COST_TYPE;
      RETURN TRUE;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION GET_CHART_OF_ACCOUNTS_ID RETURN BOOLEAN IS
    L_CHART_OF_ACCOUNTS_ID NUMBER;
  BEGIN
    SELECT
      GSOB.CHART_OF_ACCOUNTS_ID
    INTO L_CHART_OF_ACCOUNTS_ID
    FROM
      GL_SETS_OF_BOOKS GSOB,
      FINANCIALS_SYSTEM_PARAMETERS FSP
    WHERE FSP.SET_OF_BOOKS_ID = GSOB.SET_OF_BOOKS_ID;
    P_CHART_OF_ACCOUNTS_ID := L_CHART_OF_ACCOUNTS_ID;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_CHART_OF_ACCOUNTS_ID;

  FUNCTION C_YESY_NO_DISPFORMULA(C_YES IN VARCHAR2
                                ,C_NO IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_YES)*/NULL;
    /*SRW.REFERENCE(C_NO)*/NULL;
    IF P_PRINT_COMMENTS = 'Y' THEN
      RETURN C_YES;
    ELSE
      RETURN C_NO;
    END IF;
    RETURN NULL;
  END C_YESY_NO_DISPFORMULA;

 /* PROCEDURE GET_PRECISION IS
  BEGIN
    SRW.ATTR.MASK := SRW.FORMATMASK_ATTR;
    IF P_QTY_PRECISION = 0 THEN
      SRW.ATTR.FORMATMASK := '-NNN,NNN,NNN,NN0';
    ELSE
      IF P_QTY_PRECISION = 1 THEN
        SRW.ATTR.FORMATMASK := '-NNN,NNN,NNN,NN0.0';
      ELSE
        IF P_QTY_PRECISION = 3 THEN
          SRW.ATTR.FORMATMASK := '-NN,NNN,NNN,NN0.000';
        ELSE
          IF P_QTY_PRECISION = 4 THEN
            SRW.ATTR.FORMATMASK := '-N,NNN,NNN,NN0.0000';
          ELSE
            IF P_QTY_PRECISION = 5 THEN
              SRW.ATTR.FORMATMASK := '-NNN,NNN,NN0.00000';
            ELSE
              IF P_QTY_PRECISION = 6 THEN
                SRW.ATTR.FORMATMASK := '-NN,NNN,NN0.000000';
              ELSE
                SRW.ATTR.FORMATMASK := '-NNN,NNN,NNN,NN0.00';
              END IF;
            END IF;
          END IF;
        END IF;
      END IF;
    END IF;
    SRW.SET_ATTR(0
                ,SRW.ATTR);
  END GET_PRECISION;*/

  FUNCTION C_FLEX_ACC_SORTFORMULA(C_FLEX_ACC IN VARCHAR2
                                 ,C_FLEX_ACC_DISP IN VARCHAR2
                                 ,C_FLEX_ACC_SORT IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(C_FLEX_ACC)*/NULL;
    /*SRW.REFERENCE(C_FLEX_ACC_DISP)*/NULL;
    RETURN (C_FLEX_ACC_SORT);
  END C_FLEX_ACC_SORTFORMULA;

  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION LEGAL_ENTITY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LEGAL_ENTITY_NAME;
  END LEGAL_ENTITY_NAME_P;

  FUNCTION COST_GROUP_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN COST_GROUP_NAME;
  END COST_GROUP_NAME_P;

  FUNCTION COST_TYPE_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN COST_TYPE_NAME;
  END COST_TYPE_NAME_P;

  FUNCTION PERIOD_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN PERIOD_NAME;
  END PERIOD_NAME_P;

  FUNCTION FROM_DATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_DATE;
  END FROM_DATE_P;

  FUNCTION TO_DATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_DATE;
  END TO_DATE_P;

END BOM_CSTRPWRO_XMLP_PKG;


/
