--------------------------------------------------------
--  DDL for Package Body JA_JAINCINI_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JA_JAINCINI_XMLP_PKG" AS
/* $Header: JAINCINIB.pls 120.1 2007/12/25 16:14:44 dwkrishn noship $ */
  FUNCTION CF_2FORMULA(SUM_DUTY IN NUMBER) RETURN VARCHAR2 IS
    TEMP VARCHAR2(2000);
    TMP NUMBER := SUM_DUTY;
  BEGIN
    TEMP := 'sum of Rs. (in words) ' || RTRIM(CONVERT_NUMBER(TMP)) || ' ';
    RETURN (TEMP);
  END CF_2FORMULA;

  FUNCTION CONVERT_NUMBER(IN_NUMERAL IN INTEGER := 0) RETURN VARCHAR2 IS
    NUMBER_TOO_LARGE EXCEPTION;
    NUMERAL INTEGER := ABS(IN_NUMERAL);
    MAX_DIGIT INTEGER := 12;
    NUMBER_TEXT VARCHAR2(240) := '';
    CURRENT_SEGMENT VARCHAR2(80);
    B_ZERO VARCHAR2(25);
    B_THOUSAND VARCHAR2(25);
    THOUSAND NUMBER := POWER(10
         ,3);
    B_LAKH VARCHAR2(25);
    LAKH NUMBER := POWER(10
         ,5);
    B_CRORE VARCHAR2(25);
    CRORE NUMBER := POWER(10
         ,7);
    LV_CRORE CONSTANT VARCHAR2(10) DEFAULT 'CRORE';
    LV_LAKH CONSTANT VARCHAR2(10) DEFAULT 'LAKH';
    LV_THOUSAND CONSTANT VARCHAR2(10) DEFAULT 'THOUSAND';
    LV_ZERO CONSTANT VARCHAR2(10) DEFAULT 'ZERO';
    LV_NLS_TRANS CONSTANT VARCHAR2(30) DEFAULT 'JAI_NLS_TRANSLATION';
    FUNCTION CONVERT_NUMBER(SEGMENT IN NUMBER) RETURN VARCHAR2 IS
      VALUE_TEXT VARCHAR2(80);
    BEGIN
      VALUE_TEXT := TO_CHAR(TO_DATE(SEGMENT
                                   ,'YYYY')
                           ,'Yyyysp');
      RETURN (VALUE_TEXT);
    END CONVERT_NUMBER;
  BEGIN
    IF NUMERAL >= POWER(10
         ,MAX_DIGIT) THEN
      RAISE NUMBER_TOO_LARGE;
    END IF;
    SELECT
      ' ' || LC1.MEANING || ' ',
      ' ' || LC2.MEANING || ' ',
      ' ' || LC3.MEANING || ' ',
      ' ' || LC4.MEANING
    INTO B_CRORE,B_LAKH,B_THOUSAND,B_ZERO
    FROM
      JA_LOOKUPS LC1,
      JA_LOOKUPS LC2,
      JA_LOOKUPS LC3,
      JA_LOOKUPS LC4
    WHERE LC1.LOOKUP_CODE = LV_CRORE
      AND LC1.LOOKUP_TYPE = LV_NLS_TRANS
      AND LC2.LOOKUP_CODE = LV_LAKH
      AND LC2.LOOKUP_TYPE = LV_NLS_TRANS
      AND LC3.LOOKUP_CODE = LV_THOUSAND
      AND LC3.LOOKUP_TYPE = LV_NLS_TRANS
      AND LC4.LOOKUP_CODE = LV_ZERO
      AND LC4.LOOKUP_TYPE = LV_NLS_TRANS;
    IF NUMERAL = 0 THEN
      RETURN (B_ZERO);
    END IF;
    CURRENT_SEGMENT := TRUNC(NUMERAL / CRORE);
    NUMERAL := NUMERAL - (CURRENT_SEGMENT * CRORE);
    IF CURRENT_SEGMENT <> 0 THEN
      NUMBER_TEXT := NUMBER_TEXT || CONVERT_NUMBER(CURRENT_SEGMENT) || B_CRORE;
    END IF;
    CURRENT_SEGMENT := TRUNC(NUMERAL / LAKH);
    NUMERAL := NUMERAL - (CURRENT_SEGMENT * LAKH);
    IF CURRENT_SEGMENT <> 0 THEN
      NUMBER_TEXT := NUMBER_TEXT || CONVERT_NUMBER(CURRENT_SEGMENT) || B_LAKH;
    END IF;
    CURRENT_SEGMENT := TRUNC(NUMERAL / THOUSAND);
    NUMERAL := NUMERAL - (CURRENT_SEGMENT * THOUSAND);
    IF CURRENT_SEGMENT <> 0 THEN
      NUMBER_TEXT := NUMBER_TEXT || CONVERT_NUMBER(CURRENT_SEGMENT) || B_THOUSAND;
    END IF;
    IF NUMERAL <> 0 THEN
      NUMBER_TEXT := NUMBER_TEXT || CONVERT_NUMBER(NUMERAL);
    END IF;
    NUMBER_TEXT := SUBSTR(NUMBER_TEXT
                         ,1
                         ,1) || RTRIM(LOWER(SUBSTR(NUMBER_TEXT
                                     ,2
                                     ,NVL(LENGTH(NUMBER_TEXT)
                                        ,0))));
    RETURN (NUMBER_TEXT);
    RETURN NULL;
  EXCEPTION
    WHEN NUMBER_TOO_LARGE THEN
      RETURN (NULL);
    WHEN OTHERS THEN
      RETURN (NULL);
  END CONVERT_NUMBER;

  FUNCTION CF_3FORMULA RETURN NUMBER IS
    V_EXT_AMT NUMBER;
    CURSOR EXTENDED_AMOUNT_CUR IS
      SELECT
        SUM(EXTENDED_AMOUNT)
      FROM
        RA_CUSTOMER_TRX_LINES_ALL
      WHERE CUSTOMER_TRX_ID = NVL(P_INVOICE_NO
         ,CUSTOMER_TRX_ID);
  BEGIN
    OPEN EXTENDED_AMOUNT_CUR;
    FETCH EXTENDED_AMOUNT_CUR
     INTO V_EXT_AMT;
    CLOSE EXTENDED_AMOUNT_CUR;
    RETURN (V_EXT_AMT);
  END CF_3FORMULA;

  FUNCTION CF_4FORMULA(CF_3 IN NUMBER) RETURN VARCHAR2 IS
    TEMP VARCHAR2(2000);
    TMP NUMBER := CF_3;
    V_CHR VARCHAR2(2000);
  BEGIN
    V_CHR := CONVERT_NUMBER(TMP);
    TEMP := 'Rs.(in words)' || RTRIM(CONVERT_NUMBER(TMP)) || ' ';
    RETURN (TEMP);
  END CF_4FORMULA;

  FUNCTION CF_5FORMULA RETURN VARCHAR2 IS
    TEMP VARCHAR2(2000);
  BEGIN
    TEMP := 'Name and Address of Supplier, if he is not a Manufacturer/ Importer';
    RETURN (TEMP);
  END CF_5FORMULA;

  FUNCTION CF_6FORMULA RETURN VARCHAR2 IS
    TEMP VARCHAR2(30);
    CURSOR VEHICLE_NUM IS
      SELECT
        CARRIER_ID
      FROM
        WSH_NEW_DELIVERIES A,
        RA_CUSTOMER_TRX_ALL B
      WHERE B.CUSTOMER_TRX_ID = P_INVOICE_NO
        AND DELIVERY_ID = TO_NUMBER(B.INTERFACE_HEADER_ATTRIBUTE3);
  BEGIN
    OPEN VEHICLE_NUM;
    FETCH VEHICLE_NUM
     INTO TEMP;
    CLOSE VEHICLE_NUM;
    RETURN (TEMP);
  END CF_6FORMULA;

  FUNCTION CF_7FORMULA RETURN DATE IS
    TEMP DATE;
    CURSOR VEHICLE_NUM IS
      SELECT
        CONFIRM_DATE
      FROM
        WSH_NEW_DELIVERIES A,
        RA_CUSTOMER_TRX_ALL B
      WHERE B.CUSTOMER_TRX_ID = P_INVOICE_NO
        AND DELIVERY_ID = TO_NUMBER(B.INTERFACE_HEADER_ATTRIBUTE3);
  BEGIN
    OPEN VEHICLE_NUM;
    FETCH VEHICLE_NUM
     INTO TEMP;
    CLOSE VEHICLE_NUM;
    RETURN (TEMP);
  END CF_7FORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    CURSOR C_PROGRAM_ID(P_REQUEST_ID IN NUMBER) IS
      SELECT
        CONCURRENT_PROGRAM_ID,
        NVL(ENABLE_TRACE
           ,'N')
      FROM
        FND_CONCURRENT_REQUESTS
      WHERE REQUEST_ID = P_REQUEST_ID;
    V_ENABLE_TRACE FND_CONCURRENT_PROGRAMS.ENABLE_TRACE%TYPE;
    V_PROGRAM_ID FND_CONCURRENT_PROGRAMS.CONCURRENT_PROGRAM_ID%TYPE;
  BEGIN
    /*SRW.MESSAGE(1275
               ,'Report Version is 120.2 Last modified date is 25/07/2005')*/NULL;
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    BEGIN
      OPEN C_PROGRAM_ID(P_CONC_REQUEST_ID);
      FETCH C_PROGRAM_ID
       INTO V_PROGRAM_ID,V_ENABLE_TRACE;
      CLOSE C_PROGRAM_ID;
      /*SRW.MESSAGE(1275
                 ,'v_program_id -> ' || V_PROGRAM_ID || ', v_enable_trace -> ' || V_ENABLE_TRACE || ', request_id -> ' || P_CONC_REQUEST_ID)*/NULL;
      IF V_ENABLE_TRACE = 'Y' THEN
        EXECUTE IMMEDIATE
          'ALTER SESSION SET EVENTS ''10046 trace name context forever, level 4''';
      END IF;
      RETURN (TRUE);
    EXCEPTION
      WHEN OTHERS THEN
        /*SRW.MESSAGE(1275
                   ,'Error during enabling the trace. ErrCode -> ' || SQLCODE || ', ErrMesg -> ' || SQLERRM)*/NULL;
    END;
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

FUNCTION M_1FORMATTRIGGER RETURN NUMBER IS
CURSOR EC_CODE_CUR IS
SELECT INSTR(TR_EC_CODE,'D')
FROM JAI_CMN_INVENTORY_ORGS
WHERE ORGANIZATION_ID = P_ORG_ID AND LOCATION_ID = P_LOC_ID;
V_TR_EC_CODE NUMBER;
BEGIN
OPEN EC_CODE_CUR;
FETCH EC_CODE_CUR INTO V_TR_EC_CODE;
CLOSE EC_CODE_CUR;
RETURN (V_TR_EC_CODE);
/*IF V_TR_EC_CODE <> 0 THEN
  RETURN (TRUE);
ELSE
  RETURN (FALSE);
END IF; */
RETURN NULL; END;

FUNCTION M_3_GRPFR1FORMATTRIGGER RETURN NUMBER IS
CURSOR EC_CODE_CUR IS
SELECT INSTR(TR_EC_CODE,'D')
FROM JAI_CMN_INVENTORY_ORGS
WHERE ORGANIZATION_ID =P_ORG_ID AND LOCATION_ID =P_LOC_ID;
V_TR_EC_CODE NUMBER;

BEGIN
OPEN EC_CODE_CUR;
FETCH EC_CODE_CUR INTO V_TR_EC_CODE;
CLOSE EC_CODE_CUR;
RETURN (V_TR_EC_CODE);
/*IF V_TR_EC_CODE = 0 THEN
  RETURN (TRUE);
ELSE
  RETURN (FALSE);
END IF; */
RETURN NULL; END;

FUNCTION M_2FORMATTRIGGER RETURN NUMBER IS
CURSOR EC_CODE_CUR IS
SELECT INSTR(TR_EC_CODE,'D')
FROM JAI_CMN_INVENTORY_ORGS
WHERE ORGANIZATION_ID =P_ORG_ID AND LOCATION_ID = P_LOC_ID;
V_TR_EC_CODE NUMBER;

BEGIN
OPEN EC_CODE_CUR;
FETCH EC_CODE_CUR INTO V_TR_EC_CODE;
CLOSE EC_CODE_CUR;
RETURN (V_TR_EC_CODE);
/*IF V_TR_EC_CODE = 0 THEN
  RETURN (TRUE);
ELSE
  RETURN (FALSE);
END IF; */

RETURN NULL; END;

END JA_JAINCINI_XMLP_PKG;



/
