--------------------------------------------------------
--  DDL for Package Body XLA_XLAALEXP_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."XLA_XLAALEXP_XMLP_PKG" AS
/* $Header: XLAALEXPB.pls 120.0 2007/12/27 11:32:48 vjaganat noship $ */

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_REQ_ID NUMBER;
    L_RETURN_STATUS VARCHAR2(30);
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    XLA_UTILITY_PKG.ACTIVATE('SRS_DBP'
                            ,'XLAALEXP');
    XLA_ENVIRONMENT_PKG.REFRESH;
    XLA_AAD_LOADER_UTIL_PVT.RESET_ERRORS(P_APPLICATION_ID => P_APPLICATION_ID
                                        ,P_AMB_CONTEXT_CODE => P_AMB_CONTEXT_CODE
                                        ,P_REQUEST_CODE => 'EXPORT');
    XLA_AAD_EXPORT_PVT.EXPORT(P_API_VERSION => 1.0
                             ,X_RETURN_STATUS => L_RETURN_STATUS
                             ,P_APPLICATION_ID => P_APPLICATION_ID
                             ,P_AMB_CONTEXT_CODE => P_AMB_CONTEXT_CODE
                             ,P_DESTINATION_PATHNAME => P_DESTINATION_PATH
                             ,P_VERSIONING_MODE => P_VERSIONING_MODE
                             ,P_USER_VERSION => P_USER_VERSION
                             ,P_VERSION_COMMENT => P_VERSION_COMMENT
                             ,X_EXPORT_STATUS => CP_RET_CODE);
    IF (CP_RET_CODE < 'SUCCESS') THEN
      XLA_AAD_LOADER_UTIL_PVT.INSERT_ERRORS(P_APPLICATION_ID => P_APPLICATION_ID
                                           ,P_AMB_CONTEXT_CODE => P_AMB_CONTEXT_CODE
                                           ,P_REQUEST_CODE => 'EXPORT');
    END IF;
    SET_REPORT_CONSTANTS;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR(-20101
                             ,NULL);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
    L_TEMP BOOLEAN;
  BEGIN
    IF CP_RET_CODE = 'WARNING' THEN
      L_TEMP := FND_CONCURRENT.SET_COMPLETION_STATUS(STATUS => 'WARNING'
                                                    ,MESSAGE => NULL);
    ELSIF CP_RET_CODE = 'ERROR' THEN
      L_TEMP := FND_CONCURRENT.SET_COMPLETION_STATUS(STATUS => 'ERROR'
                                                    ,MESSAGE => NULL);
    END IF;
    XLA_UTILITY_PKG.DEACTIVATE('XLAALEXP');
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      XLA_UTILITY_PKG.DEACTIVATE('XLAALEXP');
      RAISE_APPLICATION_ERROR(-20101
                             ,NULL);
  END AFTERREPORT;

  PROCEDURE SET_REPORT_CONSTANTS IS
    CURSOR C IS
      SELECT
        APP.APPLICATION_NAME,
        AMB.MEANING
      FROM
        FND_APPLICATION_VL APP,
        XLA_LOOKUPS AMB
      WHERE APP.APPLICATION_ID = P_APPLICATION_ID
        AND LOOKUP_TYPE = 'XLA_AMB_CONTEXT_TYPE'
        AND LOOKUP_CODE = P_AMB_CONTEXT_CODE;
  BEGIN
    OPEN C;
    FETCH C
     INTO
       CP_APPLICATION_NAME
       ,CP_AMB_CONTEXT;
    CLOSE C;
  END SET_REPORT_CONSTANTS;

  FUNCTION CP_RET_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_RET_CODE;
  END CP_RET_CODE_P;

  FUNCTION CP_REQ_ID_P RETURN NUMBER IS
  BEGIN
    RETURN CP_REQ_ID;
  END CP_REQ_ID_P;

  FUNCTION CP_APPLICATION_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_APPLICATION_NAME;
  END CP_APPLICATION_NAME_P;

  FUNCTION CP_AMB_CONTEXT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_AMB_CONTEXT;
  END CP_AMB_CONTEXT_P;

  FUNCTION CP_STATUS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_STATUS;
  END CP_STATUS_P;

END XLA_XLAALEXP_XMLP_PKG;


/
