--------------------------------------------------------
--  DDL for Package Body MRP_MRPRPSST_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."MRP_MRPRPSST_XMLP_PKG" AS
/* $Header: MRPRPSSTB.pls 120.2 2008/01/01 13:49:22 dwkrishn noship $ */
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_PERIOD_DELTAFORMULA(C_ACTUAL_SUM IN NUMBER
                                ,C_SCHED_SUM IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND((C_ACTUAL_SUM - C_SCHED_SUM)
                ,P_QTY_PRECISION));
  END C_PERIOD_DELTAFORMULA;

  FUNCTION C_SCHED_COSTFORMULA(C_SCHED_SUM IN NUMBER
                              ,C_ITEM_COST IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND((C_SCHED_SUM * C_ITEM_COST)
                ,P_PRECISION));
  END C_SCHED_COSTFORMULA;

  FUNCTION C_PERIOD_DELTA_COSTFORMULA(C_PERIOD_DELTA IN NUMBER
                                     ,C_ITEM_COST IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND((C_PERIOD_DELTA * C_ITEM_COST)
                ,P_PRECISION));
  END C_PERIOD_DELTA_COSTFORMULA;

  FUNCTION C_PERIOD_DELTA_CUM_COSTFORMULA(C_PERIOD_DELTA_CUM IN NUMBER
                                         ,C_ITEM_COST IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND((C_PERIOD_DELTA_CUM * C_ITEM_COST)
                ,P_PRECISION));
  END C_PERIOD_DELTA_CUM_COSTFORMULA;

  FUNCTION C_ACTUAL_COSTFORMULA(C_ACTUAL_SUM IN NUMBER
                               ,C_ITEM_COST IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND((C_ACTUAL_SUM * C_ITEM_COST)
                ,P_PRECISION));
  END C_ACTUAL_COSTFORMULA;

  FUNCTION C_SCHED_VERSIONFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      SCHED_VERSION VARCHAR2(80);
    BEGIN
      SELECT
        MEANING
      INTO SCHED_VERSION
      FROM
        MFG_LOOKUPS
      WHERE LOOKUP_TYPE = 'MRP_SCHEDULE_LEVEL'
        AND LOOKUP_CODE = P_SCHED_VERSION;
      RETURN (SCHED_VERSION);
    END;
    RETURN NULL;
  END C_SCHED_VERSIONFORMULA;

  FUNCTION C_SORTFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      SORT VARCHAR2(80);
    BEGIN
      SELECT
        MEANING
      INTO SORT
      FROM
        MFG_LOOKUPS
      WHERE LOOKUP_TYPE = 'MRP_DATA_SELECT'
        AND LOOKUP_CODE = P_SORT;
      RETURN (SORT);
    END;
    RETURN NULL;
  END C_SORTFORMULA;

  FUNCTION C_CAT_SETFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      CAT_SET VARCHAR2(30);
    BEGIN
      SELECT
        CATEGORY_SET_NAME
      INTO CAT_SET
      FROM
        MTL_CATEGORY_SETS
      WHERE CATEGORY_SET_ID = P_CAT_SET;
      RETURN (CAT_SET);
    END;
    RETURN NULL;
  END C_CAT_SETFORMULA;

  FUNCTION C_CATEGORY_FROMFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      CATEGORY_FROM VARCHAR2(80);
    BEGIN
      IF ((P_LOW_CAT IS NOT NULL) OR (P_HIGH_CAT IS NOT NULL) OR (P_SORT = 2)) THEN
        CATEGORY_FROM := ',mtl_categories cat';
      ELSE
        CATEGORY_FROM := ' ';
      END IF;
      RETURN (CATEGORY_FROM);
    END;
    RETURN NULL;
  END C_CATEGORY_FROMFORMULA;

  FUNCTION C_CATEGORY_WHEREFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      CATEGORY_WHERE VARCHAR2(200);
    BEGIN
      IF ((P_LOW_CAT IS NOT NULL) OR (P_HIGH_CAT IS NOT NULL) OR (P_SORT = 2)) THEN
        CATEGORY_WHERE := 'AND ic.category_id = cat.category_id(+) ' || 'AND cat.structure_id = ' || P_CAT_STRUCT;
      ELSE
        CATEGORY_WHERE := ' ';
      END IF;
      RETURN (CATEGORY_WHERE);
    END;
    RETURN NULL;
  END C_CATEGORY_WHEREFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      QUERY_ID NUMBER;
      PROC_CALL1 VARCHAR2(200);
      CAL_CODE VARCHAR2(10);
      CAL_EXCEPTION_SET_ID NUMBER;
      CURRENCY_DESC VARCHAR2(80);
      PRECISION NUMBER;
      START_DATE DATE;
      PERIODS NUMBER;
      SCHEDULE_TYPE VARCHAR2(80);
      SCHEDULE_VERSION VARCHAR2(80);
      CAT_STRUCT_NUM NUMBER;
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      format_string := mrp_common_xmlp_pkg.get_precision(P_QTY_PRECISION);
      LP_START_DATE := to_char(P_START_DATE, 'DD-MON-YYYY');
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      IF (P_DEBUG = 'Y') THEN
        EXECUTE IMMEDIATE
          'ALTER SESSION SET SQL_TRACE TRUE';
      END IF;
      IF ((P_SORT = 2) OR (P_LOW_CAT IS NOT NULL) OR (P_HIGH_CAT IS NOT NULL)) THEN
        SELECT
          STRUCTURE_ID
        INTO CAT_STRUCT_NUM
        FROM
          MTL_DEFAULT_SETS_VIEW
        WHERE FUNCTIONAL_AREA_ID = 3;
        P_CAT_STRUCT_NUM := CAT_STRUCT_NUM;
      END IF;
      SELECT
        DECODE(LOOKUP_CODE
              ,1
              ,12
              ,2
              ,24
              ,3
              ,36
              ,4
              ,48
              ,12),
        MRP_FORM_QUERY_S.NEXTVAL,
        P_START_DATE
      INTO PERIODS,QUERY_ID,START_DATE
      FROM
        MFG_LOOKUPS
      WHERE LOOKUP_TYPE = 'MRP_DISPLAY_PERIODS'
        AND LOOKUP_CODE = P_PERIODS;
      P_PERIODS_ACTUAL := PERIODS;
      P_QUERY_ID := QUERY_ID;
      MRP_WEEKS_MONTHS(P_QUERY_ID
                      ,1
                      ,P_WEEKS
                      ,PERIODS
                      ,START_DATE
                      ,P_ORG_ID);
      IF (P_SORT = 1) THEN
        NULL;
      END IF;
      IF (P_SORT = 2) THEN
        NULL;
      END IF;
      IF ((P_LOW_ITEM IS NOT NULL) OR (P_HIGH_ITEM IS NOT NULL)) THEN
        NULL;
      END IF;
      IF ((P_LOW_CAT IS NOT NULL) OR (P_HIGH_CAT IS NOT NULL)) THEN
        NULL;
      END IF;
      SELECT
        CALENDAR_CODE,
        CALENDAR_EXCEPTION_SET_ID
      INTO CAL_CODE,CAL_EXCEPTION_SET_ID
      FROM
        MTL_PARAMETERS
      WHERE ORGANIZATION_ID = P_ORG_ID;
      P_CAL_CODE := CAL_CODE;
      P_CAL_EXCEPTION_SET_ID := CAL_EXCEPTION_SET_ID;
      SELECT
        NAME,
        PRECISION
      INTO CURRENCY_DESC,PRECISION
      FROM
        FND_CURRENCIES_VL
      WHERE CURRENCY_CODE = P_CURRENCY_CODE;
      P_CURRENCY_DESC := CURRENCY_DESC;
      P_PRECISION := PRECISION;
      SELECT
        MEANING
      INTO SCHEDULE_TYPE
      FROM
        MFG_LOOKUPS
      WHERE LOOKUP_TYPE = 'MRP_SCHEDULE_TYPE'
        AND LOOKUP_CODE = P_SCHED_TYPE;
      P_SCHED_TYPE_DESC := SCHEDULE_TYPE;
      SELECT
        MEANING
      INTO SCHEDULE_VERSION
      FROM
        MFG_LOOKUPS
      WHERE LOOKUP_TYPE = 'MRP_SCHEDULE_LEVEL'
        AND LOOKUP_CODE = P_SCHED_VERSION;
      P_SCHED_VERSION_DESC := SCHEDULE_VERSION;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION C_P_MULTIORG_MPSFORMULA RETURN NUMBER IS
  BEGIN
    DECLARE
      ORG_SELECTION NUMBER := 0;
      USE_MULTIORG_MPS NUMBER := 0;
    BEGIN
      IF (P_SCHED_TYPE = 2 AND P_REPORT_MULTIORG = 2) THEN
        SELECT
          ORGANIZATION_SELECTION
        INTO ORG_SELECTION
        FROM
          MRP_SCHEDULE_DESIGNATORS SCHED
        WHERE ORGANIZATION_ID = P_ORG_ID
          AND SCHEDULE_DESIGNATOR = P_SCHED_NAME;
        IF (ORG_SELECTION = 2 OR ORG_SELECTION = 3) THEN
          USE_MULTIORG_MPS := 1;
        ELSE
          USE_MULTIORG_MPS := 2;
        END IF;
      ELSE
        USE_MULTIORG_MPS := 2;
      END IF;
      RETURN (USE_MULTIORG_MPS);
    END;
    RETURN NULL;
  END C_P_MULTIORG_MPSFORMULA;

  FUNCTION C_ORDER_BYFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      ORDER_BY VARCHAR2(40);
    BEGIN
      IF (P_SORT = 3) THEN
        ORDER_BY := 'org.organization_name, ';
      ELSE
        ORDER_BY := ' ';
      END IF;
      RETURN (ORDER_BY);
    END;
    RETURN ' ';
  END C_ORDER_BYFORMULA;

  FUNCTION C_P_REPORT_MULTIORGFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      REPORT_MULTIORG_TEXT VARCHAR2(80) := 'Current Organization';
    BEGIN
      IF P_REPORT_MULTIORG = 2 THEN
        SELECT
          MEANING
        INTO REPORT_MULTIORG_TEXT
        FROM
          MFG_LOOKUPS
        WHERE LOOKUP_CODE = P_REPORT_MULTIORG
          AND LOOKUP_TYPE = 'MRP_REPORT_MULTIORG';
      END IF;
      RETURN (REPORT_MULTIORG_TEXT);
    END;
    RETURN NULL;
  END C_P_REPORT_MULTIORGFORMULA;

  FUNCTION C_P_USE_MULTIORG_PLANFORMULA RETURN NUMBER IS
  BEGIN
    DECLARE
      ORG_SELECTION NUMBER;
      USE_MULTIORG_PLAN NUMBER := 2;
    BEGIN
      IF (P_SCHED_TYPE = 2 AND P_REPORT_MULTIORG = 2) THEN
        SELECT
          ORGANIZATION_SELECTION
        INTO ORG_SELECTION
        FROM
          MRP_SCHEDULE_DESIGNATORS SCHED
        WHERE ORGANIZATION_ID = P_ORG_ID
          AND SCHEDULE_DESIGNATOR = P_SCHED_NAME;
      ELSIF (P_SCHED_TYPE = 2 AND P_REPORT_MULTIORG = 1) THEN
        SELECT
          DISTINCT
          NVL(SCHED.ORGANIZATION_SELECTION
             ,0)
        INTO ORG_SELECTION
        FROM
          MRP_SCHEDULE_DESIGNATORS SCHED,
          MRP_ORGANIZATIONS_V MO
        WHERE SCHED.ORGANIZATION_ID = mo.organization_id (+)
          AND SCHED.SCHEDULE_DESIGNATOR = mo.compile_designator (+)
          AND NVL(MO.PLANNED_ORGANIZATION
           ,SCHED.ORGANIZATION_ID) = P_ORG_ID
          AND SCHED.SCHEDULE_DESIGNATOR = P_SCHED_NAME;
      END IF;
      IF ((ORG_SELECTION = 2) OR (ORG_SELECTION = 3)) THEN
        USE_MULTIORG_PLAN := 1;
      ELSE
        USE_MULTIORG_PLAN := 2;
      END IF;
      RETURN (USE_MULTIORG_PLAN);
    END;
    RETURN NULL;
  END C_P_USE_MULTIORG_PLANFORMULA;

  /*PROCEDURE MRP_WEEKS_MONTHS(ARG_QUERY_ID IN NUMBER
                            ,ARG_USER_ID IN NUMBER
                            ,ARG_WEEKS IN NUMBER
                            ,ARG_PERIODS IN NUMBER
                            ,ARG_START_DATE IN DATE
                            ,ARG_ORG_ID IN NUMBER) IS
  BEGIN

    MRP_WEEKS_MONTHS(ARG_QUERY_ID, ARG_USER_ID, ARG_WEEKS, ARG_PERIODS, ARG_START_DATE, ARG_ORG_ID);

  END MRP_WEEKS_MONTHS;*/

  PROCEDURE MRP_WEEKS_MONTHS(ARG_QUERY_ID IN NUMBER
                            ,ARG_USER_ID IN NUMBER
                            ,ARG_WEEKS IN NUMBER
                            ,ARG_PERIODS IN NUMBER
                            ,ARG_START_DATE IN DATE
                            ,ARG_ORG_ID IN NUMBER) IS
  BEGIN
    MRP_REPORTING_BUCKETS.MRP_WEEKS_MONTHS(ARG_QUERY_ID, ARG_USER_ID, ARG_WEEKS, ARG_PERIODS, ARG_START_DATE, ARG_ORG_ID);

  END MRP_WEEKS_MONTHS;

END MRP_MRPRPSST_XMLP_PKG;


/
