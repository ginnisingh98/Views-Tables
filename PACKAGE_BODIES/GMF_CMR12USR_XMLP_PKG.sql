--------------------------------------------------------
--  DDL for Package Body GMF_CMR12USR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GMF_CMR12USR_XMLP_PKG" AS
/* $Header: CMR12USRB.pls 120.0 2007/12/24 13:24:42 nchinnam noship $ */
  FUNCTION ITEMCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ITEMCP)*/NULL;
    IF FROM_ITEM IS NOT NULL AND TO_ITEM IS NOT NULL THEN
      ITEMCP := ' and itm.item_number >= ''' || FROM_ITEM || ''' and itm.item_number <= ''' || TO_ITEM || '''';
    ELSIF FROM_ITEM IS NULL AND TO_ITEM IS NULL THEN
      ITEMCP := NULL;
      FROM_ITEM := SY_ALL;
      TO_ITEM := SY_ALL;
    ELSIF FROM_ITEM IS NOT NULL AND TO_ITEM IS NULL THEN
      ITEMCP := ' and itm.item_number >= ''' || FROM_ITEM || '''';
      TO_ITEM := SY_ALL;
    ELSIF FROM_ITEM IS NULL AND TO_ITEM IS NOT NULL THEN
      ITEMCP := ' and itm.item_number <= ''' || TO_ITEM || '''';
      FROM_ITEM := SY_ALL;
    END IF;
    IF (ItemCP IS NULL) THEN
	ItemCP := ' ';
    END IF;
    RETURN NULL;
  END ITEMCFFORMULA;
  FUNCTION ITEMCPFORMULA(ITEMCF IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ITEMCF)*/NULL;
    RETURN ' ';
  END ITEMCPFORMULA;
  FUNCTION ORGANIZATIONCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ORGANIZATIONCP)*/NULL;
    IF FROM_ORG IS NOT NULL AND TO_ORG IS NOT NULL THEN
      ORGANIZATIONCP := ' and mtl.organization_code >= ''' || FROM_ORG || ''' and mtl.organization_code <=  ''' || TO_ORG || '''';
    ELSIF FROM_ORG IS NULL AND TO_ORG IS NULL THEN
      ORGANIZATIONCP := NULL;
      FROM_ORG := SY_ALL;
      TO_ORG := SY_ALL;
    ELSIF FROM_ORG IS NOT NULL AND TO_ORG IS NULL THEN
      ORGANIZATIONCP := ' and  mtl.organization_code >= ''' || FROM_ORG || '''';
      TO_ORG := SY_ALL;
    ELSIF FROM_ORG IS NULL AND TO_ORG IS NOT NULL THEN
      ORGANIZATIONCP := ' and  mtl.organization_code <= ''' || TO_ORG || '''';
      FROM_ORG := SY_ALL;
    END IF;
IF (ORGANIZATIONCP IS NULL) THEN
	ORGANIZATIONCP := ' ';
    END IF;
    RETURN NULL;
  END ORGANIZATIONCFFORMULA;
  FUNCTION ORGANIZATIONCPFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ORGANIZATIONCP)*/NULL;
    RETURN ' ';
  END ORGANIZATIONCPFORMULA;
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    FROM_ORG := GMF_UTILITIES_GRP.GET_ORGANIZATION_CODE(P_FROM_ORGANIZATION_ID);
    TO_ORG := GMF_UTILITIES_GRP.GET_ORGANIZATION_CODE(P_TO_ORGANIZATION_ID);
    FROM_ITEM := GMF_UTILITIES_GRP.GET_ITEM_NUMBER(P_FROM_ITEM_ID
                                                  ,P_FROM_ORGANIZATION_ID);
    TO_ITEM := GMF_UTILITIES_GRP.GET_ITEM_NUMBER(P_TO_ITEM_ID
                                                ,P_TO_ORGANIZATION_ID);
    IF FROM_ITEM > TO_ITEM THEN
      FND_MESSAGE.SET_NAME('GMF'
                          ,'CM_FRMITEM_LTE_TOITEM');
      /*SRW.MESSAGE(100
                 ,FND_MESSAGE.GET)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
    IF (FROM_ORG IS NOT NULL AND TO_ORG IS NOT NULL) THEN
      IF FROM_ORG > TO_ORG THEN
        FND_MESSAGE.SET_NAME('GMF'
                            ,'CM_FRMORGCODE_TOORGCODE');
        /*SRW.MESSAGE(100
                   ,FND_MESSAGE.GET)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      END IF;
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;
  FUNCTION BASE_CURRCFFORMULA RETURN VARCHAR2 IS
    BCURR VARCHAR2(15);
  BEGIN
    SELECT
      BASE_CURRENCY_CODE
    INTO BCURR
    FROM
      GMF_FISCAL_POLICIES
    WHERE LEGAL_ENTITY_ID = P_LEGAL_ENTITY_ID;
    RETURN (BCURR);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      BCURR := ' ';
      RETURN (BCURR);
  END BASE_CURRCFFORMULA;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    RETURN (TRUE);
  END BEFOREREPORT;
  PROCEDURE GMF_CMR12USR_XMLP_PKG_HEADER IS
  BEGIN
    NULL;
  END GMF_CMR12USR_XMLP_PKG_HEADER;
  FUNCTION PERIOD_IDFORMULA RETURN NUMBER IS
    L_PERIOD_ID NUMBER;
    L_PERIOD_STATUS VARCHAR2(20);
  BEGIN
    BEGIN
      SELECT
        PERIOD_ID,
        DECODE(PERIOD_STATUS
              ,'O'
              ,'Open'
              ,'F'
              ,'Frozen'
              ,'C'
              ,'Closed')
      INTO L_PERIOD_ID,L_PERIOD_STATUS
      FROM
        GMF_PERIOD_STATUSES
      WHERE LEGAL_ENTITY_ID = P_LEGAL_ENTITY_ID
        AND CALENDAR_CODE = P_CALENDAR_CODE
        AND PERIOD_CODE = P_PERIOD_CODE
        AND COST_TYPE_ID = P_COST_TYPE_ID;
    EXCEPTION
      WHEN OTHERS THEN
        L_PERIOD_ID := NULL;
    END;
    CP_PERIOD_STATUS := L_PERIOD_STATUS;
    RETURN (NVL(L_PERIOD_ID
              ,-1));
  END PERIOD_IDFORMULA;
  FUNCTION COST_MTHD_CODEFORMULA RETURN CHAR IS
    L_COST_MTHD_CODE VARCHAR2(10);
  BEGIN
    BEGIN
      SELECT
        COST_MTHD_CODE
      INTO L_COST_MTHD_CODE
      FROM
        CM_MTHD_MST
      WHERE COST_TYPE_ID = P_COST_TYPE_ID;
    EXCEPTION
      WHEN OTHERS THEN
        L_COST_MTHD_CODE := NULL;
    END;
    RETURN (L_COST_MTHD_CODE);
  END COST_MTHD_CODEFORMULA;
  FUNCTION CF_LEGAL_ENTITYFORMULA RETURN CHAR IS
    P_LEGAL_ENTITY_NAME VARCHAR2(240);
  BEGIN
    IF (P_LEGAL_ENTITY_ID IS NOT NULL) THEN
      P_LEGAL_ENTITY_NAME := GMF_UTILITIES_GRP.GET_LEGAL_ENTITY(P_LEGAL_ENTITY_ID);
      IF P_LEGAL_ENTITY_NAME IS NOT NULL THEN
        RETURN (P_LEGAL_ENTITY_NAME);
      END IF;
    END IF;
  END CF_LEGAL_ENTITYFORMULA;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION ITEMCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ITEMCP;
  END ITEMCP_P;
  FUNCTION ORGANIZATIONCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ORGANIZATIONCP;
  END ORGANIZATIONCP_P;
  FUNCTION CP_PERIOD_STATUS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PERIOD_STATUS;
  END CP_PERIOD_STATUS_P;
END GMF_CMR12USR_XMLP_PKG;


/
