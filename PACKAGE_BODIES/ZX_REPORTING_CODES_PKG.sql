--------------------------------------------------------
--  DDL for Package Body ZX_REPORTING_CODES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."ZX_REPORTING_CODES_PKG" as
/* $Header: zxcrepcodesb.pls 120.4 2005/03/16 13:55:09 scsharma ship $ */
procedure INSERT_ROW (
  X_ROWID in out nocopy VARCHAR2,
  X_REPORTING_CODE_ID in NUMBER,
  X_REPORTING_CODE_CHAR_VALUE in VARCHAR2,
  X_REPORTING_CODE_NUM_VALUE in NUMBER,
  X_REPORTING_CODE_DATE_VALUE in DATE,
  X_REPORTING_TYPE_ID in NUMBER,
  X_EXCEPTION_CODE in VARCHAR2,
  X_EFFECTIVE_FROM in DATE,
  X_EFFECTIVE_TO in DATE,
  X_RECORD_TYPE_CODE in VARCHAR2,
  X_REQUEST_ID in NUMBER,
  X_PROGRAM_LOGIN_ID in NUMBER,
  X_REPORTING_CODE_NAME in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_PROGRAM_APPLICATION_ID in NUMBER,
  X_PROGRAM_ID in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER ) is
  cursor C is select ROWID from ZX_REPORTING_CODES_B
    where REPORTING_CODE_ID = X_REPORTING_CODE_ID
    ;
begin
  insert into ZX_REPORTING_CODES_B (
    REPORTING_CODE_ID,
    REPORTING_CODE_CHAR_VALUE,
    REPORTING_CODE_NUM_VALUE,
    REPORTING_CODE_DATE_VALUE,
    REPORTING_TYPE_ID,
    EXCEPTION_CODE,
    EFFECTIVE_FROM,
    EFFECTIVE_TO,
    RECORD_TYPE_CODE,
    REQUEST_ID,
    PROGRAM_LOGIN_ID,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    PROGRAM_APPLICATION_ID,
    PROGRAM_ID,
    OBJECT_VERSION_NUMBER
  ) values (
    X_REPORTING_CODE_ID,
    X_REPORTING_CODE_CHAR_VALUE,
    X_REPORTING_CODE_NUM_VALUE,
    X_REPORTING_CODE_DATE_VALUE,
    X_REPORTING_TYPE_ID,
    X_EXCEPTION_CODE,
    X_EFFECTIVE_FROM,
    X_EFFECTIVE_TO,
    X_RECORD_TYPE_CODE,
    X_REQUEST_ID,
    X_PROGRAM_LOGIN_ID,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_PROGRAM_APPLICATION_ID,
    X_PROGRAM_ID,
    X_OBJECT_VERSION_NUMBER  );

  insert into ZX_REPORTING_CODES_TL (
    REPORTING_CODE_ID,
    REPORTING_CODE_NAME,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_REPORTING_CODE_ID,
    X_REPORTING_CODE_NAME,
    X_CREATED_BY,
    X_CREATION_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATE_LOGIN,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from ZX_REPORTING_CODES_TL T
    where T.REPORTING_CODE_ID = X_REPORTING_CODE_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  X_REPORTING_CODE_ID in NUMBER,
  X_REPORTING_CODE_CHAR_VALUE in VARCHAR2,
  X_REPORTING_CODE_NUM_VALUE in NUMBER,
  X_REPORTING_CODE_DATE_VALUE in DATE,
  X_REPORTING_TYPE_ID in NUMBER,
  X_EXCEPTION_CODE in VARCHAR2,
  X_EFFECTIVE_FROM in DATE,
  X_EFFECTIVE_TO in DATE,
  X_RECORD_TYPE_CODE in VARCHAR2,
  X_REQUEST_ID in NUMBER,
  X_PROGRAM_LOGIN_ID in NUMBER,
  X_REPORTING_CODE_NAME in VARCHAR2,
  X_PROGRAM_APPLICATION_ID in NUMBER,
  X_PROGRAM_ID in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER
) is
  cursor c is select
      REPORTING_CODE_CHAR_VALUE,
      REPORTING_CODE_NUM_VALUE,
      REPORTING_CODE_DATE_VALUE,
      REPORTING_TYPE_ID,
      EXCEPTION_CODE,
      EFFECTIVE_FROM,
      EFFECTIVE_TO,
      RECORD_TYPE_CODE,
      REQUEST_ID,
      PROGRAM_LOGIN_ID,
      OBJECT_VERSION_NUMBER
    from ZX_REPORTING_CODES_B
    where REPORTING_CODE_ID = X_REPORTING_CODE_ID
    for update of REPORTING_CODE_ID nowait;
  recinfo c%rowtype;

  cursor c1 is select
      REPORTING_CODE_NAME,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from ZX_REPORTING_CODES_TL
    where REPORTING_CODE_ID = X_REPORTING_CODE_ID
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    for update of REPORTING_CODE_ID nowait;
begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if ( ((recinfo.REPORTING_CODE_CHAR_VALUE = X_REPORTING_CODE_CHAR_VALUE)
           OR ((recinfo.REPORTING_CODE_CHAR_VALUE is null) AND (X_REPORTING_CODE_CHAR_VALUE is null)))
       AND ((recinfo.REPORTING_CODE_NUM_VALUE = X_REPORTING_CODE_NUM_VALUE)
           OR ((recinfo.REPORTING_CODE_NUM_VALUE is null) AND (X_REPORTING_CODE_NUM_VALUE is null)))
       AND ((recinfo.REPORTING_CODE_DATE_VALUE = X_REPORTING_CODE_DATE_VALUE)
           OR ((recinfo.REPORTING_CODE_DATE_VALUE is null) AND (X_REPORTING_CODE_DATE_VALUE is null)))
      AND (recinfo.REPORTING_TYPE_ID = X_REPORTING_TYPE_ID)
      AND ((recinfo.EXCEPTION_CODE = X_EXCEPTION_CODE)
           OR ((recinfo.EXCEPTION_CODE is null) AND (X_EXCEPTION_CODE is null)))
      AND (recinfo.EFFECTIVE_FROM = X_EFFECTIVE_FROM)
      AND ((recinfo.EFFECTIVE_TO = X_EFFECTIVE_TO)
           OR ((recinfo.EFFECTIVE_TO is null) AND (X_EFFECTIVE_TO is null)))
      AND ((recinfo.RECORD_TYPE_CODE = X_RECORD_TYPE_CODE)
           OR ((recinfo.RECORD_TYPE_CODE is null) AND (X_RECORD_TYPE_CODE is null)))
      AND ((recinfo.REQUEST_ID = X_REQUEST_ID)
           OR ((recinfo.REQUEST_ID is null) AND (X_REQUEST_ID is null)))
      AND ((recinfo.PROGRAM_LOGIN_ID = X_PROGRAM_LOGIN_ID)
           OR ((recinfo.PROGRAM_LOGIN_ID is null) AND (X_PROGRAM_LOGIN_ID is null)))
      AND (recinfo.OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER)
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    ((tlinfo.REPORTING_CODE_NAME = X_REPORTING_CODE_NAME)
               OR ((tlinfo.REPORTING_CODE_NAME is null) AND (X_REPORTING_CODE_NAME is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_REPORTING_CODE_ID in NUMBER,
  X_REPORTING_CODE_CHAR_VALUE in VARCHAR2,
  X_REPORTING_CODE_NUM_VALUE in NUMBER,
  X_REPORTING_CODE_DATE_VALUE in DATE,
  X_REPORTING_TYPE_ID in NUMBER,
  X_EXCEPTION_CODE in VARCHAR2,
  X_EFFECTIVE_FROM in DATE,
  X_EFFECTIVE_TO in DATE,
  X_RECORD_TYPE_CODE in VARCHAR2,
  X_REQUEST_ID in NUMBER,
  X_PROGRAM_LOGIN_ID in NUMBER,
  X_REPORTING_CODE_NAME in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER,
  X_PROGRAM_APPLICATION_ID in NUMBER,
  X_PROGRAM_ID in NUMBER,
  X_OBJECT_VERSION_NUMBER in NUMBER
) is
begin
  update ZX_REPORTING_CODES_B set
    REPORTING_CODE_CHAR_VALUE = X_REPORTING_CODE_CHAR_VALUE,
    REPORTING_CODE_NUM_VALUE = X_REPORTING_CODE_NUM_VALUE,
    REPORTING_CODE_DATE_VALUE = X_REPORTING_CODE_DATE_VALUE,
    REPORTING_TYPE_ID = X_REPORTING_TYPE_ID,
    EXCEPTION_CODE = X_EXCEPTION_CODE,
    EFFECTIVE_FROM = X_EFFECTIVE_FROM,
    EFFECTIVE_TO = X_EFFECTIVE_TO,
    RECORD_TYPE_CODE = X_RECORD_TYPE_CODE,
    REQUEST_ID = X_REQUEST_ID,
    PROGRAM_LOGIN_ID = X_PROGRAM_LOGIN_ID,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER
  where REPORTING_CODE_ID = X_REPORTING_CODE_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update ZX_REPORTING_CODES_TL set
    REPORTING_CODE_NAME = X_REPORTING_CODE_NAME,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN,
    SOURCE_LANG = userenv('LANG')
  where REPORTING_CODE_ID = X_REPORTING_CODE_ID
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_REPORTING_CODE_ID in NUMBER
) is
begin
  delete from ZX_REPORTING_CODES_TL
  where REPORTING_CODE_ID = X_REPORTING_CODE_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from ZX_REPORTING_CODES_B
  where REPORTING_CODE_ID = X_REPORTING_CODE_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
  delete from ZX_REPORTING_CODES_TL T
  where not exists
    (select NULL
    from ZX_REPORTING_CODES_B B
    where B.REPORTING_CODE_ID = T.REPORTING_CODE_ID
    );

  update ZX_REPORTING_CODES_TL T set (
      REPORTING_CODE_NAME
    ) = (select
      B.REPORTING_CODE_NAME
    from ZX_REPORTING_CODES_TL B
    where B.REPORTING_CODE_ID = T.REPORTING_CODE_ID
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.REPORTING_CODE_ID,
      T.LANGUAGE
  ) in (select
      SUBT.REPORTING_CODE_ID,
      SUBT.LANGUAGE
    from ZX_REPORTING_CODES_TL SUBB, ZX_REPORTING_CODES_TL SUBT
    where SUBB.REPORTING_CODE_ID = SUBT.REPORTING_CODE_ID
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.REPORTING_CODE_NAME <> SUBT.REPORTING_CODE_NAME
      or (SUBB.REPORTING_CODE_NAME is null and SUBT.REPORTING_CODE_NAME is not null)
      or (SUBB.REPORTING_CODE_NAME is not null and SUBT.REPORTING_CODE_NAME is null)
  ));

  insert into ZX_REPORTING_CODES_TL (
    REPORTING_CODE_ID,
    REPORTING_CODE_NAME,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.REPORTING_CODE_ID,
    B.REPORTING_CODE_NAME,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from ZX_REPORTING_CODES_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from ZX_REPORTING_CODES_TL T
    where T.REPORTING_CODE_ID = B.REPORTING_CODE_ID
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

end ZX_REPORTING_CODES_PKG;

/
