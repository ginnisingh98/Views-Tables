--------------------------------------------------------
--  DDL for Package Body GMD_QCR03USR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."GMD_QCR03USR_XMLP_PKG" AS
/* $Header: QCR03USRB.pls 120.0 2007/12/24 13:08:32 krreddy noship $ */
  FUNCTION SAMPLECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(SAMPLECP)*/NULL;
    IF FROM_SAMPLE IS NOT NULL AND TO_SAMPLE IS NOT NULL THEN
      SAMPLECP := ' and gs.sample_no >= ''' || FROM_SAMPLE || ''' and gs.sample_no <= ''' || TO_SAMPLE || '''';
    ELSIF FROM_SAMPLE IS NULL AND TO_SAMPLE IS NULL THEN
      --SAMPLECP := NULL;
      SAMPLECP := ' ';
    ELSIF FROM_SAMPLE IS NOT NULL AND TO_SAMPLE IS NULL THEN
      SAMPLECP := ' and gs.sample_no >= ''' || FROM_SAMPLE || '''';
    ELSIF FROM_SAMPLE IS NULL AND TO_SAMPLE IS NOT NULL THEN
      SAMPLECP := ' and gs.sample_no <= ''' || TO_SAMPLE || '''';
    END IF;
    RETURN NULL;
  END SAMPLECFFORMULA;
  FUNCTION BATCHCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(BATCHCP)*/NULL;
    IF FROM_BATCH IS NOT NULL AND TO_BATCH IS NOT NULL THEN
      BATCHCP := ' and pbh.batch_no >= ''' || FROM_BATCH || ''' and pbh.batch_no <= ''' || TO_BATCH || '''';
    ELSIF FROM_BATCH IS NULL AND TO_BATCH IS NULL THEN
      --BATCHCP := NULL;
      BATCHCP := ' ';
    ELSIF FROM_BATCH IS NOT NULL AND TO_BATCH IS NULL THEN
      BATCHCP := ' and pbh.batch_no >= ''' || FROM_BATCH || '''';
    ELSIF FROM_BATCH IS NULL AND TO_BATCH IS NOT NULL THEN
      BATCHCP := ' and pbh.batch_no <= ''' || TO_BATCH || '''';
    END IF;
    RETURN NULL;
  END BATCHCFFORMULA;
  FUNCTION FORMULACFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(FORMULACP)*/NULL;
    IF FROM_FORMULA IS NOT NULL AND TO_FORMULA IS NOT NULL THEN
      FORMULACP := ' and ffm.formula_no >= ''' || FROM_FORMULA || ''' and ffm.formula_no <= ''' || TO_FORMULA || '''';
    ELSIF FROM_FORMULA IS NULL AND TO_FORMULA IS NULL THEN
      --FORMULACP := NULL;
      FORMULACP := ' ';
    ELSIF FROM_FORMULA IS NOT NULL AND TO_FORMULA IS NULL THEN
      FORMULACP := ' and ffm.formula_no >= ''' || FROM_FORMULA || '''';
    ELSIF FROM_FORMULA IS NULL AND TO_FORMULA IS NOT NULL THEN
      FORMULACP := ' and ffm.formula_no <= ''' || TO_FORMULA || '''';
    END IF;
    RETURN NULL;
  END FORMULACFFORMULA;
  FUNCTION FORMULA_VERSCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(FORMULA_VERSCP)*/NULL;
    IF FROM_FORMULA_VERSION IS NOT NULL AND TO_FORMULA_VERSION IS NOT NULL THEN
      FORMULA_VERSCP := ' and ffm.formula_vers >= ''' || FROM_FORMULA_VERSION || ''' and ffm.formula_vers <= ''' || TO_FORMULA_VERSION || '''';
    ELSIF FROM_FORMULA_VERSION IS NULL AND TO_FORMULA_VERSION IS NULL THEN
      --FORMULA_VERSCP := NULL;
      FORMULA_VERSCP := ' ';
    ELSIF FROM_FORMULA_VERSION IS NOT NULL AND TO_FORMULA_VERSION IS NULL THEN
      FORMULA_VERSCP := ' and ffm.formula_vers >= ''' || FROM_FORMULA_VERSION || '''';
    ELSIF FROM_FORMULA_VERSION IS NULL AND TO_FORMULA_VERSION IS NOT NULL THEN
      FORMULA_VERSCP := ' and ffm.formula_vers <= ''' || TO_FORMULA_VERSION || '''';
    END IF;
    RETURN NULL;
  END FORMULA_VERSCFFORMULA;
  FUNCTION ROUTINGCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ROUTINGCP)*/NULL;
    IF FROM_ROUTING IS NOT NULL AND TO_ROUTING IS NOT NULL THEN
      ROUTINGCP := ' and frh.routing_no >= ''' || FROM_ROUTING || ''' and frh.routing_no <= ''' || TO_ROUTING || '''';
    ELSIF FROM_ROUTING IS NULL AND TO_ROUTING IS NULL THEN
      --ROUTINGCP := NULL;
      ROUTINGCP := ' ';
    ELSIF FROM_ROUTING IS NOT NULL AND TO_ROUTING IS NULL THEN
      ROUTINGCP := ' and frh.routing_no >= ''' || FROM_ROUTING || '''';
    ELSIF FROM_ROUTING IS NULL AND TO_ROUTING IS NOT NULL THEN
      ROUTINGCP := ' and frh.routing_no <= ''' || TO_ROUTING || '''';
    END IF;
    RETURN NULL;
  END ROUTINGCFFORMULA;
  FUNCTION ROUTING_VERSCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ROUTING_VERSCP)*/NULL;
    IF FROM_ROUTING_VERSION IS NOT NULL AND TO_ROUTING_VERSION IS NOT NULL THEN
      ROUTING_VERSCP := ' and frh.routing_vers >= ''' || FROM_ROUTING_VERSION || ''' and frh.routing_vers <= ''' || TO_ROUTING_VERSION || '''';
    ELSIF FROM_ROUTING_VERSION IS NULL AND TO_ROUTING_VERSION IS NULL THEN
      --ROUTING_VERSCP := NULL;
      ROUTING_VERSCP := ' ';
    ELSIF FROM_ROUTING_VERSION IS NOT NULL AND TO_ROUTING_VERSION IS NULL THEN
      ROUTING_VERSCP := ' and frh.routing_vers >= ''' || FROM_ROUTING_VERSION || '''';
    ELSIF FROM_ROUTING_VERSION IS NULL AND TO_ROUTING_VERSION IS NOT NULL THEN
      ROUTING_VERSCP := ' and frh.routing_vers <= ''' || TO_ROUTING_VERSION || '''';
    END IF;
    RETURN NULL;
  END ROUTING_VERSCFFORMULA;
  FUNCTION ITEMCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ITEMCP)*/NULL;
    IF FROM_ITEM IS NOT NULL AND TO_ITEM IS NOT NULL THEN
      ITEMCP := ' and msi.concatenated_segments  >= ''' || FROM_ITEMCP || ''' and msi.concatenated_segments   <= ''' || TO_ITEMCP || '''';
    ELSIF FROM_ITEM IS NULL AND TO_ITEM IS NULL THEN
      --ITEMCP := NULL;
      ITEMCP := ' ';
    ELSIF FROM_ITEM IS NOT NULL AND TO_ITEM IS NULL THEN
      ITEMCP := ' and msi.concatenated_segments   >= ''' || FROM_ITEMCP || '''';
    ELSIF FROM_ITEM IS NULL AND TO_ITEM IS NOT NULL THEN
      ITEMCP := ' and  msi.concatenated_segments  <= ''' || TO_ITEMCP || '''';
    END IF;
    /*SRW.MESSAGE(1000
               ,':ItemCP ' || ITEMCP)*/NULL;
    RETURN NULL;
  END ITEMCFFORMULA;
  FUNCTION DATE1CFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(DATE1CP)*/NULL;
    IF FROM_RESULT_DATE IS NOT NULL AND TO_RESULT_DATE IS NOT NULL THEN
      DATE1CP := ' and trunc(gr1.result_date) >= FND_DATE.CHARDATE_TO_DATE(''' || FROM_RSLT_DTCP || ''') and trunc(gr1.result_date) <= FND_DATE.CHARDATE_TO_DATE(''' || TO_RSLT_DTCP || '''' || ')';
    ELSIF FROM_RESULT_DATE IS NULL AND TO_RESULT_DATE IS NULL THEN
      --DATE1CP := NULL;
      DATE1CP := ' ';
    ELSIF FROM_RESULT_DATE IS NOT NULL AND TO_RESULT_DATE IS NULL THEN
      DATE1CP := ' and trunc(gr1.result_date) >= FND_DATE.CHARDATE_TO_DATE(''' || FROM_RSLT_DTCP || '''' || ')';
    ELSIF FROM_RESULT_DATE IS NULL AND TO_RESULT_DATE IS NOT NULL THEN
      DATE1CP := ' and trunc(gr1.result_date) <= FND_DATE.CHARDATE_TO_DATE(''' || TO_RSLT_DTCP || '''' || ')';
    END IF;
    RETURN NULL;
  END DATE1CFFORMULA;
  FUNCTION OPRNCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(OPRNNOCP)*/NULL;
    IF (FROM_OPERATION IS NOT NULL OR TO_OPERATION IS NOT NULL) THEN
      OPRNNOCP := ('fom.oprn_no,fom.oprn_vers');
    ELSE
      OPRNNOCP := NULL;
      --OPRNNOCP := ' ';
    END IF;
    RETURN NULL;
  END OPRNCFFORMULA;
  FUNCTION OPRNCFFORMULA0032 RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(OPRNCP)*/NULL;
    IF FROM_OPERATION IS NOT NULL AND TO_OPERATION IS NOT NULL THEN
      OPRNCP := ' and fom.oprn_no >= ''' || FROM_OPERATION || ''' and fom.oprn_no <= ''' || TO_OPERATION || ''' and fom.oprn_id = gs.oprn_id ';
    ELSIF FROM_OPERATION IS NULL AND TO_OPERATION IS NULL THEN
      --OPRNCP := NULL;
      OPRNCP := ' ';
    ELSIF FROM_OPERATION IS NOT NULL AND TO_OPERATION IS NULL THEN
      OPRNCP := ' and fom.oprn_no >= ''' || FROM_OPERATION || ''' and fom.oprn_id = gs.oprn_id ';
    ELSIF FROM_OPERATION IS NULL AND TO_OPERATION IS NOT NULL THEN
      OPRNCP := ' and fom.oprn_no <= ''' || TO_OPERATION || ''' and fom.oprn_id = gs.oprn_id ';
    END IF;
    RETURN NULL;
  END OPRNCFFORMULA0032;
  FUNCTION OPRNTBLCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(OPRNTBLCP)*/NULL;
    IF (FROM_OPERATION IS NOT NULL OR TO_OPERATION IS NOT NULL) THEN
      OPRNTBLCP := (',gmd_operations_b fom  ');
    ELSE
      --OPRNTBLCP := NULL;
      OPRNTBLCP := ' ';
    END IF;
    RETURN NULL;
  END OPRNTBLCFFORMULA;
  FUNCTION ROUTSTEPCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ROUTSTEPCP)*/NULL;
    IF (FROM_ROUTING_STEP_NO IS NOT NULL OR TO_ROUTING_STEP_NO IS NOT NULL) THEN
      ROUTSTEPCP := ('frd.routingstep_no ');
    ELSE
     ROUTSTEPCP := NULL;
     --  ROUTSTEPCP := ' ';
    END IF;
    RETURN NULL;
  END ROUTSTEPCFFORMULA;
  FUNCTION ROUTSTEPTBLCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ROUTSTEPTBLCP)*/NULL;
    IF (FROM_ROUTING_STEP_NO IS NOT NULL OR TO_ROUTING_STEP_NO IS NOT NULL) THEN
      ROUTSTEPTBLCP := (',fm_rout_dtl frd');
    ELSE
      --ROUTSTEPTBLCP := NULL;
      ROUTSTEPTBLCP := ' ';
    END IF;
    RETURN NULL;
  END ROUTSTEPTBLCFFORMULA;
  FUNCTION ROUT_STEPNOCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ROUT_STEPNOCP)*/NULL;
    IF FROM_ROUTING_STEP_NO IS NOT NULL AND TO_ROUTING_STEP_NO IS NOT NULL THEN
      ROUT_STEPNOCP := ' and frd.routingstep_no >= ' || TO_CHAR(FROM_ROUTING_STEP_NO) || ' and frd.routingstep_no <= ' || TO_CHAR(TO_ROUTING_STEP_NO) || ' and frd.routing_id = gs.routing_id ' || ' and frd.routingstep_id = gs.step_id';
    ELSIF FROM_ROUTING_STEP_NO IS NULL AND TO_ROUTING_STEP_NO IS NULL THEN
      --ROUT_STEPNOCP := NULL;
      ROUT_STEPNOCP := ' ';
    ELSIF FROM_ROUTING_STEP_NO IS NOT NULL AND TO_ROUTING_STEP_NO IS NULL THEN
      ROUT_STEPNOCP := ' and frd.routingstep_no >= ' || TO_CHAR(FROM_ROUTING_STEP_NO) || ' and frd.routing_id = gs.routing_id ' || ' and frd.routingstep_id = gs.step_id';
    ELSIF FROM_ROUTING_STEP_NO IS NULL AND TO_ROUTING_STEP_NO IS NOT NULL THEN
      ROUT_STEPNOCP := ' and frd.routingstep_no <= ' || TO_CHAR(TO_ROUTING_STEP_NO) || ' and frd.routing_id = gs.routing_id ' || ' and frd.routingstep_id = gs.step_id';
    END IF;
    RETURN NULL;
  END ROUT_STEPNOCFFORMULA;
  FUNCTION ORDERCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(ORDERCP)*/NULL;
    IF OPRNNOCP IS NOT NULL AND ROUTSTEPCP IS NOT NULL THEN
      ORDERCP := 'fom.oprn_no,fom.oprn_vers,frd.routingstep_no,';
    ELSIF OPRNNOCP IS NOT NULL AND ROUTSTEPCP IS NULL THEN
      ORDERCP := 'fom.oprn_no,fom.oprn_vers,';
    ELSIF OPRNNOCP IS NULL AND ROUTSTEPCP IS NOT NULL THEN
      ORDERCP := 'frd.routingstep_no,';
    ELSIF OPRNNOCP IS NULL AND ROUTSTEPCP IS NULL THEN
      --ORDERCP := NULL;
      ORDERCP := ' ';
    END IF;
    RETURN NULL;
  END ORDERCFFORMULA;
  FUNCTION FINAL1CFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(FINAL1CP)*/NULL;
    IF INCLUDE = '0' THEN
      --FINAL1CP := NULL;
      FINAL1CP := ' ';
    ELSIF INCLUDE = '1' THEN
      FINAL1CP := ' and decode(gr1.ad_hoc_print_on_coa_ind, ''Y'', decode( gsr.evaluation_ind,''0A'',''Y'',''1V'',''Y'',''2R'',''Y'',''N''),''N'') =''Y''';
    END IF;
    RETURN NULL;
  END FINAL1CFFORMULA;
  FUNCTION ASSAY_DESCCFFORMULA(ASSAY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    ASSAYDESC VARCHAR2(42);
  BEGIN
    SELECT
      '[' || TEST_DESC || ']'
    INTO ASSAYDESC
    FROM
      GMD_QC_TESTS
    WHERE TEST_CODE = ASSAY_CODE;
    RETURN (ASSAYDESC);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END ASSAY_DESCCFFORMULA;
  FUNCTION TEXTCFFORMULA(TEXT_SPEC IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    IF TEXT_SPEC IS NULL THEN
      RETURN (NULL);
    ELSE
      RETURN (TEXT_SPEC);
    END IF;
  END TEXTCFFORMULA;
  FUNCTION TARGETCFFORMULA(TEXT_SPEC IN VARCHAR2
                          ,TARGET_SPEC IN NUMBER
                          ,TEST_TYPE IN VARCHAR2
                          ,PRECISION IN NUMBER) RETURN CHAR IS
    L_PRECISION VARCHAR2(25);
    L_NUMBER NUMBER;
    L_TARGET_SPEC VARCHAR2(25);
  BEGIN
    IF TEXT_SPEC IS NOT NULL THEN
      RETURN (NULL);
    ELSE
      IF TARGET_SPEC IS NOT NULL THEN
        IF TEST_TYPE in ('N','L','E') THEN
          L_PRECISION := '999999999999999D' || TO_CHAR(POWER(10
                                      ,PRECISION) - 1);
          L_NUMBER := TARGET_SPEC;
          L_TARGET_SPEC := LTRIM(TO_CHAR(TO_NUMBER(TO_CHAR(L_NUMBER))
                                        ,L_PRECISION));
          RETURN (L_TARGET_SPEC);
        ELSE
          L_NUMBER := TEXT_SPEC;
          RETURN TO_CHAR(L_NUMBER);
        END IF;
      ELSE
        RETURN NULL;
      END IF;
    END IF;
  END TARGETCFFORMULA;
  FUNCTION QCUNIT_CODECFFORMULA(QC_SPEC_ID IN NUMBER
                               ,ASSAY_CODE IN VARCHAR2
                               ,QCASSY_TYP_ID IN NUMBER) RETURN VARCHAR2 IS
    QCUNIT VARCHAR2(25);
  BEGIN
    IF QC_SPEC_ID IS NULL THEN
      BEGIN
        SELECT
          TEST_UNIT
        INTO QCUNIT
        FROM
          GMD_QC_TESTS_B
        WHERE TEST_CODE = ASSAY_CODE;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RETURN (NULL);
      END;
    ELSE
      BEGIN
        SELECT
          TEST_UNIT
        INTO QCUNIT
        FROM
          GMD_QC_TESTS
        WHERE TEST_ID = QCASSY_TYP_ID;
      END;
      RETURN (QCUNIT);
    END IF;
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END QCUNIT_CODECFFORMULA;
  FUNCTION MIN_SPECCFFORMULA(MIN_CHAR IN VARCHAR2
                            ,MIN_SPEC IN NUMBER
                            ,TEST_TYPE IN VARCHAR2
                            ,PRECISION IN NUMBER) RETURN CHAR IS
    L_PRECISION VARCHAR2(25);
    L_NUMBER NUMBER;
    L_MIN_SPEC VARCHAR2(25);
    ACCEPTABLE_RANGE NUMBER;
  BEGIN
    ACCEPTABLE_RANGE := NULL;
    IF MIN_CHAR IS NOT NULL THEN
      RETURN (NULL);
    ELSE
      IF MIN_SPEC IS NOT NULL THEN
        IF TEST_TYPE in ('N','L','E') THEN
          L_PRECISION := '999999999999999D' || TO_CHAR(POWER(10
                                      ,PRECISION) - 1);
          L_NUMBER := MIN_SPEC;
          L_MIN_SPEC := LTRIM(TO_CHAR(TO_NUMBER(TO_CHAR(L_NUMBER))
                                     ,L_PRECISION));
          RETURN (L_MIN_SPEC);
        ELSE
          L_NUMBER := MIN_CHAR;
          RETURN TO_CHAR(L_NUMBER);
        END IF;
      ELSE
        RETURN NULL;
      END IF;
    END IF;
  END MIN_SPECCFFORMULA;
  FUNCTION MAX_SPECCFFORMULA(MAX_CHAR IN VARCHAR2
                            ,MAX_SPEC IN NUMBER
                            ,TEST_TYPE IN VARCHAR2
                            ,PRECISION IN NUMBER) RETURN CHAR IS
    L_PRECISION VARCHAR2(25);
    L_NUMBER NUMBER;
    L_MAX_SPEC VARCHAR2(25);
    ACCEPTABLE_RANGE NUMBER;
  BEGIN
    ACCEPTABLE_RANGE := NULL;
    IF MAX_CHAR IS NOT NULL THEN
      RETURN (NULL);
    ELSE
      IF MAX_SPEC IS NOT NULL THEN
        IF TEST_TYPE in ('N','L','E') THEN
          L_PRECISION := '999999999999999D' || TO_CHAR(POWER(10
                                      ,PRECISION) - 1);
          L_NUMBER := MAX_SPEC;
          L_MAX_SPEC := LTRIM(TO_CHAR(TO_NUMBER(TO_CHAR(L_NUMBER))
                                     ,L_PRECISION));
          RETURN (L_MAX_SPEC);
        ELSE
          L_NUMBER := MAX_CHAR;
          RETURN TO_CHAR(L_NUMBER);
        END IF;
      ELSE
        RETURN NULL;
      END IF;
    END IF;
  END MAX_SPECCFFORMULA;
  --FUNCTION FROM_DATECFFORMULA(SAMPLE_NO IN VARCHAR2) RETURN DATE IS
  FUNCTION FROM_DATECFFORMULA(SAMPLE_NO_V IN VARCHAR2) RETURN DATE IS
    FROMDATE DATE;
  BEGIN
    SELECT
      DISTINCT
      GISV.START_DATE
    INTO FROMDATE
    FROM
      GMD_SAMPLES GS,
      GMD_SAMPLING_EVENTS GSE,
      GMD_WIP_SPEC_VRS GISV,
      GMD_EVENT_SPEC_DISP GES
    WHERE SAMPLE_NO = SAMPLE_NO_V
      AND GS.SAMPLING_EVENT_ID = GSE.SAMPLING_EVENT_ID
      AND GSE.SAMPLING_EVENT_ID = GES.SAMPLING_EVENT_ID
      AND GES.SPEC_USED_FOR_LOT_ATTRIB_IND = 'Y'
      AND GES.SPEC_VR_ID = GISV.SPEC_VR_ID;
    RETURN (FROMDATE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END FROM_DATECFFORMULA;
  --FUNCTION TO_DATECFFORMULA(SAMPLE_NO IN VARCHAR2) RETURN DATE IS
  FUNCTION TO_DATECFFORMULA(SAMPLE_NO_V IN VARCHAR2) RETURN DATE IS
    TODATE DATE;
  BEGIN
    SELECT
      GISV.END_DATE
    INTO TODATE
    FROM
      GMD_SAMPLES GS,
      GMD_SAMPLING_EVENTS GSE,
      GMD_WIP_SPEC_VRS GISV,
      GMD_EVENT_SPEC_DISP GES
    WHERE SAMPLE_NO = SAMPLE_NO_V
      AND GS.SAMPLING_EVENT_ID = GSE.SAMPLING_EVENT_ID
      AND GSE.SAMPLING_EVENT_ID = GES.SAMPLING_EVENT_ID
      AND GES.SPEC_USED_FOR_LOT_ATTRIB_IND = 'Y'
      AND GES.SPEC_VR_ID = GISV.SPEC_VR_ID;
    RETURN (TODATE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END TO_DATECFFORMULA;
  FUNCTION TEXTARRAYCFFORMULA(TEXTCODECF IN NUMBER) RETURN VARCHAR2 IS
    TEXT1 VARCHAR2(116);
    TEXT2 VARCHAR2(2000);
    CURSOR GET_TEXT1 IS
      SELECT
        TEXT
      FROM
        QC_TEXT_TBL
      WHERE TEXT_CODE = TEXTCODECF
        AND LINE_NO <> - 1
        AND LANG_CODE = 'US';
  BEGIN
    OPEN GET_TEXT1;
    LOOP
      FETCH GET_TEXT1
       INTO TEXT1;
      EXIT WHEN GET_TEXT1%NOTFOUND;
      TEXT2 := TEXT2 || ' ' || TEXT1;
    END LOOP;
    CLOSE GET_TEXT1;
    IF SQL%NOTFOUND THEN
      RETURN (NULL);
    END IF;
    RETURN (TEXT2);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END TEXTARRAYCFFORMULA;
  FUNCTION TEXT_CODECFFORMULA(QC_SPEC_ID IN NUMBER) RETURN NUMBER IS
    TEXTCODE NUMBER;
  BEGIN
    SELECT
      TEXT_CODE
    INTO TEXTCODE
    FROM
      GMD_SPECIFICATIONS_B
    WHERE SPEC_ID = QC_SPEC_ID;
    RETURN (TEXTCODE);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END TEXT_CODECFFORMULA;
  --FUNCTION TEXTARRAY2CFFORMULA(TEXT_CODE IN NUMBER) RETURN VARCHAR2 IS
  FUNCTION TEXTARRAY2CFFORMULA(TEXT_CODE_V IN NUMBER) RETURN VARCHAR2 IS
    TEXT2 VARCHAR2(116);
    TEXT3 VARCHAR2(2000);
    CURSOR GET_TEXT IS
      SELECT
        TEXT
      FROM
        QC_TEXT_TBL
      WHERE TEXT_CODE = TEXT_CODE_V
        AND LINE_NO <> - 1
        AND LANG_CODE = 'US';
  BEGIN
    OPEN GET_TEXT;
    LOOP
      FETCH GET_TEXT
       INTO TEXT2;
      EXIT WHEN GET_TEXT%NOTFOUND;
      TEXT3 := TEXT3 || TEXT2;
    END LOOP;
    CLOSE GET_TEXT;
    IF SQL%NOTFOUND THEN
      RETURN (NULL);
    END IF;
    RETURN (TEXT3);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END TEXTARRAY2CFFORMULA;
  /*FUNCTION STEPCFFORMULA(ROUTING_ID IN NUMBER
                        ,ROUTINGSTEP_ID IN NUMBER) RETURN NUMBER IS*/
FUNCTION STEPCFFORMULA(ROUTING_ID_V IN NUMBER
                        ,ROUTINGSTEP_ID_V IN NUMBER) RETURN NUMBER IS
    ROUTSTEP NUMBER;
  BEGIN
    SELECT
      ROUTINGSTEP_NO
    INTO ROUTSTEP
    FROM
      FM_ROUT_DTL
    WHERE ROUTING_ID = ROUTING_ID_V
      AND ROUTINGSTEP_ID = ROUTINGSTEP_ID_V;
    RETURN (ROUTSTEP);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END STEPCFFORMULA;
  --FUNCTION OPERATIONCFFORMULA(OPRN_ID IN NUMBER) RETURN VARCHAR2 IS
  FUNCTION OPERATIONCFFORMULA(OPRN_ID_V IN NUMBER) RETURN VARCHAR2 IS
    OPERATION VARCHAR2(32);
  BEGIN
    SELECT
      OPRN_NO
    INTO OPERATION
    FROM
      GMD_OPERATIONS_B
    WHERE OPRN_ID = OPRN_ID_V;
    RETURN (OPERATION);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END OPERATIONCFFORMULA;
  FUNCTION FROM_ITEMCFFORMULA RETURN VARCHAR2 IS
    L_FROM_ITEM VARCHAR2(240);
  BEGIN
    IF FROM_ITEM IS NULL THEN
      FROM_ITEMCP := SY_ALL;
    ELSE
      SELECT
        DISTINCT
        CONCATENATED_SEGMENTS
      INTO L_FROM_ITEM
      FROM
        MTL_SYSTEM_ITEMS_KFV
      WHERE INVENTORY_ITEM_ID = FROM_ITEM;
      FROM_ITEMCP := L_FROM_ITEM;
    END IF;
    /*SRW.MESSAGE(1000
               ,':FROM_ITEMCP ' || FROM_ITEMCP)*/NULL;
    RETURN (FROM_ITEMCP);
  END FROM_ITEMCFFORMULA;
  FUNCTION TO_ITEMCFFORMULA RETURN VARCHAR2 IS
    L_TO_ITEM VARCHAR2(240);
  BEGIN
    IF TO_ITEM IS NULL THEN
      TO_ITEMCP := SY_ALL;
    ELSE
      SELECT
        DISTINCT
        CONCATENATED_SEGMENTS
      INTO L_TO_ITEM
      FROM
        MTL_SYSTEM_ITEMS_KFV
      WHERE INVENTORY_ITEM_ID = TO_ITEM;
      TO_ITEMCP := L_TO_ITEM;
    END IF;
    /*SRW.MESSAGE(1000
               ,':TO_ITEMCP ' || TO_ITEMCP)*/NULL;
    RETURN (TO_ITEMCP);
  END TO_ITEMCFFORMULA;
  FUNCTION FROM_SAMPLECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_SAMPLE IS NULL THEN
      FROM_SAMPLECP := SY_ALL;
    ELSE
      FROM_SAMPLECP := FROM_SAMPLE;
    END IF;
    RETURN (FROM_SAMPLECP);
  END FROM_SAMPLECFFORMULA;
  FUNCTION TO_SAMPLECFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF TO_SAMPLE IS NULL THEN
      TO_SAMPLECP := SY_ALL;
    ELSE
      TO_SAMPLECP := TO_SAMPLE;
    END IF;
    RETURN (TO_SAMPLECP);
  END TO_SAMPLECFFORMULA;
  FUNCTION FROM_RSLT_DTCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_RESULT_DATE IS NULL THEN
      FROM_RSLT_DTCP := SY_ALL;
    ELSE
      FROM_RSLT_DTCP := TO_CHAR(FROM_RESULT_DATE
                               ,'DD-MON-YYYY');
    END IF;
    RETURN (FROM_RSLT_DTCP);
  END FROM_RSLT_DTCFFORMULA;
  FUNCTION TO_RSLT_DTCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF TO_RESULT_DATE IS NULL THEN
      TO_RSLT_DTCP := SY_ALL;
    ELSE
      TO_RSLT_DTCP := TO_CHAR(TO_RESULT_DATE
                             ,'DD-MON-YYYY');
    END IF;
    RETURN (TO_RSLT_DTCP);
  END TO_RSLT_DTCFFORMULA;
  FUNCTION FROM_FORMULACFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_FORMULA IS NULL THEN
      FROM_FORMULACP := SY_ALL;
    ELSE
      FROM_FORMULACP := FROM_FORMULA;
    END IF;
    RETURN (FROM_FORMULACP);
  END FROM_FORMULACFFORMULA;
  FUNCTION TO_FORMULACFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF TO_FORMULA IS NULL THEN
      TO_FORMULACP := SY_ALL;
    ELSE
      TO_FORMULACP := TO_FORMULA;
    END IF;
    RETURN (TO_FORMULACP);
  END TO_FORMULACFFORMULA;
  FUNCTION FROM_BATCHCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_BATCH IS NULL THEN
      FROM_BATCHCP := SY_ALL;
    ELSE
      FROM_BATCHCP := FROM_BATCH;
    END IF;
    RETURN (FROM_BATCHCP);
  END FROM_BATCHCFFORMULA;
  FUNCTION TO_BATCHCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF TO_BATCH IS NULL THEN
      TO_BATCHCP := SY_ALL;
    ELSE
      TO_BATCHCP := TO_BATCH;
    END IF;
    RETURN (TO_BATCHCP);
  END TO_BATCHCFFORMULA;
  FUNCTION FROM_OPERATIONCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_OPERATION IS NULL THEN
      FROM_OPERATIONCP := SY_ALL;
    ELSE
      FROM_OPERATIONCP := FROM_OPERATION;
    END IF;
    RETURN (FROM_OPERATIONCP);
  END FROM_OPERATIONCFFORMULA;
  FUNCTION TO_OPERATIONCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF TO_OPERATION IS NULL THEN
      TO_OPERATIONCP := SY_ALL;
    ELSE
      TO_OPERATIONCP := TO_OPERATION;
    END IF;
    RETURN (TO_OPERATIONCP);
  END TO_OPERATIONCFFORMULA;
  FUNCTION FROM_ROUTINGCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_ROUTING IS NULL THEN
      FROM_ROUTINGCP := SY_ALL;
    ELSE
      FROM_ROUTINGCP := FROM_ROUTING;
    END IF;
    RETURN (FROM_ROUTINGCP);
  END FROM_ROUTINGCFFORMULA;
  FUNCTION TO_ROUTINGCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF TO_ROUTING IS NULL THEN
      TO_ROUTINGCP := SY_ALL;
    ELSE
      TO_ROUTINGCP := TO_ROUTING;
    END IF;
    RETURN (TO_ROUTINGCP);
  END TO_ROUTINGCFFORMULA;
  FUNCTION FROM_ROUTING_STEPNOCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_ROUTING_STEP_NO IS NULL THEN
      FROM_ROUTING_STEP_NOCP := SY_ALL;
    ELSE
      FROM_ROUTING_STEP_NOCP := FROM_ROUTING_STEP_NO;
    END IF;
    RETURN (FROM_ROUTING_STEP_NOCP);
  END FROM_ROUTING_STEPNOCFFORMULA;
  FUNCTION TO_ROUTING_STEP_NOCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF TO_ROUTING_STEP_NO IS NULL THEN
      TO_ROUTING_STEP_NOCP := SY_ALL;
    ELSE
      TO_ROUTING_STEP_NOCP := TO_ROUTING_STEP_NO;
    END IF;
    RETURN (TO_ROUTING_STEP_NOCP);
  END TO_ROUTING_STEP_NOCFFORMULA;
  FUNCTION FROM_ROUTING_VERSIONCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_ROUTING_VERSION IS NULL THEN
      FROM_ROUTING_VERSIONCP := SY_ALL;
    ELSE
      FROM_ROUTING_VERSIONCP := FROM_ROUTING_VERSION;
    END IF;
    RETURN (FROM_ROUTING_VERSIONCP);
  END FROM_ROUTING_VERSIONCFFORMULA;
  FUNCTION TO_ROUTING_VERSIONCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF TO_ROUTING_VERSION IS NULL THEN
      TO_ROUTING_VERSIONCP := SY_ALL;
    ELSE
      TO_ROUTING_VERSIONCP := TO_ROUTING_VERSION;
    END IF;
    RETURN (TO_ROUTING_VERSIONCP);
  END TO_ROUTING_VERSIONCFFORMULA;
  FUNCTION FROM_FORMULA_VERSIONCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_FORMULA_VERSION IS NULL THEN
      FROM_FORMULA_VERSIONCP := SY_ALL;
    ELSE
      FROM_FORMULA_VERSIONCP := FROM_FORMULA_VERSION;
    END IF;
    RETURN (FROM_FORMULA_VERSIONCP);
  END FROM_FORMULA_VERSIONCFFORMULA;
  FUNCTION TO_FORMULA_VERSIONCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF TO_FORMULA_VERSION IS NULL THEN
      TO_FORMULA_VERSIONCP := SY_ALL;
    ELSE
      TO_FORMULA_VERSIONCP := TO_FORMULA_VERSION;
    END IF;
    RETURN (TO_FORMULA_VERSIONCP);
  END TO_FORMULA_VERSIONCFFORMULA;
  FUNCTION TEXTCODERSLTCFFORMULA(QC_RESULT_ID IN NUMBER
                                ,ASSAY_CODE IN VARCHAR2) RETURN NUMBER IS
    TEXTCODE NUMBER;
  BEGIN
    SELECT
      GR1.TEXT_CODE
    INTO TEXTCODE
    FROM
      GMD_RESULTS GR1,
      GMD_QC_TESTS_B GT
    WHERE GR1.RESULT_ID = QC_RESULT_ID
      AND GR1.TEST_ID = GT.TEST_ID
      AND GT.TEST_CODE = ASSAY_CODE;
    RETURN (TEXTCODE);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END TEXTCODERSLTCFFORMULA;
  FUNCTION INCLUDE_TEXTCFFORMULA RETURN VARCHAR2 IS
    INCLUDE1 VARCHAR2(80);
  BEGIN
    IF INCLUDE = '0' THEN
      SELECT
        MEANING
      INTO INCLUDE1
      FROM
        GEM_LOOKUPS
      WHERE LOOKUP_CODE = '0'
        AND LOOKUP_TYPE = 'QC_INCLUDE';
    ELSIF INCLUDE = '1' THEN
      SELECT
        MEANING
      INTO INCLUDE1
      FROM
        GEM_LOOKUPS
      WHERE LOOKUP_CODE = '1'
        AND LOOKUP_TYPE = 'QC_INCLUDE';
    END IF;
    RETURN (INCLUDE1);
  END INCLUDE_TEXTCFFORMULA;
  FUNCTION PRINT_TEXTCFFORMULA RETURN VARCHAR2 IS
    PRINT1 VARCHAR2(80);
  BEGIN
    IF PRINT_CONDITION = '0' THEN
      SELECT
        MEANING
      INTO PRINT1
      FROM
        GEM_LOOKUPS
      WHERE LOOKUP_CODE = '0'
        AND LOOKUP_TYPE = 'QC_PRINT';
    ELSIF PRINT_CONDITION = '1' THEN
      SELECT
        MEANING
      INTO PRINT1
      FROM
        GEM_LOOKUPS
      WHERE LOOKUP_CODE = '1'
        AND LOOKUP_TYPE = 'QC_PRINT';
    ELSIF PRINT_CONDITION = '2' THEN
      SELECT
        MEANING
      INTO PRINT1
      FROM
        GEM_LOOKUPS
      WHERE LOOKUP_CODE = '2'
        AND LOOKUP_TYPE = 'QC_PRINT';
    ELSIF PRINT_CONDITION = '3' THEN
      SELECT
        MEANING
      INTO PRINT1
      FROM
        GEM_LOOKUPS
      WHERE LOOKUP_CODE = '3'
        AND LOOKUP_TYPE = 'QC_PRINT';
    END IF;
    RETURN (PRINT1);
  END PRINT_TEXTCFFORMULA;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION ACCEPT_CFFORMULA(ACCEPT_ANYWAY IN VARCHAR2 ) RETURN VARCHAR2 IS
    TEMP1 VARCHAR2(80);
     BEGIN
    SELECT
      MEANING
    INTO TEMP1
    FROM
      FND_LOOKUP_VALUES
    WHERE LOOKUP_TYPE = 'GMD_QC_YES_NO'
      AND LOOKUP_CODE = ACCEPT_ANYWAY
      AND LANGUAGE = USERENV('LANG');
    ACCEPT_CP := TEMP1;
      RETURN ACCEPT_CP;
  END ACCEPT_CFFORMULA;
  FUNCTION FINAL_CFFORMULA(FINAL_MARK IN VARCHAR2) RETURN VARCHAR2 IS
    TEMP2 VARCHAR2(80);
  BEGIN
    SELECT
      MEANING
    INTO TEMP2
    FROM
      FND_LOOKUP_VALUES
    WHERE LOOKUP_TYPE = 'GMD_QC_YES_NO'
      AND LOOKUP_CODE = FINAL_MARK
      AND LANGUAGE = USERENV('LANG');
    FINAL_CP := TEMP2;
    RETURN FINAL_CP;
  END FINAL_CFFORMULA;
  PROCEDURE GMD_QCR03USR_XMLP_PKG_HEADER IS
  BEGIN
    NULL;
  END GMD_QCR03USR_XMLP_PKG_HEADER;
  FUNCTION FROM_LOTNOCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF FROM_LOTNO IS NULL THEN
      FROM_LOTNOCP := SY_ALL;
    ELSE
      FROM_LOTNOCP := FROM_LOTNO;
    END IF;
    /*SRW.MESSAGE(1000
               ,':FROM_LOTNOCP ' || FROM_LOTNOCP)*/NULL;
    RETURN (FROM_LOTNOCP);
  END FROM_LOTNOCFFORMULA;
  FUNCTION LOTCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(LOTNOCP)*/NULL;
    IF FROM_LOTNO IS NOT NULL AND TO_LOTNO IS NOT NULL THEN
      LOTNOCP := '  and  gs.lot_number  >= ''' || FROM_LOTNO || ''' and  gs.lot_number  <= ''' || TO_LOTNO || '''';
    ELSIF FROM_LOTNO IS NULL AND TO_LOTNO IS NULL THEN
      --LOTNOCP := NULL;
      LOTNOCP := ' ';
    ELSIF FROM_LOTNO IS NOT NULL AND TO_LOTNO IS NULL THEN
      LOTNOCP := ' and  gs.lot_number  >= ''' || FROM_LOTNO || '''';
    ELSIF FROM_LOTNO IS NULL AND TO_LOTNO IS NOT NULL THEN
      LOTNOCP := ' and gs.lot_number   <= ''' || TO_LOTNO || '''';
    END IF;
    /*SRW.MESSAGE(1000
               ,':LotnoCP ' || LOTNOCP)*/NULL;
    RETURN NULL;
  END LOTCFFORMULA;
  FUNCTION TO_LOTNOCFFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF TO_LOTNO IS NULL THEN
      TO_LOTNOCP := SY_ALL;
    ELSE
      TO_LOTNOCP := TO_LOTNO;
    END IF;
    /*SRW.MESSAGE(1000
               ,':TO_LOTNOCP ' || TO_LOTNOCP)*/NULL;
    RETURN (TO_LOTNOCP);
  END TO_LOTNOCFFORMULA;
  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;
  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;
  --FUNCTION OPRN_VERSCFFORMULA0017(OPRN_ID IN NUMBER) RETURN NUMBER IS
  FUNCTION OPRN_VERSCFFORMULA0017(OPRN_ID_V IN NUMBER) RETURN NUMBER IS
    OPRN_VERS NUMBER;
  BEGIN
    SELECT
      OPRN_VERS
    INTO OPRN_VERS
    FROM
      GMD_OPERATIONS_B
    WHERE OPRN_ID = OPRN_ID_V;
    RETURN (OPRN_VERS);
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN (NULL);
  END OPRN_VERSCFFORMULA0017;
  FUNCTION ORDERCPFORMULA RETURN CHAR IS
  BEGIN
    NULL;
  END ORDERCPFORMULA;
  FUNCTION ROUTSTEPCPFORMULA RETURN CHAR IS
  BEGIN
    NULL;
  END ROUTSTEPCPFORMULA;
  FUNCTION ROUT_STEPNOCPFORMULA RETURN CHAR IS
  BEGIN
    NULL;
  END ROUT_STEPNOCPFORMULA;
  FUNCTION ASSAY_DISPLAYCFFORMULA(ASSAY_CODE IN VARCHAR2
                                 ,QCASSY_TYP_ID IN NUMBER
                                 ,TARGETCF IN VARCHAR2) RETURN CHAR IS
    ASSAYVALUE VARCHAR2(240);
    ASSAYTYPE VARCHAR2(1);
  BEGIN
    BEGIN
      SELECT
        DISTINCT
        TEST_TYPE
      INTO ASSAYTYPE
      FROM
        GMD_QC_TESTS_B
      WHERE TEST_CODE = ASSAY_CODE;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
    END;
    IF ASSAYTYPE = 'L' THEN
      BEGIN
        SELECT
          DISPLAY_LABEL_NUMERIC_RANGE
        INTO ASSAYVALUE
        FROM
          GMD_QC_TEST_VALUES
        WHERE TEST_ID = QCASSY_TYP_ID
          AND ( MIN_NUM <= TARGETCF
        OR MIN_NUM IS NULL )
          AND ( MAX_NUM >= TARGETCF
        OR MAX_NUM IS NULL );
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
      END;
    END IF;
    ASSAY_TYPECP := ASSAYTYPE;
    RETURN (ASSAYVALUE);
  END ASSAY_DISPLAYCFFORMULA;
  FUNCTION ASSAYMIN_DISPCFFORMULA(QCASSY_TYP_ID IN NUMBER
                                 ,MIN_SPECCF IN VARCHAR2) RETURN CHAR IS
    ASSAYVALUE VARCHAR2(240);
    ASSAYTYPE VARCHAR2(1);
  BEGIN
    IF ASSAY_TYPECP = 'L' THEN
      BEGIN
        SELECT
          DISPLAY_LABEL_NUMERIC_RANGE
        INTO ASSAYVALUE
        FROM
          GMD_QC_TEST_VALUES
        WHERE TEST_ID = QCASSY_TYP_ID
          AND ( MIN_NUM <= MIN_SPECCF
        OR MIN_NUM IS NULL )
          AND ( MAX_NUM >= MIN_SPECCF
        OR MAX_NUM IS NULL );
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ASSAYVALUE := ' ';
      END;
    END IF;
    RETURN (ASSAYVALUE);
  END ASSAYMIN_DISPCFFORMULA;
  FUNCTION ASSAYMAX_DISPCFFORMULA(QCASSY_TYP_ID IN NUMBER
                                 ,MAX_SPECCF IN VARCHAR2) RETURN CHAR IS
    ASSAYVALUE VARCHAR2(240);
  BEGIN
    IF ASSAY_TYPECP = 'L' THEN
      BEGIN
        SELECT
          DISPLAY_LABEL_NUMERIC_RANGE
        INTO ASSAYVALUE
        FROM
          GMD_QC_TEST_VALUES
        WHERE TEST_ID = QCASSY_TYP_ID
          AND ( MIN_NUM <= MAX_SPECCF
        OR MIN_NUM IS NULL )
          AND ( MAX_NUM >= MAX_SPECCF
        OR MAX_NUM IS NULL );
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ASSAYVALUE := ' ';
      END;
    END IF;
    RETURN (ASSAYVALUE);
  END ASSAYMAX_DISPCFFORMULA;
  FUNCTION RESULT_DISPCFFORMULA(QCASSY_TYP_ID IN NUMBER
                               ,NUM_RESULT IN NUMBER) RETURN CHAR IS
    ASSAYVALUE VARCHAR2(240);
  BEGIN
    IF ASSAY_TYPECP = 'L' THEN
      BEGIN
        SELECT
          DISPLAY_LABEL_NUMERIC_RANGE
        INTO ASSAYVALUE
        FROM
          GMD_QC_TEST_VALUES
        WHERE TEST_ID = QCASSY_TYP_ID
          AND ( MIN_NUM <= NUM_RESULT
        OR MIN_NUM IS NULL )
          AND ( MAX_NUM >= NUM_RESULT
        OR MAX_NUM IS NULL );
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          ASSAYVALUE := ' ';
      END;
    END IF;
    RETURN (ASSAYVALUE);
  END RESULT_DISPCFFORMULA;
  FUNCTION MAX_CHARCFFORMULA(MAX_CHAR IN VARCHAR2) RETURN CHAR IS
  BEGIN
    IF MAX_CHAR IS NULL THEN
      RETURN (NULL);
    ELSE
      RETURN (MAX_CHAR);
    END IF;
  END MAX_CHARCFFORMULA;
  FUNCTION MIN_CHARCFFORMULA(MIN_CHAR IN VARCHAR2) RETURN CHAR IS
  BEGIN
    IF MIN_CHAR IS NULL THEN
      RETURN (NULL);
    ELSE
      RETURN (MIN_CHAR);
    END IF;
  END MIN_CHARCFFORMULA;
  FUNCTION RESULT_NUMCFFORMULA(TEXT_RESULT IN VARCHAR2
                              ,NUM_RESULT IN NUMBER
                              ,TEST_TYPE IN VARCHAR2
                              ,PRECISION IN NUMBER) RETURN CHAR IS
    L_PRECISION VARCHAR2(25);
    L_NUMBER NUMBER;
    L_RESULT_NUM VARCHAR2(25);
  BEGIN
    IF TEXT_RESULT IS NOT NULL THEN
      RETURN (NULL);
    ELSE
      IF NUM_RESULT IS NOT NULL THEN
        IF TEST_TYPE in ('N','L','E') THEN
          L_PRECISION := '999999999999999D' || TO_CHAR(POWER(10
                                      ,PRECISION) - 1);
          L_NUMBER := NUM_RESULT;
          L_RESULT_NUM := LTRIM(TO_CHAR(TO_NUMBER(TO_CHAR(L_NUMBER))
                                       ,L_PRECISION));
          RETURN (L_RESULT_NUM);
        ELSE
          L_NUMBER := TEXT_RESULT;
          RETURN TO_CHAR(L_NUMBER);
        END IF;
      ELSE
        RETURN NULL;
      END IF;
    END IF;
  END RESULT_NUMCFFORMULA;
  FUNCTION ORGCFFORMULA RETURN CHAR IS
    ORG_CODE VARCHAR2(3);
  BEGIN
    SELECT
      DISTINCT
      ORGANIZATION_CODE
    INTO ORG_CODE
    FROM
      MTL_PARAMETERS
    WHERE ORGANIZATION_ID = P_ORGANIZATION_ID;
    ORGCP := ORG_CODE;
    RETURN (ORGCP);
  END ORGCFFORMULA;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION ASSAY_TYPECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ASSAY_TYPECP;
  END ASSAY_TYPECP_P;
  FUNCTION SAMPLECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SAMPLECP;
  END SAMPLECP_P;
  FUNCTION BATCHCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN BATCHCP;
  END BATCHCP_P;
  FUNCTION FORMULACP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FORMULACP;
  END FORMULACP_P;
  FUNCTION FORMULA_VERSCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FORMULA_VERSCP;
  END FORMULA_VERSCP_P;
  FUNCTION ROUTINGCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ROUTINGCP;
  END ROUTINGCP_P;
  FUNCTION ROUTING_VERSCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ROUTING_VERSCP;
  END ROUTING_VERSCP_P;
  FUNCTION ITEMCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ITEMCP;
  END ITEMCP_P;
  FUNCTION DATE1CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN DATE1CP;
  END DATE1CP_P;
  FUNCTION OPRNNOCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN OPRNNOCP;
  END OPRNNOCP_P;
  FUNCTION OPRNTBLCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN OPRNTBLCP;
  END OPRNTBLCP_P;
  FUNCTION OPRNCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN OPRNCP;
  END OPRNCP_P;
  FUNCTION ROUTSTEPCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ROUTSTEPCP;
  END ROUTSTEPCP_P;
  FUNCTION ROUTSTEPTBLCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ROUTSTEPTBLCP;
  END ROUTSTEPTBLCP_P;
  FUNCTION ROUT_STEPNOCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ROUT_STEPNOCP;
  END ROUT_STEPNOCP_P;
  FUNCTION ORDERCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ORDERCP;
  END ORDERCP_P;
  FUNCTION FINAL1CP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FINAL1CP;
  END FINAL1CP_P;
  FUNCTION FROM_ITEMCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_ITEMCP;
  END FROM_ITEMCP_P;
  FUNCTION TO_ITEMCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_ITEMCP;
  END TO_ITEMCP_P;
  FUNCTION FROM_SAMPLECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_SAMPLECP;
  END FROM_SAMPLECP_P;
  FUNCTION TO_SAMPLECP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_SAMPLECP;
  END TO_SAMPLECP_P;
  FUNCTION FROM_RSLT_DTCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_RSLT_DTCP;
  END FROM_RSLT_DTCP_P;
  FUNCTION TO_RSLT_DTCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_RSLT_DTCP;
  END TO_RSLT_DTCP_P;
  FUNCTION FROM_FORMULACP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_FORMULACP;
  END FROM_FORMULACP_P;
  FUNCTION TO_FORMULACP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_FORMULACP;
  END TO_FORMULACP_P;
  FUNCTION FROM_BATCHCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_BATCHCP;
  END FROM_BATCHCP_P;
  FUNCTION TO_BATCHCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_BATCHCP;
  END TO_BATCHCP_P;
  FUNCTION FROM_OPERATIONCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_OPERATIONCP;
  END FROM_OPERATIONCP_P;
  FUNCTION TO_OPERATIONCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_OPERATIONCP;
  END TO_OPERATIONCP_P;
  FUNCTION FROM_ROUTINGCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_ROUTINGCP;
  END FROM_ROUTINGCP_P;
  FUNCTION TO_ROUTINGCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_ROUTINGCP;
  END TO_ROUTINGCP_P;
  FUNCTION FROM_ROUTING_STEP_NOCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_ROUTING_STEP_NOCP;
  END FROM_ROUTING_STEP_NOCP_P;
  FUNCTION TO_ROUTING_STEP_NOCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_ROUTING_STEP_NOCP;
  END TO_ROUTING_STEP_NOCP_P;
  FUNCTION FROM_ROUTING_VERSIONCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_ROUTING_VERSIONCP;
  END FROM_ROUTING_VERSIONCP_P;
  FUNCTION TO_ROUTING_VERSIONCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_ROUTING_VERSIONCP;
  END TO_ROUTING_VERSIONCP_P;
  FUNCTION FROM_FORMULA_VERSIONCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_FORMULA_VERSIONCP;
  END FROM_FORMULA_VERSIONCP_P;
  FUNCTION TO_FORMULA_VERSIONCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_FORMULA_VERSIONCP;
  END TO_FORMULA_VERSIONCP_P;
  FUNCTION LOTNOCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN LOTNOCP;
  END LOTNOCP_P;
  FUNCTION FROM_LOTNOCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FROM_LOTNOCP;
  END FROM_LOTNOCP_P;
  FUNCTION TO_LOTNOCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN TO_LOTNOCP;
  END TO_LOTNOCP_P;
  FUNCTION ORGCP_P RETURN VARCHAR2 IS
  BEGIN
    RETURN ORGCP;
  END ORGCP_P;
END GMD_QCR03USR_XMLP_PKG;



/
