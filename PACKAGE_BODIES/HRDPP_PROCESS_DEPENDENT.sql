--------------------------------------------------------
--  DDL for Package Body HRDPP_PROCESS_DEPENDENT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HRDPP_PROCESS_DEPENDENT" as
/*
 * Generated by hr_pump_meta_mapper at: 2013/08/29 22:08:12
 * Generated for API: BEN_ENROLLMENT_PROCESS.PROCESS_DEPENDENT
 */
--
dh constant date := hr_api.g_date;
nh constant number := hr_api.g_number;
vh constant varchar2(64) := hr_api.g_varchar2;
c_sot constant date := to_date('01010001','DDMMYYYY');
cn constant varchar2(32) := '<NULL>';
dn constant date := null;
nn constant number := null;
vn constant varchar2(1) := null;
--
function dc(p in date) return varchar2 is
begin
if p<c_sot then
 if p<>trunc(p) then
  return to_char(p,'SYYYY/MM/DD HH24:MI:SS');
 end if;
 return to_char(p,'SYYYY/MM/DD');
elsif p<>trunc(p) then
 return to_char(p,'YYYY/MM/DD HH24:MI:SS');
end if;
return to_char(p,'YYYY/MM/DD');
end dc;
function d(p in varchar2) return date is
begin
if length(p)=10 then
return to_date(p,'YYYY/MM/DD');
elsif length(p)=19 then
return to_date(p,'YYYY/MM/DD HH24:MI:SS');
elsif length(p)=11 then
return to_date(p,'SYYYY/MM/DD');
elsif length(p)=20 then
return to_date(p,'SYYYY/MM/DD HH24:MI:SS');
end if;
-- Try default format as last resort.
return to_date(p,'YYYY/MM/DD');
end d;
function n(p in varchar2) return number is
begin
return to_number(p);
end n;
function dd(p in date,i in varchar2)
return varchar2 is
begin
if upper(i) = 'N' then return dc(p);
else return cn; end if;
end dd;
function nd(p in number,i in varchar2)
return varchar2 is
begin
if upper(i) = 'N' then return to_char(p);
else return cn; end if;
end nd;
--
procedure iuk
(p_batch_line_id  in number,
p_user_key_value in varchar2,
p_unique_key_id  in number)
is
begin
hr_data_pump.entry('ins_user_key');
insert into hr_pump_batch_line_user_keys
(user_key_id, batch_line_id,user_key_value,unique_key_id)
values
(hr_pump_batch_line_user_keys_s.nextval,
p_batch_line_id,
p_user_key_value,
p_unique_key_id);
hr_data_pump.exit('ins_user_key');
end iuk;
--
procedure insert_batch_lines
(p_batch_id      in number
,p_data_pump_batch_line_id in number default null
,p_data_pump_business_grp_name in varchar2 default null
,p_user_sequence in number default null
,p_link_value    in number default null
,P_LIFE_EVENT_DATE in date
,P_EFFECTIVE_DATE in date
,P_CVG_STRT_DT in date default null
,I_CVG_STRT_DT in varchar2 default 'N'
,P_CVG_THRU_DT in date default null
,I_CVG_THRU_DT in varchar2 default 'N'
,P_MULTI_ROW_ACTN in boolean default null
,P_RECORD_TYP_CD in varchar2
,P_EMPLOYEE_NUMBER in varchar2
,P_NATIONAL_IDENTIFIER in varchar2
,P_FULL_NAME in varchar2
,P_DATE_OF_BIRTH in date
,P_PERSON_NUM in number
,P_PROGRAM in varchar2 default null
,P_PROGRAM_NUM in number default null
,I_PROGRAM_NUM in varchar2 default 'N'
,P_PLAN in varchar2 default null
,P_PLAN_NUM in number default null
,I_PLAN_NUM in varchar2 default 'N'
,P_OPTION in varchar2 default null
,P_OPTION_NUM in number default null
,I_OPTION_NUM in varchar2 default 'N'
,P_LIFE_EVENT_REASON in varchar2
,P_CON_EMPLOYEE_NUMBER in varchar2
,P_CON_NATIONAL_IDENTIFIER in varchar2
,P_CON_FULL_NAME in varchar2
,P_CON_DATE_OF_BIRTH in date
,P_CON_PERSON_NUM in number) is
blid number := p_data_pump_batch_line_id;
 L_MULTI_ROW_ACTN varchar2(5);
begin
if P_MULTI_ROW_ACTN is null then
 L_MULTI_ROW_ACTN := null;
elsif P_MULTI_ROW_ACTN then
 L_MULTI_ROW_ACTN := 'TRUE';
else 
 L_MULTI_ROW_ACTN := 'FALSE';
end if;
if blid is not null then
delete from hr_pump_batch_lines where batch_line_id = blid;
delete from hr_pump_batch_exceptions
where source_type = 'BATCH_LINE' and source_id = blid;
end if;
insert into hr_pump_batch_lines
(batch_id
,batch_line_id
,business_group_name
,api_module_id
,line_status
,user_sequence
,link_value
,pval001
,pval002
,pval003
,pval004
,pval005
,pval006
,pval007
,pval008
,pval009
,pval010
,pval011
,pval012
,pval013
,pval014
,pval015
,pval016
,pval017
,pval018
,pval019
,pval020
,pval021
,pval022
,pval023)
values
(p_batch_id
,nvl(blid,hr_pump_batch_lines_s.nextval)
,p_data_pump_business_grp_name
,3846
,'U'
,p_user_sequence
,p_link_value
,dc(P_LIFE_EVENT_DATE)
,dc(P_EFFECTIVE_DATE)
,dd(P_CVG_STRT_DT,I_CVG_STRT_DT)
,dd(P_CVG_THRU_DT,I_CVG_THRU_DT)
,L_MULTI_ROW_ACTN
,P_RECORD_TYP_CD
,P_EMPLOYEE_NUMBER
,P_NATIONAL_IDENTIFIER
,P_FULL_NAME
,dc(P_DATE_OF_BIRTH)
,P_PERSON_NUM
,P_PROGRAM
,nd(P_PROGRAM_NUM,I_PROGRAM_NUM)
,P_PLAN
,nd(P_PLAN_NUM,I_PLAN_NUM)
,P_OPTION
,nd(P_OPTION_NUM,I_OPTION_NUM)
,P_LIFE_EVENT_REASON
,P_CON_EMPLOYEE_NUMBER
,P_CON_NATIONAL_IDENTIFIER
,P_CON_FULL_NAME
,dc(P_CON_DATE_OF_BIRTH)
,P_CON_PERSON_NUM);
end insert_batch_lines;
--
procedure call
(p_business_group_id in number,
p_batch_line_id     in number) is
cursor cr is
select l.rowid myrowid,
decode(l.pval001,cn,dn,d(l.pval001)) p1,
decode(l.pval002,cn,dn,d(l.pval002)) p2,
decode(l.pval003,cn,dn,vn,dh,d(l.pval003)) p3,
l.pval003 d3,
decode(l.pval004,cn,dn,vn,dh,d(l.pval004)) p4,
l.pval004 d4,
decode(l.pval005,cn,vn,vn,null,l.pval005) p5,
l.pval005 d5,
decode(l.pval006,cn,vn,l.pval006) p6,
decode(l.pval007,cn,vn,l.pval007) p7,
decode(l.pval008,cn,vn,l.pval008) p8,
decode(l.pval009,cn,vn,l.pval009) p9,
decode(l.pval010,cn,dn,d(l.pval010)) p10,
decode(l.pval011,cn,nn,n(l.pval011)) p11,
decode(l.pval012,cn,vn,vn,vh,l.pval012) p12,
l.pval012 d12,
decode(l.pval013,cn,nn,vn,nh,n(l.pval013)) p13,
l.pval013 d13,
decode(l.pval014,cn,vn,vn,vh,l.pval014) p14,
l.pval014 d14,
decode(l.pval015,cn,nn,vn,nh,n(l.pval015)) p15,
l.pval015 d15,
decode(l.pval016,cn,vn,vn,vh,l.pval016) p16,
l.pval016 d16,
decode(l.pval017,cn,nn,vn,nh,n(l.pval017)) p17,
l.pval017 d17,
decode(l.pval018,cn,vn,l.pval018) p18,
decode(l.pval019,cn,vn,l.pval019) p19,
decode(l.pval020,cn,vn,l.pval020) p20,
decode(l.pval021,cn,vn,l.pval021) p21,
decode(l.pval022,cn,dn,d(l.pval022)) p22,
decode(l.pval023,cn,nn,n(l.pval023)) p23
from hr_pump_batch_lines l
where l.batch_line_id = p_batch_line_id;
--
c cr%rowtype;
l_validate boolean := false;
L_MULTI_ROW_ACTN boolean;
L_PERSON_ID number;
L_PGM_ID number;
L_PL_ID number;
L_OPT_ID number;
L_LER_ID number;
L_CONTACT_PERSON_ID number;
--
begin
hr_data_pump.entry('call');
open cr;
fetch cr into c;
if cr%notfound then
hr_utility.set_message(800,'HR_50326_DP_NO_ROW');
hr_utility.set_message_token('TABLE','HR_PUMP_BATCH_LINES');
hr_utility.set_message_token('COLUMN','P_BATCH_LINE_ID');
hr_utility.set_message_token('VALUE',p_batch_line_id);
hr_utility.raise_error;
end if;
--
if upper(c.p5) = 'TRUE' then
L_MULTI_ROW_ACTN := true;
elsif upper(c.p5) = 'FALSE' then
L_MULTI_ROW_ACTN := false;
elsif c.p5 is not null then
hr_utility.set_message(800,'HR_50327_DP_TYPE_ERR');
hr_utility.set_message_token('TYPE','BOOLEAN');
hr_utility.set_message_token('PARAMETER','P_MULTI_ROW_ACTN');
hr_utility.set_message_token('VALUE',c.p5);
hr_utility.set_message_token('TABLE','HR_PUMP_BATCH_LINES');
hr_utility.raise_error;
end if;
--
L_PERSON_ID := 
BEN_PUMP_GET.GET_PEN_PERSON_ID
(P_DATA_PUMP_ALWAYS_CALL => null
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EMPLOYEE_NUMBER => c.p7
,P_NATIONAL_IDENTIFIER => c.p8
,P_FULL_NAME => c.p9
,P_DATE_OF_BIRTH => c.p10
,P_PERSON_NUM => c.p11
,P_EFFECTIVE_DATE => c.p2);
--
L_PGM_ID := 
BEN_PUMP_GET.GET_PGM_ID
(P_DATA_PUMP_ALWAYS_CALL => null
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_PROGRAM => c.p12
,P_PROGRAM_NUM => c.p13
,P_EFFECTIVE_DATE => c.p2);
--
L_PL_ID := 
BEN_PUMP_GET.GET_PL_ID
(P_DATA_PUMP_ALWAYS_CALL => null
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_PLAN => c.p14
,P_PLAN_NUM => c.p15
,P_EFFECTIVE_DATE => c.p2);
--
L_OPT_ID := 
BEN_PUMP_GET.GET_OPT_ID
(P_DATA_PUMP_ALWAYS_CALL => null
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_OPTION => c.p16
,P_OPTION_NUM => c.p17
,P_EFFECTIVE_DATE => c.p2);
--
if c.p18 is null or
c.p2 is null then
L_LER_ID:=nn;
else
L_LER_ID := 
hr_pump_get.GET_LER_ID
(P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_LIFE_EVENT_REASON => c.p18
,P_EFFECTIVE_DATE => c.p2);
end if;
--
L_CONTACT_PERSON_ID := 
BEN_PUMP_GET.GET_CON_PERSON_ID
(P_DATA_PUMP_ALWAYS_CALL => null
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_CON_EMPLOYEE_NUMBER => c.p19
,P_CON_NATIONAL_IDENTIFIER => c.p20
,P_CON_FULL_NAME => c.p21
,P_CON_DATE_OF_BIRTH => c.p22
,P_CON_PERSON_NUM => c.p23
,P_EFFECTIVE_DATE => c.p2);
--
hr_data_pump.api_trc_on;
BEN_ENROLLMENT_PROCESS.PROCESS_DEPENDENT
(p_validate => l_validate
,P_PERSON_ID => L_PERSON_ID
,P_PGM_ID => L_PGM_ID
,P_PL_ID => L_PL_ID
,P_OPT_ID => L_OPT_ID
,P_LER_ID => L_LER_ID
,P_LIFE_EVENT_DATE => c.p1
,P_EFFECTIVE_DATE => c.p2
,P_CONTACT_PERSON_ID => L_CONTACT_PERSON_ID
,p_business_group_id => p_business_group_id
,P_CVG_STRT_DT => c.p3
,P_CVG_THRU_DT => c.p4
,P_MULTI_ROW_ACTN => L_MULTI_ROW_ACTN
,P_RECORD_TYP_CD => c.p6);
hr_data_pump.api_trc_off;

--

--
close cr;
--
hr_data_pump.exit('call');
exception
 when hr_multi_message.error_message_exist then
   if cr%isopen then
    close cr;
   end if;
   hr_pump_utils.set_multi_msg_error_flag(true);
 when others then
 if cr%isopen then
  close cr;
 end if;
 raise;
end call;
end hrdpp_PROCESS_DEPENDENT;

/
