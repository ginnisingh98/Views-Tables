--------------------------------------------------------
--  DDL for Package Body XTR_RM_MD_CURVES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."XTR_RM_MD_CURVES_PKG" as
/* $Header: xtrmdcvb.pls 120.3 2005/06/29 10:42:11 csutaria ship $ */

PROCEDURE INSERT_ROW(
		X_ROWID IN OUT NOCOPY VARCHAR2,
		X_CURVE_CODE VARCHAR2,
		X_DESCRIPTION VARCHAR2,
		X_TYPE VARCHAR2,
		X_CCY VARCHAR2,
		X_CONTRA_CCY VARCHAR2,
		X_DATA_SIDE VARCHAR2,
		X_DEFAULT_INTERPOLATION VARCHAR2,
		X_AUTHORIZED_YN VARCHAR2,
		X_ATTRIBUTE_CATEGORY VARCHAR2,
		X_ATTRIBUTE1 VARCHAR2,
		X_ATTRIBUTE2 VARCHAR2,
		X_ATTRIBUTE3 VARCHAR2,
		X_ATTRIBUTE4 VARCHAR2,
		X_ATTRIBUTE5 VARCHAR2,
		X_ATTRIBUTE6 VARCHAR2,
		X_ATTRIBUTE7 VARCHAR2,
		X_ATTRIBUTE8 VARCHAR2,
		X_ATTRIBUTE9 VARCHAR2,
		X_ATTRIBUTE10 VARCHAR2,
		X_ATTRIBUTE11 VARCHAR2,
		X_ATTRIBUTE12 VARCHAR2,
		X_ATTRIBUTE13 VARCHAR2,
		X_ATTRIBUTE14 VARCHAR2,
		X_ATTRIBUTE15 VARCHAR2,
		X_CREATED_BY NUMBER,
		X_CREATION_DATE DATE,
		X_LAST_UPDATED_BY NUMBER,
		X_LAST_UPDATE_DATE DATE,
		X_LAST_UPDATE_LOGIN NUMBER) IS

	X_CURVE_CODE_TMP VARCHAR(20);

	CURSOR GET_CURVE_CODE IS
		SELECT CURVE_CODE
		FROM XTR_RM_MD_CURVES
		WHERE CURVE_CODE = X_CURVE_CODE;

	CURSOR C IS
		SELECT ROWID FROM XTR_RM_MD_CURVES
		WHERE CURVE_CODE = X_CURVE_CODE;

BEGIN
	OPEN GET_CURVE_CODE;
	FETCH GET_CURVE_CODE INTO X_CURVE_CODE_TMP;
	-- CURVE CODE DOESN'T ALREADY EXIST, SO SAVE INTO TABLE
	IF (GET_CURVE_CODE%NOTFOUND) THEN
		INSERT INTO XTR_RM_MD_CURVES (
			CURVE_CODE,
			DESCRIPTION,
			TYPE,
			CCY,
			CONTRA_CCY,
			DATA_SIDE,
			DEFAULT_INTERPOLATION,
			AUTHORIZED_YN,
			ATTRIBUTE_CATEGORY,
			ATTRIBUTE1,
			ATTRIBUTE2,
			ATTRIBUTE3,
			ATTRIBUTE4,
			ATTRIBUTE5,
			ATTRIBUTE6,
			ATTRIBUTE7,
			ATTRIBUTE8,
			ATTRIBUTE9,
			ATTRIBUTE10,
			ATTRIBUTE11,
			ATTRIBUTE12,
			ATTRIBUTE13,
			ATTRIBUTE14,
			ATTRIBUTE15,
			CREATED_BY,
			CREATION_DATE,
			LAST_UPDATED_BY,
			LAST_UPDATE_DATE,
			LAST_UPDATE_LOGIN)
		VALUES (X_CURVE_CODE,
			X_DESCRIPTION,
			X_TYPE,
			X_CCY,
			X_CONTRA_CCY,
			X_DATA_SIDE,
			X_DEFAULT_INTERPOLATION,
			X_AUTHORIZED_YN,
			X_ATTRIBUTE_CATEGORY,
			X_ATTRIBUTE1,
			X_ATTRIBUTE2,
			X_ATTRIBUTE3,
			X_ATTRIBUTE4,
			X_ATTRIBUTE5,
			X_ATTRIBUTE6,
			X_ATTRIBUTE7,
			X_ATTRIBUTE8,
			X_ATTRIBUTE9,
			X_ATTRIBUTE10,
			X_ATTRIBUTE11,
			X_ATTRIBUTE12,
			X_ATTRIBUTE13,
			X_ATTRIBUTE14,
			X_ATTRIBUTE15,
			X_CREATED_BY,
			X_CREATION_DATE,
			X_LAST_UPDATED_BY,
			X_LAST_UPDATE_DATE,
			X_LAST_UPDATE_LOGIN);

	-- CURVE_CODE ALREADY EXISTS, SO THROW ERROR MESSAGE
	ELSE
		FND_MESSAGE.SET_NAME('XTR', 'XTR_RM_CURVE_CODE_EXISTS');
		APP_EXCEPTION.RAISE_EXCEPTION;
	END IF;
	CLOSE GET_CURVE_CODE;

	OPEN C;
	FETCH C INTO X_ROWID;
	IF (C%NOTFOUND) THEN
		CLOSE C;
		RAISE NO_DATA_FOUND;
	END IF;
	CLOSE C;

END INSERT_ROW;

PROCEDURE DELETE_ROW (X_ROWID VARCHAR2) IS

BEGIN
		-- DELETE THE ROW, SINCE NOT USED ANYWHERE ELSE
		DELETE FROM XTR_RM_MD_CURVES
		WHERE ROWID = X_ROWID;
			IF (SQL%NOTFOUND) THEN
				RAISE NO_DATA_FOUND;
			END IF;
END DELETE_ROW;


PROCEDURE UPDATE_ROW(
		X_ROWID VARCHAR2,
		X_CURVE_CODE VARCHAR2,
		X_DESCRIPTION VARCHAR2,
		X_TYPE VARCHAR2,
		X_CCY VARCHAR2,
		X_CONTRA_CCY VARCHAR2,
		X_DATA_SIDE VARCHAR2,
		X_DEFAULT_INTERPOLATION VARCHAR2,
		X_AUTHORIZED_YN VARCHAR2,
		X_ATTRIBUTE_CATEGORY VARCHAR2,
		X_ATTRIBUTE1 VARCHAR2,
		X_ATTRIBUTE2 VARCHAR2,
		X_ATTRIBUTE3 VARCHAR2,
		X_ATTRIBUTE4 VARCHAR2,
		X_ATTRIBUTE5 VARCHAR2,
		X_ATTRIBUTE6 VARCHAR2,
		X_ATTRIBUTE7 VARCHAR2,
		X_ATTRIBUTE8 VARCHAR2,
		X_ATTRIBUTE9 VARCHAR2,
		X_ATTRIBUTE10 VARCHAR2,
		X_ATTRIBUTE11 VARCHAR2,
		X_ATTRIBUTE12 VARCHAR2,
		X_ATTRIBUTE13 VARCHAR2,
		X_ATTRIBUTE14 VARCHAR2,
		X_ATTRIBUTE15 VARCHAR2,
		X_LAST_UPDATED_BY NUMBER,
		X_LAST_UPDATE_DATE DATE,
		X_LAST_UPDATE_LOGIN NUMBER) IS
BEGIN
	UPDATE XTR_RM_MD_CURVES
	SET
		CURVE_CODE 	= 	X_CURVE_CODE,
		DESCRIPTION	=	X_DESCRIPTION,
		TYPE		=  	X_TYPE,
		CCY		=	X_CCY,
		CONTRA_CCY	=	X_CONTRA_CCY,
		DATA_SIDE	=	X_DATA_SIDE,
		DEFAULT_INTERPOLATION	=	X_DEFAULT_INTERPOLATION,
		AUTHORIZED_YN	=	X_AUTHORIZED_YN,
		ATTRIBUTE_CATEGORY	=	X_ATTRIBUTE_CATEGORY,
		ATTRIBUTE1	=	X_ATTRIBUTE1,
		ATTRIBUTE2	=	X_ATTRIBUTE2,
		ATTRIBUTE3	=	X_ATTRIBUTE3,
		ATTRIBUTE4	=	X_ATTRIBUTE4,
		ATTRIBUTE5	=	X_ATTRIBUTE5,
		ATTRIBUTE6	=	X_ATTRIBUTE6,
		ATTRIBUTE7	=	X_ATTRIBUTE7,
		ATTRIBUTE8	=	X_ATTRIBUTE8,
		ATTRIBUTE9	=	X_ATTRIBUTE9,
		ATTRIBUTE10	=	X_ATTRIBUTE10,
		ATTRIBUTE11	=	X_ATTRIBUTE11,
		ATTRIBUTE12	=	X_ATTRIBUTE12,
		ATTRIBUTE13	=	X_ATTRIBUTE13,
		ATTRIBUTE14	=	X_ATTRIBUTE14,
		ATTRIBUTE15	=	X_ATTRIBUTE15,
		LAST_UPDATED_BY	=	X_LAST_UPDATED_BY,
		LAST_UPDATE_DATE	=	X_LAST_UPDATE_DATE,
		LAST_UPDATE_LOGIN	=	X_LAST_UPDATE_LOGIN
	WHERE ROWID = X_ROWID;

	IF (SQL%NOTFOUND) THEN
		RAISE NO_DATA_FOUND;
	END IF;
END UPDATE_ROW;

PROCEDURE LOCK_ROW (
		X_ROWID VARCHAR2,
		X_CURVE_CODE VARCHAR2,
		X_DESCRIPTION VARCHAR2,
		X_TYPE VARCHAR2,
		X_CCY VARCHAR2,
		X_CONTRA_CCY VARCHAR2,
		X_DATA_SIDE VARCHAR2,
		X_DEFAULT_INTERPOLATION VARCHAR2,
		X_AUTHORIZED_YN VARCHAR2,
		X_ATTRIBUTE_CATEGORY VARCHAR2,
		X_ATTRIBUTE1 VARCHAR2,
		X_ATTRIBUTE2 VARCHAR2,
		X_ATTRIBUTE3 VARCHAR2,
		X_ATTRIBUTE4 VARCHAR2,
		X_ATTRIBUTE5 VARCHAR2,
		X_ATTRIBUTE6 VARCHAR2,
		X_ATTRIBUTE7 VARCHAR2,
		X_ATTRIBUTE8 VARCHAR2,
		X_ATTRIBUTE9 VARCHAR2,
		X_ATTRIBUTE10 VARCHAR2,
		X_ATTRIBUTE11 VARCHAR2,
		X_ATTRIBUTE12 VARCHAR2,
		X_ATTRIBUTE13 VARCHAR2,
		X_ATTRIBUTE14 VARCHAR2,
		X_ATTRIBUTE15 VARCHAR2) IS

	CURSOR C IS
		SELECT *
		FROM XTR_RM_MD_CURVES
		WHERE ROWID = X_ROWID
		FOR UPDATE OF CURVE_CODE NOWAIT;
	RECINFO C%ROWTYPE;

BEGIN
	OPEN C;
	FETCH C INTO RECINFO;
	IF (C%NOTFOUND) THEN
		CLOSE C;
		FND_MESSAGE.SET_NAME('FND', 'FORM_RECORD_DELETED');
		APP_EXCEPTION.RAISE_EXCEPTION;
	END IF;
	CLOSE C;

	IF (
			(RECINFO.CURVE_CODE = X_CURVE_CODE)
		AND	(	(RECINFO.DESCRIPTION = X_DESCRIPTION)
			OR	(	(RECINFO.DESCRIPTION IS NULL)
				AND 	(X_DESCRIPTION IS NULL)))
		AND	(RECINFO.TYPE = X_TYPE)
		AND 	(RECINFO.CCY = X_CCY)
		AND	(	(RECINFO.CONTRA_CCY = X_CONTRA_CCY)
			OR	(	(RECINFO.CONTRA_CCY IS NULL)
				AND	(X_CONTRA_CCY IS NULL)))
		AND	(RECINFO.DATA_SIDE = X_DATA_SIDE)
		AND	(RECINFO.DEFAULT_INTERPOLATION = X_DEFAULT_INTERPOLATION)
		AND	(	(RECINFO.ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY)
			OR	(	(RECINFO.ATTRIBUTE_CATEGORY IS NULL)
				AND 	(X_ATTRIBUTE_CATEGORY IS NULL)))
		AND	(	(RECINFO.ATTRIBUTE1 = X_ATTRIBUTE1)
			OR	(	(RECINFO.ATTRIBUTE1 IS NULL)
				AND	(X_ATTRIBUTE1 IS NULL)))
		AND	(	(RECINFO.ATTRIBUTE2 = X_ATTRIBUTE2)
			OR	(	(RECINFO.ATTRIBUTE2 IS NULL)
				AND	(X_ATTRIBUTE2 IS NULL)))
		AND	(	(RECINFO.ATTRIBUTE3 = X_ATTRIBUTE3)
			OR	(	(RECINFO.ATTRIBUTE3 IS NULL)
				AND	(X_ATTRIBUTE3 IS NULL)))
		AND	(	(RECINFO.ATTRIBUTE4 = X_ATTRIBUTE4)
			OR	(	(RECINFO.ATTRIBUTE4 IS NULL)
				AND	(X_ATTRIBUTE4 IS NULL)))
		AND	(	(RECINFO.ATTRIBUTE5 = X_ATTRIBUTE5)
			OR	(	(RECINFO.ATTRIBUTE5 IS NULL)
				AND	(X_ATTRIBUTE5 IS NULL)))
		AND	(	(RECINFO.ATTRIBUTE6 = X_ATTRIBUTE6)
			OR	(	(RECINFO.ATTRIBUTE6 IS NULL)
				AND	(X_ATTRIBUTE6 IS NULL)))
		AND	(	(RECINFO.ATTRIBUTE7 = X_ATTRIBUTE7)
			OR	(	(RECINFO.ATTRIBUTE7 IS NULL)
				AND	(X_ATTRIBUTE7 IS NULL)))
		AND	(	(RECINFO.ATTRIBUTE8 = X_ATTRIBUTE8)
			OR	(	(RECINFO.ATTRIBUTE8 IS NULL)
				AND	(X_ATTRIBUTE8 IS NULL)))
		AND	(	(RECINFO.ATTRIBUTE9 = X_ATTRIBUTE9)
			OR	(	(RECINFO.ATTRIBUTE9 IS NULL)
				AND	(X_ATTRIBUTE9 IS NULL)))
		AND	(	(RECINFO.ATTRIBUTE10 = X_ATTRIBUTE10)
			OR	(	(RECINFO.ATTRIBUTE10 IS NULL)
				AND	(X_ATTRIBUTE10 IS NULL)))
		AND	(	(RECINFO.ATTRIBUTE11 = X_ATTRIBUTE11)
			OR	(	(RECINFO.ATTRIBUTE11 IS NULL)
				AND	(X_ATTRIBUTE11 IS NULL)))
		AND	(	(RECINFO.ATTRIBUTE12 = X_ATTRIBUTE12)
			OR	(	(RECINFO.ATTRIBUTE12 IS NULL)
				AND	(X_ATTRIBUTE12 IS NULL)))
		AND	(	(RECINFO.ATTRIBUTE13 = X_ATTRIBUTE13)
			OR	(	(RECINFO.ATTRIBUTE13 IS NULL)
				AND	(X_ATTRIBUTE13 IS NULL)))
		AND	(	(RECINFO.ATTRIBUTE14 = X_ATTRIBUTE14)
			OR	(	(RECINFO.ATTRIBUTE14 IS NULL)
				AND	(X_ATTRIBUTE14 IS NULL)))
		AND	(	(RECINFO.ATTRIBUTE15 = X_ATTRIBUTE15)
			OR	(	(RECINFO.ATTRIBUTE15 IS NULL)
				AND	(X_ATTRIBUTE15 IS NULL)))

		) THEN
		RETURN;
	ELSE
		FND_MESSAGE.SET_NAME('FND', 'FORM_RECORD_CHANGED');
		APP_EXCEPTION.RAISE_EXCEPTION;
	END IF;
END LOCK_ROW;

END XTR_RM_MD_CURVES_PKG;


/
