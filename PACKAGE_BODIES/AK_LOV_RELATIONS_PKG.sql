--------------------------------------------------------
--  DDL for Package Body AK_LOV_RELATIONS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."AK_LOV_RELATIONS_PKG" as
/* $Header: AKDRLOVB.pls 120.2 2005/09/29 14:00:03 tshort ship $ */

--  This package is created for inserting, locking and deleting
--  rows in the LOV-Target Relationship form.
--  Used for the table AK_REGION_LOV_RELATIONS.

procedure INSERT_ROW (
X_ROWID in out NOCOPY VARCHAR2,
X_REGION_APPLICATION_ID in NUMBER,
X_REGION_CODE in VARCHAR2,
X_ATTRIBUTE_APPLICATION_ID in NUMBER,
X_ATTRIBUTE_CODE in VARCHAR2,
X_LOV_REGION_APPL_ID in NUMBER,
X_LOV_REGION_CODE in VARCHAR2,
X_LOV_ATTRIBUTE_APPL_ID in NUMBER,
X_LOV_ATTRIBUTE_CODE in VARCHAR2,
X_BASE_REGION_APPL_ID in NUMBER,
X_BASE_REGION_CODE in VARCHAR2,
X_BASE_ATTRIBUTE_APPL_ID in NUMBER,
X_BASE_ATTRIBUTE_CODE in VARCHAR2,
X_DIRECTION_FLAG in VARCHAR2,
X_REQUIRED_FLAG in VARCHAR2,
X_LAST_UPDATE_DATE in DATE,
X_LAST_UPDATED_BY in NUMBER,
X_CREATION_DATE in DATE,
X_CREATED_BY in NUMBER,
X_LAST_UPDATE_LOGIN in NUMBER
) is

l_base_region_appl_id number;
l_base_region_code varchar2(30);

cursor C is select ROWID from AK_REGION_LOV_RELATIONS
where REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
and REGION_CODE = X_REGION_CODE
and ATTRIBUTE_APPLICATION_ID = X_ATTRIBUTE_APPLICATION_ID
and ATTRIBUTE_CODE = X_ATTRIBUTE_CODE
and LOV_REGION_APPL_ID = X_LOV_REGION_APPL_ID
and LOV_REGION_CODE = X_LOV_REGION_CODE
and BASE_REGION_APPL_ID = l_BASE_REGION_APPL_ID
and BASE_REGION_CODE = l_BASE_REGION_CODE
and BASE_ATTRIBUTE_APPL_ID = X_BASE_ATTRIBUTE_APPL_ID
and BASE_ATTRIBUTE_CODE = X_BASE_ATTRIBUTE_CODE
and DIRECTION_FLAG = X_DIRECTION_FLAG;

begin
if X_BASE_REGION_APPL_ID is null then
l_BASE_REGION_APPL_ID := X_REGION_APPLICATION_ID;
else
l_BASE_REGION_APPL_ID := X_BASE_REGION_APPL_ID;
end if;
if X_BASE_REGION_CODE is null then
l_BASE_REGION_CODE := X_REGION_CODE;
else
l_BASE_REGION_CODE := X_BASE_REGION_CODE;
end if;
insert into AK_REGION_LOV_RELATIONS (
REGION_APPLICATION_ID,
REGION_CODE,
ATTRIBUTE_APPLICATION_ID,
ATTRIBUTE_CODE,
LOV_REGION_APPL_ID,
LOV_REGION_CODE,
LOV_ATTRIBUTE_APPL_ID,
LOV_ATTRIBUTE_CODE,
BASE_REGION_APPL_ID,
BASE_REGION_CODE,
BASE_ATTRIBUTE_APPL_ID,
BASE_ATTRIBUTE_CODE,
DIRECTION_FLAG,
REQUIRED_FLAG,
LAST_UPDATE_DATE,
LAST_UPDATED_BY,
CREATION_DATE,
CREATED_BY,
LAST_UPDATE_LOGIN
)
values (
X_REGION_APPLICATION_ID,
X_REGION_CODE,
X_ATTRIBUTE_APPLICATION_ID,
X_ATTRIBUTE_CODE,
X_LOV_REGION_APPL_ID,
X_LOV_REGION_CODE ,
X_LOV_ATTRIBUTE_APPL_ID,
X_LOV_ATTRIBUTE_CODE,
l_BASE_REGION_APPL_ID,
l_BASE_REGION_CODE,
X_BASE_ATTRIBUTE_APPL_ID,
X_BASE_ATTRIBUTE_CODE,
X_DIRECTION_FLAG,
X_REQUIRED_FLAG,
X_LAST_UPDATE_DATE,
X_LAST_UPDATED_BY,
X_CREATION_DATE,
X_CREATED_BY,
X_LAST_UPDATE_LOGIN
);
open c;
fetch c into X_ROWID;
if (c%notfound) then
close c;
raise no_data_found;
end if;
close c;
end INSERT_ROW;

procedure DELETE_ROW (
X_REGION_APPLICATION_ID in NUMBER,
X_REGION_CODE in VARCHAR2,
X_ATTRIBUTE_APPLICATION_ID in NUMBER,
X_ATTRIBUTE_CODE in VARCHAR2,
X_LOV_REGION_APPL_ID in NUMBER,
X_LOV_REGION_CODE in VARCHAR2,
X_LOV_ATTRIBUTE_APPL_ID in NUMBER,
X_LOV_ATTRIBUTE_CODE in VARCHAR2,
X_BASE_REGION_APPL_ID in NUMBER,
X_BASE_REGION_CODE in VARCHAR2,
X_BASE_ATTRIBUTE_APPL_ID in NUMBER,
X_BASE_ATTRIBUTE_CODE in VARCHAR2,
X_DIRECTION_FLAG in VARCHAR2
) is
begin
delete from AK_REGION_LOV_RELATIONS
where REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
and REGION_CODE = X_REGION_CODE
and ATTRIBUTE_APPLICATION_ID = X_ATTRIBUTE_APPLICATION_ID
and ATTRIBUTE_CODE = X_ATTRIBUTE_CODE
and LOV_REGION_APPL_ID = X_LOV_REGION_APPL_ID
and LOV_REGION_CODE = X_LOV_REGION_CODE
and LOV_ATTRIBUTE_APPL_ID = X_LOV_ATTRIBUTE_APPL_ID
and LOV_ATTRIBUTE_CODE = X_LOV_ATTRIBUTE_CODE
and BASE_REGION_APPL_ID = nvl(X_BASE_REGION_APPL_ID,BASE_REGION_APPL_ID)
and BASE_REGION_CODE = nvl(X_BASE_REGION_CODE,BASE_REGION_CODE)
and BASE_ATTRIBUTE_APPL_ID = X_BASE_ATTRIBUTE_APPL_ID
and BASE_ATTRIBUTE_CODE = X_BASE_ATTRIBUTE_CODE
and DIRECTION_FLAG = X_DIRECTION_FLAG ;
if (sql%notfound) then
raise no_data_found;
end if;
end DELETE_ROW;

procedure LOCK_ROW (
X_REGION_APPLICATION_ID in NUMBER,
X_REGION_CODE in VARCHAR2,
X_ATTRIBUTE_APPLICATION_ID in NUMBER,
X_ATTRIBUTE_CODE in VARCHAR2,
X_LOV_REGION_APPL_ID in NUMBER,
X_LOV_REGION_CODE in VARCHAR2,
X_LOV_ATTRIBUTE_APPL_ID in NUMBER,
X_LOV_ATTRIBUTE_CODE in VARCHAR2,
X_BASE_REGION_APPL_ID in NUMBER,
X_BASE_REGION_CODE in VARCHAR2,
X_BASE_ATTRIBUTE_APPL_ID in NUMBER,
X_BASE_ATTRIBUTE_CODE in VARCHAR2,
X_DIRECTION_FLAG in VARCHAR2,
X_REQUIRED_FLAG in VARCHAR2
) is
cursor c is select
REQUIRED_FLAG
from AK_REGION_LOV_RELATIONS
where REGION_APPLICATION_ID = X_REGION_APPLICATION_ID
and REGION_CODE = X_REGION_CODE
and ATTRIBUTE_APPLICATION_ID = X_ATTRIBUTE_APPLICATION_ID
and ATTRIBUTE_CODE = X_ATTRIBUTE_CODE
and LOV_REGION_APPL_ID = X_LOV_REGION_APPL_ID
and LOV_REGION_CODE = X_LOV_REGION_CODE
and LOV_ATTRIBUTE_APPL_ID = X_LOV_ATTRIBUTE_APPL_ID
and LOV_ATTRIBUTE_CODE = X_LOV_ATTRIBUTE_CODE
and BASE_REGION_APPL_ID = X_BASE_REGION_APPL_ID
and BASE_REGION_CODE = X_BASE_REGION_CODE
and BASE_ATTRIBUTE_APPL_ID = X_BASE_ATTRIBUTE_APPL_ID
and BASE_ATTRIBUTE_CODE = X_BASE_ATTRIBUTE_CODE
and DIRECTION_FLAG = X_DIRECTION_FLAG
for update of region_application_id nowait;
recinfo c%rowtype;
begin
open c;
fetch c into recinfo;
if (c%notfound) then
close c;
fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
app_exception.raise_exception;
end if;
close c;

if ( ((recinfo.REQUIRED_FLAG = X_REQUIRED_FLAG)
OR ((recinfo.REQUIRED_FLAG is null)
AND (X_REQUIRED_FLAG is null)))
) then
null;
else
fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
app_exception.raise_exception;
end if;

return;
end LOCK_ROW;

procedure UPDATE_ROW (
X_REGION_APPLICATION_ID in NUMBER,
X_REGION_CODE in VARCHAR2,
X_ATTRIBUTE_APPLICATION_ID in NUMBER,
X_ATTRIBUTE_CODE in VARCHAR2,
X_LOV_REGION_APPL_ID in NUMBER,
X_LOV_REGION_CODE in VARCHAR2,
X_LOV_ATTRIBUTE_APPL_ID in NUMBER,
X_LOV_ATTRIBUTE_CODE in VARCHAR2,
X_BASE_REGION_APPL_ID in NUMBER,
X_BASE_REGION_CODE in VARCHAR2,
X_BASE_ATTRIBUTE_APPL_ID in NUMBER,
X_BASE_ATTRIBUTE_CODE in VARCHAR2,
X_DIRECTION_FLAG in VARCHAR2,
X_REQUIRED_FLAG in VARCHAR2,
X_LAST_UPDATE_DATE in DATE,
X_LAST_UPDATED_BY in NUMBER,
X_LAST_UPDATE_LOGIN in NUMBER
) is
l_base_region_appl_id number;
l_base_region_code varchar2(30);
begin
if X_BASE_REGION_APPL_ID is null then
l_BASE_REGION_APPL_ID := X_REGION_APPLICATION_ID;
else
l_BASE_REGION_APPL_ID := X_BASE_REGION_APPL_ID;
end if;
if X_BASE_REGION_CODE is null then
l_BASE_REGION_CODE := X_REGION_CODE;
else
l_BASE_REGION_CODE := X_BASE_REGION_CODE;
end if;
update ak_region_lov_relations set
required_flag = X_REQUIRED_FLAG
where region_application_id = X_REGION_APPLICATION_ID
and region_code = X_REGION_CODE
and attribute_application_id = X_ATTRIBUTE_APPLICATION_ID
and attribute_code = X_ATTRIBUTE_CODE
and lov_region_appl_id = X_LOV_REGION_APPL_ID
and lov_region_code = X_LOV_REGION_CODE
and lov_attribute_appl_id = X_LOV_ATTRIBUTE_APPL_ID
and lov_attribute_code = X_LOV_ATTRIBUTE_CODE
and base_region_appl_id = l_BASE_REGION_APPL_ID
and base_region_code = l_BASE_REGION_CODE
and base_attribute_appl_id = X_BASE_ATTRIBUTE_APPL_ID
and base_attribute_code = X_BASE_ATTRIBUTE_CODE
and direction_flag = X_DIRECTION_FLAG;
if (sql%notfound) then
raise no_data_found;
end if;
end UPDATE_ROW;

end AK_LOV_RELATIONS_PKG;

/
