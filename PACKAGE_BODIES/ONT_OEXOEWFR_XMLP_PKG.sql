--------------------------------------------------------
--  DDL for Package Body ONT_OEXOEWFR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."ONT_OEXOEWFR_XMLP_PKG" AS
/* $Header: OEXOEWFRB.pls 120.1 2007/12/25 07:28:39 npannamp noship $ */
  FUNCTION CF_EXTENDED_VALUEFORMULA(HEADER_ID1 IN NUMBER
                                   ,LINE_ID IN NUMBER
                                   ,LINE_VALUE IN NUMBER
                                   ,LINE_CATEGORY_CODE IN VARCHAR2) RETURN NUMBER IS
    EXTENDED_VALUE NUMBER;
    T_RETURN_STATUS VARCHAR2(1) := '';
    T_MSG_COUNT NUMBER := 0;
    T_MSG_DATA VARCHAR2(4000) := '';
    T_CHARGE_AMOUNT NUMBER := 0;
  BEGIN
    OE_CHARGE_PVT.GET_CHARGE_AMOUNT(P_API_VERSION_NUMBER => 1
                                   ,P_INIT_MSG_LIST => 'F'
                                   ,P_HEADER_ID => HEADER_ID1
                                   ,P_LINE_ID => LINE_ID
                                   ,P_ALL_CHARGES => 'F'
                                   ,X_RETURN_STATUS => T_RETURN_STATUS
                                   ,X_MSG_COUNT => T_MSG_COUNT
                                   ,X_MSG_DATA => T_MSG_DATA
                                   ,X_CHARGE_AMOUNT => T_CHARGE_AMOUNT);
    EXTENDED_VALUE := LINE_VALUE;
    IF LINE_CATEGORY_CODE = 'RETURN' THEN
      EXTENDED_VALUE := EXTENDED_VALUE * -1;
    END IF;
    EXTENDED_VALUE := EXTENDED_VALUE + T_CHARGE_AMOUNT;
    /*SRW.MESSAGE(1
               ,'extended_value' || EXTENDED_VALUE)*/NULL;
    RETURN (EXTENDED_VALUE);
  EXCEPTION
    WHEN OTHERS THEN
      /*SRW.MESSAGE(9999
                 ,'Error in getting charges: ' || SQLERRM)*/NULL;
      RETURN (NULL);
  END CF_EXTENDED_VALUEFORMULA;

  FUNCTION CF_HOLD_VALUEFORMULA(HEADER_ID1 IN NUMBER
                               ,LINE_ID IN NUMBER) RETURN CHAR IS
    L_HEADER_HOLD NUMBER;
    L_LINE_HOLD NUMBER;
    DUMMY NUMBER;
    CURSOR HEADER_HOLD IS
      SELECT
        1
      FROM
        OE_ORDER_HOLDS_ALL OH
      WHERE OH.HEADER_ID = HEADER_ID1
        AND OH.LINE_ID IS NULL
        AND OH.HOLD_RELEASE_ID IS NULL
        AND ROWNUM = 1;
    CURSOR LINE_HOLD IS
      SELECT
        1
      FROM
        OE_ORDER_HOLDS_ALL OH
      WHERE OH.LINE_ID = CF_HOLD_VALUEFORMULA.LINE_ID
        AND OH.HOLD_RELEASE_ID IS NULL
        AND ROWNUM = 1;
  BEGIN
    OPEN HEADER_HOLD;
    FETCH HEADER_HOLD
     INTO L_HEADER_HOLD;
    CLOSE HEADER_HOLD;
    IF NVL(L_HEADER_HOLD
       ,0) <> 0 THEN
      RETURN 'YES';
    ELSE
      OPEN LINE_HOLD;
      FETCH LINE_HOLD
       INTO L_LINE_HOLD;
      CLOSE LINE_HOLD;
      IF NVL(L_LINE_HOLD
         ,0) <> 0 THEN
        RETURN 'YES';
      ELSE
        RETURN 'NO';
      END IF;
    END IF;
    RETURN (NULL);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_HOLD_VALUEFORMULA;

  FUNCTION CF_COUNTRYFORMULA RETURN CHAR IS
  BEGIN
    RETURN ('U.S.');
    RETURN (NULL);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_COUNTRYFORMULA;

  FUNCTION CF_CURRENCYFORMULA RETURN CHAR IS
  BEGIN
    RETURN ('USD');
    RETURN (NULL);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_CURRENCYFORMULA;

  FUNCTION P_OVERDUE_DAYSVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    IF P_OVERDUE_DAYS IS NULL THEN
      RETURN (FALSE);
    ELSE
      RETURN (TRUE);
    END IF;
  END P_OVERDUE_DAYSVALIDTRIGGER;

  FUNCTION P_NO_DATAVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END P_NO_DATAVALIDTRIGGER;

  FUNCTION P_ACTIONSVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END P_ACTIONSVALIDTRIGGER;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    PARAM_WHERE_CLAUSE := ' ';
    IF (P_ORDER_TYPE IS NOT NULL AND P_ORDER_TYPE <> 'ALL') THEN
      PARAM_WHERE_CLAUSE := PARAM_WHERE_CLAUSE || ' and tt.name = :P_ORDER_TYPE';
    END IF;
    IF (P_ORDER_NO_LOW IS NOT NULL) THEN
      PARAM_WHERE_CLAUSE := PARAM_WHERE_CLAUSE || ' and soh.order_number >= :P_ORDER_NO_LOW';
    END IF;
    IF (P_ORDER_NO_HIGH IS NOT NULL) THEN
      PARAM_WHERE_CLAUSE := PARAM_WHERE_CLAUSE || ' and soh.order_number <= :P_ORDER_NO_HIGH';
    END IF;
    IF (P_LINE_CATEGORY IS NOT NULL AND P_LINE_CATEGORY <> 'ALL') THEN
      PARAM_WHERE_CLAUSE := PARAM_WHERE_CLAUSE || ' and sol.line_category_code = :P_LINE_CATEGORY';
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION AFTERPFORM0009 RETURN BOOLEAN IS
    L_AFTER BOOLEAN;
    TEMP_VAR VARCHAR2(200);
  BEGIN
    RETURN (AFTERPFORM);
  END AFTERPFORM0009;

  FUNCTION CF_ITEM_Y_NFORMULA(CONCATENATED_SEGMENTS IN VARCHAR2
                             ,DESCRIPTION IN VARCHAR2) RETURN CHAR IS
  BEGIN
    IF (P_ITEM = 'ITEM_NO') THEN
      RETURN (CONCATENATED_SEGMENTS);
    ELSE
      RETURN (DESCRIPTION);
    END IF;
    RETURN (NULL);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_ITEM_Y_NFORMULA;

  FUNCTION CF_BOOKED_DISPLAYFORMULA(BOOKED_FLAG IN VARCHAR2) RETURN CHAR IS
  BEGIN
    IF (P_ACTIONS = 'SCHED_NOT_PK') THEN
      RETURN (BOOKED_FLAG);
    ELSE
      RETURN (' ');
    END IF;
    RETURN (NULL);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_BOOKED_DISPLAYFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
   apf boolean;
  BEGIN
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      apf := afterpform0009;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        BEGIN
          /*SRW.MESSAGE(1
                     ,'FAILED IN BEFORE REPORT TRIGGER')*/NULL;
          /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
          RETURN (FALSE);
        END;
    END;
    BEGIN
      /*SRW.MESSAGE(2
                 ,'Before Report')*/NULL;
      P_ORG_ID := MO_GLOBAL.GET_CURRENT_ORG_ID;
      /*SRW.MESSAGE(2
                 ,'Before Report-->:P_ORG_ID:' || P_ORG_ID)*/NULL;
    END;
    DECLARE
      L_SOB_NAME VARCHAR2(240);
    BEGIN
      SELECT
        SOB.NAME
      INTO L_SOB_NAME
      FROM
        GL_SETS_OF_BOOKS SOB
      WHERE SOB.SET_OF_BOOKS_ID = P_SOB_ID;
      RP_COMPANY_NAME := L_SOB_NAME;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RP_COMPANY_NAME := NULL;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;

  FUNCTION PARAM_WHERE_CLAUSEVALIDTRIGGER RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END PARAM_WHERE_CLAUSEVALIDTRIGGER;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  EXCEPTION
    WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
      /*SRW.MESSAGE(1
                 ,'FAILED IN AFTER REPORT TRIGGER')*/NULL;
      RETURN (FALSE);
  END AFTERREPORT;

  FUNCTION BETWEENPAGE RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BETWEENPAGE;

  FUNCTION CF_LINE_NUMBERFORMULA(LINE_NUMBER IN NUMBER
                                ,SHIPMENT_NUMBER IN NUMBER
                                ,OPTION_NUMBER IN NUMBER
                                ,COMPONENT_NUMBER IN NUMBER
                                ,SERVICE_NUMBER IN NUMBER) RETURN CHAR IS
    P_LINE_NUMBER NUMBER;
    P_SHIPMENT_NUMBER NUMBER;
    P_OPTION_NUMBER NUMBER;
    P_COMPONENT_NUMBER NUMBER;
    P_SERVICE_NUMBER NUMBER;
    P_CONCAT_VALUE VARCHAR2(500);
    P_CONCAT_VALUE2 VARCHAR2(500);
    P_CONCAT_VALUE_NUM NUMBER;
  BEGIN
    P_LINE_NUMBER := LINE_NUMBER;
    P_SHIPMENT_NUMBER := SHIPMENT_NUMBER;
    P_OPTION_NUMBER := OPTION_NUMBER;
    P_COMPONENT_NUMBER := COMPONENT_NUMBER;
    P_SERVICE_NUMBER := SERVICE_NUMBER;
    LINE_SHIPMENT_OPTION(P_LINE_NUMBER
                        ,P_SHIPMENT_NUMBER
                        ,P_OPTION_NUMBER
                        ,P_CONCAT_VALUE
                        ,P_COMPONENT_NUMBER
                        ,P_SERVICE_NUMBER);
    SELECT
      REPLACE(P_CONCAT_VALUE
             ,'.-1'
             ,'')
    INTO P_CONCAT_VALUE
    FROM
      DUAL;
    RETURN (P_CONCAT_VALUE);
    RETURN (NULL);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_LINE_NUMBERFORMULA;

  FUNCTION CF_ORDERED_DATEFORMULA(LINE_ID IN NUMBER
                                 ,HEADER_ID1 IN NUMBER
                                 ,ORDERED_DATE IN DATE) RETURN DATE IS
    X_RESULT_DATE DATE;
    L_LINE_DATE DATE;
    L_HEADER_DATE DATE;
    CURSOR GET_LINE_DATE IS
      SELECT
        WIAS.END_DATE
      FROM
        WF_ITEM_ACTIVITY_STATUSES WIAS,
        WF_PROCESS_ACTIVITIES WPA
      WHERE WIAS.ITEM_TYPE = 'OEOL'
        AND WIAS.ITEM_KEY = TO_CHAR(LINE_ID)
        AND WIAS.PROCESS_ACTIVITY = WPA.INSTANCE_ID
        AND WPA.ACTIVITY_NAME = 'INVOICE_INTERFACE';
    CURSOR GET_HEADER_DATE IS
      SELECT
        WIAS.END_DATE
      FROM
        WF_ITEM_ACTIVITY_STATUSES WIAS,
        WF_PROCESS_ACTIVITIES WPA
      WHERE WIAS.ITEM_TYPE = 'OEOH'
        AND WIAS.ITEM_KEY = TO_CHAR(HEADER_ID1)
        AND WIAS.PROCESS_ACTIVITY = WPA.INSTANCE_ID
        AND WPA.ACTIVITY_NAME = 'HEADER_INVOICE_INTERFACE';
  BEGIN
    IF (P_ACTIONS <> 'INVOICE_INT_NOT_CLOSED') THEN
      RETURN (ORDERED_DATE);
    ELSE
      OPEN GET_LINE_DATE;
      FETCH GET_LINE_DATE
       INTO L_LINE_DATE;
      IF GET_LINE_DATE%FOUND THEN
        RETURN (L_LINE_DATE);
      ELSE
        OPEN GET_HEADER_DATE;
        FETCH GET_HEADER_DATE
         INTO L_HEADER_DATE;
        IF GET_HEADER_DATE%FOUND THEN
          RETURN (L_HEADER_DATE);
        ELSE
          RETURN (NULL);
        END IF;
      END IF;
    END IF;
    RETURN (NULL);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_ORDERED_DATEFORMULA;

  FUNCTION G_LINE_IDGROUPFILTER(CF_ORDERED_DATE IN DATE) RETURN BOOLEAN IS
  BEGIN
    IF CF_ORDERED_DATE IS NULL THEN
      RETURN (FALSE);
    ELSE
      RETURN (TRUE);
    END IF;
  END G_LINE_IDGROUPFILTER;

  FUNCTION CF_MASTER_ORGFORMULA RETURN CHAR IS
    V_MASTER_ORG VARCHAR2(20);
  BEGIN
    SELECT
      NVL(OE_SYS_PARAMETERS.VALUE('MASTER_ORGANIZATION_ID')
         ,0)
    INTO V_MASTER_ORG
    FROM
      DUAL;
    RETURN V_MASTER_ORG;
  END CF_MASTER_ORGFORMULA;

  FUNCTION CF_TYPEFORMULA(TYPE IN NUMBER) RETURN NUMBER IS
  BEGIN
    CP_TYPE := TYPE;
    RETURN (0);
  END CF_TYPEFORMULA;

  FUNCTION CF_TITLEFORMULA RETURN CHAR IS
  BEGIN
    IF CP_TYPE = 1 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_ENTER_BOOK');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 2 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_BOOK_SCH');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 3 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_SCH_PICK');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 4 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_PICK_SHIP');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 5 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_PUR_RCV');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 6 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_SHIP_AWT');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 7 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_SHIP_IVC');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 8 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_RCV_IVC');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 9 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_DROP_RCV');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 10 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_FUL_IVC');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 11 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_ITR_IVC');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 12 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_SHIP_CLS');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 13 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_IVC_CLS');
      RETURN (FND_MESSAGE.GET);
    END IF;
    RETURN (NULL);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_TITLEFORMULA;

  FUNCTION CF_BOOKED_HEADINGFORMULA RETURN NUMBER IS
  BEGIN
    IF (P_ACTIONS = 'SCHED_NOT_PK') THEN
      RETURN ('Booked');
    ELSE
      RETURN (' ');
    END IF;
    RETURN (' ');
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_BOOKED_HEADINGFORMULA;

  FUNCTION CF_ORDER_TITLEFORMULA RETURN CHAR IS
  BEGIN
    IF CP_TYPE = 1 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_ORD_DAT');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 2 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_BOK_DAT');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 3 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_SCH_DAT');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 4 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_PIK_DAT');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 5 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_EXP_DAT');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 6 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_ACT_DAT');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 7 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_ACT_DAT');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 8 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_RCV_DAT');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 9 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_RCV_DAT');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 10 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_ORD_DAT');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 11 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_ITF_DAT');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 12 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_ACT_DAT');
      RETURN (FND_MESSAGE.GET);
    ELSIF CP_TYPE = 13 THEN
      FND_MESSAGE.SET_NAME('ONT'
                          ,'ONT_SEC_ITF_DAT');
      RETURN (FND_MESSAGE.GET);
    END IF;
    RETURN (NULL);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_ORDER_TITLEFORMULA;

  FUNCTION CP_TYPE_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TYPE;
  END CP_TYPE_P;

  FUNCTION RP_COMPANY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_COMPANY_NAME;
  END RP_COMPANY_NAME_P;

  PROCEDURE LINE_SHIPMENT_OPTION(P_LINE_NUMBER IN NUMBER
                                ,P_SHIPMENT_NUMBER IN NUMBER
                                ,P_OPTION_NUMBER IN NUMBER
                                ,P_CONCAT_VALUE OUT NOCOPY VARCHAR2
                                ,P_COMPONENT_NUMBER IN NUMBER := NULL
                                ,P_SERVICE_NUMBER IN NUMBER := NULL) IS
    LINE_NUMBER NUMBER;
    SHIPMENT_NUMBER NUMBER;
    SERVICE_NUMBER NUMBER;
    OPTION_NUMBER NUMBER;
    COMPONENT_NUMBER NUMBER;
  BEGIN
    LINE_NUMBER := P_LINE_NUMBER;
    SHIPMENT_NUMBER := P_SHIPMENT_NUMBER;
    OPTION_NUMBER := P_OPTION_NUMBER;
    COMPONENT_NUMBER := P_COMPONENT_NUMBER;
    SERVICE_NUMBER := P_SERVICE_NUMBER;
    IF SERVICE_NUMBER <> -1 THEN
      IF OPTION_NUMBER <> -1 THEN
        IF COMPONENT_NUMBER <> -1 THEN
          P_CONCAT_VALUE := LINE_NUMBER || '.' || SHIPMENT_NUMBER || '.' || OPTION_NUMBER || '.' || COMPONENT_NUMBER || '.' || SERVICE_NUMBER;
        ELSE
          P_CONCAT_VALUE := LINE_NUMBER || '.' || SHIPMENT_NUMBER || '.' || OPTION_NUMBER || '..' || SERVICE_NUMBER;
        END IF;
      ELSE
        IF COMPONENT_NUMBER <> -1 THEN
          P_CONCAT_VALUE := LINE_NUMBER || '.' || SHIPMENT_NUMBER || '..' || COMPONENT_NUMBER || '.' || SERVICE_NUMBER;
        ELSE
          P_CONCAT_VALUE := LINE_NUMBER || '.' || SHIPMENT_NUMBER || '...' || SERVICE_NUMBER;
        END IF;
      END IF;
    ELSE
      IF OPTION_NUMBER <> -1 THEN
        IF COMPONENT_NUMBER <> -1 THEN
          P_CONCAT_VALUE := LINE_NUMBER || '.' || SHIPMENT_NUMBER || '.' || OPTION_NUMBER || '.' || COMPONENT_NUMBER;
        ELSE
          P_CONCAT_VALUE := LINE_NUMBER || '.' || SHIPMENT_NUMBER || '.' || OPTION_NUMBER;
        END IF;
      ELSE
        IF COMPONENT_NUMBER <> -1 THEN
          P_CONCAT_VALUE := LINE_NUMBER || '.' || SHIPMENT_NUMBER || '..' || COMPONENT_NUMBER;
        ELSE
          P_CONCAT_VALUE := LINE_NUMBER || '.' || SHIPMENT_NUMBER;
        END IF;
      END IF;
    END IF;
  END LINE_SHIPMENT_OPTION;

END ONT_OEXOEWFR_XMLP_PKG;


/
