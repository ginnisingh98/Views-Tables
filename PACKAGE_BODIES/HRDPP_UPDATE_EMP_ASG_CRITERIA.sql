--------------------------------------------------------
--  DDL for Package Body HRDPP_UPDATE_EMP_ASG_CRITERIA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HRDPP_UPDATE_EMP_ASG_CRITERIA" as
/*
 * Generated by hr_pump_meta_mapper at: 2018/06/16 10:06:01
 * Generated for API: hr_assignment_api.update_emp_asg_criteria
 */
--
dh constant date := hr_api.g_date;
nh constant number := hr_api.g_number;
vh constant varchar2(64) := hr_api.g_varchar2;
c_sot constant date := to_date('01010001','DDMMYYYY');
cn constant varchar2(32) := '<NULL>';
dn constant date := null;
nn constant number := null;
vn constant varchar2(1) := null;
--
function dc(p in date) return varchar2 is
begin
if p<c_sot then
 if p<>trunc(p) then
  return to_char(p,'SYYYY/MM/DD HH24:MI:SS');
 end if;
 return to_char(p,'SYYYY/MM/DD');
elsif p<>trunc(p) then
 return to_char(p,'YYYY/MM/DD HH24:MI:SS');
end if;
return to_char(p,'YYYY/MM/DD');
end dc;
function d(p in varchar2) return date is
begin
if length(p)=10 then
return to_date(p,'YYYY/MM/DD');
elsif length(p)=19 then
return to_date(p,'YYYY/MM/DD HH24:MI:SS');
elsif length(p)=11 then
return to_date(p,'SYYYY/MM/DD');
elsif length(p)=20 then
return to_date(p,'SYYYY/MM/DD HH24:MI:SS');
end if;
-- Try default format as last resort.
return to_date(p,'YYYY/MM/DD');
end d;
function n(p in varchar2) return number is
begin
return to_number(p);
end n;
function dd(p in date,i in varchar2)
return varchar2 is
begin
if upper(i) = 'N' then return dc(p);
else return cn; end if;
end dd;
function nd(p in number,i in varchar2)
return varchar2 is
begin
if upper(i) = 'N' then return to_char(p);
else return cn; end if;
end nd;
--
procedure iuk
(p_batch_line_id  in number,
p_user_key_value in varchar2,
p_unique_key_id  in number)
is
begin
hr_data_pump.entry('ins_user_key');
insert into hr_pump_batch_line_user_keys
(user_key_id, batch_line_id,user_key_value,unique_key_id)
values
(hr_pump_batch_line_user_keys_s.nextval,
p_batch_line_id,
p_user_key_value,
p_unique_key_id);
hr_data_pump.exit('ins_user_key');
end iuk;
--
procedure insert_batch_lines
(p_batch_id      in number
,p_data_pump_batch_line_id in number default null
,p_data_pump_business_grp_name in varchar2 default null
,p_user_sequence in number default null
,p_link_value    in number default null
,P_EFFECTIVE_DATE in date
,P_DATETRACK_UPDATE_MODE in varchar2
,P_CALLED_FROM_MASS_UPDATE in boolean default null
,P_SEGMENT1 in varchar2 default null
,P_SEGMENT2 in varchar2 default null
,P_SEGMENT3 in varchar2 default null
,P_SEGMENT4 in varchar2 default null
,P_SEGMENT5 in varchar2 default null
,P_SEGMENT6 in varchar2 default null
,P_SEGMENT7 in varchar2 default null
,P_SEGMENT8 in varchar2 default null
,P_SEGMENT9 in varchar2 default null
,P_SEGMENT10 in varchar2 default null
,P_SEGMENT11 in varchar2 default null
,P_SEGMENT12 in varchar2 default null
,P_SEGMENT13 in varchar2 default null
,P_SEGMENT14 in varchar2 default null
,P_SEGMENT15 in varchar2 default null
,P_SEGMENT16 in varchar2 default null
,P_SEGMENT17 in varchar2 default null
,P_SEGMENT18 in varchar2 default null
,P_SEGMENT19 in varchar2 default null
,P_SEGMENT20 in varchar2 default null
,P_SEGMENT21 in varchar2 default null
,P_SEGMENT22 in varchar2 default null
,P_SEGMENT23 in varchar2 default null
,P_SEGMENT24 in varchar2 default null
,P_SEGMENT25 in varchar2 default null
,P_SEGMENT26 in varchar2 default null
,P_SEGMENT27 in varchar2 default null
,P_SEGMENT28 in varchar2 default null
,P_SEGMENT29 in varchar2 default null
,P_SEGMENT30 in varchar2 default null
,P_EMPLOYMENT_CATEGORY in varchar2 default null
,P_CONCAT_SEGMENTS in varchar2 default null
,P_SCL_SEGMENT1 in varchar2 default null
,P_SPECIAL_CEILING_STEP_ID in number
,P_PEOPLE_GROUP_ID in number
,P_ASSIGNMENT_USER_KEY in varchar2
,P_GRADE_NAME in varchar2 default null
,P_POSITION_NAME in varchar2 default null
,P_JOB_NAME in varchar2 default null
,P_PAYROLL_NAME in varchar2 default null
,P_LOCATION_CODE in varchar2 default null
,P_LANGUAGE_CODE in varchar2 default null
,P_ORGANIZATION_NAME in varchar2 default null
,P_PAY_BASIS_NAME in varchar2 default null
,P_CONTRACT_USER_KEY in varchar2 default null
,P_ESTABLISHMENT_NAME in varchar2 default null
,P_LOCATION in varchar2 default null
,P_GRADE_LADDER_NAME in varchar2 default null
,P_SVR_ASSIGNMENT_USER_KEY in varchar2 default null
,P_CON_SEG_USER_NAME in varchar2) is
blid number := p_data_pump_batch_line_id;
 L_CALLED_FROM_MASS_UPDATE varchar2(5);
begin
if P_CALLED_FROM_MASS_UPDATE is null then
 L_CALLED_FROM_MASS_UPDATE := null;
elsif P_CALLED_FROM_MASS_UPDATE then
 L_CALLED_FROM_MASS_UPDATE := 'TRUE';
else 
 L_CALLED_FROM_MASS_UPDATE := 'FALSE';
end if;
if blid is not null then
delete from hr_pump_batch_lines where batch_line_id = blid;
delete from hr_pump_batch_exceptions
where source_type = 'BATCH_LINE' and source_id = blid;
end if;
insert into hr_pump_batch_lines
(batch_id
,batch_line_id
,business_group_name
,api_module_id
,line_status
,user_sequence
,link_value
,pval001
,pval002
,pval003
,pval004
,pval005
,pval006
,pval007
,pval008
,pval009
,pval010
,pval011
,pval012
,pval013
,pval014
,pval015
,pval016
,pval017
,pval018
,pval019
,pval020
,pval021
,pval022
,pval023
,pval024
,pval025
,pval026
,pval027
,pval028
,pval029
,pval030
,pval031
,pval032
,pval033
,pval034
,pval035
,pval036
,pval037
,pval038
,pval049
,pval050
,pval051
,pval052
,pval053
,pval054
,pval055
,pval056
,pval057
,pval058
,pval059
,pval060
,pval061
,pval062
,pval063)
values
(p_batch_id
,nvl(blid,hr_pump_batch_lines_s.nextval)
,p_data_pump_business_grp_name
,1206
,'U'
,p_user_sequence
,p_link_value
,dc(P_EFFECTIVE_DATE)
,P_DATETRACK_UPDATE_MODE
,L_CALLED_FROM_MASS_UPDATE
,P_SEGMENT1
,P_SEGMENT2
,P_SEGMENT3
,P_SEGMENT4
,P_SEGMENT5
,P_SEGMENT6
,P_SEGMENT7
,P_SEGMENT8
,P_SEGMENT9
,P_SEGMENT10
,P_SEGMENT11
,P_SEGMENT12
,P_SEGMENT13
,P_SEGMENT14
,P_SEGMENT15
,P_SEGMENT16
,P_SEGMENT17
,P_SEGMENT18
,P_SEGMENT19
,P_SEGMENT20
,P_SEGMENT21
,P_SEGMENT22
,P_SEGMENT23
,P_SEGMENT24
,P_SEGMENT25
,P_SEGMENT26
,P_SEGMENT27
,P_SEGMENT28
,P_SEGMENT29
,P_SEGMENT30
,P_EMPLOYMENT_CATEGORY
,P_CONCAT_SEGMENTS
,P_SCL_SEGMENT1
,P_SPECIAL_CEILING_STEP_ID
,P_PEOPLE_GROUP_ID
,P_ASSIGNMENT_USER_KEY
,P_GRADE_NAME
,P_POSITION_NAME
,P_JOB_NAME
,P_PAYROLL_NAME
,P_LOCATION_CODE
,P_LANGUAGE_CODE
,P_ORGANIZATION_NAME
,P_PAY_BASIS_NAME
,P_CONTRACT_USER_KEY
,P_ESTABLISHMENT_NAME
,P_LOCATION
,P_GRADE_LADDER_NAME
,P_SVR_ASSIGNMENT_USER_KEY
,P_CON_SEG_USER_NAME);
end insert_batch_lines;
--
procedure call
(p_business_group_id in number,
p_batch_line_id     in number) is
cursor cr is
select l.rowid myrowid,
decode(l.pval001,cn,dn,d(l.pval001)) p1,
decode(l.pval002,cn,vn,l.pval002) p2,
decode(l.pval003,cn,vn,vn,null,l.pval003) p3,
l.pval003 d3,
decode(l.pval004,cn,vn,vn,vh,l.pval004) p4,
l.pval004 d4,
decode(l.pval005,cn,vn,vn,vh,l.pval005) p5,
l.pval005 d5,
decode(l.pval006,cn,vn,vn,vh,l.pval006) p6,
l.pval006 d6,
decode(l.pval007,cn,vn,vn,vh,l.pval007) p7,
l.pval007 d7,
decode(l.pval008,cn,vn,vn,vh,l.pval008) p8,
l.pval008 d8,
decode(l.pval009,cn,vn,vn,vh,l.pval009) p9,
l.pval009 d9,
decode(l.pval010,cn,vn,vn,vh,l.pval010) p10,
l.pval010 d10,
decode(l.pval011,cn,vn,vn,vh,l.pval011) p11,
l.pval011 d11,
decode(l.pval012,cn,vn,vn,vh,l.pval012) p12,
l.pval012 d12,
decode(l.pval013,cn,vn,vn,vh,l.pval013) p13,
l.pval013 d13,
decode(l.pval014,cn,vn,vn,vh,l.pval014) p14,
l.pval014 d14,
decode(l.pval015,cn,vn,vn,vh,l.pval015) p15,
l.pval015 d15,
decode(l.pval016,cn,vn,vn,vh,l.pval016) p16,
l.pval016 d16,
decode(l.pval017,cn,vn,vn,vh,l.pval017) p17,
l.pval017 d17,
decode(l.pval018,cn,vn,vn,vh,l.pval018) p18,
l.pval018 d18,
decode(l.pval019,cn,vn,vn,vh,l.pval019) p19,
l.pval019 d19,
decode(l.pval020,cn,vn,vn,vh,l.pval020) p20,
l.pval020 d20,
decode(l.pval021,cn,vn,vn,vh,l.pval021) p21,
l.pval021 d21,
decode(l.pval022,cn,vn,vn,vh,l.pval022) p22,
l.pval022 d22,
decode(l.pval023,cn,vn,vn,vh,l.pval023) p23,
l.pval023 d23,
decode(l.pval024,cn,vn,vn,vh,l.pval024) p24,
l.pval024 d24,
decode(l.pval025,cn,vn,vn,vh,l.pval025) p25,
l.pval025 d25,
decode(l.pval026,cn,vn,vn,vh,l.pval026) p26,
l.pval026 d26,
decode(l.pval027,cn,vn,vn,vh,l.pval027) p27,
l.pval027 d27,
decode(l.pval028,cn,vn,vn,vh,l.pval028) p28,
l.pval028 d28,
decode(l.pval029,cn,vn,vn,vh,l.pval029) p29,
l.pval029 d29,
decode(l.pval030,cn,vn,vn,vh,l.pval030) p30,
l.pval030 d30,
decode(l.pval031,cn,vn,vn,vh,l.pval031) p31,
l.pval031 d31,
decode(l.pval032,cn,vn,vn,vh,l.pval032) p32,
l.pval032 d32,
decode(l.pval033,cn,vn,vn,vh,l.pval033) p33,
l.pval033 d33,
decode(l.pval034,cn,vn,vn,vh,
 hr_pump_get.gl(l.pval034,'EMP_CAT',d(l.pval001),l.pval055)) p34,
l.pval034 d34,
decode(l.pval035,cn,vn,vn,vh,l.pval035) p35,
l.pval035 d35,
decode(l.pval036,cn,vn,vn,vh,l.pval036) p36,
l.pval036 d36,
decode(l.pval037,cn,nn,n(l.pval037)) p37,
decode(l.pval038,cn,nn,n(l.pval038)) p38,
l.pval039 p39,
decode(l.pval040,cn,dn,d(l.pval040)) p40,
decode(l.pval041,cn,dn,d(l.pval041)) p41,
l.pval042 p42,
l.pval043 p43,
l.pval044 p44,
l.pval045 p45,
l.pval046 p46,
l.pval047 p47,
l.pval048 p48,
decode(l.pval049,cn,vn,l.pval049) p49,
decode(l.pval050,cn,vn,vn,vh,l.pval050) p50,
l.pval050 d50,
decode(l.pval051,cn,vn,vn,vh,l.pval051) p51,
l.pval051 d51,
decode(l.pval052,cn,vn,vn,vh,l.pval052) p52,
l.pval052 d52,
decode(l.pval053,cn,vn,vn,vh,l.pval053) p53,
l.pval053 d53,
decode(l.pval054,cn,vn,vn,vh,l.pval054) p54,
l.pval054 d54,
decode(l.pval055,cn,vn,vn,vh,l.pval055) p55,
l.pval055 d55,
decode(l.pval056,cn,vn,vn,vh,l.pval056) p56,
l.pval056 d56,
decode(l.pval057,cn,vn,vn,vh,l.pval057) p57,
l.pval057 d57,
decode(l.pval058,cn,vn,vn,vn,l.pval058) p58,
l.pval058 d58,
decode(l.pval059,cn,vn,vn,vh,l.pval059) p59,
l.pval059 d59,
decode(l.pval060,cn,vn,vn,vh,l.pval060) p60,
l.pval060 d60,
decode(l.pval061,cn,vn,vn,vh,l.pval061) p61,
l.pval061 d61,
decode(l.pval062,cn,vn,vn,vn,l.pval062) p62,
l.pval062 d62,
decode(l.pval063,cn,vn,l.pval063) p63
from hr_pump_batch_lines l
where l.batch_line_id = p_batch_line_id;
--
c cr%rowtype;
l_validate boolean := false;
L_CALLED_FROM_MASS_UPDATE boolean;
L_ORG_NOW_NO_MANAGER_WARNING boolean;
L_OTHER_MANAGER_WARNING boolean;
L_SPP_DELETE_WARNING boolean;
L_TAX_DISTRICT_CHANGED_WARNING boolean;
L_ASSIGNMENT_ID number;
L_GRADE_ID number;
L_POSITION_ID number;
L_JOB_ID number;
L_PAYROLL_ID number;
L_LOCATION_ID number;
L_ORGANIZATION_ID number;
L_PAY_BASIS_ID number;
L_CONTRACT_ID number;
L_ESTABLISHMENT_ID number;
L_GRADE_LADDER_PGM_ID number;
L_SUPERVISOR_ASSIGNMENT_ID number;
L_OBJECT_VERSION_NUMBER number;
L_SOFT_CODING_KEYFLEX_ID number;
--
begin
hr_data_pump.entry('call');
open cr;
fetch cr into c;
if cr%notfound then
hr_utility.set_message(800,'HR_50326_DP_NO_ROW');
hr_utility.set_message_token('TABLE','HR_PUMP_BATCH_LINES');
hr_utility.set_message_token('COLUMN','P_BATCH_LINE_ID');
hr_utility.set_message_token('VALUE',p_batch_line_id);
hr_utility.raise_error;
end if;
--
if upper(c.p3) = 'TRUE' then
L_CALLED_FROM_MASS_UPDATE := true;
elsif upper(c.p3) = 'FALSE' then
L_CALLED_FROM_MASS_UPDATE := false;
elsif c.p3 is not null then
hr_utility.set_message(800,'HR_50327_DP_TYPE_ERR');
hr_utility.set_message_token('TYPE','BOOLEAN');
hr_utility.set_message_token('PARAMETER','P_CALLED_FROM_MASS_UPDATE');
hr_utility.set_message_token('VALUE',c.p3);
hr_utility.set_message_token('TABLE','HR_PUMP_BATCH_LINES');
hr_utility.raise_error;
end if;
--
if c.p49 is null then
L_ASSIGNMENT_ID:=nn;
else
L_ASSIGNMENT_ID := 
hr_pump_get.get_assignment_id
(P_ASSIGNMENT_USER_KEY => c.p49);
end if;
--
if c.d50=cn or
c.p1 is null then
L_GRADE_ID:=nn;
elsif c.d50 is null then 
L_GRADE_ID:=nh;
else
L_GRADE_ID := 
hr_pump_get.get_grade_id
(P_GRADE_NAME => c.p50
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p1);
end if;
--
if c.d51=cn or
c.p1 is null then
L_POSITION_ID:=nn;
elsif c.d51 is null then 
L_POSITION_ID:=nh;
else
L_POSITION_ID := 
hr_pump_get.get_position_id
(P_POSITION_NAME => c.p51
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p1);
end if;
--
if c.d52=cn or
c.p1 is null then
L_JOB_ID:=nn;
elsif c.d52 is null then 
L_JOB_ID:=nh;
else
L_JOB_ID := 
hr_pump_get.get_job_id
(P_JOB_NAME => c.p52
,P_EFFECTIVE_DATE => c.p1
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID);
end if;
--
if c.d53=cn or
c.p1 is null then
L_PAYROLL_ID:=nn;
elsif c.d53 is null then 
L_PAYROLL_ID:=nh;
else
L_PAYROLL_ID := 
hr_pump_get.get_payroll_id
(P_PAYROLL_NAME => c.p53
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p1);
end if;
--
if c.d54=cn or
c.d55=cn then
L_LOCATION_ID:=nn;
elsif c.d54 is null or
c.d55 is null then 
L_LOCATION_ID:=nh;
else
L_LOCATION_ID := 
hr_pump_get.get_location_id
(P_LOCATION_CODE => c.p54
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_LANGUAGE_CODE => c.p55);
end if;
--
if c.d56=cn or
c.p1 is null or
c.d55=cn then
L_ORGANIZATION_ID:=nn;
elsif c.d56 is null or
c.d55 is null then 
L_ORGANIZATION_ID:=nh;
else
L_ORGANIZATION_ID := 
hr_pump_get.get_organization_id
(P_ORGANIZATION_NAME => c.p56
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p1
,P_LANGUAGE_CODE => c.p55);
end if;
--
if c.d57=cn then
L_PAY_BASIS_ID:=nn;
elsif c.d57 is null then 
L_PAY_BASIS_ID:=nh;
else
L_PAY_BASIS_ID := 
hr_pump_get.get_pay_basis_id
(P_PAY_BASIS_NAME => c.p57
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID);
end if;
--
if c.d58=cn then
L_CONTRACT_ID:=nn;
elsif c.d58 is null then 
L_CONTRACT_ID:=nh;
else
L_CONTRACT_ID := 
hr_pump_get.get_contract_id
(P_CONTRACT_USER_KEY => c.p58);
end if;
--
if c.d59=cn or
c.d60=cn then
L_ESTABLISHMENT_ID:=nn;
elsif c.d59 is null or
c.d60 is null then 
L_ESTABLISHMENT_ID:=nh;
else
L_ESTABLISHMENT_ID := 
hr_pump_get.get_establishment_id
(P_ESTABLISHMENT_NAME => c.p59
,P_LOCATION => c.p60);
end if;
--
if c.d61=cn or
c.p1 is null then
L_GRADE_LADDER_PGM_ID:=nn;
elsif c.d61 is null then 
L_GRADE_LADDER_PGM_ID:=nh;
else
L_GRADE_LADDER_PGM_ID := 
hr_pump_get.GET_GRADE_LADDER_PGM_ID
(P_GRADE_LADDER_NAME => c.p61
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p1);
end if;
--
if c.d62=cn then
L_SUPERVISOR_ASSIGNMENT_ID:=nn;
elsif c.d62 is null then 
L_SUPERVISOR_ASSIGNMENT_ID:=nh;
else
L_SUPERVISOR_ASSIGNMENT_ID := 
hr_pump_get.GET_SUPERVISOR_ASSIGNMENT_ID
(P_SVR_ASSIGNMENT_USER_KEY => c.p62);
end if;
--
if c.p49 is null or
c.p1 is null then
L_OBJECT_VERSION_NUMBER:=nn;
else
L_OBJECT_VERSION_NUMBER := 
hr_pump_get.GET_ASG_OVN
(P_ASSIGNMENT_USER_KEY => c.p49
,P_EFFECTIVE_DATE => c.p1);
end if;
--
if c.p63 is null or
c.p1 is null then
L_SOFT_CODING_KEYFLEX_ID:=nn;
else
L_SOFT_CODING_KEYFLEX_ID := 
hr_pump_get.get_soft_coding_keyflex_id
(P_CON_SEG_USER_NAME => c.p63
,P_EFFECTIVE_DATE => c.p1);
end if;
--
hr_data_pump.api_trc_on;
hr_assignment_api.update_emp_asg_criteria
(P_EFFECTIVE_DATE => c.p1
,P_DATETRACK_UPDATE_MODE => c.p2
,P_ASSIGNMENT_ID => L_ASSIGNMENT_ID
,p_validate => l_validate
,P_CALLED_FROM_MASS_UPDATE => L_CALLED_FROM_MASS_UPDATE
,P_GRADE_ID => L_GRADE_ID
,P_POSITION_ID => L_POSITION_ID
,P_JOB_ID => L_JOB_ID
,P_PAYROLL_ID => L_PAYROLL_ID
,P_LOCATION_ID => L_LOCATION_ID
,P_ORGANIZATION_ID => L_ORGANIZATION_ID
,P_PAY_BASIS_ID => L_PAY_BASIS_ID
,P_SEGMENT1 => c.p4
,P_SEGMENT2 => c.p5
,P_SEGMENT3 => c.p6
,P_SEGMENT4 => c.p7
,P_SEGMENT5 => c.p8
,P_SEGMENT6 => c.p9
,P_SEGMENT7 => c.p10
,P_SEGMENT8 => c.p11
,P_SEGMENT9 => c.p12
,P_SEGMENT10 => c.p13
,P_SEGMENT11 => c.p14
,P_SEGMENT12 => c.p15
,P_SEGMENT13 => c.p16
,P_SEGMENT14 => c.p17
,P_SEGMENT15 => c.p18
,P_SEGMENT16 => c.p19
,P_SEGMENT17 => c.p20
,P_SEGMENT18 => c.p21
,P_SEGMENT19 => c.p22
,P_SEGMENT20 => c.p23
,P_SEGMENT21 => c.p24
,P_SEGMENT22 => c.p25
,P_SEGMENT23 => c.p26
,P_SEGMENT24 => c.p27
,P_SEGMENT25 => c.p28
,P_SEGMENT26 => c.p29
,P_SEGMENT27 => c.p30
,P_SEGMENT28 => c.p31
,P_SEGMENT29 => c.p32
,P_SEGMENT30 => c.p33
,P_EMPLOYMENT_CATEGORY => c.p34
,P_CONCAT_SEGMENTS => c.p35
,P_CONTRACT_ID => L_CONTRACT_ID
,P_ESTABLISHMENT_ID => L_ESTABLISHMENT_ID
,P_SCL_SEGMENT1 => c.p36
,P_GRADE_LADDER_PGM_ID => L_GRADE_LADDER_PGM_ID
,P_SUPERVISOR_ASSIGNMENT_ID => L_SUPERVISOR_ASSIGNMENT_ID
,P_OBJECT_VERSION_NUMBER => L_OBJECT_VERSION_NUMBER
,P_SPECIAL_CEILING_STEP_ID => c.p37
,P_PEOPLE_GROUP_ID => c.p38
,P_SOFT_CODING_KEYFLEX_ID => L_SOFT_CODING_KEYFLEX_ID
,P_GROUP_NAME => c.p39
,P_EFFECTIVE_START_DATE => c.p40
,P_EFFECTIVE_END_DATE => c.p41
,P_ORG_NOW_NO_MANAGER_WARNING => L_ORG_NOW_NO_MANAGER_WARNING
,P_OTHER_MANAGER_WARNING => L_OTHER_MANAGER_WARNING
,P_SPP_DELETE_WARNING => L_SPP_DELETE_WARNING
,P_ENTRIES_CHANGED_WARNING => c.p45
,P_TAX_DISTRICT_CHANGED_WARNING => L_TAX_DISTRICT_CHANGED_WARNING
,P_CONCATENATED_SEGMENTS => c.p47
,P_GSP_POST_PROCESS_WARNING => c.p48);
hr_data_pump.api_trc_off;
--
if L_ORG_NOW_NO_MANAGER_WARNING then
c.p42 := 'TRUE';
else
c.p42 := 'FALSE';
end if;
--
if L_OTHER_MANAGER_WARNING then
c.p43 := 'TRUE';
else
c.p43 := 'FALSE';
end if;
--
if L_SPP_DELETE_WARNING then
c.p44 := 'TRUE';
else
c.p44 := 'FALSE';
end if;
--
if L_TAX_DISTRICT_CHANGED_WARNING then
c.p46 := 'TRUE';
else
c.p46 := 'FALSE';
end if;
--
update hr_pump_batch_lines l set
l.pval037 = decode(c.p37,null,cn,c.p37),
l.pval038 = decode(c.p38,null,cn,c.p38),
l.pval039 = decode(c.p39,null,cn,c.p39),
l.pval040 = decode(c.p40,null,cn,dc(c.p40)),
l.pval041 = decode(c.p41,null,cn,dc(c.p41)),
l.pval042 = decode(c.p42,null,cn,c.p42),
l.pval043 = decode(c.p43,null,cn,c.p43),
l.pval044 = decode(c.p44,null,cn,c.p44),
l.pval045 = decode(c.p45,null,cn,c.p45),
l.pval046 = decode(c.p46,null,cn,c.p46),
l.pval047 = decode(c.p47,null,cn,c.p47),
l.pval048 = decode(c.p48,null,cn,c.p48)
where l.rowid = c.myrowid;
--
close cr;
--
hr_data_pump.exit('call');
exception
 when hr_multi_message.error_message_exist then
   if cr%isopen then
    close cr;
   end if;
   hr_pump_utils.set_multi_msg_error_flag(true);
 when others then
 if cr%isopen then
  close cr;
 end if;
 raise;
end call;
end hrdpp_update_emp_asg_criteria;

/
