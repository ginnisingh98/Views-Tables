--------------------------------------------------------
--  DDL for Package Body PSP_PAYROLL_LINES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PSP_PAYROLL_LINES_PKG" as
 /* $Header: PSPPILNB.pls 120.4 2007/01/26 06:52:52 spchakra noship $ */
procedure INSERT_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_PAYROLL_LINE_ID in NUMBER,
  X_PAYROLL_CONTROL_ID in NUMBER,
  X_SET_OF_BOOKS_ID in NUMBER,
  X_ASSIGNMENT_ID in NUMBER,
  X_PERSON_ID in NUMBER,
  X_COST_ID in NUMBER,
  X_ELEMENT_TYPE_ID in NUMBER,
  X_PAY_AMOUNT in NUMBER,
  X_STATUS_CODE in VARCHAR2,
  X_EFFECTIVE_DATE in DATE,
  X_CHECK_DATE in DATE,
  X_EARNED_DATE in DATE,
  X_ACCOUNTING_DATE in DATE default null,   --- 3108109
  X_EXCHANGE_RATE_TYPE IN VARCHAR2 DEFAULT NULL,
  X_COST_ALLOCATION_KEYFLEX_ID in NUMBER,
  X_GL_CODE_COMBINATION_ID in NUMBER,
  X_BALANCE_AMOUNT in NUMBER,
  X_DR_CR_FLAG in VARCHAR2,
  X_MODE in VARCHAR2 default 'R',
  X_PAYROLL_ACTION_TYPE in varchar2 default null,
  X_OR_GL_CODE_COMBINATION_ID IN NUMBER DEFAULT NULL,
  X_OR_PROJECT_ID IN NUMBER DEFAULT NULL,
  X_OR_TASK_ID IN NUMBER DEFAULT NULL,
  X_OR_AWARD_ID IN NUMBER DEFAULT NULL,
  X_OR_EXPENDITURE_ORG_ID IN NUMBER DEFAULT NULL,
  X_OR_EXPENDITURE_TYPE IN VARCHAR2 DEFAULT NULL
  ) is
    cursor C is select ROWID from PSP_PAYROLL_LINES
      where PAYROLL_LINE_ID = X_PAYROLL_LINE_ID;
    X_LAST_UPDATE_DATE DATE;
    X_LAST_UPDATED_BY NUMBER;
    X_LAST_UPDATE_LOGIN NUMBER;
begin
  X_LAST_UPDATE_DATE := SYSDATE;
  if(X_MODE = 'I') then
    X_LAST_UPDATED_BY := 1;
    X_LAST_UPDATE_LOGIN := 0;
  elsif (X_MODE = 'R') then
    X_LAST_UPDATED_BY := FND_GLOBAL.USER_ID;
    if X_LAST_UPDATED_BY is NULL then
      X_LAST_UPDATED_BY := -1;
    end if;
    X_LAST_UPDATE_LOGIN :=FND_GLOBAL.LOGIN_ID;
    if X_LAST_UPDATE_LOGIN is NULL then
      X_LAST_UPDATE_LOGIN := -1;
    end if;
  else
    FND_MESSAGE.SET_NAME( 'FND', 'SYSTEM-INVALID ARGS');
    app_exception.raise_exception;
  end if;
  insert into PSP_PAYROLL_LINES (
    PAYROLL_LINE_ID,
    PAYROLL_CONTROL_ID,
    SET_OF_BOOKS_ID,
    ASSIGNMENT_ID,
    PERSON_ID,
    COST_ID,
    ELEMENT_TYPE_ID,
    PAY_AMOUNT,
    STATUS_CODE,
    EFFECTIVE_DATE,
    CHECK_DATE,
    EARNED_DATE,
    ACCOUNTING_DATE,
    EXCHANGE_RATE_TYPE,
    COST_ALLOCATION_KEYFLEX_ID,
    GL_CODE_COMBINATION_ID,
    BALANCE_AMOUNT,
    DR_CR_FLAG,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    PAYROLL_ACTION_TYPE,
    OR_GL_CODE_COMBINATION_ID,
    OR_PROJECT_ID,
    OR_TASK_ID,
    OR_AWARD_ID,
    OR_EXPENDITURE_ORG_ID,
    OR_EXPENDITURE_TYPE
  ) values (
    X_PAYROLL_LINE_ID,
    X_PAYROLL_CONTROL_ID,
    X_SET_OF_BOOKS_ID,
    X_ASSIGNMENT_ID,
    X_PERSON_ID,
    X_COST_ID,
    X_ELEMENT_TYPE_ID,
    X_PAY_AMOUNT,
    X_STATUS_CODE,
    X_EFFECTIVE_DATE,
    X_CHECK_DATE,
    X_EARNED_DATE,
    X_ACCOUNTING_DATE,   --- added for 3108109
    X_EXCHANGE_RATE_TYPE,
    X_COST_ALLOCATION_KEYFLEX_ID,
    X_GL_CODE_COMBINATION_ID,
    X_BALANCE_AMOUNT,
    X_DR_CR_FLAG,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_PAYROLL_ACTION_TYPE,
    X_OR_GL_CODE_COMBINATION_ID,
    X_OR_PROJECT_ID,
    X_OR_TASK_ID,
    X_OR_AWARD_ID,
    X_OR_EXPENDITURE_ORG_ID,
    X_OR_EXPENDITURE_TYPE
  );

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  X_PAYROLL_LINE_ID in NUMBER,
  X_PAYROLL_CONTROL_ID in NUMBER,
  X_SET_OF_BOOKS_ID in NUMBER,
  X_ASSIGNMENT_ID in NUMBER,
  X_PERSON_ID in NUMBER,
  X_COST_ID in NUMBER,
  X_ELEMENT_TYPE_ID in NUMBER,
  X_PAY_AMOUNT in NUMBER,
  X_STATUS_CODE in VARCHAR2,
  X_EFFECTIVE_DATE in DATE,
  X_CHECK_DATE in DATE,
  X_EARNED_DATE in DATE,
  X_ACCOUNTING_DATE in DATE, --- added for 3108109
  X_EXCHANGE_RATE_TYPE in VARCHAR2,
  X_COST_ALLOCATION_KEYFLEX_ID in NUMBER,
  X_GL_CODE_COMBINATION_ID in NUMBER,
  X_BALANCE_AMOUNT in NUMBER,
  X_DR_CR_FLAG in VARCHAR2
) is
  cursor c1 is select
      PAYROLL_CONTROL_ID,
      SET_OF_BOOKS_ID,
      ASSIGNMENT_ID,
      PERSON_ID,
      COST_ID,
      ELEMENT_TYPE_ID,
      PAY_AMOUNT,
      STATUS_CODE,
      EFFECTIVE_DATE,
      CHECK_DATE,
      EARNED_DATE,
      ACCOUNTING_DATE,  --- 3108109
      EXCHANGE_RATE_TYPE,
      COST_ALLOCATION_KEYFLEX_ID,
      GL_CODE_COMBINATION_ID,
      BALANCE_AMOUNT,
      DR_CR_FLAG
    from PSP_PAYROLL_LINES
    where PAYROLL_LINE_ID = X_PAYROLL_LINE_ID
    for update of PAYROLL_LINE_ID nowait;
  tlinfo c1%rowtype;

begin
  open c1;
  fetch c1 into tlinfo;
  if (c1%notfound) then
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
    close c1;
    return;
  end if;
  close c1;

  if ( (tlinfo.PAYROLL_CONTROL_ID = X_PAYROLL_CONTROL_ID)
      AND (tlinfo.SET_OF_BOOKS_ID = X_SET_OF_BOOKS_ID)
      AND (tlinfo.ASSIGNMENT_ID = X_ASSIGNMENT_ID)
      AND (tlinfo.PERSON_ID = X_PERSON_ID)
      AND ((tlinfo.COST_ID = X_COST_ID)
           OR ((tlinfo.COST_ID is null)
               AND (X_COST_ID is null)))
      AND (tlinfo.ELEMENT_TYPE_ID = X_ELEMENT_TYPE_ID)
      AND (tlinfo.PAY_AMOUNT = X_PAY_AMOUNT)
      AND (tlinfo.STATUS_CODE = X_STATUS_CODE)
      AND (tlinfo.EFFECTIVE_DATE = X_EFFECTIVE_DATE)
      AND ((tlinfo.CHECK_DATE = X_CHECK_DATE)
           OR ((tlinfo.CHECK_DATE is null)
               AND (X_CHECK_DATE is null)))
      AND ((tlinfo.EARNED_DATE = X_EARNED_DATE)
           OR ((tlinfo.EARNED_DATE is null)
               AND (X_EARNED_DATE is null)))
      AND ((tlinfo.COST_ALLOCATION_KEYFLEX_ID = X_COST_ALLOCATION_KEYFLEX_ID)
           OR ((tlinfo.COST_ALLOCATION_KEYFLEX_ID is null)
               AND (X_COST_ALLOCATION_KEYFLEX_ID is null)))
      AND ((tlinfo.GL_CODE_COMBINATION_ID = X_GL_CODE_COMBINATION_ID)
           OR ((tlinfo.GL_CODE_COMBINATION_ID is null)
               AND (X_GL_CODE_COMBINATION_ID is null)))
      AND ((tlinfo.BALANCE_AMOUNT = X_BALANCE_AMOUNT)
           OR ((tlinfo.BALANCE_AMOUNT is null)
               AND (X_BALANCE_AMOUNT is null)))
      AND ((tlinfo.ACCOUNTING_DATE = X_ACCOUNTING_DATE)  -- added for 3108109
          OR ((tlinfo.ACCOUNTING_DATE is null)
               AND (X_ACCOUNTING_DATE is null)))
      AND ((tlinfo.EXCHANGE_RATE_TYPE = X_EXCHANGE_RATE_TYPE)  -- added for 3108109
          OR ((tlinfo.EXCHANGE_RATE_TYPE is null)
               AND (X_EXCHANGE_RATE_TYPE is null)))
      AND (tlinfo.DR_CR_FLAG = X_DR_CR_FLAG)
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_PAYROLL_LINE_ID in NUMBER,
  X_PAYROLL_CONTROL_ID in NUMBER,
  X_SET_OF_BOOKS_ID in NUMBER,
  X_ASSIGNMENT_ID in NUMBER,
  X_PERSON_ID in NUMBER,
  X_COST_ID in NUMBER,
  X_ELEMENT_TYPE_ID in NUMBER,
  X_PAY_AMOUNT in NUMBER,
  X_STATUS_CODE in VARCHAR2,
  X_EFFECTIVE_DATE in DATE,
  X_CHECK_DATE in DATE,
  X_EARNED_DATE in DATE,
  X_ACCOUNTING_DATE in DATE default null, --- added for 3108109
  X_EXCHANGE_RATE_TYPE IN VARCHAR2 DEFAULT NULL,
  X_COST_ALLOCATION_KEYFLEX_ID in NUMBER,
  X_GL_CODE_COMBINATION_ID in NUMBER,
  X_BALANCE_AMOUNT in NUMBER,
  X_DR_CR_FLAG in VARCHAR2,
  X_MODE in VARCHAR2 default 'R'
  ) is
    X_LAST_UPDATE_DATE DATE;
    X_LAST_UPDATED_BY NUMBER;
    X_LAST_UPDATE_LOGIN NUMBER;
begin
  X_LAST_UPDATE_DATE := SYSDATE;
  if(X_MODE = 'I') then
    X_LAST_UPDATED_BY := 1;
    X_LAST_UPDATE_LOGIN := 0;
  elsif (X_MODE = 'R') then
    X_LAST_UPDATED_BY := FND_GLOBAL.USER_ID;
    if X_LAST_UPDATED_BY is NULL then
      X_LAST_UPDATED_BY := -1;
    end if;
    X_LAST_UPDATE_LOGIN :=FND_GLOBAL.LOGIN_ID;
    if X_LAST_UPDATE_LOGIN is NULL then
      X_LAST_UPDATE_LOGIN := -1;
    end if;
  else
    FND_MESSAGE.SET_NAME('FND', 'SYSTEM-INVALID ARGS');
    app_exception.raise_exception;
  end if;
  update PSP_PAYROLL_LINES set
    PAYROLL_CONTROL_ID = X_PAYROLL_CONTROL_ID,
    SET_OF_BOOKS_ID = X_SET_OF_BOOKS_ID,
    ASSIGNMENT_ID = X_ASSIGNMENT_ID,
    PERSON_ID = X_PERSON_ID,
    COST_ID = X_COST_ID,
    ELEMENT_TYPE_ID = X_ELEMENT_TYPE_ID,
    PAY_AMOUNT = X_PAY_AMOUNT,
    STATUS_CODE = X_STATUS_CODE,
    EFFECTIVE_DATE = X_EFFECTIVE_DATE,
    CHECK_DATE = X_CHECK_DATE,
    EARNED_DATE = X_EARNED_DATE,
    ACCOUNTING_DATE = X_ACCOUNTING_DATE, -- 3108109
    EXCHANGE_RATE_TYPE = X_EXCHANGE_RATE_TYPE,
    COST_ALLOCATION_KEYFLEX_ID = X_COST_ALLOCATION_KEYFLEX_ID,
    GL_CODE_COMBINATION_ID = X_GL_CODE_COMBINATION_ID,
    BALANCE_AMOUNT = X_BALANCE_AMOUNT,
    DR_CR_FLAG = X_DR_CR_FLAG,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where PAYROLL_LINE_ID = X_PAYROLL_LINE_ID
  ;
  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure ADD_ROW (
  X_ROWID in out NOCOPY VARCHAR2,
  X_PAYROLL_LINE_ID in NUMBER,
  X_PAYROLL_CONTROL_ID in NUMBER,
  X_SET_OF_BOOKS_ID in NUMBER,
  X_ASSIGNMENT_ID in NUMBER,
  X_PERSON_ID in NUMBER,
  X_COST_ID in NUMBER,
  X_ELEMENT_TYPE_ID in NUMBER,
  X_PAY_AMOUNT in NUMBER,
  X_STATUS_CODE in VARCHAR2,
  X_EFFECTIVE_DATE in DATE,
  X_CHECK_DATE in DATE,
  X_EARNED_DATE in DATE,
  X_ACCOUNTING_DATE in DATE default null,    --- added for 3108109
  X_EXCHANGE_RATE_TYPE IN VARCHAR2 DEFAULT NULL,
  X_COST_ALLOCATION_KEYFLEX_ID in NUMBER,
  X_GL_CODE_COMBINATION_ID in NUMBER,
  X_BALANCE_AMOUNT in NUMBER,
  X_DR_CR_FLAG in VARCHAR2,
  X_MODE in VARCHAR2 default 'R'
  ) is
  cursor c1 is select rowid from PSP_PAYROLL_LINES
     where PAYROLL_LINE_ID = X_PAYROLL_LINE_ID
  ;
  dummy c1%rowtype;
begin
  open c1;
  fetch c1 into dummy;
  if (c1%notfound) then
    close c1;
    INSERT_ROW (
     X_ROWID,
     X_PAYROLL_LINE_ID,
     X_PAYROLL_CONTROL_ID,
     X_SET_OF_BOOKS_ID,
     X_ASSIGNMENT_ID,
     X_PERSON_ID,
     X_COST_ID,
     X_ELEMENT_TYPE_ID,
     X_PAY_AMOUNT,
     X_STATUS_CODE,
     X_EFFECTIVE_DATE,
     X_CHECK_DATE,
     X_EARNED_DATE,
     X_ACCOUNTING_DATE, --- added for 3108109
     X_EXCHANGE_RATE_TYPE,
     X_COST_ALLOCATION_KEYFLEX_ID,
     X_GL_CODE_COMBINATION_ID,
     X_BALANCE_AMOUNT,
     X_DR_CR_FLAG,
     X_MODE, null);
    return;
  end if;
  close c1;
  UPDATE_ROW (
   X_PAYROLL_LINE_ID,
   X_PAYROLL_CONTROL_ID,
   X_SET_OF_BOOKS_ID,
   X_ASSIGNMENT_ID,
   X_PERSON_ID,
   X_COST_ID,
   X_ELEMENT_TYPE_ID,
   X_PAY_AMOUNT,
   X_STATUS_CODE,
   X_EFFECTIVE_DATE,
   X_CHECK_DATE,
   X_EARNED_DATE,
   X_ACCOUNTING_DATE, ---- added for 3108109
   X_EXCHANGE_RATE_TYPE,
   X_COST_ALLOCATION_KEYFLEX_ID,
   X_GL_CODE_COMBINATION_ID,
   X_BALANCE_AMOUNT,
   X_DR_CR_FLAG,
   X_MODE);
end ADD_ROW;

procedure DELETE_ROW (
  X_PAYROLL_LINE_ID in NUMBER
) is
begin
  delete from PSP_PAYROLL_LINES
  where PAYROLL_LINE_ID = X_PAYROLL_LINE_ID;
  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

end PSP_PAYROLL_LINES_PKG;

/
