--------------------------------------------------------
--  DDL for Package Body INV_INVARORE_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."INV_INVARORE_XMLP_PKG" AS
/* $Header: INVAROREB.pls 120.2 2007/12/25 10:04:06 dwkrishn noship $ */
  FUNCTION C_FORMATTEDCURRENCYCODEFORMULA(CURRENCY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      TEMP_C VARCHAR2(20);
    BEGIN
      TEMP_C := '(' || CURRENCY_CODE || ')';
      RETURN (TEMP_C);
    END;
    RETURN NULL;
  END C_FORMATTEDCURRENCYCODEFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Before Report: Init')*/NULL;
    END;
    DECLARE
      P_ORG_ID_CHAR VARCHAR2(100) := TO_CHAR(P_ORG_ID);
    BEGIN
      /*SRW.USER_EXIT('FND PUTPROFILE NAME="' || 'MFG_ORGANIZATION_ID' || '" FIELD="' || P_ORG_ID_CHAR || '"')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(020
                   ,'Failed in before report trigger, setting org profile ')*/NULL;
        RAISE;
    END;
    BEGIN
      NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Before Report: LocatorFlex')*/NULL;
    END;
    DECLARE
      M_RETURN_STATUS VARCHAR2(1);
      M_MSG_COUNT NUMBER;
      M_MSG_DATA VARCHAR2(2000);
    BEGIN
      IF (WMS_INSTALL.CHECK_INSTALL(X_RETURN_STATUS => M_RETURN_STATUS
                               ,X_MSG_COUNT => M_MSG_COUNT
                               ,X_MSG_DATA => M_MSG_DATA
                               ,P_ORGANIZATION_ID => P_ORG_ID)) THEN
        P_WMS_INSTALLED := 'TRUE';
      END IF;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
      RETURN (TRUE);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_REPORTDATEFORMULA RETURN DATE IS
  BEGIN
    BEGIN
      RETURN (SYSDATE);
    END;
    RETURN NULL;
  END C_REPORTDATEFORMULA;

  FUNCTION C_OVERDUEONLYFORMULA RETURN VARCHAR2 IS
  BEGIN
    BEGIN
      IF P_OVERDUEONLY = 1 THEN
        RETURN ('Yes');
      ELSE
        RETURN ('No');
      END IF;
    END;
    RETURN NULL;
  END C_OVERDUEONLYFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CF_PARENT_LPNFORMULA(CONTAINER_ENABLED_FLAG IN NUMBER
                               ,PARENT_LPN_ID IN NUMBER) RETURN CHAR IS
    X_PARENT_LPN VARCHAR2(30) := NULL;
  BEGIN
    IF ((P_WMS_INSTALLED = 'TRUE') AND (NVL(CONTAINER_ENABLED_FLAG
       ,-99) > 0)) THEN
      IF (PARENT_LPN_ID IS NOT NULL) THEN
        BEGIN
          SELECT
            LICENSE_PLATE_NUMBER
          INTO X_PARENT_LPN
          FROM
            WMS_LICENSE_PLATE_NUMBERS
          WHERE LPN_ID = PARENT_LPN_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            X_PARENT_LPN := 'ERROR';
        END;
      END IF;
    END IF;
    RETURN (X_PARENT_LPN);
  END CF_PARENT_LPNFORMULA;

  FUNCTION CF_OUTERMOST_LPNFORMULA(CONTAINER_ENABLED_FLAG IN NUMBER
                                  ,OUTERMOST_LPN_ID IN NUMBER) RETURN CHAR IS
    X_OUTERMOST_LPN VARCHAR2(30) := NULL;
  BEGIN
    IF ((P_WMS_INSTALLED = 'TRUE') AND (NVL(CONTAINER_ENABLED_FLAG
       ,-99) > 0)) THEN
      IF (OUTERMOST_LPN_ID IS NOT NULL) THEN
        BEGIN
          SELECT
            LICENSE_PLATE_NUMBER
          INTO X_OUTERMOST_LPN
          FROM
            WMS_LICENSE_PLATE_NUMBERS
          WHERE LPN_ID = OUTERMOST_LPN_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            X_OUTERMOST_LPN := 'ERROR';
        END;
      END IF;
    END IF;
    RETURN (X_OUTERMOST_LPN);
  END CF_OUTERMOST_LPNFORMULA;

  FUNCTION CF_COST_GROUPFORMULA(COST_GROUP_ID IN NUMBER) RETURN CHAR IS
    M_COST_GROUP VARCHAR2(10) := NULL;
  BEGIN
    IF ((P_WMS_INSTALLED = 'TRUE') AND (COST_GROUP_ID IS NOT NULL)) THEN
      BEGIN
        SELECT
          COST_GROUP
        INTO M_COST_GROUP
        FROM
          CST_COST_GROUPS
        WHERE COST_GROUP_ID = COST_GROUP_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          M_COST_GROUP := 'ERROR';
      END;
    END IF;
    RETURN (M_COST_GROUP);
  END CF_COST_GROUPFORMULA;

END INV_INVARORE_XMLP_PKG;


/
