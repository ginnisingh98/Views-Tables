--------------------------------------------------------
--  DDL for Package Body IGI_IGIRRTRH_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."IGI_IGIRRTRH_XMLP_PKG" AS
/* $Header: IGIRRTRHB.pls 120.1.12010000.1 2008/07/29 08:59:26 appldev ship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.REFERENCE(P_COA)*/NULL;
    RP_SUM_FOR := FND_MESSAGE('AR_REPORTS_SUM_FOR');
    if P_ORDER_BY is null then
    P_ORDER_BY_1 := 'CUSTOMER';
    else
    P_ORDER_BY_1 := P_ORDER_BY;
    end if;
    IF P_START_COMPANY_SEGMENT IS NOT NULL THEN
      LP_START_COMPANY_SEGMENT := 'and ' || REPLACE(LP_START_COMPANY_SEGMENT
                                         ,'>='
                                         ,'||'''' >=');
    END IF;
    IF P_END_COMPANY_SEGMENT IS NOT NULL THEN
      LP_END_COMPANY_SEGMENT := 'and ' || REPLACE(LP_END_COMPANY_SEGMENT
                                       ,'<='
                                       ,'||'''' <=');
      GET_BOILER_PLATES;
    END IF;
    BEGIN
      P_CONS_PROFILE_VALUE := nvl(FND_PROFILE.VALUE('AR_SHOW_BILLING_NUMBER'),'N');
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    IF (P_CONS_PROFILE_VALUE = 'N') THEN
      LP_QUERY_SHOW_BILL := 'to_char(NULL)';
      LP_TABLE_SHOW_BILL := '   ';
      LP_WHERE_SHOW_BILL := '   ';
    ELSE
      LP_QUERY_SHOW_BILL := 'ci.cons_billing_number';
      LP_TABLE_SHOW_BILL := 'ar_payment_schedules ps,ar_cons_inv ci,';
      LP_WHERE_SHOW_BILL := 'and trx.customer_trx_id = ps.customer_trx_id(+)
                            		and nvl(ps.due_date,TO_DATE(''01/01/0001'',''MM/DD/YYYY'')) = (
                             		select nvl(min(x.due_date), TO_DATE(''01/01/0001'',''MM/DD/YYYY''))
                               		from ar_payment_schedules x
                                		 where x.customer_trx_id = ps.customer_trx_id)
                             			and ps.cons_inv_id = ci.cons_inv_id(+)';
    END IF;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION REPORT_NAMEFORMULA(FUNCTIONAL_CURRENCY IN VARCHAR2
                             ,COMPANY_NAME IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_REPORT_NAME VARCHAR2(80);
      L_YES VARCHAR2(80);
      L_NO VARCHAR2(80);
      L_START_GL_DATE VARCHAR2(11);
      L_END_GL_DATE VARCHAR2(11);
      L_START_TRX_DATE VARCHAR2(11);
      L_END_TRX_DATE VARCHAR2(11);
    BEGIN
      RP_CURR_CODE := FUNCTIONAL_CURRENCY;
      IF P_START_TRX_DATE IS NULL THEN
        L_START_TRX_DATE := '   ';
      ELSE
        L_START_TRX_DATE := P_START_TRX_DATE;
      END IF;
      IF P_END_TRX_DATE IS NULL THEN
        L_END_TRX_DATE := '   ';
      ELSE
        L_END_TRX_DATE := P_END_TRX_DATE;
      END IF;
      IF P_START_GL_DATE IS NULL THEN
        L_START_GL_DATE := '   ';
      ELSE
        L_START_GL_DATE := P_START_GL_DATE;
      END IF;
      IF P_END_GL_DATE IS NULL THEN
        L_END_GL_DATE := '   ';
      ELSE
        L_END_GL_DATE := P_END_GL_DATE;
      END IF;
      RP_INVOICE_DATE := FND_MESSAGE('AR_REPORTS_INV_DATE_FROM_TO'
                                    ,'FROM_DATE'
                                    ,L_START_TRX_DATE
                                    ,'TO_DATE'
                                    ,L_END_TRX_DATE);
      RP_GL_DATE := FND_MESSAGE('AR_REPORTS_GL_DATE_FROM_TO'
                               ,'FROM_DATE'
                               ,L_START_GL_DATE
                               ,'TO_DATE'
                               ,L_END_GL_DATE);
      SELECT
        INITCAP(LOOK1.MEANING) C_YES,
        INITCAP(LOOK2.MEANING) C_NO
      INTO L_YES,L_NO
      FROM
        AR_LOOKUPS LOOK1,
        AR_LOOKUPS LOOK2
      WHERE LOOK1.LOOKUP_TYPE = 'YES/NO'
        AND LOOK1.LOOKUP_CODE = 'Y'
        AND LOOK2.LOOKUP_TYPE = 'YES/NO'
        AND LOOK2.LOOKUP_CODE = 'N';
      RP_YES := L_YES;
      RP_NO := L_NO;
      RP_COMPANY_NAME := COMPANY_NAME;
      SELECT
        CP.USER_CONCURRENT_PROGRAM_NAME
      INTO L_REPORT_NAME
      FROM
        FND_CONCURRENT_PROGRAMS_TL CP,
        FND_CONCURRENT_REQUESTS CR
      WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
        AND CP.LANGUAGE = USERENV('LANG')
        AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
        AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
      RP_REPORT_NAME := L_REPORT_NAME;
      RETURN (L_REPORT_NAME);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RP_REPORT_NAME := NULL;
        RETURN (NULL);
    END;
    RETURN NULL;
  END REPORT_NAMEFORMULA;

  FUNCTION C_COMPANY_SUMMARY_LABELFORMULA(COMPANY IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_TEMP VARCHAR2(50);
    BEGIN
      L_TEMP := RP_SUM_FOR || ' ' || COMPANY;
      RETURN (L_TEMP);
    END;
    RETURN NULL;
  END C_COMPANY_SUMMARY_LABELFORMULA;

  FUNCTION C_POSTABLE_SUMMARY_LABELFORMUL(POSTABLE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_TEMP VARCHAR2(50);
    BEGIN
      L_TEMP := RP_SUM_FOR || ' ' || POSTABLE;
      RETURN (L_TEMP);
    END;
    RETURN NULL;
  END C_POSTABLE_SUMMARY_LABELFORMUL;

  FUNCTION C_CURRENCY_SUMMARY_LABELFORMUL(CURRENCY_A IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_TEMP VARCHAR2(50);
    BEGIN
      L_TEMP := RP_SUM_FOR || ' ' || CURRENCY_A;
      RETURN (L_TEMP);
    END;
    RETURN NULL;
  END C_CURRENCY_SUMMARY_LABELFORMUL;

  FUNCTION C_CLASS_SUMMARY_LABELFORMULA(CLASS IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      L_TEMP VARCHAR2(50);
    BEGIN
      L_TEMP := RP_SUM_FOR || ' ' || CLASS;
      RETURN (L_TEMP);
    END;
    RETURN NULL;
  END C_CLASS_SUMMARY_LABELFORMULA;

  FUNCTION C_DATA_NOT_FOUNDFORMULA(CURRENCY_A IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    RP_DATA_FOUND := CURRENCY_A;
    RETURN (0);
  END C_DATA_NOT_FOUNDFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    DECLARE
      L_START_CURRENCY_CODE VARCHAR2(15);
      L_END_CURRENCY_CODE VARCHAR2(15);
    BEGIN
      P_DUMMY_CURR_CODE_LOW := P_START_CURRENCY_CODE;
      P_DUMMY_CURR_CODE_HIGH := P_END_CURRENCY_CODE;
      IF P_START_GL_DATE IS NOT NULL THEN
        LP_START_GL_DATE := 'AND ((gl_dist.gl_date >= :p_start_gl_date) OR (trx.trx_date >= :p_start_gl_date AND gl_dist.gl_date IS NULL))';
      END IF;
      IF P_END_GL_DATE IS NOT NULL THEN
        LP_END_GL_DATE := 'and ((gl_dist.gl_date <= :p_end_gl_date) OR (trx.trx_date <= :p_end_gl_date AND gl_dist.gl_date IS NULL))';
      END IF;
      IF P_START_TRX_DATE IS NOT NULL THEN
        LP_START_TRX_DATE := 'and trx.trx_date >=:p_start_trx_date';
      END IF;
      IF P_END_TRX_DATE IS NOT NULL THEN
        LP_END_TRX_DATE := 'and trx.trx_date <=:p_end_trx_date';
      END IF;
      SELECT
        DECODE(UPPER(P_START_CURRENCY_CODE)
              ,NULL
              ,MIN(CUST.INVOICE_CURRENCY_CODE)
              ,UPPER(P_START_CURRENCY_CODE)),
        DECODE(UPPER(P_END_CURRENCY_CODE)
              ,NULL
              ,MAX(CUST.INVOICE_CURRENCY_CODE)
              ,UPPER(P_END_CURRENCY_CODE))
      INTO L_START_CURRENCY_CODE,L_END_CURRENCY_CODE
      FROM
        RA_CUSTOMER_TRX CUST
      WHERE CUST.COMPLETE_FLAG = 'Y';
      P_START_CURRENCY_CODE := L_START_CURRENCY_CODE;
      P_END_CURRENCY_CODE := L_END_CURRENCY_CODE;
      IF P_TRX_TYPE_TYPE IS NOT NULL THEN
        LP_TRX_TYPE_TYPE_LOW := 'and type.type = :p_trx_type_type';
      END IF;
      IF P_INVOICE_TYPE_LOW IS NOT NULL THEN
        LP_INVOICE_TYPE_LOW := 'and type.name >= :p_invoice_type_low ';
      END IF;
      IF P_INVOICE_TYPE_HIGH IS NOT NULL THEN
        LP_INVOICE_TYPE_HIGH := 'and type.name <= :p_invoice_type_high ';
      END IF;
      LP_MEANING_INV := AR_LOOKUP('INV/CM'
                                 ,'INV');
      LP_MEANING_DEP := AR_LOOKUP('INV/CM'
                                 ,'DEP');
      LP_MEANING_GUAR := AR_LOOKUP('INV/CM'
                                  ,'GUAR');
      LP_MEANING_CM := AR_LOOKUP('INV/CM'
                                ,'CM');
      LP_MEANING_DM := AR_LOOKUP('INV/CM'
                                ,'DM');
      LP_MEANING_CB := AR_LOOKUP('INV/CM'
                                ,'CB');
    END;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION D_COMPANYFORMULA(COMPANY IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(COMPANY)*/NULL;
    RETURN (COMPANY);
  END D_COMPANYFORMULA;

  FUNCTION AR_LOOKUP(L_TYPE IN VARCHAR2
                    ,L_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    L_MEANING VARCHAR2(11);
  BEGIN
    SELECT
      RTRIM(RPAD(MEANING
                ,11))
    INTO L_MEANING
    FROM
      AR_LOOKUPS
    WHERE LOOKUP_TYPE = L_TYPE
      AND LOOKUP_CODE = L_CODE;
    RETURN (L_MEANING);
  END AR_LOOKUP;

  PROCEDURE GET_LOOKUP_MEANING(P_LOOKUP_TYPE IN VARCHAR2
                              ,P_LOOKUP_CODE IN VARCHAR2
                              ,P_LOOKUP_MEANING IN OUT NOCOPY VARCHAR2) IS
    W_MEANING VARCHAR2(80);
  BEGIN
    SELECT
      MEANING
    INTO W_MEANING
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = P_LOOKUP_TYPE
      AND LOOKUP_CODE = P_LOOKUP_CODE;
    P_LOOKUP_MEANING := W_MEANING;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      P_LOOKUP_MEANING := NULL;
  END GET_LOOKUP_MEANING;

  PROCEDURE GET_BOILER_PLATES IS
    W_INDUSTRY_CODE VARCHAR2(20);
    W_INDUSTRY_STAT VARCHAR2(20);
  BEGIN
    IF GET(0
       ,0
       ,W_INDUSTRY_STAT
       ,W_INDUSTRY_CODE) THEN
      C_INDUSTRY_CODE := W_INDUSTRY_CODE;
    END IF;
  END GET_BOILER_PLATES;

  FUNCTION SET_DISPLAY_FOR_CORE RETURN BOOLEAN IS
  BEGIN
    IF C_INDUSTRY_CODE = 'C' THEN
      RETURN (TRUE);
    ELSE
      RETURN (FALSE);
    END IF;
    RETURN NULL;
  END SET_DISPLAY_FOR_CORE;

  FUNCTION SET_DISPLAY_FOR_GOV RETURN BOOLEAN IS
  BEGIN
    IF C_INDUSTRY_CODE = 'C' THEN
      RETURN (FALSE);
    ELSE
      RETURN (TRUE);
    END IF;
    RETURN NULL;
  END SET_DISPLAY_FOR_GOV;

  FUNCTION INVOICE_CONSFORMULA(INVOICE_NUMBER IN VARCHAR2
                              ,CONS_BILLING_NUMBER IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    /*SRW.REFERENCE(INVOICE_NUMBER)*/NULL;
    /*SRW.REFERENCE(CONS_BILLING_NUMBER)*/NULL;
    IF (P_CONS_PROFILE_VALUE = 'N') THEN
      RETURN (SUBSTR(INVOICE_NUMBER
                   ,1
                   ,40));
    ELSIF (P_CONS_PROFILE_VALUE = 'Y') AND (CONS_BILLING_NUMBER IS NULL) THEN
      RETURN (SUBSTR(INVOICE_NUMBER
                   ,1
                   ,40));
    ELSE
      RETURN (SUBSTR(SUBSTR(INVOICE_NUMBER
                          ,1
                          ,NVL(LENGTH(INVOICE_NUMBER)
                             ,0)) || '/' || CONS_BILLING_NUMBER
                   ,1
                   ,40));
    END IF;
    RETURN NULL;
  END INVOICE_CONSFORMULA;

  FUNCTION RP_COMPANY_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_COMPANY_NAME;
  END RP_COMPANY_NAME_P;

  FUNCTION RP_REPORT_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_REPORT_NAME;
  END RP_REPORT_NAME_P;

  FUNCTION RP_DATA_FOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_DATA_FOUND;
  END RP_DATA_FOUND_P;

  FUNCTION RP_YES_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_YES;
  END RP_YES_P;

  FUNCTION RP_NO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_NO;
  END RP_NO_P;

  FUNCTION RP_GL_DATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_GL_DATE;
  END RP_GL_DATE_P;

  FUNCTION RP_INVOICE_DATE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_INVOICE_DATE;
  END RP_INVOICE_DATE_P;

  FUNCTION RP_CURR_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_CURR_CODE;
  END RP_CURR_CODE_P;

  FUNCTION C_INDUSTRY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_INDUSTRY_CODE;
  END C_INDUSTRY_CODE_P;

  FUNCTION C_COMPANY_TITLE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_TITLE;
  END C_COMPANY_TITLE_P;

  FUNCTION RP_SUM_FOR_P RETURN VARCHAR2 IS
  BEGIN
    RETURN RP_SUM_FOR;
  END RP_SUM_FOR_P;

 /* FUNCTION GET_NEXT_WORD(LIST IN OUT NOCOPY VARCHAR2
                        ,VALUE IN OUT NOCOPY VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := ARP_STANDARD.GET_NEXT_WORD(:LIST, :VALUE); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_IO(LIST);
    STPROC.BIND_IO(VALUE);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,LIST);
    STPROC.RETRIEVE(2
                   ,VALUE);
    STPROC.RETRIEVE(3
                   ,X0);
    RETURN X0;
  END GET_NEXT_WORD;

  FUNCTION CEIL(D IN DATE) RETURN DATE IS
    X0 DATE;
  BEGIN
  X0 := ARP_STANDARD.CEIL(D);
    STPROC.INIT('begin :X0 := ARP_STANDARD.CEIL(:D); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(D);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END CEIL;

  FUNCTION EVEN(N IN NUMBER) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := ARP_STANDARD.EVEN(:N); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(N);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,X0);
    RETURN X0;
  END EVEN;

  FUNCTION ODD(N IN NUMBER) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := ARP_STANDARD.ODD(:N); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(N);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,X0);
    RETURN X0;
  END ODD;

  FUNCTION CHECK_FLAG(OPTIONS IN NUMBER
                     ,FLAG IN NUMBER) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := ARP_STANDARD.CHECK_FLAG(:OPTIONS, :FLAG); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(OPTIONS);
    STPROC.BIND_I(FLAG);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,X0);
    RETURN X0;
  END CHECK_FLAG;

  PROCEDURE CLEAR_FLAG(OPTIONS IN OUT NOCOPY NUMBER
                      ,FLAG IN NUMBER) IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.CLEAR_FLAG(:OPTIONS, :FLAG); end;');
    STPROC.BIND_IO(OPTIONS);
    STPROC.BIND_I(FLAG);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,OPTIONS);
  END CLEAR_FLAG;

  PROCEDURE SET_FLAG(OPTIONS IN OUT NOCOPY NUMBER
                    ,FLAG IN NUMBER) IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.SET_FLAG(:OPTIONS, :FLAG); end;');
    STPROC.BIND_IO(OPTIONS);
    STPROC.BIND_I(FLAG);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,OPTIONS);
  END SET_FLAG;
*/
  FUNCTION FND_MESSAGE(MD_OPTIONS IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN

  X0 := ARP_STANDARD.FND_MESSAGE(MD_OPTIONS);
  /*
    STPROC.INIT('begin :X0 := ARP_STANDARD.FND_MESSAGE(:MD_OPTIONS); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(MD_OPTIONS);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
*/
    RETURN X0;
  END FND_MESSAGE;

  FUNCTION FND_MESSAGE RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
  X0 := ARP_STANDARD.FND_MESSAGE;
   /* STPROC.INIT('begin :X0 := ARP_STANDARD.FND_MESSAGE; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    RETURN X0;
  END FND_MESSAGE;

  FUNCTION PREVIOUS_MESSAGE(MD_OPTIONS IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
  X0 := ARP_STANDARD.PREVIOUS_MESSAGE(MD_OPTIONS);
   /* STPROC.INIT('begin :X0 := ARP_STANDARD.PREVIOUS_MESSAGE(:MD_OPTIONS); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(MD_OPTIONS);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
    RETURN X0;
  END PREVIOUS_MESSAGE;

  FUNCTION PREVIOUS_MESSAGE RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
  X0 := ARP_STANDARD.PREVIOUS_MESSAGE;
  /*
    STPROC.INIT('begin :X0 := ARP_STANDARD.PREVIOUS_MESSAGE; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0); */
    RETURN X0;
  END PREVIOUS_MESSAGE;

  FUNCTION FND_MESSAGE(MSG_NAME IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := ARP_STANDARD.FND_MESSAGE(:MSG_NAME); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(MSG_NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
	X0 := ARP_STANDARD.FND_MESSAGE(MSG_NAME);
    RETURN X0;
  END FND_MESSAGE;

  FUNCTION FND_MESSAGE(MSG_NAME IN VARCHAR2
                      ,T1 IN VARCHAR2
                      ,V1 IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
  X0 := ARP_STANDARD.FND_MESSAGE(MSG_NAME, T1, V1);
  /*
    STPROC.INIT('begin :X0 := ARP_STANDARD.FND_MESSAGE(:MSG_NAME, :T1, :V1); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(MSG_NAME);
    STPROC.BIND_I(T1);
    STPROC.BIND_I(V1);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
*/
    RETURN X0;
  END FND_MESSAGE;

  FUNCTION FND_MESSAGE(MSG_NAME IN VARCHAR2
                      ,T1 IN VARCHAR2
                      ,V1 IN VARCHAR2
                      ,T2 IN VARCHAR2
                      ,V2 IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
   /* STPROC.INIT('begin :X0 := ARP_STANDARD.FND_MESSAGE(:MSG_NAME, :T1, :V1, :T2, :V2); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(MSG_NAME);
    STPROC.BIND_I(T1);
    STPROC.BIND_I(V1);
    STPROC.BIND_I(T2);
    STPROC.BIND_I(V2);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
		X0 := ARP_STANDARD.FND_MESSAGE(MSG_NAME, T1, V1, T2, V2);
    RETURN X0;
  END FND_MESSAGE;

  FUNCTION FND_MESSAGE(MSG_NAME IN VARCHAR2
                      ,T1 IN VARCHAR2
                      ,V1 IN VARCHAR2
                      ,T2 IN VARCHAR2
                      ,V2 IN VARCHAR2
                      ,T3 IN VARCHAR2
                      ,V3 IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := ARP_STANDARD.FND_MESSAGE(:MSG_NAME, :T1, :V1, :T2, :V2, :T3, :V3); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(MSG_NAME);
    STPROC.BIND_I(T1);
    STPROC.BIND_I(V1);
    STPROC.BIND_I(T2);
    STPROC.BIND_I(V2);
    STPROC.BIND_I(T3);
    STPROC.BIND_I(V3);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
X0 := ARP_STANDARD.FND_MESSAGE(MSG_NAME, T1, V1, T2, V2, T3, V3);
    RETURN X0;
  END FND_MESSAGE;

  FUNCTION FND_MESSAGE(MSG_NAME IN VARCHAR2
                      ,T1 IN VARCHAR2
                      ,V1 IN VARCHAR2
                      ,T2 IN VARCHAR2
                      ,V2 IN VARCHAR2
                      ,T3 IN VARCHAR2
                      ,V3 IN VARCHAR2
                      ,T4 IN VARCHAR2
                      ,V4 IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
  /*  STPROC.INIT('begin :X0 := ARP_STANDARD.FND_MESSAGE(:MSG_NAME, :T1, :V1, :T2, :V2, :T3, :V3, :T4, :V4); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(MSG_NAME);
    STPROC.BIND_I(T1);
    STPROC.BIND_I(V1);
    STPROC.BIND_I(T2);
    STPROC.BIND_I(V2);
    STPROC.BIND_I(T3);
    STPROC.BIND_I(V3);
    STPROC.BIND_I(T4);
    STPROC.BIND_I(V4);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
  X0 := ARP_STANDARD.FND_MESSAGE(MSG_NAME, T1, V1, T2, V2, T3, V3, T4, V4);
    RETURN X0;
  END FND_MESSAGE;

  FUNCTION FND_MESSAGE(MD_OPTIONS IN NUMBER
                      ,MSG_NAME IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
   /* STPROC.INIT('begin :X0 := ARP_STANDARD.FND_MESSAGE(:MD_OPTIONS, :MSG_NAME); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(MD_OPTIONS);
    STPROC.BIND_I(MSG_NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
  X0 := ARP_STANDARD.FND_MESSAGE(MD_OPTIONS, MSG_NAME);
    RETURN X0;
  END FND_MESSAGE;

  FUNCTION FND_MESSAGE(MD_OPTIONS IN NUMBER
                      ,MSG_NAME IN VARCHAR2
                      ,T1 IN VARCHAR2
                      ,V1 IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
  /*  STPROC.INIT('begin :X0 := ARP_STANDARD.FND_MESSAGE(:MD_OPTIONS, :MSG_NAME, :T1, :V1); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(MD_OPTIONS);
    STPROC.BIND_I(MSG_NAME);
    STPROC.BIND_I(T1);
    STPROC.BIND_I(V1);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
  X0 := ARP_STANDARD.FND_MESSAGE(MD_OPTIONS, MSG_NAME, T1, V1);
    RETURN X0;
  END FND_MESSAGE;

  FUNCTION FND_MESSAGE(MD_OPTIONS IN NUMBER
                      ,MSG_NAME IN VARCHAR2
                      ,T1 IN VARCHAR2
                      ,V1 IN VARCHAR2
                      ,T2 IN VARCHAR2
                      ,V2 IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := ARP_STANDARD.FND_MESSAGE(:MD_OPTIONS, :MSG_NAME, :T1, :V1, :T2, :V2); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(MD_OPTIONS);
    STPROC.BIND_I(MSG_NAME);
    STPROC.BIND_I(T1);
    STPROC.BIND_I(V1);
    STPROC.BIND_I(T2);
    STPROC.BIND_I(V2);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
  X0 := ARP_STANDARD.FND_MESSAGE(MD_OPTIONS, MSG_NAME, T1, V1, T2, V2);
    RETURN X0;
  END FND_MESSAGE;

  FUNCTION FND_MESSAGE(MD_OPTIONS IN NUMBER
                      ,MSG_NAME IN VARCHAR2
                      ,T1 IN VARCHAR2
                      ,V1 IN VARCHAR2
                      ,T2 IN VARCHAR2
                      ,V2 IN VARCHAR2
                      ,T3 IN VARCHAR2
                      ,V3 IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
   /* STPROC.INIT('begin :X0 := ARP_STANDARD.FND_MESSAGE(:MD_OPTIONS, :MSG_NAME, :T1, :V1, :T2, :V2, :T3, :V3); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(MD_OPTIONS);
    STPROC.BIND_I(MSG_NAME);
    STPROC.BIND_I(T1);
    STPROC.BIND_I(V1);
    STPROC.BIND_I(T2);
    STPROC.BIND_I(V2);
    STPROC.BIND_I(T3);
    STPROC.BIND_I(V3);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
  X0 := ARP_STANDARD.FND_MESSAGE(MD_OPTIONS, MSG_NAME, T1, V1,T2, V2, T3, V3);
    RETURN X0;
  END FND_MESSAGE;

  FUNCTION FND_MESSAGE(MD_OPTIONS IN NUMBER
                      ,MSG_NAME IN VARCHAR2
                      ,T1 IN VARCHAR2
                      ,V1 IN VARCHAR2
                      ,T2 IN VARCHAR2
                      ,V2 IN VARCHAR2
                      ,T3 IN VARCHAR2
                      ,V3 IN VARCHAR2
                      ,T4 IN VARCHAR2
                      ,V4 IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
   /* STPROC.INIT('begin :X0 := ARP_STANDARD.FND_MESSAGE(:MD_OPTIONS, :MSG_NAME, :T1, :V1, :T2, :V2, :T3, :V3, :T4, :V4); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(MD_OPTIONS);
    STPROC.BIND_I(MSG_NAME);
    STPROC.BIND_I(T1);
    STPROC.BIND_I(V1);
    STPROC.BIND_I(T2);
    STPROC.BIND_I(V2);
    STPROC.BIND_I(T3);
    STPROC.BIND_I(V3);
    STPROC.BIND_I(T4);
    STPROC.BIND_I(V4);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
  X0 := ARP_STANDARD.FND_MESSAGE(MD_OPTIONS, MSG_NAME, T1, V1, T2, V2, T3, V3, T4, V4);
    RETURN X0;
  END FND_MESSAGE;

  FUNCTION FUNCTIONAL_AMOUNT(AMOUNT IN NUMBER
                            ,CURRENCY_CODE IN VARCHAR2
                            ,EXCHANGE_RATE IN NUMBER
                            ,PRECISION IN NUMBER
                            ,MIN_ACC_UNIT IN NUMBER) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
   /* STPROC.INIT('begin :X0 := ARP_STANDARD.FUNCTIONAL_AMOUNT(:AMOUNT, :CURRENCY_CODE, :EXCHANGE_RATE, :PRECISION, :MIN_ACC_UNIT); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(AMOUNT);
    STPROC.BIND_I(CURRENCY_CODE);
    STPROC.BIND_I(EXCHANGE_RATE);
    STPROC.BIND_I(PRECISION);
    STPROC.BIND_I(MIN_ACC_UNIT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
		   X0 := ARP_STANDARD.FUNCTIONAL_AMOUNT(AMOUNT, CURRENCY_CODE, EXCHANGE_RATE, PRECISION, MIN_ACC_UNIT);
    RETURN X0;
  END FUNCTIONAL_AMOUNT;

 /* FUNCTION GL_DATE_RANGE_OPEN(PSTART_DATE IN VARCHAR2
                             ,PEND_DATE IN VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := ARP_STANDARD.GL_DATE_RANGE_OPEN(:PSTART_DATE, :PEND_DATE); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(PSTART_DATE);
    STPROC.BIND_I(PEND_DATE);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,X0);
    RETURN X0;
  END GL_DATE_RANGE_OPEN;

  FUNCTION AR_LOOKUP(LOOKUP_TYPE IN VARCHAR2
                    ,LOOKUP_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := ARP_STANDARD.AR_LOOKUP(:LOOKUP_TYPE, :LOOKUP_CODE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(LOOKUP_TYPE);
    STPROC.BIND_I(LOOKUP_CODE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END AR_LOOKUP;

  FUNCTION MD_MSG_NUMBER RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := ARP_STANDARD.MD_MSG_NUMBER; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END MD_MSG_NUMBER;

  FUNCTION MD_MSG_TEXT RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := ARP_STANDARD.MD_MSG_TEXT; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END MD_MSG_TEXT;

  FUNCTION MD_MSG_NAME RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := ARP_STANDARD.MD_MSG_NAME; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END MD_MSG_NAME;

  FUNCTION MD_MSG_TOKENS RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := ARP_STANDARD.MD_MSG_TOKENS; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END MD_MSG_TOKENS;

  FUNCTION MD_MSG_EXPLANATION RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := ARP_STANDARD.MD_MSG_EXPLANATION; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END MD_MSG_EXPLANATION;

  FUNCTION MD_MSG_FIND_NUMBER RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    STPROC.INIT('begin :X0 := ARP_STANDARD.MD_MSG_FIND_NUMBER; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END MD_MSG_FIND_NUMBER;

  PROCEDURE GL_PERIOD_INFO(GL_DATE IN DATE
                          ,PERIOD_NAME OUT NOCOPY VARCHAR2
                          ,START_DATE OUT NOCOPY DATE
                          ,END_DATE OUT NOCOPY DATE
                          ,CLOSING_STATUS OUT NOCOPY VARCHAR2
                          ,PERIOD_TYPE OUT NOCOPY VARCHAR2
                          ,PERIOD_YEAR OUT NOCOPY NUMBER
                          ,PERIOD_NUM OUT NOCOPY NUMBER
                          ,QUARTER_NUM OUT NOCOPY NUMBER) IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.GL_PERIOD_INFO(:GL_DATE, :PERIOD_NAME, :START_DATE, :END_DATE, :CLOSING_STATUS, :PERIOD_TYPE, :PERIOD_YEAR, :PERIOD_NUM, :QUARTER_NUM); end;');
    STPROC.BIND_I(GL_DATE);
    STPROC.BIND_O(PERIOD_NAME);
    STPROC.BIND_O(START_DATE);
    STPROC.BIND_O(END_DATE);
    STPROC.BIND_O(CLOSING_STATUS);
    STPROC.BIND_O(PERIOD_TYPE);
    STPROC.BIND_O(PERIOD_YEAR);
    STPROC.BIND_O(PERIOD_NUM);
    STPROC.BIND_O(QUARTER_NUM);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,PERIOD_NAME);
    STPROC.RETRIEVE(3
                   ,START_DATE);
    STPROC.RETRIEVE(4
                   ,END_DATE);
    STPROC.RETRIEVE(5
                   ,CLOSING_STATUS);
    STPROC.RETRIEVE(6
                   ,PERIOD_TYPE);
    STPROC.RETRIEVE(7
                   ,PERIOD_YEAR);
    STPROC.RETRIEVE(8
                   ,PERIOD_NUM);
    STPROC.RETRIEVE(9
                   ,QUARTER_NUM);
  END GL_PERIOD_INFO;

  FUNCTION GL_PERIOD_NAME(GL_DATE IN DATE) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := ARP_STANDARD.GL_PERIOD_NAME(:GL_DATE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(GL_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);
    RETURN X0;
  END GL_PERIOD_NAME;

  FUNCTION IS_GL_DATE_VALID(P_GL_DATE IN DATE
                           ,P_TRX_DATE IN DATE
                           ,P_VALIDATION_DATE1 IN DATE
                           ,P_VALIDATION_DATE2 IN DATE
                           ,P_VALIDATION_DATE3 IN DATE
                           ,P_ALLOW_NOT_OPEN_FLAG IN VARCHAR2
                           ,P_SET_OF_BOOKS_ID IN NUMBER
                           ,P_APPLICATION_ID IN NUMBER
                           ,P_CHECK_PERIOD_STATUS IN BOOLEAN) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    STPROC.INIT('declare X0rv BOOLEAN; X0P_CHECK_PERIOD_STATUS BOOLEAN;
    begin X0P_CHECK_PERIOD_STATUS := sys.diutil.int_to_bool(:P_CHECK_PERIOD_STATUS);
    X0rv := ARP_STANDARD.IS_GL_DATE_VALID(:P_GL_DATE, :P_TRX_DATE, :P_VALIDATION_DATE1,
    :P_VALIDATION_DATE2, :P_VALIDATION_DATE3, :P_ALLOW_NOT_OPEN_FLAG, :P_SET_OF_BOOKS_ID, :P_APPLICATION_ID, X0P_CHECK_PERIOD_STATUS);
    :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(P_CHECK_PERIOD_STATUS);
    STPROC.BIND_I(P_GL_DATE);
    STPROC.BIND_I(P_TRX_DATE);
    STPROC.BIND_I(P_VALIDATION_DATE1);
    STPROC.BIND_I(P_VALIDATION_DATE2);
    STPROC.BIND_I(P_VALIDATION_DATE3);
    STPROC.BIND_I(P_ALLOW_NOT_OPEN_FLAG);
    STPROC.BIND_I(P_SET_OF_BOOKS_ID);
    STPROC.BIND_I(P_APPLICATION_ID);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(10
                   ,X0);
    RETURN X0;
  END IS_GL_DATE_VALID;

  FUNCTION VALIDATE_AND_DEFAULT_GL_DATE(GL_DATE IN DATE
                                       ,TRX_DATE IN DATE
                                       ,VALIDATION_DATE1 IN DATE
                                       ,VALIDATION_DATE2 IN DATE
                                       ,VALIDATION_DATE3 IN DATE
                                       ,DEFAULT_DATE1 IN DATE
                                       ,DEFAULT_DATE2 IN DATE
                                       ,DEFAULT_DATE3 IN DATE
                                       ,P_ALLOW_NOT_OPEN_FLAG IN VARCHAR2
                                       ,P_INVOICING_RULE_ID IN VARCHAR2
                                       ,P_SET_OF_BOOKS_ID IN NUMBER
                                       ,P_APPLICATION_ID IN NUMBER
                                       ,DEFAULT_GL_DATE OUT NOCOPY DATE
                                       ,DEFAULTING_RULE_USED OUT NOCOPY VARCHAR2
                                       ,ERROR_MESSAGE OUT NOCOPY VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := ARP_STANDARD.VALIDATE_AND_DEFAULT_GL_DATE(:GL_DATE, :TRX_DATE, :VALIDATION_DATE1, :VALIDATION_DATE2,
    :VALIDATION_DATE3, :DEFAULT_DATE1, :DEFAULT_DATE2, :DEFAULT_DATE3, :P_ALLOW_NOT_OPEN_FLAG, :P_INVOICING_RULE_ID, :P_SET_OF_BOOKS_ID, :P_APPLICATION_ID, :DEFAULT_GL_DATE, :DEFAULTING_RULE_USED, :ERROR_MESSAGE);
    :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(GL_DATE);
    STPROC.BIND_I(TRX_DATE);
    STPROC.BIND_I(VALIDATION_DATE1);
    STPROC.BIND_I(VALIDATION_DATE2);
    STPROC.BIND_I(VALIDATION_DATE3);
    STPROC.BIND_I(DEFAULT_DATE1);
    STPROC.BIND_I(DEFAULT_DATE2);
    STPROC.BIND_I(DEFAULT_DATE3);
    STPROC.BIND_I(P_ALLOW_NOT_OPEN_FLAG);
    STPROC.BIND_I(P_INVOICING_RULE_ID);
    STPROC.BIND_I(P_SET_OF_BOOKS_ID);
    STPROC.BIND_I(P_APPLICATION_ID);
    STPROC.BIND_O(DEFAULT_GL_DATE);
    STPROC.BIND_O(DEFAULTING_RULE_USED);
    STPROC.BIND_O(ERROR_MESSAGE);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(13
                   ,DEFAULT_GL_DATE);
    STPROC.RETRIEVE(14
                   ,DEFAULTING_RULE_USED);
    STPROC.RETRIEVE(15
                   ,ERROR_MESSAGE);
    STPROC.RETRIEVE(16
                   ,X0);
    RETURN X0;
  END VALIDATE_AND_DEFAULT_GL_DATE;

  PROCEDURE DEBUG(LINE IN VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.DEBUG(:LINE); end;');
    STPROC.BIND_I(LINE);
    STPROC.EXECUTE;
  END DEBUG;

  PROCEDURE ENABLE_DEBUG IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.ENABLE_DEBUG; end;');
    STPROC.EXECUTE;
  END ENABLE_DEBUG;

  PROCEDURE ENABLE_DEBUG(BUFFER_SIZE IN NUMBER) IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.ENABLE_DEBUG(:BUFFER_SIZE); end;');
    STPROC.BIND_I(BUFFER_SIZE);
    STPROC.EXECUTE;
  END ENABLE_DEBUG;

  PROCEDURE DISABLE_DEBUG IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.DISABLE_DEBUG; end;');
    STPROC.EXECUTE;
  END DISABLE_DEBUG;

  PROCEDURE SET_WHO_INFORMATION(USER_ID IN NUMBER
                               ,REQUEST_ID IN NUMBER
                               ,PROGRAM_APPLICATION_ID IN NUMBER
                               ,PROGRAM_ID IN NUMBER
                               ,LAST_UPDATE_LOGIN IN NUMBER) IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.SET_WHO_INFORMATION(:USER_ID, :REQUEST_ID, :PROGRAM_APPLICATION_ID, :PROGRAM_ID, :LAST_UPDATE_LOGIN); end;');
    STPROC.BIND_I(USER_ID);
    STPROC.BIND_I(REQUEST_ID);
    STPROC.BIND_I(PROGRAM_APPLICATION_ID);
    STPROC.BIND_I(PROGRAM_ID);
    STPROC.BIND_I(LAST_UPDATE_LOGIN);
    STPROC.EXECUTE;
  END SET_WHO_INFORMATION;

  PROCEDURE SET_APPLICATION_INFORMATION(APPL_ID IN NUMBER
                                       ,LANGUAGE_ID IN NUMBER) IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.SET_APPLICATION_INFORMATION(:APPL_ID, :LANGUAGE_ID); end;');
    STPROC.BIND_I(APPL_ID);
    STPROC.BIND_I(LANGUAGE_ID);
    STPROC.EXECUTE;
  END SET_APPLICATION_INFORMATION;*/

  PROCEDURE FND_MESSAGE IS
  BEGIN
ARP_STANDARD.FND_MESSAGE;
/*
    STPROC.INIT('begin ARP_STANDARD.FND_MESSAGE; end;');
    STPROC.EXECUTE;*/
  END FND_MESSAGE;

/*  PROCEDURE FND_MESSAGE(MSG_NAME IN VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.FND_MESSAGE(:MSG_NAME); end;');
    STPROC.BIND_I(MSG_NAME);
    STPROC.EXECUTE;
  END FND_MESSAGE;

  PROCEDURE FND_MESSAGE(MSG_NAME IN VARCHAR2
                       ,T1 IN VARCHAR2
                       ,V1 IN VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.FND_MESSAGE(:MSG_NAME, :T1, :V1); end;');
    STPROC.BIND_I(MSG_NAME);
    STPROC.BIND_I(T1);
    STPROC.BIND_I(V1);
    STPROC.EXECUTE;
  END FND_MESSAGE;

  PROCEDURE FND_MESSAGE(MSG_NAME IN VARCHAR2
                       ,T1 IN VARCHAR2
                       ,V1 IN VARCHAR2
                       ,T2 IN VARCHAR2
                       ,V2 IN VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.FND_MESSAGE(:MSG_NAME, :T1, :V1, :T2, :V2); end;');
    STPROC.BIND_I(MSG_NAME);
    STPROC.BIND_I(T1);
    STPROC.BIND_I(V1);
    STPROC.BIND_I(T2);
    STPROC.BIND_I(V2);
    STPROC.EXECUTE;
  END FND_MESSAGE;

  PROCEDURE FND_MESSAGE(MSG_NAME IN VARCHAR2
                       ,T1 IN VARCHAR2
                       ,V1 IN VARCHAR2
                       ,T2 IN VARCHAR2
                       ,V2 IN VARCHAR2
                       ,T3 IN VARCHAR2
                       ,V3 IN VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.FND_MESSAGE(:MSG_NAME, :T1, :V1, :T2, :V2, :T3, :V3); end;');
    STPROC.BIND_I(MSG_NAME);
    STPROC.BIND_I(T1);
    STPROC.BIND_I(V1);
    STPROC.BIND_I(T2);
    STPROC.BIND_I(V2);
    STPROC.BIND_I(T3);
    STPROC.BIND_I(V3);
    STPROC.EXECUTE;
  END FND_MESSAGE;

  PROCEDURE FND_MESSAGE(MSG_NAME IN VARCHAR2
                       ,T1 IN VARCHAR2
                       ,V1 IN VARCHAR2
                       ,T2 IN VARCHAR2
                       ,V2 IN VARCHAR2
                       ,T3 IN VARCHAR2
                       ,V3 IN VARCHAR2
                       ,T4 IN VARCHAR2
                       ,V4 IN VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.FND_MESSAGE(:MSG_NAME, :T1, :V1, :T2, :V2, :T3, :V3, :T4, :V4); end;');
    STPROC.BIND_I(MSG_NAME);
    STPROC.BIND_I(T1);
    STPROC.BIND_I(V1);
    STPROC.BIND_I(T2);
    STPROC.BIND_I(V2);
    STPROC.BIND_I(T3);
    STPROC.BIND_I(V3);
    STPROC.BIND_I(T4);
    STPROC.BIND_I(V4);
    STPROC.EXECUTE;
  END FND_MESSAGE;

  PROCEDURE FND_MESSAGE(MD_OPTIONS IN NUMBER) IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.FND_MESSAGE(:MD_OPTIONS); end;');
    STPROC.BIND_I(MD_OPTIONS);
    STPROC.EXECUTE;
  END FND_MESSAGE;

  PROCEDURE FND_MESSAGE(MD_OPTIONS IN NUMBER
                       ,MSG_NAME IN VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.FND_MESSAGE(:MD_OPTIONS, :MSG_NAME); end;');
    STPROC.BIND_I(MD_OPTIONS);
    STPROC.BIND_I(MSG_NAME);
    STPROC.EXECUTE;
  END FND_MESSAGE;

  PROCEDURE FND_MESSAGE(MD_OPTIONS IN NUMBER
                       ,MSG_NAME IN VARCHAR2
                       ,T1 IN VARCHAR2
                       ,V1 IN VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.FND_MESSAGE(:MD_OPTIONS, :MSG_NAME, :T1, :V1); end;');
    STPROC.BIND_I(MD_OPTIONS);
    STPROC.BIND_I(MSG_NAME);
    STPROC.BIND_I(T1);
    STPROC.BIND_I(V1);
    STPROC.EXECUTE;
  END FND_MESSAGE;

  PROCEDURE FND_MESSAGE(MD_OPTIONS IN NUMBER
                       ,MSG_NAME IN VARCHAR2
                       ,T1 IN VARCHAR2
                       ,V1 IN VARCHAR2
                       ,T2 IN VARCHAR2
                       ,V2 IN VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.FND_MESSAGE(:MD_OPTIONS, :MSG_NAME, :T1, :V1, :T2, :V2); end;');
    STPROC.BIND_I(MD_OPTIONS);
    STPROC.BIND_I(MSG_NAME);
    STPROC.BIND_I(T1);
    STPROC.BIND_I(V1);
    STPROC.BIND_I(T2);
    STPROC.BIND_I(V2);
    STPROC.EXECUTE;
  END FND_MESSAGE;

  PROCEDURE FND_MESSAGE(MD_OPTIONS IN NUMBER
                       ,MSG_NAME IN VARCHAR2
                       ,T1 IN VARCHAR2
                       ,V1 IN VARCHAR2
                       ,T2 IN VARCHAR2
                       ,V2 IN VARCHAR2
                       ,T3 IN VARCHAR2
                       ,V3 IN VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.FND_MESSAGE(:MD_OPTIONS, :MSG_NAME, :T1, :V1, :T2, :V2, :T3, :V3); end;');
    STPROC.BIND_I(MD_OPTIONS);
    STPROC.BIND_I(MSG_NAME);
    STPROC.BIND_I(T1);
    STPROC.BIND_I(V1);
    STPROC.BIND_I(T2);
    STPROC.BIND_I(V2);
    STPROC.BIND_I(T3);
    STPROC.BIND_I(V3);
    STPROC.EXECUTE;
  END FND_MESSAGE;

  PROCEDURE FND_MESSAGE(MD_OPTIONS IN NUMBER
                       ,MSG_NAME IN VARCHAR2
                       ,T1 IN VARCHAR2
                       ,V1 IN VARCHAR2
                       ,T2 IN VARCHAR2
                       ,V2 IN VARCHAR2
                       ,T3 IN VARCHAR2
                       ,V3 IN VARCHAR2
                       ,T4 IN VARCHAR2
                       ,V4 IN VARCHAR2) IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.FND_MESSAGE(:MD_OPTIONS, :MSG_NAME, :T1, :V1, :T2, :V2, :T3, :V3, :T4, :V4); end;');
    STPROC.BIND_I(MD_OPTIONS);
    STPROC.BIND_I(MSG_NAME);
    STPROC.BIND_I(T1);
    STPROC.BIND_I(V1);
    STPROC.BIND_I(T2);
    STPROC.BIND_I(V2);
    STPROC.BIND_I(T3);
    STPROC.BIND_I(V3);
    STPROC.BIND_I(T4);
    STPROC.BIND_I(V4);
    STPROC.EXECUTE;
  END FND_MESSAGE;

  PROCEDURE GL_ACTIVITY(P_PERIOD_FROM IN VARCHAR2
                       ,P_PERIOD_TO IN VARCHAR2
                       ,P_CODE_COMBINATION_ID IN NUMBER
                       ,P_SET_OF_BOOKS_ID IN NUMBER
                       ,P_PERIOD_NET_DR OUT NOCOPY NUMBER
                       ,P_PERIOD_NET_CR OUT NOCOPY NUMBER) IS
  BEGIN
    STPROC.INIT('begin ARP_STANDARD.GL_ACTIVITY(:P_PERIOD_FROM, :P_PERIOD_TO, :P_CODE_COMBINATION_ID, :P_SET_OF_BOOKS_ID, :P_PERIOD_NET_DR, :P_PERIOD_NET_CR); end;');
    STPROC.BIND_I(P_PERIOD_FROM);
    STPROC.BIND_I(P_PERIOD_TO);
    STPROC.BIND_I(P_CODE_COMBINATION_ID);
    STPROC.BIND_I(P_SET_OF_BOOKS_ID);
    STPROC.BIND_O(P_PERIOD_NET_DR);
    STPROC.BIND_O(P_PERIOD_NET_CR);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(5
                   ,P_PERIOD_NET_DR);
    STPROC.RETRIEVE(6
                   ,P_PERIOD_NET_CR);
  END GL_ACTIVITY;

  PROCEDURE FIND_PREVIOUS_TRX_LINE_ID(P_CUSTOMER_TRX_LINE_ID IN NUMBER
                                     ,P_TAX_LINE_NUMBER IN NUMBER
                                     ,P_VAT_TAX_ID IN NUMBER
                                     ,P_TAX_CUSTOMER_TRX_ID OUT NOCOPY NUMBER
                                     ,P_TAX_CUSTOMER_TRX_LINE_ID OUT NOCOPY NUMBER
                                     ,P_CHK_APPLIED_CM IN BOOLEAN) IS
  BEGIN
    STPROC.INIT('declare P_CHK_APPLIED_CM BOOLEAN;
    begin P_CHK_APPLIED_CM := sys.diutil.int_to_bool(:P_CHK_APPLIED_CM); ARP_STANDARD.FIND_PREVIOUS_TRX_LINE_ID(:P_CUSTOMER_TRX_LINE_ID, :P_TAX_LINE_NUMBER,
    :P_VAT_TAX_ID, :P_TAX_CUSTOMER_TRX_ID, :P_TAX_CUSTOMER_TRX_LINE_ID, P_CHK_APPLIED_CM);
    end;');
    STPROC.BIND_I(P_CHK_APPLIED_CM);
    STPROC.BIND_I(P_CUSTOMER_TRX_LINE_ID);
    STPROC.BIND_I(P_TAX_LINE_NUMBER);
    STPROC.BIND_I(P_VAT_TAX_ID);
    STPROC.BIND_O(P_TAX_CUSTOMER_TRX_ID);
    STPROC.BIND_O(P_TAX_CUSTOMER_TRX_LINE_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(5
                   ,P_TAX_CUSTOMER_TRX_ID);
    STPROC.RETRIEVE(6
                   ,P_TAX_CUSTOMER_TRX_LINE_ID);
  END FIND_PREVIOUS_TRX_LINE_ID;
*/

 /* FUNCTION GET_APP_INFO(APPLICATION_SHORT_NAME IN VARCHAR2
                       ,STATUS OUT NOCOPY VARCHAR2
                       ,INDUSTRY OUT NOCOPY VARCHAR2
                       ,ORACLE_SCHEMA OUT NOCOPY VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := FND_INSTALLATION.GET_APP_INFO(:APPLICATION_SHORT_NAME, :STATUS, :INDUSTRY, :ORACLE_SCHEMA);
    :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(APPLICATION_SHORT_NAME);
    STPROC.BIND_O(STATUS);
    STPROC.BIND_O(INDUSTRY);
    STPROC.BIND_O(ORACLE_SCHEMA);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,STATUS);
    STPROC.RETRIEVE(3
                   ,INDUSTRY);
    STPROC.RETRIEVE(4
                   ,ORACLE_SCHEMA);
    STPROC.RETRIEVE(5
                   ,X0);
    RETURN X0;
  END GET_APP_INFO;

  FUNCTION GET_APP_INFO_OTHER(APPLICATION_SHORT_NAME IN VARCHAR2
                             ,TARGET_SCHEMA IN VARCHAR2
                             ,STATUS OUT NOCOPY VARCHAR2
                             ,INDUSTRY OUT NOCOPY VARCHAR2
                             ,ORACLE_SCHEMA OUT NOCOPY VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := FND_INSTALLATION.GET_APP_INFO_OTHER(:APPLICATION_SHORT_NAME, :TARGET_SCHEMA, :STATUS, :INDUSTRY, :ORACLE_SCHEMA);
    :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(APPLICATION_SHORT_NAME);
    STPROC.BIND_I(TARGET_SCHEMA);
    STPROC.BIND_O(STATUS);
    STPROC.BIND_O(INDUSTRY);
    STPROC.BIND_O(ORACLE_SCHEMA);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,STATUS);
    STPROC.RETRIEVE(4
                   ,INDUSTRY);
    STPROC.RETRIEVE(5
                   ,ORACLE_SCHEMA);
    STPROC.RETRIEVE(6
                   ,X0);
    RETURN X0;
  END GET_APP_INFO_OTHER;*/



  FUNCTION GET(APPL_ID IN INTEGER
              ,DEP_APPL_ID IN INTEGER
              ,STATUS OUT NOCOPY VARCHAR2
              ,INDUSTRY OUT NOCOPY VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
     X0rv BOOLEAN;
  BEGIN
  /*  STPROC.INIT('declare X0rv BOOLEAN;
  begin X0rv := FND_INSTALLATION.GET(:APPL_ID, :DEP_APPL_ID, :STATUS, :INDUSTRY);
  :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(APPL_ID);
    STPROC.BIND_I(DEP_APPL_ID);
    STPROC.BIND_O(STATUS);
    STPROC.BIND_O(INDUSTRY);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,STATUS);
    STPROC.RETRIEVE(4
                   ,INDUSTRY);
    STPROC.RETRIEVE(5
                   ,X0);*/
 X0rv := FND_INSTALLATION.GET(APPL_ID, DEP_APPL_ID, STATUS, INDUSTRY);
--X0 := sys.diutil.bool_to_int(X0rv);


    RETURN X0rv;
  END GET;


END IGI_IGIRRTRH_XMLP_PKG;


/
