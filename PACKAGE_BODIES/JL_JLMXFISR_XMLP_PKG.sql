--------------------------------------------------------
--  DDL for Package Body JL_JLMXFISR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JL_JLMXFISR_XMLP_PKG" AS
/* $Header: JLMXFISRB.pls 120.2 2008/01/11 05:07:34 abraghun noship $ */
  PROCEDURE GET_BASE_CURR_DATA IS
    BASE_CURR FND_CURRENCIES_VL.CURRENCY_CODE%TYPE;
    PREC FND_CURRENCIES_VL.PRECISION%TYPE;
    MIN_AU FND_CURRENCIES_VL.MINIMUM_ACCOUNTABLE_UNIT%TYPE;
    DESCR FND_CURRENCIES_VL.DESCRIPTION%TYPE;
  BEGIN
    BASE_CURR := '';
    PREC := 0;
    MIN_AU := 0;
    DESCR := '';
    SELECT
      COMPANY_NAME,
      CATEGORY_FLEX_STRUCTURE
    INTO C_ORGANIZATION_NAME,CAT_FLEX_STRUCT
    FROM
      FA_SYSTEM_CONTROLS;
    IF UPPER(P_MRCSOBTYPE) = 'R' THEN
      BEGIN
        SELECT
          FCURR.CURRENCY_CODE,
          FCURR.PRECISION,
          FCURR.MINIMUM_ACCOUNTABLE_UNIT,
          FCURR.DESCRIPTION
        INTO BASE_CURR,PREC,MIN_AU,DESCR
        FROM
          FA_BOOK_CONTROLS_MRC_V BKCTRL,
          FND_CURRENCIES_VL FCURR,
          GL_SETS_OF_BOOKS GSBKS
        WHERE BKCTRL.BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
          AND BKCTRL.SET_OF_BOOKS_ID = GSBKS.SET_OF_BOOKS_ID
          AND GSBKS.CURRENCY_CODE = FCURR.CURRENCY_CODE;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RAISE_ERR('JL_AR_FA_CURR_DET_NOT_DEFINED'
                   ,'N');
        WHEN OTHERS THEN
          RAISE_ORA_ERR;
      END;
    ELSE
      BEGIN
        SELECT
          FCURR.CURRENCY_CODE,
          FCURR.PRECISION,
          FCURR.MINIMUM_ACCOUNTABLE_UNIT,
          FCURR.DESCRIPTION
        INTO BASE_CURR,PREC,MIN_AU,DESCR
        FROM
          FA_BOOK_CONTROLS BKCTRL,
          FND_CURRENCIES_VL FCURR,
          GL_SETS_OF_BOOKS GSBKS
        WHERE BKCTRL.BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
          AND BKCTRL.SET_OF_BOOKS_ID = GSBKS.SET_OF_BOOKS_ID
          AND GSBKS.CURRENCY_CODE = FCURR.CURRENCY_CODE;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RAISE_ERR('JL_AR_FA_CURR_DET_NOT_DEFINED'
                   ,'N');
        WHEN OTHERS THEN
          RAISE_ORA_ERR;
      END;
    END IF;
    C_BASE_CURRENCY_CODE := BASE_CURR;
    C_BASE_PRECISION := PREC;
    C_BASE_MIN_ACCT_UNIT := MIN_AU;
    C_BASE_DESCRIPTION := DESCR;
  END GET_BASE_CURR_DATA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_PRICE_INDEXFORMULA(ASSET_CAT_ID IN NUMBER
                               ,ACQDATE IN DATE) RETURN NUMBER IS
    X NUMBER(15);
    CATEGORY_DESC VARCHAR2(40);
    ERRMSG VARCHAR2(1000);
  BEGIN
    SELECT
      FPI.PRICE_INDEX_ID
    INTO X
    FROM
      FA_PRICE_INDEXES FPI,
      FA_CATEGORY_BOOK_DEFAULTS FCBD
    WHERE FCBD.BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
      AND FCBD.CATEGORY_ID = ASSET_CAT_ID
      AND ACQDATE >= FCBD.START_DPIS
      AND ACQDATE <= NVL(FCBD.END_DPIS
       ,ACQDATE)
      AND FCBD.PRICE_INDEX_NAME = FPI.PRICE_INDEX_NAME;
    IF X IS NULL THEN
      RAISE NO_DATA_FOUND;
    END IF;
    RETURN (X);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      SELECT
        DESCRIPTION
      INTO CATEGORY_DESC
      FROM
        FA_CATEGORIES
      WHERE CATEGORY_ID = ASSET_CAT_ID;
      SET_NAME('JL'
              ,'JL_ZZ_FA_INDX_NOT_DEF_FOR_CATG');
      SET_TOKEN('ASSET_CATEGORY'
               ,CATEGORY_DESC
               ,FALSE);
      ERRMSG := GET;
      /*SRW.MESSAGE(JL_ZZ_FA_UTILITIES_PKG.GET_APP_ERRNUM('JL'
                                                       ,'JL_ZZ_FA_INDX_NOT_DEF_FOR_CATG')
                 ,ERRMSG)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      RETURN NULL;
    WHEN OTHERS THEN
      RAISE_ORA_ERR;
      RETURN NULL;
  END C_PRICE_INDEXFORMULA;

  FUNCTION C_INDEX_VALUEFORMULA(C_PRICE_INDEX IN NUMBER
                               ,ACQDATE IN DATE) RETURN NUMBER IS
    X NUMBER;
    ERRMSG VARCHAR2(1000);
    INDEX_NAME VARCHAR2(40);
  BEGIN
    SELECT
      PRICE_INDEX_VALUE
    INTO X
    FROM
      FA_PRICE_INDEX_VALUES
    WHERE PRICE_INDEX_ID = C_PRICE_INDEX
      AND ACQDATE BETWEEN FROM_DATE
      AND TO_DATE;
    RETURN (NVL(X
              ,0));
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      SELECT
        PRICE_INDEX_NAME
      INTO INDEX_NAME
      FROM
        FA_PRICE_INDEXES
      WHERE PRICE_INDEX_ID = C_PRICE_INDEX;
      SET_NAME('JL'
              ,'JL_ZZ_FA_INDX_VAL_NOT_FOUND');
      SET_TOKEN('PRICE_INDEX'
               ,INDEX_NAME
               ,FALSE);
      SET_TOKEN('MISSING_DATE'
               ,TO_CHAR(ACQDATE)
               ,FALSE);
      ERRMSG := GET;
      /*SRW.MESSAGE(JL_ZZ_FA_UTILITIES_PKG.GET_APP_ERRNUM('JL'
                                                       ,'JL_ZZ_FA_INDX_VAL_NOT_FOUND')
                 ,ERRMSG)*/NULL;
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      RETURN NULL;
    WHEN OTHERS THEN
      RAISE_ORA_ERR;
      RETURN NULL;
  END C_INDEX_VALUEFORMULA;

  FUNCTION C_CORR_FACTORFORMULA(C_INDEX_VALUE_HALF_PERIOD IN NUMBER
                               ,C_INDEX_VALUE IN NUMBER) RETURN NUMBER IS
    FACTOR NUMBER;
  BEGIN
    RETURN (TRUNC(C_INDEX_VALUE_HALF_PERIOD / C_INDEX_VALUE
                ,C_RATIO_PRECISION));
  END C_CORR_FACTORFORMULA;

  FUNCTION C_ACCUM_DEPRN_PREV_YRFORMULA(ASSET_ID IN NUMBER
                                       ,PERIOD_COUNTER IN NUMBER
                                       ,ORIGINAL_COST IN NUMBER
                                       ,RETIREMENT_ID IN NUMBER) RETURN NUMBER IS
    T_ACC_DEPRN_PREV_FY NUMBER;
  BEGIN
  prc_prev_fiscal_year_deprn(asset_id,
                             p_book_type_code,
                             c_min_period_counter,
                             c_max_period_counter,
                             period_counter,
                             original_cost,
                             retirement_id,
                             t_acc_deprn_prev_fy);
 /*   PRC_PREV_FISCAL_YEAR_DEPRN(P_ACC_DEPRN_PREV_FY
                              ,P_RETIREMENT_ID
                              ,P_COST_RETIRED
                              ,P_PERIOD_COUNTER
                              ,P_PERIOD_END
                              ,P_PERIOD_START
                              ,P_BOOK_TYPE_CODE
                              ,P_ASSET_ID
                              ,RETIREMENT_ID);*/
    RETURN (T_ACC_DEPRN_PREV_FY);
  END C_ACCUM_DEPRN_PREV_YRFORMULA;

  FUNCTION C_ADJ_ACCUM_DEPRNFORMULA(C_ACCUM_DEPRN_CURR_YR IN NUMBER
                                   ,C_CORR_FACTOR IN NUMBER
                                   ,ASSET_ID IN NUMBER
                                   ,TRANSACTION_HEADER_ID_IN IN NUMBER
                                   ,TRANSACTION_HEADER_ID_OUT IN NUMBER
                                   ,DESCRIPTION IN VARCHAR2
                                   ,ASSET_CAT_ID IN NUMBER
                                   ,ASSET_NUMBER IN VARCHAR2
                                   ,ACQDATE IN DATE
                                   ,PRORATE_DATE IN DATE
                                   ,RETIREMENT_ID IN NUMBER
                                   ,C_INDEX_VALUE IN NUMBER
                                   ,ORIGINAL_COST IN NUMBER
                                   ,C_ACCUM_DEPRN_PREV_YR IN NUMBER
                                   ,PERIOD_COUNTER_FULLY_RESERVED IN NUMBER) RETURN NUMBER IS
    ACCUM_DEPRN NUMBER;
    PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    ACCUM_DEPRN := NVL(C_ACCUM_DEPRN_CURR_YR
                      ,0) * NVL(C_CORR_FACTOR
                      ,0);
    INSERT INTO JL_MX_FA_ISR_IMPAC
      (PROCESS_ID
      ,ASSET_ID
      ,TRANSACTION_HEADER_ID_IN
      ,TRANSACTION_HEADER_ID_OUT
      ,DESCRIPTION
      ,ASSET_CATEGORY_ID
      ,ASSET_NUMBER
      ,DATE_PLACED_IN_SERVICE
      ,PRORATE_DATE
      ,RETIREMENT_ID
      ,INPC
      ,ORIGINAL_COST
      ,ACCUM_DEPRN_PREVIOUS_FY
      ,ADJUSTED_DEPRN_CURRENT_FY
      ,PERIOD_COUNTER_FULLY_RESERVED
      ,LAST_UPDATE_DATE
      ,LAST_UPDATED_BY
      ,CREATION_DATE
      ,CREATED_BY
      ,LAST_UPDATE_LOGIN)
    VALUES   (P_CONC_REQUEST_ID
      ,ASSET_ID
      ,TRANSACTION_HEADER_ID_IN
      ,TRANSACTION_HEADER_ID_OUT
      ,DESCRIPTION
      ,ASSET_CAT_ID
      ,ASSET_NUMBER
      ,ACQDATE
      ,PRORATE_DATE
      ,RETIREMENT_ID
      ,C_INDEX_VALUE
      ,ORIGINAL_COST
      ,C_ACCUM_DEPRN_PREV_YR
      ,ACCUM_DEPRN
      ,PERIOD_COUNTER_FULLY_RESERVED
      ,SYSDATE
      ,-1
      ,SYSDATE
      ,C_USER_ID
      ,C_USER_ID);
      commit;
    RETURN (ACCUM_DEPRN);
  END C_ADJ_ACCUM_DEPRNFORMULA;

  FUNCTION C_ACCUM_DEPRNFORMULA(STATUS IN VARCHAR2
                               ,TRANSACTION_HEADER_ID_OUT IN NUMBER
                               ,TRANSACTION_HEADER_ID_IN IN NUMBER
                               ,ASSET_ID IN NUMBER
                               ,PERIOD_COUNTER IN NUMBER
                               ,RETIREMENT_ID IN NUMBER
                               ,ORIGINAL_COST IN NUMBER) RETURN NUMBER IS
    T_ACC_DEPRN_LIFE_TD NUMBER;
    T_TRANSACTION_HEADER_ID_IN_OUT NUMBER;
  BEGIN
    IF STATUS = 'R' THEN
      T_TRANSACTION_HEADER_ID_IN_OUT := TRANSACTION_HEADER_ID_OUT;
    ELSE
      T_TRANSACTION_HEADER_ID_IN_OUT := TRANSACTION_HEADER_ID_IN;
    END IF;
    PRC_LIFE_TO_DATE_DEPRN(ASSET_ID
                          ,P_BOOK_TYPE_CODE
                          ,T_TRANSACTION_HEADER_ID_IN_OUT
                          ,C_MIN_PERIOD_COUNTER
                          ,C_MAX_PERIOD_COUNTER
                          ,PERIOD_COUNTER
                          ,RETIREMENT_ID
                          ,ORIGINAL_COST
                          ,T_ACC_DEPRN_LIFE_TD);
    RETURN (T_ACC_DEPRN_LIFE_TD);
  END C_ACCUM_DEPRNFORMULA;

  FUNCTION C_ACCUM_DEPRN_CURR_YRFORMULA(C_ACCUM_DEPRN IN NUMBER
                                       ,C_ACCUM_DEPRN_PREV_YR IN NUMBER) RETURN NUMBER IS
    T_ACC_DEPRN_CURR_FY NUMBER;
  BEGIN
    T_ACC_DEPRN_CURR_FY := C_ACCUM_DEPRN - C_ACCUM_DEPRN_PREV_YR;
    RETURN (T_ACC_DEPRN_CURR_FY);
  END C_ACCUM_DEPRN_CURR_YRFORMULA;

  FUNCTION C_INDEX_VALUE_HALF_PERIODFORMU(RETIREMENT_ID_1 IN NUMBER
                                         ,ACQDATE IN DATE
                                         ,C_PRICE_INDEX IN NUMBER) RETURN NUMBER IS
    MON_RETIRED VARCHAR2(2);
    MON_ACQUIRED VARCHAR2(2);
    MIDDLE_MONTH VARCHAR2(2);
    INPC_HALF NUMBER;
    HALF_PERIOD_DATE DATE;
    YEAR VARCHAR2(4);
    ERRMSG VARCHAR2(1000);
    INDEX_NAME VARCHAR2(40);
  BEGIN
    IF RETIREMENT_ID_1 IS NOT NULL THEN
      IF UPPER(P_MRCSOBTYPE) = 'R' THEN
        BEGIN
          SELECT
            TO_CHAR(A.DATE_RETIRED
                   ,'MM')
          INTO MON_RETIRED
          FROM
            FA_RETIREMENTS_MRC_V A
          WHERE A.RETIREMENT_ID = RETIREMENT_ID_1;
        EXCEPTION
          WHEN OTHERS THEN
            MON_RETIRED := 13;
        END;
      ELSE
        BEGIN
          SELECT
            TO_CHAR(A.DATE_RETIRED
                   ,'MM')
          INTO MON_RETIRED
          FROM
            FA_RETIREMENTS A
          WHERE A.RETIREMENT_ID = RETIREMENT_ID_1;
        EXCEPTION
          WHEN OTHERS THEN
            MON_RETIRED := 13;
        END;
      END IF;
    ELSE
      MON_RETIRED := 13;
    END IF;
    IF ACQDATE BETWEEN C_FISCAL_START_DATE AND C_FISCAL_END_DATE THEN
      MON_ACQUIRED := TO_NUMBER(TO_CHAR(ACQDATE
                                       ,'MM'));
    ELSE
      MON_ACQUIRED := 0;
    END IF;
    MIDDLE_MONTH := JL_ZZ_FA_FUNCTIONS_PKG.MIDDLE_MONTH(MON_ACQUIRED
                                                       ,MON_RETIRED
                                                       ,P_INCLUDE_DPIS
                                                       ,P_INCLUDE_RET);
    IF MIDDLE_MONTH = '0' THEN
      YEAR := TO_CHAR(C_FISCAL_START_DATE - 365
                     ,'YYYY');
      MIDDLE_MONTH := '12';
    ELSE
      YEAR := TO_CHAR(C_FISCAL_START_DATE
                     ,'YYYY');
    END IF;
    HALF_PERIOD_DATE := LAST_DAY(TO_DATE('01-' || LPAD(MIDDLE_MONTH
                                             ,2
                                             ,'0') || '-' || YEAR
                                        ,'DD-MM-YYYY'));
    BEGIN
      SELECT
        PRICE_INDEX_VALUE
      INTO INPC_HALF
      FROM
        FA_PRICE_INDEX_VALUES
      WHERE PRICE_INDEX_ID = C_PRICE_INDEX
        AND HALF_PERIOD_DATE BETWEEN FROM_DATE
        AND TO_DATE;
      RETURN (NVL(INPC_HALF
                ,0));
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        SELECT
          PRICE_INDEX_NAME
        INTO INDEX_NAME
        FROM
          FA_PRICE_INDEXES
        WHERE PRICE_INDEX_ID = C_PRICE_INDEX;
        SET_NAME('JL'
                ,'JL_ZZ_FA_INDX_VAL_NOT_FOUND');
        SET_TOKEN('PRICE_INDEX'
                 ,INDEX_NAME
                 ,FALSE);
        SET_TOKEN('MISSING_DATE'
                 ,TO_CHAR(HALF_PERIOD_DATE)
                 ,FALSE);
        ERRMSG := GET;
        /*SRW.MESSAGE(JL_ZZ_FA_UTILITIES_PKG.GET_APP_ERRNUM('JL'
                                                         ,'JL_ZZ_FA_INDX_VAL_NOT_FOUND')
                   ,ERRMSG)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
        RETURN NULL;
      WHEN OTHERS THEN
        RAISE_ORA_ERR;
        RETURN NULL;
    END;
  END C_INDEX_VALUE_HALF_PERIODFORMU;

  PROCEDURE CUSTOM_INIT IS
    FIS_YR NUMBER(4);
    MAX_PER_COUNTER NUMBER(15);
    MIN_PER_COUNTER NUMBER(15);
    LAST_PER_COUNTER NUMBER(15);
    V_RATIO_PRECISION VARCHAR2(10);
    FROM_DATE DATE;
    TO_DATE DATE;
  BEGIN
    /*SRW.USER_EXIT('FND GETPROFILE NAME="CONC_REQUEST_ID", FIELD=":P_PROCESS_ID"')*/NULL;
    /*SRW.USER_EXIT('FND GETPROFILE NAME="USER_ID", FIELD=":C_USER_ID"')*/NULL;
    FND_PROFILE.GET('JLZZ_INF_RATIO_PRECISION'
                   ,V_RATIO_PRECISION);
    IF V_RATIO_PRECISION IS NULL THEN
      C_RATIO_PRECISION := 38;
    ELSE
      C_RATIO_PRECISION := TO_NUMBER(V_RATIO_PRECISION);
    END IF;
    IF UPPER(P_MRCSOBTYPE) = 'R' THEN
      BEGIN
        SELECT
          MIN(PERIOD_COUNTER),
          MAX(PERIOD_COUNTER)
        INTO MIN_PER_COUNTER,MAX_PER_COUNTER
        FROM
          FA_DEPRN_PERIODS_MRC_V
        WHERE BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
          AND FISCAL_YEAR = P_CURR_FY;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RAISE_ERR('JL_AR_FA_CUR_FY_DEP_PER_NOTDEF'
                   ,'N');
        WHEN OTHERS THEN
          RAISE_ORA_ERR;
      END;
      C_MIN_PERIOD_COUNTER := MIN_PER_COUNTER;
      C_MAX_PERIOD_COUNTER := MAX_PER_COUNTER;
      BEGIN
        SELECT
          MAX(PERIOD_COUNTER)
        INTO LAST_PER_COUNTER
        FROM
          FA_DEPRN_PERIODS_MRC_V
        WHERE BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
          AND FISCAL_YEAR = P_CURR_FY - 1;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RAISE_ERR('JL_AR_FA_PRV_FY_DEP_PER_NOTDEF'
                   ,'N');
        WHEN OTHERS THEN
          RAISE_ORA_ERR;
      END;
      C_LAST_PERIOD_COUNTER := LAST_PER_COUNTER;
      BEGIN
        SELECT
          A.START_DATE,
          A.END_DATE
        INTO FROM_DATE,TO_DATE
        FROM
          FA_BOOK_CONTROLS_MRC_V B,
          FA_FISCAL_YEAR A
        WHERE A.FISCAL_YEAR = P_CURR_FY
          AND B.BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
          AND B.FISCAL_YEAR_NAME = A.FISCAL_YEAR_NAME;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RAISE_ERR('JL_AR_FA_FY_DETAIL_NOT_DEFINED'
                   ,'Y');
        WHEN OTHERS THEN
          RAISE_ORA_ERR;
      END;
      C_FISCAL_START_DATE := FROM_DATE;
      C_FISCAL_END_DATE := TO_DATE;
    ELSE
      BEGIN
        SELECT
          MIN(PERIOD_COUNTER),
          MAX(PERIOD_COUNTER)
        INTO MIN_PER_COUNTER,MAX_PER_COUNTER
        FROM
          FA_DEPRN_PERIODS
        WHERE BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
          AND FISCAL_YEAR = P_CURR_FY;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RAISE_ERR('JL_AR_FA_CUR_FY_DEP_PER_NOTDEF'
                   ,'N');
        WHEN OTHERS THEN
          RAISE_ORA_ERR;
      END;
      C_MIN_PERIOD_COUNTER := MIN_PER_COUNTER;
      C_MAX_PERIOD_COUNTER := MAX_PER_COUNTER;
      BEGIN
        SELECT
          MAX(PERIOD_COUNTER)
        INTO LAST_PER_COUNTER
        FROM
          FA_DEPRN_PERIODS
        WHERE BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
          AND FISCAL_YEAR = P_CURR_FY - 1;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RAISE_ERR('JL_AR_FA_PRV_FY_DEP_PER_NOTDEF'
                   ,'N');
        WHEN OTHERS THEN
          RAISE_ORA_ERR;
      END;
      C_LAST_PERIOD_COUNTER := LAST_PER_COUNTER;
      BEGIN
        SELECT
          A.START_DATE,
          A.END_DATE
        INTO FROM_DATE,TO_DATE
        FROM
          FA_BOOK_CONTROLS B,
          FA_FISCAL_YEAR A
        WHERE A.FISCAL_YEAR = P_CURR_FY
          AND B.BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
          AND B.FISCAL_YEAR_NAME = A.FISCAL_YEAR_NAME;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RAISE_ERR('JL_AR_FA_FY_DETAIL_NOT_DEFINED'
                   ,'Y');
        WHEN OTHERS THEN
          RAISE_ORA_ERR;
      END;
      C_FISCAL_START_DATE := FROM_DATE;
      C_FISCAL_END_DATE := TO_DATE;
    END IF;
  END CUSTOM_INIT;

  PROCEDURE RAISE_ERR(MSGNAME IN VARCHAR2
                     ,ABORT_FLAG IN VARCHAR2) IS
    ERRMSG VARCHAR2(1000);
  BEGIN
    SET_NAME('JL'
            ,MSGNAME);
    ERRMSG := GET;
    /*SRW.MESSAGE(JL_ZZ_FA_UTILITIES_PKG.GET_APP_ERRNUM('JL'
                                                     ,MSGNAME)
               ,ERRMSG)*/NULL;
    IF ABORT_FLAG = 'Y' THEN
      /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END IF;
  END RAISE_ERR;

  PROCEDURE RAISE_ORA_ERR IS
    ERRMSG VARCHAR2(1000);
    ERRNUM NUMBER;
  BEGIN
    ERRMSG := SQLERRM;
    ERRNUM := SQLCODE;
    /*SRW.MESSAGE(ERRNUM
               ,ERRMSG)*/NULL;
    /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
  END RAISE_ORA_ERR;

  PROCEDURE PRC_PREV_FISCAL_YEAR_DEPRN(P_ASSET_ID IN NUMBER
                                      ,P_BOOK_TYPE_CODE IN VARCHAR
                                      ,P_PERIOD_START IN NUMBER
                                      ,P_PERIOD_END IN NUMBER
                                      ,P_PERIOD_COUNTER IN NUMBER
                                      ,P_COST_RETIRED IN NUMBER
                                      ,P_RETIREMENT_ID IN NUMBER
                                      ,P_ACC_DEPRN_PREV_FY OUT NOCOPY NUMBER) IS
    L_NR_COST NUMBER;
    L_HAS_RESERVE_ADJUSTMENT NUMBER := 0;
    L_HAS_RETIREMENT NUMBER := 0;
    L_TOTAL_DEPRN_ADJUSTMENT NUMBER := 0;
    L_LAST_DEPRN_PERIOD_PREV_FY NUMBER := 0;
    L_ACC_DEPRN_PREV_FY NUMBER := 0;
    L_ADJUSTED_COST_PREV_FY NUMBER := 0;
    L_PREV_ADJUSTED_COST NUMBER;
    L_COST_RETIRED NUMBER;
    L_ADJ_COST_LESS_PART_RET NUMBER;
    L_COST_BEGIN_YEAR NUMBER;
    CURSOR C_RET_DEPRN_SUMMARY IS
      SELECT
        FDS.ADJUSTED_COST,
        FDS.PERIOD_COUNTER
      FROM
        FA_DEPRN_SUMMARY FDS
      WHERE FDS.BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
        AND FDS.ASSET_ID = P_ASSET_ID
        AND FDS.PERIOD_COUNTER between P_PERIOD_START
        AND P_PERIOD_COUNTER;
    CURSOR C_RET_DEPRN_SUMMARY_MRC IS
      SELECT
        FDS.ADJUSTED_COST,
        FDS.PERIOD_COUNTER
      FROM
        FA_DEPRN_SUMMARY_MRC_V FDS
      WHERE FDS.BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
        AND FDS.ASSET_ID = P_ASSET_ID
        AND FDS.PERIOD_COUNTER between P_PERIOD_START
        AND P_PERIOD_COUNTER;
  BEGIN
    P_ACC_DEPRN_PREV_FY := 0;
    IF UPPER(P_MRCSOBTYPE) = 'R' THEN
      BEGIN
        SELECT
          PERIOD_COUNTER,
          DEPRN_RESERVE,
          ADJUSTED_COST
        INTO L_LAST_DEPRN_PERIOD_PREV_FY,L_ACC_DEPRN_PREV_FY,L_ADJUSTED_COST_PREV_FY
        FROM
          FA_DEPRN_SUMMARY_MRC_V
        WHERE BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
          AND ASSET_ID = P_ASSET_ID
          AND PERIOD_COUNTER = (
          SELECT
            MAX(FDS2.PERIOD_COUNTER)
          FROM
            FA_DEPRN_SUMMARY_MRC_V FDS2
          WHERE FDS2.BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
            AND FDS2.ASSET_ID = P_ASSET_ID
            AND FDS2.PERIOD_COUNTER <= P_PERIOD_START - 1 );
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          L_ACC_DEPRN_PREV_FY := 0;
        WHEN OTHERS THEN
          L_ACC_DEPRN_PREV_FY := -1;
      END;
      IF L_ACC_DEPRN_PREV_FY = 0 THEN
        P_ACC_DEPRN_PREV_FY := 0;
        RETURN;
      END IF;
      BEGIN
        SELECT
          COUNT(RET.RETIREMENT_ID)
        INTO L_HAS_RETIREMENT
        FROM
          FA_RETIREMENTS_MRC_V RET,
          FA_DEPRN_PERIODS_MRC_V FDP
        WHERE RET.BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
          AND RET.STATUS <> 'DELETED'
          AND RET.BOOK_TYPE_CODE = FDP.BOOK_TYPE_CODE
          AND RET.ASSET_ID = P_ASSET_ID
          AND RET.DATE_RETIRED between FDP.CALENDAR_PERIOD_OPEN_DATE
          AND FDP.CALENDAR_PERIOD_CLOSE_DATE
          AND FDP.FISCAL_YEAR = P_CURR_FY;
      END;
      IF L_HAS_RETIREMENT = 0 THEN
        P_ACC_DEPRN_PREV_FY := L_ACC_DEPRN_PREV_FY;
        RETURN;
      END IF;
      BEGIN
        SELECT
          COUNT(FDD.DEPRN_ADJUSTMENT_AMOUNT),
          SUM(FDD.DEPRN_ADJUSTMENT_AMOUNT)
        INTO L_HAS_RESERVE_ADJUSTMENT,L_TOTAL_DEPRN_ADJUSTMENT
        FROM
          FA_DEPRN_DETAIL_MRC_V FDD
        WHERE FDD.BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
          AND FDD.ASSET_ID = P_ASSET_ID
          AND FDD.PERIOD_COUNTER between P_PERIOD_START
          AND P_PERIOD_END
          AND FDD.DEPRN_ADJUSTMENT_AMOUNT <> 0;
      END;
      BEGIN
        SELECT
          BKS.COST
        INTO L_COST_BEGIN_YEAR
        FROM
          FA_BOOKS_MRC_V BKS,
          FA_DEPRN_PERIODS_MRC_V DPP
        WHERE DPP.PERIOD_COUNTER = P_PERIOD_START
          AND BKS.BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
          AND DPP.BOOK_TYPE_CODE = BKS.BOOK_TYPE_CODE
          AND BKS.ASSET_ID = P_ASSET_ID
          AND DPP.PERIOD_OPEN_DATE between BKS.DATE_EFFECTIVE
          AND NVL(BKS.DATE_INEFFECTIVE
           ,DPP.PERIOD_OPEN_DATE);
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          L_COST_BEGIN_YEAR := 0;
        WHEN OTHERS THEN
          /*SRW.MESSAGE(1
                     ,'Error Calculation Cost at begining of the year')*/NULL;
      END;
      IF L_HAS_RESERVE_ADJUSTMENT = 0 THEN
        BEGIN
          SELECT
            DEPRN_RESERVE / L_COST_BEGIN_YEAR * P_COST_RETIRED
          INTO P_ACC_DEPRN_PREV_FY
          FROM
            FA_DEPRN_SUMMARY_MRC_V
          WHERE BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
            AND ASSET_ID = P_ASSET_ID
            AND PERIOD_COUNTER = L_LAST_DEPRN_PERIOD_PREV_FY;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            P_ACC_DEPRN_PREV_FY := 0;
          WHEN OTHERS THEN
            P_ACC_DEPRN_PREV_FY := -1;
        END;
      ELSE
        L_PREV_ADJUSTED_COST := L_ADJUSTED_COST_PREV_FY;
        L_ADJ_COST_LESS_PART_RET := L_ADJUSTED_COST_PREV_FY;
        FOR c_ret_rec IN C_RET_DEPRN_SUMMARY_MRC LOOP
          IF L_ADJ_COST_LESS_PART_RET = 0 THEN
            L_COST_RETIRED := 0;
            EXIT;
          END IF;
          IF C_RET_REC.ADJUSTED_COST <> L_PREV_ADJUSTED_COST THEN
            BEGIN
              SELECT
                RET.COST_RETIRED
              INTO L_COST_RETIRED
              FROM
                FA_RETIREMENTS_MRC_V RET,
                FA_DEPRN_PERIODS_MRC_V FDP
              WHERE RET.BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
                AND RET.STATUS <> 'DELETED'
                AND RET.BOOK_TYPE_CODE = FDP.BOOK_TYPE_CODE
                AND RET.ASSET_ID = P_ASSET_ID
                AND RET.DATE_RETIRED between FDP.CALENDAR_PERIOD_OPEN_DATE
                AND FDP.CALENDAR_PERIOD_CLOSE_DATE
                AND FDP.PERIOD_COUNTER = C_RET_REC.PERIOD_COUNTER;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                L_COST_RETIRED := 0;
              WHEN OTHERS THEN
                L_COST_RETIRED := 0;
            END;
            IF L_COST_RETIRED <> 0 THEN
              IF L_COST_RETIRED <= L_ADJ_COST_LESS_PART_RET THEN
                L_ADJ_COST_LESS_PART_RET := L_ADJ_COST_LESS_PART_RET - L_COST_RETIRED;
              ELSE
                L_COST_RETIRED := L_ADJ_COST_LESS_PART_RET;
                L_ADJ_COST_LESS_PART_RET := 0;
              END IF;
            END IF;
            L_PREV_ADJUSTED_COST := C_RET_REC.ADJUSTED_COST;
          END IF;
        END LOOP;
        IF P_RETIREMENT_ID IS NULL THEN
          P_ACC_DEPRN_PREV_FY := (L_ACC_DEPRN_PREV_FY / L_ADJUSTED_COST_PREV_FY) * L_ADJ_COST_LESS_PART_RET;
        ELSE
          P_ACC_DEPRN_PREV_FY := (L_ACC_DEPRN_PREV_FY / L_ADJUSTED_COST_PREV_FY) * L_COST_RETIRED;
        END IF;
      END IF;
    ELSE
      BEGIN
        SELECT
          PERIOD_COUNTER,
          DEPRN_RESERVE,
          ADJUSTED_COST
        INTO L_LAST_DEPRN_PERIOD_PREV_FY,L_ACC_DEPRN_PREV_FY,L_ADJUSTED_COST_PREV_FY
        FROM
          FA_DEPRN_SUMMARY
        WHERE BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
          AND ASSET_ID = P_ASSET_ID
          AND PERIOD_COUNTER = (
          SELECT
            MAX(FDS2.PERIOD_COUNTER)
          FROM
            FA_DEPRN_SUMMARY FDS2
          WHERE FDS2.BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
            AND FDS2.ASSET_ID = P_ASSET_ID
            AND FDS2.PERIOD_COUNTER <= P_PERIOD_START - 1 );
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          L_ACC_DEPRN_PREV_FY := 0;
        WHEN OTHERS THEN
          L_ACC_DEPRN_PREV_FY := -1;
      END;
      IF L_ACC_DEPRN_PREV_FY = 0 THEN
        P_ACC_DEPRN_PREV_FY := 0;
        RETURN;
      END IF;
      BEGIN
        SELECT
          COUNT(RET.RETIREMENT_ID)
        INTO L_HAS_RETIREMENT
        FROM
          FA_RETIREMENTS RET,
          FA_DEPRN_PERIODS FDP
        WHERE RET.BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
          AND RET.STATUS <> 'DELETED'
          AND RET.BOOK_TYPE_CODE = FDP.BOOK_TYPE_CODE
          AND RET.ASSET_ID = P_ASSET_ID
          AND RET.DATE_RETIRED between FDP.CALENDAR_PERIOD_OPEN_DATE
          AND FDP.CALENDAR_PERIOD_CLOSE_DATE
          AND FDP.FISCAL_YEAR = P_CURR_FY;
      END;
      IF L_HAS_RETIREMENT = 0 THEN
        P_ACC_DEPRN_PREV_FY := L_ACC_DEPRN_PREV_FY;
        RETURN;
      END IF;
      BEGIN
        SELECT
          BKS.COST
        INTO L_COST_BEGIN_YEAR
        FROM
          FA_BOOKS BKS,
          FA_DEPRN_PERIODS DPP
        WHERE DPP.PERIOD_COUNTER = P_PERIOD_START
          AND BKS.BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
          AND DPP.BOOK_TYPE_CODE = BKS.BOOK_TYPE_CODE
          AND BKS.ASSET_ID = P_ASSET_ID
          AND DPP.PERIOD_OPEN_DATE between BKS.DATE_EFFECTIVE
          AND NVL(BKS.DATE_INEFFECTIVE
           ,DPP.PERIOD_OPEN_DATE);
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          L_COST_BEGIN_YEAR := 0;
        WHEN OTHERS THEN
          /*SRW.MESSAGE(1
                     ,'Error Calculation Cost at begining of the year')*/NULL;
      END;
      BEGIN
        SELECT
          COUNT(FDD.DEPRN_ADJUSTMENT_AMOUNT),
          SUM(FDD.DEPRN_ADJUSTMENT_AMOUNT)
        INTO L_HAS_RESERVE_ADJUSTMENT,L_TOTAL_DEPRN_ADJUSTMENT
        FROM
          FA_DEPRN_DETAIL FDD
        WHERE FDD.BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
          AND FDD.ASSET_ID = P_ASSET_ID
          AND FDD.PERIOD_COUNTER between P_PERIOD_START
          AND P_PERIOD_END
          AND FDD.DEPRN_ADJUSTMENT_AMOUNT <> 0;
      END;
      IF L_HAS_RESERVE_ADJUSTMENT = 0 THEN
        BEGIN
          SELECT
            DEPRN_RESERVE / L_COST_BEGIN_YEAR * P_COST_RETIRED
          INTO P_ACC_DEPRN_PREV_FY
          FROM
            FA_DEPRN_SUMMARY
          WHERE BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
            AND ASSET_ID = P_ASSET_ID
            AND PERIOD_COUNTER = L_LAST_DEPRN_PERIOD_PREV_FY;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            P_ACC_DEPRN_PREV_FY := 0;
          WHEN OTHERS THEN
            P_ACC_DEPRN_PREV_FY := -1;
        END;
      ELSE
        L_PREV_ADJUSTED_COST := L_ADJUSTED_COST_PREV_FY;
        L_ADJ_COST_LESS_PART_RET := L_ADJUSTED_COST_PREV_FY;
        FOR c_ret_rec IN C_RET_DEPRN_SUMMARY LOOP
          IF L_ADJ_COST_LESS_PART_RET = 0 THEN
            L_COST_RETIRED := 0;
            EXIT;
          END IF;
          IF C_RET_REC.ADJUSTED_COST <> L_PREV_ADJUSTED_COST THEN
            BEGIN
              SELECT
                RET.COST_RETIRED
              INTO L_COST_RETIRED
              FROM
                FA_RETIREMENTS RET,
                FA_DEPRN_PERIODS FDP
              WHERE RET.BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
                AND RET.STATUS <> 'DELETED'
                AND RET.BOOK_TYPE_CODE = FDP.BOOK_TYPE_CODE
                AND RET.ASSET_ID = P_ASSET_ID
                AND RET.DATE_RETIRED between FDP.CALENDAR_PERIOD_OPEN_DATE
                AND FDP.CALENDAR_PERIOD_CLOSE_DATE
                AND FDP.PERIOD_COUNTER = C_RET_REC.PERIOD_COUNTER;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                L_COST_RETIRED := 0;
              WHEN OTHERS THEN
                L_COST_RETIRED := 0;
            END;
            IF L_COST_RETIRED <> 0 THEN
              IF L_COST_RETIRED <= L_ADJ_COST_LESS_PART_RET THEN
                L_ADJ_COST_LESS_PART_RET := L_ADJ_COST_LESS_PART_RET - L_COST_RETIRED;
              ELSE
                L_COST_RETIRED := L_ADJ_COST_LESS_PART_RET;
                L_ADJ_COST_LESS_PART_RET := 0;
              END IF;
            END IF;
            L_PREV_ADJUSTED_COST := C_RET_REC.ADJUSTED_COST;
          END IF;
        END LOOP;
        IF P_RETIREMENT_ID IS NULL THEN
          P_ACC_DEPRN_PREV_FY := (L_ACC_DEPRN_PREV_FY / L_ADJUSTED_COST_PREV_FY) * L_ADJ_COST_LESS_PART_RET;
        ELSE
          P_ACC_DEPRN_PREV_FY := (L_ACC_DEPRN_PREV_FY / L_ADJUSTED_COST_PREV_FY) * L_COST_RETIRED;
        END IF;
      END IF;
    END IF;
  END PRC_PREV_FISCAL_YEAR_DEPRN;

  PROCEDURE PRC_LIFE_TO_DATE_DEPRN(P_ASSET_ID IN NUMBER
                                  ,P_BOOK_TYPE_CODE IN VARCHAR
                                  ,P_TRANSACTION_HEADER_ID IN NUMBER
                                  ,P_PERIOD_START IN NUMBER
                                  ,P_PERIOD_END IN NUMBER
                                  ,P_PERIOD_COUNTER IN NUMBER
                                  ,P_RETIREMENT_ID IN NUMBER
                                  ,P_COST_RETIRED IN NUMBER
                                  ,P_ACC_DEPRN_LIFE_TD OUT NOCOPY NUMBER) IS
  BEGIN
    P_ACC_DEPRN_LIFE_TD := 0;
    IF UPPER(P_MRCSOBTYPE) = 'R' THEN
      IF P_RETIREMENT_ID IS NOT NULL THEN
        BEGIN
          SELECT
            SUM(FAD.ADJUSTMENT_AMOUNT)
          INTO P_ACC_DEPRN_LIFE_TD
          FROM
            FA_ADJUSTMENTS_MRC_V FAD
          WHERE FAD.BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
            AND FAD.ASSET_ID = P_ASSET_ID
            AND FAD.SOURCE_TYPE_CODE = 'RETIREMENT'
            AND FAD.ADJUSTMENT_TYPE = 'RESERVE'
            AND FAD.TRANSACTION_HEADER_ID = P_TRANSACTION_HEADER_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            P_ACC_DEPRN_LIFE_TD := 0;
          WHEN OTHERS THEN
            P_ACC_DEPRN_LIFE_TD := -1;
        END;
      ELSE
        BEGIN
          SELECT
            DEPRN_RESERVE
          INTO P_ACC_DEPRN_LIFE_TD
          FROM
            FA_DEPRN_SUMMARY_MRC_V
          WHERE BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
            AND ASSET_ID = P_ASSET_ID
            AND PERIOD_COUNTER = P_PERIOD_COUNTER;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            P_ACC_DEPRN_LIFE_TD := 0;
          WHEN OTHERS THEN
            P_ACC_DEPRN_LIFE_TD := -1;
        END;
      END IF;
    ELSE
      IF P_RETIREMENT_ID IS NOT NULL THEN
        BEGIN
          SELECT
            SUM(FAD.ADJUSTMENT_AMOUNT)
          INTO P_ACC_DEPRN_LIFE_TD
          FROM
            FA_ADJUSTMENTS FAD
          WHERE FAD.BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
            AND FAD.ASSET_ID = P_ASSET_ID
            AND FAD.SOURCE_TYPE_CODE = 'RETIREMENT'
            AND FAD.ADJUSTMENT_TYPE = 'RESERVE'
            AND FAD.TRANSACTION_HEADER_ID = P_TRANSACTION_HEADER_ID;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            P_ACC_DEPRN_LIFE_TD := 0;
          WHEN OTHERS THEN
            P_ACC_DEPRN_LIFE_TD := -1;
        END;
      ELSE
        BEGIN
          SELECT
            DEPRN_RESERVE
          INTO P_ACC_DEPRN_LIFE_TD
          FROM
            FA_DEPRN_SUMMARY
          WHERE BOOK_TYPE_CODE = P_BOOK_TYPE_CODE
            AND ASSET_ID = P_ASSET_ID
            AND PERIOD_COUNTER = P_PERIOD_COUNTER;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            P_ACC_DEPRN_LIFE_TD := 0;
          WHEN OTHERS THEN
            P_ACC_DEPRN_LIFE_TD := -1;
        END;
      END IF;
    END IF;
  END PRC_LIFE_TO_DATE_DEPRN;

  FUNCTION CF_RETIREMENT_DATE(RETIREMENT_ID_1 IN NUMBER) RETURN DATE IS
    L_FA_RETIREMENT DATE;
  BEGIN
    IF RETIREMENT_ID_1 IS NOT NULL THEN
      IF UPPER(P_MRCSOBTYPE) = 'R' THEN
        SELECT
          DATE_RETIRED
        INTO L_FA_RETIREMENT
        FROM
          FA_RETIREMENTS_MRC_V
        WHERE RETIREMENT_ID = RETIREMENT_ID_1;
      ELSE
        SELECT
          DATE_RETIRED
        INTO L_FA_RETIREMENT
        FROM
          FA_RETIREMENTS
        WHERE RETIREMENT_ID = RETIREMENT_ID_1;
      END IF;
    ELSE
      L_FA_RETIREMENT := NULL;
    END IF;
    RETURN (L_FA_RETIREMENT);
  END CF_RETIREMENT_DATE;

  FUNCTION CF_INCLUDE_DPISFORMULA RETURN CHAR IS
    T_MEANING VARCHAR2(30);
  BEGIN
    SELECT
      MEANING
    INTO T_MEANING
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'YES_NO'
      AND LOOKUP_CODE = P_INCLUDE_DPIS;
    RETURN (T_MEANING);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (P_INCLUDE_DPIS);
  END CF_INCLUDE_DPISFORMULA;

  FUNCTION CF_INCLUDE_RETFORMULA RETURN CHAR IS
    T_MEANING VARCHAR2(30);
  BEGIN
    SELECT
      MEANING
    INTO T_MEANING
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'YES_NO'
      AND LOOKUP_CODE = P_INCLUDE_RET;
    RETURN (T_MEANING);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (P_INCLUDE_RET);
  END CF_INCLUDE_RETFORMULA;

  FUNCTION CF_INCLUDE_ZERO_NVB_ASSETSFORM RETURN CHAR IS
    T_MEANING VARCHAR2(30);
  BEGIN
    SELECT
      MEANING
    INTO T_MEANING
    FROM
      FND_LOOKUPS
    WHERE LOOKUP_TYPE = 'YES_NO'
      AND LOOKUP_CODE = P_INCLUDE_ZERO_NBV_ASSETS;
    RETURN (T_MEANING);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (P_INCLUDE_ZERO_NBV_ASSETS);
  END CF_INCLUDE_ZERO_NVB_ASSETSFORM;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    IF P_CA_SET_OF_BOOKS_ID <> -1999 THEN
      BEGIN
        SELECT
          MRC_SOB_TYPE_CODE,
          CURRENCY_CODE
        INTO P_MRCSOBTYPE,LP_CURRENCY_CODE
        FROM
          GL_SETS_OF_BOOKS
        WHERE SET_OF_BOOKS_ID = P_CA_SET_OF_BOOKS_ID;
      EXCEPTION
        WHEN OTHERS THEN
          P_MRCSOBTYPE := 'P';
      END;
    ELSE
      P_MRCSOBTYPE := 'P';
    END IF;
    IF UPPER(P_MRCSOBTYPE) = 'R' THEN
      LP_FA_BOOK_CONTROLS := 'FA_BOOK_CONTROLS_MRC_V';
      LP_FA_BOOKS := 'FA_BOOKS_MRC_V';
      LP_FA_ADJUSTMENTS := 'FA_ADJUSTMENTS_MRC_V';
      LP_FA_DEPRN_PERIODS := 'FA_DEPRN_PERIODS_MRC_V';
      LP_FA_DEPRN_SUMMARY := 'FA_DEPRN_SUMMARY_MRC_V';
      LP_FA_DEPRN_DETAIL := 'FA_DEPRN_DETAIL_MRC_V';
    ELSE
      LP_FA_BOOK_CONTROLS := 'FA_BOOK_CONTROLS';
      LP_FA_BOOKS := 'FA_BOOKS';
      LP_FA_ADJUSTMENTS := 'FA_ADJUSTMENTS';
      LP_FA_DEPRN_PERIODS := 'FA_DEPRN_PERIODS';
      LP_FA_DEPRN_SUMMARY := 'FA_DEPRN_SUMMARY';
      LP_FA_DEPRN_DETAIL := 'FA_DEPRN_DETAIL';
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION C_BASE_CURRENCY_CODE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_CURRENCY_CODE;
  END C_BASE_CURRENCY_CODE_P;

  FUNCTION C_BASE_PRECISION_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_PRECISION;
  END C_BASE_PRECISION_P;

  FUNCTION C_BASE_MIN_ACCT_UNIT_P RETURN NUMBER IS
  BEGIN
    RETURN C_BASE_MIN_ACCT_UNIT;
  END C_BASE_MIN_ACCT_UNIT_P;

  FUNCTION C_BASE_DESCRIPTION_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_BASE_DESCRIPTION;
  END C_BASE_DESCRIPTION_P;

  FUNCTION C_ORGANIZATION_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ORGANIZATION_NAME;
  END C_ORGANIZATION_NAME_P;

  FUNCTION C_MAX_PERIOD_COUNTER_P RETURN NUMBER IS
  BEGIN
    RETURN C_MAX_PERIOD_COUNTER;
  END C_MAX_PERIOD_COUNTER_P;

  FUNCTION C_LAST_PERIOD_COUNTER_P RETURN NUMBER IS
  BEGIN
    RETURN C_LAST_PERIOD_COUNTER;
  END C_LAST_PERIOD_COUNTER_P;

  FUNCTION C_FISCAL_START_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_FISCAL_START_DATE;
  END C_FISCAL_START_DATE_P;

  FUNCTION C_FISCAL_END_DATE_P RETURN DATE IS
  BEGIN
    RETURN C_FISCAL_END_DATE;
  END C_FISCAL_END_DATE_P;

  FUNCTION C_RATIO_PRECISION_P RETURN NUMBER IS
  BEGIN
    RETURN C_RATIO_PRECISION;
  END C_RATIO_PRECISION_P;

  FUNCTION C_MIN_PERIOD_COUNTER_P RETURN NUMBER IS
  BEGIN
    RETURN C_MIN_PERIOD_COUNTER;
  END C_MIN_PERIOD_COUNTER_P;

  FUNCTION CAT_FLEX_STRUCT_P RETURN NUMBER IS
  BEGIN
    RETURN CAT_FLEX_STRUCT;
  END CAT_FLEX_STRUCT_P;

  FUNCTION C_USER_ID_P RETURN NUMBER IS
  BEGIN
    RETURN C_USER_ID;
  END C_USER_ID_P;

  FUNCTION C_ALL_SEGS_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ALL_SEGS;
  END C_ALL_SEGS_P;

  PROCEDURE SET_NAME(APPLICATION IN VARCHAR2
                    ,NAME IN VARCHAR2) IS
  BEGIN
   /* STPROC.INIT('begin FND_MESSAGE.SET_NAME(:APPLICATION, :NAME); end;');
    STPROC.BIND_I(APPLICATION);
    STPROC.BIND_I(NAME);
    STPROC.EXECUTE;*/
    FND_MESSAGE.SET_NAME(APPLICATION,NAME);
  END SET_NAME;

  PROCEDURE SET_TOKEN(TOKEN IN VARCHAR2
                     ,VALUE IN VARCHAR2
                     ,TRANSLATE IN BOOLEAN) IS
 TRANSLATE1 BOOLEAN;
  BEGIN
   /* STPROC.INIT('declare TRANSLATE BOOLEAN; begin TRANSLATE := sys.diutil.int_to_bool(:TRANSLATE); FND_MESSAGE.SET_TOKEN(:TOKEN, :VALUE, TRANSLATE); end;');
    STPROC.BIND_I(TRANSLATE);
    STPROC.BIND_I(TOKEN);
    STPROC.BIND_I(VALUE);
    STPROC.EXECUTE;*/
    --TRANSLATE1 := sys.diutil.int_to_bool(TRANSLATE);
    FND_MESSAGE.SET_TOKEN(TOKEN,VALUE,TRANSLATE1);
  END SET_TOKEN;

  PROCEDURE RETRIEVE(MSGOUT OUT NOCOPY VARCHAR2) IS
  BEGIN
   /* STPROC.INIT('begin FND_MESSAGE.RETRIEVE(:MSGOUT); end;');
    STPROC.BIND_O(MSGOUT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,MSGOUT);*/null;
  END RETRIEVE;

  PROCEDURE CLEAR IS
  BEGIN
  /*  STPROC.INIT('begin FND_MESSAGE.CLEAR; end;');
    STPROC.EXECUTE;*/null;
  END CLEAR;

  FUNCTION GET_STRING(APPIN IN VARCHAR2
                     ,NAMEIN IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
  /*  STPROC.INIT('begin :X0 := FND_MESSAGE.GET_STRING(:APPIN, :NAMEIN); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPIN);
    STPROC.BIND_I(NAMEIN);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
		   X0 := FND_MESSAGE.GET_STRING(APPIN,NAMEIN);
    RETURN X0;
  END GET_STRING;

  FUNCTION GET_NUMBER(APPIN IN VARCHAR2
                     ,NAMEIN IN VARCHAR2) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
  /*  STPROC.INIT('begin :X0 := FND_MESSAGE.GET_NUMBER(:APPIN, :NAMEIN); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPIN);
    STPROC.BIND_I(NAMEIN);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
		   X0 := FND_MESSAGE.GET_NUMBER(APPIN,NAMEIN);
    RETURN X0;
  END GET_NUMBER;

  FUNCTION GET RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
  /*  STPROC.INIT('begin :X0 := FND_MESSAGE.GET; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
		   X0 := FND_MESSAGE.GET;
    RETURN X0;
  END GET;

  FUNCTION GET_ENCODED RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
  /*  STPROC.INIT('begin :X0 := FND_MESSAGE.GET_ENCODED; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/
		   X0 := FND_MESSAGE.GET_ENCODED;
    RETURN X0;
  END GET_ENCODED;

  PROCEDURE PARSE_ENCODED(ENCODED_MESSAGE IN VARCHAR2
                         ,APP_SHORT_NAME OUT NOCOPY VARCHAR2
                         ,MESSAGE_NAME OUT NOCOPY VARCHAR2) IS
  BEGIN
   /* STPROC.INIT('begin FND_MESSAGE.PARSE_ENCODED(:ENCODED_MESSAGE, :APP_SHORT_NAME, :MESSAGE_NAME); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.BIND_O(APP_SHORT_NAME);
    STPROC.BIND_O(MESSAGE_NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,APP_SHORT_NAME);
    STPROC.RETRIEVE(3
                   ,MESSAGE_NAME);*/
		   FND_MESSAGE.PARSE_ENCODED(ENCODED_MESSAGE,APP_SHORT_NAME,MESSAGE_NAME);
  END PARSE_ENCODED;

  PROCEDURE SET_ENCODED(ENCODED_MESSAGE IN VARCHAR2) IS
  BEGIN
   /* STPROC.INIT('begin FND_MESSAGE.SET_ENCODED(:ENCODED_MESSAGE); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.EXECUTE;*/null;
  END SET_ENCODED;

  PROCEDURE RAISE_ERROR IS
  BEGIN
  /*  STPROC.INIT('begin FND_MESSAGE.RAISE_ERROR; end;');
    STPROC.EXECUTE;*/null;
  END RAISE_ERROR;

  function BeforeReport return boolean is
begin

--SRW.USER_EXIT('FND SRWINIT');
 P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
IF upper(p_mrcsobtype) = 'R'
THEN
  fnd_client_info.set_currency_context(p_ca_set_of_books_id);
END IF;
-- Call report level PL/SQL function

get_base_curr_data;

-- Call report level PL/SQL

custom_init;


/*SRW.REFERENCE(:cat_flex_struct);
SRW.USER_EXIT('FND FLEXSQL CODE="CAT#"
    NUM=":cat_flex_struct"
    APPL_SHORT_NAME="OFA"
    TABLEALIAS="ct"
    OUTPUT=":c_all_segs"
    MODE="SELECT"
    DISPLAY="ALL"');*/

  return (TRUE);
end;

END JL_JLMXFISR_XMLP_PKG;




/
