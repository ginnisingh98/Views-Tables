--------------------------------------------------------
--  DDL for Package Body INV_INVARPSL_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."INV_INVARPSL_XMLP_PKG" AS
/* $Header: INVARPSLB.pls 120.1 2007/12/25 10:09:03 dwkrishn noship $ */
  FUNCTION C_TOTAL_VALUEFORMULA(QUANTITY IN NUMBER
                               ,COST IN NUMBER
                               ,C_STD_PREC IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND(QUANTITY * COST
                ,C_STD_PREC));
  END C_TOTAL_VALUEFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in before report trigger:SRWINIT')*/NULL;
        RAISE;
        IF (GET_P_STRUCT_NUM <> TRUE) THEN
          /*SRW.MESSAGE('1'
                     ,'P Struct Num Init failed')*/NULL;
        END IF;
    END;
    DECLARE
      P_ORG_ID_CHAR VARCHAR2(100) := TO_CHAR(P_ORG_ID);
    BEGIN
      /*SRW.USER_EXIT('FND PUTPROFILE NAME="' || 'MFG_ORGANIZATION_ID' || '" FIELD="' || P_ORG_ID_CHAR || '"')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(020
                   ,'Failed in before report trigger, setting org profile ')*/NULL;
        RAISE;
    END;
    BEGIN
      NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in before report trigger:MSTK')*/NULL;
        RAISE;
    END;
    BEGIN
      NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in before report trigger:MSTK:ORDERBY')*/NULL;
        RAISE;
    END;
    BEGIN
      NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in before report trigger:MCAT')*/NULL;
        RAISE;
    END;
    BEGIN
      NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in before report trigger:MCAT:ORDERBY')*/NULL;
        RAISE;
    END;
    BEGIN
      NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in before report trigger:MTLL')*/NULL;
        RAISE;
    END;
    DECLARE
      M_RETURN_STATUS VARCHAR2(1);
      M_MSG_COUNT NUMBER;
      M_MSG_DATA VARCHAR2(2000);
    BEGIN
      IF (WMS_INSTALL.CHECK_INSTALL(X_RETURN_STATUS => M_RETURN_STATUS
                               ,X_MSG_COUNT => M_MSG_COUNT
                               ,X_MSG_DATA => M_MSG_DATA
                               ,P_ORGANIZATION_ID => P_ORG_ID)) THEN
        P_WMS_INSTALLED := 'TRUE';
      END IF;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'SRWEXIT failed')*/NULL;
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_ORDER_BYFORMULA RETURN VARCHAR2 IS
  BEGIN
    IF P_SORT_OPTION = '1' THEN
      RETURN (P_ORDER_ITEM || ',' || P_ORDER_CAT || ',4,5');
    END IF;
    IF P_SORT_OPTION = '2' THEN
      RETURN (P_ORDER_CAT || ',' || P_ORDER_ITEM || ',4,5');
    END IF;
    IF P_SORT_OPTION = '3' THEN
      RETURN ('4,' || P_ORDER_CAT || ',' || P_ORDER_ITEM || ',5');
    END IF;
    IF P_SORT_OPTION = '4' THEN
      RETURN ('5,' || P_ORDER_CAT || ',' || P_ORDER_ITEM || ',4');
    ELSE
      RETURN NULL;
    END IF;
    RETURN NULL;
  END C_ORDER_BYFORMULA;

  FUNCTION C_CAT_SET_NAMEFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      NAME VARCHAR2(30);
      SET_ID NUMBER;
    BEGIN
      SET_ID := P_CATEGORY_SET_ID;
      SELECT
        CATEGORY_SET_NAME
      INTO NAME
      FROM
        MTL_CATEGORY_SETS
      WHERE CATEGORY_SET_ID = SET_ID;
      RETURN (NAME);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN (NULL);
    END;
    RETURN NULL;
  END C_CAT_SET_NAMEFORMULA;

  FUNCTION C_PHYS_INV_NAMEFORMULA RETURN VARCHAR2 IS
  BEGIN
    DECLARE
      NAME VARCHAR2(30);
      ORG NUMBER;
      PI_ID NUMBER;
    BEGIN
      ORG := P_ORG_ID;
      PI_ID := P_PHYS_INV_ID;
      SELECT
        PHYSICAL_INVENTORY_NAME
      INTO NAME
      FROM
        MTL_PHYSICAL_INVENTORIES
      WHERE ORGANIZATION_ID = ORG
        AND PHYSICAL_INVENTORY_ID = PI_ID;
      RETURN (NAME);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RETURN (NULL);
    END;
    RETURN NULL;
  END C_PHYS_INV_NAMEFORMULA;

  FUNCTION C_CURRENCY_CODEFORMULA(R_CURRENCY_CODE IN VARCHAR2) RETURN VARCHAR2 IS
  BEGIN
    RETURN ('(' || R_CURRENCY_CODE || ')');
  END C_CURRENCY_CODEFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION GET_P_STRUCT_NUM RETURN BOOLEAN IS
    L_P_STRUCT_NUM NUMBER;
  BEGIN
    SELECT
      STRUCTURE_ID
    INTO L_P_STRUCT_NUM
    FROM
      MTL_DEFAULT_SETS_VIEW
    WHERE FUNCTIONAL_AREA_ID = 1;
    P_CAT_STRUCT_NUM := L_P_STRUCT_NUM;
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_P_STRUCT_NUM;

  FUNCTION CF_OUTERMOST_LPNFORMULA(OUTERMOST_LPN_ID IN NUMBER) RETURN CHAR IS
    M_OUTERMOST_LPN VARCHAR2(30) := NULL;
  BEGIN
    IF ((P_WMS_INSTALLED = 'TRUE') AND (OUTERMOST_LPN_ID IS NOT NULL)) THEN
      BEGIN
        SELECT
          LICENSE_PLATE_NUMBER
        INTO M_OUTERMOST_LPN
        FROM
          WMS_LICENSE_PLATE_NUMBERS
        WHERE LPN_ID = OUTERMOST_LPN_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          M_OUTERMOST_LPN := 'ERROR';
      END;
    END IF;
    RETURN (M_OUTERMOST_LPN);
  END CF_OUTERMOST_LPNFORMULA;

  FUNCTION CF_PARENT_LPNFORMULA(PARENT_LPN_ID IN NUMBER) RETURN CHAR IS
    M_PARENT_LPN VARCHAR2(30) := NULL;
  BEGIN
    IF ((P_WMS_INSTALLED = 'TRUE') AND (PARENT_LPN_ID IS NOT NULL)) THEN
      BEGIN
        SELECT
          LICENSE_PLATE_NUMBER
        INTO M_PARENT_LPN
        FROM
          WMS_LICENSE_PLATE_NUMBERS
        WHERE LPN_ID = PARENT_LPN_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          M_PARENT_LPN := 'ERROR';
      END;
    END IF;
    RETURN (M_PARENT_LPN);
  END CF_PARENT_LPNFORMULA;

  FUNCTION CF_COST_GROUPFORMULA(COST_GROUP_ID IN NUMBER) RETURN CHAR IS
    M_COST_GROUP VARCHAR2(10) := NULL;
  BEGIN
    IF ((P_WMS_INSTALLED = 'TRUE') AND (COST_GROUP_ID IS NOT NULL)) THEN
      BEGIN
        SELECT
          COST_GROUP
        INTO M_COST_GROUP
        FROM
          CST_COST_GROUPS
        WHERE COST_GROUP_ID = COST_GROUP_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          M_COST_GROUP := 'ERROR';
      END;
    END IF;
    RETURN (M_COST_GROUP);
  END CF_COST_GROUPFORMULA;

END INV_INVARPSL_XMLP_PKG;


/
