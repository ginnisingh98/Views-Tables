--------------------------------------------------------
--  DDL for Package Body RLM_RLMDMCOM_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."RLM_RLMDMCOM_XMLP_PKG" AS
/* $Header: RLMDMCOMB.pls 120.0 2008/01/25 09:36:07 krreddy noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_CURRENT_ORG_ID NUMBER;
    L_OU_NAME VARCHAR2(240);
    CURSOR CUR_SCHEDULE_TYPE(V_SCHEDULE_TYPE IN VARCHAR2) IS
      SELECT
        MEANING
      FROM
        FND_LOOKUP_VALUES_VL
      WHERE LOOKUP_TYPE = 'RLM_SCHEDULE_TYPE'
        AND LOOKUP_CODE = V_SCHEDULE_TYPE
        AND ENABLED_FLAG = 'Y';
    CURSOR CUR_SCH_REF_NUM(V_SCH_REF_NUM IN NUMBER) IS
      SELECT
        SCHEDULE_REFERENCE_NUM
      FROM
        RLM_SCHEDULE_HEADERS_ALL
      WHERE HEADER_ID = V_SCH_REF_NUM;
    CURSOR CUR_SHIP_FROM(V_SHIP_FROM IN NUMBER) IS
      SELECT
        ORGANIZATION_CODE
      FROM
        ORG_ORGANIZATION_DEFINITIONS
      WHERE ORGANIZATION_ID = V_SHIP_FROM;
    CURSOR CUR_P_SHIP_TO(NU_SHIP_TO IN NUMBER) IS
      SELECT
        ECE_TP_LOCATION_CODE
      FROM
        HZ_CUST_ACCT_SITES
      WHERE CUST_ACCT_SITE_ID = NU_SHIP_TO;
    CURSOR CUR_DEMAND_TYPE(V_DEMAND_TYPE IN VARCHAR2) IS
      SELECT
        MEANING
      FROM
        FND_COMMON_LOOKUPS
      WHERE LOOKUP_TYPE = 'RLM_FIRM_FORECAST_BOTH'
        AND LOOKUP_CODE = V_DEMAND_TYPE
        AND ENABLED_FLAG = 'Y';
    CURSOR CUR_DISCREP_ONLY(V_DISCREP IN VARCHAR2) IS
      SELECT
        MEANING
      FROM
        FND_LOOKUP_VALUES_VL
      WHERE LOOKUP_TYPE = 'YES_NO'
        AND LOOKUP_CODE = V_DISCREP
        AND ENABLED_FLAG = 'Y';
    CURSOR CUR_SEQ_MATCH(P_SEQ_MATCH IN VARCHAR2) IS
      SELECT
        MEANING
      FROM
        FND_LOOKUP_VALUES_VL
      WHERE LOOKUP_TYPE = 'RLM_OPTIONAL_MATCH_ATTRIBUTES'
        AND ENABLED_FLAG = 'Y'
        AND LOOKUP_CODE = P_SEQ_MATCH;
  BEGIN
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1000
                   ,'Failed in BEFORE REPORT trigger')*/NULL;
        RETURN (FALSE);
    END;
    L_CURRENT_ORG_ID := MO_GLOBAL.GET_CURRENT_ORG_ID;
    IF (L_CURRENT_ORG_ID IS NULL AND P_ORG_ID IS NOT NULL) THEN
      MO_GLOBAL.SET_POLICY_CONTEXT(P_ACCESS_MODE => 'S'
                                  ,P_ORG_ID => P_ORG_ID);
      L_CURRENT_ORG_ID := P_ORG_ID;
    END IF;
    L_OU_NAME := FND_ACCESS_CONTROL_UTIL.GET_ORG_NAME(L_CURRENT_ORG_ID);
    CP_DEFAULT_OU := L_OU_NAME;
    IF P_SCHEDULE_TYPE IS NOT NULL THEN
      OPEN CUR_SCHEDULE_TYPE(P_SCHEDULE_TYPE);
      FETCH CUR_SCHEDULE_TYPE
       INTO CP_P_SCHEDULE_TYPE;
      CLOSE CUR_SCHEDULE_TYPE;
    END IF;
    IF P_SCHEDULE_REFERENCE_NUM IS NOT NULL THEN
      OPEN CUR_SCH_REF_NUM(P_SCHEDULE_REFERENCE_NUM);
      FETCH CUR_SCH_REF_NUM
       INTO CP_P_SCHEDULE_REF_NUM;
      CLOSE CUR_SCH_REF_NUM;
    END IF;
    IF P_SHIP_FROM_ORG_ID IS NOT NULL THEN
      OPEN CUR_SHIP_FROM(P_SHIP_FROM_ORG_ID);
      FETCH CUR_SHIP_FROM
       INTO CP_P_SHIP_FROM;
      CLOSE CUR_SHIP_FROM;
    END IF;
    IF P_SHIP_TO IS NOT NULL THEN
      OPEN CUR_P_SHIP_TO(P_SHIP_TO);
      FETCH CUR_P_SHIP_TO
       INTO CP_P_SHIP_TO;
      CLOSE CUR_P_SHIP_TO;
    END IF;
    IF P_DEMAND_TYPE IS NOT NULL THEN
      OPEN CUR_DEMAND_TYPE(P_DEMAND_TYPE);
      FETCH CUR_DEMAND_TYPE
       INTO CP_P_DEMAND_TYPE;
      CLOSE CUR_DEMAND_TYPE;
    END IF;
    IF P_DISCREPANCIES_ONLY IS NOT NULL THEN
      OPEN CUR_DISCREP_ONLY(P_DISCREPANCIES_ONLY);
      FETCH CUR_DISCREP_ONLY
       INTO CP_P_DISCREPANCIES_ONLY;
      CLOSE CUR_DISCREP_ONLY;
    END IF;
    IF P_SEQ_MATCH_ATTRIBUTE IS NOT NULL THEN
      OPEN CUR_SEQ_MATCH(P_SEQ_MATCH_ATTRIBUTE);
      FETCH CUR_SEQ_MATCH
       INTO CP_P_SEQ_MATCH_LABEL;
      CLOSE CUR_SEQ_MATCH;
    END IF;
    RLM_COMP_SCH_TO_DEMAND_SV.PROC_COMP_SCH_TO_DEMAND(P_SCHEDULE_TYPE => P_SCHEDULE_TYPE
                                                     ,P_HEADER_ID => P_SCHEDULE_REFERENCE_NUM
                                                     ,P_CUSTOMER_NAME_FROM => P_CUSTOMER_NAME_FROM
                                                     ,P_CUSTOMER_NAME_TO => P_CUSTOMER_NAME_TO
                                                     ,P_SHIP_FROM_ORG_ID => P_SHIP_FROM_ORG_ID
                                                     ,P_SHIP_TO => P_SHIP_TO
                                                     ,P_TP_CODE_FROM => P_TP_CODE_FROM
                                                     ,P_TP_CODE_TO => P_TP_CODE_TO
                                                     ,P_TP_LOCATION_FROM => P_TP_LOCATION_FROM
                                                     ,P_TP_LOCATION_TO => P_TP_LOCATION_TO
                                                     ,P_PROCESS_DATE_FROM => P_PROCESS_DATE_FROM
                                                     ,P_PROCESS_DATE_TO => P_PROCESS_DATE_TO
                                                     ,P_ISSUE_DATE_FROM => P_ISSUE_DATE_FROM
                                                     ,P_ISSUE_DATE_TO => P_ISSUE_DATE_TO
                                                     ,P_REQUEST_DATE_FROM => P_REQUEST_DATE_FROM
                                                     ,P_REQUEST_DATE_TO => P_REQUEST_DATE_TO
                                                     ,P_CUSTOMER_ITEM_FROM => P_CUSTOMER_ITEM_FROM
                                                     ,P_CUSTOMER_ITEM_TO => P_CUSTOMER_ITEM_TO
                                                     ,P_INTERNAL_ITEM_FROM => P_INTERNAL_ITEM_FROM
                                                     ,P_INTERNAL_ITEM_TO => P_INTERNAL_ITEM_TO
                                                     ,P_DEMAND_TYPE => P_DEMAND_TYPE);
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END BEFOREREPORT;

  FUNCTION CF_SHIP_FROM_ORG_IDFORMULA(SHIP_FROM_ORG_ID IN NUMBER) RETURN CHAR IS
    V_SHIP_FROM ORG_ORGANIZATION_DEFINITIONS.ORGANIZATION_NAME%TYPE;
    CURSOR CUR_SHIP_FROM(NU_SHIP_FROM IN NUMBER) IS
      SELECT
        ORGANIZATION_NAME
      FROM
        ORG_ORGANIZATION_DEFINITIONS HRORGS
      WHERE HRORGS.ORGANIZATION_ID = NU_SHIP_FROM;
  BEGIN
    OPEN CUR_SHIP_FROM(SHIP_FROM_ORG_ID);
    FETCH CUR_SHIP_FROM
     INTO V_SHIP_FROM;
    CLOSE CUR_SHIP_FROM;
    RETURN (V_SHIP_FROM);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_SHIP_FROM_ORG_IDFORMULA;

  FUNCTION CF_SHIP_TOFORMULA(SHIP_TO_ADDRESS_ID IN NUMBER) RETURN CHAR IS
    V_SHIP_TO HZ_CUST_ACCT_SITES.ECE_TP_LOCATION_CODE%TYPE;
    CURSOR CUR_SHIP_TO(NU_SHIP_TO IN NUMBER) IS
      SELECT
        ECE_TP_LOCATION_CODE
      FROM
        HZ_CUST_ACCT_SITES
      WHERE CUST_ACCT_SITE_ID = NU_SHIP_TO;
  BEGIN
    OPEN CUR_SHIP_TO(SHIP_TO_ADDRESS_ID);
    FETCH CUR_SHIP_TO
     INTO V_SHIP_TO;
    CLOSE CUR_SHIP_TO;
    RETURN (V_SHIP_TO);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_SHIP_TOFORMULA;

  FUNCTION CF_PRE_HORIZON_DISP_CODEFORMUL(PREHORIZON_DESPOSITION_CODE IN VARCHAR2) RETURN CHAR IS
    V_PRE_HORIZON_DISP VARCHAR2(240);
    CURSOR CUR_FIRM_DISP_CODE(V_PRE_HORIZ_DISP_CODE IN VARCHAR2) IS
      SELECT
        MEANING
      FROM
        FND_LOOKUP_VALUES_VL
      WHERE LOOKUP_TYPE = 'RLM_FIRM_DISP_CODE'
        AND LOOKUP_CODE = V_PRE_HORIZ_DISP_CODE;
  BEGIN
    OPEN CUR_FIRM_DISP_CODE(PREHORIZON_DESPOSITION_CODE);
    FETCH CUR_FIRM_DISP_CODE
     INTO V_PRE_HORIZON_DISP;
    CLOSE CUR_FIRM_DISP_CODE;
    RETURN (V_PRE_HORIZON_DISP);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_PRE_HORIZON_DISP_CODEFORMUL;

  FUNCTION CF_INTRANSIT_CALC_BASISFORMULA(INTRANSIT_CALC_BASIS IN VARCHAR2) RETURN CHAR IS
    V_INTRANSIT_CALC_BASIS VARCHAR2(240);
    CURSOR CUR_INTRANSIT_CALC(V_INTRANSIT_CAL IN VARCHAR2) IS
      SELECT
        MEANING
      FROM
        FND_LOOKUP_VALUES_VL
      WHERE LOOKUP_TYPE = 'RLM_INTRANSIT_CALC_BASIS'
        AND LOOKUP_CODE = V_INTRANSIT_CAL
        AND ENABLED_FLAG = 'Y';
  BEGIN
    OPEN CUR_INTRANSIT_CALC(INTRANSIT_CALC_BASIS);
    FETCH CUR_INTRANSIT_CALC
     INTO V_INTRANSIT_CALC_BASIS;
    CLOSE CUR_INTRANSIT_CALC;
    RETURN (V_INTRANSIT_CALC_BASIS);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_INTRANSIT_CALC_BASISFORMULA;

  FUNCTION CF_MATCH_SEQFORMULA(CUSTOMER_ITEM_REVISION IN VARCHAR2
                              ,CUSTOMER_DOCK_CODE IN VARCHAR2
                              ,CUSTOMER_JOB IN VARCHAR2
                              ,CUST_PRODUCTION_LINE IN VARCHAR2
                              ,CUST_MODEL_SERIAL_NUMBER IN VARCHAR2
                              ,SCH_PO_NUMBER IN VARCHAR2
                              ,CUST_PRODUCTION_SEQ_NUM IN VARCHAR2
                              ,RECORD_YEAR IN VARCHAR2
                              ,CUSTOMER_REQUEST_DATE IN VARCHAR2
                              ,PULL_SIGNAL_REF_NUM IN VARCHAR2
                              ,PULL_SIGNAL_START_SERIAL_NUM IN VARCHAR2
                              ,PULL_SIGNAL_END_SERIAL_NUM IN VARCHAR2
                              ,REQUEST_DATE_TIME IN DATE) RETURN CHAR IS
    V_SEQ_MATCH VARCHAR2(40);
    CURSOR CUR_SEQ_MATCH(P_SEQ_MATCH IN VARCHAR2) IS
      SELECT
        MEANING,
        SUBSTR(LOOKUP_CODE
              ,INSTR(LOOKUP_CODE
                   ,',') + 1)
      FROM
        FND_LOOKUP_VALUES_VL
      WHERE LOOKUP_TYPE = 'RLM_OPTIONAL_MATCH_ATTRIBUTES'
        AND ENABLED_FLAG = 'Y'
        AND LOOKUP_CODE = P_SEQ_MATCH;
  BEGIN
    IF P_SCHEDULE_TYPE = 'SEQUENCED' THEN
      OPEN CUR_SEQ_MATCH(P_SEQ_MATCH_ATTRIBUTE);
      FETCH CUR_SEQ_MATCH
       INTO CP_SEQ_MATCH_LABEL,V_SEQ_MATCH;
      CLOSE CUR_SEQ_MATCH;
      IF V_SEQ_MATCH = 'F' THEN
        CP_SEQ_COLUMN := CUSTOMER_ITEM_REVISION;
      ELSIF P_SEQ_MATCH_ATTRIBUTE = 'B' THEN
        CP_SEQ_COLUMN := CUSTOMER_DOCK_CODE;
      ELSIF V_SEQ_MATCH = 'G' THEN
        CP_SEQ_COLUMN := CUSTOMER_JOB;
      ELSIF V_SEQ_MATCH = 'A' THEN
        CP_SEQ_COLUMN := CUST_PRODUCTION_LINE;
      ELSIF V_SEQ_MATCH = 'H' THEN
        CP_SEQ_COLUMN := CUST_MODEL_SERIAL_NUMBER;
      ELSIF V_SEQ_MATCH = 'E' THEN
        CP_SEQ_COLUMN := SCH_PO_NUMBER;
      ELSIF V_SEQ_MATCH = '$' THEN
        CP_SEQ_COLUMN := CUST_PRODUCTION_SEQ_NUM;
      ELSIF V_SEQ_MATCH = 'I' THEN
        CP_SEQ_COLUMN := RECORD_YEAR;
      ELSIF V_SEQ_MATCH = 'J' THEN
        CP_SEQ_COLUMN := CUSTOMER_REQUEST_DATE;
      ELSIF V_SEQ_MATCH = 'K' THEN
        CP_SEQ_COLUMN := PULL_SIGNAL_REF_NUM;
      ELSIF V_SEQ_MATCH = 'L' THEN
        CP_SEQ_COLUMN := PULL_SIGNAL_START_SERIAL_NUM;
      ELSIF V_SEQ_MATCH = 'M' THEN
        CP_SEQ_COLUMN := PULL_SIGNAL_END_SERIAL_NUM;
      ELSIF V_SEQ_MATCH = 'C' THEN
        CP_SEQ_COLUMN := REQUEST_DATE_TIME;
      ELSE
        V_SEQ_MATCH := NULL;
      END IF;
    ELSE
      RETURN (NULL);
    END IF;
    RETURN (NULL);
  END CF_MATCH_SEQFORMULA;

  FUNCTION IS_SEQUENCED RETURN BOOLEAN IS
  BEGIN
    IF P_SCHEDULE_TYPE = 'SEQUENCED' THEN
      RETURN TRUE;
    ELSE
      RETURN FALSE;
    END IF;
  END IS_SEQUENCED;

  FUNCTION IS_NON_SEQUENCED RETURN BOOLEAN IS
  BEGIN
    IF P_SCHEDULE_TYPE <> 'SEQUENCED' THEN
      RETURN TRUE;
    ELSE
      RETURN FALSE;
    END IF;
  END IS_NON_SEQUENCED;

  FUNCTION CF_ORDERNUMFORMULA(ORDER_NUMBER IN NUMBER) RETURN NUMBER IS
    NU_ORDER_NUMBER NUMBER;
    CURSOR CUR_ORDER_NUMBER(NU_ORDER_NUM IN NUMBER) IS
      SELECT
        ORDER_NUMBER
      FROM
        OE_ORDER_HEADERS
      WHERE HEADER_ID = NU_ORDER_NUM;
  BEGIN
    IF ORDER_NUMBER IS NOT NULL THEN
      OPEN CUR_ORDER_NUMBER(ORDER_NUMBER);
      FETCH CUR_ORDER_NUMBER
       INTO NU_ORDER_NUMBER;
      CLOSE CUR_ORDER_NUMBER;
    ELSE
      RETURN (NULL);
    END IF;
    RETURN (NU_ORDER_NUMBER);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_ORDERNUMFORMULA;

  FUNCTION CF_CUSTOMER_NUMBER_MEANFORMULA(CUSTOMER_NUMBER IN NUMBER) RETURN CHAR IS
    V_ACCOUNT_NUM HZ_CUST_ACCOUNTS.ACCOUNT_NUMBER%TYPE;
    CURSOR CUR_CUSTOMER_NUMBER(CUST_NUM IN NUMBER) IS
      SELECT
        CUST_ACCT.ACCOUNT_NUMBER
      FROM
        HZ_PARTIES PARTY,
        HZ_CUST_ACCOUNTS CUST_ACCT
      WHERE PARTY.PARTY_ID = CUST_ACCT.PARTY_ID
        AND CUST_ACCT.CUST_ACCOUNT_ID = CUST_NUM;
  BEGIN
    OPEN CUR_CUSTOMER_NUMBER(CUSTOMER_NUMBER);
    FETCH CUR_CUSTOMER_NUMBER
     INTO V_ACCOUNT_NUM;
    CLOSE CUR_CUSTOMER_NUMBER;
    RETURN (V_ACCOUNT_NUM);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_CUSTOMER_NUMBER_MEANFORMULA;

  FUNCTION CF_FROZEN_FLAGFORMULA(FROZEN_FLAG IN VARCHAR2) RETURN CHAR IS
    V_FROZEN_FLAG FND_LOOKUP_VALUES_VL.MEANING%TYPE;
    CURSOR CUR_FROZEN_FLAG(V_FLAG_CODE IN VARCHAR2) IS
      SELECT
        MEANING
      FROM
        FND_LOOKUP_VALUES_VL
      WHERE LOOKUP_TYPE = 'YES_NO'
        AND LOOKUP_CODE = V_FLAG_CODE
        AND ENABLED_FLAG = 'Y';
  BEGIN
    OPEN CUR_FROZEN_FLAG(FROZEN_FLAG);
    FETCH CUR_FROZEN_FLAG
     INTO V_FROZEN_FLAG;
    CLOSE CUR_FROZEN_FLAG;
    RETURN (V_FROZEN_FLAG);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_FROZEN_FLAGFORMULA;

  FUNCTION CF_TIME_UOM_CODEFORMULA(TIME_UOM_CODE IN VARCHAR2) RETURN CHAR IS
    V_TIME_UOM_CODE FND_LOOKUP_VALUES_VL.MEANING%TYPE;
    CURSOR CUR_TIME_UOM_CODE(V_TIME_UOM IN VARCHAR2) IS
      SELECT
        MEANING
      FROM
        FND_LOOKUP_VALUES_VL
      WHERE LOOKUP_TYPE = 'RLM_TIME_UOM'
        AND LOOKUP_CODE = V_TIME_UOM
        AND ENABLED_FLAG = 'Y';
  BEGIN
    OPEN CUR_TIME_UOM_CODE(TIME_UOM_CODE);
    FETCH CUR_TIME_UOM_CODE
     INTO V_TIME_UOM_CODE;
    CLOSE CUR_TIME_UOM_CODE;
    RETURN (V_TIME_UOM_CODE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_TIME_UOM_CODEFORMULA;

  FUNCTION CF_EXCLUDE_NONWORKDAYSFORMULA(EXCLUDE_NON_WORKDAYS_FLAG IN VARCHAR2) RETURN CHAR IS
    V_EXC_NONWORKDAYS_FLAG FND_LOOKUP_VALUES_VL.MEANING%TYPE;
    CURSOR CUR_EXC_NONWORK_FLAG(V_EXC_NONWORKDAYS_FLAG IN VARCHAR2) IS
      SELECT
        MEANING
      FROM
        FND_LOOKUP_VALUES_VL
      WHERE LOOKUP_TYPE = 'YES_NO'
        AND LOOKUP_CODE = V_EXC_NONWORKDAYS_FLAG
        AND ENABLED_FLAG = 'Y';
  BEGIN
    OPEN CUR_EXC_NONWORK_FLAG(EXCLUDE_NON_WORKDAYS_FLAG);
    FETCH CUR_EXC_NONWORK_FLAG
     INTO V_EXC_NONWORKDAYS_FLAG;
    CLOSE CUR_EXC_NONWORK_FLAG;
    RETURN (V_EXC_NONWORKDAYS_FLAG);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (NULL);
  END CF_EXCLUDE_NONWORKDAYSFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    BEGIN
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    EXCEPTION
      WHEN /*SRW.USER_EXIT_FAILURE*/OTHERS THEN
        /*SRW.MESSAGE(1
                   ,'Failed in AFTER REPORT TRIGGER')*/NULL;
        RETURN (FALSE);
    END;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CP_SEQ_MATCH_LABEL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SEQ_MATCH_LABEL;
  END CP_SEQ_MATCH_LABEL_P;

  FUNCTION CP_SEQ_COLUMN_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_SEQ_COLUMN;
  END CP_SEQ_COLUMN_P;

  FUNCTION CP_P_SCHEDULE_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_P_SCHEDULE_TYPE;
  END CP_P_SCHEDULE_TYPE_P;

  FUNCTION CP_P_SHIP_TO_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_P_SHIP_TO;
  END CP_P_SHIP_TO_P;

  FUNCTION CP_P_SEQ_MATCH_LABEL_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_P_SEQ_MATCH_LABEL;
  END CP_P_SEQ_MATCH_LABEL_P;

  FUNCTION CP_P_DEMAND_TYPE_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_P_DEMAND_TYPE;
  END CP_P_DEMAND_TYPE_P;

  FUNCTION CP_P_DISCREPANCIES_ONLY_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_P_DISCREPANCIES_ONLY;
  END CP_P_DISCREPANCIES_ONLY_P;

  FUNCTION CP_P_SCHEDULE_REF_NUM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_P_SCHEDULE_REF_NUM;
  END CP_P_SCHEDULE_REF_NUM_P;

  FUNCTION CP_P_SHIP_FROM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_P_SHIP_FROM;
  END CP_P_SHIP_FROM_P;

  FUNCTION CP_DEFAULT_OU_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_DEFAULT_OU;
  END CP_DEFAULT_OU_P;

END RLM_RLMDMCOM_XMLP_PKG;

/
