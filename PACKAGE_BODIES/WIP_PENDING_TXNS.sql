--------------------------------------------------------
--  DDL for Package Body WIP_PENDING_TXNS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."WIP_PENDING_TXNS" AS
/* $Header: wippendb.pls 120.1 2005/06/21 13:55:44 appldev ship $ */

/*
Inputs:  These identify which job or schedule you are interested in
	P_WIP_ENTITY_ID
	P_ORGANIZATION_ID
Outputs: All are set to WIP_CONSTANTS.YES or WIP_CONSTANTS.NO
        P_RESOURCES_CHARGED
        P_MATERIAL_ISSUED
        P_MTL_TXNS_TEMP
        P_UNCOSTED_MTL_TXNS
        P_PO_REQ_LINES
        P_PO_REQ_INTERFACE
        P_MOVE_TXN_INTERFACE
        P_COST_TXN_INTERFACE

 */

PROCEDURE RETRIEVE(
        P_WIP_ENTITY_ID IN NUMBER,
        P_ORGANIZATION_ID IN NUMBER,
        P_RESOURCES_CHARGED OUT NOCOPY NUMBER,
        P_MATERIAL_ISSUED OUT NOCOPY NUMBER,
        P_MTL_TXNS_TEMP OUT NOCOPY NUMBER,
        P_UNCOSTED_MTL_TXNS OUT NOCOPY NUMBER,
        P_PO_REQ_LINES OUT NOCOPY NUMBER,
        P_PO_REQ_INTERFACE OUT NOCOPY NUMBER,
        P_MOVE_TXN_INTERFACE OUT NOCOPY NUMBER,
        P_COST_TXN_INTERFACE OUT NOCOPY NUMBER
) IS
BEGIN

	-- Check if resources have been charged

	BEGIN

	SELECT	 WIP_CONSTANTS.YES
	INTO	 P_RESOURCES_CHARGED
	FROM	 DUAL
	WHERE EXISTS (SELECT 'X'
                        FROM WIP_OPERATION_RESOURCES
                       WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
                         AND WIP_ENTITY_ID = P_WIP_ENTITY_ID
                         AND APPLIED_RESOURCE_UNITS <> 0);


	EXCEPTION WHEN NO_DATA_FOUND THEN
		P_RESOURCES_CHARGED := WIP_CONSTANTS.NO;
	END;

	-- Check if material has been issued

	BEGIN

	SELECT	 WIP_CONSTANTS.YES
	INTO	 P_MATERIAL_ISSUED
	FROM	 DUAL
	WHERE EXISTS (SELECT 'X'
                        FROM WIP_REQUIREMENT_OPERATIONS
                       WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
                         AND WIP_ENTITY_ID = P_WIP_ENTITY_ID
                         AND QUANTITY_ISSUED <> 0);

	EXCEPTION WHEN NO_DATA_FOUND THEN
		P_MATERIAL_ISSUED := WIP_CONSTANTS.NO;
	END;

	-- Check for MTL_MATERIAL_TRANSACTIONS_TEMP

	BEGIN

	SELECT	WIP_CONSTANTS.YES
	INTO	P_MTL_TXNS_TEMP
	FROM	DUAL
	WHERE EXISTS (SELECT 1
			FROM MTL_MATERIAL_TRANSACTIONS_TEMP
		       WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
			 AND TRANSACTION_SOURCE_ID = P_WIP_ENTITY_ID
			 AND TRANSACTION_SOURCE_TYPE_ID = 5);

	EXCEPTION WHEN NO_DATA_FOUND THEN
		P_MTL_TXNS_TEMP := WIP_CONSTANTS.NO;
	END;

	-- Check for uncosted material transactions

        BEGIN

        SELECT  WIP_CONSTANTS.YES
        INTO    P_UNCOSTED_MTL_TXNS
        FROM    DUAL
        WHERE EXISTS (SELECT 1
                        FROM MTL_MATERIAL_TRANSACTIONS
                       WHERE ORGANIZATION_ID = P_ORGANIZATION_ID
                         AND TRANSACTION_SOURCE_ID = P_WIP_ENTITY_ID
			 AND COSTED_FLAG IN ('N','E')
                         AND TRANSACTION_SOURCE_TYPE_ID = 5);

        EXCEPTION WHEN NO_DATA_FOUND THEN
                P_UNCOSTED_MTL_TXNS := WIP_CONSTANTS.NO;
        END;

	-- Check for PO_REQUISITION_LINES

        BEGIN

        SELECT  WIP_CONSTANTS.YES
        INTO    P_PO_REQ_LINES
        FROM    DUAL
        WHERE EXISTS (SELECT 1
                        FROM PO_REQUISITION_LINES_ALL
                       WHERE WIP_ENTITY_ID = P_WIP_ENTITY_ID
			 AND DESTINATION_ORGANIZATION_ID = P_ORGANIZATION_ID);

        EXCEPTION WHEN NO_DATA_FOUND THEN
                P_PO_REQ_LINES := WIP_CONSTANTS.NO;
        END;

	-- Check for PO_REQUISITION_INTERFACE

        BEGIN

        SELECT  WIP_CONSTANTS.YES
        INTO    P_PO_REQ_INTERFACE
        FROM    DUAL
        WHERE EXISTS (SELECT 1
                        FROM PO_REQUISITIONS_INTERFACE_ALL
                       WHERE WIP_ENTITY_ID = P_WIP_ENTITY_ID
			 AND DESTINATION_ORGANIZATION_ID = P_ORGANIZATION_ID);

        EXCEPTION WHEN NO_DATA_FOUND THEN
                P_PO_REQ_INTERFACE := WIP_CONSTANTS.NO;
        END;

        -- Check for WIP_MOVE_TXN_INTERFACE

        BEGIN

        SELECT  WIP_CONSTANTS.YES
        INTO    P_MOVE_TXN_INTERFACE
        FROM    DUAL
        WHERE EXISTS (SELECT 1
                        FROM WIP_MOVE_TXN_INTERFACE
                       WHERE WIP_ENTITY_ID = P_WIP_ENTITY_ID
			 AND ORGANIZATION_ID = P_ORGANIZATION_ID);

        EXCEPTION WHEN NO_DATA_FOUND THEN
                P_MOVE_TXN_INTERFACE := WIP_CONSTANTS.NO;
        END;

        -- Check for WIP_COST_TXN_INTERFACE

        BEGIN

        SELECT  WIP_CONSTANTS.YES
        INTO    P_COST_TXN_INTERFACE
        FROM    DUAL
        WHERE EXISTS (SELECT 1
                        FROM WIP_COST_TXN_INTERFACE
                       WHERE WIP_ENTITY_ID = P_WIP_ENTITY_ID
			 AND ORGANIZATION_ID = P_ORGANIZATION_ID);

        EXCEPTION WHEN NO_DATA_FOUND THEN
                P_COST_TXN_INTERFACE := WIP_CONSTANTS.NO;
        END;
END RETRIEVE;

END WIP_PENDING_TXNS;

/
