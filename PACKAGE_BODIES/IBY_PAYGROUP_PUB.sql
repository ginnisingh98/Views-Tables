--------------------------------------------------------
--  DDL for Package Body IBY_PAYGROUP_PUB
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."IBY_PAYGROUP_PUB" AS
/*$Header: ibypaygb.pls 120.108.12010000.47 2010/04/21 14:19:24 jnallam ship $*/

 --
 -- Declare global variables
 --
 G_PKG_NAME CONSTANT VARCHAR2(30) := 'IBY_PAYGROUP_PUB';

 --
 -- List of document statuses that are used / set in this
 -- module (payment creation flow).
 --
 DOC_STATUS_VALIDATED    CONSTANT VARCHAR2(100) := 'VALIDATED';
 DOC_STATUS_PAY_CREATED  CONSTANT VARCHAR2(100) := 'PAYMENT_CREATED';
 DOC_STATUS_CA_FAILED    CONSTANT VARCHAR2(100) := 'FAILED_BY_CALLING_APP';
 DOC_STATUS_RELN_FAIL    CONSTANT VARCHAR2(100) := 'FAILED_BY_RELATED_DOCUMENT';
 DOC_STATUS_PAY_VAL_FAIL CONSTANT VARCHAR2(100) := 'PAYMENT_FAILED_VALIDATION';
 DOC_STATUS_FAIL_BY_REJLVL CONSTANT VARCHAR2(100)
                                                := 'FAILED_BY_REJECTION_LEVEL';

 --
 -- List of payment statuses that are used / set in this
 -- module (payment creation flow).
 --
 PAY_STATUS_REJECTED       CONSTANT VARCHAR2(100) := 'REJECTED';
 PAY_STATUS_FAIL_VALID     CONSTANT VARCHAR2(100) := 'FAILED_VALIDATION';
 PAY_STATUS_CREATED        CONSTANT VARCHAR2(100) := 'CREATED';
 PAY_STATUS_CA_FAILED      CONSTANT VARCHAR2(100) := 'FAILED_BY_CALLING_APP';
 PAY_STATUS_FAIL_BY_REJLVL CONSTANT VARCHAR2(100)
                                                := 'FAILED_BY_REJECTION_LEVEL';
 PAY_STATUS_MODIFIED       CONSTANT VARCHAR2(100) := 'MODIFIED';

 --
 -- List of payment request statuses that are set in this
 -- module (payment creation flow).
 --
 REQ_STATUS_PAY_CRTD      CONSTANT VARCHAR2(100) := 'PAYMENTS_CREATED';
 REQ_STATUS_FAIL_PAY_CR   CONSTANT VARCHAR2(100) := 'FAILED_PAYMENT_VALIDATION';
 REQ_STATUS_USER_REVW     CONSTANT VARCHAR2(100) := 'PENDING_REVIEW';
 REQ_STATUS_USER_REVW_ERR CONSTANT VARCHAR2(100) :=
                                       'PENDING_REVIEW_PMT_VAL_ERRORS';
 REQ_STATUS_RETRY_PMT_CREAT CONSTANT VARCHAR2(100)
                                                 := 'RETRY_PAYMENT_CREATION';

 --
 -- List of rejection level system options  that are possible for
 -- this module (payment creation flow).
 --
 REJ_LVL_REQUEST  CONSTANT VARCHAR2(100) := 'REQUEST';
 REJ_LVL_PAYMENT  CONSTANT VARCHAR2(100) := 'PAYMENT';
 REJ_LVL_PAYEE    CONSTANT VARCHAR2(100) := 'PAYEE';
 REJ_LVL_NONE     CONSTANT VARCHAR2(100) := 'NONE';

 -- Transaction types (for inserting into IBY_TRANSACTION_ERRORS table)
 TRXN_TYPE_DOC   CONSTANT VARCHAR2(100) := 'DOCUMENT_PAYABLE';
 TRXN_TYPE_PMT   CONSTANT VARCHAR2(100) := 'PAYMENT';
 l_DocsInPmtCount  NUMBER;


 l_trx_pmt_index      BINARY_INTEGER :=0;
 l_calling_app_procedure    VARCHAR2(255);

 TYPE getSDAPTabType IS TABLE OF IBY_DOCS_PAYABLE_ALL.document_status%TYPE INDEX BY BINARY_INTEGER;

 sdap_tbl  getSDAPTabType;

  TYPE getMaturityDateTabType IS TABLE OF VARCHAR2(30) INDEX BY VARCHAR2(30);

 maturity_date_tbl  getMaturityDateTabType;

 l_fail_dop_tbl failDocsOfPaymentTabType;
 l_fail_docs_tbl failDocsTabType;

  pmt_id  IBY_PAYMENTS_ALL.PAYMENT_ID%TYPE;
 pmt_amt  IBY_PAYMENTS_ALL.PAYMENT_AMOUNT%TYPE;


  TYPE resetErrtblType IS TABLE OF IBY_PAYMENTS_ALL.PAYMENT_SERVICE_REQUEST_ID%TYPE INDEX BY BINARY_INTEGER;

  resetErrtbl  resetErrtblType;



 /* DS for auditPayment Data caching */



 	TYPE l_payer_info_rec IS RECORD(
		payer_party_number IBY_PAYMENTS_ALL.PAYER_PARTY_NUMBER%TYPE,
		payer_party_site_name IBY_PAYMENTS_ALL.PAYER_PARTY_SITE_NAME%TYPE,
		payer_legal_entity_name IBY_PAYMENTS_ALL.PAYER_LEGAL_ENTITY_NAME%TYPE,
		payer_tax_registration_num IBY_PAYMENTS_ALL.PAYER_TAX_REGISTRATION_NUM%TYPE,
		payer_le_registration_num IBY_PAYMENTS_ALL.PAYER_LE_REGISTRATION_NUM%TYPE,
		payer_party_id IBY_PAYMENTS_ALL.PAYER_PARTY_ID%TYPE,
		payer_location_id IBY_PAYMENTS_ALL.PAYER_LOCATION_ID%TYPE,
		payer_party_attr_category IBY_PAYMENTS_ALL.PAYER_PARTY_ATTR_CATEGORY%TYPE,
		payer_le_attr_category    IBY_PAYMENTS_ALL.PAYER_LE_ATTR_CATEGORY%TYPE,
		payer_abbreviated_agency_code IBY_PAYMENTS_ALL.PAYER_ABBREVIATED_AGENCY_CODE%TYPE,
		payer_federal_us_employer_id IBY_PAYMENTS_ALL.PAYER_FEDERAL_US_EMPLOYER_ID%TYPE
	);

	 TYPE l_payer_info_tbl_type IS TABLE OF l_payer_info_rec INDEX BY BINARY_INTEGER;
      	 l_payer_info_tbl  l_payer_info_tbl_type;



	TYPE l_payer_acct_info_rec IS RECORD(

 	int_bank_name               IBY_PAYMENTS_ALL.INT_BANK_NAME%TYPE,
	int_bank_number             IBY_PAYMENTS_ALL.INT_BANK_NUMBER%TYPE,
	int_bank_branch_number       IBY_PAYMENTS_ALL.INT_BANK_BRANCH_NUMBER%TYPE,
	int_bank_branch_name         IBY_PAYMENTS_ALL.INT_BANK_BRANCH_NAME%TYPE,
	int_eft_swift_code            IBY_PAYMENTS_ALL.INT_EFT_SWIFT_CODE%TYPE,
	int_bank_account_number       IBY_PAYMENTS_ALL.INT_BANK_ACCOUNT_NUMBER%TYPE,
	int_bank_account_name         IBY_PAYMENTS_ALL.INT_BANK_ACCOUNT_NAME%TYPE,
	int_bank_account_iban          IBY_PAYMENTS_ALL.INT_BANK_ACCOUNT_IBAN%TYPE,
	int_bank_acct_agency_loc_code  IBY_PAYMENTS_ALL.INT_BANK_ACCT_AGENCY_LOC_CODE%TYPE,
	int_bank_branch_party_id      IBY_PAYMENTS_ALL.INT_BANK_BRANCH_PARTY_ID%TYPE,
	int_bank_alt_name	      IBY_PAYMENTS_ALL.INT_BANK_ALT_NAME%TYPE,
	int_bank_branch_alt_name      IBY_PAYMENTS_ALL.INT_BANK_BRANCH_ALT_NAME%TYPE,
	int_bank_account_alt_name      IBY_PAYMENTS_ALL.INT_BANK_ACCOUNT_ALT_NAME%TYPE,
	int_bank_account_num_elec      IBY_PAYMENTS_ALL.INT_BANK_ACCOUNT_NUM_ELEC%TYPE,
	int_bank_branch_location_id    IBY_PAYMENTS_ALL.INT_BANK_BRANCH_LOCATION_ID%TYPE,
	int_bank_branch_eft_user_num   IBY_PAYMENTS_ALL.INT_BANK_BRANCH_EFT_USER_NUM%TYPE,
	int_bank_branch_rfc_identifier  IBY_PAYMENTS_ALL.INT_BANK_BRANCH_RFC_IDENTIFIER%TYPE
	);

	 TYPE l_payer_acct_info_tbl_type IS TABLE OF l_payer_acct_info_rec INDEX BY BINARY_INTEGER;
      	 l_payer_acct_info_tbl  l_payer_acct_info_tbl_type;



	TYPE l_vendor_info_rec IS RECORD(
     	payee_site_alternate_name    IBY_PAYMENTS_ALL.PAYEE_SITE_ALTERNATE_NAME%TYPE,
	payee_supplier_number	     IBY_PAYMENTS_ALL.PAYEE_SUPPLIER_NUMBER%TYPE,
	payee_first_party_reference  IBY_PAYMENTS_ALL.PAYEE_FIRST_PARTY_REFERENCE%TYPE,
	payee_supplier_attr_category IBY_PAYMENTS_ALL.payee_supplier_attr_category%TYPE,
	payee_supplier_id            IBY_PAYMENTS_ALL.payee_supplier_id%TYPE,
	payee_tax_registration_num   IBY_PAYMENTS_ALL.payee_tax_registration_num%TYPE,
	payee_le_registration_num         IBY_PAYMENTS_ALL.payee_le_registration_num%TYPE,
	payee_spplr_site_attr_category      IBY_PAYMENTS_ALL.payee_spplr_site_attr_category%TYPE
	);

        TYPE l_vendor_info_tbl_type IS TABLE OF l_vendor_info_rec INDEX BY VARCHAR2(4000);
	 l_vendor_info_tbl  l_vendor_info_tbl_type;


	TYPE l_payee_info_rec IS RECORD(
	payee_party_number      IBY_PAYMENTS_ALL.payee_party_number%TYPE,
	payee_party_name        IBY_PAYMENTS_ALL.payee_party_name%TYPE,
	payee_name		IBY_PAYMENTS_ALL.payee_name%TYPE,
	payee_alt_name          IBY_PAYMENTS_ALL.PAYEE_ALTERNATE_NAME%TYPE,
  payee_party_atr_cat  IBY_PAYMENTS_ALL.payee_party_attr_category%TYPE,
  beneficiary_name IBY_PAYMENTS_ALL.BENEFICIARY_name%TYPE

);

	 TYPE l_payee_info_tbl_type IS TABLE OF l_payee_info_rec INDEX BY BINARY_INTEGER;
	 l_payee_info_tbl  l_payee_info_tbl_type;


	TYPE l_payee_site_rec IS RECORD(
	payee_spplr_site_attr_category      IBY_PAYMENTS_ALL.payee_spplr_site_attr_category%TYPE,
	payee_supplier_site_name      IBY_PAYMENTS_ALL.payee_supplier_site_name%TYPE,
        payee_addressee               IBY_PAYMENTS_ALL.payee_addressee%TYPE
	);

	 TYPE l_payee_site_tbl_type IS TABLE OF l_payee_site_rec INDEX BY BINARY_INTEGER;
	 l_payee_site_tbl  l_payee_site_tbl_type;

	TYPE l_payee_addr_rec IS RECORD(
 	payee_address1	     IBY_PAYMENTS_ALL.payee_address1%TYPE,
	payee_address2     IBY_PAYMENTS_ALL.payee_address2%TYPE,
	payee_address3     IBY_PAYMENTS_ALL.payee_address3%TYPE,
	payee_address4     IBY_PAYMENTS_ALL.payee_address4%TYPE,
	payee_city     IBY_PAYMENTS_ALL.payee_city%TYPE,
	payee_county      IBY_PAYMENTS_ALL.payee_county%TYPE,
	payee_province       IBY_PAYMENTS_ALL.payee_province%TYPE,
	payee_state        IBY_PAYMENTS_ALL.payee_state%TYPE,
	payee_country      IBY_PAYMENTS_ALL.payee_country%TYPE,
	payee_postal_code  IBY_PAYMENTS_ALL.payee_postal_code%TYPE,
	payee_address_concat  IBY_PAYMENTS_ALL.inv_payee_address_concat%TYPE
	);

	TYPE l_payee_addr_tbl_type IS TABLE OF l_payee_addr_rec INDEX BY VARCHAR2(200);
	l_payee_addr_tbl  l_payee_addr_tbl_type;


	TYPE l_payee_acct_rec IS RECORD(
	ext_bank_name      IBY_PAYMENTS_ALL.ext_bank_name%TYPE,
	ext_bank_number      IBY_PAYMENTS_ALL.ext_bank_number%TYPE,
	ext_branch_number      IBY_PAYMENTS_ALL.ext_branch_number%TYPE,
	ext_bank_branch_name      IBY_PAYMENTS_ALL.ext_bank_branch_name%TYPE,
	ext_bank_account_number      IBY_PAYMENTS_ALL.ext_bank_account_number%TYPE,
	ext_bank_account_name      IBY_PAYMENTS_ALL.ext_bank_account_name%TYPE,
	ext_bank_account_iban_number      IBY_PAYMENTS_ALL.ext_bank_account_iban_number%TYPE,
	ext_eft_swift_code      IBY_PAYMENTS_ALL.ext_eft_swift_code%TYPE,
	ext_bank_account_type      IBY_PAYMENTS_ALL.ext_bank_account_type%TYPE,
	ext_bank_acct_pmt_factor_flag      IBY_PAYMENTS_ALL.ext_bank_acct_pmt_factor_flag%TYPE,
	ext_bank_acct_owner_party_id      IBY_PAYMENTS_ALL.ext_bank_acct_owner_party_id%TYPE,
	ext_bank_branch_party_id      IBY_PAYMENTS_ALL.ext_bank_branch_party_id%TYPE,
	ext_bank_alt_name      IBY_PAYMENTS_ALL.ext_bank_alt_name%TYPE,
	ext_bank_branch_alt_name      IBY_PAYMENTS_ALL.ext_bank_branch_alt_name%TYPE,
	ext_bank_account_alt_name      IBY_PAYMENTS_ALL.ext_bank_account_alt_name%TYPE,
	ext_bank_account_num_elec      IBY_PAYMENTS_ALL.ext_bank_account_num_elec%TYPE,
	ext_bank_branch_location_id      IBY_PAYMENTS_ALL.ext_bank_branch_location_id%TYPE,
	ext_bank_acct_owner_party_name      IBY_PAYMENTS_ALL.ext_bank_acct_owner_party_name%TYPE
	);

	TYPE l_payee_acct_tbl_type IS TABLE OF l_payee_acct_rec INDEX BY BINARY_INTEGER;
	l_payee_acct_tbl  l_payee_acct_tbl_type;

	TYPE l_remit_rec IS RECORD(
	remit_advice_delivery_method      IBY_PAYMENTS_ALL.remit_advice_delivery_method%TYPE,
	remit_advice_email         IBY_PAYMENTS_ALL.remit_advice_email%TYPE,
	remit_advice_fax        IBY_PAYMENTS_ALL.remit_advice_fax%TYPE,
	declaration_exch_rate_type       IBY_PAYMENTS_ALL.declaration_exch_rate_type%TYPE,
	declaration_format       IBY_PAYMENTS_ALL.declaration_format%TYPE,
	bank_instruction1_format_value      IBY_PAYMENTS_ALL.bank_instruction1_format_value%TYPE,
	bank_instruction2_format_value      IBY_PAYMENTS_ALL.bank_instruction2_format_value%TYPE,
	payment_profile_acct_name       IBY_PAYMENTS_ALL.payment_profile_acct_name%TYPE,
	payment_profile_sys_name     IBY_PAYMENTS_ALL.payment_profile_sys_name%TYPE
	);

	TYPE l_remit_tbl_type IS TABLE OF l_remit_rec INDEX BY BINARY_INTEGER;
	l_remit_tbl  l_remit_tbl_type;

	TYPE l_ppr_rec IS RECORD(
	payment_process_request_name    IBY_PAYMENTS_ALL.payment_process_request_name%TYPE,
	source_product                  IBY_PAYMENTS_ALL.source_product%TYPE
	);

	TYPE l_ppr_tbl_type IS TABLE OF l_ppr_rec INDEX BY BINARY_INTEGER;
	l_ppr_tbl  l_ppr_tbl_type;

	TYPE l_del_rec IS RECORD(
	delivery_channel_format_value      IBY_PAYMENTS_ALL.DELIVERY_CHANNEL_FORMAT_VALUE%TYPE
	);


	TYPE l_del_tbl_type IS TABLE OF l_del_rec INDEX BY VARCHAR2(300);
	l_del_tbl  l_del_tbl_type;

	TYPE l_org_rec IS RECORD(
	org_name      IBY_PAYMENTS_ALL.org_name%TYPE
	);


	TYPE l_org_tbl_type IS TABLE OF l_org_rec INDEX BY BINARY_INTEGER;
	l_org_tbl  l_org_tbl_type;


	TYPE l_pmt_reason_rec IS RECORD(
        payment_reason_format_value      IBY_PAYMENTS_ALL.payment_reason_format_value%TYPE
	);


	TYPE l_pmt_reason_tbl_type IS TABLE OF l_pmt_reason_rec INDEX BY VARCHAR2(300);
	l_pmt_reason_tbl  l_pmt_reason_tbl_type;


 /* DS for audit payment data caching */

/*Bug 8209474 Type is being created to hold payee id for Invalid Payees*/

TYPE l_payee_tbl_type IS TABLE OF IBY_PAYMENTS_ALL.ext_payee_id%TYPE  index by binary_integer;
l_payeeTab l_payee_tbl_type; --To Hold Validation Failed payment's Payee information
l_invalid_payee_index BINARY_INTEGER;
/*Type is being created to hold payeedid for Invalid Payees*/

 CURSOR check_hook_pmt
 IS
 select
 payment_id,
 payment_amount
 from
 IBY_HOOK_PAYMENTS_T
 ;


  G_CURRENT_RUNTIME_LEVEL      CONSTANT NUMBER       := FND_LOG.G_CURRENT_RUNTIME_LEVEL;
  G_LEVEL_UNEXPECTED           CONSTANT NUMBER       := FND_LOG.LEVEL_UNEXPECTED;
  G_LEVEL_ERROR                CONSTANT NUMBER       := FND_LOG.LEVEL_ERROR;
  G_LEVEL_EXCEPTION            CONSTANT NUMBER       := FND_LOG.LEVEL_EXCEPTION;
  G_LEVEL_EVENT                CONSTANT NUMBER       := FND_LOG.LEVEL_EVENT;
  G_LEVEL_PROCEDURE            CONSTANT NUMBER       := FND_LOG.LEVEL_PROCEDURE;
  G_LEVEL_STATEMENT            CONSTANT NUMBER       := FND_LOG.LEVEL_STATEMENT;

 --
 -- Forward declarations
 --
 PROCEDURE print_debuginfo(
              p_module     IN VARCHAR2,
              p_debug_text IN VARCHAR2,
              p_debug_level IN VARCHAR2  DEFAULT FND_LOG.LEVEL_STATEMENT
              );

 -- Get Employee Full Name from HR tables

 FUNCTION Get_Employee_Full_Name(p_person_id IN NUMBER,p_party_id IN NUMBER,p_party_name IN VARCHAR2)
 RETURN VARCHAR2
 IS
     l_module_name           CONSTANT VARCHAR2(200) := G_PKG_NAME || '.Get_Employee_Full_Name';
     p_emp_full_name VARCHAR2(500);
 BEGIN
     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Fetching employee full name from HR for party_id ' || p_party_id || ' person_id ' || p_person_id);


     END IF;

     SELECT per.full_name
     INTO p_emp_full_name
     FROM per_all_people_f per
     WHERE per.person_id = p_person_id
      AND per.party_id = p_party_id
      AND sysdate BETWEEN per.effective_start_date
      AND per.effective_end_date;

     RETURN p_emp_full_name;

 EXCEPTION
  WHEN OTHERS THEN
     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'EXCEPTION : Unable to fetch employee full name from HR');
     END IF;

     RETURN p_party_name;

 END Get_Employee_Full_Name;

/*--------------------------------------------------------------------
 | NAME:
 |     createPayments
 |
 | PURPOSE:
 |     Entry point for payment creation (F6) flow. All payment grouping
 |     rules are handled within this method.
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE createPayments(
     p_payment_request_id         IN IBY_PAY_SERVICE_REQUESTS.
                                         payment_service_request_id%TYPE,
     p_pmt_rejection_level        IN IBY_INTERNAL_PAYERS_ALL.
                                         payment_rejection_level_code%TYPE,
     p_review_proposed_pmts_flag  IN IBY_INTERNAL_PAYERS_ALL.
                                         require_prop_pmts_review_flag%TYPE,
     p_override_complete_point    IN VARCHAR2,
     p_bill_payable_flag          IN         VARCHAR2,
     p_maturity_date              IN         DATE,
     p_calling_procedure          IN         VARCHAR2,
     x_return_status      IN OUT NOCOPY VARCHAR2)
 IS

 l_module_name           CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                       '.createPayments';

 l_ca_payreq_cd            VARCHAR2(255) := '';
 l_ca_id                   NUMBER(15)    := 0;
 l_all_pmts_success_flag   BOOLEAN       := FALSE;
 l_all_pmts_failed_flag    BOOLEAN       := FALSE;

 /* rejection level system options */
 l_rejection_level         VARCHAR2(200);
 l_review_pmts_flag        VARCHAR2(1)   := 'N';

 l_paymentTab        IBY_PAYGROUP_PUB.paymentTabType;
 l_docsInPmtTab      IBY_PAYGROUP_PUB.docsInPaymentTabType;

 /* these two are passed to calling app via hook */
 l_hookPaymentTab    IBY_PAYGROUP_PUB.hookPaymentTabType;
 l_hookDocsInPmtTab  IBY_PAYGROUP_PUB.hookDocsInPaymentTabType;

 /* payment request imposed limits on payments */
 l_payReqCriteria    IBY_PAYGROUP_PUB.payReqImposedCriteria;

 /* central bank reporting requirements imposed on each payment */
 --l_cbrTab            IBY_PAYGROUP_PUB.centralBankReportTabType;

 /* holds the error messages against failed documents */
 l_docErrorTab       IBY_VALIDATIONSETS_PUB.docErrorTabType;
 l_docTokenTab       IBY_VALIDATIONSETS_PUB.trxnErrTokenTabType;
 l_DocsInPmtCount    NUMBER;

 p_trx_pmt_line_index BINARY_INTEGER;

 l_payreq_status     VARCHAR2(500);
 l_prehook_cnt       NUMBER;

 l_calc_jp_bank_charges    VARCHAR2(500);
 l_call_ap_awt_callout    VARCHAR2(500);

 CURSOR c_pmtIdStatus(p_pmt_service_req_id NUMBER) is
 SELECT
 payment_id,
 payment_status
 FROM
 iby_payments_all
 WHERE payment_service_request_id = p_pmt_service_req_id
 ;

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'ENTER');

     print_debuginfo(l_module_name, 'Payment request id : '
         || p_payment_request_id);
     END IF;

     l_payreq_status := get_payreq_status(p_payment_request_id);

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'Payment request status: '
         || l_payreq_status);

     END IF;
     /*
      * Do not perform grouping if the payments are being
      * re-built.
      *
      * Fix for bug 4946181.
      */

     /*
      * Fix for bug 5331527:
      *
      * PPRs in REQ_STATUS_PEN_REV_PMT_VAL need to be
      * rebuilt.
      *
      * Therefore, call rebuildPayments(..) for such PPRs.
      */
      l_calling_app_procedure := '';
     IF(p_calling_procedure = 'IBY_DISBURSE_SINGLE_PMT_PKG') THEN
        IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Call has come from IBY_SINGPAY_PUB API so calling performDocumentGrouping Directly');
        END IF;
          /*
          * Group the documents of the payment request into payments.
          */
         l_calling_app_procedure := 'IBY_DISBURSE_SINGLE_PMT_PKG';
         performDocumentGrouping(p_payment_request_id,
	 --l_paymentTab,
         l_ca_id, l_ca_payreq_cd, l_payReqCriteria
--          ,l_cbrTab
            );



     /*
      * Bug Number:8813346
      * IMPORTANT CHECK FOR SINGLE PAYMENTS:
      *
      * After hardcoded grouping not more than one payment should be
      * created from the given documents for the single payment flow.
      *
      * This is because the calling app is expected to have performed
      * the hardcoded grouping before the single payment API is invoked.
      *
      * If we have created more than one payment from the given document,
      * it is an error and return failure.
      */
     IF (IBY_PAYGROUP_PUB.pmtTable.payment_id.COUNT <> 1) THEN

         print_debuginfo(l_module_name, 'Application of hardcoded '
             || 'grouping rules did not generate exactly one payment. '
             || 'Only one payment can be created for single payments. '
             || 'Payment creation failed.'
             );

         x_return_status := FND_API.G_RET_STS_ERROR;

         APP_EXCEPTION.RAISE_EXCEPTION;

     END IF;




         updateDocsWithPaymentID;   -- new approach , without GT needs to be overridden
     ELSE
        IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Call has come from IBY_DISBURSE_SUBMIT_PUB_PKG API so verifying the l_payreq_status before calling performDocumentGrouping');
        END IF;
         IF (l_payreq_status <> REQ_STATUS_RETRY_PMT_CREAT AND
             l_payreq_status <> REQ_STATUS_USER_REVW_ERR)  THEN

             /*
              * Group the documents of the payment request into payments.
              */
             performDocumentGrouping(p_payment_request_id,
             --l_paymentTab,
             l_ca_id, l_ca_payreq_cd, l_payReqCriteria
    --          ,l_cbrTab
                );

             updateDocsWithPaymentID;   -- new approach , without GT needs to be overridden

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'After grouping '
                 || IBY_PAYGROUP_PUB.pmtTable.payment_id.COUNT   || ' payment(s) were created from '
                 || ' document(s) for payment request '
                 || p_payment_request_id || '.');
              END IF;
         ELSE

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Not performing grouping '
                 || 'for payment request '
                 || p_payment_request_id
                 || ' as payments are being re-built ..');
             END IF;

             rebuildPayments(p_payment_request_id, l_paymentTab,
                 l_ca_id, l_ca_payreq_cd, l_payReqCriteria
    --         , l_cbrTab
               );

              populatepmtTable(p_payment_request_id);

         END IF;
      END IF;
     /*
      * Fix for bug 5357948:
      *
      * Search for common attributes of the documents
      * of each payment, and set the corresponding
      * attribute on the parent payment itself if
      * such a common attribute is found.
      */
       /* commenting out the code to pull out common values [due date, delivery channel, uri]
 	* and moving the logic to insertDocIntoPayment API.
 	* This code was called even if grouping rules for these 3 attributes were not
 	* set - to get common attributes to be used later */

      --sweepCommonPmtAttributes(l_paymentTab, l_docsInPmtTab);

     /*
      * Set the default attributes for the created payments.
      */

      /* Build pmts perf issue -
       * Move the code to initializePmts to insertDocIntoPayment - when
       * creating a new payment */

  --   initializePmts(l_paymentTab);

     /*
      * Handle credit memos
      */

     /*
      * Update: Credit memo handling is now performed at the calling
      * application itself.
      * - rameshsh, 3/29/2005
      */
     --printDocsInPmtTab(l_docsInPmtTab);
     --performCreditMemoHandling(l_paymentTab, l_docsInPmtTab);
     --printDocsInPmtTab(l_docsInPmtTab);

     /*
      * Maturity date calculation
      *
      * For bills payable
      *   a.k.a promissory notes
      *   a.k.a future dated payments
      */
     --performMaturityDateCalculation(l_paymentTab, l_docsInPmtTab);
     --performMaturityDateCalculation(l_paymentTab);

     /*
      * Fix for bug 5935493:
      *
      * Payment validations are dependent upon finding the
      * payments in the IBY_PAYMENTS_ALL table. Therefore, insert
      * the payments from the PLSQL table into the
      * IBY_PAYMENTS_ALL table.
      *
      * Central bank reporting could be implemented via a hook
      * that is expecting payments to be populated in
      * IBY_PAYMENTS_ALL table. Therefore, payments need to
      * inserted before performing central bank reporting as well.
      */

        /* not needed now as updateDocsWithPaymentID is moved up and we are not inserting
       * into IBY_PAYMENTS_ALL table now
       */

	/*

     IF (l_payreq_status <> REQ_STATUS_RETRY_PMT_CREAT AND
         l_payreq_status <> REQ_STATUS_USER_REVW_ERR)  THEN

         insertPayments(l_paymentTab);
	  */


         /*
          * Fix for bug 5972585:
          *
          * Update the documents payable that are part of the created
          * payments with payment ids.
          *
          * This is normally done in performDBUpdates(..) call at
          * the end of this method. However, some customers might
          * want to do custom validations on documents that are
          * part of the created payments. Therefore, update the
          * documents with payment ids before the payment validation
          * call.
          *
          * We do this even before central bank reporting because
          * again the customer could potentially want to retrieve
          * documents that are part of the created payments in the
          * central bank reporting hook.
          */
         /*
	 updateDocsWithPaymentID(l_docsInPmtTab);
         updateDocsWithPaymentID;
     END IF;

     */

     FOR p_trx_pmt_line_index IN nvl(IBY_PAYGROUP_PUB.pmtTable.payment_id.FIRST,0) .. nvl(IBY_PAYGROUP_PUB.pmtTable.payment_id.LAST,-99)
     LOOP
      IF(p_calling_procedure = 'IBY_DISBURSE_SINGLE_PMT_PKG') THEN
        IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Call has come from IBY_SINGPAY_PUB API so not calling performMaturityDateCalculation');
        END IF;
        IF (UPPER(p_bill_payable_flag) = 'Y') THEN

         /*
          * We can use index 1 to access the payment because
          * only one payment is expected to be created
          * (this being a single payment).
          */
         IBY_PAYGROUP_PUB.pmtTable.maturity_date(p_trx_pmt_line_index) := p_maturity_date;

         /*
          * Fix for bug 5334222:
          *
          * Set the bills payable flag to 'Y' whenever the
          * maturity date is set.
          */
         IBY_PAYGROUP_PUB.pmtTable.bill_payable_flag(p_trx_pmt_line_index) := 'Y';

               IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
       print_debuginfo(l_module_name, 'Payment '
                       || IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index)
                       || ' is not a future dated payment'
                       );
              END IF;

         ELSE

             print_debuginfo(l_module_name, 'Not setting maturity '
                 || 'date for payment '
                 || IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index)
                 || ' as it is not a bill payable.'
                 );

         END IF;
      ELSE
        IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Call has come from IBY_DISBURSE_SUBMIT_PUB_PKG API so calling performMaturityDateCalculation');
        END IF;
       performMaturityDateCalculation(p_trx_pmt_line_index);
      END IF;
       auditPaymentData(p_trx_pmt_line_index);
       performCentralBankReporting(p_trx_pmt_line_index);
--       applyPaymentValidationSets(p_payment_request_id, p_trx_pmt_line_index ,l_docErrorTab, l_docTokenTab);
  --     performPayReqBasedValidations(l_payReqCriteria, p_trx_pmt_line_index, l_docErrorTab, l_docTokenTab);

     END LOOP;

    IF(p_calling_procedure = 'IBY_DISBURSE_SINGLE_PMT_PKG') THEN
        IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Call has come from IBY_SINGPAY_PUB API so calling insertPayments Directly');
        END IF;
        insertPayments;
    ELSE
        IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Call has come from IBY_DISBURSE_SUBMIT_PUB_PKG API so verifying the l_payreq_status before calling insertPayments');
        END IF;
            IF (l_payreq_status <> REQ_STATUS_RETRY_PMT_CREAT AND
               l_payreq_status <> REQ_STATUS_USER_REVW_ERR)  THEN

            insertPayments;

            ELSE

            updatePayments;

            print_debuginfo(l_module_name, 'Empty')	;

            END IF;
    END IF;

     FOR p_trx_pmt_line_index IN nvl(IBY_PAYGROUP_PUB.pmtTable.payment_id.FIRST,0) .. nvl(IBY_PAYGROUP_PUB.pmtTable.payment_id.LAST,-99)
      LOOP

      applyPaymentValidationSets(p_payment_request_id, p_trx_pmt_line_index ,l_docErrorTab, l_docTokenTab);
      negativePmtAmountCheck(p_trx_pmt_line_index, l_docErrorTab, l_docTokenTab);
      IF(p_calling_procedure = 'IBY_DISBURSE_SINGLE_PMT_PKG') THEN
        IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Call has come from IBY_SINGPAY_PUB API so not calling performPayReqBasedValidations');
        END IF;
      ELSE
        IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Call has come from IBY_DISBURSE_SUBMIT_PUB_PKG API so calling performPayReqBasedValidations');
        END IF;
      performPayReqBasedValidations(l_payReqCriteria, p_trx_pmt_line_index, l_docErrorTab, l_docTokenTab);
      END IF;
     END LOOP;

     adjustSisterDocsAndPmts(l_docErrorTab,
         l_docTokenTab);

     -- to update the changes done in adjustSisDocs

     updatePayments;

     /*
      * Call post-payment creation hook. This hook will pass
      * the created payments to the calling application for
      * approval/adjustment.
      *
      * The adjusted payments are read back and inserted into
      * IBY_PAYMENTS_LL table.
      *
      * This is a general hook that is called for all other
      * products except AP. For AP special hooks are called
      * below.
      */

     IF (l_ca_id <> 200) THEN

         /*
          * Only successful payments are passed to be passed to
          * to the calling application via the hook / callout.
          *
          * From the existing list of all payments, create new data
          * structures that only store successful payments. This
          * 'success only' list of payments will be passed to the
          * calling application.
          *
          * This method writes the payment data to global temp tables.
          */
         /*performPreHookProcess(l_ca_payreq_cd, l_ca_id, l_paymentTab,
             l_docsInPmtTab, l_hookPaymentTab, l_hookDocsInPmtTab);*/

         performPreHookProcess(l_ca_payreq_cd, p_payment_request_id, l_prehook_cnt, l_ca_id
	   --l_paymentTab,
           --l_hookPaymentTab
	   );

         IF(l_prehook_cnt <> 0) THEN

         /*
          * Hook to call external application for implementation of the
          * following functionality:
          *
          * 1. Bank charge calculation
          * 2. Tax withtholding
          *
          * Any other miscellaneous correction of payment/document data
          * is also allowed in the hook.
          */
         callHook(p_payment_request_id);

         /*
          * The external app may decide not to pay a document(s)
          * within a payment, or may decide not to make a payment(s).
          * In such cases, the external app will set the 'don't pay flag'
          * and provide a 'don't pay reason' at the document / payment
          * level (as appropriate) in the provided data structures.
          *
          * If a document(s) is marked as don't pay, then we must
          * adjust the payment amount appropriately.
          *
          * Also, some documents are related via 'payment grouping number'.
          * All documents that are related must be failed and their
          * constituent payment amounts must be adjusted
          *
          * This method reads the payment data from global temp tables.
          */
         /*performPostHookProcess(l_paymentTab, l_docsInPmtTab, l_hookPaymentTab,
             l_hookDocsInPmtTab, l_docErrorTab, l_docTokenTab); */

         performPostHookProcess(
	   --  l_paymentTab,
	   --  l_hookPaymentTab,
             l_ca_payreq_cd,
	     l_prehook_cnt,
             l_docErrorTab,
	     l_docTokenTab);

       ELSE
            IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Value of l_prehook_cnt is:' || l_prehook_cnt || 'so not calling any hook');
            END IF;
       END IF;
     END IF; -- if calling product <> AP

     /*
      * SPECIAL HOOKS FOR AP:
      *
      * + Perform special handling for Japanese bank charges.
      * + Invoke extended witholdings procedure (AWT)
      */
     IF (l_ca_id = 200) THEN

         /*handleJapaneseBankCharges(l_ca_payreq_cd, l_ca_id,
             l_paymentTab, l_docsInPmtTab, l_docErrorTab, l_docTokenTab);

         performExtendedWitholding(
	 l_ca_payreq_cd, l_ca_id,
             l_paymentTab, l_docsInPmtTab, l_docErrorTab, l_docTokenTab);*/

       IF(p_calling_procedure = 'IBY_DISBURSE_SINGLE_PMT_PKG') THEN
            IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Call has come from IBY_SINGPAY_PUB API so not calling any hook');
            END IF;
       ELSE
            IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Call has come from IBY_DISBURSE_SUBMIT_PUB_PKG API so calling hooks');
            END IF;

            l_calc_jp_bank_charges := 'N';

            BEGIN
            SELECT  'Y'
            INTO l_calc_jp_bank_charges
            FROM dual
            WHERE    EXISTS (SELECT 1
                                   FROM ap_system_parameters_all asp
                                             , IBY_PAYMENTS_ALL pmt
                                 WHERE pmt.PAYMENT_SERVICE_REQUEST_ID = p_payment_request_id
                                      AND pmt.org_id = asp.org_id
                                       AND nvl(asp.use_bank_charge_flag,'N') = 'Y');
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
                l_calc_jp_bank_charges := 'N';
                print_debuginfo(l_module_name, 'No Data Found Exception Occured for the Query');
              WHEN OTHERS THEN
               l_calc_jp_bank_charges := 'N';
               print_debuginfo(l_module_name, 'Exception Occured for the Query');
           END;
             IF(l_calc_jp_bank_charges = 'Y') THEN
                 handleJapaneseBankCharges(
                 l_ca_payreq_cd,
                 p_payment_request_id,
                 l_ca_id,
                 --l_paymentTab,
                   l_docErrorTab,
                   l_docTokenTab);
             END IF;
         BEGIN
            SELECT	'Y'
              INTO l_call_ap_awt_callout
              FROM dual
              WHERE	 EXISTS (SELECT 1
                                          FROM ap_system_parameters_all asp,
                                          IBY_PAYMENTS_ALL pmt
                                          WHERE pmt.PAYMENT_SERVICE_REQUEST_ID = p_payment_request_id
                                                    AND pmt.org_id = asp.org_id
                                                     AND nvl(asp.allow_awt_flag,'N') = 'Y');
        EXCEPTION
           WHEN NO_DATA_FOUND THEN
                  l_call_ap_awt_callout := 'N';
                  print_debuginfo(l_module_name, 'No Data Found Exception Occured for the Query');
           WHEN OTHERS THEN
                 l_call_ap_awt_callout := 'N';
                 print_debuginfo(l_module_name, 'Exception Occured for the Query');
        END;
         IF(l_call_ap_awt_callout = 'Y') THEN
             performExtendedWitholding(l_ca_payreq_cd,
                                     p_payment_request_id,
                                    l_ca_id,
                                 --l_paymentTab,
                                 l_docErrorTab,
                                 l_docTokenTab);
         END IF;
    END IF;
  END IF;

     /*
      * Flag payments that require separate remittance
      * advice.
      */
     --flagSeparateRemitAdvicePmts(l_paymentTab);

     -- calling the API without any parameters, as IBY PAYMENTS ALL table is used to fetch data */

     flagSeparateRemitAdvicePmts(l_ca_payreq_cd, p_payment_request_id);

     /*
      * Get the rejection level system option and pass
      * it to subsequent methods.
      */

     /*
      * Fix for bug 5302318:
      *
      * Request level system option overrides enterprise
      * level setting.
      */

     /*
      * If the user has provided the pmt rejection level on
      * the request use it.
      *
      * If not, get the rejection level system option at the
      * enterprose level.
      */
      IF(p_calling_procedure = 'IBY_DISBURSE_SINGLE_PMT_PKG') THEN
            IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Call has come from IBY_SINGPAY_PUB API so assigning the default values');
            END IF;
            /*
                * Get the rejection level system option and pass
                * it to subsequent methods.
                */

               /*
                * For single payments, there is no concept of
                * payment rejection level system option. In the
                * single payments flow, only one payment will be
                * created, so if the payment fails, the request
                * fails.
                *
                * So for single payments, the payment rejection
                * level is implictly 'REQUEST'.
                */
               l_rejection_level := 'REQUEST';

               /*
                * There is no question of reviewing the payment for
                * single payments. Review payments flag is only
                * applicable to standard payments built by the
                * Build Program.
                *
                * Hardcode the review payments flag to 'N' for single
                * payments.
                */
               l_review_pmts_flag := 'N';
       ELSE
            IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Call has come from IBY_DISBURSE_SUBMIT_PUB_PKG API so calling raiseBizEvents');
            END IF;
           IF (p_pmt_rejection_level IS NOT NULL) THEN

               /*
                * Use the payment rejection level passed in
                * with the payment service request (if available).
                */
               l_rejection_level := p_pmt_rejection_level;
               IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
       print_debuginfo(l_module_name, 'Using payment rejection '
                   || 'level [request-level setting]: '
                   || l_rejection_level
                   );
               END IF;
           ELSE

               /*
                * If the payment rejection level is not passed
                * in with the payment service request, derive
                * the payment rejection level setting at the
                * enterprise level.
                */
               l_rejection_level := getPmtRejLevelSysOption();
               IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
       print_debuginfo(l_module_name, 'Using payment rejection '
                   || 'level [neterprise-level setting]: '
                   || l_rejection_level
                   );
                END IF;
           END IF;

           /*
            * Get the review payments flag system option at
            * the enterprise level. This may be overridden if
            * request level review pmts flag is populated.
            */
           l_review_pmts_flag := getReviewPmtsSysOption();

           /*
            * Adjust the review payments flag based on the request level
            * parameter. If the request level parameter (if provided)
            * will override the system level setting.
            */
           IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
               print_debuginfo(l_module_name, 'Review payments flag '
               || '[enterprise-level setting]: '
               || l_review_pmts_flag
               );
           END IF;
           /*
            * Fix for bug 5021996:
            *
            * There are two flags related to review of proposed payments -
            * a. enterprise level setting (use by default).
            * b. request level parameter (overrides default).
            *
            * If user has not provided this flag as a request level
            * parameter, use the enterprise wide setting for this flag.
            *
            * Possible values for request level review proposed payment flag:
            * 1. Y - Stop payments for review
            * 2. N - Do not stop payments for review
            * 3. X - User has not provided a value, use enterprise setting.
            */
           IF (UPPER(p_review_proposed_pmts_flag) = 'Y'  OR
               UPPER(p_review_proposed_pmts_flag) = 'N') THEN

               IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
       print_debuginfo(l_module_name, 'Review payments flag '
                   || '[request-level setting]: '
                   || p_review_proposed_pmts_flag
                   || ' (this will override enterprise level setting)'
                   );

           END IF;

               l_review_pmts_flag := p_review_proposed_pmts_flag;

           END IF;

           IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
       print_debuginfo(l_module_name, 'Final review payments flag '
               || 'setting: '
               || l_review_pmts_flag
               );
           END IF;
     /*
      * All payments for this payment request have been
      * created and stored in a PLSQL table. Now write these
      * payments to the database.
      *
      * Similarly, update the documents table by providing a
      * payment id to each document.
      */

     /*
      * Pass in the current ppr status. This is used
      * to determine the next status in some cases.
      */
     x_return_status := l_payreq_status;
     -- deleting the pmtTable DS and repopulating with just payment status from iby_payments_all


     /*OPEN  c_pmtIdStatus(p_payment_request_id);
     FETCH c_pmtIdStatus BULK COLLECT INTO
           IBY_PAYGROUP_PUB.pmtTable.payment_id,
           IBY_PAYGROUP_PUB.pmtTable.payment_status;
     CLOSE c_pmtIdStatus;*/
     END IF;

     performDBUpdates(p_payment_request_id, l_rejection_level,
         l_review_pmts_flag,
	 --l_paymentTab,
         l_all_pmts_success_flag,
         l_all_pmts_failed_flag, x_return_status,
         l_docErrorTab, l_docTokenTab
         );

     delete_pmtTable;

     /*
      * Finally, raise business events to inform the calling app
      * if any payments have failed.
      *
      * Note: this should be the last call after database records
      * have been inserted / updated. This is because you cannot
      * 'rollback' a business event once raised.
      */
     IF(p_calling_procedure = 'IBY_DISBURSE_SINGLE_PMT_PKG') THEN
            IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Call has come from IBY_SINGPAY_PUB API so not calling raiseBizEvents');
            END IF;
       ELSE
            IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Call has come from IBY_DISBURSE_SUBMIT_PUB_PKG API so calling raiseBizEvents');
            END IF;
         raiseBizEvents(p_payment_request_id, l_ca_payreq_cd, l_ca_id,
             l_rejection_level, l_review_pmts_flag,
             l_all_pmts_success_flag, l_all_pmts_failed_flag);
     END IF;
     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'EXIT');
     END IF;
 END createPayments;

/*--------------------------------------------------------------------
 | NAME:
 |     performDocumentGrouping
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE performDocumentGrouping(
     p_payment_request_id   IN IBY_PAY_SERVICE_REQUESTS.
                                         payment_service_request_id%TYPE,
     x_paymentTab           IN OUT NOCOPY IBY_PAYGROUP_PUB.paymentTabType,
     x_docsInPmtTab         IN OUT NOCOPY IBY_PAYGROUP_PUB.docsInPaymentTabType,
     x_ca_id                IN OUT NOCOPY IBY_PAY_SERVICE_REQUESTS.
                                              calling_app_id%TYPE,
     x_ca_payreq_cd         IN OUT NOCOPY IBY_PAY_SERVICE_REQUESTS.
                                              call_app_pay_service_req_code
                                              %TYPE,
     x_payReqCriteria       IN OUT NOCOPY IBY_PAYGROUP_PUB.
                                              payReqImposedCriteria

-- , x_cbrTab               IN OUT NOCOPY IBY_PAYGROUP_PUB.
--                                             centralBankReportTabType
     )
 IS
 l_module_name           CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                   '.performDocumentGrouping';
 l_first_record          VARCHAR2(1)   := 'Y';
 l_payment_id            NUMBER(15)    := 0;
 l_payment_total         NUMBER(15)    := 0;
 l_payment_docs_cnt      NUMBER(10)    := 0;
 l_sup_msg_flag          VARCHAR2(1)   := 'N';
 l_bnk_chg_brer_flag     VARCHAR2(1)   := 'N';
 l_delv_chnl_flag        VARCHAR2(1)   := 'N';
 l_express_pmt_flag      VARCHAR2(1)   := 'N';
 l_pmt_details_flag      VARCHAR2(1)   := 'N';
 l_pmt_details_len       NUMBER(15)    := 0;
 l_pmt_det_formula       VARCHAR2(2000):= 0;
 l_max_docs_flag         VARCHAR2(1)   := 'N';
 l_max_docs_limit        NUMBER(15)    := 0;
 l_docs_in_pmt_count     NUMBER(15)    := 0;
 l_unique_remit_id_flag  VARCHAR2(1)   := 'N';
 l_pmt_reason_flag       VARCHAR2(1)   := 'N';
 l_due_date_flag         VARCHAR2(1)   := 'N';
 l_prom_note_flag        VARCHAR2(1)   := 'N';

 l_profile_id            IBY_PAYMENT_PROFILES.payment_profile_id%type;

 /*
  * Used to substitute null values in date comparisons.
  * It is assumed that year 5100 = doomsday.
  */
 l_impossible_date       DATE := TO_DATE('01/01/5100 10:25:55',
                                     'MM/DD/YYYY HH24:MI:SS');

 l_bank_inst1_code       IBY_PAYMENTS_ALL.bank_instruction1_code%TYPE;
 l_bank_inst2_code       IBY_PAYMENTS_ALL.bank_instruction1_code%TYPE;
 l_pmt_txt_msg1          IBY_PAYMENTS_ALL.payment_text_message1%TYPE;
 l_pmt_txt_msg2          IBY_PAYMENTS_ALL.payment_text_message2%TYPE;
 l_pmt_txt_msg3          IBY_PAYMENTS_ALL.payment_text_message3%TYPE;

 l_processing_type       VARCHAR2(100);  -- CHECK | ELECTRONIC
 l_calc_doc_detail       VARCHAR2(1000); -- Stores details for a single doc

 /* these are related to central bank reporting */
 l_decl_option             VARCHAR2(100) := '';
 l_decl_only_fx_flag       VARCHAR2(1)   := '';
 l_decl_curr_fx_rate_type  VARCHAR2(255) := '';
 l_decl_curr_code          VARCHAR2(10)  := '';
 l_decl_threshold_amount   NUMBER(15)    := 0;
/*
 l_cbrRec                  IBY_PAYGROUP_PUB.centralBankReportRecType;
 l_cbrTab                  IBY_PAYGROUP_PUB.centralBankReportTabType;
 l_cbr_rec_exists          BOOLEAN       := FALSE;
*/

 l_ca_payreq_cd            VARCHAR2(255) := '';
 l_ca_id                   NUMBER(15)    := 0;
 l_all_pmts_success_flag   BOOLEAN       := FALSE;
 l_all_pmts_failed_flag    BOOLEAN       := FALSE;
 l_le_id                   NUMBER(15)    := 0;

 /* rejection level system options */
 l_rejection_level         VARCHAR2(200);
 l_review_pmts_flag        VARCHAR2(1)   := 'N';

 l_paymentRec        IBY_PAYMENTS_ALL%ROWTYPE;
 l_docsInPmtRec      IBY_PAYGROUP_PUB.docsInPaymentRecType;


 /*
  * These two are related data structures. Each row in paymentTabType
  * PLSQL table is used in inserting a row into the IBY_PAYMENTS_ALL
  * table.
  *
  * Since the IBY_PAYMENTS_ALL table does not contain a document id, a
  * separate data structure is needed to keep track of the documents
  * that are part of a payment. This information is tracked in the
  * docsInPaymentTabType table. The rows in docsInPaymentTabType are
  * used to update the rows in IBY_DOCS_PAYABLE_ALL table with
  * payment ids.
  *
  *            x_paymentTab                        x_docsInPmtTab
  *       (insert into IBY_PAYMENTS_ALL)          (update IBY_DOCS_PAYABLE)
  * /-------------------------------------\       /------------\
  * |Payment|Payment|..|Payment|Docs   |..|       |Payment|Doc |
  * |Id     |Profile|..|Amount |Payable|..|       |Id     |Id  |
  * |       |Id     |..|       |Count  |..|       |       |    |
  * |-------------------------------------|       |------------|
  * |   4000|     10|  |    550|      3|  |       |   4000| 501|
  * |       |       |  |       |       |  |       |   4000| 504|
  * |       |       |  |       |       |  |       |   4000| 505|
  * |-------|-------|--|-------|-------|--|       |-------|----|
  * |   4001|     10|  |1063.70|     19|  |       |   4001| 502|
  * |       |       |  |       |       |  |       |   4001| 509|
  * |       |       |  |       |       |  |       |   4001| 511|
  * |       |       |  |       |       |  |       |   4001| 523|
  * |       |       |  |       |       |  |       |     : |  : |
  * |-------|-------|--|-------|-------|--|       |-------|----|
  * |    :  |     : |  |    :  |     : |  |       |     : |  : |
  * \_______|_______|__|_______|_______|__/       \_______|____/
  *
  * Combining these two structures into one structure is messy
  * because you cannot directly use the combined data structure for
  * bulk updates.
  */

 /* these two are passed to calling app via hook */
 l_hookPaymentTab    IBY_PAYGROUP_PUB.hookPaymentTabType;
 l_hookDocsInPmtTab  IBY_PAYGROUP_PUB.hookDocsInPaymentTabType;

 /* holds the error messages against failed documents */
 l_docErrorTab       IBY_VALIDATIONSETS_PUB.docErrorTabType;

 /* holds list of internal bank accounts with corresponding legal entity id */
 l_bankAcctLETab     bankAccountLETabType;

 l_commonAttributes commonAttributesTabType;

 /* previous document attributes */
 prev_doc_id                 iby_docs_payable_all.document_payable_id%TYPE;
 prev_ca_id                  iby_docs_payable_all.calling_app_id%TYPE;
 prev_ca_doc_id1             iby_docs_payable_all.
                                 calling_app_doc_unique_ref1%TYPE;
 prev_ca_doc_id2             iby_docs_payable_all.
                                 calling_app_doc_unique_ref2%TYPE;
 prev_ca_doc_id3             iby_docs_payable_all.
                                 calling_app_doc_unique_ref3%TYPE;
 prev_ca_doc_id4             iby_docs_payable_all.
                                 calling_app_doc_unique_ref4%TYPE;
 prev_ca_doc_id5             iby_docs_payable_all.
                                 calling_app_doc_unique_ref5%TYPE;
 prev_pp_tt_cd               iby_docs_payable_all.pay_proc_trxn_type_code%TYPE;
 prev_pmt_grp_num            iby_docs_payable_all.payment_grouping_number%TYPE;
 prev_pmt_method_cd          iby_docs_payable_all.payment_method_code%TYPE;
 prev_doc_pmt_currency       iby_docs_payable_all.payment_currency_code%TYPE;
 prev_doc_pmt_amount         iby_docs_payable_all.payment_amount%TYPE;
 prev_int_bank_acct_id       iby_docs_payable_all.
                                 internal_bank_account_id%TYPE;
 prev_ext_bank_acct_id       iby_docs_payable_all.
                                 external_bank_account_id%TYPE;
 prev_payee_id               iby_docs_payable_all.payee_party_id%TYPE;
 prev_payee_site_id          iby_docs_payable_all.party_site_id%TYPE;
 prev_supplier_site_id       iby_docs_payable_all.supplier_site_id%TYPE;
 prev_remit_loc_id           iby_docs_payable_all.remit_to_location_id%TYPE;
 prev_ext_payee_id           iby_docs_payable_all.ext_payee_id%TYPE;
 prev_org_id                 iby_docs_payable_all.org_id%TYPE;
 prev_org_type               iby_docs_payable_all.org_type%TYPE;
 prev_profile_id             iby_docs_payable_all.payment_profile_id%TYPE;
 prev_pay_alone_flag         iby_docs_payable_all.exclusive_payment_flag%TYPE;
 prev_supplier_msg1          iby_docs_payable_all.remittance_message1%TYPE;
 prev_supplier_msg2          iby_docs_payable_all.remittance_message2%TYPE;
 prev_supplier_msg3          iby_docs_payable_all.remittance_message3%TYPE;
 prev_bnk_chg_bearer         iby_docs_payable_all.bank_charge_bearer%TYPE;
 prev_delivery_channel       iby_docs_payable_all.delivery_channel_code%TYPE;
 prev_settle_priority        iby_docs_payable_all.settlement_priority%TYPE;
 prev_uri                    iby_docs_payable_all.
                                 unique_remittance_identifier%TYPE;
 prev_uri_checkdigits        iby_docs_payable_all.uri_check_digit%TYPE;
 prev_pmt_reason_code        iby_docs_payable_all.payment_reason_code%TYPE;
 prev_pmt_reason_commts      iby_docs_payable_all.payment_reason_comments%TYPE;
 prev_pmt_function           iby_docs_payable_all.payment_function%TYPE;
 prev_pmt_date               iby_docs_payable_all.payment_date%TYPE;
 prev_pmt_due_date           iby_docs_payable_all.payment_due_date%TYPE;
 prev_benef_party            iby_docs_payable_all.beneficiary_party%TYPE;

 /* payee (employee) address related fields */
 prev_address_source         iby_docs_payable_all.address_source%TYPE;
 prev_emp_add_code           iby_docs_payable_all.employee_address_code%TYPE;
 prev_emp_person_id          iby_docs_payable_all.employee_person_id%TYPE;
 prev_emp_addr_id            iby_docs_payable_all.employee_address_id%TYPE;

 prev_emp_pmt_flag           iby_docs_payable_all.employee_payment_flag%TYPE;

 /*TPP-Start*/
 prev_inv_payee_party_id         iby_docs_payable_all.inv_payee_party_id%TYPE;
 prev_inv_party_site_id          iby_docs_payable_all.inv_party_site_id%TYPE;
 prev_inv_supplier_site_id       iby_docs_payable_all.inv_supplier_site_id%TYPE;
 prev_ext_inv_payee_id           iby_docs_payable_all.ext_inv_payee_id%TYPE;
 prev_inv_beneficiary_party            iby_docs_payable_all.inv_beneficiary_party%TYPE;

 curr_inv_payee_party_id         iby_docs_payable_all.inv_payee_party_id%TYPE;
 curr_inv_party_site_id          iby_docs_payable_all.inv_party_site_id%TYPE;
 curr_inv_supplier_site_id       iby_docs_payable_all.inv_supplier_site_id%TYPE;
 curr_ext_inv_payee_id           iby_docs_payable_all.ext_inv_payee_id%TYPE;
 curr_inv_beneficiary_party            iby_docs_payable_all.inv_beneficiary_party%TYPE;
 /*TPP-End*/


 /* current document attributes */
 curr_doc_id                 iby_docs_payable_all.document_payable_id%TYPE;
 curr_ca_id                  iby_docs_payable_all.calling_app_id%TYPE;
 curr_ca_doc_id1             iby_docs_payable_all.
                                 calling_app_doc_unique_ref1%TYPE;
 curr_ca_doc_id2             iby_docs_payable_all.
                                 calling_app_doc_unique_ref2%TYPE;
 curr_ca_doc_id3             iby_docs_payable_all.
                                 calling_app_doc_unique_ref3%TYPE;
 curr_ca_doc_id4             iby_docs_payable_all.
                                 calling_app_doc_unique_ref4%TYPE;
 curr_ca_doc_id5             iby_docs_payable_all.
                                 calling_app_doc_unique_ref5%TYPE;
 curr_pp_tt_cd               iby_docs_payable_all.pay_proc_trxn_type_code%TYPE;
 curr_pmt_grp_num            iby_docs_payable_all.payment_grouping_number%TYPE;
 curr_pmt_method_cd          iby_docs_payable_all.payment_method_code%TYPE;
 curr_doc_pmt_currency       iby_docs_payable_all.payment_currency_code%TYPE;
 curr_doc_pmt_amount         iby_docs_payable_all.payment_amount%TYPE;
 curr_int_bank_acct_id       iby_docs_payable_all.
                                 internal_bank_account_id%TYPE;
 curr_ext_bank_acct_id       iby_docs_payable_all.
                                 external_bank_account_id%TYPE;
 curr_org_id                 iby_docs_payable_all.org_id%TYPE;
 curr_org_type               iby_docs_payable_all.org_type%TYPE;
 curr_payee_id               iby_docs_payable_all.payee_party_id%TYPE;
 curr_payee_site_id          iby_docs_payable_all.party_site_id%TYPE;
 curr_supplier_site_id       iby_docs_payable_all.supplier_site_id%TYPE;
 curr_remit_loc_id           iby_docs_payable_all.remit_to_location_id%TYPE;
 curr_ext_payee_id           iby_docs_payable_all.ext_payee_id%TYPE;
 curr_profile_id             iby_docs_payable_all.payment_profile_id%TYPE;
 curr_pay_alone_flag         iby_docs_payable_all.exclusive_payment_flag%TYPE;
 curr_supplier_msg1          iby_docs_payable_all.remittance_message1%TYPE;
 curr_supplier_msg2          iby_docs_payable_all.remittance_message2%TYPE;
 curr_supplier_msg3          iby_docs_payable_all.remittance_message3%TYPE;
 curr_bnk_chg_bearer         iby_docs_payable_all.bank_charge_bearer%TYPE;
 curr_delivery_channel       iby_docs_payable_all.delivery_channel_code%TYPE;
 curr_settle_priority        iby_docs_payable_all.settlement_priority%TYPE;
 curr_uri                    iby_docs_payable_all.
                                 unique_remittance_identifier%TYPE;
 curr_uri_checkdigits        iby_docs_payable_all.uri_check_digit%TYPE;
 curr_pmt_reason_code        iby_docs_payable_all.payment_reason_code%TYPE;
 curr_pmt_reason_commts      iby_docs_payable_all.payment_reason_comments%TYPE;
 curr_pmt_function           iby_docs_payable_all.payment_function%TYPE;
 curr_pmt_date               iby_docs_payable_all.payment_date%TYPE;
 curr_pmt_due_date           iby_docs_payable_all.payment_due_date%TYPE;
 curr_benef_party            iby_docs_payable_all.beneficiary_party%TYPE;

 /* payee (employee) address related fields */
 curr_address_source         iby_docs_payable_all.address_source%TYPE;
 curr_emp_add_code           iby_docs_payable_all.employee_address_code%TYPE;
 curr_emp_person_id          iby_docs_payable_all.employee_person_id%TYPE;
 curr_emp_addr_id            iby_docs_payable_all.employee_address_id%TYPE;

 curr_emp_pmt_flag           iby_docs_payable_all.employee_payment_flag%TYPE;

 /* these two are passed to the external application hook */
 l_amount_withheld           iby_docs_payable_all.amount_withheld%TYPE;

 /* used for maturity date calculation */
 l_discount_date             iby_docs_payable_all.discount_date%TYPE;

 /* passed to hook */
 l_discount_amount           iby_docs_payable_all.payment_curr_discount_taken
                                                      %TYPE;
 l_trx_line_index            BINARY_INTEGER;
 l_no_rec_in_ppr             BOOLEAN;
 G_LINES_PER_FETCH           CONSTANT  NUMBER:= 100;
-- G_LINES_PER_FETCH           CONSTANT  NUMBER:= 3;

 /*
  * This cursor up will pick up all valid documents for the specified
  * payment request. The select statement will order the documents
  * based on grouping criteria.
  *
  * As the grouping is operation is commutative, there is no
  * need to group the documents by any particular order (in
  * other words, grouping 1 followed by grouping 2, will lead
  * to the same results as grouping 2 followed by grouping 1).
  *
  * Important Note:
  * Always ensure that there is a corresponding order by
  * clause for each grouping criterion that you wish to use.
  * This is required in order to create minimum possible
  * payments from a given set of documents.
  *
  *
  * Populate legal entity ids for each of the created payments.
  * The legal entity id on the payment is a special attribute.
  * It is not a grouping rule, instead it has to be derived
  * from the internal bank account and populated.
  *
  */
 CURSOR c_documents(p_payment_request_id VARCHAR2)
 IS
 SELECT prq.call_app_pay_service_req_code,   -- Callers pay req id
        docs.document_payable_id,            -- Unique doc id asgn by IBY
        docs.calling_app_id,                 --| The caller
        docs.calling_app_doc_unique_ref1,    --| uses these
        docs.calling_app_doc_unique_ref2,    --| seven fields
        docs.calling_app_doc_unique_ref3,    --| to uniquely
        docs.calling_app_doc_unique_ref4,    --| identify
        docs.calling_app_doc_unique_ref5,    --| a document
        docs.pay_proc_trxn_type_code,        --| payable
        docs.payment_grouping_number,        -- Identifies related docs
        docs.payment_method_code,            -- Payment method
        docs.internal_bank_account_id,       -- Internal bank account id
        docs.external_bank_account_id,       -- External bank account id
        docs.payment_profile_id,             -- Payment profile id
        docs.org_id,
        docs.org_type,
        docs.payment_function,
        docs.ext_payee_id,                   -- Ext payee id (payee context)
        docs.payee_party_id,
        docs.party_site_id,
        docs.supplier_site_id,
        docs.remit_to_location_id,
        docs.amount_withheld,                -- Passed to hook for adjustmt
        ext_payee.bank_instruction1_code,    --|
        ext_payee.bank_instruction2_code,    --| These fields are
        ext_payee.payment_text_message1,     --| derived from the
        ext_payee.payment_text_message2,     --| payee.
        ext_payee.payment_text_message3,     --|
        docs.payment_currency_code,
        docs.payment_amount,
        docs.payment_date,
        docs.exclusive_payment_flag,
        docs.bank_charge_bearer,             -- Bank charge bearer
        docs.delivery_channel_code,          -- Delivery channel
        docs.settlement_priority,
        docs.remittance_message1,            -- Supplier message 1
        docs.remittance_message2,            -- Supplier message 2
        docs.remittance_message3,            -- Supplier message 3
        docs.unique_remittance_identifier,
        docs.uri_check_digit,
        docs.payment_reason_code,
        docs.payment_reason_comments,
        docs.payment_due_date,
        docs.discount_date,
        docs.payment_curr_discount_taken,
        docs.beneficiary_party,
        docs.address_source,                 --
        docs.employee_address_code,          -- Employee address
        docs.employee_person_id,             -- related fields
        docs.employee_address_id,            --
        docs.employee_payment_flag,
        pcr.group_by_remittance_message,
        pcr.group_by_bank_charge_bearer,
        pcr.group_by_delivery_channel,
        pcr.group_by_settle_priority_flag,
        pcr.group_by_payment_details_flag,
        DECODE(pcr.payment_details_length_limit, NULL,
            -1, pcr.payment_details_length_limit),
        pcr.payment_details_formula,
        pcr.group_by_max_documents_flag,     -- Max documents per payment flag
        pcr.max_documents_per_payment,       -- Max documents per payment value
        pcr.group_by_unique_remit_id_flag,
        pcr.group_by_payment_reason,
        pcr.group_by_due_date_flag,
        ppf.processing_type,
        ppf.declaration_option,
        ppf.dcl_only_foreign_curr_pmt_flag,
        ppf.declaration_curr_fx_rate_type,
        ppf.declaration_currency_code,
        ppf.declaration_threshold_amount,
        DECODE(prq.maximum_payment_amount, NULL, -1,
            prq.maximum_payment_amount),
        DECODE(prq.minimum_payment_amount, NULL, -1,
            prq.minimum_payment_amount),
        prq.allow_zero_payments_flag,
        pmt_mthd.support_bills_payable_flag,
        iba.account_owner_org_id,
	/*TPP-Start*/
        docs.inv_payee_party_id,
        docs.inv_party_site_id,
        docs.inv_supplier_site_id,
        docs.inv_beneficiary_party,
        docs.ext_inv_payee_id
	/*TPP-Start*/
 FROM IBY_DOCS_PAYABLE_ALL       docs,
      IBY_PMT_CREATION_RULES     pcr,
      IBY_PAYMENT_PROFILES       ppf,
      IBY_PAY_SERVICE_REQUESTS   prq,
      IBY_EXTERNAL_PAYEES_ALL    ext_payee,
      IBY_PAYMENT_METHODS_B      pmt_mthd,
      CE_BANK_ACCOUNTS           iba
 WHERE  prq.payment_service_request_id  = p_payment_request_id
 AND    docs.payment_service_request_id = prq.payment_service_request_id
 AND    docs.payment_profile_id         = ppf.payment_profile_id
 AND    ppf.system_profile_code         = pcr.system_profile_code(+)
 AND    docs.document_status            = DOC_STATUS_VALIDATED
 AND    docs.ext_payee_id               = ext_payee.ext_payee_id
 AND    docs.payment_method_code        = pmt_mthd.payment_method_code
 AND    docs.internal_bank_account_id   = iba.bank_account_id
 ORDER BY
        docs.exclusive_payment_flag,
        docs.org_id,
        docs.org_type,
        ext_payee.ext_payee_id,        -- \
        docs.payment_currency_code,    -- |
        docs.payment_method_code,      -- |
        docs.payment_profile_id,       -- |
        docs.payment_grouping_number,  -- |
        docs.internal_bank_account_id, -- | Ensure that the grouping
        docs.external_bank_account_id, -- | rules below follow the same
        docs.payment_function,         -- | ordering as this order by
        docs.payment_date,             -- | clause.
        docs.remit_to_location_id,     -- |
        docs.beneficiary_party,        -- |
        docs.address_source,           -- |
        docs.employee_address_code,    -- |
        docs.employee_person_id,       -- |
        docs.employee_address_id,      -- |
        docs.employee_payment_flag,    -- |
        docs.bank_charge_bearer,       -- |
        docs.delivery_channel_code,    -- | This order must be followed
        docs.settlement_priority,      -- | for creating minimum number
        docs.remittance_message1,      -- | of payments.
        docs.remittance_message2,      -- |
        docs.remittance_message3,      -- /
        docs.unique_remittance_identifier,
        docs.uri_check_digit,
        docs.payment_reason_code,
        docs.payment_reason_comments,
        docs.payment_due_date
        ;

 /*
  * Cursor to pick up all possible internal bank accounts
  * along with their corresponding legal entity ids.
  *
 CURSOR c_bank_acct_le_list
 IS
 SELECT
     iba.bank_account_id       int_bank_account,
     iba.account_owner_org_id  legal_entity_id
 FROM
     CE_BANK_ACCOUNTS iba
 ;
  */

 BEGIN




     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'ENTER');

     print_debuginfo(l_module_name, 'Payment Request Id : '||
         p_payment_request_id);

     END IF;

     l_no_rec_in_ppr := TRUE;
     /*
      * Pick up all the documents of the payment request.
      */
     OPEN  c_documents(p_payment_request_id);
     LOOP
        iby_disburse_submit_pub_pkg.delete_docspayTab;
        FETCH c_documents BULK COLLECT INTO
           iby_disburse_submit_pub_pkg.docspayTab.call_app_pay_service_req_code,
           iby_disburse_submit_pub_pkg.docspayTab.document_payable_id,
           iby_disburse_submit_pub_pkg.docspayTab.calling_app_id,
           iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref1,
           iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref2,
           iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref3,
           iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref4,
           iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref5,
           iby_disburse_submit_pub_pkg.docspayTab.pay_proc_trxn_type_code,
           iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number,
           iby_disburse_submit_pub_pkg.docspayTab.payment_method_code,
           iby_disburse_submit_pub_pkg.docspayTab.internal_bank_account_id,
           iby_disburse_submit_pub_pkg.docspayTab.external_bank_account_id,
           iby_disburse_submit_pub_pkg.docspayTab.payment_profile_id,
           iby_disburse_submit_pub_pkg.docspayTab.org_id,
           iby_disburse_submit_pub_pkg.docspayTab.org_type,
           iby_disburse_submit_pub_pkg.docspayTab.payment_function,
           iby_disburse_submit_pub_pkg.docspayTab.ext_payee_id,
           iby_disburse_submit_pub_pkg.docspayTab.payee_party_id,
           iby_disburse_submit_pub_pkg.docspayTab.party_site_id,
           iby_disburse_submit_pub_pkg.docspayTab.supplier_site_id,
           iby_disburse_submit_pub_pkg.docspayTab.remit_to_location_id,
           iby_disburse_submit_pub_pkg.docspayTab.amount_withheld,
           iby_disburse_submit_pub_pkg.docspayTab.bank_instruction1_code,
           iby_disburse_submit_pub_pkg.docspayTab.bank_instruction2_code,
           iby_disburse_submit_pub_pkg.docspayTab.payment_text_message1,
           iby_disburse_submit_pub_pkg.docspayTab.payment_text_message2,
           iby_disburse_submit_pub_pkg.docspayTab.payment_text_message3,
           iby_disburse_submit_pub_pkg.docspayTab.payment_currency_code,
           iby_disburse_submit_pub_pkg.docspayTab.payment_amount,
           iby_disburse_submit_pub_pkg.docspayTab.payment_date,
           iby_disburse_submit_pub_pkg.docspayTab.exclusive_payment_flag,
           iby_disburse_submit_pub_pkg.docspayTab.bank_charge_bearer,
           iby_disburse_submit_pub_pkg.docspayTab.delivery_channel_code,
           iby_disburse_submit_pub_pkg.docspayTab.settlement_priority,
           iby_disburse_submit_pub_pkg.docspayTab.remittance_message1,
           iby_disburse_submit_pub_pkg.docspayTab.remittance_message2,
           iby_disburse_submit_pub_pkg.docspayTab.remittance_message3,
           iby_disburse_submit_pub_pkg.docspayTab.unique_remittance_identifier,
           iby_disburse_submit_pub_pkg.docspayTab.uri_check_digit,
           iby_disburse_submit_pub_pkg.docspayTab.payment_reason_code,
           iby_disburse_submit_pub_pkg.docspayTab.payment_reason_comments,
           iby_disburse_submit_pub_pkg.docspayTab.payment_due_date,
           iby_disburse_submit_pub_pkg.docspayTab.discount_date,
           iby_disburse_submit_pub_pkg.docspayTab.payment_curr_discount_taken,
           iby_disburse_submit_pub_pkg.docspayTab.beneficiary_party,
           iby_disburse_submit_pub_pkg.docspayTab.address_source,
           iby_disburse_submit_pub_pkg.docspayTab.employee_address_code,
           iby_disburse_submit_pub_pkg.docspayTab.employee_person_id,
           iby_disburse_submit_pub_pkg.docspayTab.employee_address_id,
           iby_disburse_submit_pub_pkg.docspayTab.employee_payment_flag,
           iby_disburse_submit_pub_pkg.docspayTab.group_by_remittance_message,
           iby_disburse_submit_pub_pkg.docspayTab.group_by_bank_charge_bearer,
           iby_disburse_submit_pub_pkg.docspayTab.group_by_delivery_channel,
           iby_disburse_submit_pub_pkg.docspayTab.group_by_settle_priority_flag,
           iby_disburse_submit_pub_pkg.docspayTab.group_by_payment_details_flag,
           iby_disburse_submit_pub_pkg.docspayTab.payment_details_length_limit,
           iby_disburse_submit_pub_pkg.docspayTab.payment_details_formula,
           iby_disburse_submit_pub_pkg.docspayTab.group_by_max_documents_flag,
           iby_disburse_submit_pub_pkg.docspayTab.max_documents_per_payment,
           iby_disburse_submit_pub_pkg.docspayTab.group_by_unique_remit_id_flag,
           iby_disburse_submit_pub_pkg.docspayTab.group_by_payment_reason,
           iby_disburse_submit_pub_pkg.docspayTab.group_by_due_date_flag,
           iby_disburse_submit_pub_pkg.docspayTab.processing_type,
           iby_disburse_submit_pub_pkg.docspayTab.declaration_option,
           iby_disburse_submit_pub_pkg.docspayTab.dcl_only_foreign_curr_pmt_flag,
           iby_disburse_submit_pub_pkg.docspayTab.declaration_curr_fx_rate_type,
           iby_disburse_submit_pub_pkg.docspayTab.declaration_currency_code,
           iby_disburse_submit_pub_pkg.docspayTab.declaration_threshold_amount,
           iby_disburse_submit_pub_pkg.docspayTab.maximum_payment_amount,
           iby_disburse_submit_pub_pkg.docspayTab.minimum_payment_amount,
           iby_disburse_submit_pub_pkg.docspayTab.allow_zero_payments_flag,
           iby_disburse_submit_pub_pkg.docspayTab.support_bills_payable_flag,
           iby_disburse_submit_pub_pkg.docspayTab.iba_legal_entity_id,
           iby_disburse_submit_pub_pkg.docspayTab.inv_payee_party_id,
           iby_disburse_submit_pub_pkg.docspayTab.inv_party_site_id,
           iby_disburse_submit_pub_pkg.docspayTab.inv_supplier_site_id,
           iby_disburse_submit_pub_pkg.docspayTab.inv_beneficiary_party,
           iby_disburse_submit_pub_pkg.docspayTab.ext_inv_payee_id
        LIMIT G_LINES_PER_FETCH;

     /*
      * Loop through all the fetched documents, grouping them
      * into payments.
      */
        FOR l_trx_line_index IN nvl(iby_disburse_submit_pub_pkg.docspayTab.pay_proc_trxn_type_code.FIRST,0) .. nvl(iby_disburse_submit_pub_pkg.docspayTab.pay_proc_trxn_type_code.LAST,-99)
        LOOP
           l_no_rec_in_ppr := FALSE;

           IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Processed document payable id: '
            || to_char(iby_disburse_submit_pub_pkg.docspayTab.document_payable_id(l_trx_line_index)));
           END IF;


         /* these two used in raising biz events */
         /* they will not vary within a request */
         l_ca_id                := iby_disburse_submit_pub_pkg.docspayTab.calling_app_id(l_trx_line_index);
         l_ca_payreq_cd         := iby_disburse_submit_pub_pkg.docspayTab.call_app_pay_service_req_code(l_trx_line_index);
         l_delv_chnl_flag       := iby_disburse_submit_pub_pkg.docspayTab.group_by_delivery_channel(l_trx_line_index);
         l_express_pmt_flag     := iby_disburse_submit_pub_pkg.docspayTab.group_by_settle_priority_flag(l_trx_line_index);
         l_bnk_chg_brer_flag    := iby_disburse_submit_pub_pkg.docspayTab.group_by_bank_charge_bearer(l_trx_line_index);
         l_sup_msg_flag         := iby_disburse_submit_pub_pkg.docspayTab.group_by_remittance_message(l_trx_line_index);
         l_pmt_details_flag     := iby_disburse_submit_pub_pkg.docspayTab.group_by_payment_details_flag(l_trx_line_index);
         l_pmt_details_len      := iby_disburse_submit_pub_pkg.docspayTab.payment_details_length_limit(l_trx_line_index);
         l_pmt_det_formula      := iby_disburse_submit_pub_pkg.docspayTab.payment_details_formula(l_trx_line_index);
         l_processing_type      := iby_disburse_submit_pub_pkg.docspayTab.processing_type(l_trx_line_index);

         l_max_docs_flag        := iby_disburse_submit_pub_pkg.docspayTab.group_by_max_documents_flag(l_trx_line_index);
         l_max_docs_limit       := iby_disburse_submit_pub_pkg.docspayTab.max_documents_per_payment(l_trx_line_index);
         l_unique_remit_id_flag := iby_disburse_submit_pub_pkg.docspayTab.group_by_unique_remit_id_flag(l_trx_line_index);
         l_pmt_reason_flag      := iby_disburse_submit_pub_pkg.docspayTab.group_by_payment_reason(l_trx_line_index);
         l_due_date_flag        := iby_disburse_submit_pub_pkg.docspayTab.group_by_due_date_flag(l_trx_line_index);
         l_prom_note_flag       := iby_disburse_submit_pub_pkg.docspayTab.support_bills_payable_flag(l_trx_line_index);

         l_decl_option            := iby_disburse_submit_pub_pkg.docspayTab.declaration_option(l_trx_line_index);
         l_decl_only_fx_flag      := iby_disburse_submit_pub_pkg.docspayTab.dcl_only_foreign_curr_pmt_flag(l_trx_line_index);
         l_decl_curr_fx_rate_type := iby_disburse_submit_pub_pkg.docspayTab.declaration_curr_fx_rate_type(l_trx_line_index);
         l_decl_curr_code         := iby_disburse_submit_pub_pkg.docspayTab.declaration_currency_code(l_trx_line_index);
         l_decl_threshold_amount  := iby_disburse_submit_pub_pkg.docspayTab.declaration_threshold_amount(l_trx_line_index);

         l_commonAttributes.curr_pmt_due_date   := iby_disburse_submit_pub_pkg.docspayTab.payment_due_date(l_trx_line_index);
         l_commonAttributes.curr_delivery_channel   :=  iby_disburse_submit_pub_pkg.docspayTab.delivery_channel_code(l_trx_line_index);
         l_commonAttributes.curr_uri   :=    iby_disburse_submit_pub_pkg.docspayTab.unique_remittance_identifier(l_trx_line_index);
         l_commonAttributes.curr_uri_checkdigits   := iby_disburse_submit_pub_pkg.docspayTab.uri_check_digit(l_trx_line_index);

         /*
          * Store the payment request imposed limits in the output
          * parameter. These will be used for validation on the
          * created payments.
          */
         x_payReqCriteria.max_pmt_amt_limit    :=
                                     iby_disburse_submit_pub_pkg.docspayTab.maximum_payment_amount(l_trx_line_index);
         x_payReqCriteria.min_pmt_amt_limit    :=
                                     iby_disburse_submit_pub_pkg.docspayTab.minimum_payment_amount(l_trx_line_index);
         x_payReqCriteria.allow_zero_pmts_flag :=
                                     iby_disburse_submit_pub_pkg.docspayTab.allow_zero_payments_flag(l_trx_line_index);

         /*
          * Store the central bank reporting related fields in
          * the CBR record.
         l_cbrRec.decl_option            := l_decl_option;
         l_cbrRec.decl_only_fx_flag      := l_decl_only_fx_flag;
         l_cbrRec.decl_curr_fx_rate_type := l_decl_curr_fx_rate_type;
         l_cbrRec.decl_curr_code         := l_decl_curr_code;
         l_cbrRec.decl_threshold_amount  := l_decl_threshold_amount;
          */

         /* these are payee related fields */
         l_bank_inst1_code := iby_disburse_submit_pub_pkg.docspayTab.bank_instruction1_code(l_trx_line_index);
         l_bank_inst2_code := iby_disburse_submit_pub_pkg.docspayTab.bank_instruction2_code(l_trx_line_index);
         l_pmt_txt_msg1    := iby_disburse_submit_pub_pkg.docspayTab.payment_text_message1(l_trx_line_index);
         l_pmt_txt_msg2    := iby_disburse_submit_pub_pkg.docspayTab.payment_text_message2(l_trx_line_index);
         l_pmt_txt_msg3    := iby_disburse_submit_pub_pkg.docspayTab.payment_text_message3(l_trx_line_index);

         /* these are passed onto the hook for adjustment by ext app */
         l_amount_withheld    := NVL(iby_disburse_submit_pub_pkg.docspayTab.amount_withheld(l_trx_line_index), 0 );

         /* used for maturity date calculation */
         l_discount_date    := iby_disburse_submit_pub_pkg.docspayTab.discount_date(l_trx_line_index);

         l_discount_amount  := iby_disburse_submit_pub_pkg.docspayTab.payment_curr_discount_taken(l_trx_line_index);

         /*
          * Log all the fetched document fields
          *
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name,
             'Fetched document data for document:' || curr_doc_id
             || ', calling app id: '        || curr_ca_id
             || ', calling app doc id1: '   || curr_ca_doc_id1
             || ', calling app doc id2: '   || curr_ca_doc_id2
             || ', calling app doc id3: '   || curr_ca_doc_id3
             || ', calling app doc id4: '   || curr_ca_doc_id4
             || ', calling app doc id5: '   || curr_ca_doc_id5
             || ', calling app trxn type: ' || curr_pp_tt_cd
             || ', payment grp number: '    || curr_pmt_grp_num
             || ', payment method: '        || curr_pmt_method_cd
             || ', internal bank account: ' || curr_int_bank_acct_id
             || ', external bank account: ' || curr_ext_bank_acct_id
             || ', profile: '               || curr_profile_id
             || ', payee: '                 || curr_payee_id
             || ', payee site: '            || curr_payee_site_id
             || ', supplier site: '         || curr_supplier_site_id
             || ', remit loc id: '          || curr_remit_loc_id
             || ', ext payee: '             || curr_ext_payee_id
             || ', org: '                   || curr_org_id
             || ', org type: '              || curr_org_type
             );

         print_debuginfo(l_module_name,
             'Fetched document data for document:' || curr_doc_id
             || ', payment currency: '      || curr_doc_pmt_currency
             || ', payment amount: '        || curr_doc_pmt_amount
             || ', pay alone flag: '        || iby_disburse_submit_pub_pkg.docspayTab.exclusive_payment_flag(l_trx_line_index)
             || ', bank charge bearer: '    || curr_bnk_chg_bearer
             || ', delivery channel: '      || curr_delivery_channel
             || ', supplier message 1: '    || curr_supplier_msg1
             || ', supplier message 2: '    || curr_supplier_msg2
             || ', supplier message 3: '    || curr_supplier_msg3
             || ', uri: '                   || curr_uri
             || ', uri checkdigits: '       || curr_uri_checkdigits
             || ', pmt reason code: '       || curr_pmt_reason_code
             || ', pmt reason comments: '   || curr_pmt_reason_commts
             || ', pmt function: '          || curr_pmt_function
             || ', pmt date: '              || curr_pmt_date
             || ', pmt due date: '          || curr_pmt_due_date
             || ', benef party: '           || curr_benef_party
             );

         print_debuginfo(l_module_name,
             'Fetched document data for document:' || curr_doc_id
             || ', address source: '        || curr_address_source
             || ', emp addr code: '         || curr_emp_add_code
             || ', emp person id: '         || curr_emp_person_id
             || ', emp addr id: '           || curr_emp_addr_id
             || ', emp pmt flag: '          || curr_emp_pmt_flag
             );

         print_debuginfo(l_module_name,
             'Fetched flags for document:'  || curr_doc_id
             || ', pmt details flag: '      || l_pmt_details_flag
             || ', pmt details length: '    || l_pmt_details_len
             || ', pmt details formula: '   || l_pmt_det_formula
             || ', max docs flag: '         || l_max_docs_flag
             || ', max docs limit: '        || l_max_docs_limit
             || ', uri flag: '              || l_unique_remit_id_flag
             || ', pmt reason flag: '       || l_pmt_reason_flag
             || ', express pmt flag: '      || l_express_pmt_flag
             || ', delv channel flag: '     || l_delv_chnl_flag
             || ', pmt due date flag: '     || l_due_date_flag
             || ', prom note flag: '        || l_prom_note_flag
             );

          END IF;
          */

         IF (l_first_record = 'Y') THEN
            prev_doc_id            := iby_disburse_submit_pub_pkg.docspayTab.document_payable_id(l_trx_line_index);
            prev_ca_id             := iby_disburse_submit_pub_pkg.docspayTab.calling_app_id(l_trx_line_index);
            prev_ca_doc_id1        := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref1(l_trx_line_index);
            prev_ca_doc_id2        := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref2(l_trx_line_index);
            prev_ca_doc_id3        := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref3(l_trx_line_index);
            prev_ca_doc_id4        := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref4(l_trx_line_index);
            prev_ca_doc_id5        := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref5(l_trx_line_index);
            prev_pp_tt_cd          := iby_disburse_submit_pub_pkg.docspayTab.pay_proc_trxn_type_code(l_trx_line_index);
            prev_pmt_grp_num       := iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index);
            prev_pmt_method_cd     := iby_disburse_submit_pub_pkg.docspayTab.payment_method_code(l_trx_line_index);
            prev_int_bank_acct_id  := iby_disburse_submit_pub_pkg.docspayTab.internal_bank_account_id(l_trx_line_index);
            prev_ext_bank_acct_id  := iby_disburse_submit_pub_pkg.docspayTab.external_bank_account_id(l_trx_line_index);
            prev_profile_id        := iby_disburse_submit_pub_pkg.docspayTab.payment_profile_id(l_trx_line_index);
            prev_org_id            := iby_disburse_submit_pub_pkg.docspayTab.org_id(l_trx_line_index);
            prev_org_type          := iby_disburse_submit_pub_pkg.docspayTab.org_type(l_trx_line_index);
            prev_payee_id          := iby_disburse_submit_pub_pkg.docspayTab.payee_party_id(l_trx_line_index);
            prev_payee_site_id     := iby_disburse_submit_pub_pkg.docspayTab.party_site_id(l_trx_line_index);
            prev_remit_loc_id      := iby_disburse_submit_pub_pkg.docspayTab.remit_to_location_id(l_trx_line_index);
            prev_ext_payee_id      := iby_disburse_submit_pub_pkg.docspayTab.ext_payee_id(l_trx_line_index);
            prev_doc_pmt_currency  := iby_disburse_submit_pub_pkg.docspayTab.payment_currency_code(l_trx_line_index);
            prev_doc_pmt_amount    := iby_disburse_submit_pub_pkg.docspayTab.payment_amount(l_trx_line_index);
            prev_pay_alone_flag    := iby_disburse_submit_pub_pkg.docspayTab.exclusive_payment_flag(l_trx_line_index);
            prev_bnk_chg_bearer    := iby_disburse_submit_pub_pkg.docspayTab.bank_charge_bearer(l_trx_line_index);
            prev_delivery_channel  := iby_disburse_submit_pub_pkg.docspayTab.delivery_channel_code(l_trx_line_index);
            prev_settle_priority   := iby_disburse_submit_pub_pkg.docspayTab.settlement_priority(l_trx_line_index);
            prev_supplier_msg1     := iby_disburse_submit_pub_pkg.docspayTab.remittance_message1(l_trx_line_index);
            prev_supplier_msg2     := iby_disburse_submit_pub_pkg.docspayTab.remittance_message2(l_trx_line_index);
            prev_supplier_msg3     := iby_disburse_submit_pub_pkg.docspayTab.remittance_message3(l_trx_line_index);
            prev_uri               := iby_disburse_submit_pub_pkg.docspayTab.unique_remittance_identifier(l_trx_line_index);
            prev_uri_checkdigits   := iby_disburse_submit_pub_pkg.docspayTab.uri_check_digit(l_trx_line_index);
            prev_pmt_reason_code   := iby_disburse_submit_pub_pkg.docspayTab.payment_reason_code(l_trx_line_index);
            prev_pmt_reason_commts := iby_disburse_submit_pub_pkg.docspayTab.payment_reason_comments(l_trx_line_index);
            prev_pmt_function      := iby_disburse_submit_pub_pkg.docspayTab.payment_function(l_trx_line_index);
            prev_pmt_date          := iby_disburse_submit_pub_pkg.docspayTab.payment_date(l_trx_line_index);
            prev_pmt_due_date      := iby_disburse_submit_pub_pkg.docspayTab.payment_due_date(l_trx_line_index);
            prev_benef_party       := iby_disburse_submit_pub_pkg.docspayTab.beneficiary_party(l_trx_line_index);
            prev_address_source    := iby_disburse_submit_pub_pkg.docspayTab.address_source(l_trx_line_index);
            prev_emp_add_code      := iby_disburse_submit_pub_pkg.docspayTab.employee_address_code(l_trx_line_index);
            prev_emp_person_id     := iby_disburse_submit_pub_pkg.docspayTab.employee_person_id(l_trx_line_index);
            prev_emp_addr_id       := iby_disburse_submit_pub_pkg.docspayTab.employee_address_id(l_trx_line_index);
            prev_emp_pmt_flag      := iby_disburse_submit_pub_pkg.docspayTab.employee_payment_flag(l_trx_line_index);
 prev_inv_payee_party_id      := iby_disburse_submit_pub_pkg.docspayTab.inv_payee_party_id(l_trx_line_index);
 prev_inv_party_site_id      := iby_disburse_submit_pub_pkg.docspayTab.inv_party_site_id(l_trx_line_index);
 prev_inv_supplier_site_id      := iby_disburse_submit_pub_pkg.docspayTab.inv_supplier_site_id(l_trx_line_index);
 prev_inv_beneficiary_party      := iby_disburse_submit_pub_pkg.docspayTab.inv_beneficiary_party(l_trx_line_index);
 prev_ext_inv_payee_id      := iby_disburse_submit_pub_pkg.docspayTab.ext_inv_payee_id(l_trx_line_index);

           /* code to replace sweepCommonPmtAttributes() code */

           l_commonAttributes.prev_pmt_due_date   := iby_disburse_submit_pub_pkg.docspayTab.payment_due_date(l_trx_line_index);
           l_commonAttributes.prev_delivery_channel   :=  iby_disburse_submit_pub_pkg.docspayTab.delivery_channel_code(l_trx_line_index);
           l_commonAttributes.prev_uri   :=    iby_disburse_submit_pub_pkg.docspayTab.unique_remittance_identifier(l_trx_line_index);
           l_commonAttributes.prev_uri_checkdigits   := iby_disburse_submit_pub_pkg.docspayTab.uri_check_digit(l_trx_line_index);
         END IF;

         /*
          * We have just fetched a new document for this payment request.
          * We will either insert this document into a new payment or
          * we will be inserting this document into the currently running
          * payment.
          *
          * In either case, we need to insert this doc into a payment.
          * So pre-populate the payment record with attributes of
          * this document. This is because the payment takes on the
          * attributes of it's constituent documents.
          *
          * Note: For user defined grouping rules, we will
          * have to populate the payment attribute only if
          * the user has turned on grouping by that attribute.
          */

         /* Only pre-fill hardcoded grouping rule attributes */
         l_paymentRec.payment_profile_id       := iby_disburse_submit_pub_pkg.docspayTab.payment_profile_id(l_trx_line_index);
         l_paymentRec.payment_service_request_id
                                               := p_payment_request_id;
         l_paymentRec.internal_bank_account_id := iby_disburse_submit_pub_pkg.docspayTab.internal_bank_account_id(l_trx_line_index);
         l_paymentRec.ext_payee_id             := iby_disburse_submit_pub_pkg.docspayTab.ext_payee_id(l_trx_line_index);
         l_paymentRec.payee_party_id           := iby_disburse_submit_pub_pkg.docspayTab.payee_party_id(l_trx_line_index);
         l_paymentRec.party_site_id            := iby_disburse_submit_pub_pkg.docspayTab.party_site_id(l_trx_line_index);
         l_paymentRec.supplier_site_id         := iby_disburse_submit_pub_pkg.docspayTab.supplier_site_id(l_trx_line_index);

	 l_paymentRec.ext_inv_payee_id             := iby_disburse_submit_pub_pkg.docspayTab.ext_inv_payee_id(l_trx_line_index);
         l_paymentRec.inv_payee_party_id           := iby_disburse_submit_pub_pkg.docspayTab.inv_payee_party_id(l_trx_line_index);
         l_paymentRec.inv_party_site_id            := iby_disburse_submit_pub_pkg.docspayTab.inv_party_site_id(l_trx_line_index);
         l_paymentRec.inv_supplier_site_id         := iby_disburse_submit_pub_pkg.docspayTab.inv_supplier_site_id(l_trx_line_index);
         l_paymentRec.inv_beneficiary_party         := iby_disburse_submit_pub_pkg.docspayTab.inv_beneficiary_party(l_trx_line_index);

         l_paymentRec.remit_to_location_id     := iby_disburse_submit_pub_pkg.docspayTab.remit_to_location_id(l_trx_line_index);
         l_paymentRec.payment_currency_code    := iby_disburse_submit_pub_pkg.docspayTab.payment_currency_code(l_trx_line_index);
         l_paymentRec.org_id                   := iby_disburse_submit_pub_pkg.docspayTab.org_id(l_trx_line_index);
         l_paymentRec.org_type                 := iby_disburse_submit_pub_pkg.docspayTab.org_type(l_trx_line_index);
         l_paymentRec.payment_method_code      := iby_disburse_submit_pub_pkg.docspayTab.payment_method_code(l_trx_line_index);
         l_paymentRec.payment_function         := iby_disburse_submit_pub_pkg.docspayTab.payment_function(l_trx_line_index);
         l_paymentRec.payment_date             := iby_disburse_submit_pub_pkg.docspayTab.payment_date(l_trx_line_index);
         l_paymentRec.beneficiary_party        := iby_disburse_submit_pub_pkg.docspayTab.beneficiary_party(l_trx_line_index);
         l_paymentRec.address_source           := iby_disburse_submit_pub_pkg.docspayTab.address_source(l_trx_line_index);
         l_paymentRec.employee_address_code    := iby_disburse_submit_pub_pkg.docspayTab.employee_address_code(l_trx_line_index);
         l_paymentRec.employee_person_id       := iby_disburse_submit_pub_pkg.docspayTab.employee_person_id(l_trx_line_index);
         l_paymentRec.employee_address_id      := iby_disburse_submit_pub_pkg.docspayTab.employee_address_id(l_trx_line_index);
         l_paymentRec.employee_payment_flag    := iby_disburse_submit_pub_pkg.docspayTab.employee_payment_flag(l_trx_line_index);
         l_paymentRec.legal_entity_id          := iby_disburse_submit_pub_pkg.docspayTab.iba_legal_entity_id(l_trx_line_index);

         /*
          * Fix for bug 5524116:
          *
          * Group by external bank account needs to be made a
          * hardcoded grouping rule regardless of processing type.
          *
          * This is because is some obscure formats e.g., Italy Wire
          * payments, the payment is actually sent to the bank as
          * a printed payment letter even though the payment method
          * is wire.
          */
         l_paymentRec.external_bank_account_id := iby_disburse_submit_pub_pkg.docspayTab.external_bank_account_id(l_trx_line_index);

         /*
          * Fix for bug 5334177:
          *
          * Setting the bills payable flag on the payment is not
          * related to user-defined grouping rules.
          *
          * Set this flag here along with other hardcoded
          * grouping rules.
          */

         /*
          * Set the promissory note flag for this payment
          * if the payment method of this payment supports
          * promissory notes.
          *
          * The promissory note flag indicates that this
          * payment is (possibly) a future dated payment.
          */
         IF (l_prom_note_flag = 'Y') THEN

             l_paymentRec.bill_payable_flag := 'Y';

         ELSE

             /*
              * Fix for bug 5442899
              *
              * Explicitly set bill payable flag to 'N'
              * in case payment method does not
              * support bills payable.
              */
             l_paymentRec.bill_payable_flag := 'N';

         END IF;

         /*
          * If a document has the payment grouping number attribute
          * set, then it is a part of a pre-grouped payment (document
          * grouped into payment at the calling app itself).
          *
          * Grouping by payment grouping number is a hardcoded grouping
          * rule below. Therefore, it is guaranteed that a payment will
          * only contain documents with the same payment grouping number.
          *
          * For, such payments set the 'pregrouped payment flag' to 'Y'.
          */
         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NOT NULL) THEN

             l_paymentRec.pregrouped_payment_flag := 'Y';

         ELSE

             /*
              * Fix for bug 5529924:
              *
              * Explicitly set the pregrouped payment flag to 'N'
              * in case the grouping number on the document
              * is null.
              */
             l_paymentRec.pregrouped_payment_flag := 'N';

         END IF;

         /* payee related fields */
         /* grouping by payee context is a hardcoded grouping rule */
         l_paymentRec.bank_instruction1_code   := l_bank_inst1_code;
         l_paymentRec.bank_instruction2_code   := l_bank_inst2_code;
         l_paymentRec.payment_text_message1    := l_pmt_txt_msg1;
         l_paymentRec.payment_text_message2    := l_pmt_txt_msg2;
         l_paymentRec.payment_text_message3    := l_pmt_txt_msg3;

         /*
          * Pre-fill grouping rule attributes for user defined
          * grouping rules (that are enabled by the user).
          *
          * It is necessary to pre-fill user defined grouping
          * attributes before the grouping rules are triggered
          * because we don't know which user defined grouping rules
          * are going to get triggered first, and once a rule is
          * triggered all rules below it are skipped. So it is too
          * late to populate grouping attributes within the grouping
          * rule itself.
          */

         /*
          * We pre-fill the user-defined attributes only when the
          * 'payment grouping number' attribute is null. This is
          * because the user-defined grouping rules are never triggered
          * if the 'payment grouping number' attribute is not null.
          */

         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NULL) THEN

             /*-----------------------------------------------------
             IF (l_payee_add_eft_flag = 'Y') THEN
                 IF (l_processing_type = 'ELECTRONIC') THEN

                     --
                     -- RAMESH:
                     -- Temporarily commented out. Current data model
                     -- does not support grouping by payee party id and payee
                     -- party site as separate grouping rules because of
                     -- calling app constraints.
                     --
                     -- At the moment, the grouping is at the level of
                     -- payee context which includes (payee party id, payee
                     -- party site id, supplier site id, org id, org type)
                     -- etc.
                     --
                     -- In the future when more fine grained grouping
                     -- can be supported, uncomment this code.
                     --

                     --l_paymentRec.payee_party_site_id := iby_disburse_submit_pub_pkg.docspayTab.party_site_id(l_trx_line_index);
                     --l_paymentRec.payee_id := iby_disburse_submit_pub_pkg.docspayTab.payee_party_id(l_trx_line_index);

                 END IF;
             END IF;
             -----------------------------------------------------*/

             IF (l_bnk_chg_brer_flag = 'Y') THEN
                 l_paymentRec.bank_charge_bearer := iby_disburse_submit_pub_pkg.docspayTab.bank_charge_bearer(l_trx_line_index);
             END IF;

             IF (l_delv_chnl_flag = 'Y') THEN
                 l_paymentRec.delivery_channel_code := iby_disburse_submit_pub_pkg.docspayTab.delivery_channel_code(l_trx_line_index);
             END IF;

             IF (l_express_pmt_flag = 'Y') THEN
                 l_paymentRec.settlement_priority := iby_disburse_submit_pub_pkg.docspayTab.settlement_priority(l_trx_line_index);
             END IF;

             IF (l_sup_msg_flag = 'Y') THEN

                 /*
                  * Fix for bug 5534537:
                  *
                  * Assign correct remittance messages to the
                  * payment.
                  */
                 l_paymentRec.remittance_message1 := iby_disburse_submit_pub_pkg.docspayTab.remittance_message1(l_trx_line_index);
                 l_paymentRec.remittance_message2 := iby_disburse_submit_pub_pkg.docspayTab.remittance_message2(l_trx_line_index);
                 l_paymentRec.remittance_message3 := iby_disburse_submit_pub_pkg.docspayTab.remittance_message3(l_trx_line_index);

             END IF;

             IF (l_unique_remit_id_flag = 'Y') THEN
                 l_paymentRec.unique_remittance_identifier := iby_disburse_submit_pub_pkg.docspayTab.unique_remittance_identifier(l_trx_line_index);
                 l_paymentRec.uri_check_digit := iby_disburse_submit_pub_pkg.docspayTab.uri_check_digit(l_trx_line_index);
             END IF;

             IF (l_due_date_flag = 'Y') THEN
                 l_paymentRec.payment_due_date := iby_disburse_submit_pub_pkg.docspayTab.payment_due_date(l_trx_line_index);
             END IF;

             IF (l_pmt_reason_flag = 'Y') THEN
                 l_paymentRec.payment_reason_code     := iby_disburse_submit_pub_pkg.docspayTab.payment_reason_code(l_trx_line_index);
                 l_paymentRec.payment_reason_comments := iby_disburse_submit_pub_pkg.docspayTab.payment_reason_comments(l_trx_line_index);
             END IF;

         END IF; -- if payment_grouping_number(l_trx_line_index) IS NULL

         /*
          * Pre-fill the document record with the details
          * of the current document.
          */
         l_docsInPmtRec.document_id         := iby_disburse_submit_pub_pkg.docspayTab.document_payable_id(l_trx_line_index);
         l_docsInPmtRec.document_amount     := iby_disburse_submit_pub_pkg.docspayTab.payment_amount(l_trx_line_index);
         l_docsInPmtRec.document_currency   := iby_disburse_submit_pub_pkg.docspayTab.payment_currency_code(l_trx_line_index);
         l_docsInPmtRec.payment_grp_num     := iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index);
         l_docsInPmtRec.calling_app_id      := iby_disburse_submit_pub_pkg.docspayTab.calling_app_id(l_trx_line_index);
         l_docsInPmtRec.calling_app_doc_id1 := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref1(l_trx_line_index);
         l_docsInPmtRec.calling_app_doc_id2 := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref2(l_trx_line_index);
         l_docsInPmtRec.calling_app_doc_id3 := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref3(l_trx_line_index);
         l_docsInPmtRec.calling_app_doc_id4 := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref4(l_trx_line_index);
         l_docsInPmtRec.calling_app_doc_id5 := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref5(l_trx_line_index);
         l_docsInPmtRec.pay_proc_ttype_cd   := iby_disburse_submit_pub_pkg.docspayTab.pay_proc_trxn_type_code(l_trx_line_index);

         /* these to are passed onto the hook for adjustment by ext app */
         l_docsInPmtRec.amount_withheld     := l_amount_withheld;

         /* used for maturity date calculation */
         l_docsInPmtRec.discount_date       := l_discount_date;
         l_docsInPmtRec.pmt_due_date        := iby_disburse_submit_pub_pkg.docspayTab.payment_due_date(l_trx_line_index);

         /* used in common attribute sweep */
         l_docsInPmtRec.delivery_channel    := iby_disburse_submit_pub_pkg.docspayTab.delivery_channel_code(l_trx_line_index);
         l_docsInPmtRec.unique_remit_id     := iby_disburse_submit_pub_pkg.docspayTab.unique_remittance_identifier(l_trx_line_index);
         l_docsInPmtRec.uri_ckdigits        := iby_disburse_submit_pub_pkg.docspayTab.uri_check_digit(l_trx_line_index);

         l_docsInPmtRec.int_bank_acct_id    := iby_disburse_submit_pub_pkg.docspayTab.internal_bank_account_id(l_trx_line_index);
         l_docsInPmtRec.ext_payee_id        := iby_disburse_submit_pub_pkg.docspayTab.ext_payee_id(l_trx_line_index);
         l_docsInPmtRec.payee_id            := iby_disburse_submit_pub_pkg.docspayTab.payee_party_id(l_trx_line_index);
         l_docsInPmtRec.payee_site_id       := iby_disburse_submit_pub_pkg.docspayTab.party_site_id(l_trx_line_index);
         l_docsInPmtRec.supplier_site_id    := iby_disburse_submit_pub_pkg.docspayTab.party_site_id(l_trx_line_index);

         l_docsInPmtRec.ext_inv_payee_id        := iby_disburse_submit_pub_pkg.docspayTab.ext_inv_payee_id(l_trx_line_index);
         l_docsInPmtRec.inv_payee_party_id            := iby_disburse_submit_pub_pkg.docspayTab.inv_payee_party_id(l_trx_line_index);
         l_docsInPmtRec.inv_party_site_id       := iby_disburse_submit_pub_pkg.docspayTab.inv_party_site_id(l_trx_line_index);
         l_docsInPmtRec.inv_supplier_site_id    := iby_disburse_submit_pub_pkg.docspayTab.inv_supplier_site_id(l_trx_line_index);

	 l_docsInPmtRec.org_id              := iby_disburse_submit_pub_pkg.docspayTab.org_id(l_trx_line_index);
         l_docsInPmtRec.org_type            := iby_disburse_submit_pub_pkg.docspayTab.org_type(l_trx_line_index);
         l_docsInPmtRec.ext_bank_acct_id    := iby_disburse_submit_pub_pkg.docspayTab.external_bank_account_id(l_trx_line_index);
         l_docsInPmtRec.pmt_curr_discount   := l_discount_amount;

         /*
          * Calculate payment details from the document based on
          * the user defined formula. This will be used in a
          * user-defined grouping rule below.
          */
         IF (l_pmt_details_flag = 'Y') THEN
             l_calc_doc_detail := getDocDetails(iby_disburse_submit_pub_pkg.docspayTab.document_payable_id(l_trx_line_index),
                                      l_pmt_det_formula);

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Calculated doc detail for '
                 || 'doc id '
                 || curr_doc_id
                 || ': '
                 || l_calc_doc_detail
                 );

	     END IF;

         ELSE
             l_calc_doc_detail := null;
         END IF;

         /*
          * The length of the payment details field in IBY_PAYMENTS_ALL
          * table is 240 chars. This imposes a hard limit for the
          * length of payment details that can be stored against a
          * payment.
          *
          * If the user has specified a field length (for payment
          * details) greater than the column width, reset the field
          * length to the column limit.
          */
         IF (l_pmt_details_flag = 'Y') THEN
             IF (l_pmt_details_len > 240) THEN

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'User specified payment '
                     || 'details field length = '
                     || l_pmt_details_len
                     || '. This is greater than the max column length '
                     || '(currently 240 chars). Payment details will be '
                     || 'filled to the maximum column length.'
                     );
                 END IF;

                 l_pmt_details_len := 240;

             /*
              * If user has not specified any value at all,
              * default the payment details field length.
              */
             ELSIF (l_pmt_details_len = -1) THEN

                 /*
                  * Fix for bug 5362662:
                  *
                  * If user has not specified a length for the payment
                  * details field, but has turned on grouping by
                  * payment details, then limit the payment details
                  * field to the max allowed column length.
                  */
                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'User specified payment '
                     || 'details field length is null. '
                     || 'Payment details will be filled to the maximum '
                     || 'column length (currently 240 chars).'
                     );
                 END IF;

                 l_pmt_details_len := 240;

             END IF;
         END IF;

         /*-- HARDCODED GROUPING RULES START HERE --*/

         /*
          * Grouping Step 1: Pay Alone Flag (these are exclusive
          * payments where one document is paid by one payment).
          */
         IF (UPPER(iby_disburse_submit_pub_pkg.docspayTab.exclusive_payment_flag(l_trx_line_index)) = 'Y') THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Grouping by pay alone flag '
                 || 'triggered for document '
                 || curr_doc_id);
             END IF;
             insertDocIntoPayment(l_paymentRec, x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id,
                 x_docsInPmtTab, l_docsInPmtRec,
                  l_docs_in_pmt_count,l_commonAttributes);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 2: Organization ID And Organization Type
          */
         IF (prev_org_id <> iby_disburse_submit_pub_pkg.docspayTab.org_id(l_trx_line_index))     OR
            (NVL(prev_org_type, 0) <> NVL(iby_disburse_submit_pub_pkg.docspayTab.org_type(l_trx_line_index), 0)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by organization '
                 || 'id/type triggered for document '
                 || curr_doc_id);

             END IF;

             insertDocIntoPayment(l_paymentRec, x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id,
                 x_docsInPmtTab, l_docsInPmtRec,
                  l_docs_in_pmt_count,l_commonAttributes);

             GOTO label_finish_iteration;

         END IF;

	 /*
          * Grouping Step 2.5: Group By Inv Payee Context (external inv payee id)
          */
         IF (prev_ext_inv_payee_id <> iby_disburse_submit_pub_pkg.docspayTab.ext_inv_payee_id(l_trx_line_index)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by payee context '
                 || 'triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id,
                 x_docsInPmtTab, l_docsInPmtRec,
                  l_docs_in_pmt_count,l_commonAttributes);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 3: Group By Payee Context (external payee id)
          */
         IF (prev_ext_payee_id <> iby_disburse_submit_pub_pkg.docspayTab.ext_payee_id(l_trx_line_index)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by payee context '
                 || 'triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id,
                 x_docsInPmtTab, l_docsInPmtRec,
                  l_docs_in_pmt_count,l_commonAttributes);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 4: Payment Currency
          */
         IF (prev_doc_pmt_currency <> iby_disburse_submit_pub_pkg.docspayTab.payment_currency_code(l_trx_line_index)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by payment '
                 || 'currency triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id,
                 x_docsInPmtTab, l_docsInPmtRec,
                  l_docs_in_pmt_count,l_commonAttributes);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 5: Payment Method
          */
         IF (prev_pmt_method_cd <> iby_disburse_submit_pub_pkg.docspayTab.payment_method_code(l_trx_line_index)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Grouping by payment '
                 || 'method triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id,
                 x_docsInPmtTab, l_docsInPmtRec,
                  l_docs_in_pmt_count,l_commonAttributes);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 6: Payment Profile ID
          */
         IF (prev_profile_id <> iby_disburse_submit_pub_pkg.docspayTab.payment_profile_id(l_trx_line_index)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by payment '
                 || 'profile triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id,
                 x_docsInPmtTab, l_docsInPmtRec,
                  l_docs_in_pmt_count,l_commonAttributes);

             GOTO label_finish_iteration;

         END IF;

         /*
          * NOTE:
          * Grouping by payment grouping number is a special type
          * of hardcoded grouping rule. All documents payable that
          * have the same payment grouping number must always be
          * grouped into the same payment.
          *
          * In order to achive this, two things have to happen:
          * a. None of the hardcoded grouping rules should
          *    be triggered when a document payable has a non-null
          *    value for payment grouping number.
          *
          * b. None of the user defined grouping rules must be applied
          *    for a document payable with a non-null value for
          *    payment grouping number.
          *
          * It is guaranteed by the calling application that all
          * documents that have a non-null value for the payment
          * grouping number will have the same values for all the
          * hardcoded grouping attributes. This will satisfy (a).
          *
          * The grouping logic below will not apply any user-defined
          * grouping rules if a document payable has a non-null value
          * for the payment grouping number. This will satisfy (b).
          */

         /*
          * Grouping Step 7: Payment Grouping Number
          */
         IF (NVL(prev_pmt_grp_num, 0) <> NVL(iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index), 0)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by payment '
                 || 'grouping number triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id,
                 x_docsInPmtTab, l_docsInPmtRec,
                  l_docs_in_pmt_count,l_commonAttributes);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 8: Internal Bank Account ID
          */
         IF (prev_int_bank_acct_id <> iby_disburse_submit_pub_pkg.docspayTab.internal_bank_account_id(l_trx_line_index)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Grouping by internal bank '
                 || 'account triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id,
                 x_docsInPmtTab, l_docsInPmtRec,
                  l_docs_in_pmt_count,l_commonAttributes);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 9: External Bank Account ID
          *
          * Fix for bug 5524116:
          *
          * Grouping by ext bank account now made a hardcoded
          * grouping rule regardless of processing type.
          */
         IF (NVL(prev_ext_bank_acct_id, 0) <>
             NVL(iby_disburse_submit_pub_pkg.docspayTab.external_bank_account_id(l_trx_line_index), 0)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by external '
                 || 'bank account triggered for document '
                 || curr_doc_id);

     END IF;
             l_paymentRec.external_bank_account_id := iby_disburse_submit_pub_pkg.docspayTab.external_bank_account_id(l_trx_line_index);

             insertDocIntoPayment(l_paymentRec, x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id,
                 x_docsInPmtTab, l_docsInPmtRec,
                  l_docs_in_pmt_count,l_commonAttributes);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 10: Group By Payee Address (check only)
          *
          * One payee site can only have one address. Therefore, it is
          * sufficient to group by payee sites in order to group by
          * payee addresses.
          */

         /*-----------------------------------------------------
         IF (l_processing_type = 'PRINTED') THEN
             IF (prev_payee_site_id <> iby_disburse_submit_pub_pkg.docspayTab.party_site_id(l_trx_line_index)) THEN

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by payee '
                     || 'address (check) triggered for document '
                     || curr_doc_id);
		 END IF;
                 --
                 -- RAMESH:
                 -- Temporarily commented out. Current data model
                 -- does not support grouping by payee party id and payee
                 -- party site as separate grouping rules because of
                 -- calling app constraints.
                 --
                 -- At the moment, the grouping is at the level of
                 -- payee context which includes (payee party id, payee
                 -- party site id, supplier site id, org id, org type)
                 -- etc.
                 --
                 -- In the future when more fine grained grouping
                 -- can be supported, uncomment this code.
                 --

                 --l_paymentRec.payee_party_site_id := iby_disburse_submit_pub_pkg.docspayTab.party_site_id(l_trx_line_index);

                 insertDocIntoPayment(l_paymentRec, x_paymentTab,
                     l_calc_doc_detail, true, l_payment_id,
                     x_docsInPmtTab, l_docsInPmtRec,
                      l_docs_in_pmt_count,l_commonAttributes);

                 GOTO label_finish_iteration;
             END IF;
         END IF;
         -----------------------------------------------------*/

         /*
          * Grouping Step 11: Payment Function
          */
         IF (prev_pmt_function <> iby_disburse_submit_pub_pkg.docspayTab.payment_function(l_trx_line_index)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Grouping by payment '
                 || 'function triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id,
                 x_docsInPmtTab, l_docsInPmtRec,
                  l_docs_in_pmt_count,l_commonAttributes);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 12: Payment Date
          */
         IF (prev_pmt_date <> iby_disburse_submit_pub_pkg.docspayTab.payment_date(l_trx_line_index)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Grouping by payment '
                 || 'date triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id,
                 x_docsInPmtTab, l_docsInPmtRec,
                  l_docs_in_pmt_count,l_commonAttributes);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 13: Remit To Location Id
          */
         IF (NVL(prev_remit_loc_id, '0') <> NVL(iby_disburse_submit_pub_pkg.docspayTab.remit_to_location_id(l_trx_line_index), '0')) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by remit to '
                 || 'location id triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id,
                 x_docsInPmtTab, l_docsInPmtRec,
                  l_docs_in_pmt_count,l_commonAttributes);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 14: Beneficiary Party
          */
         IF (NVL(prev_benef_party, '0') <> NVL(iby_disburse_submit_pub_pkg.docspayTab.beneficiary_party(l_trx_line_index), '0')) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by beneficiary '
                 || 'party triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id,
                 x_docsInPmtTab, l_docsInPmtRec,
                  l_docs_in_pmt_count,l_commonAttributes);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 15: Group By Space Left On Stub (check only)
          *
          * This will be handled in the payment creation flow (F8) because
          * the check related details are picked up in that flow.
          */

         /*
          * Grouping Step 16: Payee Address (Employee Address)
          *
          * TECHNICALLY REQUIRED, FUNCTIONALLY NOT REQUIRED -
          * Grouping by payee address is really not necessary because
          * we do grouping by payee context (which implicitly groups
          * by payee address as well assuming a 1:1 relationship between
          * a payee and his address).
          *
          * The reason we have this grouping rule here is to populate
          * these columns on the payment. These columns are used by
          * the extract / format.
          */
         IF (NVL(prev_address_source, '0') <> NVL(iby_disburse_submit_pub_pkg.docspayTab.address_source(l_trx_line_index), '0') OR
             NVL(prev_emp_add_code,   '0') <> NVL(iby_disburse_submit_pub_pkg.docspayTab.employee_address_code(l_trx_line_index),   '0') OR
             NVL(prev_emp_person_id,  '0') <> NVL(iby_disburse_submit_pub_pkg.docspayTab.employee_person_id(l_trx_line_index),  '0') OR
             NVL(prev_emp_addr_id,    '0') <> NVL(iby_disburse_submit_pub_pkg.docspayTab.employee_address_id(l_trx_line_index),    '0'))
             THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by payee (employee) '
                 || 'address triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id,
                 x_docsInPmtTab, l_docsInPmtRec,
                  l_docs_in_pmt_count,l_commonAttributes);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 17: Employee Payment Flag
          *
          * TECHINICALLY REQUIRED, FUNCTIONALLY NOT REQUIRED -
          * The reason we have this grouping rule here is to populate
          * the employee payment flag on the payment.
          */
         IF (NVL(prev_emp_pmt_flag, '0') <> NVL(iby_disburse_submit_pub_pkg.docspayTab.employee_payment_flag(l_trx_line_index), '0'))
             THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Grouping by employee '
                 || 'payment flag triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id,
                 x_docsInPmtTab, l_docsInPmtRec,
                  l_docs_in_pmt_count,l_commonAttributes);

             GOTO label_finish_iteration;

         END IF;

         /*-- USER DEFINED GROUPING RULES START HERE --*/

         /*
          * NOTE:
          * None of the user defined grouping rules should be
          * applied to a document if it has a payment grouping
          * number attribute set.
          *
          * This is because all documents with the same payment
          * grouping number must always be grouped into the
          * same payment.
          */

         /*
          * Grouping Step 18: Payee Address (electronic)
          *
          * These are payments where the payment between
          * Oracle Payments and the bank is done electronically,
          * but the delivery channel from the bank to the
          * payee is by check.
          */

         /*-----------------------------------------
         IF (l_payee_add_eft_flag = 'Y') THEN
             IF (l_processing_type = 'ELECTRONIC') THEN

                 IF (NVL(prev_payee_site_id, 0) <> NVL(iby_disburse_submit_pub_pkg.docspayTab.party_site_id(l_trx_line_index), 0))
                     THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'Grouping by payee '
                         || 'address (electronic) triggered for document '
                         || curr_doc_id);

     END IF;

                     --
                     -- RAMESH:
                     -- Temporarily commented out. Current data model
                     -- does not support grouping by payee party id and payee
                     -- party site as separate grouping rules because of
                     -- calling app constraints.
                     --
                     -- At the moment, the grouping is at the level of
                     -- payee context which includes (payee party id, payee
                     -- party site id, supplier site id, org id, org type)
                     -- etc.
                     --
                     -- In the future when more fine grained grouping
                     -- can be supported, uncomment this code.
                     --

                     insertDocIntoPayment(l_paymentRec, x_paymentTab,
                         l_calc_doc_detail, true, l_payment_id,
                         x_docsInPmtTab, l_docsInPmtRec,
                          l_docs_in_pmt_count,l_commonAttributes);

                     GOTO label_finish_iteration;
                 END IF;
             END IF;
         END IF;
         -------------------------------------------*/

         /*
          * Grouping Step 19: Bank Charge Bearer
          */
         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NULL) THEN

             IF (l_bnk_chg_brer_flag = 'Y') THEN

                 IF (NVL(prev_bnk_chg_bearer, 0) <>
                     NVL(iby_disburse_submit_pub_pkg.docspayTab.bank_charge_bearer(l_trx_line_index), 0)) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'Grouping by bank '
                         || 'charge bearer triggered for document '
                         || curr_doc_id);

     END IF;

                     insertDocIntoPayment(l_paymentRec, x_paymentTab,
                         l_calc_doc_detail, true, l_payment_id,
                         x_docsInPmtTab, l_docsInPmtRec,
                          l_docs_in_pmt_count,l_commonAttributes);

                     GOTO label_finish_iteration;

                 END IF;

             END IF;

         END IF;

         /*
          * Grouping Step 20: Delivery Channel
          */
         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NULL) THEN

             IF (l_delv_chnl_flag = 'Y') THEN

                 IF (NVL(prev_delivery_channel, 0) <>
                     NVL(iby_disburse_submit_pub_pkg.docspayTab.delivery_channel_code(l_trx_line_index), 0)) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Grouping by '
                         || 'delivery channel triggered for document '
                         || curr_doc_id);

     END IF;

                     insertDocIntoPayment(l_paymentRec, x_paymentTab,
                         l_calc_doc_detail, true, l_payment_id,
                         x_docsInPmtTab, l_docsInPmtRec,
                          l_docs_in_pmt_count,l_commonAttributes);

                     GOTO label_finish_iteration;

                 END IF;

             END IF;

         END IF;

         /*
          * Grouping Step 21: Express Payment
          */
         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NULL) THEN

             IF (l_express_pmt_flag = 'Y') THEN

                 IF (NVL(prev_settle_priority, 0) <>
                     NVL(iby_disburse_submit_pub_pkg.docspayTab.settlement_priority(l_trx_line_index), 0)) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'Grouping by '
                         || 'express payment triggered for document '
                         || curr_doc_id);

     END IF;

                     insertDocIntoPayment(l_paymentRec, x_paymentTab,
                         l_calc_doc_detail, true, l_payment_id,
                         x_docsInPmtTab, l_docsInPmtRec,
                          l_docs_in_pmt_count,l_commonAttributes);

                     GOTO label_finish_iteration;

                 END IF;

             END IF;

         END IF;

         /*
          * Grouping Step 22: Supplier Message
          */
         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NULL) THEN

             IF (l_sup_msg_flag = 'Y') THEN

                 IF (NVL(prev_supplier_msg1, 0) <>
                         NVL(iby_disburse_submit_pub_pkg.docspayTab.remittance_message1(l_trx_line_index), 0) OR
                     NVL(prev_supplier_msg2, 0) <>
                         NVL(iby_disburse_submit_pub_pkg.docspayTab.remittance_message2(l_trx_line_index), 0) OR
                     NVL(prev_supplier_msg3, 0) <>
                         NVL(iby_disburse_submit_pub_pkg.docspayTab.remittance_message3(l_trx_line_index), 0)) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'Grouping by '
                         || 'supplier message triggered for document '
                         || curr_doc_id);

     END IF;

                     insertDocIntoPayment(l_paymentRec, x_paymentTab,
                         l_calc_doc_detail, true, l_payment_id,
                         x_docsInPmtTab, l_docsInPmtRec,
                          l_docs_in_pmt_count,l_commonAttributes);

                     GOTO label_finish_iteration;

                 END IF;

             END IF;

         END IF;

         /*
          * Grouping Step 23: Unique Remittance Identifier
          *
          * Note: It is sufficient to check if the unique remittance
          * identifiers (uri's) are different between two documents.
          * No need to check if the uri checkdigits are different.
          * Grouping is on the basis of uri's only.
          */
         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NULL) THEN

             IF (l_unique_remit_id_flag = 'Y') THEN

                 IF (NVL(prev_uri, 0) <> NVL(iby_disburse_submit_pub_pkg.docspayTab.unique_remittance_identifier(l_trx_line_index), 0) OR
                     NVL(prev_uri_checkdigits, 0) <>
                         NVL(iby_disburse_submit_pub_pkg.docspayTab.uri_check_digit(l_trx_line_index), 0)) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Grouping by '
                         || 'unique remit id triggered for document '
                         || curr_doc_id);

     END IF;

                     insertDocIntoPayment(l_paymentRec, x_paymentTab,
                         l_calc_doc_detail, true, l_payment_id,
                         x_docsInPmtTab, l_docsInPmtRec,
                          l_docs_in_pmt_count,l_commonAttributes);

                     GOTO label_finish_iteration;

                 END IF;

             END IF;

         END IF;

         /*
          * Grouping Step 24: Payment Reason Code / Payment Reason Comments
          */
         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NULL) THEN

             IF (l_pmt_reason_flag = 'Y') THEN

                 IF (NVL(prev_pmt_reason_code, 0)   <>
                         NVL(iby_disburse_submit_pub_pkg.docspayTab.payment_reason_code(l_trx_line_index), 0)  OR
                     NVL(prev_pmt_reason_commts, 0) <>
                         NVL(iby_disburse_submit_pub_pkg.docspayTab.payment_reason_comments(l_trx_line_index), 0)) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Grouping by '
                         || 'payment reason code / comments triggered '
                         || 'for document '
                         || curr_doc_id);

     END IF;

                     insertDocIntoPayment(l_paymentRec, x_paymentTab,
                         l_calc_doc_detail, true, l_payment_id,
                         x_docsInPmtTab, l_docsInPmtRec,
                          l_docs_in_pmt_count,l_commonAttributes);

                     GOTO label_finish_iteration;

                 END IF;

             END IF;

         END IF;

         /*
          * Grouping Step 25: Payment Due Date
          */
         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NULL) THEN

             IF (l_due_date_flag = 'Y') THEN

                 IF (NVL(prev_pmt_due_date, l_impossible_date) <>
                     NVL(iby_disburse_submit_pub_pkg.docspayTab.payment_due_date(l_trx_line_index), l_impossible_date)) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Grouping by '
                         || 'payment due date triggered for document '
                         || curr_doc_id);

     END IF;

                     insertDocIntoPayment(l_paymentRec, x_paymentTab,
                         l_calc_doc_detail, true, l_payment_id,
                         x_docsInPmtTab, l_docsInPmtRec,
                          l_docs_in_pmt_count,l_commonAttributes);

                     GOTO label_finish_iteration;

                 END IF;

             END IF;

         END IF;

         /*
          * Grouping Step 26: Max Documents Per Payment
          */
         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NULL) THEN

             IF (l_max_docs_flag = 'Y') THEN

                 IF (l_docs_in_pmt_count = l_max_docs_limit) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'Grouping by '
                         || 'max docs per payment triggered for document '
                         || curr_doc_id);

     END IF;

                     insertDocIntoPayment(l_paymentRec, x_paymentTab,
                         l_calc_doc_detail, true, l_payment_id,
                         x_docsInPmtTab, l_docsInPmtRec,
                          l_docs_in_pmt_count,l_commonAttributes);

                     GOTO label_finish_iteration;

                 END IF;

             END IF;

         END IF;

         /*
          * Grouping Step 27: Break Payments According To Payment Details
          *                   Field Length
          */
         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NULL) THEN

             IF (l_pmt_details_flag = 'Y') THEN

                 IF (LENGTH(l_paymentRec.payment_details || l_calc_doc_detail)
                     > l_pmt_details_len) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'Grouping by '
                         || 'payment details length triggered for document '
                         || curr_doc_id);

     END IF;

                     insertDocIntoPayment(l_paymentRec, x_paymentTab,
                         l_calc_doc_detail, true, l_payment_id,
                         x_docsInPmtTab, l_docsInPmtRec,
                          l_docs_in_pmt_count,l_commonAttributes);

                     GOTO label_finish_iteration;

                 END IF;

             END IF;

         END IF;

         /*
          * End Of Grouping:
          * If a document reaches here, it means that this document
          * is similar to the previous document as far a grouping
          * criteria is concerned.
          *
          * Add this document to the currently running payment.
          */
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN  --vid- start here
	  print_debuginfo(l_module_name, 'No grouping rules '
             || 'were triggered for document '
             || curr_doc_id);


         END IF;
         insertDocIntoPayment(l_paymentRec, x_paymentTab,
             l_calc_doc_detail, false, l_payment_id,
             x_docsInPmtTab, l_docsInPmtRec,
              l_docs_in_pmt_count,l_commonAttributes);

         <<label_finish_iteration>>

         /*
          * CBR Handling:
          *
          * For each payment, store the central bank reporting
          * related fields along with the payment id in the
          * CBR table.
          *
          * This table will be passed as an output param to
          * the routine that sets the 'declare payment flag'
          * on the payment based on the CBR fields.
          *
          * We just created a payment. If this payment
          * does not already exist in the CBR list, add
          * it to the list.
          */
          l_profile_id := iby_disburse_submit_pub_pkg.docspayTab.payment_profile_id(l_trx_line_index);
/*  Bug 5709596 */
          IF NOT(iby_disburse_submit_pub_pkg.paymentProfilesTab.exists(l_profile_id)) THEN
             iby_disburse_submit_pub_pkg.set_profile_attribs(l_profile_id);
          END IF;

         /*
          * Lastly, before going into the next iteration
          * of the loop copy all the current grouping criteria
          * into 'prev' fields so that we can compare these
          * fields with the next record.
          *
          * No need to copy the current values into the previous ones for
          * the first record because we have already done it at the beginning.
          *
          *
          * Fix for bug 5463733:
          *
          * Reset the prev pmt grouping number here, else
          * the next document may incorrectly be grouped
          * into another payment.
          */

         IF (l_first_record <> 'Y') THEN
            prev_doc_id            := iby_disburse_submit_pub_pkg.docspayTab.document_payable_id(l_trx_line_index);
            prev_ca_id             := iby_disburse_submit_pub_pkg.docspayTab.calling_app_id(l_trx_line_index);
            prev_ca_doc_id1        := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref1(l_trx_line_index);
            prev_ca_doc_id2        := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref2(l_trx_line_index);
            prev_ca_doc_id3        := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref3(l_trx_line_index);
            prev_ca_doc_id4        := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref4(l_trx_line_index);
            prev_ca_doc_id5        := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref5(l_trx_line_index);
            prev_pp_tt_cd          := iby_disburse_submit_pub_pkg.docspayTab.pay_proc_trxn_type_code(l_trx_line_index);
            prev_pmt_grp_num       := iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index);
            prev_pmt_method_cd     := iby_disburse_submit_pub_pkg.docspayTab.payment_method_code(l_trx_line_index);
            prev_int_bank_acct_id  := iby_disburse_submit_pub_pkg.docspayTab.internal_bank_account_id(l_trx_line_index);
            prev_ext_bank_acct_id  := iby_disburse_submit_pub_pkg.docspayTab.external_bank_account_id(l_trx_line_index);
            prev_profile_id        := iby_disburse_submit_pub_pkg.docspayTab.payment_profile_id(l_trx_line_index);
            prev_org_id            := iby_disburse_submit_pub_pkg.docspayTab.org_id(l_trx_line_index);
            prev_org_type          := iby_disburse_submit_pub_pkg.docspayTab.org_type(l_trx_line_index);
            prev_payee_id          := iby_disburse_submit_pub_pkg.docspayTab.payee_party_id(l_trx_line_index);
            prev_payee_site_id     := iby_disburse_submit_pub_pkg.docspayTab.party_site_id(l_trx_line_index);
            prev_remit_loc_id      := iby_disburse_submit_pub_pkg.docspayTab.remit_to_location_id(l_trx_line_index);
            prev_ext_payee_id      := iby_disburse_submit_pub_pkg.docspayTab.ext_payee_id(l_trx_line_index);
            prev_doc_pmt_currency  := iby_disburse_submit_pub_pkg.docspayTab.payment_currency_code(l_trx_line_index);
            prev_doc_pmt_amount    := iby_disburse_submit_pub_pkg.docspayTab.payment_amount(l_trx_line_index);
            prev_pay_alone_flag    := iby_disburse_submit_pub_pkg.docspayTab.exclusive_payment_flag(l_trx_line_index);
            prev_bnk_chg_bearer    := iby_disburse_submit_pub_pkg.docspayTab.bank_charge_bearer(l_trx_line_index);
            prev_delivery_channel  := iby_disburse_submit_pub_pkg.docspayTab.delivery_channel_code(l_trx_line_index);
            prev_settle_priority   := iby_disburse_submit_pub_pkg.docspayTab.settlement_priority(l_trx_line_index);
            prev_supplier_msg1     := iby_disburse_submit_pub_pkg.docspayTab.remittance_message1(l_trx_line_index);
            prev_supplier_msg2     := iby_disburse_submit_pub_pkg.docspayTab.remittance_message2(l_trx_line_index);
            prev_supplier_msg3     := iby_disburse_submit_pub_pkg.docspayTab.remittance_message3(l_trx_line_index);
            prev_uri               := iby_disburse_submit_pub_pkg.docspayTab.unique_remittance_identifier(l_trx_line_index);
            prev_uri_checkdigits   := iby_disburse_submit_pub_pkg.docspayTab.uri_check_digit(l_trx_line_index);
            prev_pmt_reason_code   := iby_disburse_submit_pub_pkg.docspayTab.payment_reason_code(l_trx_line_index);
            prev_pmt_reason_commts := iby_disburse_submit_pub_pkg.docspayTab.payment_reason_comments(l_trx_line_index);
            prev_pmt_function      := iby_disburse_submit_pub_pkg.docspayTab.payment_function(l_trx_line_index);
            prev_pmt_date          := iby_disburse_submit_pub_pkg.docspayTab.payment_date(l_trx_line_index);
            prev_pmt_due_date      := iby_disburse_submit_pub_pkg.docspayTab.payment_due_date(l_trx_line_index);
            prev_benef_party       := iby_disburse_submit_pub_pkg.docspayTab.beneficiary_party(l_trx_line_index);
            prev_address_source    := iby_disburse_submit_pub_pkg.docspayTab.address_source(l_trx_line_index);
            prev_emp_add_code      := iby_disburse_submit_pub_pkg.docspayTab.employee_address_code(l_trx_line_index);
            prev_emp_person_id     := iby_disburse_submit_pub_pkg.docspayTab.employee_person_id(l_trx_line_index);
            prev_emp_addr_id       := iby_disburse_submit_pub_pkg.docspayTab.employee_address_id(l_trx_line_index);
            prev_emp_pmt_flag      := iby_disburse_submit_pub_pkg.docspayTab.employee_payment_flag(l_trx_line_index);

            prev_inv_payee_party_id          := iby_disburse_submit_pub_pkg.docspayTab.inv_payee_party_id(l_trx_line_index);
            prev_inv_party_site_id     := iby_disburse_submit_pub_pkg.docspayTab.inv_party_site_id(l_trx_line_index);
            prev_inv_beneficiary_party      := iby_disburse_submit_pub_pkg.docspayTab.inv_beneficiary_party(l_trx_line_index);
            prev_ext_inv_payee_id      := iby_disburse_submit_pub_pkg.docspayTab.ext_inv_payee_id(l_trx_line_index);

         END IF;

         /*
          *  Remember to reset the first record flag before going
          *  into the next iteration.
          */
         IF (l_first_record = 'Y') THEN
             l_first_record := 'N';
         END IF;

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, '+----------------------------------+');
         END IF;

        END LOOP; -- for documents cursor

        EXIT WHEN c_documents%NOTFOUND;

     END LOOP; -- for documents cursor

     iby_disburse_submit_pub_pkg.delete_docspayTab;

     CLOSE c_documents;

     /*
      * Exit if no documents were found.
      */
     IF (l_no_rec_in_ppr) THEN
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'No documents payable were '
             || 'retrieved from DB for payment request '
             || p_payment_request_id
             || '. Exiting document grouping ..');


	 print_debuginfo(l_module_name, 'EXIT');

         END IF;
         RETURN;
     END IF;


     /*
      * Populate legal entity ids for each of the created payments.
      *
      * The legal entity id on the payment is a special attribute.
      * It is not a grouping rule, instead it has to be derived
      * from the internal bank account and populated.
      */

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Created '
         || x_paymentTab.COUNT   || ' payment(s) from '
         || x_docsInPmtTab.COUNT || ' document(s) for payment request '
         || p_payment_request_id || '.');
     END IF;
     /*
      * Finally, return the payments created by grouping to the caller.
      */
     x_ca_id        := l_ca_id;
     x_ca_payreq_cd := l_ca_payreq_cd;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'EXIT');
     END IF;
 END performDocumentGrouping;

/*--------------------------------------------------------------------
 | NAME:
 |     performDocumentGrouping
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE performDocumentGrouping(
     p_payment_request_id   IN IBY_PAY_SERVICE_REQUESTS.
                                         payment_service_request_id%TYPE,
     --x_paymentTab           IN OUT NOCOPY IBY_PAYGROUP_PUB.paymentTabType,
     x_ca_id                IN OUT NOCOPY IBY_PAY_SERVICE_REQUESTS.
                                              calling_app_id%TYPE,
     x_ca_payreq_cd         IN OUT NOCOPY IBY_PAY_SERVICE_REQUESTS.
                                              call_app_pay_service_req_code
                                              %TYPE,
     x_payReqCriteria       IN OUT NOCOPY IBY_PAYGROUP_PUB.
                                              payReqImposedCriteria

-- , x_cbrTab               IN OUT NOCOPY IBY_PAYGROUP_PUB.
--                                             centralBankReportTabType
     )
 IS
 l_module_name           CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                   '.performDocumentGrouping';
 l_first_record          VARCHAR2(1)   := 'Y';
 l_payment_id            NUMBER(15)    := 0;
 l_payment_total         NUMBER(15)    := 0;
 l_payment_docs_cnt      NUMBER(10)    := 0;
 l_sup_msg_flag          VARCHAR2(1)   := 'N';
 l_bnk_chg_brer_flag     VARCHAR2(1)   := 'N';
 l_delv_chnl_flag        VARCHAR2(1)   := 'N';
 l_express_pmt_flag      VARCHAR2(1)   := 'N';
 l_pmt_details_flag      VARCHAR2(1)   := 'N';
 l_pmt_details_len       NUMBER(15)    := 0;
 l_pmt_det_formula       VARCHAR2(2000):= 0;
 l_max_docs_flag         VARCHAR2(1)   := 'N';
 l_max_docs_limit        NUMBER(15)    := 0;
 l_docs_in_pmt_count     NUMBER(15)    := 0;
 l_unique_remit_id_flag  VARCHAR2(1)   := 'N';
 l_pmt_reason_flag       VARCHAR2(1)   := 'N';
 l_due_date_flag         VARCHAR2(1)   := 'N';
 l_prom_note_flag        VARCHAR2(1)   := 'N';

 l_profile_id            IBY_PAYMENT_PROFILES.payment_profile_id%type;

 /*
  * Used to substitute null values in date comparisons.
  * It is assumed that year 5100 = doomsday.
  */
 l_impossible_date       DATE := TO_DATE('01/01/5100 10:25:55',
                                     'MM/DD/YYYY HH24:MI:SS');

 l_bank_inst1_code       IBY_PAYMENTS_ALL.bank_instruction1_code%TYPE;
 l_bank_inst2_code       IBY_PAYMENTS_ALL.bank_instruction1_code%TYPE;
 l_pmt_txt_msg1          IBY_PAYMENTS_ALL.payment_text_message1%TYPE;
 l_pmt_txt_msg2          IBY_PAYMENTS_ALL.payment_text_message2%TYPE;
 l_pmt_txt_msg3          IBY_PAYMENTS_ALL.payment_text_message3%TYPE;

 l_processing_type       VARCHAR2(100);  -- CHECK | ELECTRONIC
 l_calc_doc_detail       VARCHAR2(1000); -- Stores details for a single doc

 /* these are related to central bank reporting */
 l_decl_option             VARCHAR2(100) := '';
 l_decl_only_fx_flag       VARCHAR2(1)   := '';
 l_decl_curr_fx_rate_type  VARCHAR2(255) := '';
 l_decl_curr_code          VARCHAR2(10)  := '';
 l_decl_threshold_amount   NUMBER(15)    := 0;
/*
 l_cbrRec                  IBY_PAYGROUP_PUB.centralBankReportRecType;
 l_cbrTab                  IBY_PAYGROUP_PUB.centralBankReportTabType;
 l_cbr_rec_exists          BOOLEAN       := FALSE;
*/

 l_ca_payreq_cd            VARCHAR2(255) := '';
 l_ca_id                   NUMBER(15)    := 0;
 l_all_pmts_success_flag   BOOLEAN       := FALSE;
 l_all_pmts_failed_flag    BOOLEAN       := FALSE;
 l_le_id                   NUMBER(15)    := 0;

 /* rejection level system options */
 l_rejection_level         VARCHAR2(200);
 l_review_pmts_flag        VARCHAR2(1)   := 'N';

 l_paymentRec        IBY_PAYMENTS_ALL%ROWTYPE;
 l_docsInPmtRec      IBY_PAYGROUP_PUB.docsInPaymentRecType;

 /*
  * These two are related data structures. Each row in paymentTabType
  * PLSQL table is used in inserting a row into the IBY_PAYMENTS_ALL
  * table.
  *
  * Since the IBY_PAYMENTS_ALL table does not contain a document id, a
  * separate data structure is needed to keep track of the documents
  * that are part of a payment. This information is tracked in the
  * docsInPaymentTabType table. The rows in docsInPaymentTabType are
  * used to update the rows in IBY_DOCS_PAYABLE_ALL table with
  * payment ids.
  *
  *            x_paymentTab                        x_docsInPmtTab
  *       (insert into IBY_PAYMENTS_ALL)          (update IBY_DOCS_PAYABLE)
  * /-------------------------------------\       /------------\
  * |Payment|Payment|..|Payment|Docs   |..|       |Payment|Doc |
  * |Id     |Profile|..|Amount |Payable|..|       |Id     |Id  |
  * |       |Id     |..|       |Count  |..|       |       |    |
  * |-------------------------------------|       |------------|
  * |   4000|     10|  |    550|      3|  |       |   4000| 501|
  * |       |       |  |       |       |  |       |   4000| 504|
  * |       |       |  |       |       |  |       |   4000| 505|
  * |-------|-------|--|-------|-------|--|       |-------|----|
  * |   4001|     10|  |1063.70|     19|  |       |   4001| 502|
  * |       |       |  |       |       |  |       |   4001| 509|
  * |       |       |  |       |       |  |       |   4001| 511|
  * |       |       |  |       |       |  |       |   4001| 523|
  * |       |       |  |       |       |  |       |     : |  : |
  * |-------|-------|--|-------|-------|--|       |-------|----|
  * |    :  |     : |  |    :  |     : |  |       |     : |  : |
  * \_______|_______|__|_______|_______|__/       \_______|____/
  *
  * Combining these two structures into one structure is messy
  * because you cannot directly use the combined data structure for
  * bulk updates.
  */

 /* these two are passed to calling app via hook */
 l_hookPaymentTab    IBY_PAYGROUP_PUB.hookPaymentTabType;
 l_hookDocsInPmtTab  IBY_PAYGROUP_PUB.hookDocsInPaymentTabType;

 /* holds the error messages against failed documents */
 l_docErrorTab       IBY_VALIDATIONSETS_PUB.docErrorTabType;

 /* holds list of internal bank accounts with corresponding legal entity id */
 l_bankAcctLETab     bankAccountLETabType;

 l_commonAttributes commonAttributesTabType;

 /* previous document attributes */
 prev_doc_id                 iby_docs_payable_all.document_payable_id%TYPE;
 prev_ca_id                  iby_docs_payable_all.calling_app_id%TYPE;
 prev_ca_doc_id1             iby_docs_payable_all.
                                 calling_app_doc_unique_ref1%TYPE;
 prev_ca_doc_id2             iby_docs_payable_all.
                                 calling_app_doc_unique_ref2%TYPE;
 prev_ca_doc_id3             iby_docs_payable_all.
                                 calling_app_doc_unique_ref3%TYPE;
 prev_ca_doc_id4             iby_docs_payable_all.
                                 calling_app_doc_unique_ref4%TYPE;
 prev_ca_doc_id5             iby_docs_payable_all.
                                 calling_app_doc_unique_ref5%TYPE;
 prev_pp_tt_cd               iby_docs_payable_all.pay_proc_trxn_type_code%TYPE;
 prev_pmt_grp_num            iby_docs_payable_all.payment_grouping_number%TYPE;
 prev_pmt_method_cd          iby_docs_payable_all.payment_method_code%TYPE;
 prev_doc_pmt_currency       iby_docs_payable_all.payment_currency_code%TYPE;
 prev_doc_pmt_amount         iby_docs_payable_all.payment_amount%TYPE;
 prev_int_bank_acct_id       iby_docs_payable_all.
                                 internal_bank_account_id%TYPE;
 prev_ext_bank_acct_id       iby_docs_payable_all.
                                 external_bank_account_id%TYPE;
 prev_payee_id               iby_docs_payable_all.payee_party_id%TYPE;
 prev_payee_site_id          iby_docs_payable_all.party_site_id%TYPE;
 prev_supplier_site_id       iby_docs_payable_all.supplier_site_id%TYPE;
 prev_remit_loc_id           iby_docs_payable_all.remit_to_location_id%TYPE;
 prev_ext_payee_id           iby_docs_payable_all.ext_payee_id%TYPE;
 prev_org_id                 iby_docs_payable_all.org_id%TYPE;
 prev_org_type               iby_docs_payable_all.org_type%TYPE;
 prev_profile_id             iby_docs_payable_all.payment_profile_id%TYPE;
 prev_pay_alone_flag         iby_docs_payable_all.exclusive_payment_flag%TYPE;
 prev_supplier_msg1          iby_docs_payable_all.remittance_message1%TYPE;
 prev_supplier_msg2          iby_docs_payable_all.remittance_message2%TYPE;
 prev_supplier_msg3          iby_docs_payable_all.remittance_message3%TYPE;
 prev_bnk_chg_bearer         iby_docs_payable_all.bank_charge_bearer%TYPE;
 prev_delivery_channel       iby_docs_payable_all.delivery_channel_code%TYPE;
 prev_settle_priority        iby_docs_payable_all.settlement_priority%TYPE;
 prev_uri                    iby_docs_payable_all.
                                 unique_remittance_identifier%TYPE;
 prev_uri_checkdigits        iby_docs_payable_all.uri_check_digit%TYPE;
 prev_pmt_reason_code        iby_docs_payable_all.payment_reason_code%TYPE;
 prev_pmt_reason_commts      iby_docs_payable_all.payment_reason_comments%TYPE;
 prev_pmt_function           iby_docs_payable_all.payment_function%TYPE;
 prev_pmt_date               iby_docs_payable_all.payment_date%TYPE;
 prev_pmt_due_date           iby_docs_payable_all.payment_due_date%TYPE;
 prev_benef_party            iby_docs_payable_all.beneficiary_party%TYPE;

 /* payee (employee) address related fields */
 prev_address_source         iby_docs_payable_all.address_source%TYPE;
 prev_emp_add_code           iby_docs_payable_all.employee_address_code%TYPE;
 prev_emp_person_id          iby_docs_payable_all.employee_person_id%TYPE;
 prev_emp_addr_id            iby_docs_payable_all.employee_address_id%TYPE;

 prev_emp_pmt_flag           iby_docs_payable_all.employee_payment_flag%TYPE;

 /*TPP-Start*/
 prev_inv_payee_party_id         iby_docs_payable_all.inv_payee_party_id%TYPE;
 prev_inv_party_site_id          iby_docs_payable_all.inv_party_site_id%TYPE;
 prev_inv_supplier_site_id       iby_docs_payable_all.inv_supplier_site_id%TYPE;
 prev_ext_inv_payee_id           iby_docs_payable_all.ext_inv_payee_id%TYPE;
 prev_inv_beneficiary_party            iby_docs_payable_all.inv_beneficiary_party%TYPE;

 curr_inv_payee_party_id         iby_docs_payable_all.inv_payee_party_id%TYPE;
 curr_inv_party_site_id          iby_docs_payable_all.inv_party_site_id%TYPE;
 curr_inv_supplier_site_id       iby_docs_payable_all.inv_supplier_site_id%TYPE;
 curr_ext_inv_payee_id           iby_docs_payable_all.ext_inv_payee_id%TYPE;
 curr_inv_beneficiary_party            iby_docs_payable_all.inv_beneficiary_party%TYPE;
 /*TPP-End*/


 /* current document attributes */
 curr_doc_id                 iby_docs_payable_all.document_payable_id%TYPE;
 curr_ca_id                  iby_docs_payable_all.calling_app_id%TYPE;
 curr_ca_doc_id1             iby_docs_payable_all.
                                 calling_app_doc_unique_ref1%TYPE;
 curr_ca_doc_id2             iby_docs_payable_all.
                                 calling_app_doc_unique_ref2%TYPE;
 curr_ca_doc_id3             iby_docs_payable_all.
                                 calling_app_doc_unique_ref3%TYPE;
 curr_ca_doc_id4             iby_docs_payable_all.
                                 calling_app_doc_unique_ref4%TYPE;
 curr_ca_doc_id5             iby_docs_payable_all.
                                 calling_app_doc_unique_ref5%TYPE;
 curr_pp_tt_cd               iby_docs_payable_all.pay_proc_trxn_type_code%TYPE;
 curr_pmt_grp_num            iby_docs_payable_all.payment_grouping_number%TYPE;
 curr_pmt_method_cd          iby_docs_payable_all.payment_method_code%TYPE;
 curr_doc_pmt_currency       iby_docs_payable_all.payment_currency_code%TYPE;
 curr_doc_pmt_amount         iby_docs_payable_all.payment_amount%TYPE;
 curr_int_bank_acct_id       iby_docs_payable_all.
                                 internal_bank_account_id%TYPE;
 curr_ext_bank_acct_id       iby_docs_payable_all.
                                 external_bank_account_id%TYPE;
 curr_org_id                 iby_docs_payable_all.org_id%TYPE;
 curr_org_type               iby_docs_payable_all.org_type%TYPE;
 curr_payee_id               iby_docs_payable_all.payee_party_id%TYPE;
 curr_payee_site_id          iby_docs_payable_all.party_site_id%TYPE;
 curr_supplier_site_id       iby_docs_payable_all.supplier_site_id%TYPE;
 curr_remit_loc_id           iby_docs_payable_all.remit_to_location_id%TYPE;
 curr_ext_payee_id           iby_docs_payable_all.ext_payee_id%TYPE;
 curr_profile_id             iby_docs_payable_all.payment_profile_id%TYPE;
 curr_pay_alone_flag         iby_docs_payable_all.exclusive_payment_flag%TYPE;
 curr_supplier_msg1          iby_docs_payable_all.remittance_message1%TYPE;
 curr_supplier_msg2          iby_docs_payable_all.remittance_message2%TYPE;
 curr_supplier_msg3          iby_docs_payable_all.remittance_message3%TYPE;
 curr_bnk_chg_bearer         iby_docs_payable_all.bank_charge_bearer%TYPE;
 curr_delivery_channel       iby_docs_payable_all.delivery_channel_code%TYPE;
 curr_settle_priority        iby_docs_payable_all.settlement_priority%TYPE;
 curr_uri                    iby_docs_payable_all.
                                 unique_remittance_identifier%TYPE;
 curr_uri_checkdigits        iby_docs_payable_all.uri_check_digit%TYPE;
 curr_pmt_reason_code        iby_docs_payable_all.payment_reason_code%TYPE;
 curr_pmt_reason_commts      iby_docs_payable_all.payment_reason_comments%TYPE;
 curr_pmt_function           iby_docs_payable_all.payment_function%TYPE;
 curr_pmt_date               iby_docs_payable_all.payment_date%TYPE;
 curr_pmt_due_date           iby_docs_payable_all.payment_due_date%TYPE;
 curr_benef_party            iby_docs_payable_all.beneficiary_party%TYPE;

 /* payee (employee) address related fields */
 curr_address_source         iby_docs_payable_all.address_source%TYPE;
 curr_emp_add_code           iby_docs_payable_all.employee_address_code%TYPE;
 curr_emp_person_id          iby_docs_payable_all.employee_person_id%TYPE;
 curr_emp_addr_id            iby_docs_payable_all.employee_address_id%TYPE;

 curr_emp_pmt_flag           iby_docs_payable_all.employee_payment_flag%TYPE;

 /* these two are passed to the external application hook */
 l_amount_withheld           iby_docs_payable_all.amount_withheld%TYPE;

 /* used for maturity date calculation */
 l_discount_date             iby_docs_payable_all.discount_date%TYPE;

 /* passed to hook */
 l_discount_amount           iby_docs_payable_all.payment_curr_discount_taken
                                                      %TYPE;
 l_trx_line_index            BINARY_INTEGER;
 l_no_rec_in_ppr             BOOLEAN;
 G_LINES_PER_FETCH           CONSTANT  NUMBER:= 1000;
-- G_LINES_PER_FETCH           CONSTANT  NUMBER:= 3;

 /*
  * This cursor up will pick up all valid documents for the specified
  * payment request. The select statement will order the documents
  * based on grouping criteria.
  *
  * As the grouping is operation is commutative, there is no
  * need to group the documents by any particular order (in
  * other words, grouping 1 followed by grouping 2, will lead
  * to the same results as grouping 2 followed by grouping 1).
  *
  * Important Note:
  * Always ensure that there is a corresponding order by
  * clause for each grouping criterion that you wish to use.
  * This is required in order to create minimum possible
  * payments from a given set of documents.
  *
  *
  * Populate legal entity ids for each of the created payments.
  * The legal entity id on the payment is a special attribute.
  * It is not a grouping rule, instead it has to be derived
  * from the internal bank account and populated.
  *
  */
 CURSOR c_documents(p_payment_request_id VARCHAR2)
 IS
 SELECT prq.call_app_pay_service_req_code,   -- Callers pay req id
        docs.document_payable_id,            -- Unique doc id asgn by IBY
	docs.calling_app_id,                 --| The caller
        docs.calling_app_doc_unique_ref1,    --| uses these
        docs.calling_app_doc_unique_ref2,    --| seven fields
        docs.calling_app_doc_unique_ref3,    --| to uniquely
        docs.calling_app_doc_unique_ref4,    --| identify
        docs.calling_app_doc_unique_ref5,    --| a document
        docs.pay_proc_trxn_type_code,        --| payable
        docs.payment_grouping_number,        -- Identifies related docs
        docs.payment_method_code,            -- Payment method
        docs.internal_bank_account_id,       -- Internal bank account id
        docs.external_bank_account_id,       -- External bank account id
        docs.payment_profile_id,             -- Payment profile id
        docs.org_id,
        docs.org_type,
        docs.payment_function,
        docs.ext_payee_id,                   -- Ext payee id (payee context)
        docs.payee_party_id,
        docs.party_site_id,
        docs.supplier_site_id,
        docs.remit_to_location_id,
        docs.amount_withheld,                -- Passed to hook for adjustmt
        ext_payee.bank_instruction1_code,    --|
        ext_payee.bank_instruction2_code,    --| These fields are
        ext_payee.payment_text_message1,     --| derived from the
        ext_payee.payment_text_message2,     --| payee.
        ext_payee.payment_text_message3,     --|
        docs.payment_currency_code,
        docs.payment_amount,
        docs.payment_date,
        docs.exclusive_payment_flag,
        docs.bank_charge_bearer,             -- Bank charge bearer
        docs.delivery_channel_code,          -- Delivery channel
        docs.settlement_priority,
        docs.remittance_message1,            -- Supplier message 1
        docs.remittance_message2,            -- Supplier message 2
        docs.remittance_message3,            -- Supplier message 3
        docs.unique_remittance_identifier,
        docs.uri_check_digit,
        docs.payment_reason_code,
        docs.payment_reason_comments,
        docs.payment_due_date,
        docs.discount_date,
        docs.payment_curr_discount_taken,
        docs.beneficiary_party,
        docs.address_source,                 --
        docs.employee_address_code,          -- Employee address
        docs.employee_person_id,             -- related fields
        docs.employee_address_id,            --
        docs.employee_payment_flag,
        pcr.group_by_remittance_message,
        pcr.group_by_bank_charge_bearer,
        pcr.group_by_delivery_channel,
        pcr.group_by_settle_priority_flag,
        pcr.group_by_payment_details_flag,
        DECODE(pcr.payment_details_length_limit, NULL,
            -1, pcr.payment_details_length_limit),
        pcr.payment_details_formula,
        pcr.group_by_max_documents_flag,     -- Max documents per payment flag
        pcr.max_documents_per_payment,       -- Max documents per payment value
        pcr.group_by_unique_remit_id_flag,
        pcr.group_by_payment_reason,
        pcr.group_by_due_date_flag,
        ppf.processing_type,
        ppf.declaration_option,
        ppf.dcl_only_foreign_curr_pmt_flag,
        ppf.declaration_curr_fx_rate_type,
        ppf.declaration_currency_code,
        ppf.declaration_threshold_amount,
        DECODE(prq.maximum_payment_amount, NULL, -1,
            prq.maximum_payment_amount),
        DECODE(prq.minimum_payment_amount, NULL, -1,
            prq.minimum_payment_amount),
        prq.allow_zero_payments_flag,
        pmt_mthd.support_bills_payable_flag,
        iba.account_owner_org_id,
	/*TPP-Start*/
        docs.inv_payee_party_id,
        docs.inv_party_site_id,
        docs.inv_supplier_site_id,
        docs.inv_beneficiary_party,
        docs.ext_inv_payee_id
	/*TPP-Start*/
 FROM IBY_DOCS_PAYABLE_ALL       docs,
      IBY_PMT_CREATION_RULES     pcr,
      IBY_PAYMENT_PROFILES       ppf,
      IBY_PAY_SERVICE_REQUESTS   prq,
      IBY_EXTERNAL_PAYEES_ALL    ext_payee,
      IBY_PAYMENT_METHODS_B      pmt_mthd,
      CE_BANK_ACCOUNTS           iba
 WHERE  prq.payment_service_request_id  = p_payment_request_id
 AND    docs.payment_service_request_id = prq.payment_service_request_id
 AND    docs.payment_profile_id         = ppf.payment_profile_id
 AND    ppf.system_profile_code         = pcr.system_profile_code(+)
 AND    docs.document_status            = DOC_STATUS_VALIDATED
 AND    docs.ext_payee_id               = ext_payee.ext_payee_id
 AND    docs.payment_method_code        = pmt_mthd.payment_method_code
 AND    docs.internal_bank_account_id   = iba.bank_account_id
 ORDER BY
        docs.exclusive_payment_flag,
        docs.org_id,
        docs.org_type,
        ext_payee.ext_payee_id,        -- \
        docs.payment_currency_code,    -- |
        docs.payment_method_code,      -- |
        docs.payment_profile_id,       -- |
        docs.payment_grouping_number,  -- |
        docs.internal_bank_account_id, -- | Ensure that the grouping
        docs.external_bank_account_id, -- | rules below follow the same
        docs.payment_function,         -- | ordering as this order by
        docs.payment_date,             -- | clause.
        docs.remit_to_location_id,     -- |
        docs.beneficiary_party,        -- |
        docs.address_source,           -- |
        docs.employee_address_code,    -- |
        docs.employee_person_id,       -- |
        docs.employee_address_id,      -- |
        docs.employee_payment_flag,    -- |
        docs.bank_charge_bearer,       -- |
        docs.delivery_channel_code,    -- | This order must be followed
        docs.settlement_priority,      -- | for creating minimum number
        docs.remittance_message1,      -- | of payments.
        docs.remittance_message2,      -- |
        docs.remittance_message3,      -- /
        docs.unique_remittance_identifier,
        docs.uri_check_digit,
        docs.payment_reason_code,
        docs.payment_reason_comments,
        docs.payment_due_date
        ;

 /*
  * Cursor to pick up all possible internal bank accounts
  * along with their corresponding legal entity ids.
  *
 CURSOR c_bank_acct_le_list
 IS
 SELECT
     iba.bank_account_id       int_bank_account,
     iba.account_owner_org_id  legal_entity_id
 FROM
     CE_BANK_ACCOUNTS iba
 ;
  */

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'ENTER');

     print_debuginfo(l_module_name, 'Payment Request Id : '||
         p_payment_request_id);

     END IF;

     l_no_rec_in_ppr := TRUE;
     /*
      * Pick up all the documents of the payment request.
      */
     OPEN  c_documents(p_payment_request_id);
     LOOP
        iby_disburse_submit_pub_pkg.delete_docspayTab;
        FETCH c_documents BULK COLLECT INTO
           iby_disburse_submit_pub_pkg.docspayTab.call_app_pay_service_req_code,
           iby_disburse_submit_pub_pkg.docspayTab.document_payable_id,
           iby_disburse_submit_pub_pkg.docspayTab.calling_app_id,
           iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref1,
           iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref2,
           iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref3,
           iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref4,
           iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref5,
           iby_disburse_submit_pub_pkg.docspayTab.pay_proc_trxn_type_code,
           iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number,
           iby_disburse_submit_pub_pkg.docspayTab.payment_method_code,
           iby_disburse_submit_pub_pkg.docspayTab.internal_bank_account_id,
           iby_disburse_submit_pub_pkg.docspayTab.external_bank_account_id,
           iby_disburse_submit_pub_pkg.docspayTab.payment_profile_id,
           iby_disburse_submit_pub_pkg.docspayTab.org_id,
           iby_disburse_submit_pub_pkg.docspayTab.org_type,
           iby_disburse_submit_pub_pkg.docspayTab.payment_function,
           iby_disburse_submit_pub_pkg.docspayTab.ext_payee_id,
           iby_disburse_submit_pub_pkg.docspayTab.payee_party_id,
           iby_disburse_submit_pub_pkg.docspayTab.party_site_id,
           iby_disburse_submit_pub_pkg.docspayTab.supplier_site_id,
           iby_disburse_submit_pub_pkg.docspayTab.remit_to_location_id,
           iby_disburse_submit_pub_pkg.docspayTab.amount_withheld,
           iby_disburse_submit_pub_pkg.docspayTab.bank_instruction1_code,
           iby_disburse_submit_pub_pkg.docspayTab.bank_instruction2_code,
           iby_disburse_submit_pub_pkg.docspayTab.payment_text_message1,
           iby_disburse_submit_pub_pkg.docspayTab.payment_text_message2,
           iby_disburse_submit_pub_pkg.docspayTab.payment_text_message3,
           iby_disburse_submit_pub_pkg.docspayTab.payment_currency_code,
           iby_disburse_submit_pub_pkg.docspayTab.payment_amount,
           iby_disburse_submit_pub_pkg.docspayTab.payment_date,
           iby_disburse_submit_pub_pkg.docspayTab.exclusive_payment_flag,
           iby_disburse_submit_pub_pkg.docspayTab.bank_charge_bearer,
           iby_disburse_submit_pub_pkg.docspayTab.delivery_channel_code,
           iby_disburse_submit_pub_pkg.docspayTab.settlement_priority,
           iby_disburse_submit_pub_pkg.docspayTab.remittance_message1,
           iby_disburse_submit_pub_pkg.docspayTab.remittance_message2,
           iby_disburse_submit_pub_pkg.docspayTab.remittance_message3,
           iby_disburse_submit_pub_pkg.docspayTab.unique_remittance_identifier,
           iby_disburse_submit_pub_pkg.docspayTab.uri_check_digit,
           iby_disburse_submit_pub_pkg.docspayTab.payment_reason_code,
           iby_disburse_submit_pub_pkg.docspayTab.payment_reason_comments,
           iby_disburse_submit_pub_pkg.docspayTab.payment_due_date,
           iby_disburse_submit_pub_pkg.docspayTab.discount_date,
           iby_disburse_submit_pub_pkg.docspayTab.payment_curr_discount_taken,
           iby_disburse_submit_pub_pkg.docspayTab.beneficiary_party,
           iby_disburse_submit_pub_pkg.docspayTab.address_source,
           iby_disburse_submit_pub_pkg.docspayTab.employee_address_code,
           iby_disburse_submit_pub_pkg.docspayTab.employee_person_id,
           iby_disburse_submit_pub_pkg.docspayTab.employee_address_id,
           iby_disburse_submit_pub_pkg.docspayTab.employee_payment_flag,
           iby_disburse_submit_pub_pkg.docspayTab.group_by_remittance_message,
           iby_disburse_submit_pub_pkg.docspayTab.group_by_bank_charge_bearer,
           iby_disburse_submit_pub_pkg.docspayTab.group_by_delivery_channel,
           iby_disburse_submit_pub_pkg.docspayTab.group_by_settle_priority_flag,
           iby_disburse_submit_pub_pkg.docspayTab.group_by_payment_details_flag,
           iby_disburse_submit_pub_pkg.docspayTab.payment_details_length_limit,
           iby_disburse_submit_pub_pkg.docspayTab.payment_details_formula,
           iby_disburse_submit_pub_pkg.docspayTab.group_by_max_documents_flag,
           iby_disburse_submit_pub_pkg.docspayTab.max_documents_per_payment,
           iby_disburse_submit_pub_pkg.docspayTab.group_by_unique_remit_id_flag,
           iby_disburse_submit_pub_pkg.docspayTab.group_by_payment_reason,
           iby_disburse_submit_pub_pkg.docspayTab.group_by_due_date_flag,
           iby_disburse_submit_pub_pkg.docspayTab.processing_type,
           iby_disburse_submit_pub_pkg.docspayTab.declaration_option,
           iby_disburse_submit_pub_pkg.docspayTab.dcl_only_foreign_curr_pmt_flag,
           iby_disburse_submit_pub_pkg.docspayTab.declaration_curr_fx_rate_type,
           iby_disburse_submit_pub_pkg.docspayTab.declaration_currency_code,
           iby_disburse_submit_pub_pkg.docspayTab.declaration_threshold_amount,
           iby_disburse_submit_pub_pkg.docspayTab.maximum_payment_amount,
           iby_disburse_submit_pub_pkg.docspayTab.minimum_payment_amount,
           iby_disburse_submit_pub_pkg.docspayTab.allow_zero_payments_flag,
           iby_disburse_submit_pub_pkg.docspayTab.support_bills_payable_flag,
           iby_disburse_submit_pub_pkg.docspayTab.iba_legal_entity_id,
           iby_disburse_submit_pub_pkg.docspayTab.inv_payee_party_id,
           iby_disburse_submit_pub_pkg.docspayTab.inv_party_site_id,
           iby_disburse_submit_pub_pkg.docspayTab.inv_supplier_site_id,
           iby_disburse_submit_pub_pkg.docspayTab.inv_beneficiary_party,
           iby_disburse_submit_pub_pkg.docspayTab.ext_inv_payee_id
        LIMIT G_LINES_PER_FETCH;

     /*
      * Loop through all the fetched documents, grouping them
      * into payments.
      */
        FOR l_trx_line_index IN nvl(iby_disburse_submit_pub_pkg.docspayTab.pay_proc_trxn_type_code.FIRST,0) .. nvl(iby_disburse_submit_pub_pkg.docspayTab.pay_proc_trxn_type_code.LAST,-99)
        LOOP
           l_no_rec_in_ppr := FALSE;

           IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Processed document payable id: '
            || to_char(iby_disburse_submit_pub_pkg.docspayTab.document_payable_id(l_trx_line_index)));
           print_debuginfo(l_module_name, 'Assigning Defaults values dor dont_pay_flag,dont_pay_reason_code, dont_pay_description ');
           END IF;
         iby_disburse_submit_pub_pkg.docspayTab.dont_pay_flag(l_trx_line_index) := 'N';
         iby_disburse_submit_pub_pkg.docspayTab.dont_pay_reason_code(l_trx_line_index) := null;
         iby_disburse_submit_pub_pkg.docspayTab.dont_pay_description(l_trx_line_index) := null;
         iby_disburse_submit_pub_pkg.docspayTab.document_status(l_trx_line_index) := DOC_STATUS_PAY_CREATED;
	 iby_disburse_submit_pub_pkg.docspayTab.created_by(l_trx_line_index)      := fnd_global.user_id;
         iby_disburse_submit_pub_pkg.docspayTab.creation_date(l_trx_line_index)   := sysdate;
         iby_disburse_submit_pub_pkg.docspayTab.last_updated_by(l_trx_line_index) := fnd_global.user_id;
         iby_disburse_submit_pub_pkg.docspayTab.last_update_date(l_trx_line_index)  := sysdate;
         iby_disburse_submit_pub_pkg.docspayTab.last_update_login(l_trx_line_index) := fnd_global.login_id;
         iby_disburse_submit_pub_pkg.docspayTab.object_version_number(l_trx_line_index) := 1;


         /* these two used in raising biz events */
         /* they will not vary within a request */
         l_ca_id                := iby_disburse_submit_pub_pkg.docspayTab.calling_app_id(l_trx_line_index);
         l_ca_payreq_cd         := iby_disburse_submit_pub_pkg.docspayTab.call_app_pay_service_req_code(l_trx_line_index);
         l_delv_chnl_flag       := iby_disburse_submit_pub_pkg.docspayTab.group_by_delivery_channel(l_trx_line_index);
         l_express_pmt_flag     := iby_disburse_submit_pub_pkg.docspayTab.group_by_settle_priority_flag(l_trx_line_index);
         l_bnk_chg_brer_flag    := iby_disburse_submit_pub_pkg.docspayTab.group_by_bank_charge_bearer(l_trx_line_index);
         l_sup_msg_flag         := iby_disburse_submit_pub_pkg.docspayTab.group_by_remittance_message(l_trx_line_index);
         l_pmt_details_flag     := iby_disburse_submit_pub_pkg.docspayTab.group_by_payment_details_flag(l_trx_line_index);
         l_pmt_details_len      := iby_disburse_submit_pub_pkg.docspayTab.payment_details_length_limit(l_trx_line_index);
         l_pmt_det_formula      := iby_disburse_submit_pub_pkg.docspayTab.payment_details_formula(l_trx_line_index);
         l_processing_type      := iby_disburse_submit_pub_pkg.docspayTab.processing_type(l_trx_line_index);

         l_max_docs_flag        := iby_disburse_submit_pub_pkg.docspayTab.group_by_max_documents_flag(l_trx_line_index);
         l_max_docs_limit       := iby_disburse_submit_pub_pkg.docspayTab.max_documents_per_payment(l_trx_line_index);
         l_unique_remit_id_flag := iby_disburse_submit_pub_pkg.docspayTab.group_by_unique_remit_id_flag(l_trx_line_index);
         l_pmt_reason_flag      := iby_disburse_submit_pub_pkg.docspayTab.group_by_payment_reason(l_trx_line_index);
         l_due_date_flag        := iby_disburse_submit_pub_pkg.docspayTab.group_by_due_date_flag(l_trx_line_index);
         l_prom_note_flag       := iby_disburse_submit_pub_pkg.docspayTab.support_bills_payable_flag(l_trx_line_index);

         l_decl_option            := iby_disburse_submit_pub_pkg.docspayTab.declaration_option(l_trx_line_index);
         l_decl_only_fx_flag      := iby_disburse_submit_pub_pkg.docspayTab.dcl_only_foreign_curr_pmt_flag(l_trx_line_index);
         l_decl_curr_fx_rate_type := iby_disburse_submit_pub_pkg.docspayTab.declaration_curr_fx_rate_type(l_trx_line_index);
         l_decl_curr_code         := iby_disburse_submit_pub_pkg.docspayTab.declaration_currency_code(l_trx_line_index);
         l_decl_threshold_amount  := iby_disburse_submit_pub_pkg.docspayTab.declaration_threshold_amount(l_trx_line_index);

         l_commonAttributes.curr_pmt_due_date   := iby_disburse_submit_pub_pkg.docspayTab.payment_due_date(l_trx_line_index);
         l_commonAttributes.curr_delivery_channel   :=  iby_disburse_submit_pub_pkg.docspayTab.delivery_channel_code(l_trx_line_index);
         l_commonAttributes.curr_uri   :=    iby_disburse_submit_pub_pkg.docspayTab.unique_remittance_identifier(l_trx_line_index);
         l_commonAttributes.curr_uri_checkdigits   := iby_disburse_submit_pub_pkg.docspayTab.uri_check_digit(l_trx_line_index);

         /*
          * Store the payment request imposed limits in the output
          * parameter. These will be used for validation on the
          * created payments.
          */
         x_payReqCriteria.max_pmt_amt_limit    :=
                                     iby_disburse_submit_pub_pkg.docspayTab.maximum_payment_amount(l_trx_line_index);
         x_payReqCriteria.min_pmt_amt_limit    :=
                                     iby_disburse_submit_pub_pkg.docspayTab.minimum_payment_amount(l_trx_line_index);
         x_payReqCriteria.allow_zero_pmts_flag :=
                                     iby_disburse_submit_pub_pkg.docspayTab.allow_zero_payments_flag(l_trx_line_index);

         /*
          * Store the central bank reporting related fields in
          * the CBR record.
         l_cbrRec.decl_option            := l_decl_option;
         l_cbrRec.decl_only_fx_flag      := l_decl_only_fx_flag;
         l_cbrRec.decl_curr_fx_rate_type := l_decl_curr_fx_rate_type;
         l_cbrRec.decl_curr_code         := l_decl_curr_code;
         l_cbrRec.decl_threshold_amount  := l_decl_threshold_amount;
          */

         /* these are payee related fields */
         l_bank_inst1_code := iby_disburse_submit_pub_pkg.docspayTab.bank_instruction1_code(l_trx_line_index);
         l_bank_inst2_code := iby_disburse_submit_pub_pkg.docspayTab.bank_instruction2_code(l_trx_line_index);
         l_pmt_txt_msg1    := iby_disburse_submit_pub_pkg.docspayTab.payment_text_message1(l_trx_line_index);
         l_pmt_txt_msg2    := iby_disburse_submit_pub_pkg.docspayTab.payment_text_message2(l_trx_line_index);
         l_pmt_txt_msg3    := iby_disburse_submit_pub_pkg.docspayTab.payment_text_message3(l_trx_line_index);

         /* these are passed onto the hook for adjustment by ext app */
         l_amount_withheld    := iby_disburse_submit_pub_pkg.docspayTab.amount_withheld(l_trx_line_index);

         /* used for maturity date calculation */
         l_discount_date    := iby_disburse_submit_pub_pkg.docspayTab.discount_date(l_trx_line_index);

         l_discount_amount  := iby_disburse_submit_pub_pkg.docspayTab.payment_curr_discount_taken(l_trx_line_index);

         /*
          * Log all the fetched document fields
          *
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name,
             'Fetched document data for document:' || curr_doc_id
             || ', calling app id: '        || curr_ca_id
             || ', calling app doc id1: '   || curr_ca_doc_id1
             || ', calling app doc id2: '   || curr_ca_doc_id2
             || ', calling app doc id3: '   || curr_ca_doc_id3
             || ', calling app doc id4: '   || curr_ca_doc_id4
             || ', calling app doc id5: '   || curr_ca_doc_id5
             || ', calling app trxn type: ' || curr_pp_tt_cd
             || ', payment grp number: '    || curr_pmt_grp_num
             || ', payment method: '        || curr_pmt_method_cd
             || ', internal bank account: ' || curr_int_bank_acct_id
             || ', external bank account: ' || curr_ext_bank_acct_id
             || ', profile: '               || curr_profile_id
             || ', payee: '                 || curr_payee_id
             || ', payee site: '            || curr_payee_site_id
             || ', supplier site: '         || curr_supplier_site_id
             || ', remit loc id: '          || curr_remit_loc_id
             || ', ext payee: '             || curr_ext_payee_id
             || ', org: '                   || curr_org_id
             || ', org type: '              || curr_org_type
             );

         print_debuginfo(l_module_name,
             'Fetched document data for document:' || curr_doc_id
             || ', payment currency: '      || curr_doc_pmt_currency
             || ', payment amount: '        || curr_doc_pmt_amount
             || ', pay alone flag: '        || iby_disburse_submit_pub_pkg.docspayTab.exclusive_payment_flag(l_trx_line_index)
             || ', bank charge bearer: '    || curr_bnk_chg_bearer
             || ', delivery channel: '      || curr_delivery_channel
             || ', supplier message 1: '    || curr_supplier_msg1
             || ', supplier message 2: '    || curr_supplier_msg2
             || ', supplier message 3: '    || curr_supplier_msg3
             || ', uri: '                   || curr_uri
             || ', uri checkdigits: '       || curr_uri_checkdigits
             || ', pmt reason code: '       || curr_pmt_reason_code
             || ', pmt reason comments: '   || curr_pmt_reason_commts
             || ', pmt function: '          || curr_pmt_function
             || ', pmt date: '              || curr_pmt_date
             || ', pmt due date: '          || curr_pmt_due_date
             || ', benef party: '           || curr_benef_party
             );

         print_debuginfo(l_module_name,
             'Fetched document data for document:' || curr_doc_id
             || ', address source: '        || curr_address_source
             || ', emp addr code: '         || curr_emp_add_code
             || ', emp person id: '         || curr_emp_person_id
             || ', emp addr id: '           || curr_emp_addr_id
             || ', emp pmt flag: '          || curr_emp_pmt_flag
             );

         print_debuginfo(l_module_name,
             'Fetched flags for document:'  || curr_doc_id
             || ', pmt details flag: '      || l_pmt_details_flag
             || ', pmt details length: '    || l_pmt_details_len
             || ', pmt details formula: '   || l_pmt_det_formula
             || ', max docs flag: '         || l_max_docs_flag
             || ', max docs limit: '        || l_max_docs_limit
             || ', uri flag: '              || l_unique_remit_id_flag
             || ', pmt reason flag: '       || l_pmt_reason_flag
             || ', express pmt flag: '      || l_express_pmt_flag
             || ', delv channel flag: '     || l_delv_chnl_flag
             || ', pmt due date flag: '     || l_due_date_flag
             || ', prom note flag: '        || l_prom_note_flag
             );

          END IF;
          */

         IF (l_first_record = 'Y') THEN
            prev_doc_id            := iby_disburse_submit_pub_pkg.docspayTab.document_payable_id(l_trx_line_index);
            prev_ca_id             := iby_disburse_submit_pub_pkg.docspayTab.calling_app_id(l_trx_line_index);
            prev_ca_doc_id1        := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref1(l_trx_line_index);
            prev_ca_doc_id2        := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref2(l_trx_line_index);
            prev_ca_doc_id3        := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref3(l_trx_line_index);
            prev_ca_doc_id4        := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref4(l_trx_line_index);
            prev_ca_doc_id5        := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref5(l_trx_line_index);
            prev_pp_tt_cd          := iby_disburse_submit_pub_pkg.docspayTab.pay_proc_trxn_type_code(l_trx_line_index);
            prev_pmt_grp_num       := iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index);
            prev_pmt_method_cd     := iby_disburse_submit_pub_pkg.docspayTab.payment_method_code(l_trx_line_index);
            prev_int_bank_acct_id  := iby_disburse_submit_pub_pkg.docspayTab.internal_bank_account_id(l_trx_line_index);
            prev_ext_bank_acct_id  := iby_disburse_submit_pub_pkg.docspayTab.external_bank_account_id(l_trx_line_index);
            prev_profile_id        := iby_disburse_submit_pub_pkg.docspayTab.payment_profile_id(l_trx_line_index);
            prev_org_id            := iby_disburse_submit_pub_pkg.docspayTab.org_id(l_trx_line_index);
            prev_org_type          := iby_disburse_submit_pub_pkg.docspayTab.org_type(l_trx_line_index);
            prev_payee_id          := iby_disburse_submit_pub_pkg.docspayTab.payee_party_id(l_trx_line_index);
            prev_payee_site_id     := iby_disburse_submit_pub_pkg.docspayTab.party_site_id(l_trx_line_index);
            prev_remit_loc_id      := iby_disburse_submit_pub_pkg.docspayTab.remit_to_location_id(l_trx_line_index);
            prev_ext_payee_id      := iby_disburse_submit_pub_pkg.docspayTab.ext_payee_id(l_trx_line_index);
            prev_doc_pmt_currency  := iby_disburse_submit_pub_pkg.docspayTab.payment_currency_code(l_trx_line_index);
            prev_doc_pmt_amount    := iby_disburse_submit_pub_pkg.docspayTab.payment_amount(l_trx_line_index);
            prev_pay_alone_flag    := iby_disburse_submit_pub_pkg.docspayTab.exclusive_payment_flag(l_trx_line_index);
            prev_bnk_chg_bearer    := iby_disburse_submit_pub_pkg.docspayTab.bank_charge_bearer(l_trx_line_index);
            prev_delivery_channel  := iby_disburse_submit_pub_pkg.docspayTab.delivery_channel_code(l_trx_line_index);
            prev_settle_priority   := iby_disburse_submit_pub_pkg.docspayTab.settlement_priority(l_trx_line_index);
            prev_supplier_msg1     := iby_disburse_submit_pub_pkg.docspayTab.remittance_message1(l_trx_line_index);
            prev_supplier_msg2     := iby_disburse_submit_pub_pkg.docspayTab.remittance_message2(l_trx_line_index);
            prev_supplier_msg3     := iby_disburse_submit_pub_pkg.docspayTab.remittance_message3(l_trx_line_index);
            prev_uri               := iby_disburse_submit_pub_pkg.docspayTab.unique_remittance_identifier(l_trx_line_index);
            prev_uri_checkdigits   := iby_disburse_submit_pub_pkg.docspayTab.uri_check_digit(l_trx_line_index);
            prev_pmt_reason_code   := iby_disburse_submit_pub_pkg.docspayTab.payment_reason_code(l_trx_line_index);
            prev_pmt_reason_commts := iby_disburse_submit_pub_pkg.docspayTab.payment_reason_comments(l_trx_line_index);
            prev_pmt_function      := iby_disburse_submit_pub_pkg.docspayTab.payment_function(l_trx_line_index);
            prev_pmt_date          := iby_disburse_submit_pub_pkg.docspayTab.payment_date(l_trx_line_index);
            prev_pmt_due_date      := iby_disburse_submit_pub_pkg.docspayTab.payment_due_date(l_trx_line_index);
            prev_benef_party       := iby_disburse_submit_pub_pkg.docspayTab.beneficiary_party(l_trx_line_index);
            prev_address_source    := iby_disburse_submit_pub_pkg.docspayTab.address_source(l_trx_line_index);
            prev_emp_add_code      := iby_disburse_submit_pub_pkg.docspayTab.employee_address_code(l_trx_line_index);
            prev_emp_person_id     := iby_disburse_submit_pub_pkg.docspayTab.employee_person_id(l_trx_line_index);
            prev_emp_addr_id       := iby_disburse_submit_pub_pkg.docspayTab.employee_address_id(l_trx_line_index);
            prev_emp_pmt_flag      := iby_disburse_submit_pub_pkg.docspayTab.employee_payment_flag(l_trx_line_index);
 prev_inv_payee_party_id      := iby_disburse_submit_pub_pkg.docspayTab.inv_payee_party_id(l_trx_line_index);
 prev_inv_party_site_id      := iby_disburse_submit_pub_pkg.docspayTab.inv_party_site_id(l_trx_line_index);
 prev_inv_supplier_site_id      := iby_disburse_submit_pub_pkg.docspayTab.inv_supplier_site_id(l_trx_line_index);
 prev_inv_beneficiary_party      := iby_disburse_submit_pub_pkg.docspayTab.inv_beneficiary_party(l_trx_line_index);
 prev_ext_inv_payee_id      := iby_disburse_submit_pub_pkg.docspayTab.ext_inv_payee_id(l_trx_line_index);

           /* code to replace sweepCommonPmtAttributes() code */

           l_commonAttributes.prev_pmt_due_date   := iby_disburse_submit_pub_pkg.docspayTab.payment_due_date(l_trx_line_index);
           l_commonAttributes.prev_delivery_channel   :=  iby_disburse_submit_pub_pkg.docspayTab.delivery_channel_code(l_trx_line_index);
           l_commonAttributes.prev_uri   :=    iby_disburse_submit_pub_pkg.docspayTab.unique_remittance_identifier(l_trx_line_index);
           l_commonAttributes.prev_uri_checkdigits   := iby_disburse_submit_pub_pkg.docspayTab.uri_check_digit(l_trx_line_index);
         END IF;

         /*
          * We have just fetched a new document for this payment request.
          * We will either insert this document into a new payment or
          * we will be inserting this document into the currently running
          * payment.
          *
          * In either case, we need to insert this doc into a payment.
          * So pre-populate the payment record with attributes of
          * this document. This is because the payment takes on the
          * attributes of it's constituent documents.
          *
          * Note: For user defined grouping rules, we will
          * have to populate the payment attribute only if
          * the user has turned on grouping by that attribute.
          */

         /* Only pre-fill hardcoded grouping rule attributes */
         l_paymentRec.payment_profile_id       := iby_disburse_submit_pub_pkg.docspayTab.payment_profile_id(l_trx_line_index);
         l_paymentRec.payment_service_request_id
                                               := p_payment_request_id;
         l_paymentRec.internal_bank_account_id := iby_disburse_submit_pub_pkg.docspayTab.internal_bank_account_id(l_trx_line_index);
         l_paymentRec.ext_payee_id             := iby_disburse_submit_pub_pkg.docspayTab.ext_payee_id(l_trx_line_index);
         l_paymentRec.payee_party_id           := iby_disburse_submit_pub_pkg.docspayTab.payee_party_id(l_trx_line_index);
         l_paymentRec.party_site_id            := iby_disburse_submit_pub_pkg.docspayTab.party_site_id(l_trx_line_index);
         l_paymentRec.supplier_site_id         := iby_disburse_submit_pub_pkg.docspayTab.supplier_site_id(l_trx_line_index);

	 l_paymentRec.ext_inv_payee_id             := iby_disburse_submit_pub_pkg.docspayTab.ext_inv_payee_id(l_trx_line_index);
         l_paymentRec.inv_payee_party_id           := iby_disburse_submit_pub_pkg.docspayTab.inv_payee_party_id(l_trx_line_index);
         l_paymentRec.inv_party_site_id            := iby_disburse_submit_pub_pkg.docspayTab.inv_party_site_id(l_trx_line_index);
         l_paymentRec.inv_supplier_site_id         := iby_disburse_submit_pub_pkg.docspayTab.inv_supplier_site_id(l_trx_line_index);
         l_paymentRec.inv_beneficiary_party         := iby_disburse_submit_pub_pkg.docspayTab.inv_beneficiary_party(l_trx_line_index);

         l_paymentRec.remit_to_location_id     := iby_disburse_submit_pub_pkg.docspayTab.remit_to_location_id(l_trx_line_index);
         l_paymentRec.payment_currency_code    := iby_disburse_submit_pub_pkg.docspayTab.payment_currency_code(l_trx_line_index);
         l_paymentRec.org_id                   := iby_disburse_submit_pub_pkg.docspayTab.org_id(l_trx_line_index);
         l_paymentRec.org_type                 := iby_disburse_submit_pub_pkg.docspayTab.org_type(l_trx_line_index);
         l_paymentRec.payment_method_code      := iby_disburse_submit_pub_pkg.docspayTab.payment_method_code(l_trx_line_index);
         l_paymentRec.payment_function         := iby_disburse_submit_pub_pkg.docspayTab.payment_function(l_trx_line_index);
         l_paymentRec.payment_date             := iby_disburse_submit_pub_pkg.docspayTab.payment_date(l_trx_line_index);
         l_paymentRec.beneficiary_party        := iby_disburse_submit_pub_pkg.docspayTab.beneficiary_party(l_trx_line_index);
         l_paymentRec.address_source           := iby_disburse_submit_pub_pkg.docspayTab.address_source(l_trx_line_index);
         l_paymentRec.employee_address_code    := iby_disburse_submit_pub_pkg.docspayTab.employee_address_code(l_trx_line_index);
         l_paymentRec.employee_person_id       := iby_disburse_submit_pub_pkg.docspayTab.employee_person_id(l_trx_line_index);
         l_paymentRec.employee_address_id      := iby_disburse_submit_pub_pkg.docspayTab.employee_address_id(l_trx_line_index);
         l_paymentRec.employee_payment_flag    := iby_disburse_submit_pub_pkg.docspayTab.employee_payment_flag(l_trx_line_index);
         l_paymentRec.legal_entity_id          := iby_disburse_submit_pub_pkg.docspayTab.iba_legal_entity_id(l_trx_line_index);

         /*
          * Fix for bug 5524116:
          *
          * Group by external bank account needs to be made a
          * hardcoded grouping rule regardless of processing type.
          *
          * This is because is some obscure formats e.g., Italy Wire
          * payments, the payment is actually sent to the bank as
          * a printed payment letter even though the payment method
          * is wire.
          */
         l_paymentRec.external_bank_account_id := iby_disburse_submit_pub_pkg.docspayTab.external_bank_account_id(l_trx_line_index);

         /*
          * Fix for bug 5334177:
          *
          * Setting the bills payable flag on the payment is not
          * related to user-defined grouping rules.
          *
          * Set this flag here along with other hardcoded
          * grouping rules.
          */

         /*
          * Set the promissory note flag for this payment
          * if the payment method of this payment supports
          * promissory notes.
          *
          * The promissory note flag indicates that this
          * payment is (possibly) a future dated payment.
          */
         IF (l_prom_note_flag = 'Y') THEN

             l_paymentRec.bill_payable_flag := 'Y';

         ELSE

             /*
              * Fix for bug 5442899
              *
              * Explicitly set bill payable flag to 'N'
              * in case payment method does not
              * support bills payable.
              */
             l_paymentRec.bill_payable_flag := 'N';

         END IF;

         /*
          * If a document has the payment grouping number attribute
          * set, then it is a part of a pre-grouped payment (document
          * grouped into payment at the calling app itself).
          *
          * Grouping by payment grouping number is a hardcoded grouping
          * rule below. Therefore, it is guaranteed that a payment will
          * only contain documents with the same payment grouping number.
          *
          * For, such payments set the 'pregrouped payment flag' to 'Y'.
          */
         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NOT NULL) THEN

             l_paymentRec.pregrouped_payment_flag := 'Y';

         ELSE

             /*
              * Fix for bug 5529924:
              *
              * Explicitly set the pregrouped payment flag to 'N'
              * in case the grouping number on the document
              * is null.
              */
             l_paymentRec.pregrouped_payment_flag := 'N';

         END IF;

         /* payee related fields */
         /* grouping by payee context is a hardcoded grouping rule */
         l_paymentRec.bank_instruction1_code   := l_bank_inst1_code;
         l_paymentRec.bank_instruction2_code   := l_bank_inst2_code;
         l_paymentRec.payment_text_message1    := l_pmt_txt_msg1;
         l_paymentRec.payment_text_message2    := l_pmt_txt_msg2;
         l_paymentRec.payment_text_message3    := l_pmt_txt_msg3;

         /*
          * Pre-fill grouping rule attributes for user defined
          * grouping rules (that are enabled by the user).
          *
          * It is necessary to pre-fill user defined grouping
          * attributes before the grouping rules are triggered
          * because we don't know which user defined grouping rules
          * are going to get triggered first, and once a rule is
          * triggered all rules below it are skipped. So it is too
          * late to populate grouping attributes within the grouping
          * rule itself.
          */

         /*
          * We pre-fill the user-defined attributes only when the
          * 'payment grouping number' attribute is null. This is
          * because the user-defined grouping rules are never triggered
          * if the 'payment grouping number' attribute is not null.
          */

         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NULL) THEN

             /*-----------------------------------------------------
             IF (l_payee_add_eft_flag = 'Y') THEN
                 IF (l_processing_type = 'ELECTRONIC') THEN

                     --
                     -- RAMESH:
                     -- Temporarily commented out. Current data model
                     -- does not support grouping by payee party id and payee
                     -- party site as separate grouping rules because of
                     -- calling app constraints.
                     --
                     -- At the moment, the grouping is at the level of
                     -- payee context which includes (payee party id, payee
                     -- party site id, supplier site id, org id, org type)
                     -- etc.
                     --
                     -- In the future when more fine grained grouping
                     -- can be supported, uncomment this code.
                     --

                     --l_paymentRec.payee_party_site_id := iby_disburse_submit_pub_pkg.docspayTab.party_site_id(l_trx_line_index);
                     --l_paymentRec.payee_id := iby_disburse_submit_pub_pkg.docspayTab.payee_party_id(l_trx_line_index);

                 END IF;
             END IF;
             -----------------------------------------------------*/

             IF (l_bnk_chg_brer_flag = 'Y') THEN
                 l_paymentRec.bank_charge_bearer := iby_disburse_submit_pub_pkg.docspayTab.bank_charge_bearer(l_trx_line_index);
             END IF;

             IF (l_delv_chnl_flag = 'Y') THEN
                 l_paymentRec.delivery_channel_code := iby_disburse_submit_pub_pkg.docspayTab.delivery_channel_code(l_trx_line_index);
             END IF;

             IF (l_express_pmt_flag = 'Y') THEN
                 l_paymentRec.settlement_priority := iby_disburse_submit_pub_pkg.docspayTab.settlement_priority(l_trx_line_index);
             END IF;

             IF (l_sup_msg_flag = 'Y') THEN

                 /*
                  * Fix for bug 5534537:
                  *
                  * Assign correct remittance messages to the
                  * payment.
                  */
                 l_paymentRec.remittance_message1 := iby_disburse_submit_pub_pkg.docspayTab.remittance_message1(l_trx_line_index);
                 l_paymentRec.remittance_message2 := iby_disburse_submit_pub_pkg.docspayTab.remittance_message2(l_trx_line_index);
                 l_paymentRec.remittance_message3 := iby_disburse_submit_pub_pkg.docspayTab.remittance_message3(l_trx_line_index);

             END IF;

             IF (l_unique_remit_id_flag = 'Y') THEN
                 l_paymentRec.unique_remittance_identifier := iby_disburse_submit_pub_pkg.docspayTab.unique_remittance_identifier(l_trx_line_index);
                 l_paymentRec.uri_check_digit := iby_disburse_submit_pub_pkg.docspayTab.uri_check_digit(l_trx_line_index);
             END IF;

             IF (l_due_date_flag = 'Y') THEN
                 l_paymentRec.payment_due_date := iby_disburse_submit_pub_pkg.docspayTab.payment_due_date(l_trx_line_index);
             END IF;

             IF (l_pmt_reason_flag = 'Y') THEN
                 l_paymentRec.payment_reason_code     := iby_disburse_submit_pub_pkg.docspayTab.payment_reason_code(l_trx_line_index);
                 l_paymentRec.payment_reason_comments := iby_disburse_submit_pub_pkg.docspayTab.payment_reason_comments(l_trx_line_index);
             END IF;

         END IF; -- if payment_grouping_number(l_trx_line_index) IS NULL

         print_debuginfo(l_module_name, 'Value of inv_payee_party_id in ibydocsoaytab'
                 || 'is '
                 || iby_disburse_submit_pub_pkg.docspayTab.inv_payee_party_id(l_trx_line_index)
                 );

         print_debuginfo(l_module_name, 'Value of inv_payee_party_id in record group'
                 || 'is '
                 || l_paymentRec.inv_payee_party_id
                 );

         /*
          * Pre-fill the document record with the details
          * of the current document.
          */
         l_docsInPmtRec.document_id         := iby_disburse_submit_pub_pkg.docspayTab.document_payable_id(l_trx_line_index);
         l_docsInPmtRec.document_amount     := iby_disburse_submit_pub_pkg.docspayTab.payment_amount(l_trx_line_index);
         l_docsInPmtRec.document_currency   := iby_disburse_submit_pub_pkg.docspayTab.payment_currency_code(l_trx_line_index);
         l_docsInPmtRec.payment_grp_num     := iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index);
         l_docsInPmtRec.calling_app_id      := iby_disburse_submit_pub_pkg.docspayTab.calling_app_id(l_trx_line_index);
         l_docsInPmtRec.calling_app_doc_id1 := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref1(l_trx_line_index);
         l_docsInPmtRec.calling_app_doc_id2 := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref2(l_trx_line_index);
         l_docsInPmtRec.calling_app_doc_id3 := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref3(l_trx_line_index);
         l_docsInPmtRec.calling_app_doc_id4 := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref4(l_trx_line_index);
         l_docsInPmtRec.calling_app_doc_id5 := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref5(l_trx_line_index);
         l_docsInPmtRec.pay_proc_ttype_cd   := iby_disburse_submit_pub_pkg.docspayTab.pay_proc_trxn_type_code(l_trx_line_index);

         /* these to are passed onto the hook for adjustment by ext app */
         l_docsInPmtRec.amount_withheld     := l_amount_withheld;

         /* used for maturity date calculation */
         l_docsInPmtRec.discount_date       := l_discount_date;
         l_docsInPmtRec.pmt_due_date        := iby_disburse_submit_pub_pkg.docspayTab.payment_due_date(l_trx_line_index);

         /* used in common attribute sweep */
         l_docsInPmtRec.delivery_channel    := iby_disburse_submit_pub_pkg.docspayTab.delivery_channel_code(l_trx_line_index);
         l_docsInPmtRec.unique_remit_id     := iby_disburse_submit_pub_pkg.docspayTab.unique_remittance_identifier(l_trx_line_index);
         l_docsInPmtRec.uri_ckdigits        := iby_disburse_submit_pub_pkg.docspayTab.uri_check_digit(l_trx_line_index);

         l_docsInPmtRec.int_bank_acct_id    := iby_disburse_submit_pub_pkg.docspayTab.internal_bank_account_id(l_trx_line_index);
         l_docsInPmtRec.ext_payee_id        := iby_disburse_submit_pub_pkg.docspayTab.ext_payee_id(l_trx_line_index);
         l_docsInPmtRec.payee_id            := iby_disburse_submit_pub_pkg.docspayTab.payee_party_id(l_trx_line_index);
         l_docsInPmtRec.payee_site_id       := iby_disburse_submit_pub_pkg.docspayTab.party_site_id(l_trx_line_index);
         l_docsInPmtRec.supplier_site_id    := iby_disburse_submit_pub_pkg.docspayTab.party_site_id(l_trx_line_index);

         l_docsInPmtRec.ext_inv_payee_id        := iby_disburse_submit_pub_pkg.docspayTab.ext_inv_payee_id(l_trx_line_index);
         l_docsInPmtRec.inv_payee_party_id            := iby_disburse_submit_pub_pkg.docspayTab.inv_payee_party_id(l_trx_line_index);
         l_docsInPmtRec.inv_party_site_id       := iby_disburse_submit_pub_pkg.docspayTab.inv_party_site_id(l_trx_line_index);
         l_docsInPmtRec.inv_supplier_site_id    := iby_disburse_submit_pub_pkg.docspayTab.inv_supplier_site_id(l_trx_line_index);

	 l_docsInPmtRec.org_id              := iby_disburse_submit_pub_pkg.docspayTab.org_id(l_trx_line_index);
         l_docsInPmtRec.org_type            := iby_disburse_submit_pub_pkg.docspayTab.org_type(l_trx_line_index);
         l_docsInPmtRec.ext_bank_acct_id    := iby_disburse_submit_pub_pkg.docspayTab.external_bank_account_id(l_trx_line_index);
         l_docsInPmtRec.pmt_curr_discount   := l_discount_amount;

         /*
          * Calculate payment details from the document based on
          * the user defined formula. This will be used in a
          * user-defined grouping rule below.
          */
         IF (l_pmt_details_flag = 'Y') THEN
             l_calc_doc_detail := getDocDetails(iby_disburse_submit_pub_pkg.docspayTab.document_payable_id(l_trx_line_index),
                                      l_pmt_det_formula);

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Calculated doc detail for '
                 || 'doc id '
                 || curr_doc_id
                 || ': '
                 || l_calc_doc_detail
                 );

	     END IF;

         ELSE
             l_calc_doc_detail := null;
         END IF;

         /*
          * The length of the payment details field in IBY_PAYMENTS_ALL
          * table is 240 chars. This imposes a hard limit for the
          * length of payment details that can be stored against a
          * payment.
          *
          * If the user has specified a field length (for payment
          * details) greater than the column width, reset the field
          * length to the column limit.
          */
         IF (l_pmt_details_flag = 'Y') THEN
             IF (l_pmt_details_len > 240) THEN

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'User specified payment '
                     || 'details field length = '
                     || l_pmt_details_len
                     || '. This is greater than the max column length '
                     || '(currently 240 chars). Payment details will be '
                     || 'filled to the maximum column length.'
                     );
		 END IF;
                 l_pmt_details_len := 240;

             /*
              * If user has not specified any value at all,
              * default the payment details field length.
              */
             ELSIF (l_pmt_details_len = -1) THEN

                 /*
                  * Fix for bug 5362662:
                  *
                  * If user has not specified a length for the payment
                  * details field, but has turned on grouping by
                  * payment details, then limit the payment details
                  * field to the max allowed column length.
                  */
                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'User specified payment '
                     || 'details field length is null. '
                     || 'Payment details will be filled to the maximum '
                     || 'column length (currently 240 chars).'
                     );
                 END IF;

                 l_pmt_details_len := 240;

             END IF;
         END IF;

         /*-- HARDCODED GROUPING RULES START HERE --*/

         /*
          * Grouping Step 1: Pay Alone Flag (these are exclusive
          * payments where one document is paid by one payment).
          */
          IF (UPPER(iby_disburse_submit_pub_pkg.docspayTab.exclusive_payment_flag(l_trx_line_index)) = 'Y') THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Grouping by pay alone flag '
                 || 'triggered for document '
                 || curr_doc_id);
             END IF;
             insertDocIntoPayment(l_paymentRec,-- x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 2: Organization ID And Organization Type
          */
         IF (prev_org_id <> iby_disburse_submit_pub_pkg.docspayTab.org_id(l_trx_line_index))     OR
            (NVL(prev_org_type, 0) <> NVL(iby_disburse_submit_pub_pkg.docspayTab.org_type(l_trx_line_index), 0)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by organization '
                 || 'id/type triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

             GOTO label_finish_iteration;

         END IF;

	 /*
          * Grouping Step 2.5: Group By Inv Payee Context (external inv payee id)
          */
         IF (prev_ext_inv_payee_id <> iby_disburse_submit_pub_pkg.docspayTab.ext_inv_payee_id(l_trx_line_index)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by payee context '
                 || 'triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 3: Group By Payee Context (external payee id)
          */
         IF (prev_ext_payee_id <> iby_disburse_submit_pub_pkg.docspayTab.ext_payee_id(l_trx_line_index)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by payee context '
                 || 'triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 4: Payment Currency
          */
         IF (prev_doc_pmt_currency <> iby_disburse_submit_pub_pkg.docspayTab.payment_currency_code(l_trx_line_index)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by payment '
                 || 'currency triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 5: Payment Method
          */
         IF (prev_pmt_method_cd <> iby_disburse_submit_pub_pkg.docspayTab.payment_method_code(l_trx_line_index)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Grouping by payment '
                 || 'method triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 6: Payment Profile ID
          */
         IF (prev_profile_id <> iby_disburse_submit_pub_pkg.docspayTab.payment_profile_id(l_trx_line_index)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by payment '
                 || 'profile triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

             GOTO label_finish_iteration;

         END IF;

         /*
          * NOTE:
          * Grouping by payment grouping number is a special type
          * of hardcoded grouping rule. All documents payable that
          * have the same payment grouping number must always be
          * grouped into the same payment.
          *
          * In order to achive this, two things have to happen:
          * a. None of the hardcoded grouping rules should
          *    be triggered when a document payable has a non-null
          *    value for payment grouping number.
          *
          * b. None of the user defined grouping rules must be applied
          *    for a document payable with a non-null value for
          *    payment grouping number.
          *
          * It is guaranteed by the calling application that all
          * documents that have a non-null value for the payment
          * grouping number will have the same values for all the
          * hardcoded grouping attributes. This will satisfy (a).
          *
          * The grouping logic below will not apply any user-defined
          * grouping rules if a document payable has a non-null value
          * for the payment grouping number. This will satisfy (b).
          */

         /*
          * Grouping Step 7: Payment Grouping Number
          */
         IF (NVL(prev_pmt_grp_num, 0) <> NVL(iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index), 0)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by payment '
                 || 'grouping number triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 8: Internal Bank Account ID
          */
         IF (prev_int_bank_acct_id <> iby_disburse_submit_pub_pkg.docspayTab.internal_bank_account_id(l_trx_line_index)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Grouping by internal bank '
                 || 'account triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 9: External Bank Account ID
          *
          * Fix for bug 5524116:
          *
          * Grouping by ext bank account now made a hardcoded
          * grouping rule regardless of processing type.
          */
         IF (NVL(prev_ext_bank_acct_id, 0) <>
             NVL(iby_disburse_submit_pub_pkg.docspayTab.external_bank_account_id(l_trx_line_index), 0)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by external '
                 || 'bank account triggered for document '
                 || curr_doc_id);

     END IF;
             l_paymentRec.external_bank_account_id := iby_disburse_submit_pub_pkg.docspayTab.external_bank_account_id(l_trx_line_index);

             insertDocIntoPayment(l_paymentRec,
	        --x_paymentTab,
                 l_calc_doc_detail,
		 true,
		 l_payment_id,
		 l_docs_in_pmt_count,
		 l_commonAttributes,
		 l_trx_line_index);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 10: Group By Payee Address (check only)
          *
          * One payee site can only have one address. Therefore, it is
          * sufficient to group by payee sites in order to group by
          * payee addresses.
          */

         /*-----------------------------------------------------
         IF (l_processing_type = 'PRINTED') THEN
             IF (prev_payee_site_id <> iby_disburse_submit_pub_pkg.docspayTab.party_site_id(l_trx_line_index)) THEN

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by payee '
                     || 'address (check) triggered for document '
                     || curr_doc_id);
		 END IF;
                 --
                 -- RAMESH:
                 -- Temporarily commented out. Current data model
                 -- does not support grouping by payee party id and payee
                 -- party site as separate grouping rules because of
                 -- calling app constraints.
                 --
                 -- At the moment, the grouping is at the level of
                 -- payee context which includes (payee party id, payee
                 -- party site id, supplier site id, org id, org type)
                 -- etc.
                 --
                 -- In the future when more fine grained grouping
                 -- can be supported, uncomment this code.
                 --

                 --l_paymentRec.payee_party_site_id := iby_disburse_submit_pub_pkg.docspayTab.party_site_id(l_trx_line_index);

                 insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                     l_calc_doc_detail, true, l_payment_id,
                     x_docsInPmtTab, l_docsInPmtRec,
                      l_docs_in_pmt_count,l_commonAttributes);

                 GOTO label_finish_iteration;
             END IF;
         END IF;
         -----------------------------------------------------*/

         /*
          * Grouping Step 11: Payment Function
          */
         IF (prev_pmt_function <> iby_disburse_submit_pub_pkg.docspayTab.payment_function(l_trx_line_index)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Grouping by payment '
                 || 'function triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 12: Payment Date
          */
         IF (prev_pmt_date <> iby_disburse_submit_pub_pkg.docspayTab.payment_date(l_trx_line_index)) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Grouping by payment '
                 || 'date triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 13: Remit To Location Id
          */
         IF (NVL(prev_remit_loc_id, '0') <> NVL(iby_disburse_submit_pub_pkg.docspayTab.remit_to_location_id(l_trx_line_index), '0')) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by remit to '
                 || 'location id triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 14: Beneficiary Party
          */
         IF (NVL(prev_benef_party, '0') <> NVL(iby_disburse_submit_pub_pkg.docspayTab.beneficiary_party(l_trx_line_index), '0')) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by beneficiary '
                 || 'party triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 15: Group By Space Left On Stub (check only)
          *
          * This will be handled in the payment creation flow (F8) because
          * the check related details are picked up in that flow.
          */

         /*
          * Grouping Step 16: Payee Address (Employee Address)
          *
          * TECHNICALLY REQUIRED, FUNCTIONALLY NOT REQUIRED -
          * Grouping by payee address is really not necessary because
          * we do grouping by payee context (which implicitly groups
          * by payee address as well assuming a 1:1 relationship between
          * a payee and his address).
          *
          * The reason we have this grouping rule here is to populate
          * these columns on the payment. These columns are used by
          * the extract / format.
          */
         IF (NVL(prev_address_source, '0') <> NVL(iby_disburse_submit_pub_pkg.docspayTab.address_source(l_trx_line_index), '0') OR
             NVL(prev_emp_add_code,   '0') <> NVL(iby_disburse_submit_pub_pkg.docspayTab.employee_address_code(l_trx_line_index),   '0') OR
             NVL(prev_emp_person_id,  '0') <> NVL(iby_disburse_submit_pub_pkg.docspayTab.employee_person_id(l_trx_line_index),  '0') OR
             NVL(prev_emp_addr_id,    '0') <> NVL(iby_disburse_submit_pub_pkg.docspayTab.employee_address_id(l_trx_line_index),    '0'))
             THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Grouping by payee (employee) '
                 || 'address triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

             GOTO label_finish_iteration;

         END IF;

         /*
          * Grouping Step 17: Employee Payment Flag
          *
          * TECHINICALLY REQUIRED, FUNCTIONALLY NOT REQUIRED -
          * The reason we have this grouping rule here is to populate
          * the employee payment flag on the payment.
          */
         IF (NVL(prev_emp_pmt_flag, '0') <> NVL(iby_disburse_submit_pub_pkg.docspayTab.employee_payment_flag(l_trx_line_index), '0'))
             THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Grouping by employee '
                 || 'payment flag triggered for document '
                 || curr_doc_id);

     END IF;

             insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                 l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

             GOTO label_finish_iteration;

         END IF;

         /*-- USER DEFINED GROUPING RULES START HERE --*/

         /*
          * NOTE:
          * None of the user defined grouping rules should be
          * applied to a document if it has a payment grouping
          * number attribute set.
          *
          * This is because all documents with the same payment
          * grouping number must always be grouped into the
          * same payment.
          */

         /*
          * Grouping Step 18: Payee Address (electronic)
          *
          * These are payments where the payment between
          * Oracle Payments and the bank is done electronically,
          * but the delivery channel from the bank to the
          * payee is by check.
          */

         /*-----------------------------------------
         IF (l_payee_add_eft_flag = 'Y') THEN
             IF (l_processing_type = 'ELECTRONIC') THEN

                 IF (NVL(prev_payee_site_id, 0) <> NVL(iby_disburse_submit_pub_pkg.docspayTab.party_site_id(l_trx_line_index), 0))
                     THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'Grouping by payee '
                         || 'address (electronic) triggered for document '
                         || curr_doc_id);

     END IF;

                     --
                     -- RAMESH:
                     -- Temporarily commented out. Current data model
                     -- does not support grouping by payee party id and payee
                     -- party site as separate grouping rules because of
                     -- calling app constraints.
                     --
                     -- At the moment, the grouping is at the level of
                     -- payee context which includes (payee party id, payee
                     -- party site id, supplier site id, org id, org type)
                     -- etc.
                     --
                     -- In the future when more fine grained grouping
                     -- can be supported, uncomment this code.
                     --

                     insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                         l_calc_doc_detail, true, l_payment_id,
                         x_docsInPmtTab, l_docsInPmtRec,
                          l_docs_in_pmt_count,l_commonAttributes);

                     GOTO label_finish_iteration;
                 END IF;
             END IF;
         END IF;
         -------------------------------------------*/

         /*
          * Grouping Step 19: Bank Charge Bearer
          */
         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NULL) THEN

             IF (l_bnk_chg_brer_flag = 'Y') THEN

                 IF (NVL(prev_bnk_chg_bearer, 0) <>
                     NVL(iby_disburse_submit_pub_pkg.docspayTab.bank_charge_bearer(l_trx_line_index), 0)) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'Grouping by bank '
                         || 'charge bearer triggered for document '
                         || curr_doc_id);

     END IF;

                     insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                         l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

                     GOTO label_finish_iteration;

                 END IF;

             END IF;

         END IF;

         /*
          * Grouping Step 20: Delivery Channel
          */
         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NULL) THEN

             IF (l_delv_chnl_flag = 'Y') THEN

                 IF (NVL(prev_delivery_channel, 0) <>
                     NVL(iby_disburse_submit_pub_pkg.docspayTab.delivery_channel_code(l_trx_line_index), 0)) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Grouping by '
                         || 'delivery channel triggered for document '
                         || curr_doc_id);

     END IF;

                     insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                         l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

                     GOTO label_finish_iteration;

                 END IF;

             END IF;

         END IF;

         /*
          * Grouping Step 21: Express Payment
          */
         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NULL) THEN

             IF (l_express_pmt_flag = 'Y') THEN

                 IF (NVL(prev_settle_priority, 0) <>
                     NVL(iby_disburse_submit_pub_pkg.docspayTab.settlement_priority(l_trx_line_index), 0)) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'Grouping by '
                         || 'express payment triggered for document '
                         || curr_doc_id);

     END IF;

                     insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                         l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

                     GOTO label_finish_iteration;

                 END IF;

             END IF;

         END IF;

         /*
          * Grouping Step 22: Supplier Message
          */
         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NULL) THEN

             IF (l_sup_msg_flag = 'Y') THEN

                 IF (NVL(prev_supplier_msg1, 0) <>
                         NVL(iby_disburse_submit_pub_pkg.docspayTab.remittance_message1(l_trx_line_index), 0) OR
                     NVL(prev_supplier_msg2, 0) <>
                         NVL(iby_disburse_submit_pub_pkg.docspayTab.remittance_message2(l_trx_line_index), 0) OR
                     NVL(prev_supplier_msg3, 0) <>
                         NVL(iby_disburse_submit_pub_pkg.docspayTab.remittance_message3(l_trx_line_index), 0)) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'Grouping by '
                         || 'supplier message triggered for document '
                         || curr_doc_id);

     END IF;

                     insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                         l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

                     GOTO label_finish_iteration;

                 END IF;

             END IF;

         END IF;

         /*
          * Grouping Step 23: Unique Remittance Identifier
          *
          * Note: It is sufficient to check if the unique remittance
          * identifiers (uri's) are different between two documents.
          * No need to check if the uri checkdigits are different.
          * Grouping is on the basis of uri's only.
          */
         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NULL) THEN

             IF (l_unique_remit_id_flag = 'Y') THEN

                 IF (NVL(prev_uri, 0) <> NVL(iby_disburse_submit_pub_pkg.docspayTab.unique_remittance_identifier(l_trx_line_index), 0) OR
                     NVL(prev_uri_checkdigits, 0) <>
                         NVL(iby_disburse_submit_pub_pkg.docspayTab.uri_check_digit(l_trx_line_index), 0)) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Grouping by '
                         || 'unique remit id triggered for document '
                         || curr_doc_id);

     END IF;

                     insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                         l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

                     GOTO label_finish_iteration;

                 END IF;

             END IF;

         END IF;

         /*
          * Grouping Step 24: Payment Reason Code / Payment Reason Comments
          */
         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NULL) THEN

             IF (l_pmt_reason_flag = 'Y') THEN

                 IF (NVL(prev_pmt_reason_code, 0)   <>
                         NVL(iby_disburse_submit_pub_pkg.docspayTab.payment_reason_code(l_trx_line_index), 0)  OR
                     NVL(prev_pmt_reason_commts, 0) <>
                         NVL(iby_disburse_submit_pub_pkg.docspayTab.payment_reason_comments(l_trx_line_index), 0)) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Grouping by '
                         || 'payment reason code / comments triggered '
                         || 'for document '
                         || curr_doc_id);

     END IF;

                     insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                         l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

                     GOTO label_finish_iteration;

                 END IF;

             END IF;

         END IF;

         /*
          * Grouping Step 25: Payment Due Date
          */
         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NULL) THEN

             IF (l_due_date_flag = 'Y') THEN

                 IF (NVL(prev_pmt_due_date, l_impossible_date) <>
                     NVL(iby_disburse_submit_pub_pkg.docspayTab.payment_due_date(l_trx_line_index), l_impossible_date)) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Grouping by '
                         || 'payment due date triggered for document '
                         || curr_doc_id);

     END IF;

                     insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                         l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

                     GOTO label_finish_iteration;

                 END IF;

             END IF;

         END IF;

         /*
          * Grouping Step 26: Max Documents Per Payment
          */
         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NULL) THEN

             IF (l_max_docs_flag = 'Y') THEN

                 IF (l_docs_in_pmt_count = l_max_docs_limit) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'Grouping by '
                         || 'max docs per payment triggered for document '
                         || curr_doc_id);

     END IF;

                     insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                         l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

                     GOTO label_finish_iteration;

                 END IF;

             END IF;

         END IF;

         /*
          * Grouping Step 27: Break Payments According To Payment Details
          *                   Field Length
          */
         IF (iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index) IS NULL) THEN

             IF (l_pmt_details_flag = 'Y') THEN

                 IF (LENGTH(l_paymentRec.payment_details || l_calc_doc_detail)
                     > l_pmt_details_len) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'Grouping by '
                         || 'payment details length triggered for document '
                         || curr_doc_id);

     END IF;

                     insertDocIntoPayment(l_paymentRec, --x_paymentTab,
                         l_calc_doc_detail, true, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

                     GOTO label_finish_iteration;

                 END IF;

             END IF;

         END IF;

         /*
          * End Of Grouping:
          * If a document reaches here, it means that this document
          * is similar to the previous document as far a grouping
          * criteria is concerned.
          *
          * Add this document to the currently running payment.
          */
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN  --vid- start here
	  print_debuginfo(l_module_name, 'No grouping rules '
             || 'were triggered for document '
             || curr_doc_id);


         END IF;
         insertDocIntoPayment(l_paymentRec,-- x_paymentTab,
             l_calc_doc_detail, false, l_payment_id, l_docs_in_pmt_count, l_commonAttributes, l_trx_line_index);

         <<label_finish_iteration>>

         /*
          * CBR Handling:
          *
          * For each payment, store the central bank reporting
          * related fields along with the payment id in the
          * CBR table.
          *
          * This table will be passed as an output param to
          * the routine that sets the 'declare payment flag'
          * on the payment based on the CBR fields.
          *
          * We just created a payment. If this payment
          * does not already exist in the CBR list, add
          * it to the list.
          */
          l_profile_id := iby_disburse_submit_pub_pkg.docspayTab.payment_profile_id(l_trx_line_index);
/*  Bug 5709596 */
          IF NOT(iby_disburse_submit_pub_pkg.paymentProfilesTab.exists(l_profile_id)) THEN
             iby_disburse_submit_pub_pkg.set_profile_attribs(l_profile_id);
          END IF;

         /*
          * Lastly, before going into the next iteration
          * of the loop copy all the current grouping criteria
          * into 'prev' fields so that we can compare these
          * fields with the next record.
          *
          * No need to copy the current values into the previous ones for
          * the first record because we have already done it at the beginning.
          *
          *
          * Fix for bug 5463733:
          *
          * Reset the prev pmt grouping number here, else
          * the next document may incorrectly be grouped
          * into another payment.
          */

         IF (l_first_record <> 'Y') THEN
            prev_doc_id            := iby_disburse_submit_pub_pkg.docspayTab.document_payable_id(l_trx_line_index);
            prev_ca_id             := iby_disburse_submit_pub_pkg.docspayTab.calling_app_id(l_trx_line_index);
            prev_ca_doc_id1        := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref1(l_trx_line_index);
            prev_ca_doc_id2        := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref2(l_trx_line_index);
            prev_ca_doc_id3        := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref3(l_trx_line_index);
            prev_ca_doc_id4        := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref4(l_trx_line_index);
            prev_ca_doc_id5        := iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref5(l_trx_line_index);
            prev_pp_tt_cd          := iby_disburse_submit_pub_pkg.docspayTab.pay_proc_trxn_type_code(l_trx_line_index);
            prev_pmt_grp_num       := iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index);
            prev_pmt_method_cd     := iby_disburse_submit_pub_pkg.docspayTab.payment_method_code(l_trx_line_index);
            prev_int_bank_acct_id  := iby_disburse_submit_pub_pkg.docspayTab.internal_bank_account_id(l_trx_line_index);
            prev_ext_bank_acct_id  := iby_disburse_submit_pub_pkg.docspayTab.external_bank_account_id(l_trx_line_index);
            prev_profile_id        := iby_disburse_submit_pub_pkg.docspayTab.payment_profile_id(l_trx_line_index);
            prev_org_id            := iby_disburse_submit_pub_pkg.docspayTab.org_id(l_trx_line_index);
            prev_org_type          := iby_disburse_submit_pub_pkg.docspayTab.org_type(l_trx_line_index);
            prev_payee_id          := iby_disburse_submit_pub_pkg.docspayTab.payee_party_id(l_trx_line_index);
            prev_payee_site_id     := iby_disburse_submit_pub_pkg.docspayTab.party_site_id(l_trx_line_index);
            prev_remit_loc_id      := iby_disburse_submit_pub_pkg.docspayTab.remit_to_location_id(l_trx_line_index);
            prev_ext_payee_id      := iby_disburse_submit_pub_pkg.docspayTab.ext_payee_id(l_trx_line_index);
            prev_doc_pmt_currency  := iby_disburse_submit_pub_pkg.docspayTab.payment_currency_code(l_trx_line_index);
            prev_doc_pmt_amount    := iby_disburse_submit_pub_pkg.docspayTab.payment_amount(l_trx_line_index);
            prev_pay_alone_flag    := iby_disburse_submit_pub_pkg.docspayTab.exclusive_payment_flag(l_trx_line_index);
            prev_bnk_chg_bearer    := iby_disburse_submit_pub_pkg.docspayTab.bank_charge_bearer(l_trx_line_index);
            prev_delivery_channel  := iby_disburse_submit_pub_pkg.docspayTab.delivery_channel_code(l_trx_line_index);
            prev_settle_priority   := iby_disburse_submit_pub_pkg.docspayTab.settlement_priority(l_trx_line_index);
            prev_supplier_msg1     := iby_disburse_submit_pub_pkg.docspayTab.remittance_message1(l_trx_line_index);
            prev_supplier_msg2     := iby_disburse_submit_pub_pkg.docspayTab.remittance_message2(l_trx_line_index);
            prev_supplier_msg3     := iby_disburse_submit_pub_pkg.docspayTab.remittance_message3(l_trx_line_index);
            prev_uri               := iby_disburse_submit_pub_pkg.docspayTab.unique_remittance_identifier(l_trx_line_index);
            prev_uri_checkdigits   := iby_disburse_submit_pub_pkg.docspayTab.uri_check_digit(l_trx_line_index);
            prev_pmt_reason_code   := iby_disburse_submit_pub_pkg.docspayTab.payment_reason_code(l_trx_line_index);
            prev_pmt_reason_commts := iby_disburse_submit_pub_pkg.docspayTab.payment_reason_comments(l_trx_line_index);
            prev_pmt_function      := iby_disburse_submit_pub_pkg.docspayTab.payment_function(l_trx_line_index);
            prev_pmt_date          := iby_disburse_submit_pub_pkg.docspayTab.payment_date(l_trx_line_index);
            prev_pmt_due_date      := iby_disburse_submit_pub_pkg.docspayTab.payment_due_date(l_trx_line_index);
            prev_benef_party       := iby_disburse_submit_pub_pkg.docspayTab.beneficiary_party(l_trx_line_index);
            prev_address_source    := iby_disburse_submit_pub_pkg.docspayTab.address_source(l_trx_line_index);
            prev_emp_add_code      := iby_disburse_submit_pub_pkg.docspayTab.employee_address_code(l_trx_line_index);
            prev_emp_person_id     := iby_disburse_submit_pub_pkg.docspayTab.employee_person_id(l_trx_line_index);
            prev_emp_addr_id       := iby_disburse_submit_pub_pkg.docspayTab.employee_address_id(l_trx_line_index);
            prev_emp_pmt_flag      := iby_disburse_submit_pub_pkg.docspayTab.employee_payment_flag(l_trx_line_index);

            prev_inv_payee_party_id          := iby_disburse_submit_pub_pkg.docspayTab.inv_payee_party_id(l_trx_line_index);
            prev_inv_party_site_id     := iby_disburse_submit_pub_pkg.docspayTab.inv_party_site_id(l_trx_line_index);
            prev_inv_beneficiary_party      := iby_disburse_submit_pub_pkg.docspayTab.inv_beneficiary_party(l_trx_line_index);
            prev_ext_inv_payee_id      := iby_disburse_submit_pub_pkg.docspayTab.ext_inv_payee_id(l_trx_line_index);

         END IF;

         /*
          *  Remember to reset the first record flag before going
          *  into the next iteration.
          */
         IF (l_first_record = 'Y') THEN
             l_first_record := 'N';
         END IF;

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, '+----------------------------------+');
         END IF;

        END LOOP; -- for documents cursor
        FORALL l_trx_line_index IN nvl(iby_disburse_submit_pub_pkg.docspayTab.pay_proc_trxn_type_code.FIRST,0) .. nvl(iby_disburse_submit_pub_pkg.docspayTab.pay_proc_trxn_type_code.LAST,-99)
         INSERT INTO iby_docs_in_pmt_gt
             (
             pay_proc_trxn_type_code,
             calling_app_id,
             document_payable_id,
             document_status,
             document_currency_code,
             document_amount,
             ext_payee_id,
             payee_party_id,
             org_id,
             created_by,
             creation_date,
             last_updated_by,
             last_update_date,
             object_version_number,
             calling_app_doc_unique_ref1,
             calling_app_doc_unique_ref2,
             calling_app_doc_unique_ref3,
             calling_app_doc_unique_ref4,
             calling_app_doc_unique_ref5,
             last_update_login,
             party_site_id,
             supplier_site_id,
             org_type,
             amount_withheld,
             payment_curr_discount_taken,
             discount_date,
             payment_due_date,
             payment_id,
             internal_bank_account_id,
             external_bank_account_id,
             payment_grouping_number,
             unique_remittance_identifier,
             uri_check_digit,
             delivery_channel_code,
             dont_pay_flag,
             dont_pay_reason_code,
             dont_pay_description
             )
         VALUES
             (
             iby_disburse_submit_pub_pkg.docspayTab.pay_proc_trxn_type_code(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.calling_app_id(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.document_payable_id(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.document_status(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.payment_currency_code(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.payment_amount(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.ext_payee_id(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.payee_party_id(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.org_id(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.created_by(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.creation_date(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.last_updated_by(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.last_update_date(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.object_version_number(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref1(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref2(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref3(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref4(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.calling_app_doc_unique_ref5(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.last_update_login(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.party_site_id(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.supplier_site_id(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.org_type(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.amount_withheld(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.payment_curr_discount_taken(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.discount_date(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.payment_due_date(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.payment_id(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.internal_bank_account_id(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.external_bank_account_id(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.payment_grouping_number(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.unique_remittance_identifier(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.uri_check_digit(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.delivery_channel_code(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.dont_pay_flag(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.dont_pay_reason_code(l_trx_line_index),
             iby_disburse_submit_pub_pkg.docspayTab.dont_pay_description(l_trx_line_index)
             );

        EXIT WHEN c_documents%NOTFOUND;

     END LOOP; -- for documents cursor

     iby_disburse_submit_pub_pkg.delete_docspayTab;

     CLOSE c_documents;
     print_debuginfo(l_module_name, 'Finished processing of all pmts');
     /*
      * Exit if no documents were found.
      */
     IF (l_no_rec_in_ppr) THEN
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'No documents payable were '
             || 'retrieved from DB for payment request '
             || p_payment_request_id
             || '. Exiting document grouping ..');


	 print_debuginfo(l_module_name, 'EXIT');

         END IF;
         RETURN;
     END IF;


     /*
      * Populate legal entity ids for each of the created payments.
      *
      * The legal entity id on the payment is a special attribute.
      * It is not a grouping rule, instead it has to be derived
      * from the internal bank account and populated.
      */

     /*
      * Finally, return the payments created by grouping to the caller.
      */
     x_ca_id        := l_ca_id;
     x_ca_payreq_cd := l_ca_payreq_cd;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Created '
         || IBY_PAYGROUP_PUB.pmtTable.payment_id.COUNT   || ' payment(s) from '
         || ' document(s) for payment request '
         || p_payment_request_id || '.');
	 print_debuginfo(l_module_name, 'EXIT');
     END IF;
 END performDocumentGrouping;


/*--------------------------------------------------------------------
 | NAME:
 |     insertDocIntoPayment
 |
 | PURPOSE:
 |     Inserts a given document into a currently running payment
 |     or into a new payment as per given flag.
 |
 |     This method is called by every grouping rule to add
 |     a given document into a current payment/new payment.
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE insertDocIntoPayment(
     x_paymentRec            IN OUT NOCOPY IBY_PAYMENTS_ALL%ROWTYPE,
     x_paymentTab            IN OUT NOCOPY paymentTabType,
     p_calcDocInfo           IN            VARCHAR2,
     p_newPaymentFlag        IN            BOOLEAN,
     x_currentPaymentId      IN OUT NOCOPY IBY_PAYMENTS_ALL.payment_id%TYPE,
     x_docsInPmtTab          IN OUT NOCOPY docsInPaymentTabType,
     x_docsInPmtRec          IN OUT NOCOPY docsInPaymentRecType,
     x_docsInPmtCount        IN OUT NOCOPY NUMBER
     )
 IS
 l_module_name    CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                '.insertDocIntoPayment';

 BEGIN


     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'ENTER');
     END IF;

     /*
      * GROUPING LOGIC IS IN IF-ELSE BLOCK BELOW:
      *
      * Irrespective of whether this document is part of
      * an existing payment or whether it should be part
      * of a new payment, ensure that the PLSQL payments
      * table is updated with the details of this document
      * within this if-else block.
      *
      * We need to do this each time we enter this procedure
      * because this might well be the last document in
      * in the payment request, and this procedure may
      * not be called again for this payment request. So
      * the PLSQL payments table should always be up-to-date
      * when it exits this procedure.
      */
     IF (p_newPaymentFlag = true) THEN

         /*
          * This is a new payment; Get an id for this payment
          */
         getNextPaymentID(x_currentPaymentID);

         /*
          * Create a new payment record using the incoming
          * document as a constituent, and insert this record
          * into the PLSQL payments table.
          */
         x_paymentRec.payment_id              :=  x_currentPaymentId;

         x_docsInPmtCount                     := 1;

         x_paymentRec.payment_amount          := x_docsInPmtRec.document_amount;

         x_paymentRec.discount_amount_taken   := x_docsInPmtRec.
                                                     pmt_curr_discount;

         x_paymentRec.payment_details         := p_calcDocInfo;

         x_paymentTab(x_paymentTab.COUNT + 1) := x_paymentRec;

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name,' Inserted document : '
             || x_docsInPmtRec.document_id || ' into new payment: '
             || x_currentPaymentId);

         END IF;
         /*
          * Assign the payment id of the new payment to this
          * doc, and insert the doc into the docs array.
          */
         x_docsInPmtRec.payment_id            := x_paymentRec.payment_id;
         x_docsInPmtTab(x_docsInPmtTab.COUNT + 1) := x_docsInPmtRec;

     ELSE

         /*
          * This means we need to add the incoming document to
          * the current  payment.
          */

         /*
          * First check special case: Payments PLSQL table is empty
          *
          * If the PLSQL table for payments is empty, we have to
          * initialize it by inserting a dummy record. This dummy
          * record will get overwritten below.
          */
         IF (x_paymentTab.COUNT = 0) THEN

             getNextPaymentID(x_currentPaymentID);

             x_paymentRec.payment_id              := x_currentPaymentId;

             x_docsInPmtCount                     := 0;

             x_paymentRec.payment_amount          := 0;
             x_paymentRec.discount_amount_taken   :=  0;
             x_paymentRec.payment_details         := '';

             /*
              * Insert the first record into the table. This
              * is a dummy record.
              */
             x_paymentTab(x_paymentTab.COUNT + 1) := x_paymentRec;

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		print_debuginfo(l_module_name, 'Created a new payment: '
                 || x_currentPaymentId);
	     END IF;

         END IF;

         /*
          * The incoming document should be part of the current payment.
          * So add the document amount to the current payment
          * record and increment the document count for the current
          * payment record.
          */
         x_paymentRec.payment_id     :=  x_currentPaymentId;

         x_docsInPmtCount            := x_docsInPmtCount + 1;

         x_paymentRec.payment_amount :=
             x_paymentRec.payment_amount + x_docsInPmtRec.document_amount;

         x_paymentRec.discount_amount_taken   :=
             x_paymentRec.discount_amount_taken
                 + x_docsInPmtRec.pmt_curr_discount;

         /*
          * The payment details information is passed in by the caller.
          * If this value is null, it means that the caller does not
          * wish to use the grouping rule 'break payments according to
          * space available under payment details'. In such a case, do not
          * append the payment details from each document into the payment.
          */
         IF (p_calcDocInfo IS NOT NULL) THEN

             x_paymentRec.payment_details :=
                 x_paymentRec.payment_details || p_calcDocInfo;

         END IF;

         /*
          * Overwrite the current payment record in the
          * PLSQL payments table with the updated record.
          */
         x_paymentTab(x_paymentTab.COUNT) := x_paymentRec;

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		print_debuginfo(l_module_name, 'Inserted document : '
             || x_docsInPmtRec.document_id || ' into existing payment: '
             || x_currentPaymentId);

         END IF;
         /*
          * Assign the payment id of the current payment to this
          * doc, and insert the doc into the docs array.
          */
         x_docsInPmtRec.payment_id        := x_paymentRec.payment_id;
         x_docsInPmtTab(x_docsInPmtTab.COUNT + 1) := x_docsInPmtRec;

     END IF;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'EXIT');
      END IF;

 END insertDocIntoPayment;







/*--------------------------------------------------------------------
 | NAME:
 |     insertDocIntoPayment
 |
 | PURPOSE:
 |     Inserts a given document into a currently running payment
 |     or into a new payment as per given flag.
 |
 |     This method is called by every grouping rule to add
 |     a given document into a current payment/new payment.
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE insertDocIntoPayment(
     x_paymentRec            IN OUT NOCOPY IBY_PAYMENTS_ALL%ROWTYPE,
     x_paymentTab            IN OUT NOCOPY paymentTabType,
     p_calcDocInfo           IN            VARCHAR2,
     p_newPaymentFlag        IN            BOOLEAN,
     x_currentPaymentId      IN OUT NOCOPY IBY_PAYMENTS_ALL.payment_id%TYPE,
     x_docsInPmtTab          IN OUT NOCOPY docsInPaymentTabType,
     x_docsInPmtRec          IN OUT NOCOPY docsInPaymentRecType,
     x_docsInPmtCount        IN OUT NOCOPY NUMBER,
     x_commonAttributes      IN OUT NOCOPY commonAttributesTabType
     )
 IS
 l_module_name    CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                '.insertDocIntoPayment';
  l_impossible_date       DATE := TO_DATE('01/01/5100 10:25:55',
                                     'MM/DD/YYYY HH24:MI:SS');

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'ENTER');
      END IF;

     /*
      * GROUPING LOGIC IS IN IF-ELSE BLOCK BELOW:
      *
      * Irrespective of whether this document is part of
      * an existing payment or whether it should be part
      * of a new payment, ensure that the PLSQL payments
      * table is updated with the details of this document
      * within this if-else block.
      *
      * We need to do this each time we enter this procedure
      * because this might well be the last document in
      * in the payment request, and this procedure may
      * not be called again for this payment request. So
      * the PLSQL payments table should always be up-to-date
      * when it exits this procedure.
      */
     IF (p_newPaymentFlag = true) THEN

         /*
          * This is a new payment; Get an id for this payment
          */
         getNextPaymentID(x_currentPaymentID);

         /* Assume that this NEW payment has 3 attributes common across all documents */

         x_commonAttributes.due_date_common_flag  := 'Y';
         x_commonAttributes.delv_chnl_common_flag := 'Y';
         x_commonAttributes.uri_common_flag       := 'Y';

         x_paymentRec.payment_due_date      :=  x_commonAttributes.curr_pmt_due_date;
         x_paymentRec.delivery_channel_code   := x_commonAttributes.curr_delivery_channel    ;
         x_paymentRec.unique_remittance_identifier := x_commonAttributes.curr_uri;
         x_paymentRec.uri_check_digit  := x_commonAttributes.curr_uri_checkdigits;
         /*
          * Create a new payment record using the incoming
          * document as a constituent, and insert this record
          * into the PLSQL payments table.
          */
         x_paymentRec.payment_id              :=  x_currentPaymentId;

         x_docsInPmtCount                     := 1;

         x_paymentRec.payment_amount          := x_docsInPmtRec.document_amount;

         x_paymentRec.discount_amount_taken   := x_docsInPmtRec.
                                                     pmt_curr_discount;

         x_paymentRec.payment_details         := p_calcDocInfo;

        /* Move record assignment down after initializing payments */

        -- x_paymentTab(x_paymentTab.COUNT + 1) := x_paymentRec;

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name,' Inserted document : '
             || x_docsInPmtRec.document_id || ' into new payment: '
             || x_currentPaymentId);
         END IF;

         /*
          * Assign the payment id of the new payment to this
          * doc, and insert the doc into the docs array.
          */
         x_docsInPmtRec.payment_id            := x_paymentRec.payment_id;
         x_docsInPmtTab(x_docsInPmtTab.COUNT + 1) := x_docsInPmtRec;


	 /* moving the initalizePmts logic to this block, to avoid unnecessary looping through payments */

         x_paymentRec.payment_status                 := 'CREATED';
         x_paymentRec.process_type                   := 'STANDARD';

         /*
          * Fix for bug 5115270:
          *
          * For all flags, take care not to overwite the flag
          * already set.
          */
         x_paymentRec.payments_complete_flag         :=
             NVL(x_paymentRec.payments_complete_flag,         'N');
         x_paymentRec.bill_payable_flag              :=
             NVL(x_paymentRec.bill_payable_flag,              'N');
         x_paymentRec.exclusive_payment_flag         :=
             NVL(x_paymentRec.exclusive_payment_flag,         'N');
         x_paymentRec.separate_remit_advice_req_flag :=
             NVL(x_paymentRec.separate_remit_advice_req_flag, 'N');
         x_paymentRec.declare_payment_flag           :=
             NVL(x_paymentRec.declare_payment_flag,           'N');
         x_paymentRec.pregrouped_payment_flag        :=
             NVL(x_paymentRec.pregrouped_payment_flag,        'N');
         x_paymentRec.stop_confirmed_flag            :=
             NVL(x_paymentRec.stop_confirmed_flag,            'N');
         x_paymentRec.stop_released_flag             :=
             NVL(x_paymentRec.stop_released_flag,             'N');
         x_paymentRec.stop_request_placed_flag       :=
             NVL(x_paymentRec.stop_request_placed_flag,       'N');

         x_paymentRec.created_by                     := fnd_global.user_id;
         x_paymentRec.creation_date                  := sysdate;
         x_paymentRec.last_updated_by                := fnd_global.user_id;
         x_paymentRec.last_update_login              := fnd_global.user_id;
         x_paymentRec.last_update_date               := sysdate;
         x_paymentRec.object_version_number          := 1;

   /* moving the paymentrecord to x_paymentTab after initializing the values */

         x_paymentTab(x_paymentTab.COUNT + 1) := x_paymentRec;




     ELSE

         /*
          * This means we need to add the incoming document to
          * the current  payment.
          */

         /*
          * First check special case: Payments PLSQL table is empty
          *
          * If the PLSQL table for payments is empty, we have to
          * initialize it by inserting a dummy record. This dummy
          * record will get overwritten below.
          */
         IF (x_paymentTab.COUNT = 0) THEN

             getNextPaymentID(x_currentPaymentID);




             x_paymentRec.payment_id              := x_currentPaymentId;

             x_docsInPmtCount                     := 0;

             x_paymentRec.payment_amount          := 0;
             x_paymentRec.discount_amount_taken   :=  0;
             x_paymentRec.payment_details         := '';

             /*
              * Insert the first record into the table. This
              * is a dummy record.
              */
             x_paymentTab(x_paymentTab.COUNT + 1) := x_paymentRec;

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		print_debuginfo(l_module_name, 'Created a new payment: '
                 || x_currentPaymentId);
             END IF;

         END IF;



         /*
          * The incoming document should be part of the current payment.
          * So add the document amount to the current payment
          * record and increment the document count for the current
          * payment record.
          */


         If (x_commonAttributes.due_date_common_flag = 'Y') THEN

            If (NVL(x_commonAttributes.prev_pmt_due_date,l_impossible_date) <> NVL(x_commonAttributes.curr_pmt_due_date, l_impossible_date))  THEN

                    x_commonAttributes.due_date_common_flag  := 'N';
                    x_paymentRec.payment_due_date            :=  '';

            ELSE
                    x_paymentRec.payment_due_date        := x_commonAttributes.curr_pmt_due_date;
            END IF;

         END IF;

         If (x_commonAttributes.delv_chnl_common_flag = 'Y') THEN
            If (NVL(x_commonAttributes.prev_delivery_channel,0) <> NVL(x_commonAttributes.curr_delivery_channel, 0))  THEN

                         x_commonAttributes.delv_chnl_common_flag := 'N';
                         x_paymentRec.delivery_channel_code   := '';

            ELSE
                        x_paymentRec.delivery_channel_code   := x_commonAttributes.curr_delivery_channel;
            END IF;
         END IF;

         If (x_commonAttributes.uri_common_flag = 'Y') THEN

             IF (NVL(x_commonAttributes.prev_uri, 0) <> NVL(x_commonAttributes.prev_uri, 0) OR
                     NVL(x_commonAttributes.prev_uri_checkdigits, 0) <>
                         NVL(x_commonAttributes.curr_uri_checkdigits, 0)) THEN

                        x_commonAttributes.uri_common_flag       := 'N';
                 x_paymentRec.unique_remittance_identifier := '';
             ELSE

                 x_paymentRec.unique_remittance_identifier := x_commonAttributes.curr_uri;
                 x_paymentRec.uri_check_digit              := x_commonAttributes.curr_uri_checkdigits;
            END IF;
         END IF;


         x_paymentRec.payment_id     :=  x_currentPaymentId;

         x_docsInPmtCount            := x_docsInPmtCount + 1;

         x_paymentRec.payment_amount :=
             x_paymentRec.payment_amount + x_docsInPmtRec.document_amount;

         x_paymentRec.discount_amount_taken   :=
             x_paymentRec.discount_amount_taken
                 + x_docsInPmtRec.pmt_curr_discount;

         /*
          * The payment details information is passed in by the caller.
          * If this value is null, it means that the caller does not
          * wish to use the grouping rule 'break payments according to
          * space available under payment details'. In such a case, do not
          * append the payment details from each document into the payment.
          */
         IF (p_calcDocInfo IS NOT NULL) THEN

             x_paymentRec.payment_details :=
                 x_paymentRec.payment_details || p_calcDocInfo;

         END IF;

         /*
          * Overwrite the current payment record in the
          * PLSQL payments table with the updated record.
          */
         x_paymentTab(x_paymentTab.COUNT) := x_paymentRec;

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Inserted document : '
             || x_docsInPmtRec.document_id || ' into existing payment: '
             || x_currentPaymentId);
         END IF;

         /*
          * Assign the payment id of the current payment to this
          * doc, and insert the doc into the docs array.
          */
         x_docsInPmtRec.payment_id        := x_paymentRec.payment_id;
         x_docsInPmtTab(x_docsInPmtTab.COUNT + 1) := x_docsInPmtRec;

     END IF;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'EXIT');
      END IF;

 END insertDocIntoPayment;

/*--------------------------------------------------------------------
 | NAME:
 |     insertDocIntoPayment
 |
 | PURPOSE:
 |     Inserts a given document into a currently running payment
 |     or into a new payment as per given flag.
 |
 |     This method is called by every grouping rule to add
 |     a given document into a current payment/new payment.
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE insertDocIntoPayment(
     x_paymentRec            IN OUT NOCOPY IBY_PAYMENTS_ALL%ROWTYPE,
     --x_paymentTab            IN OUT NOCOPY paymentTabType,
     p_calcDocInfo           IN            VARCHAR2,
     p_newPaymentFlag        IN            BOOLEAN,
     x_currentPaymentId      IN OUT NOCOPY IBY_PAYMENTS_ALL.payment_id%TYPE,
     x_docsInPmtCount        IN OUT NOCOPY NUMBER,
     x_commonAttributes      IN OUT NOCOPY commonAttributesTabType,
     p_trx_line_index        IN            BINARY_INTEGER
     )
 IS
 l_module_name    CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                '.insertDocIntoPayment';
  l_impossible_date       DATE := TO_DATE('01/01/5100 10:25:55',
                                     'MM/DD/YYYY HH24:MI:SS');

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'ENTER: overloaded method with p_trx_line_index ');
      END IF;

     /*
      * GROUPING LOGIC IS IN IF-ELSE BLOCK BELOW:
      *
      * Irrespective of whether this document is part of
      * an existing payment or whether it should be part
      * of a new payment, ensure that the PLSQL payments
      * table is updated with the details of this document
      * within this if-else block.
      *
      * We need to do this each time we enter this procedure
      * because this might well be the last document in
      * in the payment request, and this procedure may
      * not be called again for this payment request. So
      * the PLSQL payments table should always be up-to-date
      * when it exits this procedure.
      */

       print_debuginfo(l_module_name, 'Before checking the new pmt flag');
     IF (p_newPaymentFlag = true) THEN

         /*
          * This is a new payment; Get an id for this payment
          */
         getNextPaymentID(x_currentPaymentID);

         /* Assume that this NEW payment has 3 attributes common across all documents */

	 print_debuginfo(l_module_name, 'Before initializing x_CommonAttr ');

         x_commonAttributes.due_date_common_flag  := 'Y';
         x_commonAttributes.delv_chnl_common_flag := 'Y';
         x_commonAttributes.uri_common_flag       := 'Y';
   IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'B4 incrementing l_trx_pmt_index - '||l_trx_pmt_index);
	 print_debuginfo(l_module_name, 'IBY_PAYGROUP_PUB.pmtTable.payment_id.COUNT - '||IBY_PAYGROUP_PUB.pmtTable.payment_id.COUNT);
 	 --print_debuginfo(l_module_name, 'IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_pmt_index) - '|| IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_pmt_index));
   END IF;
	 l_trx_pmt_index := l_trx_pmt_index + 1 ;

   IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'After incrementing l_trx_pmt_index - '||l_trx_pmt_index);
	 print_debuginfo(l_module_name, 'Before assigning the values to pmtTable ');
   END IF;
          initialize_pmt_table(l_trx_pmt_index);
	 /* Only pre-fill hardcoded grouping rule attributes */
         IBY_PAYGROUP_PUB.pmtTable.payment_profile_id(l_trx_pmt_index) :=x_paymentRec.payment_profile_id;
         IBY_PAYGROUP_PUB.pmtTable.payment_service_request_id(l_trx_pmt_index) :=x_paymentRec.payment_service_request_id;
	 IBY_PAYGROUP_PUB.pmtTable.internal_bank_account_id(l_trx_pmt_index) :=x_paymentRec.internal_bank_account_id;
         IBY_PAYGROUP_PUB.pmtTable.ext_payee_id(l_trx_pmt_index) :=x_paymentRec.ext_payee_id;
         IBY_PAYGROUP_PUB.pmtTable.payee_party_id(l_trx_pmt_index) :=x_paymentRec.payee_party_id;
          IBY_PAYGROUP_PUB.pmtTable.party_site_id(l_trx_pmt_index) :=x_paymentRec.party_site_id;
         IBY_PAYGROUP_PUB.pmtTable.supplier_site_id(l_trx_pmt_index) :=x_paymentRec.supplier_site_id;
	 IBY_PAYGROUP_PUB.pmtTable.ext_inv_payee_id(l_trx_pmt_index) :=x_paymentRec.ext_inv_payee_id;
         IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_id(l_trx_pmt_index) :=x_paymentRec.inv_payee_party_id;
         IBY_PAYGROUP_PUB.pmtTable.inv_party_site_id(l_trx_pmt_index) := x_paymentRec.inv_party_site_id;
         IBY_PAYGROUP_PUB.pmtTable.inv_supplier_site_id(l_trx_pmt_index) := x_paymentRec.inv_supplier_site_id;
         IBY_PAYGROUP_PUB.pmtTable.inv_beneficiary_party(l_trx_pmt_index) := x_paymentRec.inv_beneficiary_party;
         IBY_PAYGROUP_PUB.pmtTable.remit_to_location_id (l_trx_pmt_index) :=x_paymentRec.remit_to_location_id;
         IBY_PAYGROUP_PUB.pmtTable.payment_currency_code (l_trx_pmt_index) :=x_paymentRec.payment_currency_code;
         IBY_PAYGROUP_PUB.pmtTable.org_id(l_trx_pmt_index) :=x_paymentRec.org_id;
         IBY_PAYGROUP_PUB.pmtTable.org_type(l_trx_pmt_index) :=x_paymentRec.org_type;
         IBY_PAYGROUP_PUB.pmtTable.payment_method_code(l_trx_pmt_index) :=x_paymentRec.payment_method_code;
         IBY_PAYGROUP_PUB.pmtTable.payment_function(l_trx_pmt_index) :=x_paymentRec.payment_function;
         IBY_PAYGROUP_PUB.pmtTable.payment_date(l_trx_pmt_index) :=x_paymentRec.payment_date;
         IBY_PAYGROUP_PUB.pmtTable.beneficiary_party(l_trx_pmt_index) :=x_paymentRec.beneficiary_party;
         IBY_PAYGROUP_PUB.pmtTable.address_source(l_trx_pmt_index) :=x_paymentRec.address_source;
         IBY_PAYGROUP_PUB.pmtTable.employee_address_code(l_trx_pmt_index) :=x_paymentRec.employee_address_code;
         IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_pmt_index) :=x_paymentRec.employee_person_id;
         IBY_PAYGROUP_PUB.pmtTable.employee_address_id(l_trx_pmt_index) :=x_paymentRec.employee_address_id;
         IBY_PAYGROUP_PUB.pmtTable.employee_payment_flag(l_trx_pmt_index) :=x_paymentRec.employee_payment_flag;
         IBY_PAYGROUP_PUB.pmtTable.legal_entity_id(l_trx_pmt_index) :=x_paymentRec.legal_entity_id;
	 IBY_PAYGROUP_PUB.pmtTable.payee_addressee(l_trx_pmt_index) :=NULL;

         IBY_PAYGROUP_PUB.pmtTable.external_bank_account_id(l_trx_pmt_index) :=x_paymentRec.external_bank_account_id;



         IBY_PAYGROUP_PUB.pmtTable.bill_payable_flag(l_trx_pmt_index) :=x_paymentRec.bill_payable_flag;



         IBY_PAYGROUP_PUB.pmtTable.pregrouped_payment_flag(l_trx_pmt_index) :=x_paymentRec.pregrouped_payment_flag;



         IBY_PAYGROUP_PUB.pmtTable.bank_instruction1_code(l_trx_pmt_index) :=x_paymentRec.bank_instruction1_code;
         IBY_PAYGROUP_PUB.pmtTable.bank_instruction2_code(l_trx_pmt_index) :=x_paymentRec.bank_instruction2_code;
         IBY_PAYGROUP_PUB.pmtTable.payment_text_message1(l_trx_pmt_index) :=x_paymentRec.payment_text_message1;
         IBY_PAYGROUP_PUB.pmtTable.payment_text_message2(l_trx_pmt_index) :=x_paymentRec.payment_text_message2;
         IBY_PAYGROUP_PUB.pmtTable.payment_text_message3(l_trx_pmt_index) :=x_paymentRec.payment_text_message3;






         IBY_PAYGROUP_PUB.pmtTable.bank_charge_bearer(l_trx_pmt_index) :=x_paymentRec.bank_charge_bearer;



         IBY_PAYGROUP_PUB.pmtTable.delivery_channel_code(l_trx_pmt_index) :=x_paymentRec.delivery_channel_code;



         IBY_PAYGROUP_PUB.pmtTable.settlement_priority(l_trx_pmt_index) :=x_paymentRec.settlement_priority;


         IBY_PAYGROUP_PUB.pmtTable.remittance_message1(l_trx_pmt_index) :=x_paymentRec.remittance_message1;
         IBY_PAYGROUP_PUB.pmtTable.remittance_message2(l_trx_pmt_index) :=x_paymentRec.remittance_message2;
         IBY_PAYGROUP_PUB.pmtTable.remittance_message3(l_trx_pmt_index) :=x_paymentRec.remittance_message3;




--	 IBY_PAYGROUP_PUB.pmtTable.unique_remittance_identifier(l_trx_pmt_index) :=x_paymentRec.unique_remittance_identifier;
	 IBY_PAYGROUP_PUB.pmtTable.uri_check_digit(l_trx_pmt_index) :=x_paymentRec.uri_check_digit;


	 IBY_PAYGROUP_PUB.pmtTable.payment_due_date(l_trx_pmt_index) :=x_paymentRec.payment_due_date;


	 IBY_PAYGROUP_PUB.pmtTable.payment_reason_code(l_trx_pmt_index) :=x_paymentRec.payment_reason_code;
	 IBY_PAYGROUP_PUB.pmtTable.payment_reason_comments(l_trx_pmt_index) :=x_paymentRec.payment_reason_comments;



         print_debuginfo(l_module_name, 'After assigning the basic values to pmtTable ');

	 IBY_PAYGROUP_PUB.pmtTable.payment_due_date(l_trx_pmt_index)      :=  x_commonAttributes.curr_pmt_due_date;
	 IBY_PAYGROUP_PUB.pmtTable.delivery_channel_code(l_trx_pmt_index)   := x_commonAttributes.curr_delivery_channel    ;
	 IBY_PAYGROUP_PUB.pmtTable.unique_remittance_identifier(l_trx_pmt_index) := x_commonAttributes.curr_uri;
         IBY_PAYGROUP_PUB.pmtTable.uri_check_digit(l_trx_pmt_index)  := x_commonAttributes.curr_uri_checkdigits;
 	 print_debuginfo(l_module_name, 'After assigning the values to pmtTable ');
         /*
          * Create a new payment record using the incoming
          * document as a constituent, and insert this record
          * into the PLSQL payments table.
          */
         /*

	 x_paymentRec.payment_id              :=  x_currentPaymentId;

         x_docsInPmtCount                     := 1;

         x_paymentRec.payment_amount          := iby_disburse_submit_pub_pkg.docspayTab.payment_amount(p_trx_line_index);

         x_paymentRec.discount_amount_taken   := iby_disburse_submit_pub_pkg.docspayTab.
                                                     payment_curr_discount_taken(p_trx_line_index);

         x_paymentRec.payment_details         := p_calcDocInfo;

	*/

	 x_docsInPmtCount                     := 1;

        print_debuginfo(l_module_name, 'Before assigning pmt id, pmt amt');
 	IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_pmt_index)             := x_currentPaymentId;
	IBY_PAYGROUP_PUB.pmtTable.payment_amount(l_trx_pmt_index)         :=  iby_disburse_submit_pub_pkg.docspayTab.payment_amount(p_trx_line_index);
	IBY_PAYGROUP_PUB.pmtTable.discount_amount_taken(l_trx_pmt_index)  := iby_disburse_submit_pub_pkg.docspayTab.
									     payment_curr_discount_taken(p_trx_line_index);
        IBY_PAYGROUP_PUB.pmtTable.payment_details(l_trx_pmt_index)        := p_calcDocInfo;

        print_debuginfo(l_module_name, 'Before assigning pmt id, pmt amt');
        iby_disburse_submit_pub_pkg.docspayTab.payment_id(p_trx_line_index) := x_currentPaymentId;


	 /* moving the initalizePmts logic to this block, to avoid unnecessary looping through payments */

        /*
	 x_paymentRec.payment_status                 := 'CREATED';
         x_paymentRec.process_type                   := 'STANDARD';
	*/


	 IBY_PAYGROUP_PUB.pmtTable.payment_status(l_trx_pmt_index)         :='CREATED';
	IF(l_calling_app_procedure = 'IBY_DISBURSE_SINGLE_PMT_PKG') THEN
        IBY_PAYGROUP_PUB.pmtTable.process_type(l_trx_pmt_index)		  := 'IMMEDIATE';
        ELSE
	IBY_PAYGROUP_PUB.pmtTable.process_type(l_trx_pmt_index)		  := 'STANDARD';
        END IF;
	IBY_PAYGROUP_PUB.pmtTable.payments_complete_flag(l_trx_pmt_index) := 'N';
	IBY_PAYGROUP_PUB.pmtTable.bill_payable_flag(l_trx_pmt_index)	  :=nvl(iby_disburse_submit_pub_pkg.docspayTab.support_bills_payable_flag(p_trx_line_index),'N');

	IBY_PAYGROUP_PUB.pmtTable.exclusive_payment_flag(l_trx_pmt_index)	  :='N';
	IBY_PAYGROUP_PUB.pmtTable.sep_remit_advice_req_flag(l_trx_pmt_index)	  :='N';

--	IBY_PAYGROUP_PUB.pmtTable.declare_payment_flag(l_trx_pmt_index)	  :='N';

--       	IBY_PAYGROUP_PUB.pmtTable.sep_remit_advice_req_flag(l_trx_pmt_index)	  :=NULL;
	IBY_PAYGROUP_PUB.pmtTable.payment_instruction_id(l_trx_pmt_index)         :=NULL;
	IBY_PAYGROUP_PUB.pmtTable.anticipated_value_date(l_trx_pmt_index)         :=NULL;
        IBY_PAYGROUP_PUB.pmtTable.declaration_amount(l_trx_pmt_index)             :=0;

	--IBY_PAYGROUP_PUB.pmtTable.pregrouped_payment_flag(l_trx_pmt_index)	   :='N';
	IBY_PAYGROUP_PUB.pmtTable.stop_confirmed_flag(l_trx_pmt_index)		   :='N';
	IBY_PAYGROUP_PUB.pmtTable.stop_released_flag(l_trx_pmt_index)		   :='N';
	IBY_PAYGROUP_PUB.pmtTable.stop_request_placed_flag(l_trx_pmt_index)	   :='N';
	 IBY_PAYGROUP_PUB.pmtTable.created_by(l_trx_pmt_index)                     := fnd_global.user_id;
         IBY_PAYGROUP_PUB.pmtTable.creation_date(l_trx_pmt_index)                  := sysdate;
         IBY_PAYGROUP_PUB.pmtTable.last_updated_by(l_trx_pmt_index)                := fnd_global.user_id;
         IBY_PAYGROUP_PUB.pmtTable.last_update_login(l_trx_pmt_index)              := fnd_global.user_id;
         IBY_PAYGROUP_PUB.pmtTable.last_update_date(l_trx_pmt_index)               := sysdate;
         IBY_PAYGROUP_PUB.pmtTable.object_version_number(l_trx_pmt_index)          := 1;

        /* special fields which need to be handled for pmtTable - record of table */

	IBY_PAYGROUP_PUB.pmtTable.declare_payment_flag(l_trx_pmt_index) := 'N';





	IBY_PAYGROUP_PUB.pmtTable.declaration_currency_code(l_trx_pmt_index) := NULL;

	IBY_PAYGROUP_PUB.pmtTable.bank_charge_amount(l_trx_pmt_index) :=0;
	--[ actually changed in postHook, bt b4 that insert happens]

	IBY_PAYGROUP_PUB.pmtTable.payment_reference_number(l_trx_pmt_index) :=NULL;
	IBY_PAYGROUP_PUB.pmtTable.paper_document_number(l_trx_pmt_index)    :=NULL;

	IBY_PAYGROUP_PUB.pmtTable.bank_assigned_ref_code(l_trx_pmt_index)   := NULL;
	IBY_PAYGROUP_PUB.pmtTable.bank_instruction_details(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.maturity_date(l_trx_pmt_index)	    := NULL;

	--[ calculated in performMatDateCalc, but conditionally]
	IBY_PAYGROUP_PUB.pmtTable.document_category_code(l_trx_pmt_index)   :=NULL;
	IBY_PAYGROUP_PUB.pmtTable.document_sequence_id(l_trx_pmt_index)	    :=NULL;
	IBY_PAYGROUP_PUB.pmtTable.document_sequence_value(l_trx_pmt_index):= NULL;

	IBY_PAYGROUP_PUB.pmtTable.stop_confirmed_by(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_confirm_date(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_confirm_reason(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_confirm_reference(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_released_by(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_release_date(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_release_reason(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_release_reference(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_request_date(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_request_placed_by(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_request_reason(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_request_reference(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.voided_by(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.void_date(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.void_reason(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.completed_pmts_group_id(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute_category(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute1(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute2(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute3(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute4(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute5(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute6(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute7(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute8(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute9(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute10(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute11(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute12(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute13(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute14(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute15(l_trx_pmt_index):= NULL;

  -- better option to initialize the payee address details here rather in GET_PAYEE_ADDRESS_INFO
 	IBY_PAYGROUP_PUB.pmtTable.payee_address1(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_address2(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_address3(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_address4(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_city(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_county(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_province(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_state(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_country(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_postal_code(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_address_concat(l_trx_pmt_index) := NULL;

   -- better option to initialize the payee address details here rather in GET_VENDOR_INFO
  IBY_PAYGROUP_PUB.pmtTable.payee_site_alternate_name(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_number(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_first_party_reference(l_trx_pmt_index)	:= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_attr_category(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_id(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_tax_registration_num(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_le_registration_num(l_trx_pmt_index) := NULL;



         /*
          * Fix for bug 5115270:
          *
          * For all flags, take care not to overwite the flag
          * already set.
          */
	 /*

         x_paymentRec.payments_complete_flag         :=
             NVL(x_paymentRec.payments_complete_flag,         'N');
         x_paymentRec.bill_payable_flag              :=
             NVL(x_paymentRec.bill_payable_flag,              'N');
         x_paymentRec.exclusive_payment_flag         :=
             NVL(x_paymentRec.exclusive_payment_flag,         'N');
         x_paymentRec.separate_remit_advice_req_flag :=
             NVL(x_paymentRec.separate_remit_advice_req_flag, 'N');
         x_paymentRec.declare_payment_flag           :=
             NVL(x_paymentRec.declare_payment_flag,           'N');
         x_paymentRec.pregrouped_payment_flag        :=
             NVL(x_paymentRec.pregrouped_payment_flag,        'N');
         x_paymentRec.stop_confirmed_flag            :=
             NVL(x_paymentRec.stop_confirmed_flag,            'N');
         x_paymentRec.stop_released_flag             :=
             NVL(x_paymentRec.stop_released_flag,             'N');
         x_paymentRec.stop_request_placed_flag       :=
             NVL(x_paymentRec.stop_request_placed_flag,       'N');

         x_paymentRec.created_by                     := fnd_global.user_id;
         x_paymentRec.creation_date                  := sysdate;
         x_paymentRec.last_updated_by                := fnd_global.user_id;
         x_paymentRec.last_update_login              := fnd_global.user_id;
         x_paymentRec.last_update_date               := sysdate;
         x_paymentRec.object_version_number          := 1;

	 */


   /* moving the paymentrecord to x_paymentTab after initializing the values */

        -- x_paymentTab(x_paymentTab.COUNT + 1) := x_paymentRec;




     ELSE

         /*
          * This means we need to add the incoming document to
          * the current  payment.
          */

         /*
          * First check special case: Payments PLSQL table is empty
          *
          * If the PLSQL table for payments is empty, we have to
          * initialize it by inserting a dummy record. This dummy
          * record will get overwritten below.
          */
       --  IF (x_paymentTab.COUNT = 0) THEN
       IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	  print_debuginfo(l_module_name, 'Before checking for NULL value in pmtTable ');
          print_debuginfo(l_module_name, 'IBY_PAYGROUP_PUB.pmtTable.payment_id(1) -  '|| IBY_PAYGROUP_PUB.pmtTable.payment_id.COUNT);
     END IF;
	  IF (IBY_PAYGROUP_PUB.pmtTable.payment_id.COUNT = 0) THEN

             getNextPaymentID(x_currentPaymentID);

	     print_debuginfo(l_module_name, 'Before incrementing - '||l_trx_pmt_index);
	     l_trx_pmt_index := l_trx_pmt_index +1;

	     print_debuginfo(l_module_name, 'Before initializing,l_trx_index  -  '|| l_trx_pmt_index);
             initialize_pmt_table(l_trx_pmt_index);

	     IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_pmt_index)              := x_currentPaymentId;
             x_docsInPmtCount                     := 0;

             IBY_PAYGROUP_PUB.pmtTable.payment_amount(l_trx_pmt_index)          := 0;
             IBY_PAYGROUP_PUB.pmtTable.discount_amount_taken(l_trx_pmt_index)   :=  0;
             IBY_PAYGROUP_PUB.pmtTable.payment_details(l_trx_pmt_index)         := '';

--        IBY_PAYGROUP_PUB.pmtTable.sep_remit_advice_req_flag(l_trx_pmt_index)	  :=NULL;
	IBY_PAYGROUP_PUB.pmtTable.payment_instruction_id(l_trx_pmt_index)         :=NULL;
	IBY_PAYGROUP_PUB.pmtTable.anticipated_value_date(l_trx_pmt_index)         :=NULL;
	IBY_PAYGROUP_PUB.pmtTable.declaration_amount(l_trx_pmt_index)             :=0;

       /* special fields which need to be handled for pmtTable - record of table */

	IBY_PAYGROUP_PUB.pmtTable.declare_payment_flag(l_trx_pmt_index) := 'N' ;





	IBY_PAYGROUP_PUB.pmtTable.declaration_currency_code(l_trx_pmt_index) := NULL;

	IBY_PAYGROUP_PUB.pmtTable.bank_charge_amount(l_trx_pmt_index) :=0;
	--[ actually changed in postHook, bt b4 that insert happens]

	IBY_PAYGROUP_PUB.pmtTable.payment_reference_number(l_trx_pmt_index) :=NULL;
	IBY_PAYGROUP_PUB.pmtTable.paper_document_number(l_trx_pmt_index)    :=NULL;

	IBY_PAYGROUP_PUB.pmtTable.bank_assigned_ref_code(l_trx_pmt_index)   := NULL;
	IBY_PAYGROUP_PUB.pmtTable.bank_instruction_details(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.maturity_date(l_trx_pmt_index)	    := NULL;

	--[ calculated in performMatDateCalc, but conditionally]
	IBY_PAYGROUP_PUB.pmtTable.document_category_code(l_trx_pmt_index)   :=NULL;
	IBY_PAYGROUP_PUB.pmtTable.document_sequence_id(l_trx_pmt_index)	    :=NULL;
	IBY_PAYGROUP_PUB.pmtTable.document_sequence_value(l_trx_pmt_index):= NULL;

	IBY_PAYGROUP_PUB.pmtTable.stop_confirmed_by(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_confirm_date(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_confirm_reason(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_confirm_reference(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_released_by(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_release_date(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_release_reason(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_release_reference(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_request_date(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_request_placed_by(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_request_reason(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_request_reference(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.voided_by(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.void_date(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.void_reason(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.completed_pmts_group_id(l_trx_pmt_index):= NULL;


	IBY_PAYGROUP_PUB.pmtTable.attribute_category(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute1(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute2(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute3(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute4(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute5(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute6(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute7(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute8(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute9(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute10(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute11(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute12(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute13(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute14(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute15(l_trx_pmt_index):= NULL;


  -- better option to initialize the payee address details here rather in GET_PAYEE_ADDRESS_INFO
 	IBY_PAYGROUP_PUB.pmtTable.payee_address1(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_address2(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_address3(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_address4(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_city(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_county(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_province(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_state(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_country(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_postal_code(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_address_concat(l_trx_pmt_index) := NULL;

   -- better option to initialize the payee address details here rather in GET_VENDOR_INFO
  IBY_PAYGROUP_PUB.pmtTable.payee_site_alternate_name(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_number(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_first_party_reference(l_trx_pmt_index)	:= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_attr_category(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_id(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_tax_registration_num(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_le_registration_num(l_trx_pmt_index) := NULL;





	 /* moving the initalizePmts logic to this block, to avoid unnecessary looping through payments */

	 IBY_PAYGROUP_PUB.pmtTable.payment_status(l_trx_pmt_index)                 := 'CREATED';
	 IF(l_calling_app_procedure = 'IBY_DISBURSE_SINGLE_PMT_PKG') THEN
        IBY_PAYGROUP_PUB.pmtTable.process_type(l_trx_pmt_index)		  := 'IMMEDIATE';
        ELSE
	IBY_PAYGROUP_PUB.pmtTable.process_type(l_trx_pmt_index)		  := 'STANDARD';
        END IF;

	 /*
          * Fix for bug 5115270:
          *
          * For all flags, take care not to overwite the flag
          * already set.
          */
       print_debuginfo(l_module_name, 'Before checking for NVL at 5722');
  	 IBY_PAYGROUP_PUB.pmtTable.payments_complete_flag(l_trx_pmt_index)         := 'N';


	 IBY_PAYGROUP_PUB.pmtTable.bill_payable_flag(l_trx_pmt_index)              := 'N';
	 IBY_PAYGROUP_PUB.pmtTable.exclusive_payment_flag(l_trx_pmt_index)         := 'N';
	 IBY_PAYGROUP_PUB.pmtTable.sep_remit_advice_req_flag(l_trx_pmt_index) := 'N';
	 IBY_PAYGROUP_PUB.pmtTable.declare_payment_flag(l_trx_pmt_index)           := 'N';
	 IBY_PAYGROUP_PUB.pmtTable.pregrouped_payment_flag(l_trx_pmt_index)        := 'N';
	 IBY_PAYGROUP_PUB.pmtTable.stop_confirmed_flag(l_trx_pmt_index)            := 'N';
	 IBY_PAYGROUP_PUB.pmtTable.stop_released_flag(l_trx_pmt_index)             := 'N';
	 IBY_PAYGROUP_PUB.pmtTable.stop_request_placed_flag(l_trx_pmt_index)       := 'N';


	 print_debuginfo(l_module_name, 'Before initializing at 5742');

	 IBY_PAYGROUP_PUB.pmtTable.created_by(l_trx_pmt_index)                     := fnd_global.user_id;
	 IBY_PAYGROUP_PUB.pmtTable.creation_date(l_trx_pmt_index)                  := sysdate;
	 IBY_PAYGROUP_PUB.pmtTable.last_updated_by(l_trx_pmt_index)                := fnd_global.user_id;
	 IBY_PAYGROUP_PUB.pmtTable.last_update_login(l_trx_pmt_index)              := fnd_global.user_id;
	 IBY_PAYGROUP_PUB.pmtTable.last_update_date(l_trx_pmt_index)               := sysdate;
	 IBY_PAYGROUP_PUB.pmtTable.object_version_number(l_trx_pmt_index)          := 1;


             /*
              * Insert the first record into the table. This
              * is a dummy record.
              */
           --  x_paymentTab(x_paymentTab.COUNT + 1) := x_paymentRec;

	     	 /* Only pre-fill hardcoded grouping rule attributes */
         IBY_PAYGROUP_PUB.pmtTable.payment_profile_id(l_trx_pmt_index) :=x_paymentRec.payment_profile_id;
         IBY_PAYGROUP_PUB.pmtTable.payment_service_request_id(l_trx_pmt_index) :=x_paymentRec.payment_service_request_id;
	 IBY_PAYGROUP_PUB.pmtTable.internal_bank_account_id(l_trx_pmt_index) :=x_paymentRec.internal_bank_account_id;
         IBY_PAYGROUP_PUB.pmtTable.ext_payee_id(l_trx_pmt_index) :=x_paymentRec.ext_payee_id;
         IBY_PAYGROUP_PUB.pmtTable.payee_party_id(l_trx_pmt_index) :=x_paymentRec.payee_party_id;
          IBY_PAYGROUP_PUB.pmtTable.party_site_id(l_trx_pmt_index) :=x_paymentRec.party_site_id;
         IBY_PAYGROUP_PUB.pmtTable.supplier_site_id(l_trx_pmt_index) :=x_paymentRec.supplier_site_id;
	 IBY_PAYGROUP_PUB.pmtTable.ext_inv_payee_id(l_trx_pmt_index) :=x_paymentRec.ext_inv_payee_id;
         IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_id(l_trx_pmt_index) :=x_paymentRec.inv_payee_party_id;
         IBY_PAYGROUP_PUB.pmtTable.inv_party_site_id(l_trx_pmt_index) := x_paymentRec.inv_party_site_id;
         IBY_PAYGROUP_PUB.pmtTable.inv_supplier_site_id(l_trx_pmt_index) := x_paymentRec.inv_supplier_site_id;
         IBY_PAYGROUP_PUB.pmtTable.inv_beneficiary_party(l_trx_pmt_index) := x_paymentRec.inv_beneficiary_party;
         IBY_PAYGROUP_PUB.pmtTable.remit_to_location_id (l_trx_pmt_index) :=x_paymentRec.remit_to_location_id;
         IBY_PAYGROUP_PUB.pmtTable.payment_currency_code (l_trx_pmt_index) :=x_paymentRec.payment_currency_code;
         IBY_PAYGROUP_PUB.pmtTable.org_id(l_trx_pmt_index) :=x_paymentRec.org_id;
         IBY_PAYGROUP_PUB.pmtTable.org_type(l_trx_pmt_index) :=x_paymentRec.org_type;
         IBY_PAYGROUP_PUB.pmtTable.payment_method_code(l_trx_pmt_index) :=x_paymentRec.payment_method_code;
         IBY_PAYGROUP_PUB.pmtTable.payment_function(l_trx_pmt_index) :=x_paymentRec.payment_function;
         IBY_PAYGROUP_PUB.pmtTable.payment_date(l_trx_pmt_index) :=x_paymentRec.payment_date;
         IBY_PAYGROUP_PUB.pmtTable.beneficiary_party(l_trx_pmt_index) :=x_paymentRec.beneficiary_party;
         IBY_PAYGROUP_PUB.pmtTable.address_source(l_trx_pmt_index) :=x_paymentRec.address_source;
         IBY_PAYGROUP_PUB.pmtTable.employee_address_code(l_trx_pmt_index) :=x_paymentRec.employee_address_code;
         IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_pmt_index) :=x_paymentRec.employee_person_id;
         IBY_PAYGROUP_PUB.pmtTable.employee_address_id(l_trx_pmt_index) :=x_paymentRec.employee_address_id;
         IBY_PAYGROUP_PUB.pmtTable.employee_payment_flag(l_trx_pmt_index) :=x_paymentRec.employee_payment_flag;
         IBY_PAYGROUP_PUB.pmtTable.legal_entity_id(l_trx_pmt_index) :=x_paymentRec.legal_entity_id;
       	 IBY_PAYGROUP_PUB.pmtTable.payee_addressee(l_trx_pmt_index) :=NULL;

         IBY_PAYGROUP_PUB.pmtTable.external_bank_account_id(l_trx_pmt_index) :=x_paymentRec.external_bank_account_id;



         IBY_PAYGROUP_PUB.pmtTable.bill_payable_flag(l_trx_pmt_index) :=x_paymentRec.bill_payable_flag;



         IBY_PAYGROUP_PUB.pmtTable.pregrouped_payment_flag(l_trx_pmt_index) :=x_paymentRec.pregrouped_payment_flag;



         IBY_PAYGROUP_PUB.pmtTable.bank_instruction1_code(l_trx_pmt_index) :=x_paymentRec.bank_instruction1_code;
         IBY_PAYGROUP_PUB.pmtTable.bank_instruction2_code(l_trx_pmt_index) :=x_paymentRec.bank_instruction2_code;
         IBY_PAYGROUP_PUB.pmtTable.payment_text_message1(l_trx_pmt_index) :=x_paymentRec.payment_text_message1;
         IBY_PAYGROUP_PUB.pmtTable.payment_text_message2(l_trx_pmt_index) :=x_paymentRec.payment_text_message2;
         IBY_PAYGROUP_PUB.pmtTable.payment_text_message3(l_trx_pmt_index) :=x_paymentRec.payment_text_message3;






         IBY_PAYGROUP_PUB.pmtTable.bank_charge_bearer(l_trx_pmt_index) :=x_paymentRec.bank_charge_bearer;



         IBY_PAYGROUP_PUB.pmtTable.delivery_channel_code(l_trx_pmt_index) :=x_paymentRec.delivery_channel_code;



         IBY_PAYGROUP_PUB.pmtTable.settlement_priority(l_trx_pmt_index) :=x_paymentRec.settlement_priority;


         IBY_PAYGROUP_PUB.pmtTable.remittance_message1(l_trx_pmt_index) :=x_paymentRec.remittance_message1;
         IBY_PAYGROUP_PUB.pmtTable.remittance_message2(l_trx_pmt_index) :=x_paymentRec.remittance_message2;
         IBY_PAYGROUP_PUB.pmtTable.remittance_message3(l_trx_pmt_index) :=x_paymentRec.remittance_message3;




	 IBY_PAYGROUP_PUB.pmtTable.unique_remittance_identifier(l_trx_pmt_index) :=x_paymentRec.unique_remittance_identifier;
	 IBY_PAYGROUP_PUB.pmtTable.uri_check_digit(l_trx_pmt_index) :=x_paymentRec.uri_check_digit;


	 IBY_PAYGROUP_PUB.pmtTable.payment_due_date(l_trx_pmt_index) :=x_paymentRec.payment_due_date;


	 IBY_PAYGROUP_PUB.pmtTable.payment_reason_code(l_trx_pmt_index) :=x_paymentRec.payment_reason_code;
	 IBY_PAYGROUP_PUB.pmtTable.payment_reason_comments(l_trx_pmt_index) :=x_paymentRec.payment_reason_comments;



             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		print_debuginfo(l_module_name, 'Created a new payment: '
                 || x_currentPaymentId);
             END IF;

         END IF;	 -- pmtTable.payment_id.COUNT = 0

         print_debuginfo(l_module_name, 'Value of inv_payee_party_id in record group'
                 || 'is '
                 || x_paymentRec.inv_payee_party_id
                 );
         print_debuginfo(l_module_name, 'Value of inv_payee_party_id in pmt table'
                 || 'is '
                 || IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_id(l_trx_pmt_index)
                 );



         /*
          * The incoming document should be part of the current payment.
          * So add the document amount to the current payment
          * record and increment the document count for the current
          * payment record.
          */


         If (x_commonAttributes.due_date_common_flag = 'Y') THEN
            print_debuginfo(l_module_name, 'due_date_common_flag is Y');
            If (NVL(x_commonAttributes.prev_pmt_due_date,l_impossible_date) <> NVL(x_commonAttributes.curr_pmt_due_date, l_impossible_date))  THEN
               print_debuginfo(l_module_name, 'The values are different for due date');
                    x_commonAttributes.due_date_common_flag  := 'N';
                    IBY_PAYGROUP_PUB.pmtTable.payment_due_date(l_trx_pmt_index)            :=  '';

            ELSE
                    print_debuginfo(l_module_name, 'The values are not different for due date');
                    IBY_PAYGROUP_PUB.pmtTable.payment_due_date(l_trx_pmt_index)        := x_commonAttributes.curr_pmt_due_date;
            END IF;

         END IF;

         If (x_commonAttributes.delv_chnl_common_flag = 'Y') THEN
            print_debuginfo(l_module_name, 'delv_chnl_common_flag is Y');
            If (NVL(x_commonAttributes.prev_delivery_channel,0) <> NVL(x_commonAttributes.curr_delivery_channel, 0))  THEN
                         print_debuginfo(l_module_name, 'The values are different for delv_chnl');
                         x_commonAttributes.delv_chnl_common_flag := 'N';
                         IBY_PAYGROUP_PUB.pmtTable.delivery_channel_code(l_trx_pmt_index)   := '';

            ELSE
                        print_debuginfo(l_module_name, 'The values are not different for delv_chnl');
                        IBY_PAYGROUP_PUB.pmtTable.delivery_channel_code(l_trx_pmt_index)   := x_commonAttributes.curr_delivery_channel;
            END IF;
         END IF;

         If (x_commonAttributes.uri_common_flag = 'Y') THEN
               print_debuginfo(l_module_name, 'uri_common_flag is Y');
             IF (NVL(x_commonAttributes.prev_uri, 0) <> NVL(x_commonAttributes.prev_uri, 0) OR
                     NVL(x_commonAttributes.prev_uri_checkdigits, 0) <>
                         NVL(x_commonAttributes.curr_uri_checkdigits, 0)) THEN
                        print_debuginfo(l_module_name, 'The values are different for URI');
                        x_commonAttributes.uri_common_flag       := 'N';
                 IBY_PAYGROUP_PUB.pmtTable.unique_remittance_identifier(l_trx_pmt_index) := '';
		 IBY_PAYGROUP_PUB.pmtTable.uri_check_digit(l_trx_pmt_index)		 := '';
             ELSE
                 print_debuginfo(l_module_name, 'The values are not different for URI');
	         IBY_PAYGROUP_PUB.pmtTable.unique_remittance_identifier(l_trx_pmt_index) := x_commonAttributes.curr_uri;
                 IBY_PAYGROUP_PUB.pmtTable.uri_check_digit(l_trx_pmt_index)              := x_commonAttributes.curr_uri_checkdigits;

		 END IF;
         END IF;

         print_debuginfo(l_module_name, 'Outside the replacement code of sweepcommonattr');

	/*

         x_paymentRec.payment_id     :=  x_currentPaymentId;

         x_docsInPmtCount            := x_docsInPmtCount + 1;

         x_paymentRec.payment_amount :=
             x_paymentRec.payment_amount + iby_disburse_submit_pub_pkg.docspayTab.payment_amount(p_trx_line_index);

         x_paymentRec.discount_amount_taken   :=
             x_paymentRec.discount_amount_taken
                 + iby_disburse_submit_pub_pkg.docspayTab.payment_curr_discount_taken(p_trx_line_index);

	 */


 	 IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_pmt_index)     :=  x_currentPaymentId;

         x_docsInPmtCount            := x_docsInPmtCount + 1;

         IBY_PAYGROUP_PUB.pmtTable.payment_amount(l_trx_pmt_index) :=
             IBY_PAYGROUP_PUB.pmtTable.payment_amount(l_trx_pmt_index) + iby_disburse_submit_pub_pkg.docspayTab.payment_amount(p_trx_line_index);

         IBY_PAYGROUP_PUB.pmtTable.discount_amount_taken(l_trx_pmt_index)   :=
             IBY_PAYGROUP_PUB.pmtTable.discount_amount_taken(l_trx_pmt_index)
                 + iby_disburse_submit_pub_pkg.docspayTab.payment_curr_discount_taken(p_trx_line_index);

         /*
          * The payment details information is passed in by the caller.
          * If this value is null, it means that the caller does not
          * wish to use the grouping rule 'break payments according to
          * space available under payment details'. In such a case, do not
          * append the payment details from each document into the payment.
          */

	  /* Bug:9000573
	   * While rewriting the code, this part is not modified.
	   * Hence modifying...
         /*
         IF (p_calcDocInfo IS NOT NULL) THEN
          print_debuginfo(l_module_name, 'Inside p_calcDocInfo is not null');

             x_paymentRec.payment_details :=
                 x_paymentRec.payment_details || p_calcDocInfo;

         END IF;
         */

         IF (p_calcDocInfo IS NOT NULL) THEN
          print_debuginfo(l_module_name, 'Inside p_calcDocInfo is not null');

            IBY_PAYGROUP_PUB.pmtTable.payment_details(l_trx_pmt_index)   :=
             IBY_PAYGROUP_PUB.pmtTable.payment_details(l_trx_pmt_index)
                 || p_calcDocInfo;

         END IF;


         /*
          * Overwrite the current payment record in the
          * PLSQL payments table with the updated record.
          */

 	 -- Not needed as we are no more using x_paymentRec / x_paymentTab
         -- x_paymentTab(x_paymentTab.COUNT) := x_paymentRec;

	 --x_paymentTab(x_paymentTab.COUNT) := x_paymentRec;

        iby_disburse_submit_pub_pkg.docspayTab.payment_id(p_trx_line_index) := x_currentPaymentId;
        print_debuginfo(l_module_name, 'After assigning the current pmt id to the cache');

        print_debuginfo(l_module_name, 'IBY_PAYGROUP_PUB.pmtTable.legal_entity_id(l_trx_pmt_index)'|| IBY_PAYGROUP_PUB.pmtTable.legal_entity_id(l_trx_pmt_index));
     END IF;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'EXIT');
      END IF;

 END insertDocIntoPayment;



/*--------------------------------------------------------------------
 | NAME:
 |     insertPayments
 |
 | PURPOSE:
 |     Performs a bulk insert of all created payments from PLSQL
 |     table into IBY_PAYMENTS_ALL table.
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
  PROCEDURE insertPayments(
     p_paymentTab    IN paymentTabType
     )
 IS
 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME || '.insertPayments';
 TYPE tax_regis_num IS TABLE OF iby_payments_all.payee_tax_registration_num%TYPE INDEX BY BINARY_INTEGER;
 l_tax_registration_num tax_regis_num;
 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'ENTER');

     END IF;

     /* Normally, this shouldn't happen */
     IF (p_paymentTab.COUNT = 0) THEN
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'After grouping, no payments'
             || ' were found to insert into IBY_PAYMENTS_ALL table.'
             || ' Possible data corruption issue.');

         END IF;
         RETURN;
     END IF;

     /*
      * Copy values for each column into its corresponding column
      * array. These column arrays will be used in the bulk insert.
      */
     FOR i in p_paymentTab.FIRST..p_paymentTab.LAST LOOP

         paymentTab.payment_id(i)
             := p_paymentTab(i).payment_id;
         paymentTab.payment_method_code(i)
             := p_paymentTab(i).payment_method_code;
         paymentTab.payment_service_request_id(i)
             := p_paymentTab(i).payment_service_request_id;
         paymentTab.process_type(i)
             := NVL(p_paymentTab(i).process_type, 'STANDARD');
         paymentTab.payment_status(i)
             := NVL(p_paymentTab(i).payment_status, 'CREATED');
         paymentTab.payments_complete_flag(i)
             := NVL(p_paymentTab(i).payments_complete_flag, 'N');
         paymentTab.payment_function(i)
             := p_paymentTab(i).payment_function;
         paymentTab.payment_amount(i)
             := p_paymentTab(i).payment_amount;
         paymentTab.payment_currency_code(i)
             := p_paymentTab(i).payment_currency_code;
         paymentTab.bill_payable_flag(i)
             := NVL(p_paymentTab(i).bill_payable_flag, 'N');
         paymentTab.exclusive_payment_flag(i)
             := NVL(p_paymentTab(i).exclusive_payment_flag, 'N');
         paymentTab.sep_remit_advice_req_flag(i)
             := NVL(p_paymentTab(i).separate_remit_advice_req_flag, 'N');
         paymentTab.internal_bank_account_id(i)
             := p_paymentTab(i).internal_bank_account_id;
         paymentTab.org_id(i)
             := p_paymentTab(i).org_id;
         paymentTab.org_type(i)
             := p_paymentTab(i).org_type;
         paymentTab.legal_entity_id(i)
             := p_paymentTab(i).legal_entity_id;
         paymentTab.declare_payment_flag(i)
             := NVL(p_paymentTab(i).declare_payment_flag, 'N');
         paymentTab.delivery_channel_code(i)
             := p_paymentTab(i).delivery_channel_code;
         paymentTab.ext_payee_id(i)
             := p_paymentTab(i).ext_payee_id;
         paymentTab.payment_instruction_id(i)
             := p_paymentTab(i).payment_instruction_id;
         paymentTab.payment_profile_id(i)
             := p_paymentTab(i).payment_profile_id;
         paymentTab.pregrouped_payment_flag(i)
             := NVL(p_paymentTab(i).pregrouped_payment_flag, 'N');
         paymentTab.stop_confirmed_flag(i)
             := NVL(p_paymentTab(i).stop_confirmed_flag, 'N');
         paymentTab.stop_released_flag(i)
             := NVL(p_paymentTab(i).stop_released_flag, 'N');
         paymentTab.stop_request_placed_flag(i)
             := NVL(p_paymentTab(i).stop_request_placed_flag, 'N');
         paymentTab.created_by(i)
             := NVL(p_paymentTab(i).created_by, fnd_global.user_id);
         paymentTab.creation_date(i)
             := NVL(p_paymentTab(i).creation_date, sysdate);
         paymentTab.last_updated_by(i)
             := NVL(p_paymentTab(i).last_updated_by, fnd_global.user_id);
         paymentTab.last_update_login(i)
             := NVL(p_paymentTab(i).last_update_login, fnd_global.user_id);
         paymentTab.last_update_date(i)
             := NVL(p_paymentTab(i).last_update_date, sysdate);
         paymentTab.object_version_number(i)
             := NVL(p_paymentTab(i).object_version_number, 1);
         paymentTab.payee_party_id(i)
             := p_paymentTab(i).payee_party_id;
         paymentTab.party_site_id(i)
             := p_paymentTab(i).party_site_id;
         paymentTab.supplier_site_id(i)
             := p_paymentTab(i).supplier_site_id;
         paymentTab.payment_reason_code(i)
             := p_paymentTab(i).payment_reason_code;
         paymentTab.payment_reason_comments(i)
             := p_paymentTab(i).payment_reason_comments;
         paymentTab.payment_date(i)
             := p_paymentTab(i).payment_date;
         paymentTab.anticipated_value_date(i)
             := p_paymentTab(i).anticipated_value_date;
         paymentTab.declaration_amount(i)
             := p_paymentTab(i).declaration_amount;
         paymentTab.declaration_currency_code(i)
             := p_paymentTab(i).declaration_currency_code;
         paymentTab.discount_amount_taken(i)
             := p_paymentTab(i).discount_amount_taken;
         paymentTab.payment_details(i)
             := p_paymentTab(i).payment_details;
         paymentTab.bank_charge_bearer(i)
             := p_paymentTab(i).bank_charge_bearer;
         paymentTab.bank_charge_amount(i)
             := p_paymentTab(i).bank_charge_amount;
         paymentTab.settlement_priority(i)
             := p_paymentTab(i).settlement_priority;
         paymentTab.remittance_message1(i)
             := p_paymentTab(i).remittance_message1;
         paymentTab.remittance_message2(i)
             := p_paymentTab(i).remittance_message2;
         paymentTab.remittance_message3(i)
             := p_paymentTab(i).remittance_message3;
         paymentTab.payment_reference_number(i)
             := p_paymentTab(i).payment_reference_number;
         paymentTab.paper_document_number(i)
             := p_paymentTab(i).paper_document_number;
         paymentTab.bank_assigned_ref_code(i)
             := p_paymentTab(i).bank_assigned_ref_code;
         paymentTab.external_bank_account_id(i)
             := p_paymentTab(i).external_bank_account_id;
         paymentTab.unique_remittance_identifier(i)
             := p_paymentTab(i).unique_remittance_identifier;
         paymentTab.uri_check_digit(i)
             := p_paymentTab(i).uri_check_digit;
         paymentTab.bank_instruction1_code(i)
             := p_paymentTab(i).bank_instruction1_code;
         paymentTab.bank_instruction2_code(i)
             := p_paymentTab(i).bank_instruction2_code;
         paymentTab.bank_instruction_details(i)
             := p_paymentTab(i).bank_instruction_details;
         paymentTab.payment_text_message1(i)
             := p_paymentTab(i).payment_text_message1;
         paymentTab.payment_text_message2(i)
             := p_paymentTab(i).payment_text_message2;
         paymentTab.payment_text_message3(i)
             := p_paymentTab(i).payment_text_message3;
         paymentTab.maturity_date(i)
             := p_paymentTab(i).maturity_date;
         paymentTab.payment_due_date(i)
             := p_paymentTab(i).payment_due_date;
         paymentTab.document_category_code(i)
             := p_paymentTab(i).document_category_code;
         paymentTab.document_sequence_id(i)
             := p_paymentTab(i).document_sequence_id;
         paymentTab.document_sequence_value(i)
             := p_paymentTab(i).document_sequence_value;
         paymentTab.beneficiary_party(i)
             := p_paymentTab(i).beneficiary_party;
         paymentTab.stop_confirmed_by(i)
             := p_paymentTab(i).stop_confirmed_by;
         paymentTab.stop_confirm_date(i)
             := p_paymentTab(i).stop_confirm_date;
         paymentTab.stop_confirm_reason(i)
             := p_paymentTab(i).stop_confirm_reason;
         paymentTab.stop_confirm_reference(i)
             := p_paymentTab(i).stop_confirm_reference;
         paymentTab.stop_released_by(i)
             := p_paymentTab(i).stop_released_by;
         paymentTab.stop_release_date(i)
             := p_paymentTab(i).stop_release_date;
         paymentTab.stop_release_reason(i)
             := p_paymentTab(i).stop_release_reason;
         paymentTab.stop_release_reference(i)
             := p_paymentTab(i).stop_release_reference;
         paymentTab.stop_request_date(i)
             := p_paymentTab(i).stop_request_date;
         paymentTab.stop_request_placed_by(i)
             := p_paymentTab(i).stop_request_placed_by;
         paymentTab.stop_request_reason(i)
             := p_paymentTab(i).stop_request_reason;
         paymentTab.stop_request_reference(i)
             := p_paymentTab(i).stop_request_reference;
         paymentTab.voided_by(i)
             := p_paymentTab(i).voided_by;
         paymentTab.void_date(i)
             := p_paymentTab(i).void_date;
         paymentTab.void_reason(i)
             := p_paymentTab(i).void_reason;
         paymentTab.remit_to_location_id(i)
             := p_paymentTab(i).remit_to_location_id;
         paymentTab.completed_pmts_group_id(i)
             := p_paymentTab(i).completed_pmts_group_id;
         paymentTab.attribute_category(i)
             := p_paymentTab(i).attribute_category;
         paymentTab.attribute1(i)
             := p_paymentTab(i).attribute1;
         paymentTab.attribute2(i)
             := p_paymentTab(i).attribute2;
         paymentTab.attribute3(i)
             := p_paymentTab(i).attribute3;
         paymentTab.attribute4(i)
             := p_paymentTab(i).attribute4;
         paymentTab.attribute5(i)
             := p_paymentTab(i).attribute5;
         paymentTab.attribute6(i)
             := p_paymentTab(i).attribute6;
         paymentTab.attribute7(i)
             := p_paymentTab(i).attribute7;
         paymentTab.attribute8(i)
             := p_paymentTab(i).attribute8;
         paymentTab.attribute9(i)
             := p_paymentTab(i).attribute9;
         paymentTab.attribute10(i)
             := p_paymentTab(i).attribute10;
         paymentTab.attribute11(i)
             := p_paymentTab(i).attribute11;
         paymentTab.attribute12(i)
             := p_paymentTab(i).attribute12;
         paymentTab.attribute13(i)
             := p_paymentTab(i).attribute13;
         paymentTab.attribute14(i)
             := p_paymentTab(i).attribute14;
         paymentTab.attribute15(i)
             := p_paymentTab(i).attribute15;
         paymentTab.ext_branch_number(i)
             := p_paymentTab(i).ext_branch_number;
         paymentTab.ext_bank_number(i)
             := p_paymentTab(i).ext_bank_number;
         paymentTab.ext_bank_account_name(i)
             := p_paymentTab(i).ext_bank_account_name;
         paymentTab.ext_bank_account_number(i)
             := p_paymentTab(i).ext_bank_account_number;
         paymentTab.ext_bank_account_type(i)
             := p_paymentTab(i).ext_bank_account_type;
         paymentTab.ext_bank_account_iban_number(i)
             := p_paymentTab(i).ext_bank_account_iban_number;
         paymentTab.payee_name(i)
             := p_paymentTab(i).payee_name;
         paymentTab.payee_address1(i)
             := p_paymentTab(i).payee_address1;
         paymentTab.payee_address2(i)
             := p_paymentTab(i).payee_address2;
         paymentTab.payee_address3(i)
             := p_paymentTab(i).payee_address3;
         paymentTab.payee_address4(i)
             := p_paymentTab(i).payee_address4;
         paymentTab.payee_city(i)
             := p_paymentTab(i).payee_city;
         paymentTab.payee_postal_code(i)
             := p_paymentTab(i).payee_postal_code;
         paymentTab.payee_state(i)
             := p_paymentTab(i).payee_state;
         paymentTab.payee_province(i)
             := p_paymentTab(i).payee_province;
         paymentTab.payee_county(i)
             := p_paymentTab(i).payee_county;
         paymentTab.payee_country(i)
             := p_paymentTab(i).payee_country;
         paymentTab.remit_advice_delivery_method(i)
             := p_paymentTab(i).remit_advice_delivery_method;
         paymentTab.remit_advice_email(i)
             := p_paymentTab(i).remit_advice_email;
         paymentTab.remit_advice_fax(i)
             := p_paymentTab(i).remit_advice_fax;
         paymentTab.address_source(i)
             := p_paymentTab(i).address_source;
         paymentTab.employee_address_code(i)
             := p_paymentTab(i).employee_address_code;
         paymentTab.employee_person_id(i)
             := p_paymentTab(i).employee_person_id;
         paymentTab.employee_address_id(i)
             := p_paymentTab(i).employee_address_id;
         paymentTab.employee_payment_flag(i)
             := p_paymentTab(i).employee_payment_flag;

paymentTab.ext_inv_payee_id(i)
             := p_paymentTab(i).ext_inv_payee_id;
paymentTab.inv_payee_party_id(i)
             := p_paymentTab(i).inv_payee_party_id;
paymentTab.inv_party_site_id(i)
             := p_paymentTab(i).inv_party_site_id;
paymentTab.inv_supplier_site_id(i)
             := p_paymentTab(i).inv_supplier_site_id;
paymentTab.inv_beneficiary_party(i)
             := p_paymentTab(i).inv_beneficiary_party;
paymentTab.inv_payee_name(i)
             := p_paymentTab(i).inv_payee_name;
paymentTab.inv_payee_address1(i)
             := p_paymentTab(i).inv_payee_address1;
paymentTab.inv_payee_address2(i)
             := p_paymentTab(i).inv_payee_address2;
paymentTab.inv_payee_address3(i)
             := p_paymentTab(i).inv_payee_address3;
paymentTab.inv_payee_address4(i)
             := p_paymentTab(i).inv_payee_address4;
paymentTab.inv_payee_city(i)
             := p_paymentTab(i).inv_payee_city;
paymentTab.inv_payee_postal_code(i)
             := p_paymentTab(i).inv_payee_postal_code;
paymentTab.inv_payee_state(i)
             := p_paymentTab(i).inv_payee_state;
paymentTab.inv_payee_province(i)
             := p_paymentTab(i).inv_payee_province;
paymentTab.inv_payee_county(i)
             := p_paymentTab(i).inv_payee_county;
paymentTab.inv_payee_country(i)
             := p_paymentTab(i).inv_payee_country;
paymentTab.inv_payee_party_name(i)
             := p_paymentTab(i).inv_payee_party_name;
paymentTab.inv_payee_le_reg_num(i)
             := p_paymentTab(i).inv_payee_le_reg_num;
paymentTab.inv_payee_tax_reg_num(i)
             := p_paymentTab(i).inv_payee_tax_reg_num;
paymentTab.inv_payee_address_concat(i)
             := p_paymentTab(i).inv_payee_address_concat;
paymentTab.inv_beneficiary_name(i)
             := p_paymentTab(i).inv_beneficiary_name;
paymentTab.inv_payee_party_number(i)
             := p_paymentTab(i).inv_payee_party_number;
paymentTab.inv_payee_alternate_name(i)
             := p_paymentTab(i).inv_payee_alternate_name;
paymentTab.inv_payee_site_alt_name(i)
             := p_paymentTab(i).inv_payee_site_alt_name;
paymentTab.inv_payee_supplier_number(i)
             := p_paymentTab(i).inv_payee_supplier_number;
paymentTab.inv_payee_first_party_ref(i)
             := p_paymentTab(i).inv_payee_first_party_ref;
paymentTab.ext_bnk_acct_ownr_inv_prty_id(i)
             := p_paymentTab(i).ext_bnk_acct_ownr_inv_prty_id;
paymentTab.ext_bnk_branch_inv_prty_id(i)
             := p_paymentTab(i).ext_bnk_branch_inv_prty_id;
paymentTab.ext_bnk_acct_ownr_inv_prty_nme(i)
             := p_paymentTab(i).ext_bnk_acct_ownr_inv_prty_nme;
paymentTab.inv_payee_party_attr_cat(i)
             := p_paymentTab(i).inv_payee_party_attr_cat;
paymentTab.inv_payee_supplier_attr_cat(i)
             := p_paymentTab(i).inv_payee_supplier_attr_cat;
paymentTab.inv_payee_spplr_site_attr_cat(i)
             := p_paymentTab(i).inv_payee_spplr_site_attr_cat;
paymentTab.inv_payee_supplier_site_name(i)
             := p_paymentTab(i).inv_payee_supplier_site_name;
paymenttab.inv_payee_spplr_site_alt_name(i)
             := p_paymenttab(i).inv_payee_spplr_site_alt_name;
paymenttab.inv_payee_supplier_id(i)
             := p_paymenttab(i).inv_payee_supplier_id;


       IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'for loop value of i::'||i);

       END IF;

	 l_tax_registration_num(i) := NULL;
          --Bug 7215055
	  IF p_paymentTab(i).supplier_site_id IS NOT NULL
	  THEN
	    BEGIN
              SELECT vat_registration_num
              INTO l_tax_registration_num(i)
              FROM ap_supplier_sites_all
              WHERE vendor_site_id = p_paymentTab(i).supplier_site_id;

	    EXCEPTION
	      WHEN NO_DATA_FOUND
		THEN
		 BEGIN
                  SELECT asup.vat_registration_num
                  INTO l_tax_registration_num(i)
                  FROM ap_suppliers asup
	          ,    ap_supplier_sites_all asups
                  WHERE asups.vendor_site_id = p_paymentTab(i).supplier_site_id
	          AND   asup.vendor_id = asups.vendor_id;
		 EXCEPTION
		   WHEN OTHERS THEN
                   l_tax_registration_num(i) := NULL;
		   IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'VAT_EXCEPTION::'||sqlerrm);
                  END IF;
		 END;
	      WHEN OTHERS THEN
                l_tax_registration_num(i) := NULL;
		       IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'VAT_EXCEPTION::'||sqlerrm);
	               END IF;
	    END;
	  END IF;

     END LOOP;


     /*
      * Bulk insert into IBY_PAYMENTS_ALL table using the
      * named columns syntax. This avoids any dependencies on
      * column order.
      */
     FORALL i in nvl(paymentTab.payment_id.FIRST,0) .. nvl(paymentTab.payment_id.LAST,-99)
     INSERT INTO IBY_PAYMENTS_ALL
             (
             payment_id,
             payment_method_code,
             payment_service_request_id,
             process_type,
             payment_status,
             payments_complete_flag,
             payment_function,
             payment_amount,
             payment_currency_code,
             bill_payable_flag,
             exclusive_payment_flag,
             separate_remit_advice_req_flag,
             internal_bank_account_id,
             org_id,
             org_type,
             legal_entity_id,
             declare_payment_flag,
             delivery_channel_code,
             ext_payee_id,
             payment_instruction_id,
             payment_profile_id,
             pregrouped_payment_flag,
             stop_confirmed_flag,
             stop_released_flag,
             stop_request_placed_flag,
             created_by,
             creation_date,
             last_updated_by,
             last_update_login,
             last_update_date,
             object_version_number,
             payee_party_id,
             party_site_id,
             supplier_site_id,
             payment_reason_code,
             payment_reason_comments,
             payment_date,
             anticipated_value_date,
             declaration_amount,
             declaration_currency_code,
             discount_amount_taken,
             payment_details,
             bank_charge_bearer,
             bank_charge_amount,
             settlement_priority,
             remittance_message1,
             remittance_message2,
             remittance_message3,
             payment_reference_number,
             paper_document_number,
             bank_assigned_ref_code,
             external_bank_account_id,
             unique_remittance_identifier,
             uri_check_digit,
             bank_instruction1_code,
             bank_instruction2_code,
             bank_instruction_details,
             payment_text_message1,
             payment_text_message2,
             payment_text_message3,
             maturity_date,
             payment_due_date,
             document_category_code,
             document_sequence_id,
             document_sequence_value,
             beneficiary_party,
             stop_confirmed_by,
             stop_confirm_date,
             stop_confirm_reason,
             stop_confirm_reference,
             stop_released_by,
             stop_release_date,
             stop_release_reason,
             stop_release_reference,
             stop_request_date,
             stop_request_placed_by,
             stop_request_reason,
             stop_request_reference,
             voided_by,
             void_date,
             void_reason,
             remit_to_location_id,
             completed_pmts_group_id,
             attribute_category,
             attribute1,
             attribute2,
             attribute3,
             attribute4,
             attribute5,
             attribute6,
             attribute7,
             attribute8,
             attribute9,
             attribute10,
             attribute11,
             attribute12,
             attribute13,
             attribute14,
             attribute15,
             ext_branch_number,
             ext_bank_number,
             ext_bank_account_name,
             ext_bank_account_number,
             ext_bank_account_type,
             ext_bank_account_iban_number,
             payee_name,
             payee_address1,
             payee_address2,
             payee_address3,
             payee_address4,
             payee_city,
             payee_postal_code,
             payee_state,
             payee_province,
             payee_county,
             payee_country,
             remit_advice_delivery_method,
             remit_advice_email,
             remit_advice_fax,
             address_source,
             employee_address_code,
             employee_person_id,
             employee_address_id,
             employee_payment_flag,
	     payee_tax_registration_num,
		ext_inv_payee_id ,
		inv_payee_party_id ,
		inv_party_site_id ,
		inv_supplier_site_id ,
		inv_beneficiary_party ,
		inv_payee_name ,
		inv_payee_address1 ,
		inv_payee_address2 ,
		inv_payee_address3 ,
		inv_payee_address4 ,
		inv_payee_city ,
		inv_payee_postal_code ,
		inv_payee_state ,
		inv_payee_province ,
		inv_payee_county ,
		inv_payee_country ,
		inv_payee_party_name ,
		inv_payee_le_reg_num,
		inv_payee_tax_reg_num,
		inv_payee_address_concat ,
		inv_beneficiary_name ,
		inv_payee_party_number ,
		inv_payee_alternate_name ,
		inv_payee_site_alt_name,
		inv_payee_supplier_number ,
		inv_payee_first_party_ref,
		ext_bnk_acct_ownr_inv_prty_id,
		ext_bnk_branch_inv_prty_id,
		ext_bnk_acct_ownr_inv_prty_nme,
		inv_payee_party_attr_cat,
		inv_payee_supplier_attr_cat,
		inv_payee_spplr_site_attr_cat,
		inv_payee_supplier_site_name ,
		inv_payee_spplr_site_alt_name,
		inv_payee_supplier_id
             )
         VALUES
             (
             paymentTab.payment_id(i),
             paymentTab.payment_method_code(i),
             paymentTab.payment_service_request_id(i),
             paymentTab.process_type(i),
             paymentTab.payment_status(i),
             paymentTab.payments_complete_flag(i),
             paymentTab.payment_function(i),
             paymentTab.payment_amount(i),
             paymentTab.payment_currency_code(i),
             paymentTab.bill_payable_flag(i),
             paymentTab.exclusive_payment_flag(i),
             paymentTab.sep_remit_advice_req_flag(i),
             paymentTab.internal_bank_account_id(i),
             paymentTab.org_id(i),
             paymentTab.org_type(i),
             paymentTab.legal_entity_id(i),
             paymentTab.declare_payment_flag(i),
             paymentTab.delivery_channel_code(i),
             paymentTab.ext_payee_id(i),
             paymentTab.payment_instruction_id(i),
             paymentTab.payment_profile_id(i),
             paymentTab.pregrouped_payment_flag(i),
             paymentTab.stop_confirmed_flag(i),
             paymentTab.stop_released_flag(i),
             paymentTab.stop_request_placed_flag(i),
             paymentTab.created_by(i),
             paymentTab.creation_date(i),
             paymentTab.last_updated_by(i),
             paymentTab.last_update_login(i),
             paymentTab.last_update_date(i),
             paymentTab.object_version_number(i),
             paymentTab.payee_party_id(i),
             paymentTab.party_site_id(i),
             paymentTab.supplier_site_id(i),
             paymentTab.payment_reason_code(i),
             paymentTab.payment_reason_comments(i),
             paymentTab.payment_date(i),
             paymentTab.anticipated_value_date(i),
             paymentTab.declaration_amount(i),
             paymentTab.declaration_currency_code(i),
             paymentTab.discount_amount_taken(i),
             paymentTab.payment_details(i),
             paymentTab.bank_charge_bearer(i),
             paymentTab.bank_charge_amount(i),
             paymentTab.settlement_priority(i),
             paymentTab.remittance_message1(i),
             paymentTab.remittance_message2(i),
             paymentTab.remittance_message3(i),
             paymentTab.payment_reference_number(i),
             paymentTab.paper_document_number(i),
             paymentTab.bank_assigned_ref_code(i),
             paymentTab.external_bank_account_id(i),
             paymentTab.unique_remittance_identifier(i),
             paymentTab.uri_check_digit(i),
             paymentTab.bank_instruction1_code(i),
             paymentTab.bank_instruction2_code(i),
             paymentTab.bank_instruction_details(i),
             paymentTab.payment_text_message1(i),
             paymentTab.payment_text_message2(i),
             paymentTab.payment_text_message3(i),
             paymentTab.maturity_date(i),
             paymentTab.payment_due_date(i),
             paymentTab.document_category_code(i),
             paymentTab.document_sequence_id(i),
             paymentTab.document_sequence_value(i),
             paymentTab.beneficiary_party(i),
             paymentTab.stop_confirmed_by(i),
             paymentTab.stop_confirm_date(i),
             paymentTab.stop_confirm_reason(i),
             paymentTab.stop_confirm_reference(i),
             paymentTab.stop_released_by(i),
             paymentTab.stop_release_date(i),
             paymentTab.stop_release_reason(i),
             paymentTab.stop_release_reference(i),
             paymentTab.stop_request_date(i),
             paymentTab.stop_request_placed_by(i),
             paymentTab.stop_request_reason(i),
             paymentTab.stop_request_reference(i),
             paymentTab.voided_by(i),
             paymentTab.void_date(i),
             paymentTab.void_reason(i),
             paymentTab.remit_to_location_id(i),
             paymentTab.completed_pmts_group_id(i),
             paymentTab.attribute_category(i),
             paymentTab.attribute1(i),
             paymentTab.attribute2(i),
             paymentTab.attribute3(i),
             paymentTab.attribute4(i),
             paymentTab.attribute5(i),
             paymentTab.attribute6(i),
             paymentTab.attribute7(i),
             paymentTab.attribute8(i),
             paymentTab.attribute9(i),
             paymentTab.attribute10(i),
             paymentTab.attribute11(i),
             paymentTab.attribute12(i),
             paymentTab.attribute13(i),
             paymentTab.attribute14(i),
             paymentTab.attribute15(i),
             paymentTab.ext_branch_number(i),
             paymentTab.ext_bank_number(i),
             paymentTab.ext_bank_account_name(i),
             paymentTab.ext_bank_account_number(i),
             paymentTab.ext_bank_account_type(i),
             paymentTab.ext_bank_account_iban_number(i),
             paymentTab.payee_name(i),
             paymentTab.payee_address1(i),
             paymentTab.payee_address2(i),
             paymentTab.payee_address3(i),
             paymentTab.payee_address4(i),
             paymentTab.payee_city(i),
             paymentTab.payee_postal_code(i),
             paymentTab.payee_state(i),
             paymentTab.payee_province(i),
             paymentTab.payee_county(i),
             paymentTab.payee_country(i),
             paymentTab.remit_advice_delivery_method(i),
             paymentTab.remit_advice_email(i),
             paymentTab.remit_advice_fax(i),
             paymentTab.address_source(i),
             paymentTab.employee_address_code(i),
             paymentTab.employee_person_id(i),
             paymentTab.employee_address_id(i),
             paymentTab.employee_payment_flag(i),
	     l_tax_registration_num(i),
paymentTab.ext_inv_payee_id(i),
paymentTab.inv_payee_party_id(i),
paymentTab.inv_party_site_id(i),
paymentTab.inv_supplier_site_id(i),
paymentTab.inv_beneficiary_party(i),
paymentTab.inv_payee_name(i),
paymentTab.inv_payee_address1(i),
paymentTab.inv_payee_address2(i),
paymentTab.inv_payee_address3(i),
paymentTab.inv_payee_address4(i),
paymentTab.inv_payee_city(i),
paymentTab.inv_payee_postal_code(i),
paymentTab.inv_payee_state(i),
paymentTab.inv_payee_province(i),
paymentTab.inv_payee_county(i),
paymentTab.inv_payee_country(i),
paymentTab.inv_payee_party_name(i),
paymentTab.inv_payee_le_reg_num(i),
paymentTab.inv_payee_tax_reg_num(i),
paymentTab.inv_payee_address_concat(i),
paymentTab.inv_beneficiary_name(i),
paymentTab.inv_payee_party_number(i),
paymentTab.inv_payee_alternate_name(i),
paymentTab.inv_payee_site_alt_name(i),
paymentTab.inv_payee_supplier_number(i),
paymentTab.inv_payee_first_party_ref(i),
paymentTab.ext_bnk_acct_ownr_inv_prty_id(i),
paymentTab.ext_bnk_branch_inv_prty_id(i),
paymentTab.ext_bnk_acct_ownr_inv_prty_nme(i),
paymentTab.inv_payee_party_attr_cat(i),
paymentTab.inv_payee_supplier_attr_cat(i),
paymentTab.inv_payee_spplr_site_attr_cat(i),
paymentTab.inv_payee_supplier_site_name(i),
paymenttab.inv_payee_spplr_site_alt_name(i),
paymenttab.inv_payee_supplier_id(i)

             );

             delete_paymentTab;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'EXIT');
     END IF;
 END insertPayments;




/*--------------------------------------------------------------------
 | NAME:
 |     insertPayments
 |
 | PURPOSE:
 |     Performs a bulk insert of all created payments from PLSQL
 |     table into IBY_PAYMENTS_ALL table.
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
  PROCEDURE insertPayments
 IS
 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME || '.insertPayments';
 TYPE tax_regis_num IS TABLE OF iby_payments_all.payee_tax_registration_num%TYPE INDEX BY BINARY_INTEGER;
 l_tax_registration_num tax_regis_num;
 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'ENTER');
      END IF;

     /* Normally, this shouldn't happen */
    /*
    IF (p_paymentTab.COUNT = 0) THEN
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'After grouping, no payments'
             || ' were found to insert into IBY_PAYMENTS_ALL table.'
             || ' Possible data corruption issue.');

         END IF;
         RETURN;
     END IF;
     */


     /*
      * Copy values for each column into its corresponding column
      * array. These column arrays will be used in the bulk insert.
      */
    /* Removing the code to copy data into paymentTab, as we
     * already have record of table to directly copy into
     * IBY_PAYMENTS_ALL table */



     /*
      * Bulk insert into IBY_PAYMENTS_ALL table using the
      * named columns syntax. This avoids any dependencies on
      * column order.
      */
     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         FOR i in nvl(IBY_PAYGROUP_PUB.pmtTable.payment_id.FIRST,0) .. nvl(IBY_PAYGROUP_PUB.pmtTable.payment_id.LAST,-99) LOOP

                /*
                 print_debuginfo(l_module_name, IBY_PAYGROUP_PUB.pmtTable.payment_id(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_method_code(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_service_request_id(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.process_type(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_status(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payments_complete_flag(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_function(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_amount(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_currency_code(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.bill_payable_flag(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.exclusive_payment_flag(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.sep_remit_advice_req_flag(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.internal_bank_account_id(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.org_id(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.org_type(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.legal_entity_id(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.declare_payment_flag(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.delivery_channel_code(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.ext_payee_id(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_instruction_id(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_profile_id(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.pregrouped_payment_flag(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.stop_confirmed_flag(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.stop_released_flag(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.stop_request_placed_flag(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.created_by(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.creation_date(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.last_updated_by(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.last_update_login(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.last_update_date(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.object_version_number(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payee_party_id(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.party_site_id(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.supplier_site_id(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_reason_code(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_reason_comments(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_date(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.anticipated_value_date(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.declaration_amount(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.declaration_currency_code(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.discount_amount_taken(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_details(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.bank_charge_bearer(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.bank_charge_amount(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.settlement_priority(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.remittance_message1(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.remittance_message2(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.remittance_message3(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_reference_number(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.paper_document_number(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.bank_assigned_ref_code(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.external_bank_account_id(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.unique_remittance_identifier(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.uri_check_digit(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.bank_instruction1_code(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.bank_instruction2_code(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.bank_instruction_details(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_text_message1(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_text_message2(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_text_message3(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.maturity_date(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_due_date(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.document_category_code(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.document_sequence_id(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.document_sequence_value(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.beneficiary_party(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.stop_confirmed_by(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.stop_confirm_date(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.stop_confirm_reason(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.stop_confirm_reference(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.stop_released_by(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.stop_release_date(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.stop_release_reason(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.stop_release_reference(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.stop_request_date(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.stop_request_placed_by(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.stop_request_reason(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.stop_request_reference(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.voided_by(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.void_date(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.void_reason(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.remit_to_location_id(i));
                print_debuginfo(l_module_name, IBY_PAYGROUP_PUB.pmtTable.completed_pmts_group_id(i));
                 print_debuginfo(l_module_name,'7083'||IBY_PAYGROUP_PUB.pmtTable.attribute_category(i));
                 print_debuginfo(l_module_name,'7084'||IBY_PAYGROUP_PUB.pmtTable.attribute1(i));
                 print_debuginfo(l_module_name,'7085'||IBY_PAYGROUP_PUB.pmtTable.attribute2(i));
                 print_debuginfo(l_module_name,'7086'||IBY_PAYGROUP_PUB.pmtTable.attribute3(i));
                 print_debuginfo(l_module_name,'7087'||IBY_PAYGROUP_PUB.pmtTable.attribute4(i));
                 print_debuginfo(l_module_name,'7088'||IBY_PAYGROUP_PUB.pmtTable.attribute5(i));
                 print_debuginfo(l_module_name,'7089'||IBY_PAYGROUP_PUB.pmtTable.attribute6(i));
                 print_debuginfo(l_module_name,'7090'||IBY_PAYGROUP_PUB.pmtTable.attribute7(i));
                 print_debuginfo(l_module_name,'7091'||IBY_PAYGROUP_PUB.pmtTable.attribute8(i));
                 print_debuginfo(l_module_name,'7092'||IBY_PAYGROUP_PUB.pmtTable.attribute9(i));
                 print_debuginfo(l_module_name,'7093'||IBY_PAYGROUP_PUB.pmtTable.attribute10(i));
                 print_debuginfo(l_module_name,'7094'||IBY_PAYGROUP_PUB.pmtTable.attribute11(i));
                 print_debuginfo(l_module_name,'7095'||IBY_PAYGROUP_PUB.pmtTable.attribute12(i));
                 print_debuginfo(l_module_name,'7096'||IBY_PAYGROUP_PUB.pmtTable.attribute13(i));
                 print_debuginfo(l_module_name,'7097'||IBY_PAYGROUP_PUB.pmtTable.attribute14(i));
                 print_debuginfo(l_module_name,'7098'||IBY_PAYGROUP_PUB.pmtTable.attribute15(i));


                 print_debuginfo(l_module_name,'7103'||IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_number(i));
                 print_debuginfo(l_module_name,'7104'||IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_type(i));
                 print_debuginfo(l_module_name,'7105'||IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_iban_number(i));
                 print_debuginfo(l_module_name,'7106'||IBY_PAYGROUP_PUB.pmtTable.payee_name(i));
                 print_debuginfo(l_module_name,'7107'||IBY_PAYGROUP_PUB.pmtTable.payee_address1(i));
                 print_debuginfo(l_module_name,'7108'||IBY_PAYGROUP_PUB.pmtTable.payee_address2(i));
                 print_debuginfo(l_module_name,'7109'||IBY_PAYGROUP_PUB.pmtTable.payee_address3(i));
                 print_debuginfo(l_module_name,'7110'||IBY_PAYGROUP_PUB.pmtTable.payee_address4(i));
                 print_debuginfo(l_module_name,'7111'||IBY_PAYGROUP_PUB.pmtTable.payee_city(i));
                 print_debuginfo(l_module_name,'7112'||IBY_PAYGROUP_PUB.pmtTable.payee_postal_code(i));
                 print_debuginfo(l_module_name,'7113'||IBY_PAYGROUP_PUB.pmtTable.payee_state(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payee_province(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payee_county(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payee_country(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.remit_advice_delivery_method(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.remit_advice_email(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.remit_advice_fax(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.address_source(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.employee_address_code(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.employee_person_id(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.employee_address_id(i));
                 print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.employee_payment_flag(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.ext_inv_payee_id(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_party_site_id(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_supplier_site_id(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_beneficiary_party(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_name(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_address1(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_address2(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_address3(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_address4(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_city(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_postal_code(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_state(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_province(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_county(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_country(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_name(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_le_reg_num(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_tax_reg_num(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_address_concat(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_beneficiary_name(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_number(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_alternate_name(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_site_alt_name(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_number(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_first_party_ref(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.ext_bnk_acct_ownr_inv_prty_id(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.ext_bnk_branch_inv_prty_id(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.ext_bnk_acct_ownr_inv_prty_nme(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_attr_cat(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_attr_cat(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_spplr_site_attr_cat(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_site_name(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_spplr_site_alt_name(i));
                    print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_id(i));*/
            print_debuginfo(l_module_name, IBY_PAYGROUP_PUB.pmtTable.payment_id(i));
            print_debuginfo(l_module_name,'InvPayeePartyId is '||IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_id(i));
            print_debuginfo(l_module_name,'11672'||IBY_PAYGROUP_PUB.pmtTable.payer_party_number(i));
            print_debuginfo(l_module_name,'11673'||IBY_PAYGROUP_PUB.pmtTable.payer_party_site_name(i));
            print_debuginfo(l_module_name,'11674'||IBY_PAYGROUP_PUB.pmtTable.payer_legal_entity_name(i));
            print_debuginfo(l_module_name,'11675'||IBY_PAYGROUP_PUB.pmtTable.payer_tax_registration_num(i));
            print_debuginfo(l_module_name,'11676'||IBY_PAYGROUP_PUB.pmtTable.payer_le_registration_num(i));
            print_debuginfo(l_module_name,'11677'||IBY_PAYGROUP_PUB.pmtTable.payer_party_id(i));
            print_debuginfo(l_module_name,'11678'||IBY_PAYGROUP_PUB.pmtTable.payer_location_id(i));
            print_debuginfo(l_module_name,'11679'||IBY_PAYGROUP_PUB.pmtTable.payer_party_attr_category(i));
            print_debuginfo(l_module_name,'11680'||IBY_PAYGROUP_PUB.pmtTable.payer_le_attr_category(i));
            print_debuginfo(l_module_name,'11681'||IBY_PAYGROUP_PUB.pmtTable.payer_abbreviated_agency_code(i));
            print_debuginfo(l_module_name,'11682'||IBY_PAYGROUP_PUB.pmtTable.payer_federal_us_employer_id(i));
            print_debuginfo(l_module_name,'11683'||IBY_PAYGROUP_PUB.pmtTable.int_bank_name(i));
            print_debuginfo(l_module_name,'11684'||IBY_PAYGROUP_PUB.pmtTable.int_bank_number(i));
            print_debuginfo(l_module_name,'11685'||IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_number(i));
            print_debuginfo(l_module_name,'11686'||IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_name(i));
            print_debuginfo(l_module_name,'11687'||IBY_PAYGROUP_PUB.pmtTable.int_eft_swift_code(i));
            print_debuginfo(l_module_name,'11688'||IBY_PAYGROUP_PUB.pmtTable.int_bank_account_number(i));
            print_debuginfo(l_module_name,'11689'||IBY_PAYGROUP_PUB.pmtTable.int_bank_account_name(i));
            print_debuginfo(l_module_name,'11690'||IBY_PAYGROUP_PUB.pmtTable.int_bank_account_iban(i));
            print_debuginfo(l_module_name,'11691'||IBY_PAYGROUP_PUB.pmtTable.int_bank_acct_agency_loc_code(i));
            print_debuginfo(l_module_name,'11692'||IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_party_id(i));
            print_debuginfo(l_module_name,'11693'||IBY_PAYGROUP_PUB.pmtTable.int_bank_alt_name(i));
            print_debuginfo(l_module_name,'11694'||IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_alt_name(i));
            print_debuginfo(l_module_name,'11695'||IBY_PAYGROUP_PUB.pmtTable.int_bank_account_alt_name(i));
            print_debuginfo(l_module_name,'11696'||IBY_PAYGROUP_PUB.pmtTable.int_bank_account_num_elec(i));
            print_debuginfo(l_module_name,'11697'||IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_location_id(i));
            print_debuginfo(l_module_name,'11698'||IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_eft_user_num(i));
            print_debuginfo(l_module_name,'11699'||IBY_PAYGROUP_PUB.pmtTable.payee_party_number(i));
            print_debuginfo(l_module_name,'11700'||IBY_PAYGROUP_PUB.pmtTable.payee_party_name(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payee_alt_name(i)); -- Bug 6175102
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payee_address_concat(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.beneficiary_name(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payee_party_atr_cat(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payee_spplr_site_attr_category(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payee_supplier_site_name(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payee_addressee(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payee_site_alternate_name(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payee_supplier_number(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payee_first_party_reference(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payee_supplier_attr_category(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payee_supplier_id(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payee_tax_registration_num(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payee_le_registration_num(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.ext_bank_name(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_name(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.ext_eft_swift_code(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_pmt_factor_flag(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_owner_party_id(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_party_id(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.ext_bank_alt_name(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_alt_name(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_alt_name(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_num_elec(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_location_id(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_owner_party_name(i));
            --print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.remit_advice_delivery_method(i));
            --print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.remit_advice_email(i));
            --print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.remit_advice_fax(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.delivery_channel_format_value(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.declaration_exch_rate_type(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.declaration_format(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_profile_acct_name(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_profile_sys_name(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_reason_format_value(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.bank_instruction1_format_value(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.bank_instruction2_format_value(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.org_name(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_rfc_identifier(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.payment_process_request_name(i));
            print_debuginfo(l_module_name,IBY_PAYGROUP_PUB.pmtTable.source_product(i));

         END LOOP;
     END IF;

     FORALL i in nvl(IBY_PAYGROUP_PUB.pmtTable.payment_id.FIRST,0) .. nvl(IBY_PAYGROUP_PUB.pmtTable.payment_id.LAST,-99)
     INSERT INTO IBY_PAYMENTS_ALL
             (
             payment_id,
             payment_method_code,
             payment_service_request_id,
             process_type,
             payment_status,
             payments_complete_flag,
             payment_function,
             payment_amount,
             payment_currency_code,
             bill_payable_flag,
             exclusive_payment_flag,
             separate_remit_advice_req_flag,
             internal_bank_account_id,
             org_id,
             org_type,
             legal_entity_id,
             declare_payment_flag,
             delivery_channel_code,
             ext_payee_id,
             payment_instruction_id,
             payment_profile_id,
             pregrouped_payment_flag,
             stop_confirmed_flag,
             stop_released_flag,
             stop_request_placed_flag,
             created_by,
             creation_date,
             last_updated_by,
             last_update_login,
             last_update_date,
             object_version_number,
             payee_party_id,
             party_site_id,
             supplier_site_id,
             payment_reason_code,
             payment_reason_comments,
             payment_date,
             anticipated_value_date,
             declaration_amount,
             declaration_currency_code,
             discount_amount_taken,
             payment_details,
             bank_charge_bearer,
             bank_charge_amount,
             settlement_priority,
             remittance_message1,
             remittance_message2,
             remittance_message3,
             payment_reference_number,
             paper_document_number,
             bank_assigned_ref_code,
             external_bank_account_id,
             unique_remittance_identifier,
             uri_check_digit,
             bank_instruction1_code,
             bank_instruction2_code,
             bank_instruction_details,
             payment_text_message1,
             payment_text_message2,
             payment_text_message3,
             maturity_date,
             payment_due_date,
             document_category_code,
             document_sequence_id,
             document_sequence_value,
             beneficiary_party,
             stop_confirmed_by,
             stop_confirm_date,
             stop_confirm_reason,
             stop_confirm_reference,
             stop_released_by,
             stop_release_date,
             stop_release_reason,
             stop_release_reference,
             stop_request_date,
             stop_request_placed_by,
             stop_request_reason,
             stop_request_reference,
             voided_by,
             void_date,
             void_reason,
             remit_to_location_id,
             completed_pmts_group_id,
             attribute_category,
             attribute1,
             attribute2,
             attribute3,
             attribute4,
             attribute5,
             attribute6,
             attribute7,
             attribute8,
             attribute9,
             attribute10,
             attribute11,
             attribute12,
             attribute13,
             attribute14,
             attribute15,
             ext_branch_number,
             ext_bank_number,
             ext_bank_account_name,
             ext_bank_account_number,
             ext_bank_account_type,
             ext_bank_account_iban_number,
             payee_name,
             payee_address1,
             payee_address2,
             payee_address3,
             payee_address4,
             payee_city,
             payee_postal_code,
             payee_state,
             payee_province,
             payee_county,
             payee_country,
             remit_advice_delivery_method,
             remit_advice_email,
             remit_advice_fax,
             address_source,
             employee_address_code,
             employee_person_id,
             employee_address_id,
             employee_payment_flag,
		ext_inv_payee_id ,
		inv_payee_party_id ,
		inv_party_site_id ,
		inv_supplier_site_id ,
		inv_beneficiary_party ,
		inv_payee_name ,
		inv_payee_address1 ,
		inv_payee_address2 ,
		inv_payee_address3 ,
		inv_payee_address4 ,
		inv_payee_city ,
		inv_payee_postal_code ,
		inv_payee_state ,
		inv_payee_province ,
		inv_payee_county ,
		inv_payee_country ,
		inv_payee_party_name ,
		inv_payee_le_reg_num,
		inv_payee_tax_reg_num,
		inv_payee_address_concat ,
		inv_beneficiary_name ,
		inv_payee_party_number ,
		inv_payee_alternate_name ,
		inv_payee_site_alt_name,
		inv_payee_supplier_number ,
		inv_payee_first_party_ref,
		ext_bnk_acct_ownr_inv_prty_id,
		ext_bnk_branch_inv_prty_id,
		ext_bnk_acct_ownr_inv_prty_nme,
		inv_payee_party_attr_cat,
		inv_payee_supplier_attr_cat,
		inv_payee_spplr_site_attr_cat,
		inv_payee_supplier_site_name ,
		inv_payee_spplr_site_alt_name,
		inv_payee_supplier_id,
             payer_party_number             	,
             payer_party_site_name          	,
             payer_legal_entity_name        	,
             payer_tax_registration_num     	,
             payer_le_registration_num      	,
             payer_party_id                 	,
             payer_location_id              	,
             payer_party_attr_category      	,
             payer_le_attr_category         	,
             payer_abbreviated_agency_code  	,
             payer_federal_us_employer_id   	,
             int_bank_name                  	,
             int_bank_number                	,
             int_bank_branch_number         	,
             int_bank_branch_name           	,
             int_eft_swift_code             	,
             int_bank_account_number        	,
             int_bank_account_name          	,
             int_bank_account_iban          	,
             int_bank_acct_agency_loc_code  	,
             int_bank_branch_party_id       	,
             int_bank_alt_name              	,
             int_bank_branch_alt_name       	,
             int_bank_account_alt_name      	,
             int_bank_account_num_elec      	,
             int_bank_branch_location_id    	,
             int_bank_branch_eft_user_num   	,
             payee_party_number             	,
             payee_party_name               	,
             payee_alternate_name           	,
             payee_address_concat           	,
             beneficiary_name               	,
             payee_party_attr_category      	,
             payee_spplr_site_attr_category 	,
             payee_supplier_site_name       	,
             payee_addressee                	,
             payee_site_alternate_name      	,
             payee_supplier_number          	,
             payee_first_party_reference    	,
             payee_supplier_attr_category   	,
             payee_supplier_id              	,
             payee_tax_registration_num ,
             payee_le_registration_num  ,
             ext_bank_name,
              ext_bank_branch_name           	,
              ext_eft_swift_code             	,
              ext_bank_acct_pmt_factor_flag  	,
              ext_bank_acct_owner_party_id   	,
              ext_bank_branch_party_id       	,
              ext_bank_alt_name              	,
              ext_bank_branch_alt_name       	,
              ext_bank_account_alt_name      	,
              ext_bank_account_num_elec      	,
             ext_bank_branch_location_id    	,
             ext_bank_acct_owner_party_name 	,
             --remit_advice_delivery_method   	,
             --remit_advice_email             	,
             --remit_advice_fax               	,
             delivery_channel_format_value  	,
             declaration_exch_rate_type     	,
             declaration_format             	,
             payment_profile_acct_name      	,
             payment_profile_sys_name       	,
             payment_reason_format_value    	,
             bank_instruction1_format_value 	,
             bank_instruction2_format_value 	,
             org_name                       	,
             int_bank_branch_rfc_identifier ,
             payment_process_request_name   ,
             source_product

	     )
         VALUES
             (
             IBY_PAYGROUP_PUB.pmtTable.payment_id(i),
             IBY_PAYGROUP_PUB.pmtTable.payment_method_code(i),
             IBY_PAYGROUP_PUB.pmtTable.payment_service_request_id(i),
             IBY_PAYGROUP_PUB.pmtTable.process_type(i),
             IBY_PAYGROUP_PUB.pmtTable.payment_status(i),
             IBY_PAYGROUP_PUB.pmtTable.payments_complete_flag(i),
             IBY_PAYGROUP_PUB.pmtTable.payment_function(i),
             IBY_PAYGROUP_PUB.pmtTable.payment_amount(i),
             IBY_PAYGROUP_PUB.pmtTable.payment_currency_code(i),
             IBY_PAYGROUP_PUB.pmtTable.bill_payable_flag(i),
             IBY_PAYGROUP_PUB.pmtTable.exclusive_payment_flag(i),
             IBY_PAYGROUP_PUB.pmtTable.sep_remit_advice_req_flag(i),
             IBY_PAYGROUP_PUB.pmtTable.internal_bank_account_id(i),
             IBY_PAYGROUP_PUB.pmtTable.org_id(i),
             IBY_PAYGROUP_PUB.pmtTable.org_type(i),
             IBY_PAYGROUP_PUB.pmtTable.legal_entity_id(i),
             IBY_PAYGROUP_PUB.pmtTable.declare_payment_flag(i),
             IBY_PAYGROUP_PUB.pmtTable.delivery_channel_code(i),
             IBY_PAYGROUP_PUB.pmtTable.ext_payee_id(i),
             IBY_PAYGROUP_PUB.pmtTable.payment_instruction_id(i),
             IBY_PAYGROUP_PUB.pmtTable.payment_profile_id(i),
             IBY_PAYGROUP_PUB.pmtTable.pregrouped_payment_flag(i),
             IBY_PAYGROUP_PUB.pmtTable.stop_confirmed_flag(i),
             IBY_PAYGROUP_PUB.pmtTable.stop_released_flag(i),
             IBY_PAYGROUP_PUB.pmtTable.stop_request_placed_flag(i),
             IBY_PAYGROUP_PUB.pmtTable.created_by(i),
             IBY_PAYGROUP_PUB.pmtTable.creation_date(i),
             IBY_PAYGROUP_PUB.pmtTable.last_updated_by(i),
             IBY_PAYGROUP_PUB.pmtTable.last_update_login(i),
             IBY_PAYGROUP_PUB.pmtTable.last_update_date(i),
             IBY_PAYGROUP_PUB.pmtTable.object_version_number(i),
             IBY_PAYGROUP_PUB.pmtTable.payee_party_id(i),
             IBY_PAYGROUP_PUB.pmtTable.party_site_id(i),
             IBY_PAYGROUP_PUB.pmtTable.supplier_site_id(i),
             IBY_PAYGROUP_PUB.pmtTable.payment_reason_code(i),
             IBY_PAYGROUP_PUB.pmtTable.payment_reason_comments(i),
             IBY_PAYGROUP_PUB.pmtTable.payment_date(i),
             IBY_PAYGROUP_PUB.pmtTable.anticipated_value_date(i),
             IBY_PAYGROUP_PUB.pmtTable.declaration_amount(i),
             IBY_PAYGROUP_PUB.pmtTable.declaration_currency_code(i),
             IBY_PAYGROUP_PUB.pmtTable.discount_amount_taken(i),
             IBY_PAYGROUP_PUB.pmtTable.payment_details(i),
             IBY_PAYGROUP_PUB.pmtTable.bank_charge_bearer(i),
             IBY_PAYGROUP_PUB.pmtTable.bank_charge_amount(i),
             IBY_PAYGROUP_PUB.pmtTable.settlement_priority(i),
             IBY_PAYGROUP_PUB.pmtTable.remittance_message1(i),
             IBY_PAYGROUP_PUB.pmtTable.remittance_message2(i),
             IBY_PAYGROUP_PUB.pmtTable.remittance_message3(i),
             IBY_PAYGROUP_PUB.pmtTable.payment_reference_number(i),
             IBY_PAYGROUP_PUB.pmtTable.paper_document_number(i),
             IBY_PAYGROUP_PUB.pmtTable.bank_assigned_ref_code(i),
             IBY_PAYGROUP_PUB.pmtTable.external_bank_account_id(i),
             IBY_PAYGROUP_PUB.pmtTable.unique_remittance_identifier(i),
             IBY_PAYGROUP_PUB.pmtTable.uri_check_digit(i),
             IBY_PAYGROUP_PUB.pmtTable.bank_instruction1_code(i),
             IBY_PAYGROUP_PUB.pmtTable.bank_instruction2_code(i),
             IBY_PAYGROUP_PUB.pmtTable.bank_instruction_details(i),
             IBY_PAYGROUP_PUB.pmtTable.payment_text_message1(i),
             IBY_PAYGROUP_PUB.pmtTable.payment_text_message2(i),
             IBY_PAYGROUP_PUB.pmtTable.payment_text_message3(i),
             IBY_PAYGROUP_PUB.pmtTable.maturity_date(i),
             IBY_PAYGROUP_PUB.pmtTable.payment_due_date(i),
             IBY_PAYGROUP_PUB.pmtTable.document_category_code(i),
             IBY_PAYGROUP_PUB.pmtTable.document_sequence_id(i),
             IBY_PAYGROUP_PUB.pmtTable.document_sequence_value(i),
             IBY_PAYGROUP_PUB.pmtTable.beneficiary_party(i),
             IBY_PAYGROUP_PUB.pmtTable.stop_confirmed_by(i),
             IBY_PAYGROUP_PUB.pmtTable.stop_confirm_date(i),
             IBY_PAYGROUP_PUB.pmtTable.stop_confirm_reason(i),
             IBY_PAYGROUP_PUB.pmtTable.stop_confirm_reference(i),
             IBY_PAYGROUP_PUB.pmtTable.stop_released_by(i),
             IBY_PAYGROUP_PUB.pmtTable.stop_release_date(i),
             IBY_PAYGROUP_PUB.pmtTable.stop_release_reason(i),
             IBY_PAYGROUP_PUB.pmtTable.stop_release_reference(i),
             IBY_PAYGROUP_PUB.pmtTable.stop_request_date(i),
             IBY_PAYGROUP_PUB.pmtTable.stop_request_placed_by(i),
             IBY_PAYGROUP_PUB.pmtTable.stop_request_reason(i),
             IBY_PAYGROUP_PUB.pmtTable.stop_request_reference(i),
             IBY_PAYGROUP_PUB.pmtTable.voided_by(i),
             IBY_PAYGROUP_PUB.pmtTable.void_date(i),
             IBY_PAYGROUP_PUB.pmtTable.void_reason(i),
             IBY_PAYGROUP_PUB.pmtTable.remit_to_location_id(i),
             IBY_PAYGROUP_PUB.pmtTable.completed_pmts_group_id(i),
             IBY_PAYGROUP_PUB.pmtTable.attribute_category(i),
             IBY_PAYGROUP_PUB.pmtTable.attribute1(i),
             IBY_PAYGROUP_PUB.pmtTable.attribute2(i),
             IBY_PAYGROUP_PUB.pmtTable.attribute3(i),
             IBY_PAYGROUP_PUB.pmtTable.attribute4(i),
             IBY_PAYGROUP_PUB.pmtTable.attribute5(i),
             IBY_PAYGROUP_PUB.pmtTable.attribute6(i),
             IBY_PAYGROUP_PUB.pmtTable.attribute7(i),
             IBY_PAYGROUP_PUB.pmtTable.attribute8(i),
             IBY_PAYGROUP_PUB.pmtTable.attribute9(i),
             IBY_PAYGROUP_PUB.pmtTable.attribute10(i),
             IBY_PAYGROUP_PUB.pmtTable.attribute11(i),
             IBY_PAYGROUP_PUB.pmtTable.attribute12(i),
             IBY_PAYGROUP_PUB.pmtTable.attribute13(i),
             IBY_PAYGROUP_PUB.pmtTable.attribute14(i),
             IBY_PAYGROUP_PUB.pmtTable.attribute15(i),
             IBY_PAYGROUP_PUB.pmtTable.ext_branch_number(i),
             IBY_PAYGROUP_PUB.pmtTable.ext_bank_number(i),
             IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_name(i),
             IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_number(i),
             IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_type(i),
             IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_iban_number(i),
             IBY_PAYGROUP_PUB.pmtTable.payee_name(i),
             IBY_PAYGROUP_PUB.pmtTable.payee_address1(i),
             IBY_PAYGROUP_PUB.pmtTable.payee_address2(i),
             IBY_PAYGROUP_PUB.pmtTable.payee_address3(i),
             IBY_PAYGROUP_PUB.pmtTable.payee_address4(i),
             IBY_PAYGROUP_PUB.pmtTable.payee_city(i),
             IBY_PAYGROUP_PUB.pmtTable.payee_postal_code(i),
             IBY_PAYGROUP_PUB.pmtTable.payee_state(i),
             IBY_PAYGROUP_PUB.pmtTable.payee_province(i),
             IBY_PAYGROUP_PUB.pmtTable.payee_county(i),
             IBY_PAYGROUP_PUB.pmtTable.payee_country(i),
             IBY_PAYGROUP_PUB.pmtTable.remit_advice_delivery_method(i),
             IBY_PAYGROUP_PUB.pmtTable.remit_advice_email(i),
             IBY_PAYGROUP_PUB.pmtTable.remit_advice_fax(i),
             IBY_PAYGROUP_PUB.pmtTable.address_source(i),
             IBY_PAYGROUP_PUB.pmtTable.employee_address_code(i),
             IBY_PAYGROUP_PUB.pmtTable.employee_person_id(i),
             IBY_PAYGROUP_PUB.pmtTable.employee_address_id(i),
             IBY_PAYGROUP_PUB.pmtTable.employee_payment_flag(i),
	     	IBY_PAYGROUP_PUB.pmtTable.ext_inv_payee_id(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_id(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_party_site_id(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_supplier_site_id(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_beneficiary_party(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_name(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_address1(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_address2(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_address3(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_address4(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_city(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_postal_code(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_state(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_province(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_county(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_country(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_name(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_le_reg_num(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_tax_reg_num(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_address_concat(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_beneficiary_name(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_number(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_alternate_name(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_site_alt_name(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_number(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_first_party_ref(i),
		IBY_PAYGROUP_PUB.pmtTable.ext_bnk_acct_ownr_inv_prty_id(i),
		IBY_PAYGROUP_PUB.pmtTable.ext_bnk_branch_inv_prty_id(i),
		IBY_PAYGROUP_PUB.pmtTable.ext_bnk_acct_ownr_inv_prty_nme(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_attr_cat(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_attr_cat(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_spplr_site_attr_cat(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_site_name(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_spplr_site_alt_name(i),
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_id(i),
		IBY_PAYGROUP_PUB.pmtTable.payer_party_number(i),
	IBY_PAYGROUP_PUB.pmtTable.payer_party_site_name(i),
	IBY_PAYGROUP_PUB.pmtTable.payer_legal_entity_name(i),
	IBY_PAYGROUP_PUB.pmtTable.payer_tax_registration_num(i),
	IBY_PAYGROUP_PUB.pmtTable.payer_le_registration_num(i),
	IBY_PAYGROUP_PUB.pmtTable.payer_party_id(i),
	IBY_PAYGROUP_PUB.pmtTable.payer_location_id(i),
	IBY_PAYGROUP_PUB.pmtTable.payer_party_attr_category(i),
	IBY_PAYGROUP_PUB.pmtTable.payer_le_attr_category(i),
	IBY_PAYGROUP_PUB.pmtTable.payer_abbreviated_agency_code(i),
	IBY_PAYGROUP_PUB.pmtTable.payer_federal_us_employer_id(i),
	IBY_PAYGROUP_PUB.pmtTable.int_bank_name(i),
	IBY_PAYGROUP_PUB.pmtTable.int_bank_number(i),
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_number(i),
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_name(i),
	IBY_PAYGROUP_PUB.pmtTable.int_eft_swift_code(i),
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_number(i),
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_name(i),
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_iban(i),
	IBY_PAYGROUP_PUB.pmtTable.int_bank_acct_agency_loc_code(i),
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_party_id(i),
	IBY_PAYGROUP_PUB.pmtTable.int_bank_alt_name(i),
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_alt_name(i),
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_alt_name(i),
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_num_elec(i),
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_location_id(i),
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_eft_user_num(i),
	IBY_PAYGROUP_PUB.pmtTable.payee_party_number(i),
	IBY_PAYGROUP_PUB.pmtTable.payee_party_name(i),
	IBY_PAYGROUP_PUB.pmtTable.payee_alt_name(i), -- Bug 6175102
	IBY_PAYGROUP_PUB.pmtTable.payee_address_concat(i),
	IBY_PAYGROUP_PUB.pmtTable.beneficiary_name(i),
	IBY_PAYGROUP_PUB.pmtTable.payee_party_atr_cat(i),
	IBY_PAYGROUP_PUB.pmtTable.payee_spplr_site_attr_category(i),
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_site_name(i),
	IBY_PAYGROUP_PUB.pmtTable.payee_addressee(i),
	IBY_PAYGROUP_PUB.pmtTable.payee_site_alternate_name(i),
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_number(i),
	IBY_PAYGROUP_PUB.pmtTable.payee_first_party_reference(i),
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_attr_category(i),
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_id(i),
	IBY_PAYGROUP_PUB.pmtTable.payee_tax_registration_num(i),
	IBY_PAYGROUP_PUB.pmtTable.payee_le_registration_num(i),
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_name(i),
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_name(i),
	IBY_PAYGROUP_PUB.pmtTable.ext_eft_swift_code(i),
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_pmt_factor_flag(i),
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_owner_party_id(i),
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_party_id(i),
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_alt_name(i),
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_alt_name(i),
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_alt_name(i),
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_num_elec(i),
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_location_id(i),
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_owner_party_name(i),
	--IBY_PAYGROUP_PUB.pmtTable.remit_advice_delivery_method(i),
	--IBY_PAYGROUP_PUB.pmtTable.remit_advice_email(i),
	--IBY_PAYGROUP_PUB.pmtTable.remit_advice_fax(i),
	IBY_PAYGROUP_PUB.pmtTable.delivery_channel_format_value(i),
	IBY_PAYGROUP_PUB.pmtTable.declaration_exch_rate_type(i),
	IBY_PAYGROUP_PUB.pmtTable.declaration_format(i),
	IBY_PAYGROUP_PUB.pmtTable.payment_profile_acct_name(i),
	IBY_PAYGROUP_PUB.pmtTable.payment_profile_sys_name(i),
	IBY_PAYGROUP_PUB.pmtTable.payment_reason_format_value(i),
	IBY_PAYGROUP_PUB.pmtTable.bank_instruction1_format_value(i),
	IBY_PAYGROUP_PUB.pmtTable.bank_instruction2_format_value(i),
	IBY_PAYGROUP_PUB.pmtTable.org_name(i),
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_rfc_identifier(i),
	IBY_PAYGROUP_PUB.pmtTable.payment_process_request_name(i),
	IBY_PAYGROUP_PUB.pmtTable.source_product(i)
             );

            -- delete_paymentTab;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'EXIT');
      END IF;

 END insertPayments;


/*--------------------------------------------------------------------
 | NAME:
 |
 | PURPOSE:
 |     This procedure is used to free up the memory used by
 |     global memory structure
 |
 | PARAMETERS:
 |
 |     NONE
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE delete_paymentTab IS
 l_module_name     CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                       '.delete_paymentTab';
  BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'ENTER');
     END IF;
             paymentTab.payment_id.delete;
             paymentTab.payment_method_code.delete;
             paymentTab.payment_service_request_id.delete;
             paymentTab.process_type.delete;
             paymentTab.payment_status.delete;
             paymentTab.payments_complete_flag.delete;
             paymentTab.payment_function.delete;
             paymentTab.payment_amount.delete;
             paymentTab.payment_currency_code.delete;
             paymentTab.bill_payable_flag.delete;
             paymentTab.exclusive_payment_flag.delete;
             paymentTab.sep_remit_advice_req_flag.delete;
             paymentTab.internal_bank_account_id.delete;
             paymentTab.org_id.delete;
             paymentTab.org_type.delete;
             paymentTab.legal_entity_id.delete;
             paymentTab.declare_payment_flag.delete;
             paymentTab.delivery_channel_code.delete;
             paymentTab.ext_payee_id.delete;
             paymentTab.payment_instruction_id.delete;
             paymentTab.payment_profile_id.delete;
             paymentTab.pregrouped_payment_flag.delete;
             paymentTab.stop_confirmed_flag.delete;
             paymentTab.stop_released_flag.delete;
             paymentTab.stop_request_placed_flag.delete;
             paymentTab.created_by.delete;
             paymentTab.creation_date.delete;
             paymentTab.last_updated_by.delete;
             paymentTab.last_update_login.delete;
             paymentTab.last_update_date.delete;
             paymentTab.object_version_number.delete;
             paymentTab.payee_party_id.delete;
             paymentTab.party_site_id.delete;
             paymentTab.supplier_site_id.delete;
             paymentTab.payment_reason_code.delete;
             paymentTab.payment_reason_comments.delete;
             paymentTab.payment_date.delete;
             paymentTab.anticipated_value_date.delete;
             paymentTab.declaration_amount.delete;
             paymentTab.declaration_currency_code.delete;
             paymentTab.discount_amount_taken.delete;
             paymentTab.payment_details.delete;
             paymentTab.bank_charge_bearer.delete;
             paymentTab.bank_charge_amount.delete;
             paymentTab.settlement_priority.delete;
             paymentTab.remittance_message1.delete;
             paymentTab.remittance_message2.delete;
             paymentTab.remittance_message3.delete;
             paymentTab.payment_reference_number.delete;
             paymentTab.paper_document_number.delete;
             paymentTab.bank_assigned_ref_code.delete;
             paymentTab.external_bank_account_id.delete;
             paymentTab.unique_remittance_identifier.delete;
             paymentTab.uri_check_digit.delete;
             paymentTab.bank_instruction1_code.delete;
             paymentTab.bank_instruction2_code.delete;
             paymentTab.bank_instruction_details.delete;
             paymentTab.payment_text_message1.delete;
             paymentTab.payment_text_message2.delete;
             paymentTab.payment_text_message3.delete;
             paymentTab.maturity_date.delete;
             paymentTab.payment_due_date.delete;
             paymentTab.document_category_code.delete;
             paymentTab.document_sequence_id.delete;
             paymentTab.document_sequence_value.delete;
             paymentTab.beneficiary_party.delete;
             paymentTab.stop_confirmed_by.delete;
             paymentTab.stop_confirm_date.delete;
             paymentTab.stop_confirm_reason.delete;
             paymentTab.stop_confirm_reference.delete;
             paymentTab.stop_released_by.delete;
             paymentTab.stop_release_date.delete;
             paymentTab.stop_release_reason.delete;
             paymentTab.stop_release_reference.delete;
             paymentTab.stop_request_date.delete;
             paymentTab.stop_request_placed_by.delete;
             paymentTab.stop_request_reason.delete;
             paymentTab.stop_request_reference.delete;
             paymentTab.voided_by.delete;
             paymentTab.void_date.delete;
             paymentTab.void_reason.delete;
             paymentTab.remit_to_location_id.delete;
             paymentTab.completed_pmts_group_id.delete;
             paymentTab.attribute_category.delete;
             paymentTab.attribute1.delete;
             paymentTab.attribute2.delete;
             paymentTab.attribute3.delete;
             paymentTab.attribute4.delete;
             paymentTab.attribute5.delete;
             paymentTab.attribute6.delete;
             paymentTab.attribute7.delete;
             paymentTab.attribute8.delete;
             paymentTab.attribute9.delete;
             paymentTab.attribute10.delete;
             paymentTab.attribute11.delete;
             paymentTab.attribute12.delete;
             paymentTab.attribute13.delete;
             paymentTab.attribute14.delete;
             paymentTab.attribute15.delete;
             paymentTab.ext_branch_number.delete;
             paymentTab.ext_bank_number.delete;
             paymentTab.ext_bank_account_name.delete;
             paymentTab.ext_bank_account_number.delete;
             paymentTab.ext_bank_account_type.delete;
             paymentTab.ext_bank_account_iban_number.delete;
             paymentTab.payee_name.delete;
             paymentTab.payee_address1.delete;
             paymentTab.payee_address2.delete;
             paymentTab.payee_address3.delete;
             paymentTab.payee_address4.delete;
             paymentTab.payee_city.delete;
             paymentTab.payee_postal_code.delete;
             paymentTab.payee_state.delete;
             paymentTab.payee_province.delete;
             paymentTab.payee_county.delete;
             paymentTab.payee_country.delete;
             paymentTab.remit_advice_delivery_method.delete;
             paymentTab.remit_advice_email.delete;
             paymentTab.remit_advice_fax.delete;
             paymentTab.address_source.delete;
             paymentTab.employee_address_code.delete;
             paymentTab.employee_person_id.delete;
             paymentTab.employee_address_id.delete;
             paymentTab.employee_payment_flag.delete;
	        paymentTab.inv_payee_party_id.delete;
                paymentTab.inv_party_site_id.delete;
                paymentTab.inv_supplier_site_id.delete;
                paymentTab.inv_beneficiary_party.delete;
                paymentTab.ext_inv_payee_id.delete;
		paymentTab.inv_payee_name.delete;
		paymentTab.inv_payee_address1.delete;
		paymentTab.inv_payee_address2.delete;
		paymentTab.inv_payee_address3.delete;
		paymentTab.inv_payee_address4.delete;
		paymentTab.inv_payee_city.delete;
		paymentTab.inv_payee_postal_code.delete;
		paymentTab.inv_payee_state.delete;
		paymentTab.inv_payee_province.delete;
		paymentTab.inv_payee_county.delete;
		paymentTab.inv_payee_country.delete;
		paymentTab.inv_payee_party_name.delete;
		paymentTab.inv_payee_le_reg_num.delete;
		paymentTab.inv_payee_tax_reg_num.delete;
		paymentTab.inv_payee_address_concat.delete;
		paymentTab.inv_beneficiary_name.delete;
		paymentTab.inv_payee_party_number.delete;
		paymentTab.inv_payee_alternate_name.delete;
		paymentTab.inv_payee_site_alt_name.delete;
		paymentTab.inv_payee_supplier_number.delete;
		paymentTab.inv_payee_first_party_ref.delete;
		paymentTab.ext_bnk_acct_ownr_inv_prty_id.delete;
		paymentTab.ext_bnk_branch_inv_prty_id.delete;
		paymentTab.ext_bnk_acct_ownr_inv_prty_nme.delete;
		paymentTab.inv_payee_party_attr_cat.delete;
		paymentTab.inv_payee_supplier_attr_cat.delete;
		paymentTab.inv_payee_spplr_site_attr_cat.delete;
		paymentTab.inv_payee_supplier_site_name.delete;
		paymentTab.inv_payee_spplr_site_alt_name.delete;
		paymentTab.inv_payee_supplier_id.delete;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'EXIT');
      END IF;

 END delete_paymentTab;


 /*--------------------------------------------------------------------
 | NAME:
 |
 | PURPOSE:
 |     This procedure is used to free up the memory used by
 |     global memory structure [pmtTable]
 |
 | PARAMETERS:
 |
 |     NONE
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE delete_pmtTable IS
 l_module_name     CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                       '.delete_pmtTable';
  BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'ENTER');
     END IF;
             pmtTable.payment_id.delete;
             pmtTable.payment_method_code.delete;
             pmtTable.payment_service_request_id.delete;
             pmtTable.process_type.delete;
             pmtTable.payment_status.delete;
             pmtTable.payments_complete_flag.delete;
             pmtTable.payment_function.delete;
             pmtTable.payment_amount.delete;
             pmtTable.payment_currency_code.delete;
             pmtTable.bill_payable_flag.delete;
             pmtTable.exclusive_payment_flag.delete;
             pmtTable.sep_remit_advice_req_flag.delete;
             pmtTable.internal_bank_account_id.delete;
             pmtTable.org_id.delete;
             pmtTable.org_type.delete;
             pmtTable.legal_entity_id.delete;
             pmtTable.declare_payment_flag.delete;
             pmtTable.delivery_channel_code.delete;
             pmtTable.ext_payee_id.delete;
             pmtTable.payment_instruction_id.delete;
             pmtTable.payment_profile_id.delete;
             pmtTable.pregrouped_payment_flag.delete;
             pmtTable.stop_confirmed_flag.delete;
             pmtTable.stop_released_flag.delete;
             pmtTable.stop_request_placed_flag.delete;
             pmtTable.created_by.delete;
             pmtTable.creation_date.delete;
             pmtTable.last_updated_by.delete;
             pmtTable.last_update_login.delete;
             pmtTable.last_update_date.delete;
             pmtTable.object_version_number.delete;
             pmtTable.payee_party_id.delete;
             pmtTable.party_site_id.delete;
             pmtTable.supplier_site_id.delete;
             pmtTable.payment_reason_code.delete;
             pmtTable.payment_reason_comments.delete;
             pmtTable.payment_date.delete;
             pmtTable.anticipated_value_date.delete;
             pmtTable.declaration_amount.delete;
             pmtTable.declaration_currency_code.delete;
             pmtTable.discount_amount_taken.delete;
             pmtTable.payment_details.delete;
             pmtTable.bank_charge_bearer.delete;
             pmtTable.bank_charge_amount.delete;
             pmtTable.settlement_priority.delete;
             pmtTable.remittance_message1.delete;
             pmtTable.remittance_message2.delete;
             pmtTable.remittance_message3.delete;
             pmtTable.payment_reference_number.delete;
             pmtTable.paper_document_number.delete;
             pmtTable.bank_assigned_ref_code.delete;
             pmtTable.external_bank_account_id.delete;
             pmtTable.unique_remittance_identifier.delete;
             pmtTable.uri_check_digit.delete;
             pmtTable.bank_instruction1_code.delete;
             pmtTable.bank_instruction2_code.delete;
             pmtTable.bank_instruction_details.delete;
             pmtTable.payment_text_message1.delete;
             pmtTable.payment_text_message2.delete;
             pmtTable.payment_text_message3.delete;
             pmtTable.maturity_date.delete;
             pmtTable.payment_due_date.delete;
             pmtTable.document_category_code.delete;
             pmtTable.document_sequence_id.delete;
             pmtTable.document_sequence_value.delete;
             pmtTable.beneficiary_party.delete;
             pmtTable.stop_confirmed_by.delete;
             pmtTable.stop_confirm_date.delete;
             pmtTable.stop_confirm_reason.delete;
             pmtTable.stop_confirm_reference.delete;
             pmtTable.stop_released_by.delete;
             pmtTable.stop_release_date.delete;
             pmtTable.stop_release_reason.delete;
             pmtTable.stop_release_reference.delete;
             pmtTable.stop_request_date.delete;
             pmtTable.stop_request_placed_by.delete;
             pmtTable.stop_request_reason.delete;
             pmtTable.stop_request_reference.delete;
             pmtTable.voided_by.delete;
             pmtTable.void_date.delete;
             pmtTable.void_reason.delete;
             pmtTable.remit_to_location_id.delete;
             pmtTable.completed_pmts_group_id.delete;
             pmtTable.attribute_category.delete;
             pmtTable.attribute1.delete;
             pmtTable.attribute2.delete;
             pmtTable.attribute3.delete;
             pmtTable.attribute4.delete;
             pmtTable.attribute5.delete;
             pmtTable.attribute6.delete;
             pmtTable.attribute7.delete;
             pmtTable.attribute8.delete;
             pmtTable.attribute9.delete;
             pmtTable.attribute10.delete;
             pmtTable.attribute11.delete;
             pmtTable.attribute12.delete;
             pmtTable.attribute13.delete;
             pmtTable.attribute14.delete;
             pmtTable.attribute15.delete;
             pmtTable.ext_branch_number.delete;
             pmtTable.ext_bank_number.delete;
             pmtTable.ext_bank_account_name.delete;
             pmtTable.ext_bank_account_number.delete;
             pmtTable.ext_bank_account_type.delete;
             pmtTable.ext_bank_account_iban_number.delete;
             pmtTable.payee_name.delete;
             pmtTable.payee_address1.delete;
             pmtTable.payee_address2.delete;
             pmtTable.payee_address3.delete;
             pmtTable.payee_address4.delete;
             pmtTable.payee_city.delete;
             pmtTable.payee_postal_code.delete;
             pmtTable.payee_state.delete;
             pmtTable.payee_province.delete;
             pmtTable.payee_county.delete;
             pmtTable.payee_country.delete;
--	     pmtTable.separate_remit_advice_req_flag.delete;
             pmtTable.remit_advice_delivery_method.delete;
             pmtTable.remit_advice_email.delete;
             pmtTable.remit_advice_fax.delete;
             pmtTable.address_source.delete;
             pmtTable.employee_address_code.delete;
             pmtTable.employee_person_id.delete;
             pmtTable.employee_address_id.delete;
             pmtTable.employee_payment_flag.delete;

	  pmtTable.payer_party_number.delete;
	  pmtTable.payer_party_site_name.delete;
	  pmtTable.payer_legal_entity_name.delete;
	  pmtTable.payer_tax_registration_num.delete;
	  pmtTable.payer_le_registration_num.delete;
	  pmtTable.payer_party_id.delete;
	  pmtTable.payer_location_id.delete;
	  pmtTable.payer_party_attr_category.delete;
	  pmtTable.payer_le_attr_category.delete;
	  pmtTable.payer_abbreviated_agency_code.delete;
	  pmtTable.payer_federal_us_employer_id.delete;
	  pmtTable.int_bank_name.delete;
	  pmtTable.int_bank_number.delete;
	  pmtTable.int_bank_branch_number.delete;
	  pmtTable.int_bank_branch_name.delete;
	  pmtTable.int_eft_swift_code.delete;
	  pmtTable.int_bank_account_number.delete;
	  pmtTable.int_bank_account_name.delete;
	  pmtTable.int_bank_account_iban.delete;
	  pmtTable.int_bank_acct_agency_loc_code.delete;
	  pmtTable.int_bank_branch_party_id.delete;
	  pmtTable.int_bank_alt_name.delete;
	  pmtTable.int_bank_branch_alt_name.delete;
	  pmtTable.int_bank_account_alt_name.delete;
	  pmtTable.int_bank_account_num_elec.delete;
	  pmtTable.int_bank_branch_location_id.delete;
	  pmtTable.int_bank_branch_eft_user_num.delete;
	  pmtTable.int_bank_branch_rfc_identifier.delete;

  pmtTable.payee_site_alternate_name.delete;
  pmtTable.payee_supplier_number.delete;
  pmtTable.payee_first_party_reference.delete;
  pmtTable.payee_supplier_attr_category.delete;
  pmtTable.payee_supplier_id.delete;
  pmtTable.payee_tax_registration_num.delete;
  pmtTable.payee_le_registration_num.delete;

  pmtTable.payee_spplr_site_attr_category.delete;
  pmtTable.payee_supplier_site_name.delete;

  pmtTable.ext_bank_name.delete;
  pmtTable.ext_bank_branch_name.delete;
  pmtTable.ext_eft_swift_code.delete;
  pmtTable.ext_bank_acct_pmt_factor_flag.delete;
  pmtTable.ext_bank_acct_owner_party_id.delete;
  pmtTable.ext_bank_branch_party_id.delete;
  pmtTable.ext_bank_alt_name.delete;
  pmtTable.ext_bank_branch_alt_name.delete;
  pmtTable.ext_bank_account_alt_name.delete;
  pmtTable.ext_bank_account_num_elec.delete;
  pmtTable.ext_bank_branch_location_id.delete;
  pmtTable.ext_bank_acct_owner_party_name.delete;
  pmtTable.payee_address_concat.delete;

 pmtTable.declaration_exch_rate_type.delete;
 pmtTable.declaration_format.delete;
 pmtTable.bank_instruction1_format_value.delete;
 pmtTable.bank_instruction2_format_value.delete;
 pmtTable.payment_profile_acct_name.delete;
 pmtTable.payment_profile_sys_name.delete;
pmtTable.payment_reason_format_value.delete;
pmtTable.delivery_channel_format_value.delete;
pmtTable.payment_process_request_name.delete;
pmtTable.source_product.delete;
pmtTable.org_name.delete;
pmtTable.calling_app_id.delete;
  pmtTable.call_app_pay_service_req_cd.delete;
  pmtTable.dont_pay_flg.delete;
  pmtTable.dont_pay_reason_cd.delete;
  pmtTable.dont_pay_desc.delete;
	pmtTable.inv_payee_party_id.delete;
	pmtTable.inv_party_site_id.delete;
	pmtTable.inv_supplier_site_id.delete;
	pmtTable.inv_beneficiary_party.delete;
	pmtTable.ext_inv_payee_id.delete;
	pmtTable.inv_payee_name.delete;
	pmtTable.inv_payee_address1.delete;
	pmtTable.inv_payee_address2.delete;
	pmtTable.inv_payee_address3.delete;
	pmtTable.inv_payee_address4.delete;
	pmtTable.inv_payee_city.delete;
	pmtTable.inv_payee_postal_code.delete;
	pmtTable.inv_payee_state.delete;
	pmtTable.inv_payee_province.delete;
	pmtTable.inv_payee_county.delete;
	pmtTable.inv_payee_country.delete;
	pmtTable.inv_payee_party_name.delete;
	pmtTable.inv_payee_le_reg_num.delete;
	pmtTable.inv_payee_tax_reg_num.delete;
	pmtTable.inv_payee_address_concat.delete;
	pmtTable.inv_beneficiary_name.delete;
	pmtTable.inv_payee_party_number.delete;
	pmtTable.inv_payee_alternate_name.delete;
	pmtTable.inv_payee_site_alt_name.delete;
	pmtTable.inv_payee_supplier_number.delete;
	pmtTable.inv_payee_first_party_ref.delete;
	pmtTable.ext_bnk_acct_ownr_inv_prty_id.delete;
	pmtTable.ext_bnk_branch_inv_prty_id.delete;
	pmtTable.ext_bnk_acct_ownr_inv_prty_nme.delete;
	pmtTable.inv_payee_party_attr_cat.delete;
	pmtTable.inv_payee_supplier_attr_cat.delete;
	pmtTable.inv_payee_spplr_site_attr_cat.delete;
	pmtTable.inv_payee_supplier_site_name.delete;
	pmtTable.inv_payee_spplr_site_alt_name.delete;
	pmtTable.inv_payee_supplier_id.delete;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'EXIT');
      END IF;

 END delete_pmtTable;

/*--------------------------------------------------------------------
 | NAME:
 |     updatePayments
 |
 | PURPOSE:
 |     Performs an update of all created payments from PLSQL
 |     table into IBY_PAYMENTS_ALL table.
 |
 |     The created payments have already been inserted into
 |     IBY_PAYMENTS_ALL after grouping. So we only need to update
 |     certain fields of the payment that have been changed
 |     after the grouping was performed.
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE updatePayments(
     p_paymentTab    IN paymentTabType
     )
 IS
 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME || '.updatePayments';

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'ENTER');
     END IF;
     /* Normally, this shouldn't happen */
     IF (p_paymentTab.COUNT = 0) THEN
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'No payments'
             || ' were found to update IBY_PAYMENTS_ALL table.');
         END IF;

         RETURN;
     END IF;

     FOR i in p_paymentTab.FIRST..p_paymentTab.LAST LOOP

         UPDATE
             IBY_PAYMENTS_ALL
         SET
             payment_status       = p_paymentTab(i).payment_status,
             payment_amount       = p_paymentTab(i).payment_amount,
	     discount_amount_taken = p_paymentTab(i).discount_amount_taken,
             declare_payment_flag = p_paymentTab(i).declare_payment_flag,
             declaration_amount   = p_paymentTab(i).declaration_amount,
             bank_charge_amount   = p_paymentTab(i).bank_charge_amount,
             separate_remit_advice_req_flag
                                  = p_paymentTab(i).
                                        separate_remit_advice_req_flag
         WHERE
             payment_id = p_paymentTab(i).payment_id
         ;

     END LOOP;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'EXIT');
     END IF;

 END updatePayments;





/*--------------------------------------------------------------------
 | NAME:
 |     updatePayments
 |
 | PURPOSE:
 |     Performs an update of all created payments from PLSQL
 |     table into IBY_PAYMENTS_ALL table.
 |
 |     The created payments have already been inserted into
 |     IBY_PAYMENTS_ALL after grouping. So we only need to update
 |     certain fields of the payment that have been changed
 |     after the grouping was performed.
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE updatePayments
 IS
 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME || '.updatePayments';
 auditcntr      integer;



 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'ENTER');
      END IF;


  /*   FOR i in p_paymentTab.FIRST..p_paymentTab.LAST LOOP

         UPDATE
             IBY_PAYMENTS_ALL
         SET
             payment_status       = p_paymentTab(i).payment_status,
             payment_amount       = p_paymentTab(i).payment_amount,
	     discount_amount_taken = p_paymentTab(i).discount_amount_taken,
             declare_payment_flag = p_paymentTab(i).declare_payment_flag,
             declaration_amount   = p_paymentTab(i).declaration_amount,
             bank_charge_amount   = p_paymentTab(i).bank_charge_amount,
             separate_remit_advice_req_flag
                                  = p_paymentTab(i).
                                        separate_remit_advice_req_flag
         WHERE
             payment_id = p_paymentTab(i).payment_id
         ;

     END LOOP;
   */


     FORALL i in nvl(IBY_PAYGROUP_PUB.pmtTable.payment_id.FIRST,0) .. nvl(IBY_PAYGROUP_PUB.pmtTable.payment_id.LAST,-99)
     UPDATE IBY_PAYMENTS_ALL
     SET
             payment_id=            IBY_PAYGROUP_PUB.pmtTable.payment_id(i),
             payment_method_code=             IBY_PAYGROUP_PUB.pmtTable.payment_method_code(i),
             payment_service_request_id=            IBY_PAYGROUP_PUB.pmtTable.payment_service_request_id(i),
             process_type=            IBY_PAYGROUP_PUB.pmtTable.process_type(i),
             payment_status=            IBY_PAYGROUP_PUB.pmtTable.payment_status(i),
             payments_complete_flag=            IBY_PAYGROUP_PUB.pmtTable.payments_complete_flag(i),
             payment_function=            IBY_PAYGROUP_PUB.pmtTable.payment_function(i),
             payment_amount=IBY_PAYGROUP_PUB.pmtTable.payment_amount(i),
             payment_currency_code =IBY_PAYGROUP_PUB.pmtTable.payment_currency_code(i),
             bill_payable_flag= IBY_PAYGROUP_PUB.pmtTable.bill_payable_flag(i),
             exclusive_payment_flag =IBY_PAYGROUP_PUB.pmtTable.exclusive_payment_flag(i),
             --separate_remit_advice_req_flag=IBY_PAYGROUP_PUB.pmtTable.sep_remit_advice_req_flag(i),
             internal_bank_account_id=  IBY_PAYGROUP_PUB.pmtTable.internal_bank_account_id(i),
             org_id =IBY_PAYGROUP_PUB.pmtTable.org_id(i),
             org_type=IBY_PAYGROUP_PUB.pmtTable.org_type(i),
             legal_entity_id=            IBY_PAYGROUP_PUB.pmtTable.legal_entity_id(i),
             declare_payment_flag=            IBY_PAYGROUP_PUB.pmtTable.declare_payment_flag(i),
             delivery_channel_code=            IBY_PAYGROUP_PUB.pmtTable.delivery_channel_code(i),
             ext_payee_id=IBY_PAYGROUP_PUB.pmtTable.ext_payee_id(i),
             payment_instruction_id =IBY_PAYGROUP_PUB.pmtTable.payment_instruction_id(i),
             payment_profile_id=            IBY_PAYGROUP_PUB.pmtTable.payment_profile_id(i),
             pregrouped_payment_flag=IBY_PAYGROUP_PUB.pmtTable.pregrouped_payment_flag(i),
             stop_confirmed_flag=IBY_PAYGROUP_PUB.pmtTable.stop_confirmed_flag(i),
             stop_released_flag =IBY_PAYGROUP_PUB.pmtTable.stop_released_flag(i),
             stop_request_placed_flag =IBY_PAYGROUP_PUB.pmtTable.stop_request_placed_flag(i),
             created_by=IBY_PAYGROUP_PUB.pmtTable.created_by(i),
             creation_date =IBY_PAYGROUP_PUB.pmtTable.creation_date(i),
             last_updated_by =IBY_PAYGROUP_PUB.pmtTable.last_updated_by(i),
             last_update_login =IBY_PAYGROUP_PUB.pmtTable.last_update_login(i),
             last_update_date= IBY_PAYGROUP_PUB.pmtTable.last_update_date(i),
             object_version_number =IBY_PAYGROUP_PUB.pmtTable.object_version_number(i),
             payee_party_id =IBY_PAYGROUP_PUB.pmtTable.payee_party_id(i),
             party_site_id =IBY_PAYGROUP_PUB.pmtTable.party_site_id(i),
             supplier_site_id =IBY_PAYGROUP_PUB.pmtTable.supplier_site_id(i),
             payment_reason_code =IBY_PAYGROUP_PUB.pmtTable.payment_reason_code(i),
             payment_reason_comments =IBY_PAYGROUP_PUB.pmtTable.payment_reason_comments(i),
             payment_date =IBY_PAYGROUP_PUB.pmtTable.payment_date(i),
             anticipated_value_date=            IBY_PAYGROUP_PUB.pmtTable.anticipated_value_date(i),
             declaration_amount=            IBY_PAYGROUP_PUB.pmtTable.declaration_amount(i),
            declaration_currency_code=             IBY_PAYGROUP_PUB.pmtTable.declaration_currency_code(i),
             discount_amount_taken=            IBY_PAYGROUP_PUB.pmtTable.discount_amount_taken(i),
             payment_details=            IBY_PAYGROUP_PUB.pmtTable.payment_details(i),
             bank_charge_bearer=            IBY_PAYGROUP_PUB.pmtTable.bank_charge_bearer(i),
             bank_charge_amount=IBY_PAYGROUP_PUB.pmtTable.bank_charge_amount(i),
             settlement_priority=            IBY_PAYGROUP_PUB.pmtTable.settlement_priority(i),
             remittance_message1=            IBY_PAYGROUP_PUB.pmtTable.remittance_message1(i),
             remittance_message2=IBY_PAYGROUP_PUB.pmtTable.remittance_message2(i),
             remittance_message3=IBY_PAYGROUP_PUB.pmtTable.remittance_message3(i),
             payment_reference_number=IBY_PAYGROUP_PUB.pmtTable.payment_reference_number(i),
             paper_document_number=IBY_PAYGROUP_PUB.pmtTable.paper_document_number(i),
             bank_assigned_ref_code=            IBY_PAYGROUP_PUB.pmtTable.bank_assigned_ref_code(i),
             external_bank_account_id=            IBY_PAYGROUP_PUB.pmtTable.external_bank_account_id(i),
             unique_remittance_identifier=            IBY_PAYGROUP_PUB.pmtTable.unique_remittance_identifier(i),
             uri_check_digit=            IBY_PAYGROUP_PUB.pmtTable.uri_check_digit(i),
             bank_instruction1_code=            IBY_PAYGROUP_PUB.pmtTable.bank_instruction1_code(i),
             bank_instruction2_code=            IBY_PAYGROUP_PUB.pmtTable.bank_instruction2_code(i),
             bank_instruction_details=            IBY_PAYGROUP_PUB.pmtTable.bank_instruction_details(i),
             payment_text_message1=    IBY_PAYGROUP_PUB.pmtTable.payment_text_message1(i),
             payment_text_message2=IBY_PAYGROUP_PUB.pmtTable.payment_text_message2(i),
             payment_text_message3=IBY_PAYGROUP_PUB.pmtTable.payment_text_message3(i),
             maturity_date=IBY_PAYGROUP_PUB.pmtTable.maturity_date(i),
             payment_due_date=IBY_PAYGROUP_PUB.pmtTable.payment_due_date(i),
             document_category_code=IBY_PAYGROUP_PUB.pmtTable.document_category_code(i),
             document_sequence_id=IBY_PAYGROUP_PUB.pmtTable.document_sequence_id(i),
             document_sequence_value=IBY_PAYGROUP_PUB.pmtTable.document_sequence_value(i),
             beneficiary_party=IBY_PAYGROUP_PUB.pmtTable.beneficiary_party(i),
             stop_confirmed_by=IBY_PAYGROUP_PUB.pmtTable.stop_confirmed_by(i),
             stop_confirm_date=IBY_PAYGROUP_PUB.pmtTable.stop_confirm_date(i),
             stop_confirm_reason=IBY_PAYGROUP_PUB.pmtTable.stop_confirm_reason(i),
             stop_confirm_reference=IBY_PAYGROUP_PUB.pmtTable.stop_confirm_reference(i),
             stop_released_by=IBY_PAYGROUP_PUB.pmtTable.stop_released_by(i),
             stop_release_date=IBY_PAYGROUP_PUB.pmtTable.stop_release_date(i),
             stop_release_reason=IBY_PAYGROUP_PUB.pmtTable.stop_release_reason(i),
             stop_release_reference=IBY_PAYGROUP_PUB.pmtTable.stop_release_reference(i),
             stop_request_date=IBY_PAYGROUP_PUB.pmtTable.stop_release_reference(i),
             stop_request_placed_by=IBY_PAYGROUP_PUB.pmtTable.stop_release_reference(i),
             stop_request_reason=IBY_PAYGROUP_PUB.pmtTable.stop_release_reference(i),
             stop_request_reference=IBY_PAYGROUP_PUB.pmtTable.stop_release_reference(i),
             voided_by=IBY_PAYGROUP_PUB.pmtTable.voided_by(i),
             void_date=IBY_PAYGROUP_PUB.pmtTable.void_date(i),
             void_reason=IBY_PAYGROUP_PUB.pmtTable.void_reason(i),
             remit_to_location_id=IBY_PAYGROUP_PUB.pmtTable.remit_to_location_id(i),
             completed_pmts_group_id=IBY_PAYGROUP_PUB.pmtTable.completed_pmts_group_id(i),
             attribute_category=IBY_PAYGROUP_PUB.pmtTable.attribute_category(i),
             attribute1=IBY_PAYGROUP_PUB.pmtTable.attribute1(i),
             attribute2=IBY_PAYGROUP_PUB.pmtTable.attribute2(i),
             attribute3=IBY_PAYGROUP_PUB.pmtTable.attribute3(i),
             attribute4=IBY_PAYGROUP_PUB.pmtTable.attribute4(i),
             attribute5=IBY_PAYGROUP_PUB.pmtTable.attribute5(i),
             attribute6=IBY_PAYGROUP_PUB.pmtTable.attribute6(i),
             attribute7=IBY_PAYGROUP_PUB.pmtTable.attribute7(i),
             attribute8=IBY_PAYGROUP_PUB.pmtTable.attribute8(i),
             attribute9=IBY_PAYGROUP_PUB.pmtTable.attribute9(i),
             attribute10=IBY_PAYGROUP_PUB.pmtTable.attribute10(i),
             attribute11=IBY_PAYGROUP_PUB.pmtTable.attribute11(i),
             attribute12=IBY_PAYGROUP_PUB.pmtTable.attribute12(i),
             attribute13=IBY_PAYGROUP_PUB.pmtTable.attribute13(i),
             attribute14=IBY_PAYGROUP_PUB.pmtTable.attribute14(i),
             attribute15=IBY_PAYGROUP_PUB.pmtTable.attribute15(i),
             ext_branch_number=            IBY_PAYGROUP_PUB.pmtTable.ext_branch_number(i),
             ext_bank_number=            IBY_PAYGROUP_PUB.pmtTable.ext_bank_number(i),
             ext_bank_account_name=            IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_name(i),
             ext_bank_account_number=            IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_number(i),
             ext_bank_account_type=            IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_type(i),
             ext_bank_account_iban_number=            IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_iban_number(i),
             payee_name=            IBY_PAYGROUP_PUB.pmtTable.payee_name(i),
             payee_address1=            IBY_PAYGROUP_PUB.pmtTable.payee_address1(i),
             payee_address2=            IBY_PAYGROUP_PUB.pmtTable.payee_address2(i),
             payee_address3=            IBY_PAYGROUP_PUB.pmtTable.payee_address3(i),
             payee_address4=            IBY_PAYGROUP_PUB.pmtTable.payee_address4(i),
             payee_city=            IBY_PAYGROUP_PUB.pmtTable.payee_city(i),
             payee_postal_code=            IBY_PAYGROUP_PUB.pmtTable.payee_postal_code(i),
             payee_state=            IBY_PAYGROUP_PUB.pmtTable.payee_state(i),
             payee_province=            IBY_PAYGROUP_PUB.pmtTable.payee_province(i),
             payee_county=            IBY_PAYGROUP_PUB.pmtTable.payee_county(i),
             payee_country=            IBY_PAYGROUP_PUB.pmtTable.payee_country(i),
             remit_advice_delivery_method=            IBY_PAYGROUP_PUB.pmtTable.remit_advice_delivery_method(i),
             remit_advice_email=            IBY_PAYGROUP_PUB.pmtTable.remit_advice_email(i),
             remit_advice_fax=            IBY_PAYGROUP_PUB.pmtTable.remit_advice_fax(i),
             address_source=            IBY_PAYGROUP_PUB.pmtTable.address_source(i),
             employee_address_code=            IBY_PAYGROUP_PUB.pmtTable.employee_address_code(i),
             employee_person_id=            IBY_PAYGROUP_PUB.pmtTable.employee_person_id(i),
             employee_address_id=            IBY_PAYGROUP_PUB.pmtTable.employee_address_id(i),
             employee_payment_flag=            IBY_PAYGROUP_PUB.pmtTable.employee_payment_flag(i),
		ext_inv_payee_id  =	     	IBY_PAYGROUP_PUB.pmtTable.ext_inv_payee_id(i),
		inv_payee_party_id  =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_id(i),
		inv_party_site_id  =		IBY_PAYGROUP_PUB.pmtTable.inv_party_site_id(i),
		inv_supplier_site_id  =		IBY_PAYGROUP_PUB.pmtTable.inv_supplier_site_id(i),
		inv_beneficiary_party  =		IBY_PAYGROUP_PUB.pmtTable.inv_beneficiary_party(i),
		inv_payee_name  =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_name(i),
		inv_payee_address1  =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_address1(i),
		inv_payee_address2  =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_address2(i),
		inv_payee_address3  =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_address3(i),
		inv_payee_address4  =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_address4(i),
		inv_payee_city  =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_city(i),
		inv_payee_postal_code  =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_postal_code(i),
		inv_payee_state  =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_state(i),
		inv_payee_province  =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_province(i),
		inv_payee_county  =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_county(i),
		inv_payee_country  =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_country(i),
		inv_payee_party_name  =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_name(i),
		inv_payee_le_reg_num =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_le_reg_num(i),
		inv_payee_tax_reg_num =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_tax_reg_num(i),
		inv_payee_address_concat  =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_address_concat(i),
		inv_beneficiary_name  =		IBY_PAYGROUP_PUB.pmtTable.inv_beneficiary_name(i),
		inv_payee_party_number  =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_number(i),
		inv_payee_alternate_name  =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_alternate_name(i),
		inv_payee_site_alt_name =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_site_alt_name(i),
		inv_payee_supplier_number  =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_number(i),
		inv_payee_first_party_ref =		IBY_PAYGROUP_PUB.pmtTable.inv_payee_first_party_ref(i),
		ext_bnk_acct_ownr_inv_prty_id =IBY_PAYGROUP_PUB.pmtTable.ext_bnk_acct_ownr_inv_prty_id(i),
		ext_bnk_branch_inv_prty_id =IBY_PAYGROUP_PUB.pmtTable.ext_bnk_branch_inv_prty_id(i),
		ext_bnk_acct_ownr_inv_prty_nme =IBY_PAYGROUP_PUB.pmtTable.ext_bnk_acct_ownr_inv_prty_nme(i),
		inv_payee_party_attr_cat =IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_attr_cat(i),
		inv_payee_supplier_attr_cat =IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_attr_cat(i),
		inv_payee_spplr_site_attr_cat =IBY_PAYGROUP_PUB.pmtTable.inv_payee_spplr_site_attr_cat(i),
		inv_payee_supplier_site_name  =IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_site_name(i),
		inv_payee_spplr_site_alt_name =IBY_PAYGROUP_PUB.pmtTable.inv_payee_spplr_site_alt_name(i),
		inv_payee_supplier_id =IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_id(i),
             payer_party_number             	 =IBY_PAYGROUP_PUB.pmtTable.payer_party_number(i),
             payer_party_site_name          	 =IBY_PAYGROUP_PUB.pmtTable.payer_party_site_name(i),
             payer_legal_entity_name        	 =IBY_PAYGROUP_PUB.pmtTable.payer_legal_entity_name(i),
             payer_tax_registration_num     	 =IBY_PAYGROUP_PUB.pmtTable.payer_tax_registration_num(i),
             payer_le_registration_num      	 =IBY_PAYGROUP_PUB.pmtTable.payer_le_registration_num(i),
             payer_party_id                 	 =IBY_PAYGROUP_PUB.pmtTable.payer_party_id(i),
             payer_location_id              	 =IBY_PAYGROUP_PUB.pmtTable.payer_location_id(i),
             payer_party_attr_category      	 =IBY_PAYGROUP_PUB.pmtTable.payer_party_attr_category(i),
             payer_le_attr_category         	 =IBY_PAYGROUP_PUB.pmtTable.payer_le_attr_category(i),
             payer_abbreviated_agency_code  	 =IBY_PAYGROUP_PUB.pmtTable.payer_abbreviated_agency_code(i),
             payer_federal_us_employer_id   	 =IBY_PAYGROUP_PUB.pmtTable.payer_federal_us_employer_id(i),
             int_bank_name                  	 =IBY_PAYGROUP_PUB.pmtTable.int_bank_name(i),
             int_bank_number                	 =IBY_PAYGROUP_PUB.pmtTable.int_bank_number(i),
             int_bank_branch_number         	 =IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_number(i),
             int_bank_branch_name           	 =IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_name(i),
             int_eft_swift_code             	 =IBY_PAYGROUP_PUB.pmtTable.int_eft_swift_code(i),
             int_bank_account_number        	 =IBY_PAYGROUP_PUB.pmtTable.int_bank_account_number(i),
             int_bank_account_name          	 =IBY_PAYGROUP_PUB.pmtTable.int_bank_account_name(i),
             int_bank_account_iban          	 =IBY_PAYGROUP_PUB.pmtTable.int_bank_account_iban(i),
             int_bank_acct_agency_loc_code  	 =IBY_PAYGROUP_PUB.pmtTable.int_bank_acct_agency_loc_code(i),
             int_bank_branch_party_id       	 =IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_party_id(i),
             int_bank_alt_name              	 =IBY_PAYGROUP_PUB.pmtTable.int_bank_alt_name(i),
             int_bank_branch_alt_name       	 =IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_alt_name(i),
             int_bank_account_alt_name      	 =IBY_PAYGROUP_PUB.pmtTable.int_bank_account_alt_name(i),
             int_bank_account_num_elec      	 =IBY_PAYGROUP_PUB.pmtTable.int_bank_account_num_elec(i),
             int_bank_branch_location_id    	 =IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_location_id(i),
             int_bank_branch_eft_user_num   	 =IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_eft_user_num(i),
             payee_party_number             	 =IBY_PAYGROUP_PUB.pmtTable.payee_party_number(i),
             payee_party_name               	 =IBY_PAYGROUP_PUB.pmtTable.payee_party_name(i),
             payee_alternate_name           	 =IBY_PAYGROUP_PUB.pmtTable.payee_alt_name(i),
             payee_address_concat           	 =IBY_PAYGROUP_PUB.pmtTable.payee_address_concat(i),
             beneficiary_name               	 =IBY_PAYGROUP_PUB.pmtTable.beneficiary_name(i),
             payee_party_attr_category      	 =IBY_PAYGROUP_PUB.pmtTable.payee_party_atr_cat(i),
             payee_spplr_site_attr_category 	 =IBY_PAYGROUP_PUB.pmtTable.payee_spplr_site_attr_category(i),
             payee_supplier_site_name       	 =IBY_PAYGROUP_PUB.pmtTable.payee_supplier_site_name(i),
             payee_addressee                	 =IBY_PAYGROUP_PUB.pmtTable.payee_addressee(i),
             payee_site_alternate_name      	 =IBY_PAYGROUP_PUB.pmtTable.payee_site_alternate_name(i),
             payee_supplier_number          	 =IBY_PAYGROUP_PUB.pmtTable.payee_supplier_number(i),
             payee_first_party_reference    	 =IBY_PAYGROUP_PUB.pmtTable.payee_first_party_reference(i),
             payee_supplier_attr_category   	 =IBY_PAYGROUP_PUB.pmtTable.payee_supplier_attr_category(i),
             payee_supplier_id              	 =IBY_PAYGROUP_PUB.pmtTable.payee_supplier_id(i),
             payee_tax_registration_num  =IBY_PAYGROUP_PUB.pmtTable.payee_tax_registration_num(i),
             payee_le_registration_num   =IBY_PAYGROUP_PUB.pmtTable.payee_le_registration_num(i),
             ext_bank_name =IBY_PAYGROUP_PUB.pmtTable.ext_bank_name(i),
              ext_bank_branch_name           	 =IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_name(i),
              ext_eft_swift_code             	 =IBY_PAYGROUP_PUB.pmtTable.ext_eft_swift_code(i),
              ext_bank_acct_pmt_factor_flag  	 =IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_pmt_factor_flag(i),
              ext_bank_acct_owner_party_id   	 =IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_owner_party_id(i),
              ext_bank_branch_party_id       	 =IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_party_id(i),
              ext_bank_alt_name              	 =IBY_PAYGROUP_PUB.pmtTable.ext_bank_alt_name(i),
              ext_bank_branch_alt_name       	 =IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_alt_name(i),
              ext_bank_account_alt_name      	 =IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_alt_name(i),
              ext_bank_account_num_elec      	 =IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_num_elec(i),
             ext_bank_branch_location_id    	 =IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_location_id(i),
             ext_bank_acct_owner_party_name 	 =IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_owner_party_name(i),
             --remit_advice_delivery_method   	 =IBY_PAYGROUP_PUB.pmtTable.inv_payee_first_party_ref(i),
             --remit_advice_email             	 =IBY_PAYGROUP_PUB.pmtTable.inv_payee_first_party_ref(i),
             --remit_advice_fax               	 =IBY_PAYGROUP_PUB.pmtTable.inv_payee_first_party_ref(i),
             delivery_channel_format_value  	 =IBY_PAYGROUP_PUB.pmtTable.delivery_channel_format_value(i),
             declaration_exch_rate_type     	 =IBY_PAYGROUP_PUB.pmtTable.declaration_exch_rate_type(i),
             declaration_format             	 =IBY_PAYGROUP_PUB.pmtTable.declaration_format(i),
             payment_profile_acct_name      	 =IBY_PAYGROUP_PUB.pmtTable.payment_profile_acct_name(i),
             payment_profile_sys_name       	 =IBY_PAYGROUP_PUB.pmtTable.payment_profile_sys_name(i),
             payment_reason_format_value    	 =IBY_PAYGROUP_PUB.pmtTable.payment_reason_format_value(i),
             bank_instruction1_format_value 	 =IBY_PAYGROUP_PUB.pmtTable.bank_instruction1_format_value(i),
             bank_instruction2_format_value 	 =IBY_PAYGROUP_PUB.pmtTable.bank_instruction2_format_value(i),
             org_name                       	 =IBY_PAYGROUP_PUB.pmtTable.org_name(i),
             int_bank_branch_rfc_identifier  =IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_rfc_identifier(i),
             payment_process_request_name    =IBY_PAYGROUP_PUB.pmtTable.payment_process_request_name(i),
             source_product=IBY_PAYGROUP_PUB.pmtTable.source_product(i)
	     where payment_id = IBY_PAYGROUP_PUB.pmtTable.payment_id(i);


     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'EXIT');
     END IF;
 END updatePayments;




/*--------------------------------------------------------------------
 | NAME:
 |     getNextPaymentID
 |
 | PURPOSE:
 |     Returns the next payment id from a sequence. These ids are
 |     used to uniquely number payments.
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE getNextPaymentID(
     x_paymentID IN OUT NOCOPY IBY_PAYMENTS_ALL.payment_id%TYPE
     )
 IS

 BEGIN

     SELECT IBY_PAYMENTS_ALL_S.nextval INTO x_paymentID
         FROM DUAL;

 END getNextPaymentID;

/*--------------------------------------------------------------------
 | NAME:
 |     updateDocsWithPaymentID
 |
 | PURPOSE:
 |     Updates individual documents in IBY_DOCS_PAYABLE_ALL table
 |     with payment ids from given PLSQL table.
 |
 | PARAMETERS:
 |     IN
 |     p_docsInPmtTab -
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE updateDocsWithPaymentID(
     p_docsInPmtTab  IN docsInPaymentTabType
     )
 IS
 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.updateDocsWithPaymentID';

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'ENTER');
     END IF;
     /* Normally, this should not happen */
     IF (p_docsInPmtTab.COUNT = 0) THEN
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'After grouping, no '
             || 'payments/documents provided to update '
             || 'IBY_DOCS_PAYABLE_ALL table. Possible data '
             || 'corruption issue.');
         END IF;

         RETURN;
     END IF;

     /*
      * Update the documents. We cannot use bulk update here
      * because the bulk update syntax does not allow us to
      * reference individual fields of the PL/SQL record.
      *
      * By default, set the formatting payment it for a
      * document same as it's payment id; the payment
      * instruction creation program will update the
      * formatting payment id for overflow documents.
      *
      * TBD: Is there any way to optimize this update?
      */
     FOR i in p_docsInPmtTab.FIRST..p_docsInPmtTab.LAST LOOP

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Payment: '
             || p_docsInPmtTab(i).payment_id || ', document: '
             || p_docsInPmtTab(i).document_id);

         END IF;

         UPDATE
             IBY_DOCS_PAYABLE_ALL
         SET
             payment_id            = p_docsInPmtTab(i).payment_id,
             formatting_payment_id = p_docsInPmtTab(i).payment_id,
             document_status       = p_docsInPmtTab(i).document_status,

             /*
              * Document payment amount might have gotten
              * changed during credit memo handling. So we
              * need to update document amount from PLSQL
              * table.
              */
             payment_amount       = p_docsInPmtTab(i).document_amount,
	     payment_curr_discount_taken = p_docsInPmtTab(i).pmt_curr_discount,

             /*
              * Bank charge amount and amount withheld might have
              * been supplied by external hook.
              */
             amount_withheld       = p_docsInPmtTab(i).amount_withheld,

             /*
              * Fix for bug 4405981:
              *
              * The straight through flag should be set to 'N',
              * if the document was rejected / required manual
              * intervention.
              */
             straight_through_flag =
                    DECODE(
                           p_docsInPmtTab(i).document_status,
                           DOC_STATUS_CA_FAILED,      'N',
                           DOC_STATUS_RELN_FAIL,      'N',
                           DOC_STATUS_FAIL_BY_REJLVL, 'N',
                           DOC_STATUS_PAY_VAL_FAIL,   'N',
                           'Y'
                           )
         WHERE
             document_payable_id   = p_docsInPmtTab(i).document_id
         ;

     END LOOP;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'EXIT');
     END IF;

 END updateDocsWithPaymentID;

/*--------------------------------------------------------------------
 | NAME:
 |     updateDocsWithPaymentID
 |
 | PURPOSE:
 |     Updates individual documents in IBY_DOCS_PAYABLE_ALL table
 |     with payment ids from given PLSQL table.
 |
 | PARAMETERS:
 |     IN
 |     p_docsInPmtTab -
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE updateDocsWithPaymentID
 IS
 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.updateDocsWithPaymentID';

 BEGIN

     /*
      * Update the documents. We cannot use bulk update here
      * because the bulk update syntax does not allow us to
      * reference individual fields of the PL/SQL record.
      *
      * By default, set the formatting payment it for a
      * document same as it's payment id; the payment
      * instruction creation program will update the
      * formatting payment id for overflow documents.
      *
      * TBD: Is there any way to optimize this update?
      */
     MERGE
     INTO iby_docs_payable_all idpa
 /* Oracle 10gR2 doesn't require WHEN NOT MATCHED */
     USING iby_docs_in_pmt_gt idpt ON(idpt.document_payable_id = idpa.document_payable_id)
     WHEN MATCHED THEN UPDATE
     SET idpa.payment_id = idpt.payment_id,
      idpa.formatting_payment_id = idpt.payment_id,
      idpa.document_status = idpt.document_status,
      idpa.payment_amount       = idpt.document_amount,
      idpa.payment_curr_discount_taken = idpt.payment_curr_discount_taken,
      idpa.amount_withheld       = idpt.amount_withheld,
      idpa.straight_through_flag = DECODE(
                           idpt.document_status,
                           DOC_STATUS_CA_FAILED,      'N',
                           DOC_STATUS_RELN_FAIL,      'N',
                           DOC_STATUS_FAIL_BY_REJLVL, 'N',
                           DOC_STATUS_PAY_VAL_FAIL,   'N',
                           'Y'
                           );

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'EXIT');
     END IF;

 END updateDocsWithPaymentID;

/*--------------------------------------------------------------------
 | NAME:
 |     performCentralBankReporting
 |
 | PURPOSE:
 |     Checks if a payment needs to be reported to the central bank.
 |     If central bank reporting is needed, this method will set the
 |     'declare payment flag' on the payment.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE performCentralBankReporting(
     x_paymentTab             IN OUT NOCOPY paymentTabType,
     x_docsInPmtTab           IN OUT NOCOPY docsInPaymentTabType
--  ,     p_cbrTab                 IN            centralBankReportTabType
     )
 IS

 l_module_name    CONSTANT VARCHAR2(200) := G_PKG_NAME
                                             || '.performCentralBankReporting';
 l_pmt_fx_amount  iby_payments_all.payment_amount%TYPE := -1;
 l_return_status  VARCHAR2(200);
 l_declare_flag   VARCHAR2(1);
 l_profile_id     IBY_PAYMENT_PROFILES.payment_profile_id%type;

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'ENTER');
     END IF;


     /* for each payment */
     FOR i in  x_paymentTab.FIRST ..  x_paymentTab.LAST LOOP

        l_profile_id :=  x_paymentTab(i).payment_profile_id;
        IF NOT(iby_disburse_submit_pub_pkg.paymentProfilesTab.exists(l_profile_id)) THEN
           iby_disburse_submit_pub_pkg.set_profile_attribs(l_profile_id);
        END IF;

           /*
            * Check if the payment needs to be declared to the
            * central bank.
            */
        IF (iby_disburse_submit_pub_pkg.paymentProfilesTab(l_profile_id).declaration_option =
                     'DECLARE_DIRECT_TO_CENTRAL_BANK') THEN

              /*
               * Perform central bank reporting only for non-failed
               * payments.
               */
               IF (x_paymentTab(i).payment_status <>
                   PAY_STATUS_REJECTED) THEN

                  /*
                   * Fix for bug 5221692:
                   *
                   * User can customize the logic to determine
                   * whether central bank reporting is required
                   * by implementing the default stub function
                   * IBY_EXTENSIBILITY_CALLOUTS_PUB.
                   *     isCentralBankReportingRequired(..).
                   *
                   * If this stub is implemented use the value
                   * returned by the stub, else use the declaration
                   * threshold amount to determine whether to report
                   * payment to central bank.
                   */
                  IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			print_debuginfo(l_module_name, 'Attempting to '
                             || 'invoke customizable function '
                             || 'IBY_EXTENSIBILITY_CALLOUTS_PUB.'
                             || 'isCentralBankReportingRequired(..) for '
                             || 'payment '
                             || x_paymentTab(i).payment_id
                             );

	          END IF;
                  l_declare_flag := IBY_EXTENSIBILITY_CALLOUTS_PUB.
                                         isCentralBankReportingRequired(
                                            x_paymentTab(i).payment_id,
                                            l_return_status
                                            );

                  IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			print_debuginfo(l_module_name, 'Callout '
                                 || 'IBY_EXTENSIBILITY_CALLOUTS_PUB.'
                                 || 'isCentralBankReportingRequired(..) for '
                                 || 'payment '
                                 || x_paymentTab(i).payment_id
                                 || 'returned: '
                                 || l_return_status
                                 || '. Raising exception ..',
                                 FND_LOG.LEVEL_UNEXPECTED
                                 );
		      END IF;

                     /*
                      * This should never happen. Raise an
                      * exception.
                      */
                     APP_EXCEPTION.RAISE_EXCEPTION;

                  ELSE

                     /*
                      * If callout returns 'Y' / 'N', use the return
                      * value. Else consider that the callout has
                      * not been implemented and use the threshold
                      * amount to determine whether to declare the
                      * payment.
                      */
                     IF (l_declare_flag = 'Y' OR
                         l_declare_flag = 'N') THEN

                        /*
                         * Set the declare flag specified by the
                         * callout.
                         */
                        IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                        print_debuginfo(l_module_name,
                                     'Flag returned by '
                                     || 'callout: '
                                     || l_declare_flag
                                     );
			END IF;
                        x_paymentTab(i).declare_payment_flag :=
                                     l_declare_flag;

                     ELSE

                        IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name,  'Stubbed '
                                     || 'customizable function '
                                     || 'IBY_EXTENSIBILITY_CALLOUTS_PUB.'
                                     || 'isCentralBankReportingRequired(..) '
                                     || 'not implemented. Checking whether '
                                     || 'payment amount exceeds declaration '
                                     || 'threshold ..'
                                     );
		          END IF;

                        /*
                         * If we reached here, it means user has
                         * not implemented custom logic for
                         * determining whether central bank
                         * reporting is needed.
                         *
                         * We will determine whether central
                         * bank reporting is needed by checking
                         * if the payment exceeds user specified
                         * amount threshold.
                         */

                         /*
                         * Step 2:
                         * Calculate the reporting amount at the
                         * payment level. Reporting amount is the
                         * payment amount converted to reporting
                         * currency.
                         *
                         * NOTE: We call a GL API to perform the
                         * currency conversion.
                         */

       --
       -- Use the dummy call for testing purposes.
       --
       --
       --dummyGLAPI(
       --    sysdate,                         /* IN:  exchange rate date */
       --    x_paymentTab(i).payment_amount,  /* IN:  source amount */
       --    x_paymentTab(i).payment_currency,/* IN:  source currency */
       --    p_cbrTab(j).decl_curr_code,      /* IN:  target currency */
       --    p_cbrTab(j).decl_curr_fx_rate_type, /* IN:  exchange rate type */
       --    l_pmt_fx_amount               /* OUT: amt in target currency */
       --    );

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
				print_debuginfo(l_module_name,
                                     'Payment #: '
                                     || i
                                     || ', payment amount: '
                                     || x_paymentTab(i).payment_amount
                                     || ', payment currency: '
                                     || x_paymentTab(i).payment_currency_code
                                     || ', declaration currency: '
                                     || iby_disburse_submit_pub_pkg.paymentProfilesTab(l_profile_id).declaration_currency_code
                                     || ', exchange rate type: '
                                     || iby_disburse_submit_pub_pkg.paymentProfilesTab(l_profile_id).declaration_curr_fx_rate_type
                                     );

		         END IF;
                                 /* OUT: target amount */
                         l_pmt_fx_amount := getFxAmount(

                                     /* IN:  source currency */
                                     x_paymentTab(i).payment_currency_code,

                                     /* IN:  target currency */
                                     iby_disburse_submit_pub_pkg.paymentProfilesTab(l_profile_id).declaration_currency_code,

                                     /* IN:  exchange rate date */
                                     sysdate,

                                     /* IN:  exchange rate type */
                                     iby_disburse_submit_pub_pkg.paymentProfilesTab(l_profile_id).declaration_curr_fx_rate_type,

                                     /* IN:  source amount */
                                     x_paymentTab(i).payment_amount
                                     );

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name,
                                     'Declaration amount '
                                     || 'in reporting currency '
                                     || iby_disburse_submit_pub_pkg.paymentProfilesTab(l_profile_id).declaration_currency_code
                                     || ' derived from calling from GL API: '
                                     || l_pmt_fx_amount
                                     );

			 print_debuginfo(l_module_name,
                                     'Declaration amount '
                                     || 'threshold in reporting currency: '
                                     || iby_disburse_submit_pub_pkg.paymentProfilesTab(l_profile_id).declaration_threshold_amount
                                     );

			  END IF;
                         IF (l_pmt_fx_amount = -1) THEN

                            /*
                             * Error occurred in call to GL API
                             * to convert amount. Raise exception.
                             */
                             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
				print_debuginfo(l_module_name, 'Reporting '
                                         || 'amount is -1. '
                                         || 'Raising exception.',
                                         FND_LOG.LEVEL_UNEXPECTED
                                         );

			     END IF;
                             APP_EXCEPTION.RAISE_EXCEPTION;

                         ELSE

                             x_paymentTab(i).declaration_amount :=
                                         l_pmt_fx_amount;

                         END IF;

                         /*
                          * Step 3:
                          * If the reporting amount on the payment is
                          * greater than the reporting threshold, set
                          * the 'report payment flag' on the payment.
                          */

                         /*
                          * Set the declare flag based on amount
                          * threshold.
                          */

                         IF (l_pmt_fx_amount >
                             iby_disburse_submit_pub_pkg.paymentProfilesTab(l_profile_id).declaration_threshold_amount) THEN

                            x_paymentTab(i).declare_payment_flag := 'Y';

                         ELSE

                            x_paymentTab(i).declare_payment_flag := 'N';

                         END IF;

                     END IF; -- if declare flag = Y / N

                  END IF; -- if return status <> SUCCESS

                  IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			print_debuginfo(l_module_name, 'Payment #: '
                             || i
                             || ', declaration flag: '
                             || x_paymentTab(i).declare_payment_flag
                             );

		  END IF;  -- if statement level debugging is enabled

               END IF; -- if payment has not failed validation

        END IF; -- if declaration option is set

     END LOOP; -- for each payment

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'EXIT');
     END IF;

     EXCEPTION

         WHEN OTHERS THEN
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	     print_debuginfo(l_module_name, 'Fatal: Exception when attempting '
                 || 'to call GL API ''gl_currency_api.convert_amount()''.',
                 FND_LOG.LEVEL_UNEXPECTED
                 );

             print_debuginfo(l_module_name, 'SQL code: '   || SQLCODE,
                 FND_LOG.LEVEL_UNEXPECTED);
             print_debuginfo(l_module_name, 'SQL err msg: '|| SQLERRM,
                 FND_LOG.LEVEL_UNEXPECTED);

             END IF;

             /*
              * Propogate exception to caller.
              */
             RAISE;

 END performCentralBankReporting;

/*--------------------------------------------------------------------
 | NAME:
 |     performCentralBankReporting
 |
 | PURPOSE:
 |     Checks if a payment needs to be reported to the central bank.
 |     If central bank reporting is needed, this method will set the
 |     'declare payment flag' on the payment.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE performCentralBankReporting(
    l_trx_cbr_index		IN BINARY_INTEGER
--     x_paymentTab             IN OUT NOCOPY paymentTabType
--     x_docsInPmtTab           IN OUT NOCOPY docsInPaymentTabType
--  ,     p_cbrTab                 IN            centralBankReportTabType
     )
 IS

 l_module_name    CONSTANT VARCHAR2(200) := G_PKG_NAME
                                             || '.performCentralBankReporting';
 l_pmt_fx_amount  iby_payments_all.payment_amount%TYPE := -1;
 l_return_status  VARCHAR2(200);
 l_declare_flag   VARCHAR2(1);
 l_profile_id     IBY_PAYMENT_PROFILES.payment_profile_id%type;

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'ENTER');
     END IF;


     /* for each payment */
     --FOR i in  x_paymentTab.FIRST ..  x_paymentTab.LAST LOOP

        l_profile_id := IBY_PAYGROUP_PUB.pmtTable.payment_profile_id(l_trx_cbr_index);
        IF NOT(iby_disburse_submit_pub_pkg.paymentProfilesTab.exists(l_profile_id)) THEN
           iby_disburse_submit_pub_pkg.set_profile_attribs(l_profile_id);
        END IF;

           /*
            * Check if the payment needs to be declared to the
            * central bank.
            */
        IF (iby_disburse_submit_pub_pkg.paymentProfilesTab(l_profile_id).declaration_option =
                     'DECLARE_DIRECT_TO_CENTRAL_BANK') THEN

              /*
               * Perform central bank reporting only for non-failed
               * payments.
               */
               IF (IBY_PAYGROUP_PUB.pmtTable.payment_status(l_trx_cbr_index) <>
                   PAY_STATUS_REJECTED) THEN

                  /*
                   * Fix for bug 5221692:
                   *
                   * User can customize the logic to determine
                   * whether central bank reporting is required
                   * by implementing the default stub function
                   * IBY_EXTENSIBILITY_CALLOUTS_PUB.
                   *     isCentralBankReportingRequired(..).
                   *
                   * If this stub is implemented use the value
                   * returned by the stub, else use the declaration
                   * threshold amount to determine whether to report
                   * payment to central bank.
                   */
                  IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			print_debuginfo(l_module_name, 'Attempting to '
                             || 'invoke customizable function '
                             || 'IBY_EXTENSIBILITY_CALLOUTS_PUB.'
                             || 'isCentralBankReportingRequired(..) for '
                             || 'payment '
                             ||IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_cbr_index)
                             );

	          END IF;
                  l_declare_flag := IBY_EXTENSIBILITY_CALLOUTS_PUB.
                                         isCentralBankReportingRequired(
                                           IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_cbr_index),
					    l_trx_cbr_index,
                                            l_return_status
                                            );

                  IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			print_debuginfo(l_module_name, 'Callout '
                                 || 'IBY_EXTENSIBILITY_CALLOUTS_PUB.'
                                 || 'isCentralBankReportingRequired(..) for '
                                 || 'payment '
                                 ||IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_cbr_index)
                                 || 'returned: '
                                 || l_return_status
                                 || '. Raising exception ..',
                                 FND_LOG.LEVEL_UNEXPECTED
                                 );
		      END IF;

                     /*
                      * This should never happen. Raise an
                      * exception.
                      */
                     APP_EXCEPTION.RAISE_EXCEPTION;

                  ELSE

                     /*
                      * If callout returns 'Y' / 'N', use the return
                      * value. Else consider that the callout has
                      * not been implemented and use the threshold
                      * amount to determine whether to declare the
                      * payment.
                      */
                     IF (l_declare_flag = 'Y' OR
                         l_declare_flag = 'N') THEN

                        /*
                         * Set the declare flag specified by the
                         * callout.
                         */
                        IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                        print_debuginfo(l_module_name,
                                     'Flag returned by '
                                     || 'callout: '
                                     || l_declare_flag
                                     );
			END IF;
                       IBY_PAYGROUP_PUB.pmtTable.declare_payment_flag(l_trx_cbr_index) :=
                                     l_declare_flag;

                     ELSE

                        IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name,  'Stubbed '
                                     || 'customizable function '
                                     || 'IBY_EXTENSIBILITY_CALLOUTS_PUB.'
                                     || 'isCentralBankReportingRequired(..) '
                                     || 'not implemented. Checking whether '
                                     || 'payment amount exceeds declaration '
                                     || 'threshold ..'
                                     );
		          END IF;

                        /*
                         * If we reached here, it means user has
                         * not implemented custom logic for
                         * determining whether central bank
                         * reporting is needed.
                         *
                         * We will determine whether central
                         * bank reporting is needed by checking
                         * if the payment exceeds user specified
                         * amount threshold.
                         */

                         /*
                         * Step 2:
                         * Calculate the reporting amount at the
                         * payment level. Reporting amount is the
                         * payment amount converted to reporting
                         * currency.
                         *
                         * NOTE: We call a GL API to perform the
                         * currency conversion.
                         */

       --
       -- Use the dummy call for testing purposes.
       --
       --
       --dummyGLAPI(
       --    sysdate,                         /* IN:  exchange rate date */
       --   IBY_PAYGROUP_PUB.pmtTable.payment_amount,  /* IN:  source amount */
       --   IBY_PAYGROUP_PUB.pmtTable.payment_currency,/* IN:  source currency */
       --    p_cbrTab(j).decl_curr_code,      /* IN:  target currency */
       --    p_cbrTab(j).decl_curr_fx_rate_type, /* IN:  exchange rate type */
       --    l_pmt_fx_amount               /* OUT: amt in target currency */
       --    );

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
				print_debuginfo(l_module_name,
                                     'Payment #: '
                                     || IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_cbr_index)
                                     || ', payment amount: '
                                     ||IBY_PAYGROUP_PUB.pmtTable.payment_amount(l_trx_cbr_index)
                                     || ', payment currency: '
                                     ||IBY_PAYGROUP_PUB.pmtTable.payment_currency_code(l_trx_cbr_index)
                                     || ', declaration currency: '
                                     || iby_disburse_submit_pub_pkg.paymentProfilesTab(l_profile_id).declaration_currency_code
                                     || ', exchange rate type: '
                                     || iby_disburse_submit_pub_pkg.paymentProfilesTab(l_profile_id).declaration_curr_fx_rate_type
                                     );

		         END IF;
                                 /* OUT: target amount */
                         l_pmt_fx_amount := getFxAmount(

                                     /* IN:  source currency */
                                    IBY_PAYGROUP_PUB.pmtTable.payment_currency_code(l_trx_cbr_index),

                                     /* IN:  target currency */
                                     iby_disburse_submit_pub_pkg.paymentProfilesTab(l_profile_id).declaration_currency_code,

                                     /* IN:  exchange rate date */
                                     sysdate,

                                     /* IN:  exchange rate type */
                                     iby_disburse_submit_pub_pkg.paymentProfilesTab(l_profile_id).declaration_curr_fx_rate_type,

                                     /* IN:  source amount */
                                    IBY_PAYGROUP_PUB.pmtTable.payment_amount(l_trx_cbr_index)
                                     );

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name,
                                     'Declaration amount '
                                     || 'in reporting currency '
                                     || iby_disburse_submit_pub_pkg.paymentProfilesTab(l_profile_id).declaration_currency_code
                                     || ' derived from calling from GL API: '
                                     || l_pmt_fx_amount
                                     );

			 print_debuginfo(l_module_name,
                                     'Declaration amount '
                                     || 'threshold in reporting currency: '
                                     || iby_disburse_submit_pub_pkg.paymentProfilesTab(l_profile_id).declaration_threshold_amount
                                     );

			  END IF;
                         IF (l_pmt_fx_amount = -1) THEN

                            /*
                             * Error occurred in call to GL API
                             * to convert amount. Raise exception.
                             */
                             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
				print_debuginfo(l_module_name, 'Reporting '
                                         || 'amount is -1. '
                                         || 'Raising exception.',
                                         FND_LOG.LEVEL_UNEXPECTED
                                         );

			     END IF;
                             APP_EXCEPTION.RAISE_EXCEPTION;

                         ELSE

                            IBY_PAYGROUP_PUB.pmtTable.declaration_amount(l_trx_cbr_index) :=
                                         l_pmt_fx_amount;

                         END IF;

                         /*
                          * Step 3:
                          * If the reporting amount on the payment is
                          * greater than the reporting threshold, set
                          * the 'report payment flag' on the payment.
                          */

                         /*
                          * Set the declare flag based on amount
                          * threshold.
                          */

                         IF (l_pmt_fx_amount >
                             iby_disburse_submit_pub_pkg.paymentProfilesTab(l_profile_id).declaration_threshold_amount) THEN

                           IBY_PAYGROUP_PUB.pmtTable.declare_payment_flag(l_trx_cbr_index) := 'Y';

                         ELSE

                           IBY_PAYGROUP_PUB.pmtTable.declare_payment_flag(l_trx_cbr_index) := 'N';

                         END IF;

                     END IF; -- if declare flag = Y / N

                  END IF; -- if return status <> SUCCESS

                  IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			print_debuginfo(l_module_name, 'Payment #: '
                             || IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_cbr_index)
                             || ', declaration flag: '
                             ||IBY_PAYGROUP_PUB.pmtTable.declare_payment_flag(l_trx_cbr_index)
                             );

		  END IF;  -- if statement level debugging is enabled

               END IF; -- if payment has not failed validation

      --ELSE

      --IBY_PAYGROUP_PUB.pmtTable.declare_payment_flag(l_trx_cbr_index) =NULL;

        END IF; -- if declaration option is set

--     END LOOP; -- for each payment

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'EXIT');
     END IF;

     EXCEPTION

         WHEN OTHERS THEN
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	     print_debuginfo(l_module_name, 'Fatal: Exception when attempting '
                 || 'to call GL API ''gl_currency_api.convert_amount()''.',
                 FND_LOG.LEVEL_UNEXPECTED
                 );

             print_debuginfo(l_module_name, 'SQL code: '   || SQLCODE,
                 FND_LOG.LEVEL_UNEXPECTED);
             print_debuginfo(l_module_name, 'SQL err msg: '|| SQLERRM,
                 FND_LOG.LEVEL_UNEXPECTED);

             END IF;

             /*
              * Propogate exception to caller.
              */
             RAISE;

 END performCentralBankReporting;

/*--------------------------------------------------------------------
 | NAME:
 |     getFxAmount
 |
 | PURPOSE:
 |     Calls a GL API to convert a payment amount to the given
 |     currency.
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |     No exception will be raised in this function if the call to
 |     GL API to convert the amount fails; Instead '-1' will be
 |     for the amount. The caller should recognize this and raise
 |     an exception.
 |
 *---------------------------------------------------------------------*/
 FUNCTION getFxAmount(
     p_source_currency   IN VARCHAR2,
     p_target_currency   IN VARCHAR2,
     p_exch_rate_date    IN DATE,
     p_exch_rate_type    IN VARCHAR2,
     p_source_amount     IN NUMBER
     ) RETURN NUMBER

 IS
 l_module_name  CONSTANT VARCHAR2(200)  := G_PKG_NAME || '.getFxAmount';
 l_fx_amount    NUMBER(15);

 BEGIN

    /*
     * Cannot log anywhere within this function because that
     * violates pragma restrict_references!
     */

    l_fx_amount := gl_currency_api.convert_amount(
                       p_source_currency,
                       p_target_currency,
                       p_exch_rate_date,
                       p_exch_rate_type,
                       p_source_amount
                       );

    RETURN l_fx_amount;

    EXCEPTION

        WHEN OTHERS THEN
             /*
              * The GL convert_amount() API enforces pragma
              * restrict_references. So we cannot raise an
              * exception here.
              *
              * Instead log the exception and pass -1 as the
              * amount. The caller should recognize that -1
              * indicates an exception occured.
              */
             l_fx_amount := -1;

             RETURN l_fx_amount;

 END getFxAmount;

/*--------------------------------------------------------------------
 | NAME:
 |     performPaymentValidations
 |
 | PURPOSE:
 |     A wrapper method to call payment validation sets.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE performPaymentValidations(
     p_payment_request_id   IN IBY_PAY_SERVICE_REQUESTS.
 	                                    payment_service_request_id%TYPE,
     x_paymentTab    IN OUT NOCOPY paymentTabType,
     x_docErrorTab   IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.docErrorTabType,
     x_errTokenTab   IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.trxnErrTokenTabType
     )
 IS

 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME
                                             || '.performPaymentValidation';

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'ENTER');

     END IF;
--     applyPaymentValidationSets(p_payment_request_id, x_paymentTab,x_docErrorTab, x_errTokenTab);

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'EXIT');

     END IF;

 END performPaymentValidations;

/*--------------------------------------------------------------------
 | NAME:
 |     performPayReqBasedValidations
 |
 | PURPOSE:
 |     Validates created payments using payment request imposed
 |     criteria. These validations can be considered 'core' payment
 |     validations because they will always be applied.
 |
 |     The validations linked to the validation sets will be applied
 |     in addition to these core validations.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE performPayReqBasedValidations(
     p_payReqCriteria  IN            payReqImposedCriteria,
     x_paymentTab      IN OUT NOCOPY paymentTabType,
     x_docsInPmtTab    IN OUT NOCOPY docsInPaymentTabType,
     x_docErrorTab     IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.docErrorTabType,
     x_errTokenTab     IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.trxnErrTokenTabType
     )
 IS

 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.performPayReqBasedValidations';
 l_max_pmt_limit         NUMBER(15);
 l_min_pmt_limit         NUMBER(15);
 l_allow_zero_pmts_flag  VARCHAR2(1) := 'N';
 l_pmt_failed_flag       VARCHAR2(1) := 'N';

 l_ce_min_pmt_ctrl       NUMBER(15);
 l_ce_max_pmt_ctrl       NUMBER(15);

 l_doc_err_rec   IBY_TRANSACTION_ERRORS%ROWTYPE;

 l_error_code    VARCHAR2(100);
 l_error_msg     VARCHAR2(500);
 l_token_rec     IBY_TRXN_ERROR_TOKENS%ROWTYPE;

 l_profile_id    IBY_PAYMENT_PROFILES.payment_profile_id%type;
 l_disabled_ppp  VARCHAR2(1) := 'N';
 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'ENTER');

     END IF;
     l_max_pmt_limit        := p_payReqCriteria.max_pmt_amt_limit;
     l_min_pmt_limit        := p_payReqCriteria.min_pmt_amt_limit;
     l_allow_zero_pmts_flag := p_payReqCriteria.allow_zero_pmts_flag;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'Max payment amount limit: '
         || l_max_pmt_limit);
	  print_debuginfo(l_module_name, 'Min payment amount limit: '
         || l_min_pmt_limit);
	 print_debuginfo(l_module_name, 'Zero payments flag: '
         || l_allow_zero_pmts_flag);

     END IF;
     /*
      * For all payments:
      * If payment has not already failed validation,
      * then check payment against payment request
      * imposed conditions. These are:
      *
      * MAX PAYMENT AMOUNT
      * MIN PAYMENT AMOUNT
      * ZERO PAYMENTS ALLOWED FLAG
      */
     FOR i in x_paymentTab.FIRST ..  x_paymentTab.LAST LOOP

     l_pmt_failed_flag := 'N';
print_debuginfo(l_module_name, 'Status of pmt id-'|| x_paymentTab(i).payment_id ||'-'||x_paymentTab(i).payment_status);
         IF (x_paymentTab(i).payment_status = PAY_STATUS_CREATED) THEN

/*  Bug 5997589
    Ensuring that payments with disabled payment profiles are failed.
*/
/*  Bug 5709596 */
            l_profile_id := x_paymentTab(i).payment_profile_id;
            IF NOT(iby_disburse_submit_pub_pkg.paymentProfilesTab.exists(l_profile_id)) THEN
               iby_disburse_submit_pub_pkg.set_profile_attribs(l_profile_id);
            END IF;

            IF (iby_disburse_submit_pub_pkg.paymentProfilesTab(l_profile_id).inactive_date
                IS NOT NULL
               AND
                iby_disburse_submit_pub_pkg.paymentProfilesTab(l_profile_id).inactive_date
                <= sysdate) THEN
               l_disabled_ppp := 'Y';
            ELSE
               l_disabled_ppp := 'N';
            END IF;

            IF (l_disabled_ppp = 'Y') THEN
                x_paymentTab(i).payment_status
                     := PAY_STATUS_REJECTED;

               IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Failed payment '
                     || x_paymentTab(i).payment_id
                     || ' because disabled PPP '
                     || x_paymentTab(i).payment_profile_id
                     || ' is associate with it.'
                     );

	       END IF;

               l_error_code := 'IBY_PMT_INVALID_PROFILE';
               FND_MESSAGE.set_name('IBY', l_error_code);

               FND_MESSAGE.SET_TOKEN('PMT_NUMBER',
                     x_paymentTab(i).payment_id,
                     FALSE);

               l_token_rec.token_name  := 'PMT_NUMBER';
               l_token_rec.token_value := x_paymentTab(i).payment_id;
               x_errTokenTab(x_errTokenTab.COUNT + 1) := l_token_rec;

                 /*
                  * Once we fail a payment, we need to create
                  * an error record and insert this record
                  * into the errors table.
                  */
               IBY_BUILD_UTILS_PKG.createPmtErrorRecord(
                     x_paymentTab(i).payment_id,
                     x_paymentTab(i).payment_status,
                     l_error_code,
                     FND_MESSAGE.get,
                     l_doc_err_rec
                     );

               IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                     l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                 /* fail the docs of this payment */
                 If (l_pmt_failed_flag = 'N') THEN
                     failDocsOfPayment(x_paymentTab(i).payment_id,
                     DOC_STATUS_PAY_VAL_FAIL, x_docsInPmtTab,
                     x_docErrorTab, x_errTokenTab);
                 l_pmt_failed_flag := 'Y';
 	         END IF;

            END IF;  -- l_disabled_ppp

            IF (l_max_pmt_limit <> -1 AND
                 x_paymentTab(i).payment_amount > l_max_pmt_limit) THEN

                 x_paymentTab(i).payment_status
                     := PAY_STATUS_REJECTED;

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Failed payment '
                     || x_paymentTab(i).payment_id
                     || ' because payment amount '
                     || x_paymentTab(i).payment_amount
                     || ' exceeds limit '
                     || l_max_pmt_limit
                     || ' imposed by payment request.'
                     );

		 END IF;

                 l_error_code := 'IBY_PMT_ABOVE_LIMIT';
                 FND_MESSAGE.set_name('IBY', l_error_code);

                 FND_MESSAGE.SET_TOKEN('PMT_AMOUNT',
                     x_paymentTab(i).payment_amount,
                     FALSE);

                 l_token_rec.token_name  := 'PMT_AMOUNT';
                 l_token_rec.token_value := x_paymentTab(i).payment_amount;
                 x_errTokenTab(x_errTokenTab.COUNT + 1) := l_token_rec;

                 FND_MESSAGE.SET_TOKEN('UPPER_LIMIT',
                     l_max_pmt_limit,
                     FALSE);

                 l_token_rec.token_name  := 'UPPER_LIMIT';
                 l_token_rec.token_value := l_max_pmt_limit;
                 x_errTokenTab(x_errTokenTab.COUNT + 1) := l_token_rec;

                 /*
                  * Once we fail a payment, we need to create
                  * an error record and insert this record
                  * into the errors table.
                  */
                 IBY_BUILD_UTILS_PKG.createPmtErrorRecord(
                     x_paymentTab(i).payment_id,
                     x_paymentTab(i).payment_status,
                     l_error_code,
                     FND_MESSAGE.get,
                     l_doc_err_rec
                     );

                 IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                     l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                 /* fail the docs of this payment */
                 If (l_pmt_failed_flag = 'N') THEN
                 failDocsOfPayment(x_paymentTab(i).payment_id,
                     DOC_STATUS_PAY_VAL_FAIL, x_docsInPmtTab,
                     x_docErrorTab, x_errTokenTab);
                 l_pmt_failed_flag := 'Y';
 	         END IF;

             END IF;

             IF (l_min_pmt_limit <> -1 AND
                 x_paymentTab(i).payment_amount < l_min_pmt_limit) THEN

                 x_paymentTab(i).payment_status
                     := PAY_STATUS_REJECTED;

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Failed payment '
                     || x_paymentTab(i).payment_id
                     || ' because payment amount '
                     || x_paymentTab(i).payment_amount
                     || ' is lower than limit '
                     || l_min_pmt_limit
                     || ' imposed by payment request.'
                     );


END IF;
                 l_error_code := 'IBY_PMT_BELOW_LIMIT';
                 FND_MESSAGE.set_name('IBY', l_error_code);

                 FND_MESSAGE.SET_TOKEN('PMT_AMOUNT',
                     x_paymentTab(i).payment_amount,
                     FALSE);

                 l_token_rec.token_name  := 'PMT_AMOUNT';
                 l_token_rec.token_value := x_paymentTab(i).payment_amount;
                 x_errTokenTab(x_errTokenTab.COUNT + 1) := l_token_rec;

                 FND_MESSAGE.SET_TOKEN('LOWER_LIMIT',
                     l_min_pmt_limit,
                     FALSE);

                 l_token_rec.token_name  := 'LOWER_LIMIT';
                 l_token_rec.token_value := l_min_pmt_limit;
                 x_errTokenTab(x_errTokenTab.COUNT + 1) := l_token_rec;

                 /*
                  * Once we fail a payment, we need to create
                  * an error record and insert this record
                  * into the errors table.
                  */
                 IBY_BUILD_UTILS_PKG.createPmtErrorRecord(
                     x_paymentTab(i).payment_id,
                     x_paymentTab(i).payment_status,
                     l_error_code,
                     FND_MESSAGE.get,
                     l_doc_err_rec
                     );

                 IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                     l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                 /* fail the docs of this payment */
                 If (l_pmt_failed_flag = 'N') THEN
                 failDocsOfPayment(x_paymentTab(i).payment_id,
                     DOC_STATUS_PAY_VAL_FAIL, x_docsInPmtTab,
                     x_docErrorTab, x_errTokenTab);

                 l_pmt_failed_flag := 'Y';
 	         END IF;

             END IF;

             IF (UPPER(l_allow_zero_pmts_flag) <> 'Y' AND
                 x_paymentTab(i).payment_amount = 0) THEN

                 x_paymentTab(i).payment_status
                     := PAY_STATUS_REJECTED;

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Failed payment '
                     || x_paymentTab(i).payment_id
                     || ' because payment amount '
                     || x_paymentTab(i).payment_amount
                     || ' is zero. Zero payments not'
                     || ' allowed by this payment request.'
                     );

		 END IF;

                 l_error_code := 'IBY_ZERO_PMT_NOT_ALLOWED';
                 FND_MESSAGE.set_name('IBY', l_error_code);

                 /*
                  * Once we fail a payment, we need to create
                  * an error record and insert this record
                  * into the errors table.
                  */
                 IBY_BUILD_UTILS_PKG.createPmtErrorRecord(
                     x_paymentTab(i).payment_id,
                     x_paymentTab(i).payment_status,
                     l_error_code,
                     FND_MESSAGE.get,
                     l_doc_err_rec
                     );

                 IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                     l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                 /* fail the docs of this payment */
                 If (l_pmt_failed_flag = 'N') THEN
                 failDocsOfPayment(x_paymentTab(i).payment_id,
                     DOC_STATUS_PAY_VAL_FAIL, x_docsInPmtTab,
                     x_docErrorTab, x_errTokenTab);

                 l_pmt_failed_flag := 'Y';
 	         END IF;

             END IF;


             /*
              * Fix for bug 5760241:
              *
              * Validate the payment for maximum and minimum
              * payment amounts based on the internal bank
              * account payment controls set in CE.
              */

             /*
              * First, get the minimum and maximum payment
              * control amount values from CE for the int
              * bank account on the payment.
              */
             SELECT
                 min_check_amount,
                 max_check_amount
             INTO
                 l_ce_min_pmt_ctrl,
                 l_ce_max_pmt_ctrl
             FROM
                 CE_BANK_ACCOUNTS
             WHERE
                 bank_account_id =  x_paymentTab(i).internal_bank_account_id
             ;

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Payment id: '
                 || x_paymentTab(i).payment_id
                 || ', int bank account id: '
                 || x_paymentTab(i).internal_bank_account_id
                 || ', CE min pmt amount control: '
                 || l_ce_min_pmt_ctrl
                 || ', CE max pmt amount control: '
                 || l_ce_max_pmt_ctrl
                 );

	     END IF;
             /*
              * Next, validate payment against minimum
              * payment amount control.
              */
             IF (l_ce_min_pmt_ctrl IS NOT NULL AND
                 x_paymentTab(i).payment_amount < l_ce_min_pmt_ctrl) THEN

                 x_paymentTab(i).payment_status
                     := PAY_STATUS_REJECTED;

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Failed payment '
                     || x_paymentTab(i).payment_id
                     || ' because payment amount '
                     || x_paymentTab(i).payment_amount
                     || ' is lower than limit '
                     || l_ce_min_pmt_ctrl
                     || ' imposed by Cash Management (CE).'
                     );

		 END IF;

                 l_error_code := 'IBY_PMT_BELOW_CE_LIMIT';
                 FND_MESSAGE.set_name('IBY', l_error_code);

                 FND_MESSAGE.SET_TOKEN('PMT_AMOUNT',
                     x_paymentTab(i).payment_amount,
                     FALSE);

                 l_token_rec.token_name  := 'PMT_AMOUNT';
                 l_token_rec.token_value := x_paymentTab(i).payment_amount;
                 x_errTokenTab(x_errTokenTab.COUNT + 1) := l_token_rec;

                 FND_MESSAGE.SET_TOKEN('LOWER_LIMIT',
                     l_ce_min_pmt_ctrl,
                     FALSE);

                 l_token_rec.token_name  := 'LOWER_LIMIT';
                 l_token_rec.token_value := l_ce_min_pmt_ctrl;
                 x_errTokenTab(x_errTokenTab.COUNT + 1) := l_token_rec;

                 /*
                  * Once we fail a payment, we need to create
                  * an error record and insert this record
                  * into the errors table.
                  */
                 IBY_BUILD_UTILS_PKG.createPmtErrorRecord(
                     x_paymentTab(i).payment_id,
                     x_paymentTab(i).payment_status,
                     l_error_code,
                     FND_MESSAGE.get,
                     l_doc_err_rec
                     );

                 IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                     l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                 /* fail the docs of this payment */
                 If (l_pmt_failed_flag = 'N') THEN
                 failDocsOfPayment(x_paymentTab(i).payment_id,
                     DOC_STATUS_PAY_VAL_FAIL, x_docsInPmtTab,
                     x_docErrorTab, x_errTokenTab);

		 l_pmt_failed_flag := 'Y';
                 END IF;

             END IF;

             /*
              * Next, validate payment against maximum
              * payment amount control.
              */
             IF (l_ce_max_pmt_ctrl IS NOT NULL AND
                 x_paymentTab(i).payment_amount > l_ce_max_pmt_ctrl) THEN

                 x_paymentTab(i).payment_status
                     := PAY_STATUS_REJECTED;

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Failed payment '
                     || x_paymentTab(i).payment_id
                     || ' because payment amount '
                     || x_paymentTab(i).payment_amount
                     || ' is greater than limit '
                     || l_ce_max_pmt_ctrl
                     || ' imposed by Cash Management (CE).'
                     );

		 END IF;

                 l_error_code := 'IBY_PMT_ABOVE_CE_LIMIT';
                 FND_MESSAGE.set_name('IBY', l_error_code);

                 FND_MESSAGE.SET_TOKEN('PMT_AMOUNT',
                     x_paymentTab(i).payment_amount,
                     FALSE);

                 l_token_rec.token_name  := 'PMT_AMOUNT';
                 l_token_rec.token_value := x_paymentTab(i).payment_amount;
                 x_errTokenTab(x_errTokenTab.COUNT + 1) := l_token_rec;

                 FND_MESSAGE.SET_TOKEN('UPPER_LIMIT',
                     l_ce_max_pmt_ctrl,
                     FALSE);

                 l_token_rec.token_name  := 'UPPER_LIMIT';
                 l_token_rec.token_value := l_ce_max_pmt_ctrl;
                 x_errTokenTab(x_errTokenTab.COUNT + 1) := l_token_rec;

                 /*
                  * Once we fail a payment, we need to create
                  * an error record and insert this record
                  * into the errors table.
                  */
                 IBY_BUILD_UTILS_PKG.createPmtErrorRecord(
                     x_paymentTab(i).payment_id,
                     x_paymentTab(i).payment_status,
                     l_error_code,
                     FND_MESSAGE.get,
                     l_doc_err_rec
                     );

                 IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                     l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                 /* fail the docs of this payment */
		 If (l_pmt_failed_flag = 'N') THEN
	                 failDocsOfPayment(x_paymentTab(i).payment_id,
		             DOC_STATUS_PAY_VAL_FAIL, x_docsInPmtTab,
			     x_docErrorTab, x_errTokenTab);
			 l_pmt_failed_flag := 'Y';
 	         END IF;
             END IF;

         END IF; -- if pmt status = CREATED

     END LOOP;

     print_debuginfo(l_module_name, 'EXIT');

 END performPayReqBasedValidations;

/*--------------------------------------------------------------------
 | NAME:
 |     performPayReqBasedValidations
 |
 | PURPOSE:
 |     Validates created payments using payment request imposed
 |     criteria. These validations can be considered 'core' payment
 |     validations because they will always be applied.
 |
 |     The validations linked to the validation sets will be applied
 |     in addition to these core validations.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE performPayReqBasedValidations(
     p_payReqCriteria  IN            payReqImposedCriteria,
     --x_paymentTab      IN OUT NOCOPY paymentTabType,
     p_trx_pmt_line_index IN BINARY_INTEGER,
     x_docErrorTab     IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.docErrorTabType,
     x_errTokenTab     IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.trxnErrTokenTabType
     )
 IS

 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.performPayReqBasedValidations';
 l_max_pmt_limit         NUMBER(15);
 l_min_pmt_limit         NUMBER(15);
 l_allow_zero_pmts_flag  VARCHAR2(1) := 'N';
 l_pmt_failed_flag       VARCHAR2(1) := 'N';

 l_ce_min_pmt_ctrl       NUMBER(15);
 l_ce_max_pmt_ctrl       NUMBER(15);

 l_doc_err_rec   IBY_TRANSACTION_ERRORS%ROWTYPE;

 l_error_code    VARCHAR2(100);
 l_error_msg     VARCHAR2(500);
 l_token_rec     IBY_TRXN_ERROR_TOKENS%ROWTYPE;

 l_profile_id    IBY_PAYMENT_PROFILES.payment_profile_id%type;
 l_disabled_ppp  VARCHAR2(1) := 'N';
 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     l_max_pmt_limit        := p_payReqCriteria.max_pmt_amt_limit;
     l_min_pmt_limit        := p_payReqCriteria.min_pmt_amt_limit;
     l_allow_zero_pmts_flag := p_payReqCriteria.allow_zero_pmts_flag;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Max payment amount limit: '
         || l_max_pmt_limit);
     print_debuginfo(l_module_name, 'Min payment amount limit: '
         || l_min_pmt_limit);
     print_debuginfo(l_module_name, 'Zero payments flag: '
         || l_allow_zero_pmts_flag);
     END IF;
     /*
      * For all payments:
      * If payment has not already failed validation,
      * then check payment against payment request
      * imposed conditions. These are:
      *
      * MAX PAYMENT AMOUNT
      * MIN PAYMENT AMOUNT
      * ZERO PAYMENTS ALLOWED FLAG
      */
   --  FOR i in x_paymentTab.FIRST ..  x_paymentTab.LAST LOOP

         IF (IBY_PAYGROUP_PUB.pmtTable.payment_status(p_trx_pmt_line_index) = PAY_STATUS_CREATED) THEN

/*  Bug 5997589
    Ensuring that payments with disabled payment profiles are failed.
*/
/*  Bug 5709596 */
            l_profile_id := IBY_PAYGROUP_PUB.pmtTable.payment_profile_id(p_trx_pmt_line_index);
            IF NOT(iby_disburse_submit_pub_pkg.paymentProfilesTab.exists(l_profile_id)) THEN
               iby_disburse_submit_pub_pkg.set_profile_attribs(l_profile_id);
            END IF;

            IF (iby_disburse_submit_pub_pkg.paymentProfilesTab(l_profile_id).inactive_date
                IS NOT NULL
               AND
                iby_disburse_submit_pub_pkg.paymentProfilesTab(l_profile_id).inactive_date
                <= sysdate) THEN
               l_disabled_ppp := 'Y';
            ELSE
               l_disabled_ppp := 'N';
            END IF;

            IF (l_disabled_ppp = 'Y') THEN
                IBY_PAYGROUP_PUB.pmtTable.payment_status(p_trx_pmt_line_index)
                     := PAY_STATUS_REJECTED;

               IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Failed payment '
                     || IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index)
                     || ' because disabled PPP '
                     || IBY_PAYGROUP_PUB.pmtTable.payment_profile_id(p_trx_pmt_line_index)
                     || ' is associate with it.'
                     );
	       END IF;
               l_error_code := 'IBY_PMT_INVALID_PROFILE';
               FND_MESSAGE.set_name('IBY', l_error_code);

               FND_MESSAGE.SET_TOKEN('PMT_NUMBER',
                     IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index),
                     FALSE);

               l_token_rec.token_name  := 'PMT_NUMBER';
               l_token_rec.token_value := IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index);
               x_errTokenTab(x_errTokenTab.COUNT + 1) := l_token_rec;

                 /*
                  * Once we fail a payment, we need to create
                  * an error record and insert this record
                  * into the errors table.
                  */
               IBY_BUILD_UTILS_PKG.createPmtErrorRecord(
                     IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index),
                     IBY_PAYGROUP_PUB.pmtTable.payment_status(p_trx_pmt_line_index),
                     l_error_code,
                     FND_MESSAGE.get,
                     l_doc_err_rec
                     );

               IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                     l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                 /* fail the docs of this payment */
 		 If (l_pmt_failed_flag = 'N') THEN
                 failDocsOfPayment(IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index),
                     DOC_STATUS_PAY_VAL_FAIL,
                     x_docErrorTab, x_errTokenTab);
		 l_pmt_failed_flag := 'Y';
		 END IF;

            END IF;  -- l_disabled_ppp

            IF (l_max_pmt_limit <> -1 AND
                 IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index) > l_max_pmt_limit) THEN

                 IBY_PAYGROUP_PUB.pmtTable.payment_status(p_trx_pmt_line_index)
                     := PAY_STATUS_REJECTED;

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Failed payment '
                     || IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index)
                     || ' because payment amount '
                     || IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index)
                     || ' exceeds limit '
                     || l_max_pmt_limit
                     || ' imposed by payment request.'
                     );
	     END IF;
                 l_error_code := 'IBY_PMT_ABOVE_LIMIT';
                 FND_MESSAGE.set_name('IBY', l_error_code);

                 FND_MESSAGE.SET_TOKEN('PMT_AMOUNT',
                     IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index),
                     FALSE);

                 l_token_rec.token_name  := 'PMT_AMOUNT';
                 l_token_rec.token_value := IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index);
                 x_errTokenTab(x_errTokenTab.COUNT + 1) := l_token_rec;

                 FND_MESSAGE.SET_TOKEN('UPPER_LIMIT',
                     l_max_pmt_limit,
                     FALSE);

                 l_token_rec.token_name  := 'UPPER_LIMIT';
                 l_token_rec.token_value := l_max_pmt_limit;
                 x_errTokenTab(x_errTokenTab.COUNT + 1) := l_token_rec;

                 /*
                  * Once we fail a payment, we need to create
                  * an error record and insert this record
                  * into the errors table.
                  */
                 IBY_BUILD_UTILS_PKG.createPmtErrorRecord(
                     IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index),
                     IBY_PAYGROUP_PUB.pmtTable.payment_status(p_trx_pmt_line_index),
                     l_error_code,
                     FND_MESSAGE.get,
                     l_doc_err_rec
                     );

                 IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                     l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                 /* fail the docs of this payment */
		  If (l_pmt_failed_flag = 'N') THEN
                 failDocsOfPayment(IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index),
                     DOC_STATUS_PAY_VAL_FAIL,
                     x_docErrorTab, x_errTokenTab);
     		 l_pmt_failed_flag := 'Y';
		 END IF;


             END IF;

             IF (l_min_pmt_limit <> -1 AND
                 IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index) < l_min_pmt_limit) THEN

                 IBY_PAYGROUP_PUB.pmtTable.payment_status(p_trx_pmt_line_index)
                     := PAY_STATUS_REJECTED;

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Failed payment '
                     || IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index)
                     || ' because payment amount '
                     || IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index)
                     || ' is lower than limit '
                     || l_min_pmt_limit
                     || ' imposed by payment request.'
                     );
		 END IF;
                 l_error_code := 'IBY_PMT_BELOW_LIMIT';
                 FND_MESSAGE.set_name('IBY', l_error_code);

                 FND_MESSAGE.SET_TOKEN('PMT_AMOUNT',
                     IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index),
                     FALSE);

                 l_token_rec.token_name  := 'PMT_AMOUNT';
                 l_token_rec.token_value := IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index);
                 x_errTokenTab(x_errTokenTab.COUNT + 1) := l_token_rec;

                 FND_MESSAGE.SET_TOKEN('LOWER_LIMIT',
                     l_min_pmt_limit,
                     FALSE);

                 l_token_rec.token_name  := 'LOWER_LIMIT';
                 l_token_rec.token_value := l_min_pmt_limit;
                 x_errTokenTab(x_errTokenTab.COUNT + 1) := l_token_rec;

                 /*
                  * Once we fail a payment, we need to create
                  * an error record and insert this record
                  * into the errors table.
                  */
                 IBY_BUILD_UTILS_PKG.createPmtErrorRecord(
                     IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index),
                     IBY_PAYGROUP_PUB.pmtTable.payment_status(p_trx_pmt_line_index),
                     l_error_code,
                     FND_MESSAGE.get,
                     l_doc_err_rec
                     );

                 IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                     l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                 /* fail the docs of this payment */
		  If (l_pmt_failed_flag = 'N') THEN
                 failDocsOfPayment(IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index),
                     DOC_STATUS_PAY_VAL_FAIL,
                     x_docErrorTab, x_errTokenTab);

     		 l_pmt_failed_flag := 'Y';
		 END IF;


             END IF;

             IF (UPPER(l_allow_zero_pmts_flag) <> 'Y' AND
                 IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index) = 0) THEN

                 IBY_PAYGROUP_PUB.pmtTable.payment_status(p_trx_pmt_line_index)
                     := PAY_STATUS_REJECTED;

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Failed payment '
                     || IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index)
                     || ' because payment amount '
                     || IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index)
                     || ' is zero. Zero payments not'
                     || ' allowed by this payment request.'
                     );
		 END IF;
                 l_error_code := 'IBY_ZERO_PMT_NOT_ALLOWED';
                 FND_MESSAGE.set_name('IBY', l_error_code);

                 /*
                  * Once we fail a payment, we need to create
                  * an error record and insert this record
                  * into the errors table.
                  */
                 IBY_BUILD_UTILS_PKG.createPmtErrorRecord(
                     IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index),
                     IBY_PAYGROUP_PUB.pmtTable.payment_status(p_trx_pmt_line_index),
                     l_error_code,
                     FND_MESSAGE.get,
                     l_doc_err_rec
                     );

                 IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                     l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                 /* fail the docs of this payment */
 		 If (l_pmt_failed_flag = 'N') THEN

                 failDocsOfPayment(IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index),
                     DOC_STATUS_PAY_VAL_FAIL,
                     x_docErrorTab, x_errTokenTab);
     		 l_pmt_failed_flag := 'Y';
		 END IF;


             END IF;


             /*
              * Fix for bug 5760241:
              *
              * Validate the payment for maximum and minimum
              * payment amounts based on the internal bank
              * account payment controls set in CE.
              */

             /*
              * First, get the minimum and maximum payment
              * control amount values from CE for the int
              * bank account on the payment.
              */
             SELECT
                 min_check_amount,
                 max_check_amount
             INTO
                 l_ce_min_pmt_ctrl,
                 l_ce_max_pmt_ctrl
             FROM
                 CE_BANK_ACCOUNTS
             WHERE
                 bank_account_id =  IBY_PAYGROUP_PUB.pmtTable.internal_bank_account_id(p_trx_pmt_line_index)
             ;

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Payment id: '
                 || IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index)
                 || ', int bank account id: '
                 || IBY_PAYGROUP_PUB.pmtTable.internal_bank_account_id(p_trx_pmt_line_index)
                 || ', CE min pmt amount control: '
                 || l_ce_min_pmt_ctrl
                 || ', CE max pmt amount control: '
                 || l_ce_max_pmt_ctrl
                 );
	     END IF;
             /*
              * Next, validate payment against minimum
              * payment amount control.
              */
             IF (l_ce_min_pmt_ctrl IS NOT NULL AND
                 IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index) < l_ce_min_pmt_ctrl) THEN

                 IBY_PAYGROUP_PUB.pmtTable.payment_status(p_trx_pmt_line_index)
                     := PAY_STATUS_REJECTED;

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Failed payment '
                     || IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index)
                     || ' because payment amount '
                     || IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index)
                     || ' is lower than limit '
                     || l_ce_min_pmt_ctrl
                     || ' imposed by Cash Management (CE).'
                     );
		 END IF;

                 l_error_code := 'IBY_PMT_BELOW_CE_LIMIT';
                 FND_MESSAGE.set_name('IBY', l_error_code);

                 FND_MESSAGE.SET_TOKEN('PMT_AMOUNT',
                     IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index),
                     FALSE);

                 l_token_rec.token_name  := 'PMT_AMOUNT';
                 l_token_rec.token_value := IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index);
                 x_errTokenTab(x_errTokenTab.COUNT + 1) := l_token_rec;

                 FND_MESSAGE.SET_TOKEN('LOWER_LIMIT',
                     l_ce_min_pmt_ctrl,
                     FALSE);

                 l_token_rec.token_name  := 'LOWER_LIMIT';
                 l_token_rec.token_value := l_ce_min_pmt_ctrl;
                 x_errTokenTab(x_errTokenTab.COUNT + 1) := l_token_rec;

                 /*
                  * Once we fail a payment, we need to create
                  * an error record and insert this record
                  * into the errors table.
                  */
                 IBY_BUILD_UTILS_PKG.createPmtErrorRecord(
                     IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index),
                     IBY_PAYGROUP_PUB.pmtTable.payment_status(p_trx_pmt_line_index),
                     l_error_code,
                     FND_MESSAGE.get,
                     l_doc_err_rec
                     );

                 IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                     l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                 /* fail the docs of this payment */
 		 If (l_pmt_failed_flag = 'N') THEN

                 failDocsOfPayment(IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index),
                     DOC_STATUS_PAY_VAL_FAIL,
                     x_docErrorTab, x_errTokenTab);
		 l_pmt_failed_flag := 'Y';
		 END IF;

             END IF;

             /*
              * Next, validate payment against maximum
              * payment amount control.
              */
             IF (l_ce_max_pmt_ctrl IS NOT NULL AND
                 IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index) > l_ce_max_pmt_ctrl) THEN

                 IBY_PAYGROUP_PUB.pmtTable.payment_status(p_trx_pmt_line_index)
                     := PAY_STATUS_REJECTED;

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Failed payment '
                     || IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index)
                     || ' because payment amount '
                     || IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index)
                     || ' is greater than limit '
                     || l_ce_max_pmt_ctrl
                     || ' imposed by Cash Management (CE).'
                     );
		 END IF;

                 l_error_code := 'IBY_PMT_ABOVE_CE_LIMIT';
                 FND_MESSAGE.set_name('IBY', l_error_code);

                 FND_MESSAGE.SET_TOKEN('PMT_AMOUNT',
                     IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index),
                     FALSE);

                 l_token_rec.token_name  := 'PMT_AMOUNT';
                 l_token_rec.token_value := IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index);
                 x_errTokenTab(x_errTokenTab.COUNT + 1) := l_token_rec;

                 FND_MESSAGE.SET_TOKEN('UPPER_LIMIT',
                     l_ce_max_pmt_ctrl,
                     FALSE);

                 l_token_rec.token_name  := 'UPPER_LIMIT';
                 l_token_rec.token_value := l_ce_max_pmt_ctrl;
                 x_errTokenTab(x_errTokenTab.COUNT + 1) := l_token_rec;

                 /*
                  * Once we fail a payment, we need to create
                  * an error record and insert this record
                  * into the errors table.
                  */
                 IBY_BUILD_UTILS_PKG.createPmtErrorRecord(
                     IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index),
                     IBY_PAYGROUP_PUB.pmtTable.payment_status(p_trx_pmt_line_index),
                     l_error_code,
                     FND_MESSAGE.get,
                     l_doc_err_rec
                     );

                 IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                     l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                 /* fail the docs of this payment */
 		 If (l_pmt_failed_flag = 'N') THEN

                 failDocsOfPayment(IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index),
                     DOC_STATUS_PAY_VAL_FAIL,
                     x_docErrorTab, x_errTokenTab);
     		 l_pmt_failed_flag := 'Y';
		 END IF;


             END IF;

         END IF; -- if pmt status = CREATED

    -- END LOOP;

     print_debuginfo(l_module_name, 'EXIT');

 END performPayReqBasedValidations;

/*--------------------------------------------------------------------
 | NAME:
 |     performPmtGrpNumberValidation
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE performPmtGrpNumberValidation(
     x_paymentTab     IN OUT NOCOPY paymentTabType,
     x_docsInPmtTab   IN OUT NOCOPY docsInPaymentTabType,
     x_docErrorTab    IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.docErrorTabType,
     x_errTokenTab    IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.trxnErrTokenTabType
     )
 IS

 l_orig_pmt_id       IBY_PAYMENTS_ALL.payment_id%TYPE;
 l_orig_doc_id       IBY_DOCS_PAYABLE_ALL.document_payable_id%TYPE;
 l_orig_pmt_grp_num  IBY_DOCS_PAYABLE_ALL.payment_grouping_number%TYPE;

 l_compare_pmt_id    IBY_PAYMENTS_ALL.payment_id%TYPE;
 l_compare_doc_id    IBY_DOCS_PAYABLE_ALL.document_payable_id%TYPE;

 l_doc_err_rec       IBY_TRANSACTION_ERRORS%ROWTYPE;

 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.performPmtGrpNumberValidation';

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'ENTER');

     END IF;
     /*
      * All documents payable with the same payment grouping number
      * must be part of a single payment.
      *
      * When grouping documents into payments, if multiple payments
      * have documents with the same payment grouping number, it means
      * that documents with the same payment grouping number have been
      * distributed across payments. This is not allowed; In this
      * situation, fail all the payments that have documents with the
      * same payment grouping number, and fail their constituent documents
      * as well.
      */

     /* for each created payment in request */
     FOR i in x_paymentTab.FIRST .. x_paymentTab.LAST LOOP

         /*
          * Use only non-failed payments for checking the
          * payment grouping number.
          */
         IF (x_paymentTab(i).payment_status = PAY_STATUS_CREATED) THEN

             l_orig_pmt_id := x_paymentTab(i).payment_id;

             /*
              * Scan through all available documents to find documents
              * that are part of this non-failed payment
              */
             IF (x_docsInPmtTab.COUNT > 0) THEN
             FOR j in x_docsInPmtTab.FIRST .. x_docsInPmtTab.LAST LOOP

                 /* if we found a document of this payment */
                 IF (x_paymentTab(i).payment_id =
                     x_docsInPmtTab(j).payment_id) THEN

                     /*
                      * Store this document id and the payment grouping
                      * number of this document for comparison with
                      * the documents of other payments.
                      */
                     l_orig_doc_id      := x_docsInPmtTab(j).document_id;
                     l_orig_pmt_grp_num := x_docsInPmtTab(j).payment_grp_num;

                     /*
                      * From the list of created payments, find the next
                      * payment that is different from the payment that
                      * we began with.
                      */
                     FOR k in x_paymentTab.FIRST .. x_paymentTab.LAST LOOP

                         /*
                          * If we found a payment different from the original
                          * one make sure that it is non-failed payment.
                          */
                         IF (x_paymentTab(k).payment_id <> l_orig_pmt_id AND
                             x_paymentTab(k).payment_status =
                                 PAY_STATUS_CREATED) THEN

                             /* this means we got a new non-failed payment */
                             /* get the documents of this payment */

                             FOR m in x_docsInPmtTab.FIRST ..
                                 x_docsInPmtTab.LAST LOOP

                                 /*
                                  * We found a document of this new
                                  * non-failed payment
                                  */
                                 IF (x_docsInPmtTab(m).payment_id =
                                     x_paymentTab(k).payment_id) THEN

                                     /*
                                      * Check if the document of this
                                      * payment has the same payment grouping
                                      * number as the document of the
                                      * original payment
                                      */
                                     IF (x_docsInPmtTab(m).payment_grp_num =
                                         l_orig_pmt_grp_num) THEN

                                         /*
                                          * If so, we found documents across
                                          * payments sharing the same payment
                                          * grouping number. This is an error.
                                          * Log all the details.
                                          */
                                         l_compare_pmt_id :=
                                             x_paymentTab(k).payment_id;

                                         l_compare_doc_id := x_docsInPmtTab(m).
                                                                 document_id;

                                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
					 print_debuginfo(l_module_name,
                                             'Document '
                                             || l_compare_doc_id
                                             || ' of payment '
                                             || l_compare_pmt_id
                                             || ' has the same payment '
                                             || 'grouping number '
                                             || l_orig_pmt_grp_num
                                             || ', as document '
                                             || l_orig_doc_id
                                             || ' of payment '
                                             || l_orig_pmt_id
                                             || '. This means that two '
                                             || 'documents with the same '
                                             || 'payment grouping '
                                             || 'number are grouped in '
                                             || 'different payments. '
                                             || 'Both payments '
                                             || 'will be failed.'
                                             );
				          END IF;

                                         /*
                                          * Fail both payments
                                          */

                                         /* 1: fail the new payment */
                                         x_paymentTab(k).payment_status :=
                                             PAY_STATUS_REJECTED;

                                         /*
                                          * Once we fail a payment, we need
                                          * to create an error record and
                                          * insert this record into
                                          * the errors table.
                                          */
                                         IBY_BUILD_UTILS_PKG.createErrorRecord(
                                             TRXN_TYPE_PMT,
                                             x_paymentTab(k).payment_id,
                                             x_paymentTab(k).payment_status,
                                             NULL,
                                             x_paymentTab(k).payment_id,
                                             NULL,
                                             NULL,
                                             NULL,
                                             NULL,
                                             NULL,
                                             l_doc_err_rec,
                                             x_errTokenTab
                                             );

                                         IBY_VALIDATIONSETS_PUB.
                                             insertIntoErrorTable(
                                                 l_doc_err_rec, x_docErrorTab,
                                                 x_errTokenTab);

                                         /* fail the docs of this payment */
                                         failDocsOfPayment(
                                             x_paymentTab(k).payment_id,
                                             DOC_STATUS_PAY_VAL_FAIL,
                                             x_docsInPmtTab,
                                             x_docErrorTab,
                                             x_errTokenTab);

                                         /* 2: fail the original payment */
                                         x_paymentTab(i).payment_status :=
                                             PAY_STATUS_REJECTED;

                                         /*
                                          * Once we fail a payment, we need
                                          * to create an error record and
                                          * insert this record into
                                          * the errors table.
                                          */
                                         IBY_BUILD_UTILS_PKG.createErrorRecord(
                                             TRXN_TYPE_PMT,
                                             x_paymentTab(i).payment_id,
                                             x_paymentTab(i).payment_status,
                                             NULL,
                                             x_paymentTab(i).payment_id,
                                             NULL,
                                             NULL,
                                             NULL,
                                             NULL,
                                             NULL,
                                             l_doc_err_rec,
                                             x_errTokenTab
                                             );

                                         IBY_VALIDATIONSETS_PUB.
                                             insertIntoErrorTable(
                                                 l_doc_err_rec, x_docErrorTab,
                                                 x_errTokenTab);

                                         /* fail the docs of this payment */
                                         failDocsOfPayment(
                                             x_paymentTab(i).payment_id,
                                             DOC_STATUS_PAY_VAL_FAIL,
                                             x_docsInPmtTab,
                                             x_docErrorTab,
                                             x_errTokenTab);

                                     END IF; -- if payment grp num matched

                                 END IF; -- if doc belongs to this payment

                             END LOOP; -- loop through all documents

                         END IF; -- if this is a new payment

                     END LOOP; -- loop through all payments

                 END IF; -- if document has the same payment id

             END LOOP; -- loop through all documents
             END IF; -- if documents count > 0

         END IF; -- if payment is not in failed status

     END LOOP; -- for each payment in request

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'EXIT');

    END IF;
 END performPmtGrpNumberValidation;

/*--------------------------------------------------------------------
 | NAME:
 |     performPreHookProcess
 |
 | PURPOSE:
 |     Inserts all successfuly validated payments into
 |     IBY_HOOK_PAYMENTS_TEMP. This is a temporary table that the
 |     calling app can access to see what payments have been
 |     created. The calling app can also update the payments / fail
 |     the payments in the temporary table, and the payment creation
 |     program will update it's payments accordingly.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE performPreHookProcess(
     p_cap_payreq_cd     IN            VARCHAR2,
     p_cap_id            IN            NUMBER,
     x_paymentTab        IN OUT NOCOPY paymentTabType,
     x_docsInPmtTab      IN OUT NOCOPY docsInPaymentTabType,
     x_hookPaymentTab    IN OUT NOCOPY hookPaymentTabType,
     x_hookDocsInPmtTab  IN OUT NOCOPY hookDocsInPaymentTabType
     )
 IS

 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME || '.performPreHookProcess';
 l_succPayIndx NUMBER := 1;
 l_succDocIndx NUMBER := 1;

/*
 l_calling_app_ids                 t_calling_app_id;
 l_call_app_pay_service_req_cds    t_call_app_pay_service_req_cd;
 l_payment_service_request_ids     t_payment_service_request_id;
 l_payment_ids                     t_payment_id;
 l_payment_amounts                 t_payment_amount;
 l_payment_currency_codes          t_payment_currency_code;
 l_dont_pay_flags                  t_dont_pay_flag;
 l_dont_pay_reason_codes           t_dont_pay_reason_code;
 l_dont_pay_descriptions           t_dont_pay_description;
 l_internal_bank_account_ids       t_internal_bank_account_id;
 l_ext_payee_ids                   t_ext_payee_id;
 l_payee_party_ids                 t_payee_party_id;
 l_party_site_ids                  t_party_site_id;
 l_supplier_site_ids               t_supplier_site_id;
 l_org_ids                         t_org_id;
 l_org_types                       t_org_type;
 l_external_bank_account_ids       t_external_bank_account_id;
 l_discount_amount_takens          t_discount_amount_taken;
 l_payment_dates                   t_payment_date;
 l_bank_charge_amounts             t_bank_charge_amount;
 l_created_bys                     t_created_by;
 l_creation_dates                  t_creation_date;
 l_last_updated_bys                t_last_updated_by;
 l_last_update_dates               t_last_update_date;
 l_last_update_logins              t_last_update_login;
 l_object_version_numbers          t_object_version_number;
*/

 TYPE t_pmt_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.payment_id%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_document_payable_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.document_payable_id%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_call_app_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_id%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_calling_app_doc_unique_ref1 IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_doc_unique_ref1%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_calling_app_doc_unique_ref2 IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_doc_unique_ref2%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_calling_app_doc_unique_ref3 IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_doc_unique_ref3%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_calling_app_doc_unique_ref4 IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_doc_unique_ref4%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_calling_app_doc_unique_ref5 IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_doc_unique_ref5%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_document_amount IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.document_amount%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_document_currency_code IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.document_currency_code%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_amount_withheld IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.amount_withheld%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_dont_pay_flg IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.dont_pay_flag%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_dont_pay_reason_cd IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.dont_pay_reason_code%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_dont_pay_desc IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.dont_pay_description%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_pay_proc_trxn_type_code IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.pay_proc_trxn_type_code%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_int_bank_account_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.internal_bank_account_id%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_external_payee_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.ext_payee_id%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_payeeparty_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.payee_party_id%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_partysite_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.party_site_id%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_suppliersite_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.supplier_site_id%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_orgid IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.org_id%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_orgtype IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.org_type%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_ext_bank_account_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.external_bank_account_id%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_payment_curr_discount_taken IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.payment_curr_discount_taken%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_crtd_by IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.created_by%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_crt_date IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.creation_date%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_last_updt_by IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.last_updated_by%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_last_updt_date IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.last_update_date%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_last_updt_login IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.last_update_login%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_object_ver_number IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.object_version_number%TYPE
     INDEX BY BINARY_INTEGER;

 l_payment_id                       t_pmt_id;
 l_document_payable_id              t_document_payable_id;
 l_calling_app_id                   t_call_app_id;
 l_calling_app_doc_unique_ref1      t_calling_app_doc_unique_ref1;
 l_calling_app_doc_unique_ref2      t_calling_app_doc_unique_ref2;
 l_calling_app_doc_unique_ref3      t_calling_app_doc_unique_ref3;
 l_calling_app_doc_unique_ref4      t_calling_app_doc_unique_ref4;
 l_calling_app_doc_unique_ref5      t_calling_app_doc_unique_ref5;
 l_document_amount                  t_document_amount;
 l_document_currency_code           t_document_currency_code;
 l_amount_withheld                  t_amount_withheld;
 l_dont_pay_flag                    t_dont_pay_flg;
 l_dont_pay_reason_code             t_dont_pay_reason_cd;
 l_dont_pay_description             t_dont_pay_desc;
 l_pay_proc_trxn_type_code          t_pay_proc_trxn_type_code;
 l_internal_bank_account_id         t_int_bank_account_id;
 l_ext_payee_id                     t_external_payee_id;
 l_payee_party_id                   t_payeeparty_id;
 l_party_site_id                    t_partysite_id;
 l_supplier_site_id                 t_suppliersite_id;
 l_org_id                           t_orgid;
 l_org_type                         t_orgtype;
 l_external_bank_account_id         t_external_bank_account_id;
 l_payment_curr_discount_taken      t_payment_curr_discount_taken;
 l_created_by                       t_crtd_by;
 l_creation_date                    t_crt_date;
 l_last_updated_by                  t_last_updt_by;
 l_last_update_date                 t_last_updt_date;
 l_last_update_login                t_last_updt_login;
 l_object_version_number            t_object_ver_number;


 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'ENTER');

     END IF;
     /*
      * Only successful payments need to be sent to the hook. The
      * loop below filters the failed payments/documents.
      */
     delete_paymentTab;

     FOR i in x_paymentTab.FIRST ..  x_paymentTab.LAST LOOP

         IF (x_paymentTab(i).payment_status <> PAY_STATUS_REJECTED) THEN

             /*
              * Copy successful payments into 'hook payments' array.
              */
             paymentTab.calling_app_id(l_succPayIndx) :=
                 p_cap_id;
             paymentTab.call_app_pay_service_req_cd(l_succPayIndx) :=
                 p_cap_payreq_cd;
             paymentTab.payment_service_request_id(l_succPayIndx) :=
                 x_paymentTab(i).payment_service_request_id;
             paymentTab.payment_id(l_succPayIndx) :=
                 x_paymentTab(i).payment_id;
             paymentTab.payment_amount(l_succPayIndx) :=
                 x_paymentTab(i).payment_amount;
             paymentTab.payment_currency_code(l_succPayIndx) :=
                 x_paymentTab(i).payment_currency_code;
             paymentTab.dont_pay_flg(l_succPayIndx) := 'N';
             paymentTab.dont_pay_reason_cd(l_succPayIndx) := null;
             paymentTab.dont_pay_desc(l_succPayIndx) := null;
             paymentTab.internal_bank_account_id(l_succPayIndx) :=
                 x_paymentTab(i).internal_bank_account_id;
             paymentTab.external_bank_account_id(l_succPayIndx) :=
                 x_paymentTab(i).external_bank_account_id;
             paymentTab.ext_payee_id(l_succPayIndx) :=
                 x_paymentTab(i).ext_payee_id;
             paymentTab.payee_party_id(l_succPayIndx) :=
                 x_paymentTab(i).payee_party_id;
             paymentTab.party_site_id(l_succPayIndx) :=
                 x_paymentTab(i).party_site_id;
             paymentTab.supplier_site_id(l_succPayIndx) :=
                 x_paymentTab(i).supplier_site_id;
             paymentTab.org_id(l_succPayIndx) :=
                 x_paymentTab(i).org_id;
             paymentTab.org_type(l_succPayIndx) :=
                 x_paymentTab(i).org_type;
             paymentTab.discount_amount_taken(l_succPayIndx) :=
                 x_paymentTab(i).discount_amount_taken;
             paymentTab.payment_date(l_succPayIndx) :=
                 x_paymentTab(i).payment_date;
             paymentTab.bank_charge_amount(l_succPayIndx) :=
                 x_paymentTab(i).bank_charge_amount;
             paymentTab.created_by(l_succPayIndx) :=
                 x_paymentTab(i).created_by;
             paymentTab.creation_date(l_succPayIndx) :=
                 x_paymentTab(i).creation_date;
             paymentTab.last_updated_by(l_succPayIndx) :=
                 x_paymentTab(i).last_updated_by;
             paymentTab.last_update_date(l_succPayIndx) :=
                 x_paymentTab(i).last_update_date;
             paymentTab.last_update_login(l_succPayIndx) :=
                 x_paymentTab(i).last_update_login;
             paymentTab.object_version_number(l_succPayIndx) :=
                 x_paymentTab(i).object_version_number;

             IF (x_docsInPmtTab.COUNT > 0) THEN
             FOR j in  x_docsInPmtTab.FIRST ..  x_docsInPmtTab.LAST LOOP

                 /*
                  * Some payments may contain failed documents (example,
                  * documents that have been failed by cascade because
                  * some related document has failed).
                  *
                  * Make sure that the hook only gets successful payments
                  * and successful documents within that payment.
                  */
                 IF (x_docsInPmtTab(j).payment_id =
                     x_paymentTab(i).payment_id AND
                         x_docsInPmtTab(j).document_status
                             = DOC_STATUS_PAY_CREATED) THEN
                     /*
                      * Copy documents of successful payment into
                      * 'hook documents' array.
                      */
                     x_hookDocsInPmtTab(l_succDocIndx).payment_id
                         := x_docsInPmtTab(j).payment_id;
                     x_hookDocsInPmtTab(l_succDocIndx).document_payable_id
                         := x_docsInPmtTab(j).document_id;
                     x_hookDocsInPmtTab(l_succDocIndx).calling_app_id
                         := x_docsInPmtTab(j).calling_app_id;
                     x_hookDocsInPmtTab(l_succDocIndx).
                         calling_app_doc_unique_ref1
                             := x_docsInPmtTab(j).calling_app_doc_id1;
                     x_hookDocsInPmtTab(l_succDocIndx).
                         calling_app_doc_unique_ref2
                             := x_docsInPmtTab(j).calling_app_doc_id2;
                     x_hookDocsInPmtTab(l_succDocIndx).
                         calling_app_doc_unique_ref3
                             := x_docsInPmtTab(j).calling_app_doc_id3;
                     x_hookDocsInPmtTab(l_succDocIndx).
                         calling_app_doc_unique_ref4
                             := x_docsInPmtTab(j).calling_app_doc_id4;
                     x_hookDocsInPmtTab(l_succDocIndx).
                         calling_app_doc_unique_ref5
                             := x_docsInPmtTab(j).calling_app_doc_id5;
                     x_hookDocsInPmtTab(l_succDocIndx).document_amount
                         := x_docsInPmtTab(j).document_amount;
                     x_hookDocsInPmtTab(l_succDocIndx).document_currency_code
                         := x_docsInPmtTab(j).document_currency;
                     x_hookDocsInPmtTab(l_succDocIndx).amount_withheld
                         := x_docsInPmtTab(j).amount_withheld;
                     x_hookDocsInPmtTab(l_succDocIndx).pay_proc_trxn_type_code
                         := x_docsInPmtTab(j).pay_proc_ttype_cd;

                     x_hookDocsInPmtTab(l_succDocIndx).internal_bank_account_id
                         := x_docsInPmtTab(j).int_bank_acct_id;
                     x_hookDocsInPmtTab(l_succDocIndx).ext_payee_id
                         := x_docsInPmtTab(j).ext_payee_id;
                     x_hookDocsInPmtTab(l_succDocIndx).payee_party_id
                         := x_docsInPmtTab(j).payee_id;
                     x_hookDocsInPmtTab(l_succDocIndx).party_site_id
                         := x_docsInPmtTab(j).payee_site_id;
                     x_hookDocsInPmtTab(l_succDocIndx).supplier_site_id
                         := x_docsInPmtTab(j).supplier_site_id;
                     x_hookDocsInPmtTab(l_succDocIndx).org_id
                         := x_docsInPmtTab(j).org_id;
                     x_hookDocsInPmtTab(l_succDocIndx).org_type
                         := x_docsInPmtTab(j).org_type;
                     x_hookDocsInPmtTab(l_succDocIndx).external_bank_account_id
                         := x_docsInPmtTab(j).ext_bank_acct_id;
                     x_hookDocsInPmtTab(l_succDocIndx).
                         payment_curr_discount_taken
                             := x_docsInPmtTab(j).pmt_curr_discount;


                     /*
                      * If we copied a document, increment document
                      * counter before next iteration.
                      */
                     l_succDocIndx := l_succDocIndx + 1;

                 END IF;

             END LOOP;
             END IF; -- if document count > 0

             /*
              * If we copied a payment, increment payment
              * counter before next iteration.
              */
             l_succPayIndx := l_succPayIndx + 1;

         END IF;

     END LOOP;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, '# orig pmts: '
         || x_paymentTab.COUNT || ', # hook pmts: '
         || paymentTab.calling_app_id.COUNT);

    END IF;

     /*
      * The hook data is passed to the external app via global
      * temp tables IBY_HOOK_PAYMENTS_TEMP and IBY_HOOK_DOCS_IN_PMT_TEMP.
      * Populate these temp tables with data from our hook data
      * structures.
      */
     IF (paymentTab.calling_app_id.COUNT > 0) THEN
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		print_debuginfo(l_module_name, 'Populating global temp tables with'
             || ' hook data.');
         END IF;

     ELSE
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'No payments to pass to hook. '
             || 'Exiting ..');
         print_debuginfo(l_module_name, 'EXIT');
         END IF;
         RETURN;
     END IF;

     /*
      * First delete any existing records in these
      * temp tables so that they do not interfere with
      * our processing.
      */
     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Deleting existing records in '
         || 'hook tables .. ');
     END IF;

     DELETE IBY_HOOK_DOCS_IN_PMT_T;
     DELETE IBY_HOOK_PAYMENTS_T;
     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Finished deleting records from '
         || 'hook tables .. ');
     END IF;

     /*
      * Create arrays for each column of the IBY_HOOK_PAYMENTS_T table.
      * These arrays will be used in the bulk insert.
      */
     IF (x_hookDocsInPmtTab.COUNT > 0) THEN
     FOR i in x_hookDocsInPmtTab.FIRST..x_hookDocsInPmtTab.LAST LOOP

         l_payment_id(i)
             := x_hookDocsInPmtTab(i).payment_id;
         l_document_payable_id(i)
             := x_hookDocsInPmtTab(i).document_payable_id;
         l_calling_app_id(i)
             := x_hookDocsInPmtTab(i).calling_app_id;
         l_calling_app_doc_unique_ref1(i)
             := x_hookDocsInPmtTab(i).calling_app_doc_unique_ref1;
         l_calling_app_doc_unique_ref2(i)
             := x_hookDocsInPmtTab(i).calling_app_doc_unique_ref2;
         l_calling_app_doc_unique_ref3(i)
             := x_hookDocsInPmtTab(i).calling_app_doc_unique_ref3;
         l_calling_app_doc_unique_ref4(i)
             := x_hookDocsInPmtTab(i).calling_app_doc_unique_ref4;
         l_calling_app_doc_unique_ref5(i)
             := x_hookDocsInPmtTab(i).calling_app_doc_unique_ref5;
         l_document_amount(i)
             := x_hookDocsInPmtTab(i).document_amount;
         l_document_currency_code(i)
             := x_hookDocsInPmtTab(i).document_currency_code;
         l_amount_withheld(i)
             := NVL(x_hookDocsInPmtTab(i).amount_withheld, 0);
         l_dont_pay_flag(i)
             := NVL(x_hookDocsInPmtTab(i).dont_pay_flag, 'N');
         l_dont_pay_reason_code(i)
             := x_hookDocsInPmtTab(i).dont_pay_reason_code;
         l_dont_pay_description(i)
             := x_hookDocsInPmtTab(i).dont_pay_description;
         l_pay_proc_trxn_type_code(i)
             := x_hookDocsInPmtTab(i).pay_proc_trxn_type_code;
         l_internal_bank_account_id(i)
             := x_hookDocsInPmtTab(i).internal_bank_account_id;
         l_ext_payee_id(i)
             := x_hookDocsInPmtTab(i).ext_payee_id;
         l_payee_party_id(i)
             := x_hookDocsInPmtTab(i).payee_party_id;
         l_party_site_id(i)
             := x_hookDocsInPmtTab(i).party_site_id;
         l_supplier_site_id(i)
             := x_hookDocsInPmtTab(i).supplier_site_id;
         l_org_id(i)
             := x_hookDocsInPmtTab(i).org_id;
         l_org_type(i)
             := x_hookDocsInPmtTab(i).org_type;
         l_external_bank_account_id(i)
             := x_hookDocsInPmtTab(i).external_bank_account_id;
         l_payment_curr_discount_taken(i)
             := x_hookDocsInPmtTab(i).payment_curr_discount_taken;
         l_created_by(i)
             := NVL(x_hookDocsInPmtTab(i).created_by, fnd_global.user_id);
         l_creation_date(i)
             := NVL(x_hookDocsInPmtTab(i).creation_date, sysdate);
         l_last_updated_by(i)
             := NVL(x_hookDocsInPmtTab(i).last_updated_by, fnd_global.user_id);
         l_last_update_date(i)
             := NVL(x_hookDocsInPmtTab(i).last_update_date, sysdate);
         l_last_update_login(i)
             := NVL(x_hookDocsInPmtTab(i).last_update_login,
                    fnd_global.user_id);
         l_object_version_number(i)
             := NVL(x_hookDocsInPmtTab(i).object_version_number, 1);

     END LOOP;
     END IF; -- if document count > 0


     /* insert documents */
     /*
      * Bulk insert records into IBY_HOOK_DOCS_IN_PMT_T using named
      * columns. This will avoid any dependency in column order.
      */
     IF (x_hookDocsInPmtTab.COUNT > 0) THEN
     FORALL i in x_hookDocsInPmtTab.FIRST..x_hookDocsInPmtTab.LAST
         INSERT INTO IBY_HOOK_DOCS_IN_PMT_T
             (
             payment_id,
             document_payable_id,
             calling_app_id,
             calling_app_doc_unique_ref1,
             calling_app_doc_unique_ref2,
             calling_app_doc_unique_ref3,
             calling_app_doc_unique_ref4,
             calling_app_doc_unique_ref5,
             document_amount,
             document_currency_code,
             amount_withheld,
             dont_pay_flag,
             dont_pay_reason_code,
             dont_pay_description,
             pay_proc_trxn_type_code,
             internal_bank_account_id,
             ext_payee_id,
             payee_party_id,
             party_site_id,
             supplier_site_id,
             org_id,
             org_type,
             external_bank_account_id,
             payment_curr_discount_taken,
             created_by,
             creation_date,
             last_updated_by,
             last_update_date,
             last_update_login,
             object_version_number
             )
         VALUES
             (
             l_payment_id(i),
             l_document_payable_id(i),
             l_calling_app_id(i),
             l_calling_app_doc_unique_ref1(i),
             l_calling_app_doc_unique_ref2(i),
             l_calling_app_doc_unique_ref3(i),
             l_calling_app_doc_unique_ref4(i),
             l_calling_app_doc_unique_ref5(i),
             l_document_amount(i),
             l_document_currency_code(i),
             l_amount_withheld(i),
             l_dont_pay_flag(i),
             l_dont_pay_reason_code(i),
             l_dont_pay_description(i),
             l_pay_proc_trxn_type_code(i),
             l_internal_bank_account_id(i),
             l_ext_payee_id(i),
             l_payee_party_id(i),
             l_party_site_id(i),
             l_supplier_site_id(i),
             l_org_id(i),
             l_org_type(i),
             l_external_bank_account_id(i),
             l_payment_curr_discount_taken(i),
             l_created_by(i),
             l_creation_date(i),
             l_last_updated_by(i),
             l_last_update_date(i),
             l_last_update_login(i),
             l_object_version_number(i)
             )
             ;
     END IF; -- if hook document count > 0

     /*
      * Bulk insert records into IBY_HOOK_PAYMENTS_T using named
      * columns. This will avoid any dependency in column order.
      */

--     FOR i in paymentTab.calling_app_id.FIRST .. paymentTab.calling_app_id.LAST

     FORALL i in paymentTab.calling_app_id.FIRST .. paymentTab.calling_app_id.LAST
         INSERT INTO IBY_HOOK_PAYMENTS_T
             (
             calling_app_id,
             call_app_pay_service_req_code,
             payment_service_request_id,
             payment_id,
             payment_amount,
             payment_currency_code,
             dont_pay_flag,
             dont_pay_reason_code,
             dont_pay_description,
             internal_bank_account_id,
             ext_payee_id,
             payee_party_id,
             party_site_id,
             supplier_site_id,
             org_id,
             org_type,
             external_bank_account_id,
             discount_amount_taken,
             payment_date,
             bank_charge_amount,
             created_by,
             creation_date,
             last_updated_by,
             last_update_date,
             last_update_login,
             object_version_number
             )
             VALUES
             (
             paymentTab.calling_app_id(i),
             paymentTab.call_app_pay_service_req_cd(i),
             paymentTab.payment_service_request_id(i),
             paymentTab.payment_id(i),
             paymentTab.payment_amount(i),
             paymentTab.payment_currency_code(i),
             paymentTab.dont_pay_flg(i),
             paymentTab.dont_pay_reason_cd(i),
             paymentTab.dont_pay_desc(i),
             paymentTab.internal_bank_account_id(i),
             paymentTab.ext_payee_id(i),
             paymentTab.payee_party_id(i),
             paymentTab.party_site_id(i),
             paymentTab.supplier_site_id(i),
             paymentTab.org_id(i),
             paymentTab.org_type(i),
             paymentTab.external_bank_account_id(i),
             paymentTab.discount_amount_taken(i),
             paymentTab.payment_date(i),
             paymentTab.bank_charge_amount(i),
             paymentTab.created_by(i),
             paymentTab.creation_date(i),
             paymentTab.last_updated_by(i),
             paymentTab.last_update_date(i),
             paymentTab.last_update_login(i),
             paymentTab.object_version_number(i)
             );

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Finished populating global temp tables.');
     END IF;

--     delete_paymentTab;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Global temp tables were'
         || ' populated with '
         || x_hookDocsInPmtTab.COUNT || ' docs and '
         || paymentTab.calling_app_id.COUNT   || ' payments.');

     /* log the data that we pass to the hook */
         print_debuginfo(l_module_name, 'List of docs/pmts passed to hook: ');

     IF (x_hookDocsInPmtTab.COUNT > 0) THEN
     FOR i in x_hookDocsInPmtTab.FIRST..x_hookDocsInPmtTab.LAST LOOP
         print_debuginfo(l_module_name, 'Payment: '
             || x_hookDocsInPmtTab(i).payment_id
             || ', document: '
             || x_hookDocsInPmtTab(i).document_payable_id
             || ', document amt: '
             || x_hookDocsInPmtTab(i).document_amount
             || ', document curr: '
             || x_hookDocsInPmtTab(i).document_currency_code
             );
     END LOOP;
     END IF;

     print_debuginfo(l_module_name, x_hookDocsInPmtTab.COUNT
         || ' docs and '
         || paymentTab.calling_app_id.COUNT || ' payments'
         || ' were inserted into global temp tables.'
         );

     print_debuginfo(l_module_name, 'EXIT');


     END IF; -- if stmt level logging
 END performPreHookProcess;

/*--------------------------------------------------------------------
 | NAME:
 |     performPreHookProcess
 |
 | PURPOSE:
 |     Inserts all successfuly validated payments into
 |     IBY_HOOK_PAYMENTS_TEMP. This is a temporary table that the
 |     calling app can access to see what payments have been
 |     created. The calling app can also update the payments / fail
 |     the payments in the temporary table, and the payment creation
 |     program will update it's payments accordingly.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE performPreHookProcess(
     p_cap_payreq_cd     IN            VARCHAR2,
     p_ppr_id	         IN	       NUMBER,
     l_prehook_cnt       OUT     NOCOPY      NUMBER,
     p_cap_id            IN            NUMBER
 --    x_paymentTab        IN OUT NOCOPY paymentTabType,
 --     x_docsInPmtTab      IN OUT NOCOPY docsInPaymentTabType,
 --    x_hookPaymentTab    IN OUT NOCOPY hookPaymentTabType
     )
 IS

 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME || '.performPreHookProcess';
 l_succPayIndx NUMBER := 1;
 l_succDocIndx NUMBER := 1;

/*
 l_calling_app_ids                 t_calling_app_id;
 l_call_app_pay_service_req_cds    t_call_app_pay_service_req_cd;
 l_payment_service_request_ids     t_payment_service_request_id;
 l_payment_ids                     t_payment_id;
 l_payment_amounts                 t_payment_amount;
 l_payment_currency_codes          t_payment_currency_code;
 l_dont_pay_flags                  t_dont_pay_flag;
 l_dont_pay_reason_codes           t_dont_pay_reason_code;
 l_dont_pay_descriptions           t_dont_pay_description;
 l_internal_bank_account_ids       t_internal_bank_account_id;
 l_ext_payee_ids                   t_ext_payee_id;
 l_payee_party_ids                 t_payee_party_id;
 l_party_site_ids                  t_party_site_id;
 l_supplier_site_ids               t_supplier_site_id;
 l_org_ids                         t_org_id;
 l_org_types                       t_org_type;
 l_external_bank_account_ids       t_external_bank_account_id;
 l_discount_amount_takens          t_discount_amount_taken;
 l_payment_dates                   t_payment_date;
 l_bank_charge_amounts             t_bank_charge_amount;
 l_created_bys                     t_created_by;
 l_creation_dates                  t_creation_date;
 l_last_updated_bys                t_last_updated_by;
 l_last_update_dates               t_last_update_date;
 l_last_update_logins              t_last_update_login;
 l_object_version_numbers          t_object_version_number;
*/

 TYPE t_pmt_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.payment_id%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_document_payable_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.document_payable_id%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_call_app_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_id%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_calling_app_doc_unique_ref1 IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_doc_unique_ref1%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_calling_app_doc_unique_ref2 IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_doc_unique_ref2%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_calling_app_doc_unique_ref3 IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_doc_unique_ref3%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_calling_app_doc_unique_ref4 IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_doc_unique_ref4%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_calling_app_doc_unique_ref5 IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_doc_unique_ref5%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_document_amount IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.document_amount%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_document_currency_code IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.document_currency_code%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_amount_withheld IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.amount_withheld%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_dont_pay_flg IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.dont_pay_flag%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_dont_pay_reason_cd IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.dont_pay_reason_code%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_dont_pay_desc IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.dont_pay_description%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_pay_proc_trxn_type_code IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.pay_proc_trxn_type_code%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_int_bank_account_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.internal_bank_account_id%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_external_payee_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.ext_payee_id%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_payeeparty_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.payee_party_id%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_partysite_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.party_site_id%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_suppliersite_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.supplier_site_id%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_orgid IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.org_id%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_orgtype IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.org_type%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_ext_bank_account_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.external_bank_account_id%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_payment_curr_discount_taken IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.payment_curr_discount_taken%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_crtd_by IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.created_by%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_crt_date IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.creation_date%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_last_updt_by IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.last_updated_by%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_last_updt_date IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.last_update_date%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_last_updt_login IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.last_update_login%TYPE
     INDEX BY BINARY_INTEGER;
 TYPE t_object_ver_number IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.object_version_number%TYPE
     INDEX BY BINARY_INTEGER;

 l_payment_id                       t_pmt_id;
 l_document_payable_id              t_document_payable_id;
 l_calling_app_id                   t_call_app_id;
 l_calling_app_doc_unique_ref1      t_calling_app_doc_unique_ref1;
 l_calling_app_doc_unique_ref2      t_calling_app_doc_unique_ref2;
 l_calling_app_doc_unique_ref3      t_calling_app_doc_unique_ref3;
 l_calling_app_doc_unique_ref4      t_calling_app_doc_unique_ref4;
 l_calling_app_doc_unique_ref5      t_calling_app_doc_unique_ref5;
 l_document_amount                  t_document_amount;
 l_document_currency_code           t_document_currency_code;
 l_amount_withheld                  t_amount_withheld;
 l_dont_pay_flag                    t_dont_pay_flg;
 l_dont_pay_reason_code             t_dont_pay_reason_cd;
 l_dont_pay_description             t_dont_pay_desc;
 l_pay_proc_trxn_type_code          t_pay_proc_trxn_type_code;
 l_internal_bank_account_id         t_int_bank_account_id;
 l_ext_payee_id                     t_external_payee_id;
 l_payee_party_id                   t_payeeparty_id;
 l_party_site_id                    t_partysite_id;
 l_supplier_site_id                 t_suppliersite_id;
 l_org_id                           t_orgid;
 l_org_type                         t_orgtype;
 l_external_bank_account_id         t_external_bank_account_id;
 l_payment_curr_discount_taken      t_payment_curr_discount_taken;
 l_created_by                       t_crtd_by;
 l_creation_date                    t_crt_date;
 l_last_updated_by                  t_last_updt_by;
 l_last_update_date                 t_last_updt_date;
 l_last_update_login                t_last_updt_login;
 l_object_version_number            t_object_ver_number;



 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'ENTER- overloaded prehook');

     END IF;
     /*
      * Only successful payments need to be sent to the hook. The
      * loop below filters the failed payments/documents.
      */
   --  delete_paymentTab;
   /*

     FOR i in x_paymentTab.FIRST ..  x_paymentTab.LAST LOOP
print_debuginfo(l_module_name,'Status of pmt id'||x_paymentTab(i).payment_id||'-'||x_paymentTab(i).payment_status);
         IF (x_paymentTab(i).payment_status <> PAY_STATUS_REJECTED) THEN


             paymentTab.calling_app_id(l_succPayIndx) :=
                 p_cap_id;
             paymentTab.call_app_pay_service_req_cd(l_succPayIndx) :=
                 p_cap_payreq_cd;
             paymentTab.payment_service_request_id(l_succPayIndx) :=
                 x_paymentTab(i).payment_service_request_id;
             paymentTab.payment_id(l_succPayIndx) :=
                 x_paymentTab(i).payment_id;
             paymentTab.payment_amount(l_succPayIndx) :=
                 x_paymentTab(i).payment_amount;
             paymentTab.payment_currency_code(l_succPayIndx) :=
                 x_paymentTab(i).payment_currency_code;
             paymentTab.dont_pay_flg(l_succPayIndx) := 'N';
             paymentTab.dont_pay_reason_cd(l_succPayIndx) := null;
             paymentTab.dont_pay_desc(l_succPayIndx) := null;
             paymentTab.internal_bank_account_id(l_succPayIndx) :=
                 x_paymentTab(i).internal_bank_account_id;
             paymentTab.external_bank_account_id(l_succPayIndx) :=
                 x_paymentTab(i).external_bank_account_id;
             paymentTab.ext_payee_id(l_succPayIndx) :=
                 x_paymentTab(i).ext_payee_id;
             paymentTab.payee_party_id(l_succPayIndx) :=
                 x_paymentTab(i).payee_party_id;
             paymentTab.party_site_id(l_succPayIndx) :=
                 x_paymentTab(i).party_site_id;
             paymentTab.supplier_site_id(l_succPayIndx) :=
                 x_paymentTab(i).supplier_site_id;
             paymentTab.org_id(l_succPayIndx) :=
                 x_paymentTab(i).org_id;
             paymentTab.org_type(l_succPayIndx) :=
                 x_paymentTab(i).org_type;
             paymentTab.discount_amount_taken(l_succPayIndx) :=
                 x_paymentTab(i).discount_amount_taken;
             paymentTab.payment_date(l_succPayIndx) :=
                 x_paymentTab(i).payment_date;
             paymentTab.bank_charge_amount(l_succPayIndx) :=
                 x_paymentTab(i).bank_charge_amount;
             paymentTab.created_by(l_succPayIndx) :=
                 x_paymentTab(i).created_by;
             paymentTab.creation_date(l_succPayIndx) :=
                 x_paymentTab(i).creation_date;
             paymentTab.last_updated_by(l_succPayIndx) :=
                 x_paymentTab(i).last_updated_by;
             paymentTab.last_update_date(l_succPayIndx) :=
                 x_paymentTab(i).last_update_date;
             paymentTab.last_update_login(l_succPayIndx) :=
                 x_paymentTab(i).last_update_login;
             paymentTab.object_version_number(l_succPayIndx) :=
                 x_paymentTab(i).object_version_number;

             l_succPayIndx := l_succPayIndx + 1;

        END IF;

     END LOOP;

     */



     /*
      * The hook data is passed to the external app via global
      * temp tables IBY_HOOK_PAYMENTS_TEMP and IBY_HOOK_DOCS_IN_PMT_TEMP.
      * Populate these temp tables with data from our hook data
      * structures.
      */
     IF (IBY_PAYGROUP_PUB.pmtTable.payment_id.COUNT > 0) THEN
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		print_debuginfo(l_module_name, 'Populating global temp tables with'
             || ' hook data.');
         END IF;

     ELSE
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'No payments to pass to hook. '
             || 'Exiting ..');
         print_debuginfo(l_module_name, 'EXIT');
         END IF;
         RETURN;
     END IF;

     /*
      * First delete any existing records in these
      * temp tables so that they do not interfere with
      * our processing.
      */
     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Deleting existing records in '
         || 'hook tables .. ');
     END IF;

     DELETE IBY_HOOK_DOCS_IN_PMT_T;
     DELETE IBY_HOOK_PAYMENTS_T;
     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Finished deleting records from '
         || 'hook tables .. ');
     END IF;

    /*

     /*
      * Bulk insert records into IBY_HOOK_PAYMENTS_T using named
      * columns. This will avoid any dependency in column order.
      */

--     FOR i in paymentTab.calling_app_id.FIRST .. paymentTab.calling_app_id.LAST

--    FORALL i in paymentTab.payment_id.FIRST .. paymentTab.payment_id.LAST
         INSERT INTO IBY_HOOK_PAYMENTS_T
             (
             calling_app_id,
             call_app_pay_service_req_code,
             payment_service_request_id,
             payment_id,
             payment_amount,
             payment_currency_code,
             dont_pay_flag,
             dont_pay_reason_code,
             dont_pay_description,
             internal_bank_account_id,
             ext_payee_id,
             payee_party_id,
             party_site_id,
             supplier_site_id,
             org_id,
             org_type,
             external_bank_account_id,
             discount_amount_taken,
             payment_date,
             bank_charge_amount,
             created_by,
             creation_date,
             last_updated_by,
             last_update_date,
             last_update_login,
             object_version_number
             )
             (
	     SELECT
             p_cap_id,
             p_cap_payreq_cd,
             payment_service_request_id,
             payment_id,
             payment_amount,
             payment_currency_code,
             'N',
             null,
	     null,
             internal_bank_account_id,
             ext_payee_id,
             payee_party_id,
             party_site_id,
             supplier_site_id,
             org_id,
             org_type,
             external_bank_account_id,
             discount_amount_taken,
             payment_date,
             bank_charge_amount,
             created_by,
             creation_date,
             last_updated_by,
             last_update_date,
             last_update_login,
             object_version_number
	     FROM
	     IBY_PAYMENTS_ALL
	     where
	     payment_status <> PAY_STATUS_REJECTED AND
	     PAYMENT_SERVICE_REQUEST_ID = p_ppr_id
	     );
    l_prehook_cnt := SQL%ROWCOUNT;


	/*
	OPEN check_hook_pmt;
	  LOOP
	    FETCH check_hook_pmt INTO pmt_id, pmt_amt;
	    EXIT WHEN check_hook_pmt%NOTFOUND;
    	    print_debuginfo(l_module_name, 'pmt_id-'|| pmt_id || 'pmt_amt-'|| pmt_amt);
	  END LOOP;
	  CLOSE check_hook_pmt;
	*/

  INSERT INTO iby_hook_docs_in_pmt_t(
             PAYMENT_ID,
              DOCUMENT_PAYABLE_ID,
              CALLING_APP_ID,
              CALLING_APP_DOC_UNIQUE_REF1,
              CALLING_APP_DOC_UNIQUE_REF2,
              CALLING_APP_DOC_UNIQUE_REF3,
              CALLING_APP_DOC_UNIQUE_REF4,
              CALLING_APP_DOC_UNIQUE_REF5,
              DOCUMENT_AMOUNT,
              DOCUMENT_CURRENCY_CODE,
              AMOUNT_WITHHELD,
              DONT_PAY_FLAG,
              DONT_PAY_REASON_CODE,
              DONT_PAY_DESCRIPTION,
              PAY_PROC_TRXN_TYPE_CODE,
              INTERNAL_BANK_ACCOUNT_ID,
              EXT_PAYEE_ID,
              PAYEE_PARTY_ID,
              PARTY_SITE_ID,
              SUPPLIER_SITE_ID,
              ORG_ID,
              ORG_TYPE,
              EXTERNAL_BANK_ACCOUNT_ID,
              PAYMENT_CURR_DISCOUNT_TAKEN,
              CREATED_BY,
              CREATION_DATE,
              LAST_UPDATED_BY,
              LAST_UPDATE_DATE,
              LAST_UPDATE_LOGIN,
              OBJECT_VERSION_NUMBER
             )
 SELECT
        src.PAYMENT_ID,
              src.DOCUMENT_PAYABLE_ID,
              src.CALLING_APP_ID,
              src.CALLING_APP_DOC_UNIQUE_REF1,
              src.CALLING_APP_DOC_UNIQUE_REF2,
              src.CALLING_APP_DOC_UNIQUE_REF3,
              src.CALLING_APP_DOC_UNIQUE_REF4,
              src.CALLING_APP_DOC_UNIQUE_REF5,
              src.DOCUMENT_AMOUNT,
              src.DOCUMENT_CURRENCY_CODE,
              src.AMOUNT_WITHHELD,
              src.DONT_PAY_FLAG,
              src.DONT_PAY_REASON_CODE,
              src.DONT_PAY_DESCRIPTION,
              src.PAY_PROC_TRXN_TYPE_CODE,
              src.INTERNAL_BANK_ACCOUNT_ID,
              src.EXT_PAYEE_ID,
              src.PAYEE_PARTY_ID,
              src.PARTY_SITE_ID,
              src.SUPPLIER_SITE_ID,
              src.ORG_ID,
              src.ORG_TYPE,
              src.EXTERNAL_BANK_ACCOUNT_ID,
              src.PAYMENT_CURR_DISCOUNT_TAKEN,
              src.CREATED_BY,
              src.CREATION_DATE,
              src.LAST_UPDATED_BY,
              src.LAST_UPDATE_DATE,
              src.LAST_UPDATE_LOGIN,
              src.OBJECT_VERSION_NUMBER
 FROM iby_docs_in_pmt_gt src, iby_hook_payments_t ihpt
 WHERE src.payment_id = ihpt.payment_id
 AND src.document_status = DOC_STATUS_PAY_CREATED;

 l_DocsInPmtCount := SQL%ROWCOUNT;

 --Select count(*) into l_DocsInPmtCount
 --from iby_hook_docs_in_pmt_t;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'Finished populating global temp tables.');

--     delete_paymentTab;

     print_debuginfo(l_module_name, 'Global temp tables were'
         || ' populated with '
         || l_DocsInPmtCount || ' docs and '
         || l_prehook_cnt || ' payments');

        IF(l_prehook_cnt = 0) THEN

             print_debuginfo(l_module_name, 'Fatal error - Payment '
                 || 'count has come in the Payments GT Table as: '
                 || l_prehook_cnt
                 --,FND_LOG.LEVEL_UNEXPECTED
                 );

           /*  print_debuginfo(l_module_name, 'Aborting program ..',
                 FND_LOG.LEVEL_UNEXPECTED);

             APP_EXCEPTION.RAISE_EXCEPTION;   */

        END IF;

     print_debuginfo(l_module_name, 'EXIT');
     END IF;
 END performPreHookProcess;

/*--------------------------------------------------------------------
 | NAME:
 |     performPostHookProcess
 |
 | PURPOSE:
 |     Copies back the payments from the IBY_HOOK_PAYMENTS_TEMP temporary
 |     table back to the created payments PLSQL table.
 |
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE performPostHookProcess(
     x_paymentTab        IN OUT NOCOPY paymentTabType,
     x_docsInPmtTab      IN OUT NOCOPY docsInPaymentTabType,
     x_hookPaymentTab    IN OUT NOCOPY hookPaymentTabType,
     x_hookDocsInPmtTab  IN OUT NOCOPY hookDocsInPaymentTabType,
     x_docErrorTab       IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.docErrorTabType,
     x_errTokenTab       IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.
                                           trxnErrTokenTabType
     )
 IS

 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.performPostHookProcess';
 l_succPayIndx NUMBER := 1;
 l_succDocIndx NUMBER := 1;
 l_preHookPaymentTab   hookPaymentTabType;
 l_preHook_cntr        integer;
 l_preHookDocsInPmtTab hookDocsInPaymentTabType;
 l_str         VARCHAR2(2000);

 l_doc_err_rec   IBY_TRANSACTION_ERRORS%ROWTYPE;

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'ENTER');

END IF;

     IF (paymentTab.calling_app_id.COUNT = 0) THEN
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'No payments were retrieved '
             || 'from hook. Exiting ..');
         print_debuginfo(l_module_name, 'EXIT');

	 END IF;

	 RETURN;
     END IF;

     /*
      * Copy all the data that we passed to the hook into a
      * backup data structure. We will diff this backup
      * structure with the data struct that returns from
      * the hook and log all the differences as 'payment
      * changes made by hook'.
      */
/*    Bug 6347886
     FOR i in x_hookPaymentTab.FIRST .. x_hookPaymentTab.LAST LOOP
         l_preHookPaymentTab(l_preHookPaymentTab.COUNT + 1)
             := x_hookPaymentTab(i);
     END LOOP;
*/
     l_preHook_cntr := 1;
     FOR i in paymentTab.calling_app_id.FIRST .. paymentTab.calling_app_id.LAST
LOOP
         l_preHookPaymentTab(l_preHook_cntr).calling_app_id
         := PaymentTab.calling_app_id(i);
         l_preHookPaymentTab(l_preHook_cntr).call_app_pay_service_req_code
         := PaymentTab.call_app_pay_service_req_cd(i);
         l_preHookPaymentTab(l_preHook_cntr).payment_service_request_id
         := PaymentTab.payment_service_request_id(i);
         l_preHookPaymentTab(l_preHook_cntr).payment_id
         := PaymentTab.payment_id(i);
         l_preHookPaymentTab(l_preHook_cntr).payment_amount
         := PaymentTab.payment_amount(i);
         l_preHookPaymentTab(l_preHook_cntr).payment_currency_code
         := PaymentTab.payment_currency_code(i);
         l_preHookPaymentTab(l_preHook_cntr).dont_pay_flag
         := PaymentTab.dont_pay_flg(i);
         l_preHookPaymentTab(l_preHook_cntr).dont_pay_reason_code
         := PaymentTab.dont_pay_reason_cd(i);
         l_preHookPaymentTab(l_preHook_cntr).dont_pay_description
         := PaymentTab.dont_pay_desc(i);
         l_preHookPaymentTab(l_preHook_cntr).internal_bank_account_id
         := PaymentTab.internal_bank_account_id(i);
         l_preHookPaymentTab(l_preHook_cntr).ext_payee_id
         := PaymentTab.ext_payee_id(i);
         l_preHookPaymentTab(l_preHook_cntr).payee_party_id
         := PaymentTab.payee_party_id(i);
         l_preHookPaymentTab(l_preHook_cntr).party_site_id
         := PaymentTab.party_site_id(i);
         l_preHookPaymentTab(l_preHook_cntr).supplier_site_id
         := PaymentTab.supplier_site_id(i);
         l_preHookPaymentTab(l_preHook_cntr).org_id
         := PaymentTab.org_id(i);
         l_preHookPaymentTab(l_preHook_cntr).org_type
         := PaymentTab.org_type(i);
         l_preHookPaymentTab(l_preHook_cntr).external_bank_account_id
         := PaymentTab.external_bank_account_id(i);
         l_preHookPaymentTab(l_preHook_cntr).discount_amount_taken
         := PaymentTab.discount_amount_taken(i);
         l_preHookPaymentTab(l_preHook_cntr).payment_date
         := PaymentTab.payment_date(i);
         l_preHookPaymentTab(l_preHook_cntr).bank_charge_amount
         := PaymentTab.bank_charge_amount(i);
         l_preHookPaymentTab(l_preHook_cntr).created_by
         := PaymentTab.created_by(i);
         l_preHookPaymentTab(l_preHook_cntr).creation_date
         := PaymentTab.creation_date(i);
         l_preHookPaymentTab(l_preHook_cntr).last_updated_by
         := PaymentTab.last_updated_by(i);
         l_preHookPaymentTab(l_preHook_cntr).last_update_date
         := PaymentTab.last_update_date(i);
         l_preHookPaymentTab(l_preHook_cntr).last_update_login
         := PaymentTab.last_update_login(i);
         l_preHookPaymentTab(l_preHook_cntr).object_version_number
         := PaymentTab.object_version_number(i);
         l_preHook_cntr := l_preHook_cntr + 1;
     END LOOP;

/* Bug 6347886 */

     IF (x_hookDocsInPmtTab.COUNT > 0) THEN
     FOR i in x_hookDocsInPmtTab.FIRST .. x_hookDocsInPmtTab.LAST LOOP
         l_preHookDocsInPmtTab(l_preHookDocsInPmtTab.COUNT + 1)
             := x_hookDocsInPmtTab(i);
     END LOOP;
     END IF;

     /*
      * Read the documents and payments from the global temp
      * tables. The calling app might have updated them.
      */
     getAdjustedPaymentData(x_hookPaymentTab, x_hookDocsInPmtTab);

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, x_hookDocsInPmtTab.COUNT
         || ' docs and '
         || x_hookPaymentTab.COUNT || ' payments'
         || ' were read from global temp tables.'
         );

END IF;

     /*
      * The external hook can change document and payment
      * amounts, or change document and payment statuses.
      *
      * However, the external hook should not 'add to' or
      * 'remove from', the documents and payments that were
      * passed to the hook.
      *
      * Check the document and payment count. If the hook
      * has made any changes, the abort the program as it
      * a fatal error.
      */

     IF (x_hookPaymentTab.COUNT <> l_preHookPaymentTab.COUNT) THEN

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Fatal error - Payment '
             || 'count mismatch after hook operation. '
             || '# payments passed to hook: '
             || l_preHookPaymentTab.COUNT
             || ', # payments returning from hook: '
             || x_hookPaymentTab.COUNT,
             FND_LOG.LEVEL_UNEXPECTED
             );

         print_debuginfo(l_module_name, 'Aborting program ..',
             FND_LOG.LEVEL_UNEXPECTED);


	 END IF;

         APP_EXCEPTION.RAISE_EXCEPTION;

     END IF;

     IF (x_hookDocsInPmtTab.COUNT <> l_preHookDocsInPmtTab.COUNT) THEN

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Fatal error - Document '
             || 'count mismatch after hook operation. '
             || '# documents passed to hook: '
             || l_preHookDocsInPmtTab.COUNT
             || ', # documents returning from hook: '
             || x_hookDocsInPmtTab.COUNT,
             FND_LOG.LEVEL_UNEXPECTED
             );

         print_debuginfo(l_module_name, 'Aborting program ..',
             FND_LOG.LEVEL_UNEXPECTED);


 END IF;
         APP_EXCEPTION.RAISE_EXCEPTION;

     END IF;

     /*
      * Diff the pre-hook and post-hook structures and log
      * the values that were changed by the hook.
      */
     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'List of changes made by the hook: ');

     /* Diff of payments */
     FOR i in x_hookPaymentTab.FIRST .. x_hookPaymentTab.LAST LOOP

         l_str := NULL;

         IF (x_hookPaymentTab(i).payment_amount <>
             l_preHookPaymentTab(i).payment_amount ) THEN
             l_str := 'Pmt amount: ' || x_hookPaymentTab(i).payment_amount;
         END IF;

         IF (x_hookPaymentTab(i).dont_pay_flag <>
             l_preHookPaymentTab(i).dont_pay_flag) THEN
             l_str := l_str || ' Dont pay flag: '
                          || x_hookPaymentTab(i).dont_pay_flag;
         END IF;

         IF (l_str IS NOT NULL) THEN
             l_str := 'Pmt Id: ' || x_hookPaymentTab(i).payment_id
                          || ' ' || l_str;
             print_debuginfo(l_module_name, l_str);
         END IF;

     END LOOP;

     /* Diff of documents */
     IF (x_hookDocsInPmtTab.COUNT > 0) THEN
     FOR i in x_hookDocsInPmtTab.FIRST .. x_hookDocsInPmtTab.LAST LOOP

         l_str := NULL;

         IF (x_hookDocsInPmtTab(i).document_amount <>
             l_preHookDocsInPmtTab(i).document_amount) THEN
             l_str := 'Doc amount: ' || x_hookDocsInPmtTab(i).document_amount;
         END IF;

         IF (x_hookDocsInPmtTab(i).amount_withheld <>
             l_preHookDocsInPmtTab(i).amount_withheld) THEN
             l_str := l_str || ', Amount withheld: '
                          || x_hookDocsInPmtTab(i).amount_withheld;
         END IF;

         IF (x_hookDocsInPmtTab(i).dont_pay_flag <>
             l_preHookDocsInPmtTab(i).dont_pay_flag) THEN
             l_str := l_str || ', Dont pay flag: '
                          || x_hookDocsInPmtTab(i).dont_pay_flag;
         END IF;

         IF (l_str IS NOT NULL) THEN
             l_str := 'Doc Id: ' || x_hookDocsInPmtTab(i).document_payable_id
                          || ' ' || l_str;
             print_debuginfo(l_module_name, l_str);
         END IF;

     END LOOP;
     END IF; -- if hook docs count > 0

   END IF; -- IF STATEMENT LEVEL LOGGING

     /*
      * Ideally, when the calling app sets the 'dont pay flag'
      * for a payment, it should also do the following:
      *
      * 1. Set payment amount to zero.
      *
      * 2. Set 'dont pay flag' for all docs that were part of
      *    this payment.
      *
      * But the calling app does not do (1) and (2). Instead these
      * steps are handled by the build program (to make life simpler
      * for the calling app).
      *
      * The loop below handles these steps.
      */
     FOR i in x_hookPaymentTab.FIRST ..  x_hookPaymentTab.LAST LOOP

         IF (UPPER(x_hookPaymentTab(i).dont_pay_flag) = 'Y') THEN

             /*
              * Since the payment has failed, all docs in this
              * payment also need to be failed.
              *
              * Set the 'dont pay flag' to true for all docs
              * that were part of this payment.
              */
             IF (x_hookDocsInPmtTab.COUNT > 0) THEN
             FOR j in x_hookDocsInPmtTab.FIRST .. x_hookDocsInPmtTab.LAST LOOP

                 IF (x_hookDocsInPmtTab(j).payment_id =
                     x_hookPaymentTab(i).payment_id) THEN

                     x_hookDocsInPmtTab(j).dont_pay_flag := 'Y';

                 END IF;

             END LOOP;
             END IF;

             /*
              * Set the payment amount to zero.
              *
              * Remember, Payment Amount =
              *               SUM (successful document amounts)
              */
             x_hookPaymentTab(i).payment_amount := 0;

         END IF;

     END LOOP;

     /*
      * STEP 1:
      *
      * Update our existing payments and documents data structures
      * with the values from the hook - the external app may have adjusted
      * some payment amounts for bank charges, tax withholding etc.
      *
      * These must be reflected into our existing data structures before
      * we update the documents and payments tables with them.
      */

     /* update payments */
     FOR i in x_hookPaymentTab.FIRST ..  x_hookPaymentTab.LAST LOOP

         FOR j in x_paymentTab.FIRST ..  x_paymentTab.LAST LOOP

             IF (x_hookPaymentTab(i).payment_id = x_paymentTab(j).payment_id)
                 THEN

                 /*
                  * Copy from 'hook payments' array to original
                  * payments array.
                  */
                 IF (x_paymentTab(j).payment_amount <>
                     x_hookPaymentTab(i).payment_amount) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Amount for payment '
                         || x_hookPaymentTab(i).payment_id
                         || ' was changed by calling app'
                         || ' from '  || x_paymentTab(j).payment_amount
                         || ' to ' || x_hookPaymentTab(i).payment_amount
                         );
		     END IF;
                     x_paymentTab(j).payment_amount :=
                         x_hookPaymentTab(i).payment_amount;

                 END IF;

                 /*
                  * If the external app has populated the bank charge
                  * amount via the hook, update the bank charge
                  * amount attribute on the payment to reflect this.
                  */
                 IF (x_paymentTab(j).bank_charge_amount <>
                     x_hookPaymentTab(i).bank_charge_amount) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Bank charge amount '
                         || 'for payment '
                         || x_hookPaymentTab(i).payment_id
                         || ' was changed by calling app'
                         || ' from '  || x_paymentTab(j).bank_charge_amount
                         || ' to ' || x_hookPaymentTab(i).bank_charge_amount
                         );
		     END IF;
                     x_paymentTab(j).bank_charge_amount :=
                         x_hookPaymentTab(i).bank_charge_amount;

                 END IF;

		 /*
		  * If the external app has populated the discount
		  * amount via the hook, update the discount
		  * amount attribute on the payment to reflect this.
		  */
		 IF (x_paymentTab(j).discount_amount_taken <>
		     x_hookPaymentTab(i).discount_amount_taken) THEN

		     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		     print_debuginfo(l_module_name, 'Discount Amount Taken '
		 	  || 'for payment '
		 	  || x_hookPaymentTab(i).payment_id
		 	  || ' was changed by calling app'
		 	  || ' from '  || x_paymentTab(j).discount_amount_taken
		 	  || ' to ' || x_hookPaymentTab(i).discount_amount_taken
		 	  );
		      END IF;
		     x_paymentTab(j).discount_amount_taken :=
		 	  x_hookPaymentTab(i).discount_amount_taken;

		 END IF;

                 /*
                  * Adjust payment status if necessary.
                  */
                 IF (UPPER(x_hookPaymentTab(i).dont_pay_flag) = 'Y') THEN

                     x_paymentTab(j).payment_status := PAY_STATUS_CA_FAILED;

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Payment '
                         || x_paymentTab(j).payment_id
                         || ' was failed by calling app.');
		     END IF;
                     /*
                      * Once we fail a payment, we need to create
                      * an error record and insert this record
                      * into the errors table.
                      */
                     IBY_BUILD_UTILS_PKG.createErrorRecord(
                         TRXN_TYPE_PMT,
                         x_paymentTab(j).payment_id,
                         x_paymentTab(j).payment_status,
                         NULL,
                         x_paymentTab(j).payment_id,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         l_doc_err_rec,
                         x_errTokenTab
                         );

                 IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                     l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                 /* fail the docs of this payment */
                 failDocsOfPayment(x_paymentTab(j).payment_id,
                     DOC_STATUS_PAY_VAL_FAIL, x_docsInPmtTab,
                     x_docErrorTab, x_errTokenTab);


                 END IF;

             END IF;

         END LOOP;

     END LOOP;

     /* update documents */
     IF (x_hookDocsInPmtTab.COUNT > 0) THEN
     FOR i in x_hookDocsInPmtTab.FIRST ..  x_hookDocsInPmtTab.LAST LOOP

         FOR j in x_docsInPmtTab.FIRST ..  x_docsInPmtTab.LAST LOOP

             IF (x_hookDocsInPmtTab(i).document_payable_id =
                 x_docsInPmtTab(j).document_id)
                 THEN

                 /*
                  * Copy from 'hook documents' array to original
                  * documents array.
                  */
                 IF (x_docsInPmtTab(j).document_amount <>
                     x_hookDocsInPmtTab(i).document_amount) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Amount for document '
                         || x_hookDocsInPmtTab(i).document_payable_id
                         || ' was changed by calling app'
                         || ' from ' || x_docsInPmtTab(j).document_amount
                         ||  ' to '  || x_hookDocsInPmtTab(i).document_amount
                         );
		     END IF;
                     x_docsInPmtTab(j).document_amount :=
                         x_hookDocsInPmtTab(i).document_amount;

                     x_docsInPmtTab(j).amount_withheld :=
                         x_hookDocsInPmtTab(i).amount_withheld;

                 END IF;

                 /*
                  * Copy from 'hook documents' array to original
                  * documents array.
                  */
                 IF (x_docsInPmtTab(j).pmt_curr_discount <>
                     x_hookDocsInPmtTab(i).payment_curr_discount_taken) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Discount for document '
                	  || x_hookDocsInPmtTab(i).document_payable_id
                	  || ' was changed by calling app'
                	  || ' from ' || x_docsInPmtTab(j).pmt_curr_discount
                	  ||  ' to '  || x_hookDocsInPmtTab(i).payment_curr_discount_taken
                	  );
                      END IF;
                     x_docsInPmtTab(j).pmt_curr_discount :=
                	  x_hookDocsInPmtTab(i).payment_curr_discount_taken;

                 END IF;

                 /*
                  * Adjust document status if necessary.
                  */
                 IF (UPPER(x_hookDocsInPmtTab(i).dont_pay_flag) = 'Y') THEN

                     x_docsInPmtTab(j).document_status := DOC_STATUS_CA_FAILED;

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Document '
                         || x_hookDocsInPmtTab(i).document_payable_id
                         || ' was failed by calling app.');
		     END IF;

                     /*
                      * Once we fail a doc, we must add a corresponding
                      * error message to the error table.
                      */
                     IBY_BUILD_UTILS_PKG.createErrorRecord(
                         TRXN_TYPE_DOC,
                         x_docsInPmtTab(j).document_id,
                         x_docsInPmtTab(j).document_status,
                         x_docsInPmtTab(j).calling_app_id,
                         x_docsInPmtTab(j).calling_app_doc_id1,
                         x_docsInPmtTab(j).calling_app_doc_id2,
                         x_docsInPmtTab(j).calling_app_doc_id3,
                         x_docsInPmtTab(j).calling_app_doc_id4,
                         x_docsInPmtTab(j).calling_app_doc_id5,
                         x_docsInPmtTab(j).pay_proc_ttype_cd,
                         l_doc_err_rec,
                         x_errTokenTab
                         );

                     IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                         l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                 END IF;

             END IF;

         END LOOP;

     END LOOP;
     END IF;

     /*
      * STEP 2:
      *
      * The external app may not wish to pay certain documents.
      * For such cases, make sure to fail the sister docs that are
      * related to this document via the 'payment grouping number'.
      * Each time a sister doc is failed, adjust the payment amount
      * of the payment that contains this document to reflect this.
      */
     adjustSisterDocsAndPmts(x_paymentTab, x_docsInPmtTab,
         x_docErrorTab, x_errTokenTab);

     print_debuginfo(l_module_name, 'EXIT');

 END performPostHookProcess;


/*--------------------------------------------------------------------
 | NAME:
 |     performPostHookProcess
 |
 | PURPOSE:
 |     Copies back the payments from the IBY_HOOK_PAYMENTS_TEMP temporary
 |     table back to the created payments PLSQL table.
 |
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE performPostHookProcess(
 --    x_paymentTab        IN OUT NOCOPY paymentTabType,
 --     x_docsInPmtTab      IN OUT NOCOPY docsInPaymentTabType,
 --    x_hookPaymentTab    IN OUT NOCOPY hookPaymentTabType,
 --    x_hookDocsInPmtTab  IN OUT NOCOPY hookDocsInPaymentTabType,
     p_cap_payreq_cd	 IN VARCHAR2,
     l_prehook_count     IN NUMBER,
     x_docErrorTab       IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.docErrorTabType,
     x_errTokenTab       IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.
                                           trxnErrTokenTabType
     )
 IS

 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.performPostHookProcess';
 l_succPayIndx NUMBER := 1;
 l_succDocIndx NUMBER := 1;
 l_preHookPaymentTab   hookPaymentTabType;
 l_preHook_cntr        integer;
 l_preHookDocsInPmtTab hookDocsInPaymentTabType;
 l_str         VARCHAR2(2000);

 l_doc_err_rec   IBY_TRANSACTION_ERRORS%ROWTYPE;
 l_docsingt_count NUMBER;

 l_pmts_tab_count    NUMBER;
 l_posthook_count   NUMBER;
 hookPmtsTab hookPaymentTabType;

 l_hook_pmt_amt iby_payments_all.payment_amount%type;
 l_pmt_amt      iby_payments_all.payment_amount%type;
 l_trx_cbr_index  BINARY_INTEGER;

 CURSOR c_fail_docs_of_payment
 IS
 SELECT idpt.payment_id,
   idpt.document_payable_id,
   idpt.document_status,
   idpt.calling_app_id,
   idpt.calling_app_doc_unique_ref1,
   idpt.calling_app_doc_unique_ref2,
   idpt.calling_app_doc_unique_ref3,
   idpt.calling_app_doc_unique_ref4,
   idpt.calling_app_doc_unique_ref5,
   idpt.pay_proc_trxn_type_code,
   idpt.document_amount,
   idpt.payment_grouping_number
 FROM iby_docs_in_pmt_gt idpt
 WHERE idpt.document_payable_id in (SELECT idpa.document_payable_id from iby_hook_docs_in_pmt_t idpa
                                    WHERE idpa.dont_pay_flag = 'Y');
 CURSOR c_failed_documents
 IS
 SELECT ihdp.document_payable_id,
 ihdp.document_amount,
 ihdp.amount_withheld,
 ihdp.dont_pay_flag
 FROM iby_hook_docs_in_pmt_t ihdp, iby_docs_in_pmt_gt idip
 WHERE ihdp.document_payable_id = idip.document_payable_id
 AND (ihdp.document_amount <> idip.document_amount
 OR ihdp.amount_withheld <> idip.amount_withheld
 OR ihdp.dont_pay_flag <> idip.dont_pay_flag);

  CURSOR check_pmt_tab
 IS
 select
 payment_id,
 payment_amount
 from
 iby_payments_all A
 where payment_amount =
 (select B.payment_amount from IBY_HOOK_PAYMENTS_T B where A.payment_id = B.payment_id
  AND A.payment_service_request_id = B.payment_service_request_id)
 ;


  CURSOR c_hook_pmts
 IS
 SELECT
  calling_app_id   ,
  call_app_pay_service_req_code ,
  payment_service_request_id ,
  payment_id   ,
  payment_amount   ,
  payment_currency_code  ,
  dont_pay_flag   ,
  dont_pay_reason_code  ,
  dont_pay_description  ,
  internal_bank_account_id  ,
  ext_payee_id   ,
  payee_party_id   ,
  party_site_id   ,
  supplier_site_id   ,
  org_id    ,
  org_type    ,
  external_bank_account_id  ,
  discount_amount_taken  ,
  payment_date   ,
  bank_charge_amount  ,
  created_by   ,
  creation_date   ,
  last_updated_by   ,
  last_update_date   ,
  last_update_login   ,
  object_version_number
 FROM
 IBY_HOOK_PAYMENTS_T
 WHERE
 call_app_pay_service_req_code=
 p_cap_payreq_cd
 ;


 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'ENTER - overloaded postHookprocess');

END IF;

     IF (IBY_PAYGROUP_PUB.pmtTable.payment_id.COUNT = 0) THEN
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'No payments were retrieved '
             || 'from hook. Exiting ..');
         print_debuginfo(l_module_name, 'EXIT');

	 END IF;

	 RETURN;
     END IF;


     	 /*
	 OPEN check_hook_pmt;
	  LOOP
	    FETCH check_hook_pmt INTO pmt_id, pmt_amt;

	    EXIT WHEN check_hook_pmt%NOTFOUND;
	    print_debuginfo(l_module_name, 'pmt_id-'|| pmt_id || 'pmt_amt-'|| pmt_amt);

	  END LOOP;
	  CLOSE check_hook_pmt;

	*/


     	 /*
	 OPEN check_pmt_tab;
	  LOOP
	    FETCH check_pmt_tab INTO pmt_id, pmt_amt;

	    EXIT WHEN check_pmt_tab%NOTFOUND;
	    print_debuginfo(l_module_name, 'pmt_id-'|| pmt_id || 'pmt_amt-'|| pmt_amt);

	  END LOOP;
	  CLOSE check_pmt_tab;

	 */


     /*
      * Copy all the data that we passed to the hook into a
      * backup data structure. We will diff this backup
      * structure with the data struct that returns from
      * the hook and log all the differences as 'payment
      * changes made by hook'.
      */
/*    Bug 6347886
     FOR i in x_hookPaymentTab.FIRST .. x_hookPaymentTab.LAST LOOP
         l_preHookPaymentTab(l_preHookPaymentTab.COUNT + 1)
             := x_hookPaymentTab(i);
     END LOOP;
*/

/*

     l_preHook_cntr := 1;
     FOR i in paymentTab.calling_app_id.FIRST .. paymentTab.calling_app_id.LAST
LOOP
         l_preHookPaymentTab(l_preHook_cntr).calling_app_id
         := PaymentTab.calling_app_id(i);
         l_preHookPaymentTab(l_preHook_cntr).call_app_pay_service_req_code
         := PaymentTab.call_app_pay_service_req_cd(i);
         l_preHookPaymentTab(l_preHook_cntr).payment_service_request_id
         := PaymentTab.payment_service_request_id(i);
         l_preHookPaymentTab(l_preHook_cntr).payment_id
         := PaymentTab.payment_id(i);
         l_preHookPaymentTab(l_preHook_cntr).payment_amount
         := PaymentTab.payment_amount(i);
         l_preHookPaymentTab(l_preHook_cntr).payment_currency_code
         := PaymentTab.payment_currency_code(i);
         l_preHookPaymentTab(l_preHook_cntr).dont_pay_flag
         := PaymentTab.dont_pay_flg(i);
         l_preHookPaymentTab(l_preHook_cntr).dont_pay_reason_code
         := PaymentTab.dont_pay_reason_cd(i);
         l_preHookPaymentTab(l_preHook_cntr).dont_pay_description
         := PaymentTab.dont_pay_desc(i);
         l_preHookPaymentTab(l_preHook_cntr).internal_bank_account_id
         := PaymentTab.internal_bank_account_id(i);
         l_preHookPaymentTab(l_preHook_cntr).ext_payee_id
         := PaymentTab.ext_payee_id(i);
         l_preHookPaymentTab(l_preHook_cntr).payee_party_id
         := PaymentTab.payee_party_id(i);
         l_preHookPaymentTab(l_preHook_cntr).party_site_id
         := PaymentTab.party_site_id(i);
         l_preHookPaymentTab(l_preHook_cntr).supplier_site_id
         := PaymentTab.supplier_site_id(i);
         l_preHookPaymentTab(l_preHook_cntr).org_id
         := PaymentTab.org_id(i);
         l_preHookPaymentTab(l_preHook_cntr).org_type
         := PaymentTab.org_type(i);
         l_preHookPaymentTab(l_preHook_cntr).external_bank_account_id
         := PaymentTab.external_bank_account_id(i);
         l_preHookPaymentTab(l_preHook_cntr).discount_amount_taken
         := PaymentTab.discount_amount_taken(i);
         l_preHookPaymentTab(l_preHook_cntr).payment_date
         := PaymentTab.payment_date(i);
         l_preHookPaymentTab(l_preHook_cntr).bank_charge_amount
         := PaymentTab.bank_charge_amount(i);
         l_preHookPaymentTab(l_preHook_cntr).created_by
         := PaymentTab.created_by(i);
         l_preHookPaymentTab(l_preHook_cntr).creation_date
         := PaymentTab.creation_date(i);
         l_preHookPaymentTab(l_preHook_cntr).last_updated_by
         := PaymentTab.last_updated_by(i);
         l_preHookPaymentTab(l_preHook_cntr).last_update_date
         := PaymentTab.last_update_date(i);
         l_preHookPaymentTab(l_preHook_cntr).last_update_login
         := PaymentTab.last_update_login(i);
         l_preHookPaymentTab(l_preHook_cntr).object_version_number
         := PaymentTab.object_version_number(i);
         l_preHook_cntr := l_preHook_cntr + 1;
     END LOOP;

*/


     UPDATE iby_hook_payments_t
     SET payment_amount = 0
     WHERE dont_pay_flag = 'Y';

    print_debuginfo(l_module_name, 'After updating iby_hooks table for pmt amt');

     	 /*
	 OPEN check_hook_pmt;
	  LOOP
	    FETCH check_hook_pmt INTO pmt_id, pmt_amt;

	    EXIT WHEN check_hook_pmt%NOTFOUND;
	    print_debuginfo(l_module_name, 'pmt_id-'|| pmt_id || 'pmt_amt-'|| pmt_amt);

	  END LOOP;
	  CLOSE check_hook_pmt;
	 */

     /*
      * Read the documents and payments from the global temp
      * tables. The calling app might have updated them.
      */
  --   getAdjustedPaymentData(x_hookPaymentTab);

     /*IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, x_hookDocsInPmtTab.COUNT
         || ' docs and '
         || x_hookPaymentTab.COUNT || ' payments'
         || ' were read from global temp tables.'
         );
     END IF;*/
     /*
      * The external hook can change document and payment
      * amounts, or change document and payment statuses.
      *
      * However, the external hook should not 'add to' or
      * 'remove from', the documents and payments that were
      * passed to the hook.
      *
      * Check the document and payment count. If the hook
      * has made any changes, the abort the program as it
      * a fatal error.
      */


     SELECT COUNT(PAYMENT_ID)
      INTO l_posthook_count
     FROM IBY_HOOK_PAYMENTS_T
     WHERE
     payment_service_request_id  =
     (select payment_service_request_id
     from iby_pay_service_requests where
     call_app_pay_service_req_code =p_cap_payreq_cd
     );


      IF ( l_posthook_count <> l_prehook_count ) THEN

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Fatal error - Payment '
             || 'count mismatch after hook operation. '
             || '# payments passed to hook: '
             || l_prehook_count
             || ', # payments returning from hook: '
             ||  l_posthook_count,
             FND_LOG.LEVEL_UNEXPECTED
             );

         print_debuginfo(l_module_name, 'Aborting program ..',
             FND_LOG.LEVEL_UNEXPECTED);


	 END IF;

         APP_EXCEPTION.RAISE_EXCEPTION;

     END IF;

     l_docsingt_count :=0;
     SELECT COUNT(*)
     INTO l_docsingt_count
     FROM iby_docs_in_pmt_gt
     WHERE document_status = DOC_STATUS_PAY_CREATED;
     IF (l_DocsInPmtCount <> l_docsingt_count) THEN

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Fatal error - Document '
             || 'count mismatch after hook operation. '
             || '# documents passed to hook: '
             || l_DocsInPmtCount
             || ', # documents returning from hook: '
             || l_docsingt_count,
             FND_LOG.LEVEL_UNEXPECTED
             );

         print_debuginfo(l_module_name, 'Aborting program ..',
             FND_LOG.LEVEL_UNEXPECTED);


 END IF;
         APP_EXCEPTION.RAISE_EXCEPTION;

     END IF;

     /*
      * Diff the pre-hook and post-hook structures and log
      * the values that were changed by the hook.
      */

     /*
      * Ideally, when the calling app sets the 'dont pay flag'
      * for a payment, it should also do the following:
      *
      * 1. Set payment amount to zero.
      *
      * 2. Set 'dont pay flag' for all docs that were part of
      *    this payment.
      *
      * But the calling app does not do (1) and (2). Instead these
      * steps are handled by the build program (to make life simpler
      * for the calling app).
      *
      * The loop below handles these steps.
      */

      UPDATE iby_hook_docs_in_pmt_t
      SET dont_pay_flag = 'Y'
      WHERE payment_id IN (select payment_id from iby_hook_payments_t where dont_pay_flag  = 'Y');




      print_debuginfo(l_module_name, 'After updating iby_hook_docs_in_pmt' );


	 /*
	 OPEN check_hook_pmt;
	  LOOP
	    FETCH check_hook_pmt INTO pmt_id, pmt_amt;

	    EXIT WHEN check_hook_pmt%NOTFOUND;
	    print_debuginfo(l_module_name, 'pmt_id-'|| pmt_id || 'pmt_amt-'|| pmt_amt);

	  END LOOP;
	  CLOSE check_hook_pmt;
	 */


         /* Copy all the data changed by calling app into IBY_PAYMENTS_ALL table */

	/*
	UPDATE IBY_PAYMENTS_ALL A
	SET (PAYMENT_AMOUNT, DISCOUNT_AMOUNT_TAKEN, bank_charge_amount)
	=
	(SELECT NVL(B.PAYMENT_AMOUNT,PAYMENT_AMOUNT),B.DISCOUNT_AMOUNT_TAKEN,B.bank_charge_amount
	from IBY_HOOK_PAYMENTS_T B
	where A.PAYMENT_ID= B.PAYMENT_ID)
	;*/


	/*

	UPDATE IBY_PAYMENTS_ALL A
	SET PAYMENT_AMOUNT = (SELECT B.PAYMENT_AMOUNT
	from IBY_HOOK_PAYMENTS_T B
	where A.PAYMENT_ID= B.PAYMENT_ID);
	*/

	/*
	UPDATE IBY_PAYMENTS_ALL A
	SET
	DISCOUNT_AMOUNT_TAKEN= 	(SELECT B.DISCOUNT_AMOUNT_TAKEN
	from IBY_HOOK_PAYMENTS_T B
	where A.PAYMENT_ID= B.PAYMENT_ID),
	bank_charge_amount =  (SELECT B.bank_charge_amount
	from IBY_HOOK_PAYMENTS_T B
	where A.PAYMENT_ID= B.PAYMENT_ID)
	; */

	    MERGE /*+ leading(ihp) */
	    INTO IBY_PAYMENTS_ALL ibpa
	    USING IBY_HOOK_PAYMENTS_T ihp ON(ibpa.payment_id = ihp.payment_id
	    AND ibpa.payment_service_request_id = ihp.payment_service_request_id)
	    WHEN MATCHED THEN UPDATE
	    SET ibpa.PAYMENT_AMOUNT = ihp.PAYMENT_AMOUNT,
	    ibpa.DISCOUNT_AMOUNT_TAKEN = ihp.DISCOUNT_AMOUNT_TAKEN,
	    ibpa.bank_charge_amount = ihp.bank_charge_amount;


	/*
	UPDATE IBY_PAYMENTS_ALL A
        SET PAYMENT_STATUS =
	(SELECT PAY_STATUS_CA_FAILED FROM
	IBY_HOOK_PAYMENTS_T B
	WHERE A.PAYMENT_ID= B.PAYMENT_ID AND
        B.DONT_PAY_FLAG ='Y')
	;
        */

      	MERGE /*+ leading(ihp)*/
        INTO IBY_PAYMENTS_ALL ibpa
        USING IBY_HOOK_PAYMENTS_T ihp ON(ibpa.payment_id = ihp.payment_id
        AND ibpa.payment_service_request_id = ihp.payment_service_request_id
	AND ihp.DONT_PAY_FLAG ='Y')
        WHEN MATCHED THEN UPDATE
	SET ibpa.PAYMENT_STATUS = PAY_STATUS_CA_FAILED
        ;



	print_debuginfo(l_module_name, 'After updating payments_all for payment_status' );
	OPEN  c_hook_pmts;
	FETCH c_hook_pmts BULK COLLECT INTO hookPmtsTab;
	CLOSE c_hook_pmts;


        FOR j in hookPmtsTab.FIRST .. hookPmtsTab.LAST LOOP
      print_debuginfo(l_module_name, 'Inside loop' );

          select payment_amount
          into l_hook_pmt_amt
          from iby_hook_payments_t
          where payment_id = hookPmtsTab(j).payment_id;
          IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                    print_debuginfo(l_module_name, 'Hook Payment Amount: '
                             || l_hook_pmt_amt
                             || ' has been retrieved in PostHook Process');
          END IF;
          select payment_amount
          into l_pmt_amt
          from iby_payments_all
          where payment_id = hookPmtsTab(j).payment_id;
          IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                    print_debuginfo(l_module_name, 'Payment Amount: '
                             || l_hook_pmt_amt
                             || ' has been retrieved in PostHook Process');
          END IF;

          FOR p_trx_cbr_index IN nvl(IBY_PAYGROUP_PUB.pmtTable.payment_id.FIRST,0) .. nvl(IBY_PAYGROUP_PUB.pmtTable.payment_id.LAST,-99)
          LOOP
              IF(IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_cbr_index) = hookPmtsTab(j).payment_id) THEN
              l_trx_cbr_index := p_trx_cbr_index;
              END IF;
          END LOOP;

          IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                                                    print_debuginfo(l_module_name,
                                                       'For payment id '
                                                       || IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_cbr_index)
                                                       || ', orig payment amount: '
                                                       || IBY_PAYGROUP_PUB.pmtTable.payment_amount(l_trx_cbr_index));
          END IF;

          IBY_PAYGROUP_PUB.pmtTable.payment_amount(l_trx_cbr_index) := hookPmtsTab(j).payment_amount;
	  IBY_PAYGROUP_PUB.pmtTable.discount_amount_taken(l_trx_cbr_index) := hookPmtsTab(j).discount_amount_taken;
	  IBY_PAYGROUP_PUB.pmtTable.bank_charge_amount(l_trx_cbr_index) := hookPmtsTab(j).bank_charge_amount;

          IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                                                    print_debuginfo(l_module_name,
                                                       'For payment id '
                                                       || IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_cbr_index)
                                                       || ', Updated payment amount: '
                                                       || IBY_PAYGROUP_PUB.pmtTable.payment_amount(l_trx_cbr_index));
          END IF;
            /*
                  * Adjust payment status if necessary.
                  */
                 IF (UPPER(hookPmtsTab(j).dont_pay_flag) = 'Y') THEN

                 --  x_paymentTab(j).payment_status := PAY_STATUS_CA_FAILED;

		 /*
		 UPDATE IBY_PAYMENTS_ALL
		 SET PAYMENT_STATUS = PAY_STATUS_CA_FAILED
		 WHERE PAYMENT_ID = hookPmtsTab(j).payment_id;
		 */


                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		print_debuginfo(l_module_name, 'Payment '
                         || hookPmtsTab(j).payment_id
                         || ' was failed by calling app.');
		     END IF;
                     /*
                      * Once we fail a payment, we need to create
                      * an error record and insert this record
                      * into the errors table.
                      */
                     IBY_BUILD_UTILS_PKG.createErrorRecord(
                         TRXN_TYPE_PMT,
                         hookPmtsTab(j).payment_id,
                         PAY_STATUS_CA_FAILED,
                         NULL,
                         hookPmtsTab(j).payment_id,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         l_doc_err_rec,
                         x_errTokenTab
                         );

                 IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                     l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                 /* fail the docs of this payment */
                 failDocsOfPayment(hookPmtsTab(j).payment_id,
                     DOC_STATUS_PAY_VAL_FAIL,
                     x_docErrorTab, x_errTokenTab);

                 END IF;


	END LOOP;



     print_debuginfo(l_module_name, 'Before merge.. ' );

    MERGE
    INTO iby_docs_in_pmt_gt idpa
    USING iby_hook_docs_in_pmt_t idpt ON(idpt.document_payable_id = idpa.document_payable_id)
    WHEN MATCHED THEN UPDATE
    SET idpa.document_amount = idpt.document_amount,
    idpa.amount_withheld = idpt.amount_withheld,
    idpa.payment_curr_discount_taken = idpt.payment_curr_discount_taken;

     OPEN c_fail_docs_of_payment;
     FETCH c_fail_docs_of_payment BULK COLLECT INTO l_fail_dop_tbl;
     CLOSE c_fail_docs_of_payment;
     /*
      * Loop through docs, failing the ones that have the
      * have given payment id.
      */

      print_debuginfo(l_module_name, 'Before updating the GT table' );

      UPDATE iby_docs_in_pmt_gt idpa
         SET idpa.document_status = DOC_STATUS_CA_FAILED
         WHERE idpa.document_payable_id IN (SELECT document_payable_id from iby_hook_docs_in_pmt_t idpt
                                       WHERE idpt.dont_pay_flag = 'Y');

     IF (l_fail_dop_tbl.COUNT > 0 ) THEN

     FOR j in  l_fail_dop_tbl.FIRST ..  l_fail_dop_tbl.LAST LOOP

                     /*
                      * Once we fail a doc, we must add a corresponding
                      * error message to the error table.
                      */
                     IBY_BUILD_UTILS_PKG.createErrorRecord(
                         TRXN_TYPE_DOC,
                         l_fail_dop_tbl(j).document_payable_id,
                         l_fail_dop_tbl(j).document_status,
                         l_fail_dop_tbl(j).calling_app_id,
                         l_fail_dop_tbl(j).calling_app_doc_unique_ref1,
                         l_fail_dop_tbl(j).calling_app_doc_unique_ref2,
                         l_fail_dop_tbl(j).calling_app_doc_unique_ref3,
                         l_fail_dop_tbl(j).calling_app_doc_unique_ref4,
                         l_fail_dop_tbl(j).calling_app_doc_unique_ref5,
                         l_fail_dop_tbl(j).pay_proc_trxn_type_code,
                         l_doc_err_rec,
                         x_errTokenTab
                         );

                     IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                         l_doc_err_rec, x_docErrorTab, x_errTokenTab);

     END LOOP;
   END IF; -- IF (l_fail_dop_tbl.COUNT > 0 )
     /*
      * STEP 2:
      *
      * The external app may not wish to pay certain documents.
      * For such cases, make sure to fail the sister docs that are
      * related to this document via the 'payment grouping number'.
      * Each time a sister doc is failed, adjust the payment amount
      * of the payment that contains this document to reflect this.
      */
    adjustSisterDocsAndPmtsPost(
	 --x_paymentTab,
         x_docErrorTab,
	 x_errTokenTab);

     print_debuginfo(l_module_name, 'EXIT');

 END performPostHookProcess;

/*--------------------------------------------------------------------
 | NAME:
 |     adjustSisterDocsAndPmts
 |
 | PURPOSE:
 |     If payment fails validation, then all it's constituent documents
 |     must also be failed. This is done in the validation flow itself.
 |
 |     However, one document may be related to another document by the
 |     payment grouping number. All related documents must be failed together.
 |     Therefore, if a document is failed in a payment, we must scan
 |     all payments for it's related documents and fail them also.
 |     Further, when a document is failed, the amount on the payment
 |     must be reduced accordingly.
 |
 |     This method handles such cascade failures.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE adjustSisterDocsAndPmts(
     x_paymentTab     IN OUT NOCOPY paymentTabType,
     x_docsInPmtTab   IN OUT NOCOPY docsInPaymentTabType,
     x_docErrorTab    IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.docErrorTabType,
     x_errTokenTab    IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.trxnErrTokenTabType
     )
 IS

 l_doc_err_rec   IBY_TRANSACTION_ERRORS%ROWTYPE;

 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.adjustSisterDocsAndPmts';

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     IF (x_docsInPmtTab.COUNT > 0) THEN
     FOR i in x_docsInPmtTab.FIRST ..  x_docsInPmtTab.LAST LOOP

         /*
          * The loop below implements logic for cascade failure of documents.
          * Cascade failure occurs when one doc is failed for some reason,
          * and so, it's related docs must also be failed.
          *
          * We enter this loop looking for documents that are:
          * a. Failed for some reason
          * b. Not already failed by cascade failure
          *
          * Condition (b) is important otherwise, a doc that has been failed
          * by cascade earlier will continue to trigger off another round
          * of cascade failures. This cyclic effect is prevented by (b).
          */
         IF (x_docsInPmtTab(i).document_status <> DOC_STATUS_PAY_CREATED AND
             x_docsInPmtTab(i).document_status <> DOC_STATUS_RELN_FAIL  AND
	     x_docsInPmtTab(i).payment_grp_num IS NOT NULL)
             THEN

             FOR j in x_docsInPmtTab.FIRST ..  x_docsInPmtTab.LAST LOOP

                 /*
                  * For all documents which share this 'payment grouping
                  * number' do:
                  *
                  * a. Set the doc to 'failed' status
                  *
                  * b. Adjust the payment total on the
                  *    payment which contained this
                  *    document.
                  *
                  * Note: Take care to skip the triggering doc itself
                  * from this loop because this doc is already in
                  * failed status and the payment amount already adjusted.
                  */

                 /* skip the triggering doc */
                 IF (x_docsInPmtTab(i).document_id <>
                     x_docsInPmtTab(j).document_id) THEN

                     /*
                      * skip docs that we have already failed in an
                      * earlier iteration of this loop
                      */
                     IF (x_docsInPmtTab(j).document_status <>
                         DOC_STATUS_RELN_FAIL) THEN

                         IF (x_docsInPmtTab(i).payment_grp_num =
                             x_docsInPmtTab(j).payment_grp_num) THEN

                             /* a. fail document */
                             x_docsInPmtTab(j).document_status
                                 := DOC_STATUS_RELN_FAIL;

                             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Cascaded doc '
                                 || 'failure: '
                                 || x_docsInPmtTab(i).document_id
                                 || ' -> '
                                 || x_docsInPmtTab(j).document_id
                                 || '. Related by '
                                 || x_docsInPmtTab(i).payment_grp_num
                                 || '.'
                                 );
			     END IF;
                             /*
                              * Once we fail a doc, we must add a corresponding
                              * error message to the error table.
                              */
                             IBY_BUILD_UTILS_PKG.createErrorRecord(
                                 TRXN_TYPE_DOC,
                                 x_docsInPmtTab(j).document_id,
                                 x_docsInPmtTab(j).document_status,
                                 x_docsInPmtTab(j).calling_app_id,
                                 x_docsInPmtTab(j).calling_app_doc_id1,
                                 x_docsInPmtTab(j).calling_app_doc_id2,
                                 x_docsInPmtTab(j).calling_app_doc_id3,
                                 x_docsInPmtTab(j).calling_app_doc_id4,
                                 x_docsInPmtTab(j).calling_app_doc_id5,
                                 x_docsInPmtTab(j).pay_proc_ttype_cd,
                                 l_doc_err_rec,
                                 x_errTokenTab
                                 );

                             IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                                 l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                             /* b. adjust payment amount */
                             FOR k in x_paymentTab.FIRST ..  x_paymentTab.LAST
                                 LOOP

                                 IF (x_paymentTab(k).payment_id =
                                     x_docsInPmtTab(j).payment_id) THEN

                                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name,
                                         'For payment id '
                                         || x_paymentTab(k).payment_id
                                         || ', orig payment amount: '
                                         || x_paymentTab(k).payment_amount);
				     END IF;

                                     x_paymentTab(k).payment_amount :=
                                         x_paymentTab(k).payment_amount
                                             - x_docsInPmtTab(j).
                                                   document_amount;

                                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Payment'
                                         || ' amount reduced by '
                                         || x_docsInPmtTab(j).document_amount
                                         || '. New payment amount: '
                                         || x_paymentTab(k).payment_amount);
				     END IF;
                                     /*
                                      * If we have adjusted the payment amount
                                      * in the if-condition we can exit the
                                      * loop.
                                      */
                                     EXIT WHEN (1=1);

                                 END IF;

                             END LOOP; -- loop for adjusting payment amount

                         END IF;

                     END IF;

                 END IF;

             END LOOP; -- loop for scanning sister documents

         END IF;

     END LOOP; -- loop through all documents looking for failed docs
     END IF; -- if document count > 0

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'EXIT');
     end if;
 END adjustSisterDocsAndPmts;


/*--------------------------------------------------------------------
 | NAME:
 |     adjustSisterDocsAndPmts
 |
 | PURPOSE:
 |     If payment fails validation, then all it's constituent documents
 |     must also be failed. This is done in the validation flow itself.
 |
 |     However, one document may be related to another document by the
 |     payment grouping number. All related documents must be failed together.
 |     Therefore, if a document is failed in a payment, we must scan
 |     all payments for it's related documents and fail them also.
 |     Further, when a document is failed, the amount on the payment
 |     must be reduced accordingly.
 |
 |     This method handles such cascade failures.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE adjustSisterDocsAndPmts(
--     x_paymentTab     IN OUT NOCOPY paymentTabType,
--     x_docsInPmtTab   IN OUT NOCOPY docsInPaymentTabType,
     x_docErrorTab    IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.docErrorTabType,
     x_errTokenTab    IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.trxnErrTokenTabType
     )
 IS

 l_doc_err_rec   IBY_TRANSACTION_ERRORS%ROWTYPE;

 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.adjustSisterDocsAndPmts';

 l_document_amount IBY_DOCS_PAYABLE_ALL.document_amount%TYPE;

 l_payment_id_indx IBY_DOCS_PAYABLE_ALL.payment_id%TYPE;

 l_prev_payment_grp_num     IBY_DOCS_PAYABLE_ALL.payment_grouping_number%TYPE;



CURSOR c_adjust_sdap IS
SELECT idpt.payment_id,
   idpt.document_payable_id,
   idpt.document_status,
   idpt.calling_app_id,
   idpt.calling_app_doc_unique_ref1,
   idpt.calling_app_doc_unique_ref2,
   idpt.calling_app_doc_unique_ref3,
   idpt.calling_app_doc_unique_ref4,
   idpt.calling_app_doc_unique_ref5,
   idpt.pay_proc_trxn_type_code,
   idpt.document_amount,
   idpt.payment_grouping_number
FROM iby_docs_in_pmt_gt idpt
WHERE idpt.payment_grouping_number  IS NOT NULL
    AND idpt.document_status <> DOC_STATUS_RELN_FAIL
    AND EXISTS (SELECT 1 FROM iby_docs_in_pmt_gt idpit WHERE idpit.payment_grouping_number  IS NOT NULL
                AND idpit.payment_grouping_number = idpt.payment_grouping_number
                AND idpit.document_status <> DOC_STATUS_PAY_CREATED
                AND idpit.document_status <> DOC_STATUS_RELN_FAIL)
ORDER BY idpt.payment_grouping_number, idpt.payment_id;

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'ENTER');
     END IF;

     OPEN c_adjust_sdap;
     FETCH c_adjust_sdap BULK COLLECT INTO l_fail_dop_tbl;
     CLOSE c_adjust_sdap;


     print_debuginfo(l_module_name, 'After fetching the data from GTT into l_fail_dop_tbl');

     /*
      * Loop through docs, failing the ones that have the
      * have given payment id.
      */
     l_prev_payment_grp_num := null;
     l_document_amount := null;

      print_debuginfo(l_module_name, 'After assigning null values');
     -- print_debuginfo(l_module_name,' count of x_paymentTab' || x_paymentTab.COUNT);
      print_debuginfo(l_module_name,' count of l_fail_dop_tbl' || l_fail_dop_tbl.COUNT);


     IF ( l_fail_dop_tbl.COUNT > 0 ) THEN

     FOR j in l_fail_dop_tbl.FIRST .. l_fail_dop_tbl.LAST LOOP
          print_debuginfo(l_module_name, 'l_fail_dop_tbl(j).payment_id -'||l_fail_dop_tbl(j).payment_id);

	  IF(l_fail_dop_tbl(j).payment_id IS NOT NULL) THEN
                   print_debuginfo(l_module_name, 'inside if payment_id is not null');
              l_payment_id_indx := l_fail_dop_tbl(j).payment_id;

            IF(sdap_tbl.EXISTS(l_payment_id_indx)) THEN
                   print_debuginfo(l_module_name, 'inside if sdap_tbl exists(index)');

                IF(l_fail_dop_tbl(j).document_status = DOC_STATUS_PAY_CREATED) THEN
                   --l_document_amount = l_fail_dop_tbl(j).document_amount;
                  print_debuginfo(l_module_name, 'inside if l_fail_dop_tbl(j) status - created');
                  sdap_tbl(l_fail_dop_tbl(j).payment_id) := sdap_tbl(l_fail_dop_tbl(j).payment_id) + l_fail_dop_tbl(j).document_amount;
                END IF;

                IF(l_fail_dop_tbl(j).payment_grouping_number <> l_prev_payment_grp_num) THEN

                     UPDATE iby_docs_in_pmt_gt idipt
                     SET idipt.document_status = DOC_STATUS_RELN_FAIL
                     WHERE idipt.payment_grouping_number = l_fail_dop_tbl(j).payment_grouping_number
                     AND idipt.document_status = DOC_STATUS_PAY_CREATED;
                print_debuginfo(l_module_name, 'after updation of the GTT with reln_fail');
                END IF;

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Updated docs '
                                         || 'failure: '
                                         || '. Related by '
                                         || l_fail_dop_tbl(j).payment_grouping_number
                                         || '.'
                                         );
                    END IF;

                             /*
                              * Once we fail a doc, we must add a corresponding
                              * error message to the error table.
                              */
                             IBY_BUILD_UTILS_PKG.createErrorRecord(
                             TRXN_TYPE_DOC,
                             l_fail_dop_tbl(j).document_payable_id,
                             l_fail_dop_tbl(j).document_status,
                             l_fail_dop_tbl(j).calling_app_id,
                             l_fail_dop_tbl(j).calling_app_doc_unique_ref1,
                             l_fail_dop_tbl(j).calling_app_doc_unique_ref2,
                             l_fail_dop_tbl(j).calling_app_doc_unique_ref3,
                             l_fail_dop_tbl(j).calling_app_doc_unique_ref4,
                             l_fail_dop_tbl(j).calling_app_doc_unique_ref5,
                             l_fail_dop_tbl(j).pay_proc_trxn_type_code,
                             l_doc_err_rec,
                             x_errTokenTab
                             );

                             IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                                 l_doc_err_rec, x_docErrorTab, x_errTokenTab);



                     --sdap_tbl.(l_fail_dop_tbl(j).payment_id) := l_fail_dop_tbl(j).payment_id;
                     --sdap_tbl.(l_payment_id_indx) = l_fail_dop_tbl(j).payment_id;
             END IF;

        END IF;
        print_debuginfo(l_module_name, 'After end if for checking if pmt id is not null' );

                    l_prev_payment_grp_num := l_fail_dop_tbl(j).payment_grouping_number;

	 print_debuginfo(l_module_name, 'After assigning the pmt grp number to l_prev_pmt_grp');

     END LOOP;

     END IF; -- end of check if count > 0


     /* b. adjust payment amount */

     print_debuginfo(l_module_name, 'After the loop, before iterating through pmts table');

                        --     FOR k in x_paymentTab.FIRST ..  x_paymentTab.LAST
                               FOR k IN nvl(IBY_PAYGROUP_PUB.pmtTable.payment_id.FIRST,0) .. nvl(IBY_PAYGROUP_PUB.pmtTable.payment_id.LAST,-99)
                                 LOOP
                                 print_debuginfo(l_module_name, 'Inside the loop - x_PaymentTab');
                                    IF(sdap_tbl.EXISTS(IBY_PAYGROUP_PUB.pmtTable.payment_id(k))) THEN

                                                   IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                                                    print_debuginfo(l_module_name,
                                                       'For payment id '
                                                       || IBY_PAYGROUP_PUB.pmtTable.payment_id(k)
                                                       || ', orig payment amount: '
                                                       || IBY_PAYGROUP_PUB.pmtTable.payment_amount(k));
                                                   END IF;

                                               IBY_PAYGROUP_PUB.pmtTable.payment_amount(k) :=
                                                   IBY_PAYGROUP_PUB.pmtTable.payment_amount(k)
                                                       - sdap_tbl(IBY_PAYGROUP_PUB.pmtTable.payment_id(k));
			        print_debuginfo(l_module_name, 'After changing the payment amount');
                                               IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                                                print_debuginfo(l_module_name, 'Payment'
                                                   || ' amount reduced by '
                                                   || sdap_tbl(IBY_PAYGROUP_PUB.pmtTable.payment_id(k))
                                                   || '. New payment amount: '
                                                   || IBY_PAYGROUP_PUB.pmtTable.payment_amount(k));
                                               END IF;
                                     END IF;

                             END LOOP; -- loop for adjusting payment amount

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'EXIT');
     end if;
 END adjustSisterDocsAndPmts;


   /*--------------------------------------------------------------------
 | NAME:
 |     adjustSisterDocsAndPmtsPost
 |
 | PURPOSE:
 |     To be called from PostHookProcess
 |     If payment fails validation, then all it's constituent documents
 |     must also be failed. This is done in the validation flow itself.
 |
 |     However, one document may be related to another document by the
 |     payment grouping number. All related documents must be failed together.
 |     Therefore, if a document is failed in a payment, we must scan
 |     all payments for it's related documents and fail them also.
 |     Further, when a document is failed, the amount on the payment
 |     must be reduced accordingly.
 |
 |     This method handles such cascade failures.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE adjustSisterDocsAndPmtsPost(
--     x_paymentTab     IN OUT NOCOPY paymentTabType,
--     x_docsInPmtTab   IN OUT NOCOPY docsInPaymentTabType,
     x_docErrorTab    IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.docErrorTabType,
     x_errTokenTab    IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.trxnErrTokenTabType
     )
 IS

 l_doc_err_rec   IBY_TRANSACTION_ERRORS%ROWTYPE;

 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.adjustSisterDocsAndPmtsPost';

 l_document_amount IBY_DOCS_PAYABLE_ALL.document_amount%TYPE;

 l_payment_id_indx IBY_DOCS_PAYABLE_ALL.payment_id%TYPE;

 l_prev_payment_grp_num     IBY_DOCS_PAYABLE_ALL.payment_grouping_number%TYPE;



CURSOR c_adjust_sdap IS
SELECT idpt.payment_id,
   idpt.document_payable_id,
   idpt.document_status,
   idpt.calling_app_id,
   idpt.calling_app_doc_unique_ref1,
   idpt.calling_app_doc_unique_ref2,
   idpt.calling_app_doc_unique_ref3,
   idpt.calling_app_doc_unique_ref4,
   idpt.calling_app_doc_unique_ref5,
   idpt.pay_proc_trxn_type_code,
   idpt.document_amount,
   idpt.payment_grouping_number
FROM iby_docs_in_pmt_gt idpt
WHERE idpt.payment_grouping_number  IS NOT NULL
    AND idpt.document_status <> DOC_STATUS_RELN_FAIL
    AND EXISTS (SELECT 1 FROM iby_docs_in_pmt_gt idpit WHERE idpit.payment_grouping_number  IS NOT NULL
                AND idpit.payment_grouping_number = idpt.payment_grouping_number
                AND idpit.document_status <> DOC_STATUS_PAY_CREATED
                AND idpit.document_status <> DOC_STATUS_RELN_FAIL)
ORDER BY idpt.payment_grouping_number, idpt.payment_id;


 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'ENTER');
     END IF;

     OPEN c_adjust_sdap;
     FETCH c_adjust_sdap BULK COLLECT INTO l_fail_dop_tbl;
     CLOSE c_adjust_sdap;
     /*
      * Loop through docs, failing the ones that have the
      * have given payment id.
      */
     l_prev_payment_grp_num := null;
     l_document_amount := null;

  IF ( l_fail_dop_tbl.COUNT > 0 ) THEN

     FOR j in  l_fail_dop_tbl.FIRST ..  l_fail_dop_tbl.LAST LOOP

          IF(l_fail_dop_tbl(j).payment_id IS NOT NULL) THEN

              l_payment_id_indx := l_fail_dop_tbl(j).payment_id;

            IF(sdap_tbl.EXISTS(l_payment_id_indx)) THEN

                IF(l_fail_dop_tbl(j).document_status = DOC_STATUS_PAY_CREATED) THEN
                   --l_document_amount = l_fail_dop_tbl(j).document_amount;
                  sdap_tbl(l_fail_dop_tbl(j).payment_id) := sdap_tbl(l_fail_dop_tbl(j).payment_id) + l_fail_dop_tbl(j).document_amount;
                END IF;

                IF(l_fail_dop_tbl(j).payment_grouping_number <> l_prev_payment_grp_num) THEN

                     UPDATE iby_docs_in_pmt_gt idipt
                     SET idipt.document_status = DOC_STATUS_RELN_FAIL
                     WHERE idipt.payment_grouping_number = l_fail_dop_tbl(j).payment_grouping_number
                     AND idipt.document_status = DOC_STATUS_PAY_CREATED;

                END IF;

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Updated docs '
                                         || 'failure: '
                                         || '. Related by '
                                         || l_fail_dop_tbl(j).payment_grouping_number
                                         || '.'
                                         );
                    END IF;

                             /*
                              * Once we fail a doc, we must add a corresponding
                              * error message to the error table.
                              */
                             IBY_BUILD_UTILS_PKG.createErrorRecord(
                             TRXN_TYPE_DOC,
                             l_fail_dop_tbl(j).document_payable_id,
                             l_fail_dop_tbl(j).document_status,
                             l_fail_dop_tbl(j).calling_app_id,
                             l_fail_dop_tbl(j).calling_app_doc_unique_ref1,
                             l_fail_dop_tbl(j).calling_app_doc_unique_ref2,
                             l_fail_dop_tbl(j).calling_app_doc_unique_ref3,
                             l_fail_dop_tbl(j).calling_app_doc_unique_ref4,
                             l_fail_dop_tbl(j).calling_app_doc_unique_ref5,
                             l_fail_dop_tbl(j).pay_proc_trxn_type_code,
                             l_doc_err_rec,
                             x_errTokenTab
                             );

                             IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                                 l_doc_err_rec, x_docErrorTab, x_errTokenTab);



                     --sdap_tbl.(l_fail_dop_tbl(j).payment_id) := l_fail_dop_tbl(j).payment_id;
                     --sdap_tbl.(l_payment_id_indx) = l_fail_dop_tbl(j).payment_id;
             END IF;

        END IF;

                    l_prev_payment_grp_num := l_fail_dop_tbl(j).payment_grouping_number;

     END LOOP; -- loop through all documents looking for failed docs

 END IF; -- end of check if count > 0


     /* b. adjust payment amount */
                             --FOR k in x_paymentTab.FIRST ..  x_paymentTab.LAST
			  /*
			  FOR k IN nvl(IBY_PAYGROUP_PUB.pmtTable.payment_id.FIRST,0) .. nvl(IBY_PAYGROUP_PUB.pmtTable.payment_id.LAST,-99)
                                 LOOP

                                    IF(sdap_tbl.EXISTS(IBY_PAYGROUP_PUB.pmtTable.payment_id(k))) THEN

                                                   IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                                                    print_debuginfo(l_module_name,
                                                       'For payment id '
                                                       || IBY_PAYGROUP_PUB.pmtTable.payment_id(k)
                                                       || ', orig payment amount: '
                                                       || IBY_PAYGROUP_PUB.pmtTable.payment_amount(k));
                                                   END IF;

                                               IBY_PAYGROUP_PUB.pmtTable.payment_amount(k) :=
                                                   IBY_PAYGROUP_PUB.pmtTable.payment_amount(k)
                                                       - sdap_tbl(IBY_PAYGROUP_PUB.pmtTable.payment_id(k));

                                               IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                                                print_debuginfo(l_module_name, 'Payment'
                                                   || ' amount reduced by '
                                                   || sdap_tbl(IBY_PAYGROUP_PUB.pmtTable.payment_id(k))
                                                   || '. New payment amount: '
                                                   || IBY_PAYGROUP_PUB.pmtTable.payment_amount(k));
                                               END IF;
                                     END IF;

                             END LOOP; -- loop for adjusting payment amount

			     */


			  FOR k IN nvl(IBY_PAYGROUP_PUB.pmtTable.payment_id.FIRST,0) .. nvl(IBY_PAYGROUP_PUB.pmtTable.payment_id.LAST,-99)
                                 LOOP

                                    IF(sdap_tbl.EXISTS(IBY_PAYGROUP_PUB.pmtTable.payment_id(k))) THEN

                                                   IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                                                    print_debuginfo(l_module_name,
                                                       'For payment id '
                                                       || IBY_PAYGROUP_PUB.pmtTable.payment_id(k)
                                                       || ', orig payment amount: '
                                                       || IBY_PAYGROUP_PUB.pmtTable.payment_amount(k));
                                                   END IF;

                                             /*  IBY_PAYGROUP_PUB.pmtTable.payment_amount(k) :=
                                                   IBY_PAYGROUP_PUB.pmtTable.payment_amount(k)
                                                       - sdap_tbl(IBY_PAYGROUP_PUB.pmtTable.payment_id(k));
					      */

					      UPDATE IBY_PAYMENTS_ALL
					      SET PAYMENT_AMOUNT = PAYMENT_AMOUNT -
					       sdap_tbl(IBY_PAYGROUP_PUB.pmtTable.payment_id(k))
					      WHERE
					       PAYMENT_ID = IBY_PAYGROUP_PUB.pmtTable.payment_id(k);

                                               IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                                                print_debuginfo(l_module_name, 'Payment'
                                                   || ' amount reduced by '
                                                   || sdap_tbl(IBY_PAYGROUP_PUB.pmtTable.payment_id(k))
                                                   || '. New payment amount: '
                                                   || IBY_PAYGROUP_PUB.pmtTable.payment_amount(k));
                                               END IF;
                                     END IF;

                             END LOOP; -- loop for adjusting payment amount

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'EXIT');
     end if;
 END adjustSisterDocsAndPmtsPost;

/*--------------------------------------------------------------------
 | NAME:
 |     getDocDetails
 |
 | PURPOSE:
 |     Returns the payment details calculated as per given formula on
 |     a given document.
 |
 |     The formula should be a SQL expression involving the attributes
 |     of the document - e.g., 'doc id || doc date'.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 FUNCTION getDocDetails(
     p_documentID         IN NUMBER,
     p_pmtDetailsFormula  IN VARCHAR2
     )
     RETURN VARCHAR2
 IS
 l_module_name      CONSTANT VARCHAR2(200)  := G_PKG_NAME || '.getDocDetails';
 l_calc_doc_details VARCHAR2(2000) := '';
 l_sql_string       VARCHAR2(4000) := '';

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'ENTER');

     END IF;

     l_sql_string := 'SELECT ' || p_pmtDetailsFormula || ' FROM '
                         || 'IBY_DOCS_PAYABLE_ALL WHERE '
                         || 'document_payable_id = :bind_var';

     EXECUTE IMMEDIATE l_sql_string INTO l_calc_doc_details USING p_documentID;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'EXIT');

     END IF;

     RETURN l_calc_doc_details;

 END getDocDetails;

/*--------------------------------------------------------------------
 | NAME:
 |     callHook
 |
 | PURPOSE:
 |     Makes a call to the calling app specific hook. The calling
 |     app is expected to implement the hook using the naming
 |     convention <Application Short Name>_paymentsAdjustHook().
 |
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE callHook(
     p_payreq_id       IN IBY_PAY_SERVICE_REQUESTS.
                              payment_service_request_id%type
     )
 IS

 l_module_name      CONSTANT VARCHAR2(200)  := G_PKG_NAME || '.callHook';
 l_app_short_name   VARCHAR2(200);

 l_pkg_prefix       VARCHAR2(100);
 l_pkg_suffix       VARCHAR2(100) := '_PMT_CALLOUT_PKG';
 l_pkg_name         VARCHAR2(200);

 l_hook_name        VARCHAR2(500);
 l_stmt             VARCHAR2(1000);

 /*
  * Implementing the hook is optional for the calling app.
  * If the calling app does not implement the hook, then
  * the call to the hook will result in ORA-06576 error.
  *
  * There is no exception name associated with this code, so
  * we create one called 'PROCEDURE_NOT_IMPLEMENTED'. If this
  * exception occurs, it is not fatal: we log the error and
  * proceed.
  *
  * If, on the other hand, the calling app implements the
  * hook, but the hook throws an exception, it is fatal
  * and we must abort the program (this will be caught
  * in WHEN OTHERS block).
  */
 PROCEDURE_NOT_IMPLEMENTED EXCEPTION;
 PRAGMA EXCEPTION_INIT(PROCEDURE_NOT_IMPLEMENTED, -6576);

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'ENTER');
        print_debuginfo(l_module_name, 'Provided payment request id: '
         || p_payreq_id);

 END IF;
     /*
      * The hook method implemented by the calling app will
      * of the form:
      * <Application Short Name>_paymentsAdjustHook()
      *
      * First, get the application short name from the calling
      * application id.
      */
     BEGIN

         SELECT
             fnd.application_short_name
         INTO
             l_app_short_name
         FROM
             FND_APPLICATION fnd,
             IBY_PAY_SERVICE_REQUESTS req
         WHERE
             fnd.application_id             = req.calling_app_id AND
             req.payment_service_request_id = p_payreq_id
         ;

     EXCEPTION
         WHEN OTHERS THEN
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		print_debuginfo(l_module_name, 'Fatal: Exception when attempting '
                 || 'to get calling application short name. Provided payment '
                 || 'request id: ' || p_payreq_id, FND_LOG.LEVEL_UNEXPECTED);
                print_debuginfo(l_module_name, 'SQL code: '   || SQLCODE,
                 FND_LOG.LEVEL_UNEXPECTED);
                print_debuginfo(l_module_name, 'SQL err msg: '|| SQLERRM,
                 FND_LOG.LEVEL_UNEXPECTED);

	     END IF;
             /*
              * Propogate exception to caller.
              */
             RAISE;
     END;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'Retrieved app short name: '
         || l_app_short_name);

 END IF;

     /*
      * When we invoke the hook procedure in the external app,
      * we must use the hook signature as <package name>.<procedure name>.
      *
      * For some applications, the application short name cannot
      * be directly used in forming the package name.
      *
      * Example, for AP, the application short name is 'SQLAP',
      * but the AP packages begin as 'AP_XXXX'. Therefore,
      * we will convert the application short names into package
      * prefixes here.
      */
     CASE l_app_short_name
         WHEN 'SQLAP' THEN
             l_pkg_prefix := 'AP';
         ELSE
             l_pkg_prefix := l_app_short_name;
     END CASE;

     l_pkg_name := l_pkg_prefix || l_pkg_suffix;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'Constructed package name: '
         || l_pkg_name);

     END IF;

     /*
      * Now try to call the external app's implementation of the hook.
      * The calling app may or may not have implemented the hook, so
      * it's not fatal if the implementation does not exist.
      */
     l_hook_name := l_pkg_name || '.' || 'paymentsAdjustHook';

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'Attempting to call hook: '
         || l_hook_name);

 END IF;
     l_stmt := 'CALL '|| l_hook_name || '()';

     BEGIN

         EXECUTE IMMEDIATE (l_stmt);

     EXCEPTION

         WHEN PROCEDURE_NOT_IMPLEMENTED THEN
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		print_debuginfo(l_module_name, 'Hook "' || l_hook_name
                 || '" not implemented by calling app '
                 || l_app_short_name || '.');

                print_debuginfo(l_module_name, 'Skipping hook call.');

 END IF;
         WHEN OTHERS THEN
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	     print_debuginfo(l_module_name, 'Fatal: External app hook '''
                 || l_hook_name  || ''', generated exception. Please '
                 || ' contact implementor of hook in product '
                 || l_app_short_name || ' for fix.',
                 FND_LOG.LEVEL_UNEXPECTED);

             print_debuginfo(l_module_name, 'SQL code: '   || SQLCODE,
                 FND_LOG.LEVEL_UNEXPECTED);
             print_debuginfo(l_module_name, 'SQL err msg: '|| SQLERRM,
                 FND_LOG.LEVEL_UNEXPECTED);

 END IF;
             /*
              * Propogate exception to caller.
              */
             RAISE;
     END;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'EXIT');

 END IF;
 END callHook;

/*--------------------------------------------------------------------
 | NAME:
 |     getAdjustedPaymentData
 |
 | PURPOSE:
 |     Reads the data updated in the global temp tables by the calling app.
 |     The calling app would have updated the data when the external
 |     application hook was called. This method reads in the updated
 |     data.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE getAdjustedPaymentData(
     x_hookPaymentTab      IN OUT NOCOPY hookPaymentTabType,
     x_hookDocsInPmtTab    IN OUT NOCOPY hookDocsInPaymentTabType
     )
 IS

 l_module_name  CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                              '.getAdjustedPaymentData';

     TYPE t_calling_app_id IS TABLE OF
     IBY_HOOK_PAYMENTS_T.calling_app_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_call_app_pay_srv_req_code IS TABLE OF
     IBY_HOOK_PAYMENTS_T.call_app_pay_service_req_code%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_payment_service_request_id IS TABLE OF
     IBY_HOOK_PAYMENTS_T.payment_service_request_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_payment_id IS TABLE OF
     IBY_HOOK_PAYMENTS_T.payment_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_payment_amount IS TABLE OF
     IBY_HOOK_PAYMENTS_T.payment_amount%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_payment_currency_code IS TABLE OF
     IBY_HOOK_PAYMENTS_T.payment_currency_code%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_dont_pay_flag IS TABLE OF
     IBY_HOOK_PAYMENTS_T.dont_pay_flag%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_dont_pay_reason_code IS TABLE OF
     IBY_HOOK_PAYMENTS_T.dont_pay_reason_code%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_dont_pay_description IS TABLE OF
     IBY_HOOK_PAYMENTS_T.dont_pay_description%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_internal_bank_account_id IS TABLE OF
     IBY_HOOK_PAYMENTS_T.internal_bank_account_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_ext_payee_id IS TABLE OF
     IBY_HOOK_PAYMENTS_T.ext_payee_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_payee_party_id IS TABLE OF
     IBY_HOOK_PAYMENTS_T.payee_party_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_party_site_id IS TABLE OF
     IBY_HOOK_PAYMENTS_T.party_site_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_supplier_site_id IS TABLE OF
     IBY_HOOK_PAYMENTS_T.supplier_site_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_org_id IS TABLE OF
     IBY_HOOK_PAYMENTS_T.org_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_org_type IS TABLE OF
     IBY_HOOK_PAYMENTS_T.org_type%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_external_bank_account_id IS TABLE OF
     IBY_HOOK_PAYMENTS_T.external_bank_account_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_discount_amount_taken IS TABLE OF
     IBY_HOOK_PAYMENTS_T.discount_amount_taken%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_payment_date IS TABLE OF
     IBY_HOOK_PAYMENTS_T.payment_date%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_bank_charge_amount IS TABLE OF
     IBY_HOOK_PAYMENTS_T.bank_charge_amount%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_created_by IS TABLE OF
     IBY_HOOK_PAYMENTS_T.created_by%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_creation_date IS TABLE OF
     IBY_HOOK_PAYMENTS_T.creation_date%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_last_updated_by IS TABLE OF
     IBY_HOOK_PAYMENTS_T.last_updated_by%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_last_update_date IS TABLE OF
     IBY_HOOK_PAYMENTS_T.last_update_date%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_last_update_login IS TABLE OF
     IBY_HOOK_PAYMENTS_T.last_update_login%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_object_version_number IS TABLE OF
     IBY_HOOK_PAYMENTS_T.object_version_number%TYPE
     INDEX BY BINARY_INTEGER;

    l_calling_app_id                          t_calling_app_id;
    l_call_app_pay_srv_req_code               t_call_app_pay_srv_req_code;
    l_payment_service_request_id              t_payment_service_request_id;
    l_payment_id                              t_payment_id;
    l_payment_amount                          t_payment_amount;
    l_payment_currency_code                   t_payment_currency_code;
    l_dont_pay_flag                           t_dont_pay_flag;
    l_dont_pay_reason_code                    t_dont_pay_reason_code;
    l_dont_pay_description                    t_dont_pay_description;
    l_internal_bank_account_id                t_internal_bank_account_id;
    l_ext_payee_id                            t_ext_payee_id;
    l_payee_party_id                          t_payee_party_id;
    l_party_site_id                           t_party_site_id;
    l_supplier_site_id                        t_supplier_site_id;
    l_org_id                                  t_org_id;
    l_org_type                                t_org_type;
    l_external_bank_account_id                t_external_bank_account_id;
    l_discount_amount_taken                   t_discount_amount_taken;
    l_payment_date                            t_payment_date;
    l_bank_charge_amount                      t_bank_charge_amount;
    l_created_by                              t_created_by;
    l_creation_date                           t_creation_date;
    l_last_updated_by                         t_last_updated_by;
    l_last_update_date                        t_last_update_date;
    l_last_update_login                       t_last_update_login;
    l_object_version_number                   t_object_version_number;


 /* payments cursor */
 CURSOR c_payment_data
 IS
 SELECT
     calling_app_id,
     call_app_pay_service_req_code,
     payment_service_request_id,
     payment_id,
     payment_amount,
     payment_currency_code,
     dont_pay_flag,
     dont_pay_reason_code,
     dont_pay_description,
     internal_bank_account_id,
     ext_payee_id,
     payee_party_id,
     party_site_id,
     supplier_site_id,
     org_id,
     org_type,
     external_bank_account_id,
     discount_amount_taken,
     payment_date,
     bank_charge_amount,
     created_by,
     creation_date,
     last_updated_by,
     last_update_date,
     last_update_login,
     object_version_number
 FROM IBY_HOOK_PAYMENTS_T;

     TYPE ty_payment_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.payment_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_document_payable_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.document_payable_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_calling_app_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_calling_app_doc_unique_ref1 IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_doc_unique_ref1%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_calling_app_doc_unique_ref2 IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_doc_unique_ref2%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_calling_app_doc_unique_ref3 IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_doc_unique_ref3%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_calling_app_doc_unique_ref4 IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_doc_unique_ref4%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_calling_app_doc_unique_ref5 IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_doc_unique_ref5%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_document_amount IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.document_amount%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_document_currency_code IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.document_currency_code%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_amount_withheld IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.amount_withheld%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_dont_pay_flag IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.dont_pay_flag%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_dont_pay_reason_code IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.dont_pay_reason_code%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_dont_pay_description IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.dont_pay_description%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_pay_proc_trxn_type_code IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.pay_proc_trxn_type_code%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_internal_bank_account_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.internal_bank_account_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_ext_payee_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.ext_payee_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_payee_party_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.payee_party_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_party_site_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.party_site_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_supplier_site_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.supplier_site_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_org_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.org_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_org_type IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.org_type%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_external_bank_account_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.external_bank_account_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_payment_curr_discount_taken IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.payment_curr_discount_taken%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_created_by IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.created_by%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_creation_date IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.creation_date%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_last_updated_by IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.last_updated_by%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_last_update_date IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.last_update_date%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_last_update_login IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.last_update_login%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_object_version_number IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.object_version_number%TYPE
     INDEX BY BINARY_INTEGER;


    ll_payment_id                           ty_payment_id;
    ll_document_payable_id                  ty_document_payable_id;
    ll_calling_app_id                       ty_calling_app_id;
    ll_calling_app_doc_unique_ref1          ty_calling_app_doc_unique_ref1;
    ll_calling_app_doc_unique_ref2          ty_calling_app_doc_unique_ref2;
    ll_calling_app_doc_unique_ref3          ty_calling_app_doc_unique_ref3;
    ll_calling_app_doc_unique_ref4          ty_calling_app_doc_unique_ref4;
    ll_calling_app_doc_unique_ref5          ty_calling_app_doc_unique_ref5;
    ll_document_amount                      ty_document_amount;
    ll_document_currency_code               ty_document_currency_code;
    ll_amount_withheld                      ty_amount_withheld;
    ll_dont_pay_flag                        ty_dont_pay_flag;
    ll_dont_pay_reason_code                 ty_dont_pay_reason_code;
    ll_dont_pay_description                 ty_dont_pay_description;
    ll_pay_proc_trxn_type_code              ty_pay_proc_trxn_type_code;
    ll_internal_bank_account_id             ty_internal_bank_account_id;
    ll_ext_payee_id                         ty_ext_payee_id;
    ll_payee_party_id                       ty_payee_party_id;
    ll_party_site_id                        ty_party_site_id;
    ll_supplier_site_id                     ty_supplier_site_id;
    ll_org_id                               ty_org_id;
    ll_org_type                             ty_org_type;
    ll_external_bank_account_id             ty_external_bank_account_id;
    ll_payment_curr_discount_taken          ty_payment_curr_discount_taken;
    ll_created_by                           ty_created_by;
    ll_creation_date                        ty_creation_date;
    ll_last_updated_by                      ty_last_updated_by;
    ll_last_update_date                     ty_last_update_date;
    ll_last_update_login                    ty_last_update_login;
    ll_object_version_number                ty_object_version_number;


 /* documents cursor */
 CURSOR c_document_data
 IS
 SELECT
     payment_id,
     document_payable_id,
     calling_app_id,
     calling_app_doc_unique_ref1,
     calling_app_doc_unique_ref2,
     calling_app_doc_unique_ref3,
     calling_app_doc_unique_ref4,
     calling_app_doc_unique_ref5,
     document_amount,
     document_currency_code,
     amount_withheld,
     dont_pay_flag,
     dont_pay_reason_code,
     dont_pay_description,
     pay_proc_trxn_type_code,
     internal_bank_account_id,
     ext_payee_id,
     payee_party_id,
     party_site_id,
     supplier_site_id,
     org_id,
     org_type,
     external_bank_account_id,
     payment_curr_discount_taken,
     created_by,
     creation_date,
     last_updated_by,
     last_update_date,
     last_update_login,
     object_version_number
 FROM IBY_HOOK_DOCS_IN_PMT_T
 ORDER BY document_payable_id;

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Fetching data '
         || 'from global temp tables');

     END IF;
     /*
      * Read in the payments and documents from the global
      * temp tables and store them into data structures.
      */
     OPEN  c_payment_data;
     FETCH c_payment_data BULK COLLECT INTO
         l_calling_app_id,
         l_call_app_pay_srv_req_code,
         l_payment_service_request_id,
         l_payment_id,
         l_payment_amount,
         l_payment_currency_code,
         l_dont_pay_flag,
         l_dont_pay_reason_code,
         l_dont_pay_description,
         l_internal_bank_account_id,
         l_ext_payee_id,
         l_payee_party_id,
         l_party_site_id,
         l_supplier_site_id,
         l_org_id,
         l_org_type,
         l_external_bank_account_id,
         l_discount_amount_taken,
         l_payment_date,
         l_bank_charge_amount,
         l_created_by,
         l_creation_date,
         l_last_updated_by,
         l_last_update_date,
         l_last_update_login,
         l_object_version_number
         ;
     CLOSE c_payment_data;

     IF (l_calling_app_id.COUNT <> 0) THEN
         FOR i IN l_calling_app_id.FIRST .. l_calling_app_id.LAST LOOP
             x_hookPaymentTab(i).calling_app_id :=
                 l_calling_app_id(i);
             x_hookPaymentTab(i).call_app_pay_service_req_code :=
                 l_call_app_pay_srv_req_code(i);
             x_hookPaymentTab(i).payment_service_request_id :=
                 l_payment_service_request_id(i);
             x_hookPaymentTab(i).payment_id :=
                 l_payment_id(i);
             x_hookPaymentTab(i).payment_amount :=
                 l_payment_amount(i);
             x_hookPaymentTab(i).payment_currency_code :=
                 l_payment_currency_code(i);
             x_hookPaymentTab(i).dont_pay_flag :=
                 l_dont_pay_flag(i);
             x_hookPaymentTab(i).dont_pay_reason_code :=
                 l_dont_pay_reason_code(i);
             x_hookPaymentTab(i).dont_pay_description :=
                 l_dont_pay_description(i);
             x_hookPaymentTab(i).internal_bank_account_id :=
                 l_internal_bank_account_id(i);
             x_hookPaymentTab(i).ext_payee_id :=
                 l_ext_payee_id(i);
             x_hookPaymentTab(i).payee_party_id :=
                 l_payee_party_id(i);
             x_hookPaymentTab(i).party_site_id :=
                 l_party_site_id(i);
             x_hookPaymentTab(i).supplier_site_id :=
                 l_supplier_site_id(i);
             x_hookPaymentTab(i).org_id :=
                 l_org_id(i);
             x_hookPaymentTab(i).org_type :=
                 l_org_type(i);
             x_hookPaymentTab(i).external_bank_account_id :=
                 l_external_bank_account_id(i);
             x_hookPaymentTab(i).discount_amount_taken :=
                 l_discount_amount_taken(i);
             x_hookPaymentTab(i).payment_date :=
                 l_payment_date(i);
             x_hookPaymentTab(i).bank_charge_amount :=
                 l_bank_charge_amount(i);
             x_hookPaymentTab(i).created_by :=
                 l_created_by(i);
             x_hookPaymentTab(i).creation_date :=
                 l_creation_date(i);
             x_hookPaymentTab(i).last_updated_by :=
                 l_last_updated_by(i);
             x_hookPaymentTab(i).last_update_date :=
                 l_last_update_date(i);
             x_hookPaymentTab(i).last_update_login :=
                 l_last_update_login(i);
             x_hookPaymentTab(i).object_version_number :=
                 l_object_version_number(i);
         END LOOP;
     END IF;

     OPEN  c_document_data;
     FETCH c_document_data BULK COLLECT INTO
         ll_payment_id,
         ll_document_payable_id,
         ll_calling_app_id,
         ll_calling_app_doc_unique_ref1,
         ll_calling_app_doc_unique_ref2,
         ll_calling_app_doc_unique_ref3,
         ll_calling_app_doc_unique_ref4,
         ll_calling_app_doc_unique_ref5,
         ll_document_amount,
         ll_document_currency_code,
         ll_amount_withheld,
         ll_dont_pay_flag,
         ll_dont_pay_reason_code,
         ll_dont_pay_description,
         ll_pay_proc_trxn_type_code,
         ll_internal_bank_account_id,
         ll_ext_payee_id,
         ll_payee_party_id,
         ll_party_site_id,
         ll_supplier_site_id,
         ll_org_id,
         ll_org_type,
         ll_external_bank_account_id,
         ll_payment_curr_discount_taken,
         ll_created_by,
         ll_creation_date,
         ll_last_updated_by,
         ll_last_update_date,
         ll_last_update_login,
         ll_object_version_number
         ;
     CLOSE c_document_data;

     IF (ll_payment_id.COUNT <> 0) THEN
         FOR i IN ll_payment_id.FIRST .. ll_payment_id.LAST LOOP
         x_hookDocsInPmtTab(i).payment_id :=
             ll_payment_id(i);
         x_hookDocsInPmtTab(i).document_payable_id :=
             ll_document_payable_id(i);
         x_hookDocsInPmtTab(i).calling_app_id :=
             ll_calling_app_id(i);
         x_hookDocsInPmtTab(i).calling_app_doc_unique_ref1 :=
             ll_calling_app_doc_unique_ref1(i);
         x_hookDocsInPmtTab(i).calling_app_doc_unique_ref2 :=
             ll_calling_app_doc_unique_ref2(i);
         x_hookDocsInPmtTab(i).calling_app_doc_unique_ref3 :=
             ll_calling_app_doc_unique_ref3(i);
         x_hookDocsInPmtTab(i).calling_app_doc_unique_ref4 :=
             ll_calling_app_doc_unique_ref4(i);
         x_hookDocsInPmtTab(i).calling_app_doc_unique_ref5 :=
             ll_calling_app_doc_unique_ref5(i);
         x_hookDocsInPmtTab(i).document_amount :=
             ll_document_amount(i);
         x_hookDocsInPmtTab(i).document_currency_code :=
             ll_document_currency_code(i);
         x_hookDocsInPmtTab(i).amount_withheld :=
             ll_amount_withheld(i);
         x_hookDocsInPmtTab(i).dont_pay_flag :=
             ll_dont_pay_flag(i);
         x_hookDocsInPmtTab(i).dont_pay_reason_code :=
             ll_dont_pay_reason_code(i);
         x_hookDocsInPmtTab(i).dont_pay_description :=
             ll_dont_pay_description(i);
         x_hookDocsInPmtTab(i).pay_proc_trxn_type_code :=
             ll_pay_proc_trxn_type_code(i);
         x_hookDocsInPmtTab(i).internal_bank_account_id :=
             ll_internal_bank_account_id(i);
         x_hookDocsInPmtTab(i).ext_payee_id :=
             ll_ext_payee_id(i);
         x_hookDocsInPmtTab(i).payee_party_id :=
             ll_payee_party_id(i);
         x_hookDocsInPmtTab(i).party_site_id :=
             ll_party_site_id(i);
         x_hookDocsInPmtTab(i).supplier_site_id :=
             ll_supplier_site_id(i);
         x_hookDocsInPmtTab(i).org_id :=
             ll_org_id(i);
         x_hookDocsInPmtTab(i).org_type :=
             ll_org_type(i);
         x_hookDocsInPmtTab(i).external_bank_account_id :=
             ll_external_bank_account_id(i);
         x_hookDocsInPmtTab(i).payment_curr_discount_taken :=
             ll_payment_curr_discount_taken(i);
         x_hookDocsInPmtTab(i).created_by :=
             ll_created_by(i);
         x_hookDocsInPmtTab(i).creation_date :=
             ll_creation_date(i);
         x_hookDocsInPmtTab(i).last_updated_by :=
             ll_last_updated_by(i);
         x_hookDocsInPmtTab(i).last_update_date :=
             ll_last_update_date(i);
         x_hookDocsInPmtTab(i).last_update_login :=
             ll_last_update_login(i);
         x_hookDocsInPmtTab(i).object_version_number :=
             ll_object_version_number(i);
         END LOOP;
     END IF;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
      print_debuginfo(l_module_name, 'Finished fetching docs and '
         || 'payments from global temp tables.');

     END IF;
 END getAdjustedPaymentData;

/*--------------------------------------------------------------------
 | NAME:
 |     getAdjustedPaymentData
 |
 | PURPOSE:
 |     Reads the data updated in the global temp tables by the calling app.
 |     The calling app would have updated the data when the external
 |     application hook was called. This method reads in the updated
 |     data.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE getAdjustedPaymentData(
     x_hookPaymentTab      IN OUT NOCOPY hookPaymentTabType
 --     x_hookDocsInPmtTab    IN OUT NOCOPY hookDocsInPaymentTabType
     )
 IS

 l_module_name  CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                              '.getAdjustedPaymentData';

     TYPE t_calling_app_id IS TABLE OF
     IBY_HOOK_PAYMENTS_T.calling_app_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_call_app_pay_srv_req_code IS TABLE OF
     IBY_HOOK_PAYMENTS_T.call_app_pay_service_req_code%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_payment_service_request_id IS TABLE OF
     IBY_HOOK_PAYMENTS_T.payment_service_request_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_payment_id IS TABLE OF
     IBY_HOOK_PAYMENTS_T.payment_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_payment_amount IS TABLE OF
     IBY_HOOK_PAYMENTS_T.payment_amount%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_payment_currency_code IS TABLE OF
     IBY_HOOK_PAYMENTS_T.payment_currency_code%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_dont_pay_flag IS TABLE OF
     IBY_HOOK_PAYMENTS_T.dont_pay_flag%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_dont_pay_reason_code IS TABLE OF
     IBY_HOOK_PAYMENTS_T.dont_pay_reason_code%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_dont_pay_description IS TABLE OF
     IBY_HOOK_PAYMENTS_T.dont_pay_description%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_internal_bank_account_id IS TABLE OF
     IBY_HOOK_PAYMENTS_T.internal_bank_account_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_ext_payee_id IS TABLE OF
     IBY_HOOK_PAYMENTS_T.ext_payee_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_payee_party_id IS TABLE OF
     IBY_HOOK_PAYMENTS_T.payee_party_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_party_site_id IS TABLE OF
     IBY_HOOK_PAYMENTS_T.party_site_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_supplier_site_id IS TABLE OF
     IBY_HOOK_PAYMENTS_T.supplier_site_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_org_id IS TABLE OF
     IBY_HOOK_PAYMENTS_T.org_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_org_type IS TABLE OF
     IBY_HOOK_PAYMENTS_T.org_type%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_external_bank_account_id IS TABLE OF
     IBY_HOOK_PAYMENTS_T.external_bank_account_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_discount_amount_taken IS TABLE OF
     IBY_HOOK_PAYMENTS_T.discount_amount_taken%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_payment_date IS TABLE OF
     IBY_HOOK_PAYMENTS_T.payment_date%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_bank_charge_amount IS TABLE OF
     IBY_HOOK_PAYMENTS_T.bank_charge_amount%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_created_by IS TABLE OF
     IBY_HOOK_PAYMENTS_T.created_by%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_creation_date IS TABLE OF
     IBY_HOOK_PAYMENTS_T.creation_date%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_last_updated_by IS TABLE OF
     IBY_HOOK_PAYMENTS_T.last_updated_by%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_last_update_date IS TABLE OF
     IBY_HOOK_PAYMENTS_T.last_update_date%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_last_update_login IS TABLE OF
     IBY_HOOK_PAYMENTS_T.last_update_login%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE t_object_version_number IS TABLE OF
     IBY_HOOK_PAYMENTS_T.object_version_number%TYPE
     INDEX BY BINARY_INTEGER;

    l_calling_app_id                          t_calling_app_id;
    l_call_app_pay_srv_req_code               t_call_app_pay_srv_req_code;
    l_payment_service_request_id              t_payment_service_request_id;
    l_payment_id                              t_payment_id;
    l_payment_amount                          t_payment_amount;
    l_payment_currency_code                   t_payment_currency_code;
    l_dont_pay_flag                           t_dont_pay_flag;
    l_dont_pay_reason_code                    t_dont_pay_reason_code;
    l_dont_pay_description                    t_dont_pay_description;
    l_internal_bank_account_id                t_internal_bank_account_id;
    l_ext_payee_id                            t_ext_payee_id;
    l_payee_party_id                          t_payee_party_id;
    l_party_site_id                           t_party_site_id;
    l_supplier_site_id                        t_supplier_site_id;
    l_org_id                                  t_org_id;
    l_org_type                                t_org_type;
    l_external_bank_account_id                t_external_bank_account_id;
    l_discount_amount_taken                   t_discount_amount_taken;
    l_payment_date                            t_payment_date;
    l_bank_charge_amount                      t_bank_charge_amount;
    l_created_by                              t_created_by;
    l_creation_date                           t_creation_date;
    l_last_updated_by                         t_last_updated_by;
    l_last_update_date                        t_last_update_date;
    l_last_update_login                       t_last_update_login;
    l_object_version_number                   t_object_version_number;


 /* payments cursor */
 CURSOR c_payment_data
 IS
 SELECT
     calling_app_id,
     call_app_pay_service_req_code,
     payment_service_request_id,
     payment_id,
     payment_amount,
     payment_currency_code,
     dont_pay_flag,
     dont_pay_reason_code,
     dont_pay_description,
     internal_bank_account_id,
     ext_payee_id,
     payee_party_id,
     party_site_id,
     supplier_site_id,
     org_id,
     org_type,
     external_bank_account_id,
     discount_amount_taken,
     payment_date,
     bank_charge_amount,
     created_by,
     creation_date,
     last_updated_by,
     last_update_date,
     last_update_login,
     object_version_number
 FROM IBY_HOOK_PAYMENTS_T;

     TYPE ty_payment_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.payment_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_document_payable_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.document_payable_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_calling_app_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_calling_app_doc_unique_ref1 IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_doc_unique_ref1%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_calling_app_doc_unique_ref2 IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_doc_unique_ref2%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_calling_app_doc_unique_ref3 IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_doc_unique_ref3%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_calling_app_doc_unique_ref4 IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_doc_unique_ref4%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_calling_app_doc_unique_ref5 IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.calling_app_doc_unique_ref5%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_document_amount IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.document_amount%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_document_currency_code IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.document_currency_code%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_amount_withheld IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.amount_withheld%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_dont_pay_flag IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.dont_pay_flag%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_dont_pay_reason_code IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.dont_pay_reason_code%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_dont_pay_description IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.dont_pay_description%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_pay_proc_trxn_type_code IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.pay_proc_trxn_type_code%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_internal_bank_account_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.internal_bank_account_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_ext_payee_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.ext_payee_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_payee_party_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.payee_party_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_party_site_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.party_site_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_supplier_site_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.supplier_site_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_org_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.org_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_org_type IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.org_type%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_external_bank_account_id IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.external_bank_account_id%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_payment_curr_discount_taken IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.payment_curr_discount_taken%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_created_by IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.created_by%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_creation_date IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.creation_date%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_last_updated_by IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.last_updated_by%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_last_update_date IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.last_update_date%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_last_update_login IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.last_update_login%TYPE
     INDEX BY BINARY_INTEGER;
     TYPE ty_object_version_number IS TABLE OF
     IBY_HOOK_DOCS_IN_PMT_T.object_version_number%TYPE
     INDEX BY BINARY_INTEGER;


    ll_payment_id                           ty_payment_id;
    ll_document_payable_id                  ty_document_payable_id;
    ll_calling_app_id                       ty_calling_app_id;
    ll_calling_app_doc_unique_ref1          ty_calling_app_doc_unique_ref1;
    ll_calling_app_doc_unique_ref2          ty_calling_app_doc_unique_ref2;
    ll_calling_app_doc_unique_ref3          ty_calling_app_doc_unique_ref3;
    ll_calling_app_doc_unique_ref4          ty_calling_app_doc_unique_ref4;
    ll_calling_app_doc_unique_ref5          ty_calling_app_doc_unique_ref5;
    ll_document_amount                      ty_document_amount;
    ll_document_currency_code               ty_document_currency_code;
    ll_amount_withheld                      ty_amount_withheld;
    ll_dont_pay_flag                        ty_dont_pay_flag;
    ll_dont_pay_reason_code                 ty_dont_pay_reason_code;
    ll_dont_pay_description                 ty_dont_pay_description;
    ll_pay_proc_trxn_type_code              ty_pay_proc_trxn_type_code;
    ll_internal_bank_account_id             ty_internal_bank_account_id;
    ll_ext_payee_id                         ty_ext_payee_id;
    ll_payee_party_id                       ty_payee_party_id;
    ll_party_site_id                        ty_party_site_id;
    ll_supplier_site_id                     ty_supplier_site_id;
    ll_org_id                               ty_org_id;
    ll_org_type                             ty_org_type;
    ll_external_bank_account_id             ty_external_bank_account_id;
    ll_payment_curr_discount_taken          ty_payment_curr_discount_taken;
    ll_created_by                           ty_created_by;
    ll_creation_date                        ty_creation_date;
    ll_last_updated_by                      ty_last_updated_by;
    ll_last_update_date                     ty_last_update_date;
    ll_last_update_login                    ty_last_update_login;
    ll_object_version_number                ty_object_version_number;


 /* documents cursor */
 /*CURSOR c_document_data
 IS
 SELECT
     payment_id,
     document_payable_id,
     calling_app_id,
     calling_app_doc_unique_ref1,
     calling_app_doc_unique_ref2,
     calling_app_doc_unique_ref3,
     calling_app_doc_unique_ref4,
     calling_app_doc_unique_ref5,
     document_amount,
     document_currency_code,
     amount_withheld,
     dont_pay_flag,
     dont_pay_reason_code,
     dont_pay_description,
     pay_proc_trxn_type_code,
     internal_bank_account_id,
     ext_payee_id,
     payee_party_id,
     party_site_id,
     supplier_site_id,
     org_id,
     org_type,
     external_bank_account_id,
     payment_curr_discount_taken,
     created_by,
     creation_date,
     last_updated_by,
     last_update_date,
     last_update_login,
     object_version_number
 FROM IBY_HOOK_DOCS_IN_PMT_T
 ORDER BY document_payable_id;*/

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'Fetching data '
         || 'from global temp tables');

     END IF;
     /*
      * Read in the payments and documents from the global
      * temp tables and store them into data structures.
      */
     OPEN  c_payment_data;
     FETCH c_payment_data BULK COLLECT INTO
         l_calling_app_id,
         l_call_app_pay_srv_req_code,
         l_payment_service_request_id,
         l_payment_id,
         l_payment_amount,
         l_payment_currency_code,
         l_dont_pay_flag,
         l_dont_pay_reason_code,
         l_dont_pay_description,
         l_internal_bank_account_id,
         l_ext_payee_id,
         l_payee_party_id,
         l_party_site_id,
         l_supplier_site_id,
         l_org_id,
         l_org_type,
         l_external_bank_account_id,
         l_discount_amount_taken,
         l_payment_date,
         l_bank_charge_amount,
         l_created_by,
         l_creation_date,
         l_last_updated_by,
         l_last_update_date,
         l_last_update_login,
         l_object_version_number
         ;
     CLOSE c_payment_data;

     IF (l_calling_app_id.COUNT <> 0) THEN
         FOR i IN l_calling_app_id.FIRST .. l_calling_app_id.LAST LOOP
             x_hookPaymentTab(i).calling_app_id :=
                 l_calling_app_id(i);
             x_hookPaymentTab(i).call_app_pay_service_req_code :=
                 l_call_app_pay_srv_req_code(i);
             x_hookPaymentTab(i).payment_service_request_id :=
                 l_payment_service_request_id(i);
             x_hookPaymentTab(i).payment_id :=
                 l_payment_id(i);
             x_hookPaymentTab(i).payment_amount :=
                 l_payment_amount(i);
             x_hookPaymentTab(i).payment_currency_code :=
                 l_payment_currency_code(i);
             x_hookPaymentTab(i).dont_pay_flag :=
                 l_dont_pay_flag(i);
             x_hookPaymentTab(i).dont_pay_reason_code :=
                 l_dont_pay_reason_code(i);
             x_hookPaymentTab(i).dont_pay_description :=
                 l_dont_pay_description(i);
             x_hookPaymentTab(i).internal_bank_account_id :=
                 l_internal_bank_account_id(i);
             x_hookPaymentTab(i).ext_payee_id :=
                 l_ext_payee_id(i);
             x_hookPaymentTab(i).payee_party_id :=
                 l_payee_party_id(i);
             x_hookPaymentTab(i).party_site_id :=
                 l_party_site_id(i);
             x_hookPaymentTab(i).supplier_site_id :=
                 l_supplier_site_id(i);
             x_hookPaymentTab(i).org_id :=
                 l_org_id(i);
             x_hookPaymentTab(i).org_type :=
                 l_org_type(i);
             x_hookPaymentTab(i).external_bank_account_id :=
                 l_external_bank_account_id(i);
             x_hookPaymentTab(i).discount_amount_taken :=
                 l_discount_amount_taken(i);
             x_hookPaymentTab(i).payment_date :=
                 l_payment_date(i);
             x_hookPaymentTab(i).bank_charge_amount :=
                 l_bank_charge_amount(i);
             x_hookPaymentTab(i).created_by :=
                 l_created_by(i);
             x_hookPaymentTab(i).creation_date :=
                 l_creation_date(i);
             x_hookPaymentTab(i).last_updated_by :=
                 l_last_updated_by(i);
             x_hookPaymentTab(i).last_update_date :=
                 l_last_update_date(i);
             x_hookPaymentTab(i).last_update_login :=
                 l_last_update_login(i);
             x_hookPaymentTab(i).object_version_number :=
                 l_object_version_number(i);
         END LOOP;
     END IF;

     /*OPEN  c_document_data;
     FETCH c_document_data BULK COLLECT INTO
         ll_payment_id,
         ll_document_payable_id,
         ll_calling_app_id,
         ll_calling_app_doc_unique_ref1,
         ll_calling_app_doc_unique_ref2,
         ll_calling_app_doc_unique_ref3,
         ll_calling_app_doc_unique_ref4,
         ll_calling_app_doc_unique_ref5,
         ll_document_amount,
         ll_document_currency_code,
         ll_amount_withheld,
         ll_dont_pay_flag,
         ll_dont_pay_reason_code,
         ll_dont_pay_description,
         ll_pay_proc_trxn_type_code,
         ll_internal_bank_account_id,
         ll_ext_payee_id,
         ll_payee_party_id,
         ll_party_site_id,
         ll_supplier_site_id,
         ll_org_id,
         ll_org_type,
         ll_external_bank_account_id,
         ll_payment_curr_discount_taken,
         ll_created_by,
         ll_creation_date,
         ll_last_updated_by,
         ll_last_update_date,
         ll_last_update_login,
         ll_object_version_number
         ;
     CLOSE c_document_data;*/

     /*IF (ll_payment_id.COUNT <> 0) THEN
         FOR i IN ll_payment_id.FIRST .. ll_payment_id.LAST LOOP
         x_hookDocsInPmtTab(i).payment_id :=
             ll_payment_id(i);
         x_hookDocsInPmtTab(i).document_payable_id :=
             ll_document_payable_id(i);
         x_hookDocsInPmtTab(i).calling_app_id :=
             ll_calling_app_id(i);
         x_hookDocsInPmtTab(i).calling_app_doc_unique_ref1 :=
             ll_calling_app_doc_unique_ref1(i);
         x_hookDocsInPmtTab(i).calling_app_doc_unique_ref2 :=
             ll_calling_app_doc_unique_ref2(i);
         x_hookDocsInPmtTab(i).calling_app_doc_unique_ref3 :=
             ll_calling_app_doc_unique_ref3(i);
         x_hookDocsInPmtTab(i).calling_app_doc_unique_ref4 :=
             ll_calling_app_doc_unique_ref4(i);
         x_hookDocsInPmtTab(i).calling_app_doc_unique_ref5 :=
             ll_calling_app_doc_unique_ref5(i);
         x_hookDocsInPmtTab(i).document_amount :=
             ll_document_amount(i);
         x_hookDocsInPmtTab(i).document_currency_code :=
             ll_document_currency_code(i);
         x_hookDocsInPmtTab(i).amount_withheld :=
             ll_amount_withheld(i);
         x_hookDocsInPmtTab(i).dont_pay_flag :=
             ll_dont_pay_flag(i);
         x_hookDocsInPmtTab(i).dont_pay_reason_code :=
             ll_dont_pay_reason_code(i);
         x_hookDocsInPmtTab(i).dont_pay_description :=
             ll_dont_pay_description(i);
         x_hookDocsInPmtTab(i).pay_proc_trxn_type_code :=
             ll_pay_proc_trxn_type_code(i);
         x_hookDocsInPmtTab(i).internal_bank_account_id :=
             ll_internal_bank_account_id(i);
         x_hookDocsInPmtTab(i).ext_payee_id :=
             ll_ext_payee_id(i);
         x_hookDocsInPmtTab(i).payee_party_id :=
             ll_payee_party_id(i);
         x_hookDocsInPmtTab(i).party_site_id :=
             ll_party_site_id(i);
         x_hookDocsInPmtTab(i).supplier_site_id :=
             ll_supplier_site_id(i);
         x_hookDocsInPmtTab(i).org_id :=
             ll_org_id(i);
         x_hookDocsInPmtTab(i).org_type :=
             ll_org_type(i);
         x_hookDocsInPmtTab(i).external_bank_account_id :=
             ll_external_bank_account_id(i);
         x_hookDocsInPmtTab(i).payment_curr_discount_taken :=
             ll_payment_curr_discount_taken(i);
         x_hookDocsInPmtTab(i).created_by :=
             ll_created_by(i);
         x_hookDocsInPmtTab(i).creation_date :=
             ll_creation_date(i);
         x_hookDocsInPmtTab(i).last_updated_by :=
             ll_last_updated_by(i);
         x_hookDocsInPmtTab(i).last_update_date :=
             ll_last_update_date(i);
         x_hookDocsInPmtTab(i).last_update_login :=
             ll_last_update_login(i);
         x_hookDocsInPmtTab(i).object_version_number :=
             ll_object_version_number(i);
         END LOOP;
     END IF;*/

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Finished fetching'
         || 'payments from global temp table.');

     END IF;
 END getAdjustedPaymentData;


/*--------------------------------------------------------------------
 | NAME:
 |     failDocsOfPayment
 |
 | PURPOSE:
 |     For a given payment id, this method sets all the documents of
 |     that payment to 'failed' status in the PLSQL table of documents.
 |     The actual failure status to set for the document is passed
 |     in as an input parameter.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE failDocsOfPayment(
     p_paymentId      IN            IBY_PAYMENTS_ALL.payment_id%TYPE,
     p_docStatus      IN            IBY_DOCS_PAYABLE_ALL.
                                          document_status%TYPE,
     x_docsInPmtTab   IN OUT NOCOPY docsInPaymentTabType,
     x_docErrorTab    IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.docErrorTabType,
     x_errTokenTab    IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.trxnErrTokenTabType
     )
 IS
 l_module_name      CONSTANT VARCHAR2(200)  := G_PKG_NAME ||
                                                   '.failDocsOfPayment';
 l_calc_doc_details VARCHAR2(2000) := '';
 l_sql_string       VARCHAR2(4000) := '';

 l_doc_err_rec      IBY_TRANSACTION_ERRORS%ROWTYPE;

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'ENTER');

     END IF;
     /*
      * Loop through docs, failing the ones that have the
      * have given payment id.
      */
     FOR j in  x_docsInPmtTab.FIRST ..  x_docsInPmtTab.LAST LOOP

         IF (x_docsInPmtTab(j).payment_id =
             p_paymentId) THEN

             x_docsInPmtTab(j).document_status
                 := p_docStatus;

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		print_debuginfo(l_module_name, 'Failed document '
                 || x_docsInPmtTab(j).document_id
                 || ' because payment '
                 || p_paymentId
                 || ' has failed.');

	     END IF;
             /*
              * Once we fail a doc, we must add a corresponding
              * error message to the error table.
              */
             IBY_BUILD_UTILS_PKG.createErrorRecord(
                 TRXN_TYPE_DOC,
                 x_docsInPmtTab(j).document_id,
                 p_docStatus,
                 x_docsInPmtTab(j).calling_app_id,
                 x_docsInPmtTab(j).calling_app_doc_id1,
                 x_docsInPmtTab(j).calling_app_doc_id2,
                 x_docsInPmtTab(j).calling_app_doc_id3,
                 x_docsInPmtTab(j).calling_app_doc_id4,
                 x_docsInPmtTab(j).calling_app_doc_id5,
                 x_docsInPmtTab(j).pay_proc_ttype_cd,
                 l_doc_err_rec,
                 x_errTokenTab
                 );

             /*
              * Add error record to errors table.
              */
             IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                 l_doc_err_rec, x_docErrorTab, x_errTokenTab);

         END IF;

     END LOOP;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'EXIT');

     END IF;
 END failDocsOfPayment;

/*--------------------------------------------------------------------
 | NAME:
 |     failDocsOfPayment
 |
 | PURPOSE:
 |     For a given payment id, this method sets all the documents of
 |     that payment to 'failed' status in the PLSQL table of documents.
 |     The actual failure status to set for the document is passed
 |     in as an input parameter.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE failDocsOfPayment(
     p_paymentId      IN            IBY_PAYMENTS_ALL.payment_id%TYPE,
     p_docStatus      IN            IBY_DOCS_PAYABLE_ALL.
                                          document_status%TYPE,
     x_docErrorTab    IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.docErrorTabType,
     x_errTokenTab    IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.trxnErrTokenTabType
     )
 IS
 l_module_name      CONSTANT VARCHAR2(200)  := G_PKG_NAME ||
                                                   '.failDocsOfPayment';
 l_calc_doc_details VARCHAR2(2000) := '';
 l_sql_string       VARCHAR2(4000) := '';

 l_doc_err_rec      IBY_TRANSACTION_ERRORS%ROWTYPE;

 CURSOR c_fail_docs_of_payment(p_paymentId IBY_PAYMENTS_ALL.payment_id%TYPE)
 IS
 SELECT idpt.payment_id,
   idpt.document_payable_id,
   idpt.document_status,
   idpt.calling_app_id,
   idpt.calling_app_doc_unique_ref1,
   idpt.calling_app_doc_unique_ref2,
   idpt.calling_app_doc_unique_ref3,
   idpt.calling_app_doc_unique_ref4,
   idpt.calling_app_doc_unique_ref5,
   idpt.pay_proc_trxn_type_code,
   idpt.document_amount,
   idpt.payment_grouping_number
 FROM iby_docs_in_pmt_gt idpt
 WHERE idpt.payment_id = p_paymentId;

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'ENTER');

     END IF;
     OPEN c_fail_docs_of_payment(p_paymentId);
     FETCH c_fail_docs_of_payment BULK COLLECT INTO l_fail_dop_tbl;
     CLOSE c_fail_docs_of_payment;

     print_debuginfo(l_module_name, 'After cursor fetch');
     /*
      * Loop through docs, failing the ones that have the
      * have given payment id.
      */

     IF (l_fail_dop_tbl.COUNT >0) THEN

     FOR j in  l_fail_dop_tbl.FIRST ..  l_fail_dop_tbl.LAST LOOP
     print_debuginfo(l_module_name, 'Inside the for loop');

	 IF (l_fail_dop_tbl(j).payment_id = p_paymentId) THEN
	     print_debuginfo(l_module_name, 'Condition satisfied');

             UPDATE iby_docs_in_pmt_gt
             SET document_status = p_docStatus
             WHERE document_payable_id  = l_fail_dop_tbl(j).document_payable_id;

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Failed document '
                 || l_fail_dop_tbl(j).document_payable_id
                 || ' because payment '
                 || p_paymentId
                 || ' has failed.');
	     END IF;
             /*
              * Once we fail a doc, we must add a corresponding
              * error message to the error table.
              */
             IBY_BUILD_UTILS_PKG.createErrorRecord(
                 TRXN_TYPE_DOC,
                 l_fail_dop_tbl(j).document_payable_id,
                 p_docStatus,
                 l_fail_dop_tbl(j).calling_app_id,
                 l_fail_dop_tbl(j).calling_app_doc_unique_ref1,
                 l_fail_dop_tbl(j).calling_app_doc_unique_ref2,
                 l_fail_dop_tbl(j).calling_app_doc_unique_ref3,
                 l_fail_dop_tbl(j).calling_app_doc_unique_ref4,
                 l_fail_dop_tbl(j).calling_app_doc_unique_ref5,
                 l_fail_dop_tbl(j).pay_proc_trxn_type_code,
                 l_doc_err_rec,
                 x_errTokenTab
                 );

             /*
              * Add error record to errors table.
              */
             IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                 l_doc_err_rec, x_docErrorTab, x_errTokenTab);

         END IF;

     END LOOP;

     ELSE
	print_debuginfo(l_module_name, 'No documents found for this payment');
     END IF;
     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'EXIT');

     END IF;
 END failDocsOfPayment;

/*--------------------------------------------------------------------
 | NAME:
 |     flagSeparateRemitAdvicePmts
 |
 | PURPOSE:
 |     Determines whether a separate remittance advice is required
 |     for a payment. If so, this method will set the 'separate remit
 |     advice flag' on the payment.
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE flagSeparateRemitAdvicePmts(
     x_paymentTab    IN OUT NOCOPY paymentTabType,
     p_docsInPmtTab  IN            docsInPaymentTabType
     )
 IS
 l_module_name VARCHAR2(200) := G_PKG_NAME || '.flagSeparateRemitAdvicePmts';

 l_doc_count_limit          NUMBER(15);
 l_pmt_details_length_limit NUMBER(15);
 l_remitAdvicesSetupTab     remitAdviceRecTab;
 l_successDocCountTab       successDocsCountPerPmtTab;

 /* maps profile ids to system profile codes */
 l_profile_map        IBY_BUILD_UTILS_PKG.profileIdToCodeMapTabType;
 l_profile_code       IBY_PAYMENT_PROFILES.system_profile_code%TYPE;

 /*
  * Remittance advices cursor --  Only pick those
  * records that have the format attched... there
  * will be records in this table even if no format
  * is attached from the UI (the defaults are just accepted)
  */
 CURSOR c_remit_advices
 IS
 SELECT
     advice.system_profile_code,
     DECODE(advice.document_count_limit, NULL, -1,
         advice.document_count_limit),
     DECODE(advice.payment_details_length_limit, NULL, -1,
         advice.payment_details_length_limit)
 FROM
     IBY_REMIT_ADVICE_SETUP advice
 WHERE
     remittance_advice_format_code IS NOT NULL;

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'ENTER');

     END IF;
     /*
      * Read in the payments and documents from the global
      * temp tables and store them into data structures.
      */
    -- OPEN  c_remit_advices;
    -- FETCH c_remit_advices BULK COLLECT INTO l_remitAdvicesSetupTab;
    -- CLOSE c_remit_advices;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'Fetched '
         || l_remitAdvicesSetupTab.COUNT
         || ' records from the remittance advice setup table.');

     END IF;
     IF (l_remitAdvicesSetupTab.COUNT = 0) THEN
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'No remittance advice information '
             || 'has been setup. Separate remittance advice will '
             || 'not be generated for any payment in this request. '
             || 'Exiting ..'
             );
         print_debuginfo(l_module_name, 'EXIT');

	 END IF;

         RETURN;
     END IF;

     /*
      * For each payment, get the count of successful documents.
      * This is required to determine whether a separate remittance
      * needs to be flagged for that payment.
      */
     getNumSuccessDocsPerPayment(x_paymentTab, p_docsInPmtTab,
         l_successDocCountTab);

     /*
      * Get the mapping between profile ids and system profile codes.
      *
      * Individual payments contain the profile id
      * as an attribute. However, the config tables like
      * reit advice setup etc. contain settings
      * based on system profile codes.
      *
      * Therefore, we need this mapping for operations that
      * take place below.
      */
     IBY_BUILD_UTILS_PKG.getProfileMap(l_profile_map);

     /*
      * Loop through all the created payments, flagging any payments
      * that require a separate remittance advice.
      */
     FOR i in  x_paymentTab.FIRST ..  x_paymentTab.LAST LOOP

         IF (x_paymentTab(i).payment_status = PAY_STATUS_CREATED) THEN

             l_profile_code := IBY_BUILD_UTILS_PKG.getProfileCodeFromId(
                                   x_paymentTab(i).payment_profile_id,
                                   l_profile_map
                                   );

             FOR j in l_remitAdvicesSetupTab.FIRST ..
                          l_remitAdvicesSetupTab.LAST LOOP

                 IF (l_profile_code =
                         l_remitAdvicesSetupTab(j).payment_profile_cd) THEN

                     /*
                      * Check if this payment meets any of the remittance
                      * conditions. If yes, set the separate remittance
                      * advice flag to 'Y' for this payment.
                      */

                     /* max documents count limit condition */
                     IF (l_remitAdvicesSetupTab(j).doc_count_limit <> -1) THEN

                         /*
                          * The l_successDocCountTab table and the
                          * x_paymentTab table will have the exact same
                          * number of records, with the payment ids
                          * stored in the same order.
                          *
                          * Therefore, as far as payment ids are concerned
                          * we can use these tables interchangeably.
                          * Hence, we can directly pick up the count of
                          * successful docs for payment x_paymentTab(i)
                          * from l_successDocCountTab(i).
                          */
                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'For payment '
                             || x_paymentTab(i).payment_id
                             || ' # success docs: '
                             || l_successDocCountTab(i).success_docs_count
                             || ', remittance advice doc limit: '
                             || l_remitAdvicesSetupTab(j).doc_count_limit
                             );

			 END IF;
                         IF (l_successDocCountTab(i).success_docs_count
                             > l_remitAdvicesSetupTab(j).
                                   doc_count_limit) THEN
                             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
				print_debuginfo(l_module_name, 'Setting '
                                 || ' separate remittance advice flag '
                                 || ' for payment '
                                 || x_paymentTab(i).payment_id
                                 );
                             END IF;

                             x_paymentTab(i).separate_remit_advice_req_flag
                                 := 'Y';
                         END IF;

                     END IF;

                     /* payment details length limit comndition */
                     IF (l_remitAdvicesSetupTab(j).
                                pmt_details_len_limit <> -1) THEN

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'For payment '
                             || x_paymentTab(i).payment_id
                             || ' pmt details length: '
                             || LENGTH(x_paymentTab(i).payment_details)
                             || ', length limit as per remit advc setup: '
                             || l_remitAdvicesSetupTab(j).
                                    pmt_details_len_limit
                             );

			 END IF;
                         IF (LENGTH(x_paymentTab(i).payment_details)
                             > l_remitAdvicesSetupTab(j).
                                   pmt_details_len_limit) THEN
                             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
				print_debuginfo(l_module_name, 'Setting '
                                 || 'separate remittance advice flag '
                                 || 'for payment '
                                 || x_paymentTab(i).payment_id
                                 );
                             END IF;

                             x_paymentTab(i).separate_remit_advice_req_flag
                                 := 'Y';
                         END IF;

                     END IF;

                     /* both conditions unmet */
                     IF (l_remitAdvicesSetupTab(j).doc_count_limit = -1 AND
                         l_remitAdvicesSetupTab(j).pmt_details_len_limit = -1)
                         THEN
                         /*
                          * No remittance conditions have been set up
                          * for this profile, even though there is a
                          * remittance advice setup record. This means
                          * that remittance advice needs to be generated
                          * unconditionally for this payment.
                          */
                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'Unconditionally '
                             || 'setting separate remittance advice flag '
                             || 'for payment '
                             || x_paymentTab(i).payment_id
                             );
			 END IF;

			 x_paymentTab(i).separate_remit_advice_req_flag
                             := 'Y';
                     END IF;

                     /* Log if we are going to set set the remit flag */
                     IF (UPPER(x_paymentTab(i).separate_remit_advice_req_flag)
                         <> 'Y') THEN
                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'Not setting '
                             || 'separate remittance advice flag '
                             || 'for payment '
                             || x_paymentTab(i).payment_id
                             );
                         END IF; -- if stmt level logging
                     END IF;

                 END IF; -- payment profile matches remit advc setup

             END LOOP; -- for each remittance advice setup

         END IF; -- if payment status = created

     END LOOP; -- for each payment

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'EXIT');

     END IF;  --
 END flagSeparateRemitAdvicePmts;

/*--------------------------------------------------------------------
 | NAME:
 |     flagSeparateRemitAdvicePmts
 |
 | PURPOSE:
 |     Determines whether a separate remittance advice is required
 |     for a payment. If so, this method will set the 'separate remit
 |     advice flag' on the payment.
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE flagSeparateRemitAdvicePmts(
       l_ca_payreq_cd  IN VARCHAR2,
       ppr_id          IN IBY_PAY_SERVICE_REQUESTS.payment_service_request_id%TYPE
--     x_paymentTab    IN OUT NOCOPY paymentTabType
--     p_docsInPmtTab  IN            docsInPaymentTabType
     )
 IS
 l_module_name VARCHAR2(200) := G_PKG_NAME || '.flagSeparateRemitAdvicePmts';

 l_doc_count_limit          NUMBER(15);
 l_pmt_details_length_limit NUMBER(15);
 l_remitAdvicesSetupTab     remitAdviceRecTab;
 l_successDocCountTab       successDocsCountPerPmtTab;

 /* maps profile ids to system profile codes */
 l_profile_map        IBY_BUILD_UTILS_PKG.profileIdToCodeMapTabType;
 l_profile_code       IBY_PAYMENT_PROFILES.system_profile_code%TYPE;

 /*
  * Remittance advices cursor --  Only pick those
  * records that have the format attched... there
  * will be records in this table even if no format
  * is attached from the UI (the defaults are just accepted)
  */
 CURSOR c_remit_advices
 IS
 SELECT
     advice.system_profile_code,
     DECODE(advice.document_count_limit, NULL, -1,
         advice.document_count_limit),
     DECODE(advice.payment_details_length_limit, NULL, -1,
         advice.payment_details_length_limit),
     pmt.payment_details,
     pmt.payment_id,
     COUNT(document_payable_id)

 FROM
     IBY_REMIT_ADVICE_SETUP advice,
     IBY_PAYMENT_PROFILES   ppp,
     IBY_PAYMENTS_ALL       pmt,
     IBY_DOCS_PAYABLE_ALL   docs

 WHERE
     remittance_advice_format_code IS NOT NULL
     AND advice.SYSTEM_PROFILE_CODE = ppp.SYSTEM_PROFILE_CODE
     AND ppp.PAYMENT_PROFILE_ID     = pmt.PAYMENT_PROFILE_ID
     AND docs.payment_id            = pmt.payment_id
     AND pmt.payment_status         = PAY_STATUS_CREATED
     AND pmt.payment_service_request_id = ppr_id
 GROUP BY
     advice.system_profile_code,
     advice.document_count_limit,
     advice.payment_details_length_limit,
     pmt.payment_details,
     pmt.payment_id
     ;

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'ENTER');

     END IF;
     /*
      * Read in the payments and documents from the global
      * temp tables and store them into data structures.
      */
    -- OPEN  c_remit_advices;
    -- FETCH c_remit_advices BULK COLLECT INTO l_remitAdvicesSetupTab;
    -- CLOSE c_remit_advices;

    /*
    IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'Fetched '
         || l_remitAdvicesSetupTab.COUNT
         || ' records from the remittance advice setup table.');

     END IF;
     IF (l_remitAdvicesSetupTab.COUNT = 0) THEN
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	 print_debuginfo(l_module_name, 'No remittance advice information '
             || 'has been setup. Separate remittance advice will '
             || 'not be generated for any payment in this request. '
             || 'Exiting ..'
             );
         print_debuginfo(l_module_name, 'EXIT');

	 END IF;

         RETURN;
     END IF;
     */


     /*
      * For each payment, get the count of successful documents.
      * This is required to determine whether a separate remittance
      * needs to be flagged for that payment.
      */

     /* commenting out the call to get document count for all payments at one short */

   --  getNumSuccessDocsPerPayment(x_paymentTab,
   --      l_successDocCountTab);

     /*
      * Get the mapping between profile ids and system profile codes.
      *
      * Individual payments contain the profile id
      * as an attribute. However, the config tables like
      * reit advice setup etc. contain settings
      * based on system profile codes.
      *
      * Therefore, we need this mapping for operations that
      * take place below.
      */
    -- IBY_BUILD_UTILS_PKG.getProfileMap(l_profile_map);

     /*
      * Loop through all the created payments, flagging any payments
      * that require a separate remittance advice.
      */
--     FOR i in  x_paymentTab.FIRST ..  x_paymentTab.LAST LOOP




             /*
	     l_profile_code := IBY_BUILD_UTILS_PKG.getProfileCodeFromId(
                                   x_paymentTab(i).payment_profile_id,
                                   l_profile_map
                                   );
	      */


	  OPEN  c_remit_advices;
	  FETCH c_remit_advices BULK COLLECT INTO l_remitAdvicesSetupTab;
	  CLOSE c_remit_advices;
	 print_debuginfo(l_module_name, 'After fetching the values from cursor');
           IF (l_remitAdvicesSetupTab.COUNT > 0) THEN
	      FOR j in l_remitAdvicesSetupTab.FIRST ..
	      l_remitAdvicesSetupTab.LAST LOOP


                -- IF (l_profile_code = l_remitAdvicesSetupTab(j).payment_profile_cd) THEN


	             /*
                      * Check if this payment meets any of the remittance
                      * conditions. If yes, set the separate remittance
                      * advice flag to 'Y' for this payment.
                      */
	      print_debuginfo(l_module_name, 'l_remitAdvicesSetupTab(j).doc_count_limit-'||l_remitAdvicesSetupTab(j).doc_count_limit);

                     /* max documents count limit condition */
                     IF (l_remitAdvicesSetupTab(j).doc_count_limit <> -1) THEN
	      print_debuginfo(l_module_name, 'Inside the if condition.. ');

                         /*
                          * The l_successDocCountTab table and the
                          * x_paymentTab table will have the exact same
                          * number of records, with the payment ids
                          * stored in the same order.
                          *
                          * Therefore, as far as payment ids are concerned
                          * we can use these tables interchangeably.
                          * Hence, we can directly pick up the count of
                          * successful docs for payment x_paymentTab(i)
                          * from l_successDocCountTab(i).
                          */
                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'For payment '
                             || l_remitAdvicesSetupTab(j).payment_id
                             || ' # success docs: '
                             || l_remitAdvicesSetupTab(j).document_count
                             || ', remittance advice doc limit: '
                             || l_remitAdvicesSetupTab(j).doc_count_limit
                             );

			 END IF;
                         IF (l_remitAdvicesSetupTab(j).document_count
                             > l_remitAdvicesSetupTab(j).
                                   doc_count_limit) THEN
                             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
				print_debuginfo(l_module_name, 'Setting '
                                 || ' separate remittance advice flag '
                                 || ' for payment '
                                 || l_remitAdvicesSetupTab(j).payment_id
                                 );
                             END IF;

                             --x_paymentTab(i).separate_remit_advice_req_flag
                             --    := 'Y';

			     UPDATE IBY_PAYMENTS_ALL
			     SET separate_remit_advice_req_flag = 'Y'
			     WHERE
			     PAYMENT_ID =l_remitAdvicesSetupTab(j).payment_id;

                         END IF;

         	      print_debuginfo(l_module_name, 'Inside the if condition-at the end.. ');

                     END IF;

                     /* payment details length limit comndition */
                     IF (l_remitAdvicesSetupTab(j).
                                pmt_details_len_limit <> -1) THEN

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'For payment '
                             || l_remitAdvicesSetupTab(j).payment_id
                             || ' pmt details length: '
                             || LENGTH(l_remitAdvicesSetupTab(j).payment_details)
                             || ', length limit as per remit advc setup: '
                             || l_remitAdvicesSetupTab(j).
                                    pmt_details_len_limit
                             );

			 END IF;
                         IF (LENGTH(l_remitAdvicesSetupTab(j).payment_details)
                             > l_remitAdvicesSetupTab(j).
                                   pmt_details_len_limit) THEN
                             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
				print_debuginfo(l_module_name, 'Setting '
                                 || 'separate remittance advice flag '
                                 || 'for payment '
                                 || l_remitAdvicesSetupTab(j).payment_id
                                 );
                             END IF;

                            -- x_paymentTab(i).separate_remit_advice_req_flag
                            --     := 'Y';

			     UPDATE IBY_PAYMENTS_ALL
			     SET separate_remit_advice_req_flag = 'Y'
			     WHERE
			     PAYMENT_ID = l_remitAdvicesSetupTab(j).payment_id;

                         END IF;

                     END IF;

                     /* both conditions unmet */
                     IF (l_remitAdvicesSetupTab(j).doc_count_limit = -1 AND
                         l_remitAdvicesSetupTab(j).pmt_details_len_limit = -1)
                         THEN
                         /*
                          * No remittance conditions have been set up
                          * for this profile, even though there is a
                          * remittance advice setup record. This means
                          * that remittance advice needs to be generated
                          * unconditionally for this payment.
                          */
                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'Unconditionally '
                             || 'setting separate remittance advice flag '
                             || 'for payment '
                             || l_remitAdvicesSetupTab(j).payment_id
                             );
			 END IF;

			 --x_paymentTab(i).separate_remit_advice_req_flag
                         --    := 'Y';
			     UPDATE IBY_PAYMENTS_ALL
			     SET separate_remit_advice_req_flag = 'Y'
			     WHERE
			     PAYMENT_ID = l_remitAdvicesSetupTab(j).payment_id;


                     END IF;

                     /* Log if we are going to set set the remit flag */
                 /*
		 IF (UPPER(x_paymentTab(i).separate_remit_advice_req_flag)
                         <> 'Y') THEN
                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			 print_debuginfo(l_module_name, 'Not setting '
                             || 'separate remittance advice flag '
                             || 'for payment '
                             || x_paymentTab(i).payment_id
                             );
                         END IF; -- if stmt level logging
                     END IF;

		   */


               --  END IF; -- payment profile matches remit advc setup

          --    END LOOP; -- for each remittance advice setup

      --   END IF; -- if payment status = created

     END LOOP; -- for each payment

   END IF;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
	print_debuginfo(l_module_name, 'EXIT');

     END IF;  --
 END flagSeparateRemitAdvicePmts;

/*--------------------------------------------------------------------
 | NAME:
 |     getCountOfSuccessDocsPerPayment
 |
 | PURPOSE:
 |     Gets the count of successful documents for each payment.
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE getNumSuccessDocsPerPayment(
     x_paymentTab          IN OUT NOCOPY paymentTabType,
     p_docsInPmtTab        IN            docsInPaymentTabType,
     x_successDocCountTab  IN OUT NOCOPY successDocsCountPerPmtTab
     )
 IS
 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.getNumSuccessDocsPerPayment';
 l_successDocCountRec successDocsCountPerPmtRec;

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');
 --
     -- vid start here for debug logic

     FOR i in  x_paymentTab.FIRST ..  x_paymentTab.LAST LOOP

         /*
          * Initialize the success docs count record with the
          * given payment id.
          */
         l_successDocCountRec.payment_id := x_paymentTab(i).payment_id;
         l_successDocCountRec.success_docs_count := 0;

         IF (p_docsInPmtTab.COUNT > 0) THEN
         FOR j in p_docsInPmtTab.FIRST .. p_docsInPmtTab.LAST LOOP

             IF (x_paymentTab(i).payment_id = p_docsInPmtTab(j).payment_id)
                 THEN

                 /*
                  * For each successful document for a particular
                  * payment, increment the success count.
                  *
                  * Successful documents will have their status set
                  * to 'PAYMENT_CREATED'.
                  */
                 IF (p_docsInPmtTab(j).document_status = DOC_STATUS_PAY_CREATED)
                     THEN

                     l_successDocCountRec.success_docs_count :=
                         l_successDocCountRec.success_docs_count + 1;

                 END IF;

             END IF;

         END LOOP; -- for all docs in payment
         END IF;

         /*
          * Add success docs count record to table and
          * do the same process for next payment.
          */
         x_successDocCountTab(x_successDocCountTab.COUNT + 1) :=
             l_successDocCountRec;

     END LOOP;  -- for all payments

     print_debuginfo(l_module_name, 'EXIT');

 END getNumSuccessDocsPerPayment;

/*--------------------------------------------------------------------
 | NAME:
 |     getCountOfSuccessDocsPerPayment
 |
 | PURPOSE:
 |     Gets the count of successful documents for each payment.
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE getNumSuccessDocsPerPayment(
     x_paymentTab          IN OUT NOCOPY paymentTabType,
--     p_docsInPmtTab        IN            docsInPaymentTabType,
     x_successDocCountTab  IN OUT NOCOPY successDocsCountPerPmtTab
     )
 IS
 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.getNumSuccessDocsPerPayment';
 l_successDocCountRec successDocsCountPerPmtRec;

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');
 --
     -- vid start here for debug logic

     FOR i in  x_paymentTab.FIRST ..  x_paymentTab.LAST LOOP

         /*
          * Initialize the success docs count record with the
          * given payment id.
          */
         l_successDocCountRec.payment_id := x_paymentTab(i).payment_id;
         l_successDocCountRec.success_docs_count := 0;

         SELECT count(*)
         INTO l_successDocCountRec.success_docs_count
         FROM iby_docs_in_pmt_gt
         WHERE payment_id = x_paymentTab(i).payment_id
         AND document_status = DOC_STATUS_PAY_CREATED;

         /*
          * Add success docs count record to table and
          * do the same process for next payment.
          */
         x_successDocCountTab(x_successDocCountTab.COUNT + 1) :=
             l_successDocCountRec;

     END LOOP;  -- for all payments

     print_debuginfo(l_module_name, 'EXIT');

 END getNumSuccessDocsPerPayment;

/*--------------------------------------------------------------------
 | NAME:
 |     performDBUpdates
 |
 | PURPOSE:
 |     This is the top level method that is called by the
 |     payment creation program to:
 |         1. insert payments to DB
 |         2. update documents with payment id
 |         3. update status of payment request
 |
 |     This method will read the 'rejection level' system option
 |     and do updates accordingly.
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE performDBUpdates(
     p_payreq_id          IN            IBY_PAY_SERVICE_REQUESTS.
                                          payment_service_request_id%type,
     p_rej_level          IN            VARCHAR2,
     p_review_pmts_flag   IN            VARCHAR2,
     x_paymentTab         IN OUT NOCOPY paymentTabType,
     x_docsInPmtTab       IN OUT NOCOPY docsInPaymentTabType,
     x_allPmtsSuccessFlag IN OUT NOCOPY BOOLEAN,
     x_allPmtsFailedFlag  IN OUT NOCOPY BOOLEAN,
     x_return_status      IN OUT NOCOPY VARCHAR2,
     x_docErrorTab        IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.docErrorTabType,
     x_errTokenTab        IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.
                                            trxnErrTokenTabType
     )
 IS
 l_module_name       CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                   '.performDBUpdates';
 l_allsuccess_flag   BOOLEAN := TRUE;
 l_allfailed_flag    BOOLEAN := TRUE;
 l_request_status    VARCHAR2(200);
 l_orig_req_status   VARCHAR2(200);

 l_doc_err_rec       IBY_TRANSACTION_ERRORS%ROWTYPE;
 l_triggering_pmt_id IBY_PAYMENTS_ALL.payment_id%TYPE;

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     /*
      * Store the original ppr status as it is useful in
      * determining the next status in some cases.
      */
     l_orig_req_status := x_return_status;
     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'Original request status = '
         || l_orig_req_status
         );
     END IF;
     /*
      * Print the rejection level system option
      */
     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'Rejection level system option set to: '
         || p_rej_level);
     END IF;
     /*
      * Find out whether all the payments within this
      * payment request have 'success' status. This
      * information is used below.
      */
     FOR i in  x_paymentTab.FIRST ..  x_paymentTab.LAST LOOP
         IF (x_paymentTab(i).payment_status <> PAY_STATUS_CREATED) THEN
             l_triggering_pmt_id := x_paymentTab(i).payment_id;
             l_allsuccess_flag := FALSE;
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'At least one payment has '
                 || 'failed validation.');
             END IF;
             EXIT WHEN (1=1);
         END IF;
     END LOOP;

     /*
      * Check if all payments have failed for this
      * payment request. This information is used below.
      */
     FOR i in  x_paymentTab.FIRST .. x_paymentTab.LAST LOOP
         IF (x_paymentTab(i).payment_status = PAY_STATUS_CREATED) THEN
             l_allfailed_flag := FALSE;
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'At least one payment has '
                 || 'has been successfully validated.');
             END IF;
             EXIT WHEN (1=1);
         END IF;
     END LOOP;

     /*
      * Update the status of the payments/documents
      * as per the rejection level (if necessary).
      */
     IF (p_rej_level = REJ_LVL_REQUEST) THEN

         IF (l_allsuccess_flag = FALSE) THEN
             /*
              * This means that at least one payment in this
              * payment request has failed.
              *
              * For 'request' rejection level:
              * If any payment in the request fails validation,
              * the entire payment request should be rejected;
              * So fail all payments in this payment request.
              */
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Failing all payments and '
                     || 'documents for payment request '
                     || p_payreq_id);
             END IF;
             FOR i in  x_paymentTab.FIRST ..  x_paymentTab.LAST LOOP

                 IF (x_paymentTab(i).payment_status = PAY_STATUS_CREATED) THEN

                     x_paymentTab(i).payment_status :=
                         PAY_STATUS_FAIL_BY_REJLVL;

                     /*
                      * Once we fail a payment, we need to create
                      * an error record and insert this record
                      * into the errors table.
                      */
                     IBY_BUILD_UTILS_PKG.createErrorRecord(
                         TRXN_TYPE_PMT,
                         x_paymentTab(i).payment_id,
                         x_paymentTab(i).payment_status,
                         NULL,
                         x_paymentTab(i).payment_id,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         l_doc_err_rec,
                         x_errTokenTab,
                         l_triggering_pmt_id
                         );

                     IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                         l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                     failDocsOfPayment(x_paymentTab(i).payment_id,
                         DOC_STATUS_PAY_VAL_FAIL,
                         x_docsInPmtTab, x_docErrorTab,
                         x_errTokenTab);

                 END IF;

             END LOOP;

             /* set the status of the payment request to failed */
             l_request_status := REQ_STATUS_FAIL_PAY_CR;

         ELSE

             IF (UPPER(p_review_pmts_flag) = 'Y') THEN

                 IF (l_orig_req_status = 'RETRY_PAYMENT_CREATION') THEN

                     /*
                      * Fix for bug 5209530:
                      *
                      * If the pmts of a payment request have already
                      * been reviewed and the payment request has
                      * re-entered the pmt creation flow, then the pmts
                      * will again been validated.
                      *
                      * If all pmts are successful, do not again ask the
                      * user to review the payments, instead allow
                      * the ppr to proceed formward.
                      *
                      * For example, when documents of a pmt(s) are
                      * dismissed and the pmts have been re-validated,
                      * and there are no errors allow the ppr to
                      * proceed forward instead of setting it for
                      * user review again.
                      */
                     l_request_status := REQ_STATUS_PAY_CRTD;

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Payment request is '
                         || 're-entering payment creation and all payments '
                         || 'are valid. User need not review pmts again.'
                         );

                     print_debuginfo(l_module_name, 'Setting payment '
                         || 'request status to '
                         || l_request_status
                         || '.'
                         );
		      END IF;

                 ELSE


                     /*
                      * If review proposed payments flag is set, then
                      * move successful payment requests also to
                      * 'pending review' status.
                      */
                     l_request_status := REQ_STATUS_USER_REVW;
                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Review proposed payments '
                         || 'flag has been set. Setting status of successful '
                         || 'request to pending review.');
		     END IF;
                 END IF;

             ELSE

                 /* set the status of the payment request to pmts created */
                 l_request_status := REQ_STATUS_PAY_CRTD;

             END IF;

         END IF;

     ELSIF (p_rej_level = REJ_LVL_PAYMENT) THEN

         /*
          * Check if all payments in the request have failed.
          */
         IF (l_allfailed_flag = TRUE) THEN

             l_request_status := REQ_STATUS_FAIL_PAY_CR;

         ELSE

             /*
              * At least one payment in the request was
              * successful.
              */
             IF (UPPER(p_review_pmts_flag) = 'Y') THEN

                 IF (l_orig_req_status = 'RETRY_PAYMENT_CREATION') THEN

                     /*
                      * Fix for bug 5209530:
                      *
                      * If the pmts of a payment request have already
                      * been reviewed and the payment request has
                      * re-entered the pmt creation flow, then the pmts
                      * will again been validated.
                      *
                      * If all pmts are successful, do not again ask the
                      * user to review the payments, instead allow
                      * the ppr to proceed formward.
                      *
                      * For example, when documents of a pmt(s) are
                      * dismissed and the pmts have been re-validated,
                      * and there are no errors allow the ppr to
                      * proceed forward instead of setting it for
                      * user review again.
                      */
                     l_request_status := REQ_STATUS_PAY_CRTD;

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Payment request is '
                         || 're-entering payment creation and all payments '
                         || 'are valid. User need not review pmts again.'
                         );

                     print_debuginfo(l_module_name, 'Setting payment '
                         || 'request status to '
                         || l_request_status
                         || '.'
                         );
		      END IF;

                 ELSE

                     /*
                      * If review proposed payments flag is set, then
                      * move successful payment requests also to
                      * 'pending review' status.
                      */
                     l_request_status := REQ_STATUS_USER_REVW;

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Review proposed payments '
                         || 'flag has been set. Setting status of successful '
                         || 'request to pending review.');
		     END IF;
                 END IF;

             ELSE

                 /* set the status of the payment request to pmts created */
                 l_request_status := REQ_STATUS_PAY_CRTD;

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Review proposed payments '
                     || 'flag has not been set. Setting status of successful '
                     || 'request to created.');
                 END IF;

             END IF;

         END IF;

     /* Bug 8209474 */
     ELSIF (p_rej_level = REJ_LVL_PAYEE) THEN
              IF (l_allsuccess_flag = FALSE) THEN
             /*
              * This means that at least one payment in this
              * payment request has failed.
              *
              * For 'request' rejection level:
              * If any payment in the request fails validation,
              * the entire payment request should be rejected;
              * So fail all payments in this payment request.
              */

	     FOR i in  x_paymentTab.FIRST ..  x_paymentTab.LAST LOOP

                print_debuginfo(l_module_name, 'Failing all payments and '
                || 'documents for Payee ' || x_paymentTab(i).ext_payee_id || 'ANIL');

		 IF (l_payeeTab.EXISTS (x_paymentTab(i).ext_payee_id)) THEN

                     x_paymentTab(i).payment_status :=
                         PAY_STATUS_FAIL_BY_REJLVL;

                     /*
                      * Once we fail a payment, we need to create
                      * an error record and insert this record
                      * into the errors table.
                      */
                     IBY_BUILD_UTILS_PKG.createErrorRecord(
                         TRXN_TYPE_PMT,
                         x_paymentTab(i).payment_id,
                         x_paymentTab(i).payment_status,
                         NULL,
                         x_paymentTab(i).payment_id,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         l_doc_err_rec,
                         x_errTokenTab,
                         l_triggering_pmt_id
                         );

                     IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                         l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                     failDocsOfPayment(x_paymentTab(i).payment_id,
                         DOC_STATUS_PAY_VAL_FAIL,
                         x_docsInPmtTab, x_docErrorTab,
                         x_errTokenTab);

                 END IF;

             END LOOP; --Payment Loop
	    /* set the status of the payment request to failed */
             l_request_status := REQ_STATUS_FAIL_PAY_CR;

         ELSE

             IF (UPPER(p_review_pmts_flag) = 'Y') THEN

                 IF (l_orig_req_status = 'RETRY_PAYMENT_CREATION') THEN

                     /*
                      * Fix for bug 5209530:
                      *
                      * If the pmts of a payment request have already
                      * been reviewed and the payment request has
                      * re-entered the pmt creation flow, then the pmts
                      * will again been validated.
                      *
                      * If all pmts are successful, do not again ask the
                      * user to review the payments, instead allow
                      * the ppr to proceed formward.
                      *
                      * For example, when documents of a pmt(s) are
                      * dismissed and the pmts have been re-validated,
                      * and there are no errors allow the ppr to
                      * proceed forward instead of setting it for
                      * user review again.
                      */
                     l_request_status := REQ_STATUS_PAY_CRTD;

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Payment request is '
                         || 're-entering payment creation and all payments '
                         || 'are valid. User need not review pmts again.'
                         );

                     print_debuginfo(l_module_name, 'Setting payment '
                         || 'request status to '
                         || l_request_status
                         || '.'
                         );
		      END IF;

                 ELSE


                     /*
                      * If review proposed payments flag is set, then
                      * move successful payment requests also to
                      * 'pending review' status.
                      */
                     l_request_status := REQ_STATUS_USER_REVW;
                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Review proposed payments '
                         || 'flag has been set. Setting status of successful '
                         || 'request to pending review.');
		     END IF;
                 END IF;

             ELSE

                 /* set the status of the payment request to pmts created */
                 l_request_status := REQ_STATUS_PAY_CRTD;

             END IF;

         END IF;

     ELSIF (p_rej_level = REJ_LVL_NONE) THEN

         IF (l_allsuccess_flag = TRUE) THEN

             IF (UPPER(p_review_pmts_flag) = 'Y') THEN

                 IF (l_orig_req_status = 'RETRY_PAYMENT_CREATION') THEN

                     /*
                      * Fix for bug 5209530:
                      *
                      * If the pmts of a payment request have already
                      * been reviewed and the payment request has
                      * re-entered the pmt creation flow, then the pmts
                      * will again been validated.
                      *
                      * If all pmts are successful, do not again ask the
                      * user to review the payments, instead allow
                      * the ppr to proceed formward.
                      *
                      * For example, when documents of a pmt(s) are
                      * dismissed and the pmts have been re-validated,
                      * and there are no errors allow the ppr to
                      * proceed forward instead of setting it for
                      * user review again.
                      */
                     l_request_status := REQ_STATUS_PAY_CRTD;

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Payment request is '
                         || 're-entering payment creation and all payments '
                         || 'are valid. User need not review pmts again.'
                         );

                     print_debuginfo(l_module_name, 'Setting payment '
                         || 'request status to '
                         || l_request_status
                         || '.'
                         );
		      END IF;

                 ELSE

                     l_request_status := REQ_STATUS_USER_REVW;

                 END IF;

             ELSE

                 l_request_status := REQ_STATUS_PAY_CRTD;

             END IF;

         ELSE

             /*
              * If control come here, it means that there
              * are some payments that failed validation
              * and the rejecttion level is set to 'NONE'.
              *
              * This means that we should not kick back
              * the underlying documents back to AP. Instead,
              * we should set the PPR status to
              * REQ_STATUS_USER_REVW_ERR. This will allow
              * the user to review the failed payments
              * in the UI and take corrective action.
              */
             l_request_status := REQ_STATUS_USER_REVW_ERR;

             /*
              * Fix for bug 6709700:
              *
              * By default, when a payment fails validation
              * it is set to PAY_STATUS_REJECTED status. This indicates
              * a hard failure and the constituent documents of the
              * payment will be kicked back to the calling app.
              *
              * However, when th rejection level is set to NONE,
              * the user wishes to review the failed payments.
              * Therefore, we should soft-fail the payments
              * that fail validation and not kick back the
              * underlying documents back to the calling app.
              *
              * For the soft failure of the ayment, we use
              * a separate status - PAY_STATUS_FAIL_VALID.
              *
              * Update all the payments that are in PAY_STATUS_REJECTED
              * status to PAY_STATUS_FAIL_VALID.
              */
             FOR j in  x_paymentTab.FIRST ..  x_paymentTab.LAST LOOP

                 IF (x_paymentTab(j).payment_status = PAY_STATUS_REJECTED) THEN

                     x_paymentTab(j).payment_status :=
                         PAY_STATUS_FAIL_VALID;

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Updating payment '
                         || x_paymentTab(j).payment_id
                         || ' to soft failure status.'
                         );
                     END IF;
                 END IF;

             END LOOP;

         END IF; -- if all success == true

     ELSE

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'Unknown rejection level: '
             || p_rej_level
             || '. Aborting payment creation ..',
             FND_LOG.LEVEL_UNEXPECTED
             );
         END IF;

         APP_EXCEPTION.RAISE_EXCEPTION;

     END IF;

     /*
      * All payments for this payment request have been
      * created and stored in a PLSQL table. Now write these
      * payments to the database.
      */
     /* not needed in here as all updates have happened */
    -- updatePayments(x_paymentTab);

     /*
      * Update the documents table by providing a payment id to
      * each document.
      */
     updateDocsWithPaymentID(x_docsInPmtTab);

     /*
      * If any payments/documents were failed, the IBY_TRANSACTION_
      * ERRORS table must be populated with the corresponding error
      * messages.
      */
     IBY_VALIDATIONSETS_PUB.insert_transaction_errors('N', x_docErrorTab,
         x_errTokenTab);

     /*
      * Update the status of the payment request.
      */
     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'Updating status of payment request '
         || p_payreq_id || ' to ' || l_request_status || '.');
     END IF;

     UPDATE
         iby_pay_service_requests
     SET
         payment_service_request_status = l_request_status
     WHERE
         payment_service_request_id = p_payreq_id
     ;

     /* Pass back the request status to the caller */
     x_return_status := l_request_status;

     /*
      * Pass the 'all payments success' and 'all payments
      * failed' flags back to the caller.
      *
      * These flag will be used in raising business events.
      */
     x_allPmtsSuccessFlag := l_allsuccess_flag;
     x_allPmtsFailedFlag  := l_allfailed_flag;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'EXIT');
      END IF;

 EXCEPTION

     WHEN OTHERS THEN
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'Fatal: Exception when updating '
             || 'payment request/payment/document status after payment '
             || 'creation. All changes will be rolled back. Payment request '
             || 'id is ' || p_payreq_id, FND_LOG.LEVEL_UNEXPECTED);
         print_debuginfo(l_module_name, 'SQL code: '   || SQLCODE,
             FND_LOG.LEVEL_UNEXPECTED);
         print_debuginfo(l_module_name, 'SQL err msg: '|| SQLERRM,
             FND_LOG.LEVEL_UNEXPECTED);
         END IF;

         /*
          * Propogate exception to caller.
          */
         RAISE;

 END performDBUpdates;

/*--------------------------------------------------------------------
 | NAME:
 |     performDBUpdates
 |
 | PURPOSE:
 |     This is the top level method that is called by the
 |     payment creation program to:
 |         1. insert payments to DB
 |         2. update documents with payment id
 |         3. update status of payment request
 |
 |     This method will read the 'rejection level' system option
 |     and do updates accordingly.
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE performDBUpdates(
     p_payreq_id          IN            IBY_PAY_SERVICE_REQUESTS.
                                          payment_service_request_id%type,
     p_rej_level          IN            VARCHAR2,
     p_review_pmts_flag   IN            VARCHAR2,
 --    x_paymentTab         IN OUT NOCOPY paymentTabType,
 --     x_docsInPmtTab       IN OUT NOCOPY docsInPaymentTabType,
     x_allPmtsSuccessFlag IN OUT NOCOPY BOOLEAN,
     x_allPmtsFailedFlag  IN OUT NOCOPY BOOLEAN,
     x_return_status      IN OUT NOCOPY VARCHAR2,
     x_docErrorTab        IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.docErrorTabType,
     x_errTokenTab        IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.
                                            trxnErrTokenTabType
     )
 IS
 l_module_name       CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                   '.performDBUpdates';
 l_allsuccess_flag   VARCHAR2(1) := 'Y';
 l_allfailed_flag    VARCHAR2(1) := 'Y';
 l_request_status    VARCHAR2(200);
 l_orig_req_status   VARCHAR2(200);

 l_pmt_count	     NUMBER;
 l_doc_err_rec       IBY_TRANSACTION_ERRORS%ROWTYPE;
 l_triggering_pmt_id IBY_PAYMENTS_ALL.payment_id%TYPE;

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     /*
      * Store the original ppr status as it is useful in
      * determining the next status in some cases.
      */
     l_orig_req_status := x_return_status;
     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'Original request status = '
         || l_orig_req_status
         );
     END IF;
     /*
      * Print the rejection level system option
      */
     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'Rejection level system option set to: '
         || p_rej_level);
     END IF;
     /*
      * Find out whether all the payments within this
      * payment request have 'success' status. This
      * information is used below.
      */
     /*
     FOR i in  x_paymentTab.FIRST ..  x_paymentTab.LAST LOOP
         IF (x_paymentTab(i).payment_status <> PAY_STATUS_CREATED) THEN
             l_triggering_pmt_id := x_paymentTab(i).payment_id;
             l_allsuccess_flag := FALSE;
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'At least one payment has '
                 || 'failed validation.');
             END IF;
             EXIT WHEN (1=1);
         END IF;
     END LOOP;
     */


     Begin
     SELECT 'N'
     INTO l_allsuccess_flag
     from DUAL
     WHERE EXISTS
     (SELECT 1 FROM IBY_PAYMENTS_ALL
      WHERE PAYMENT_STATUS <> PAY_STATUS_CREATED
      AND payment_service_request_id =p_payreq_id
     );
     EXCEPTION
     WHEN No_Data_Found THEN

     l_allsuccess_flag := 'Y';
     END;

     select count(payment_id)
     into l_pmt_count
     from iby_payments_all
     where payment_service_request_id = p_payreq_id
     AND payment_status <> PAY_STATUS_CREATED
     ;
    print_debuginfo(l_module_name, 'l_pmt_count -' || l_pmt_count);
    print_debuginfo(l_module_name, 'l_allsuccess_flag -' || l_allsuccess_flag);

     /*
      * Check if all payments have failed for this
      * payment request. This information is used below.
      */
     /*
     FOR i in  x_paymentTab.FIRST .. x_paymentTab.LAST LOOP
         IF (x_paymentTab(i).payment_status = PAY_STATUS_CREATED) THEN
             l_allfailed_flag := FALSE;
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'At least one payment has '
                 || 'has been successfully validated.');
             END IF;
             EXIT WHEN (1=1);
         END IF;
     END LOOP;
     */

     begin
     SELECT 'N'
     INTO l_allfailed_flag
     from DUAL
     WHERE EXISTS
     (SELECT 1 FROM IBY_PAYMENTS_ALL
      WHERE PAYMENT_STATUS = PAY_STATUS_CREATED
      AND payment_service_request_id =p_payreq_id
     );

     EXCEPTION
     WHEN No_Data_Found THEN
      l_allfailed_flag := 'Y';
     END;
    print_debuginfo(l_module_name, 'l_allfailed_flag -' || l_allfailed_flag);
     /*
      * Update the status of the payments/documents
      * as per the rejection level (if necessary).
      */
     IF (p_rej_level = REJ_LVL_REQUEST) THEN

         IF (l_allsuccess_flag = 'N') THEN
             /*
              * This means that at least one payment in this
              * payment request has failed.
              *
              * For 'request' rejection level:
              * If any payment in the request fails validation,
              * the entire payment request should be rejected;
              * So fail all payments in this payment request.
              */
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Failing all payments and '
                     || 'documents for payment request '
                     || p_payreq_id);
             END IF;


             FOR i in  IBY_PAYGROUP_PUB.pmtTable.payment_id.FIRST ..  IBY_PAYGROUP_PUB.pmtTable.payment_id.LAST LOOP

	  print_debuginfo(l_module_name,'IBY_PAYGROUP_PUB.pmtTable.payment_id(i) ' || IBY_PAYGROUP_PUB.pmtTable.payment_id(i));


                 IF (IBY_PAYGROUP_PUB.pmtTable.payment_status(i) = PAY_STATUS_CREATED) THEN



		    IBY_PAYGROUP_PUB.pmtTable.payment_status(i) :=
                         PAY_STATUS_FAIL_BY_REJLVL;


                     /*
                      * Once we fail a payment, we need to create
                      * an error record and insert this record
                      * into the errors table.
                      */
                     IBY_BUILD_UTILS_PKG.createErrorRecord(
                         TRXN_TYPE_PMT,
                         IBY_PAYGROUP_PUB.pmtTable.payment_id(i),
                         IBY_PAYGROUP_PUB.pmtTable.payment_status(i),
                         NULL,
                         IBY_PAYGROUP_PUB.pmtTable.payment_id(i),
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         l_doc_err_rec,
                         x_errTokenTab,
                         l_triggering_pmt_id
                         );

                     IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                         l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                     failDocsOfPayment(IBY_PAYGROUP_PUB.pmtTable.payment_id(i),
                         DOC_STATUS_PAY_VAL_FAIL,
                         x_docErrorTab,
                         x_errTokenTab);

                 END IF;

             END LOOP;

             /* set the status of the payment request to failed */
             l_request_status := REQ_STATUS_FAIL_PAY_CR;

         ELSE

             IF (UPPER(p_review_pmts_flag) = 'Y') THEN

                 IF (l_orig_req_status = 'RETRY_PAYMENT_CREATION') THEN

                     /*
                      * Fix for bug 5209530:
                      *
                      * If the pmts of a payment request have already
                      * been reviewed and the payment request has
                      * re-entered the pmt creation flow, then the pmts
                      * will again been validated.
                      *
                      * If all pmts are successful, do not again ask the
                      * user to review the payments, instead allow
                      * the ppr to proceed formward.
                      *
                      * For example, when documents of a pmt(s) are
                      * dismissed and the pmts have been re-validated,
                      * and there are no errors allow the ppr to
                      * proceed forward instead of setting it for
                      * user review again.
                      */
                     l_request_status := REQ_STATUS_PAY_CRTD;

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Payment request is '
                         || 're-entering payment creation and all payments '
                         || 'are valid. User need not review pmts again.'
                         );

                     print_debuginfo(l_module_name, 'Setting payment '
                         || 'request status to '
                         || l_request_status
                         || '.'
                         );
		      END IF;

                 ELSE


                     /*
                      * If review proposed payments flag is set, then
                      * move successful payment requests also to
                      * 'pending review' status.
                      */
                     l_request_status := REQ_STATUS_USER_REVW;
                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Review proposed payments '
                         || 'flag has been set. Setting status of successful '
                         || 'request to pending review.');
		     END IF;
                 END IF;

             ELSE

                 /* set the status of the payment request to pmts created */
                 l_request_status := REQ_STATUS_PAY_CRTD;

             END IF;

         END IF;

     ELSIF (p_rej_level = REJ_LVL_PAYMENT) THEN
      print_debuginfo(l_module_name,'Inside the rejection level chk -if payments');
         /*
          * Check if all payments in the request have failed.
          */
         IF (l_allfailed_flag = 'Y') THEN

             l_request_status := REQ_STATUS_FAIL_PAY_CR;

         ELSE

             /*
              * At least one payment in the request was
              * successful.
              */
             IF (UPPER(p_review_pmts_flag) = 'Y') THEN

                 IF (l_orig_req_status = 'RETRY_PAYMENT_CREATION') THEN

                     /*
                      * Fix for bug 5209530:
                      *
                      * If the pmts of a payment request have already
                      * been reviewed and the payment request has
                      * re-entered the pmt creation flow, then the pmts
                      * will again been validated.
                      *
                      * If all pmts are successful, do not again ask the
                      * user to review the payments, instead allow
                      * the ppr to proceed formward.
                      *
                      * For example, when documents of a pmt(s) are
                      * dismissed and the pmts have been re-validated,
                      * and there are no errors allow the ppr to
                      * proceed forward instead of setting it for
                      * user review again.
                      */
                     l_request_status := REQ_STATUS_PAY_CRTD;

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Payment request is '
                         || 're-entering payment creation and all payments '
                         || 'are valid. User need not review pmts again.'
                         );

                     print_debuginfo(l_module_name, 'Setting payment '
                         || 'request status to '
                         || l_request_status
                         || '.'
                         );
		      END IF;

                 ELSE

                     /*
                      * If review proposed payments flag is set, then
                      * move successful payment requests also to
                      * 'pending review' status.
                      */
                     l_request_status := REQ_STATUS_USER_REVW;

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Review proposed payments '
                         || 'flag has been set. Setting status of successful '
                         || 'request to pending review.');
		     END IF;
                 END IF;

             ELSE

                 /* set the status of the payment request to pmts created */
                 l_request_status := REQ_STATUS_PAY_CRTD;

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Review proposed payments '
                     || 'flag has not been set. Setting status of successful '
                     || 'request to created.');
                 END IF;

             END IF;

         END IF;
 /* Bug 8209474 */
     ELSIF (p_rej_level = REJ_LVL_PAYEE) THEN

         IF (l_allsuccess_flag = 'N') THEN
             /*
              * This means that at least one payment in this
              * payment request has failed.
              *
              * For 'request' rejection level:
              * If any payment in the request fails validation,
              * the entire payment request should be rejected;
              * So fail all payments in this payment request.
              */


             FOR i in  IBY_PAYGROUP_PUB.pmtTable.payment_id.FIRST ..  IBY_PAYGROUP_PUB.pmtTable.payment_id.LAST LOOP

	  print_debuginfo(l_module_name,'IBY_PAYGROUP_PUB.pmtTable.payment_id(i) ' || IBY_PAYGROUP_PUB.pmtTable.payment_id(i));


                 IF (l_payeeTab.EXISTS(IBY_PAYGROUP_PUB.pmtTable.ext_payee_id(i))) THEN
		    IBY_PAYGROUP_PUB.pmtTable.payment_status(i) :=
                         PAY_STATUS_FAIL_BY_REJLVL;


                     /*
                      * Once we fail a payment, we need to create
                      * an error record and insert this record
                      * into the errors table.
                      */
                     IBY_BUILD_UTILS_PKG.createErrorRecord(
                         TRXN_TYPE_PMT,
                         IBY_PAYGROUP_PUB.pmtTable.payment_id(i),
                         IBY_PAYGROUP_PUB.pmtTable.payment_status(i),
                         NULL,
                         IBY_PAYGROUP_PUB.pmtTable.payment_id(i),
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         l_doc_err_rec,
                         x_errTokenTab,
                         l_triggering_pmt_id
                         );

                     IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                         l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                     failDocsOfPayment(IBY_PAYGROUP_PUB.pmtTable.payment_id(i),
                         DOC_STATUS_PAY_VAL_FAIL,
                         x_docErrorTab,
                         x_errTokenTab);

                 END IF;

             END LOOP;
             /* set the status of the payment request */
             IF (UPPER(p_review_pmts_flag) = 'Y') THEN

                 IF (l_orig_req_status = 'RETRY_PAYMENT_CREATION') THEN

                     /*
                      * Fix for bug 5209530:
                      *
                      * If the pmts of a payment request have already
                      * been reviewed and the payment request has
                      * re-entered the pmt creation flow, then the pmts
                      * will again been validated.
                      *
                      * If all pmts are successful, do not again ask the
                      * user to review the payments, instead allow
                      * the ppr to proceed formward.
                      *
                      * For example, when documents of a pmt(s) are
                      * dismissed and the pmts have been re-validated,
                      * and there are no errors allow the ppr to
                      * proceed forward instead of setting it for
                      * user review again.
                      */
                     l_request_status := REQ_STATUS_PAY_CRTD;

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Payment request is '
                         || 're-entering payment creation and all payments '
                         || 'are valid. User need not review pmts again.'
                         );

                     print_debuginfo(l_module_name, 'Setting payment '
                         || 'request status to '
                         || l_request_status
                         || '.'
                         );
		      END IF;

                 ELSE


                     /*
                      * If review proposed payments flag is set, then
                      * move successful payment requests also to
                      * 'pending review' status.
                      */
                     l_request_status := REQ_STATUS_USER_REVW;
                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Review proposed payments '
                         || 'flag has been set. Setting status of successful '
                         || 'request to pending review.');
		     END IF;
                 END IF;

             ELSE

                 /* set the status of the payment request to pmts created */
                 l_request_status := REQ_STATUS_PAY_CRTD;

             END IF;

         ELSE

             IF (UPPER(p_review_pmts_flag) = 'Y') THEN

                 IF (l_orig_req_status = 'RETRY_PAYMENT_CREATION') THEN

                     /*
                      * Fix for bug 5209530:
                      *
                      * If the pmts of a payment request have already
                      * been reviewed and the payment request has
                      * re-entered the pmt creation flow, then the pmts
                      * will again been validated.
                      *
                      * If all pmts are successful, do not again ask the
                      * user to review the payments, instead allow
                      * the ppr to proceed formward.
                      *
                      * For example, when documents of a pmt(s) are
                      * dismissed and the pmts have been re-validated,
                      * and there are no errors allow the ppr to
                      * proceed forward instead of setting it for
                      * user review again.
                      */
                     l_request_status := REQ_STATUS_PAY_CRTD;

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Payment request is '
                         || 're-entering payment creation and all payments '
                         || 'are valid. User need not review pmts again.'
                         );

                     print_debuginfo(l_module_name, 'Setting payment '
                         || 'request status to '
                         || l_request_status
                         || '.'
                         );
		      END IF;

                 ELSE


                     /*
                      * If review proposed payments flag is set, then
                      * move successful payment requests also to
                      * 'pending review' status.
                      */
                     l_request_status := REQ_STATUS_USER_REVW;
                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Review proposed payments '
                         || 'flag has been set. Setting status of successful '
                         || 'request to pending review.');
		     END IF;
                 END IF;

             ELSE

                 /* set the status of the payment request to pmts created */
                 l_request_status := REQ_STATUS_PAY_CRTD;

             END IF;

         END IF;
     ELSIF (p_rej_level = REJ_LVL_NONE) THEN

         IF (l_allsuccess_flag = 'Y') THEN

             IF (UPPER(p_review_pmts_flag) = 'Y') THEN

                 IF (l_orig_req_status = 'RETRY_PAYMENT_CREATION') THEN

                     /*
                      * Fix for bug 5209530:
                      *
                      * If the pmts of a payment request have already
                      * been reviewed and the payment request has
                      * re-entered the pmt creation flow, then the pmts
                      * will again been validated.
                      *
                      * If all pmts are successful, do not again ask the
                      * user to review the payments, instead allow
                      * the ppr to proceed formward.
                      *
                      * For example, when documents of a pmt(s) are
                      * dismissed and the pmts have been re-validated,
                      * and there are no errors allow the ppr to
                      * proceed forward instead of setting it for
                      * user review again.
                      */
                     l_request_status := REQ_STATUS_PAY_CRTD;

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Payment request is '
                         || 're-entering payment creation and all payments '
                         || 'are valid. User need not review pmts again.'
                         );

                     print_debuginfo(l_module_name, 'Setting payment '
                         || 'request status to '
                         || l_request_status
                         || '.'
                         );
		      END IF;

                 ELSE

                     l_request_status := REQ_STATUS_USER_REVW;

                 END IF;

             ELSE

                 l_request_status := REQ_STATUS_PAY_CRTD;

             END IF;

         ELSE

             /*
              * If control come here, it means that there
              * are some payments that failed validation
              * and the rejecttion level is set to 'NONE'.
              *
              * This means that we should not kick back
              * the underlying documents back to AP. Instead,
              * we should set the PPR status to
              * REQ_STATUS_USER_REVW_ERR. This will allow
              * the user to review the failed payments
              * in the UI and take corrective action.
              */
             l_request_status := REQ_STATUS_USER_REVW_ERR;

             /*
              * Fix for bug 6709700:
              *
              * By default, when a payment fails validation
              * it is set to PAY_STATUS_REJECTED status. This indicates
              * a hard failure and the constituent documents of the
              * payment will be kicked back to the calling app.
              *
              * However, when th rejection level is set to NONE,
              * the user wishes to review the failed payments.
              * Therefore, we should soft-fail the payments
              * that fail validation and not kick back the
              * underlying documents back to the calling app.
              *
              * For the soft failure of the ayment, we use
              * a separate status - PAY_STATUS_FAIL_VALID.
              *
              * Update all the payments that are in PAY_STATUS_REJECTED
              * status to PAY_STATUS_FAIL_VALID.
              */
             FOR j in  IBY_PAYGROUP_PUB.pmtTable.payment_id.FIRST ..  IBY_PAYGROUP_PUB.pmtTable.payment_id.LAST LOOP

                 IF (IBY_PAYGROUP_PUB.pmtTable.payment_status(j) = PAY_STATUS_REJECTED) THEN

                     IBY_PAYGROUP_PUB.pmtTable.payment_status(j) :=
                         PAY_STATUS_FAIL_VALID;

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Updating payment '
                         || IBY_PAYGROUP_PUB.pmtTable.payment_id(j)
                         || ' to soft failure status.'
                         );
                     END IF;
                 END IF;

             END LOOP;

         END IF; -- if all success == true

     ELSE

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'Unknown rejection level: '
             || p_rej_level
             || '. Aborting payment creation ..',
             FND_LOG.LEVEL_UNEXPECTED
             );
         END IF;

         APP_EXCEPTION.RAISE_EXCEPTION;

     END IF;

     /*
      * All payments for this payment request have been
      * created and stored in a PLSQL table. Now write these
      * payments to the database.
      */
   --  updatePayments(x_paymentTab);
     updatePayments;

     /*
      * Update the documents table by providing a payment id to
      * each document.
      */
     updateDocsWithPaymentID;

     /*
      * If any payments/documents were failed, the IBY_TRANSACTION_
      * ERRORS table must be populated with the corresponding error
      * messages.
      */
     IBY_VALIDATIONSETS_PUB.insert_transaction_errors('N', x_docErrorTab,
         x_errTokenTab);

     /*
      * Update the status of the payment request.
      */
     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'Updating status of payment request '
         || p_payreq_id || ' to ' || l_request_status || '.');
     END IF;

     UPDATE
         iby_pay_service_requests
     SET
         payment_service_request_status = l_request_status
     WHERE
         payment_service_request_id = p_payreq_id
     ;

     /* Pass back the request status to the caller */
     x_return_status := l_request_status;

     /*
      * Pass the 'all payments success' and 'all payments
      * failed' flags back to the caller.
      *
      * These flag will be used in raising business events.
      */
      -- re-written because dataype of flag is changed

     IF (l_allsuccess_flag ='Y') THEN
     x_allPmtsSuccessFlag := TRUE;
     ELSE
     x_allPmtsSuccessFlag := FALSE;
     END IF;


     IF (l_allfailed_flag ='Y') THEN
     x_allPmtsFailedFlag := TRUE;
     ELSE
     x_allPmtsFailedFlag := FALSE;
     END IF;

    -- x_allPmtsFailedFlag  := l_allfailed_flag;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'EXIT');
      END IF;

 EXCEPTION

     WHEN OTHERS THEN
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'Fatal: Exception when updating '
             || 'payment request/payment/document status after payment '
             || 'creation. All changes will be rolled back. Payment request '
             || 'id is ' || p_payreq_id, FND_LOG.LEVEL_UNEXPECTED);
         print_debuginfo(l_module_name, 'SQL code: '   || SQLCODE,
             FND_LOG.LEVEL_UNEXPECTED);
         print_debuginfo(l_module_name, 'SQL err msg: '|| SQLERRM,
             FND_LOG.LEVEL_UNEXPECTED);
         END IF;

         /*
          * Propogate exception to caller.
          */
         RAISE;

 END performDBUpdates;

/*--------------------------------------------------------------------
 | NAME:
 |     applyPaymentValidationSets
 |
 | PURPOSE:
 |     Invokes the validation sets applicable to every payment. The
 |     status of the payment will be set to 'validation failed' if
 |     the payment fails any invoked validation.
 |
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE applyPaymentValidationSets(
     p_payment_request_id   IN IBY_PAY_SERVICE_REQUESTS.
 	                                    payment_service_request_id%TYPE,

     x_paymentTab    IN OUT NOCOPY paymentTabType,
     x_docsInPmtTab  IN OUT NOCOPY docsInPaymentTabType,
     x_docErrorTab   IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.docErrorTabType,
     x_errTokenTab   IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.trxnErrTokenTabType
     )
 IS

 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.applyPaymentValidationSets';
 l_valSetsTab  IBY_PAYGROUP_PUB.paymentValSetsTab;
 l_stmt        VARCHAR2(200);
 l_result      NUMBER := 0;
 l_check_val   BOOLEAN := FALSE;

 /*
  * Pick up all validation sets applicable to a particular payment.
  */

 /*
  * Pick up all validation sets applicable to a particular payment.
  */
 CURSOR  c_pmt_val_sets(p_payment_id IBY_PAYMENTS_ALL.payment_id%TYPE)
 IS
 SELECT DISTINCT
     val_asgn.validation_assignment_id,
     val_asgn.val_assignment_entity_type,
     val.validation_set_display_name,
     val.validation_set_code,
     val.validation_code_package,
     val.validation_code_entry_point
 FROM
     IBY_VALIDATION_SETS_VL    val,
     IBY_VAL_ASSIGNMENTS       val_asgn,
     IBY_PAYMENTS_ALL          pmts,
     IBY_SYS_PMT_PROFILES_B    sys_prof,
     IBY_ACCT_PMT_PROFILES_B   acct_prof,
     IBY_TRANSMIT_CONFIGS_B    txconf,
     IBY_TRANSMIT_PROTOCOLS_B  txproto,
     CE_BANK_ACCOUNTS          iba,
     CE_BANK_BRANCHES_V        iba_branch
 WHERE
     pmts.payment_id               = p_payment_id
     AND pmts.internal_bank_account_id = iba.bank_account_id
     AND iba_branch.branch_party_id    = iba.bank_branch_id
     AND val.validation_set_code   = val_asgn.validation_set_code
     AND val.validation_level_code = 'PAYMENT'
     AND (val_asgn.val_assignment_entity_type    = 'METHOD'
              AND val_asgn.assignment_entity_id  =
                      pmts.payment_method_code
          OR val_asgn.val_assignment_entity_type = 'INTBANKACCOUNT'
              AND val_asgn.assignment_entity_id  =
                  to_char(pmts.internal_bank_account_id)
          OR val_asgn.val_assignment_entity_type = 'FORMAT'
              AND val_asgn.assignment_entity_id  =
                  sys_prof.payment_format_code
          OR val_asgn.val_assignment_entity_type = 'BANK'
              AND val_asgn.assignment_entity_id  =
                  to_char(sys_prof.bepid)
          OR val_asgn.val_assignment_entity_type = 'TRANSPROTOCOL'
              AND val_asgn.assignment_entity_id  =
                  txconf.transmit_protocol_code
          )
     AND pmts.payment_profile_id        = acct_prof.payment_profile_id(+)
     AND acct_prof.transmit_configuration_id
                                        = txconf.transmit_configuration_id(+)
     AND txconf.transmit_protocol_code  = txproto.transmit_protocol_code(+)
     AND sys_prof.system_profile_code(+) = acct_prof.system_profile_code
     AND NVL(val_asgn.inactive_date, sysdate+1) > sysdate

     /*
      * Fix for bug 4997133:
      *
      * Pick up all applicable validation sets that match
      * the payment method and country code on this payment.
      * (if payment method /country code on validation
      * set is null, it means that the validation set is
      * applicable to all payment methods / countries).
      */
     AND (NVL(pmts.payment_method_code, '0') =
             NVL(val_asgn.payment_method_code, '0') OR
             val_asgn.payment_method_code IS NULL
         )
     AND (iba_branch.country = val_asgn.territory_code OR
         val_asgn.territory_code IS NULL
         )
     ;

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'ENTER');
     END IF;


     /*
      * Performance Fix:
      *
      * Instead of calling IBY_BUILD_UTILS_PKG.inactivateOldErrors(..)
      * once per payment, delete all the error messages linked
      * to the payments of this PPR, and reset the payment status
      * of the failed payments in one shot.
      */
     IBY_BUILD_UTILS_PKG.resetPaymentErrors(p_payment_request_id);


     FOR i in  x_paymentTab.FIRST ..  x_paymentTab.LAST LOOP

         /*
          * Pick up the validation sets applicable to this
          * payment.
          */
         OPEN  c_pmt_val_sets(x_paymentTab(i).payment_id);
         FETCH c_pmt_val_sets BULK COLLECT INTO l_valSetsTab;
         CLOSE c_pmt_val_sets;

         IF (l_valSetsTab.COUNT = 0) THEN

             /*
              * Fix for bug 5742548:
              *
              * If no validation sets are applicable this
              * time round, then this payment will pass
              * validation.
              *
              * But it is possible that this payment has
              * failed validation earlier, in which cas
              * the old errors will still be active against
              * this payment.
              *
              * Inactivate the old errors so that the UI
              * correctly shows that there are no active
              * validation errors against this payment
              * at this time.
              */
          --   IBY_BUILD_UTILS_PKG.inactivateOldErrors(
          --       x_paymentTab(i).payment_id,
          --       TRXN_TYPE_PMT
          --       );

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'No validation sets were '
                 || 'linked to payment '
                 || x_paymentTab(i).payment_id
                 || ' Skipping payment '
                 || 'validations for this payment..');

             print_debuginfo(l_module_name, '+-------------------------+');
	     END IF;

         ELSE

             FOR j in l_valSetsTab.FIRST .. l_valSetsTab.LAST LOOP

                 /*
                  * Fix for bug 5440434:
                  *
                  * Before doing any validations, set any
                  * existing validation error messages that
                  * exist against this payment to 'inactive'
                  * status in the IBY_TRANSACTION_ERRORS table.
                  *
                  * Unless we do this, the old errors will
                  * continue to show up against this payment
                  * in the IBY UI even if the payment is validated
                  * successfully this time round.
                  */
                -- IBY_BUILD_UTILS_PKG.inactivateOldErrors(
                --     x_paymentTab(i).payment_id,
                --     TRXN_TYPE_PMT
                --     );

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Applicable validation set ('
                     || l_valSetsTab(j).val_assign_entity_type
                     || ') : '
                     || l_valSetsTab(j).val_set_name
                     );
	        END IF;
                 /*
                  * Dynamically call the validation set applicable
                  * to the current payment.
                  */
                 l_stmt := 'CALL '
                               || l_valSetsTab(j).val_code_pkg
                               || '.'
                               || l_valSetsTab(j).val_code_entry_pt
                               || '(:1,:2,:3,:4,:5)';

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Calling ' || l_stmt);
		 END IF;

                 EXECUTE IMMEDIATE (l_stmt) USING
                     IN l_valSetsTab(j).val_assign_id,
                     IN l_valSetsTab(j).val_set_code,
                     IN x_paymentTab(i).payment_id,
                     IN 'N',
                     OUT l_result;

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Finished executing '
                     || l_stmt);

                 print_debuginfo(l_module_name, 'Result: '
                     || l_result);
                 END IF;
                 /*
                  * If payment fails validation, then:
                  * 1. Set the status of the payment to failed
                  * 2. Fail all docs of this payment
                  */
                 IF (l_result <> 0) THEN

                     /*
                      * Check if the payment has already been failed.
                      */
                     l_check_val := checkIfPmtAlreadyFailed(
                                        x_paymentTab(i).payment_id,
                                        x_paymentTab
                                        );

                     /*
                      * If a payment has not been failed before,
                      * fail the payment and its child documents.
                      *
                      * Otherwise, skip this step.
                      */
                     IF (l_check_val = FALSE) THEN

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                         print_debuginfo(l_module_name, 'Payment '
                             || x_paymentTab(i).payment_id
                             || ' failed validation.');
                         END IF;
                         x_paymentTab(i).payment_status
                             := PAY_STATUS_REJECTED;
		/*Bug 8209474*/
                          l_invalid_payee_index:= x_paymentTab(i).ext_payee_id;

                          IF (l_payeeTab.EXISTS(x_paymentTab(i).ext_payee_id)) then
                             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                              print_debuginfo(l_module_name, 'Payee already in invalid payee list');
                             END IF;
                          Else
                            IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                              print_debuginfo(l_module_name, 'Adding Payee:'||l_invalid_payee_index||
                               ' to Invalid Payee List');
                             END IF;
                            l_payeeTab(l_invalid_payee_index) := x_paymentTab(i).payment_id;
                          END IF;

                         /*
                          * Validation error messages against the payment
                          * will be handled by the validation set itself.
                          * So no need to create an error record for the
                          * payment here.
                          */

                         /*
                          * For the failed payment, set the status of its
                          * child documents to failed as well.
                          */

                         failDocsOfPayment(x_paymentTab(i).payment_id,
                             DOC_STATUS_PAY_VAL_FAIL, x_docsInPmtTab,
                             x_docErrorTab, x_errTokenTab);

                     ELSE

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                         print_debuginfo(l_module_name, 'Payment '
                             || x_paymentTab(i).payment_id
                             || ' has already failed validation.'
                             || '. No need to fail this payment and '
                             || 'its child documents again.'
                             );
			END IF;
                     END IF; -- if l_check_val = FALSE

                 END IF; -- result <> 0

                 print_debuginfo(l_module_name, '+-------------------------+');

             END LOOP; -- for each val set applicable to this payment

         END IF; -- if count of val sets <> 0

     END LOOP; -- for each payment in this payment request

     print_debuginfo(l_module_name, 'EXIT');

 END applyPaymentValidationSets;

/*--------------------------------------------------------------------
 | NAME:
 |     applyPaymentValidationSets
 |
 | PURPOSE:
 |     Invokes the validation sets applicable to every payment. The
 |     status of the payment will be set to 'validation failed' if
 |     the payment fails any invoked validation.
 |
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE applyPaymentValidationSets(
     p_payment_request_id   IN IBY_PAY_SERVICE_REQUESTS.
                                   payment_service_request_id%TYPE,

   --  x_paymentTab    IN OUT NOCOPY paymentTabType,
     l_trx_valid_index  IN BINARY_INTEGER,
     x_docErrorTab   IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.docErrorTabType,
     x_errTokenTab   IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.trxnErrTokenTabType
     )
 IS

 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.applyPaymentValidationSets';
 l_valSetsTab            paymentValSetsTab;
 l_val_set_index         VARCHAR2(4000);
 l_val_sets_count        NUMBER := 0;
 l_stmt        VARCHAR2(200);
 l_result      NUMBER := 0;
 l_check_val   BOOLEAN := FALSE;
 l_error_code    VARCHAR2(100);
 l_doc_err_rec   IBY_TRANSACTION_ERRORS%ROWTYPE;



-- int_bank_acct_tbl  internalBankAcctTabType;

 int_bnk_index      VARCHAR2(2000);
 l_int_bank_acct_id               CE_BANK_ACCOUNTS.bank_account_id%TYPE;
 l_country                        CE_BANK_BRANCHES_V.country%TYPE;
 l_bank_home_country              CE_BANK_BRANCHES_V.bank_home_country%TYPE;
 l_allow_zero_pmt_flag            CE_BANK_ACCOUNTS.zero_amount_allowed%TYPE;

 l_profile_id                     IBY_PAYMENT_PROFILES.payment_profile_id%TYPE;
 l_payment_format_cd              IBY_PAYMENT_PROFILES.payment_format_code%TYPE;
 l_bepid                          IBY_PAYMENT_PROFILES.bepid%TYPE;
 l_transmit_protocol_cd           IBY_PAYMENT_PROFILES.transmit_protocol_code%TYPE;


 -- l_profile_format_tab    profileFormatTabType;

 /*
  * Pick up all validation sets applicable to a particular payment.
  */

 /*
  * Pick up all validation sets applicable to a particular payment.
  */

     CURSOR  c_pmt_val_sets(p_payment_id IBY_PAYMENTS_ALL.payment_id%TYPE,
		      p_payment_method_code               IBY_PAYMENTS_ALL.payment_method_code%TYPE,
 	              p_int_bank_acct_id                  IBY_PAYMENTS_ALL.internal_bank_account_id%TYPE,
		      p_payment_format_code               IBY_PAYMENT_PROFILES.payment_format_code%TYPE,
 	              p_bepid                             IBY_PAYMENT_PROFILES.bepid%TYPE,
 	              p_transmit_protocol_code            IBY_PAYMENT_PROFILES.transmit_protocol_code%TYPE,
 	              p_country                           CE_BANK_BRANCHES_V.country%TYPE)
 IS
 SELECT DISTINCT
     val_asgn.validation_assignment_id,
     val_asgn.val_assignment_entity_type,
     val.validation_set_display_name,
     val.validation_set_code,
     val.validation_code_package,
     val.validation_code_entry_point
 FROM
     IBY_VALIDATION_SETS_VL    val,
     IBY_VAL_ASSIGNMENTS       val_asgn
 --    IBY_PAYMENTS_ALL          pmts,
   --  IBY_SYS_PMT_PROFILES_B    sys_prof,
     --IBY_ACCT_PMT_PROFILES_B   acct_prof,
       --IBY_TRANSMIT_CONFIGS_B    txconf,
         --IBY_TRANSMIT_PROTOCOLS_B  txproto,
           --CE_BANK_ACCOUNTS          iba,
            --CE_BANK_BRANCHES_V        iba_branch
 WHERE
     --pmts.payment_id               = p_payment_id
     --AND pmts.internal_bank_account_id = iba.bank_account_id
     --AND iba_branch.branch_party_id    = iba.bank_branch_id
     val.validation_set_code   = val_asgn.validation_set_code
     AND val.validation_level_code = 'PAYMENT'
     AND (val_asgn.val_assignment_entity_type    = 'METHOD'
              AND val_asgn.assignment_entity_id  =
                      p_payment_method_code
          OR val_asgn.val_assignment_entity_type = 'INTBANKACCOUNT'
              AND val_asgn.assignment_entity_id  =
                  to_char(p_int_bank_acct_id)
          OR val_asgn.val_assignment_entity_type = 'FORMAT'
              AND val_asgn.assignment_entity_id  =
                  p_payment_format_code
          OR val_asgn.val_assignment_entity_type = 'BANK'
              AND val_asgn.assignment_entity_id  =
                  to_char(p_bepid)
          OR val_asgn.val_assignment_entity_type = 'TRANSPROTOCOL'
              AND val_asgn.assignment_entity_id  =
                 p_transmit_protocol_code
          )
    -- AND pmts.payment_profile_id        = acct_prof.payment_profile_id(+)
    -- AND acct_prof.transmit_configuration_id = txconf.transmit_configuration_id(+)
   --  AND txconf.transmit_protocol_code  = txproto.transmit_protocol_code(+)
   --  AND sys_prof.system_profile_code(+) = acct_prof.system_profile_code
     AND NVL(val_asgn.inactive_date, sysdate+1) > sysdate

     /*
      * Fix for bug 4997133:
      *
      * Pick up all applicable validation sets that match
      * the payment method and country code on this payment.
      * (if payment method /country code on validation
      * set is null, it means that the validation set is
      * applicable to all payment methods / countries).
      */
     AND (NVL(p_payment_method_code, '0') =
             NVL(val_asgn.payment_method_code, '0') OR
             val_asgn.payment_method_code IS NULL
         )
     AND (p_country= val_asgn.territory_code OR
         val_asgn.territory_code IS NULL
         )
     ;


 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'ENTER');
     END IF;


     /*
      * Performance Fix:
      *
      * Instead of calling IBY_BUILD_UTILS_PKG.inactivateOldErrors(..)
      * once per payment, delete all the error messages linked
      * to the payments of this PPR, and reset the payment status
      * of the failed payments in one shot.
      */

      IF(resetErrtbl.EXISTS(p_payment_request_id))  THEN
       print_debuginfo(l_module_name, 'ResetPaymentErrors API is already called for this PPR');

      ELSE

       IBY_BUILD_UTILS_PKG.resetPaymentErrors(p_payment_request_id);

       /* cache the call */
       resetErrtbl(p_payment_request_id) := p_payment_request_id;

      END IF;



    -- FOR i in  x_paymentTab.FIRST ..  x_paymentTab.LAST LOOP

         /*
          * Pick up the validation sets applicable to this
          * payment.
          */

	 /*
         OPEN  c_pmt_val_sets(x_paymentTab(i).payment_id);
         FETCH c_pmt_val_sets BULK COLLECT INTO l_valSetsTab;
         CLOSE c_pmt_val_sets;
	 */
    int_bnk_index := Nvl(IBY_PAYGROUP_PUB.pmtTable.INTERNAL_BANK_ACCOUNT_ID(l_trx_valid_index),-999)||'$';
    print_debuginfo(l_module_name, 'int_bnk_index-'||int_bnk_index);

		IF (int_bank_acct_tbl.EXISTS(int_bnk_index)) THEN

 		print_debuginfo(l_module_name, 'Getting Data from Cache For Int bank acct Id: ' || int_bnk_index);

                l_country		 :=  int_bank_acct_tbl(int_bnk_index).country;
 	        l_bank_home_country	 :=  int_bank_acct_tbl(int_bnk_index).bank_home_country;
                l_allow_zero_pmt_flag    :=  int_bank_acct_tbl(int_bnk_index).allow_zero_pmt_flag;

 	        ELSE

          print_debuginfo(l_module_name ,'Data not found in cache, hitting DB again');

                BEGIN
                    SELECT cba.bank_account_id,
                     cb.country,
                     cb.bank_home_country,
		     cba.zero_amount_allowed
                     INTO l_int_bank_acct_id,
                     l_country,
                     l_bank_home_country,
		     l_allow_zero_pmt_flag
                     FROM CE_BANK_ACCOUNTS cba, CE_BANK_BRANCHES_V cb
                     WHERE cba.bank_branch_id = cb.branch_party_id
                     AND  cba.bank_account_id = IBY_PAYGROUP_PUB.pmtTable.INTERNAL_BANK_ACCOUNT_ID(l_trx_valid_index);


                EXCEPTION
                WHEN NO_DATA_FOUND THEN

                print_debuginfo(l_module_name, 'Exception No Data Found For Int Bank Account Id: ' ||int_bnk_index);
                            l_int_bank_acct_id := null;
                            l_country := null;
                            l_bank_home_country := null;
			    l_allow_zero_pmt_flag := null;
                END;
                int_bank_acct_tbl(int_bnk_index).internal_bank_account_id := l_int_bank_acct_id;
                int_bank_acct_tbl(int_bnk_index).country 		     := l_country;
                int_bank_acct_tbl(int_bnk_index).bank_home_country 	     := l_bank_home_country;

                print_debuginfo(l_module_name, 'After caching the data for int bank id -'||int_bnk_index);
                print_debuginfo(l_module_name, 'Data from cache -'||int_bank_acct_tbl(int_bnk_index).internal_bank_account_id);
                print_debuginfo(l_module_name, 'Country -'||int_bank_acct_tbl(int_bnk_index).country);
                print_debuginfo(l_module_name, 'After caching the data -'||int_bank_acct_tbl(int_bnk_index).bank_home_country );


		END IF;


/* Bug: 9452724*/
             IF (UPPER(l_allow_zero_pmt_flag) <> 'Y' AND
                IBY_PAYGROUP_PUB.pmtTable.payment_amount(l_trx_valid_index) = 0) THEN

                 IBY_PAYGROUP_PUB.pmtTable.payment_status(l_trx_valid_index)
                     := PAY_STATUS_REJECTED;

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		 print_debuginfo(l_module_name, 'Failed payment '
                     || IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_valid_index)
                     || ' because payment amount '
                     || IBY_PAYGROUP_PUB.pmtTable.payment_amount(l_trx_valid_index)
                     || ' is zero. Zero payments not'
                     || ' allowed for the bank account'
                     );

		 END IF;

                 l_error_code := 'IBY_ACCT_ZERO_PMT_NOT_ALLD';
                 FND_MESSAGE.set_name('IBY', l_error_code);

                 /*
                  * Once we fail a payment, we need to create
                  * an error record and insert this record
                  * into the errors table.
                  */
                 IBY_BUILD_UTILS_PKG.createPmtErrorRecord(
                     IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_valid_index),
                     IBY_PAYGROUP_PUB.pmtTable.payment_status(l_trx_valid_index),
                     l_error_code,
                     FND_MESSAGE.get,
                     l_doc_err_rec
                     );

                 IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                     l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                 /* fail the docs of this payment */
                 failDocsOfPayment(IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_valid_index),
                             DOC_STATUS_PAY_VAL_FAIL,
                             x_docErrorTab, x_errTokenTab);

             END IF;


/* Bug: 9452724**/


		IF (l_profile_format_tab.EXISTS(IBY_PAYGROUP_PUB.pmtTable.PAYMENT_PROFILE_ID(l_trx_valid_index) ) ) THEN

		  print_debuginfo(l_module_name, 'Getting Data from Cache For Profile Id: ' || IBY_PAYGROUP_PUB.pmtTable.PAYMENT_PROFILE_ID(l_trx_valid_index));

                  l_payment_format_cd    :=   l_profile_format_tab(IBY_PAYGROUP_PUB.pmtTable.PAYMENT_PROFILE_ID(l_trx_valid_index)).payment_format_cd;
 	          l_bepid                :=   l_profile_format_tab(IBY_PAYGROUP_PUB.pmtTable.PAYMENT_PROFILE_ID(l_trx_valid_index)).bepid;
 	          l_transmit_protocol_cd :=   l_profile_format_tab(IBY_PAYGROUP_PUB.pmtTable.PAYMENT_PROFILE_ID(l_trx_valid_index)).transmit_protocol_cd;

 	        ELSE
 	        print_debuginfo(l_module_name, 'Getting Data from DB For Profile Id: ' || IBY_PAYGROUP_PUB.pmtTable.PAYMENT_PROFILE_ID(l_trx_valid_index));
 	            BEGIN
 	                 SELECT ipp.payment_profile_id,
 	                    ipp.payment_format_code, ipp.bepid, ipp.transmit_protocol_code
 	                 INTO l_profile_id,l_payment_format_cd,l_bepid,l_transmit_protocol_cd
 	                 FROM IBY_PAYMENT_PROFILES ipp
 	                 WHERE ipp.payment_profile_id = IBY_PAYGROUP_PUB.pmtTable.PAYMENT_PROFILE_ID(l_trx_valid_index) ;

 	            EXCEPTION
 	                       WHEN NO_DATA_FOUND THEN

 	                   print_debuginfo(l_module_name, 'Exception No Data Found Occured For Profile Id: ' || IBY_PAYGROUP_PUB.pmtTable.PAYMENT_PROFILE_ID(l_trx_valid_index));
 	                         l_profile_id := null;
 	                         l_payment_format_cd    := null;
 	                         l_bepid := null;
 	                         l_transmit_protocol_cd := null;
 	            END;
 	            print_debuginfo(l_module_name, 'Assigning the values in Cache For Profile Id: ' || IBY_PAYGROUP_PUB.pmtTable.PAYMENT_PROFILE_ID(l_trx_valid_index));
 	            l_profile_format_tab(IBY_PAYGROUP_PUB.pmtTable.PAYMENT_PROFILE_ID(l_trx_valid_index)).profile_id           := l_profile_id;
 	            l_profile_format_tab(IBY_PAYGROUP_PUB.pmtTable.PAYMENT_PROFILE_ID(l_trx_valid_index)).payment_format_cd    := l_payment_format_cd;
 	            l_profile_format_tab(IBY_PAYGROUP_PUB.pmtTable.PAYMENT_PROFILE_ID(l_trx_valid_index)).bepid                := l_bepid;
 	            l_profile_format_tab(IBY_PAYGROUP_PUB.pmtTable.PAYMENT_PROFILE_ID(l_trx_valid_index)).transmit_protocol_cd := l_transmit_protocol_cd;

 	        END IF;
 	           print_debuginfo(l_module_name, 'Before doing a bulk insert to the cursor');
 	          -- print_debuginfo(l_module_name, 'Before doing a bulk insert pmt_method_cd is ' 	 || l_docs_tab(i).pmt_method_cd);
 	           print_debuginfo(l_module_name, 'Before doing a bulk insert int_bank_acct_id is ' 	 ||IBY_PAYGROUP_PUB.pmtTable.INTERNAL_BANK_ACCOUNT_ID(l_trx_valid_index));
 	           print_debuginfo(l_module_name, 'Before doing a bulk insert l_payment_format_cd is '||Nvl(l_payment_format_cd,0));
 	           print_debuginfo(l_module_name, 'Before doing a bulk insert l_bepid is'||Nvl(l_bepid,0));
 	           print_debuginfo(l_module_name, 'Before doing a bulk insert l_transmit_protocol_cd is'||l_transmit_protocol_cd);
 	           print_debuginfo(l_module_name, 'Before doing a bulk insert l_country is'||l_country);
            print_debuginfo(l_module_name, 'IBY_PAYGROUP_PUB.pmtTable.PAYMENT_METHOD_CODE(l_trx_valid_index):'||IBY_PAYGROUP_PUB.pmtTable.PAYMENT_METHOD_CODE(l_trx_valid_index));



 	          /* OPEN  c_validation_sets(l_docs_tab(i).doc_id, l_docs_tab(i).pmt_grp_num, l_docs_tab(i).payee_id, l_docs_tab(i).pmt_method_cd, l_docs_tab(i).int_bank_acct_id, l_payment_format_cd,l_bepid,l_transmit_protocol_cd,l_country);
			*/
        l_val_set_index := 'PAYMENT'||'$'||IBY_PAYGROUP_PUB.pmtTable.PAYMENT_METHOD_CODE(l_trx_valid_index)||'$'||IBY_PAYGROUP_PUB.pmtTable.INTERNAL_BANK_ACCOUNT_ID(l_trx_valid_index)||'$'||l_payment_format_cd||'$'||l_bepid;
        l_val_set_index := l_val_set_index||'$'||l_transmit_protocol_cd||'$'||l_country;
        IF (val_sets_outer_tbl.EXISTS(l_val_set_index)) THEN
        l_valSetsTab := val_sets_outer_tbl(l_val_set_index).val_sets_tbl;
        l_val_sets_count := val_sets_outer_tbl(l_val_set_index).val_set_count;
        ELSE
	 OPEN  c_pmt_val_sets(IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_valid_index),
			      IBY_PAYGROUP_PUB.pmtTable.PAYMENT_METHOD_CODE(l_trx_valid_index),
			      IBY_PAYGROUP_PUB.pmtTable.INTERNAL_BANK_ACCOUNT_ID(l_trx_valid_index),
			      l_payment_format_cd,
			      l_bepid,
			      l_transmit_protocol_cd,
			      l_country);

         FETCH c_pmt_val_sets BULK COLLECT INTO l_valSetsTab;
         CLOSE c_pmt_val_sets;

             val_sets_outer_tbl(l_val_set_index).val_sets_tbl := l_valSetsTab;
             val_sets_outer_tbl(l_val_set_index).val_set_count := l_val_sets_count;
        END IF;



         IF (l_valSetsTab.COUNT = 0) THEN

             /*
              * Fix for bug 5742548:
              *
              * If no validation sets are applicable this
              * time round, then this payment will pass
              * validation.
              *
              * But it is possible that this payment has
              * failed validation earlier, in which cas
              * the old errors will still be active against
              * this payment.
              *
              * Inactivate the old errors so that the UI
              * correctly shows that there are no active
              * validation errors against this payment
              * at this time.
              */
             --IBY_BUILD_UTILS_PKG.inactivateOldErrors(
             --    x_paymentTab(i).payment_id,
             --    TRXN_TYPE_PMT
             --    );

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
		print_debuginfo(l_module_name, 'No validation sets were '
                 || 'linked to payment '
                 || IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_valid_index)
                 || ' Skipping payment '
                 || 'validations for this payment..');

             print_debuginfo(l_module_name, '+-------------------------+');
	     END IF;

         ELSE

             FOR j in l_valSetsTab.FIRST .. l_valSetsTab.LAST LOOP

                 /*
                  * Fix for bug 5440434:
                  *
                  * Before doing any validations, set any
                  * existing validation error messages that
                  * exist against this payment to 'inactive'
                  * status in the IBY_TRANSACTION_ERRORS table.
                  *
                  * Unless we do this, the old errors will
                  * continue to show up against this payment
                  * in the IBY UI even if the payment is validated
                  * successfully this time round.
                  */
                 --IBY_BUILD_UTILS_PKG.inactivateOldErrors(
                 --    x_paymentTab(i).payment_id,
                 --    TRXN_TYPE_PMT
                 --    );

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Applicable validation set ('
                     || l_valSetsTab(j).val_assign_entity_type
                     || ') : '
                     || l_valSetsTab(j).val_set_name
                     );
	        END IF;
                 /*
                  * Dynamically call the validation set applicable
                  * to the current payment.
                  */
                 l_stmt := 'CALL '
                               || l_valSetsTab(j).val_code_pkg
                               || '.'
                               || l_valSetsTab(j).val_code_entry_pt
                               || '(:1,:2,:3,:4,:5)';

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
			print_debuginfo(l_module_name, 'Calling ' || l_stmt);
		 END IF;

                 EXECUTE IMMEDIATE (l_stmt) USING
                     IN l_valSetsTab(j).val_assign_id,
                     IN l_valSetsTab(j).val_set_code,
                     IN IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_valid_index),
                     IN 'N',
                     OUT l_result;

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Finished executing '
                     || l_stmt);

                 print_debuginfo(l_module_name, 'Result: '
                     || l_result);
                 END IF;
                 /*
                  * If payment fails validation, then:
                  * 1. Set the status of the payment to failed
                  * 2. Fail all docs of this payment
                  */
                 IF (l_result <> 0) THEN

                     /*
                      * Check if the payment has already been failed.
                      */
                  --   l_check_val := checkIfPmtAlreadyFailed(
                  --                       x_paymentTab(i).payment_id,
                   --                     x_paymentTab
                    --                    );

                     /*
                      * If a payment has not been failed before,
                      * fail the payment and its child documents.
                      *
                      * Otherwise, skip this step.
                      */
                     IF (IBY_PAYGROUP_PUB.pmtTable.payment_status(l_trx_valid_index) <> PAY_STATUS_REJECTED) THEN

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Payment '
                             || IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_valid_index)
                             || ' failed validation.');
                         END IF;
                         IBY_PAYGROUP_PUB.pmtTable.payment_status(l_trx_valid_index)
                             := PAY_STATUS_REJECTED;
                          l_invalid_payee_index:= IBY_PAYGROUP_PUB.pmtTable.ext_payee_id(l_trx_valid_index);

                          IF (l_payeeTab.EXISTS(l_invalid_payee_index)) then
                             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                              print_debuginfo(l_module_name, 'Payee already in invalid payee list');
                             END IF;
                          ELSE
                            IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                              print_debuginfo(l_module_name, 'Adding Payee:'||l_invalid_payee_index||
                               ' to Invalid Payee List');
                             END IF;
                            l_payeeTab(l_invalid_payee_index) := IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_valid_index);
                          END IF;

                         /*
                          * Validation error messages against the payment
                          * will be handled by the validation set itself.
                          * So no need to create an error record for the
                          * payment here.
                          */

                         /*
                          * For the failed payment, set the status of its
                          * child documents to failed as well.
                          */

                         failDocsOfPayment(IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_valid_index),
                             DOC_STATUS_PAY_VAL_FAIL,
                             x_docErrorTab, x_errTokenTab);

                     ELSE

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Payment '||  IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_valid_index)
                             || ' has already failed validation.'
                             || '. No need to fail this payment and '
                             || 'its child documents again.'
                             );
			END IF;
                     END IF; -- if l_check_val = FALSE

                 ELSE
                 IBY_PAYGROUP_PUB.pmtTable.payment_status(l_trx_valid_index) := PAY_STATUS_CREATED;
                 END IF; -- result <> 0

                 print_debuginfo(l_module_name, '+-------------------------+');

             END LOOP; -- for each val set applicable to this payment

         END IF; -- if count of val sets <> 0

     --END LOOP; -- for each payment in this payment request

     print_debuginfo(l_module_name, 'EXIT');

 END applyPaymentValidationSets;

/*--------------------------------------------------------------------
 | NAME:
 |     raiseBizEvents
 |
 | PURPOSE:
 |     Raises business events (if necessary) to inform the calling
 |     app of failed documents (which were failed because their payments
 |     were failed).
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE raiseBizEvents(
     p_payreq_id          IN            VARCHAR2,
     p_cap_payreq_cd      IN            VARCHAR2,
     p_cap_id             IN            NUMBER,
     p_rej_level          IN            VARCHAR2,
     p_review_pmts_flag   IN            VARCHAR2,
     p_allPmtsSuccessFlag IN            BOOLEAN,
     p_allPmtsFailedFlag  IN            BOOLEAN
     )
 IS

 l_module_name   CONSTANT VARCHAR2(200) := G_PKG_NAME || '.raiseBizEvents';
 l_xml_clob      CLOB;
 l_event_name    VARCHAR2(200);
 l_event_key     NUMBER;
 l_param_names   JTF_VARCHAR2_TABLE_300;
 l_param_vals    JTF_VARCHAR2_TABLE_300;

 l_return_status  VARCHAR2(500);
 l_rej_doc_id_list     IBY_DISBURSE_UI_API_PUB_PKG.docPayIDTab;
 l_rej_doc_status_list IBY_DISBURSE_UI_API_PUB_PKG.docPayStatusTab;

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'ENTER');
     print_debuginfo(l_module_name, 'Payreq id: '
         || p_payreq_id);
     END IF;
     /*
      * Print the rejection level system option
      */
     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'Rejection level system option: '
         || p_rej_level);
     END IF;
     /*
      * These tables are used to pass event keys
      * to the business event.
      */
     l_param_names := JTF_VARCHAR2_TABLE_300();
     l_param_vals  := JTF_VARCHAR2_TABLE_300();

     /*
      * The event key uniquely identifies a specific
      * occurance of an event. Therefore, it should be
      * a sequence number.
      */
     SELECT IBY_EVENT_KEY_S.nextval INTO l_event_key
     FROM DUAL;

     IF (p_rej_level = REJ_LVL_REQUEST) THEN

         /*
          * For request level rejections, even if one
          * payment within the request fails, then the
          * entire payment request should be failed.
          */

         IF (p_allPmtsSuccessFlag <> TRUE) THEN

             /*
              * Invoke the callout API with the payment request id.
              * This API should trigger the calling application to
              * fail the payment request and all it's associated
              * docs.
              */
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Going to invoke API call '
                 || 'remove_payment_request()');
	     END IF;
             /*
              * Invoke API to inform calling application
              * about the rejected payment request. This API
              * will remove all the payments and documents payable
              * in this payment request from the processing cycle
              * and inform the calling application about this fact.
              */
             IBY_DISBURSE_UI_API_PUB_PKG.remove_payment_request (
                 p_payreq_id,
                 l_return_status
                 );

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Return status of '
                 || 'remove_payment_request() API call: '
                 || l_return_status
                 );
	     END IF;

             IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'API call did not succeed. '
                     || 'Aborting build program .. ',
                     FND_LOG.LEVEL_UNEXPECTED
                     );
     END IF;
                 APP_EXCEPTION.RAISE_EXCEPTION;

             END IF;


         ELSE

             /*
              * This means all payments were successfully
              * created for this payment service request.
              *
              * Notify the user only of 'review proposed
              * payments flag' has been set.
              */

             IF (UPPER(p_review_pmts_flag) = 'Y') THEN

                 /*
                  * Raise a business event with the payment request id.
                  * This business event should trigger the calling app
                  * to launch a workflow for the user to review the
                  * proposed payments.
                  */
                 l_event_name :=
                     'oracle.apps.iby.buildprogram.validation.notify_user';

                 l_param_names.EXTEND;
                 l_param_vals.EXTEND;
                 l_param_names(1) := 'calling_app_id';
                 l_param_vals(1)  := p_cap_id;

                 l_param_names.EXTEND;
                 l_param_vals.EXTEND;
                 l_param_names(1) := 'pay_service_request_id';
                 l_param_vals(1)  := p_cap_payreq_cd;

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Going to raise biz event '
                     || l_event_name);
     END IF;
                 iby_workflow_pvt.raise_biz_event(l_event_name, l_event_key,
                     l_param_names, l_param_vals);

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Raised biz event '
                     || l_event_name || ' with key '
                     || l_event_key  || '.');
     END IF;
             ELSE

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Not raising biz event '
                     || l_event_name || '. Reason: All payments '
                     || 'were valid.');
		     END IF;
             END IF;

         END IF;
/* Bug 8209474 */
     ELSIF (p_rej_level = REJ_LVL_PAYMENT OR p_rej_level = REJ_LVL_PAYEE) THEN

         /*
          * Check if all payments in the request have failed;
          * in that case, fail the request and invoke a callout
          * API to inform the calling app that all payments (and
          * so documents) in the request have been failed.
          *
          * The calling app should use this information to unlock
          * those documents and re-submit them in a new request
          * after making suitable changed after making suitable
          * changes.
          */
         IF (p_allPmtsFailedFlag = TRUE) THEN

             /*
              * Invoke the callout API with the payment request id.
              * This API should trigger the calling application to
              * fail the payment request and all it's associated
              * docs.
              */
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Going to invoke API call '
                 || 'remove_payment_request()');
		      END IF;

             /*
              * Invoke API to inform calling application
              * about the rejected payment request. This API
              * will remove all the documents payable in this
              * payment request from the processing cycle and
              * inform the calling application about this fact.
              */
             IBY_DISBURSE_UI_API_PUB_PKG.remove_payment_request (
                 p_payreq_id,
                 l_return_status
                 );

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Return status of '
                 || 'remove_payment_request() API call: '
                 || l_return_status
                 );
		      END IF;

             IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'API call did not succeed. '
                     || 'Aborting build program .. ',
                     FND_LOG.LEVEL_UNEXPECTED
                     );
		 END IF;
                 APP_EXCEPTION.RAISE_EXCEPTION;

             END IF;

         ELSE

             /*
              * If at lease one payment has succeeded and the
              * 'review proposed payments' flag is set to 'Y',
              * then, we must raise the notify user business
              * event.
              */
             l_event_name :=
                 'oracle.apps.iby.buildprogram.validation.notify_user';

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Going to raise biz event '
                 || l_event_name);
             END IF;

             /*
              * Raise this business event only if the 'review
              * proposed payments' flag is set to 'Y'.
              */
             IF (UPPER(p_review_pmts_flag) = 'Y') THEN

                 /*
                  * Raise a business event with the payment request id.
                  * This business event should trigger the calling app
                  * to launch a workflow for the user to review the
                  * proposed payments.
                  */
                 l_event_name :=
                     'oracle.apps.iby.buildprogram.validation.notify_user';

                 l_param_names.EXTEND;
                 l_param_vals.EXTEND;
                 l_param_names(1) := 'calling_app_id';
                 l_param_vals(1)  := p_cap_id;

                 l_param_names.EXTEND;
                 l_param_vals.EXTEND;
                 l_param_names(1) := 'pay_service_request_id';
                 l_param_vals(1)  := p_cap_payreq_cd;

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Going to raise biz event '
                     || l_event_name);
     END IF;
                 iby_workflow_pvt.raise_biz_event(l_event_name, l_event_key,
                     l_param_names, l_param_vals);

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Raised biz event '
                     || l_event_name || ' with key '
                     || l_event_key  || '.');
     END IF;
             END IF; -- review payments flag == 'Y'

                 /*
                  * Invoke a callout API with the list of failed
                  * documents (derived from the payments). This
                  * API call should trigger the calling app
                  * to fail these docs.
                  */
                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Going to invoke API '
                     || 'remove_documents_payable()');
     END IF;
                 /*
                  * Select all docs that:
                  * 1. Have the given pay req id
                  * 2. Are not in 'payments_created' status
                  * 3. Were updated in the process of payment creation
                  *    (some docs might have failed earlier in document
                  *    validation flow. We don't want to pick them up)
                  */
                 getRejectedDocs(p_payreq_id, l_rej_doc_id_list,
                     l_rej_doc_status_list);

                 IF (l_rej_doc_id_list.COUNT = 0) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Not invoking API '
                         || 'remove_documents_payable() because all '
                         || 'payments were successfully '
                         || 'created. So no failed documents '
                         || 'to notify.'
                         );
		     END IF;
                 ELSE

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Printing list of failed '
                         || 'documents');
		     END IF;
                     FOR i IN l_rej_doc_id_list.FIRST ..
                         l_rej_doc_id_list.LAST LOOP

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                         print_debuginfo(l_module_name, 'Doc id: '
                             || l_rej_doc_id_list(i)
                             || ', doc status: '
                             || l_rej_doc_status_list(i)
                             );
                        END IF;
                     END LOOP;

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Going to invoke '
                         || 'remove_documents_payable() API'
                         );
		     END IF;
                     /*
                      * Invoke API to inform calling application
                      * about the rejected documents.
                      */
                     IBY_DISBURSE_UI_API_PUB_PKG.remove_documents_payable (
                         l_rej_doc_id_list,
                         l_rej_doc_status_list,
                         l_return_status
                         );

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Return status of '
                         || 'remove_documents_payable() API call: '
                         || l_return_status
                         );
		     END IF;
                     IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                         print_debuginfo(l_module_name, 'API call did not '
                             || 'succeed. Aborting build program .. ',
                             FND_LOG.LEVEL_UNEXPECTED
                             );
                         END IF;

                         APP_EXCEPTION.RAISE_EXCEPTION;

                     END IF;

                 END IF; -- if rejected doc count != 0

         END IF; -- all payments failed flag = TRUE

     ELSIF (p_rej_level = REJ_LVL_NONE) THEN

         IF (p_allPmtsSuccessFlag <> TRUE) THEN

             /*
              * Raise a business event with the payment request id.
              * This business event should trigger the calling app
              * to launch a workflow for the user to review the
              * proposed payments.
              */
             l_event_name :=
                 'oracle.apps.iby.buildprogram.validation.notify_user_error';

             l_param_names.EXTEND;
             l_param_vals.EXTEND;
             l_param_names(1) := 'calling_app_id';
             l_param_vals(1)  := p_cap_id;

             l_param_names.EXTEND;
             l_param_vals.EXTEND;
             l_param_names(1) := 'pay_service_request_id';
             l_param_vals(1)  := p_cap_payreq_cd;

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Going to raise biz event '
                 || l_event_name);
	     END IF;
             iby_workflow_pvt.raise_biz_event(l_event_name, l_event_key,
                 l_param_names, l_param_vals);

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Raised biz event '
                 || l_event_name || ' with key '
                 || l_event_key  || '.');
	     END IF;
         ELSE

             /*
              * This means that all payments were successfully
              * created for this payment service request.
              */

             IF (UPPER(p_review_pmts_flag) = 'Y') THEN

                 /*
                  * Raise a business event with the payment request id.
                  * This business event should trigger the calling app
                  * to launch a workflow for the user to review the
                  * proposed payments.
                  */

                 l_event_name :=
                     'oracle.apps.iby.buildprogram.validation.notify_user';

                 l_param_names.EXTEND;
                 l_param_vals.EXTEND;
                 l_param_names(1) := 'calling_app_id';
                 l_param_vals(1)  := p_cap_id;

                 l_param_names.EXTEND;
                 l_param_vals.EXTEND;
                 l_param_names(1) := 'pay_service_request_id';
                 l_param_vals(1)  := p_cap_payreq_cd;

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Going to raise biz event '
                     || l_event_name);
		 END IF;
                 iby_workflow_pvt.raise_biz_event(l_event_name, l_event_key,
                     l_param_names, l_param_vals);

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Raised biz event '
                     || l_event_name || ' with key '
                     || l_event_key  || '.');
		 END IF;
             ELSE

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Not raising biz event '
                     || l_event_name || ' because all payments were '
                     || 'successfully created. So no failed documents '
                     || 'to notify.'
                     );
		     END IF;
             END IF;

         END IF;

     ELSE

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'Unknown rejection level: '
             || p_rej_level
             || '. Aborting payment creation ..',
             FND_LOG.LEVEL_UNEXPECTED
             );
     END IF;
         APP_EXCEPTION.RAISE_EXCEPTION;

     END IF;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'EXIT');
      END IF;

 EXCEPTION
     WHEN OTHERS THEN
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'Fatal: Exception when attempting '
             || 'to raise business event.', FND_LOG.LEVEL_UNEXPECTED);
         print_debuginfo(l_module_name, 'SQL code: '   || SQLCODE,
             FND_LOG.LEVEL_UNEXPECTED);
         print_debuginfo(l_module_name, 'SQL err msg: '|| SQLERRM,
             FND_LOG.LEVEL_UNEXPECTED);
	 END IF;
         /*
          * Propogate exception to caller.
          */
         RAISE;

 END raiseBizEvents;

/*--------------------------------------------------------------------
 | NAME:
 |     checkIfPmtAlreadyFailed
 |
 | PURPOSE:
 |     Checks if a payment has already failed validation. If yes, this
 |     method returns TRUE; else, it return FALSE.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 FUNCTION checkIfPmtAlreadyFailed(
     p_paymentId   IN   IBY_PAYMENTS_ALL.payment_id%TYPE,
     p_paymentTab  IN   paymentTabType
     )
 RETURN BOOLEAN
 IS
 l_ret_val BOOLEAN := FALSE;
 BEGIN

     FOR i IN p_paymentTab.FIRST .. p_paymentTab.LAST LOOP

         IF (p_paymentTab(i).payment_id = p_paymentId) THEN

             IF (p_paymentTab(i).payment_status = PAY_STATUS_REJECTED) THEN

                 l_ret_val := TRUE;
                 EXIT;

             END IF;

         END IF;

     END LOOP;

     RETURN l_ret_val;

 END checkIfPmtAlreadyFailed;

/*--------------------------------------------------------------------
 | NAME:
 |     checkIfPmtAlreadyAdded
 |
 | PURPOSE:
 |     Checks if a payment has already been added to the list of
 |     negative amount payments that qualify for credit memo adjustment.
 |     If yes, this method returns TRUE; else, it return FALSE.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 FUNCTION checkIfPmtAlreadyAdded(
     p_paymentId   IN   IBY_PAYMENTS_ALL.payment_id%TYPE,
     p_paymentTab  IN   pmtIdsTab
     )
 RETURN BOOLEAN
 IS
 l_ret_val BOOLEAN := FALSE;
 BEGIN

     /* return false if no records in negative payments array */
     IF (p_paymentTab.COUNT = 0) THEN

         l_ret_val := FALSE;

         RETURN l_ret_val;

     END IF;

     /*
      * Loop through negative payments list, scanning for
      * given payment id
      */
     FOR i IN p_paymentTab.FIRST .. p_paymentTab.LAST LOOP

         IF (p_paymentTab(i) = p_paymentId) THEN

             l_ret_val := TRUE;
             EXIT;

         END IF;

     END LOOP;

     RETURN l_ret_val;

 END checkIfPmtAlreadyAdded;

/*--------------------------------------------------------------------
 | NAME:
 |     getXMLClob
 |
 | PURPOSE:
 |     Returns an XML clob with the list of documents that satisfy
 |     the executed select condition.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 |     XML generation from PLSQL is evolving rapidly.
 |
 |     The code below uses DBMS_XMLQuery() to generate XML
 |     from a SELECT statement.
 |
 |     DBMS_XMLQuery() uses Java code internally, and is slow.
 |
 |     Better ways to generate XML are:
 |     1. DBMS_XMLGEN
 |        DBMS_XMLGEN is a built-in package in C. It is fast. However,
 |        it is supported only in Oracle 9i and above.
 |
 |     2. SQLX
 |        This is the new emerging standard for SQL -> XML.
 |        It is both fast and easy. However, only Oracle 9i and
 |        above.
 |
 *---------------------------------------------------------------------*/
 FUNCTION getXMLClob(
     p_payreq_id     IN VARCHAR2
     )
     RETURN CLOB
 IS
 l_module_name  CONSTANT VARCHAR2(200)  := G_PKG_NAME || '.getXMLClob';
 l_xml_clob     CLOB := NULL;

 l_ctx          DBMS_XMLQuery.ctxType;
 l_sql          VARCHAR2(2000);
 l_sqlcode      NUMBER;
 l_sqlerrm      VARCHAR2(300);

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     /*
      * Note:
      *
      * Replace DBMS_XMLQuery with DBMS_XMLGEN or SQLX
      * when Oracle 9i is minimum requirement in tech
      * stack (see notes above).
      */

     /*
      * Select all docs that:
      * 1. Have the given pay req id
      * 2. Are not in 'payments_created' status
      * 3. Were updated in the process of payment creation
      *    (some docs might have failed earlier in document
      *    validation flow. We don't want to pick them up).
      */
     l_sql := 'SELECT calling_app_id, '
                  || 'calling_app_doc_unique_ref1'
                  || 'calling_app_doc_unique_ref2'
                  || 'calling_app_doc_unique_ref3'
                  || 'calling_app_doc_unique_ref4'
                  || 'calling_app_doc_unique_ref5'
                  || 'pay_proc_trxn_type_id '
                  || 'FROM IBY_DOCS_PAYABLE_ALL '
                  || 'WHERE payment_service_request_id = :payreq_id '
                  || 'AND  document_status <> :doc_status '
                  || 'AND  payment_id IS NOT NULL';

     l_ctx := DBMS_XMLQuery.newContext(l_sql);
     DBMS_XMLQuery.setBindValue(l_ctx, 'payreq_id', p_payreq_id);
     DBMS_XMLQuery.setBindValue(l_ctx, 'doc_status', DOC_STATUS_PAY_CREATED);
     DBMS_XMLQuery.useNullAttributeIndicator(l_ctx, TRUE);

     /* raise an exception if no rows were found */
     DBMS_XMLQuery.setRaiseException(l_ctx, TRUE);
     DBMS_XMLQuery.setRaiseNoRowsException(l_ctx, TRUE);
     DBMS_XMLQuery.propagateOriginalException(l_ctx, TRUE);

     l_xml_clob := DBMS_XMLQuery.getXML(l_ctx);
     DBMS_XMLQuery.closeContext(l_ctx);

     print_debuginfo(l_module_name, 'EXIT');

     RETURN l_xml_clob;

 EXCEPTION

     WHEN OTHERS THEN

         DBMS_XMLQuery.getExceptionContent(l_ctx, l_sqlcode, l_sqlerrm);
         print_debuginfo(l_module_name, 'SQL code: '   || l_sqlcode);
         print_debuginfo(l_module_name, 'SQL err msg: '|| l_sqlerrm);

         /*
          * Do not raise exception if no rows found.
          * It means all payments were successful.
          * return NULL clob to caller.
          *
          * 1403 = NO_DATA_FOUND
          *
          * Note: We are unable to explicitly catch the
          * NO_DATA_FOUND exception here because the caller
          * raises some other exception. So we have to check
          * value of the original error code instead.
          */
         IF (l_sqlcode = 1403) THEN
             print_debuginfo(l_module_name, 'No rows were returned for query;'
                 || ' Returning null xml clob.');
             RETURN NULL;
         END IF;

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'Fatal: Exception when attempting '
             || 'to raise business event.', FND_LOG.LEVEL_UNEXPECTED);
         print_debuginfo(l_module_name, 'SQL code: '   || SQLCODE,
             FND_LOG.LEVEL_UNEXPECTED);
         print_debuginfo(l_module_name, 'SQL err msg: '|| SQLERRM,
             FND_LOG.LEVEL_UNEXPECTED);
	     END IF;
         /*
          * Propogate exception to caller.
          */
         RAISE;

 END getXMLClob;

/*--------------------------------------------------------------------
 | NAME:
 |     getRejectedDocs
 |
 | PURPOSE:
 |     Performs a database query to get all failed documents which
 |     are part of payments created for the given payment request.
 |     These failed documents are put into data structure and
 |     returned to the caller.
 |
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 |
 *---------------------------------------------------------------------*/
 PROCEDURE getRejectedDocs(
     p_payreq_id    IN VARCHAR2,
     x_docIDTab     IN OUT NOCOPY IBY_DISBURSE_UI_API_PUB_PKG.docPayIDTab,
     x_docStatusTab IN OUT NOCOPY IBY_DISBURSE_UI_API_PUB_PKG.docPayStatusTab
     )
 IS
 l_module_name  CONSTANT VARCHAR2(200) := G_PKG_NAME || '.getRejectedDocs';
 l_rej_docs_list IBY_VALIDATIONSETS_PUB.rejectedDocTabType;

 /*
  * Cursor to get list of failed documents which are part of payments
  * created for the given payment service request.
  */
 CURSOR c_rejected_docs (p_payreq_id IBY_PAY_SERVICE_REQUESTS.
                                         payment_service_request_id%TYPE)
 IS
 SELECT
     doc.document_payable_id,
     doc.document_status
 FROM
     IBY_DOCS_PAYABLE_ALL doc
 WHERE
     doc.payment_service_request_id = p_payreq_id AND
     doc.document_status <> DOC_STATUS_PAY_CREATED AND
     doc.payment_id IS NOT NULL
 ;

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     /*
      * Pick up all rejected documents for this payment request.
      */
     OPEN  c_rejected_docs(p_payreq_id);
     FETCH c_rejected_docs BULK COLLECT INTO l_rej_docs_list;
     CLOSE c_rejected_docs;

     /*
      * Separate out the document ids and the document statuses.
      * This is because the rejection API expects these as
      * separate arrays.
      */
     IF (l_rej_docs_list.COUNT <> 0) THEN
         FOR i IN l_rej_docs_list.FIRST .. l_rej_docs_list.LAST LOOP
             x_docIDTab(i) := l_rej_docs_list(i).doc_id;
         END LOOP;

         FOR i IN l_rej_docs_list.FIRST .. l_rej_docs_list.LAST LOOP
             x_docStatusTab(i) := l_rej_docs_list(i).doc_status;
         END LOOP;
     END IF;

     print_debuginfo(l_module_name, 'EXIT');

 END getRejectedDocs;

/*--------------------------------------------------------------------
 | NAME:
 |     dummyGLAPI
 |
 | PURPOSE:
 |     Dummy method; to be used for testing purposes. Used to simulate
 |     GL API for currency conversion.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE dummyGLAPI(
     p_exch_date          IN         DATE,
     p_source_amount      IN         NUMBER,
     p_source_curr        IN         VARCHAR2,
     p_decl_curr          IN         VARCHAR2,
     p_decl_fx_rate_type  IN         VARCHAR2,
     x_decl_amount        OUT NOCOPY NUMBER)
 IS

 BEGIN

     x_decl_amount := p_source_amount * 2;

 END dummyGLAPI;

/*--------------------------------------------------------------------
 | NAME:
 |     dummy_paymentsAdjustHook
 |
 | PURPOSE:
 |     Dummy method; to be used for testing purposes. Used to simulate
 |     calling app hook.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE dummy_paymentsAdjustHook(
     x_paymentTab      IN OUT NOCOPY hookPaymentTabType,
     x_docsInPmtTab    IN OUT NOCOPY hookDocsInPaymentTabType
     )
 IS

 BEGIN

     x_docsInPmtTab(5).dont_pay_flag        := 'Y';
     x_docsInPmtTab(5).dont_pay_reason_code := 'chumma failed';

     /*
      * If we fail a doc, make sure to adjust the payment amount
      */
     FOR i in x_paymentTab.FIRST ..  x_paymentTab.LAST LOOP

         IF (x_docsInPmtTab(5).payment_id =
             x_paymentTab(i).payment_id) THEN

             x_paymentTab(i).payment_amount :=
                 x_paymentTab(i).payment_amount
                     - x_docsInPmtTab(5).document_amount;

         END IF;

     END LOOP;

 END dummy_paymentsAdjustHook;

/*--------------------------------------------------------------------
 | NAME:
 |     dummy_ruleFunction
 |
 | PURPOSE:
 |     Dummy method; to be used for testing purposes.
 |     You will need to register this function with an event
 |     subscription for this function to be called.
 |
 |     Used to simulate calling app's business event handler.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 FUNCTION dummy_ruleFunction(
     p_subscription IN            RAW,
     p_event        IN OUT NOCOPY WF_EVENT_T
     )
     RETURN VARCHAR2
 IS

 l_module_name     CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                 '.dummy_ruleFunction';
 l_parameter_list  wf_parameter_list_t := wf_parameter_list_t();
 l_parameter_t     wf_parameter_t:= wf_parameter_t(NULL, NULL);
 l_parameter_name  l_parameter_t.name%TYPE;
 l_parameter_value l_parameter_t.value%TYPE;
 l_clob            CLOB;
 i                 PLS_INTEGER;

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     l_parameter_list := p_event.getParameterList();

     IF (l_parameter_list IS NOT NULL) THEN
         i := l_parameter_list.FIRST;
         WHILE (i <= l_parameter_list.LAST) LOOP
             l_parameter_name  := NULL;
             l_parameter_value := NULL;

             l_parameter_name  := l_parameter_list(i).getName();
             l_parameter_value := l_parameter_list(i).getValue();

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Param Name: '
                 || l_parameter_name || ', Param Value: '
                 || l_parameter_value
                 );
     END IF;
             i := l_parameter_list.NEXT(i);
         END LOOP;
     END IF;

     l_clob := p_event.getEventData();

     IF (l_clob IS NOT NULL) THEN
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'Clob is not null');
      END IF;
         IBY_BUILD_UTILS_PKG.printXMLClob(l_clob);
     END IF;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'EXIT');
     END IF;
     RETURN 'SUCCESS';

 END dummy_ruleFunction;

/*--------------------------------------------------------------------
 | NAME:
 |     getReviewPmtsSysOption
 |
 | PURPOSE:
 |     Gets the review payment flag system option.
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 FUNCTION getReviewPmtsSysOption RETURN VARCHAR2
 IS
 l_revw_pmt_sys_option VARCHAR2(200);

 l_sys_options_tab sysOptionsTabType;
 l_print_var       NUMBER        := -1;

 l_module_name     CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                 '.getReviewPmtsSysOption';

 CURSOR c_sys_options
 IS
 SELECT
     NULL,
     sysoptions.require_prop_pmts_review_flag
 FROM
     IBY_INTERNAL_PAYERS_ALL sysoptions
 WHERE
     sysoptions.org_id IS NULL
 ;

 BEGIN

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'ENTER');
     END IF;
     /*
      * The 'review proposed payments' flag indicates whether
      * all payments (including successful ones) require
      *  user review.
      */

     /*
      * Fetch the system options for the given org
      */
     OPEN  c_sys_options;
     FETCH c_sys_options BULK COLLECT INTO l_sys_options_tab;
     CLOSE c_sys_options;

     IF (l_sys_options_tab.COUNT = 0) THEN

         /*
          * This means that the review payment flag
          * is not set at the enterprise level.
          *
          * Enterprise level review payment flag (i.e., with org
          * id set to null) is expected to be seeded.
          *
          * Raise an exception and abort processing.
          */
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'Review pmts flag '
             || 'system option is not set at enterprise level. '
             || 'It is mandatory to '
             || 'setup review pmts flag at enterprise level '
             || 'Raising exception.. ',
             FND_LOG.LEVEL_UNEXPECTED
             );
     END IF;
         APP_EXCEPTION.RAISE_EXCEPTION;

     ELSIF (l_sys_options_tab.COUNT <> 1) THEN

         /*
          * This means that there are multiple review payment
          * flags set at the enterprise level.
          * We don't know which one to use.
          *
          * Raise an exception and abort processing.
          */
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'Multiple review payment flag '
             || 'system options are set at '
             || 'enterprise level. It is mandatory to '
             || 'setup only one review payment flag sys option '
             || 'at enterprise level. '
             || 'Raising exception.. ',
             FND_LOG.LEVEL_UNEXPECTED
             );
     END IF;
         APP_EXCEPTION.RAISE_EXCEPTION;

     ELSE

         /*
          * Return the retrieved enterprise level
          * review payment flag system option.
          */
         l_revw_pmt_sys_option  := l_sys_options_tab(1).revw_flag;

     END IF; -- if l_sys_options_tab.COUNT = 0

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'Returning payment rejection '
         || 'level: '
         || l_revw_pmt_sys_option
         );

     print_debuginfo(l_module_name, 'EXIT');
     END IF;
     RETURN l_revw_pmt_sys_option ;

     EXCEPTION
         WHEN OTHERS THEN

             /*
              * In case of an exception, return NULL.
              */
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Exception thrown '
                 || 'when attempting to get review payment flag '
                 || 'at enterprise level. Returning NULL.'
                 );

            print_debuginfo(l_module_name, 'SQL code: '   || SQLCODE);
            print_debuginfo(l_module_name, 'SQL err msg: '|| SQLERRM);
	     END IF;
            l_revw_pmt_sys_option := NULL;
            print_debuginfo(l_module_name, 'EXIT');

            RETURN l_revw_pmt_sys_option ;

 END getReviewPmtsSysOption;

/*--------------------------------------------------------------------
 | NAME:
 |     getPmtRejLevelSysOption
 |
 | PURPOSE:
 |     Gets the payment rejection level system option.
 |
 |     The handling of payment validation failures is dependent
 |     upon the rejection level setting.
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 FUNCTION getPmtRejLevelSysOption RETURN VARCHAR2
 IS
 l_rej_level_sys_option VARCHAR2(200);

 l_sys_options_tab sysOptionsTabType;
 l_print_var       NUMBER        := -1;

 l_module_name     CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                 '.getPmtRejLevelSysOption';

 CURSOR c_sys_options
 IS
 SELECT
     sysoptions.payment_rejection_level_code,
     NULL
 FROM
     IBY_INTERNAL_PAYERS_ALL sysoptions
 WHERE
     sysoptions.org_id IS NULL
 ;

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     /*
      * The rejection level system option specifies
      * what is to be rejected if a payment fails
      * validation.
      */

     /*
      * Fetch the system options for the given org
      */
     OPEN  c_sys_options;
     FETCH c_sys_options BULK COLLECT INTO l_sys_options_tab;
     CLOSE c_sys_options;

     IF (l_sys_options_tab.COUNT = 0) THEN

         /*
          * This means that the payment rejection level
          * is not set at the enterprise level.
          *
          * Enterprise level rejection levels (i.e., with org
          * id set to null) are expected to be seeded.
          *
          * Raise an exception and abort processing.
          */
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'Payment rejection level '
             || 'system option is not set at enterprise level. '
             || 'It is mandatory to '
             || 'setup rejection levels at enterprise level '
             || 'Raising exception.. ',
             FND_LOG.LEVEL_UNEXPECTED
             );
	 END IF;

         APP_EXCEPTION.RAISE_EXCEPTION;

     ELSIF (l_sys_options_tab.COUNT <> 1) THEN

         /*
          * This means that there are multiple payment
          * rejection levels set at the enterprise level.
          * We don't know which one to use.
          *
          * Raise an exception and abort processing.
          */
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'Multiple payment rejection '
             || 'level system options are set at '
             || 'enterprise level. It is mandatory to '
             || 'setup only one payment rejection level '
             || 'at enterprise level. '
             || 'Raising exception.. ',
             FND_LOG.LEVEL_UNEXPECTED
             );
	 END IF;
         APP_EXCEPTION.RAISE_EXCEPTION;

     ELSE

         /*
          * Return the retrieved enterprise level
          * payment rejection level system option.
          */
         l_rej_level_sys_option := l_sys_options_tab(1).rej_level;

     END IF; -- if l_sys_options_tab.COUNT = 0

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'Returning payment rejection '
         || 'level: '
         || l_rej_level_sys_option
         );

     print_debuginfo(l_module_name, 'EXIT');
     END IF;
     RETURN l_rej_level_sys_option;

     EXCEPTION
         WHEN OTHERS THEN

             /*
              * In case of an exception, return NULL.
              */
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Exception thrown '
                 || 'when attempting to get payment rejection '
                 || 'level. Returning NULL.'
                 );

            print_debuginfo(l_module_name, 'SQL code: '   || SQLCODE);
            print_debuginfo(l_module_name, 'SQL err msg: '|| SQLERRM);

	    END IF;

            l_rej_level_sys_option := NULL;
            print_debuginfo(l_module_name, 'EXIT');

            RETURN l_rej_level_sys_option;

 END getPmtRejLevelSysOption;

/*--------------------------------------------------------------------
 | NAME:
 |     performCreditMemoHandling
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE performCreditMemoHandling(
     x_paymentTab    IN OUT NOCOPY paymentTabType,
     x_docsInPmtTab  IN OUT NOCOPY docsInPaymentTabType
     )
 IS
 l_module_name         CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                 '.performCreditMemoHandling';
 l_negative_pmts_tab   pmtIdsTab;
 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     /*
      * A payment qualifies for credit memo adjustments
      * if it satisfies the following criteria:
      *
      * a. Payment amount is negative
      * b. Payment contains at least one positive
      *    document payable
      *
      * a. and b. together imply that the payment is not
      * payalone, so this condition need not be explicitly
      * checked.
      *
      * Form the payment request, get a list of payments
      * that qualify for credit memo adjustments.
      */
     getListOfQualifyingNegPmts(l_negative_pmts_tab,
         x_paymentTab, x_docsInPmtTab);

     IF (l_negative_pmts_tab.COUNT = 0) THEN

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'No payments qualified for '
             || 'credit memo adjustment in this request. '
             || 'Skipping credit memo handling .. '
             );

         print_debuginfo(l_module_name, 'EXIT');
	 END IF;

         RETURN;

     END IF;

     /*
      * Attempt to bring negative payments to zero by adjusting
      * credit memo amounts.
      */
     adjustCreditMemosWithinPmt(l_negative_pmts_tab, x_paymentTab,
         x_docsInPmtTab);

     print_debuginfo(l_module_name, 'EXIT');

 END performCreditMemoHandling;

/*--------------------------------------------------------------------
 | NAME:
 |     adjustCreditMemosWithinPmt
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE adjustCreditMemosWithinPmt(
     p_qualifyingPmtsTab  IN pmtIdsTab,
     x_paymentTab         IN OUT NOCOPY paymentTabType,
     x_docsInPmtTab       IN OUT NOCOPY docsInPaymentTabType
     )
 IS

 l_module_name     CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                 '.adjustCreditMemosWithinPmt';

 l_pos_docs_array  docsInPaymentTabType;
 l_neg_docs_array  docsInPaymentTabType;
 l_running_total   NUMBER := 0;

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     /*
      * For each payment that qualifies for credit memo
      * adjustment, separate out the positive and negative
      * documents payable of that payment into two distinct
      * arrays.
      */
     FOR i IN p_qualifyingPmtsTab.FIRST .. p_qualifyingPmtsTab.LAST LOOP

         FOR j IN x_docsInPmtTab.FIRST .. x_docsInPmtTab.LAST LOOP

             IF (x_docsInPmtTab(j).payment_id =
                 p_qualifyingPmtsTab(i)) THEN

                 IF (x_docsInPmtTab(j).document_amount < 0) THEN

                     /* array of negative documents */
                     l_neg_docs_array(l_neg_docs_array.COUNT + 1) :=
                         x_docsInPmtTab(j);

                 ELSE

                     /* array of positive documents */
                     l_pos_docs_array(l_pos_docs_array.COUNT + 1) :=
                         x_docsInPmtTab(j);

                 END IF;

             END IF;

         END LOOP;

     END LOOP;

     /* uncomment for debugging purposes */
     /*-------------------------------------------
     FOR i IN l_neg_docs_array.FIRST .. l_neg_docs_array.LAST LOOP
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'Payment id: '
             || l_neg_docs_array(i).payment_id
             || ', neg doc id: '
             || l_neg_docs_array(i).document_id
             || ', neg doc amount: '
             || l_neg_docs_array(i).document_amount
             );
	          END IF;
     END LOOP;

     FOR i IN l_pos_docs_array.FIRST .. l_pos_docs_array.LAST LOOP
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'Payment id: '
             || l_pos_docs_array(i).payment_id
             || ', pos doc id: '
             || l_pos_docs_array(i).document_id
             || ', pos doc amount: '
             || l_pos_docs_array(i).document_amount
             );
	          END IF;
     END LOOP;
     ---------------------------------------------*/

     /*
      * For each qualifying payment, perform credit memo
      * adjustment.
      */
     FOR i IN p_qualifyingPmtsTab.FIRST .. p_qualifyingPmtsTab.LAST LOOP

         /* initialize running total for this payment */
         l_running_total := 0;

         /*
          * Sum up all the positive documents of this payment
          * and store the total in l_running_total.
          */
         FOR j IN l_pos_docs_array.FIRST .. l_pos_docs_array.LAST LOOP

             IF (l_pos_docs_array(j).payment_id =
                 p_qualifyingPmtsTab(i)) THEN

                 l_running_total := l_running_total +
                                        l_pos_docs_array(j).document_amount;

             END IF;

         END LOOP;

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'Running total of positive docs '
             || 'for payment '
             || p_qualifyingPmtsTab(i)
             || ' is: '
             || l_running_total
             );
	          END IF;

         /*
          * We now have the running total of all positive documents
          * within this payment stored in l_running_total.
          */

         /*
          * Start adjusting negative documents (credit memos)
          * one-by-one for this payment.
          */
         FOR k in l_neg_docs_array.FIRST .. l_neg_docs_array.LAST LOOP

             IF (l_neg_docs_array(k).payment_id =
                 p_qualifyingPmtsTab(i)) THEN

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Adding neg doc id: '
                     || l_neg_docs_array(k).document_id
                     || ' with amount '
                     || l_neg_docs_array(k).document_amount
                     || ' to running total.'
                     );
     END IF;
                 l_running_total := l_running_total +
                                        l_neg_docs_array(k).document_amount;

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Now running total : '
                     || l_running_total
                     );
     END IF;
                 IF (l_running_total < 0) THEN

                     /* Running total  negative implies that
                      * the last added negative amount document,
                      * has exceeded the sum of all available
                      * positive documents.
                      *
                      * Adjust the last added negative
                      * document payment amount such that
                      * adding this negative amount will bring
                      * the running total exactly to zero.
                      */

                     l_neg_docs_array(k).document_amount :=
                         l_neg_docs_array(k).document_amount
                             - l_running_total;

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Adusting neg doc id '
                         || l_neg_docs_array(k).document_id
                         || ' to amount '
                         || l_neg_docs_array(k).document_amount
                         );
     END IF;
                     /*
                      * Zero out all remaining negative documents
                      * for this payment.
                      */
                     FOR m in k+1 .. l_neg_docs_array.LAST
                         LOOP

                         IF (l_neg_docs_array(m).payment_id =
                             p_qualifyingPmtsTab(i)) THEN

                             l_neg_docs_array(m).document_amount := 0;

                             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Zeroing out '
                                 || ' document id '
                                 || l_neg_docs_array(m).document_id
                                 || ' of payment '
                                 || l_neg_docs_array(m).payment_id
                                 );
     END IF;
                         END IF;

                     END LOOP;

                     /*
                      * If running total has gone negative,
                      * and we have finished zeroing out the
                      * rest of the negative documents for
                      * this payment, it means that credit
                      * memo adjustment for this payment is
                      * complete. Exit the loop and continue
                      * with the next payment.
                      */
                     EXIT;

                 END IF; -- if running total has gone negative

             END IF; -- if payment id of this document matches

         END LOOP; -- for each negative doc for this payment

         /*
          * Reflect the document and payment amount adjustments
          * that were made during credit memo handling for
          * this payment back to the original documents and
          * payments array -  x_paymentTab and x_docsInPmtTab
          */
         refreshDocAndPmtAmounts(p_qualifyingPmtsTab(i),
             l_neg_docs_array, x_paymentTab, x_docsInPmtTab);

     END LOOP; -- for each negative payment

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'EXIT');
     END IF;
 END adjustCreditMemosWithinPmt;

/*--------------------------------------------------------------------
 | NAME:
 |     performMaturityDateCalculation
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE performMaturityDateCalculation(
     x_paymentTab    IN OUT NOCOPY paymentTabType,
     p_docsInPmtTab  IN            docsInPaymentTabType
     )
 IS
 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.performMaturityDateCalculation';
 l_maturity_days_tab      pmtMethodMaturityDaysTab;
 l_maturity_days_offset   IBY_PAYMENT_METHODS_VL.maturity_date_offset_days%TYPE;
 l_maturity_date_set_flag BOOLEAN := FALSE;
 l_temp_discount_date     DATE := NULL;
 l_temp_due_date          DATE := NULL;

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     /*
      * Load up all the payment methods that support future
      * dated payments along with their maturity offset days.
      * We will be adding the offset days (if available) to the
      * payment date to arrive at the maturity date.
      */
     loadPmtMethodMaturityDays(l_maturity_days_tab);

     IF (l_maturity_days_tab.COUNT = 0) THEN

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'None of the seeded payment '
             || 'methods support bills payable (future dated payments). '
             || 'Skipping maturity date calculation .. '
             );

         print_debuginfo(l_module_name, 'EXIT');
     END IF;
         RETURN;

     END IF; -- if maturity days tab count == 0

     /*
      * Loop through all the payments, setting maturity dates
      * for each future dated payment.
      */
     FOR i IN x_paymentTab.FIRST .. x_paymentTab.LAST LOOP

         /* initialize flag before each iteration */
         l_maturity_date_set_flag := FALSE;

         /*
          * For each payment that is a future dated payment
          * determine the maturity date.
          */
         IF (x_paymentTab(i).bill_payable_flag = 'Y') THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Payment '
                 || x_paymentTab(i).payment_id
                 || ' is a future dated payment'
                 );
     END IF;
             /*
              * ATTEMPT 1:
              *
              * Try to get the maturity date offset days from the
              * payment method and add this to the payment date on
              * the payment to arrive at the maturity date.
              */
             l_maturity_days_offset := getMaturityDaysForPmtMethod(
                                           x_paymentTab(i).payment_method_code,
                                           l_maturity_days_tab
                                           );

             IF (l_maturity_days_offset <> -1) THEN

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Adding '
                     || l_maturity_days_offset
                     || ' offset days to payment date to arrive at '
                     || 'maturity date.'
                     );
     END IF;
                 x_paymentTab(i).maturity_date :=
                     x_paymentTab(i).payment_date + l_maturity_days_offset;

                 l_maturity_date_set_flag := TRUE;

             ELSE

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Maturity date offset not '
                     || 'set on payment method '
                     || x_paymentTab(i).payment_method_code
                     || ' (so maturity date needs to be calculated).'
                     );
     END IF;
                 l_maturity_date_set_flag := FALSE;

             END IF;

             /*
              * ATTEMPT II:
              *
              * Set the maturity date based on the earliest
              * available discount date from the documents
              * on the payment.
              *
              * Note: Maturity date is also calculated from
              * the payment due date in ATTEMPT III below.
              *
              * The value set of the maturity date will be
              * the earliest of (discount date, payment due date).
              */

             /* initialize before each iteration */
             l_temp_discount_date := NULL;

             IF (l_maturity_date_set_flag = FALSE) THEN

                 /*
                  * In this loop, we attempt to find the first available
                  * discount date after the payment date for the
                  * current payment.
                  */
                 FOR j IN p_docsInPmtTab.FIRST .. p_docsInPmtTab.LAST LOOP

                     IF (x_paymentTab(i).payment_id =
                         p_docsInPmtTab(j).payment_id) THEN

                         IF (p_docsInPmtTab(j).discount_date IS NOT NULL AND
                             p_docsInPmtTab(j).discount_date >=
                                 x_paymentTab(i).payment_date) THEN

                             IF (l_temp_discount_date IS NULL) THEN

                                 /*
                                  * if 'l_temp_discount_date' is not yet
                                  * initialized, set it to the first available
                                  * discount date value.
                                  */
                                 l_temp_discount_date :=
                                     p_docsInPmtTab(j).discount_date;

                             ELSE

                                 /*
                                  * We already have a value for
                                  * 'l_temp_discount_date'; Update the value of
                                  * 'l_temp_discount_date' only if the new
                                  * discount date occurs earlier.
                                  */

                                 IF (p_docsInPmtTab(j).discount_date <
                                     l_temp_discount_date) THEN

                                     l_temp_discount_date :=
                                         p_docsInPmtTab(j).discount_date;

                                 END IF;

                             END IF; -- if temp discount date is not set

                         END IF; -- if discount date is available

                     END IF; -- if document belongs to the current payment

                 END LOOP; -- for each document

                 /*
                  * The earliest available discount date is one
                  * candidate for the maturity date.
                  */
                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Earliest available '
                     || 'discount date for payment '
                     || x_paymentTab(i).payment_id
                     || ' is '
                     || l_temp_discount_date
                     );
     END IF;
             END IF; -- if maturity date is not set for this payment

             /*
              * ATTEMPT III:
              *
              * Set the maturity date based on the earliest
              * available payment due date from the documents
              * on the payment.
              */

             /* initialize before each iteration */
             l_temp_due_date := NULL;

             IF (l_maturity_date_set_flag = FALSE) THEN

                 /*
                  * In this loop, we attempt to find the first available
                  * due date after the payment date for the current
                  * payment.
                  */
                 FOR j IN p_docsInPmtTab.FIRST .. p_docsInPmtTab.LAST LOOP

                     IF (x_paymentTab(i).payment_id =
                         p_docsInPmtTab(j).payment_id) THEN

                         IF (p_docsInPmtTab(j).pmt_due_date IS NOT NULL AND
                             p_docsInPmtTab(j).pmt_due_date >=
                                 x_paymentTab(i).payment_date) THEN

                             IF (l_temp_due_date IS NULL) THEN

                                 /*
                                  * if 'l_temp_due_date' is not yet initialized,
                                  * set it to the first available due
                                  * date value.
                                  */
                                 l_temp_due_date := p_docsInPmtTab(j).
                                                        pmt_due_date;

                             ELSE

                                 /*
                                  * We already have a value for
                                  * 'l_temp_due_date';
                                  * Update the value of 'l_temp_due_date'
                                  * only if the new due date occurs
                                  * earlier.
                                  */

                                 IF (p_docsInPmtTab(j).pmt_due_date <
                                     l_temp_due_date) THEN

                                     l_temp_due_date := p_docsInPmtTab(j).
                                                            pmt_due_date;

                                 END IF;

                             END IF; -- if temp due date is not set

                         END IF; -- if due date is available

                     END IF; -- if document belongs to the current payment

                 END LOOP; -- for each document

                 /*
                  * The earliest available due date is the
                  * other candidate for the maturity date.
                  */
                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Earliest available '
                     || 'due date for payment '
                     || x_paymentTab(i).payment_id
                     || ' is '
                     || l_temp_due_date
                     );
     END IF;
                 /*
                  * Fix for bug 5334177:
                  *
                  * Maturity Date = EARLIEST (ATTEMPT II, ATTEMPT III)
                  *
                  * Set the calculated maturity date on the
                  * payment as follows:
                  *
                  * 1. Maturity date is earliest of
                  *    (discount date, due date).
                  *
                  * 2. If either value is not available
                  *    use the other.
                  *
                  * 3. If both values are not available
                  *    use the payment date on the
                  *    payment as the maturity date.
                  */

                 IF (l_temp_discount_date IS NOT NULL AND
                     l_temp_due_date      IS NOT NULL) THEN

                     IF (l_temp_discount_date <= l_temp_due_date) THEN

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                         print_debuginfo(l_module_name, 'Setting '
                             || 'maturity date to discount date '
                             || l_temp_discount_date
                             || ' for payment '
                             || x_paymentTab(i).payment_id
                             || ' because it is earlier '
                             || 'than due date '
                             || l_temp_due_date
                             );
     END IF;
                         x_paymentTab(i).maturity_date :=
                             l_temp_discount_date;

                         l_maturity_date_set_flag := TRUE;

                     ELSE

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                         print_debuginfo(l_module_name, 'Setting '
                             || 'maturity date to due date '
                             || l_temp_due_date
                             || ' for payment '
                             || x_paymentTab(i).payment_id
                             || ' because it is earlier '
                             || 'than discount date '
                             || l_temp_discount_date
                             );
     END IF;
                         x_paymentTab(i).maturity_date := l_temp_due_date;

                         l_maturity_date_set_flag := TRUE;

                     END IF;

                 ELSIF (l_temp_discount_date IS NULL AND
                        l_temp_due_date      IS NULL) THEN

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                         print_debuginfo(l_module_name, 'Defaulting '
                             || 'maturity date to payment date '
                             || x_paymentTab(i).payment_date
                             || ' for payment '
                             || x_paymentTab(i).payment_id
                             || ' because both discount and due '
                             || 'dates are not available.'
                             );
     END IF;
                         x_paymentTab(i).maturity_date :=
                             x_paymentTab(i).payment_date;

                         l_maturity_date_set_flag := TRUE;

                 ELSE

                     /*
                      * If we come here, it means that only
                      * one of the discount date or the due
                      * date is available.
                      */
                     IF (l_temp_discount_date IS NOT NULL) THEN

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                         print_debuginfo(l_module_name, 'Setting '
                             || 'maturity date to discount date '
                             || l_temp_discount_date
                             || ' for payment '
                             || x_paymentTab(i).payment_id
                             || ' because no due date available.'
                             );
     END IF;
                         x_paymentTab(i).maturity_date :=
                             l_temp_discount_date;

                         l_maturity_date_set_flag := TRUE;

                     ELSE

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                         print_debuginfo(l_module_name, 'Setting '
                             || 'maturity date to due date '
                             || l_temp_due_date
                             || ' for payment '
                             || x_paymentTab(i).payment_id
                             || ' because no discount date available.'
                             );
     END IF;
                         x_paymentTab(i).maturity_date := l_temp_due_date;

                         l_maturity_date_set_flag := TRUE;

                     END IF;

                 END IF; -- if discount date and due date are not null

             END IF; -- if maturity date is not set for this payment

             /*
              * If all our efforts to calculate maturity date for
              * this payment have failed, log it.
              */
             IF (l_maturity_date_set_flag = FALSE) THEN

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Maturity date '
                     || 'could not be derived for payment '
                     || x_paymentTab(i).payment_id
                     );
     END IF;
                 /*
                  * This should never happen; raise an
                  * exception.
                  */
                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Maturity date is a must '
                     || 'for a bill payable. Aborting ..',
                     FND_LOG.LEVEL_UNEXPECTED
                     );
     END IF;
                 APP_EXCEPTION.RAISE_EXCEPTION;

             END IF;

         ELSE

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Payment '
                 || x_paymentTab(i).payment_id
                 || ' is not a future dated payment'
                 );
     END IF;
         END IF; -- if bills payable flag on pmt is 'Y'

     END LOOP; -- for each payment

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'EXIT');
     END IF;
 END performMaturityDateCalculation;

/*--------------------------------------------------------------------
 | NAME:
 |     loadPmtMethodMaturityDays
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE loadPmtMethodMaturityDays(
     x_maturityDaysTab    IN OUT NOCOPY pmtMethodMaturityDaysTab
     )
 IS
 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.loadPmtMethodMaturityDays';

 CURSOR c_maturity_days
 IS
 SELECT
     payment_method_code,
     maturity_date_offset_days
 FROM
     IBY_PAYMENT_METHODS_VL
 WHERE
     support_bills_payable_flag = 'Y'
 ;

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     OPEN  c_maturity_days;
     FETCH c_maturity_days BULK COLLECT INTO x_maturityDaysTab;
     CLOSE c_maturity_days;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'Fetched '
         || x_maturityDaysTab.COUNT
         || ' records.'
         );

     print_debuginfo(l_module_name, 'EXIT');
     END IF;
 END loadPmtMethodMaturityDays;



  /*--------------------------------------------------------------------
 | NAME:
 |     performMaturityDateCalculation
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE performMaturityDateCalculation(
     --x_paymentTab    IN OUT NOCOPY paymentTabType
       p_trx_mat_index IN BINARY_INTEGER
     )
 IS
 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.performMaturityDateCalculation';
 --l_maturity_days_tab      pmtMethodMaturityDaysTab;
 l_maturity_days_offset   IBY_PAYMENT_METHODS_VL.maturity_date_offset_days%TYPE;
 l_maturity_date_set_flag BOOLEAN := FALSE;
 l_temp_discount_date     DATE := NULL;
 l_temp_due_date          DATE := NULL;

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     /*
      * Load up all the payment methods that support future
      * dated payments along with their maturity offset days.
      * We will be adding the offset days (if available) to the
      * payment date to arrive at the maturity date.
      */
     --loadPmtMethodMaturityDays(l_maturity_days_tab);

     /*
      * Loop through all the payments, setting maturity dates
      * for each future dated payment.
      */
     -- FOR i IN x_paymentTab.FIRST .. x_paymentTab.LAST LOOP

         /* initialize flag before each iteration */
         l_maturity_date_set_flag := FALSE;

         /*
          * For each payment that is a future dated payment
          * determine the maturity date.
          */
         IF (IBY_PAYGROUP_PUB.pmtTable.bill_payable_flag(p_trx_mat_index) = 'Y') THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Payment '
                 || IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_mat_index)
                 || ' is a future dated payment'
                 );
            END IF;
             /*
              * ATTEMPT 1:
              *
              * Try to get the maturity date offset days from the
              * payment method and add this to the payment date on
              * the payment to arrive at the maturity date.
              */
             l_maturity_days_offset := getMaturityDaysForPmtMethod(
                                           IBY_PAYGROUP_PUB.pmtTable.payment_method_code(p_trx_mat_index)
                                           );

             IF (l_maturity_days_offset <> -1) THEN

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Adding '
                     || l_maturity_days_offset
                     || ' offset days to payment date to arrive at '
                     || 'maturity date.'
                     );
     END IF;
                 IBY_PAYGROUP_PUB.pmtTable.maturity_date(p_trx_mat_index) :=
                     IBY_PAYGROUP_PUB.pmtTable.payment_date(p_trx_mat_index) + l_maturity_days_offset;

                 l_maturity_date_set_flag := TRUE;

             ELSE

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Maturity date offset not '
                     || 'set on payment method '
                     || IBY_PAYGROUP_PUB.pmtTable.payment_method_code(p_trx_mat_index)
                     || ' (so maturity date needs to be calculated).'
                     );
     END IF;
                 l_maturity_date_set_flag := FALSE;

             END IF;

             /*
              * ATTEMPT II:
              *
              * Set the maturity date based on the earliest
              * available discount date from the documents
              * on the payment.
              *
              * Note: Maturity date is also calculated from
              * the payment due date in ATTEMPT III below.
              *
              * The value set of the maturity date will be
              * the earliest of (discount date, payment due date).
              */

             /* initialize before each iteration */
             l_temp_discount_date := NULL;

             IF (l_maturity_date_set_flag = FALSE) THEN

                 BEGIN
                 select min(discount_date)
                 into l_temp_discount_date
                 from iby_docs_in_pmt_gt
                 where payment_id = IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_mat_index)
                 AND discount_date is not null
                 AND discount_date >= IBY_PAYGROUP_PUB.pmtTable.payment_date(p_trx_mat_index);
                 EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    l_temp_discount_date := NULL;
                    WHEN OTHERS THEN
                        IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                        print_debuginfo(l_module_name, 'The query throws OTHERS Exception');
                        END IF;
                    l_temp_discount_date := NULL;
                 END;
                 /*
                  * The earliest available discount date is one
                  * candidate for the maturity date.
                  */
                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Earliest available '
                     || 'discount date for payment '
                     || IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_mat_index)
                     || ' is '
                     || l_temp_discount_date
                     );
                 END IF;
             END IF; -- if maturity date is not set for this payment

             /*
              * ATTEMPT III:
              *
              * Set the maturity date based on the earliest
              * available payment due date from the documents
              * on the payment.
              */

             /* initialize before each iteration */
             l_temp_due_date := NULL;

             IF (l_maturity_date_set_flag = FALSE) THEN

               BEGIN
                 select min(payment_due_date)
                 into l_temp_due_date from iby_docs_in_pmt_gt
                 where payment_id = IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_mat_index)
                 AND payment_due_date is not null
                 AND payment_due_date >= IBY_PAYGROUP_PUB.pmtTable.payment_date(p_trx_mat_index);
                 EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    l_temp_due_date := NULL;
                    WHEN OTHERS THEN
                        IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                        print_debuginfo(l_module_name, 'The query throws OTHERS Exception');
                        END IF;
                    l_temp_due_date := NULL;
               END;

                 /*
                  * The earliest available due date is the
                  * other candidate for the maturity date.
                  */
                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Earliest available '
                     || 'due date for payment '
                     || IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_mat_index)
                     || ' is '
                     || l_temp_due_date
                     );
                 END IF;
                 /*
                  * Fix for bug 5334177:
                  *
                  * Maturity Date = EARLIEST (ATTEMPT II, ATTEMPT III)
                  *
                  * Set the calculated maturity date on the
                  * payment as follows:
                  *
                  * 1. Maturity date is earliest of
                  *    (discount date, due date).
                  *
                  * 2. If either value is not available
                  *    use the other.
                  *
                  * 3. If both values are not available
                  *    use the payment date on the
                  *    payment as the maturity date.
                  */

                 IF (l_temp_discount_date IS NOT NULL AND
                     l_temp_due_date      IS NOT NULL) THEN

                     IF (l_temp_discount_date <= l_temp_due_date) THEN

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Setting '
                             || 'maturity date to discount date '
                             || l_temp_discount_date
                             || ' for payment '
                             || IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_mat_index)
                             || ' because it is earlier '
                             || 'than due date '
                             || l_temp_due_date
                             );
     END IF;
                         IBY_PAYGROUP_PUB.pmtTable.maturity_date(p_trx_mat_index) :=
                             l_temp_discount_date;

                         l_maturity_date_set_flag := TRUE;

                     ELSE

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Setting '
                             || 'maturity date to due date '
                             || l_temp_due_date
                             || ' for payment '
                             || IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_mat_index)
                             || ' because it is earlier '
                             || 'than discount date '
                             || l_temp_discount_date
                             );
     END IF;
                         IBY_PAYGROUP_PUB.pmtTable.maturity_date(p_trx_mat_index) := l_temp_due_date;

                         l_maturity_date_set_flag := TRUE;

                     END IF;

                 ELSIF (l_temp_discount_date IS NULL AND
                        l_temp_due_date      IS NULL) THEN

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Defaulting '
                             || 'maturity date to payment date '
                             || IBY_PAYGROUP_PUB.pmtTable.payment_date(p_trx_mat_index)
                             || ' for payment '
                             || IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_mat_index)
                             || ' because both discount and due '
                             || 'dates are not available.'
                             );
     END IF;
                         IBY_PAYGROUP_PUB.pmtTable.maturity_date(p_trx_mat_index) :=
                             IBY_PAYGROUP_PUB.pmtTable.payment_date(p_trx_mat_index);

                         l_maturity_date_set_flag := TRUE;

                 ELSE

                     /*
                      * If we come here, it means that only
                      * one of the discount date or the due
                      * date is available.
                      */
                     IF (l_temp_discount_date IS NOT NULL) THEN

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Setting '
                             || 'maturity date to discount date '
                             || l_temp_discount_date
                             || ' for payment '
                             || IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_mat_index)
                             || ' because no due date available.'
                             );
     END IF;
                         IBY_PAYGROUP_PUB.pmtTable.maturity_date(p_trx_mat_index) :=
                             l_temp_discount_date;

                         l_maturity_date_set_flag := TRUE;

                     ELSE

                         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Setting '
                             || 'maturity date to due date '
                             || l_temp_due_date
                             || ' for payment '
                             || IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_mat_index)
                             || ' because no discount date available.'
                             );
     END IF;
                         IBY_PAYGROUP_PUB.pmtTable.maturity_date(p_trx_mat_index) := l_temp_due_date;

                         l_maturity_date_set_flag := TRUE;

                     END IF;

                 END IF; -- if discount date and due date are not null

             END IF; -- if maturity date is not set for this payment

             /*
              * If all our efforts to calculate maturity date for
              * this payment have failed, log it.
              */
             IF (l_maturity_date_set_flag = FALSE) THEN

                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Maturity date '
                     || 'could not be derived for payment '
                     || IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_mat_index)
                     );
     END IF;
                 /*
                  * This should never happen; raise an
                  * exception.
                  */
                 IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Maturity date is a must '
                     || 'for a bill payable. Aborting ..',
                     FND_LOG.LEVEL_UNEXPECTED
                     );
     END IF;
                 APP_EXCEPTION.RAISE_EXCEPTION;

             END IF;

         ELSE

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Payment '
                 || IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_mat_index)
                 || ' is not a future dated payment'
                 );
     END IF;
         END IF; -- if bills payable flag on pmt is 'Y'

    --     END LOOP; -- for each payment

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'EXIT');
     END IF;
 END performMaturityDateCalculation;



/*--------------------------------------------------------------------
 | NAME:
 |     getMaturityDaysForPmtMethod
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 FUNCTION getMaturityDaysForPmtMethod(
     p_pmt_method_code    IN  IBY_PAYMENTS_ALL.payment_method_code%TYPE,
     p_maturityDaysTab    IN  pmtMethodMaturityDaysTab
     ) RETURN NUMBER
 IS
 l_maturity_days_offset IBY_PAYMENT_METHODS_VL.maturity_date_offset_days%TYPE
     := -1;
 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.getMaturityDaysForPmtMethod';
 BEGIN

     IF (p_maturityDaysTab.COUNT = 0) THEN

         l_maturity_days_offset := -1;
         RETURN l_maturity_days_offset;

     END IF;

     FOR i IN p_maturityDaysTab.FIRST .. p_maturityDaysTab.LAST LOOP

         IF (p_pmt_method_code = p_maturityDaysTab(i).pmt_method_cd) THEN

             l_maturity_days_offset := p_maturityDaysTab(i).
                                           maturity_offset_days;

             RETURN l_maturity_days_offset;

         END IF;

     END LOOP;

     /*
      * Return -1 if we could not find the given
      * payment method.
      */

     l_maturity_days_offset := -1;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'Given payment method code '
         || p_pmt_method_code
         || ' was not found in list of payment methods which '
         || 'support future dated payments. Returning -1.'
         );
     END IF;
     RETURN l_maturity_days_offset;

 END getMaturityDaysForPmtMethod;

/*--------------------------------------------------------------------
 | NAME:
 |     getMaturityDaysForPmtMethod
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 FUNCTION getMaturityDaysForPmtMethod(
     p_pmt_method_code    IN  IBY_PAYMENTS_ALL.payment_method_code%TYPE
 --    p_maturityDaysTab    IN  pmtMethodMaturityDaysTab
     ) RETURN NUMBER
 IS
 l_maturity_days_offset IBY_PAYMENT_METHODS_VL.maturity_date_offset_days%TYPE := -1;
 --l_payment_method_code IBY_PAYMENT_METHODS_VL.payment_method_code%TYPE;
 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.getMaturityDaysForPmtMethod';
 BEGIN
  IF(maturity_date_tbl.EXISTS(p_pmt_method_code)) THEN
       IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
        print_debuginfo(l_module_name, 'Getting the data from Cache For Payment Method Code ' || p_pmt_method_code);
       END IF;
        l_maturity_days_offset  := maturity_date_tbl(p_pmt_method_code);
  ELSE
    BEGIN
          IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
          print_debuginfo(l_module_name, 'Getting the data from DB For Payment Method Code ' || p_pmt_method_code);
          END IF;
             SELECT maturity_date_offset_days
             INTO l_maturity_days_offset
             FROM IBY_PAYMENT_METHODS_VL
             WHERE support_bills_payable_flag = 'Y'
             AND payment_method_code = p_pmt_method_code;
    EXCEPTION
           WHEN NO_DATA_FOUND THEN
           --l_payment_method_code := null;
           l_maturity_days_offset := -1;
           WHEN OTHERS THEN
           --l_payment_method_code := null;
           l_maturity_days_offset := -1;
     END;
     --maturity_date_tbl(p_pmt_method_code).payment_method_code := l_payment_method_code;
     maturity_date_tbl(p_pmt_method_code) := l_maturity_days_offset;
  END IF;
     IF(l_maturity_days_offset = -1) THEN
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                  print_debuginfo(l_module_name, 'Given payment method code '
                 || p_pmt_method_code
                 || ' was not found in list of payment methods which '
                 || 'support future dated payments. Returning -1.'
                 );
             END IF;
     ELSE
           IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                print_debuginfo(l_module_name, 'Given payment method code '
               || p_pmt_method_code
               || ' is returning the l_maturity_days_offset as '
               || l_maturity_days_offset
               );

            END IF;
      END IF;

  RETURN l_maturity_days_offset;

 END getMaturityDaysForPmtMethod;


/*--------------------------------------------------------------------
 | NAME:
 |     refreshDocAndPmtAmounts
 |
 | PURPOSE:
 |     This method is called once per payment after credit memo
 |     adjustments for that payment are complete. This method
 |     will refresh the document and payment amounts PLSQL tables
 |     to reflect the credit memo adjustments that were performed.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE refreshDocAndPmtAmounts(
     p_adjustedPmtId      IN            IBY_PAYMENTS_ALL.payment_id%TYPE,
     p_adjustedNegDocsTab IN            docsInPaymentTabType,
     x_paymentTab         IN OUT NOCOPY paymentTabType,
     x_docsInPmtTab       IN OUT NOCOPY docsInPaymentTabType
     )
 IS
 BEGIN

     /*
      * We have just finished making credit memo adjustments
      * for a particular payment.
      *
      * Adjusted negative values would be stored in
      * l_neg_docs_array (Positive values are not touched
      * by the credit memo adjustment logic). Copy back
      * these adjusted values into x_docsInPmtTab and
      * x_paymentTab so that these changes are reflected
      * back to the caller.
      *
      * The adjusted values in x_docsInPmtTab and x_paymentTab
      * will be used in updating the database.
      */
     FOR n in p_adjustedNegDocsTab.FIRST .. p_adjustedNegDocsTab.LAST LOOP

         IF (p_adjustedNegDocsTab(n).payment_id = p_adjustedPmtId) THEN

             FOR p in x_docsInPmtTab.FIRST .. x_docsInPmtTab.LAST LOOP

                 IF (x_docsInPmtTab(p).payment_id = p_adjustedPmtId) THEN

                     IF (p_adjustedNegDocsTab(n).document_id =
                         x_docsInPmtTab(p).document_id) THEN

                         /*
                          * Store back the adjusted amount value
                          * for this document.
                          */
                         x_docsInPmtTab(p).document_amount :=
                             p_adjustedNegDocsTab(n).document_amount;

                         /*
                          * Since there will only be one document with
                          * a particular document id in x_docsInPmtTab,
                          * we can exit the loop as soon as we find it.
                          */
                         EXIT;

                     END IF;

                 END IF;

             END LOOP; -- for each doc in x_docsInPmtTab

         END IF;

     END LOOP; -- for each doc in p_adjustedNegDocsTab

     /*
      * After adjusting the document amount, we must make sure
      * adjust the payment amount as well:
      *
      * payment amount = SUM (document amounts)
      */
     FOR q in x_paymentTab.FIRST .. x_paymentTab.LAST LOOP

         IF (x_paymentTab(q).payment_id = p_adjustedPmtId) THEN

             /* reset payment amount to zero */
             x_paymentTab(q).payment_amount := 0;

             /*
              * Set payment amount to sum of all document amounts
              * that constitute this payment.
              */
             FOR r in x_docsInPmtTab.FIRST .. x_docsInPmtTab.LAST LOOP

                 IF (x_docsInPmtTab(r).payment_id = p_adjustedPmtId) THEN

                     x_paymentTab(q).payment_amount :=
                         x_paymentTab(q).payment_amount
                             + x_docsInPmtTab(r).document_amount;

                 END IF;

             END LOOP;

             /*
              * Since there will only be one payment in x_paymentTab
              * we can exit the loop as soon as we find it.
              */
             EXIT;

         END IF;

     END LOOP;

 END refreshDocAndPmtAmounts;

/*--------------------------------------------------------------------
 | NAME:
 |     getListOfQualifyingNegPmts
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE getListOfQualifyingNegPmts(
     x_negPmtsTab    IN OUT NOCOPY pmtIdsTab,
     p_paymentTab    IN paymentTabType,
     p_docsInPmtTab  IN docsInPaymentTabType
     )
 IS
 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.getListOfQualifyingNegPmts';
 l_already_added_flag BOOLEAN := FALSE;
 BEGIN

     /*
      * Find all payments that satisfy the following criteria:
      * 1. Payment amount must be negative
      * 2. Payment must contain at least one positive document
      *    payable.
      * 3. Payment must not be pay alone.
      *
      * 1. and 2. imply that the payment is not pay alone, so
      * condition 3. need not be explicitly checked.
      *
      * Payments that satisfy these criteria qualify for
      * credit memo adjustment.
      */
     FOR j IN p_paymentTab.FIRST .. p_paymentTab.LAST LOOP

         /* Payment amount is negative */
         IF (p_paymentTab(j).payment_amount < 0) THEN

             FOR k IN p_docsInPmtTab.FIRST .. p_docsInPmtTab.LAST LOOP

                 IF (p_docsInPmtTab(k).payment_id =
                     p_paymentTab(j).payment_id) THEN

                     /* Pmt contains a positive document */
                     IF (p_docsInPmtTab(k).document_amount > 0) THEN

                         /*
                          * This payment satisfies the criteria
                          * for credit memo adjustment.
                          */

                         /*
                          * Check if payment already in list
                          * of qualifying payments
                          */
                         l_already_added_flag := checkIfPmtAlreadyAdded(
                                                     p_paymentTab(j).
                                                         payment_id,
                                                     x_negPmtsTab);

                         /*
                          * If payment not already in qualifying
                          * list, add payment to the list.
                          */
                         IF (l_already_added_flag = FALSE) THEN

                             x_negPmtsTab(x_negPmtsTab.COUNT + 1)
                                 := p_paymentTab(j).payment_id;

                             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
 print_debuginfo(l_module_name, 'Payment id '
                                 || p_paymentTab(j).payment_id
                                 || ' qualifies for '
                                 || 'credit memo adjustment.'
                                 );
			     END IF;
                         END IF;

                     END IF; -- if doc amount greater than zero

                 END IF; -- if document matches the payment id

             END LOOP; -- loop through all documents of this payment

         END IF; -- if payment amount less than zero

     END LOOP; -- loop through all payments

 END getListOfQualifyingNegPmts;

/*--------------------------------------------------------------------
 | NAME:
 |     populateLEsOnPmts
 |
 | PURPOSE:
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE populateLEsOnPmts(
     x_paymentTab      IN OUT NOCOPY paymentTabType,
     p_bankAccountLEs  IN            bankAccountLETabType
     )
 IS
 BEGIN

     IF (x_paymentTab.COUNT = 0 OR p_bankAccountLEs.COUNT = 0) THEN
         RETURN;
     END IF;

     /*
      * Loop through all the created payments, searching for
      * internal bank account ids. If we find a match, assign the
      * legal entity id on the internal bank account to the payment.
      */
     FOR i IN x_paymentTab.FIRST .. x_paymentTab.LAST LOOP

         FOR j in p_bankAccountLEs.FIRST .. p_bankAccountLEs.LAST LOOP

             IF (x_paymentTab(i).internal_bank_account_id =
                 p_bankAccountLEs(j).int_bank_acct_id) THEN

                 x_paymentTab(i).legal_entity_id := p_bankAccountLEs(j).le_id;

             END IF;

         END LOOP;

     END LOOP;

 END populateLEsOnPmts;

/*--------------------------------------------------------------------
 | NAME:
 |     printDocsInPmtTab
 |
 | PURPOSE:
 |     Prints out the documents and payments within the docsInPaymentTabType
 |     PLSQL table. To be used for debug purposes.
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE printDocsInPmtTab(
     p_docsInPmtTab    IN docsInPaymentTabType
     )
 IS
 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME || '.printDocsInPmtTab';
 BEGIN

     IF (p_docsInPmtTab.COUNT = 0) THEN
         RETURN;
     END IF;

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'List of docs/pmts: ');
     END IF;
     FOR i in p_docsInPmtTab.FIRST..p_docsInPmtTab.LAST LOOP
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'Payment: '
             || p_docsInPmtTab(i).payment_id
             || ', document: '
             || p_docsInPmtTab(i).document_id
             || ', document amt: '
             || p_docsInPmtTab(i).document_amount
             || ', document curr: '
             || p_docsInPmtTab(i).document_currency
             );
         END IF;
     END LOOP;

 END printDocsInPmtTab;

/*--------------------------------------------------------------------
 | NAME:
 |     handleJapaneseBankCharges
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE handleJapaneseBankCharges(
     p_cap_payreq_cd  IN            VARCHAR2,
     p_cap_id         IN            NUMBER,
     x_paymentTab     IN OUT NOCOPY paymentTabType,
     x_docsInPmtTab   IN OUT NOCOPY docsInPaymentTabType,
     x_docErrorTab    IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.docErrorTabType,
     x_errTokenTab    IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.trxnErrTokenTabType
     )
 IS

 /* these two are passed to calling app via hook */
 l_hookPaymentTab    IBY_PAYGROUP_PUB.hookPaymentTabType;
 l_hookDocsInPmtTab  IBY_PAYGROUP_PUB.hookDocsInPaymentTabType;

 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.handleJapaneseBankCharges';

 l_hook_name        VARCHAR2(500);
 l_stmt             VARCHAR2(1000);

 /* used in invocation of callout procedure */
 l_api_version    CONSTANT NUMBER := 1.0;
 l_msg_count      NUMBER;
 l_msg_data       VARCHAR2(2000);

 l_return_status  VARCHAR2(500);

 /*
  * Package name can be hardcoded since we know that this hook
  * is only called by AP.
  */
 l_pkg_name    CONSTANT VARCHAR2(100) := 'AP_PMT_CALLOUT_PKG';

 /*
  * Implementing the hook is optional for the calling app.
  * If the calling app does not implement the hook, then
  * the call to the hook will result in ORA-06576 error.
  *
  * There is no exception name associated with this code, so
  * we create one called 'PROCEDURE_NOT_IMPLEMENTED'. If this
  * exception occurs, it is not fatal: we log the error and
  * proceed.
  *
  * If, on the other hand, the calling app implements the
  * hook, but the hook throws an exception, it is fatal
  * and we must abort the program (this will be caught
  * in WHEN OTHERS block).
  */
 PROCEDURE_NOT_IMPLEMENTED EXCEPTION;
 PRAGMA EXCEPTION_INIT(PROCEDURE_NOT_IMPLEMENTED, -6576);

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     /*
      * Populate the hook tables with payment data.
      */
     performPreHookProcess(p_cap_payreq_cd, p_cap_id, x_paymentTab,
         x_docsInPmtTab, l_hookPaymentTab, l_hookDocsInPmtTab);

     /*
      * Now try to call the external app's implementation of the hook.
      * The calling app may or may not have implemented the hook, so
      * it's not fatal if the implementation does not exist.
      */
     l_hook_name := l_pkg_name || '.' || 'ap_JapanBankChargeHook';

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'Attempting to call hook: '
         || l_hook_name);
       END IF;
     l_stmt := 'CALL '|| l_hook_name || '(:1, :2, :3, :4, :5, :6)';

     BEGIN

         EXECUTE IMMEDIATE
             (l_stmt)
         USING
             IN  l_api_version,
             IN  FND_API.G_FALSE,
             IN  FND_API.G_FALSE,
             OUT l_return_status,
             OUT l_msg_count,
             OUT l_msg_data
         ;

     EXCEPTION

         WHEN PROCEDURE_NOT_IMPLEMENTED THEN
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Japanese bank charge hook "'
                 || l_hook_name
                 || '" not implemented by external application.'
                 );

             print_debuginfo(l_module_name, 'Skipping hook call.');
	     END IF;
         WHEN OTHERS THEN
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Fatal: Japanese bank charge '
                 || 'hook ''' || l_hook_name
                 || ''', generated exception.',
                 FND_LOG.LEVEL_UNEXPECTED
                 );

             print_debuginfo(l_module_name, 'SQL code: '   || SQLCODE,
                 FND_LOG.LEVEL_UNEXPECTED);
             print_debuginfo(l_module_name, 'SQL err msg: '|| SQLERRM,
                 FND_LOG.LEVEL_UNEXPECTED);
	     END IF;
             /*
              * Propogate exception to caller.
              */
             RAISE;
     END;

     /*
      * If Japanese bank charge hook returned an error response,
      * raise an exception.
      */
     IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'Fatal: Japanese bank charge hook '''
             || l_hook_name  || ''' returned error status code: '
             || l_return_status,
             FND_LOG.LEVEL_UNEXPECTED
             );

         print_debuginfo(l_module_name, 'Raising exception .. ',
             FND_LOG.LEVEL_UNEXPECTED);
	 END IF;
         APP_EXCEPTION.RAISE_EXCEPTION;

     END IF;

     /*
      * Read back the adjusted payment data.
      */
     performPostHookProcess(x_paymentTab, x_docsInPmtTab, l_hookPaymentTab,
         l_hookDocsInPmtTab, x_docErrorTab, x_errTokenTab);

     print_debuginfo(l_module_name, 'EXIT');

 END handleJapaneseBankCharges;


/*--------------------------------------------------------------------
 | NAME:
 |     handleJapaneseBankCharges
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE handleJapaneseBankCharges(
     p_cap_payreq_cd  IN            VARCHAR2,
     p_ppr_id	      IN            NUMBER,
     p_cap_id         IN            NUMBER,
 --    x_paymentTab     IN OUT NOCOPY paymentTabType,
 --     x_docsInPmtTab   IN OUT NOCOPY docsInPaymentTabType,
     x_docErrorTab    IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.docErrorTabType,
     x_errTokenTab    IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.trxnErrTokenTabType
     )
 IS

 /* these two are passed to calling app via hook */
 l_hookPaymentTab    IBY_PAYGROUP_PUB.hookPaymentTabType;
 l_hookDocsInPmtTab  IBY_PAYGROUP_PUB.hookDocsInPaymentTabType;

 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.handleJapaneseBankCharges';

 l_hook_name        VARCHAR2(500);
 l_stmt             VARCHAR2(1000);

 /* used in invocation of callout procedure */
 l_api_version    CONSTANT NUMBER := 1.0;
 l_msg_count      NUMBER;
 l_msg_data       VARCHAR2(2000);

 l_return_status  VARCHAR2(500);
 l_DocsInPmtCount NUMBER;
 l_prehook_count  NUMBER;

 /*
  * Package name can be hardcoded since we know that this hook
  * is only called by AP.
  */
 l_pkg_name    CONSTANT VARCHAR2(100) := 'AP_PMT_CALLOUT_PKG';

 /*
  * Implementing the hook is optional for the calling app.
  * If the calling app does not implement the hook, then
  * the call to the hook will result in ORA-06576 error.
  *
  * There is no exception name associated with this code, so
  * we create one called 'PROCEDURE_NOT_IMPLEMENTED'. If this
  * exception occurs, it is not fatal: we log the error and
  * proceed.
  *
  * If, on the other hand, the calling app implements the
  * hook, but the hook throws an exception, it is fatal
  * and we must abort the program (this will be caught
  * in WHEN OTHERS block).
  */
 PROCEDURE_NOT_IMPLEMENTED EXCEPTION;
 PRAGMA EXCEPTION_INIT(PROCEDURE_NOT_IMPLEMENTED, -6576);

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     /*
      * Populate the hook tables with payment data.
      */
     /*performPreHookProcess(p_cap_payreq_cd, p_cap_id, x_paymentTab,
         x_docsInPmtTab, l_hookPaymentTab, l_hookDocsInPmtTab);*/

    -- print_debuginfo(l_module_name,'Count of x_paymentTab' ||x_paymentTab.COUNT);
     performPreHookProcess(p_cap_payreq_cd,p_ppr_id,l_prehook_count,p_cap_id
             --x_paymentTab,
             --l_hookPaymentTab
	     );

  IF(l_prehook_count <> 0)  THEN

     /*
      * Now try to call the external app's implementation of the hook.
      * The calling app may or may not have implemented the hook, so
      * it's not fatal if the implementation does not exist.
      */
     l_hook_name := l_pkg_name || '.' || 'ap_JapanBankChargeHook';

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'Attempting to call hook: '
         || l_hook_name);
       END IF;
     l_stmt := 'CALL '|| l_hook_name || '(:1, :2, :3, :4, :5, :6)';

     BEGIN

         EXECUTE IMMEDIATE
             (l_stmt)
         USING
             IN  l_api_version,
             IN  FND_API.G_FALSE,
             IN  FND_API.G_FALSE,
             OUT l_return_status,
             OUT l_msg_count,
             OUT l_msg_data
         ;

     EXCEPTION

         WHEN PROCEDURE_NOT_IMPLEMENTED THEN
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Japanese bank charge hook "'
                 || l_hook_name
                 || '" not implemented by external application.'
                 );

             print_debuginfo(l_module_name, 'Skipping hook call.');
	     END IF;
         WHEN OTHERS THEN
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Fatal: Japanese bank charge '
                 || 'hook ''' || l_hook_name
                 || ''', generated exception.',
                 FND_LOG.LEVEL_UNEXPECTED
                 );

             print_debuginfo(l_module_name, 'SQL code: '   || SQLCODE,
                 FND_LOG.LEVEL_UNEXPECTED);
             print_debuginfo(l_module_name, 'SQL err msg: '|| SQLERRM,
                 FND_LOG.LEVEL_UNEXPECTED);
	     END IF;
             /*
              * Propogate exception to caller.
              */
             RAISE;
     END;

     /*
      * If Japanese bank charge hook returned an error response,
      * raise an exception.
      */
     IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'Fatal: Japanese bank charge hook '''
             || l_hook_name  || ''' returned error status code: '
             || l_return_status,
             FND_LOG.LEVEL_UNEXPECTED
             );

         print_debuginfo(l_module_name, 'Raising exception .. ',
             FND_LOG.LEVEL_UNEXPECTED);
	 END IF;
         APP_EXCEPTION.RAISE_EXCEPTION;

     END IF;

     /*
      * Read back the adjusted payment data.
      */
     performPostHookProcess(
         --x_paymentTab,
	 --l_hookPaymentTab,
	 p_cap_payreq_cd,
	 l_prehook_count,
         x_docErrorTab, x_errTokenTab);

  ELSE
            IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Value of l_prehook_count is:' || l_prehook_count || 'so not calling any hook');
            END IF;
  END IF;
     print_debuginfo(l_module_name, 'EXIT');

 END handleJapaneseBankCharges;

/*--------------------------------------------------------------------
 | NAME:
 |     performExtendedWitholding
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE performExtendedWitholding(
     p_cap_payreq_cd  IN            VARCHAR2,
     p_cap_id         IN            NUMBER,
     x_paymentTab     IN OUT NOCOPY paymentTabType,
     x_docsInPmtTab   IN OUT NOCOPY docsInPaymentTabType,
     x_docErrorTab    IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.docErrorTabType,
     x_errTokenTab    IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.trxnErrTokenTabType
     )
 IS

 /* these two are passed to calling app via hook */
 l_hookPaymentTab    IBY_PAYGROUP_PUB.hookPaymentTabType;
 l_hookDocsInPmtTab  IBY_PAYGROUP_PUB.hookDocsInPaymentTabType;

 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.performExtendedWitholding';

 l_hook_name        VARCHAR2(500);
 l_stmt             VARCHAR2(1000);

 /* used in invocation of callout procedure */
 l_api_version    CONSTANT NUMBER := 1.0;
 l_msg_count      NUMBER;
 l_msg_data       VARCHAR2(2000);

 l_return_status  VARCHAR2(500);

 /*
  * Package name can be hardcoded since we know that this hook
  * is only called by AP.
  */
 l_pkg_name    CONSTANT VARCHAR2(100) := 'AP_AWT_CALLOUT_PKG';

 /*
  * Implementing the hook is optional for the calling app.
  * If the calling app does not implement the hook, then
  * the call to the hook will result in ORA-06576 error.
  *
  * There is no exception name associated with this code, so
  * we create one called 'PROCEDURE_NOT_IMPLEMENTED'. If this
  * exception occurs, it is not fatal: we log the error and
  * proceed.
  *
  * If, on the other hand, the calling app implements the
  * hook, but the hook throws an exception, it is fatal
  * and we must abort the program (this will be caught
  * in WHEN OTHERS block).
  */
 PROCEDURE_NOT_IMPLEMENTED EXCEPTION;
 PRAGMA EXCEPTION_INIT(PROCEDURE_NOT_IMPLEMENTED, -6576);

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     /*
      * Populate the hook tables with payment data.
      */
     performPreHookProcess(p_cap_payreq_cd, p_cap_id, x_paymentTab,
         x_docsInPmtTab, l_hookPaymentTab, l_hookDocsInPmtTab);

     /*
      * Now try to call the external app's implementation of the hook.
      * The calling app may or may not have implemented the hook, so
      * it's not fatal if the implementation does not exist.
      */
     l_hook_name := l_pkg_name || '.' || 'zx_paymentsAdjustHook';

     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'Attempting to call hook: '
         || l_hook_name);
     END IF;
     l_stmt := 'CALL '|| l_hook_name || '(:1, :2, :3, :4, :5, :6)';

     BEGIN

         EXECUTE IMMEDIATE
             (l_stmt)
         USING
             IN  l_api_version,
             IN  FND_API.G_FALSE,
             IN  FND_API.G_FALSE,
             OUT l_return_status,
             OUT l_msg_count,
             OUT l_msg_data
         ;

     EXCEPTION

         WHEN PROCEDURE_NOT_IMPLEMENTED THEN
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Extended withholding hook "'
                 || l_hook_name
                 || '" not implemented by external application.'
                 );

             print_debuginfo(l_module_name, 'Skipping hook call.');
     END IF;
         WHEN OTHERS THEN
             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Fatal: Extended witholding hook '''
                 || l_hook_name  || ''', generated exception. ',
                 FND_LOG.LEVEL_UNEXPECTED
                 );

             print_debuginfo(l_module_name, 'SQL code: '   || SQLCODE,
                 FND_LOG.LEVEL_UNEXPECTED);
             print_debuginfo(l_module_name, 'SQL err msg: '|| SQLERRM,
                 FND_LOG.LEVEL_UNEXPECTED);
     END IF;
             /*
              * Propogate exception to caller.
              */
             RAISE;
     END;

     /*
      * If extended withholding hook returned an error response,
      * raise an exception.
      */
     IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'Fatal: Extended witholding hook '''
             || l_hook_name  || ''' returned error status code: '
             || l_return_status,
             FND_LOG.LEVEL_UNEXPECTED
             );

         print_debuginfo(l_module_name, 'Raising exception .. ',
             FND_LOG.LEVEL_UNEXPECTED);
	END IF;
         APP_EXCEPTION.RAISE_EXCEPTION;

     END IF;

     /*
      * Read back the adjusted payment data.
      */
     performPostHookProcess(x_paymentTab, x_docsInPmtTab, l_hookPaymentTab,
         l_hookDocsInPmtTab, x_docErrorTab, x_errTokenTab);

     print_debuginfo(l_module_name, 'EXIT');

 END performExtendedWitholding;

/*--------------------------------------------------------------------
 | NAME:
 |     performExtendedWitholding
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE performExtendedWitholding(
     p_cap_payreq_cd  IN            VARCHAR2,
     p_ppr_id         IN            NUMBER,
     p_cap_id         IN            NUMBER,
 --    x_paymentTab     IN OUT NOCOPY paymentTabType,
 --     x_docsInPmtTab   IN OUT NOCOPY docsInPaymentTabType,
     x_docErrorTab    IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.docErrorTabType,
     x_errTokenTab    IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.trxnErrTokenTabType
     )
 IS

 /* these two are passed to calling app via hook */
 l_hookPaymentTab    IBY_PAYGROUP_PUB.hookPaymentTabType;
 l_hookDocsInPmtTab  IBY_PAYGROUP_PUB.hookDocsInPaymentTabType;

 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                             '.performExtendedWitholding';

 l_hook_name        VARCHAR2(500);
 l_stmt             VARCHAR2(1000);

 /* used in invocation of callout procedure */
 l_api_version    CONSTANT NUMBER := 1.0;
 l_msg_count      NUMBER;
 l_msg_data       VARCHAR2(2000);

 l_return_status  VARCHAR2(500);
 l_prehook_count  NUMBER;
 l_DocsInPmtCount NUMBER;

 /*
  * Package name can be hardcoded since we know that this hook
  * is only called by AP.
  */
 l_pkg_name    CONSTANT VARCHAR2(100) := 'AP_AWT_CALLOUT_PKG';

 /*
  * Implementing the hook is optional for the calling app.
  * If the calling app does not implement the hook, then
  * the call to the hook will result in ORA-06576 error.
  *
  * There is no exception name associated with this code, so
  * we create one called 'PROCEDURE_NOT_IMPLEMENTED'. If this
  * exception occurs, it is not fatal: we log the error and
  * proceed.
  *
  * If, on the other hand, the calling app implements the
  * hook, but the hook throws an exception, it is fatal
  * and we must abort the program (this will be caught
  * in WHEN OTHERS block).
  */
 PROCEDURE_NOT_IMPLEMENTED EXCEPTION;
 PRAGMA EXCEPTION_INIT(PROCEDURE_NOT_IMPLEMENTED, -6576);

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     /*
      * Populate the hook tables with payment data.
      */
     /*performPreHookProcess(p_cap_payreq_cd, p_cap_id, x_paymentTab,
         x_docsInPmtTab, l_hookPaymentTab, l_hookDocsInPmtTab);*/

    -- print_debuginfo(l_module_name, 'Count of x_paymentTab' ||x_paymentTab.COUNT);
     performPreHookProcess(p_cap_payreq_cd, p_ppr_id,l_prehook_count, p_cap_id
            --x_paymentTab,
            -- l_hookPaymentTab
	    );

 IF(l_prehook_count <> 0)  THEN
     /*
      * Now try to call the external app's implementation of the hook.
      * The calling app may or may not have implemented the hook, so
      * it's not fatal if the implementation does not exist.
      */

           l_hook_name := l_pkg_name || '.' || 'zx_paymentsAdjustHook';

           IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
           print_debuginfo(l_module_name, 'Attempting to call hook: '
               || l_hook_name);
           END IF;
           l_stmt := 'CALL '|| l_hook_name || '(:1, :2, :3, :4, :5, :6)';

           BEGIN

               EXECUTE IMMEDIATE
                   (l_stmt)
               USING
                   IN  l_api_version,
                   IN  FND_API.G_FALSE,
                   IN  FND_API.G_FALSE,
                   OUT l_return_status,
                   OUT l_msg_count,
                   OUT l_msg_data
               ;

           EXCEPTION

               WHEN PROCEDURE_NOT_IMPLEMENTED THEN
                   IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                   print_debuginfo(l_module_name, 'Extended withholding hook "'
                       || l_hook_name
                       || '" not implemented by external application.'
                       );

                   print_debuginfo(l_module_name, 'Skipping hook call.');
           END IF;
               WHEN OTHERS THEN
                   IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                   print_debuginfo(l_module_name, 'Fatal: Extended witholding hook '''
                       || l_hook_name  || ''', generated exception. ',
                       FND_LOG.LEVEL_UNEXPECTED
                       );

                   print_debuginfo(l_module_name, 'SQL code: '   || SQLCODE,
                       FND_LOG.LEVEL_UNEXPECTED);
                   print_debuginfo(l_module_name, 'SQL err msg: '|| SQLERRM,
                       FND_LOG.LEVEL_UNEXPECTED);
           END IF;
                   /*
                    * Propogate exception to caller.
                    */
                   RAISE;
           END;

     /*
      * If extended withholding hook returned an error response,
      * raise an exception.
      */
           IF (l_return_status <> FND_API.G_RET_STS_SUCCESS) THEN

               IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
               print_debuginfo(l_module_name, 'Fatal: Extended witholding hook '''
                   || l_hook_name  || ''' returned error status code: '
                   || l_return_status,
                   FND_LOG.LEVEL_UNEXPECTED
                   );

               print_debuginfo(l_module_name, 'Raising exception .. ',
                   FND_LOG.LEVEL_UNEXPECTED);
              END IF;
               APP_EXCEPTION.RAISE_EXCEPTION;

           END IF;

     /*
      * Read back the adjusted payment data.
      */
     performPostHookProcess(
         --x_paymentTab, l_hookPaymentTab,
	 p_cap_payreq_cd,
	 l_prehook_count,
         x_docErrorTab,
	 x_errTokenTab);

 ELSE
            IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                 print_debuginfo(l_module_name, 'Value of l_prehook_count is:' || l_prehook_count || 'so not calling any hook');
            END IF;
 END IF;
     print_debuginfo(l_module_name, 'EXIT');

 END performExtendedWitholding;

/*--------------------------------------------------------------------
 | NAME:
 |     initializePmts
 |
 | PURPOSE:
 |     Sets the default attributes for a created payment such as
 |     payment status, process type etc.
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE initializePmts(
     x_paymentTab      IN OUT NOCOPY paymentTabType
     )
 IS
 BEGIN

     IF (x_paymentTab.COUNT = 0) THEN
         RETURN;
     END IF;

     FOR i IN x_paymentTab.FIRST .. x_paymentTab.LAST LOOP

         x_paymentTab(i).payment_status                 := 'CREATED';
         x_paymentTab(i).process_type                   := 'STANDARD';

         /*
          * Fix for bug 5115270:
          *
          * For all flags, take care not to overwite the flag
          * already set.
          */
         x_paymentTab(i).payments_complete_flag         :=
             NVL(x_paymentTab(i).payments_complete_flag,         'N');
         x_paymentTab(i).bill_payable_flag              :=
             NVL(x_paymentTab(i).bill_payable_flag,              'N');
         x_paymentTab(i).exclusive_payment_flag         :=
             NVL(x_paymentTab(i).exclusive_payment_flag,         'N');
         x_paymentTab(i).separate_remit_advice_req_flag :=
             NVL(x_paymentTab(i).separate_remit_advice_req_flag, 'N');
         x_paymentTab(i).declare_payment_flag           :=
             NVL(x_paymentTab(i).declare_payment_flag,           'N');
         x_paymentTab(i).pregrouped_payment_flag        :=
             NVL(x_paymentTab(i).pregrouped_payment_flag,        'N');
         x_paymentTab(i).stop_confirmed_flag            :=
             NVL(x_paymentTab(i).stop_confirmed_flag,            'N');
         x_paymentTab(i).stop_released_flag             :=
             NVL(x_paymentTab(i).stop_released_flag,             'N');
         x_paymentTab(i).stop_request_placed_flag       :=
             NVL(x_paymentTab(i).stop_request_placed_flag,       'N');

         x_paymentTab(i).created_by                     := fnd_global.user_id;
         x_paymentTab(i).creation_date                  := sysdate;
         x_paymentTab(i).last_updated_by                := fnd_global.user_id;
         x_paymentTab(i).last_update_login              := fnd_global.user_id;
         x_paymentTab(i).last_update_date               := sysdate;
         x_paymentTab(i).object_version_number          := 1;

     END LOOP;

 END initializePmts;

/*--------------------------------------------------------------------
 | NAME:
 |     get_payreq_status
 |
 |
 | PURPOSE:
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 FUNCTION get_payreq_status (
     l_payreq_id IN IBY_PAY_SERVICE_REQUESTS.payment_service_request_id%TYPE)
     RETURN VARCHAR2
 IS

 l_payreq_status     VARCHAR2(100);
 l_module_name       CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                   '.get_payreq_status';

 BEGIN

     SELECT
         payment_service_request_status
     INTO
         l_payreq_status
     FROM
         IBY_PAY_SERVICE_REQUESTS
     WHERE
         payment_service_request_id = l_payreq_id;

     RETURN l_payreq_status;

 EXCEPTION
     WHEN OTHERS THEN
         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'Exception occured when '
             || 'retrieving payment request status for '
             || 'payment request '
             || l_payreq_id
             );
         print_debuginfo(l_module_name, 'SQLCODE: ' || SQLCODE);
         print_debuginfo(l_module_name, 'SQLERRM: ' || SQLERRM);
         print_debuginfo(l_module_name, 'Returning NULL for status');
	 END IF;
         RETURN NULL;

 END get_payreq_status;

/*--------------------------------------------------------------------
 | NAME:
 |     rebuildPayments
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE rebuildPayments(
     p_payment_request_id   IN IBY_PAY_SERVICE_REQUESTS.
                                         payment_service_request_id%TYPE,
     x_paymentTab           IN OUT NOCOPY IBY_PAYGROUP_PUB.paymentTabType,
     x_docsInPmtTab         IN OUT NOCOPY IBY_PAYGROUP_PUB.
                                              docsInPaymentTabType,
     x_ca_id                IN OUT NOCOPY IBY_PAY_SERVICE_REQUESTS.
                                              calling_app_id%TYPE,
     x_ca_payreq_cd         IN OUT NOCOPY IBY_PAY_SERVICE_REQUESTS.
                                              call_app_pay_service_req_code
                                              %TYPE,
     x_payReqCriteria       IN OUT NOCOPY IBY_PAYGROUP_PUB.
                                              payReqImposedCriteria
--  ,x_cbrTab               IN OUT NOCOPY IBY_PAYGROUP_PUB.
--                                             centralBankReportTabType
     )
 IS
 l_module_name           CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                   '.rebuildPayments';

 l_ca_payreq_cd            VARCHAR2(255) := '';
 l_ca_id                   NUMBER(15)    := 0;

 l_paymentTab        IBY_PAYGROUP_PUB.paymentTabType;

 /*
  * Stores the documents payable for all pmts in request.
  */
 l_docsInPmtTab      IBY_PAYGROUP_PUB.docsInPaymentTabType;

 /*
  * Stores the documents payable for a single payment.
  */
 l_docsForPmtTab     IBY_PAYGROUP_PUB.docsInPaymentTabType;

 l_pmt_amount        IBY_PAYMENTS_ALL.payment_amount%TYPE;

 /*
  * For storing central bank reporting information related to
  * each payment.
  */
-- l_cbrRec            IBY_PAYGROUP_PUB.centralBankReportRecType;
-- l_cbrTab            IBY_PAYGROUP_PUB.centralBankReportTabType;

 /*
  * Cursor to pick up payments.
  */
 CURSOR c_payments(p_payment_request_id NUMBER)
 IS
 SELECT
     *
 FROM
     IBY_PAYMENTS_ALL
 WHERE
     payment_service_request_id = p_payment_request_id AND

     /*
      * For the rebuild:
      * Only select payments that are in non-failed
      * status, or payments that are soft failed
      * ('FAILED_VALIDATION') status here. Do not
      * select payments that are is 'REJECTED' status
      * here as the underlying documents of rejected
      * payments would have already been kicked back to AP.
      */
     payment_status IN
         (
         PAY_STATUS_CREATED,
         PAY_STATUS_MODIFIED,
         PAY_STATUS_FAIL_VALID
         )
     ;

 /*
  * Cursor to pick up documents.
  */
 CURSOR c_documents(p_payment_request_id NUMBER, p_payment_id NUMBER)
 IS
 SELECT
     payment_id,
     document_payable_id,
     calling_app_id,
     calling_app_doc_unique_ref1,
     calling_app_doc_unique_ref2,
     calling_app_doc_unique_ref3,
     calling_app_doc_unique_ref4,
     calling_app_doc_unique_ref5,
     pay_proc_trxn_type_code,
     payment_amount,
     payment_currency_code,
     payment_grouping_number,
     document_status,
     amount_withheld,
     payment_due_date,
     discount_date,
     internal_bank_account_id,
     ext_payee_id,
     payee_party_id,
     party_site_id,
     supplier_site_id,
     org_id,
     org_type,
     external_bank_account_id,
     payment_curr_discount_taken,
     delivery_channel_code,
     unique_remittance_identifier,
     uri_check_digit,
     inv_payee_party_id,
     inv_party_site_id,
     inv_supplier_site_id,
     inv_beneficiary_party,
     ext_inv_payee_id,
     relationship_id
 FROM
     IBY_DOCS_PAYABLE_ALL
 WHERE
     payment_service_request_id = p_payment_request_id    AND
     payment_id                 = p_payment_id            AND
     document_status IN
     (
     DOC_STATUS_PAY_CREATED,
     DOC_STATUS_PAY_VAL_FAIL
     )
     ;

 /*
  * Cursor to pick up central bank reporting
  * related information.
 CURSOR c_cbr(p_payment_id NUMBER)
 IS
 SELECT
     pmt.payment_id,
     prof.declaration_option,
     prof.dcl_only_foreign_curr_pmt_flag,
     prof.declaration_curr_fx_rate_type,
     prof.declaration_currency_code,
     prof.declaration_threshold_amount
 FROM
     IBY_PAYMENTS_ALL pmt,
     IBY_PAYMENT_PROFILES prof
 WHERE
     pmt.payment_id = p_payment_id AND
     pmt.payment_profile_id = prof.payment_profile_id
     ;
  */

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     /*
      * Pick up all the payments of the payment request.
      */
     OPEN  c_payments(p_payment_request_id);
     FETCH c_payments BULK COLLECT INTO l_paymentTab;
     CLOSE c_payments;

     /*
      * Exit if no payments were found.
      */
     IF (l_paymentTab.COUNT = 0) THEN

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'No payments were '
             || 'retrieved from DB for payment request '
             || p_payment_request_id
             || '. Exiting rebuild ..');

         print_debuginfo(l_module_name, 'EXIT');
	 END IF;

         RETURN;

     ELSE

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, '# valid payments '
             || 'retrieved from DB for payment request '
             || p_payment_request_id
             || ' = '
             || l_paymentTab.COUNT);
	 END IF;
     END IF;

     /*
      * Pick up all the valid documents for the above payments.
      */
     FOR i IN l_paymentTab.FIRST .. l_paymentTab.LAST LOOP

         /*
          * Pick up all the documents of the payment request.
          */
         OPEN  c_documents(p_payment_request_id, l_paymentTab(i).payment_id);
         FETCH c_documents BULK COLLECT INTO l_docsForPmtTab;
         CLOSE c_documents;

         IF (l_docsForPmtTab.COUNT > 0) THEN

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'Picked up '
                 || l_docsForPmtTab.COUNT
                 || ' documents for payment '
                 || l_paymentTab(i).payment_id
                 );
	    END IF;
              /*
               * Sum up the payment amount from all the
               * document amounts.
               */
              l_pmt_amount := 0;
              FOR j IN l_docsForPmtTab.FIRST .. l_docsForPmtTab.LAST LOOP

                  l_pmt_amount := l_pmt_amount +
                                      l_docsForPmtTab(j).document_amount;

              END LOOP;

              IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
              print_debuginfo(l_module_name, 'Adjusting payment amount '
                  || 'for payment '
                  || l_paymentTab(i).payment_id
                  || ' from '
                  || l_paymentTab(i).payment_amount
                  || ' to '
                  || l_pmt_amount
                  );
		 END IF;
              l_paymentTab(i).payment_amount := l_pmt_amount;

              FOR q IN l_docsForPmtTab.FIRST .. l_docsForPmtTab.LAST LOOP

                  /*
                   * We are now assembling the payments that need to
                   * be re-built along with their child documents.
                   *
                   * These payments will be re-validated. If any
                   * payment fails validation, its child documents
                   * will be failed as well and the documents' status
                   * will be set to 'PAYMENT_FAILED_VALIDATION'.
                   *
                   * At this point, as we are assembling the
                   * documents payable, we need to re-initialize the
                   * status of these documents. By default, set the
                   * status of these documents to 'PAYMENT_CREATED'.
                   *
                   * These documents will be failed downstream if their
                   * parent payment fails validation for some reason.
                   */
                  l_docsForPmtTab(q).document_status := DOC_STATUS_PAY_CREATED;

              END LOOP;

              /*
               * If we reached here, it means that we were able to
               * find the documents payable associated with the
               * current payment.
               *
               * Store this payment and the corresponding documents
               * into the l_docsInPmtTab array.
               */
              FOR k IN l_docsForPmtTab.FIRST .. l_docsForPmtTab.LAST LOOP

                  l_docsInPmtTab(l_docsInPmtTab.COUNT + 1) :=
                      l_docsForPmtTab(k);

              END LOOP;

         ELSE

             IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
             print_debuginfo(l_module_name, 'No documents '
                 || 'were picked up for payment '
                 || l_paymentTab(i).payment_id
                 );

             print_debuginfo(l_module_name, 'All valid documents '
                 || 'of payment '
                 || l_paymentTab(i).payment_id
                 || ' have been removed. Setting payment '
                 || 'amount to zero.'
                 );
		 END IF;
             l_paymentTab(i).payment_amount := 0;

         END IF;

     END LOOP;

     /*
      * Pick up details of this payment request.
      */
     SELECT
         calling_app_id,
         call_app_pay_service_req_code
     INTO
         l_ca_id,
         l_ca_payreq_cd
     FROM
         IBY_PAY_SERVICE_REQUESTS
     WHERE
         PAYMENT_SERVICE_REQUEST_ID = p_payment_request_id
     ;
     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'For payment request '
         || p_payment_request_id
         || ' calling app id is '
         || l_ca_id
         || ' and call app pay service req code is '
         || l_ca_payreq_cd
         );
 END IF;
    /*
     * Fix for bug 5587110:
     *
     * Fetch the central bank reporting related
     * data based on the profile of the retrieved
     * payments.
     *
     * Without this information we cannot perform
     * central bank reporting.
    FOR i IN l_paymentTab.FIRST .. l_paymentTab.LAST LOOP

        OPEN  c_cbr(l_paymentTab(i).payment_id);
        FETCH c_cbr INTO l_cbrRec;
        CLOSE c_cbr;

        l_cbrTab(l_cbrTab.COUNT + 1) := l_cbrRec;

    END LOOP;
     */

     /*
      * Finally, return the payments created by grouping to the caller.
      */
     x_paymentTab   := l_paymentTab;
     x_docsInPmtTab := l_docsInPmtTab;
     x_ca_id        := l_ca_id;
     x_ca_payreq_cd := l_ca_payreq_cd;
--     x_cbrTab       := l_cbrTab;

     print_debuginfo(l_module_name, 'EXIT');

 END rebuildPayments;

/*--------------------------------------------------------------------
 | NAME:
 |     rebuildPayments
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE rebuildPayments(
     p_payment_request_id   IN IBY_PAY_SERVICE_REQUESTS.
                                         payment_service_request_id%TYPE,
     x_paymentTab           IN OUT NOCOPY IBY_PAYGROUP_PUB.paymentTabType,
--     x_docsInPmtTab         IN OUT NOCOPY IBY_PAYGROUP_PUB.
--                                              docsInPaymentTabType,
     x_ca_id                IN OUT NOCOPY IBY_PAY_SERVICE_REQUESTS.
                                              calling_app_id%TYPE,
     x_ca_payreq_cd         IN OUT NOCOPY IBY_PAY_SERVICE_REQUESTS.
                                              call_app_pay_service_req_code
                                              %TYPE,
     x_payReqCriteria       IN OUT NOCOPY IBY_PAYGROUP_PUB.
                                              payReqImposedCriteria
--  ,x_cbrTab               IN OUT NOCOPY IBY_PAYGROUP_PUB.
--                                             centralBankReportTabType
     )
 IS
 l_module_name           CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                   '.rebuildPayments';

 l_ca_payreq_cd            VARCHAR2(255) := '';
 l_ca_id                   NUMBER(15)    := 0;

 l_paymentTab        IBY_PAYGROUP_PUB.paymentTabType;

 /*
  * Stores the documents payable for all pmts in request.
  */
-- l_docsInPmtTab      IBY_PAYGROUP_PUB.docsInPaymentTabType;

 /*
  * Stores the documents payable for a single payment.
  */
-- l_docsForPmtTab     IBY_PAYGROUP_PUB.docsInPaymentTabType;

 l_pmt_amount        IBY_PAYMENTS_ALL.payment_amount%TYPE;

 /*
  * For storing central bank reporting information related to
  * each payment.
  */
-- l_cbrRec            IBY_PAYGROUP_PUB.centralBankReportRecType;
-- l_cbrTab            IBY_PAYGROUP_PUB.centralBankReportTabType;

 /*
  * Cursor to pick up payments.
  */
 CURSOR c_payments(p_payment_request_id NUMBER)
 IS
 SELECT
     *
 FROM
     IBY_PAYMENTS_ALL
 WHERE
     payment_service_request_id = p_payment_request_id AND

     /*
      * For the rebuild:
      * Only select payments that are in non-failed
      * status, or payments that are soft failed
      * ('FAILED_VALIDATION') status here. Do not
      * select payments that are is 'REJECTED' status
      * here as the underlying documents of rejected
      * payments would have already been kicked back to AP.
      */
     payment_status IN
         (
         PAY_STATUS_CREATED,
         PAY_STATUS_MODIFIED,
         PAY_STATUS_FAIL_VALID
         )
     ;

 /*
  * Cursor to pick up central bank reporting
  * related information.
 CURSOR c_cbr(p_payment_id NUMBER)
 IS
 SELECT
     pmt.payment_id,
     prof.declaration_option,
     prof.dcl_only_foreign_curr_pmt_flag,
     prof.declaration_curr_fx_rate_type,
     prof.declaration_currency_code,
     prof.declaration_threshold_amount
 FROM
     IBY_PAYMENTS_ALL pmt,
     IBY_PAYMENT_PROFILES prof
 WHERE
     pmt.payment_id = p_payment_id AND
     pmt.payment_profile_id = prof.payment_profile_id
     ;
  */

 BEGIN
  IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'ENTER');
  END IF;

 INSERT INTO iby_docs_in_pmt_gt(
             payment_id,
     document_payable_id,
     calling_app_id,
     calling_app_doc_unique_ref1,
     calling_app_doc_unique_ref2,
     calling_app_doc_unique_ref3,
     calling_app_doc_unique_ref4,
     calling_app_doc_unique_ref5,
     pay_proc_trxn_type_code,
     document_amount,
     document_currency_code,
     payment_grouping_number,
     document_status,
     amount_withheld,
     payment_due_date,
     discount_date,
     internal_bank_account_id,
     ext_payee_id,
     payee_party_id,
     party_site_id,
     supplier_site_id,
     org_id,
     org_type,
     external_bank_account_id,
     payment_curr_discount_taken,
     delivery_channel_code,
     unique_remittance_identifier,
     uri_check_digit,
     created_by,
     creation_date,
     last_updated_by,
     Last_update_date,
     last_update_login,
     object_version_number,
             dont_pay_flag,
             dont_pay_reason_code,
             dont_pay_description
             )
 SELECT
        idpa.payment_id,
        idpa.document_payable_id,
        idpa.calling_app_id,
        idpa.calling_app_doc_unique_ref1,
        idpa.calling_app_doc_unique_ref2,
        idpa.calling_app_doc_unique_ref3,
        idpa.calling_app_doc_unique_ref4,
        idpa.calling_app_doc_unique_ref5,
        idpa.pay_proc_trxn_type_code,
        idpa.payment_amount,
        idpa.payment_currency_code,
        idpa.payment_grouping_number,
        DOC_STATUS_PAY_CREATED,
        idpa.amount_withheld,
        idpa.payment_due_date,
        idpa.discount_date,
        idpa.internal_bank_account_id,
        idpa.ext_payee_id,
        idpa.payee_party_id,
        idpa.party_site_id,
        idpa.supplier_site_id,
        idpa.org_id,
        idpa.org_type,
        idpa.external_bank_account_id,
        idpa.payment_curr_discount_taken,
        idpa.delivery_channel_code,
        idpa.unique_remittance_identifier,
        idpa.uri_check_digit,
        idpa.created_by,
        idpa.creation_date,
        idpa.last_updated_by,
        idpa.Last_update_date,
        idpa.last_update_login,
        idpa.object_version_number,
     'N',
     null,
     null
 FROM
     IBY_DOCS_PAYABLE_ALL idpa, IBY_PAYMENTS_ALL ibpa
 WHERE
     idpa.payment_service_request_id = p_payment_request_id
     AND idpa.payment_service_request_id = ibpa.payment_service_request_id
     AND idpa.payment_id = ibpa.payment_id
     AND idpa.document_status IN
     (
     DOC_STATUS_PAY_CREATED,
     DOC_STATUS_PAY_VAL_FAIL
     )
     AND ibpa.payment_status IN
         (
         PAY_STATUS_CREATED,
         PAY_STATUS_MODIFIED,
         PAY_STATUS_FAIL_VALID
         )
     ;

     /*
      * Pick up all the payments of the payment request.
      */
     OPEN  c_payments(p_payment_request_id);
     FETCH c_payments BULK COLLECT INTO l_paymentTab;
     CLOSE c_payments;

     /*
      * Exit if no payments were found.
      */
     IF (l_paymentTab.COUNT = 0) THEN

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'No payments were '
             || 'retrieved from DB for payment request '
             || p_payment_request_id
             || '. Exiting rebuild ..');

         print_debuginfo(l_module_name, 'EXIT');
	 END IF;

         RETURN;

     ELSE

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, '# valid payments '
             || 'retrieved from DB for payment request '
             || p_payment_request_id
             || ' = '
             || l_paymentTab.COUNT);
	 END IF;
     END IF;

     /*
      * Pick up all the valid documents for the above payments.
      */
     FOR i IN l_paymentTab.FIRST .. l_paymentTab.LAST LOOP


              l_pmt_amount := 0;
              SELECT SUM(document_amount) into l_pmt_amount
              FROM iby_docs_in_pmt_gt
              WHERE payment_id = l_paymentTab(i).payment_id;


              IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
              print_debuginfo(l_module_name, 'Adjusting payment amount '
                  || 'for payment '
                  || l_paymentTab(i).payment_id
                  || ' from '
                  || l_paymentTab(i).payment_amount
                  || ' to '
                  || l_pmt_amount
                  );
              END IF;
              l_paymentTab(i).payment_amount := l_pmt_amount;

              /* Bug : 9079624*/
	      IF( l_paymentTab(i).payment_status = PAY_STATUS_MODIFIED) THEN
                  l_paymentTab(i).payment_status := PAY_STATUS_CREATED;
	      END IF;

	      update iby_payments_all set payment_amount = l_pmt_amount,
	      payment_status = l_paymentTab(i).payment_status
              where payment_id = l_paymentTab(i).payment_id;

     END LOOP;

     /*
      * Pick up details of this payment request.
      */
     SELECT
         calling_app_id,
         call_app_pay_service_req_code
     INTO
         l_ca_id,
         l_ca_payreq_cd
     FROM
         IBY_PAY_SERVICE_REQUESTS
     WHERE
         PAYMENT_SERVICE_REQUEST_ID = p_payment_request_id
     ;
     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
     print_debuginfo(l_module_name, 'For payment request '
         || p_payment_request_id
         || ' calling app id is '
         || l_ca_id
         || ' and call app pay service req code is '
         || l_ca_payreq_cd
         );
 END IF;
    /*
     * Fix for bug 5587110:
     *
     * Fetch the central bank reporting related
     * data based on the profile of the retrieved
     * payments.
     *
     * Without this information we cannot perform
     * central bank reporting.
    FOR i IN l_paymentTab.FIRST .. l_paymentTab.LAST LOOP

        OPEN  c_cbr(l_paymentTab(i).payment_id);
        FETCH c_cbr INTO l_cbrRec;
        CLOSE c_cbr;

        l_cbrTab(l_cbrTab.COUNT + 1) := l_cbrRec;

    END LOOP;
     */

     /*
      * Finally, return the payments created by grouping to the caller.
      */
     x_paymentTab   := l_paymentTab;
--     x_docsInPmtTab := l_docsInPmtTab;
     x_ca_id        := l_ca_id;
     x_ca_payreq_cd := l_ca_payreq_cd;
--     x_cbrTab       := l_cbrTab;

     print_debuginfo(l_module_name, 'EXIT');

 END rebuildPayments;

 /*--------------------------------------------------------------------
 | NAME:
 |     auditPaymentData
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 |     See bug 5399951 for history behind some of the SQL joins
 |
 *---------------------------------------------------------------------*/
 PROCEDURE auditPaymentData(
     p_paymentTab      IN paymentTabType
     )
 IS
 l_module_name      CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                  '.auditPaymentData';

 CURSOR c_audit_columns (p_payment_id  NUMBER)
 IS
 SELECT

  /* PAYMENT RELATED */
  pmt.payment_id,                                                    -- 01

  /* PAYER */
  payer_party.party_number,            -- payer party number
  '',                                  -- payer party site name
  payer.name,                          -- payer name
  IBY_FD_EXTRACT_GEN_PVT.              -- payer tax reg number
      Get_FP_TaxRegistration
          (
          payer.legal_entity_id
          ),
  payer.registration_number,           -- payer le reg number
  payer.party_id,                      -- payer_party_id
  payer.location_id,                   -- payer_location_id
  payer_party.attribute_category,      -- payer party attr category
  payer.attribute_category,            -- payer LE attr category     -- 10

  /* PAYER SPECIAL FIELDS */
  '',                                  -- payer abbrev agency code
  '',                                  -- payer federal us employer id

  /* PAYER BANK */
  iba_bnk_branch.bank_name,            -- payer bank name
  iba_bnk_branch.bank_number,          -- payer bank number
  iba_bnk_branch.branch_number,        -- payer bank branch number
  iba_bnk_branch.bank_branch_name,     -- payer bank branch name
  iba_bnk_branch.eft_swift_code,       -- payer bank swift code
  iba.bank_account_num,                -- payer bank account num
  iba.bank_account_name,               -- payer bank account name
  iba.iban_number,                     -- payer bank acct iban number -- 20
  iba.agency_location_code,            -- payer bank agency location code
  iba_bnk_branch.branch_party_id,      -- payer bank branch party id
  iba_bnk_branch.bank_name_alt,        -- payer bank alt name
  iba_bnk_branch.bank_branch_name_alt, -- payer bank branch alt name
  iba.bank_account_name_alt,           -- payer bank alt account name
  iba.bank_account_num_electronic,     -- payer bank account num electronic
  iba_branch_party_site.location_id,   -- payer bank branch location id
  iba_bnk_branch.eft_user_number,      -- payer bank branch eft user num

  /* PAYEE */
  payee.party_number,                  -- payee party number

  /* Fix for bug 7391524
   * Full Name when Payee is an Employee is fetch from HR tables
   * This is just as a temporary fix, until TCA overcomes it architecture limitations
   */
  DECODE(pmt.employee_person_id,
   NULL,payee.party_name,
   Get_Employee_Full_Name(pmt.employee_person_id,pmt.payee_party_id,payee.party_name)) payee_party_name,                    -- payee party name

  /*
   * Fix for bug 5466979:
   *
   * Payee name is always the same as the payee party name.
   */
  DECODE(pmt.employee_person_id,
   NULL,payee.party_name,
   Get_Employee_Full_Name(pmt.employee_person_id,pmt.payee_party_id,payee.party_name)) payee_name,                    -- payee name

  DECODE(                              -- payee alternate name
        payee.party_type,
        'ORGANIZATION',
            payee.organization_name_phonetic,
        'PERSON',
            TRIM(payee.person_first_name_phonetic
                || ' '
                || payee.person_last_name_phonetic)
        ),

  /* PAYEE ADDRESS */
  payee_addr.add_line1,                -- payee add line1
  payee_addr.add_line2,                -- payee add line2
  payee_addr.add_line3,                -- payee add line3
  payee_addr.add_line4,                -- payee add line4
  payee_addr.city,                     -- payee city
  payee_addr.county,                   -- payee county
  payee_addr.province,                 -- payee province
  payee_addr.state,                    -- payee state                -- 40
  payee_addr.country,                  -- payee country
  payee_addr.postal_code,              -- payee postal code
  payee_addr.add_concat,               -- payee address concat

  /*
   * Fix for bug 5466979:
   *
   * Beneficiary name should be the same as the payee party name
   * except when beneficiary party is not null.
   *
   * If beneficiary party is not null, the beneficiary name
   * should be the hz_parties.party_name corresponding to the
   * beneficiary_party.
   */
  DECODE (pmt.beneficiary_party,
              NULL,
              payee.party_name,
              (SELECT
                   benef_party.party_name
               FROM
                   HZ_PARTIES benef_party
               WHERE
                   benef_party.party_id=pmt.beneficiary_party
              )
           ),                          -- beneficiary name

  payee.attribute_category,            -- payee party attr category
  NVL(vendor_site.attribute_category,payee_site.attribute_category),       -- payee supplier site attr category
  payee_site.party_site_name,          -- payee supplier site name
  payee_site.addressee,                -- payee addressee

  /* VENDOR RELATED */
  vendor_site.vendor_site_code_alt,    -- payee site alternate name
  vendor.segment1,                     -- payee supplier number
  vendor.customer_num,                 -- payee first party reference  -- 50
  vendor.attribute_category,           -- payee supplier attr category
  vendor.vendor_id,                    -- payee supplier id

  /* PAYEE SPECIAL FIELDS */
  IBY_FD_EXTRACT_GEN_PVT.              -- payee tax registration number
      Get_Payee_TaxRegistration
      (pmt.payee_party_id,pmt.party_site_id),

  /*
   * Fix for bug 5468251:
   *
   * Use AP_SUPPLIERS.NUM_1099 for the payee
   * LE registration number.
   */

  /*
   * Fix for bug 5475920:
   *
   * Payments can be made for employees or suppliers.
   *
   * For employees, the payee le reg num (i.e., taxpayer id)
   * is stored in PER_PEOPLE_X.
   *
   * For suppliers, the payee le reg num (i.e., taxpayer id)
   * is stored in AP_SUPPLIERS.
   *
   * Switch between these two tables depending upon payee type
   * to get the payee le reg num
   */
   /*
   * Fix for bug 5501968:
   *
   * In R12, Federal supports thid party payments i.e., payments
   * to third parties who may not be employees / suppliers.
   *
   * For this reason, we cannot assume that tax payer id for
   * all non-employees will be stored in AP_SUPPLIERS.
   *
   * However, we know that all third parties / suppliers will
   * have a row in HZ_PARTIES. Therefore, pick up the taxpayer
   * id from HZ_PARTIES as this always works.
   */
   /*
   * Fix for bug 5501968:
   *
   * In R12, Federal supports thid party payments i.e., payments
   */
   decode(upper(vendor.vendor_type_lookup_code),
          'EMPLOYEE', per.national_identifier,
          'CONTRACTOR',decode(vendor.organization_type_lookup_code,
                              'INDIVIDUAL',vendor.individual_1099,
                              'FOREIGN INDIVIDUAL',vendor.individual_1099,
   		              'PARTNERSHIP',vendor.individual_1099,
                              'FOREIGN PARTNERSHIP',vendor.individual_1099,
                              vendor.num_1099),
 	  vendor.num_1099),            -- payee Tax Identification Number

  /* PAYEE BANK */
  eba.bank_name,                       -- payee bank name
  eba.bank_number,                     -- payee bank number
  eba.branch_number,                   -- payee bank branch number
  eba.bank_branch_name,                -- payee bank branch name

  /*
   * Fix for bug 5586882:
   *
   * Populate the external bank account using
   * IBY_EXT_BANK_ACCOUNTS.bank_account_num
   * so that we show the unmasked bank account number
   */
  ext_ba_table.bank_account_num,       -- payee bank account number

  eba.bank_account_name,               -- payee bank account name    -- 60
  eba.iban_number,                     -- payee bank account IBAN
  eba.eft_swift_code,                  -- payee bank swift code
  eba.bank_account_type,               -- payee bank account type
  eba.payment_factor_flag,             -- payee bank payment factor flag
  eba.primary_acct_owner_party_id,     -- payee bank owner party id
  eba.branch_party_id,                 -- payee bank branch party id
  eba_bank_branch.bank_name_alt,       -- payee bank name alt
  eba_bank_branch.bank_branch_name_alt, -- payee bank branch name alt
  eba.alternate_account_name,          -- payee bank alt account name
  eba.bank_account_num_electronic,     -- payee bank electronic acct num -- 70
  eba.bank_branch_address_id,          -- payee bank branch location id
  eba.primary_acct_owner_name,         -- payee bank primary acct owner name

  /* REMITTANCE ADVICE RELATED */
  remit_advice.remit_advice_delivery_method,  -- remittance advice delv method
  '',                                  -- remittance advice email
  '',                                  -- remittance advice fax

  /* DELIVERY CHANNEL RELATED */
  deliv.format_value,

  /* DECLARATION REPORT RELATED */
  prof.declaration_curr_fx_rate_type,
  '',                                  -- declaration format

  /* PROFILE RELATED */
  prof.payment_profile_name,           -- account profile name       -- 80
  prof.system_profile_name,            -- system profile name

  /* PAYMENT REASON */
  pmt_reason.format_value,

  /* BANK INSTRUCTION */
  bank_instr1.format_value,
  bank_instr2.format_value,

  /* ORG */
  org.name,

  /* RFC */
  rfc_ca.class_code,

  /* REQUEST */
  payreq.call_app_pay_service_req_code,-- ppr name
  fnd_app.application_name,             -- source product            -- 88



      /*TPP-Start*/
invpayee.party_name 		inv_payee_name,
null		inv_payee_address1,
null		inv_payee_address2,
null		inv_payee_address3,
null		inv_payee_address4,
null		inv_payee_city,
null		inv_payee_postal_code,
null		inv_payee_state,
null		inv_payee_province,
null		inv_payee_county,
null		inv_payee_country,
invpayee.party_name 		inv_payee_party_name,

decode(upper(invvendor.vendor_type_lookup_code),
          'CONTRACTOR',decode(invvendor.organization_type_lookup_code,
                              'INDIVIDUAL',invvendor.individual_1099,
                              'FOREIGN INDIVIDUAL',invvendor.individual_1099,
   		              'PARTNERSHIP',invvendor.individual_1099,
                              'FOREIGN PARTNERSHIP',invvendor.individual_1099,
                              invvendor.num_1099),
 	  invvendor.num_1099)	inv_payee_le_reg_num,

IBY_FD_EXTRACT_GEN_PVT.
 Get_Payee_TaxRegistration
       (pmt.inv_payee_party_id,pmt.inv_party_site_id)	inv_payee_tax_reg_num,

null 	inv_payee_address_concat,
DECODE (pmt.inv_beneficiary_party,
              NULL,
              invpayee.party_name,
              (SELECT
                   benef_party.party_name
               FROM
                   HZ_PARTIES benef_party
               WHERE
                   benef_party.party_id=pmt.inv_beneficiary_party
              )
           ) 			inv_beneficiary_name,

invpayee.party_number 		inv_payee_party_number,
invpayee.organization_name_phonetic	inv_payee_alternate_name,
invvendor_site.vendor_site_code_alt	inv_payee_site_alt_name,
invvendor.segment1			inv_payee_supplier_number,
invvendor.customer_num			inv_payee_first_party_ref,

null ext_bnk_acct_ownr_inv_prty_id,
null ext_bnk_branch_inv_prty_id,
null ext_bnk_acct_ownr_inv_prty_nme,

invpayee.attribute_category		inv_payee_party_attr_cat,
invvendor.attribute_category		inv_payee_supplier_attr_cat,
NVL(invvendor_site.attribute_category,invpayee_site.attribute_category) inv_payee_spplr_site_attr_cat,
invpayee_site.party_site_name		inv_payee_supplier_site_name,
invvendor_site.vendor_site_code_alt	inv_payee_spplr_site_alt_name,
invvendor.vendor_id			inv_payee_supplier_id
      /*TPP-End*/


 FROM

  /* Payment related */
  IBY_PAYMENTS_ALL         pmt,

  /* Profile related */
  IBY_PAYMENT_PROFILES     prof,

  /* Payer */
  XLE_FIRSTPARTY_INFORMATION_V  payer,
  HZ_PARTIES               payer_party,

  /* Payer bank */
  CE_BANK_ACCOUNTS         iba,
  CE_BANK_BRANCHES_V       iba_bnk_branch,
  HZ_PARTY_SITES           iba_branch_party_site,

  /* Payee */
  HZ_PARTIES               payee,
  HZ_PARTIES               invpayee,

  /* Vendor related */
  AP_SUPPLIERS               vendor,
  AP_SUPPLIER_SITES_ALL      vendor_site,
  AP_SUPPLIERS               invvendor,
  AP_SUPPLIER_SITES_ALL      invvendor_site,

  /* Employee related */
  PER_PEOPLE_X             per,

  /* Payee site */
  HZ_PARTY_SITES           payee_site,
  HZ_PARTY_SITES           invpayee_site,

  /* Payee bank */
  IBY_EXT_BANK_ACCOUNTS_V  eba,
  IBY_EXT_BANK_ACCOUNTS    ext_ba_table,
  CE_BANK_BRANCHES_V       eba_bank_branch,

  /* Remit advice related */
  IBY_REMIT_ADVICE_SETUP   remit_advice,

  /* Payment service request related */
  IBY_PAY_SERVICE_REQUESTS payreq,
  FND_APPLICATION_ALL_VIEW fnd_app,

  /* Delivery channel related */
  IBY_DELIVERY_CHANNELS_VL deliv,

  /* Payment reason related */
  IBY_PAYMENT_REASONS_VL   pmt_reason,

  /* Bank instruction related */
  IBY_BANK_INSTRUCTIONS_VL bank_instr1,
  IBY_BANK_INSTRUCTIONS_VL bank_instr2,

  /* Org related */
  HR_ALL_ORGANIZATION_UNITS org,

  /* RFC */
  HZ_CODE_ASSIGNMENTS          rfc_ca,

  /*
   * Fix for bug 5928084:
   *
   * Derive address of employee type payees using
   * PER_ADDRESSES or HR_LOCATIONS.
   *
   * The select statement below dynamically creates the payee
   * address table. The dynamically created table is named
   * as payee_add. Columns from this table are referenced in the
   * outer select.
   *
   * The payee address can be either a
   *  - supplier address, or
   *  - employee address
   *
   * We decide whether we should pick up supplier addresses or
   * employee addresses using the 'address source' field on the
   * payment.
   *
   * 'address source' can contain two values
   *  - TCA: supplier address
   *  - HR : employee address
   *
   * Supplier addresses are present in TCA and are located using
   * remit to location id column on the payment.
   *
   * Employee addresses can be in either
   *   - PER_ADDRESSES (home addresses)
   *   - HR_LOCATIONS  (office addresses)
   * We use the 'employee address code' field on the payment to
   * decide which table to use.
   *
   * The select below uses decode clause to perform the
   * if else logic to retrieve the address from the right
   * column.
   *
   * Roughly, the decode clauses are used to effect the following
   * logic -
   *
   * for each add field:
   * if (pmt.address_source = 'TCA')
   * {
   *   -- get the address field from HZ_LOCATIONS --
   * }
   * else
   * {
   *     -- this is an employee address --
   *     if (pmt.employee_address_code = 'HOME')
   *     {
   *         -- get the address field from PER_ADDRESSES --
   *
   *         The select logic for this has been lifted from
   *         AP's expense report import program.
   *     }
   *     else
   *     {
   *         -- get the address field from HR_LOCATIONS --
   *
   *         The select logic for this has been lifted from
   *         <APDEV>/patch/115/sql/apwexptb.pls.
   *     }
   * }
   */
  (
     SELECT

      /* payee add line1 */
      DECODE(
        pmt.address_source,

        -- supplier address line 1
        'TCA', payee_loc.address1,

        -- employee add line 1
        DECODE
        (
          pmt.employee_address_code,

          -- employee home addr line 1
          'HOME', per_addr.address_line1,

          -- employee office addr line 1
          'OFFICE',per_loc.address_line_1,

          -- employee provisional addr line 1
          'PROVISIONAL', per_addr_prov.address_line1,

          --address code not specified
          DECODE (per_addr.address_id,
                 NULL, per_loc.address_line_1,
                 per_addr.address_line1)
         )

        ) add_line1,

      /* payee add line2 */
      DECODE(
        pmt.address_source,

        -- supplier address line 2
        'TCA', payee_loc.address2,

        -- employee add line 2
        DECODE
        (
          pmt.employee_address_code,

          -- employee home addr line 2
          'HOME', per_addr.address_line2,

          -- employee office addr line 2
          'OFFICE',per_loc.address_line_2,

          -- employee provisional addr line 2
          'PROVISIONAL', per_addr_prov.address_line2,

          --address code not specified
          DECODE (per_addr.address_id,
                 NULL, per_loc.address_line_2,
                 per_addr.address_line2)
         )
        ) add_line2,


      /* payee add line3 */
      DECODE(
        pmt.address_source,

        -- supplier address line 3
        'TCA', payee_loc.address3,

        -- employee add line 3
        DECODE
        (
          pmt.employee_address_code,

          -- employee home addr line 3
          'HOME', per_addr.address_line3,

          -- employee office addr line 3
          'OFFICE',per_loc.address_line_3,

          -- employee provisional addr line 3
          'PROVISIONAL', per_addr_prov.address_line3,

          --address code not specified
          DECODE (per_addr.address_id,
                 NULL, per_loc.address_line_3,
                 per_addr.address_line3)
         )

        ) add_line3,


      /* payee add line4 */
      DECODE(
        pmt.address_source,

        -- supplier address line 4
        'TCA', payee_loc.address4,

        -- employee home/office addr line 4 (not available)
        null

        ) add_line4,

      /* payee city */
      DECODE(
        pmt.address_source,

        -- supplier city
        'TCA', payee_loc.city,

        -- employee city
        DECODE
        (
          pmt.employee_address_code,

          -- employee home city
          'HOME', per_addr.town_or_city,

          -- employee office city
          'OFFICE', per_loc.town_or_city,

          -- employee provisional city
          'PROVISIONAL', per_addr_prov.town_or_city,

          -- address code not specified
          DECODE (per_addr.address_id,
                 NULL, per_loc.town_or_city,
                 per_addr.town_or_city)
          )

        ) city,


      /* payee county */
      DECODE(
        pmt.address_source,

        -- supplier county
        'TCA', payee_loc.county,

        -- employee county
        (
        DECODE(
          pmt.employee_address_code,

          -- employee home county
          'HOME',
          DECODE(
            per_addr.style,
            'US',     NVL(per_addr.region_1,   ''),
            'US_GLB', NVL(per_addr.region_1,   ''),
            'IE',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            'IE_GLB', NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            'GB',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            ''),

          -- employee office county
          'OFFICE',
          DECODE(
            per_loc.style,
            'US',      NVL(per_loc.region_1,   ''),
            'US_GLB',  NVL(per_loc.region_1,   ''),
            'IE',      NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            'IE_GLB',  NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            'GB',      NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            ''),


          -- employee provisional county
          'PROVISIONAL',
          DECODE(
            per_addr_prov.style,
            'US',     NVL(per_addr_prov.region_1,   ''),
            'US_GLB', NVL(per_addr_prov.region_1,   ''),
            'IE',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr_prov.style,
                                  per_addr_prov.region_1),
                        ''),
            'IE_GLB', NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr_prov.style,
                                  per_addr_prov.region_1),
                        ''),
            'GB',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr_prov.style,
                                  per_addr_prov.region_1),
                        ''),
            ''),


            --address code not specified
            decode(per_addr.address_id,
            NULL,DECODE(
            per_loc.style,
            'US',      NVL(per_loc.region_1,   ''),
            'US_GLB',  NVL(per_loc.region_1,   ''),
            'IE',      NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            'IE_GLB',  NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            'GB',      NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            ''),
             DECODE(
            per_addr.style,
            'US',     NVL(per_addr.region_1,   ''),
            'US_GLB', NVL(per_addr.region_1,   ''),
            'IE',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            'IE_GLB', NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            'GB',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            ''))
            )
          )
        ) county,

      /* payee province */
      DECODE(
        pmt.address_source,

        -- supplier province
        'TCA', payee_loc.province,

        -- employee province
        (
        DECODE(

          pmt.employee_address_code,

          -- employee home province
          'HOME',
          DECODE(per_addr.style,
            'US',      '',
            'US_GLB',  '',
            'IE',      '',
            'IE_GLB',  '',
            'GB',      '',
            'CA',      NVL(per_addr.region_1,   ''),
            'CA_GLB',  NVL(per_addr.region_1,   ''),
            'JP',      NVL(per_addr.region_1,   ''),
            NVL(ap_web_db_expline_pkg.
                    getcountyprovince(
                        per_addr.style,
                        per_addr.region_1),
              '')
            ),

          -- employee office province
          'OFFICE',
          DECODE(per_loc.style,
            'US',      '',
            'US_GLB',  '',
            'IE',      '',
            'IE_GLB',  '',
            'GB',      '',
            'CA',      NVL(per_loc.region_1,   ''),
            'CA_GLB',  NVL(per_loc.region_1,   ''),
            'JP',      NVL(per_loc.region_1,   ''),
            NVL(ap_web_db_expline_pkg.
                    getcountyprovince(
                        per_loc.style,
                        per_loc.region_1),
              '')
              ),

          -- employee provisional province
          'PROVISIONAL',
          DECODE(per_addr_prov.style,
            'US',      '',
            'US_GLB',  '',
            'IE',      '',
            'IE_GLB',  '',
            'GB',      '',
            'CA',      NVL(per_addr_prov.region_1,   ''),
            'CA_GLB',  NVL(per_addr_prov.region_1,   ''),
            'JP',      NVL(per_addr_prov.region_1,   ''),
            NVL(ap_web_db_expline_pkg.
                    getcountyprovince(
                        per_addr_prov.style,
                        per_addr_prov.region_1),
              '')
            ),

            --address code not specified
            decode(per_addr.address_id,
            NULL,DECODE(per_loc.style,
            'US',      '',
            'US_GLB',  '',
            'IE',      '',
            'IE_GLB',  '',
            'GB',      '',
            'CA',      NVL(per_loc.region_1,   ''),
            'CA_GLB',  NVL(per_loc.region_1,   ''),
            'JP',      NVL(per_loc.region_1,   ''),
            NVL(ap_web_db_expline_pkg.
                    getcountyprovince(
                        per_loc.style,
                        per_loc.region_1),
              '')
              ),
             DECODE(per_addr.style,
            'US',      '',
            'US_GLB',  '',
            'IE',      '',
            'IE_GLB',  '',
            'GB',      '',
            'CA',      NVL(per_addr.region_1,   ''),
            'CA_GLB',  NVL(per_addr.region_1,   ''),
            'JP',      NVL(per_addr.region_1,   ''),
            NVL(ap_web_db_expline_pkg.
                    getcountyprovince(
                        per_addr.style,
                        per_addr.region_1),
              '')
            ))
            )
          )
        ) province,

      /* payee state */
      DECODE(
        pmt.address_source,

        -- supplier state
        'TCA', payee_loc.state,

         -- employee state
         (
         DECODE(
           pmt.employee_address_code,

           -- employee home state
           'HOME',
           DECODE(per_addr.style,
             'CA',     '',
             'CA_GLB', '',
             NVL(per_addr.region_2,   '')),

           -- employee office state
           'OFFICE',
           DECODE(per_loc.style,
             'CA',     '',
             'CA_GLB', '',
             NVL(per_loc.region_2, '')),

           -- employee provisional state
           'PROVISIONAL',
           DECODE(per_addr_prov.style,
             'CA',     '',
             'CA_GLB', '',
             NVL(per_addr_prov.region_2,   '')),
           --address code not specified
           decode(per_addr.address_id,
           NULL,DECODE(per_loc.style,
             'CA',     '',
             'CA_GLB', '',
              NVL(per_loc.region_2, '')),
            DECODE(per_addr.style,
             'CA',     '',
             'CA_GLB', '',
              NVL(per_addr.region_2,   '')))
           )
         )
       ) state,

     /* payee country */
      DECODE(
        pmt.address_source,

        -- supplier country
        'TCA', payee_loc.country,

        -- employee country
        (
        DECODE(
          pmt.employee_address_code,

          -- employee home country
          'HOME', per_addr.country,

          -- employee office country
          'OFFICE',per_loc.country,

          -- employee provisional country
          'PROVISIONAL', per_addr_prov.country,

          --address code not specified
          DECODE (per_addr.address_id,
               NULL, per_loc.country,
               per_addr.country
               )
          )
        )
        ) country,

      /* payee postal code */
      DECODE(
        pmt.address_source,

        -- supplier postal code
        'TCA', payee_loc.postal_code,

        -- employee postal code
        (
        DECODE(
          pmt.employee_address_code,

          -- employee home postal code
          'HOME', per_addr.postal_code,

          -- employee office postal code
          'OFFICE',per_loc.postal_code,

          -- employee provisional postal code
          'PROVISIONAL', per_addr_prov.postal_code,

          --address code not specified
          DECODE (per_addr.address_id,
               NULL, per_loc.postal_code,
               per_addr.postal_code
               )
          )
        )
        ) postal_code,


      /* payee address concat */
      DECODE(
        pmt.address_source,

        -- supplier address concat
        'TCA',
        payee_loc.address1
          || ', '
          || payee_loc.address2
          || ', '
          || payee_loc.address3
          || ', '
          || payee_loc.city
          || ', '
          || payee_loc.state
          || ', '
          || payee_loc.country
          || ', '
          || payee_loc.postal_code,

        -- employee address concat
        (
        DECODE(
          pmt.employee_address_code,

          -- employee home address concat
          'HOME',
          per_addr.address_line1
            || ', '
            || per_addr.address_line2
            || ', '
            || per_addr.address_line3
            || ', '
            || per_addr.town_or_city
            || ', '
            || DECODE(
                 per_addr.style,
                 'CA',     '',
                 'CA_GLB', '',
                 NVL(per_addr.region_2, '')
                 )
            || ', '
            || per_addr.country
            || ', '
            || per_addr.postal_code,

          -- employee office address concat
          'OFFICE',
          per_loc.address_line_1
            || ', '
            || per_loc.address_line_2
            || ', '
            || per_loc.address_line_3
            || ', '
            || per_loc.town_or_city
            || ', '
            || DECODE(
                 per_loc.style,
                 'CA',     '',
                 'CA_GLB', '',
                 NVL(per_loc.region_2, '')
                 )
            || ', '
            || per_loc.country
            || ', '
            || per_loc.postal_code,

          -- employee provisional address concat
          'PROVISIONAL',
          per_addr_prov.address_line1
            || ', '
            || per_addr_prov.address_line2
            || ', '
            || per_addr_prov.address_line3
            || ', '
            || per_addr_prov.town_or_city
            || ', '
            || DECODE(
                 per_addr_prov.style,
                 'CA',     '',
                 'CA_GLB', '',
                 NVL(per_addr_prov.region_2, '')
                 )
            || ', '
            || per_addr_prov.country
            || ', '
            || per_addr_prov.postal_code,

          -- address code not specified
          DECODE (per_addr.address_id,
               NULL, per_loc.address_line_1
            || ', '
            || per_loc.address_line_2
            || ', '
            || per_loc.address_line_3
            || ', '
            || per_loc.town_or_city
            || ', '
            || DECODE(
                 per_loc.style,
                 'CA',     '',
                 'CA_GLB', '',
                 NVL(per_loc.region_2, '')
                 )
            || ', '
            || per_loc.country
            || ', '
            || per_loc.postal_code,

              per_addr.address_line1
            || ', '
            || per_addr.address_line2
            || ', '
            || per_addr.address_line3
            || ', '
            || per_addr.town_or_city
            || ', '
            || DECODE(
                 per_addr.style,
                 'CA',     '',
                 'CA_GLB', '',
                 NVL(per_addr.region_2, '')
                 )
            || ', '
            || per_addr.country
            || ', '
            || per_addr.postal_code)
          )
        )
      ) add_concat

  FROM
      IBY_PAYMENTS_ALL         pmt,

      /* Employee address related */
      HR_LOCATIONS             per_loc,
      PER_ADDRESSES            per_addr,
      PER_ALL_ASSIGNMENTS_F    per_assgn,
      PER_ADDRESSES            per_addr_prov,

      /* Supplier address related */
      HZ_LOCATIONS             payee_loc
  WHERE
    pmt.payment_id                     = p_payment_id
    AND pmt.employee_person_id         = per_addr.person_id(+)
    AND per_addr.primary_flag(+) = 'Y'
    AND SYSDATE BETWEEN
            per_addr.date_from(+)
            AND NVL(per_addr.date_to(+), SYSDATE+1)
    AND pmt.employee_person_id         = per_addr_prov.person_id(+)
    AND per_addr_prov.address_type(+) = 'M'
    AND SYSDATE BETWEEN
            per_addr_prov.date_from(+)
            AND NVL(per_addr_prov.date_to(+), SYSDATE+1)
    AND pmt.employee_person_id         = per_assgn.person_id(+)
    AND per_assgn.location_id          = per_loc.location_id(+)
    AND per_assgn.primary_flag(+)      = 'Y'
    AND per_assgn.assignment_type(+) = 'E'
    AND (TRUNC(SYSDATE) BETWEEN
            per_assgn.effective_start_date(+)
            AND per_assgn.effective_end_date(+)
        )
    AND pmt.remit_to_location_id       = payee_loc.location_id(+)
  ) payee_addr

 WHERE

  /* payment related */
  pmt.payment_id                     = p_payment_id

  /* payer */
  AND pmt.legal_entity_id            = payer.legal_entity_id
  AND payer.party_id                 = payer_party.party_id

  /* payer bank */
  AND pmt.internal_bank_account_id   = iba.bank_account_id
  AND iba_bnk_branch.branch_party_id = iba.bank_branch_id

  /* payer bank location */
  AND iba_bnk_branch.branch_party_id = iba_branch_party_site.party_id(+)

  /* payee */
  AND pmt.payee_party_id             = payee.party_id

  /* payee site */
  AND pmt.party_site_id              = payee_site.party_site_id(+)

  /* inv payee */
  AND pmt.inv_payee_party_id             = invpayee.party_id(+)

  /* inv payee site */
  AND pmt.inv_party_site_id              = invpayee_site.party_site_id(+)

  /* vendor related */
  AND pmt.payee_party_id             = vendor.party_id(+)
  AND pmt.supplier_site_id           = vendor_site.vendor_site_id(+)
  AND nvl(vendor.vendor_id,-99)      = nvl(vendor_site.vendor_id,-99)      /*Bug 7323072*/


  /* inv vendor related */
  AND pmt.inv_payee_party_id             = invvendor.party_id(+)
  AND pmt.inv_supplier_site_id           = invvendor_site.vendor_site_id(+)
  AND nvl(invvendor.vendor_id,-99)      = nvl(invvendor_site.vendor_id,-99)        /*Bug 7323072*/

  /* employee related */
  AND pmt.employee_person_id         = per.person_id(+)

  /* payee bank */
  AND pmt.external_bank_account_id   = eba.ext_bank_account_id(+)
  AND eba.bank_party_id              = eba_bank_branch.bank_party_id(+)
  AND eba.branch_party_id            = eba_bank_branch.branch_party_id(+)

  /*
   * Fix for bug 5658982:
   *
   * We want to use outer join with the eba table because the
   * ext bank account id is optional on the payment.
   *
   * For the same reason, we must use outer join with
   * ext_ba_table table also.
   */
  AND ext_ba_table.ext_bank_account_id(+) = eba.ext_bank_account_id

  /* profile and remit advice */
  AND pmt.payment_profile_id         = prof.payment_profile_id
  AND prof.system_profile_code       = remit_advice.system_profile_code

  /* payment service request related */
  AND payreq.payment_service_request_id  = pmt.payment_service_request_id
  AND fnd_app.application_id         = payreq.calling_app_id

  /* delivery channel related */
  AND pmt.delivery_channel_code      = deliv.delivery_channel_code(+)

  /* payment reason */
  AND pmt.payment_reason_code        = pmt_reason.payment_reason_code(+)

  /* bank instruction */
  AND prof.bank_instruction1_code    = bank_instr1.bank_instruction_code(+)
  AND prof.bank_instruction2_code    = bank_instr2.bank_instruction_code(+)

  /* Org related */
  AND pmt.org_id                     = org.organization_id

  /* RFC related */
  AND rfc_ca.owner_table_name(+)     = 'HZ_PARTIES'
  AND rfc_ca.class_category(+)       = 'RFC_IDENTIFIER'
  AND rfc_ca.owner_table_id(+)       = iba.bank_branch_id
  ;

/* cursor added for the bug:7183572*/
 CURSOR c_ce_audit_columns (p_payment_id  NUMBER)
 IS
 SELECT

  /* PAYMENT RELATED */
  pmt.payment_id,                                                    -- 01

  /* PAYER */
  payer_party.party_number,            -- payer party number
  '',                                  -- payer party site name
  payer.name,                          -- payer name
  IBY_FD_EXTRACT_GEN_PVT.              -- payer tax reg number
      Get_FP_TaxRegistration
          (
          payer.legal_entity_id
          ),
  payer.registration_number,           -- payer le reg number
  payer.party_id,                      -- payer_party_id
  payer.location_id,                   -- payer_location_id
  payer_party.attribute_category,      -- payer party attr category
  payer.attribute_category,            -- payer LE attr category     -- 10

  /* PAYER SPECIAL FIELDS */
  '',                                  -- payer abbrev agency code
  '',                                  -- payer federal us employer id

  /* PAYER BANK */
  iba_bnk_branch.bank_name,            -- payer bank name
  iba_bnk_branch.bank_number,          -- payer bank number
  iba_bnk_branch.branch_number,        -- payer bank branch number
  iba_bnk_branch.bank_branch_name,     -- payer bank branch name
  iba_bnk_branch.eft_swift_code,       -- payer bank swift code
  iba.bank_account_num,                -- payer bank account num
  iba.bank_account_name,               -- payer bank account name
  iba.iban_number,                     -- payer bank acct iban number -- 20
  iba.agency_location_code,            -- payer bank agency location code
  iba_bnk_branch.branch_party_id,      -- payer bank branch party id
  iba_bnk_branch.bank_name_alt,        -- payer bank alt name
  iba_bnk_branch.bank_branch_name_alt, -- payer bank branch alt name
  iba.bank_account_name_alt,           -- payer bank alt account name
  iba.bank_account_num_electronic,     -- payer bank account num electronic
  iba_branch_party_site.location_id,   -- payer bank branch location id
  iba_bnk_branch.eft_user_number,      -- payer bank branch eft user num

  /* PAYEE */
  payee.party_number,                  -- payee party number

  /* Fix for bug 7391524
   * Full Name when Payee is an Employee is fetch from HR tables
   * This is just as a temporary fix, until TCA overcomes it architecture limitations
   */
  DECODE(pmt.employee_person_id,
   NULL,payee.party_name,
   Get_Employee_Full_Name(pmt.employee_person_id,pmt.payee_party_id,payee.party_name)) payee_party_name,  -- payee party name

  /*
   * Fix for bug 5466979:
   *
   * Payee name is always the same as the payee party name.
   */
  DECODE(pmt.employee_person_id,
   NULL,payee.party_name,
   Get_Employee_Full_Name(pmt.employee_person_id,pmt.payee_party_id,payee.party_name)) payee_name,  --payee name

  DECODE(                              -- payee alternate name
        payee.party_type,
        'ORGANIZATION',
            payee.organization_name_phonetic,
        'PERSON',
            TRIM(payee.person_first_name_phonetic
                || ' '
                || payee.person_last_name_phonetic)
        ),

  /* PAYEE ADDRESS */
  payee_addr.add_line1,                -- payee add line1
  payee_addr.add_line2,                -- payee add line2
  payee_addr.add_line3,                -- payee add line3
  payee_addr.add_line4,                -- payee add line4
  payee_addr.city,                     -- payee city
  payee_addr.county,                   -- payee county
  payee_addr.province,                 -- payee province
  payee_addr.state,                    -- payee state                -- 40
  payee_addr.country,                  -- payee country
  payee_addr.postal_code,              -- payee postal code
  payee_addr.add_concat,               -- payee address concat

  /*
   * Fix for bug 5466979:
   *
   * Beneficiary name should be the same as the payee party name
   * except when beneficiary party is not null.
   *
   * If beneficiary party is not null, the beneficiary name
   * should be the hz_parties.party_name corresponding to the
   * beneficiary_party.
   */
  DECODE (pmt.beneficiary_party,
              NULL,
              payee.party_name,
              (SELECT
                   benef_party.party_name
               FROM
                   HZ_PARTIES benef_party
               WHERE
                   benef_party.party_id=pmt.beneficiary_party
              )
           ),                          -- beneficiary name

  payee.attribute_category,            -- payee party attr category
  NVL(vendor_site.attribute_category,payee_site.attribute_category),       -- payee supplier site attr category
  payee_site.party_site_name,          -- payee supplier site name
  payee_site.addressee,                -- payee addressee

  /* VENDOR RELATED */
  vendor_site.vendor_site_code_alt,    -- payee site alternate name
  vendor.segment1,                     -- payee supplier number
  vendor.customer_num,                 -- payee first party reference  -- 50
  vendor.attribute_category,           -- payee supplier attr category
  vendor.vendor_id,                    -- payee supplier id

  /* PAYEE SPECIAL FIELDS */
  IBY_FD_EXTRACT_GEN_PVT.              -- payee tax registration number
       Get_Payee_TaxRegistration
       (pmt.payee_party_id,pmt.party_site_id),

  /*
   * Fix for bug 5468251:
   *
   * Use AP_SUPPLIERS.NUM_1099 for the payee
   * LE registration number.
   */

  /*
   * Fix for bug 5475920:
   *
   * Payments can be made for employees or suppliers.
   *
   * For employees, the payee le reg num (i.e., taxpayer id)
   * is stored in PER_PEOPLE_X.
   *
   * For suppliers, the payee le reg num (i.e., taxpayer id)
   * is stored in AP_SUPPLIERS.
   *
   * Switch between these two tables depending upon payee type
   * to get the payee le reg num
   */
   /*
   * Fix for bug 5501968:
   *
   * In R12, Federal supports thid party payments i.e., payments
   * to third parties who may not be employees / suppliers.
   *
   * For this reason, we cannot assume that tax payer id for
   * all non-employees will be stored in AP_SUPPLIERS.
   *
   * However, we know that all third parties / suppliers will
   * have a row in HZ_PARTIES. Therefore, pick up the taxpayer
   * id from HZ_PARTIES as this always works.
   */
   /*
   * Fix for bug 5501968:
   *
   * In R12, Federal supports thid party payments i.e., payments
   */
   decode(upper(vendor.vendor_type_lookup_code),
          'EMPLOYEE', per.national_identifier,
          'CONTRACTOR',decode(vendor.organization_type_lookup_code,
                              'INDIVIDUAL',vendor.individual_1099,
                              'FOREIGN INDIVIDUAL',vendor.individual_1099,
   		              'PARTNERSHIP',vendor.individual_1099,
                              'FOREIGN PARTNERSHIP',vendor.individual_1099,
                              vendor.num_1099),
 	  vendor.num_1099),            -- payee Tax Identification Number

  /* PAYEE BANK */
  eba.bank_name,                       -- payee bank name
  eba.bank_number,                     -- payee bank number
  eba.branch_number,                   -- payee bank branch number
  eba.bank_branch_name,                -- payee bank branch name

  /*
   * Fix for bug 5586882:
   *
   * Populate the external bank account using
   * IBY_EXT_BANK_ACCOUNTS.bank_account_num
   * so that we show the unmasked bank account number
   */
  ext_ba_table.bank_account_num,       -- payee bank account number

  eba.bank_account_name,               -- payee bank account name    -- 60
  eba.iban_number,                     -- payee bank account IBAN
  eba.eft_swift_code,                  -- payee bank swift code
  eba.bank_account_type,               -- payee bank account type
  eba.payment_factor_flag,             -- payee bank payment factor flag
  eba.primary_acct_owner_party_id,     -- payee bank owner party id
  eba.branch_party_id,                 -- payee bank branch party id
  eba_bank_branch.bank_name_alt,       -- payee bank name alt
  eba_bank_branch.bank_branch_name_alt, -- payee bank branch name alt
  eba.alternate_account_name,          -- payee bank alt account name
  eba.bank_account_num_electronic,     -- payee bank electronic acct num -- 70
  eba.bank_branch_address_id,          -- payee bank branch location id
  eba.primary_acct_owner_name,         -- payee bank primary acct owner name

  /* REMITTANCE ADVICE RELATED */
  remit_advice.remit_advice_delivery_method,  -- remittance advice delv method
  '',                                  -- remittance advice email
  '',                                  -- remittance advice fax

  /* DELIVERY CHANNEL RELATED */
  deliv.format_value,

  /* DECLARATION REPORT RELATED */
  prof.declaration_curr_fx_rate_type,
  '',                                  -- declaration format

  /* PROFILE RELATED */
  prof.payment_profile_name,           -- account profile name       -- 80
  prof.system_profile_name,            -- system profile name

  /* PAYMENT REASON */
  pmt_reason.format_value,

  /* BANK INSTRUCTION */
  bank_instr1.format_value,
  bank_instr2.format_value,

  /* LE */
  le.name,

  /* RFC */
  rfc_ca.class_code,

  /* REQUEST */
  payreq.call_app_pay_service_req_code,-- ppr name
  fnd_app.application_name,             -- source product            -- 88



      /*TPP-Start*/
invpayee.party_name 		inv_payee_name,
null		inv_payee_address1,
null		inv_payee_address2,
null		inv_payee_address3,
null		inv_payee_address4,
null		inv_payee_city,
null		inv_payee_postal_code,
null		inv_payee_state,
null		inv_payee_province,
null		inv_payee_county,
null		inv_payee_country,
invpayee.party_name 		inv_payee_party_name,

decode(upper(invvendor.vendor_type_lookup_code),
          'CONTRACTOR',decode(invvendor.organization_type_lookup_code,
                              'INDIVIDUAL',invvendor.individual_1099,
                              'FOREIGN INDIVIDUAL',invvendor.individual_1099,
   		              'PARTNERSHIP',invvendor.individual_1099,
                              'FOREIGN PARTNERSHIP',invvendor.individual_1099,
                              invvendor.num_1099),
 	  invvendor.num_1099)	inv_payee_le_reg_num,

IBY_FD_EXTRACT_GEN_PVT.
 Get_Payee_TaxRegistration
       (pmt.inv_payee_party_id,pmt.inv_party_site_id)	inv_payee_tax_reg_num,

null 	inv_payee_address_concat,
DECODE (pmt.inv_beneficiary_party,
              NULL,
              invpayee.party_name,
              (SELECT
                   benef_party.party_name
               FROM
                   HZ_PARTIES benef_party
               WHERE
                   benef_party.party_id=pmt.inv_beneficiary_party
              )
           ) 			inv_beneficiary_name,

invpayee.party_number 		inv_payee_party_number,
invpayee.organization_name_phonetic	inv_payee_alternate_name,
invvendor_site.vendor_site_code_alt	inv_payee_site_alt_name,
invvendor.segment1			inv_payee_supplier_number,
invvendor.customer_num			inv_payee_first_party_ref,

null ext_bnk_acct_ownr_inv_prty_id,
null ext_bnk_branch_inv_prty_id,
null ext_bnk_acct_ownr_inv_prty_nme,

invpayee.attribute_category		inv_payee_party_attr_cat,
invvendor.attribute_category		inv_payee_supplier_attr_cat,
NVL(invvendor_site.attribute_category,invpayee_site.attribute_category)	inv_payee_spplr_site_attr_cat,
invpayee_site.party_site_name		inv_payee_supplier_site_name,
invvendor_site.vendor_site_code_alt	inv_payee_spplr_site_alt_name,
invvendor.vendor_id			inv_payee_supplier_id
      /*TPP-End*/

 FROM

  /* Payment related */
  IBY_PAYMENTS_ALL         pmt,

  /* Profile related */
  IBY_PAYMENT_PROFILES     prof,

  /* Payer */
  XLE_FIRSTPARTY_INFORMATION_V  payer,
  HZ_PARTIES               payer_party,

  /* Payer bank */
  CE_BANK_ACCOUNTS         iba,
  CE_BANK_BRANCHES_V       iba_bnk_branch,
  HZ_PARTY_SITES           iba_branch_party_site,

  /* Payee */
  HZ_PARTIES               payee,
  HZ_PARTIES               invpayee,

  /* Vendor related */
  AP_SUPPLIERS               vendor,
  AP_SUPPLIER_SITES_ALL      vendor_site,

  /* Inv Vendor related */
  AP_SUPPLIERS               invvendor,
  AP_SUPPLIER_SITES_ALL      invvendor_site,

  /* Employee related */
  PER_PEOPLE_X             per,

  /* Payee site */
  HZ_PARTY_SITES           payee_site,
  HZ_PARTY_SITES           invpayee_site,

  /* Payee bank */
  IBY_EXT_BANK_ACCOUNTS_V  eba,
  IBY_EXT_BANK_ACCOUNTS    ext_ba_table,
  CE_BANK_BRANCHES_V       eba_bank_branch,

  /* Remit advice related */
  IBY_REMIT_ADVICE_SETUP   remit_advice,

  /* Payment service request related */
  IBY_PAY_SERVICE_REQUESTS payreq,
  FND_APPLICATION_ALL_VIEW fnd_app,

  /* Delivery channel related */
  IBY_DELIVERY_CHANNELS_VL deliv,

  /* Payment reason related */
  IBY_PAYMENT_REASONS_VL   pmt_reason,

  /* Bank instruction related */
  IBY_BANK_INSTRUCTIONS_VL bank_instr1,
  IBY_BANK_INSTRUCTIONS_VL bank_instr2,

  /* Legal Entity related */
  xle_entity_profiles le,

  /* RFC */
  HZ_CODE_ASSIGNMENTS          rfc_ca,

  /*
   * Fix for bug 5928084:
   *
   * Derive address of employee type payees using
   * PER_ADDRESSES or HR_LOCATIONS.
   *
   * The select statement below dynamically creates the payee
   * address table. The dynamically created table is named
   * as payee_add. Columns from this table are referenced in the
   * outer select.
   *
   * The payee address can be either a
   *  - supplier address, or
   *  - employee address
   *
   * We decide whether we should pick up supplier addresses or
   * employee addresses using the 'address source' field on the
   * payment.
   *
   * 'address source' can contain two values
   *  - TCA: supplier address
   *  - HR : employee address
   *
   * Supplier addresses are present in TCA and are located using
   * remit to location id column on the payment.
   *
   * Employee addresses can be in either
   *   - PER_ADDRESSES (home addresses)
   *   - HR_LOCATIONS  (office addresses)
   * We use the 'employee address code' field on the payment to
   * decide which table to use.
   *
   * The select below uses decode clause to perform the
   * if else logic to retrieve the address from the right
   * column.
   *
   * Roughly, the decode clauses are used to effect the following
   * logic -
   *
   * for each add field:
   * if (pmt.address_source = 'TCA')
   * {
   *   -- get the address field from HZ_LOCATIONS --
   * }
   * else
   * {
   *     -- this is an employee address --
   *     if (pmt.employee_address_code = 'HOME')
   *     {
   *         -- get the address field from PER_ADDRESSES --
   *
   *         The select logic for this has been lifted from
   *         AP's expense report import program.
   *     }
   *     else
   *     {
   *         -- get the address field from HR_LOCATIONS --
   *
   *         The select logic for this has been lifted from
   *         <APDEV>/patch/115/sql/apwexptb.pls.
   *     }
   * }
   */
  (
     SELECT

      /* payee add line1 */
      DECODE(
        pmt.address_source,

        -- supplier address line 1
        'TCA', payee_loc.address1,

        -- employee add line 1
        DECODE
        (
          pmt.employee_address_code,

          -- employee home addr line 1
          'HOME', per_addr.address_line1,

          -- employee office addr line 1
          'OFFICE',per_loc.address_line_1,

          -- employee provisional addr line 1
          'PROVISIONAL', per_addr_prov.address_line1,

          --address code not specified
          DECODE (per_addr.address_id,
                 NULL, per_loc.address_line_1,
                 per_addr.address_line1)
         )

        ) add_line1,

      /* payee add line2 */
      DECODE(
        pmt.address_source,

        -- supplier address line 2
        'TCA', payee_loc.address2,

        -- employee add line 2
        DECODE
        (
          pmt.employee_address_code,

          -- employee home addr line 2
          'HOME', per_addr.address_line2,

          -- employee office addr line 2
          'OFFICE',per_loc.address_line_2,

          -- employee provisional addr line 2
          'PROVISIONAL', per_addr_prov.address_line2,

          --address code not specified
          DECODE (per_addr.address_id,
                 NULL, per_loc.address_line_2,
                 per_addr.address_line2)
         )
        ) add_line2,


      /* payee add line3 */
      DECODE(
        pmt.address_source,

        -- supplier address line 3
        'TCA', payee_loc.address3,

        -- employee add line 3
        DECODE
        (
          pmt.employee_address_code,

          -- employee home addr line 3
          'HOME', per_addr.address_line3,

          -- employee office addr line 3
          'OFFICE',per_loc.address_line_3,

          -- employee provisional addr line 3
          'PROVISIONAL', per_addr_prov.address_line3,

          --address code not specified
          DECODE (per_addr.address_id,
                 NULL, per_loc.address_line_3,
                 per_addr.address_line3)
         )

        ) add_line3,


      /* payee add line4 */
      DECODE(
        pmt.address_source,

        -- supplier address line 4
        'TCA', payee_loc.address4,

        -- employee home/office addr line 4 (not available)
        null

        ) add_line4,

      /* payee city */
      DECODE(
        pmt.address_source,

        -- supplier city
        'TCA', payee_loc.city,

        -- employee city
        DECODE
        (
          pmt.employee_address_code,

          -- employee home city
          'HOME', per_addr.town_or_city,

          -- employee office city
          'OFFICE', per_loc.town_or_city,

          -- employee provisional city
          'PROVISIONAL', per_addr_prov.town_or_city,

          -- address code not specified
          DECODE (per_addr.address_id,
                 NULL, per_loc.town_or_city,
                 per_addr.town_or_city)
          )

        ) city,


      /* payee county */
      DECODE(
        pmt.address_source,

        -- supplier county
        'TCA', payee_loc.county,

        -- employee county
        (
        DECODE(
          pmt.employee_address_code,

          -- employee home county
          'HOME',
          DECODE(
            per_addr.style,
            'US',     NVL(per_addr.region_1,   ''),
            'US_GLB', NVL(per_addr.region_1,   ''),
            'IE',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            'IE_GLB', NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            'GB',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            ''),

          -- employee office county
          'OFFICE',
          DECODE(
            per_loc.style,
            'US',      NVL(per_loc.region_1,   ''),
            'US_GLB',  NVL(per_loc.region_1,   ''),
            'IE',      NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            'IE_GLB',  NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            'GB',      NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            ''),


          -- employee provisional county
          'PROVISIONAL',
          DECODE(
            per_addr_prov.style,
            'US',     NVL(per_addr_prov.region_1,   ''),
            'US_GLB', NVL(per_addr_prov.region_1,   ''),
            'IE',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr_prov.style,
                                  per_addr_prov.region_1),
                        ''),
            'IE_GLB', NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr_prov.style,
                                  per_addr_prov.region_1),
                        ''),
            'GB',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr_prov.style,
                                  per_addr_prov.region_1),
                        ''),
            ''),


            --address code not specified
            decode(per_addr.address_id,
            NULL,DECODE(
            per_loc.style,
            'US',      NVL(per_loc.region_1,   ''),
            'US_GLB',  NVL(per_loc.region_1,   ''),
            'IE',      NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            'IE_GLB',  NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            'GB',      NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            ''),
             DECODE(
            per_addr.style,
            'US',     NVL(per_addr.region_1,   ''),
            'US_GLB', NVL(per_addr.region_1,   ''),
            'IE',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            'IE_GLB', NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            'GB',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            ''))
            )
          )
        ) county,

      /* payee province */
      DECODE(
        pmt.address_source,

        -- supplier province
        'TCA', payee_loc.province,

        -- employee province
        (
        DECODE(

          pmt.employee_address_code,

          -- employee home province
          'HOME',
          DECODE(per_addr.style,
            'US',      '',
            'US_GLB',  '',
            'IE',      '',
            'IE_GLB',  '',
            'GB',      '',
            'CA',      NVL(per_addr.region_1,   ''),
            'CA_GLB',  NVL(per_addr.region_1,   ''),
            'JP',      NVL(per_addr.region_1,   ''),
            NVL(ap_web_db_expline_pkg.
                    getcountyprovince(
                        per_addr.style,
                        per_addr.region_1),
              '')
            ),

          -- employee office province
          'OFFICE',
          DECODE(per_loc.style,
            'US',      '',
            'US_GLB',  '',
            'IE',      '',
            'IE_GLB',  '',
            'GB',      '',
            'CA',      NVL(per_loc.region_1,   ''),
            'CA_GLB',  NVL(per_loc.region_1,   ''),
            'JP',      NVL(per_loc.region_1,   ''),
            NVL(ap_web_db_expline_pkg.
                    getcountyprovince(
                        per_loc.style,
                        per_loc.region_1),
              '')
              ),

          -- employee provisional province
          'PROVISIONAL',
          DECODE(per_addr_prov.style,
            'US',      '',
            'US_GLB',  '',
            'IE',      '',
            'IE_GLB',  '',
            'GB',      '',
            'CA',      NVL(per_addr_prov.region_1,   ''),
            'CA_GLB',  NVL(per_addr_prov.region_1,   ''),
            'JP',      NVL(per_addr_prov.region_1,   ''),
            NVL(ap_web_db_expline_pkg.
                    getcountyprovince(
                        per_addr_prov.style,
                        per_addr_prov.region_1),
              '')
            ),

            --address code not specified
            decode(per_addr.address_id,
            NULL,DECODE(per_loc.style,
            'US',      '',
            'US_GLB',  '',
            'IE',      '',
            'IE_GLB',  '',
            'GB',      '',
            'CA',      NVL(per_loc.region_1,   ''),
            'CA_GLB',  NVL(per_loc.region_1,   ''),
            'JP',      NVL(per_loc.region_1,   ''),
            NVL(ap_web_db_expline_pkg.
                    getcountyprovince(
                        per_loc.style,
                        per_loc.region_1),
              '')
              ),
             DECODE(per_addr.style,
            'US',      '',
            'US_GLB',  '',
            'IE',      '',
            'IE_GLB',  '',
            'GB',      '',
            'CA',      NVL(per_addr.region_1,   ''),
            'CA_GLB',  NVL(per_addr.region_1,   ''),
            'JP',      NVL(per_addr.region_1,   ''),
            NVL(ap_web_db_expline_pkg.
                    getcountyprovince(
                        per_addr.style,
                        per_addr.region_1),
              '')
            ))
            )
          )
        ) province,

      /* payee state */
      DECODE(
        pmt.address_source,

        -- supplier state
        'TCA', payee_loc.state,

         -- employee state
         (
         DECODE(
           pmt.employee_address_code,

           -- employee home state
           'HOME',
           DECODE(per_addr.style,
             'CA',     '',
             'CA_GLB', '',
             NVL(per_addr.region_2,   '')),

           -- employee office state
           'OFFICE',
           DECODE(per_loc.style,
             'CA',     '',
             'CA_GLB', '',
             NVL(per_loc.region_2, '')),

           -- employee provisional state
           'PROVISIONAL',
           DECODE(per_addr_prov.style,
             'CA',     '',
             'CA_GLB', '',
             NVL(per_addr_prov.region_2,   '')),

           --address code not specified
           decode(per_addr.address_id,
           NULL,DECODE(per_loc.style,
             'CA',     '',
             'CA_GLB', '',
              NVL(per_loc.region_2, '')),
            DECODE(per_addr.style,
             'CA',     '',
             'CA_GLB', '',
              NVL(per_addr.region_2,   '')))
           )
         )
       ) state,

     /* payee country */
      DECODE(
        pmt.address_source,

        -- supplier country
        'TCA', payee_loc.country,

        -- employee country
        (
        DECODE(
          pmt.employee_address_code,

          -- employee home country
          'HOME', per_addr.country,

          -- employee office country
          'OFFICE',per_loc.country,

          -- employee provisional country
          'PROVISIONAL', per_addr_prov.country,

          --address code not specified
          DECODE (per_addr.address_id,
               NULL, per_loc.country,
               per_addr.country
               )
          )
        )
        ) country,

      /* payee postal code */
      DECODE(
        pmt.address_source,

        -- supplier postal code
        'TCA', payee_loc.postal_code,

        -- employee postal code
        (
        DECODE(
          pmt.employee_address_code,

          -- employee home postal code
          'HOME', per_addr.postal_code,

          -- employee office postal code
          'OFFICE',per_loc.postal_code,

          -- employee provisional postal code
          'PROVISIONAL', per_addr_prov.postal_code,

          --address code not specified
          DECODE (per_addr.address_id,
               NULL, per_loc.postal_code,
               per_addr.postal_code
               )
          )
        )
        ) postal_code,


      /* payee address concat */
      DECODE(
        pmt.address_source,

        -- supplier address concat
        'TCA',
        payee_loc.address1
          || ', '
          || payee_loc.address2
          || ', '
          || payee_loc.address3
          || ', '
          || payee_loc.city
          || ', '
          || payee_loc.state
          || ', '
          || payee_loc.country
          || ', '
          || payee_loc.postal_code,

        -- employee address concat
        (
        DECODE(
          pmt.employee_address_code,

          -- employee home address concat
          'HOME',
          per_addr.address_line1
            || ', '
            || per_addr.address_line2
            || ', '
            || per_addr.address_line3
            || ', '
            || per_addr.town_or_city
            || ', '
            || DECODE(
                 per_addr.style,
                 'CA',     '',
                 'CA_GLB', '',
                 NVL(per_addr.region_2, '')
                 )
            || ', '
            || per_addr.country
            || ', '
            || per_addr.postal_code,

          -- employee office address concat
          'OFFICE',
          per_loc.address_line_1
            || ', '
            || per_loc.address_line_2
            || ', '
            || per_loc.address_line_3
            || ', '
            || per_loc.town_or_city
            || ', '
            || DECODE(
                 per_loc.style,
                 'CA',     '',
                 'CA_GLB', '',
                 NVL(per_loc.region_2, '')
                 )
            || ', '
            || per_loc.country
            || ', '
            || per_loc.postal_code,

          -- employee provisional address concat
          'PROVISIONAL',
          per_addr_prov.address_line1
            || ', '
            || per_addr_prov.address_line2
            || ', '
            || per_addr_prov.address_line3
            || ', '
            || per_addr_prov.town_or_city
            || ', '
            || DECODE(
                 per_addr_prov.style,
                 'CA',     '',
                 'CA_GLB', '',
                 NVL(per_addr_prov.region_2, '')
                 )
            || ', '
            || per_addr_prov.country
            || ', '
            || per_addr_prov.postal_code,
          -- address code not specified
          DECODE (per_addr.address_id,
               NULL, per_loc.address_line_1
            || ', '
            || per_loc.address_line_2
            || ', '
            || per_loc.address_line_3
            || ', '
            || per_loc.town_or_city
            || ', '
            || DECODE(
                 per_loc.style,
                 'CA',     '',
                 'CA_GLB', '',
                 NVL(per_loc.region_2, '')
                 )
            || ', '
            || per_loc.country
            || ', '
            || per_loc.postal_code,

              per_addr.address_line1
            || ', '
            || per_addr.address_line2
            || ', '
            || per_addr.address_line3
            || ', '
            || per_addr.town_or_city
            || ', '
            || DECODE(
                 per_addr.style,
                 'CA',     '',
                 'CA_GLB', '',
                 NVL(per_addr.region_2, '')
                 )
            || ', '
            || per_addr.country
            || ', '
            || per_addr.postal_code)
          )
        )
      ) add_concat

  FROM
      IBY_PAYMENTS_ALL         pmt,

      /* Employee address related */
      HR_LOCATIONS             per_loc,
      PER_ADDRESSES            per_addr,
      PER_ALL_ASSIGNMENTS_F    per_assgn,
      PER_ADDRESSES            per_addr_prov,

      /* Supplier address related */
      HZ_LOCATIONS             payee_loc
  WHERE
    pmt.payment_id                     = p_payment_id
    AND pmt.employee_person_id         = per_addr.person_id(+)
    AND per_addr.primary_flag(+) = 'Y'
    AND SYSDATE BETWEEN
            per_addr.date_from(+)
            AND NVL(per_addr.date_to(+), SYSDATE+1)
    AND pmt.employee_person_id         = per_addr_prov.person_id(+)
    AND per_addr_prov.address_type(+) = 'M'
    AND SYSDATE BETWEEN
            per_addr_prov.date_from(+)
            AND NVL(per_addr_prov.date_to(+), SYSDATE+1)
    AND pmt.employee_person_id         = per_assgn.person_id(+)
    AND per_assgn.location_id          = per_loc.location_id(+)
    AND per_assgn.primary_flag(+)      = 'Y'
    AND per_assgn.assignment_type(+) = 'E'
    AND (TRUNC(SYSDATE) BETWEEN
            per_assgn.effective_start_date(+)
            AND per_assgn.effective_end_date(+)
        )
    AND pmt.remit_to_location_id       = payee_loc.location_id(+)
  ) payee_addr

 WHERE

  /* payment related */
  pmt.payment_id                     = p_payment_id

  /* payer */
  AND pmt.legal_entity_id            = payer.legal_entity_id
  AND payer.party_id                 = payer_party.party_id

  /* payer bank */
  AND pmt.internal_bank_account_id   = iba.bank_account_id
  AND iba_bnk_branch.branch_party_id = iba.bank_branch_id

  /* payer bank location */
  AND iba_bnk_branch.branch_party_id = iba_branch_party_site.party_id(+)

  /* payee */
  AND pmt.payee_party_id             = payee.party_id

  /* payee site */
  AND pmt.party_site_id              = payee_site.party_site_id(+)


  /* inv payee */
  AND pmt.inv_payee_party_id             = invpayee.party_id(+)

  /* inv payee site */
  AND pmt.inv_party_site_id              = invpayee_site.party_site_id(+)

  /* vendor related */
  AND pmt.payee_party_id             = vendor.party_id(+)
  AND pmt.supplier_site_id           = vendor_site.vendor_site_id(+)
  AND nvl(vendor.vendor_id,-99)      = nvl(vendor_site.vendor_id,-99)      /*Bug 7323072*/


  /* inv vendor related */
  AND pmt.inv_payee_party_id             = invvendor.party_id(+)
  AND pmt.inv_supplier_site_id           = invvendor_site.vendor_site_id(+)
  AND nvl(invvendor.vendor_id,-99)      = nvl(invvendor_site.vendor_id,-99)        /*Bug 7323072*/

  /* employee related */
  AND pmt.employee_person_id         = per.person_id(+)

  /* payee bank */
  AND pmt.external_bank_account_id   = eba.ext_bank_account_id(+)
  AND eba.bank_party_id              = eba_bank_branch.bank_party_id(+)
  AND eba.branch_party_id            = eba_bank_branch.branch_party_id(+)

  /*
   * Fix for bug 5658982:
   *
   * We want to use outer join with the eba table because the
   * ext bank account id is optional on the payment.
   *
   * For the same reason, we must use outer join with
   * ext_ba_table table also.
   */
  AND ext_ba_table.ext_bank_account_id(+) = eba.ext_bank_account_id

  /* profile and remit advice */
  AND pmt.payment_profile_id         = prof.payment_profile_id
  AND prof.system_profile_code       = remit_advice.system_profile_code

  /* payment service request related */
  AND payreq.payment_service_request_id  = pmt.payment_service_request_id
  AND fnd_app.application_id         = payreq.calling_app_id

  /* delivery channel related */
  AND pmt.delivery_channel_code      = deliv.delivery_channel_code(+)

  /* payment reason */
  AND pmt.payment_reason_code        = pmt_reason.payment_reason_code(+)

  /* bank instruction */
  AND prof.bank_instruction1_code    = bank_instr1.bank_instruction_code(+)
  AND prof.bank_instruction2_code    = bank_instr2.bank_instruction_code(+)

  /* Org related */
  AND pmt.org_id                     = le.legal_entity_id

  /* RFC related */
  AND rfc_ca.owner_table_name(+)     = 'HZ_PARTIES'
  AND rfc_ca.class_category(+)       = 'RFC_IDENTIFIER'
  AND rfc_ca.owner_table_id(+)       = iba.bank_branch_id
  ;



 l_pmtAuditRec      IBY_PAYGROUP_PUB.paymentAuditRecType;
 l_pmtAuditTab      IBY_PAYGROUP_PUB.paymentAuditTabType;

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     IF (p_paymentTab.COUNT = 0) THEN

         print_debuginfo(l_module_name, 'Provided list of payments is '
             || 'empty. Exiting ..'
             );
         print_debuginfo(l_module_name, 'EXIT');
         RETURN;

     END IF;

     FOR i IN p_paymentTab.FIRST .. p_paymentTab.LAST LOOP

         /*
          * Pick up all the audit-related data for this
          * payment.
          *
          *Condition below is added for Bug:7183572
          */
	 IF(p_paymentTab(i).payment_function='CASH_PAYMENT') THEN

		 OPEN  c_ce_audit_columns(p_paymentTab(i).payment_id);
		 FETCH c_ce_audit_columns INTO l_pmtAuditRec;
		 CLOSE c_ce_audit_columns;
         ELSE
		 OPEN  c_audit_columns(p_paymentTab(i).payment_id);
		 FETCH c_audit_columns INTO l_pmtAuditRec;
		 CLOSE c_audit_columns;
         END IF;

         print_debuginfo(l_module_name, 'Payment id: '
             || l_pmtAuditRec.payment_id
             || ', payee name: '
             || ''''
             || l_pmtAuditRec.payee_name
             || ''''
             || ', payer legal entity name: '
             || ''''
             || l_pmtAuditRec.payer_legal_name
             || ''''
             || ', payer bank name: '
             || ''''
             || l_pmtAuditRec.payer_bank_name
             || ''''
             || ', trading partner name: '
             || ''''
             || l_pmtAuditRec.inv_payee_party_name
             || ''''
             );

         /*
          * Add this audit record to our table of audit
          * records.
          */
         l_pmtAuditTab(l_pmtAuditTab.COUNT + 1) := l_pmtAuditRec;

     END LOOP;

     /*
      * Update the IBY_PAYMENTS_ALL table using the retrieved
      * audit information.
      */
     insertAuditData(l_pmtAuditTab);

     print_debuginfo(l_module_name, 'EXIT');

 END auditPaymentData;

/*--------------------------------------------------------------------
 | NAME:
 |     auditPaymentData
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 |     See bug 5399951 for history behind some of the SQL joins
 |
 *---------------------------------------------------------------------*/
 PROCEDURE auditPaymentData(
     --p_paymentTab      IN paymentTabType
     l_trx_audit_index IN BINARY_INTEGER
     )
 IS
 l_module_name      CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                  '.auditPaymentData';

 CURSOR c_audit_columns (p_payment_id  NUMBER)
 IS
 SELECT

  /* PAYMENT RELATED */
  pmt.payment_id,                                                    -- 01

  /* PAYER */
  payer_party.party_number,            -- payer party number
  '',                                  -- payer party site name
  payer.name,                          -- payer name
  IBY_FD_EXTRACT_GEN_PVT.              -- payer tax reg number
      Get_FP_TaxRegistration
          (
          payer.legal_entity_id
          ),
  payer.registration_number,           -- payer le reg number
  payer.party_id,                      -- payer_party_id
  payer.location_id,                   -- payer_location_id
  payer_party.attribute_category,      -- payer party attr category
  payer.attribute_category,            -- payer LE attr category     -- 10

  /* PAYER SPECIAL FIELDS */
  '',                                  -- payer abbrev agency code
  '',                                  -- payer federal us employer id

  /* PAYER BANK */
  iba_bnk_branch.bank_name,            -- payer bank name
  iba_bnk_branch.bank_number,          -- payer bank number
  iba_bnk_branch.branch_number,        -- payer bank branch number
  iba_bnk_branch.bank_branch_name,     -- payer bank branch name
  iba_bnk_branch.eft_swift_code,       -- payer bank swift code
  iba.bank_account_num,                -- payer bank account num
  iba.bank_account_name,               -- payer bank account name
  iba.iban_number,                     -- payer bank acct iban number -- 20
  iba.agency_location_code,            -- payer bank agency location code
  iba_bnk_branch.branch_party_id,      -- payer bank branch party id
  iba_bnk_branch.bank_name_alt,        -- payer bank alt name
  iba_bnk_branch.bank_branch_name_alt, -- payer bank branch alt name
  iba.bank_account_name_alt,           -- payer bank alt account name
  iba.bank_account_num_electronic,     -- payer bank account num electronic
  iba_branch_party_site.location_id,   -- payer bank branch location id
  iba_bnk_branch.eft_user_number,      -- payer bank branch eft user num

  /* PAYEE */
  payee.party_number,                  -- payee party number

  /* Fix for bug 7391524
   * Full Name when Payee is an Employee is fetch from HR tables
   * This is just as a temporary fix, until TCA overcomes it architecture limitations
   */
  DECODE(pmt.employee_person_id,
   NULL,payee.party_name,
   Get_Employee_Full_Name(pmt.employee_person_id,pmt.payee_party_id,payee.party_name)) payee_party_name,                    -- payee party name

  /*
   * Fix for bug 5466979:
   *
   * Payee name is always the same as the payee party name.
   */
  DECODE(pmt.employee_person_id,
   NULL,payee.party_name,
   Get_Employee_Full_Name(pmt.employee_person_id,pmt.payee_party_id,payee.party_name)) payee_name,                    -- payee name

  DECODE(                              -- payee alternate name
        payee.party_type,
        'ORGANIZATION',
            payee.organization_name_phonetic,
        'PERSON',
            TRIM(payee.person_first_name_phonetic
                || ' '
                || payee.person_last_name_phonetic)
        ),

  /* PAYEE ADDRESS */
  payee_addr.add_line1,                -- payee add line1
  payee_addr.add_line2,                -- payee add line2
  payee_addr.add_line3,                -- payee add line3
  payee_addr.add_line4,                -- payee add line4
  payee_addr.city,                     -- payee city
  payee_addr.county,                   -- payee county
  payee_addr.province,                 -- payee province
  payee_addr.state,                    -- payee state                -- 40
  payee_addr.country,                  -- payee country
  payee_addr.postal_code,              -- payee postal code
  payee_addr.add_concat,               -- payee address concat

  /*
   * Fix for bug 5466979:
   *
   * Beneficiary name should be the same as the payee party name
   * except when beneficiary party is not null.
   *
   * If beneficiary party is not null, the beneficiary name
   * should be the hz_parties.party_name corresponding to the
   * beneficiary_party.
   */
  DECODE (pmt.beneficiary_party,
              NULL,
              payee.party_name,
              (SELECT
                   benef_party.party_name
               FROM
                   HZ_PARTIES benef_party
               WHERE
                   benef_party.party_id=pmt.beneficiary_party
              )
           ),                          -- beneficiary name

  payee.attribute_category,            -- payee party attr category
  NVL(vendor_site.attribute_category,payee_site.attribute_category),       -- payee supplier site attr category
  payee_site.party_site_name,          -- payee supplier site name
  payee_site.addressee,                -- payee addressee

  /* VENDOR RELATED */
  vendor_site.vendor_site_code_alt,    -- payee site alternate name
  vendor.segment1,                     -- payee supplier number
  vendor.customer_num,                 -- payee first party reference  -- 50
  vendor.attribute_category,           -- payee supplier attr category
  vendor.vendor_id,                    -- payee supplier id

  /* PAYEE SPECIAL FIELDS */
  IBY_FD_EXTRACT_GEN_PVT.              -- payee tax registration number
      Get_Payee_TaxRegistration
      (pmt.payee_party_id,pmt.party_site_id),

  /*
   * Fix for bug 5468251:
   *
   * Use AP_SUPPLIERS.NUM_1099 for the payee
   * LE registration number.
   */

  /*
   * Fix for bug 5475920:
   *
   * Payments can be made for employees or suppliers.
   *
   * For employees, the payee le reg num (i.e., taxpayer id)
   * is stored in PER_PEOPLE_X.
   *
   * For suppliers, the payee le reg num (i.e., taxpayer id)
   * is stored in AP_SUPPLIERS.
   *
   * Switch between these two tables depending upon payee type
   * to get the payee le reg num
   */
   /*
   * Fix for bug 5501968:
   *
   * In R12, Federal supports thid party payments i.e., payments
   * to third parties who may not be employees / suppliers.
   *
   * For this reason, we cannot assume that tax payer id for
   * all non-employees will be stored in AP_SUPPLIERS.
   *
   * However, we know that all third parties / suppliers will
   * have a row in HZ_PARTIES. Therefore, pick up the taxpayer
   * id from HZ_PARTIES as this always works.
   */
   /*
   * Fix for bug 5501968:
   *
   * In R12, Federal supports thid party payments i.e., payments
   */
   decode(upper(vendor.vendor_type_lookup_code),
          'EMPLOYEE', per.national_identifier,
          'CONTRACTOR',decode(vendor.organization_type_lookup_code,
                              'INDIVIDUAL',vendor.individual_1099,
                              'FOREIGN INDIVIDUAL',vendor.individual_1099,
   		              'PARTNERSHIP',vendor.individual_1099,
                              'FOREIGN PARTNERSHIP',vendor.individual_1099,
                              vendor.num_1099),
 	  vendor.num_1099),            -- payee Tax Identification Number

  /* PAYEE BANK */
  eba.bank_name,                       -- payee bank name
  eba.bank_number,                     -- payee bank number
  eba.branch_number,                   -- payee bank branch number
  eba.bank_branch_name,                -- payee bank branch name

  /*
   * Fix for bug 5586882:
   *
   * Populate the external bank account using
   * IBY_EXT_BANK_ACCOUNTS.bank_account_num
   * so that we show the unmasked bank account number
   */
  ext_ba_table.bank_account_num,       -- payee bank account number

  eba.bank_account_name,               -- payee bank account name    -- 60
  eba.iban_number,                     -- payee bank account IBAN
  eba.eft_swift_code,                  -- payee bank swift code
  eba.bank_account_type,               -- payee bank account type
  eba.payment_factor_flag,             -- payee bank payment factor flag
  eba.primary_acct_owner_party_id,     -- payee bank owner party id
  eba.branch_party_id,                 -- payee bank branch party id
  eba_bank_branch.bank_name_alt,       -- payee bank name alt
  eba_bank_branch.bank_branch_name_alt, -- payee bank branch name alt
  eba.alternate_account_name,          -- payee bank alt account name
  eba.bank_account_num_electronic,     -- payee bank electronic acct num -- 70
  eba.bank_branch_address_id,          -- payee bank branch location id
  eba.primary_acct_owner_name,         -- payee bank primary acct owner name

  /* REMITTANCE ADVICE RELATED */
  remit_advice.remit_advice_delivery_method,  -- remittance advice delv method
  '',                                  -- remittance advice email
  '',                                  -- remittance advice fax

  /* DELIVERY CHANNEL RELATED */
  deliv.format_value,

  /* DECLARATION REPORT RELATED */
  prof.declaration_curr_fx_rate_type,
  '',                                  -- declaration format

  /* PROFILE RELATED */
  prof.payment_profile_name,           -- account profile name       -- 80
  prof.system_profile_name,            -- system profile name

  /* PAYMENT REASON */
  pmt_reason.format_value,

  /* BANK INSTRUCTION */
  bank_instr1.format_value,
  bank_instr2.format_value,

  /* ORG */
  org.name,

  /* RFC */
  rfc_ca.class_code,

  /* REQUEST */
  payreq.call_app_pay_service_req_code,-- ppr name
  fnd_app.application_name,             -- source product            -- 88



      /*TPP-Start*/
invpayee.party_name 		inv_payee_name,
null		inv_payee_address1,
null		inv_payee_address2,
null		inv_payee_address3,
null		inv_payee_address4,
null		inv_payee_city,
null		inv_payee_postal_code,
null		inv_payee_state,
null		inv_payee_province,
null		inv_payee_county,
null		inv_payee_country,
invpayee.party_name 		inv_payee_party_name,

decode(upper(invvendor.vendor_type_lookup_code),
          'CONTRACTOR',decode(invvendor.organization_type_lookup_code,
                              'INDIVIDUAL',invvendor.individual_1099,
                              'FOREIGN INDIVIDUAL',invvendor.individual_1099,
   		              'PARTNERSHIP',invvendor.individual_1099,
                              'FOREIGN PARTNERSHIP',invvendor.individual_1099,
                              invvendor.num_1099),
 	  invvendor.num_1099)	inv_payee_le_reg_num,

IBY_FD_EXTRACT_GEN_PVT.
 Get_Payee_TaxRegistration
       (pmt.inv_payee_party_id,pmt.inv_party_site_id)
				inv_payee_tax_reg_num,

null 	inv_payee_address_concat,
DECODE (pmt.inv_beneficiary_party,
              NULL,
              invpayee.party_name,
              (SELECT
                   benef_party.party_name
               FROM
                   HZ_PARTIES benef_party
               WHERE
                   benef_party.party_id=pmt.inv_beneficiary_party
              )
           ) 			inv_beneficiary_name,

invpayee.party_number 		inv_payee_party_number,
invpayee.organization_name_phonetic	inv_payee_alternate_name,
invvendor_site.vendor_site_code_alt	inv_payee_site_alt_name,
invvendor.segment1			inv_payee_supplier_number,
invvendor.customer_num			inv_payee_first_party_ref,

null ext_bnk_acct_ownr_inv_prty_id,
null ext_bnk_branch_inv_prty_id,
null ext_bnk_acct_ownr_inv_prty_nme,

invpayee.attribute_category		inv_payee_party_attr_cat,
invvendor.attribute_category		inv_payee_supplier_attr_cat,
NVL(invvendor_site.attribute_category,invpayee_site.attribute_category)	inv_payee_spplr_site_attr_cat,
invpayee_site.party_site_name		inv_payee_supplier_site_name,
invvendor_site.vendor_site_code_alt	inv_payee_spplr_site_alt_name,
invvendor.vendor_id			inv_payee_supplier_id
      /*TPP-End*/


 FROM

  /* Payment related */
  IBY_PAYMENTS_ALL         pmt,

  /* Profile related */
  IBY_PAYMENT_PROFILES     prof,

  /* Payer */
  XLE_FIRSTPARTY_INFORMATION_V  payer,
  HZ_PARTIES               payer_party,

  /* Payer bank */
  CE_BANK_ACCOUNTS         iba,
  CE_BANK_BRANCHES_V       iba_bnk_branch,
  HZ_PARTY_SITES           iba_branch_party_site,

  /* Payee */
  HZ_PARTIES               payee,
  HZ_PARTIES               invpayee,

  /* Vendor related */
  AP_SUPPLIERS               vendor,
  AP_SUPPLIER_SITES_ALL      vendor_site,
  AP_SUPPLIERS               invvendor,
  AP_SUPPLIER_SITES_ALL      invvendor_site,

  /* Employee related */
  PER_PEOPLE_X             per,

  /* Payee site */
  HZ_PARTY_SITES           payee_site,
  HZ_PARTY_SITES           invpayee_site,

  /* Payee bank */
  IBY_EXT_BANK_ACCOUNTS_V  eba,
  IBY_EXT_BANK_ACCOUNTS    ext_ba_table,
  CE_BANK_BRANCHES_V       eba_bank_branch,

  /* Remit advice related */
  IBY_REMIT_ADVICE_SETUP   remit_advice,

  /* Payment service request related */
  IBY_PAY_SERVICE_REQUESTS payreq,
  FND_APPLICATION_ALL_VIEW fnd_app,

  /* Delivery channel related */
  IBY_DELIVERY_CHANNELS_VL deliv,

  /* Payment reason related */
  IBY_PAYMENT_REASONS_VL   pmt_reason,

  /* Bank instruction related */
  IBY_BANK_INSTRUCTIONS_VL bank_instr1,
  IBY_BANK_INSTRUCTIONS_VL bank_instr2,

  /* Org related */
  HR_ALL_ORGANIZATION_UNITS org,

  /* RFC */
  HZ_CODE_ASSIGNMENTS          rfc_ca,

  /*
   * Fix for bug 5928084:
   *
   * Derive address of employee type payees using
   * PER_ADDRESSES or HR_LOCATIONS.
   *
   * The select statement below dynamically creates the payee
   * address table. The dynamically created table is named
   * as payee_add. Columns from this table are referenced in the
   * outer select.
   *
   * The payee address can be either a
   *  - supplier address, or
   *  - employee address
   *
   * We decide whether we should pick up supplier addresses or
   * employee addresses using the 'address source' field on the
   * payment.
   *
   * 'address source' can contain two values
   *  - TCA: supplier address
   *  - HR : employee address
   *
   * Supplier addresses are present in TCA and are located using
   * remit to location id column on the payment.
   *
   * Employee addresses can be in either
   *   - PER_ADDRESSES (home addresses)
   *   - HR_LOCATIONS  (office addresses)
   * We use the 'employee address code' field on the payment to
   * decide which table to use.
   *
   * The select below uses decode clause to perform the
   * if else logic to retrieve the address from the right
   * column.
   *
   * Roughly, the decode clauses are used to effect the following
   * logic -
   *
   * for each add field:
   * if (pmt.address_source = 'TCA')
   * {
   *   -- get the address field from HZ_LOCATIONS --
   * }
   * else
   * {
   *     -- this is an employee address --
   *     if (pmt.employee_address_code = 'HOME')
   *     {
   *         -- get the address field from PER_ADDRESSES --
   *
   *         The select logic for this has been lifted from
   *         AP's expense report import program.
   *     }
   *     else
   *     {
   *         -- get the address field from HR_LOCATIONS --
   *
   *         The select logic for this has been lifted from
   *         <APDEV>/patch/115/sql/apwexptb.pls.
   *     }
   * }
   */
  (
     SELECT

      /* payee add line1 */
      DECODE(
        pmt.address_source,

        -- supplier address line 1
        'TCA', payee_loc.address1,

        -- employee add line 1
        DECODE
        (
          pmt.employee_address_code,

          -- employee home addr line 1
          'HOME', per_addr.address_line1,

          -- employee office addr line 1
          'OFFICE',per_loc.address_line_1,

          -- employee provisional addr line 1
          'PROVISIONAL', per_addr_prov.address_line1,

          --address code not specified
          DECODE (per_addr.address_id,
                 NULL, per_loc.address_line_1,
                 per_addr.address_line1)
         )

        ) add_line1,

      /* payee add line2 */
      DECODE(
        pmt.address_source,

        -- supplier address line 2
        'TCA', payee_loc.address2,

        -- employee add line 2
        DECODE
        (
          pmt.employee_address_code,

          -- employee home addr line 2
          'HOME', per_addr.address_line2,

          -- employee office addr line 2
          'OFFICE',per_loc.address_line_2,

          -- employee provisional addr line 2
          'PROVISIONAL', per_addr_prov.address_line2,

          --address code not specified
          DECODE (per_addr.address_id,
                 NULL, per_loc.address_line_2,
                 per_addr.address_line2)
         )
        ) add_line2,


      /* payee add line3 */
      DECODE(
        pmt.address_source,

        -- supplier address line 3
        'TCA', payee_loc.address3,

        -- employee add line 3
        DECODE
        (
          pmt.employee_address_code,

          -- employee home addr line 3
          'HOME', per_addr.address_line3,

          -- employee office addr line 3
          'OFFICE',per_loc.address_line_3,

          -- employee provisional addr line 3
          'PROVISIONAL', per_addr_prov.address_line3,

          --address code not specified
          DECODE (per_addr.address_id,
                 NULL, per_loc.address_line_3,
                 per_addr.address_line3)
         )

        ) add_line3,


      /* payee add line4 */
      DECODE(
        pmt.address_source,

        -- supplier address line 4
        'TCA', payee_loc.address4,

        -- employee home/office addr line 4 (not available)
        null

        ) add_line4,

      /* payee city */
      DECODE(
        pmt.address_source,

        -- supplier city
        'TCA', payee_loc.city,

        -- employee city
        DECODE
        (
          pmt.employee_address_code,

          -- employee home city
          'HOME', per_addr.town_or_city,

          -- employee office city
          'OFFICE', per_loc.town_or_city,

          -- employee provisional city
          'PROVISIONAL', per_addr_prov.town_or_city,

          -- address code not specified
          DECODE (per_addr.address_id,
                 NULL, per_loc.town_or_city,
                 per_addr.town_or_city)
          )

        ) city,


      /* payee county */
      DECODE(
        pmt.address_source,

        -- supplier county
        'TCA', payee_loc.county,

        -- employee county
        (
        DECODE(
          pmt.employee_address_code,

          -- employee home county
          'HOME',
          DECODE(
            per_addr.style,
            'US',     NVL(per_addr.region_1,   ''),
            'US_GLB', NVL(per_addr.region_1,   ''),
            'IE',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            'IE_GLB', NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            'GB',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            ''),

          -- employee office county
          'OFFICE',
          DECODE(
            per_loc.style,
            'US',      NVL(per_loc.region_1,   ''),
            'US_GLB',  NVL(per_loc.region_1,   ''),
            'IE',      NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            'IE_GLB',  NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            'GB',      NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            ''),


          -- employee provisional county
          'PROVISIONAL',
          DECODE(
            per_addr_prov.style,
            'US',     NVL(per_addr_prov.region_1,   ''),
            'US_GLB', NVL(per_addr_prov.region_1,   ''),
            'IE',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr_prov.style,
                                  per_addr_prov.region_1),
                        ''),
            'IE_GLB', NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr_prov.style,
                                  per_addr_prov.region_1),
                        ''),
            'GB',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr_prov.style,
                                  per_addr_prov.region_1),
                        ''),
            ''),


            --address code not specified
            decode(per_addr.address_id,
            NULL,DECODE(
            per_loc.style,
            'US',      NVL(per_loc.region_1,   ''),
            'US_GLB',  NVL(per_loc.region_1,   ''),
            'IE',      NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            'IE_GLB',  NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            'GB',      NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            ''),
             DECODE(
            per_addr.style,
            'US',     NVL(per_addr.region_1,   ''),
            'US_GLB', NVL(per_addr.region_1,   ''),
            'IE',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            'IE_GLB', NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            'GB',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            ''))
            )
          )
        ) county,

      /* payee province */
      DECODE(
        pmt.address_source,

        -- supplier province
        'TCA', payee_loc.province,

        -- employee province
        (
        DECODE(

          pmt.employee_address_code,

          -- employee home province
          'HOME',
          DECODE(per_addr.style,
            'US',      '',
            'US_GLB',  '',
            'IE',      '',
            'IE_GLB',  '',
            'GB',      '',
            'CA',      NVL(per_addr.region_1,   ''),
            'CA_GLB',  NVL(per_addr.region_1,   ''),
            'JP',      NVL(per_addr.region_1,   ''),
            NVL(ap_web_db_expline_pkg.
                    getcountyprovince(
                        per_addr.style,
                        per_addr.region_1),
              '')
            ),

          -- employee office province
          'OFFICE',
          DECODE(per_loc.style,
            'US',      '',
            'US_GLB',  '',
            'IE',      '',
            'IE_GLB',  '',
            'GB',      '',
            'CA',      NVL(per_loc.region_1,   ''),
            'CA_GLB',  NVL(per_loc.region_1,   ''),
            'JP',      NVL(per_loc.region_1,   ''),
            NVL(ap_web_db_expline_pkg.
                    getcountyprovince(
                        per_loc.style,
                        per_loc.region_1),
              '')
              ),

          -- employee provisional province
          'PROVISIONAL',
          DECODE(per_addr_prov.style,
            'US',      '',
            'US_GLB',  '',
            'IE',      '',
            'IE_GLB',  '',
            'GB',      '',
            'CA',      NVL(per_addr_prov.region_1,   ''),
            'CA_GLB',  NVL(per_addr_prov.region_1,   ''),
            'JP',      NVL(per_addr_prov.region_1,   ''),
            NVL(ap_web_db_expline_pkg.
                    getcountyprovince(
                        per_addr_prov.style,
                        per_addr_prov.region_1),
              '')
            ),

            --address code not specified
            decode(per_addr.address_id,
            NULL,DECODE(per_loc.style,
            'US',      '',
            'US_GLB',  '',
            'IE',      '',
            'IE_GLB',  '',
            'GB',      '',
            'CA',      NVL(per_loc.region_1,   ''),
            'CA_GLB',  NVL(per_loc.region_1,   ''),
            'JP',      NVL(per_loc.region_1,   ''),
            NVL(ap_web_db_expline_pkg.
                    getcountyprovince(
                        per_loc.style,
                        per_loc.region_1),
              '')
              ),
             DECODE(per_addr.style,
            'US',      '',
            'US_GLB',  '',
            'IE',      '',
            'IE_GLB',  '',
            'GB',      '',
            'CA',      NVL(per_addr.region_1,   ''),
            'CA_GLB',  NVL(per_addr.region_1,   ''),
            'JP',      NVL(per_addr.region_1,   ''),
            NVL(ap_web_db_expline_pkg.
                    getcountyprovince(
                        per_addr.style,
                        per_addr.region_1),
              '')
            ))
            )
          )
        ) province,

      /* payee state */
      DECODE(
        pmt.address_source,

        -- supplier state
        'TCA', payee_loc.state,

         -- employee state
         (
         DECODE(
           pmt.employee_address_code,

           -- employee home state
           'HOME',
           DECODE(per_addr.style,
             'CA',     '',
             'CA_GLB', '',
             NVL(per_addr.region_2,   '')),

           -- employee office state
           'OFFICE',
           DECODE(per_loc.style,
             'CA',     '',
             'CA_GLB', '',
             NVL(per_loc.region_2, '')),

           -- employee provisional state
           'PROVISIONAL',
           DECODE(per_addr_prov.style,
             'CA',     '',
             'CA_GLB', '',
             NVL(per_addr_prov.region_2,   '')),
           --address code not specified
           decode(per_addr.address_id,
           NULL,DECODE(per_loc.style,
             'CA',     '',
             'CA_GLB', '',
              NVL(per_loc.region_2, '')),
            DECODE(per_addr.style,
             'CA',     '',
             'CA_GLB', '',
              NVL(per_addr.region_2,   '')))
           )
         )
       ) state,

     /* payee country */
      DECODE(
        pmt.address_source,

        -- supplier country
        'TCA', payee_loc.country,

        -- employee country
        (
        DECODE(
          pmt.employee_address_code,

          -- employee home country
          'HOME', per_addr.country,

          -- employee office country
          'OFFICE',per_loc.country,

          -- employee provisional country
          'PROVISIONAL', per_addr_prov.country,

          --address code not specified
          DECODE (per_addr.address_id,
               NULL, per_loc.country,
               per_addr.country
               )
          )
        )
        ) country,

      /* payee postal code */
      DECODE(
        pmt.address_source,

        -- supplier postal code
        'TCA', payee_loc.postal_code,

        -- employee postal code
        (
        DECODE(
          pmt.employee_address_code,

          -- employee home postal code
          'HOME', per_addr.postal_code,

          -- employee office postal code
          'OFFICE',per_loc.postal_code,

          -- employee provisional postal code
          'PROVISIONAL', per_addr_prov.postal_code,

          --address code not specified
          DECODE (per_addr.address_id,
               NULL, per_loc.postal_code,
               per_addr.postal_code
               )
          )
        )
        ) postal_code,


      /* payee address concat */
      DECODE(
        pmt.address_source,

        -- supplier address concat
        'TCA',
        payee_loc.address1
          || ', '
          || payee_loc.address2
          || ', '
          || payee_loc.address3
          || ', '
          || payee_loc.city
          || ', '
          || payee_loc.state
          || ', '
          || payee_loc.country
          || ', '
          || payee_loc.postal_code,

        -- employee address concat
        (
        DECODE(
          pmt.employee_address_code,

          -- employee home address concat
          'HOME',
          per_addr.address_line1
            || ', '
            || per_addr.address_line2
            || ', '
            || per_addr.address_line3
            || ', '
            || per_addr.town_or_city
            || ', '
            || DECODE(
                 per_addr.style,
                 'CA',     '',
                 'CA_GLB', '',
                 NVL(per_addr.region_2, '')
                 )
            || ', '
            || per_addr.country
            || ', '
            || per_addr.postal_code,

          -- employee office address concat
          'OFFICE',
          per_loc.address_line_1
            || ', '
            || per_loc.address_line_2
            || ', '
            || per_loc.address_line_3
            || ', '
            || per_loc.town_or_city
            || ', '
            || DECODE(
                 per_loc.style,
                 'CA',     '',
                 'CA_GLB', '',
                 NVL(per_loc.region_2, '')
                 )
            || ', '
            || per_loc.country
            || ', '
            || per_loc.postal_code,

          -- employee provisional address concat
          'PROVISIONAL',
          per_addr_prov.address_line1
            || ', '
            || per_addr_prov.address_line2
            || ', '
            || per_addr_prov.address_line3
            || ', '
            || per_addr_prov.town_or_city
            || ', '
            || DECODE(
                 per_addr_prov.style,
                 'CA',     '',
                 'CA_GLB', '',
                 NVL(per_addr_prov.region_2, '')
                 )
            || ', '
            || per_addr_prov.country
            || ', '
            || per_addr_prov.postal_code,

          -- address code not specified
          DECODE (per_addr.address_id,
               NULL, per_loc.address_line_1
            || ', '
            || per_loc.address_line_2
            || ', '
            || per_loc.address_line_3
            || ', '
            || per_loc.town_or_city
            || ', '
            || DECODE(
                 per_loc.style,
                 'CA',     '',
                 'CA_GLB', '',
                 NVL(per_loc.region_2, '')
                 )
            || ', '
            || per_loc.country
            || ', '
            || per_loc.postal_code,

              per_addr.address_line1
            || ', '
            || per_addr.address_line2
            || ', '
            || per_addr.address_line3
            || ', '
            || per_addr.town_or_city
            || ', '
            || DECODE(
                 per_addr.style,
                 'CA',     '',
                 'CA_GLB', '',
                 NVL(per_addr.region_2, '')
                 )
            || ', '
            || per_addr.country
            || ', '
            || per_addr.postal_code)
          )
        )
      ) add_concat

  FROM
      IBY_PAYMENTS_ALL         pmt,

      /* Employee address related */
      HR_LOCATIONS             per_loc,
      PER_ADDRESSES            per_addr,
      PER_ALL_ASSIGNMENTS_F    per_assgn,
      PER_ADDRESSES            per_addr_prov,

      /* Supplier address related */
      HZ_LOCATIONS             payee_loc
  WHERE
    pmt.payment_id                     = p_payment_id
    AND pmt.employee_person_id         = per_addr.person_id(+)
    AND per_addr.primary_flag(+) = 'Y'
    AND SYSDATE BETWEEN
            per_addr.date_from(+)
            AND NVL(per_addr.date_to(+), SYSDATE+1)
    AND pmt.employee_person_id         = per_addr_prov.person_id(+)
    AND per_addr_prov.address_type(+) = 'M'
    AND SYSDATE BETWEEN
            per_addr_prov.date_from(+)
            AND NVL(per_addr_prov.date_to(+), SYSDATE+1)
    AND pmt.employee_person_id         = per_assgn.person_id(+)
    AND per_assgn.location_id          = per_loc.location_id(+)
    AND per_assgn.primary_flag(+)      = 'Y'
    AND per_assgn.assignment_type(+) = 'E'
    AND (TRUNC(SYSDATE) BETWEEN
            per_assgn.effective_start_date(+)
            AND per_assgn.effective_end_date(+)
        )
    AND pmt.remit_to_location_id       = payee_loc.location_id(+)
  ) payee_addr

 WHERE

  /* payment related */
  pmt.payment_id                     = p_payment_id

  /* payer */
  AND pmt.legal_entity_id            = payer.legal_entity_id
  AND payer.party_id                 = payer_party.party_id

  /* payer bank */
  AND pmt.internal_bank_account_id   = iba.bank_account_id
  AND iba_bnk_branch.branch_party_id = iba.bank_branch_id

  /* payer bank location */
  AND iba_bnk_branch.branch_party_id = iba_branch_party_site.party_id(+)

  /* payee */
  AND pmt.payee_party_id             = payee.party_id

  /* payee site */
  AND pmt.party_site_id              = payee_site.party_site_id(+)

  /* inv payee */
  AND pmt.inv_payee_party_id             = invpayee.party_id(+)

  /* inv payee site */
  AND pmt.inv_party_site_id              = invpayee_site.party_site_id(+)

  /* vendor related */
  AND pmt.payee_party_id             = vendor.party_id(+)
  AND pmt.supplier_site_id           = vendor_site.vendor_site_id(+)
  AND nvl(vendor.vendor_id,-99)      = nvl(vendor_site.vendor_id,-99)       /*Bug 7323072*/


  /* inv vendor related */
  AND pmt.inv_payee_party_id             = invvendor.party_id(+)
  AND pmt.inv_supplier_site_id           = invvendor_site.vendor_site_id(+)
  AND nvl(invvendor.vendor_id,-99)      = nvl(invvendor_site.vendor_id,-99)      /*Bug 7323072*/

  /* employee related */
  AND pmt.employee_person_id         = per.person_id(+)

  /* payee bank */
  AND pmt.external_bank_account_id   = eba.ext_bank_account_id(+)
  AND eba.bank_party_id              = eba_bank_branch.bank_party_id(+)
  AND eba.branch_party_id            = eba_bank_branch.branch_party_id(+)

  /*
   * Fix for bug 5658982:
   *
   * We want to use outer join with the eba table because the
   * ext bank account id is optional on the payment.
   *
   * For the same reason, we must use outer join with
   * ext_ba_table table also.
   */
  AND ext_ba_table.ext_bank_account_id(+) = eba.ext_bank_account_id

  /* profile and remit advice */
  AND pmt.payment_profile_id         = prof.payment_profile_id
  AND prof.system_profile_code       = remit_advice.system_profile_code

  /* payment service request related */
  AND payreq.payment_service_request_id  = pmt.payment_service_request_id
  AND fnd_app.application_id         = payreq.calling_app_id

  /* delivery channel related */
  AND pmt.delivery_channel_code      = deliv.delivery_channel_code(+)

  /* payment reason */
  AND pmt.payment_reason_code        = pmt_reason.payment_reason_code(+)

  /* bank instruction */
  AND prof.bank_instruction1_code    = bank_instr1.bank_instruction_code(+)
  AND prof.bank_instruction2_code    = bank_instr2.bank_instruction_code(+)

  /* Org related */
  AND pmt.org_id                     = org.organization_id

  /* RFC related */
  AND rfc_ca.owner_table_name(+)     = 'HZ_PARTIES'
  AND rfc_ca.class_category(+)       = 'RFC_IDENTIFIER'
  AND rfc_ca.owner_table_id(+)       = iba.bank_branch_id
  ;

/* cursor added for the bug:7183572*/
 CURSOR c_ce_audit_columns (p_payment_id  NUMBER)
 IS
 SELECT

  /* PAYMENT RELATED */
  pmt.payment_id,                                                    -- 01

  /* PAYER */
  payer_party.party_number,            -- payer party number
  '',                                  -- payer party site name
  payer.name,                          -- payer name
  IBY_FD_EXTRACT_GEN_PVT.              -- payer tax reg number
      Get_FP_TaxRegistration
          (
          payer.legal_entity_id
          ),
  payer.registration_number,           -- payer le reg number
  payer.party_id,                      -- payer_party_id
  payer.location_id,                   -- payer_location_id
  payer_party.attribute_category,      -- payer party attr category
  payer.attribute_category,            -- payer LE attr category     -- 10

  /* PAYER SPECIAL FIELDS */
  '',                                  -- payer abbrev agency code
  '',                                  -- payer federal us employer id

  /* PAYER BANK */
  iba_bnk_branch.bank_name,            -- payer bank name
  iba_bnk_branch.bank_number,          -- payer bank number
  iba_bnk_branch.branch_number,        -- payer bank branch number
  iba_bnk_branch.bank_branch_name,     -- payer bank branch name
  iba_bnk_branch.eft_swift_code,       -- payer bank swift code
  iba.bank_account_num,                -- payer bank account num
  iba.bank_account_name,               -- payer bank account name
  iba.iban_number,                     -- payer bank acct iban number -- 20
  iba.agency_location_code,            -- payer bank agency location code
  iba_bnk_branch.branch_party_id,      -- payer bank branch party id
  iba_bnk_branch.bank_name_alt,        -- payer bank alt name
  iba_bnk_branch.bank_branch_name_alt, -- payer bank branch alt name
  iba.bank_account_name_alt,           -- payer bank alt account name
  iba.bank_account_num_electronic,     -- payer bank account num electronic
  iba_branch_party_site.location_id,   -- payer bank branch location id
  iba_bnk_branch.eft_user_number,      -- payer bank branch eft user num

  /* PAYEE */
  payee.party_number,                  -- payee party number

  /* Fix for bug 7391524
   * Full Name when Payee is an Employee is fetch from HR tables
   * This is just as a temporary fix, until TCA overcomes it architecture limitations
   */
  DECODE(pmt.employee_person_id,
   NULL,payee.party_name,
   Get_Employee_Full_Name(pmt.employee_person_id,pmt.payee_party_id,payee.party_name)) payee_party_name,  -- payee party name

  /*
   * Fix for bug 5466979:
   *
   * Payee name is always the same as the payee party name.
   */
  DECODE(pmt.employee_person_id,
   NULL,payee.party_name,
   Get_Employee_Full_Name(pmt.employee_person_id,pmt.payee_party_id,payee.party_name)) payee_name,  --payee name

  DECODE(                              -- payee alternate name
        payee.party_type,
        'ORGANIZATION',
            payee.organization_name_phonetic,
        'PERSON',
            TRIM(payee.person_first_name_phonetic
                || ' '
                || payee.person_last_name_phonetic)
        ),

  /* PAYEE ADDRESS */
  payee_addr.add_line1,                -- payee add line1
  payee_addr.add_line2,                -- payee add line2
  payee_addr.add_line3,                -- payee add line3
  payee_addr.add_line4,                -- payee add line4
  payee_addr.city,                     -- payee city
  payee_addr.county,                   -- payee county
  payee_addr.province,                 -- payee province
  payee_addr.state,                    -- payee state                -- 40
  payee_addr.country,                  -- payee country
  payee_addr.postal_code,              -- payee postal code
  payee_addr.add_concat,               -- payee address concat

  /*
   * Fix for bug 5466979:
   *
   * Beneficiary name should be the same as the payee party name
   * except when beneficiary party is not null.
   *
   * If beneficiary party is not null, the beneficiary name
   * should be the hz_parties.party_name corresponding to the
   * beneficiary_party.
   */
  DECODE (pmt.beneficiary_party,
              NULL,
              payee.party_name,
              (SELECT
                   benef_party.party_name
               FROM
                   HZ_PARTIES benef_party
               WHERE
                   benef_party.party_id=pmt.beneficiary_party
              )
           ),                          -- beneficiary name

  payee.attribute_category,            -- payee party attr category
  NVL(vendor_site.attribute_category,payee_site.attribute_category),       -- payee supplier site attr category
  payee_site.party_site_name,          -- payee supplier site name
  payee_site.addressee,                -- payee addressee

  /* VENDOR RELATED */
  vendor_site.vendor_site_code_alt,    -- payee site alternate name
  vendor.segment1,                     -- payee supplier number
  vendor.customer_num,                 -- payee first party reference  -- 50
  vendor.attribute_category,           -- payee supplier attr category
  vendor.vendor_id,                    -- payee supplier id

  /* PAYEE SPECIAL FIELDS */
  IBY_FD_EXTRACT_GEN_PVT.              -- payee tax registration number
       Get_Payee_TaxRegistration
       (pmt.payee_party_id,pmt.party_site_id),

  /*
   * Fix for bug 5468251:
   *
   * Use AP_SUPPLIERS.NUM_1099 for the payee
   * LE registration number.
   */

  /*
   * Fix for bug 5475920:
   *
   * Payments can be made for employees or suppliers.
   *
   * For employees, the payee le reg num (i.e., taxpayer id)
   * is stored in PER_PEOPLE_X.
   *
   * For suppliers, the payee le reg num (i.e., taxpayer id)
   * is stored in AP_SUPPLIERS.
   *
   * Switch between these two tables depending upon payee type
   * to get the payee le reg num
   */
   /*
   * Fix for bug 5501968:
   *
   * In R12, Federal supports thid party payments i.e., payments
   * to third parties who may not be employees / suppliers.
   *
   * For this reason, we cannot assume that tax payer id for
   * all non-employees will be stored in AP_SUPPLIERS.
   *
   * However, we know that all third parties / suppliers will
   * have a row in HZ_PARTIES. Therefore, pick up the taxpayer
   * id from HZ_PARTIES as this always works.
   */
   /*
   * Fix for bug 5501968:
   *
   * In R12, Federal supports thid party payments i.e., payments
   */
   decode(upper(vendor.vendor_type_lookup_code),
          'EMPLOYEE', per.national_identifier,
          'CONTRACTOR',decode(vendor.organization_type_lookup_code,
                              'INDIVIDUAL',vendor.individual_1099,
                              'FOREIGN INDIVIDUAL',vendor.individual_1099,
   		              'PARTNERSHIP',vendor.individual_1099,
                              'FOREIGN PARTNERSHIP',vendor.individual_1099,
                              vendor.num_1099),
 	  vendor.num_1099),            -- payee Tax Identification Number

  /* PAYEE BANK */
  eba.bank_name,                       -- payee bank name
  eba.bank_number,                     -- payee bank number
  eba.branch_number,                   -- payee bank branch number
  eba.bank_branch_name,                -- payee bank branch name

  /*
   * Fix for bug 5586882:
   *
   * Populate the external bank account using
   * IBY_EXT_BANK_ACCOUNTS.bank_account_num
   * so that we show the unmasked bank account number
   */
  ext_ba_table.bank_account_num,       -- payee bank account number

  eba.bank_account_name,               -- payee bank account name    -- 60
  eba.iban_number,                     -- payee bank account IBAN
  eba.eft_swift_code,                  -- payee bank swift code
  eba.bank_account_type,               -- payee bank account type
  eba.payment_factor_flag,             -- payee bank payment factor flag
  eba.primary_acct_owner_party_id,     -- payee bank owner party id
  eba.branch_party_id,                 -- payee bank branch party id
  eba_bank_branch.bank_name_alt,       -- payee bank name alt
  eba_bank_branch.bank_branch_name_alt, -- payee bank branch name alt
  eba.alternate_account_name,          -- payee bank alt account name
  eba.bank_account_num_electronic,     -- payee bank electronic acct num -- 70
  eba.bank_branch_address_id,          -- payee bank branch location id
  eba.primary_acct_owner_name,         -- payee bank primary acct owner name

  /* REMITTANCE ADVICE RELATED */
  remit_advice.remit_advice_delivery_method,  -- remittance advice delv method
  '',                                  -- remittance advice email
  '',                                  -- remittance advice fax

  /* DELIVERY CHANNEL RELATED */
  deliv.format_value,

  /* DECLARATION REPORT RELATED */
  prof.declaration_curr_fx_rate_type,
  '',                                  -- declaration format

  /* PROFILE RELATED */
  prof.payment_profile_name,           -- account profile name       -- 80
  prof.system_profile_name,            -- system profile name

  /* PAYMENT REASON */
  pmt_reason.format_value,

  /* BANK INSTRUCTION */
  bank_instr1.format_value,
  bank_instr2.format_value,

  /* LE */
  le.name,

  /* RFC */
  rfc_ca.class_code,

  /* REQUEST */
  payreq.call_app_pay_service_req_code,-- ppr name
  fnd_app.application_name,             -- source product            -- 88



      /*TPP-Start*/
invpayee.party_name 		inv_payee_name,
null		inv_payee_address1,
null		inv_payee_address2,
null		inv_payee_address3,
null		inv_payee_address4,
null		inv_payee_city,
null		inv_payee_postal_code,
null		inv_payee_state,
null		inv_payee_province,
null		inv_payee_county,
null		inv_payee_country,
invpayee.party_name 		inv_payee_party_name,

decode(upper(invvendor.vendor_type_lookup_code),
          'CONTRACTOR',decode(invvendor.organization_type_lookup_code,
                              'INDIVIDUAL',invvendor.individual_1099,
                              'FOREIGN INDIVIDUAL',invvendor.individual_1099,
   		              'PARTNERSHIP',invvendor.individual_1099,
                              'FOREIGN PARTNERSHIP',invvendor.individual_1099,
                              invvendor.num_1099),
 	  invvendor.num_1099)	inv_payee_le_reg_num,

IBY_FD_EXTRACT_GEN_PVT.
 Get_Payee_TaxRegistration
       (pmt.inv_payee_party_id,pmt.inv_party_site_id) inv_payee_tax_reg_num,

null 	inv_payee_address_concat,
DECODE (pmt.inv_beneficiary_party,
              NULL,
              invpayee.party_name,
              (SELECT
                   benef_party.party_name
               FROM
                   HZ_PARTIES benef_party
               WHERE
                   benef_party.party_id=pmt.inv_beneficiary_party
              )
           ) 			inv_beneficiary_name,

invpayee.party_number 		inv_payee_party_number,
invpayee.organization_name_phonetic	inv_payee_alternate_name,
invvendor_site.vendor_site_code_alt	inv_payee_site_alt_name,
invvendor.segment1			inv_payee_supplier_number,
invvendor.customer_num			inv_payee_first_party_ref,

null ext_bnk_acct_ownr_inv_prty_id,
null ext_bnk_branch_inv_prty_id,
null ext_bnk_acct_ownr_inv_prty_nme,

invpayee.attribute_category		inv_payee_party_attr_cat,
invvendor.attribute_category		inv_payee_supplier_attr_cat,
NVL(invvendor_site.attribute_category, invpayee_site.attribute_category)	inv_payee_spplr_site_attr_cat,
invpayee_site.party_site_name		inv_payee_supplier_site_name,
invvendor_site.vendor_site_code_alt	inv_payee_spplr_site_alt_name,
invvendor.vendor_id			inv_payee_supplier_id
      /*TPP-End*/

 FROM

  /* Payment related */
  IBY_PAYMENTS_ALL         pmt,

  /* Profile related */
  IBY_PAYMENT_PROFILES     prof,

  /* Payer */
  XLE_FIRSTPARTY_INFORMATION_V  payer,
  HZ_PARTIES               payer_party,

  /* Payer bank */
  CE_BANK_ACCOUNTS         iba,
  CE_BANK_BRANCHES_V       iba_bnk_branch,
  HZ_PARTY_SITES           iba_branch_party_site,

  /* Payee */
  HZ_PARTIES               payee,
  HZ_PARTIES               invpayee,

  /* Vendor related */
  AP_SUPPLIERS               vendor,
  AP_SUPPLIER_SITES_ALL      vendor_site,

  /* Inv Vendor related */
  AP_SUPPLIERS               invvendor,
  AP_SUPPLIER_SITES_ALL      invvendor_site,

  /* Employee related */
  PER_PEOPLE_X             per,

  /* Payee site */
  HZ_PARTY_SITES           payee_site,
  HZ_PARTY_SITES           invpayee_site,

  /* Payee bank */
  IBY_EXT_BANK_ACCOUNTS_V  eba,
  IBY_EXT_BANK_ACCOUNTS    ext_ba_table,
  CE_BANK_BRANCHES_V       eba_bank_branch,

  /* Remit advice related */
  IBY_REMIT_ADVICE_SETUP   remit_advice,

  /* Payment service request related */
  IBY_PAY_SERVICE_REQUESTS payreq,
  FND_APPLICATION_ALL_VIEW fnd_app,

  /* Delivery channel related */
  IBY_DELIVERY_CHANNELS_VL deliv,

  /* Payment reason related */
  IBY_PAYMENT_REASONS_VL   pmt_reason,

  /* Bank instruction related */
  IBY_BANK_INSTRUCTIONS_VL bank_instr1,
  IBY_BANK_INSTRUCTIONS_VL bank_instr2,

  /* Legal Entity related */
  xle_entity_profiles le,

  /* RFC */
  HZ_CODE_ASSIGNMENTS          rfc_ca,

  /*
   * Fix for bug 5928084:
   *
   * Derive address of employee type payees using
   * PER_ADDRESSES or HR_LOCATIONS.
   *
   * The select statement below dynamically creates the payee
   * address table. The dynamically created table is named
   * as payee_add. Columns from this table are referenced in the
   * outer select.
   *
   * The payee address can be either a
   *  - supplier address, or
   *  - employee address
   *
   * We decide whether we should pick up supplier addresses or
   * employee addresses using the 'address source' field on the
   * payment.
   *
   * 'address source' can contain two values
   *  - TCA: supplier address
   *  - HR : employee address
   *
   * Supplier addresses are present in TCA and are located using
   * remit to location id column on the payment.
   *
   * Employee addresses can be in either
   *   - PER_ADDRESSES (home addresses)
   *   - HR_LOCATIONS  (office addresses)
   * We use the 'employee address code' field on the payment to
   * decide which table to use.
   *
   * The select below uses decode clause to perform the
   * if else logic to retrieve the address from the right
   * column.
   *
   * Roughly, the decode clauses are used to effect the following
   * logic -
   *
   * for each add field:
   * if (pmt.address_source = 'TCA')
   * {
   *   -- get the address field from HZ_LOCATIONS --
   * }
   * else
   * {
   *     -- this is an employee address --
   *     if (pmt.employee_address_code = 'HOME')
   *     {
   *         -- get the address field from PER_ADDRESSES --
   *
   *         The select logic for this has been lifted from
   *         AP's expense report import program.
   *     }
   *     else
   *     {
   *         -- get the address field from HR_LOCATIONS --
   *
   *         The select logic for this has been lifted from
   *         <APDEV>/patch/115/sql/apwexptb.pls.
   *     }
   * }
   */
  (
     SELECT

      /* payee add line1 */
      DECODE(
        pmt.address_source,

        -- supplier address line 1
        'TCA', payee_loc.address1,

        -- employee add line 1
        DECODE
        (
          pmt.employee_address_code,

          -- employee home addr line 1
          'HOME', per_addr.address_line1,

          -- employee office addr line 1
          'OFFICE',per_loc.address_line_1,

          -- employee provisional addr line 1
          'PROVISIONAL', per_addr_prov.address_line1,

          --address code not specified
          DECODE (per_addr.address_id,
                 NULL, per_loc.address_line_1,
                 per_addr.address_line1)
         )

        ) add_line1,

      /* payee add line2 */
      DECODE(
        pmt.address_source,

        -- supplier address line 2
        'TCA', payee_loc.address2,

        -- employee add line 2
        DECODE
        (
          pmt.employee_address_code,

          -- employee home addr line 2
          'HOME', per_addr.address_line2,

          -- employee office addr line 2
          'OFFICE',per_loc.address_line_2,

          -- employee provisional addr line 2
          'PROVISIONAL', per_addr_prov.address_line2,

          --address code not specified
          DECODE (per_addr.address_id,
                 NULL, per_loc.address_line_2,
                 per_addr.address_line2)
         )
        ) add_line2,


      /* payee add line3 */
      DECODE(
        pmt.address_source,

        -- supplier address line 3
        'TCA', payee_loc.address3,

        -- employee add line 3
        DECODE
        (
          pmt.employee_address_code,

          -- employee home addr line 3
          'HOME', per_addr.address_line3,

          -- employee office addr line 3
          'OFFICE',per_loc.address_line_3,

          -- employee provisional addr line 3
          'PROVISIONAL', per_addr_prov.address_line3,

          --address code not specified
          DECODE (per_addr.address_id,
                 NULL, per_loc.address_line_3,
                 per_addr.address_line3)
         )

        ) add_line3,


      /* payee add line4 */
      DECODE(
        pmt.address_source,

        -- supplier address line 4
        'TCA', payee_loc.address4,

        -- employee home/office addr line 4 (not available)
        null

        ) add_line4,

      /* payee city */
      DECODE(
        pmt.address_source,

        -- supplier city
        'TCA', payee_loc.city,

        -- employee city
        DECODE
        (
          pmt.employee_address_code,

          -- employee home city
          'HOME', per_addr.town_or_city,

          -- employee office city
          'OFFICE', per_loc.town_or_city,

          -- employee provisional city
          'PROVISIONAL', per_addr_prov.town_or_city,

          -- address code not specified
          DECODE (per_addr.address_id,
                 NULL, per_loc.town_or_city,
                 per_addr.town_or_city)
          )

        ) city,


      /* payee county */
      DECODE(
        pmt.address_source,

        -- supplier county
        'TCA', payee_loc.county,

        -- employee county
        (
        DECODE(
          pmt.employee_address_code,

          -- employee home county
          'HOME',
          DECODE(
            per_addr.style,
            'US',     NVL(per_addr.region_1,   ''),
            'US_GLB', NVL(per_addr.region_1,   ''),
            'IE',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            'IE_GLB', NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            'GB',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            ''),

          -- employee office county
          'OFFICE',
          DECODE(
            per_loc.style,
            'US',      NVL(per_loc.region_1,   ''),
            'US_GLB',  NVL(per_loc.region_1,   ''),
            'IE',      NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            'IE_GLB',  NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            'GB',      NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            ''),


          -- employee provisional county
          'PROVISIONAL',
          DECODE(
            per_addr_prov.style,
            'US',     NVL(per_addr_prov.region_1,   ''),
            'US_GLB', NVL(per_addr_prov.region_1,   ''),
            'IE',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr_prov.style,
                                  per_addr_prov.region_1),
                        ''),
            'IE_GLB', NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr_prov.style,
                                  per_addr_prov.region_1),
                        ''),
            'GB',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr_prov.style,
                                  per_addr_prov.region_1),
                        ''),
            ''),


            --address code not specified
            decode(per_addr.address_id,
            NULL,DECODE(
            per_loc.style,
            'US',      NVL(per_loc.region_1,   ''),
            'US_GLB',  NVL(per_loc.region_1,   ''),
            'IE',      NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            'IE_GLB',  NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            'GB',      NVL(ap_web_db_expline_pkg.
                               getcountyprovince(
                                   per_loc.style,
                                   per_loc.region_1),
                         ''),
            ''),
             DECODE(
            per_addr.style,
            'US',     NVL(per_addr.region_1,   ''),
            'US_GLB', NVL(per_addr.region_1,   ''),
            'IE',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            'IE_GLB', NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            'GB',     NVL(ap_web_db_expline_pkg.
                              getcountyprovince(
                                  per_addr.style,
                                  per_addr.region_1),
                        ''),
            ''))
            )
          )
        ) county,

      /* payee province */
      DECODE(
        pmt.address_source,

        -- supplier province
        'TCA', payee_loc.province,

        -- employee province
        (
        DECODE(

          pmt.employee_address_code,

          -- employee home province
          'HOME',
          DECODE(per_addr.style,
            'US',      '',
            'US_GLB',  '',
            'IE',      '',
            'IE_GLB',  '',
            'GB',      '',
            'CA',      NVL(per_addr.region_1,   ''),
            'CA_GLB',  NVL(per_addr.region_1,   ''),
            'JP',      NVL(per_addr.region_1,   ''),
            NVL(ap_web_db_expline_pkg.
                    getcountyprovince(
                        per_addr.style,
                        per_addr.region_1),
              '')
            ),

          -- employee office province
          'OFFICE',
          DECODE(per_loc.style,
            'US',      '',
            'US_GLB',  '',
            'IE',      '',
            'IE_GLB',  '',
            'GB',      '',
            'CA',      NVL(per_loc.region_1,   ''),
            'CA_GLB',  NVL(per_loc.region_1,   ''),
            'JP',      NVL(per_loc.region_1,   ''),
            NVL(ap_web_db_expline_pkg.
                    getcountyprovince(
                        per_loc.style,
                        per_loc.region_1),
              '')
              ),

          -- employee provisional province
          'PROVISIONAL',
          DECODE(per_addr_prov.style,
            'US',      '',
            'US_GLB',  '',
            'IE',      '',
            'IE_GLB',  '',
            'GB',      '',
            'CA',      NVL(per_addr_prov.region_1,   ''),
            'CA_GLB',  NVL(per_addr_prov.region_1,   ''),
            'JP',      NVL(per_addr_prov.region_1,   ''),
            NVL(ap_web_db_expline_pkg.
                    getcountyprovince(
                        per_addr_prov.style,
                        per_addr_prov.region_1),
              '')
            ),

            --address code not specified
            decode(per_addr.address_id,
            NULL,DECODE(per_loc.style,
            'US',      '',
            'US_GLB',  '',
            'IE',      '',
            'IE_GLB',  '',
            'GB',      '',
            'CA',      NVL(per_loc.region_1,   ''),
            'CA_GLB',  NVL(per_loc.region_1,   ''),
            'JP',      NVL(per_loc.region_1,   ''),
            NVL(ap_web_db_expline_pkg.
                    getcountyprovince(
                        per_loc.style,
                        per_loc.region_1),
              '')
              ),
             DECODE(per_addr.style,
            'US',      '',
            'US_GLB',  '',
            'IE',      '',
            'IE_GLB',  '',
            'GB',      '',
            'CA',      NVL(per_addr.region_1,   ''),
            'CA_GLB',  NVL(per_addr.region_1,   ''),
            'JP',      NVL(per_addr.region_1,   ''),
            NVL(ap_web_db_expline_pkg.
                    getcountyprovince(
                        per_addr.style,
                        per_addr.region_1),
              '')
            ))
            )
          )
        ) province,

      /* payee state */
      DECODE(
        pmt.address_source,

        -- supplier state
        'TCA', payee_loc.state,

         -- employee state
         (
         DECODE(
           pmt.employee_address_code,

           -- employee home state
           'HOME',
           DECODE(per_addr.style,
             'CA',     '',
             'CA_GLB', '',
             NVL(per_addr.region_2,   '')),

           -- employee office state
           'OFFICE',
           DECODE(per_loc.style,
             'CA',     '',
             'CA_GLB', '',
             NVL(per_loc.region_2, '')),

           -- employee provisional state
           'PROVISIONAL',
           DECODE(per_addr_prov.style,
             'CA',     '',
             'CA_GLB', '',
             NVL(per_addr_prov.region_2,   '')),

           --address code not specified
           decode(per_addr.address_id,
           NULL,DECODE(per_loc.style,
             'CA',     '',
             'CA_GLB', '',
              NVL(per_loc.region_2, '')),
            DECODE(per_addr.style,
             'CA',     '',
             'CA_GLB', '',
              NVL(per_addr.region_2,   '')))
           )
         )
       ) state,

     /* payee country */
      DECODE(
        pmt.address_source,

        -- supplier country
        'TCA', payee_loc.country,

        -- employee country
        (
        DECODE(
          pmt.employee_address_code,

          -- employee home country
          'HOME', per_addr.country,

          -- employee office country
          'OFFICE',per_loc.country,

          -- employee provisional country
          'PROVISIONAL', per_addr_prov.country,

          --address code not specified
          DECODE (per_addr.address_id,
               NULL, per_loc.country,
               per_addr.country
               )
          )
        )
        ) country,

      /* payee postal code */
      DECODE(
        pmt.address_source,

        -- supplier postal code
        'TCA', payee_loc.postal_code,

        -- employee postal code
        (
        DECODE(
          pmt.employee_address_code,

          -- employee home postal code
          'HOME', per_addr.postal_code,

          -- employee office postal code
          'OFFICE',per_loc.postal_code,

          -- employee provisional postal code
          'PROVISIONAL', per_addr_prov.postal_code,

          --address code not specified
          DECODE (per_addr.address_id,
               NULL, per_loc.postal_code,
               per_addr.postal_code
               )
          )
        )
        ) postal_code,


      /* payee address concat */
      DECODE(
        pmt.address_source,

        -- supplier address concat
        'TCA',
        payee_loc.address1
          || ', '
          || payee_loc.address2
          || ', '
          || payee_loc.address3
          || ', '
          || payee_loc.city
          || ', '
          || payee_loc.state
          || ', '
          || payee_loc.country
          || ', '
          || payee_loc.postal_code,

        -- employee address concat
        (
        DECODE(
          pmt.employee_address_code,

          -- employee home address concat
          'HOME',
          per_addr.address_line1
            || ', '
            || per_addr.address_line2
            || ', '
            || per_addr.address_line3
            || ', '
            || per_addr.town_or_city
            || ', '
            || DECODE(
                 per_addr.style,
                 'CA',     '',
                 'CA_GLB', '',
                 NVL(per_addr.region_2, '')
                 )
            || ', '
            || per_addr.country
            || ', '
            || per_addr.postal_code,

          -- employee office address concat
          'OFFICE',
          per_loc.address_line_1
            || ', '
            || per_loc.address_line_2
            || ', '
            || per_loc.address_line_3
            || ', '
            || per_loc.town_or_city
            || ', '
            || DECODE(
                 per_loc.style,
                 'CA',     '',
                 'CA_GLB', '',
                 NVL(per_loc.region_2, '')
                 )
            || ', '
            || per_loc.country
            || ', '
            || per_loc.postal_code,

          -- employee provisional address concat
          'PROVISIONAL',
          per_addr_prov.address_line1
            || ', '
            || per_addr_prov.address_line2
            || ', '
            || per_addr_prov.address_line3
            || ', '
            || per_addr_prov.town_or_city
            || ', '
            || DECODE(
                 per_addr_prov.style,
                 'CA',     '',
                 'CA_GLB', '',
                 NVL(per_addr_prov.region_2, '')
                 )
            || ', '
            || per_addr_prov.country
            || ', '
            || per_addr_prov.postal_code,
          -- address code not specified
          DECODE (per_addr.address_id,
               NULL, per_loc.address_line_1
            || ', '
            || per_loc.address_line_2
            || ', '
            || per_loc.address_line_3
            || ', '
            || per_loc.town_or_city
            || ', '
            || DECODE(
                 per_loc.style,
                 'CA',     '',
                 'CA_GLB', '',
                 NVL(per_loc.region_2, '')
                 )
            || ', '
            || per_loc.country
            || ', '
            || per_loc.postal_code,

              per_addr.address_line1
            || ', '
            || per_addr.address_line2
            || ', '
            || per_addr.address_line3
            || ', '
            || per_addr.town_or_city
            || ', '
            || DECODE(
                 per_addr.style,
                 'CA',     '',
                 'CA_GLB', '',
                 NVL(per_addr.region_2, '')
                 )
            || ', '
            || per_addr.country
            || ', '
            || per_addr.postal_code)
          )
        )
      ) add_concat

  FROM
      IBY_PAYMENTS_ALL         pmt,

      /* Employee address related */
      HR_LOCATIONS             per_loc,
      PER_ADDRESSES            per_addr,
      PER_ALL_ASSIGNMENTS_F    per_assgn,
      PER_ADDRESSES            per_addr_prov,

      /* Supplier address related */
      HZ_LOCATIONS             payee_loc
  WHERE
    pmt.payment_id                     = p_payment_id
    AND pmt.employee_person_id         = per_addr.person_id(+)
    AND per_addr.primary_flag(+) = 'Y'
    AND SYSDATE BETWEEN
            per_addr.date_from(+)
            AND NVL(per_addr.date_to(+), SYSDATE+1)
    AND pmt.employee_person_id         = per_addr_prov.person_id(+)
    AND per_addr_prov.address_type(+) = 'M'
    AND SYSDATE BETWEEN
            per_addr_prov.date_from(+)
            AND NVL(per_addr_prov.date_to(+), SYSDATE+1)
    AND pmt.employee_person_id         = per_assgn.person_id(+)
    AND per_assgn.location_id          = per_loc.location_id(+)
    AND per_assgn.primary_flag(+)      = 'Y'
    AND per_assgn.assignment_type(+) = 'E'
    AND (TRUNC(SYSDATE) BETWEEN
            per_assgn.effective_start_date(+)
            AND per_assgn.effective_end_date(+)
        )
    AND pmt.remit_to_location_id       = payee_loc.location_id(+)
  ) payee_addr

 WHERE

  /* payment related */
  pmt.payment_id                     = p_payment_id

  /* payer */
  AND pmt.legal_entity_id            = payer.legal_entity_id
  AND payer.party_id                 = payer_party.party_id

  /* payer bank */
  AND pmt.internal_bank_account_id   = iba.bank_account_id
  AND iba_bnk_branch.branch_party_id = iba.bank_branch_id

  /* payer bank location */
  AND iba_bnk_branch.branch_party_id = iba_branch_party_site.party_id(+)

  /* payee */
  AND pmt.payee_party_id             = payee.party_id

  /* payee site */
  AND pmt.party_site_id              = payee_site.party_site_id(+)


  /* inv payee */
  AND pmt.inv_payee_party_id             = invpayee.party_id(+)

  /* inv payee site */
  AND pmt.inv_party_site_id              = invpayee_site.party_site_id(+)

  /* vendor related */
  AND pmt.payee_party_id             = vendor.party_id(+)
  AND pmt.supplier_site_id           = vendor_site.vendor_site_id(+)
  AND nvl(vendor.vendor_id,-99)      = nvl(vendor_site.vendor_id,-99)      /*Bug 7323072*/


  /* inv vendor related */
  AND pmt.inv_payee_party_id             = invvendor.party_id(+)
  AND pmt.inv_supplier_site_id           = invvendor_site.vendor_site_id(+)
  AND nvl(invvendor.vendor_id,-99)      = nvl(invvendor_site.vendor_id,-99)        /*Bug 7323072*/

  /* employee related */
  AND pmt.employee_person_id         = per.person_id(+)

  /* payee bank */
  AND pmt.external_bank_account_id   = eba.ext_bank_account_id(+)
  AND eba.bank_party_id              = eba_bank_branch.bank_party_id(+)
  AND eba.branch_party_id            = eba_bank_branch.branch_party_id(+)

  /*
   * Fix for bug 5658982:
   *
   * We want to use outer join with the eba table because the
   * ext bank account id is optional on the payment.
   *
   * For the same reason, we must use outer join with
   * ext_ba_table table also.
   */
  AND ext_ba_table.ext_bank_account_id(+) = eba.ext_bank_account_id

  /* profile and remit advice */
  AND pmt.payment_profile_id         = prof.payment_profile_id
  AND prof.system_profile_code       = remit_advice.system_profile_code

  /* payment service request related */
  AND payreq.payment_service_request_id  = pmt.payment_service_request_id
  AND fnd_app.application_id         = payreq.calling_app_id

  /* delivery channel related */
  AND pmt.delivery_channel_code      = deliv.delivery_channel_code(+)

  /* payment reason */
  AND pmt.payment_reason_code        = pmt_reason.payment_reason_code(+)

  /* bank instruction */
  AND prof.bank_instruction1_code    = bank_instr1.bank_instruction_code(+)
  AND prof.bank_instruction2_code    = bank_instr2.bank_instruction_code(+)

  /* Org related */
  AND pmt.org_id                     = le.legal_entity_id

  /* RFC related */
  AND rfc_ca.owner_table_name(+)     = 'HZ_PARTIES'
  AND rfc_ca.class_category(+)       = 'RFC_IDENTIFIER'
  AND rfc_ca.owner_table_id(+)       = iba.bank_branch_id
  ;



 l_pmtAuditRec      IBY_PAYGROUP_PUB.paymentAuditRecType;
 l_pmtAuditTab      IBY_PAYGROUP_PUB.paymentAuditTabType;

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');


     /*
      * Update the IBY_PAYMENTS_ALL table using the retrieved
      * audit information.
      */
    -- insertAuditData(l_pmtAuditTab);

     GET_PAYER_INFO(l_trx_audit_index);
     GET_PAYER_ACCT_INFO(l_trx_audit_index);
     GET_VENDOR_INFO(l_trx_audit_index);
     GET_PAYEE(l_trx_audit_index);
     GET_PAYEE_SITE_INFO(l_trx_audit_index);
     GET_PAYEE_ADDR_INFO(l_trx_audit_index);
     GET_PAYEE_BANK_INFO(l_trx_audit_index);
     GET_REMITTANCE_INFO(l_trx_audit_index);
     GET_PPR_INFO(l_trx_audit_index);
     GET_DELIVERY_INFO(l_trx_audit_index);
     GET_ORG_INFO(l_trx_audit_index);
     GET_PMTREASON_INFO(l_trx_audit_index);


     print_debuginfo(l_module_name, 'EXIT');

 END auditPaymentData;

/*--------------------------------------------------------------------
 | NAME:
 |     insertAuditData
 |
 | PURPOSE:
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE insertAuditData(
     p_auditPmtTab    IN paymentAuditTabType
     )
 IS

 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME || '.insertAuditData';

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     /* Normally, this shouldn't happen */
     IF (p_auditPmtTab.COUNT = 0) THEN

         IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
         print_debuginfo(l_module_name, 'No audit data '
             || 'was provided to update IBY_PAYMENTS_ALL table. '
             || 'Exiting ..'
             );

         print_debuginfo(l_module_name, 'EXIT');
 END IF;
         RETURN;

     END IF;


     FOR i IN p_auditPmtTab.FIRST .. p_auditPmtTab.LAST LOOP

         UPDATE
             IBY_PAYMENTS_ALL
         SET
             payer_party_number             = p_auditPmtTab(i).
                                                  payer_party_number,
             payer_party_site_name          = p_auditPmtTab(i).
                                                  payer_party_site_name,
             payer_legal_entity_name        = p_auditPmtTab(i).payer_legal_name,
             payer_tax_registration_num     = p_auditPmtTab(i).
                                                  payer_tax_reg_number,
             payer_le_registration_num      = p_auditPmtTab(i).
                                                  payer_le_reg_number,
             payer_party_id                 = p_auditPmtTab(i).
                                                  payer_party_id,
             payer_location_id              = p_auditPmtTab(i).
                                                  payer_location_id,
             payer_party_attr_category      = p_auditPmtTab(i).
                                                  payer_party_attr_cat,
             payer_le_attr_category         = p_auditPmtTab(i).
                                                  payer_le_attr_cat,
             payer_abbreviated_agency_code  = p_auditPmtTab(i).
                                                  payer_abbrev_agency_code,
             payer_federal_us_employer_id   = p_auditPmtTab(i).
                                                  payer_us_employer_id,
             int_bank_name                  = p_auditPmtTab(i).payer_bank_name,
             int_bank_number                = p_auditPmtTab(i).
                                                  payer_bank_number,
             int_bank_branch_number         = p_auditPmtTab(i).
                                                  payer_bank_branch_number,
             int_bank_branch_name           = p_auditPmtTab(i).
                                                  payer_bank_branch_name,
             int_eft_swift_code             = p_auditPmtTab(i).
                                                  payer_bank_swift_code,
             int_bank_account_number        = p_auditPmtTab(i).
                                                  payer_bank_acct_num,
             int_bank_account_name          = p_auditPmtTab(i).
                                                  payer_bank_acct_name,
             int_bank_account_iban          = p_auditPmtTab(i).
                                                  payer_bank_acct_iban,
             int_bank_acct_agency_loc_code  = p_auditPmtTab(i).
                                                  payer_bank_agency_loc_code,
             int_bank_branch_party_id       = p_auditPmtTab(i).
                                                  payer_bank_branch_party_id,
             int_bank_alt_name              = p_auditPmtTab(i).
                                                  payer_bank_alt_name,
             int_bank_branch_alt_name       = p_auditPmtTab(i).
                                                  payer_bank_branch_alt_name,
             int_bank_account_alt_name      = p_auditPmtTab(i).
                                                  payer_bank_alt_account_name,
             int_bank_account_num_elec      = p_auditPmtTab(i).
                                                  payer_bank_account_num_elec,
             int_bank_branch_location_id    = p_auditPmtTab(i).
                                                  payer_bank_branch_location_id,
             int_bank_branch_eft_user_num   = p_auditPmtTab(i).
                                              payer_bank_branch_eft_user_num,
             payee_party_number             = p_auditPmtTab(i).
                                                  payee_party_number,
             payee_party_name               = p_auditPmtTab(i).payee_party_name,
             payee_name                     = p_auditPmtTab(i).payee_name,
             payee_alternate_name           = p_auditPmtTab(i).payee_name_alternate,     -- Bug 6175102
             payee_address1                 = p_auditPmtTab(i).payee_add_line_1,
             payee_address2                 = p_auditPmtTab(i).payee_add_line_2,
             payee_address3                 = p_auditPmtTab(i).payee_add_line_3,
             payee_address4                 = p_auditPmtTab(i).payee_add_line_4,
             payee_city                     = p_auditPmtTab(i).payee_city,
             payee_county                   = p_auditPmtTab(i).payee_county,
             payee_province                 = p_auditPmtTab(i).payee_province,
             payee_state                    = p_auditPmtTab(i).payee_state,
             payee_country                  = p_auditPmtTab(i).payee_country,
             payee_postal_code              = p_auditPmtTab(i).
                                                  payee_postal_code,
             payee_address_concat           = p_auditPmtTab(i).
                                                  payee_address_concat,
             beneficiary_name               = p_auditPmtTab(i).
                                                  beneficiary_name,
             payee_party_attr_category      = p_auditPmtTab(i).
                                                  payee_party_attr_cat,
             payee_spplr_site_attr_category = p_auditPmtTab(i).
                                                  payee_supplier_site_attr_cat,
             payee_supplier_site_name       = p_auditPmtTab(i).
                                                  payee_supplier_site_name,
             payee_addressee                = p_auditPmtTab(i).
                                                  payee_addressee,
             payee_site_alternate_name      = p_auditPmtTab(i).
                                                  payee_site_name_alternate,
             payee_supplier_number          = p_auditPmtTab(i).
                                                  payee_supplier_number,
             payee_first_party_reference    = p_auditPmtTab(i).
                                                  payee_first_party_ref,
             payee_supplier_attr_category   = p_auditPmtTab(i).
                                                  payee_supplier_attr_cat,
             payee_supplier_id              = p_auditPmtTab(i).
                                                  payee_supplier_id,
             payee_tax_registration_num     = p_auditPmtTab(i).
                                                  payee_tax_reg_number,
             payee_le_registration_num      = p_auditPmtTab(i).
                                                  payee_le_reg_number,
             ext_bank_name                  = p_auditPmtTab(i).payee_bank_name,
             ext_bank_number                = p_auditPmtTab(i).
                                                  payee_bank_number,
             ext_branch_number              = p_auditPmtTab(i).
                                                  payee_bank_branch_number,
             ext_bank_branch_name           = p_auditPmtTab(i).
                                                  payee_bank_branch_name,
             ext_bank_account_number        = p_auditPmtTab(i).
                                                  payee_bank_acct_number,
             ext_bank_account_name          = p_auditPmtTab(i).
                                                  payee_bank_acct_name,
             ext_bank_account_iban_number   = p_auditPmtTab(i).
                                                  payee_bank_acct_iban,
             ext_eft_swift_code             = p_auditPmtTab(i).
                                                  payee_bank_swift_code,
             ext_bank_account_type          = p_auditPmtTab(i).
                                                  payee_bank_acct_type,
             ext_bank_acct_pmt_factor_flag  = p_auditPmtTab(i).
                                                 payee_bank_payment_factor_flag,
             ext_bank_acct_owner_party_id   = p_auditPmtTab(i).
                                                  payee_bank_owner_party_id,
             ext_bank_branch_party_id       = p_auditPmtTab(i).
                                                  payee_bank_branch_party_id,
             ext_bank_alt_name              = p_auditPmtTab(i).
                                                  payee_bank_name_alt,
             ext_bank_branch_alt_name       = p_auditPmtTab(i).
                                                  payee_bank_branch_name_alt,
             ext_bank_account_alt_name      = p_auditPmtTab(i).
                                                  payee_bank_alt_account_name,
             ext_bank_account_num_elec      = p_auditPmtTab(i).
                                              payee_bank_electronic_acct_num,
             ext_bank_branch_location_id    = p_auditPmtTab(i).
                                                  payee_bank_branch_location_id,
             ext_bank_acct_owner_party_name = p_auditPmtTab(i).
                                                  payee_bank_acct_owner_name,
             remit_advice_delivery_method   = p_auditPmtTab(i).
                                                  remit_advice_delivery_method,
             remit_advice_email             = p_auditPmtTab(i).
                                                  remit_advice_email,
             remit_advice_fax               = p_auditPmtTab(i).
                                                  remit_advice_fax,

             /*
              * Fix for bug 5522421:
              *
              * sra_delivery_method is the same as
              * remit_advice_delivery_method and is
              * being obsoleted.
              */
             --sra_delivery_method            = p_auditPmtTab(i).
             --                                     remit_advice_delv_method,

             delivery_channel_format_value  = p_auditPmtTab(i).
                                                  delivery_channel_format,
             declaration_exch_rate_type     = p_auditPmtTab(i).
                                                  decl_curr_fx_rate_type,
             declaration_format             = p_auditPmtTab(i).
                                                  declaration_format,
             payment_profile_acct_name      = p_auditPmtTab(i).
                                                  payment_acct_profile_name,
             payment_profile_sys_name       = p_auditPmtTab(i).
                                                  payment_sys_profile_name,
             payment_reason_format_value    = p_auditPmtTab(i).
                                                  payment_reason_format,
             bank_instruction1_format_value = p_auditPmtTab(i).
                                                  bank_instr1_format,
             bank_instruction2_format_value = p_auditPmtTab(i).
                                                  bank_instr2_format,
             org_name                       = p_auditPmtTab(i).org_name,
             int_bank_branch_rfc_identifier = p_auditPmtTab(i).
                                                  payer_bank_branch_rfc_id,
             payment_process_request_name   = p_auditPmtTab(i).ppr_name,
             source_product                 = p_auditPmtTab(i).source_product,

/*TPP-Start*/
inv_payee_name = p_auditPmtTab(i).inv_payee_name,
inv_payee_address1 = p_auditPmtTab(i).inv_payee_address1,
inv_payee_address2 = p_auditPmtTab(i).inv_payee_address2,
inv_payee_address3 = p_auditPmtTab(i).inv_payee_address3,
inv_payee_address4 = p_auditPmtTab(i).inv_payee_address4,
inv_payee_city = p_auditPmtTab(i).inv_payee_city,
inv_payee_postal_code = p_auditPmtTab(i).inv_payee_postal_code,
inv_payee_state = p_auditPmtTab(i).inv_payee_state,
inv_payee_province = p_auditPmtTab(i).inv_payee_province,
inv_payee_county = p_auditPmtTab(i).inv_payee_county,
inv_payee_country = p_auditPmtTab(i).inv_payee_country,
inv_payee_party_name = p_auditPmtTab(i).inv_payee_party_name,
inv_payee_le_reg_num = p_auditPmtTab(i).inv_payee_le_reg_num,
inv_payee_tax_reg_num = p_auditPmtTab(i).inv_payee_tax_reg_num,
inv_payee_address_concat = p_auditPmtTab(i).inv_payee_address_concat,
inv_beneficiary_name = p_auditPmtTab(i).inv_beneficiary_name,
inv_payee_party_number = p_auditPmtTab(i).inv_payee_party_number,
inv_payee_alternate_name = p_auditPmtTab(i).inv_payee_alternate_name,
inv_payee_site_alt_name = p_auditPmtTab(i).inv_payee_site_alt_name,
inv_payee_supplier_number = p_auditPmtTab(i).inv_payee_supplier_number,
inv_payee_first_party_ref = p_auditPmtTab(i).inv_payee_first_party_ref,
ext_bnk_acct_ownr_inv_prty_id = p_auditPmtTab(i).ext_bnk_acct_ownr_inv_prty_id,
ext_bnk_branch_inv_prty_id = p_auditPmtTab(i).ext_bnk_branch_inv_prty_id,
ext_bnk_acct_ownr_inv_prty_nme = p_auditPmtTab(i).ext_bnk_acct_ownr_inv_prty_nme,
inv_payee_party_attr_cat = p_auditPmtTab(i).inv_payee_party_attr_cat,
inv_payee_supplier_attr_cat = p_auditPmtTab(i).inv_payee_supplier_attr_cat,
inv_payee_spplr_site_attr_cat = p_auditPmtTab(i).inv_payee_spplr_site_attr_cat,
inv_payee_supplier_site_name = p_auditPmtTab(i).inv_payee_supplier_site_name,
inv_payee_spplr_site_alt_name = p_auditPmtTab(i).inv_payee_spplr_site_alt_name,
inv_payee_supplier_id = p_auditPmtTab(i).inv_payee_supplier_id
/*TPP-End*/

         WHERE
             payment_id                     = p_auditPmtTab(i).payment_id
         ;

     END LOOP;

     print_debuginfo(l_module_name, 'EXIT');

 END insertAuditData;

/*--------------------------------------------------------------------
 | NAME:
 |     sweepCommonPmtAttributes
 |
 | PURPOSE:
 |     Scan all the documents of each payment for specific common
 |     attributes.
 |
 |     If such a common attribute is found, set the correspoding
 |     attribute on the parent payment to the same value.
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE sweepCommonPmtAttributes (
     x_paymentTab      IN OUT NOCOPY IBY_PAYGROUP_PUB.paymentTabType,
     x_docsInPmtTab    IN OUT NOCOPY IBY_PAYGROUP_PUB.docsInPaymentTabType
     )
 IS
 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME
                                             || '.sweepCommonPmtAttributes';
 l_first_record           BOOLEAN     := TRUE;

 l_due_date_common_flag   BOOLEAN     := TRUE;
 l_temp_due_date          DATE        := NULL;

 l_delv_chnl_common_flag   BOOLEAN    := TRUE;
 l_temp_delv_chnl          VARCHAR2(200);

 l_uri_common_flag         BOOLEAN    := TRUE;
 l_temp_uri                VARCHAR2(200);
 l_temp_uri_ckdigits       VARCHAR2(200);

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     /*
      * For each payment:
      *
      * Search if all the docs of this payment contain
      * the same attribute, then populate this
      * attribute on the payment itself.
      */

     /*
      * Sweep for payment due date.
      */
     FOR i IN x_paymentTab.FIRST .. x_paymentTab.LAST LOOP

         /*
          * Initialize for each payment iteration.
          */
         l_due_date_common_flag := TRUE;
         l_temp_due_date        := NULL;
         l_first_record         := TRUE;

         /*
          * Only attempt to derive the payment due date if the
          * payment does not already have a due date set.
          */
         IF (x_paymentTab(i).payment_due_date IS NULL) THEN

             FOR j IN x_docsInPmtTab.FIRST .. x_docsInPmtTab.LAST LOOP

                 IF (x_paymentTab(i).payment_id = x_docsInPmtTab(j).payment_id)
                 THEN

                     /*
                      * If this is the first document for the payment
                      * in consideration, initialize the temp due
                      * date with the due date on the current doc.
                      */
                     IF (l_first_record = TRUE) THEN

                         l_temp_due_date := x_docsInPmtTab(j).pmt_due_date;

                     ELSE

                         /*
                          * If the due date on the current document does not
                          * match the due date on the previously stored
                          * document, then the due date is not common across
                          * all docs of this payment.
                          */
                         IF (l_temp_due_date <> x_docsInPmtTab(j).pmt_due_date)
                         THEN

                             l_due_date_common_flag := FALSE;

                             /*
                              * Exit iteration for this payment.
                              */
                             EXIT;

                         END IF; -- if due date does not match

                     END IF; -- if first record

                 END IF; -- if doc is for current payment

                 /*
                  * Reset the first record flag.
                  */
                 /*
                  * Fix for bug 5529924:
                  *
                  * When checking for the first record, also
                  * check that that the due date variable
                  * is not null. Otherwise, we might be
                  * setting the first record flag based
                  * on some document unrelated to this payment.
                  */
                 IF (l_temp_due_date IS NOT NULL) THEN
                     IF (l_first_record = TRUE) THEN
                         l_first_record := FALSE;
                     END IF;
                 END IF;

             END LOOP; -- for all docs

             IF (l_due_date_common_flag = TRUE) THEN

                 /*
                  * This means that all the docs of this payment
                  * have the same due date.
                  *
                  * Set this value on the payment (if not null)
                  */
                 IF (l_temp_due_date IS NOT NULL) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'All documents of payment '
                         || x_paymentTab(i).payment_id
                         || ' have the same payment due date '
                         || l_temp_due_date
                         || '. Hence setting this attribute on the '
                         || 'payment itself.'
                         );
 END IF;
                     x_paymentTab(i).payment_due_date := l_temp_due_date;

                 ELSE

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Not setting pmt due date '
                         || 'for pmt id: '
                         || x_paymentTab(i).payment_id
                         );
		    END IF;
                 END IF; -- if due date is not null

             END IF; -- if due date common flag set to TRUE

         END IF; -- if pmt due date is null

     END LOOP; -- for all pmts

     /*
      * Fix for bug 5462976:
      *
      * Sweep for delivery channel.
      */
     FOR i IN x_paymentTab.FIRST .. x_paymentTab.LAST LOOP

         /*
          * Initialize for each payment iteration.
          */
         l_delv_chnl_common_flag := TRUE;
         l_temp_delv_chnl        := NULL;
         l_first_record          := TRUE;

         /*
          * Only attempt to derive the delivery channel if the
          * payment does not already have a delivery channel set.
          */
         IF (x_paymentTab(i).delivery_channel_code IS NULL) THEN

             FOR j IN x_docsInPmtTab.FIRST .. x_docsInPmtTab.LAST LOOP

                 IF (x_paymentTab(i).payment_id = x_docsInPmtTab(j).payment_id)
                 THEN

                     /*
                      * If this is the first document for the payment
                      * in consideration, initialize the temp delivery
                      * channel with the delv channel on the current doc.
                      */
                     IF (l_first_record = TRUE) THEN

                         l_temp_delv_chnl := x_docsInPmtTab(j).delivery_channel;

                     ELSE

                         /*
                          * If the delv chnl on the current document does not
                          * match the delv chnl on the previously stored
                          * document, then the delv chnl is not common across
                          * all docs of this payment.
                          */
                         IF (l_temp_delv_chnl <>
                             x_docsInPmtTab(j).delivery_channel) THEN

                             l_delv_chnl_common_flag := FALSE;

                             /*
                              * Exit iteration for this payment.
                              */
                             EXIT;

                         END IF; -- if delv chnl does not match

                     END IF; -- if first record

                 END IF; -- if doc is for current payment

                 /*
                  * Reset the first record flag.
                  */
                 /*
                  * Fix for bug 5529924:
                  *
                  * When checking for the first record, also
                  * check that that the delivery channel variable
                  * is not null. Otherwise, we might be
                  * setting the first record flag based
                  * on some document unrelated to this payment.
                  */
                 IF (l_temp_delv_chnl IS NOT NULL) THEN
                     IF (l_first_record = TRUE) THEN
                         l_first_record := FALSE;
                     END IF;
                 END IF;

             END LOOP; -- for all docs

             IF (l_delv_chnl_common_flag = TRUE) THEN

                 /*
                  * This means that all the docs of this payment
                  * have the same delivery channel.
                  *
                  * Set this value on the payment (if not null)
                  */
                 IF (l_temp_delv_chnl IS NOT NULL) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'All documents of payment '
                         || x_paymentTab(i).payment_id
                         || ' have the same delivery channel code '
                         || l_temp_delv_chnl
                         || '. Hence setting this attribute on the '
                         || 'payment itself.'
                         );
		     END IF;
                     x_paymentTab(i).delivery_channel_code := l_temp_delv_chnl;

                 ELSE

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Not setting delivery '
                         || 'channel for pmt id: '
                         || x_paymentTab(i).payment_id
                         );
			 END IF;
                 END IF; -- if delv chnl is not null

             END IF; -- if delv chnl common flag set to TRUE

         END IF; -- if delv chnl is null

     END LOOP; -- for all pmts

     /*
      * Fix for bug 5586678:
      *
      * Sweep for unique remittance identifier.
      */
     FOR i IN x_paymentTab.FIRST .. x_paymentTab.LAST LOOP

         /*
          * Initialize for each payment iteration.
          */
         l_uri_common_flag       := TRUE;
         l_temp_uri              := NULL;
         l_temp_uri_ckdigits     := NULL;
         l_first_record          := TRUE;

         /*
          * Only attempt to derive the unique remit identifier if
          * the payment does not already have a unique remit id
          * set.
          */
         IF (x_paymentTab(i).unique_remittance_identifier IS NULL) THEN

             FOR j IN x_docsInPmtTab.FIRST .. x_docsInPmtTab.LAST LOOP

                 IF (x_paymentTab(i).payment_id = x_docsInPmtTab(j).payment_id)
                 THEN

                     /*
                      * If this is the first document for the payment
                      * in consideration, initialize the temp URI
                      * with the URI on the current doc.
                      */
                     IF (l_first_record = TRUE) THEN

                         l_temp_uri          := x_docsInPmtTab(j).
                                                    unique_remit_id;

                         l_temp_uri_ckdigits := x_docsInPmtTab(j).
                                                    uri_ckdigits;

                     ELSE

                         /*
                          * If the URI on the current document does not
                          * match the URI on the previously stored
                          * document, then the URI is not common across
                          * all docs of this payment.
                          */

                         IF (l_temp_uri <>
                             x_docsInPmtTab(j).unique_remit_id) THEN

                             l_uri_common_flag := FALSE;

                             /*
                              * Exit iteration for this payment.
                              */
                             EXIT;

                         END IF; -- if URI does not match

                     END IF; -- if first record

                 END IF; -- if doc is for current payment

                 /*
                  * Reset the first record flag.
                  */
                 /*
                  * When checking for the first record, also
                  * check that that the URI variable
                  * is not null. Otherwise, we might be
                  * setting the first record flag based
                  * on some document unrelated to this payment.
                  */
                 IF (l_temp_uri IS NOT NULL) THEN
                     IF (l_first_record = TRUE) THEN
                         l_first_record := FALSE;
                     END IF;
                 END IF;

             END LOOP; -- for all docs

             IF (l_uri_common_flag = TRUE) THEN

                 /*
                  * This means that all the docs of this payment
                  * have the same unique remit id.
                  *
                  * Set this value on the payment (if not null)
                  */
                 IF (l_temp_uri IS NOT NULL) THEN

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'All documents of payment '
                         || x_paymentTab(i).payment_id
                         || ' have the same unique remit id '
                         || l_temp_uri
                         || '. Hence setting this attribute on the '
                         || 'payment itself.'
                         );
 END IF;
                     x_paymentTab(i).unique_remittance_identifier :=
                         l_temp_uri;
                     x_paymentTab(i).uri_check_digit :=
                         l_temp_uri_ckdigits;

                 ELSE

                     IF ( G_LEVEL_STATEMENT >= G_CURRENT_RUNTIME_LEVEL) THEN
                     print_debuginfo(l_module_name, 'Not setting unique '
                         || 'remit id for pmt id: '
                         || x_paymentTab(i).payment_id
                         );
		     END IF;
                 END IF; -- if unique remit id is not null

             END IF; -- if unique remit id common flag set to TRUE

         END IF; -- if unique remit id is null

     END LOOP; -- for all pmts

     print_debuginfo(l_module_name, 'EXIT');

 END sweepCommonPmtAttributes;



/*--------------------------------------------------------------------
 | NAME:
 |     GET_PAYER_INFO
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 |
 |
 *---------------------------------------------------------------------*/
 PROCEDURE GET_PAYER_INFO(
	l_trx_payer_index      IN BINARY_INTEGER
     )
 IS
 l_module_name      CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                  '.GET_PAYER_INFO';
 l_payer_info_index BINARY_INTEGER;

	  CURSOR c_payer_info(l_trx_index BINARY_INTEGER) IS

	  SELECT

	  payer_party.party_number,            -- payer party number
	  '',                                  -- payer party site name
	  payer.name,                          -- payer name
	  IBY_FD_EXTRACT_GEN_PVT.              -- payer tax reg number
	      Get_FP_TaxRegistration
		  (
		  payer.legal_entity_id
		  ),
	  payer.registration_number,           -- payer le reg number
	  payer.party_id,                      -- payer_party_id
	  payer.location_id,                   -- payer_location_id
	  payer_party.attribute_category,      -- payer party attr category
	  payer.attribute_category,            -- payer LE attr category     -- 10
	  '',                                  -- payer abbrev agency code
	  ''                                  -- payer federal us employer id

	  FROM
	  XLE_FIRSTPARTY_INFORMATION_V  payer,
	  HZ_PARTIES               payer_party

	  WHERE

	  /* payer */
	  IBY_PAYGROUP_PUB.pmtTable.legal_entity_id(l_trx_index)  = payer.legal_entity_id
	  AND payer.party_id                 = payer_party.party_id
	  ;


 BEGIN

       print_debuginfo(l_module_name, 'ENTER');

      -- print_debuginfo(l_module_name, 'l_trx_payer_index - '|| l_trx_payer_index);

      l_payer_info_index := IBY_PAYGROUP_PUB.pmtTable.legal_entity_id(l_trx_payer_index);

      print_debuginfo(l_module_name, 'l_payer_info_index - '|| l_payer_info_index);

      IF (l_payer_info_tbl.EXISTS(l_payer_info_index)) THEN

        print_debuginfo(l_module_name, 'Data exist in cache..');

        IBY_PAYGROUP_PUB.pmtTable.payer_party_number(l_trx_payer_index) := l_payer_info_tbl(l_payer_info_index).payer_party_number;
	IBY_PAYGROUP_PUB.pmtTable.payer_party_site_name(l_trx_payer_index):= l_payer_info_tbl(l_payer_info_index).payer_party_site_name;
	IBY_PAYGROUP_PUB.pmtTable.payer_legal_entity_name(l_trx_payer_index):= l_payer_info_tbl(l_payer_info_index).payer_legal_entity_name;
	IBY_PAYGROUP_PUB.pmtTable.payer_tax_registration_num(l_trx_payer_index):= l_payer_info_tbl(l_payer_info_index).payer_tax_registration_num;
	IBY_PAYGROUP_PUB.pmtTable.payer_le_registration_num(l_trx_payer_index):= l_payer_info_tbl(l_payer_info_index).payer_le_registration_num;
	IBY_PAYGROUP_PUB.pmtTable.payer_party_id(l_trx_payer_index):= l_payer_info_tbl(l_payer_info_index).payer_party_id;
	IBY_PAYGROUP_PUB.pmtTable.payer_location_id(l_trx_payer_index):= l_payer_info_tbl(l_payer_info_index).payer_location_id;
	IBY_PAYGROUP_PUB.pmtTable.payer_party_attr_category(l_trx_payer_index):= l_payer_info_tbl(l_payer_info_index).payer_party_attr_category;
	IBY_PAYGROUP_PUB.pmtTable.payer_le_attr_category(l_trx_payer_index):= l_payer_info_tbl(l_payer_info_index).payer_le_attr_category;
	IBY_PAYGROUP_PUB.pmtTable.payer_abbreviated_agency_code(l_trx_payer_index):= l_payer_info_tbl(l_payer_info_index).payer_abbreviated_agency_code;
	IBY_PAYGROUP_PUB.pmtTable.payer_federal_us_employer_id(l_trx_payer_index):= l_payer_info_tbl(l_payer_info_index).payer_federal_us_employer_id;

      ELSE
              print_debuginfo(l_module_name, 'Hitting DB again.');
	      OPEN  c_payer_info(l_trx_payer_index);
	      FETCH c_payer_info INTO
		IBY_PAYGROUP_PUB.pmtTable.payer_party_number(l_trx_payer_index),
		IBY_PAYGROUP_PUB.pmtTable.payer_party_site_name(l_trx_payer_index),
		IBY_PAYGROUP_PUB.pmtTable.payer_legal_entity_name(l_trx_payer_index),
		IBY_PAYGROUP_PUB.pmtTable.payer_tax_registration_num(l_trx_payer_index),
		IBY_PAYGROUP_PUB.pmtTable.payer_le_registration_num(l_trx_payer_index),
		IBY_PAYGROUP_PUB.pmtTable.payer_party_id(l_trx_payer_index),
		IBY_PAYGROUP_PUB.pmtTable.payer_location_id(l_trx_payer_index),
		IBY_PAYGROUP_PUB.pmtTable.payer_party_attr_category(l_trx_payer_index),
		IBY_PAYGROUP_PUB.pmtTable.payer_le_attr_category(l_trx_payer_index),
		IBY_PAYGROUP_PUB.pmtTable.payer_abbreviated_agency_code(l_trx_payer_index),
		IBY_PAYGROUP_PUB.pmtTable.payer_federal_us_employer_id(l_trx_payer_index)
		;
	      CLOSE c_payer_info;
	 l_payer_info_tbl(l_payer_info_index).payer_party_number := IBY_PAYGROUP_PUB.pmtTable.payer_party_number(l_trx_payer_index) ;
	 l_payer_info_tbl(l_payer_info_index).payer_party_site_name :=	IBY_PAYGROUP_PUB.pmtTable.payer_party_site_name(l_trx_payer_index);
	 l_payer_info_tbl(l_payer_info_index).payer_legal_entity_name :=	IBY_PAYGROUP_PUB.pmtTable.payer_legal_entity_name(l_trx_payer_index);
	 l_payer_info_tbl(l_payer_info_index).payer_tax_registration_num := IBY_PAYGROUP_PUB.pmtTable.payer_tax_registration_num(l_trx_payer_index) ;
	 l_payer_info_tbl(l_payer_info_index).payer_le_registration_num :=IBY_PAYGROUP_PUB.pmtTable.payer_le_registration_num(l_trx_payer_index);
	 l_payer_info_tbl(l_payer_info_index).payer_party_id :=IBY_PAYGROUP_PUB.pmtTable.payer_party_id(l_trx_payer_index);
	 l_payer_info_tbl(l_payer_info_index).payer_location_id :=	IBY_PAYGROUP_PUB.pmtTable.payer_location_id(l_trx_payer_index);
	 l_payer_info_tbl(l_payer_info_index).payer_party_attr_category :=	IBY_PAYGROUP_PUB.pmtTable.payer_party_attr_category(l_trx_payer_index);
	 l_payer_info_tbl(l_payer_info_index).payer_le_attr_category :=	IBY_PAYGROUP_PUB.pmtTable.payer_le_attr_category(l_trx_payer_index);
	 l_payer_info_tbl(l_payer_info_index).payer_abbreviated_agency_code :=	IBY_PAYGROUP_PUB.pmtTable.payer_abbreviated_agency_code(l_trx_payer_index);
	 l_payer_info_tbl(l_payer_info_index).payer_federal_us_employer_id :=	IBY_PAYGROUP_PUB.pmtTable.payer_federal_us_employer_id(l_trx_payer_index);


      END IF;
     print_debuginfo(l_module_name, 'EXIT');

 END GET_PAYER_INFO;

 /*--------------------------------------------------------------------
 | NAME:
 |     GET_PAYER_ACCT_INFO
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 |
 |
 *---------------------------------------------------------------------*/
 PROCEDURE GET_PAYER_ACCT_INFO(
	l_trx_acct_index      IN BINARY_INTEGER
     )
 IS
 l_module_name      CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                  '.GET_PAYER_ACCT_INFO';

l_payer_acct_index   BINARY_INTEGER;
	  CURSOR c_payer_acct_info(l_trx_index BINARY_INTEGER) IS

	 SELECT

	 /* PAYER BANK */
	  iba_bnk_branch.bank_name,            -- payer bank name
	  iba_bnk_branch.bank_number,          -- payer bank number
	  iba_bnk_branch.branch_number,        -- payer bank branch number
	  iba_bnk_branch.bank_branch_name,     -- payer bank branch name
	  iba_bnk_branch.eft_swift_code,       -- payer bank swift code
	  iba.bank_account_num,                -- payer bank account num
	  iba.bank_account_name,               -- payer bank account name
	  iba.iban_number,                     -- payer bank acct iban number -- 20
	  iba.agency_location_code,            -- payer bank agency location code
	  iba_bnk_branch.branch_party_id,      -- payer bank branch party id
	  iba_bnk_branch.bank_name_alt,        -- payer bank alt name
	  iba_bnk_branch.bank_branch_name_alt, -- payer bank branch alt name
	  iba.bank_account_name_alt,           -- payer bank alt account name
	  iba.bank_account_num_electronic,     -- payer bank account num electronic
	  iba_branch_party_site.location_id,   -- payer bank branch location id
	  iba_bnk_branch.eft_user_number,      -- payer bank branch eft user num
	    /* RFC */
	  rfc_ca.class_code


	  FROM

	   /* Payer bank */
	  CE_BANK_ACCOUNTS         iba,
	  CE_BANK_BRANCHES_V       iba_bnk_branch,
	  HZ_PARTY_SITES           iba_branch_party_site,
	    /* RFC */
	  HZ_CODE_ASSIGNMENTS          rfc_ca

	  WHERE
	  /* payer bank */
	  IBY_PAYGROUP_PUB.pmtTable.internal_bank_account_id(l_trx_index) = iba.bank_account_id
	  AND iba_bnk_branch.branch_party_id = iba.bank_branch_id

	  /* payer bank location */
	  AND iba_bnk_branch.branch_party_id = iba_branch_party_site.party_id(+)
	  /* RFC related */
	  AND rfc_ca.owner_table_name(+)     = 'HZ_PARTIES'
	  AND rfc_ca.class_category(+)       = 'RFC_IDENTIFIER'
	  AND rfc_ca.owner_table_id(+)       = iba.bank_branch_id
	  ;



 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     l_payer_acct_index :=IBY_PAYGROUP_PUB.pmtTable.internal_bank_account_id(l_trx_acct_index) ;

     print_debuginfo(l_module_name, 'l_payer_acct_index -'||l_payer_acct_index);

     IF (l_payer_acct_info_tbl.EXISTS(l_payer_acct_index)) THEN

	print_debuginfo(l_module_name , 'Data exists in cache');
     	IBY_PAYGROUP_PUB.pmtTable.int_bank_name(l_trx_acct_index)                  	:= l_payer_acct_info_tbl(l_payer_acct_index).int_bank_name;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_number(l_trx_acct_index)    := l_payer_acct_info_tbl(l_payer_acct_index).int_bank_number;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_number(l_trx_acct_index) := l_payer_acct_info_tbl(l_payer_acct_index).int_bank_branch_number;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_name(l_trx_acct_index) := l_payer_acct_info_tbl(l_payer_acct_index).int_bank_branch_name;

	IBY_PAYGROUP_PUB.pmtTable.int_eft_swift_code(l_trx_acct_index)  := l_payer_acct_info_tbl(l_payer_acct_index).int_eft_swift_code;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_number(l_trx_acct_index)        	:= l_payer_acct_info_tbl(l_payer_acct_index).int_bank_account_number;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_name(l_trx_acct_index)          	:= l_payer_acct_info_tbl(l_payer_acct_index).int_bank_account_name;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_iban(l_trx_acct_index)          	:= l_payer_acct_info_tbl(l_payer_acct_index).int_bank_account_iban;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_acct_agency_loc_code(l_trx_acct_index)  	:= l_payer_acct_info_tbl(l_payer_acct_index).int_bank_acct_agency_loc_code;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_party_id(l_trx_acct_index)       	:= l_payer_acct_info_tbl(l_payer_acct_index).int_bank_branch_party_id;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_alt_name(l_trx_acct_index)              	:= l_payer_acct_info_tbl(l_payer_acct_index).int_bank_alt_name;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_alt_name(l_trx_acct_index)       	:= l_payer_acct_info_tbl(l_payer_acct_index).int_bank_branch_alt_name;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_alt_name(l_trx_acct_index)      	:= l_payer_acct_info_tbl(l_payer_acct_index).int_bank_account_alt_name;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_num_elec(l_trx_acct_index)      	:= l_payer_acct_info_tbl(l_payer_acct_index).int_bank_account_num_elec;

	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_location_id(l_trx_acct_index)    	:= l_payer_acct_info_tbl(l_payer_acct_index).int_bank_branch_location_id;

	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_eft_user_num(l_trx_acct_index)   	:= l_payer_acct_info_tbl(l_payer_acct_index).int_bank_branch_eft_user_num;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_rfc_identifier(l_trx_acct_index)      := l_payer_acct_info_tbl(l_payer_acct_index).int_bank_branch_rfc_identifier;


     ELSE

      print_debuginfo(l_module_name , 'Data doesnt exist, hitting DB');
      OPEN  c_payer_acct_info(l_trx_acct_index);
      FETCH c_payer_acct_info INTO
	IBY_PAYGROUP_PUB.pmtTable.int_bank_name(l_trx_acct_index)                  	,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_number(l_trx_acct_index)    ,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_number(l_trx_acct_index) ,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_name(l_trx_acct_index) ,

	IBY_PAYGROUP_PUB.pmtTable.int_eft_swift_code(l_trx_acct_index)  ,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_number(l_trx_acct_index)        	,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_name(l_trx_acct_index)          	,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_iban(l_trx_acct_index)          	,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_acct_agency_loc_code(l_trx_acct_index)  	,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_party_id(l_trx_acct_index)       	,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_alt_name(l_trx_acct_index)              	,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_alt_name(l_trx_acct_index)       	,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_alt_name(l_trx_acct_index)      	,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_num_elec(l_trx_acct_index)      	,

	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_location_id(l_trx_acct_index)    	,

	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_eft_user_num(l_trx_acct_index)   	,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_rfc_identifier(l_trx_acct_index)
	;
      CLOSE c_payer_acct_info;
         l_payer_acct_info_tbl(l_payer_acct_index).int_bank_name   :=    	IBY_PAYGROUP_PUB.pmtTable.int_bank_name(l_trx_acct_index);
	 l_payer_acct_info_tbl(l_payer_acct_index).int_bank_number := IBY_PAYGROUP_PUB.pmtTable.int_bank_number(l_trx_acct_index);
         l_payer_acct_info_tbl(l_payer_acct_index).int_bank_branch_number :=	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_number(l_trx_acct_index);
	 l_payer_acct_info_tbl(l_payer_acct_index).int_bank_branch_name := IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_name(l_trx_acct_index);

         l_payer_acct_info_tbl(l_payer_acct_index).int_eft_swift_code :=	IBY_PAYGROUP_PUB.pmtTable.int_eft_swift_code(l_trx_acct_index);
    	 l_payer_acct_info_tbl(l_payer_acct_index).int_bank_account_number :=	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_number(l_trx_acct_index) ;
	 l_payer_acct_info_tbl(l_payer_acct_index).int_bank_account_name :=	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_name(l_trx_acct_index);
         l_payer_acct_info_tbl(l_payer_acct_index).int_bank_account_iban := IBY_PAYGROUP_PUB.pmtTable.int_bank_account_iban(l_trx_acct_index);
	 l_payer_acct_info_tbl(l_payer_acct_index).int_bank_acct_agency_loc_code :=	IBY_PAYGROUP_PUB.pmtTable.int_bank_acct_agency_loc_code(l_trx_acct_index);
	 l_payer_acct_info_tbl(l_payer_acct_index).int_bank_branch_party_id :=	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_party_id(l_trx_acct_index);
	 l_payer_acct_info_tbl(l_payer_acct_index).int_bank_alt_name :=	IBY_PAYGROUP_PUB.pmtTable.int_bank_alt_name(l_trx_acct_index);
       	 l_payer_acct_info_tbl(l_payer_acct_index).int_bank_branch_alt_name :=	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_alt_name(l_trx_acct_index);
     	 l_payer_acct_info_tbl(l_payer_acct_index).int_bank_account_alt_name :=	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_alt_name(l_trx_acct_index);
     	 l_payer_acct_info_tbl(l_payer_acct_index).int_bank_account_num_elec :=	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_num_elec(l_trx_acct_index);

   	 l_payer_acct_info_tbl(l_payer_acct_index).int_bank_branch_location_id :=	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_location_id(l_trx_acct_index);

   	 l_payer_acct_info_tbl(l_payer_acct_index).int_bank_branch_eft_user_num :=	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_eft_user_num(l_trx_acct_index);
         l_payer_acct_info_tbl(l_payer_acct_index).int_bank_branch_rfc_identifier :=	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_rfc_identifier(l_trx_acct_index);

     END IF;

     print_debuginfo(l_module_name, 'EXIT');

 END GET_PAYER_ACCT_INFO;


 /*--------------------------------------------------------------------
 | NAME:
 |     GET_VENDOR_INFO
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 |
 |
 *---------------------------------------------------------------------*/
 PROCEDURE GET_VENDOR_INFO(
	l_trx_vend_index      IN BINARY_INTEGER
     )
 IS
 l_module_name      CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                  '.GET_VENDOR_INFO';

 l_vendor_index   VARCHAR2(4000);

	  CURSOR c_vendor_info(l_trx_index BINARY_INTEGER)
	  IS
	  SELECT
	  /* VENDOR RELATED */
	  vendor_site.vendor_site_code_alt,    -- payee site alternate name
	  vendor.segment1,                     -- payee supplier number
	  vendor.customer_num,                 -- payee first party reference  -- 50
	  vendor.attribute_category,           -- payee supplier attr category
	  vendor.vendor_id,                    -- payee supplier id
	  IBY_FD_EXTRACT_GEN_PVT.              -- payee tax registration number
	      Get_Payee_TaxRegistration
	      (
	       IBY_PAYGROUP_PUB.pmtTable.payee_party_id(l_trx_index),IBY_PAYGROUP_PUB.pmtTable.party_site_id(l_trx_index)
	       ),

	 decode(upper(vendor.vendor_type_lookup_code),
		  'EMPLOYEE',Decode(IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_index), NULL, NULL, (SELECT
				national_identifier
				from PER_PEOPLE_X
				where IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_index)= person_id(+)))
				,
		  'CONTRACTOR',decode(vendor.organization_type_lookup_code,
				      'INDIVIDUAL',vendor.individual_1099,
				      'FOREIGN INDIVIDUAL',vendor.individual_1099,
				      'PARTNERSHIP',vendor.individual_1099,
				      'FOREIGN PARTNERSHIP',vendor.individual_1099,
				      vendor.num_1099),
		  vendor.num_1099),            -- payee Tax Identification Number
	  vendor_site.attribute_category           -- vendor site attr category


	  FROM
	  /* Vendor related */
	  AP_SUPPLIERS               vendor,
	  AP_SUPPLIER_SITES_ALL      vendor_site
	 -- PER_PEOPLE_X               per

	  WHERE

	  /* vendor related */
	  IBY_PAYGROUP_PUB.pmtTable.payee_party_id(l_trx_index)		  = vendor.party_id(+)
	  AND IBY_PAYGROUP_PUB.pmtTable.supplier_site_id(l_trx_index)     = vendor_site.vendor_site_id(+)
	  AND vendor.vendor_id						  = vendor_site.vendor_id
	  --          AND IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_index)   = per.person_id(+)
	  ;

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     print_debuginfo(l_module_name, 'IBY_PAYGROUP_PUB.pmtTable.payee_party_id(l_trx_vend_index)'|| IBY_PAYGROUP_PUB.pmtTable.payee_party_id(l_trx_vend_index));
     print_debuginfo(l_module_name, 'IBY_PAYGROUP_PUB.pmtTable.supplier_site_id(l_trx_vend_index)'||IBY_PAYGROUP_PUB.pmtTable.supplier_site_id(l_trx_vend_index));
     print_debuginfo(l_module_name, 'IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_vend_index)'|| IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_vend_index));

     l_vendor_index := Nvl(IBY_PAYGROUP_PUB.pmtTable.payee_party_id(l_trx_vend_index),-999)
                        ||'$'
                        || Nvl(IBY_PAYGROUP_PUB.pmtTable.supplier_site_id(l_trx_vend_index),-999)
		                  	|| '$'
			                  || Nvl(IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_vend_index),-999);
     print_debuginfo(l_module_name ,'l_vendor_index - '|| l_vendor_index);

      IF (l_vendor_info_tbl.EXISTS(l_vendor_index)) THEN
       print_debuginfo(l_module_name ,'Data already exists in cache');
       	IBY_PAYGROUP_PUB.pmtTable.payee_site_alternate_name(l_trx_vend_index)   := l_vendor_info_tbl(l_vendor_index).payee_site_alternate_name;
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_number(l_trx_vend_index)             := l_vendor_info_tbl(l_vendor_index).payee_supplier_number;
	IBY_PAYGROUP_PUB.pmtTable.payee_first_party_reference(l_trx_vend_index)	      := l_vendor_info_tbl(l_vendor_index).payee_first_party_reference;
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_attr_category(l_trx_vend_index)      := l_vendor_info_tbl(l_vendor_index).payee_supplier_attr_category;
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_id(l_trx_vend_index)                 := l_vendor_info_tbl(l_vendor_index).payee_supplier_id;
	IBY_PAYGROUP_PUB.pmtTable.payee_tax_registration_num(l_trx_vend_index)        := l_vendor_info_tbl(l_vendor_index).payee_tax_registration_num;
	IBY_PAYGROUP_PUB.pmtTable.payee_le_registration_num(l_trx_vend_index)         := l_vendor_info_tbl(l_vendor_index).payee_le_registration_num;
	IBY_PAYGROUP_PUB.pmtTable.payee_spplr_site_attr_category(l_trx_vend_index)         := l_vendor_info_tbl(l_vendor_index).payee_spplr_site_attr_category;

      ELSE
      print_debuginfo(l_module_name ,'Need to query DB again');

      OPEN  c_vendor_info(l_trx_vend_index);
      FETCH c_vendor_info INTO
	IBY_PAYGROUP_PUB.pmtTable.payee_site_alternate_name(l_trx_vend_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_number(l_trx_vend_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_first_party_reference(l_trx_vend_index)	,
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_attr_category(l_trx_vend_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_id(l_trx_vend_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_tax_registration_num(l_trx_vend_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_le_registration_num(l_trx_vend_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_spplr_site_attr_category(l_trx_vend_index)
	;

 /*
  IF (c_vendor_info%NOTFOUND = TRUE) THEN
 	IBY_PAYGROUP_PUB.pmtTable.payee_site_alternate_name(l_trx_vend_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_number(l_trx_vend_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_first_party_reference(l_trx_vend_index)	:= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_attr_category(l_trx_vend_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_id(l_trx_vend_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_tax_registration_num(l_trx_vend_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_le_registration_num(l_trx_vend_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_spplr_site_attr_category(l_trx_vend_index) := NULL;

  END IF; */
      CLOSE c_vendor_info;


 print_debuginfo(l_module_name, 'After fetching the value from the cursor');
  l_vendor_info_tbl(l_vendor_index).payee_site_alternate_name     :=IBY_PAYGROUP_PUB.pmtTable.payee_site_alternate_name(l_trx_vend_index) ;
 l_vendor_info_tbl(l_vendor_index).payee_supplier_number         :=IBY_PAYGROUP_PUB.pmtTable.payee_supplier_number(l_trx_vend_index);
 l_vendor_info_tbl(l_vendor_index).payee_first_party_reference   :=	IBY_PAYGROUP_PUB.pmtTable.payee_first_party_reference(l_trx_vend_index);
 l_vendor_info_tbl(l_vendor_index).payee_supplier_attr_category  :=	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_attr_category(l_trx_vend_index);
 l_vendor_info_tbl(l_vendor_index).payee_supplier_id             :=	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_id(l_trx_vend_index);
 l_vendor_info_tbl(l_vendor_index).payee_tax_registration_num    :=	IBY_PAYGROUP_PUB.pmtTable.payee_tax_registration_num(l_trx_vend_index);
 l_vendor_info_tbl(l_vendor_index).payee_le_registration_num     :=	IBY_PAYGROUP_PUB.pmtTable.payee_le_registration_num(l_trx_vend_index);
 l_vendor_info_tbl(l_vendor_index).payee_spplr_site_attr_category     :=	IBY_PAYGROUP_PUB.pmtTable.payee_spplr_site_attr_category(l_trx_vend_index);



 print_debuginfo(l_module_name ,'After caching the values.. ');
      END IF;
     print_debuginfo(l_module_name, 'EXIT');

 END GET_VENDOR_INFO;



PROCEDURE GET_PAYEE(
	l_trx_payee_index      IN BINARY_INTEGER
     )
 IS
 l_module_name      CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                  '.GET_PAYEE';

 l_payee_index BINARY_INTEGER;

	  CURSOR c_payee_info(l_trx_index BINARY_INTEGER) IS

	  SELECT
	  payee.party_number,                  -- payee party number

	  DECODE(IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_index),
   NULL,payee.party_name,
   Get_Employee_Full_Name(IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_index),payee.party_id,payee.party_name)),                    -- payee party name           -- 30

	  DECODE(IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_index),
   NULL,payee.party_name,
   Get_Employee_Full_Name(IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_index),payee.party_id,payee.party_name)),                    -- payee name

	  DECODE(                              -- payee alternate name
		payee.party_type,
		'ORGANIZATION',
		    payee.organization_name_phonetic,
		'PERSON',
		    payee.person_first_name_phonetic
			|| ' '
			|| payee.person_last_name_phonetic
		),

          DECODE (IBY_PAYGROUP_PUB.pmtTable.beneficiary_party(l_trx_index),
              NULL,
              payee.party_name,
              (SELECT
                   benef_party.party_name
               FROM
                   HZ_PARTIES benef_party
               WHERE
                   benef_party.party_id=IBY_PAYGROUP_PUB.pmtTable.beneficiary_party(l_trx_index)
              )
           ),                          -- beneficiary name

	  payee.attribute_category            -- payee party attr category

          FROM
	  HZ_PARTIES               payee

	  WHERE

	  IBY_PAYGROUP_PUB.pmtTable.payee_party_id(l_trx_index)             = payee.party_id
		   ;

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     l_payee_index := IBY_PAYGROUP_PUB.pmtTable.payee_party_id(l_trx_payee_index);



     IF (l_payee_info_tbl.EXISTS(l_payee_index)) THEN
	IBY_PAYGROUP_PUB.pmtTable.payee_party_number(l_trx_payee_index) := l_payee_info_tbl(l_payee_index).payee_party_number;
	IBY_PAYGROUP_PUB.pmtTable.payee_party_name(l_trx_payee_index):= l_payee_info_tbl(l_payee_index).payee_party_name;
	IBY_PAYGROUP_PUB.pmtTable.payee_name(l_trx_payee_index):= l_payee_info_tbl(l_payee_index).payee_name;
	IBY_PAYGROUP_PUB.pmtTable.payee_alt_name(l_trx_payee_index):= l_payee_info_tbl(l_payee_index).payee_alt_name;
	IBY_PAYGROUP_PUB.pmtTable.beneficiary_name(l_trx_payee_index):= l_payee_info_tbl(l_payee_index).beneficiary_name;
	IBY_PAYGROUP_PUB.pmtTable.payee_party_atr_cat(l_trx_payee_index):= l_payee_info_tbl(l_payee_index).payee_party_atr_cat;
     ELSE

      OPEN  c_payee_info(l_trx_payee_index);
      FETCH c_payee_info INTO
	IBY_PAYGROUP_PUB.pmtTable.payee_party_number(l_trx_payee_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_party_name(l_trx_payee_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_name(l_trx_payee_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_alt_name(l_trx_payee_index),
	IBY_PAYGROUP_PUB.pmtTable.beneficiary_name(l_trx_payee_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_party_atr_cat(l_trx_payee_index)
	;

      IF (c_payee_info%NOTFOUND  = TRUE) THEN

	      IBY_PAYGROUP_PUB.pmtTable.payee_party_number(l_trx_payee_index):= NULL;
	      IBY_PAYGROUP_PUB.pmtTable.payee_party_name(l_trx_payee_index):= NULL;
	      IBY_PAYGROUP_PUB.pmtTable.payee_name(l_trx_payee_index):= NULL;
	      IBY_PAYGROUP_PUB.pmtTable.payee_alt_name(l_trx_payee_index):= NULL;
	    	IBY_PAYGROUP_PUB.pmtTable.beneficiary_name(l_trx_payee_index) := NULL;
        	IBY_PAYGROUP_PUB.pmtTable.payee_party_atr_cat(l_trx_payee_index):= NULL;

      END IF;
      CLOSE c_payee_info;

	 l_payee_info_tbl(l_payee_index).payee_party_number :=	IBY_PAYGROUP_PUB.pmtTable.payee_party_number(l_trx_payee_index) ;
	 l_payee_info_tbl(l_payee_index).payee_party_name   :=  IBY_PAYGROUP_PUB.pmtTable.payee_party_name(l_trx_payee_index);
	 l_payee_info_tbl(l_payee_index).payee_name         :=  IBY_PAYGROUP_PUB.pmtTable.payee_name(l_trx_payee_index);
	 l_payee_info_tbl(l_payee_index).payee_alt_name     :=  IBY_PAYGROUP_PUB.pmtTable.payee_alt_name(l_trx_payee_index);

	 l_payee_info_tbl(l_payee_index).beneficiary_name  :=	IBY_PAYGROUP_PUB.pmtTable.beneficiary_name(l_trx_payee_index);
        l_payee_info_tbl(l_payee_index).payee_party_atr_cat := 	IBY_PAYGROUP_PUB.pmtTable.payee_party_atr_cat(l_trx_payee_index);


     END IF;


     print_debuginfo(l_module_name, 'EXIT');

 END GET_PAYEE;


   /*--------------------------------------------------------------------
 | NAME:
 |     GET_PAYEE_SITE_INFO
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 |
 |
 *---------------------------------------------------------------------*/
 PROCEDURE GET_PAYEE_SITE_INFO(
	l_trx_payee_index      IN BINARY_INTEGER
     )
 IS
 l_module_name      CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                  '.GET_PAYEE_SITE_INFO';

 l_payee_index BINARY_INTEGER;

	  CURSOR c_payee_site_info(l_trx_index BINARY_INTEGER) IS

	  SELECT
	   payee_site.attribute_category,       -- payee supplier site attr category
	   payee_site.party_site_name,          -- payee supplier site name
	   payee_site.addressee

	  FROM

	   HZ_PARTY_SITES           payee_site
 	  WHERE
	   /* payment related */

	   IBY_PAYGROUP_PUB.pmtTable.party_site_id(l_trx_index)    = payee_site.party_site_id(+)
	   ;

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');


  l_payee_index :=  IBY_PAYGROUP_PUB.pmtTable.party_site_id(l_trx_payee_index);


  IF (l_payee_site_tbl.EXISTS(l_payee_index)) THEN

     print_debuginfo(l_module_name, 'payee site table NOT empty');

   IBY_PAYGROUP_PUB.pmtTable.payee_spplr_site_attr_category(l_trx_payee_index) := NVL(IBY_PAYGROUP_PUB.pmtTable.payee_spplr_site_attr_category(l_trx_payee_index),l_payee_site_tbl(l_payee_index).payee_spplr_site_attr_category);
   IBY_PAYGROUP_PUB.pmtTable.payee_supplier_site_name(l_trx_payee_index) := l_payee_site_tbl(l_payee_index).payee_supplier_site_name;
   IBY_PAYGROUP_PUB.pmtTable.payee_addressee(l_trx_payee_index) := l_payee_site_tbl(l_payee_index).payee_addressee;

  ELSE

      print_debuginfo(l_module_name, 'payee site table empty');

      OPEN  c_payee_site_info(l_trx_payee_index);
      FETCH c_payee_site_info INTO
	IBY_PAYGROUP_PUB.pmtTable.payee_spplr_site_attr_category(l_trx_payee_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_site_name(l_trx_payee_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_addressee(l_trx_payee_index)
	;

      IF(c_payee_site_info%NOTFOUND = TRUE) THEN

              print_debuginfo(l_module_name, 'payee site info NOT FOUND');

	      IBY_PAYGROUP_PUB.pmtTable.payee_spplr_site_attr_category(l_trx_payee_index) := NULL;
	      IBY_PAYGROUP_PUB.pmtTable.payee_supplier_site_name(l_trx_payee_index) := NULL;
	      IBY_PAYGROUP_PUB.pmtTable.payee_addressee(l_trx_payee_index) := NULL;

      ELSE

              print_debuginfo(l_module_name, 'payee site info FOUND');
              print_debuginfo(l_module_name, 'assigning payee_spplr_site_attr_category');
              l_payee_site_tbl(l_payee_index).payee_spplr_site_attr_category := IBY_PAYGROUP_PUB.pmtTable.payee_spplr_site_attr_category(l_trx_payee_index);
              print_debuginfo(l_module_name, 'assigning payee_supplier_site_name');
              l_payee_site_tbl(l_payee_index).payee_supplier_site_name       := IBY_PAYGROUP_PUB.pmtTable.payee_supplier_site_name(l_trx_payee_index);
              print_debuginfo(l_module_name, 'assigning payee_addressee');
              l_payee_site_tbl(l_payee_index).payee_addressee       := IBY_PAYGROUP_PUB.pmtTable.payee_addressee(l_trx_payee_index);


      END IF;
      CLOSE c_payee_site_info;

 END IF;
     print_debuginfo(l_module_name, 'EXIT');

 END GET_PAYEE_SITE_INFO;





 /*--------------------------------------------------------------------
 | NAME:
 |     GET_PAYEE_ADDR_INFO
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 |
 |
 *---------------------------------------------------------------------*/
 PROCEDURE GET_PAYEE_ADDR_INFO(
	l_trx_paye_adr_index      IN BINARY_INTEGER
     )
 IS
 l_module_name      CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                  '.GET_PAYEE_ADDR_INFO';
l_payee_adr_index	VARCHAR2(200);

/*
   Bug :: 9000814
   Cursor to fetch address based on type of  address code
*/

 /* Emp PROV ADDRESSES*/
	  CURSOR c_emp_provs_addr(l_trx_index BINARY_INTEGER) IS

	       SELECT

	      /* payee add line1 */

		-- employee add line 1
		-- employee provisional addr line 1
		  per_addr_prov.address_line1 add_line1,
	      /* payee add line2 */
  	        -- employee add line 2
		per_addr_prov.address_line2 add_line2,
               /* payee add line3 */
		-- employee add line 3
		per_addr_prov.address_line3 add_line3,
              /* payee add line4 */
		-- employee home/office addr line 4 (not available)
		null add_line4,
	      /* payee city */
	      	-- employee city
                per_addr_prov.town_or_city city,
	      /* payee county */
	    	-- employee county
	         (DECODE(
		    per_addr_prov.style,
		    'US',     NVL(per_addr_prov.region_1,   ''),
		    'US_GLB', NVL(per_addr_prov.region_1,   ''),
		    'IE',     NVL(ap_web_db_expline_pkg.
				      getcountyprovince(
					  per_addr_prov.style,
					  per_addr_prov.region_1),
				''),
		    'IE_GLB', NVL(ap_web_db_expline_pkg.
				      getcountyprovince(
					  per_addr_prov.style,
					  per_addr_prov.region_1),
				''),
		    'GB',     NVL(ap_web_db_expline_pkg.
				      getcountyprovince(
					  per_addr_prov.style,
					  per_addr_prov.region_1),
				''),
		    '')) county,

	      /* payee province */
	    	(DECODE(per_addr_prov.style,
		    'US',      '',
		    'US_GLB',  '',
		    'IE',      '',
		    'IE_GLB',  '',
		    'GB',      '',
		    'CA',      NVL(per_addr_prov.region_1,   ''),
		    'CA_GLB',  NVL(per_addr_prov.region_1,   ''),
		    'JP',      NVL(per_addr_prov.region_1,   ''),
		    NVL(ap_web_db_expline_pkg.
			    getcountyprovince(
				per_addr_prov.style,
				per_addr_prov.region_1),
		      '')
		    ) )province,
	      /* payee state */
	        -- employee state
		 DECODE(per_addr_prov.style,
		     'CA',     '',
		     'CA_GLB', '',
		     NVL(per_addr_prov.region_2,   '')) state,
	     /* payee country */
		-- employee country
		per_addr_prov.country country,
	      /* payee postal code */
	     	-- employee postal code
		per_addr_prov.postal_code postal_code,
	      /* payee address concat */
		-- employee address concat
		(  per_addr_prov.address_line1
		    || ', '
		    || per_addr_prov.address_line2
		    || ', '
		    || per_addr_prov.address_line3
		    || ', '
		    || per_addr_prov.town_or_city
		    || ', '
		    || DECODE(
			 per_addr_prov.style,
			 'CA',     '',
			 'CA_GLB', '',
			 NVL(per_addr_prov.region_2, '')
			 )
		    || ', '
		    || per_addr_prov.country
		    || ', '
		    || per_addr_prov.postal_code)
	       add_concat
	  FROM
	      /* Employee address related */
	      PER_ADDRESSES            per_addr_prov
          WHERE
            IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_index)         = per_addr_prov.person_id
	    AND per_addr_prov.address_type = 'M'
	    AND SYSDATE BETWEEN
		    per_addr_prov.date_from
		    AND NVL(per_addr_prov.date_to, SYSDATE+1);
/* End of Provisional Addresses */


/* FOR OFFICE ADDRESS*/
	  CURSOR c_emp_offc_addr(l_trx_index BINARY_INTEGER) IS

	       SELECT
	      /* payee add line1 */
              -- employee add line 1
	      per_loc.address_line_1 add_line1,
	      /* payee add line2 */
 	      -- employee add line 2
	      per_loc.address_line_2 add_line2,
	      /* payee add line3 */
	      -- employee add line 3
	      per_loc.address_line_3 add_line3,
	      /* payee add line4 */
	      -- employee home/office addr line 4 (not available)
		null add_line4,
           /* payee city */
	      	-- employee city
		per_loc.town_or_city city,
           /* payee county */
	    	-- employee county
		 -- employee office county

		  DECODE(
		    per_loc.style,
		    'US',      NVL(per_loc.region_1,   ''),
		    'US_GLB',  NVL(per_loc.region_1,   ''),
		    'IE',      NVL(ap_web_db_expline_pkg.
				       getcountyprovince(
					   per_loc.style,
					   per_loc.region_1),
				 ''),
		    'IE_GLB',  NVL(ap_web_db_expline_pkg.
				       getcountyprovince(
					   per_loc.style,
					   per_loc.region_1),
				 ''),
		    'GB',      NVL(ap_web_db_expline_pkg.
				       getcountyprovince(
					   per_loc.style,
					   per_loc.region_1),
				 ''),
		    '') county,

	      	  DECODE(per_loc.style,
		    'US',      '',
		    'US_GLB',  '',
		    'IE',      '',
		    'IE_GLB',  '',
		    'GB',      '',
		    'CA',      NVL(per_loc.region_1,   ''),
		    'CA_GLB',  NVL(per_loc.region_1,   ''),
		    'JP',      NVL(per_loc.region_1,   ''),
		    NVL(ap_web_db_expline_pkg.
			    getcountyprovince(
				per_loc.style,
				per_loc.region_1),
		      '')
		      ) province,

	      /* payee state */
	        -- employee state
	     DECODE(per_loc.style,
		     'CA',     '',
		     'CA_GLB', '',
		     NVL(per_loc.region_2, '')) state,
	     /* payee country */
		-- employee country
		per_loc.country country,
	      /* payee postal code */
	     	-- employee postal code
		per_loc.postal_code postal_code,
            /* payee address concat */
		-- employee address concat
		 (per_loc.address_line_1
		    || ', '
		    || per_loc.address_line_2
		    || ', '
		    || per_loc.address_line_3
		    || ', '
		    || per_loc.town_or_city
		    || ', '
		    || DECODE(
			 per_loc.style,
			 'CA',     '',
			 'CA_GLB', '',
			 NVL(per_loc.region_2, '')
			 )
		    || ', '
		    || per_loc.country
		    || ', '
		    || per_loc.postal_code) add_concat

	  FROM
	      /* Employee address related */
	      HR_LOCATIONS             per_loc,
	      PER_ALL_ASSIGNMENTS_F    per_assgn
	  WHERE
	    IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_index)         = per_assgn.person_id
	    AND per_assgn.location_id          = per_loc.location_id
	    AND per_assgn.primary_flag         = 'Y'
	    AND per_assgn.assignment_type = 'E'
	    AND (TRUNC(SYSDATE) BETWEEN
		    per_assgn.effective_start_date
		    AND per_assgn.effective_end_date
		) ;
/* END OF OFFICE ADDRESS*/

/* FOR HOME ADDRESS*/
	  CURSOR c_emp_home_addr(l_trx_index BINARY_INTEGER) IS

	       SELECT
	      /* payee add line1 */
		-- employee add line 1
		 per_addr.address_line1 add_line1,
               /* payee add line2 */
        	-- employee add line 2
		 per_addr.address_line2 add_line2,
	      /* payee add line3 */
		-- employee add line 3
		 per_addr.address_line3 add_line3,
	      /* payee add line4 */
		-- employee home/office addr line 4 (not available)
		null   add_line4,
	      /* payee city */
	      	-- employee city
		per_addr.town_or_city city,
	      /* payee county */
	      DECODE(
		    per_addr.style,
		    'US',     NVL(per_addr.region_1,   ''),
		    'US_GLB', NVL(per_addr.region_1,   ''),
		    'IE',     NVL(ap_web_db_expline_pkg.
				      getcountyprovince(
					  per_addr.style,
					  per_addr.region_1),
				''),
		    'IE_GLB', NVL(ap_web_db_expline_pkg.
				      getcountyprovince(
					  per_addr.style,
					  per_addr.region_1),
				''),
		    'GB',     NVL(ap_web_db_expline_pkg.
				      getcountyprovince(
					  per_addr.style,
					  per_addr.region_1),
				''),
		    '')  county,

	      /* payee province */
	    	-- employee province
		 DECODE(per_addr.style,
		    'US',      '',
		    'US_GLB',  '',
		    'IE',      '',
		    'IE_GLB',  '',
		    'GB',      '',
		    'CA',      NVL(per_addr.region_1,   ''),
		    'CA_GLB',  NVL(per_addr.region_1,   ''),
		    'JP',      NVL(per_addr.region_1,   ''),
		    NVL(ap_web_db_expline_pkg.
			    getcountyprovince(
				per_addr.style,
				per_addr.region_1),
		      '')
		    ) province,

	      /* payee state */
	        -- employee state
		DECODE(per_addr.style,
		     'CA',     '',
		     'CA_GLB', '',
		     NVL(per_addr.region_2,   '')) state,
	     /* payee country */
		-- employee country
		per_addr.country country,
	      /* payee postal code */
	     	-- employee postal code
		per_addr.postal_code postal_code,
              /* payee address concat */
		  (per_addr.address_line1
		    || ', '
		    || per_addr.address_line2
		    || ', '
		    || per_addr.address_line3
		    || ', '
		    || per_addr.town_or_city
		    || ', '
		    || DECODE(
			 per_addr.style,
			 'CA',     '',
			 'CA_GLB', '',
			 NVL(per_addr.region_2, '')
			 )
		    || ', '
		    || per_addr.country
		    || ', '
		    || per_addr.postal_code) add_concat

	  FROM
	      /* Employee address related */
	      PER_ADDRESSES            per_addr
	  WHERE
	    IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_index)         = per_addr.person_id
	    AND per_addr.primary_flag = 'Y'
	    AND SYSDATE BETWEEN per_addr.date_from AND NVL(per_addr.date_to, SYSDATE+1);
	    /*END OF HOME ADDRESS*/

	  CURSOR c_emp_addr_info(l_trx_index BINARY_INTEGER) IS

	       SELECT

	      /* payee add line1 */

		-- employee add line 1
		DECODE
		(
		  IBY_PAYGROUP_PUB.pmtTable.employee_address_code(l_trx_index),

		  -- employee home addr line 1
		  'HOME', per_addr.address_line1,

		  -- employee office addr line 1
		  'OFFICE',per_loc.address_line_1,

		  -- employee provisional addr line 1
		  'PROVISIONAL', per_addr_prov.address_line1,

		  --address code not specified
		  DECODE (per_addr.address_id,
			 NULL, per_loc.address_line_1,
			 per_addr.address_line1)
		 )

		 add_line1,

	      /* payee add line2 */

		-- employee add line 2
		DECODE
		(
		  IBY_PAYGROUP_PUB.pmtTable.employee_address_code(l_trx_index),

		  -- employee home addr line 2
		  'HOME', per_addr.address_line2,

		  -- employee office addr line 2
		  'OFFICE',per_loc.address_line_2,

		  -- employee provisional addr line 2
		  'PROVISIONAL', per_addr_prov.address_line2,

		  --address code not specified
		  DECODE (per_addr.address_id,
			 NULL, per_loc.address_line_2,
			 per_addr.address_line2)
		 )
		 add_line2,


	      /* payee add line3 */
		-- employee add line 3
		DECODE
		(
		  IBY_PAYGROUP_PUB.pmtTable.employee_address_code(l_trx_index),

		  -- employee home addr line 3
		  'HOME', per_addr.address_line3,

		  -- employee office addr line 3
		  'OFFICE',per_loc.address_line_3,

		  -- employee provisional addr line 3
		  'PROVISIONAL', per_addr_prov.address_line3,

		  --address code not specified
		  DECODE (per_addr.address_id,
			 NULL, per_loc.address_line_3,
			 per_addr.address_line3)
		 )

		 add_line3,


	      /* payee add line4 */
		-- employee home/office addr line 4 (not available)
		null

		 add_line4,

	      /* payee city */
	      	-- employee city
		DECODE
		(
		  IBY_PAYGROUP_PUB.pmtTable.employee_address_code(l_trx_index),

		  -- employee home city
		  'HOME', per_addr.town_or_city,

		  -- employee office city
		  'OFFICE', per_loc.town_or_city,

		  -- employee provisional city
		  'PROVISIONAL', per_addr_prov.town_or_city,

		  -- address code not specified
		  DECODE (per_addr.address_id,
			 NULL, per_loc.town_or_city,
			 per_addr.town_or_city)
		  )

		 city,


	      /* payee county */
	    	-- employee county
		(
		DECODE(
		  IBY_PAYGROUP_PUB.pmtTable.employee_address_code(l_trx_index),

		  -- employee home county
		  'HOME',
		  DECODE(
		    per_addr.style,
		    'US',     NVL(per_addr.region_1,   ''),
		    'US_GLB', NVL(per_addr.region_1,   ''),
		    'IE',     NVL(ap_web_db_expline_pkg.
				      getcountyprovince(
					  per_addr.style,
					  per_addr.region_1),
				''),
		    'IE_GLB', NVL(ap_web_db_expline_pkg.
				      getcountyprovince(
					  per_addr.style,
					  per_addr.region_1),
				''),
		    'GB',     NVL(ap_web_db_expline_pkg.
				      getcountyprovince(
					  per_addr.style,
					  per_addr.region_1),
				''),
		    ''),

		  -- employee office county
		  'OFFICE',
		  DECODE(
		    per_loc.style,
		    'US',      NVL(per_loc.region_1,   ''),
		    'US_GLB',  NVL(per_loc.region_1,   ''),
		    'IE',      NVL(ap_web_db_expline_pkg.
				       getcountyprovince(
					   per_loc.style,
					   per_loc.region_1),
				 ''),
		    'IE_GLB',  NVL(ap_web_db_expline_pkg.
				       getcountyprovince(
					   per_loc.style,
					   per_loc.region_1),
				 ''),
		    'GB',      NVL(ap_web_db_expline_pkg.
				       getcountyprovince(
					   per_loc.style,
					   per_loc.region_1),
				 ''),
		    ''),


		  -- employee provisional county
		  'PROVISIONAL',
		  DECODE(
		    per_addr_prov.style,
		    'US',     NVL(per_addr_prov.region_1,   ''),
		    'US_GLB', NVL(per_addr_prov.region_1,   ''),
		    'IE',     NVL(ap_web_db_expline_pkg.
				      getcountyprovince(
					  per_addr_prov.style,
					  per_addr_prov.region_1),
				''),
		    'IE_GLB', NVL(ap_web_db_expline_pkg.
				      getcountyprovince(
					  per_addr_prov.style,
					  per_addr_prov.region_1),
				''),
		    'GB',     NVL(ap_web_db_expline_pkg.
				      getcountyprovince(
					  per_addr_prov.style,
					  per_addr_prov.region_1),
				''),
		    ''),


		    --address code not specified
		    decode(per_addr.address_id,
		    NULL,DECODE(
		    per_loc.style,
		    'US',      NVL(per_loc.region_1,   ''),
		    'US_GLB',  NVL(per_loc.region_1,   ''),
		    'IE',      NVL(ap_web_db_expline_pkg.
				       getcountyprovince(
					   per_loc.style,
					   per_loc.region_1),
				 ''),
		    'IE_GLB',  NVL(ap_web_db_expline_pkg.
				       getcountyprovince(
					   per_loc.style,
					   per_loc.region_1),
				 ''),
		    'GB',      NVL(ap_web_db_expline_pkg.
				       getcountyprovince(
					   per_loc.style,
					   per_loc.region_1),
				 ''),
		    ''),
		     DECODE(
		    per_addr.style,
		    'US',     NVL(per_addr.region_1,   ''),
		    'US_GLB', NVL(per_addr.region_1,   ''),
		    'IE',     NVL(ap_web_db_expline_pkg.
				      getcountyprovince(
					  per_addr.style,
					  per_addr.region_1),
				''),
		    'IE_GLB', NVL(ap_web_db_expline_pkg.
				      getcountyprovince(
					  per_addr.style,
					  per_addr.region_1),
				''),
		    'GB',     NVL(ap_web_db_expline_pkg.
				      getcountyprovince(
					  per_addr.style,
					  per_addr.region_1),
				''),
		    ''))
		    )
		  )
		 county,

	      /* payee province */
	    	-- employee province
		(
		DECODE(

		  IBY_PAYGROUP_PUB.pmtTable.employee_address_code(l_trx_index),

		  -- employee home province
		  'HOME',
		  DECODE(per_addr.style,
		    'US',      '',
		    'US_GLB',  '',
		    'IE',      '',
		    'IE_GLB',  '',
		    'GB',      '',
		    'CA',      NVL(per_addr.region_1,   ''),
		    'CA_GLB',  NVL(per_addr.region_1,   ''),
		    'JP',      NVL(per_addr.region_1,   ''),
		    NVL(ap_web_db_expline_pkg.
			    getcountyprovince(
				per_addr.style,
				per_addr.region_1),
		      '')
		    ),

		  -- employee office province
		  'OFFICE',
		  DECODE(per_loc.style,
		    'US',      '',
		    'US_GLB',  '',
		    'IE',      '',
		    'IE_GLB',  '',
		    'GB',      '',
		    'CA',      NVL(per_loc.region_1,   ''),
		    'CA_GLB',  NVL(per_loc.region_1,   ''),
		    'JP',      NVL(per_loc.region_1,   ''),
		    NVL(ap_web_db_expline_pkg.
			    getcountyprovince(
				per_loc.style,
				per_loc.region_1),
		      '')
		      ),

		  -- employee provisional province
		  'PROVISIONAL',
		  DECODE(per_addr_prov.style,
		    'US',      '',
		    'US_GLB',  '',
		    'IE',      '',
		    'IE_GLB',  '',
		    'GB',      '',
		    'CA',      NVL(per_addr_prov.region_1,   ''),
		    'CA_GLB',  NVL(per_addr_prov.region_1,   ''),
		    'JP',      NVL(per_addr_prov.region_1,   ''),
		    NVL(ap_web_db_expline_pkg.
			    getcountyprovince(
				per_addr_prov.style,
				per_addr_prov.region_1),
		      '')
		    ),

		    --address code not specified
		    decode(per_addr.address_id,
		    NULL,DECODE(per_loc.style,
		    'US',      '',
		    'US_GLB',  '',
		    'IE',      '',
		    'IE_GLB',  '',
		    'GB',      '',
		    'CA',      NVL(per_loc.region_1,   ''),
		    'CA_GLB',  NVL(per_loc.region_1,   ''),
		    'JP',      NVL(per_loc.region_1,   ''),
		    NVL(ap_web_db_expline_pkg.
			    getcountyprovince(
				per_loc.style,
				per_loc.region_1),
		      '')
		      ),
		     DECODE(per_addr.style,
		    'US',      '',
		    'US_GLB',  '',
		    'IE',      '',
		    'IE_GLB',  '',
		    'GB',      '',
		    'CA',      NVL(per_addr.region_1,   ''),
		    'CA_GLB',  NVL(per_addr.region_1,   ''),
		    'JP',      NVL(per_addr.region_1,   ''),
		    NVL(ap_web_db_expline_pkg.
			    getcountyprovince(
				per_addr.style,
				per_addr.region_1),
		      '')
		    ))
		    )
		  )
		 province,

	      /* payee state */
	        -- employee state
		 (
		 DECODE(
		   IBY_PAYGROUP_PUB.pmtTable.employee_address_code(l_trx_index),

		   -- employee home state
		   'HOME',
		   DECODE(per_addr.style,
		     'CA',     '',
		     'CA_GLB', '',
		     NVL(per_addr.region_2,   '')),

		   -- employee office state
		   'OFFICE',
		   DECODE(per_loc.style,
		     'CA',     '',
		     'CA_GLB', '',
		     NVL(per_loc.region_2, '')),

		   -- employee provisional state
		   'PROVISIONAL',
		   DECODE(per_addr_prov.style,
		     'CA',     '',
		     'CA_GLB', '',
		     NVL(per_addr_prov.region_2,   '')),


		   --address code not specified
		   decode(per_addr.address_id,
		   NULL,DECODE(per_loc.style,
		     'CA',     '',
		     'CA_GLB', '',
		      NVL(per_loc.region_2, '')),
		    DECODE(per_addr.style,
		     'CA',     '',
		     'CA_GLB', '',
		      NVL(per_addr.region_2,   '')))
		   )
		 )
	        state,

	     /* payee country */
		-- employee country
		(
		DECODE(
		  IBY_PAYGROUP_PUB.pmtTable.employee_address_code(l_trx_index),

		  -- employee home country
		  'HOME', per_addr.country,

		  -- employee office country
		  'OFFICE',per_loc.country,

		  -- employee provisional country
		  'PROVISIONAL', per_addr_prov.country,

		  --address code not specified
		  DECODE (per_addr.address_id,
		       NULL, per_loc.country,
		       per_addr.country
		       )
		  )
		)
		 country,

	      /* payee postal code */
	     	-- employee postal code
		(
		DECODE(
		  IBY_PAYGROUP_PUB.pmtTable.employee_address_code(l_trx_index),

		  -- employee home postal code
		  'HOME', per_addr.postal_code,

		  -- employee office postal code
		  'OFFICE',per_loc.postal_code,

		  -- employee provisional postal code
		  'PROVISIONAL', per_addr_prov.postal_code,

		  --address code not specified
		  DECODE (per_addr.address_id,
		       NULL, per_loc.postal_code,
		       per_addr.postal_code
		       )
		  )
		)
		 postal_code,


	      /* payee address concat */
		-- employee address concat
		(
		DECODE(
		  IBY_PAYGROUP_PUB.pmtTable.employee_address_code(l_trx_index),

		  -- employee home address concat
		  'HOME',
		  per_addr.address_line1
		    || ', '
		    || per_addr.address_line2
		    || ', '
		    || per_addr.address_line3
		    || ', '
		    || per_addr.town_or_city
		    || ', '
		    || DECODE(
			 per_addr.style,
			 'CA',     '',
			 'CA_GLB', '',
			 NVL(per_addr.region_2, '')
			 )
		    || ', '
		    || per_addr.country
		    || ', '
		    || per_addr.postal_code,

		  -- employee office address concat
		  'OFFICE',
		  per_loc.address_line_1
		    || ', '
		    || per_loc.address_line_2
		    || ', '
		    || per_loc.address_line_3
		    || ', '
		    || per_loc.town_or_city
		    || ', '
		    || DECODE(
			 per_loc.style,
			 'CA',     '',
			 'CA_GLB', '',
			 NVL(per_loc.region_2, '')
			 )
		    || ', '
		    || per_loc.country
		    || ', '
		    || per_loc.postal_code,


		  -- employee provisional address concat
		  'PROVISIONAL',
		  per_addr_prov.address_line1
		    || ', '
		    || per_addr_prov.address_line2
		    || ', '
		    || per_addr_prov.address_line3
		    || ', '
		    || per_addr_prov.town_or_city
		    || ', '
		    || DECODE(
			 per_addr_prov.style,
			 'CA',     '',
			 'CA_GLB', '',
			 NVL(per_addr_prov.region_2, '')
			 )
		    || ', '
		    || per_addr_prov.country
		    || ', '
		    || per_addr_prov.postal_code,


		  -- address code not specified
		  DECODE (per_addr.address_id,
		       NULL, per_loc.address_line_1
		    || ', '
		    || per_loc.address_line_2
		    || ', '
		    || per_loc.address_line_3
		    || ', '
		    || per_loc.town_or_city
		    || ', '
		    || DECODE(
			 per_loc.style,
			 'CA',     '',
			 'CA_GLB', '',
			 NVL(per_loc.region_2, '')
			 )
		    || ', '
		    || per_loc.country
		    || ', '
		    || per_loc.postal_code,

		      per_addr.address_line1
		    || ', '
		    || per_addr.address_line2
		    || ', '
		    || per_addr.address_line3
		    || ', '
		    || per_addr.town_or_city
		    || ', '
		    || DECODE(
			 per_addr.style,
			 'CA',     '',
			 'CA_GLB', '',
			 NVL(per_addr.region_2, '')
			 )
		    || ', '
		    || per_addr.country
		    || ', '
		    || per_addr.postal_code)
		  )
		)
	       add_concat

	  FROM
	      /* Employee address related */
	      HR_LOCATIONS             per_loc,
	      PER_ADDRESSES            per_addr,
	      PER_ALL_ASSIGNMENTS_F    per_assgn,
              PER_ADDRESSES            per_addr_prov

	      /* Supplier address related */
	     -- HZ_LOCATIONS             payee_loc
	  WHERE
	    IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_index)         = per_addr.person_id(+)
	    AND per_addr.primary_flag(+) = 'Y'
	    AND SYSDATE BETWEEN
		    per_addr.date_from(+)
		    AND NVL(per_addr.date_to(+), SYSDATE+1)
	    AND IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_index)         = per_assgn.person_id(+)
	    AND per_assgn.location_id          = per_loc.location_id(+)
	    AND per_assgn.primary_flag(+)      = 'Y'
	    AND per_assgn.assignment_type(+) = 'E'
	    AND (TRUNC(SYSDATE) BETWEEN
		    per_assgn.effective_start_date(+)
		    AND per_assgn.effective_end_date(+)
		)

	    AND IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_index)         = per_addr_prov.person_id(+)
	    AND per_addr_prov.address_type(+) = 'M'
	    AND SYSDATE BETWEEN
		    per_addr_prov.date_from(+)
		    AND NVL(per_addr_prov.date_to(+), SYSDATE+1)

	   -- AND IBY_PAYGROUP_PUB.pmtTable.remit_to_location_id(l_trx_index)       = payee_loc.location_id(+)
	  ;

        CURSOR c_supplier_addr(l_trx_index BINARY_INTEGER) IS

	   SELECT

	       ( payee_loc.address1

		) add_line1,

	      /* payee add line2 */
	       ( payee_loc.address2
		) add_line2,


	      /* payee add line3 */
		(payee_loc.address3
		) add_line3,


	      /* payee add line4 */
                (payee_loc.address4
		) add_line4,

	      /* payee city */
	       ( payee_loc.city

		) city,


	      /* payee county */
	       ( payee_loc.county
		) county,

	      /* payee province */
		(payee_loc.province
		) province,

	      /* payee state */
		( payee_loc.state

		 ) state,

	     /* payee country */
		(payee_loc.country

			) country,

	      /* payee postal code */
		( payee_loc.postal_code

			) postal_code,


	      /* payee address concat */
	     (
		payee_loc.address1
		  || ', '
		  || payee_loc.address2
		  || ', '
		  || payee_loc.address3
		  || ', '
		  || payee_loc.city
		  || ', '
		  || payee_loc.state
		  || ', '
		  || payee_loc.country
		  || ', '
		  || payee_loc.postal_code

		) add_concat

	  FROM
	      /* Employee address related */
	      /*
	      HR_LOCATIONS             per_loc,
	      PER_ADDRESSES            per_addr,
	      PER_ALL_ASSIGNMENTS_F    per_assgn,
	       */

	      /* Supplier address related */
	      HZ_LOCATIONS             payee_loc
	  WHERE
	    /*
	    IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_index)         = per_addr.person_id(+)
	    AND per_addr.primary_flag(+) = 'Y'
	    AND SYSDATE BETWEEN
		    per_addr.date_from(+)
		    AND NVL(per_addr.date_to(+), SYSDATE+1)
	    AND IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_index)         = per_assgn.person_id(+)
	    AND per_assgn.location_id          = per_loc.location_id(+)
	    AND per_assgn.primary_flag(+)      = 'Y'
	    AND per_assgn.assignment_type(+) = 'E'
	    AND (TRUNC(SYSDATE) BETWEEN
		    per_assgn.effective_start_date(+)
		    AND per_assgn.effective_end_date(+)
		) AND  */
	    IBY_PAYGROUP_PUB.pmtTable.remit_to_location_id(l_trx_index)       = payee_loc.location_id(+)
	  ;




 BEGIN

     print_debuginfo(l_module_name, 'ENTER');
     print_debuginfo(l_module_name, 'IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_index) -'||IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_paye_adr_index));
     print_debuginfo(l_module_name, 'IBY_PAYGROUP_PUB.pmtTable.remit_to_location_id(l_trx_index) -'||IBY_PAYGROUP_PUB.pmtTable.remit_to_location_id(l_trx_paye_adr_index));

     l_payee_adr_index := Nvl(IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_paye_adr_index), -999) || '$'|| Nvl(IBY_PAYGROUP_PUB.pmtTable.remit_to_location_id(l_trx_paye_adr_index), -999);

    IF (l_payee_addr_tbl.EXISTS(l_payee_adr_index)) THEN

	IBY_PAYGROUP_PUB.pmtTable.payee_address1(l_trx_paye_adr_index) := l_payee_addr_tbl(l_payee_adr_index).payee_address1;
	IBY_PAYGROUP_PUB.pmtTable.payee_address2(l_trx_paye_adr_index):= l_payee_addr_tbl(l_payee_adr_index).payee_address2;
	IBY_PAYGROUP_PUB.pmtTable.payee_address3(l_trx_paye_adr_index):= l_payee_addr_tbl(l_payee_adr_index).payee_address3;
	IBY_PAYGROUP_PUB.pmtTable.payee_address4(l_trx_paye_adr_index):= l_payee_addr_tbl(l_payee_adr_index).payee_address4;
	IBY_PAYGROUP_PUB.pmtTable.payee_city(l_trx_paye_adr_index):= l_payee_addr_tbl(l_payee_adr_index).payee_city;
	IBY_PAYGROUP_PUB.pmtTable.payee_county(l_trx_paye_adr_index):= l_payee_addr_tbl(l_payee_adr_index).payee_county;
	IBY_PAYGROUP_PUB.pmtTable.payee_province(l_trx_paye_adr_index):= l_payee_addr_tbl(l_payee_adr_index).payee_province;
	IBY_PAYGROUP_PUB.pmtTable.payee_state(l_trx_paye_adr_index):= l_payee_addr_tbl(l_payee_adr_index).payee_state;
	IBY_PAYGROUP_PUB.pmtTable.payee_country(l_trx_paye_adr_index):= l_payee_addr_tbl(l_payee_adr_index).payee_country;
	IBY_PAYGROUP_PUB.pmtTable.payee_postal_code(l_trx_paye_adr_index):= l_payee_addr_tbl(l_payee_adr_index).payee_postal_code;
	IBY_PAYGROUP_PUB.pmtTable.payee_address_concat(l_trx_paye_adr_index) := l_payee_addr_tbl(l_payee_adr_index).payee_address_concat;
    ELSE

      IF(IBY_PAYGROUP_PUB.pmtTable.address_source(l_trx_paye_adr_index) = 'TCA') THEN
      OPEN  c_supplier_addr(l_trx_paye_adr_index);

      FETCH c_supplier_addr INTO
	IBY_PAYGROUP_PUB.pmtTable.payee_address1(l_trx_paye_adr_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_address2(l_trx_paye_adr_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_address3(l_trx_paye_adr_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_address4(l_trx_paye_adr_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_city(l_trx_paye_adr_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_county(l_trx_paye_adr_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_province(l_trx_paye_adr_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_state(l_trx_paye_adr_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_country(l_trx_paye_adr_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_postal_code(l_trx_paye_adr_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_address_concat(l_trx_paye_adr_index)
	;
     CLOSE c_supplier_addr;

      ELSE
         IF (IBY_PAYGROUP_PUB.pmtTable.employee_address_code(l_trx_paye_adr_index) = 'HOME')
	 THEN
	   OPEN  c_emp_home_addr(l_trx_paye_adr_index);
           FETCH c_emp_home_addr INTO
	   IBY_PAYGROUP_PUB.pmtTable.payee_address1(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_address2(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_address3(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_address4(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_city(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_county(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_province(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_state(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_country(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_postal_code(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_address_concat(l_trx_paye_adr_index);
           CLOSE c_emp_home_addr;

	   ELSIF (IBY_PAYGROUP_PUB.pmtTable.employee_address_code(l_trx_paye_adr_index) = 'OFFICE')
           THEN
           OPEN  c_emp_offc_addr(l_trx_paye_adr_index);

           FETCH c_emp_offc_addr INTO
	   IBY_PAYGROUP_PUB.pmtTable.payee_address1(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_address2(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_address3(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_address4(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_city(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_county(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_province(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_state(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_country(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_postal_code(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_address_concat(l_trx_paye_adr_index);
           CLOSE c_emp_offc_addr;

          ELSIF (IBY_PAYGROUP_PUB.pmtTable.employee_address_code(l_trx_paye_adr_index) = 'PROVISIONAL')
           THEN
           OPEN  c_emp_provs_addr(l_trx_paye_adr_index);
           FETCH c_emp_provs_addr INTO
	   IBY_PAYGROUP_PUB.pmtTable.payee_address1(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_address2(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_address3(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_address4(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_city(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_county(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_province(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_state(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_country(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_postal_code(l_trx_paye_adr_index),
	   IBY_PAYGROUP_PUB.pmtTable.payee_address_concat(l_trx_paye_adr_index);
           CLOSE c_emp_provs_addr;
         END IF ;
       /*
      OPEN  c_emp_addr_info(l_trx_paye_adr_index);

      FETCH c_emp_addr_info INTO
	IBY_PAYGROUP_PUB.pmtTable.payee_address1(l_trx_paye_adr_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_address2(l_trx_paye_adr_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_address3(l_trx_paye_adr_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_address4(l_trx_paye_adr_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_city(l_trx_paye_adr_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_county(l_trx_paye_adr_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_province(l_trx_paye_adr_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_state(l_trx_paye_adr_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_country(l_trx_paye_adr_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_postal_code(l_trx_paye_adr_index),
	IBY_PAYGROUP_PUB.pmtTable.payee_address_concat(l_trx_paye_adr_index)
	;
      CLOSE c_emp_addr_info;*/


      END IF;

	/* IF (c_payee_addr_info%NOTFOUND = TRUE) THEN
 	IBY_PAYGROUP_PUB.pmtTable.payee_address1(l_trx_paye_adr_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_address2(l_trx_paye_adr_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_address3(l_trx_paye_adr_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_address4(l_trx_paye_adr_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_city(l_trx_paye_adr_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_county(l_trx_paye_adr_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_province(l_trx_paye_adr_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_state(l_trx_paye_adr_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_country(l_trx_paye_adr_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_postal_code(l_trx_paye_adr_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_address_concat(l_trx_paye_adr_index) := NULL;
	END IF; */


 l_payee_addr_tbl(l_payee_adr_index).payee_address1 :=	IBY_PAYGROUP_PUB.pmtTable.payee_address1(l_trx_paye_adr_index);
 l_payee_addr_tbl(l_payee_adr_index).payee_address2 :=	IBY_PAYGROUP_PUB.pmtTable.payee_address2(l_trx_paye_adr_index);
 l_payee_addr_tbl(l_payee_adr_index).payee_address3 :=	IBY_PAYGROUP_PUB.pmtTable.payee_address3(l_trx_paye_adr_index);
 l_payee_addr_tbl(l_payee_adr_index).payee_address4 :=	IBY_PAYGROUP_PUB.pmtTable.payee_address4(l_trx_paye_adr_index);
 l_payee_addr_tbl(l_payee_adr_index).payee_city     :=	IBY_PAYGROUP_PUB.pmtTable.payee_city(l_trx_paye_adr_index);
 l_payee_addr_tbl(l_payee_adr_index).payee_county :=	IBY_PAYGROUP_PUB.pmtTable.payee_county(l_trx_paye_adr_index);
 l_payee_addr_tbl(l_payee_adr_index).payee_province :=	IBY_PAYGROUP_PUB.pmtTable.payee_province(l_trx_paye_adr_index);
l_payee_addr_tbl(l_payee_adr_index).payee_state :=	IBY_PAYGROUP_PUB.pmtTable.payee_state(l_trx_paye_adr_index);
 l_payee_addr_tbl(l_payee_adr_index).payee_country :=	IBY_PAYGROUP_PUB.pmtTable.payee_country(l_trx_paye_adr_index);
 l_payee_addr_tbl(l_payee_adr_index).payee_postal_code :=	IBY_PAYGROUP_PUB.pmtTable.payee_postal_code(l_trx_paye_adr_index);
 l_payee_addr_tbl(l_payee_adr_index).payee_address_concat :=	IBY_PAYGROUP_PUB.pmtTable.payee_address_concat(l_trx_paye_adr_index);

 END IF;
     print_debuginfo(l_module_name, 'EXIT');

 END GET_PAYEE_ADDR_INFO;


 /*--------------------------------------------------------------------
 | NAME:
 |     GET_PAYEE_BANK_INFO
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 |
 |
 *---------------------------------------------------------------------*/
 PROCEDURE GET_PAYEE_BANK_INFO(
	l_trx_payee_bnk_index      IN BINARY_INTEGER
     )
 IS
 l_module_name      CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                  '.GET_PAYEE_BANK_INFO';

l_payee_bnk_index BINARY_INTEGER;
	  CURSOR c_payee_bank_info(l_trx_index BINARY_INTEGER) IS

	  SELECT
	  eba.bank_name,                       -- payee bank name
	  eba.bank_number,                     -- payee bank number
	  eba.branch_number,                   -- payee bank branch number
	  eba.bank_branch_name,                -- payee bank branch name

	  /*
	   * Fix for bug 5586882:
	   *
	   * Populate the external bank account using
	   * IBY_EXT_BANK_ACCOUNTS.bank_account_num
	   * so that we show the unmasked bank account number
	   */
	  ext_ba_table.bank_account_num,       -- payee bank account number

	  eba.bank_account_name,               -- payee bank account name    -- 60
	  eba.iban_number,                     -- payee bank account IBAN
	  eba.eft_swift_code,                  -- payee bank swift code
	  eba.bank_account_type,               -- payee bank account type
	  eba.payment_factor_flag,             -- payee bank payment factor flag
	  eba.primary_acct_owner_party_id,     -- payee bank owner party id
	  eba.branch_party_id,                 -- payee bank branch party id
	  eba_bank_branch.bank_name_alt,       -- payee bank name alt
	  eba_bank_branch.bank_branch_name_alt,-- payee bank branch name alt
	  eba.alternate_account_name,          -- payee bank alt account name
	  eba.bank_account_num_electronic,     -- payee bank electronic acct num -- 70
	  eba.bank_branch_address_id,          -- payee bank branch location id
	  eba.primary_acct_owner_name          -- payee bank primary acct owner name

	  FROM
	  /* Payee bank */
	  IBY_EXT_BANK_ACCOUNTS_V  eba,
	  IBY_EXT_BANK_ACCOUNTS    ext_ba_table,
	  CE_BANK_BRANCHES_V       eba_bank_branch

	  WHERE
	  /* payee bank */
	  IBY_PAYGROUP_PUB.pmtTable.external_bank_account_id(l_trx_index) = eba.ext_bank_account_id(+)
	  AND eba.bank_party_id						  = eba_bank_branch.bank_party_id(+)
	  AND eba.branch_party_id					  = eba_bank_branch.branch_party_id(+)
	  AND ext_ba_table.ext_bank_account_id(+)			  = eba.ext_bank_account_id
	  ;



 BEGIN

     print_debuginfo(l_module_name, 'ENTER');
     print_debuginfo(l_module_name, 'Inside get_payee_bank info -IBY_PAYGROUP_PUB.pmtTable.external_bank_account_id(l_trx_index) '|| IBY_PAYGROUP_PUB.pmtTable.external_bank_account_id(l_trx_payee_bnk_index) );
     l_payee_bnk_index := Nvl(IBY_PAYGROUP_PUB.pmtTable.external_bank_account_id(l_trx_payee_bnk_index),-999);
     print_debuginfo(l_module_name, 'l_payee_bnk_index -'||l_payee_bnk_index );


     IF (l_payee_acct_tbl.EXISTS(l_payee_bnk_index)) THEN

     print_debuginfo(l_module_name, 'The data already exists' );
     IBY_PAYGROUP_PUB.pmtTable.ext_bank_name(l_trx_payee_bnk_index) := l_payee_acct_tbl(l_payee_bnk_index).ext_bank_name;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_number(l_trx_payee_bnk_index):= l_payee_acct_tbl(l_payee_bnk_index).ext_bank_number;
	IBY_PAYGROUP_PUB.pmtTable.ext_branch_number(l_trx_payee_bnk_index):= l_payee_acct_tbl(l_payee_bnk_index).ext_branch_number;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_name(l_trx_payee_bnk_index):= l_payee_acct_tbl(l_payee_bnk_index).ext_bank_branch_name;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_number(l_trx_payee_bnk_index):= l_payee_acct_tbl(l_payee_bnk_index).ext_bank_account_number;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_name(l_trx_payee_bnk_index):= l_payee_acct_tbl(l_payee_bnk_index).ext_bank_account_name;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_iban_number(l_trx_payee_bnk_index)   	:= l_payee_acct_tbl(l_payee_bnk_index).ext_bank_account_iban_number;
	IBY_PAYGROUP_PUB.pmtTable.ext_eft_swift_code(l_trx_payee_bnk_index) := l_payee_acct_tbl(l_payee_bnk_index).ext_eft_swift_code;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_type(l_trx_payee_bnk_index):= l_payee_acct_tbl(l_payee_bnk_index).ext_bank_account_type;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_pmt_factor_flag(l_trx_payee_bnk_index):= l_payee_acct_tbl(l_payee_bnk_index).ext_bank_acct_pmt_factor_flag;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_owner_party_id(l_trx_payee_bnk_index):= l_payee_acct_tbl(l_payee_bnk_index).ext_bank_acct_owner_party_id;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_party_id(l_trx_payee_bnk_index):= l_payee_acct_tbl(l_payee_bnk_index).ext_bank_branch_party_id;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_alt_name(l_trx_payee_bnk_index) := l_payee_acct_tbl(l_payee_bnk_index).ext_bank_alt_name;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_alt_name(l_trx_payee_bnk_index) := l_payee_acct_tbl(l_payee_bnk_index).ext_bank_branch_alt_name;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_alt_name(l_trx_payee_bnk_index):= l_payee_acct_tbl(l_payee_bnk_index).ext_bank_account_alt_name;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_num_elec(l_trx_payee_bnk_index)  := l_payee_acct_tbl(l_payee_bnk_index).ext_bank_account_num_elec;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_location_id(l_trx_payee_bnk_index):= l_payee_acct_tbl(l_payee_bnk_index).ext_bank_branch_location_id;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_owner_party_name(l_trx_payee_bnk_index):= l_payee_acct_tbl(l_payee_bnk_index).ext_bank_acct_owner_party_name;

     ELSE
    print_debuginfo(l_module_name, 'The data doesnt exist, querying the DB' );
      OPEN  c_payee_bank_info(l_trx_payee_bnk_index);
      FETCH c_payee_bank_info INTO
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_name(l_trx_payee_bnk_index),
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_number(l_trx_payee_bnk_index),
		IBY_PAYGROUP_PUB.pmtTable.ext_branch_number(l_trx_payee_bnk_index),
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_name(l_trx_payee_bnk_index),
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_number(l_trx_payee_bnk_index)        	,
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_name(l_trx_payee_bnk_index)          	,
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_iban_number(l_trx_payee_bnk_index)   	,
		IBY_PAYGROUP_PUB.pmtTable.ext_eft_swift_code(l_trx_payee_bnk_index)             	,
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_type(l_trx_payee_bnk_index)          	,
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_pmt_factor_flag(l_trx_payee_bnk_index)  	,
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_owner_party_id(l_trx_payee_bnk_index)   	,
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_party_id(l_trx_payee_bnk_index)       	,
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_alt_name(l_trx_payee_bnk_index)              	,
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_alt_name(l_trx_payee_bnk_index)       	,
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_alt_name(l_trx_payee_bnk_index)      	,
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_num_elec(l_trx_payee_bnk_index)      	,
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_location_id(l_trx_payee_bnk_index)    	,
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_owner_party_name(l_trx_payee_bnk_index)
	;
      IF (c_payee_bank_info%NOTFOUND =TRUE) THEN

      print_debuginfo(l_module_name, 'DB hit did not fetch data, initializing to null');
      		IBY_PAYGROUP_PUB.pmtTable.ext_bank_name(l_trx_payee_bnk_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_number(l_trx_payee_bnk_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.ext_branch_number(l_trx_payee_bnk_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_name(l_trx_payee_bnk_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_number(l_trx_payee_bnk_index):= NULL;
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_name(l_trx_payee_bnk_index):= NULL;
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_iban_number(l_trx_payee_bnk_index):= NULL;
		IBY_PAYGROUP_PUB.pmtTable.ext_eft_swift_code(l_trx_payee_bnk_index):= NULL;
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_type(l_trx_payee_bnk_index):= NULL;
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_pmt_factor_flag(l_trx_payee_bnk_index):= NULL;
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_owner_party_id(l_trx_payee_bnk_index):= NULL;
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_party_id(l_trx_payee_bnk_index):= NULL;
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_alt_name(l_trx_payee_bnk_index):= NULL;
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_alt_name(l_trx_payee_bnk_index):= NULL;
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_alt_name(l_trx_payee_bnk_index):= NULL;
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_num_elec(l_trx_payee_bnk_index):= NULL;
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_location_id(l_trx_payee_bnk_index):= NULL;
		IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_owner_party_name(l_trx_payee_bnk_index):= NULL;

      END IF;
  print_debuginfo(l_module_name, 'Before putting the data to cache' );

 l_payee_acct_tbl(l_payee_bnk_index).ext_bank_name :=        IBY_PAYGROUP_PUB.pmtTable.ext_bank_name(l_trx_payee_bnk_index);
 l_payee_acct_tbl(l_payee_bnk_index).ext_bank_number :=	IBY_PAYGROUP_PUB.pmtTable.ext_bank_number(l_trx_payee_bnk_index);
 l_payee_acct_tbl(l_payee_bnk_index).ext_branch_number :=	IBY_PAYGROUP_PUB.pmtTable.ext_branch_number(l_trx_payee_bnk_index);
 l_payee_acct_tbl(l_payee_bnk_index).ext_bank_branch_name :=	IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_name(l_trx_payee_bnk_index);
 l_payee_acct_tbl(l_payee_bnk_index).ext_bank_account_number :=	IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_number(l_trx_payee_bnk_index);
 l_payee_acct_tbl(l_payee_bnk_index).ext_bank_account_name :=	IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_name(l_trx_payee_bnk_index);
 l_payee_acct_tbl(l_payee_bnk_index).ext_bank_account_iban_number :=	IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_iban_number(l_trx_payee_bnk_index);
 l_payee_acct_tbl(l_payee_bnk_index).ext_eft_swift_code :=	IBY_PAYGROUP_PUB.pmtTable.ext_eft_swift_code(l_trx_payee_bnk_index);
 l_payee_acct_tbl(l_payee_bnk_index).ext_bank_account_type :=	IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_type(l_trx_payee_bnk_index);
 l_payee_acct_tbl(l_payee_bnk_index).ext_bank_acct_pmt_factor_flag :=	IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_pmt_factor_flag(l_trx_payee_bnk_index);
 l_payee_acct_tbl(l_payee_bnk_index).ext_bank_acct_owner_party_id :=	IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_owner_party_id(l_trx_payee_bnk_index);
 l_payee_acct_tbl(l_payee_bnk_index).ext_bank_branch_party_id :=	IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_party_id(l_trx_payee_bnk_index);
 l_payee_acct_tbl(l_payee_bnk_index).ext_bank_alt_name :=	IBY_PAYGROUP_PUB.pmtTable.ext_bank_alt_name(l_trx_payee_bnk_index);
 l_payee_acct_tbl(l_payee_bnk_index).ext_bank_branch_alt_name :=	IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_alt_name(l_trx_payee_bnk_index);
 l_payee_acct_tbl(l_payee_bnk_index).ext_bank_account_alt_name :=	IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_alt_name(l_trx_payee_bnk_index);
 l_payee_acct_tbl(l_payee_bnk_index).ext_bank_account_num_elec :=	IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_num_elec(l_trx_payee_bnk_index);
 l_payee_acct_tbl(l_payee_bnk_index).ext_bank_branch_location_id :=	IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_location_id(l_trx_payee_bnk_index);
 l_payee_acct_tbl(l_payee_bnk_index).ext_bank_acct_owner_party_name :=	IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_owner_party_name(l_trx_payee_bnk_index);

      CLOSE c_payee_bank_info;

   END IF;
     print_debuginfo(l_module_name, 'Inside get_payee_bank info -IBY_PAYGROUP_PUB.pmtTable.external_bank_account_id(l_trx_index) '|| IBY_PAYGROUP_PUB.pmtTable.external_bank_account_id(l_trx_payee_bnk_index) );
--     print_debuginfo(l_module_name, 'Inside get_payee_bank info -IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_number(l_trx_payee_bnk_index)'||IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_number(l_trx_payee_bnk_index));
     print_debuginfo(l_module_name, 'EXIT');

 END GET_PAYEE_BANK_INFO;



  /*--------------------------------------------------------------------
 | NAME:
 |     GET_REMITTANCE_INFO
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 |
 |
 *---------------------------------------------------------------------*/
 PROCEDURE GET_REMITTANCE_INFO(
	l_trx_acct_index      IN BINARY_INTEGER
     )
 IS
 l_module_name      CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                  '.GET_REMITTANCE_INFO';
 l_remit_index BINARY_INTEGER;

	  CURSOR c_remit_info(l_trx_index BINARY_INTEGER) IS

	  SELECT

	    /* REMITTANCE ADVICE RELATED */
	   remit_advice.remit_advice_delivery_method,  -- remittance advice delv method
	   '',                                  -- remittance advice email
	   '',
	     /* DECLARATION REPORT RELATED */
	    prof.declaration_curr_fx_rate_type,
	    '',                                  -- declaration format

	  /* BANK INSTRUCTION */
	  bank_instr1.format_value,
	  bank_instr2.format_value,

	   /* PROFILE RELATED */
	  prof.payment_profile_name,           -- account profile name       -- 80
	  prof.system_profile_name            -- system profile name



	  FROM
	   /* Profile related */
	  IBY_PAYMENT_PROFILES     prof,
	   /* Remit advice related */
	  IBY_REMIT_ADVICE_SETUP   remit_advice,
	   /* Bank instruction related */
	  IBY_BANK_INSTRUCTIONS_VL bank_instr1,
	  IBY_BANK_INSTRUCTIONS_VL bank_instr2

	  WHERE
	    /* profile and remit advice */
	    IBY_PAYGROUP_PUB.pmtTable.payment_profile_id(l_trx_index) = prof.payment_profile_id
	    AND prof.system_profile_code       = remit_advice.system_profile_code
	    /* bank instruction */
	    AND prof.bank_instruction1_code    = bank_instr1.bank_instruction_code(+)
	    AND prof.bank_instruction2_code    = bank_instr2.bank_instruction_code(+);




 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     l_remit_index := IBY_PAYGROUP_PUB.pmtTable.payment_profile_id(l_trx_acct_index);

     IF (l_remit_tbl.EXISTS(l_remit_index)) THEN


	IBY_PAYGROUP_PUB.pmtTable.remit_advice_delivery_method(l_trx_acct_index)    := l_remit_tbl(l_remit_index).remit_advice_delivery_method;
	IBY_PAYGROUP_PUB.pmtTable.remit_advice_email(l_trx_acct_index)              :=	l_remit_tbl(l_remit_index).remit_advice_email;
	IBY_PAYGROUP_PUB.pmtTable.remit_advice_fax(l_trx_acct_index)                :=	l_remit_tbl(l_remit_index).remit_advice_fax;

	IBY_PAYGROUP_PUB.pmtTable.declaration_exch_rate_type(l_trx_acct_index)     :=	l_remit_tbl(l_remit_index).declaration_exch_rate_type;
	IBY_PAYGROUP_PUB.pmtTable.declaration_format(l_trx_acct_index)             :=	l_remit_tbl(l_remit_index).declaration_format;
	IBY_PAYGROUP_PUB.pmtTable.bank_instruction1_format_value(l_trx_acct_index) :=	l_remit_tbl(l_remit_index).bank_instruction1_format_value;
	IBY_PAYGROUP_PUB.pmtTable.bank_instruction2_format_value(l_trx_acct_index) :=	l_remit_tbl(l_remit_index).bank_instruction2_format_value;
	IBY_PAYGROUP_PUB.pmtTable.payment_profile_acct_name(l_trx_acct_index)      :=	l_remit_tbl(l_remit_index).payment_profile_acct_name;
	IBY_PAYGROUP_PUB.pmtTable.payment_profile_sys_name(l_trx_acct_index)	   :=l_remit_tbl(l_remit_index).payment_profile_sys_name;

     ELSE
      OPEN  c_remit_info(l_trx_acct_index);
      FETCH c_remit_info INTO
		IBY_PAYGROUP_PUB.pmtTable.remit_advice_delivery_method(l_trx_acct_index)   	,
		IBY_PAYGROUP_PUB.pmtTable.remit_advice_email(l_trx_acct_index)             	,
		IBY_PAYGROUP_PUB.pmtTable.remit_advice_fax(l_trx_acct_index)               	,
--		IBY_PAYGROUP_PUB.pmtTable.delivery_channel_format_value(l_trx_acct_index)  	,
		IBY_PAYGROUP_PUB.pmtTable.declaration_exch_rate_type(l_trx_acct_index)     	,
		IBY_PAYGROUP_PUB.pmtTable.declaration_format (l_trx_acct_index)            	,
		IBY_PAYGROUP_PUB.pmtTable.bank_instruction1_format_value(l_trx_acct_index) 	,
		IBY_PAYGROUP_PUB.pmtTable.bank_instruction2_format_value(l_trx_acct_index) 	,
		IBY_PAYGROUP_PUB.pmtTable.payment_profile_acct_name(l_trx_acct_index)      	,
		IBY_PAYGROUP_PUB.pmtTable.payment_profile_sys_name(l_trx_acct_index)

	;

      IF (c_remit_info%NOTFOUND = TRUE) THEN
        IBY_PAYGROUP_PUB.pmtTable.remit_advice_delivery_method(l_trx_acct_index)  :=NULL;
		IBY_PAYGROUP_PUB.pmtTable.remit_advice_email(l_trx_acct_index)             		:=NULL;
		IBY_PAYGROUP_PUB.pmtTable.remit_advice_fax(l_trx_acct_index)               		:=NULL;
--		IBY_PAYGROUP_PUB.pmtTable.delivery_channel_format_value(l_trx_acct_index)  	,
		IBY_PAYGROUP_PUB.pmtTable.declaration_exch_rate_type(l_trx_acct_index)     		:=NULL;
		IBY_PAYGROUP_PUB.pmtTable.declaration_format (l_trx_acct_index)            		:=NULL;
		IBY_PAYGROUP_PUB.pmtTable.bank_instruction1_format_value(l_trx_acct_index) 		:=NULL;
		IBY_PAYGROUP_PUB.pmtTable.bank_instruction2_format_value(l_trx_acct_index) 		:=NULL;
		IBY_PAYGROUP_PUB.pmtTable.payment_profile_acct_name(l_trx_acct_index)      		:=NULL;
		IBY_PAYGROUP_PUB.pmtTable.payment_profile_sys_name(l_trx_acct_index)          :=NULL;


      END IF;

      CLOSE c_remit_info;


        l_remit_tbl(l_remit_index).remit_advice_delivery_method :=      	IBY_PAYGROUP_PUB.pmtTable.remit_advice_delivery_method(l_trx_acct_index)  ;
	l_remit_tbl(l_remit_index).remit_advice_email := IBY_PAYGROUP_PUB.pmtTable.remit_advice_email(l_trx_acct_index);
        l_remit_tbl(l_remit_index).remit_advice_fax :=	IBY_PAYGROUP_PUB.pmtTable.remit_advice_fax(l_trx_acct_index);

	l_remit_tbl(l_remit_index).declaration_exch_rate_type :=	IBY_PAYGROUP_PUB.pmtTable.declaration_exch_rate_type(l_trx_acct_index);
	l_remit_tbl(l_remit_index).declaration_format :=	IBY_PAYGROUP_PUB.pmtTable.declaration_format(l_trx_acct_index);
	l_remit_tbl(l_remit_index).bank_instruction1_format_value :=	IBY_PAYGROUP_PUB.pmtTable.bank_instruction1_format_value(l_trx_acct_index);
	l_remit_tbl(l_remit_index).bank_instruction2_format_value :=	IBY_PAYGROUP_PUB.pmtTable.bank_instruction2_format_value(l_trx_acct_index);
	l_remit_tbl(l_remit_index).payment_profile_acct_name :=	IBY_PAYGROUP_PUB.pmtTable.payment_profile_acct_name(l_trx_acct_index);
        l_remit_tbl(l_remit_index).payment_profile_sys_name :=	IBY_PAYGROUP_PUB.pmtTable.payment_profile_sys_name(l_trx_acct_index);


    END IF;

     print_debuginfo(l_module_name, 'EXIT');

 END GET_REMITTANCE_INFO;


   /*--------------------------------------------------------------------
 | NAME:
 |     GET_PPR_INFO
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 |
 |
 *---------------------------------------------------------------------*/
 PROCEDURE GET_PPR_INFO(
	l_trx_ppr_index      IN BINARY_INTEGER
     )
 IS
 l_module_name      CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                  '.GET_PPR_INFO';
 l_ppr_index BINARY_INTEGER;

	  CURSOR c_ppr_info(l_trx_index BINARY_INTEGER) IS

	 SELECT
	  /* REQUEST */
	  payreq.call_app_pay_service_req_code,-- ppr name
	  fnd_app.application_name             -- source product            -- 88
	  FROM
	   /* Payment service request related */
	  IBY_PAY_SERVICE_REQUESTS payreq,
	  FND_APPLICATION_ALL_VIEW fnd_app

	  WHERE

	    /* payment service request related */
	  payreq.payment_service_request_id  = IBY_PAYGROUP_PUB.pmtTable.payment_service_request_id(l_trx_index)
	  AND fnd_app.application_id         = payreq.calling_app_id
	  ;



 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

	l_ppr_index :=IBY_PAYGROUP_PUB.pmtTable.payment_service_request_id(l_trx_ppr_index);

     IF (l_ppr_tbl.EXISTS(l_ppr_index)) THEN
     	IBY_PAYGROUP_PUB.pmtTable.payment_process_request_name(l_trx_ppr_index) := l_ppr_tbl(l_ppr_index).payment_process_request_name;
	IBY_PAYGROUP_PUB.pmtTable.source_product(l_trx_ppr_index)               := l_ppr_tbl(l_ppr_index).source_product;

     ELSE

      OPEN  c_ppr_info(l_trx_ppr_index);
      FETCH c_ppr_info INTO
		IBY_PAYGROUP_PUB.pmtTable.payment_process_request_name(l_trx_ppr_index),
		IBY_PAYGROUP_PUB.pmtTable.source_product(l_trx_ppr_index)

	;
      CLOSE c_ppr_info;

      l_ppr_tbl(l_ppr_index).payment_process_request_name :=     	IBY_PAYGROUP_PUB.pmtTable.payment_process_request_name(l_trx_ppr_index);
      l_ppr_tbl(l_ppr_index).source_product   :=	IBY_PAYGROUP_PUB.pmtTable.source_product(l_trx_ppr_index);


     END IF;
     print_debuginfo(l_module_name, 'EXIT');

 END GET_PPR_INFO;



  /*--------------------------------------------------------------------
 | NAME:
 |     GET_DELIVERY_INFO
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 |
 |
 *---------------------------------------------------------------------*/
 PROCEDURE GET_DELIVERY_INFO(
	l_trx_delv_index      IN BINARY_INTEGER
     )
 IS
 l_module_name      CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                  '.GET_DELIVERY_INFO';
 l_del_index	 VARCHAR2(300);

	  CURSOR c_deliv_info(l_trx_index BINARY_INTEGER) IS

	 SELECT
	  /* DELIVERY CHANNEL RELATED */
	  deliv.format_value

	  FROM

	  /* Delivery channel related */
	  IBY_DELIVERY_CHANNELS_VL deliv

	  WHERE
	  /* delivery channel related */
	  IBY_PAYGROUP_PUB.pmtTable.delivery_channel_code(l_trx_index) = deliv.delivery_channel_code(+)
	  ;



 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     l_del_index := Nvl(IBY_PAYGROUP_PUB.pmtTable.delivery_channel_code(l_trx_delv_index), -999);

     IF (l_del_tbl.EXISTS(l_del_index)) THEN

      IBY_PAYGROUP_PUB.pmtTable.delivery_channel_format_value(l_trx_delv_index) :=l_del_tbl(l_del_index).delivery_channel_format_value;

     ELSE

      OPEN  c_deliv_info(l_trx_delv_index);
      FETCH c_deliv_info INTO
		  IBY_PAYGROUP_PUB.pmtTable.delivery_channel_format_value(l_trx_delv_index)
	    ;
      IF (c_deliv_info%NOTFOUND = TRUE) THEN

       IBY_PAYGROUP_PUB.pmtTable.delivery_channel_format_value(l_trx_delv_index) :=NULL;

      END IF;
      CLOSE c_deliv_info;

      l_del_tbl(l_del_index).delivery_channel_format_value := IBY_PAYGROUP_PUB.pmtTable.delivery_channel_format_value(l_trx_delv_index);
    END IF;
     print_debuginfo(l_module_name, 'EXIT');

 END GET_DELIVERY_INFO;



  /*--------------------------------------------------------------------
 | NAME:
 |     GET_ORG_INFO
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 |
 |
 *---------------------------------------------------------------------*/
 PROCEDURE GET_ORG_INFO(
	l_trx_org_index      IN BINARY_INTEGER
     )
 IS
 l_module_name      CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                  '.GET_ORG_INFO';
 l_org_index    BINARY_INTEGER;
 l_pmt_id   IBY_PAYMENTS_ALL.payment_id%TYPE;
 l_inv_payee_party_id  IBY_PAYMENTS_ALL.inv_payee_party_id%TYPE;
 l_inv_party_site_id   IBY_PAYMENTS_ALL.inv_party_site_id%TYPE;
 l_inv_supplier_site_id   IBY_PAYMENTS_ALL.inv_supplier_site_id%TYPE;
 l_inv_beneficiary_party  IBY_PAYMENTS_ALL.inv_beneficiary_party%TYPE;

	  CURSOR c_org_info(l_trx_index BINARY_INTEGER) IS
	  SELECT
	  org.name
	  FROM
	  HR_ALL_ORGANIZATION_UNITS org
	  where
	  IBY_PAYGROUP_PUB.pmtTable.org_id(l_trx_index)            = org.organization_id;

	  CURSOR c_ce_org_info(l_trx_index BINARY_INTEGER) IS
	  SELECT
	  le.name
	  FROM
	  xle_entity_profiles le
	  where
	  IBY_PAYGROUP_PUB.pmtTable.org_id(l_trx_index)            = le.legal_entity_id;

 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

      l_org_index := IBY_PAYGROUP_PUB.pmtTable.org_id(l_trx_org_index);
      l_pmt_id := IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_org_index);
      l_inv_payee_party_id := IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_id(l_trx_org_index);
      l_inv_party_site_id := IBY_PAYGROUP_PUB.pmtTable.inv_party_site_id(l_trx_org_index);
      l_inv_supplier_site_id := IBY_PAYGROUP_PUB.pmtTable.inv_supplier_site_id(l_trx_org_index);
      l_inv_beneficiary_party := IBY_PAYGROUP_PUB.pmtTable.inv_beneficiary_party(l_trx_org_index);

      print_debuginfo(l_module_name, 'l_payment_id: ' || l_pmt_id);

      IF (l_org_tbl.EXISTS(l_trx_org_index)) THEN
	     IBY_PAYGROUP_PUB.pmtTable.org_name(l_trx_org_index) := l_org_tbl(l_trx_org_index).org_name;
      ELSE

   --   OPEN  c_org_info(l_trx_org_index);
     -- FETCH c_org_info INTO
    	-- IBY_PAYGROUP_PUB.pmtTable.org_name(l_trx_org_index)


               IF(IBY_PAYGROUP_PUB.pmtTable.payment_function(l_trx_org_index)='CASH_PAYMENT') THEN

                             OPEN  c_ce_org_info(l_trx_org_index);
                             FETCH c_ce_org_info INTO IBY_PAYGROUP_PUB.pmtTable.org_name(l_trx_org_index);
                             CLOSE c_ce_org_info;
                     ELSE
                             OPEN  c_org_info(l_trx_org_index);
                             FETCH c_org_info INTO IBY_PAYGROUP_PUB.pmtTable.org_name(l_trx_org_index);
                             CLOSE c_org_info;
               END IF;

    	l_org_tbl(l_trx_org_index).org_name := IBY_PAYGROUP_PUB.pmtTable.org_name(l_trx_org_index);

      END IF;


BEGIN
SELECT
      /*TPP-Start*/
invpayee.party_name 		inv_payee_name,

invpayee.party_name 		inv_payee_party_name,

decode(upper(invvendor.vendor_type_lookup_code),
          'CONTRACTOR',decode(invvendor.organization_type_lookup_code,
                              'INDIVIDUAL',invvendor.individual_1099,
                              'FOREIGN INDIVIDUAL',invvendor.individual_1099,
   		              'PARTNERSHIP',invvendor.individual_1099,
                              'FOREIGN PARTNERSHIP',invvendor.individual_1099,
                              invvendor.num_1099),
 	  invvendor.num_1099)	inv_payee_le_reg_num,

IBY_FD_EXTRACT_GEN_PVT.
 Get_Payee_TaxRegistration
       (invvendor.party_id,invvendor_site.vendor_site_id)
				inv_payee_tax_reg_num,
DECODE (l_inv_beneficiary_party,
              NULL,
              invpayee.party_name,
              (SELECT
                   benef_party.party_name
               FROM
                   HZ_PARTIES benef_party
               WHERE
                   benef_party.party_id=l_inv_beneficiary_party
              )
           ) 			inv_beneficiary_name,

invpayee.party_number 		inv_payee_party_number,
invpayee.organization_name_phonetic	inv_payee_alternate_name,
invvendor_site.vendor_site_code_alt	inv_payee_site_alt_name,
invvendor.segment1			inv_payee_supplier_number,
invvendor.customer_num			inv_payee_first_party_ref,

invpayee.attribute_category		inv_payee_party_attr_cat,
invvendor.attribute_category		inv_payee_supplier_attr_cat,
NVL(invvendor_site.attribute_category,invpayee_site.attribute_category) inv_payee_spplr_site_attr_cat,
invpayee_site.party_site_name		inv_payee_supplier_site_name,
invvendor_site.vendor_site_code_alt	inv_payee_spplr_site_alt_name,
invvendor.vendor_id			inv_payee_supplier_id
      /*TPP-End*/
 INTO
 	IBY_PAYGROUP_PUB.pmtTable.inv_payee_name(l_trx_org_index),
	IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_name(l_trx_org_index),
	IBY_PAYGROUP_PUB.pmtTable.inv_payee_le_reg_num(l_trx_org_index),
	IBY_PAYGROUP_PUB.pmtTable.inv_payee_tax_reg_num(l_trx_org_index),
	IBY_PAYGROUP_PUB.pmtTable.inv_beneficiary_name(l_trx_org_index),
	IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_number(l_trx_org_index),
	IBY_PAYGROUP_PUB.pmtTable.inv_payee_alternate_name(l_trx_org_index),
	IBY_PAYGROUP_PUB.pmtTable.inv_payee_site_alt_name(l_trx_org_index),
	IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_number(l_trx_org_index),
	IBY_PAYGROUP_PUB.pmtTable.inv_payee_first_party_ref(l_trx_org_index),
	IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_attr_cat(l_trx_org_index),
	IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_attr_cat(l_trx_org_index),
	IBY_PAYGROUP_PUB.pmtTable.inv_payee_spplr_site_attr_cat(l_trx_org_index),
	IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_site_name(l_trx_org_index),
	IBY_PAYGROUP_PUB.pmtTable.inv_payee_spplr_site_alt_name(l_trx_org_index),
	IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_id(l_trx_org_index)

 FROM

  /* Payee */
  HZ_PARTIES               invpayee,
  HZ_PARTY_SITES           invpayee_site,

  AP_SUPPLIERS               invvendor,
  AP_SUPPLIER_SITES_ALL      invvendor_site


 WHERE
   /* inv payee */
   l_inv_payee_party_id             = invpayee.party_id(+)
   /* inv payee site */
  AND l_inv_party_site_id              = invpayee_site.party_site_id(+)


  /* inv vendor related */
  AND l_inv_payee_party_id             = invvendor.party_id(+)
  AND l_inv_supplier_site_id           = invvendor_site.vendor_site_id(+)
  AND nvl(invvendor.vendor_id,-99)      = nvl(invvendor_site.vendor_id,-99);        /*Bug 7323072*/

  EXCEPTION
              WHEN NO_DATA_FOUND THEN
                print_debuginfo(l_module_name, 'No Data Found Exception Occured for the Query');
              WHEN OTHERS THEN
                print_debuginfo(l_module_name, 'Exception Occured for the Query');
  END;

     print_debuginfo(l_module_name, 'EXIT');

 END GET_ORG_INFO;




  /*--------------------------------------------------------------------
 | NAME:
 |     GET_PMTREASON_INFO
 |
 | PURPOSE:
 |
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 |
 |
 *---------------------------------------------------------------------*/
 PROCEDURE GET_PMTREASON_INFO(
	l_trx_pmtr_index      IN BINARY_INTEGER
     )
 IS
 l_module_name      CONSTANT VARCHAR2(200) := G_PKG_NAME ||
                                                  '.GET_ORG_INFO';

 l_pmtr_index       VARCHAR2(2000);


	  CURSOR c_pmtreason_info(l_trx_index BINARY_INTEGER) IS
	  SELECT
	  /* PAYMENT REASON */
	  pmt_reason.format_value
	  FROM
	   /* Payment reason related */
	  IBY_PAYMENT_REASONS_VL   pmt_reason

	  WHERE
	   /* payment reason */
	  IBY_PAYGROUP_PUB.pmtTable.payment_reason_code(l_trx_index) = pmt_reason.payment_reason_code(+)
	  ;


 BEGIN

     print_debuginfo(l_module_name, 'ENTER');

     l_pmtr_index :=  Nvl(IBY_PAYGROUP_PUB.pmtTable.payment_reason_code(l_trx_pmtr_index), -999);


     IF (l_pmt_reason_tbl.EXISTS(l_pmtr_index)) THEN
       IBY_PAYGROUP_PUB.pmtTable.payment_reason_format_value(l_trx_pmtr_index) := l_pmt_reason_tbl(l_pmtr_index).payment_reason_format_value;
     ELSE

      OPEN  c_pmtreason_info(l_trx_pmtr_index);
      FETCH c_pmtreason_info INTO
	IBY_PAYGROUP_PUB.pmtTable.payment_reason_format_value(l_trx_pmtr_index)
	;
      IF (c_pmtreason_info%NOTFOUND = TRUE) THEN
        IBY_PAYGROUP_PUB.pmtTable.payment_reason_format_value(l_trx_pmtr_index) :=NULL;
      END IF;
      CLOSE c_pmtreason_info;

       l_pmt_reason_tbl(l_pmtr_index).payment_reason_format_value := IBY_PAYGROUP_PUB.pmtTable.payment_reason_format_value(l_trx_pmtr_index);

     END IF;

     print_debuginfo(l_module_name, 'EXIT');

 END GET_PMTREASON_INFO;


 PROCEDURE populatepmtTable(ppr_id IN IBY_PAYMENTS_ALL.PAYMENT_SERVICE_REQUEST_ID%type)
 IS
 l_module_name CONSTANT VARCHAR2(200) := G_PKG_NAME || '.populatePmtTable';

       CURSOR c_pmts_rebuild(ppr_id IBY_PAYMENTS_ALL.PAYMENT_SERVICE_REQUEST_ID%TYPE) IS
	     SELECT
             payment_id,
             payment_method_code,
             payment_service_request_id,
             process_type,
             payment_status,
             payments_complete_flag,
             payment_function,
             payment_amount,
             payment_currency_code,
             bill_payable_flag,
             exclusive_payment_flag,
             separate_remit_advice_req_flag,
             internal_bank_account_id,
             org_id,
             org_type,
             legal_entity_id,
             declare_payment_flag,
             delivery_channel_code,
             ext_payee_id,
             payment_instruction_id,
             payment_profile_id,
             pregrouped_payment_flag,
             stop_confirmed_flag,
             stop_released_flag,
             stop_request_placed_flag,
             created_by,
             creation_date,
             last_updated_by,
             last_update_login,
             last_update_date,
             object_version_number,
             payee_party_id,
             party_site_id,
             supplier_site_id,
             payment_reason_code,
             payment_reason_comments,
             payment_date,
             anticipated_value_date,
             declaration_amount,
             declaration_currency_code,
             discount_amount_taken,
             payment_details,
             bank_charge_bearer,
             bank_charge_amount,
             settlement_priority,
             remittance_message1,
             remittance_message2,
             remittance_message3,
             payment_reference_number,
             paper_document_number,
             bank_assigned_ref_code,
             external_bank_account_id,
             unique_remittance_identifier,
             uri_check_digit,
             bank_instruction1_code,
             bank_instruction2_code,
             bank_instruction_details,
             payment_text_message1,
             payment_text_message2,
             payment_text_message3,
             maturity_date,
             payment_due_date,
             document_category_code,
             document_sequence_id,
             document_sequence_value,
             beneficiary_party,
             stop_confirmed_by,
             stop_confirm_date,
             stop_confirm_reason,
             stop_confirm_reference,
             stop_released_by,
             stop_release_date,
             stop_release_reason,
             stop_release_reference,
             stop_request_date,
             stop_request_placed_by,
             stop_request_reason,
             stop_request_reference,
             voided_by,
             void_date,
             void_reason,
             remit_to_location_id,
             completed_pmts_group_id,
             attribute_category,
             attribute1,
             attribute2,
             attribute3,
             attribute4,
             attribute5,
             attribute6,
             attribute7,
             attribute8,
             attribute9,
             attribute10,
             attribute11,
             attribute12,
             attribute13,
             attribute14,
             attribute15,
             ext_branch_number,
             ext_bank_number,
             ext_bank_account_name,
             ext_bank_account_number,
             ext_bank_account_type,
             ext_bank_account_iban_number,
             payee_name,
             payee_address1,
             payee_address2,
             payee_address3,
             payee_address4,
             payee_city,
             payee_postal_code,
             payee_state,
             payee_province,
             payee_county,
             payee_country,
             remit_advice_delivery_method,
             remit_advice_email,
             remit_advice_fax,
             address_source,
             employee_address_code,
             employee_person_id,
             employee_address_id,
             employee_payment_flag,
    		ext_inv_payee_id ,
		inv_payee_party_id ,
		inv_party_site_id ,
		inv_supplier_site_id ,
		inv_beneficiary_party ,
		inv_payee_name ,
		inv_payee_address1 ,
		inv_payee_address2 ,
		inv_payee_address3 ,
		inv_payee_address4 ,
		inv_payee_city ,
		inv_payee_postal_code ,
		inv_payee_state ,
		inv_payee_province ,
		inv_payee_county ,
		inv_payee_country ,
		inv_payee_party_name ,
		inv_payee_le_reg_num,
		inv_payee_tax_reg_num,
		inv_payee_address_concat ,
		inv_beneficiary_name ,
		inv_payee_party_number ,
		inv_payee_alternate_name ,
		inv_payee_site_alt_name,
		inv_payee_supplier_number ,
		inv_payee_first_party_ref,
		ext_bnk_acct_ownr_inv_prty_id,
		ext_bnk_branch_inv_prty_id,
		ext_bnk_acct_ownr_inv_prty_nme,
		inv_payee_party_attr_cat,
		inv_payee_supplier_attr_cat,
		inv_payee_spplr_site_attr_cat,
		inv_payee_supplier_site_name ,
		inv_payee_spplr_site_alt_name,
		inv_payee_supplier_id,
         -- start of auditPaymentData fields
             payer_party_number             	,
             payer_party_site_name          	,
             payer_legal_entity_name        	,
             payer_tax_registration_num     	,
             payer_le_registration_num      	,
             payer_party_id                 	,
             payer_location_id              	,
             payer_party_attr_category      	,
             payer_le_attr_category         	,
             payer_abbreviated_agency_code  	,
             payer_federal_us_employer_id   	,
             int_bank_name                  	,
             int_bank_number                	,
             int_bank_branch_number         	,
             int_bank_branch_name           	,
             int_eft_swift_code             	,
             int_bank_account_number        	,
             int_bank_account_name          	,
             int_bank_account_iban          	,
             int_bank_acct_agency_loc_code  	,
             int_bank_branch_party_id       	,
             int_bank_alt_name              	,
             int_bank_branch_alt_name       	,
             int_bank_account_alt_name      	,
             int_bank_account_num_elec      	,
             int_bank_branch_location_id    	,
             int_bank_branch_eft_user_num   	,
             payee_party_number             	,
             payee_party_name               	,
             payee_alternate_name           	,
             payee_address_concat           	,
             beneficiary_name               	,
             payee_party_attr_category      	,
             payee_spplr_site_attr_category 	,
             payee_supplier_site_name       	,
             payee_addressee                	,
             payee_site_alternate_name      	,
             payee_supplier_number          	,
             payee_first_party_reference    	,
             payee_supplier_attr_category   	,
             payee_supplier_id              	,
             payee_tax_registration_num ,
             payee_le_registration_num  ,
             ext_bank_name,
              ext_bank_branch_name           	,
              ext_eft_swift_code             	,
              ext_bank_acct_pmt_factor_flag  	,
              ext_bank_acct_owner_party_id   	,
              ext_bank_branch_party_id       	,
              ext_bank_alt_name              	,
              ext_bank_branch_alt_name       	,
              ext_bank_account_alt_name      	,
              ext_bank_account_num_elec      	,
             ext_bank_branch_location_id    	,
             ext_bank_acct_owner_party_name 	,
             --remit_advice_delivery_method   	,
             --remit_advice_email             	,
             --remit_advice_fax               	,
             delivery_channel_format_value  	,
             declaration_exch_rate_type     	,
             declaration_format             	,
             payment_profile_acct_name      	,
             payment_profile_sys_name       	,
             payment_reason_format_value    	,
             bank_instruction1_format_value 	,
             bank_instruction2_format_value 	,
             org_name                       	,
             int_bank_branch_rfc_identifier ,
             payment_process_request_name   ,
             source_product

	     FROM
	     IBY_PAYMENTS_ALL
	     where payment_service_request_id =ppr_id;

 BEGIN

      print_debuginfo(l_module_name, 'Enter');

 	    OPEN c_pmts_rebuild(ppr_id);
	    FETCH c_pmts_rebuild BULK COLLECT INTO
             IBY_PAYGROUP_PUB.pmtTable.payment_id,
             IBY_PAYGROUP_PUB.pmtTable.payment_method_code,
             IBY_PAYGROUP_PUB.pmtTable.payment_service_request_id,
             IBY_PAYGROUP_PUB.pmtTable.process_type,
             IBY_PAYGROUP_PUB.pmtTable.payment_status,
             IBY_PAYGROUP_PUB.pmtTable.payments_complete_flag,
             IBY_PAYGROUP_PUB.pmtTable.payment_function,
             IBY_PAYGROUP_PUB.pmtTable.payment_amount,
             IBY_PAYGROUP_PUB.pmtTable.payment_currency_code,
             IBY_PAYGROUP_PUB.pmtTable.bill_payable_flag,
             IBY_PAYGROUP_PUB.pmtTable.exclusive_payment_flag,
             IBY_PAYGROUP_PUB.pmtTable.sep_remit_advice_req_flag,
             IBY_PAYGROUP_PUB.pmtTable.internal_bank_account_id,
             IBY_PAYGROUP_PUB.pmtTable.org_id,
             IBY_PAYGROUP_PUB.pmtTable.org_type,
             IBY_PAYGROUP_PUB.pmtTable.legal_entity_id,
             IBY_PAYGROUP_PUB.pmtTable.declare_payment_flag,
             IBY_PAYGROUP_PUB.pmtTable.delivery_channel_code,
             IBY_PAYGROUP_PUB.pmtTable.ext_payee_id,
             IBY_PAYGROUP_PUB.pmtTable.payment_instruction_id,
             IBY_PAYGROUP_PUB.pmtTable.payment_profile_id,
             IBY_PAYGROUP_PUB.pmtTable.pregrouped_payment_flag,
             IBY_PAYGROUP_PUB.pmtTable.stop_confirmed_flag,
             IBY_PAYGROUP_PUB.pmtTable.stop_released_flag,
             IBY_PAYGROUP_PUB.pmtTable.stop_request_placed_flag,
             IBY_PAYGROUP_PUB.pmtTable.created_by,
             IBY_PAYGROUP_PUB.pmtTable.creation_date,
             IBY_PAYGROUP_PUB.pmtTable.last_updated_by,
             IBY_PAYGROUP_PUB.pmtTable.last_update_login,
             IBY_PAYGROUP_PUB.pmtTable.last_update_date,
             IBY_PAYGROUP_PUB.pmtTable.object_version_number,
             IBY_PAYGROUP_PUB.pmtTable.payee_party_id,
             IBY_PAYGROUP_PUB.pmtTable.party_site_id,
             IBY_PAYGROUP_PUB.pmtTable.supplier_site_id,
             IBY_PAYGROUP_PUB.pmtTable.payment_reason_code,
             IBY_PAYGROUP_PUB.pmtTable.payment_reason_comments,
             IBY_PAYGROUP_PUB.pmtTable.payment_date,
             IBY_PAYGROUP_PUB.pmtTable.anticipated_value_date,
             IBY_PAYGROUP_PUB.pmtTable.declaration_amount,
             IBY_PAYGROUP_PUB.pmtTable.declaration_currency_code,
             IBY_PAYGROUP_PUB.pmtTable.discount_amount_taken,
             IBY_PAYGROUP_PUB.pmtTable.payment_details,
             IBY_PAYGROUP_PUB.pmtTable.bank_charge_bearer,
             IBY_PAYGROUP_PUB.pmtTable.bank_charge_amount,
             IBY_PAYGROUP_PUB.pmtTable.settlement_priority,
             IBY_PAYGROUP_PUB.pmtTable.remittance_message1,
             IBY_PAYGROUP_PUB.pmtTable.remittance_message2,
             IBY_PAYGROUP_PUB.pmtTable.remittance_message3,
             IBY_PAYGROUP_PUB.pmtTable.payment_reference_number,
             IBY_PAYGROUP_PUB.pmtTable.paper_document_number,
             IBY_PAYGROUP_PUB.pmtTable.bank_assigned_ref_code,
             IBY_PAYGROUP_PUB.pmtTable.external_bank_account_id,
             IBY_PAYGROUP_PUB.pmtTable.unique_remittance_identifier,
             IBY_PAYGROUP_PUB.pmtTable.uri_check_digit,
             IBY_PAYGROUP_PUB.pmtTable.bank_instruction1_code,
             IBY_PAYGROUP_PUB.pmtTable.bank_instruction2_code,
             IBY_PAYGROUP_PUB.pmtTable.bank_instruction_details,
             IBY_PAYGROUP_PUB.pmtTable.payment_text_message1,
             IBY_PAYGROUP_PUB.pmtTable.payment_text_message2,
             IBY_PAYGROUP_PUB.pmtTable.payment_text_message3,
             IBY_PAYGROUP_PUB.pmtTable.maturity_date,
             IBY_PAYGROUP_PUB.pmtTable.payment_due_date,
             IBY_PAYGROUP_PUB.pmtTable.document_category_code,
             IBY_PAYGROUP_PUB.pmtTable.document_sequence_id,
             IBY_PAYGROUP_PUB.pmtTable.document_sequence_value,
             IBY_PAYGROUP_PUB.pmtTable.beneficiary_party,
             IBY_PAYGROUP_PUB.pmtTable.stop_confirmed_by,
             IBY_PAYGROUP_PUB.pmtTable.stop_confirm_date,
             IBY_PAYGROUP_PUB.pmtTable.stop_confirm_reason,
             IBY_PAYGROUP_PUB.pmtTable.stop_confirm_reference,
             IBY_PAYGROUP_PUB.pmtTable.stop_released_by,
             IBY_PAYGROUP_PUB.pmtTable.stop_release_date,
             IBY_PAYGROUP_PUB.pmtTable.stop_release_reason,
             IBY_PAYGROUP_PUB.pmtTable.stop_release_reference,
             IBY_PAYGROUP_PUB.pmtTable.stop_request_date,
             IBY_PAYGROUP_PUB.pmtTable.stop_request_placed_by,
             IBY_PAYGROUP_PUB.pmtTable.stop_request_reason,
             IBY_PAYGROUP_PUB.pmtTable.stop_request_reference,
             IBY_PAYGROUP_PUB.pmtTable.voided_by,
             IBY_PAYGROUP_PUB.pmtTable.void_date,
             IBY_PAYGROUP_PUB.pmtTable.void_reason,
             IBY_PAYGROUP_PUB.pmtTable.remit_to_location_id,
             IBY_PAYGROUP_PUB.pmtTable.completed_pmts_group_id,
             IBY_PAYGROUP_PUB.pmtTable.attribute_category,
             IBY_PAYGROUP_PUB.pmtTable.attribute1,
             IBY_PAYGROUP_PUB.pmtTable.attribute2,
             IBY_PAYGROUP_PUB.pmtTable.attribute3,
             IBY_PAYGROUP_PUB.pmtTable.attribute4,
             IBY_PAYGROUP_PUB.pmtTable.attribute5,
             IBY_PAYGROUP_PUB.pmtTable.attribute6,
             IBY_PAYGROUP_PUB.pmtTable.attribute7,
             IBY_PAYGROUP_PUB.pmtTable.attribute8,
             IBY_PAYGROUP_PUB.pmtTable.attribute9,
             IBY_PAYGROUP_PUB.pmtTable.attribute10,
             IBY_PAYGROUP_PUB.pmtTable.attribute11,
             IBY_PAYGROUP_PUB.pmtTable.attribute12,
             IBY_PAYGROUP_PUB.pmtTable.attribute13,
             IBY_PAYGROUP_PUB.pmtTable.attribute14,
             IBY_PAYGROUP_PUB.pmtTable.attribute15,
             IBY_PAYGROUP_PUB.pmtTable.ext_branch_number,
             IBY_PAYGROUP_PUB.pmtTable.ext_bank_number,
             IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_name,
             IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_number,
             IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_type,
             IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_iban_number,
             IBY_PAYGROUP_PUB.pmtTable.payee_name,
             IBY_PAYGROUP_PUB.pmtTable.payee_address1,
             IBY_PAYGROUP_PUB.pmtTable.payee_address2,
             IBY_PAYGROUP_PUB.pmtTable.payee_address3,
             IBY_PAYGROUP_PUB.pmtTable.payee_address4,
             IBY_PAYGROUP_PUB.pmtTable.payee_city,
             IBY_PAYGROUP_PUB.pmtTable.payee_postal_code,
             IBY_PAYGROUP_PUB.pmtTable.payee_state,
             IBY_PAYGROUP_PUB.pmtTable.payee_province,
             IBY_PAYGROUP_PUB.pmtTable.payee_county,
             IBY_PAYGROUP_PUB.pmtTable.payee_country,
             IBY_PAYGROUP_PUB.pmtTable.remit_advice_delivery_method,
             IBY_PAYGROUP_PUB.pmtTable.remit_advice_email,
             IBY_PAYGROUP_PUB.pmtTable.remit_advice_fax,
             IBY_PAYGROUP_PUB.pmtTable.address_source,
             IBY_PAYGROUP_PUB.pmtTable.employee_address_code,
             IBY_PAYGROUP_PUB.pmtTable.employee_person_id,
             IBY_PAYGROUP_PUB.pmtTable.employee_address_id,
             IBY_PAYGROUP_PUB.pmtTable.employee_payment_flag,
	     	IBY_PAYGROUP_PUB.pmtTable.ext_inv_payee_id,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_id,
		IBY_PAYGROUP_PUB.pmtTable.inv_party_site_id,
		IBY_PAYGROUP_PUB.pmtTable.inv_supplier_site_id,
		IBY_PAYGROUP_PUB.pmtTable.inv_beneficiary_party,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_name,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_address1,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_address2,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_address3,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_address4,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_city,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_postal_code,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_state,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_province,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_county,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_country,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_name,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_le_reg_num,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_tax_reg_num,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_address_concat,
		IBY_PAYGROUP_PUB.pmtTable.inv_beneficiary_name,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_number,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_alternate_name,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_site_alt_name,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_number,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_first_party_ref,
		IBY_PAYGROUP_PUB.pmtTable.ext_bnk_acct_ownr_inv_prty_id,
		IBY_PAYGROUP_PUB.pmtTable.ext_bnk_branch_inv_prty_id,
		IBY_PAYGROUP_PUB.pmtTable.ext_bnk_acct_ownr_inv_prty_nme,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_attr_cat,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_attr_cat,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_spplr_site_attr_cat,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_site_name,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_spplr_site_alt_name,
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_id,
		-- start of auditPaymentdata fields
		IBY_PAYGROUP_PUB.pmtTable.payer_party_number,
	IBY_PAYGROUP_PUB.pmtTable.payer_party_site_name,
	IBY_PAYGROUP_PUB.pmtTable.payer_legal_entity_name,
	IBY_PAYGROUP_PUB.pmtTable.payer_tax_registration_num,
	IBY_PAYGROUP_PUB.pmtTable.payer_le_registration_num,
	IBY_PAYGROUP_PUB.pmtTable.payer_party_id,
	IBY_PAYGROUP_PUB.pmtTable.payer_location_id,
	IBY_PAYGROUP_PUB.pmtTable.payer_party_attr_category,
	IBY_PAYGROUP_PUB.pmtTable.payer_le_attr_category,
	IBY_PAYGROUP_PUB.pmtTable.payer_abbreviated_agency_code,
	IBY_PAYGROUP_PUB.pmtTable.payer_federal_us_employer_id,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_name,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_number,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_number,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_name,
	IBY_PAYGROUP_PUB.pmtTable.int_eft_swift_code,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_number,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_name,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_iban,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_acct_agency_loc_code,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_party_id,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_alt_name,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_alt_name,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_alt_name,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_num_elec,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_location_id,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_eft_user_num,
	IBY_PAYGROUP_PUB.pmtTable.payee_party_number,
	IBY_PAYGROUP_PUB.pmtTable.payee_party_name,
	IBY_PAYGROUP_PUB.pmtTable.payee_alt_name, -- Bug 6175102
	IBY_PAYGROUP_PUB.pmtTable.payee_address_concat,
	IBY_PAYGROUP_PUB.pmtTable.beneficiary_name,
	IBY_PAYGROUP_PUB.pmtTable.payee_party_atr_cat,
	IBY_PAYGROUP_PUB.pmtTable.payee_spplr_site_attr_category,
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_site_name,
	IBY_PAYGROUP_PUB.pmtTable.payee_addressee,
	IBY_PAYGROUP_PUB.pmtTable.payee_site_alternate_name,
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_number,
	IBY_PAYGROUP_PUB.pmtTable.payee_first_party_reference,
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_attr_category,
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_id,
	IBY_PAYGROUP_PUB.pmtTable.payee_tax_registration_num,
	IBY_PAYGROUP_PUB.pmtTable.payee_le_registration_num,
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_name,
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_name,
	IBY_PAYGROUP_PUB.pmtTable.ext_eft_swift_code,
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_pmt_factor_flag,
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_owner_party_id,
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_party_id,
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_alt_name,
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_alt_name,
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_alt_name,
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_num_elec,
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_location_id,
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_owner_party_name,
	--IBY_PAYGROUP_PUB.pmtTable.remit_advice_delivery_method,
	--IBY_PAYGROUP_PUB.pmtTable.remit_advice_email,
	--IBY_PAYGROUP_PUB.pmtTable.remit_advice_fax,
	IBY_PAYGROUP_PUB.pmtTable.delivery_channel_format_value,
	IBY_PAYGROUP_PUB.pmtTable.declaration_exch_rate_type,
	IBY_PAYGROUP_PUB.pmtTable.declaration_format,
	IBY_PAYGROUP_PUB.pmtTable.payment_profile_acct_name,
	IBY_PAYGROUP_PUB.pmtTable.payment_profile_sys_name,
	IBY_PAYGROUP_PUB.pmtTable.payment_reason_format_value,
	IBY_PAYGROUP_PUB.pmtTable.bank_instruction1_format_value,
	IBY_PAYGROUP_PUB.pmtTable.bank_instruction2_format_value,
	IBY_PAYGROUP_PUB.pmtTable.org_name,
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_rfc_identifier,
	IBY_PAYGROUP_PUB.pmtTable.payment_process_request_name,
	IBY_PAYGROUP_PUB.pmtTable.source_product
        ;

       CLOSE c_pmts_rebuild;


 END populatepmtTable;

 /*--------------------------------------------------------------------
 | NAME:
 |     negativePmtAmountCheck
 |
 | PURPOSE: Validation to check that payment amount is not a negative
 |value
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES: Added for the bug 7344352
 |
 *---------------------------------------------------------------------*/
 PROCEDURE negativePmtAmountCheck(
     p_trx_pmt_line_index IN BINARY_INTEGER,
     x_docErrorTab   IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.docErrorTabType,
     x_errTokenTab   IN OUT NOCOPY IBY_VALIDATIONSETS_PUB.trxnErrTokenTabType
     )
 IS
  l_module_name   VARCHAR2(200)  := G_PKG_NAME || '.negativePmtAmountCheck';
  l_doc_err_rec   IBY_TRANSACTION_ERRORS%ROWTYPE;
  l_error_code    VARCHAR2(100);
  l_error_msg     VARCHAR2(500);
  l_token_rec     IBY_TRXN_ERROR_TOKENS%ROWTYPE;
 BEGIN
            print_debuginfo(l_module_name, 'ENTER');

              IF (IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index) < 0
              AND IBY_PAYGROUP_PUB.pmtTable.payment_status(p_trx_pmt_line_index) = PAY_STATUS_CREATED) THEN

                  IBY_PAYGROUP_PUB.pmtTable.payment_status(p_trx_pmt_line_index) := PAY_STATUS_REJECTED;

                                print_debuginfo(l_module_name, 'Failed payment '
				     || IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index)
				     || ' because payment amount '
				     || IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index)
                                     ||' is less than zero'
				     );

				 l_error_code := 'IBY_PMT_NEGATIVE_AMT';
				 FND_MESSAGE.set_name('IBY', l_error_code);

				 FND_MESSAGE.SET_TOKEN('PMT_AMOUNT',
				     IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index),
				     FALSE);

				 l_token_rec.token_name  := 'PMT_AMOUNT';
				 l_token_rec.token_value := IBY_PAYGROUP_PUB.pmtTable.payment_amount(p_trx_pmt_line_index);
				 x_errTokenTab(x_errTokenTab.COUNT + 1) := l_token_rec;

				 /*
				  * Once we fail a payment, we need to create
				  * an error record and insert this record
				  * into the errors table.
				  */
				 IBY_BUILD_UTILS_PKG.createPmtErrorRecord(
                                 IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index),
                                 IBY_PAYGROUP_PUB.pmtTable.payment_status(p_trx_pmt_line_index),
                                 l_error_code,
                                 FND_MESSAGE.get,
                                 l_doc_err_rec
                                 );

				 IBY_VALIDATIONSETS_PUB.insertIntoErrorTable(
                                 l_doc_err_rec, x_docErrorTab, x_errTokenTab);

                                 failDocsOfPayment(IBY_PAYGROUP_PUB.pmtTable.payment_id(p_trx_pmt_line_index),
                                 DOC_STATUS_PAY_VAL_FAIL,
                                 x_docErrorTab, x_errTokenTab);
            END IF;
            print_debuginfo(l_module_name, 'EXIT');
 END negativePmtAmountCheck;


/*--------------------------------------------------------------------
 | NAME:
 |     print_debuginfo
 |
 | PURPOSE:
 |     This procedure prints the debug message to the concurrent manager
 |     log file.
 |
 | PARAMETERS:
 |     IN
 |      p_debug_text - The debug message to be printed
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/
 PROCEDURE print_debuginfo(
     p_module      IN VARCHAR2,
     p_debug_text  IN VARCHAR2,
     p_debug_level IN VARCHAR2  DEFAULT FND_LOG.LEVEL_STATEMENT
     )
 IS
 l_default_debug_level VARCHAR2(200) := FND_LOG.LEVEL_STATEMENT;
 BEGIN

     /*
      * Set the debug level to the value passed in
      * (provided this value is not null).
      */
     IF (p_debug_level IS NOT NULL) THEN
         l_default_debug_level := p_debug_level;
     END IF;

     /*
      * Write the debug message to the concurrent manager log file.
      */
     IF (l_default_debug_level >= FND_LOG.G_CURRENT_RUNTIME_LEVEL) THEN
         iby_build_utils_pkg.print_debuginfo(p_module, p_debug_text,
             p_debug_level);
     END IF;

 END print_debuginfo;

 /*--------------------------------------------------------------------
 | NAME:
 |     initialize_pmt_table
 |
 | PURPOSE:
 |
 |
 | PARAMETERS:
 |     IN
 |
 |
 |     OUT
 |
 |
 | RETURNS:
 |
 | NOTES:
 |
 *---------------------------------------------------------------------*/

 PROCEDURE initialize_pmt_table(l_trx_pmt_index IN BINARY_INTEGER)
 IS

 l_module_name    VARCHAR2(200) := G_PKG_NAME ||
                                       '.initialize_pmt_table';

 BEGIN

        print_debuginfo(l_module_name, 'ENTER');

         /*IBY_PAYGROUP_PUB.pmtTable.payment_profile_id(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.payment_service_request_id(l_trx_pmt_index) := NULL;
	 IBY_PAYGROUP_PUB.pmtTable.internal_bank_account_id(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.ext_payee_id(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.payee_party_id(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.party_site_id(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.supplier_site_id(l_trx_pmt_index) := NULL;
	 IBY_PAYGROUP_PUB.pmtTable.ext_inv_payee_id(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_id(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.inv_party_site_id(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.inv_supplier_site_id(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.inv_beneficiary_party(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.remit_to_location_id(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.payment_currency_code(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.org_id(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.org_type(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.payment_method_code(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.payment_function(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.payment_date(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.beneficiary_party(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.address_source(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.employee_address_code(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.employee_address_id(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.employee_payment_flag(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.legal_entity_id(l_trx_pmt_index) := NULL;
	 IBY_PAYGROUP_PUB.pmtTable.payee_addressee(l_trx_pmt_index) :=NULL;
         IBY_PAYGROUP_PUB.pmtTable.external_bank_account_id(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.bill_payable_flag(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.pregrouped_payment_flag(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.bank_instruction1_code(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.bank_instruction2_code(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.payment_text_message1(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.payment_text_message2(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.payment_text_message3(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.bank_charge_bearer(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.delivery_channel_code(l_trx_pmt_index) := NULL;
	 IBY_PAYGROUP_PUB.pmtTable.settlement_priority(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.remittance_message1(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.remittance_message2(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.remittance_message3(l_trx_pmt_index) := NULL;
	 IBY_PAYGROUP_PUB.pmtTable.payment_due_date(l_trx_pmt_index) := NULL;
	 IBY_PAYGROUP_PUB.pmtTable.payment_reason_code(l_trx_pmt_index) := NULL;
	 IBY_PAYGROUP_PUB.pmtTable.payment_reason_comments(l_trx_pmt_index) := NULL;
	 IBY_PAYGROUP_PUB.pmtTable.unique_remittance_identifier(l_trx_pmt_index) := NULL;
         IBY_PAYGROUP_PUB.pmtTable.uri_check_digit(l_trx_pmt_index)  := NULL;
 	IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_pmt_index)             := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payment_details(l_trx_pmt_index)        := NULL;
        IBY_PAYGROUP_PUB.pmtTable.payment_status(l_trx_pmt_index)         :='CREATED';
	IBY_PAYGROUP_PUB.pmtTable.process_type(l_trx_pmt_index)		  := 'STANDARD';
	IBY_PAYGROUP_PUB.pmtTable.payments_complete_flag(l_trx_pmt_index) := 'N';
	IBY_PAYGROUP_PUB.pmtTable.exclusive_payment_flag(l_trx_pmt_index)	  :='N';
	IBY_PAYGROUP_PUB.pmtTable.declare_payment_flag(l_trx_pmt_index)	  :='N';
	IBY_PAYGROUP_PUB.pmtTable.created_by(l_trx_pmt_index)                     := fnd_global.user_id;
         IBY_PAYGROUP_PUB.pmtTable.creation_date(l_trx_pmt_index)                  := sysdate;
         IBY_PAYGROUP_PUB.pmtTable.last_updated_by(l_trx_pmt_index)                := fnd_global.user_id;
         IBY_PAYGROUP_PUB.pmtTable.last_update_login(l_trx_pmt_index)              := fnd_global.user_id;
         IBY_PAYGROUP_PUB.pmtTable.last_update_date(l_trx_pmt_index)               := sysdate;
         IBY_PAYGROUP_PUB.pmtTable.object_version_number(l_trx_pmt_index)          := 1;
	IBY_PAYGROUP_PUB.pmtTable.voided_by(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.void_date(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.void_reason(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_address1(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_address2(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_address3(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_address4(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_city(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_county(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_province(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_state(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_country(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_postal_code(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_address_concat(l_trx_pmt_index) := NULL;
        IBY_PAYGROUP_PUB.pmtTable.payee_site_alternate_name(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_number(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_first_party_reference(l_trx_pmt_index)	:= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_attr_category(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_id(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_tax_registration_num(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_le_registration_num(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payment_amount(l_trx_pmt_index)          := 0;
        IBY_PAYGROUP_PUB.pmtTable.discount_amount_taken(l_trx_pmt_index)   :=  0;
        IBY_PAYGROUP_PUB.pmtTable.sep_remit_advice_req_flag(l_trx_pmt_index)	  :=NULL;
	IBY_PAYGROUP_PUB.pmtTable.payment_instruction_id(l_trx_pmt_index)         :=NULL;
	IBY_PAYGROUP_PUB.pmtTable.anticipated_value_date(l_trx_pmt_index)         :=NULL;
	IBY_PAYGROUP_PUB.pmtTable.declaration_amount(l_trx_pmt_index)             :=0;
	IBY_PAYGROUP_PUB.pmtTable.declaration_currency_code(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.bank_charge_amount(l_trx_pmt_index) :=0;
	IBY_PAYGROUP_PUB.pmtTable.payment_reference_number(l_trx_pmt_index) :=NULL;
	IBY_PAYGROUP_PUB.pmtTable.paper_document_number(l_trx_pmt_index)    :=NULL;
	IBY_PAYGROUP_PUB.pmtTable.bank_assigned_ref_code(l_trx_pmt_index)   := NULL;
	IBY_PAYGROUP_PUB.pmtTable.bank_instruction_details(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.maturity_date(l_trx_pmt_index)	    := NULL;
	IBY_PAYGROUP_PUB.pmtTable.document_category_code(l_trx_pmt_index)   :=NULL;
	IBY_PAYGROUP_PUB.pmtTable.document_sequence_id(l_trx_pmt_index)	    :=NULL;
	IBY_PAYGROUP_PUB.pmtTable.document_sequence_value(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_confirmed_by(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_confirm_date(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_confirm_reason(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_confirm_reference(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_released_by(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_release_date(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_release_reason(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_release_reference(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_request_date(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_request_placed_by(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_request_reason(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.stop_request_reference(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.completed_pmts_group_id(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute_category(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute1(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute2(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute3(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute4(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute5(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute6(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute7(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute8(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute9(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute10(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute11(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute12(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute13(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute14(l_trx_pmt_index):= NULL;
	IBY_PAYGROUP_PUB.pmtTable.attribute15(l_trx_pmt_index):= NULL;
        IBY_PAYGROUP_PUB.pmtTable.declare_payment_flag(l_trx_pmt_index)           := 'N';
	IBY_PAYGROUP_PUB.pmtTable.stop_confirmed_flag(l_trx_pmt_index)            := 'N';
	IBY_PAYGROUP_PUB.pmtTable.stop_released_flag(l_trx_pmt_index)             := 'N';
	IBY_PAYGROUP_PUB.pmtTable.stop_request_placed_flag(l_trx_pmt_index)       := 'N';
	IBY_PAYGROUP_PUB.pmtTable.payment_due_date(l_trx_pmt_index) := NULL;
        IBY_PAYGROUP_PUB.pmtTable.payment_due_date(l_trx_pmt_index)            :=  '';*/

        IBY_PAYGROUP_PUB.pmtTable.payment_id(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payment_method_code(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payment_service_request_id(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.process_type(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payment_status(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payments_complete_flag(l_trx_pmt_index) := 'N';
             IBY_PAYGROUP_PUB.pmtTable.payment_function(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payment_amount(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payment_currency_code(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.bill_payable_flag(l_trx_pmt_index) := 'N';
             IBY_PAYGROUP_PUB.pmtTable.exclusive_payment_flag(l_trx_pmt_index) := 'N';
             IBY_PAYGROUP_PUB.pmtTable.sep_remit_advice_req_flag(l_trx_pmt_index) := 'N';
             IBY_PAYGROUP_PUB.pmtTable.internal_bank_account_id(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.org_id(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.org_type(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.legal_entity_id(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.declare_payment_flag(l_trx_pmt_index) := 'N';
             IBY_PAYGROUP_PUB.pmtTable.delivery_channel_code(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.ext_payee_id(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payment_instruction_id(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payment_profile_id(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.pregrouped_payment_flag(l_trx_pmt_index) := 'N';
             IBY_PAYGROUP_PUB.pmtTable.stop_confirmed_flag(l_trx_pmt_index)            := 'N';
	     IBY_PAYGROUP_PUB.pmtTable.stop_released_flag(l_trx_pmt_index)             := 'N';
	     IBY_PAYGROUP_PUB.pmtTable.stop_request_placed_flag(l_trx_pmt_index)       := 'N';
             IBY_PAYGROUP_PUB.pmtTable.created_by(l_trx_pmt_index)                     := fnd_global.user_id;
             IBY_PAYGROUP_PUB.pmtTable.creation_date(l_trx_pmt_index)                  := sysdate;
             IBY_PAYGROUP_PUB.pmtTable.last_updated_by(l_trx_pmt_index)                := fnd_global.user_id;
             IBY_PAYGROUP_PUB.pmtTable.last_update_login(l_trx_pmt_index)              := fnd_global.user_id;
             IBY_PAYGROUP_PUB.pmtTable.last_update_date(l_trx_pmt_index)               := sysdate;
             IBY_PAYGROUP_PUB.pmtTable.object_version_number(l_trx_pmt_index)          := 1;
             IBY_PAYGROUP_PUB.pmtTable.payee_party_id(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.party_site_id(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.supplier_site_id(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payment_reason_code(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payment_reason_comments(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payment_date(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.anticipated_value_date(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.declaration_amount(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.declaration_currency_code(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.discount_amount_taken(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payment_details(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.bank_charge_bearer(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.bank_charge_amount(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.settlement_priority(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.remittance_message1(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.remittance_message2(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.remittance_message3(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payment_reference_number(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.paper_document_number(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.bank_assigned_ref_code(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.external_bank_account_id(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.unique_remittance_identifier(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.uri_check_digit(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.bank_instruction1_code(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.bank_instruction2_code(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.bank_instruction_details(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payment_text_message1(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payment_text_message2(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payment_text_message3(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.maturity_date(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payment_due_date(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.document_category_code(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.document_sequence_id(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.document_sequence_value(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.beneficiary_party(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.stop_confirmed_by(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.stop_confirm_date(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.stop_confirm_reason(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.stop_confirm_reference(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.stop_released_by(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.stop_release_date(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.stop_release_reason(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.stop_release_reference(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.stop_request_date(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.stop_request_placed_by(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.stop_request_reason(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.stop_request_reference(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.voided_by(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.void_date(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.void_reason(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.remit_to_location_id(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.completed_pmts_group_id(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.attribute_category(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.attribute1(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.attribute2(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.attribute3(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.attribute4(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.attribute5(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.attribute6(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.attribute7(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.attribute8(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.attribute9(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.attribute10(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.attribute11(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.attribute12(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.attribute13(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.attribute14(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.attribute15(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.ext_branch_number(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.ext_bank_number(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_name(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_number(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_type(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_iban_number(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payee_name(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payee_address1(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payee_address2(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payee_address3(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payee_address4(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payee_city(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payee_postal_code(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payee_state(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payee_province(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payee_county(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.payee_country(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.remit_advice_delivery_method(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.remit_advice_email(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.remit_advice_fax(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.address_source(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.employee_address_code(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.employee_person_id(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.employee_address_id(l_trx_pmt_index) := NULL;
             IBY_PAYGROUP_PUB.pmtTable.employee_payment_flag(l_trx_pmt_index) := 'N';
	     	IBY_PAYGROUP_PUB.pmtTable.ext_inv_payee_id(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_id(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_party_site_id(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_supplier_site_id(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_beneficiary_party(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_name(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_address1(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_address2(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_address3(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_address4(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_city(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_postal_code(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_state(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_province(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_county(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_country(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_name(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_le_reg_num(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_tax_reg_num(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_address_concat(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_beneficiary_name(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_number(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_alternate_name(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_site_alt_name(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_number(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_first_party_ref(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.ext_bnk_acct_ownr_inv_prty_id(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.ext_bnk_branch_inv_prty_id(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.ext_bnk_acct_ownr_inv_prty_nme(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_party_attr_cat(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_attr_cat(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_spplr_site_attr_cat(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_site_name(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_spplr_site_alt_name(l_trx_pmt_index) := NULL;
		IBY_PAYGROUP_PUB.pmtTable.inv_payee_supplier_id(l_trx_pmt_index) := NULL;
        		-- start of auditPaymentdata fields
        IBY_PAYGROUP_PUB.pmtTable.payer_party_number(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payer_party_site_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payer_legal_entity_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payer_tax_registration_num(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payer_le_registration_num(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payer_party_id(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payer_location_id(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payer_party_attr_category(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payer_le_attr_category(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payer_abbreviated_agency_code(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payer_federal_us_employer_id(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_number(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_number(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.int_eft_swift_code(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_number(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_iban(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_acct_agency_loc_code(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_party_id(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_alt_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_alt_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_alt_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_account_num_elec(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_location_id(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_eft_user_num(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_party_number(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_party_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_alt_name(l_trx_pmt_index) := NULL;  -- Bug 6175102
	IBY_PAYGROUP_PUB.pmtTable.payee_address_concat(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.beneficiary_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_party_atr_cat(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_spplr_site_attr_category(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_site_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_addressee(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_site_alternate_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_number(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_first_party_reference(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_attr_category(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_supplier_id(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_tax_registration_num(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payee_le_registration_num(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.ext_eft_swift_code(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_pmt_factor_flag(l_trx_pmt_index) := 'N';
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_owner_party_id(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_party_id(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_alt_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_alt_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_alt_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_account_num_elec(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_branch_location_id(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.ext_bank_acct_owner_party_name(l_trx_pmt_index) := NULL;
	--IBY_PAYGROUP_PUB.pmtTable.remit_advice_delivery_method(l_trx_pmt_index) := NULL;
	--IBY_PAYGROUP_PUB.pmtTable.remit_advice_email(l_trx_pmt_index) := NULL;
	--IBY_PAYGROUP_PUB.pmtTable.remit_advice_fax(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.delivery_channel_format_value(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.declaration_exch_rate_type(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.declaration_format(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payment_profile_acct_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payment_profile_sys_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payment_reason_format_value(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.bank_instruction1_format_value(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.bank_instruction2_format_value(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.org_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.int_bank_branch_rfc_identifier(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.payment_process_request_name(l_trx_pmt_index) := NULL;
	IBY_PAYGROUP_PUB.pmtTable.source_product(l_trx_pmt_index) := NULL;

      print_debuginfo(l_module_name, 'EXIT');

 END initialize_pmt_table;


END IBY_PAYGROUP_PUB;

/
