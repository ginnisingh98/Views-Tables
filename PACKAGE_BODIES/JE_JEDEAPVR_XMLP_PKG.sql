--------------------------------------------------------
--  DDL for Package Body JE_JEDEAPVR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."JE_JEDEAPVR_XMLP_PKG" AS
/* $Header: JEDEAPVRB.pls 120.1 2007/12/25 16:51:44 dwkrishn noship $ */
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      T_SET_OF_BOOKS_ID NUMBER;
      T_CHART_OF_ACCOUNTS_ID NUMBER;
      T_SET_OF_BOOKS_NAME VARCHAR2(30);
      T_FUNC_CURR VARCHAR2(15);
      T_PERIOD_FROM VARCHAR2(15);
      T_PERIOD_TO VARCHAR2(15);
      T_DUMMY_DATE DATE;
      T_START_DATE DATE;
      T_END_DATE DATE;
      T_DIST_OPT VARCHAR2(10);
      T_APP_ID NUMBER;
      T_ERRORBUFFER VARCHAR2(132);
      L_BOOLEAN BOOLEAN;
      ERRBUF VARCHAR2(1000);
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      T_SET_OF_BOOKS_ID := TO_NUMBER(P_SET_OF_BOOKS_ID);
      GL_INFO.GL_GET_LEDGER_INFO(T_SET_OF_BOOKS_ID
                                ,T_CHART_OF_ACCOUNTS_ID
                                ,T_SET_OF_BOOKS_NAME
                                ,T_FUNC_CURR
                                ,T_ERRORBUFFER);
      IF (T_ERRORBUFFER IS NOT NULL) THEN
        /*SRW.MESSAGE(0
                   ,T_ERRORBUFFER)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
        /*SRW.MESSAGE(0
                   ,T_ERRORBUFFER)*/NULL;
      ELSE
        STRUCT_NUM := TO_CHAR(T_CHART_OF_ACCOUNTS_ID);
        SET_OF_BOOKS_NAME := T_SET_OF_BOOKS_NAME;
        FUNC_CURR := T_FUNC_CURR;
      END IF;
      T_PERIOD_FROM := P_PERIOD_FROM;
      T_APP_ID := P_APP_ID;
      JG_GET_PERIOD_DATES(T_APP_ID
                         ,T_SET_OF_BOOKS_ID
                         ,T_PERIOD_FROM
                         ,T_START_DATE
                         ,T_DUMMY_DATE
                         ,T_ERRORBUFFER);
      IF (T_ERRORBUFFER IS NOT NULL) THEN
        /*SRW.MESSAGE(0
                   ,T_ERRORBUFFER)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      ELSE
        FROM_DATE := T_START_DATE;
      END IF;
      /*SRW.MESSAGE('888'
                 ,'Start Date: ' || TO_CHAR(T_START_DATE))*/NULL;
      T_PERIOD_TO := P_PERIOD_TO;
      JG_GET_PERIOD_DATES(T_APP_ID
                         ,T_SET_OF_BOOKS_ID
                         ,T_PERIOD_TO
                         ,T_DUMMY_DATE
                         ,T_END_DATE
                         ,T_ERRORBUFFER);
      IF (T_ERRORBUFFER IS NOT NULL) THEN
        /*SRW.MESSAGE(0
                   ,T_ERRORBUFFER)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      ELSE
        THRU_DATE := T_END_DATE;
      END IF;
      /*SRW.MESSAGE('888'
                 ,'End Date: ' || TO_CHAR(T_END_DATE))*/NULL;
      SELECT
        DISCOUNT_DISTRIBUTION_METHOD
      INTO T_DIST_OPT
      FROM
        AP_SYSTEM_PARAMETERS
      WHERE SET_OF_BOOKS_ID = T_SET_OF_BOOKS_ID;
      DIST_OPT := T_DIST_OPT;
      SELECT
        PRECISION
      INTO CURR_PERC
      FROM
        FND_CURRENCIES_VL
      WHERE CURRENCY_CODE = FUNC_CURR;
      /*SRW.MESSAGE('999'
                 ,'Currency Precision:' || CURR_PERC)*/NULL;
      SELECT
        ( PERIOD_YEAR * 10000 ) + PERIOD_NUM
      INTO P_PERIOD_NUM_FROM
      FROM
        GL_PERIOD_STATUSES
      WHERE PERIOD_NAME = P_PERIOD_FROM
        AND SET_OF_BOOKS_ID = T_SET_OF_BOOKS_ID
        AND APPLICATION_ID = T_APP_ID;
      /*SRW.MESSAGE('999'
                 ,'77777777')*/NULL;
      SELECT
        ( PERIOD_YEAR * 10000 ) + PERIOD_NUM
      INTO P_PERIOD_NUM_TO
      FROM
        GL_PERIOD_STATUSES
      WHERE PERIOD_NAME = P_PERIOD_TO
        AND SET_OF_BOOKS_ID = T_SET_OF_BOOKS_ID
        AND APPLICATION_ID = T_APP_ID;
      IF P_BALANCING_SEGMENT IS NOT NULL THEN
        L_BOOLEAN := FND_FLEX_APIS.GET_SEGMENT_COLUMN(X_APPLICATION_ID => '101'
                                                     ,X_ID_FLEX_CODE => 'GL#'
                                                     ,X_ID_FLEX_NUM => P_CHART_OF_ACCT
                                                     ,X_SEG_ATTR_TYPE => 'GL_BALANCING'
                                                     ,X_APP_COLUMN_NAME => P_BAL_SEG_NAME);
        P_BAL_SEG_NAME := P_BAL_SEG_NAME || '=' || P_BALANCING_SEGMENT;
        IF NOT L_BOOLEAN THEN
          ERRBUF := GET;
          /*SRW.MESSAGE('00'
                     ,ERRBUF)*/NULL;
          /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
        END IF;
      END IF;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION COMP_DIFFFORMULA(COMP_GL_BALANCE IN NUMBER
                           ,COMP_DV IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (COMP_GL_BALANCE - COMP_DV);
  END COMP_DIFFFORMULA;

  FUNCTION W_CALC_VATFORMULA(TAX_TYPE IN VARCHAR2
                            ,W_ORIG_COSTS IN NUMBER
                            ,TAX_RATE IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      CALC_VAT NUMBER(10,2);
    BEGIN
      IF TAX_TYPE = 'OFFSET' THEN
        CALC_VAT := -(W_ORIG_COSTS * (TAX_RATE / 100));
      ELSE
        CALC_VAT := W_ORIG_COSTS * (TAX_RATE / 100);
      END IF;
      RETURN (CALC_VAT);
    END;
    RETURN NULL;
  END W_CALC_VATFORMULA;

  FUNCTION ROUND_ORIG_COSTSFORMULA(INV_ORIG_COST IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND(INV_ORIG_COST
                ,CURR_PERC));
  END ROUND_ORIG_COSTSFORMULA;

  FUNCTION ROUND_ORIG_VATFORMULA(INV_VAT_COST IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND(INV_VAT_COST
                ,CURR_PERC));
  END ROUND_ORIG_VATFORMULA;

  FUNCTION ROUND_DISC_COSTSFORMULA(INV_DISC_COST IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND(INV_DISC_COST
                ,CURR_PERC) * -1);
  END ROUND_DISC_COSTSFORMULA;

  FUNCTION ROUND_DISC_VATFORMULA(INV_VAT_DISC IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (ROUND(INV_VAT_DISC
                ,CURR_PERC) * -1);
  END ROUND_DISC_VATFORMULA;

  FUNCTION VAT_CALC_DIFFFORMULA(W_CALC_VAT IN NUMBER
                               ,W_ORIG_VAT IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (W_CALC_VAT - W_ORIG_VAT);
  END VAT_CALC_DIFFFORMULA;

  FUNCTION COMP_OTHER_DIFFFORMULA(COMP_GL_BALANCE IN NUMBER
                                 ,COMP_OV IN NUMBER
                                 ,COMP_DV IN NUMBER) RETURN NUMBER IS
  BEGIN
    RETURN (COMP_GL_BALANCE - (COMP_OV + COMP_DV));
  END COMP_OTHER_DIFFFORMULA;

  PROCEDURE JG_GET_PERIOD_DATES(APP_ID IN NUMBER
                               ,TSET_OF_BOOKS_ID IN NUMBER
                               ,TPERIOD_NAME IN VARCHAR2
                               ,TSTART_DATE OUT NOCOPY DATE
                               ,TEND_DATE OUT NOCOPY DATE
                               ,ERRBUF OUT NOCOPY VARCHAR) IS
  BEGIN
    SELECT
      START_DATE,
      END_DATE
    INTO TSTART_DATE,TEND_DATE
    FROM
      GL_PERIOD_STATUSES
    WHERE PERIOD_NAME = TPERIOD_NAME
      AND SET_OF_BOOKS_ID = TSET_OF_BOOKS_ID
      AND APPLICATION_ID = APP_ID;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      SET_NAME('GL'
              ,'GL_PLL_INVALID_PERIOD');
      ERRBUF := SUBSTR(GET
                      ,1
                      ,50);
    WHEN OTHERS THEN
      ERRBUF := SQLERRM;
  END JG_GET_PERIOD_DATES;

  FUNCTION CF_REPORT_DATEFORMULA RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDT(SYSDATE);
  END CF_REPORT_DATEFORMULA;

  FUNCTION CF_INVOICE_DATEFORMULA(INVOICE_DATE IN DATE) RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDATE(INVOICE_DATE);
  END CF_INVOICE_DATEFORMULA;

  FUNCTION CF_INVOICE_DATE1FORMULA(INVOICE_DATE1 IN DATE) RETURN CHAR IS
  BEGIN
    RETURN FND_DATE.DATE_TO_CHARDATE(INVOICE_DATE1);
  END CF_INVOICE_DATE1FORMULA;

  FUNCTION GET_DISCOUNT_VATFORMULA(TAX_DISCOUNT IN NUMBER
                                  ,INVOICE_ID_v IN NUMBER) RETURN NUMBER IS
  BEGIN
    DECLARE
      SUM_DISCOUNTS NUMBER(10,2);
    BEGIN
      IF TAX_DISCOUNT > 0 THEN
        SELECT
          SUM(NVL(APD.BASE_AMOUNT
                 ,APD.AMOUNT))
        INTO SUM_DISCOUNTS
        FROM
          AP_PAYMENT_DISTRIBUTIONS_ALL APD,
          AP_INVOICE_PAYMENTS AIP,
          AP_INVOICE_DISTRIBUTIONS_ALL D
        WHERE APD.INVOICE_PAYMENT_ID = AIP.INVOICE_PAYMENT_ID
          AND D.INVOICE_LINE_NUMBER = APD.INVOICE_DISTR_LINE_NUMBER
          AND APD.LINE_TYPE_LOOKUP_CODE = 'DISCOUNT'
          AND D.LINE_TYPE_LOOKUP_CODE = 'TAX'
          AND AIP.INVOICE_ID = INVOICE_ID_v
          AND D.INVOICE_ID = INVOICE_ID_v
          AND APD.ORG_ID = AIP.ORG_ID
          AND D.ORG_ID = AIP.ORG_ID;
        RETURN SUM_DISCOUNTS;
      END IF;
      RETURN 0;
    END;
  END GET_DISCOUNT_VATFORMULA;

  FUNCTION FLEX_DATA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FLEX_DATA;
  END FLEX_DATA_P;

  FUNCTION FLEX_PARM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FLEX_PARM;
  END FLEX_PARM_P;

  FUNCTION STRUCT_NUM_P RETURN VARCHAR2 IS
  BEGIN
    RETURN STRUCT_NUM;
  END STRUCT_NUM_P;

  FUNCTION SET_OF_BOOKS_NAME_P RETURN VARCHAR2 IS
  BEGIN
    RETURN SET_OF_BOOKS_NAME;
  END SET_OF_BOOKS_NAME_P;

  FUNCTION FUNC_CURR_P RETURN VARCHAR2 IS
  BEGIN
    RETURN FUNC_CURR;
  END FUNC_CURR_P;

  FUNCTION FROM_DATE_P RETURN DATE IS
  BEGIN
    RETURN FROM_DATE;
  END FROM_DATE_P;

  FUNCTION THRU_DATE_P RETURN DATE IS
  BEGIN
    RETURN THRU_DATE;
  END THRU_DATE_P;

  FUNCTION DIST_OPT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN DIST_OPT;
  END DIST_OPT_P;

  FUNCTION CURR_PERC_P RETURN NUMBER IS
  BEGIN
    RETURN CURR_PERC;
  END CURR_PERC_P;

  FUNCTION P_SCALING_FACTOR_P RETURN NUMBER IS
  BEGIN
    RETURN P_SCALING_FACTOR;
  END P_SCALING_FACTOR_P;

  PROCEDURE SET_NAME(APPLICATION IN VARCHAR2
                    ,NAME IN VARCHAR2) IS
  BEGIN
  /*  STPROC.INIT('begin FND_MESSAGE.SET_NAME(:APPLICATION, :NAME); end;');
    STPROC.BIND_I(APPLICATION);
    STPROC.BIND_I(NAME);
    STPROC.EXECUTE;*/null;
  END SET_NAME;

  PROCEDURE SET_TOKEN(TOKEN IN VARCHAR2
                     ,VALUE IN VARCHAR2
                     ,TRANSLATE IN BOOLEAN) IS
  BEGIN
   /* STPROC.INIT('declare TRANSLATE BOOLEAN; begin TRANSLATE := sys.diutil.int_to_bool(:TRANSLATE); FND_MESSAGE.SET_TOKEN(:TOKEN, :VALUE, TRANSLATE); end;');
    STPROC.BIND_I(TRANSLATE);
    STPROC.BIND_I(TOKEN);
    STPROC.BIND_I(VALUE);
    STPROC.EXECUTE;*/null;
  END SET_TOKEN;

  PROCEDURE RETRIEVE(MSGOUT OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.RETRIEVE(:MSGOUT); end;');
    STPROC.BIND_O(MSGOUT);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,MSGOUT);*/null;
  END RETRIEVE;

  PROCEDURE CLEAR IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.CLEAR; end;');
    STPROC.EXECUTE;*/null;
  END CLEAR;

  FUNCTION GET_STRING(APPIN IN VARCHAR2
                     ,NAMEIN IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
  /*  STPROC.INIT('begin :X0 := FND_MESSAGE.GET_STRING(:APPIN, :NAMEIN); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(APPIN);
    STPROC.BIND_I(NAMEIN);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_STRING;

  FUNCTION GET RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
   /* STPROC.INIT('begin :X0 := FND_MESSAGE.GET; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET;

  FUNCTION GET_ENCODED RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
  /*  STPROC.INIT('begin :X0 := FND_MESSAGE.GET_ENCODED; end;');
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END GET_ENCODED;

  PROCEDURE PARSE_ENCODED(ENCODED_MESSAGE IN VARCHAR2
                         ,APP_SHORT_NAME OUT NOCOPY VARCHAR2
                         ,MESSAGE_NAME OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.PARSE_ENCODED(:ENCODED_MESSAGE, :APP_SHORT_NAME, :MESSAGE_NAME); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.BIND_O(APP_SHORT_NAME);
    STPROC.BIND_O(MESSAGE_NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,APP_SHORT_NAME);
    STPROC.RETRIEVE(3
                   ,MESSAGE_NAME);*/null;
  END PARSE_ENCODED;

  PROCEDURE SET_ENCODED(ENCODED_MESSAGE IN VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_MESSAGE.SET_ENCODED(:ENCODED_MESSAGE); end;');
    STPROC.BIND_I(ENCODED_MESSAGE);
    STPROC.EXECUTE;*/null;
  END SET_ENCODED;

  PROCEDURE RAISE_ERROR IS
  BEGIN
/*    STPROC.INIT('begin FND_MESSAGE.RAISE_ERROR; end;');
    STPROC.EXECUTE;*/null;
  END RAISE_ERROR;

  PROCEDURE JG_GET_SET_OF_BOOKS_INFO(SOBID IN NUMBER
                                    ,COAID OUT NOCOPY NUMBER
                                    ,SOBNAME OUT NOCOPY VARCHAR2
                                    ,FUNC_CURR OUT NOCOPY VARCHAR2
                                    ,ERRBUF OUT NOCOPY VARCHAR2) IS
  BEGIN
   /* STPROC.INIT('begin JG_INFO.JG_GET_SET_OF_BOOKS_INFO(:SOBID, :COAID, :SOBNAME, :FUNC_CURR, :ERRBUF); end;');
    STPROC.BIND_I(SOBID);
    STPROC.BIND_O(COAID);
    STPROC.BIND_O(SOBNAME);
    STPROC.BIND_O(FUNC_CURR);
    STPROC.BIND_O(ERRBUF);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,COAID);
    STPROC.RETRIEVE(3
                   ,SOBNAME);
    STPROC.RETRIEVE(4
                   ,FUNC_CURR);
    STPROC.RETRIEVE(5
                   ,ERRBUF);*/null;
  END JG_GET_SET_OF_BOOKS_INFO;

  PROCEDURE JG_GET_BUD_OR_ENC_NAME(ACTUAL_TYPE IN VARCHAR2
                                  ,TYPE_ID IN NUMBER
                                  ,NAME OUT NOCOPY VARCHAR2
                                  ,ERRBUF OUT NOCOPY VARCHAR2) IS
  BEGIN
  /*  STPROC.INIT('begin JG_INFO.JG_GET_BUD_OR_ENC_NAME(:ACTUAL_TYPE, :TYPE_ID, :NAME, :ERRBUF); end;');
    STPROC.BIND_I(ACTUAL_TYPE);
    STPROC.BIND_I(TYPE_ID);
    STPROC.BIND_O(NAME);
    STPROC.BIND_O(ERRBUF);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,NAME);
    STPROC.RETRIEVE(4
                   ,ERRBUF);*/null;
  END JG_GET_BUD_OR_ENC_NAME;

  PROCEDURE JG_GET_LOOKUP_VALUE(LMODE IN VARCHAR2
                               ,CODE IN VARCHAR2
                               ,TYPE IN VARCHAR2
                               ,VALUE OUT NOCOPY VARCHAR2
                               ,ERRBUF OUT NOCOPY VARCHAR2) IS
  BEGIN
   /* STPROC.INIT('begin JG_INFO.JG_GET_LOOKUP_VALUE(:LMODE, :CODE, :TYPE, :VALUE, :ERRBUF); end;');
    STPROC.BIND_I(LMODE);
    STPROC.BIND_I(CODE);
    STPROC.BIND_I(TYPE);
    STPROC.BIND_O(VALUE);
    STPROC.BIND_O(ERRBUF);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(4
                   ,VALUE);
    STPROC.RETRIEVE(5
                   ,ERRBUF);*/null;
  END JG_GET_LOOKUP_VALUE;

  PROCEDURE JG_GET_FIRST_PERIOD(APP_ID IN NUMBER
                               ,TSET_OF_BOOKS_ID IN NUMBER
                               ,TPERIOD_NAME IN VARCHAR2
                               ,TFIRST_PERIOD OUT NOCOPY VARCHAR2
                               ,ERRBUF OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin JG_INFO.JG_GET_FIRST_PERIOD(:APP_ID, :TSET_OF_BOOKS_ID, :TPERIOD_NAME, :TFIRST_PERIOD, :ERRBUF); end;');
    STPROC.BIND_I(APP_ID);
    STPROC.BIND_I(TSET_OF_BOOKS_ID);
    STPROC.BIND_I(TPERIOD_NAME);
    STPROC.BIND_O(TFIRST_PERIOD);
    STPROC.BIND_O(ERRBUF);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(4
                   ,TFIRST_PERIOD);
    STPROC.RETRIEVE(5
                   ,ERRBUF);*/null;
  END JG_GET_FIRST_PERIOD;

  PROCEDURE JG_GET_FIRST_PERIOD_OF_QUARTER(APP_ID IN NUMBER
                                          ,TSET_OF_BOOKS_ID IN NUMBER
                                          ,TPERIOD_NAME IN VARCHAR2
                                          ,TFIRST_PERIOD OUT NOCOPY VARCHAR2
                                          ,ERRBUF OUT NOCOPY VARCHAR2) IS
  BEGIN
  /*  STPROC.INIT('begin JG_INFO.JG_GET_FIRST_PERIOD_OF_QUARTER(:APP_ID, :TSET_OF_BOOKS_ID, :TPERIOD_NAME, :TFIRST_PERIOD, :ERRBUF); end;');
    STPROC.BIND_I(APP_ID);
    STPROC.BIND_I(TSET_OF_BOOKS_ID);
    STPROC.BIND_I(TPERIOD_NAME);
    STPROC.BIND_O(TFIRST_PERIOD);
    STPROC.BIND_O(ERRBUF);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(4
                   ,TFIRST_PERIOD);
    STPROC.RETRIEVE(5
                   ,ERRBUF); */null;
  END JG_GET_FIRST_PERIOD_OF_QUARTER;

  FUNCTION JG_FORMAT_CURR_AMT(IN_PRECISION IN NUMBER
                             ,IN_AMOUNT_DISP IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := JG_INFO.JG_FORMAT_CURR_AMT(:IN_PRECISION, :IN_AMOUNT_DISP); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(IN_PRECISION);
    STPROC.BIND_I(IN_AMOUNT_DISP);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/null;
    RETURN X0;
  END JG_FORMAT_CURR_AMT;

END JE_JEDEAPVR_XMLP_PKG;



/
