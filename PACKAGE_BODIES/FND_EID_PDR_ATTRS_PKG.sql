--------------------------------------------------------
--  DDL for Package Body FND_EID_PDR_ATTRS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."FND_EID_PDR_ATTRS_PKG" as
/* $Header: fndeidattrsb.pls 120.0.12010000.4 2013/03/19 10:28:10 asnabil noship $ */

procedure INSERT_ROW (
  X_EID_INSTANCE_ID in VARCHAR2,
  X_EID_INSTANCE_ATTRIBUTE in VARCHAR2,
  X_ENDECA_DATATYPE in VARCHAR2,
  X_EID_ATTR_PROFILE_ID in VARCHAR2,
  X_EID_RELEASE_VERSION in VARCHAR2,
  X_ATTRIBUTE_SOURCE in VARCHAR2,
  X_MANAGED_ATTRIBUTE_FLAG in VARCHAR2,
  X_HIERARCHICAL_MGD_ATTR_FLAG in VARCHAR2,
  X_DIM_ENABLE_REFINEMENTS_FLAG in VARCHAR2,
  X_DIM_SEARCH_HIERARCHICAL_FLAG in VARCHAR2,
  X_REC_SEARCH_HIERARCHICAL_FLAG in VARCHAR2,
  X_MGD_ATTR_EID_RELEASE_VERSION in VARCHAR2,
  X_OBSOLETED_FLAG in VARCHAR2,
  X_OBSOLETED_EID_RELEASE_VERSIO in VARCHAR2,
X_VIEW_OBJECT_ATTR_NAME in VARCHAR2,
  X_ATTR_ENABLE_UPDATE_FLAG in VARCHAR2,
  X_ATTR_ENABLE_NULL_FLAG in VARCHAR2,
  X_ATTR_VALUE_SET_FLAG in VARCHAR2,
  X_VALUE_SET_NAME in VARCHAR2,
X_DISPLAY_NAME in VARCHAR2,
  X_ATTRIBUTE_DESC in VARCHAR2,
  X_USER_DISPLAY_NAME in VARCHAR2,
  X_USER_ATTRIBUTE_DESC in VARCHAR2,
  X_LAST_UPDATE_DATE in VARCHAR2,
  X_APPLICATION_SHORT_NAME in VARCHAR2,
  X_OWNER in VARCHAR2
) is
  cursor C is select ROWID from FND_EID_PDR_ATTRS_B
    where EID_INSTANCE_ID = X_EID_INSTANCE_ID
    and EID_INSTANCE_ATTRIBUTE = X_EID_INSTANCE_ATTRIBUTE
    ;
  user_id NUMBER;
  l_rowid rowid;
begin

  IF ( x_owner IS NOT NULL ) THEN
    user_id := fnd_load_util.owner_id(x_owner);
  ELSE
     user_id := -1;
  END IF;

  IF ( user_id > 0 ) THEN
  insert into FND_EID_PDR_ATTRS_B (
    EID_INSTANCE_ID,
    EID_INSTANCE_ATTRIBUTE,
    ENDECA_DATATYPE,
    EID_ATTR_PROFILE_ID,
    EID_RELEASE_VERSION,
    ATTRIBUTE_SOURCE,
    MANAGED_ATTRIBUTE_FLAG,
    HIERARCHICAL_MGD_ATTR_FLAG,
    DIM_ENABLE_REFINEMENTS_FLAG,
    DIM_SEARCH_HIERARCHICAL_FLAG,
    REC_SEARCH_HIERARCHICAL_FLAG,
    MGD_ATTR_EID_RELEASE_VERSION,
    OBSOLETED_FLAG,
    OBSOLETED_EID_RELEASE_VERSION,
VIEW_OBJECT_ATTR_NAME,
    ATTR_ENABLE_UPDATE_FLAG,
    ATTR_ENABLE_NULL_FLAG,
    ATTR_VALUE_SET_FLAG,
    VALUE_SET_NAME,
    CREATION_DATE,
    CREATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN
  ) values (
    X_EID_INSTANCE_ID,
    X_EID_INSTANCE_ATTRIBUTE,
    X_ENDECA_DATATYPE,
    X_EID_ATTR_PROFILE_ID,
    X_EID_RELEASE_VERSION,
    X_ATTRIBUTE_SOURCE,
    X_MANAGED_ATTRIBUTE_FLAG,
    X_HIERARCHICAL_MGD_ATTR_FLAG,
    X_DIM_ENABLE_REFINEMENTS_FLAG,
    X_DIM_SEARCH_HIERARCHICAL_FLAG,
    X_REC_SEARCH_HIERARCHICAL_FLAG,
    X_MGD_ATTR_EID_RELEASE_VERSION,
    X_OBSOLETED_FLAG,
    X_OBSOLETED_EID_RELEASE_VERSIO,
   X_VIEW_OBJECT_ATTR_NAME,
    X_ATTR_ENABLE_UPDATE_FLAG,
    X_ATTR_ENABLE_NULL_FLAG,
    X_ATTR_VALUE_SET_FLAG,
    X_VALUE_SET_NAME,
 TO_DATE(X_LAST_UPDATE_DATE,'YYYY/MM/DD'),
    user_Id,
    TO_DATE(X_LAST_UPDATE_DATE,'YYYY/MM/DD'),
    user_Id,
    0
  );

  insert into FND_EID_PDR_ATTRS_TL (
    EID_INSTANCE_ID,
    EID_INSTANCE_ATTRIBUTE,
    DISPLAY_NAME,
    ATTRIBUTE_DESC,
    USER_DISPLAY_NAME,
    USER_ATTRIBUTE_DESC,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANG
  ) select
    X_EID_INSTANCE_ID,
    X_EID_INSTANCE_ATTRIBUTE,
    X_DISPLAY_NAME,
    X_ATTRIBUTE_DESC,
    X_USER_DISPLAY_NAME,
    X_USER_ATTRIBUTE_DESC,
    user_id,
    TO_DATE(X_LAST_UPDATE_DATE,'YYYY/MM/DD'),
    user_id,
    TO_DATE(X_LAST_UPDATE_DATE,'YYYY/MM/DD'),
    user_id,
    L.LANGUAGE_CODE,
    userenv('LANG')
  from FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and not exists
    (select NULL
    from FND_EID_PDR_ATTRS_TL T
    where T.EID_INSTANCE_ID = X_EID_INSTANCE_ID
    and T.EID_INSTANCE_ATTRIBUTE = X_EID_INSTANCE_ATTRIBUTE
    and T.LANGUAGE = L.LANGUAGE_CODE);

  open c;
  fetch c into l_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

  END IF;

end INSERT_ROW;

procedure LOCK_ROW (
  X_EID_INSTANCE_ID in VARCHAR2,
  X_EID_INSTANCE_ATTRIBUTE in VARCHAR2,
  X_ENDECA_DATATYPE in VARCHAR2,
  X_EID_ATTR_PROFILE_ID in VARCHAR2,
  X_EID_RELEASE_VERSION in VARCHAR2,
  X_ATTRIBUTE_SOURCE in VARCHAR2,
  X_MANAGED_ATTRIBUTE_FLAG in VARCHAR2,
  X_HIERARCHICAL_MGD_ATTR_FLAG in VARCHAR2,
  X_DIM_ENABLE_REFINEMENTS_FLAG in VARCHAR2,
  X_DIM_SEARCH_HIERARCHICAL_FLAG in VARCHAR2,
  X_REC_SEARCH_HIERARCHICAL_FLAG in VARCHAR2,
  X_MGD_ATTR_EID_RELEASE_VERSION in VARCHAR2,
  X_OBSOLETED_FLAG in VARCHAR2,
  X_OBSOLETED_EID_RELEASE_VERSIO in VARCHAR2,
  X_DISPLAY_NAME in VARCHAR2,
  X_ATTRIBUTE_DESC in VARCHAR2,
  X_USER_DISPLAY_NAME in VARCHAR2,
  X_USER_ATTRIBUTE_DESC in VARCHAR2
) is
  cursor c is select
      ENDECA_DATATYPE,
      EID_ATTR_PROFILE_ID,
      EID_RELEASE_VERSION,
      ATTRIBUTE_SOURCE,
      MANAGED_ATTRIBUTE_FLAG,
      HIERARCHICAL_MGD_ATTR_FLAG,
      DIM_ENABLE_REFINEMENTS_FLAG,
      DIM_SEARCH_HIERARCHICAL_FLAG,
      REC_SEARCH_HIERARCHICAL_FLAG,
      MGD_ATTR_EID_RELEASE_VERSION,
      OBSOLETED_FLAG,
      OBSOLETED_EID_RELEASE_VERSION
    from FND_EID_PDR_ATTRS_B
    where EID_INSTANCE_ID = X_EID_INSTANCE_ID
    and EID_INSTANCE_ATTRIBUTE = X_EID_INSTANCE_ATTRIBUTE
    for update of EID_INSTANCE_ID nowait;
  recinfo c%rowtype;

  cursor c1 is select
      DISPLAY_NAME,
      ATTRIBUTE_DESC,
      USER_DISPLAY_NAME,
      USER_ATTRIBUTE_DESC,
      decode(LANGUAGE, userenv('LANG'), 'Y', 'N') BASELANG
    from FND_EID_PDR_ATTRS_TL
    where EID_INSTANCE_ID = X_EID_INSTANCE_ID
    and EID_INSTANCE_ATTRIBUTE = X_EID_INSTANCE_ATTRIBUTE
    and userenv('LANG') in (LANGUAGE, SOURCE_LANG)
    for update of EID_INSTANCE_ID nowait;
begin
  open c;
  fetch c into recinfo;
  if (c%notfound) then
    close c;
    fnd_message.set_name('FND', 'FORM_RECORD_DELETED');
    app_exception.raise_exception;
  end if;
  close c;
  if (    ((recinfo.ENDECA_DATATYPE = X_ENDECA_DATATYPE)
           OR ((recinfo.ENDECA_DATATYPE is null) AND (X_ENDECA_DATATYPE is null)))
      AND (recinfo.EID_ATTR_PROFILE_ID = X_EID_ATTR_PROFILE_ID)
      AND ((recinfo.EID_RELEASE_VERSION = X_EID_RELEASE_VERSION)
           OR ((recinfo.EID_RELEASE_VERSION is null) AND (X_EID_RELEASE_VERSION is null)))
      AND ((recinfo.ATTRIBUTE_SOURCE = X_ATTRIBUTE_SOURCE)
           OR ((recinfo.ATTRIBUTE_SOURCE is null) AND (X_ATTRIBUTE_SOURCE is null)))
      AND ((recinfo.MANAGED_ATTRIBUTE_FLAG = X_MANAGED_ATTRIBUTE_FLAG)
           OR ((recinfo.MANAGED_ATTRIBUTE_FLAG is null) AND (X_MANAGED_ATTRIBUTE_FLAG is null)))
      AND ((recinfo.HIERARCHICAL_MGD_ATTR_FLAG = X_HIERARCHICAL_MGD_ATTR_FLAG)
           OR ((recinfo.HIERARCHICAL_MGD_ATTR_FLAG is null) AND (X_HIERARCHICAL_MGD_ATTR_FLAG is null)))
      AND ((recinfo.DIM_ENABLE_REFINEMENTS_FLAG = X_DIM_ENABLE_REFINEMENTS_FLAG)
           OR ((recinfo.DIM_ENABLE_REFINEMENTS_FLAG is null) AND (X_DIM_ENABLE_REFINEMENTS_FLAG is null)))
      AND ((recinfo.DIM_SEARCH_HIERARCHICAL_FLAG = X_DIM_SEARCH_HIERARCHICAL_FLAG)
           OR ((recinfo.DIM_SEARCH_HIERARCHICAL_FLAG is null) AND (X_DIM_SEARCH_HIERARCHICAL_FLAG is null)))
      AND ((recinfo.REC_SEARCH_HIERARCHICAL_FLAG = X_REC_SEARCH_HIERARCHICAL_FLAG)
           OR ((recinfo.REC_SEARCH_HIERARCHICAL_FLAG is null) AND (X_REC_SEARCH_HIERARCHICAL_FLAG is null)))
      AND ((recinfo.MGD_ATTR_EID_RELEASE_VERSION = X_MGD_ATTR_EID_RELEASE_VERSION)
           OR ((recinfo.MGD_ATTR_EID_RELEASE_VERSION is null) AND (X_MGD_ATTR_EID_RELEASE_VERSION is null)))
      AND ((recinfo.OBSOLETED_FLAG = X_OBSOLETED_FLAG)
           OR ((recinfo.OBSOLETED_FLAG is null) AND (X_OBSOLETED_FLAG is null)))
      AND ((recinfo.OBSOLETED_EID_RELEASE_VERSION = X_OBSOLETED_EID_RELEASE_VERSIO)
           OR ((recinfo.OBSOLETED_EID_RELEASE_VERSION is null) AND (X_OBSOLETED_EID_RELEASE_VERSIO is null)))
  ) then
    null;
  else
    fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
    app_exception.raise_exception;
  end if;

  for tlinfo in c1 loop
    if (tlinfo.BASELANG = 'Y') then
      if (    (tlinfo.DISPLAY_NAME = X_DISPLAY_NAME)
          AND ((tlinfo.ATTRIBUTE_DESC = X_ATTRIBUTE_DESC)
               OR ((tlinfo.ATTRIBUTE_DESC is null) AND (X_ATTRIBUTE_DESC is null)))
          AND ((tlinfo.USER_DISPLAY_NAME = X_USER_DISPLAY_NAME)
               OR ((tlinfo.USER_DISPLAY_NAME is null) AND (X_USER_DISPLAY_NAME is null)))
          AND ((tlinfo.USER_ATTRIBUTE_DESC = X_USER_ATTRIBUTE_DESC)
               OR ((tlinfo.USER_ATTRIBUTE_DESC is null) AND (X_USER_ATTRIBUTE_DESC is null)))
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
    end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_EID_INSTANCE_ID in VARCHAR2,
  X_EID_INSTANCE_ATTRIBUTE in VARCHAR2,
  X_ENDECA_DATATYPE in VARCHAR2,
  X_EID_ATTR_PROFILE_ID in VARCHAR2,
  X_EID_RELEASE_VERSION in VARCHAR2,
  X_ATTRIBUTE_SOURCE in VARCHAR2,
  X_MANAGED_ATTRIBUTE_FLAG in VARCHAR2,
  X_HIERARCHICAL_MGD_ATTR_FLAG in VARCHAR2,
  X_DIM_ENABLE_REFINEMENTS_FLAG in VARCHAR2,
  X_DIM_SEARCH_HIERARCHICAL_FLAG in VARCHAR2,
  X_REC_SEARCH_HIERARCHICAL_FLAG in VARCHAR2,
  X_MGD_ATTR_EID_RELEASE_VERSION in VARCHAR2,
  X_OBSOLETED_FLAG in VARCHAR2,
  X_OBSOLETED_EID_RELEASE_VERSIO in VARCHAR2,
X_VIEW_OBJECT_ATTR_NAME in VARCHAR2,
  X_ATTR_ENABLE_UPDATE_FLAG in VARCHAR2,
  X_ATTR_ENABLE_NULL_FLAG in VARCHAR2,
  X_ATTR_VALUE_SET_FLAG in VARCHAR2,
  X_VALUE_SET_NAME in VARCHAR2,
X_DISPLAY_NAME in VARCHAR2,
  X_ATTRIBUTE_DESC in VARCHAR2,
  X_USER_DISPLAY_NAME in VARCHAR2,
  X_USER_ATTRIBUTE_DESC in VARCHAR2,
  X_LAST_UPDATE_DATE in VARCHAR2,
  X_APPLICATION_SHORT_NAME in VARCHAR2,
  X_OWNER in VARCHAR2
) is

 user_id number;

begin

  IF ( x_owner IS NOT NULL ) THEN
    user_id := fnd_load_util.owner_id(x_owner);
  ELSE
    user_id := -1;
  END IF;

  IF ( user_id > 0 ) THEN
  update FND_EID_PDR_ATTRS_B set
    ENDECA_DATATYPE = X_ENDECA_DATATYPE,
    EID_ATTR_PROFILE_ID = X_EID_ATTR_PROFILE_ID,
    EID_RELEASE_VERSION = X_EID_RELEASE_VERSION,
    ATTRIBUTE_SOURCE = X_ATTRIBUTE_SOURCE,
    MANAGED_ATTRIBUTE_FLAG = X_MANAGED_ATTRIBUTE_FLAG,
    HIERARCHICAL_MGD_ATTR_FLAG = X_HIERARCHICAL_MGD_ATTR_FLAG,
    DIM_ENABLE_REFINEMENTS_FLAG = X_DIM_ENABLE_REFINEMENTS_FLAG,
    DIM_SEARCH_HIERARCHICAL_FLAG = X_DIM_SEARCH_HIERARCHICAL_FLAG,
    REC_SEARCH_HIERARCHICAL_FLAG = X_REC_SEARCH_HIERARCHICAL_FLAG,
    MGD_ATTR_EID_RELEASE_VERSION = X_MGD_ATTR_EID_RELEASE_VERSION,
VIEW_OBJECT_ATTR_NAME = X_VIEW_OBJECT_ATTR_NAME,
    ATTR_ENABLE_UPDATE_FLAG = X_ATTR_ENABLE_UPDATE_FLAG,
    ATTR_ENABLE_NULL_FLAG = X_ATTR_ENABLE_NULL_FLAG,
    ATTR_VALUE_SET_FLAG = X_ATTR_VALUE_SET_FLAG,
    VALUE_SET_NAME = X_VALUE_SET_NAME,
OBSOLETED_FLAG = X_OBSOLETED_FLAG,
    OBSOLETED_EID_RELEASE_VERSION = X_OBSOLETED_EID_RELEASE_VERSIO,
    LAST_UPDATE_DATE = TO_DATE(X_LAST_UPDATE_DATE,'YYYY/MM/DD'),
    LAST_UPDATED_BY = user_id,
    LAST_UPDATE_LOGIN = 0
  where EID_INSTANCE_ID = X_EID_INSTANCE_ID
  and EID_INSTANCE_ATTRIBUTE = X_EID_INSTANCE_ATTRIBUTE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  update FND_EID_PDR_ATTRS_TL set
    DISPLAY_NAME = X_DISPLAY_NAME,
    ATTRIBUTE_DESC = X_ATTRIBUTE_DESC,
    USER_DISPLAY_NAME = X_USER_DISPLAY_NAME,
    USER_ATTRIBUTE_DESC = X_USER_ATTRIBUTE_DESC,
    LAST_UPDATE_DATE = TO_DATE(X_LAST_UPDATE_DATE,'YYYY/MM/DD'),
    LAST_UPDATED_BY = user_id,
    LAST_UPDATE_LOGIN = 0,
    SOURCE_LANG = userenv('LANG')
  where EID_INSTANCE_ID = X_EID_INSTANCE_ID
  and EID_INSTANCE_ATTRIBUTE = X_EID_INSTANCE_ATTRIBUTE
  and userenv('LANG') in (LANGUAGE, SOURCE_LANG);

  if (sql%notfound) then
    raise no_data_found;
  end if;

  END IF;

end UPDATE_ROW;

procedure DELETE_ROW (
  X_EID_INSTANCE_ID in NUMBER,
  X_EID_INSTANCE_ATTRIBUTE in VARCHAR2
) is
begin
  delete from FND_EID_PDR_ATTRS_TL
  where EID_INSTANCE_ID = X_EID_INSTANCE_ID
  and EID_INSTANCE_ATTRIBUTE = X_EID_INSTANCE_ATTRIBUTE;

  if (sql%notfound) then
    raise no_data_found;
  end if;

  delete from FND_EID_PDR_ATTRS_B
  where EID_INSTANCE_ID = X_EID_INSTANCE_ID
  and EID_INSTANCE_ATTRIBUTE = X_EID_INSTANCE_ATTRIBUTE;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end DELETE_ROW;

procedure ADD_LANGUAGE
is
begin
/* Mar/19/03 requested by Ric Ginsberg */
/* The following delete and update statements are commented out */
/* as a quick workaround to fix the time-consuming table handler issue */
/* Eventually we'll need to turn them into a separate fix_language procedure */
/*

  delete from FND_EID_PDR_ATTRS_TL T
  where not exists
    (select NULL
    from FND_EID_PDR_ATTRS_B B
    where B.EID_INSTANCE_ID = T.EID_INSTANCE_ID
    and B.EID_INSTANCE_ATTRIBUTE = T.EID_INSTANCE_ATTRIBUTE
    );

  update FND_EID_PDR_ATTRS_TL T set (
      DISPLAY_NAME,
      ATTRIBUTE_DESC,
      USER_DISPLAY_NAME,
      USER_ATTRIBUTE_DESC
    ) = (select
      B.DISPLAY_NAME,
      B.ATTRIBUTE_DESC,
      B.USER_DISPLAY_NAME,
      B.USER_ATTRIBUTE_DESC
    from FND_EID_PDR_ATTRS_TL B
    where B.EID_INSTANCE_ID = T.EID_INSTANCE_ID
    and B.EID_INSTANCE_ATTRIBUTE = T.EID_INSTANCE_ATTRIBUTE
    and B.LANGUAGE = T.SOURCE_LANG)
  where (
      T.EID_INSTANCE_ID,
      T.EID_INSTANCE_ATTRIBUTE,
      T.LANGUAGE
  ) in (select
      SUBT.EID_INSTANCE_ID,
      SUBT.EID_INSTANCE_ATTRIBUTE,
      SUBT.LANGUAGE
    from FND_EID_PDR_ATTRS_TL SUBB, FND_EID_PDR_ATTRS_TL SUBT
    where SUBB.EID_INSTANCE_ID = SUBT.EID_INSTANCE_ID
    and SUBB.EID_INSTANCE_ATTRIBUTE = SUBT.EID_INSTANCE_ATTRIBUTE
    and SUBB.LANGUAGE = SUBT.SOURCE_LANG
    and (SUBB.DISPLAY_NAME <> SUBT.DISPLAY_NAME
      or SUBB.ATTRIBUTE_DESC <> SUBT.ATTRIBUTE_DESC
      or (SUBB.ATTRIBUTE_DESC is null and SUBT.ATTRIBUTE_DESC is not null)
      or (SUBB.ATTRIBUTE_DESC is not null and SUBT.ATTRIBUTE_DESC is null)
      or SUBB.USER_DISPLAY_NAME <> SUBT.USER_DISPLAY_NAME
      or (SUBB.USER_DISPLAY_NAME is null and SUBT.USER_DISPLAY_NAME is not null)
      or (SUBB.USER_DISPLAY_NAME is not null and SUBT.USER_DISPLAY_NAME is null)
      or SUBB.USER_ATTRIBUTE_DESC <> SUBT.USER_ATTRIBUTE_DESC
      or (SUBB.USER_ATTRIBUTE_DESC is null and SUBT.USER_ATTRIBUTE_DESC is not null)
      or (SUBB.USER_ATTRIBUTE_DESC is not null and SUBT.USER_ATTRIBUTE_DESC is null)
  ));

*/

  insert into FND_EID_PDR_ATTRS_TL (
    EID_INSTANCE_ID,
    EID_INSTANCE_ATTRIBUTE,
    DISPLAY_NAME,
    ATTRIBUTE_DESC,
    USER_DISPLAY_NAME,
    USER_ATTRIBUTE_DESC,
    CREATED_BY,
    CREATION_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_DATE,
    LAST_UPDATE_LOGIN,
    LANGUAGE,
    SOURCE_LANG
  ) select /*+ ORDERED */
    B.EID_INSTANCE_ID,
    B.EID_INSTANCE_ATTRIBUTE,
    B.DISPLAY_NAME,
    B.ATTRIBUTE_DESC,
    B.USER_DISPLAY_NAME,
    B.USER_ATTRIBUTE_DESC,
    B.CREATED_BY,
    B.CREATION_DATE,
    B.LAST_UPDATED_BY,
    B.LAST_UPDATE_DATE,
    B.LAST_UPDATE_LOGIN,
    L.LANGUAGE_CODE,
    B.SOURCE_LANG
  from FND_EID_PDR_ATTRS_TL B, FND_LANGUAGES L
  where L.INSTALLED_FLAG in ('I', 'B')
  and B.LANGUAGE = userenv('LANG')
  and not exists
    (select NULL
    from FND_EID_PDR_ATTRS_TL T
    where T.EID_INSTANCE_ID = B.EID_INSTANCE_ID
    and T.EID_INSTANCE_ATTRIBUTE = B.EID_INSTANCE_ATTRIBUTE
    and T.LANGUAGE = L.LANGUAGE_CODE);
end ADD_LANGUAGE;

end FND_EID_PDR_ATTRS_PKG;

/
