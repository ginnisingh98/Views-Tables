--------------------------------------------------------
--  DDL for Package Body XLA_ACCOUNTING_ERR_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."XLA_ACCOUNTING_ERR_PKG" AS
-- $Header: xlaaperr.pkb 120.20 2006/04/12 21:45:20 wychan ship $
/*===========================================================================+
|             Copyright (c) 2001-2002 Oracle Corporation                     |
|                       Redwood Shores, CA, USA                              |
|                         All rights reserved.                               |
+============================================================================+
| PACKAGE NAME                                                               |
|     xla_accounting_err_pkg                                                 |
|                                                                            |
| DESCRIPTION                                                                |
|     This is the body of the package that handles errors for accounting     |
|     entries generated by Accounting Program and Mnaual Enteries.           |
|                                                                            |
| HISTORY                                                                    |
|     09/09/2002      S. Singhania    Created                                |
|     11/30/2002      S. Singhania    Added call to 'xla_accounting_pkg.set_ |
|                                        error_count'                        |
|     12/12/2002      S. Singhania    Added more calls to 'xla_utitlity_pkg. |
|                                        trace' routine to help debug.       |
|     01/03/2003      S. Singhania    Minor changes due to change in column  |
|                                        name in xla_accounting_errors.      |
|                                        (ae_line_number => ae_line_num)     |
|     05/21/2003      S. Singhania    Added more trace messages in exception |
|                                        handlers                            |
|                                     Added local trace routine.             |
|                                     Fix for bug # 2970204                  |
|                                     Modified the specifications of         |
|                                       initialize()                         |
|     06/12/2003      S. Singhania    Added trace messages to the exception  |
|                                       in STACK_ERRORS                      |
|     07/29/2003      S. Singhania    Modified the specifications of         |
|                                       initialize()                         |
|                                     Modification for bug # 3072738         |
|                                       - Added the API GET_TOTAL_ERROR_COUNT|
|                                       - Code modified to count # of errors |
|                                         rather than failed events.         |
|     08/04/2003      S. Singhania    Added NVL to return value in           |
|                                       GET_TOTAL_ERROR_COUNT                |
|     08/12/2003      S. Singhania    Added trace to display message_name in |
|                                       STACK_ERROR                          |
|     08/27/2003      S. Singhania    Modified STACK_ERROR to insert message |
|                                       rather than encoded message.         |
|                                       Bug # 3113574                        |
|     09/09/2003      S. Singhania       Added the procedure body for        |
|                                          SET_ERROR_SOURCE                  |
|     10/14/2003      S. Singhania       Renamed SET_ERROR_SOURCE to         |
|                                          SET_OPTIONS.                      |
|                                        Added new parameters to INITIALIZE. |
|     02/28/2004      S. Singhania    Bug 3416534. Updated local trace       |
|                                       procedure and added FND_LOG messages |
|     03/23/2004      S. Singhania    Added a parameter p_module to the TRACE|
|                                       calls and the procedure.             |
+===========================================================================*/

--=============================================================================
--           ****************  declaraions  ********************
--=============================================================================
-------------------------------------------------------------------------------
-- declaring private variables
-------------------------------------------------------------------------------
g_error_index                  PLS_INTEGER := 0;
g_client_id                    VARCHAR2(30);
g_accounting_errors            xla_accounting_err_pkg.t_array_error;
g_error_source                 VARCHAR2(30);
g_request_id                   NUMBER;
g_application_id               NUMBER;
-------------------------------------------------------------------------------
-- forward declarion of private procedures and functions
-------------------------------------------------------------------------------
PROCEDURE reset;

PROCEDURE stack_error
       (p_appli_s_name            IN  VARCHAR2
       ,p_msg_name                IN  VARCHAR2
       ,p_entity_id               IN  NUMBER
       ,p_event_id                IN  NUMBER
       ,p_ledger_id               IN  NUMBER   DEFAULT NULL
       ,p_ae_header_id            IN  NUMBER   DEFAULT NULL
       ,p_ae_line_num             IN  NUMBER   DEFAULT NULL
       ,p_accounting_batch_id     IN  NUMBER   DEFAULT NULL);

--=============================================================================
--               *********** Local Trace Routine **********
--=============================================================================
C_LEVEL_STATEMENT     CONSTANT NUMBER := FND_LOG.LEVEL_STATEMENT;
C_LEVEL_PROCEDURE     CONSTANT NUMBER := FND_LOG.LEVEL_PROCEDURE;
C_LEVEL_EVENT         CONSTANT NUMBER := FND_LOG.LEVEL_EVENT;
C_LEVEL_EXCEPTION     CONSTANT NUMBER := FND_LOG.LEVEL_EXCEPTION;
C_LEVEL_ERROR         CONSTANT NUMBER := FND_LOG.LEVEL_ERROR;
C_LEVEL_UNEXPECTED    CONSTANT NUMBER := FND_LOG.LEVEL_UNEXPECTED;

C_LEVEL_LOG_DISABLED  CONSTANT NUMBER := 99;
C_DEFAULT_MODULE      CONSTANT VARCHAR2(240) := 'xla.plsql.xla_accounting_err_pkg';

g_log_level           NUMBER;
g_log_enabled         BOOLEAN;

PROCEDURE trace
       (p_msg                        IN VARCHAR2
       ,p_level                      IN NUMBER
       ,p_module                     IN VARCHAR2) IS
BEGIN

   IF (p_msg IS NULL AND p_level >= g_log_level) THEN
      fnd_log.message(p_level, p_module);
   ELSIF p_level >= g_log_level THEN
      fnd_log.string(p_level, p_module, p_msg);
   END IF;

EXCEPTION
   WHEN xla_exceptions_pkg.application_exception THEN
      RAISE;
   WHEN OTHERS THEN
      xla_exceptions_pkg.raise_message
         (p_location   => 'xla_accounting_err_pkg.trace');
END trace;


--=============================================================================
--          *********** public procedures and functions **********
--=============================================================================
--=============================================================================
--
--
--
--
--
--
--
--
--
--
-- Following are the public routines:
--
--    1.    build_message (no tokens)
--    2.    build_message (1 token)
--    3.    build_message (2 token)
--    4.    build_message (3 token)
--    5.    build_message (4 token)
--    6.    build_message (5 token)
--    7.    build_message (6 token)
--    8.    initialize
--    9.    insert_errors
--   10.    set_error_source
--
--
--
--
--
--
--
--
--
--
--
--=============================================================================

--=============================================================================
--
--
--=============================================================================
PROCEDURE build_message
       (p_appli_s_name            IN  VARCHAR2
       ,p_msg_name                IN  VARCHAR2
       ,p_entity_id               IN  NUMBER
       ,p_event_id                IN  NUMBER
       ,p_ledger_id               IN  NUMBER   DEFAULT NULL
       ,p_ae_header_id            IN  NUMBER   DEFAULT NULL
       ,p_ae_line_num             IN  NUMBER   DEFAULT NULL
       ,p_accounting_batch_id     IN  NUMBER   DEFAULT NULL) IS
l_log_module                VARCHAR2(240);
BEGIN
   IF g_log_enabled THEN
      l_log_module := C_DEFAULT_MODULE||'.build_message';
   END IF;
   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'BEGIN of procedure BUILD_MESSAGE'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_appli_s_name = '||p_appli_s_name
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_msg_name = '||p_msg_name
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_entity_id = '||p_entity_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_event_id = '||p_event_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ledger_id = '||p_ledger_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_header_id = '||p_ae_header_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_line_num = '||p_ae_line_num
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_accounting_batch_id = '||p_accounting_batch_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;

   xla_messages_pkg.build_message
      (p_appli_s_name                  => p_appli_s_name
      ,p_msg_name                      => p_msg_name);

   stack_error
      (p_appli_s_name                  => p_appli_s_name
      ,p_msg_name                      => p_msg_name
      ,p_entity_id                     => p_entity_id
      ,p_event_id                      => p_event_id
      ,p_ledger_id                     => p_ledger_id
      ,p_ae_header_id                  => p_ae_header_id
      ,p_ae_line_num                   => p_ae_line_num
      ,p_accounting_batch_id           => p_accounting_batch_id);

   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'END of procedure BUILD_MESSAGE'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;
EXCEPTION
WHEN xla_exceptions_pkg.application_exception THEN
   RAISE;
WHEN OTHERS THEN
   IF (C_LEVEL_EXCEPTION >= g_log_level) THEN
      trace
         (p_msg      => 'p_appli_s_name = '||p_appli_s_name
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_msg_name = '||p_msg_name
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_entity_id = '||p_entity_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_event_id = '||p_event_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ledger_id = '||p_ledger_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_header_id = '||p_ae_header_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_line_num = '||p_ae_line_num
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_accounting_batch_id = '||p_accounting_batch_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
   END IF;

   xla_exceptions_pkg.raise_message
       (p_location       => 'xla_accounting_err_pkg.build_message');
END build_message;  -- end of procedure


--=============================================================================
--
--
--=============================================================================
PROCEDURE build_message
       (p_appli_s_name            IN  VARCHAR2
       ,p_msg_name                IN  VARCHAR2
       ,p_token_1                 IN  VARCHAR2
       ,p_value_1                 IN  VARCHAR2
       ,p_entity_id               IN  NUMBER
       ,p_event_id                IN  NUMBER
       ,p_ledger_id               IN  NUMBER   DEFAULT NULL
       ,p_ae_header_id            IN  NUMBER   DEFAULT NULL
       ,p_ae_line_num             IN  NUMBER   DEFAULT NULL
       ,p_accounting_batch_id     IN  NUMBER   DEFAULT NULL) IS
l_log_module                VARCHAR2(240);
BEGIN
   IF g_log_enabled THEN
      l_log_module := C_DEFAULT_MODULE||'.build_message';
   END IF;
   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'BEGIN of procedure BUILD_MESSAGE'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_appli_s_name = '||p_appli_s_name
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_msg_name = '||p_msg_name
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_1 = '||p_token_1
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_1 = '||p_value_1
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_entity_id = '||p_entity_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_event_id = '||p_event_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ledger_id = '||p_ledger_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_header_id = '||p_ae_header_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_line_num = '||p_ae_line_num
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_accounting_batch_id = '||p_accounting_batch_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;

   xla_messages_pkg.build_message
      (p_appli_s_name                  => p_appli_s_name
      ,p_msg_name                      => p_msg_name
      ,p_token_1                       => p_token_1
      ,p_value_1                       => p_value_1);

   stack_error
      (p_appli_s_name                  => p_appli_s_name
      ,p_msg_name                      => p_msg_name
      ,p_entity_id                     => p_entity_id
      ,p_event_id                      => p_event_id
      ,p_ledger_id                     => p_ledger_id
      ,p_ae_header_id                  => p_ae_header_id
      ,p_ae_line_num                   => p_ae_line_num
      ,p_accounting_batch_id           => p_accounting_batch_id);

   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'END of procedure BUILD_MESSAGE'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;
EXCEPTION
WHEN xla_exceptions_pkg.application_exception THEN
   RAISE;
WHEN OTHERS THEN
   IF (C_LEVEL_EXCEPTION >= g_log_level) THEN
      trace
         (p_msg      => 'p_appli_s_name = '||p_appli_s_name
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_msg_name = '||p_msg_name
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_1 = '||p_token_1
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_1 = '||p_value_1
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_entity_id = '||p_entity_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_event_id = '||p_event_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ledger_id = '||p_ledger_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_header_id = '||p_ae_header_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_line_num = '||p_ae_line_num
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_accounting_batch_id = '||p_accounting_batch_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
   END IF;

   xla_exceptions_pkg.raise_message
       (p_location       => 'xla_accounting_err_pkg.build_message');
END build_message;  -- end of procedure


--=============================================================================
--
--
--=============================================================================
PROCEDURE build_message
       (p_appli_s_name            IN  VARCHAR2
       ,p_msg_name                IN  VARCHAR2
       ,p_token_1                 IN  VARCHAR2
       ,p_value_1                 IN  VARCHAR2
       ,p_token_2                 IN  VARCHAR2
       ,p_value_2                 IN  VARCHAR2
       ,p_entity_id               IN  NUMBER
       ,p_event_id                IN  NUMBER
       ,p_ledger_id               IN  NUMBER   DEFAULT NULL
       ,p_ae_header_id            IN  NUMBER   DEFAULT NULL
       ,p_ae_line_num             IN  NUMBER   DEFAULT NULL
       ,p_accounting_batch_id     IN  NUMBER   DEFAULT NULL) IS
l_log_module                VARCHAR2(240);
BEGIN
   IF g_log_enabled THEN
      l_log_module := C_DEFAULT_MODULE||'.build_message';
   END IF;
   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'BEGIN of procedure BUILD_MESSAGE'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_appli_s_name = '||p_appli_s_name
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_msg_name = '||p_msg_name
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_1 = '||p_token_1
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_1 = '||p_value_1
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_2 = '||p_token_2
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_2 = '||p_value_2
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_entity_id = '||p_entity_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_event_id = '||p_event_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ledger_id = '||p_ledger_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_header_id = '||p_ae_header_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_line_num = '||p_ae_line_num
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_accounting_batch_id = '||p_accounting_batch_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;

   xla_messages_pkg.build_message
      (p_appli_s_name                  => p_appli_s_name
      ,p_msg_name                      => p_msg_name
      ,p_token_1                       => p_token_1
      ,p_value_1                       => p_value_1
      ,p_token_2                       => p_token_2
      ,p_value_2                       => p_value_2);

   stack_error
      (p_appli_s_name                  => p_appli_s_name
      ,p_msg_name                      => p_msg_name
      ,p_entity_id                     => p_entity_id
      ,p_event_id                      => p_event_id
      ,p_ledger_id                     => p_ledger_id
      ,p_ae_header_id                  => p_ae_header_id
      ,p_ae_line_num                   => p_ae_line_num
      ,p_accounting_batch_id           => p_accounting_batch_id);

   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'END of procedure BUILD_MESSAGE'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;
EXCEPTION
WHEN xla_exceptions_pkg.application_exception THEN
   RAISE;
WHEN OTHERS THEN
   IF (C_LEVEL_EXCEPTION >= g_log_level) THEN
      trace
         (p_msg      => 'p_appli_s_name = '||p_appli_s_name
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_msg_name = '||p_msg_name
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_1 = '||p_token_1
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_1 = '||p_value_1
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_2 = '||p_token_2
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_2 = '||p_value_2
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_entity_id = '||p_entity_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_event_id = '||p_event_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ledger_id = '||p_ledger_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_header_id = '||p_ae_header_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_line_num = '||p_ae_line_num
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_accounting_batch_id = '||p_accounting_batch_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
   END IF;

   xla_exceptions_pkg.raise_message
       (p_location       => 'xla_accounting_err_pkg.build_message');
END build_message;  -- end of procedure


--=============================================================================
--
--
--=============================================================================
PROCEDURE build_message
       (p_appli_s_name            IN  VARCHAR2
       ,p_msg_name                IN  VARCHAR2
       ,p_token_1                 IN  VARCHAR2
       ,p_value_1                 IN  VARCHAR2
       ,p_token_2                 IN  VARCHAR2
       ,p_value_2                 IN  VARCHAR2
       ,p_token_3                 IN  VARCHAR2
       ,p_value_3                 IN  VARCHAR2
       ,p_entity_id               IN  NUMBER
       ,p_event_id                IN  NUMBER
       ,p_ledger_id               IN  NUMBER   DEFAULT NULL
       ,p_ae_header_id            IN  NUMBER   DEFAULT NULL
       ,p_ae_line_num             IN  NUMBER   DEFAULT NULL
       ,p_accounting_batch_id     IN  NUMBER   DEFAULT NULL) IS
l_log_module                VARCHAR2(240);
BEGIN
   IF g_log_enabled THEN
      l_log_module := C_DEFAULT_MODULE||'.build_message';
   END IF;
   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'BEGIN of procedure BUILD_MESSAGE'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_appli_s_name = '||p_appli_s_name
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_msg_name = '||p_msg_name
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_1 = '||p_token_1
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_1 = '||p_value_1
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_2 = '||p_token_2
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_2 = '||p_value_2
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_3 = '||p_token_3
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_3 = '||p_value_3
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_entity_id = '||p_entity_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_event_id = '||p_event_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ledger_id = '||p_ledger_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_header_id = '||p_ae_header_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_line_num = '||p_ae_line_num
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_accounting_batch_id = '||p_accounting_batch_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;

   xla_messages_pkg.build_message
      (p_appli_s_name                  => p_appli_s_name
      ,p_msg_name                      => p_msg_name
      ,p_token_1                       => p_token_1
      ,p_value_1                       => p_value_1
      ,p_token_2                       => p_token_2
      ,p_value_2                       => p_value_2
      ,p_token_3                       => p_token_3
      ,p_value_3                       => p_value_3);

   stack_error
      (p_appli_s_name                  => p_appli_s_name
      ,p_msg_name                      => p_msg_name
      ,p_entity_id                     => p_entity_id
      ,p_event_id                      => p_event_id
      ,p_ledger_id                     => p_ledger_id
      ,p_ae_header_id                  => p_ae_header_id
      ,p_ae_line_num                   => p_ae_line_num
      ,p_accounting_batch_id           => p_accounting_batch_id);

   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'END of procedure BUILD_MESSAGE'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;
EXCEPTION
WHEN xla_exceptions_pkg.application_exception THEN
   RAISE;
WHEN OTHERS THEN
   IF (C_LEVEL_EXCEPTION >= g_log_level) THEN
      trace
         (p_msg      => 'p_appli_s_name = '||p_appli_s_name
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_msg_name = '||p_msg_name
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_1 = '||p_token_1
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_1 = '||p_value_1
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_2 = '||p_token_2
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_2 = '||p_value_2
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_3 = '||p_token_3
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_3 = '||p_value_3
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_entity_id = '||p_entity_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_event_id = '||p_event_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ledger_id = '||p_ledger_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_header_id = '||p_ae_header_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_line_num = '||p_ae_line_num
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_accounting_batch_id = '||p_accounting_batch_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
   END IF;

   xla_exceptions_pkg.raise_message
       (p_location       => 'xla_accounting_err_pkg.build_message');
END build_message;  -- end of procedure


--=============================================================================
--
--
--=============================================================================
PROCEDURE build_message
       (p_appli_s_name            IN  VARCHAR2
       ,p_msg_name                IN  VARCHAR2
       ,p_token_1                 IN  VARCHAR2
       ,p_value_1                 IN  VARCHAR2
       ,p_token_2                 IN  VARCHAR2
       ,p_value_2                 IN  VARCHAR2
       ,p_token_3                 IN  VARCHAR2
       ,p_value_3                 IN  VARCHAR2
       ,p_token_4                 IN  VARCHAR2
       ,p_value_4                 IN  VARCHAR2
       ,p_entity_id               IN  NUMBER
       ,p_event_id                IN  NUMBER
       ,p_ledger_id               IN  NUMBER   DEFAULT NULL
       ,p_ae_header_id            IN  NUMBER   DEFAULT NULL
       ,p_ae_line_num             IN  NUMBER   DEFAULT NULL
       ,p_accounting_batch_id     IN  NUMBER   DEFAULT NULL) IS
l_log_module                VARCHAR2(240);
BEGIN
   IF g_log_enabled THEN
      l_log_module := C_DEFAULT_MODULE||'.build_message';
   END IF;
   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'BEGIN of procedure BUILD_MESSAGE'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_appli_s_name = '||p_appli_s_name
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_msg_name = '||p_msg_name
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_1 = '||p_token_1
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_1 = '||p_value_1
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_2 = '||p_token_2
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_2 = '||p_value_2
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_3 = '||p_token_3
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_3 = '||p_value_3
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_4 = '||p_token_4
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_4 = '||p_value_4
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_entity_id = '||p_entity_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_event_id = '||p_event_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ledger_id = '||p_ledger_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_header_id = '||p_ae_header_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_line_num = '||p_ae_line_num
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_accounting_batch_id = '||p_accounting_batch_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;

   xla_messages_pkg.build_message
      (p_appli_s_name                  => p_appli_s_name
      ,p_msg_name                      => p_msg_name
      ,p_token_1                       => p_token_1
      ,p_value_1                       => p_value_1
      ,p_token_2                       => p_token_2
      ,p_value_2                       => p_value_2
      ,p_token_3                       => p_token_3
      ,p_value_3                       => p_value_3
      ,p_token_4                       => p_token_4
      ,p_value_4                       => p_value_4);

   stack_error
      (p_appli_s_name                  => p_appli_s_name
      ,p_msg_name                      => p_msg_name
      ,p_entity_id                     => p_entity_id
      ,p_event_id                      => p_event_id
      ,p_ledger_id                     => p_ledger_id
      ,p_ae_header_id                  => p_ae_header_id
      ,p_ae_line_num                   => p_ae_line_num
      ,p_accounting_batch_id           => p_accounting_batch_id);

   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'END of procedure BUILD_MESSAGE'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;
EXCEPTION
WHEN xla_exceptions_pkg.application_exception THEN
   RAISE;
WHEN OTHERS THEN
   IF (C_LEVEL_EXCEPTION >= g_log_level) THEN
      trace
         (p_msg      => 'p_appli_s_name = '||p_appli_s_name
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_msg_name = '||p_msg_name
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_1 = '||p_token_1
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_1 = '||p_value_1
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_2 = '||p_token_2
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_2 = '||p_value_2
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_3 = '||p_token_3
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_3 = '||p_value_3
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_4 = '||p_token_4
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_4 = '||p_value_4
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_entity_id = '||p_entity_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_event_id = '||p_event_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ledger_id = '||p_ledger_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_header_id = '||p_ae_header_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_line_num = '||p_ae_line_num
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_accounting_batch_id = '||p_accounting_batch_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
   END IF;

   xla_exceptions_pkg.raise_message
       (p_location       => 'xla_accounting_err_pkg.build_message');
END build_message;  -- end of procedure


--=============================================================================
--
--
--=============================================================================
PROCEDURE build_message
       (p_appli_s_name            IN  VARCHAR2
       ,p_msg_name                IN  VARCHAR2
       ,p_token_1                 IN  VARCHAR2
       ,p_value_1                 IN  VARCHAR2
       ,p_token_2                 IN  VARCHAR2
       ,p_value_2                 IN  VARCHAR2
       ,p_token_3                 IN  VARCHAR2
       ,p_value_3                 IN  VARCHAR2
       ,p_token_4                 IN  VARCHAR2
       ,p_value_4                 IN  VARCHAR2
       ,p_token_5                 IN  VARCHAR2
       ,p_value_5                 IN  VARCHAR2
       ,p_entity_id               IN  NUMBER
       ,p_event_id                IN  NUMBER
       ,p_ledger_id               IN  NUMBER   DEFAULT NULL
       ,p_ae_header_id            IN  NUMBER   DEFAULT NULL
       ,p_ae_line_num             IN  NUMBER   DEFAULT NULL
       ,p_accounting_batch_id     IN  NUMBER   DEFAULT NULL) IS
l_log_module                VARCHAR2(240);
BEGIN
   IF g_log_enabled THEN
      l_log_module := C_DEFAULT_MODULE||'.build_message';
   END IF;
   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'BEGIN of procedure BUILD_MESSAGE'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_appli_s_name = '||p_appli_s_name
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_msg_name = '||p_msg_name
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_1 = '||p_token_1
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_1 = '||p_value_1
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_2 = '||p_token_2
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_2 = '||p_value_2
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_3 = '||p_token_3
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_3 = '||p_value_3
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_4 = '||p_token_4
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_4 = '||p_value_4
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_5 = '||p_token_5
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_5 = '||p_value_5
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_entity_id = '||p_entity_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_event_id = '||p_event_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ledger_id = '||p_ledger_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_header_id = '||p_ae_header_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_line_num = '||p_ae_line_num
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_accounting_batch_id = '||p_accounting_batch_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;

   xla_messages_pkg.build_message
      (p_appli_s_name                  => p_appli_s_name
      ,p_msg_name                      => p_msg_name
      ,p_token_1                       => p_token_1
      ,p_value_1                       => p_value_1
      ,p_token_2                       => p_token_2
      ,p_value_2                       => p_value_2
      ,p_token_3                       => p_token_3
      ,p_value_3                       => p_value_3
      ,p_token_4                       => p_token_4
      ,p_value_4                       => p_value_4
      ,p_token_5                       => p_token_5
      ,p_value_5                       => p_value_5);

   stack_error
      (p_appli_s_name                  => p_appli_s_name
      ,p_msg_name                      => p_msg_name
      ,p_entity_id                     => p_entity_id
      ,p_event_id                      => p_event_id
      ,p_ledger_id                     => p_ledger_id
      ,p_ae_header_id                  => p_ae_header_id
      ,p_ae_line_num                   => p_ae_line_num
      ,p_accounting_batch_id           => p_accounting_batch_id);

   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'END of procedure BUILD_MESSAGE'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;
EXCEPTION
WHEN xla_exceptions_pkg.application_exception THEN
   RAISE;
WHEN OTHERS THEN
   IF (C_LEVEL_EXCEPTION >= g_log_level) THEN
      trace
         (p_msg      => 'p_appli_s_name = '||p_appli_s_name
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_msg_name = '||p_msg_name
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_1 = '||p_token_1
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_1 = '||p_value_1
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_2 = '||p_token_2
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_2 = '||p_value_2
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_3 = '||p_token_3
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_3 = '||p_value_3
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_4 = '||p_token_4
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_4 = '||p_value_4
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_5 = '||p_token_5
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_5 = '||p_value_5
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_entity_id = '||p_entity_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_event_id = '||p_event_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ledger_id = '||p_ledger_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_header_id = '||p_ae_header_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_line_num = '||p_ae_line_num
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_accounting_batch_id = '||p_accounting_batch_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
   END IF;

   xla_exceptions_pkg.raise_message
       (p_location       => 'xla_accounting_err_pkg.build_message');
END build_message;  -- end of procedure



--=============================================================================
--
--
--=============================================================================
PROCEDURE build_message
       (p_appli_s_name            IN  VARCHAR2
       ,p_msg_name                IN  VARCHAR2
       ,p_token_1                 IN  VARCHAR2
       ,p_value_1                 IN  VARCHAR2
       ,p_token_2                 IN  VARCHAR2
       ,p_value_2                 IN  VARCHAR2
       ,p_token_3                 IN  VARCHAR2
       ,p_value_3                 IN  VARCHAR2
       ,p_token_4                 IN  VARCHAR2
       ,p_value_4                 IN  VARCHAR2
       ,p_token_5                 IN  VARCHAR2
       ,p_value_5                 IN  VARCHAR2
       ,p_token_6                 IN  VARCHAR2
       ,p_value_6                 IN  VARCHAR2
       ,p_entity_id               IN  NUMBER
       ,p_event_id                IN  NUMBER
       ,p_ledger_id               IN  NUMBER   DEFAULT NULL
       ,p_ae_header_id            IN  NUMBER   DEFAULT NULL
       ,p_ae_line_num             IN  NUMBER   DEFAULT NULL
       ,p_accounting_batch_id     IN  NUMBER   DEFAULT NULL) IS
l_log_module                VARCHAR2(240);
BEGIN
   IF g_log_enabled THEN
      l_log_module := C_DEFAULT_MODULE||'.build_message';
   END IF;
   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'BEGIN of procedure BUILD_MESSAGE'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_appli_s_name = '||p_appli_s_name
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_msg_name = '||p_msg_name
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_1 = '||p_token_1
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_1 = '||p_value_1
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_2 = '||p_token_2
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_2 = '||p_value_2
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_3 = '||p_token_3
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_3 = '||p_value_3
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_4 = '||p_token_4
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_4 = '||p_value_4
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_5 = '||p_token_5
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_5 = '||p_value_5
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_6 = '||p_token_6
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_6 = '||p_value_6
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_entity_id = '||p_entity_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_event_id = '||p_event_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ledger_id = '||p_ledger_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_header_id = '||p_ae_header_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_line_num = '||p_ae_line_num
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_accounting_batch_id = '||p_accounting_batch_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;

   xla_messages_pkg.build_message
      (p_appli_s_name                  => p_appli_s_name
      ,p_msg_name                      => p_msg_name
      ,p_token_1                       => p_token_1
      ,p_value_1                       => p_value_1
      ,p_token_2                       => p_token_2
      ,p_value_2                       => p_value_2
      ,p_token_3                       => p_token_3
      ,p_value_3                       => p_value_3
      ,p_token_4                       => p_token_4
      ,p_value_4                       => p_value_4
      ,p_token_5                       => p_token_5
      ,p_value_5                       => p_value_5
      ,p_token_6                       => p_token_6
      ,p_value_6                       => p_value_6);

   stack_error
      (p_appli_s_name                  => p_appli_s_name
      ,p_msg_name                      => p_msg_name
      ,p_entity_id                     => p_entity_id
      ,p_event_id                      => p_event_id
      ,p_ledger_id                     => p_ledger_id
      ,p_ae_header_id                  => p_ae_header_id
      ,p_ae_line_num                   => p_ae_line_num
      ,p_accounting_batch_id           => p_accounting_batch_id);

   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'END of procedure BUILD_MESSAGE'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;
EXCEPTION
WHEN xla_exceptions_pkg.application_exception THEN
   RAISE;
WHEN OTHERS THEN
   IF (C_LEVEL_EXCEPTION >= g_log_level) THEN
      trace
         (p_msg      => 'p_appli_s_name = '||p_appli_s_name
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_msg_name = '||p_msg_name
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_1 = '||p_token_1
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_1 = '||p_value_1
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_2 = '||p_token_2
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_2 = '||p_value_2
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_3 = '||p_token_3
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_3 = '||p_value_3
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_4 = '||p_token_4
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_4 = '||p_value_4
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_5 = '||p_token_5
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_5 = '||p_value_5
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_token_6 = '||p_token_6
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_value_6 = '||p_value_6
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_entity_id = '||p_entity_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_event_id = '||p_event_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ledger_id = '||p_ledger_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_header_id = '||p_ae_header_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_line_num = '||p_ae_line_num
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_accounting_batch_id = '||p_accounting_batch_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
   END IF;

   xla_exceptions_pkg.raise_message
       (p_location       => 'xla_accounting_err_pkg.build_message');
END build_message;  -- end of procedure


--=============================================================================
--
--
--=============================================================================
FUNCTION get_total_error_count
RETURN NUMBER IS
l_total_error_count         NUMBER;
l_log_module                VARCHAR2(240);
BEGIN
   IF g_log_enabled THEN
      l_log_module := C_DEFAULT_MODULE||'.get_total_error_count';
   END IF;
   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'BEGIN of function GET_TOTAL_ERROR_COUNT'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;

   l_total_error_count := NVL(xla_context_pkg.get_acct_err_context, 0);

   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'RETURN value l_total_error_count = '||l_total_error_count
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'END of function GET_TOTAL_ERROR_COUNT'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;

   RETURN l_total_error_count;
EXCEPTION
WHEN xla_exceptions_pkg.application_exception THEN
   RAISE;
WHEN OTHERS THEN
   xla_exceptions_pkg.raise_message
       (p_location       => 'xla_accounting_err_pkg.get_total_error_count');
END get_total_error_count; -- end of function


--=============================================================================
--
--
--=============================================================================

PROCEDURE initialize
       (p_client_id               IN  VARCHAR2 DEFAULT NULL
       ,p_error_limit             IN  NUMBER   DEFAULT NULL
       ,p_error_source            IN  VARCHAR2 DEFAULT NULL
       ,p_request_id              IN  NUMBER   DEFAULT NULL
       ,p_application_id          IN  NUMBER   DEFAULT NULL) IS
l_log_module                VARCHAR2(240);
BEGIN
   IF g_log_enabled THEN
      l_log_module := C_DEFAULT_MODULE||'.initialize';
   END IF;
   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'BEGIN of procedure INITIALIZE'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_client_id = '||p_client_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_error_limit = '||p_error_limit
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_error_source = '||p_error_source
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_request_id = '||p_request_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_application_id = '||p_application_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;

   g_client_id       := p_client_id;
   g_error_limit     := p_error_limit;
   g_error_source    := p_error_source;
   g_request_id      := NVL(p_request_id,NVL(g_request_id,xla_environment_pkg.g_req_id));
   g_application_id  := NVL(p_application_id,NVL(g_application_id,fnd_profile.value('RESP_APPL_ID')));
   g_error_count     := 0;
   g_warning_count   := 0;

   reset;

   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'END of procedure INITIALIZE'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;
EXCEPTION
WHEN xla_exceptions_pkg.application_exception THEN
   RAISE;
WHEN OTHERS THEN
   xla_exceptions_pkg.raise_message
       (p_location       => 'xla_accounting_err_pkg.initialize');
END initialize;  -- end of procedure


--=============================================================================
--
-- Following inserts the stacked errors into the error table in the database.
-- Once the errors have been inserted it calls the "reset"
--
--=============================================================================

PROCEDURE insert_errors IS
l_log_module                VARCHAR2(240);
BEGIN
   IF g_log_enabled THEN
      l_log_module := C_DEFAULT_MODULE||'.insert_errors';
   END IF;
   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'BEGIN of procedure INSERT_ERRORS'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;

   IF (C_LEVEL_STATEMENT >= g_log_level) THEN
      trace
         (p_msg      => 'Count of Error Messages in the stack = '||g_error_index
         ,p_level    => C_LEVEL_STATEMENT
         ,p_module   => l_log_module);
   END IF;

   IF g_error_index > 0 THEN
      FOR i IN g_accounting_errors.FIRST..g_accounting_errors.LAST LOOP
         INSERT INTO xla_accounting_errors
                        (accounting_error_id
                        ,application_id
                        ,event_id
                        ,entity_id
                        ,ledger_id
                        ,ae_header_id
                        ,ae_line_num
                        ,accounting_batch_id
                        ,message_number
                        ,encoded_msg
                        ,error_source_code
                        ,created_by
                        ,creation_date
                        ,last_update_date
                        ,last_updated_by
                        ,last_update_login
                        ,program_update_date
                        ,program_application_id
                        ,program_id
                        ,request_id)
                 VALUES (xla_accounting_errors_s.nextval
                        ,g_accounting_errors(i).application_id
                        ,g_accounting_errors(i).event_id
                        ,g_accounting_errors(i).entity_id
                        ,g_accounting_errors(i).ledger_id
                        ,g_accounting_errors(i).ae_header_id
                        ,g_accounting_errors(i).ae_line_num
                        ,g_accounting_errors(i).accounting_batch_id
                        ,g_accounting_errors(i).message_number
                        ,g_accounting_errors(i).encoded_msg
                        ,g_accounting_errors(i).error_source_code
                        ,xla_environment_pkg.g_usr_id
                        ,sysdate
                        ,sysdate
                        ,xla_environment_pkg.g_usr_id
                        ,xla_environment_pkg.g_login_id
                        ,NULL
                        ,xla_environment_pkg.g_prog_appl_id
                        ,xla_environment_pkg.g_prog_id
                        ,g_accounting_errors(i).request_id);
      END LOOP;
   END IF;

   ----------------------------------------------------------------------------
   -- call to reset is made to clear the pl/sql array
   ----------------------------------------------------------------------------
   reset;

   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'END of procedure INSERT_ERRORS'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;
EXCEPTION
WHEN xla_exceptions_pkg.application_exception THEN
   RAISE;
WHEN OTHERS THEN
   xla_exceptions_pkg.raise_message
       (p_location       => 'xla_accounting_err_pkg.insert_errors');
END insert_errors;  -- end of procedure



--=============================================================================
--
--
--
--=============================================================================

PROCEDURE set_options
       (p_error_source            IN  VARCHAR2 DEFAULT NULL
       ,p_request_id              IN  NUMBER   DEFAULT NULL
       ,p_application_id          IN  NUMBER   DEFAULT NULL) IS
l_log_module                VARCHAR2(240);
BEGIN
   IF g_log_enabled THEN
      l_log_module := C_DEFAULT_MODULE||'.set_options';
   END IF;
   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'BEGIN of procedure SET_OPTIONS'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_error_source = '||p_error_source
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_request_id = '||p_request_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_application_id = '||p_application_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;

   g_error_source    := NVL(p_error_source, g_error_source);
   g_request_id      := NVL(p_request_id, g_request_id);
   g_application_id  := NVL(p_application_id, g_application_id);

   IF (C_LEVEL_STATEMENT >= g_log_level) THEN
      trace
         (p_msg      => 'g_error_source = '||g_error_source
         ,p_level    => C_LEVEL_STATEMENT
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'g_request_id = '||g_request_id
         ,p_level    => C_LEVEL_STATEMENT
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'g_application_id = '||g_application_id
         ,p_level    => C_LEVEL_STATEMENT
         ,p_module   => l_log_module);
   END IF;

   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'END of procedure SET_OPTIONS'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;
EXCEPTION
WHEN xla_exceptions_pkg.application_exception THEN
   RAISE;
WHEN OTHERS THEN
   xla_exceptions_pkg.raise_message
       (p_location       => 'xla_accounting_err_pkg.set_options');
END set_options;  -- end of procedure



--=============================================================================
--          *********** private procedures and functions **********
--=============================================================================
--=============================================================================
--
--
--
--
--
--
--
--
--
--
-- Following are the private routines:
--
--    1.    stack_error
--    2.    reset
--
--
--
--
--
--
--
--
--
--
--
--=============================================================================

--=============================================================================
--
-- stack_error procedure, when called, reads the message from the fnd's message
-- stack and stores it in a pl/sql array. It assumes that all the errors for
-- an event are stacked before stacking errors for another event.
--
--=============================================================================

PROCEDURE stack_error
       (p_appli_s_name            IN  VARCHAR2
       ,p_msg_name                IN  VARCHAR2
       ,p_entity_id               IN  NUMBER
       ,p_event_id                IN  NUMBER
       ,p_ledger_id               IN  NUMBER   DEFAULT NULL
       ,p_ae_header_id            IN  NUMBER   DEFAULT NULL
       ,p_ae_line_num             IN  NUMBER   DEFAULT NULL
       ,p_accounting_batch_id     IN  NUMBER   DEFAULT NULL) IS
l_encoded_msg               VARCHAR2(2000);
l_msg_number                NUMBER;
l_ntemp                     NUMBER;
l_log_module                VARCHAR2(240);
BEGIN
   IF g_log_enabled THEN
      l_log_module := C_DEFAULT_MODULE||'.stack_error';
   END IF;
   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'BEGIN of procedure STACK_ERROR'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_appli_s_name = '||p_appli_s_name
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_msg_name = '||p_msg_name
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_entity_id = '||p_entity_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_event_id = '||p_event_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ledger_id = '||p_ledger_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_header_id = '||p_ae_header_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_line_num = '||p_ae_line_num
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_accounting_batch_id = '||p_accounting_batch_id
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;

   ----------------------------------------------------------------------------
   -- Store error message in plsql array
   -- Error messages are stored in 'encoded' form as retrived using fnd_message
   -- API.
   -- This has changed bug # 3113574. Now, the error message is not stored as
   -- encoded but as translated message.
   ----------------------------------------------------------------------------
   l_msg_number := fnd_message.get_number
                      (p_appli_s_name
                      ,p_msg_name);
   l_msg_number := NVL(l_msg_number, -1);

   IF (C_LEVEL_STATEMENT >= g_log_level) THEN
      trace
         (p_msg      => 'l_msg_number = '||l_msg_number
         ,p_level    => C_LEVEL_STATEMENT
         ,p_module   => l_log_module);
   END IF;

   --l_encoded_msg := fnd_message.get_encoded;
   l_encoded_msg := fnd_message.get();

   g_error_index  := g_error_index + 1;
   g_error_count  := g_error_count + 1;

   IF (p_msg_name IN ('XLA_BC_ADVISORY_HDR',  'XLA_BC_PARTIAL_HDR',
                      'XLA_BC_ADVISORY_LINE', 'XLA_BC_PARTIAL_LINE')) THEN
     g_warning_count := g_warning_count + 1;
   END IF;

   g_accounting_errors(g_error_index).application_id      := g_application_id;
   g_accounting_errors(g_error_index).event_id            := p_event_id;
   g_accounting_errors(g_error_index).entity_id           := p_entity_id;
   g_accounting_errors(g_error_index).ledger_id           := p_ledger_id;
   g_accounting_errors(g_error_index).ae_header_id        := p_ae_header_id;
   g_accounting_errors(g_error_index).ae_line_num         := p_ae_line_num;
   g_accounting_errors(g_error_index).accounting_batch_id := p_accounting_batch_id;
   g_accounting_errors(g_error_index).message_number      := l_msg_number;
   g_accounting_errors(g_error_index).encoded_msg         := l_encoded_msg;
   g_accounting_errors(g_error_index).error_source_code   := g_error_source;
   g_accounting_errors(g_error_index).request_id          := g_request_id;

   -------------------------------------------------------------------------
   -- In batch mode count of errors for a ledger are stored in a
   -- global context. Following updates the value in the global context.
   -------------------------------------------------------------------------
   IF g_client_id IS NOT NULL THEN
      l_ntemp := NVL(xla_context_pkg.get_acct_err_context, 0) + 1;

      xla_context_pkg.set_acct_err_context
         (p_error_count            => l_ntemp
         ,p_client_id              => g_client_id);
   END IF;

   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'END of procedure STACK_ERROR'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;
EXCEPTION
WHEN xla_exceptions_pkg.application_exception THEN
   RAISE;
WHEN OTHERS THEN
   IF (C_LEVEL_EXCEPTION >= g_log_level) THEN
      trace
         (p_msg      => 'p_appli_s_name = '||p_appli_s_name
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_msg_name = '||p_msg_name
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_entity_id = '||p_entity_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_event_id = '||p_event_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ledger_id = '||p_ledger_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_header_id = '||p_ae_header_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_ae_line_num = '||p_ae_line_num
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'p_accounting_batch_id = '||p_accounting_batch_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'g_error_count = '||g_error_count
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'g_warning_count = '||g_warning_count
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'g_client_id = '||g_client_id
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'l_msg_number = '||l_msg_number
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
      trace
         (p_msg      => 'g_error_index = '||g_error_index
         ,p_level    => C_LEVEL_EXCEPTION
         ,p_module   => l_log_module);
   END IF;

   xla_exceptions_pkg.raise_message
       (p_location       => 'xla_accounting_err_pkg.stack_error');
END stack_error;  -- end of procedure



--=============================================================================
--
-- reset procedure reinitializes the pl/sql array in which errors are stacked
-- in the memmory.
--
--=============================================================================

PROCEDURE reset IS
l_log_module                VARCHAR2(240);
BEGIN
   IF g_log_enabled THEN
      l_log_module := C_DEFAULT_MODULE||'.reset';
   END IF;
   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'BEGIN of procedure RESET'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;

   g_error_index := 0;
   g_accounting_errors.DELETE;

   IF (C_LEVEL_PROCEDURE >= g_log_level) THEN
      trace
         (p_msg      => 'END of procedure RESET'
         ,p_level    => C_LEVEL_PROCEDURE
         ,p_module   => l_log_module);
   END IF;
EXCEPTION
WHEN xla_exceptions_pkg.application_exception THEN
   RAISE;
WHEN OTHERS THEN
   xla_exceptions_pkg.raise_message
       (p_location       => 'xla_accounting_err_pkg.reset');
END reset;  -- end of procedure


--=============================================================================
--          *********** Initialization routine **********
--=============================================================================

--=============================================================================
--
--
--
--
--
--
--
--
--
--
-- Following code is executed when the package body is referenced for the first
-- time
--
--
--
--
--
--
--
--
--
--
--
--
--=============================================================================

BEGIN
   g_log_level      := FND_LOG.G_CURRENT_RUNTIME_LEVEL;
   g_log_enabled    := fnd_log.test
                          (log_level  => g_log_level
                          ,module     => C_DEFAULT_MODULE);

   IF NOT g_log_enabled  THEN
      g_log_level := C_LEVEL_LOG_DISABLED;
   END IF;
   initialize;

END xla_accounting_err_pkg;

/
