--------------------------------------------------------
--  DDL for Package Body QA_QLTSPECR_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."QA_QLTSPECR_XMLP_PKG" AS
/* $Header: QLTSPECRB.pls 120.0 2007/12/24 10:39:15 krreddy noship $ */
  FUNCTION C_TARGET_VALUEFORMULA(DATATYPE IN NUMBER
                                ,TARGET_VALUE IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    IF (DATATYPE = 2) THEN
      RETURN (TO_NUMBER(TARGET_VALUE
                      ,'9999999999999999.999999999999'));
    ELSE
      RETURN (2);
    END IF;
    RETURN NULL;
  END C_TARGET_VALUEFORMULA;

  FUNCTION C_UPPER_SPEC_NUMBERFORMULA(DATATYPE IN NUMBER
                                     ,UPPER_SPEC_LIMIT IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    IF (DATATYPE = 2) THEN
      RETURN (TO_NUMBER(UPPER_SPEC_LIMIT
                      ,'9999999999999999.999999999999'));
    ELSE
      RETURN (2);
    END IF;
    RETURN NULL;
  END C_UPPER_SPEC_NUMBERFORMULA;

  FUNCTION C_UPPER_USER_NUMBERFORMULA(DATATYPE IN NUMBER
                                     ,UPPER_USER_DEFINED_LIMIT IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    IF (DATATYPE = 2) THEN
      RETURN (TO_NUMBER(UPPER_USER_DEFINED_LIMIT
                      ,'9999999999999999.999999999999'));
    ELSE
      RETURN (2);
    END IF;
    RETURN NULL;
  END C_UPPER_USER_NUMBERFORMULA;

  FUNCTION C_UPPER_REASON_NUMBERFORMULA(DATATYPE IN NUMBER
                                       ,UPPER_REASONABLE_LIMIT IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    IF (DATATYPE = 2) THEN
      RETURN (TO_NUMBER(UPPER_REASONABLE_LIMIT
                      ,'9999999999999999.999999999999'));
    ELSE
      RETURN (2);
    END IF;
    RETURN NULL;
  END C_UPPER_REASON_NUMBERFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    IF (P_SPEC_NAME IS NOT NULL) THEN
      SELECT
        SPEC_NAME
      INTO P_SPEC_NAME
      FROM
        QA_SPECS
      WHERE SPEC_ID = P_SPEC_NAME;
      P_SPEC_NAME_LIMITER := 'and  qsv.spec_name = ''' || P_SPEC_NAME || '''';
    END IF;
    IF (P_CATEGORY_SET IS NOT NULL) THEN
      P_CATEGORY_SET_LIMITER := 'and  qsv.category_set_name = ''' || P_CATEGORY_SET || '''';
    END IF;
    IF (P_SPEC_TYPE IS NOT NULL) THEN
      P_SPEC_TYPE_LIMITER := 'and  qsv.ASSIGNMENT_TYPE = ''' || P_SPEC_TYPE || '''';
      SELECT
        MEANING
      INTO P_SPEC_TYPE_MEANING
      FROM
        MFG_LOOKUPS
      WHERE LOOKUP_TYPE = 'QA_SPEC_TYPE'
        AND LOOKUP_CODE = P_SPEC_TYPE;
    END IF;
    IF (P_VENDOR_NUMBER IS NOT NULL) THEN
      P_VENDOR_NUMBER_LIMITER := 'and qsv.VENDOR_NUMBER = ''' || P_VENDOR_NUMBER || '''';
    END IF;
    IF (P_CUSTOMER_NUMBER IS NOT NULL) THEN
      P_CUSTOMER_NUMBER_LIMITER := 'and qsv.customer_number = ''' || P_CUSTOMER_NUMBER || '''';
    END IF;
    IF (P_ORGANIZATION_ID IS NOT NULL) THEN
      P_ORG_LIMITER := 'and qsv.organization_id = ' || TO_CHAR(P_ORGANIZATION_ID);
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
    /*SRW.REFERENCE(P_STRUCT_NUM)*/NULL;
    /*SRW.REFERENCE(P_STRUCT_NUM)*/NULL;
   /* IF (P_ITEM IS NOT NULL) THEN
      P_ITEM_LIMITER := 'and ' || P_ITEM_LIMITER;
    END IF;
    IF (P_CATEGORY IS NOT NULL) THEN
      P_CATEGORY_LIMITER := 'and ' || P_CATEGORY_LIMITER;
    END IF;*/null;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION C_LOWER_SPEC_NUMBERFORMULA(DATATYPE IN NUMBER
                                     ,LOWER_SPEC_LIMIT IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    IF (DATATYPE = 2) THEN
      RETURN (TO_NUMBER(LOWER_SPEC_LIMIT
                      ,'9999999999999999.999999999999'));
    ELSE
      RETURN (2);
    END IF;
    RETURN NULL;
  END C_LOWER_SPEC_NUMBERFORMULA;

  FUNCTION C_LOWER_USER_NUMBERFORMULA(DATATYPE IN NUMBER
                                     ,LOWER_USER_DEFINED_LIMIT IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    IF (DATATYPE = 2) THEN
      RETURN (TO_NUMBER(LOWER_USER_DEFINED_LIMIT
                      ,'9999999999999999.999999999999'));
    ELSE
      RETURN (2);
    END IF;
    RETURN NULL;
  END C_LOWER_USER_NUMBERFORMULA;

  FUNCTION C_LOWER_REASON_NUMBERFORMULA(DATATYPE IN NUMBER
                                       ,LOWER_REASONABLE_LIMIT IN VARCHAR2) RETURN NUMBER IS
  BEGIN
    IF (DATATYPE = 2) THEN
      RETURN (TO_NUMBER(LOWER_REASONABLE_LIMIT
                      ,'9999999999999999.999999999999'));
    ELSE
      RETURN (2);
    END IF;
    RETURN NULL;
  END C_LOWER_REASON_NUMBERFORMULA;

 /* PROCEDURE GET_PRECISION(ID IN NUMBER) IS
  BEGIN
    SRW.ATTR.MASK := SRW.FORMATMASK_ATTR;
    IF ID = 0 THEN
      SRW.ATTR.FORMATMASK := '-NNNGNNNGNNNGNN0';
    ELSIF ID = 1 THEN
      SRW.ATTR.FORMATMASK := '-NNNGNNNGNNNGNN0D0';
    ELSIF ID = 2 THEN
      SRW.ATTR.FORMATMASK := '-NNNGNNNGNNNGNN0D00';
    ELSIF ID = 3 THEN
      SRW.ATTR.FORMATMASK := '-NNNGNNNGNNNGNN0D000';
    ELSIF ID = 4 THEN
      SRW.ATTR.FORMATMASK := '-NNNGNNNGNNNGNN0D0000';
    ELSIF ID = 5 THEN
      SRW.ATTR.FORMATMASK := '-NNNGNNNGNNNGNN0D000000';
    ELSIF ID = 6 THEN
      SRW.ATTR.FORMATMASK := '-NNNGNNNGNNNGNN0D0000000';
    ELSIF ID = 7 THEN
      SRW.ATTR.FORMATMASK := '-NNNGNNNGNNNGNN0D00000000';
    ELSIF ID = 8 THEN
      SRW.ATTR.FORMATMASK := '-NNNGNNNGNNNGNN0D000000000';
    ELSIF ID = 9 THEN
      SRW.ATTR.FORMATMASK := '-NNNGNNNGNNNGNN0D0000000000';
    ELSIF ID = 10 THEN
      SRW.ATTR.FORMATMASK := '-NNNGNNNGNNNGNN0D00000000000';
    ELSIF ID = 11 THEN
      SRW.ATTR.FORMATMASK := '-NNNGNNNGNNNGNN0D000000000000';
    ELSIF ID = 12 THEN
      SRW.ATTR.FORMATMASK := '-NNNGNNNGNNNGNN0D0000000000000';
    ELSE
      SRW.ATTR.FORMATMASK := '-NNNGNNNGNNNGNN0D00';
    END IF;
  END GET_PRECISION;*/

END QA_QLTSPECR_XMLP_PKG;


/
