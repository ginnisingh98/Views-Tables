--------------------------------------------------------
--  DDL for Package Body CN_ROLE_DETAILS_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."CN_ROLE_DETAILS_PKG" as
/* $Header: cntrldtb.pls 115.6 2002/11/21 21:10:35 hlchen ship $ */
procedure INSERT_ROW (
  X_ROWID in out nocopy VARCHAR2,
  X_ROLE_ID in NUMBER,
  X_CLUB_ELIGIBLE_FLAG in VARCHAR2,
  X_OTE in NUMBER,
  X_ROUNDING_FACTOR in NUMBER,
  X_ATTAIN_SCHEDULE_ID in NUMBER,
  X_PRO_RATING_SCH_ID in NUMBER,
  X_PLAN_LEVEL in NUMBER,
  X_QUOTA_MIN in NUMBER,
  X_QUOTA_MAX in NUMBER,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_PLAN_ACTIVATE_STATUS in VARCHAR2,
  X_REASON in VARCHAR2,
  X_CREATION_DATE in DATE,
  X_CREATED_BY in NUMBER,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
  cursor C is select ROWID from CN_ROLE_DETAILS
    where ROLE_ID = X_ROLE_ID
    ;
begin
  insert into CN_ROLE_DETAILS (
    ROLE_ID,
    CLUB_ELIGIBLE_FLAG,
    OTE,
    ROUNDING_FACTOR,
    ATTAIN_SCHEDULE_ID,
    PRO_RATING_SCH_ID,
    PLAN_LEVEL,
    QUOTA_MIN,
    QUOTA_MAX,
    ATTRIBUTE_CATEGORY,
    ATTRIBUTE1,
    ATTRIBUTE2,
    ATTRIBUTE3,
    ATTRIBUTE4,
    ATTRIBUTE5,
    ATTRIBUTE6,
    ATTRIBUTE7,
    ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
    ATTRIBUTE13,
    ATTRIBUTE14,
    ATTRIBUTE15,
    LAST_UPDATE_DATE,
    LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN,
    CREATION_DATE,
    CREATED_BY,
    PLAN_ACTIVATE_STATUS,
    REASON,
    OBJECT_VERSION_NUMBER
  ) values
  (
    X_ROLE_ID,
    X_CLUB_ELIGIBLE_FLAG,
    X_OTE,
    X_ROUNDING_FACTOR,
    X_ATTAIN_SCHEDULE_ID,
    X_PRO_RATING_SCH_ID,
    X_PLAN_LEVEL,
    X_QUOTA_MIN,
    X_QUOTA_MAX,
    X_ATTRIBUTE_CATEGORY,
    X_ATTRIBUTE1,
    X_ATTRIBUTE2,
    X_ATTRIBUTE3,
    X_ATTRIBUTE4,
    X_ATTRIBUTE5,
    X_ATTRIBUTE6,
    X_ATTRIBUTE7,
    X_ATTRIBUTE8,
    X_ATTRIBUTE9,
    X_ATTRIBUTE10,
    X_ATTRIBUTE11,
    X_ATTRIBUTE12,
    X_ATTRIBUTE13,
    X_ATTRIBUTE14,
    X_ATTRIBUTE15,
    X_LAST_UPDATE_DATE,
    X_LAST_UPDATED_BY,
    X_LAST_UPDATE_LOGIN,
    X_CREATION_DATE,
    X_CREATED_BY,
    X_PLAN_ACTIVATE_STATUS,
    X_REASON,
    X_OBJECT_VERSION_NUMBER
  );

  open c;
  fetch c into X_ROWID;
  if (c%notfound) then
    close c;
    raise no_data_found;
  end if;
  close c;

end INSERT_ROW;

procedure LOCK_ROW (
  X_ROLE_ID in NUMBER,
  X_CLUB_ELIGIBLE_FLAG in VARCHAR2,
  X_OTE in NUMBER,
  X_ROUNDING_FACTOR in NUMBER,
  X_ATTAIN_SCHEDULE_ID in NUMBER,
  X_PRO_RATING_SCH_ID in NUMBER,
  X_PLAN_LEVEL in NUMBER,
  X_QUOTA_MIN in NUMBER,
  X_QUOTA_MAX in NUMBER,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_PLAN_ACTIVATE_STATUS in VARCHAR2,
  X_REASON in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER
) is
  cursor c1 is select
      CLUB_ELIGIBLE_FLAG,
      OTE,
      ROUNDING_FACTOR,
      ATTAIN_SCHEDULE_ID,
      PRO_RATING_SCH_ID,
      PLAN_LEVEL,
      QUOTA_MIN,
      QUOTA_MAX,
      ATTRIBUTE_CATEGORY,
      ATTRIBUTE1,
      ATTRIBUTE2,
      ATTRIBUTE3,
      ATTRIBUTE4,
      ATTRIBUTE5,
      ATTRIBUTE6,
      ATTRIBUTE7,
      ATTRIBUTE8,
      ATTRIBUTE9,
      ATTRIBUTE10,
      ATTRIBUTE11,
      ATTRIBUTE12,
      ATTRIBUTE13,
      ATTRIBUTE14,
      ATTRIBUTE15,
      PLAN_ACTIVATE_STATUS,
      REASON,
      OBJECT_VERSION_NUMBER
    from CN_ROLE_DETAILS
    where ROLE_ID = X_ROLE_ID
    for update of ROLE_ID nowait;
begin
  for tlinfo in c1 loop
      if (    ((tlinfo.CLUB_ELIGIBLE_FLAG = X_CLUB_ELIGIBLE_FLAG)
               OR ((tlinfo.CLUB_ELIGIBLE_FLAG is null) AND (X_CLUB_ELIGIBLE_FLAG is null)))
          AND ((tlinfo.OTE = X_OTE)
               OR ((tlinfo.OTE is null) AND (X_OTE is null)))
          AND ((tlinfo.PLAN_ACTIVATE_STATUS = X_PLAN_ACTIVATE_STATUS)
               OR ((tlinfo.PLAN_ACTIVATE_STATUS is null) AND (X_PLAN_ACTIVATE_STATUS is null)))
          AND ((tlinfo.REASON = X_REASON)
               OR ((tlinfo.REASON is null) AND (X_REASON is null)))
          AND ((tlinfo.ROUNDING_FACTOR = X_ROUNDING_FACTOR)
               OR ((tlinfo.ROUNDING_FACTOR is null) AND (X_ROUNDING_FACTOR is null)))
          AND ((tlinfo.ATTAIN_SCHEDULE_ID = X_ATTAIN_SCHEDULE_ID)
               OR ((tlinfo.ATTAIN_SCHEDULE_ID is null) AND (X_ATTAIN_SCHEDULE_ID is null)))
          AND ((tlinfo.PRO_RATING_SCH_ID = X_PRO_RATING_SCH_ID)
               OR ((tlinfo.PRO_RATING_SCH_ID is null) AND (X_PRO_RATING_SCH_ID is null)))
          AND ((tlinfo.PLAN_LEVEL = X_PLAN_LEVEL)
               OR ((tlinfo.PLAN_LEVEL is null) AND (X_PLAN_LEVEL is null)))
          AND ((tlinfo.QUOTA_MIN = X_QUOTA_MIN)
               OR ((tlinfo.QUOTA_MIN is null) AND (X_QUOTA_MIN is null)))
          AND ((tlinfo.QUOTA_MAX = X_QUOTA_MAX)
               OR ((tlinfo.QUOTA_MAX is null) AND (X_QUOTA_MAX is null)))
          AND ((tlinfo.ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY)
               OR ((tlinfo.ATTRIBUTE_CATEGORY is null) AND (X_ATTRIBUTE_CATEGORY is null)))
          AND ((tlinfo.ATTRIBUTE1 = X_ATTRIBUTE1)
               OR ((tlinfo.ATTRIBUTE1 is null) AND (X_ATTRIBUTE1 is null)))
          AND ((tlinfo.ATTRIBUTE2 = X_ATTRIBUTE2)
               OR ((tlinfo.ATTRIBUTE2 is null) AND (X_ATTRIBUTE2 is null)))
          AND ((tlinfo.ATTRIBUTE3 = X_ATTRIBUTE3)
               OR ((tlinfo.ATTRIBUTE3 is null) AND (X_ATTRIBUTE3 is null)))
          AND ((tlinfo.ATTRIBUTE4 = X_ATTRIBUTE4)
               OR ((tlinfo.ATTRIBUTE4 is null) AND (X_ATTRIBUTE4 is null)))
          AND ((tlinfo.ATTRIBUTE5 = X_ATTRIBUTE5)
               OR ((tlinfo.ATTRIBUTE5 is null) AND (X_ATTRIBUTE5 is null)))
          AND ((tlinfo.ATTRIBUTE6 = X_ATTRIBUTE6)
               OR ((tlinfo.ATTRIBUTE6 is null) AND (X_ATTRIBUTE6 is null)))
          AND ((tlinfo.ATTRIBUTE7 = X_ATTRIBUTE7)
               OR ((tlinfo.ATTRIBUTE7 is null) AND (X_ATTRIBUTE7 is null)))
          AND ((tlinfo.ATTRIBUTE8 = X_ATTRIBUTE8)
               OR ((tlinfo.ATTRIBUTE8 is null) AND (X_ATTRIBUTE8 is null)))
          AND ((tlinfo.ATTRIBUTE9 = X_ATTRIBUTE9)
               OR ((tlinfo.ATTRIBUTE9 is null) AND (X_ATTRIBUTE9 is null)))
          AND ((tlinfo.ATTRIBUTE10 = X_ATTRIBUTE10)
               OR ((tlinfo.ATTRIBUTE10 is null) AND (X_ATTRIBUTE10 is null)))
          AND ((tlinfo.ATTRIBUTE11 = X_ATTRIBUTE11)
               OR ((tlinfo.ATTRIBUTE11 is null) AND (X_ATTRIBUTE11 is null)))
          AND ((tlinfo.ATTRIBUTE12 = X_ATTRIBUTE12)
               OR ((tlinfo.ATTRIBUTE12 is null) AND (X_ATTRIBUTE12 is null)))
          AND ((tlinfo.ATTRIBUTE13 = X_ATTRIBUTE13)
               OR ((tlinfo.ATTRIBUTE13 is null) AND (X_ATTRIBUTE13 is null)))
          AND ((tlinfo.ATTRIBUTE14 = X_ATTRIBUTE14)
               OR ((tlinfo.ATTRIBUTE14 is null) AND (X_ATTRIBUTE14 is null)))
          AND ((tlinfo.ATTRIBUTE15 = X_ATTRIBUTE15)
               OR ((tlinfo.ATTRIBUTE15 is null) AND (X_ATTRIBUTE15 is null)))
          AND (tlinfo.OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER)
      ) then
        null;
      else
        fnd_message.set_name('FND', 'FORM_RECORD_CHANGED');
        app_exception.raise_exception;
      end if;
  end loop;
  return;
end LOCK_ROW;

procedure UPDATE_ROW (
  X_ROLE_ID in NUMBER,
  X_CLUB_ELIGIBLE_FLAG in VARCHAR2,
  X_OTE in NUMBER,
  X_ROUNDING_FACTOR in NUMBER,
  X_ATTAIN_SCHEDULE_ID in NUMBER,
  X_PRO_RATING_SCH_ID in NUMBER,
  X_PLAN_LEVEL in NUMBER,
  X_QUOTA_MIN in NUMBER,
  X_QUOTA_MAX in NUMBER,
  X_ATTRIBUTE_CATEGORY in VARCHAR2,
  X_ATTRIBUTE1 in VARCHAR2,
  X_ATTRIBUTE2 in VARCHAR2,
  X_ATTRIBUTE3 in VARCHAR2,
  X_ATTRIBUTE4 in VARCHAR2,
  X_ATTRIBUTE5 in VARCHAR2,
  X_ATTRIBUTE6 in VARCHAR2,
  X_ATTRIBUTE7 in VARCHAR2,
  X_ATTRIBUTE8 in VARCHAR2,
  X_ATTRIBUTE9 in VARCHAR2,
  X_ATTRIBUTE10 in VARCHAR2,
  X_ATTRIBUTE11 in VARCHAR2,
  X_ATTRIBUTE12 in VARCHAR2,
  X_ATTRIBUTE13 in VARCHAR2,
  X_ATTRIBUTE14 in VARCHAR2,
  X_ATTRIBUTE15 in VARCHAR2,
  X_OBJECT_VERSION_NUMBER in NUMBER,
  X_PLAN_ACTIVATE_STATUS in VARCHAR2,
  X_REASON in VARCHAR2,
  X_LAST_UPDATE_DATE in DATE,
  X_LAST_UPDATED_BY in NUMBER,
  X_LAST_UPDATE_LOGIN in NUMBER
) is
begin
  update CN_ROLE_DETAILS set
    CLUB_ELIGIBLE_FLAG = X_CLUB_ELIGIBLE_FLAG,
    OTE = X_OTE,
    ROUNDING_FACTOR = X_ROUNDING_FACTOR,
    ATTAIN_SCHEDULE_ID = X_ATTAIN_SCHEDULE_ID,
    PRO_RATING_SCH_ID = X_PRO_RATING_SCH_ID,
    PLAN_LEVEL = X_PLAN_LEVEL,
    QUOTA_MIN = X_QUOTA_MIN,
    QUOTA_MAX = X_QUOTA_MAX,
    ATTRIBUTE_CATEGORY = X_ATTRIBUTE_CATEGORY,
    ATTRIBUTE1 = X_ATTRIBUTE1,
    ATTRIBUTE2 = X_ATTRIBUTE2,
    ATTRIBUTE3 = X_ATTRIBUTE3,
    ATTRIBUTE4 = X_ATTRIBUTE4,
    ATTRIBUTE5 = X_ATTRIBUTE5,
    ATTRIBUTE6 = X_ATTRIBUTE6,
    ATTRIBUTE7 = X_ATTRIBUTE7,
    ATTRIBUTE8 = X_ATTRIBUTE8,
    ATTRIBUTE9 = X_ATTRIBUTE9,
    ATTRIBUTE10 = X_ATTRIBUTE10,
    ATTRIBUTE11 = X_ATTRIBUTE11,
    ATTRIBUTE12 = X_ATTRIBUTE12,
    ATTRIBUTE13 = X_ATTRIBUTE13,
    ATTRIBUTE14 = X_ATTRIBUTE14,
    ATTRIBUTE15 = X_ATTRIBUTE15,
    OBJECT_VERSION_NUMBER = X_OBJECT_VERSION_NUMBER,
    PLAN_ACTIVATE_STATUS = X_PLAN_ACTIVATE_STATUS,
    REASON = X_REASON,
    LAST_UPDATE_DATE = X_LAST_UPDATE_DATE,
    LAST_UPDATED_BY = X_LAST_UPDATED_BY,
    LAST_UPDATE_LOGIN = X_LAST_UPDATE_LOGIN
  where ROLE_ID = X_ROLE_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;
end UPDATE_ROW;

procedure DELETE_ROW (
  X_ROLE_ID in NUMBER
) is
begin
  delete from CN_ROLE_DETAILS
  where ROLE_ID = X_ROLE_ID;

  if (sql%notfound) then
    raise no_data_found;
  end if;

end DELETE_ROW;

end CN_ROLE_DETAILS_PKG;

/
