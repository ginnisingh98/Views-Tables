--------------------------------------------------------
--  DDL for Package Body PA_PAXTRTRX_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PA_PAXTRTRX_XMLP_PKG" AS
/* $Header: PAXTRTRXB.pls 120.0 2008/01/02 12:19:25 krreddy noship $ */
  L_ERROR BOOLEAN;
  FUNCTION GET_COVER_PAGE_VALUES RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COVER_PAGE_VALUES;
  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    DECLARE
      NDF VARCHAR2(80);
      X_ERROR_MSG VARCHAR2(80);
      XFACE_ID NUMBER;
      X_PURGEABLE VARCHAR2(1);
      DUMMY NUMBER;
      INIT_FAILURE EXCEPTION;
      INVALID_TRX_SOURCE EXCEPTION;
    BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
      LP_user_id := fnd_global.USER_ID;
      /*SRW.USER_EXIT('FND SRWINIT')*/NULL;
      /*SRW.USER_EXIT('FND GETPROFILE
                                         NAME="USER_ID"
                                         FIELD=":P_user_id"
                                         PRINT_ERROR="N"')*/NULL;
      P_DEBUG_MODE := FND_PROFILE.VALUE('PA_DEBUG_MODE');
      IF (GET_COMPANY_NAME <> TRUE) THEN
        RAISE INIT_FAILURE;
      END IF;
      BEGIN
        SELECT
          L.MEANING
        INTO NDF
        FROM
          PA_LOOKUPS L
        WHERE L.LOOKUP_TYPE = 'MESSAGE'
          AND L.LOOKUP_CODE = 'NO_DATA_FOUND';
        C_NO_DATA_FOUND := NDF;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          NULL;
      END;
      BEGIN
        SELECT
          PURGEABLE_FLAG
        INTO X_PURGEABLE
        FROM
          PA_TRANSACTION_SOURCES
        WHERE TRANSACTION_SOURCE = P_TRX_SOURCE;
        P_PURGEABLE := X_PURGEABLE;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          RAISE INVALID_TRX_SOURCE;
      END;
      BEGIN
        SELECT
          PA_INTERFACE_ID_S.NEXTVAL
        INTO XFACE_ID
        FROM
          SYS.DUAL;
        P_XFACE_ID := XFACE_ID;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      END;
      PA_TRX_IMPORT.IMPORT(P_TRX_SOURCE
                          ,P_BATCH_NAME
                          ,P_XFACE_ID
                          ,LP_user_id
                          ,NULL);
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        C_DUMMY_DATA := 1;
      WHEN INVALID_TRX_SOURCE THEN
        SELECT
          MEANING
        INTO X_ERROR_MSG
        FROM
          PA_LOOKUPS
        WHERE LOOKUP_TYPE = 'TRANSACTION REJECTION REASON'
          AND LOOKUP_CODE = 'INVALID_TRX_SOURCE';
        C_ERROR_MSG := X_ERROR_MSG;
        /*SRW.MESSAGE(1
                   ,C_ERROR_MSG)*/NULL;
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
      WHEN OTHERS THEN
        /*SRW.MESSAGE(SQLCODE * -1
                   ,SQLERRM)*/NULL;
        SET_ERROR_STATUS;
    END;
    RETURN (TRUE);
  END BEFOREREPORT;
  FUNCTION GET_COMPANY_NAME RETURN BOOLEAN IS
    L_NAME GL_SETS_OF_BOOKS.NAME%TYPE;
  BEGIN
    SELECT
      GL.NAME
    INTO L_NAME
    FROM
      GL_SETS_OF_BOOKS GL,
      PA_IMPLEMENTATIONS PI
    WHERE GL.SET_OF_BOOKS_ID = PI.SET_OF_BOOKS_ID;
    C_COMPANY_NAME_HEADER := L_NAME;
    RETURN (TRUE);
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END GET_COMPANY_NAME;
  FUNCTION AFTERREPORT RETURN BOOLEAN IS
    COMPLETION_STATUS BOOLEAN;
  BEGIN
    BEGIN
      IF (P_PURGEABLE = 'Y') THEN
        BEGIN
          DELETE FROM PA_MC_TXN_INTERFACE_ALL
           WHERE TXN_INTERFACE_ID in (
             SELECT
               TXN_INTERFACE_ID
             FROM
               PA_TRANSACTION_INTERFACE
             WHERE INTERFACE_ID = P_XFACE_ID
               AND ( ( TRANSACTION_STATUS_CODE = 'A' )
             OR ( TRANSACTION_SOURCE = 'ORACLE TIME AND LABOR' ) ) );
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            NULL;
        END;
        DELETE FROM PA_TRANSACTION_INTERFACE
         WHERE INTERFACE_ID = P_XFACE_ID
           AND ( ( TRANSACTION_STATUS_CODE = 'A' )
         OR ( TRANSACTION_SOURCE = 'ORACLE TIME AND LABOR' ) );
      END IF;
      DELETE FROM PA_TRANSACTION_XFACE_CONTROL
       WHERE INTERFACE_ID = P_XFACE_ID
         AND STATUS = 'PROCESSED';
      IF GET_ERROR_STATUS THEN
        COMPLETION_STATUS := FND_CONCURRENT.SET_COMPLETION_STATUS('ERROR'
                                                                 ,SQLERRM);
      END IF;
      /*SRW.USER_EXIT('FND SRWEXIT')*/NULL;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        NULL;
      WHEN OTHERS THEN
        /*RAISE SRW.PROGRAM_ABORT*/RAISE_APPLICATION_ERROR(-20101,null);
    END;
    RETURN (TRUE);
  END AFTERREPORT;
  FUNCTION C_COMPANY_NAME_HEADER_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_COMPANY_NAME_HEADER;
  END C_COMPANY_NAME_HEADER_P;
  FUNCTION C_NO_DATA_FOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_NO_DATA_FOUND;
  END C_NO_DATA_FOUND_P;
  FUNCTION C_DUMMY_DATA_P RETURN NUMBER IS
  BEGIN
    RETURN C_DUMMY_DATA;
  END C_DUMMY_DATA_P;
  FUNCTION C_ERROR_CODE_P RETURN NUMBER IS
  BEGIN
    RETURN C_ERROR_CODE;
  END C_ERROR_CODE_P;
  FUNCTION C_ERROR_MSG_P RETURN VARCHAR2 IS
  BEGIN
    RETURN C_ERROR_MSG;
  END C_ERROR_MSG_P;
  PROCEDURE SET_ERROR_STATUS IS
  BEGIN
    L_ERROR := TRUE;
  END SET_ERROR_STATUS;
  FUNCTION GET_ERROR_STATUS RETURN BOOLEAN IS
  BEGIN
    RETURN L_ERROR;
  END GET_ERROR_STATUS;
END PA_PAXTRTRX_XMLP_PKG;


/
