--------------------------------------------------------
--  DDL for Package Body LNS_AMORTIZATION_LINES_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."LNS_AMORTIZATION_LINES_PKG" AS
/* $Header: LNS_AMLNS_TBLH_B.pls 120.0 2005/05/31 18:39:07 appldev noship $ */

/* Insert_Row procedure */
PROCEDURE Insert_Row(
	X_AMORTIZATION_LINE_ID		IN OUT NOCOPY NUMBER
	,P_AMORTIZATION_SCHEDULE_ID		IN NUMBER
	,P_LOAN_ID		IN NUMBER
	,P_LINE_TYPE		IN VARCHAR2
	,P_AMOUNT		IN NUMBER
	,P_CUST_TRX_ID		IN NUMBER
	,P_CUST_TRX_LINE_ID		IN NUMBER
	,P_FEE_ID		IN NUMBER
	,P_OBJECT_VERSION_NUMBER		IN NUMBER
	,P_CREATION_DATE		IN DATE
	,P_CREATED_BY		IN NUMBER
	,P_LAST_UPDATE_DATE		IN DATE
	,P_LAST_UPDATED_BY		IN NUMBER
	,P_LAST_UPDATE_LOGIN		IN NUMBER
	,P_FEE_SCHEDULE_ID		IN NUMBER
) IS
BEGIN
	INSERT INTO LNS_AMORTIZATION_LINES
	(
		AMORTIZATION_LINE_ID
		,AMORTIZATION_SCHEDULE_ID
		,LOAN_ID
		,LINE_TYPE
		,AMOUNT
		,CUST_TRX_ID
		,CUST_TRX_LINE_ID
		,FEE_ID
		,OBJECT_VERSION_NUMBER
		,CREATION_DATE
		,CREATED_BY
		,LAST_UPDATE_DATE
		,LAST_UPDATED_BY
		,LAST_UPDATE_LOGIN
		,FEE_SCHEDULE_ID
	) VALUES (
		DECODE(X_AMORTIZATION_LINE_ID, FND_API.G_MISS_NUM, LNS_AMORTIZATION_LINES_S.NEXTVAL, NULL, LNS_AMORTIZATION_LINES_S.NEXTVAL, X_AMORTIZATION_LINE_ID)
		,DECODE(P_AMORTIZATION_SCHEDULE_ID, FND_API.G_MISS_NUM, NULL, P_AMORTIZATION_SCHEDULE_ID)
		,DECODE(P_LOAN_ID, FND_API.G_MISS_NUM, NULL, P_LOAN_ID)
		,DECODE(P_LINE_TYPE, FND_API.G_MISS_CHAR, NULL, P_LINE_TYPE)
		,DECODE(P_AMOUNT, FND_API.G_MISS_NUM, NULL, P_AMOUNT)
		,DECODE(P_CUST_TRX_ID, FND_API.G_MISS_NUM, NULL, P_CUST_TRX_ID)
		,DECODE(P_CUST_TRX_LINE_ID, FND_API.G_MISS_NUM, NULL, P_CUST_TRX_LINE_ID)
		,DECODE(P_FEE_ID, FND_API.G_MISS_NUM, NULL, P_FEE_ID)
		,DECODE(P_OBJECT_VERSION_NUMBER, FND_API.G_MISS_NUM, NULL, P_OBJECT_VERSION_NUMBER)
		,LNS_UTILITY_PUB.CREATION_DATE
		,LNS_UTILITY_PUB.CREATED_BY
		,LNS_UTILITY_PUB.LAST_UPDATE_DATE
		,LNS_UTILITY_PUB.LAST_UPDATED_BY
		,LNS_UTILITY_PUB.LAST_UPDATE_LOGIN
		,DECODE(P_FEE_SCHEDULE_ID, FND_API.G_MISS_NUM, NULL, P_FEE_SCHEDULE_ID)
	) RETURNING
		 AMORTIZATION_LINE_ID
	 INTO
		 X_AMORTIZATION_LINE_ID;
END Insert_Row;

/* Update_Row procedure */
PROCEDURE Update_Row(
	P_AMORTIZATION_LINE_ID		IN NUMBER
	,P_AMORTIZATION_SCHEDULE_ID		IN NUMBER
	,P_LOAN_ID		IN NUMBER
	,P_LINE_TYPE		IN VARCHAR2
	,P_AMOUNT		IN NUMBER
	,P_CUST_TRX_ID		IN NUMBER
	,P_CUST_TRX_LINE_ID		IN NUMBER
	,P_FEE_ID		IN NUMBER
	,P_OBJECT_VERSION_NUMBER		IN NUMBER
	,P_LAST_UPDATE_DATE		IN DATE
	,P_LAST_UPDATED_BY		IN NUMBER
	,P_LAST_UPDATE_LOGIN		IN NUMBER
	,P_FEE_SCHEDULE_ID		IN NUMBER
) IS
BEGIN
	UPDATE LNS_AMORTIZATION_LINES SET
		AMORTIZATION_SCHEDULE_ID = DECODE(P_AMORTIZATION_SCHEDULE_ID, NULL, AMORTIZATION_SCHEDULE_ID, FND_API.G_MISS_NUM, NULL, P_AMORTIZATION_SCHEDULE_ID)
		,LOAN_ID = DECODE(P_LOAN_ID, NULL, LOAN_ID, FND_API.G_MISS_NUM, NULL, P_LOAN_ID)
		,LINE_TYPE = DECODE(P_LINE_TYPE, NULL, LINE_TYPE, FND_API.G_MISS_CHAR, NULL, P_LINE_TYPE)
		,AMOUNT = DECODE(P_AMOUNT, NULL, AMOUNT, FND_API.G_MISS_NUM, NULL, P_AMOUNT)
		,CUST_TRX_ID = DECODE(P_CUST_TRX_ID, NULL, CUST_TRX_ID, FND_API.G_MISS_NUM, NULL, P_CUST_TRX_ID)
		,CUST_TRX_LINE_ID = DECODE(P_CUST_TRX_LINE_ID, NULL, CUST_TRX_LINE_ID, FND_API.G_MISS_NUM, NULL, P_CUST_TRX_LINE_ID)
		,FEE_ID = DECODE(P_FEE_ID, NULL, FEE_ID, FND_API.G_MISS_NUM, NULL, P_FEE_ID)
		,OBJECT_VERSION_NUMBER = DECODE(P_OBJECT_VERSION_NUMBER, NULL, OBJECT_VERSION_NUMBER, FND_API.G_MISS_NUM, NULL, P_OBJECT_VERSION_NUMBER)
		,LAST_UPDATE_DATE = LNS_UTILITY_PUB.LAST_UPDATE_DATE
		,LAST_UPDATED_BY = LNS_UTILITY_PUB.LAST_UPDATED_BY
		,LAST_UPDATE_LOGIN = LNS_UTILITY_PUB.LAST_UPDATE_LOGIN
		,FEE_SCHEDULE_ID = DECODE(P_FEE_SCHEDULE_ID, NULL, FEE_SCHEDULE_ID, FND_API.G_MISS_NUM, NULL, P_FEE_SCHEDULE_ID)
	 WHERE AMORTIZATION_LINE_ID = P_AMORTIZATION_LINE_ID;

	if (sql%notfound) then
		raise no_data_found;
	end if;
END Update_Row;

/* Delete_Row procedure */
PROCEDURE Delete_Row(P_AMORTIZATION_LINE_ID IN NUMBER) IS
BEGIN
	DELETE FROM LNS_AMORTIZATION_LINES
		WHERE AMORTIZATION_LINE_ID = P_AMORTIZATION_LINE_ID;

	if (sql%notfound) then
		raise no_data_found;
	end if;
END Delete_Row;

/* Lock_Row procedure */
PROCEDURE Lock_Row(
	P_AMORTIZATION_LINE_ID		IN NUMBER
	,P_AMORTIZATION_SCHEDULE_ID		IN NUMBER
	,P_LOAN_ID		IN NUMBER
	,P_LINE_TYPE		IN VARCHAR2
	,P_AMOUNT		IN NUMBER
	,P_CUST_TRX_ID		IN NUMBER
	,P_CUST_TRX_LINE_ID		IN NUMBER
	,P_FEE_ID		IN NUMBER
	,P_OBJECT_VERSION_NUMBER		IN NUMBER
	,P_CREATION_DATE		IN DATE
	,P_CREATED_BY		IN NUMBER
	,P_LAST_UPDATE_DATE		IN DATE
	,P_LAST_UPDATED_BY		IN NUMBER
	,P_LAST_UPDATE_LOGIN		IN NUMBER
	,P_FEE_SCHEDULE_ID		IN NUMBER
) IS
	CURSOR C IS SELECT * FROM LNS_AMORTIZATION_LINES
		WHERE AMORTIZATION_LINE_ID = P_AMORTIZATION_LINE_ID
		FOR UPDATE of AMORTIZATION_LINE_ID NOWAIT;
	Recinfo C%ROWTYPE;
BEGIN
	OPEN C;
	FETCH C INTO Recinfo;
	IF (C%NOTFOUND) THEN
		CLOSE C;
		FND_MESSAGE.Set_Name('FND', 'FORM_RECORD_DELETED');
		APP_EXCEPTION.Raise_Exception;
	END IF;
	CLOSE C;

	IF (
		(Recinfo.AMORTIZATION_LINE_ID = P_AMORTIZATION_LINE_ID)
		AND ( (Recinfo.AMORTIZATION_SCHEDULE_ID = P_AMORTIZATION_SCHEDULE_ID)
			OR ( (Recinfo.AMORTIZATION_SCHEDULE_ID IS NULL)
				AND (P_AMORTIZATION_SCHEDULE_ID IS NULL)))
		AND ( (Recinfo.LOAN_ID = P_LOAN_ID)
			OR ( (Recinfo.LOAN_ID IS NULL)
				AND (P_LOAN_ID IS NULL)))
		AND ( (Recinfo.LINE_TYPE = P_LINE_TYPE)
			OR ( (Recinfo.LINE_TYPE IS NULL)
				AND (P_LINE_TYPE IS NULL)))
		AND ( (Recinfo.AMOUNT = P_AMOUNT)
			OR ( (Recinfo.AMOUNT IS NULL)
				AND (P_AMOUNT IS NULL)))
		AND ( (Recinfo.CUST_TRX_ID = P_CUST_TRX_ID)
			OR ( (Recinfo.CUST_TRX_ID IS NULL)
				AND (P_CUST_TRX_ID IS NULL)))
		AND ( (Recinfo.CUST_TRX_LINE_ID = P_CUST_TRX_LINE_ID)
			OR ( (Recinfo.CUST_TRX_LINE_ID IS NULL)
				AND (P_CUST_TRX_LINE_ID IS NULL)))
		AND ( (Recinfo.FEE_ID = P_FEE_ID)
			OR ( (Recinfo.FEE_ID IS NULL)
				AND (P_FEE_ID IS NULL)))
		AND ( (Recinfo.OBJECT_VERSION_NUMBER = P_OBJECT_VERSION_NUMBER)
			OR ( (Recinfo.OBJECT_VERSION_NUMBER IS NULL)
				AND (P_OBJECT_VERSION_NUMBER IS NULL)))
		AND ( (Recinfo.CREATION_DATE = P_CREATION_DATE)
			OR ( (Recinfo.CREATION_DATE IS NULL)
				AND (P_CREATION_DATE IS NULL)))
		AND ( (Recinfo.CREATED_BY = P_CREATED_BY)
			OR ( (Recinfo.CREATED_BY IS NULL)
				AND (P_CREATED_BY IS NULL)))
		AND ( (Recinfo.LAST_UPDATE_DATE = P_LAST_UPDATE_DATE)
			OR ( (Recinfo.LAST_UPDATE_DATE IS NULL)
				AND (P_LAST_UPDATE_DATE IS NULL)))
		AND ( (Recinfo.LAST_UPDATED_BY = P_LAST_UPDATED_BY)
			OR ( (Recinfo.LAST_UPDATED_BY IS NULL)
				AND (P_LAST_UPDATED_BY IS NULL)))
		AND ( (Recinfo.LAST_UPDATE_LOGIN = P_LAST_UPDATE_LOGIN)
			OR ( (Recinfo.LAST_UPDATE_LOGIN IS NULL)
				AND (P_LAST_UPDATE_LOGIN IS NULL)))
		AND ( (Recinfo.FEE_SCHEDULE_ID = P_FEE_SCHEDULE_ID)
			OR ( (Recinfo.FEE_SCHEDULE_ID IS NULL)
				AND (P_FEE_SCHEDULE_ID IS NULL)))
	   ) THEN
		return;
	ELSE
		FND_MESSAGE.Set_Name('FND', 'FORM_RECORD_CHANGED');
		APP_EXCEPTION.Raise_Exception;
	END IF;
END Lock_Row;
END;


/
