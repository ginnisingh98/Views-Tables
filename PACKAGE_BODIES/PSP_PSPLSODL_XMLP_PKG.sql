--------------------------------------------------------
--  DDL for Package Body PSP_PSPLSODL_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PSP_PSPLSODL_XMLP_PKG" AS
/* $Header: PSPLSODLB.pls 120.3 2007/10/29 07:25:34 amakrish noship $ */
  FUNCTION CF_ORGANIZATION_NAMEFORMULA(ORGANIZATION_ID_v IN NUMBER) RETURN VARCHAR2 IS
    V_ORGANIZATION_NAME HR_ALL_ORGANIZATION_UNITS_TL.NAME%TYPE;
  BEGIN
    SELECT
      DISTINCT
      NAME
    INTO V_ORGANIZATION_NAME
    FROM
      HR_ORGANIZATION_UNITS
    WHERE ORGANIZATION_ID = ORGANIZATION_ID_v;
    RETURN V_ORGANIZATION_NAME;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'OTHERS';
  END CF_ORGANIZATION_NAMEFORMULA;

  FUNCTION CF_GL_ACCOUNTFORMULA(GL_CODE_COMBINATION_ID IN NUMBER) RETURN VARCHAR2 IS
    RET_VAL VARCHAR2(1000);
    X_SOB NUMBER := TO_NUMBER(PSP_GENERAL.GET_SPECIFIC_PROFILE('GL_SET_OF_BKS_ID'));
  BEGIN
    IF GL_CODE_COMBINATION_ID IS NULL THEN
      RETURN NULL;
    END IF;
    RET_VAL := PSP_GENERAL.GET_GL_DESCRIPTION(X_SOB
                                             ,GL_CODE_COMBINATION_ID);
    RETURN RET_VAL;
  END CF_GL_ACCOUNTFORMULA;

  FUNCTION CF_PROJECT_NAMEFORMULA(PROJECT_ID_V IN NUMBER) RETURN VARCHAR2 IS
    V_PROJECT_NAME VARCHAR2(30);
  BEGIN
    IF PROJECT_ID_V IS NULL THEN
      RETURN NULL;
    END IF;
    SELECT
      DISTINCT
      PROJECT_NUMBER
    INTO V_PROJECT_NAME
    FROM
      GMS_PROJECTS_EXPEND_V
    WHERE PROJECT_ID = PROJECT_ID_V;
    RETURN V_PROJECT_NAME;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'ERROR';
  END CF_PROJECT_NAMEFORMULA;

  FUNCTION CF_EXP_ORG_NAMEFORMULA(EXPENDITURE_ORGANIZATION_ID IN NUMBER) RETURN VARCHAR2 IS
    V_ORGANIZATION_NAME HR_ALL_ORGANIZATION_UNITS_TL.NAME%TYPE;
  BEGIN
    IF EXPENDITURE_ORGANIZATION_ID IS NULL THEN
      RETURN NULL;
    END IF;
    SELECT
      DISTINCT
      NAME
    INTO V_ORGANIZATION_NAME
    FROM
      PA_ORGANIZATIONS_EXPEND_V
    WHERE ORGANIZATION_ID = EXPENDITURE_ORGANIZATION_ID
      AND ACTIVE_FLAG = 'Y';
    RETURN V_ORGANIZATION_NAME;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'ERROR';
  END CF_EXP_ORG_NAMEFORMULA;

  FUNCTION CF_TASK_NAMEFORMULA(TASK_ID_V IN NUMBER
                              ,PROJECT_ID_V IN NUMBER) RETURN VARCHAR2 IS
    V_TASK_NAME VARCHAR2(20);
  BEGIN
    IF TASK_ID_V IS NULL THEN
      RETURN NULL;
    END IF;
    SELECT
      DISTINCT
      TASK_NUMBER
    INTO V_TASK_NAME
    FROM
      PA_TASKS_EXPEND_V
    WHERE PROJECT_ID = PROJECT_ID_V
      AND TASK_ID = TASK_ID_V;
    RETURN V_TASK_NAME;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'ERROR';
  END CF_TASK_NAMEFORMULA;

  FUNCTION CF_AWARD_NAMEFORMULA(AWARD_ID_V IN NUMBER) RETURN VARCHAR2 IS
    V_AWARD_NAME VARCHAR2(30);
  BEGIN
    IF AWARD_ID_V IS NULL THEN
      RETURN NULL;
    END IF;
    BEGIN
      SELECT
        DISTINCT
        AWARD_NUMBER
      INTO V_AWARD_NAME
      FROM
        GMS_AWARDS_ALL
      WHERE AWARD_ID = AWARD_ID_V;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        SELECT
          DEFAULT_DIST_AWARD_NUMBER
        INTO V_AWARD_NAME
        FROM
          GMS_IMPLEMENTATIONS
        WHERE DEFAULT_DIST_AWARD_ID = AWARD_ID_V
          AND AWARD_DISTRIBUTION_OPTION = 'Y';
    END;
    RETURN V_AWARD_NAME;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN 'ERROR';
  END CF_AWARD_NAMEFORMULA;

  FUNCTION CF_ASSIGNMENT_NUMBERFORMULA(ASSIGNMENT_ID_V IN NUMBER
                                      ,PERSON_ID_V IN NUMBER) RETURN VARCHAR2 IS
    V_ASSIGNMENT_NUMBER VARCHAR2(30);
  BEGIN
    SELECT
      DISTINCT
      ASSIGNMENT_NUMBER
    INTO V_ASSIGNMENT_NUMBER
    FROM
      PER_ASSIGNMENTS_F
    WHERE ASSIGNMENT_ID = ASSIGNMENT_ID_V
      AND ASSIGNMENT_TYPE = 'E'
      AND PERSON_ID = PERSON_ID_V;
    RETURN V_ASSIGNMENT_NUMBER;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      V_ASSIGNMENT_NUMBER := 0;
      RETURN V_ASSIGNMENT_NUMBER;
  END CF_ASSIGNMENT_NUMBERFORMULA;

  FUNCTION CF_PERSON_NAMEFORMULA(PERSON_ID_V IN NUMBER) RETURN VARCHAR2 IS
    V_EMPLOYEE_NAME VARCHAR2(240);
    V_TIME_PERIOD_END DATE;
  BEGIN
    IF P_END_DATE IS NOT NULL THEN
      V_TIME_PERIOD_END := P_END_DATE;
      SELECT
        DISTINCT
        FULL_NAME
      INTO V_EMPLOYEE_NAME
      FROM
        PER_PEOPLE_F
      WHERE PERSON_ID = PERSON_ID_V
        AND ( V_TIME_PERIOD_END Between EFFECTIVE_START_DATE
        AND EFFECTIVE_END_DATE );
    ELSE
      SELECT
        DISTINCT
        FULL_NAME
      INTO V_EMPLOYEE_NAME
      FROM
        PER_PEOPLE_F
      WHERE PERSON_ID = PERSON_ID_V;
    END IF;
    RETURN V_EMPLOYEE_NAME;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      V_EMPLOYEE_NAME := '';
      RETURN V_EMPLOYEE_NAME;
  END CF_PERSON_NAMEFORMULA;

  FUNCTION CF_EARNINGS_ELEMENTFORMULA(ELEMENT_TYPE_ID_V IN NUMBER) RETURN VARCHAR2 IS
    V_EARNINGS_ELEMENT PAY_ELEMENT_TYPES_F.ELEMENT_NAME%TYPE;
  BEGIN
    IF ELEMENT_TYPE_ID_V IS NULL THEN
      RETURN (NULL);
    END IF;
    SELECT
      DISTINCT
      ELEMENT_NAME
    INTO V_EARNINGS_ELEMENT
    FROM
      PAY_ELEMENT_TYPES_F
    WHERE ELEMENT_TYPE_ID = ELEMENT_TYPE_ID_V;
    RETURN V_EARNINGS_ELEMENT;
    RETURN NULL;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      V_EARNINGS_ELEMENT := '';
      RETURN V_EARNINGS_ELEMENT;
    WHEN OTHERS THEN
      V_EARNINGS_ELEMENT := '';
      RETURN V_EARNINGS_ELEMENT;
  END CF_EARNINGS_ELEMENTFORMULA;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    --hr_standard.EVENT('AFTER REPORT');
    RETURN (TRUE);
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN (FALSE);
  END AFTERREPORT;

  FUNCTION CF_EMPLOYEE_IDFORMULA(PERSON_ID_V IN NUMBER) RETURN VARCHAR2 IS
    V_EMPLOYEE_NUMBER VARCHAR2(30);
    V_TIME_PERIOD_END DATE;
  BEGIN
    IF P_END_DATE IS NOT NULL THEN
      V_TIME_PERIOD_END := P_END_DATE;
      SELECT
        DISTINCT
        EMPLOYEE_NUMBER
      INTO V_EMPLOYEE_NUMBER
      FROM
        PER_PEOPLE_F
      WHERE PERSON_ID = PERSON_ID_V
        AND ( V_TIME_PERIOD_END Between EFFECTIVE_START_DATE
        AND EFFECTIVE_END_DATE );
    ELSE
      SELECT
        DISTINCT
        EMPLOYEE_NUMBER
      INTO V_EMPLOYEE_NUMBER
      FROM
        PER_PEOPLE_F
      WHERE PERSON_ID = PERSON_ID_V;
    END IF;
    RETURN V_EMPLOYEE_NUMBER;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      V_EMPLOYEE_NUMBER := '';
      RETURN V_EMPLOYEE_NUMBER;
  END CF_EMPLOYEE_IDFORMULA;

  FUNCTION CF_NUMBER_WORKING_DAYSFORMULA(SCHEDULE_BEGIN_DATE IN DATE
                                        ,SCHEDULE_END_DATE IN DATE) RETURN NUMBER IS
    V_NUMBER_WORKING_DAYS NUMBER;
  BEGIN
    V_NUMBER_WORKING_DAYS := PSP_GENERAL.BUSINESS_DAYS(SCHEDULE_BEGIN_DATE
                                                      ,SCHEDULE_END_DATE);
    RETURN V_NUMBER_WORKING_DAYS;
  END CF_NUMBER_WORKING_DAYSFORMULA;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  temp boolean;
  BEGIN
    temp:=BEFOREPFORM();
    --ORIENTATION := 'LANDSCAPE';
    null;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CF_TIME_PERIOD_STARTFORMULA(CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
    V_TIME_PERIOD_START DATE;
  BEGIN
    /*SRW.REFERENCE(P_BEGIN_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(P_BEGIN_DATE
                  ,CF_DATE_FORMAT));
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END CF_TIME_PERIOD_STARTFORMULA;

  FUNCTION CF_TIME_PERIOD_ENDFORMULA(CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
    V_TIME_PERIOD_END DATE;
  BEGIN
    /*SRW.REFERENCE(P_END_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(P_END_DATE
                  ,CF_DATE_FORMAT));
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END CF_TIME_PERIOD_ENDFORMULA;

  FUNCTION CF_INSTITUTION_NAMEFORMULA RETURN VARCHAR2 IS
    V_INSTITUTION_NAME HR_ALL_ORGANIZATION_UNITS_TL.NAME%TYPE;
    V_INSTITUTION_ID VARCHAR2(30);
  BEGIN
    V_INSTITUTION_ID := VALUE('PSP_ORG_REPORT');
    IF V_INSTITUTION_ID IS NULL THEN
      RETURN NULL;
    END IF;
    SELECT
      DISTINCT
      NAME
    INTO V_INSTITUTION_NAME
    FROM
      HR_ORGANIZATION_UNITS
    WHERE ORGANIZATION_ID = TO_NUMBER(V_INSTITUTION_ID);
    RETURN V_INSTITUTION_NAME;
    RETURN NULL;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN NULL;
  END CF_INSTITUTION_NAMEFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
  BEGIN
    --hr_standard.EVENT('BEFORE REPORT');
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
    RET_VAL NUMBER;
  BEGIN
    RET_VAL := PSP_ORG_DLS_PKG.INSERT_RECORDS_TO_TABLE(P_ORG_TEMPLATE_ID
                                                      ,P_BEGIN_DATE
                                                      ,P_END_DATE
                                                      ,P_SET_OF_BOOKS_ID
                                                      ,P_BUSINESS_GROUP_ID);
    P_BATCH_ID1 := RET_VAL;
    RETURN (TRUE);
  END BEFOREPFORM;

  FUNCTION CF_DATE_FORMATFORMULA RETURN CHAR IS
  BEGIN
    RETURN (FND_PROFILE.VALUE('ICX_DATE_FORMAT_MASK'));
  END CF_DATE_FORMATFORMULA;

  FUNCTION CF_DEFAULT_BEGIN_DATEFORMULA(DEFAULT_BEGIN_DATE IN DATE
                                       ,CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(DEFAULT_BEGIN_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(DEFAULT_BEGIN_DATE
                  ,CF_DATE_FORMAT));
  END CF_DEFAULT_BEGIN_DATEFORMULA;

  FUNCTION CF_DEFAULT_END_DATEFORMULA(DEFAULT_END_DATE IN DATE
                                     ,CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(DEFAULT_END_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(DEFAULT_END_DATE
                  ,CF_DATE_FORMAT));
  END CF_DEFAULT_END_DATEFORMULA;

  FUNCTION CF_DATE_RUNFORMULA(CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(SYSDATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(SYSDATE
                  ,CF_DATE_FORMAT));
  END CF_DATE_RUNFORMULA;

  FUNCTION CF_SCHEDULE_BEGIN_DATEFORMULA(SCHEDULE_BEGIN_DATE IN DATE
                                        ,CF_DATE_FORMAT IN VARCHAR2
                                        ,SCHEDULE_END_DATE IN DATE) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(SCHEDULE_BEGIN_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(SCHEDULE_END_DATE
                  ,CF_DATE_FORMAT));
  END CF_SCHEDULE_BEGIN_DATEFORMULA;

  FUNCTION CF_SCHEDULE_END_DATEFORMULA(SCHEDULE_END_DATE IN DATE
                                      ,CF_DATE_FORMAT IN VARCHAR2) RETURN CHAR IS
  BEGIN
    /*SRW.REFERENCE(SCHEDULE_END_DATE)*/NULL;
    /*SRW.REFERENCE(CF_DATE_FORMAT)*/NULL;
    RETURN (TO_CHAR(SCHEDULE_END_DATE
                  ,CF_DATE_FORMAT));
  END CF_SCHEDULE_END_DATEFORMULA;

  PROCEDURE CRT(ERRBUF OUT NOCOPY VARCHAR2
               ,RETCODE OUT NOCOPY NUMBER
               ,A_TEMPLATE_ID IN NUMBER) IS
  BEGIN
   /* STPROC.INIT('begin PSP_EFFORTS_PKG.CRT(:ERRBUF, :RETCODE, :A_TEMPLATE_ID); end;');
    STPROC.BIND_O(ERRBUF);
    STPROC.BIND_O(RETCODE);
    STPROC.BIND_I(A_TEMPLATE_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,ERRBUF);
    STPROC.RETRIEVE(2
                   ,RETCODE);*/ null;
  END CRT;

  PROCEDURE INIT_WORKFLOW(A_TEMPLATE_ID IN NUMBER) IS
  BEGIN
   /* STPROC.INIT('begin PSP_EFFORTS_PKG.INIT_WORKFLOW(:A_TEMPLATE_ID); end;');
    STPROC.BIND_I(A_TEMPLATE_ID);
    STPROC.EXECUTE;*/
    null;
  END INIT_WORKFLOW;

  PROCEDURE UPD_INCLUDE_FLAG(A_TEMPLATE_ID IN NUMBER) IS
  BEGIN
    /*STPROC.INIT('begin PSP_EFFORTS_PKG.UPD_INCLUDE_FLAG(:A_TEMPLATE_ID); end;');
    STPROC.BIND_I(A_TEMPLATE_ID);
    STPROC.EXECUTE;*/
    NULL;
  END UPD_INCLUDE_FLAG;

 /* FUNCTION GET_GL_DESCRIPTION(A_CODE_COMBINATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    STPROC.INIT('begin :X0 := PSP_EFFORTS_PKG.GET_GL_DESCRIPTION(:A_CODE_COMBINATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(A_CODE_COMBINATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);NULL;
    RETURN X0;
  END GET_GL_DESCRIPTION;*/

  PROCEDURE GET_ANNUAL_SALARY(P_ASSIGNMENT_ID IN NUMBER
                             ,P_SESSION_DATE IN DATE
                             ,P_ANNUAL_SALARY OUT NOCOPY NUMBER) IS
  BEGIN
   /* STPROC.INIT('begin PSP_GENERAL.GET_ANNUAL_SALARY(:P_ASSIGNMENT_ID, :P_SESSION_DATE, :P_ANNUAL_SALARY); end;');
    STPROC.BIND_I(P_ASSIGNMENT_ID);
    STPROC.BIND_I(P_SESSION_DATE);
    STPROC.BIND_O(P_ANNUAL_SALARY);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,P_ANNUAL_SALARY);*/NULL;
  END GET_ANNUAL_SALARY;

  PROCEDURE GET_GL_CCID(P_PAYROLL_ID IN NUMBER
                       ,P_SET_OF_BOOKS_ID IN NUMBER
                       ,P_COST_KEYFLEX_ID IN NUMBER
                       ,X_GL_CCID OUT NOCOPY NUMBER) IS
  BEGIN
   /* STPROC.INIT('begin PSP_GENERAL.GET_GL_CCID(:P_PAYROLL_ID, :P_SET_OF_BOOKS_ID, :P_COST_KEYFLEX_ID, :X_GL_CCID); end;');
    STPROC.BIND_I(P_PAYROLL_ID);
    STPROC.BIND_I(P_SET_OF_BOOKS_ID);
    STPROC.BIND_I(P_COST_KEYFLEX_ID);
    STPROC.BIND_O(X_GL_CCID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(4
                   ,X_GL_CCID);*/NULL;
  END GET_GL_CCID;

  FUNCTION BUSINESS_DAYS(LOW_DATE IN DATE
                        ,HIGH_DATE IN DATE) RETURN NUMBER IS
    X0 NUMBER;
  BEGIN
    /*STPROC.INIT('begin :X0 := PSP_GENERAL.BUSINESS_DAYS(:LOW_DATE, :HIGH_DATE); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(LOW_DATE);
    STPROC.BIND_I(HIGH_DATE);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END BUSINESS_DAYS;

  FUNCTION GET_GL_DESCRIPTION(A_CODE_COMBINATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
   /* STPROC.INIT('begin :X0 := PSP_GENERAL.GET_GL_DESCRIPTION(:A_CODE_COMBINATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(A_CODE_COMBINATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END GET_GL_DESCRIPTION;

  PROCEDURE PUT(NAME IN VARCHAR2
               ,VAL IN VARCHAR2) IS
  BEGIN
   /* STPROC.INIT('begin FND_PROFILE.PUT(:NAME, :VAL); end;');
    STPROC.BIND_I(NAME);
    STPROC.BIND_I(VAL);
    STPROC.EXECUTE;*/NULL;
  END PUT;

  FUNCTION DEFINED(NAME IN VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
   /* STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := FND_PROFILE.DEFINED(:NAME); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(NAME);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,X0);*/NULL;
    RETURN X0;
  END DEFINED;

  PROCEDURE GET(NAME IN VARCHAR2
               ,VAL OUT NOCOPY VARCHAR2) IS
  BEGIN
    /*STPROC.INIT('begin FND_PROFILE.GET(:NAME, :VAL); end;');
    STPROC.BIND_I(NAME);
    STPROC.BIND_O(VAL);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(2
                   ,VAL);*/NULL;
  END GET;

  FUNCTION VALUE(NAME IN VARCHAR2) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_PROFILE.VALUE(:NAME); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(NAME);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END VALUE;

  FUNCTION SAVE_USER(X_NAME IN VARCHAR2
                    ,X_VALUE IN VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    /*STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := FND_PROFILE.SAVE_USER(:X_NAME, :X_VALUE); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(X_NAME);
    STPROC.BIND_I(X_VALUE);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(3
                   ,X0);*/NULL;
    RETURN X0;
  END SAVE_USER;

  FUNCTION SAVE(X_NAME IN VARCHAR2
               ,X_VALUE IN VARCHAR2
               ,X_LEVEL_NAME IN VARCHAR2
               ,X_LEVEL_VALUE IN VARCHAR2
               ,X_LEVEL_VALUE_APP_ID IN VARCHAR2) RETURN BOOLEAN IS
    X0 BOOLEAN;
  BEGIN
    /*STPROC.INIT('declare X0rv BOOLEAN; begin X0rv := FND_PROFILE.SAVE(:X_NAME, :X_VALUE, :X_LEVEL_NAME, :X_LEVEL_VALUE, :X_LEVEL_VALUE_APP_ID); :X0 := sys.diutil.bool_to_int(X0rv); end;');
    STPROC.BIND_I(X_NAME);
    STPROC.BIND_I(X_VALUE);
    STPROC.BIND_I(X_LEVEL_NAME);
    STPROC.BIND_I(X_LEVEL_VALUE);
    STPROC.BIND_I(X_LEVEL_VALUE_APP_ID);
    STPROC.BIND_O(X0);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(6
                   ,X0);*/NULL;
    RETURN X0;
  END SAVE;

  PROCEDURE GET_SPECIFIC(NAME_Z IN VARCHAR2
                        ,USER_ID_Z IN NUMBER
                        ,RESPONSIBILITY_ID_Z IN NUMBER
                        ,APPLICATION_ID_Z IN NUMBER
                        ,VAL_Z OUT NOCOPY VARCHAR2
                        ,DEFINED_Z OUT NOCOPY BOOLEAN) IS
  BEGIN
    /*STPROC.INIT('declare DEFINED_Z BOOLEAN; begin DEFINED_Z := sys.diutil.int_to_bool(:DEFINED_Z);
    FND_PROFILE.GET_SPECIFIC(:NAME_Z, :USER_ID_Z, :RESPONSIBILITY_ID_Z, :APPLICATION_ID_Z, :VAL_Z, DEFINED_Z);
    :DEFINED_Z := sys.diutil.bool_to_int(DEFINED_Z); end;');
    STPROC.BIND_O(DEFINED_Z);
    STPROC.BIND_I(NAME_Z);
    STPROC.BIND_I(USER_ID_Z);
    STPROC.BIND_I(RESPONSIBILITY_ID_Z);
    STPROC.BIND_I(APPLICATION_ID_Z);
    STPROC.BIND_O(VAL_Z);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,DEFINED_Z);
    STPROC.RETRIEVE(6
                   ,VAL_Z);*/NULL;
  END GET_SPECIFIC;

  FUNCTION VALUE_SPECIFIC(NAME IN VARCHAR2
                         ,USER_ID IN NUMBER
                         ,RESPONSIBILITY_ID IN NUMBER
                         ,APPLICATION_ID IN NUMBER) RETURN VARCHAR2 IS
    X0 VARCHAR2(2000);
  BEGIN
    /*STPROC.INIT('begin :X0 := FND_PROFILE.VALUE_SPECIFIC(:NAME, :USER_ID, :RESPONSIBILITY_ID, :APPLICATION_ID); end;');
    STPROC.BIND_O(X0);
    STPROC.BIND_I(NAME);
    STPROC.BIND_I(USER_ID);
    STPROC.BIND_I(RESPONSIBILITY_ID);
    STPROC.BIND_I(APPLICATION_ID);
    STPROC.EXECUTE;
    STPROC.RETRIEVE(1
                   ,X0);*/NULL;
    RETURN X0;
  END VALUE_SPECIFIC;

  PROCEDURE INITIALIZE(USER_ID_Z IN NUMBER
                      ,RESPONSIBILITY_ID_Z IN NUMBER
                      ,APPLICATION_ID_Z IN NUMBER
                      ,SITE_ID_Z IN NUMBER) IS
  BEGIN
    /*STPROC.INIT('begin FND_PROFILE.INITIALIZE(:USER_ID_Z, :RESPONSIBILITY_ID_Z, :APPLICATION_ID_Z, :SITE_ID_Z); end;');
    STPROC.BIND_I(USER_ID_Z);
    STPROC.BIND_I(RESPONSIBILITY_ID_Z);
    STPROC.BIND_I(APPLICATION_ID_Z);
    STPROC.BIND_I(SITE_ID_Z);
    STPROC.EXECUTE;*/NULL;
  END INITIALIZE;

  PROCEDURE PUTMULTIPLE(NAMES IN VARCHAR2
                       ,VALS IN VARCHAR2
                       ,NUM IN NUMBER) IS
  BEGIN
    /*STPROC.INIT('begin FND_PROFILE.PUTMULTIPLE(:NAMES, :VALS, :NUM); end;');
    STPROC.BIND_I(NAMES);
    STPROC.BIND_I(VALS);
    STPROC.BIND_I(NUM);
    STPROC.EXECUTE;*/NULL;
  END PUTMULTIPLE;

END PSP_PSPLSODL_XMLP_PKG;

/
