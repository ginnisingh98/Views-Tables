--------------------------------------------------------
--  DDL for Package Body WSM_LBJ_INTERFACE_PVT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."WSM_LBJ_INTERFACE_PVT" AS
/* $Header: WSMVLJIB.pls 120.37.12010000.5 2009/05/15 18:09:35 sisankar ship $ */

-- BUG 3934661
-- when calling dbms_utility.get_hash_value use larger seed number
-- OLD: dbms_utility.get_hash_value(str, 1000, 5625);
-- NEW: dbms_utility.get_hash_value(str, 37, 1073741824);

-- **********************************************************************************************
-- PACKAGE: WSM_LBJ_INTERFACE_PVT (OSFM 11.5.10 and above)
--      (1) This is to handle WSM Lot Based Job Interface
--          WSM_LOT_JOB_INTERFACE and WSM_LOT_JOB_DTL_INTERFACE
--      (2) The {{{ and }}} in the comments are used to allow better nevigation within
--          the source code, {{{ or {{ is the beginning of a block, }}} or }} is the end
--          Please maintain them to achieve better readability
-- **********************************************************************************************


-- ==============================================================================================
-- Global variable declarations
-- PS: Although they have been declared as private to the package,please note that each
-- concurrent request submitted has it's own session, hence each worker will have it's own
-- set of "global" variables and tables.
-- ==============================================================================================

v_idx                               NUMBER;
v_wsli_idx                          NUMBER;
g_num_of_osp_exists                 NUMBER := 0;
g_op_seq_incr                       NUMBER := 10;
g_nvl_str                           VARCHAR2(6) := '!@#$56';
g_skip_wlbj                         NUMBER := 0;--OPTII-PERF

g_charges_exist_all                 boolean := false;   -- bug 3423195
g_charges_exist_shopfloor           boolean := false;   -- bug 3423195
g_job_released_date                 date := null;       -- bug 3423195


-- ==============================================================================================
-- nested table types used to bulk bind data from wlji to the PL/SQL tables.
-- ==============================================================================================
type t_number                       is table of number       index by binary_integer;
type t_date                         is table of date         index by binary_integer;
type t_recoflag                     is table of varchar2(1)  index by binary_integer;
type t_errmsg                       is table of wsm_lot_job_interface.error_msg%type
                                                             index by binary_integer;
type t_serial                       is table of VARCHAR2(30) index by binary_integer;


type t_wlji_err_code                is table of wsm_lot_job_interface.error_code%type;
type t_wlji_err_msg                 is table of wsm_lot_job_interface.error_msg%type;
type t_wlji_last_updt_date          is table of wsm_lot_job_interface.last_update_date%type;
type t_wlji_request_id              is table of wsm_lot_job_interface.request_id%type;
type t_wlji_program_id              is table of wsm_lot_job_interface.program_id%type;
type t_wlji_program_appl_id         is table of wsm_lot_job_interface.program_application_id%type;
type t_wlji_last_updt_by            is table of wsm_lot_job_interface.last_updated_by%type;
type t_wlji_creation_date           is table of wsm_lot_job_interface.creation_date%type;
type t_wlji_created_by              is table of wsm_lot_job_interface.created_by%type;
type t_wlji_last_updt_login         is table of wsm_lot_job_interface.last_update_login%type;
type t_wlji_prog_updt_date          is table of wsm_lot_job_interface.program_update_date%type;
type t_wlji_last_updt_by_name       is table of wsm_lot_job_interface.last_updated_by_name%type;
type t_wlji_created_by_name         is table of wsm_lot_job_interface.created_by_name%type;
type t_wlji_org_id                  is table of wsm_lot_job_interface.organization_id%type;
type t_wlji_org_code                is table of wsm_lot_job_interface.organization_code%type;
type t_wlji_wip_entity_id           is table of wsm_lot_job_interface.wip_entity_id%type;
type t_wlji_job_name                is table of wsm_lot_job_interface.job_name%type;
type t_wlji_lot_number              is table of wsm_lot_job_interface.lot_number%type;
type t_wlji_item_id                 is table of wsm_lot_job_interface.primary_item_id%type;
type t_wlji_header_id               is table of wsm_lot_job_interface.header_id%type;
type t_wlji_process_status          is table of wsm_lot_job_interface.process_status%type;
type t_wlji_process_phase           is table of wsm_lot_job_interface.process_phase%type;
type t_wlji_routing_reference_id    is table of wsm_lot_job_interface.routing_reference_id%type;
type t_wlji_completion_subinventory is table of wsm_lot_job_interface.completion_subinventory%type;
type t_wlji_completion_locator_id   is table of wsm_lot_job_interface.completion_locator_id%type;
type t_wlji_mode_flag               is table of wsm_lot_job_interface.mode_flag%type;
type t_wlji_group_id                is table of wsm_lot_job_interface.group_id%type;
type t_wlji_load_type               is table of wsm_lot_job_interface.load_type%type;
type t_wlji_status_type             is table of wsm_lot_job_interface.status_type%type;
type t_wlji_old_completion_date     is table of wsm_lot_job_interface.old_completion_date%type;
type t_wlji_bom_reference_id        is table of wsm_lot_job_interface.bom_reference_id%type;
type t_wlji_bom_revision_date       is table of wsm_lot_job_interface.bom_revision_date%type;
type t_wlji_routing_revision_date   is table of wsm_lot_job_interface.routing_revision_date%type;
type t_wlji_wip_supply_type         is table of wsm_lot_job_interface.wip_supply_type%type;
type t_wlji_class_code              is table of wsm_lot_job_interface.class_code%type;
type t_wlji_description             is table of wsm_lot_job_interface.description%type;
type t_wlji_firm_planned_flag       is table of wsm_lot_job_interface.firm_planned_flag%type;
type t_wlji_alt_routing_designator  is table of wsm_lot_job_interface.alternate_routing_designator%type;
type t_wlji_alt_bom_designator      is table of wsm_lot_job_interface.alternate_bom_designator%type;
type t_wlji_demand_class            is table of wsm_lot_job_interface.demand_class%type;
type t_wlji_start_quantity          is table of wsm_lot_job_interface.start_quantity%type;
type t_wlji_old_start_quantity      is table of wsm_lot_job_interface.old_start_quantity%type;
type t_wlji_error                   is table of wsm_lot_job_interface.error%type;
type t_wlji_fusd                    is table of wsm_lot_job_interface.first_unit_start_date%type;
type t_wlji_fucd                    is table of wsm_lot_job_interface.first_unit_completion_date%type;
type t_wlji_lusd                    is table of wsm_lot_job_interface.last_unit_start_date%type;
type t_wlji_lucd                    is table of wsm_lot_job_interface.last_unit_completion_date%type;
type t_wlji_scheduling_method       is table of wsm_lot_job_interface.scheduling_method%type;
type t_wlji_routing_revision        is table of wsm_lot_job_interface.routing_revision%type;
type t_wlji_bom_revision            is table of wsm_lot_job_interface.bom_revision%type;
type t_wlji_schedule_group_id       is table of wsm_lot_job_interface.schedule_group_id%type;
type t_wlji_schedule_group_name     is table of wsm_lot_job_interface.schedule_group_name%type;
type t_wlji_build_sequence          is table of wsm_lot_job_interface.build_sequence%type;
type t_wlji_net_quantity            is table of wsm_lot_job_interface.net_quantity%type;
type t_wlji_allow_explosion         is table of wsm_lot_job_interface.allow_explosion%type;
type t_wlji_old_status_type         is table of wsm_lot_job_interface.old_status_type%type;
type t_wlji_interface_id            is table of wsm_lot_job_interface.interface_id%type;
type t_wlji_coproducts_supply       is table of wsm_lot_job_interface.coproducts_supply%type;
type t_wlji_job_type                is table of wsm_lot_job_interface.job_type%type;
type t_wlji_source_code             is table of wsm_lot_job_interface.source_code%type;
type t_wlji_source_line_id          is table of wsm_lot_job_interface.source_line_id%type;
type t_wlji_project_id              is table of wsm_lot_job_interface.project_id%type;
type t_wlji_project_name            is table of wsm_lot_job_interface.project_name%type;
type t_wlji_task_id                 is table of wsm_lot_job_interface.task_id%type;
type t_wlji_delivery_id             is table of wsm_lot_job_interface.delivery_id%type;
type t_wlji_desc_flx_segs           is table of wsm_lot_job_interface.descriptive_flex_segments%type;
type t_wlji_project_number          is table of wsm_lot_job_interface.project_number%type;
type t_wlji_task_number             is table of wsm_lot_job_interface.task_number%type;
type t_wlji_project_costed          is table of wsm_lot_job_interface.project_costed%type;
type t_wlji_end_item_unit_number    is table of wsm_lot_job_interface.end_item_unit_number%type;
type t_wlji_overcompl_tol_type      is table of wsm_lot_job_interface.overcompletion_tolerance_type%type;
type t_wlji_overcompl_tol_value     is table of wsm_lot_job_interface.overcompletion_tolerance_value%type;
type t_wlji_kanban_card_id          is table of wsm_lot_job_interface.kanban_card_id%type;
type t_wlji_priority                is table of wsm_lot_job_interface.priority%type;
type t_wlji_due_date                is table of wsm_lot_job_interface.due_date%type;
type t_wlji_task_name               is table of wsm_lot_job_interface.task_name%type;
type t_wlji_process_type            is table of wsm_lot_job_interface.process_type%type;
type t_wlji_processing_work_days    is table of wsm_lot_job_interface.processing_work_days%type;
type t_wlji_compl_loc_segs          is table of wsm_lot_job_interface.completion_locator_segments%type;
type t_wlji_daily_production_rate   is table of wsm_lot_job_interface.daily_production_rate%type;
type t_wlji_line_id                 is table of wsm_lot_job_interface.line_id%type;
type t_wlji_lot_control_code        is table of wsm_lot_job_interface.lot_control_code%type;
type t_wlji_repetitive_schedule_id  is table of wsm_lot_job_interface.repetitive_schedule_id%type;
type t_wlji_parent_group_id         is table of wsm_lot_job_interface.parent_group_id%type;
type t_wlji_attribute_category      is table of wsm_lot_job_interface.attribute_category%type;
type t_wlji_attribute1              is table of wsm_lot_job_interface.attribute1%type;
type t_wlji_attribute2              is table of wsm_lot_job_interface.attribute2%type;
type t_wlji_attribute3              is table of wsm_lot_job_interface.attribute3%type;
type t_wlji_attribute4              is table of wsm_lot_job_interface.attribute4%type;
type t_wlji_attribute5              is table of wsm_lot_job_interface.attribute5%type;
type t_wlji_attribute6              is table of wsm_lot_job_interface.attribute6%type;
type t_wlji_attribute7              is table of wsm_lot_job_interface.attribute7%type;
type t_wlji_attribute8              is table of wsm_lot_job_interface.attribute8%type;
type t_wlji_attribute9              is table of wsm_lot_job_interface.attribute9%type;
type t_wlji_attribute10             is table of wsm_lot_job_interface.attribute10%type;
type t_wlji_attribute11             is table of wsm_lot_job_interface.attribute11%type;
type t_wlji_attribute12             is table of wsm_lot_job_interface.attribute12%type;
type t_wlji_attribute13             is table of wsm_lot_job_interface.attribute13%type;
type t_wlji_attribute14             is table of wsm_lot_job_interface.attribute14%type;
type t_wlji_attribute15             is table of wsm_lot_job_interface.attribute15%type;
type t_wlji_line_code               is table of wsm_lot_job_interface.line_code%type;
type t_wlji_primary_item_segs       is table of wsm_lot_job_interface.primary_item_segments%type;
type t_wlji_bom_ref_segs            is table of wsm_lot_job_interface.bom_reference_segments%type;
type t_wlji_rtg_ref_segs            is table of wsm_lot_job_interface.routing_reference_segments%type;
type t_wlji_date_released           is table of wsm_lot_job_interface.date_released%type;
type t_wlji_transaction_date        is table of wsm_lot_job_interface.transaction_date%type;
type t_wlji_num_of_children         is table of wsm_lot_job_interface.num_of_children%type;
--type t_wlji_inf_schedule_flag     is table of wsm_lot_job_interface.infinite_schedule_flag%type;

----The below defined plsql tables are used for updating the DFF attributes.

type t_attribute_category           is table of VARCHAR2(30)  index by binary_integer;
type t_attribute                    is table of VARCHAR2(150) index by binary_integer;

-- ==============================================================================================
-- instantiating the tables used to bulk bind data from wlji to the PL/SQL tables.
-- ==============================================================================================
v_wlji_err_code                 t_wlji_err_code                 := t_wlji_err_code();
v_wlji_err_msg                  t_wlji_err_msg                  := t_wlji_err_msg();
v_wlji_last_updt_date           t_wlji_last_updt_date           := t_wlji_last_updt_date();
v_wlji_request_id               t_wlji_request_id               := t_wlji_request_id();
v_wlji_program_id               t_wlji_program_id               := t_wlji_program_id();
v_wlji_program_appl_id          t_wlji_program_appl_id          := t_wlji_program_appl_id();
v_wlji_last_updt_by             t_wlji_last_updt_by             := t_wlji_last_updt_by();
v_wlji_creation_date            t_wlji_creation_date            := t_wlji_creation_date();
v_wlji_created_by               t_wlji_created_by               := t_wlji_created_by();
v_wlji_last_updt_login          t_wlji_last_updt_login          := t_wlji_last_updt_login();
v_wlji_prog_updt_date           t_wlji_prog_updt_date           := t_wlji_prog_updt_date();
v_wlji_last_updt_by_name        t_wlji_last_updt_by_name        := t_wlji_last_updt_by_name();
v_wlji_created_by_name          t_wlji_created_by_name          := t_wlji_created_by_name();
v_wlji_org_id                   t_wlji_org_id                   := t_wlji_org_id();
v_wlji_org_code                 t_wlji_org_code                 := t_wlji_org_code();  -- Not used, should
v_wlji_wip_entity_id            t_wlji_wip_entity_id            := t_wlji_wip_entity_id();
v_wlji_job_name                 t_wlji_job_name                 := t_wlji_job_name();
v_wlji_lot_number               t_wlji_lot_number               := t_wlji_lot_number();
v_wlji_item_id                  t_wlji_item_id                  := t_wlji_item_id();
v_wlji_header_id                t_wlji_header_id                := t_wlji_header_id();
v_wlji_process_status           t_wlji_process_status           := t_wlji_process_status();
v_wlji_rtg_ref_id               t_wlji_routing_reference_id     := t_wlji_routing_reference_id();
v_wlji_compl_subinv             t_wlji_completion_subinventory  := t_wlji_completion_subinventory();
v_wlji_compl_loc_id             t_wlji_completion_locator_id    := t_wlji_completion_locator_id();
v_wlji_mode_flag                t_wlji_mode_flag                := t_wlji_mode_flag();
v_wlji_group_id                 t_wlji_group_id                 := t_wlji_group_id();
v_wlji_load_type                t_wlji_load_type                := t_wlji_load_type();
v_wlji_status_type              t_wlji_status_type              := t_wlji_status_type();
v_wlji_old_status_type          t_wlji_old_status_type          := t_wlji_old_status_type();  -- Not used
v_wlji_old_completion_date      t_wlji_old_completion_date      := t_wlji_old_completion_date();  -- Not used
v_wlji_bom_ref_id               t_wlji_bom_reference_id         := t_wlji_bom_reference_id();
v_wlji_bom_rev_date             t_wlji_bom_revision_date        := t_wlji_bom_revision_date();
v_wlji_rtg_rev_date             t_wlji_routing_revision_date    := t_wlji_routing_revision_date();
v_wlji_wip_supply_type          t_wlji_wip_supply_type          := t_wlji_wip_supply_type();
v_wlji_class_code               t_wlji_class_code               := t_wlji_class_code();
v_wlji_description              t_wlji_description              := t_wlji_description();
v_wlji_firm_planned_flag        t_wlji_firm_planned_flag        := t_wlji_firm_planned_flag();
v_wlji_alt_rtg                  t_wlji_alt_routing_designator   := t_wlji_alt_routing_designator();
v_wlji_alt_bom                  t_wlji_alt_bom_designator       := t_wlji_alt_bom_designator();
v_wlji_demand_class             t_wlji_demand_class             := t_wlji_demand_class();
v_wlji_start_quantity           t_wlji_start_quantity           := t_wlji_start_quantity();
v_wlji_old_start_quantity       t_wlji_old_start_quantity       := t_wlji_old_start_quantity();  -- Not used
v_wlji_error                    t_wlji_error                    := t_wlji_error();  -- Not used
v_wlji_process_phase            t_wlji_process_phase            := t_wlji_process_phase();  -- Not used
v_wlji_fusd                     t_wlji_fusd                     := t_wlji_fusd();
v_wlji_fucd                     t_wlji_fucd                     := t_wlji_fucd();  -- Not used
v_wlji_lusd                     t_wlji_lusd                     := t_wlji_lusd();  -- Not used
v_wlji_lucd                     t_wlji_lucd                     := t_wlji_lucd();
v_wlji_scheduling_method        t_wlji_scheduling_method        := t_wlji_scheduling_method();
v_wlji_rtg_revision             t_wlji_routing_revision         := t_wlji_routing_revision();
v_wlji_bom_revision             t_wlji_bom_revision             := t_wlji_bom_revision();
v_wlji_schedule_group_id        t_wlji_schedule_group_id        := t_wlji_schedule_group_id();
v_wlji_schedule_group_name      t_wlji_schedule_group_name      := t_wlji_schedule_group_name();
v_wlji_build_sequence           t_wlji_build_sequence           := t_wlji_build_sequence();
v_wlji_net_quantity             t_wlji_net_quantity             := t_wlji_net_quantity();
v_wlji_allow_explosion          t_wlji_allow_explosion          := t_wlji_allow_explosion();
v_wlji_interface_id             t_wlji_interface_id             := t_wlji_interface_id();            -- Not used
v_wlji_coproducts_supply        t_wlji_coproducts_supply        := t_wlji_coproducts_supply();
v_wlji_job_type                 t_wlji_job_type                 := t_wlji_job_type();
v_wlji_source_code              t_wlji_source_code              := t_wlji_source_code();
v_wlji_src_line_id              t_wlji_source_line_id           := t_wlji_source_line_id();
v_wlji_process_type             t_wlji_process_type             := t_wlji_process_type();
v_wlji_processing_work_days     t_wlji_processing_work_days     := t_wlji_processing_work_days(); -- Not used
v_wlji_daily_production_rate    t_wlji_daily_production_rate    := t_wlji_daily_production_rate();  -- Not used
v_wlji_line_id                  t_wlji_line_id                  := t_wlji_line_id();
v_wlji_lot_control_code         t_wlji_lot_control_code         := t_wlji_lot_control_code();  -- Not used
v_wlji_repetitive_schedule_id   t_wlji_repetitive_schedule_id   := t_wlji_repetitive_schedule_id();  -- Not used
v_wlji_parent_group_id          t_wlji_parent_group_id          := t_wlji_parent_group_id();  -- Not used
v_wlji_attribute_category       t_wlji_attribute_category       := t_wlji_attribute_category();
v_wlji_attribute1               t_wlji_attribute1               := t_wlji_attribute1();
v_wlji_attribute2               t_wlji_attribute2               := t_wlji_attribute2();
v_wlji_attribute3               t_wlji_attribute3               := t_wlji_attribute3();
v_wlji_attribute4               t_wlji_attribute4               := t_wlji_attribute4();
v_wlji_attribute5               t_wlji_attribute5               := t_wlji_attribute5();
v_wlji_attribute6               t_wlji_attribute6               := t_wlji_attribute6();
v_wlji_attribute7               t_wlji_attribute7               := t_wlji_attribute7();
v_wlji_attribute8               t_wlji_attribute8               := t_wlji_attribute8();
v_wlji_attribute9               t_wlji_attribute9               := t_wlji_attribute9();
v_wlji_attribute10              t_wlji_attribute10              := t_wlji_attribute10();
v_wlji_attribute11              t_wlji_attribute11              := t_wlji_attribute11();
v_wlji_attribute12              t_wlji_attribute12              := t_wlji_attribute12();
v_wlji_attribute13              t_wlji_attribute13              := t_wlji_attribute13();
v_wlji_attribute14              t_wlji_attribute14              := t_wlji_attribute14();
v_wlji_attribute15              t_wlji_attribute15              := t_wlji_attribute15();
v_wlji_line_code                t_wlji_line_code                := t_wlji_line_code();  -- Not used
v_wlji_primary_item_segs        t_wlji_primary_item_segs        := t_wlji_primary_item_segs();  -- Not used
v_wlji_bom_ref_segs             t_wlji_bom_ref_segs             := t_wlji_bom_ref_segs();  -- Not used
v_wlji_rtg_ref_segs             t_wlji_rtg_ref_segs             := t_wlji_rtg_ref_segs();  -- Not used
v_wlji_compl_loc_segs           t_wlji_compl_loc_segs           := t_wlji_compl_loc_segs();  -- Not used
v_wlji_desc_flx_segs            t_wlji_desc_flx_segs            := t_wlji_desc_flx_segs();   -- Not used
v_wlji_project_id               t_wlji_project_id               := t_wlji_project_id();  -- No Validation
v_wlji_project_name             t_wlji_project_name             := t_wlji_project_name();  -- Not used
v_wlji_project_number           t_wlji_project_number           := t_wlji_project_number();  -- Not used
v_wlji_project_costed           t_wlji_project_costed           := t_wlji_project_costed();  -- Not used
v_wlji_task_id                  t_wlji_task_id                  := t_wlji_task_id();  -- No validation
v_wlji_task_name                t_wlji_task_name                := t_wlji_task_name();  -- Not used
v_wlji_task_number              t_wlji_task_number              := t_wlji_task_number();  -- Not used
v_wlji_end_item_unit_number     t_wlji_end_item_unit_number     := t_wlji_end_item_unit_number();  -- No validation
v_wlji_overcompl_tol_type       t_wlji_overcompl_tol_type       := t_wlji_overcompl_tol_type();  -- No validation
v_wlji_overcompl_tol_value      t_wlji_overcompl_tol_value      := t_wlji_overcompl_tol_value();  -- No validation
v_wlji_kanban_card_id           t_wlji_kanban_card_id           := t_wlji_kanban_card_id();
v_wlji_priority                 t_wlji_priority                 := t_wlji_priority();
v_wlji_due_date                 t_wlji_due_date                 := t_wlji_due_date();
v_wlji_delivery_id              t_wlji_delivery_id              := t_wlji_delivery_id();  -- No validation
v_wlji_date_released            t_wlji_date_released            := t_wlji_date_released();
v_wlji_transaction_date         t_wlji_transaction_date         := t_wlji_transaction_date();
v_wlji_num_of_children          t_wlji_num_of_children          := t_wlji_num_of_children();
--v_wlji_inf_schedule_flag      t_wlji_inf_schedule_flag        := t_wlji_inf_schedule_flag();
v_new_job               NUMBER := NULL;
v_phantom_exists        NUMBER := NULL; --OPTII-PERF: 1-Phantom req exits,2-Phantom requirement does not exists
v_insert_wip            NUMBER := NULL; --OPTII-PERF  1-Insert wip data in create_jobcopies procedure
                                --            2-Phantom requirement does not exists
-- ==============================================================================================
-- corresponding table type and table declarations for wsm_starting_lots_interface
-- ==============================================================================================
type t_wsli_header_id           is table of wsm_starting_lots_interface.header_id%type;
type t_wsli_lot_number          is table of wsm_starting_lots_interface.lot_number%type;
type t_wsli_inventory_item_id   is table of wsm_starting_lots_interface.inventory_item_id%type;
type t_wsli_organization_id     is table of wsm_starting_lots_interface.organization_id%type;
type t_wsli_quantity            is table of wsm_starting_lots_interface.quantity%type;
type t_wsli_subinventory_code   is table of wsm_starting_lots_interface.subinventory_code%type;
type t_wsli_locator_id          is table of wsm_starting_lots_interface.locator_id%type;
type t_wsli_revision            is table of wsm_starting_lots_interface.revision%type;
type t_wsli_last_updated_by     is table of wsm_starting_lots_interface.last_updated_by%type;
type t_wsli_created_by          is table of wsm_starting_lots_interface.created_by%type;
type t_wsli_primary_uom_code    is table of mtl_system_items.primary_uom_code%type;
type t_wsli_comp_issue_qty      is table of wsm_starting_lots_interface.component_issue_quantity%type;

v_wsli_hdr_id                   t_wsli_header_id                := t_wsli_header_id();
v_wsli_lot_number               t_wsli_lot_number               := t_wsli_lot_number();
v_wsli_inventory_item_id        t_wsli_inventory_item_id        := t_wsli_inventory_item_id();
v_wsli_organization_id          t_wsli_organization_id          := t_wsli_organization_id();
v_wsli_quantity                 t_wsli_quantity                 := t_wsli_quantity();
v_wsli_subinventory_code        t_wsli_subinventory_code        := t_wsli_subinventory_code();
v_wsli_locator_id               t_wsli_locator_id               := t_wsli_locator_id();
v_wsli_revision                 t_wsli_revision                 := t_wsli_revision();
v_wsli_last_updated_by          t_wsli_last_updated_by          := t_wsli_last_updated_by();
v_wsli_created_by               t_wsli_created_by               := t_wsli_created_by();
v_wsli_primary_uom_code         t_wsli_primary_uom_code         := t_wsli_primary_uom_code();
v_wsli_comp_issue_qty           t_wsli_comp_issue_qty           := t_wsli_comp_issue_qty();

-- ==============================================================================================
-- creating an index by table that'll store the wsli values with header_id as the index for easy
-- validation
-- ==============================================================================================
type rec_wsli IS record (
        lot_number              wsm_starting_lots_interface.lot_number%type,
        inventory_item_id       wsm_starting_lots_interface.inventory_item_id%type,
        organization_id         wsm_starting_lots_interface.organization_id%type,
        quantity                wsm_starting_lots_interface.quantity%type,
        subinventory_code       wsm_starting_lots_interface.subinventory_code%type,
        locator_id              wsm_starting_lots_interface.locator_id%type,
        revision                wsm_starting_lots_interface.revision%type,
        last_updated_by         wsm_starting_lots_interface.last_updated_by%type,
        created_by              wsm_starting_lots_interface.created_by%type,
        primary_uom_code        mtl_system_items.primary_uom_code%type,
        comp_issue_quantity     wsm_starting_lots_interface.component_issue_quantity%type
);

v_rec_wsli                      rec_wsli;   -- Not used

type t_wsli                     is table of rec_wsli index by binary_integer;
v_wsli                          t_wsli;

-- ==============================================================================================
-- nested table types used to bulk bind data from wljdi to the PL/SQL tables.
-- ==============================================================================================
type t_wljdi_record_id              is table of wsm_lot_job_dtl_interface.record_id                 %type;
type t_wljdi_parent_header_id       is table of wsm_lot_job_dtl_interface.parent_header_id          %type;
type t_wljdi_group_id               is table of wsm_lot_job_dtl_interface.group_id                  %type;
type t_wljdi_org_id                 is table of wsm_lot_job_dtl_interface.organization_id           %type;
type t_wljdi_org_code               is table of wsm_lot_job_dtl_interface.organization_code         %type;
type t_wljdi_wip_entity_id          is table of wsm_lot_job_dtl_interface.wip_entity_id             %type;
type t_wljdi_job_name               is table of wsm_lot_job_dtl_interface.job_name                  %type;
type t_wljdi_err_code               is table of wsm_lot_job_dtl_interface.error_code                %type;
type t_wljdi_err_msg                is table of wsm_lot_job_dtl_interface.error_msg                 %type;
type t_wljdi_request_id             is table of wsm_lot_job_dtl_interface.request_id                %type;
type t_wljdi_program_id             is table of wsm_lot_job_dtl_interface.program_id                %type;
type t_wljdi_program_appl_id        is table of wsm_lot_job_dtl_interface.program_application_id    %type;
type t_wljdi_last_updt_by           is table of wsm_lot_job_dtl_interface.last_updated_by           %type;
type t_wljdi_last_updt_login        is table of wsm_lot_job_dtl_interface.last_update_login         %type;
type t_wljdi_last_updt_date         is table of wsm_lot_job_dtl_interface.last_update_date          %type;
type t_wljdi_prog_updt_date         is table of wsm_lot_job_dtl_interface.program_update_date       %type;
type t_wljdi_process_status         is table of wsm_lot_job_dtl_interface.process_status            %type;


-- BA: bug 3313463/3311695 8i compatibility
type t_wljdi_load_type              is table of wsm_lot_job_dtl_interface.load_type                 %type;
type t_wljdi_substitution_type      is table of wsm_lot_job_dtl_interface.substitution_type         %type;
type t_wljdi_job_op_seq_num         is table of wsm_lot_job_dtl_interface.job_op_seq_num            %type;
type t_wljdi_routing_op_seq_num     is table of wsm_lot_job_dtl_interface.routing_op_seq_num        %type;
type t_wljdi_next_rtg_op_seq_num    is table of wsm_lot_job_dtl_interface.next_routing_op_seq_num   %type;

type t_wljdi_inventory_item_id_new  is table of wsm_lot_job_dtl_interface.inventory_item_id_new     %type;
type t_wljdi_inventory_item_new     is table of wsm_lot_job_dtl_interface.inventory_item_new        %type;
type t_wljdi_primary_item           is table of wsm_lot_job_dtl_interface.primary_item              %type;
type t_wljdi_primary_item_id        is table of wsm_lot_job_dtl_interface.primary_item_id           %type;
type t_wljdi_src_phantom_item       is table of wsm_lot_job_dtl_interface.src_phantom_item          %type;
type t_wljdi_src_phantom_item_id    is table of wsm_lot_job_dtl_interface.src_phantom_item_id       %type;
type t_wljdi_component_sequence_id  is table of wsm_lot_job_dtl_interface.component_sequence_id     %type;
type t_wljdi_date_required          is table of wsm_lot_job_dtl_interface.date_required             %type;
type t_wljdi_scheduled_quantity     is table of wsm_lot_job_dtl_interface.scheduled_quantity        %type;
type t_wljdi_required_quantity      is table of wsm_lot_job_dtl_interface.required_quantity         %type;
type t_wljdi_batch_id               is table of wsm_lot_job_dtl_interface.batch_id                  %type;
type t_wljdi_assigned_units         is table of wsm_lot_job_dtl_interface.assigned_units            %type;
type t_wljdi_instance_id_new        is table of wsm_lot_job_dtl_interface.instance_id_new           %type;
type t_wljdi_op_completion_date     is table of wsm_lot_job_dtl_interface.operation_completion_date %type;
type t_wljdi_op_start_date          is table of wsm_lot_job_dtl_interface.operation_start_date      %type;
type t_wljdi_op_yield               is table of wsm_lot_job_dtl_interface.operation_yield           %type;
type t_wljdi_resource_code_new      is table of wsm_lot_job_dtl_interface.resource_code_new         %type;
type t_wljdi_resource_id_new        is table of wsm_lot_job_dtl_interface.resource_id_new           %type;
type t_wljdi_resource_seq_num       is table of wsm_lot_job_dtl_interface.resource_seq_num          %type;
type t_wljdi_substitute_group_num   is table of wsm_lot_job_dtl_interface.substitute_group_num      %type;
type t_wljdi_replacement_group_num  is table of wsm_lot_job_dtl_interface.replacement_group_num     %type;
type t_wljdi_serial_number_new      is table of wsm_lot_job_dtl_interface.serial_number_new         %type;
type t_wljdi_start_date             is table of wsm_lot_job_dtl_interface.start_date                %type;
type t_wljdi_completion_date        is table of wsm_lot_job_dtl_interface.completion_date           %type;
-- EA: bug 3313463/3311695 8i compatibility

/* ST : Detailed scheduling : start */
type t_wljdi_resource_hours         is table of wsm_lot_job_dtl_interface.resource_hours        %type;
type t_wljdi_firm_type              is table of wsm_lot_job_dtl_interface.firm_type             %type;
type t_wljdi_setup_id               is table of wsm_lot_job_dtl_interface.setup_id              %type;
type t_wljdi_setup_code               is table of wsm_lot_job_dtl_interface.setup_code              %type;
type t_wljdi_grp_seq_id             is table of wsm_lot_job_dtl_interface.group_sequence_id     %type;
type t_wljdi_grp_seq_num            is table of wsm_lot_job_dtl_interface.group_sequence_num    %type;
type t_wljdi_max_assg_units         is table of wsm_lot_job_dtl_interface.max_assigned_units    %type;
type t_wljdi_parent_seq_num         is table of wsm_lot_job_dtl_interface.parent_resource_seq_num   %type;

/* Start : fields added to add resource */
type t_wljdi_department_id          is table of wsm_lot_job_dtl_interface.department_id         %type;
type t_wljdi_department_code        is table of wsm_lot_job_dtl_interface.department_code       %type;
type t_wljdi_activity_id            is table of wsm_lot_job_dtl_interface.activity_id           %type;
type t_wljdi_standard_rate_flag     is table of wsm_lot_job_dtl_interface.standard_rate_flag    %type;
type t_wljdi_usage_rate_or_amt      is table of wsm_lot_job_dtl_interface.usage_rate_or_amount  %type;

type t_wljdi_basis_type         is table of wsm_lot_job_dtl_interface.basis_type                %type;
type t_wljdi_uom_code           is table of wsm_lot_job_dtl_interface.uom_code                  %type;
type t_wljdi_scheduled_flag     is table of wsm_lot_job_dtl_interface.scheduled_flag            %type;

type t_wljdi_res_autocharge_type    is table of wsm_lot_job_dtl_interface.autocharge_type       %type;
type t_wljdi_schedule_seq_num       is table of wsm_lot_job_dtl_interface.schedule_seq_num      %type;

type t_wljdi_attribute_category    is table of wsm_lot_job_dtl_interface.attribute_category     %type;
type t_wljdi_attribute1        is table of wsm_lot_job_dtl_interface.attribute1                 %type;
type t_wljdi_attribute2        is table of wsm_lot_job_dtl_interface.attribute2                 %type;
type t_wljdi_attribute3        is table of wsm_lot_job_dtl_interface.attribute3                 %type;
type t_wljdi_attribute4        is table of wsm_lot_job_dtl_interface.attribute4                 %type;
type t_wljdi_attribute5        is table of wsm_lot_job_dtl_interface.attribute5                 %type;
type t_wljdi_attribute6        is table of wsm_lot_job_dtl_interface.attribute6                 %type;
type t_wljdi_attribute7        is table of wsm_lot_job_dtl_interface.attribute7                 %type;
type t_wljdi_attribute8        is table of wsm_lot_job_dtl_interface.attribute8                 %type;
type t_wljdi_attribute9        is table of wsm_lot_job_dtl_interface.attribute9                 %type;
type t_wljdi_attribute10       is table of wsm_lot_job_dtl_interface.attribute10                %type;
type t_wljdi_attribute11       is table of wsm_lot_job_dtl_interface.attribute11                %type;
type t_wljdi_attribute12       is table of wsm_lot_job_dtl_interface.attribute12                %type;
type t_wljdi_attribute13       is table of wsm_lot_job_dtl_interface.attribute13                %type;
type t_wljdi_attribute14       is table of wsm_lot_job_dtl_interface.attribute14                %type;
type t_wljdi_attribute15       is table of wsm_lot_job_dtl_interface.attribute15                %type;

-- Added For LBJ Interface Alcoa Enhancement
type t_wljdi_recommended       is table of wsm_lot_job_dtl_interface.recommended                %type;
type t_wljdi_std_op_code       is table of wsm_lot_job_dtl_interface.standard_operation_code    %type;
type t_wljdi_std_op_id         is table of wsm_lot_job_dtl_interface.standard_operation_id      %type;
type t_wljdi_op_yield_enable   is table of wsm_lot_job_dtl_interface.operation_yield_enabled    %type;
type t_wljdi_min_trf_qty       is table of wsm_lot_job_dtl_interface.minimum_transfer_quantity  %type;
type t_wljdi_backflush_flag    is table of wsm_lot_job_dtl_interface.backflush_flag             %type;
type t_wljdi_count_point_type  is table of wsm_lot_job_dtl_interface.count_point_type           %type;
type t_wljdi_description       is table of wsm_lot_job_dtl_interface.description                %type;
type t_wljdi_inc_in_rollup     is table of wsm_lot_job_dtl_interface.include_in_rollup          %type;
type t_wljdi_option_dep_flag   is table of wsm_lot_job_dtl_interface.option_dependent_flag      %type;
type t_wljdi_mrp_net_flag      is table of wsm_lot_job_dtl_interface.mrp_net_flag               %type;
type t_wljdi_auto_request_material is table of wsm_lot_job_dtl_interface.auto_request_material  %type;
type t_wljdi_comments          is table of wsm_lot_job_dtl_interface.comments                   %type;
type t_wljdi_inventory_item_id_old  is table of wsm_lot_job_dtl_interface.inventory_item_id_old     %type;
type t_wljdi_inventory_item_old     is table of wsm_lot_job_dtl_interface.inventory_item_old        %type;
type t_wljdi_wip_supply_type        is table of wsm_lot_job_dtl_interface.wip_supply_type           %type;
type t_wljdi_quantity_per_assembly  is table of wsm_lot_job_dtl_interface.quantity_per_assembly     %type;
type t_wljdi_supply_subinventory    is table of wsm_lot_job_dtl_interface.supply_subinventory       %type;
type t_wljdi_supply_locator_id      is table of wsm_lot_job_dtl_interface.supply_locator_id         %type;
type t_wljdi_applied_resource_units is table of wsm_lot_job_dtl_interface.applied_resource_units    %type;
type t_desc                         is table of bom_standard_operations.operation_description%type index by binary_integer;
type t_op_code                      is table of bom_standard_operations.operation_code%type index by binary_integer;

/*Added below two types for bugfix:7248992 */
type t_wljdi_cum_yield             is table of wsm_lot_job_dtl_interface.cumulative_yield          %type;
type t_wljdi_rev_cum_yield         is table of wsm_lot_job_dtl_interface.reverse_cumulative_yield  %type;
/* end */

/* ST : Detailed scheduling : end */

-- ==============================================================================================
-- instantiating the tables used to bulk bind data from wljdi to the PL/SQL tables.
-- ==============================================================================================
v_wljdi_record_id               t_wljdi_record_id               := t_wljdi_record_id();
v_wljdi_parent_header_id        t_wljdi_parent_header_id        := t_wljdi_parent_header_id();
v_wljdi_group_id                t_wljdi_group_id                := t_wljdi_group_id();
v_wljdi_org_id                  t_wljdi_org_id                  := t_wljdi_org_id();
v_wljdi_org_code                t_wljdi_org_code                := t_wljdi_org_code();
v_wljdi_wip_entity_id           t_wljdi_wip_entity_id           := t_wljdi_wip_entity_id();
v_wljdi_job_name                t_wljdi_job_name                := t_wljdi_job_name();
v_wljdi_err_code                t_wljdi_err_code                := t_wljdi_err_code();
v_wljdi_err_msg                 t_wljdi_err_msg                 := t_wljdi_err_msg();
v_wljdi_request_id              t_wljdi_request_id              := t_wljdi_request_id();
v_wljdi_program_id              t_wljdi_program_id              := t_wljdi_program_id();
v_wljdi_program_appl_id         t_wljdi_program_appl_id         := t_wljdi_program_appl_id();
v_wljdi_last_updt_login         t_wljdi_last_updt_login         := t_wljdi_last_updt_login();
v_wljdi_last_updt_by            t_wljdi_last_updt_by            := t_wljdi_last_updt_by();
v_wljdi_last_updt_date          t_wljdi_last_updt_date          := t_wljdi_last_updt_date();
v_wljdi_prog_updt_date          t_wljdi_prog_updt_date          := t_wljdi_prog_updt_date();
v_wljdi_process_status          t_wljdi_process_status          := t_wljdi_process_status();


-- BA: bug 3313463/3311695 8i compatibility
v_wljdi_load_type               t_wljdi_load_type              := t_wljdi_load_type();
v_wljdi_substitution_type       t_wljdi_substitution_type      := t_wljdi_substitution_type();
v_wljdi_job_op_seq_num          t_wljdi_job_op_seq_num         := t_wljdi_job_op_seq_num();
v_wljdi_routing_op_seq_num      t_wljdi_routing_op_seq_num     := t_wljdi_routing_op_seq_num();
v_wljdi_next_rtg_op_seq_num     t_wljdi_next_rtg_op_seq_num    := t_wljdi_next_rtg_op_seq_num();

v_wljdi_inventory_item_id_new   t_wljdi_inventory_item_id_new  := t_wljdi_inventory_item_id_new();
v_wljdi_inventory_item_new      t_wljdi_inventory_item_new     := t_wljdi_inventory_item_new();
v_wljdi_primary_item            t_wljdi_primary_item           := t_wljdi_primary_item();
v_wljdi_primary_item_id         t_wljdi_primary_item_id        := t_wljdi_primary_item_id();
v_wljdi_src_phantom_item        t_wljdi_src_phantom_item       := t_wljdi_src_phantom_item();
v_wljdi_src_phantom_item_id     t_wljdi_src_phantom_item_id    := t_wljdi_src_phantom_item_id();
v_wljdi_component_sequence_id   t_wljdi_component_sequence_id  := t_wljdi_component_sequence_id();
v_wljdi_date_required           t_wljdi_date_required          := t_wljdi_date_required();
v_wljdi_scheduled_quantity      t_wljdi_scheduled_quantity     := t_wljdi_scheduled_quantity();
v_wljdi_required_quantity       t_wljdi_required_quantity      := t_wljdi_required_quantity();
v_wljdi_batch_id                t_wljdi_batch_id               := t_wljdi_batch_id();
v_wljdi_assigned_units          t_wljdi_assigned_units         := t_wljdi_assigned_units();
v_wljdi_instance_id_new         t_wljdi_instance_id_new        := t_wljdi_instance_id_new();
v_wljdi_op_completion_date      t_wljdi_op_completion_date     := t_wljdi_op_completion_date();
v_wljdi_op_start_date           t_wljdi_op_start_date          := t_wljdi_op_start_date();
v_wljdi_op_yield                t_wljdi_op_yield               := t_wljdi_op_yield();
v_wljdi_resource_code_new       t_wljdi_resource_code_new      := t_wljdi_resource_code_new();
v_wljdi_resource_id_new         t_wljdi_resource_id_new        := t_wljdi_resource_id_new();
v_wljdi_resource_seq_num        t_wljdi_resource_seq_num       := t_wljdi_resource_seq_num();
v_wljdi_substitute_group_num    t_wljdi_substitute_group_num   := t_wljdi_substitute_group_num();
v_wljdi_replacement_group_num   t_wljdi_replacement_group_num  := t_wljdi_replacement_group_num();
v_wljdi_serial_number_new       t_wljdi_serial_number_new      := t_wljdi_serial_number_new();
v_wljdi_start_date              t_wljdi_start_date             := t_wljdi_start_date();
v_wljdi_completion_date         t_wljdi_completion_date        := t_wljdi_completion_date();
-- EA: bug 3313463/3311695 8i compatibility

/* ST :  Detailed scheduling : start */
v_wljdi_firm_type           t_wljdi_firm_type              := t_wljdi_firm_type();
v_wljdi_setup_id            t_wljdi_setup_id               := t_wljdi_setup_id();
v_wljdi_setup_code          t_wljdi_setup_code             := t_wljdi_setup_code();
v_wljdi_grp_seq_id          t_wljdi_grp_seq_id             := t_wljdi_grp_seq_id();
v_wljdi_grp_seq_num         t_wljdi_grp_seq_num            := t_wljdi_grp_seq_num();
v_wljdi_max_assg_units      t_wljdi_max_assg_units         := t_wljdi_max_assg_units();
v_wljdi_parent_seq_num      t_wljdi_parent_seq_num         := t_wljdi_parent_seq_num();
v_wljdi_resource_hours      t_wljdi_resource_hours         := t_wljdi_resource_hours();

/* Start : changes for adding resource ... */
v_wljdi_department_id       t_wljdi_department_id           := t_wljdi_department_id();
v_wljdi_department_code     t_wljdi_department_code         := t_wljdi_department_code();
v_wljdi_activity_id         t_wljdi_activity_id             := t_wljdi_activity_id();
v_wljdi_standard_rate_flag  t_wljdi_standard_rate_flag      := t_wljdi_standard_rate_flag();
v_wljdi_usage_rate_or_amt   t_wljdi_usage_rate_or_amt       := t_wljdi_usage_rate_or_amt();

v_wljdi_basis_type          t_wljdi_basis_type          := t_wljdi_basis_type();
v_wljdi_uom_code            t_wljdi_uom_code            := t_wljdi_uom_code();
v_wljdi_scheduled_flag      t_wljdi_scheduled_flag      := t_wljdi_scheduled_flag();

v_wljdi_res_autocharge_type     t_wljdi_res_autocharge_type := t_wljdi_res_autocharge_type();
v_wljdi_schedule_seq_num        t_wljdi_schedule_seq_num    := t_wljdi_schedule_seq_num();

v_wljdi_attribute_category  t_wljdi_attribute_category  := t_wljdi_attribute_category();
v_wljdi_attribute1          t_wljdi_attribute1          := t_wljdi_attribute1();
v_wljdi_attribute2          t_wljdi_attribute2          := t_wljdi_attribute2();
v_wljdi_attribute3          t_wljdi_attribute3          := t_wljdi_attribute3();
v_wljdi_attribute4          t_wljdi_attribute4          := t_wljdi_attribute4();
v_wljdi_attribute5          t_wljdi_attribute5          := t_wljdi_attribute5();
v_wljdi_attribute6          t_wljdi_attribute6          := t_wljdi_attribute6();
v_wljdi_attribute7          t_wljdi_attribute7          := t_wljdi_attribute7();
v_wljdi_attribute8          t_wljdi_attribute8          := t_wljdi_attribute8();
v_wljdi_attribute9          t_wljdi_attribute9          := t_wljdi_attribute9();
v_wljdi_attribute10         t_wljdi_attribute10         := t_wljdi_attribute10();
v_wljdi_attribute11         t_wljdi_attribute11         := t_wljdi_attribute11();
v_wljdi_attribute12         t_wljdi_attribute12         := t_wljdi_attribute12();
v_wljdi_attribute13         t_wljdi_attribute13         := t_wljdi_attribute13();
v_wljdi_attribute14         t_wljdi_attribute14         := t_wljdi_attribute14();
v_wljdi_attribute15         t_wljdi_attribute15         := t_wljdi_attribute15();

-- Added For LBJ Interface Alcoa Enhancement
v_wljdi_recommended         t_wljdi_recommended         := t_wljdi_recommended();
v_wljdi_std_op_code         t_wljdi_std_op_code         := t_wljdi_std_op_code();
v_wljdi_std_op_id           t_wljdi_std_op_id           := t_wljdi_std_op_id();
v_wljdi_op_yield_enable     t_wljdi_op_yield_enable     := t_wljdi_op_yield_enable();
v_wljdi_min_trf_qty         t_wljdi_min_trf_qty         := t_wljdi_min_trf_qty();
v_wljdi_backflush_flag      t_wljdi_backflush_flag      := t_wljdi_backflush_flag();
v_wljdi_count_point_type    t_wljdi_count_point_type    := t_wljdi_count_point_type();
v_wljdi_description         t_wljdi_description         := t_wljdi_description();
v_wljdi_inc_in_rollup       t_wljdi_inc_in_rollup       := t_wljdi_inc_in_rollup();
v_wljdi_option_dep_flag     t_wljdi_option_dep_flag     := t_wljdi_option_dep_flag();
v_wljdi_inventory_item_id_old   t_wljdi_inventory_item_id_old  := t_wljdi_inventory_item_id_old();
v_wljdi_inventory_item_old      t_wljdi_inventory_item_old     := t_wljdi_inventory_item_old();
v_wljdi_wip_supply_type         t_wljdi_wip_supply_type        := t_wljdi_wip_supply_type();
v_wljdi_quantity_per_assembly   t_wljdi_quantity_per_assembly  := t_wljdi_quantity_per_assembly();
v_wljdi_supply_subinventory     t_wljdi_supply_subinventory    := t_wljdi_supply_subinventory();
v_wljdi_supply_locator_id       t_wljdi_supply_locator_id      := t_wljdi_supply_locator_id();
v_wljdi_mrp_net_flag            t_wljdi_mrp_net_flag           := t_wljdi_mrp_net_flag();
v_wljdi_auto_request_material   t_wljdi_auto_request_material  := t_wljdi_auto_request_material();
v_wljdi_comments                t_wljdi_comments               := t_wljdi_comments();
v_wljdi_applied_resource_units  t_wljdi_applied_resource_units  := t_wljdi_applied_resource_units();

  /*Added for bugfix:7248992 */
v_wljdi_cum_yield               t_wljdi_cum_yield              := t_wljdi_cum_yield();
v_wljdi_rev_cum_yield           t_wljdi_rev_cum_yield          := t_wljdi_rev_cum_yield();

type t_res_recom is table of varchar2(5) index by binary_integer;
type t_res_code is table of bom_resources.resource_code%type index by binary_integer;

/* end */
/* ST : Detailed scheduling : end */

type t_job_name                 is table of VARCHAR2(240) index by binary_integer;

g_v_job_name                    t_job_name;
g_v_wip_entity_id               t_number;

g_v_res_id                      t_number;
g_v_item_id                     t_number;


-- ==============================================================================================
-- instantiating the tables used to bulk bind data from wljdi to the PL/SQL tables.
-- ==============================================================================================

-- BD: bug 3313463/3311695 8i compatibility
--type t_wljdi                    is table of wsm_lot_job_dtl_interface%rowtype index by binary_integer;
--v_wljdi                         t_wljdi;
-- ED: bug 3313463/3311695 8i compatibility

-- ==============================================================================================
-- Some datatype to validate wljdi records
-- ==============================================================================================

type rec_links IS record (
        from_op_seq_num         number,
        to_op_seq_num           number
);
type t_links                    is table of rec_links index by binary_integer;

type rec_op IS record (
        job_op_seq_num          number,
        rtg_op_seq_num          number,
        scheduled_quantity      number,
        yield                   number,
        start_date              date,
        compltion_date          date,
	--Added for bug Fix 7248992
	cumulative_yield         number,
        reverse_cumulative_yield number
);
type t_ops                      is table of rec_op index by binary_integer;

/* ST : Detailed Schedduling : Record type for validating a resource to be added ... */
type new_res_rec IS record
(
    job_op_seq_num                  NUMBER,
    rtg_op_seq_num                  NUMBER,
    resource_id                     NUMBER,
    resource_code                   VARCHAR2(10),
    dept_id                         NUMBER,
    dept_code                       VARCHAR2(10), /* Modified from NUMBER for Bug 5469701 */
    res_seq_num                     NUMBER,
    sub_grp_num                     NUMBER,
    rpl_grp_num                     NUMBER,
    activity_id                     NUMBER,
    standard_rate_flag              NUMBER,
    assigned_units                  NUMBER,
    usage_rate_or_amount            NUMBER,
    usage_rate_or_amount_inverse    NUMBER,
    uom_code                        VARCHAR2(3),
    basis_type                      NUMBER,
    scheduled_flag                  NUMBER,
    autocharge_type                 NUMBER,
    schedule_seq_num                NUMBER,
    setup_id                        NUMBER,
    setup_code                      VARCHAR2(10),
    start_date                      DATE,
    firm_type                       NUMBER,
    grp_seq_id                      NUMBER,
    grp_seq_num                     NUMBER,
    max_assg_units                  NUMBER,
    parent_seq_num                  NUMBER,
    batch_id                        NUMBER,
    completion_date                 DATE
);

type new_res_tbl is table of new_res_rec index by binary_integer;

type rec_op_res IS record (
        job_op_seq_num          number,
        rtg_op_seq_num          number,
        resource_id             number,
        res_seq_num             number,
        sub_grp_num             number,
        rpl_grp_num             number,
        start_date              date,
        /* ST : Detailed Scheduling start */
        firm_type               number,
        setup_id                number,
        setup_code              VARCHAR2(10),
        grp_seq_id              number,
        grp_seq_num             number,
        max_assg_units          number,
        parent_seq_num          number,
        batch_id                number,
        assigned_units          number,
        /* ST : Detailed Scheduling end */
        completion_date         date,
		-- Added For LBJ Interface Alcoa Enhancement
        applied_resource_units  number ,
        uom_code                VARCHAR2(3),
        autocharge_type         NUMBER,
        usage_rate_or_amount    NUMBER,
        scheduled_flag          NUMBER,
        basis_type              NUMBER,
        activity_id             NUMBER,
        schedule_seq_num        NUMBER,
        reco_flag               VARCHAR2(1),
        standard_rate           NUMBER,
        resource_code           VARCHAR2(10)
);
type t_op_res                   is table of rec_op_res index by binary_integer;

type rec_res_ins IS record (
        job_op_seq_num          number,
        rtg_op_seq_num          number,
        res_seq_num             number,
        -- ST : Bug fix 4240165 : Detailed Scheduling changes start
        -- parent_res_seq_num   number,
        -- ST : Bug fix 4240165 : Detailed Scheduling changes end
        instance_id             number,
        serial_number           varchar2(30),
        start_date              date,
        completion_date         date,
        batch_id                number
);
type t_res_ins                  is table of rec_res_ins index by binary_integer;

type rec_res_use IS record (
        job_op_seq_num          number,
        rtg_op_seq_num          number,
        res_seq_num             number,
        instance_id             number,
        serial_number           varchar2(30),
        assigned_units          number,
        start_date              date,
        /* ST : Detailed scheduling : start */
        parent_res_seq_num      number,
        resource_hours          number,
        /* ST : Detailed scheduling : end */
        completion_date         date
);
type t_res_use                  is table of rec_res_use index by binary_integer;

type rec_op_comp IS record (
        job_op_seq_num          number,
        rtg_op_seq_num          number,
        item_id                 number,
        primary_item_id         number,
        src_phm_item_id         number,
        component_seq_id        number,
        date_required           date,
        component_yield         number,
        required_qty            number,
        qpa                     number, -- ADD bug 3347985
	-- Added For LBJ Interface Alcoa Enhancement
        item_old_id         number,
        wip_supply_type     number,
        supply_subinventory varchar2(10),
        supply_locator      number,
        mrp_net_flag        number
);
type t_op_comp                  is table of rec_op_comp index by binary_integer;



-- **********************************************************************************************
-- handle_invalid_field
-- **********************************************************************************************
-- this is called to display message of WSM_INVALID_FIELD type.
-- sets the process_status to 3, sets values of error_code and error_message,
-- writes into fnd log and calls write_to_wie

PROCEDURE handle_invalid_field (
        p_field             in varchar2,
        p_aux_string        in varchar2,
        stmt_number         in number) is

l_err_msg   varchar2(2000) := null;

BEGIN
    v_wlji_process_status(v_idx) := 3;
    v_wlji_err_code(v_idx) := -1;
    fnd_message.set_name('WSM','WSM_INVALID_FIELD');
    fnd_message.set_token('FLD_NAME', p_field);
    l_err_msg := fnd_message.get;
    v_wlji_err_msg(v_idx) := l_err_msg;
    fnd_file.put_line(fnd_file.log,
        'Error: (stmt_num: '|| stmt_number ||') '||l_err_msg||' '||p_aux_string);
    fnd_file.new_line(fnd_file.log, 3);
END handle_invalid_field;



-- **********************************************************************************************
-- handle_errmsg_name
-- **********************************************************************************************
-- this is called to display message of any type which does not involve setting any token
-- sets the process_status to 3, sets values of error_code and error_message,
-- writes into fnd log and calls write_to_wie

PROCEDURE handle_errmsg_name(
        p_product           in varchar2,
        p_message_name      in varchar2,
        stmt_number         in number) is

l_err_msg   varchar2(2000) := null;

BEGIN
    v_wlji_process_status(v_idx) := 3; --ERROR
    v_wlji_err_code(v_idx) := -1;
    fnd_message.set_name(p_product, p_message_name);
    l_err_msg := fnd_message.get;
    v_wlji_err_msg(v_idx) := l_err_msg;
    fnd_file.put_line(fnd_file.log,
        'Error: (stmt_num: '|| stmt_number||') '||l_err_msg);
    fnd_file.new_line(fnd_file.log, 3);
END handle_errmsg_name;



-- **********************************************************************************************
-- handle_error
-- **********************************************************************************************
PROCEDURE handle_error (
        p_err_code          in number,
        p_err_msg           in varchar2,
        stmt_number         in number) is
BEGIN
    v_wlji_process_status(v_idx) := 3; -- ERROR
    v_wlji_err_code(v_idx) := p_err_code;
    v_wlji_err_msg(v_idx)  := substr(p_err_msg,1,2000);
    fnd_file.put_line(fnd_file.log,
        'Error: (stmt_num: ' || stmt_number||') '||p_err_msg);
    fnd_file.new_line(fnd_file.log, 3);
END handle_error;


-- **********************************************************************************************
-- HANDLE_WARNING
-- **********************************************************************************************
PROCEDURE handle_warning (
        p_err_msg                   in varchar2,
        p_header_id                 in number,
        p_request_id                in number,
        p_program_id                in number,
        p_program_application_id    in number) is

dummy_err_code  number;
dummy_err_msg   varchar2(2000);

BEGIN
    fnd_file.put_line(fnd_file.log, 'Warning: ' || p_err_msg);
    wsmputil.WRITE_TO_WIE (
            p_header_id,
            substr(p_err_msg,1,2000),
            p_request_id,
            p_program_id,
            p_program_application_id,
            2,
            dummy_err_code,
            dummy_err_msg );
END handle_warning;



-- **********************************************************************************************
-- FIND_COPY_ROUTING_START: local procedure
-- **********************************************************************************************
procedure find_copy_routing_start(
        p_wip_entity_id         number,
        x_start_op_seq_num      out nocopy number,
        x_start_op_seq_id       out nocopy number,
        x_err_code              out nocopy number,
        x_err_msg               out nocopy varchar2) is

l_char_temp varchar2(1) := 'S';

begin
    x_err_code := 0;
    x_err_msg  := null;

    select wco.operation_seq_num,
           wco.operation_sequence_id
    into   x_start_op_seq_num,
           x_start_op_seq_id
    from   wsm_copy_operations wco
    where  wco.wip_entity_id = p_wip_entity_id
    and    NVL(wco.network_start_end, 'X') = l_char_temp; -- donot use 'S'

exception
    when no_data_found then
        x_err_code := -2;
        fnd_message.set_name('wsm','wsm_net_start_not_found');
        x_err_msg:= fnd_message.get;
        return;

    when others then
        x_err_code := sqlcode;
        x_err_msg  := 'find_copy_routing_start '|| substr(sqlerrm,1,60);
        return;

end find_copy_routing_start;


-- **********************************************************************************************
-- FIND_COPY_ROUTING_END: local procedure
-- **********************************************************************************************
procedure find_copy_routing_end(
        p_wip_entity_id         number,
        x_end_op_seq_num        out nocopy number,
        x_end_op_seq_id         out nocopy number,
        x_err_code              out nocopy number,
        x_err_msg               out nocopy varchar2) is

 l_char_temp varchar2(1) := 'E';

begin
    x_err_code := 0;
    x_err_msg  := null;

    select wco.operation_seq_num,
           wco.operation_sequence_id
    into   x_end_op_seq_num,
           x_end_op_seq_id
    from   wsm_copy_operations wco
    where  wco.wip_entity_id = p_wip_entity_id
    and    NVL(wco.network_start_end, 'X') = l_char_temp; -- donot use 'E'

exception
    when no_data_found then
        x_err_code := -2;
        fnd_message.set_name('wsm','wsm_net_end_not_found');
        x_err_msg:= fnd_message.get;
        return;

    when others then
        x_err_code := sqlcode;
        x_err_msg  := 'find_copy_routing_end '|| substr(sqlerrm,1,60);
        return;

end find_copy_routing_end;


-- **********************************************************************************************
-- FIND_COPY_OP_SEQ_ID: local procedure
-- **********************************************************************************************
procedure find_copy_op_seq_id  (
        p_wip_entity_id                    number,
        p_rtg_op_seq_num                in number,
        x_op_seq_id             out nocopy number,
        x_err_code              out nocopy number,
        x_err_msg               out nocopy varchar2 ) is
begin
    x_err_code := 0;

    select  nvl(operation_sequence_id, -1)
    into    x_op_seq_id
    from    wsm_copy_operations
    where   wip_entity_id = p_wip_entity_id
    and     operation_seq_num = p_rtg_op_seq_num;
exception
    when others then
        x_err_code := sqlcode;
        x_err_msg  := 'find_copy_op_seq_id '|| substr(sqlerrm,1,60);
end find_copy_op_seq_id;


-- **********************************************************************************************
-- VALIDATE_ORG_ID_NAME: local validation procedure
-- **********************************************************************************************

-- Org_id and org_code cannot be NULL together. Org_id is the driven information,
-- Only when org_id is not given will org_code be used to get org_id

PROCEDURE validate_org_id_name(
        p_org_id            in out nocopy number,
        p_org_code          in out nocopy varchar2,
        x_error_code        out nocopy number,
        x_error_msg         out nocopy varchar2) is

l_xst       boolean;
l_stmt_num  number;

BEGIN

    x_error_code := 0;
    x_error_msg := '';
l_stmt_num  := 10;
    if p_org_id IS NULL then
        if p_org_code IS NULL then
            fnd_message.set_name('WSM','WSM_NULL_FIELD');
            fnd_message.set_token('FLD_NAME', 'Organization ID and Code');
            x_error_msg := fnd_message.get;
            x_error_code := -1;
            return;
        end if;

        begin
l_stmt_num  := 20;

	-- changed from org_organization_definitions to MTL_PARAMETERS for bug 5051885
	-- Performance issue on org_organization_definitions for full table scan on base tables
	-- SQL id 16640485

            select organization_id
            into   p_org_id
            from   MTL_PARAMETERS
            where  organization_code = p_org_code;
    -- bug 5051885
        exception
            when others then
                fnd_message.set_name('WSM','WSM_INVALID_FIELD');
                fnd_message.set_token('FLD_NAME', 'Organization Code');
                x_error_msg := fnd_message.get;
                x_error_code := -1;
                return;
        end;
    else
        p_org_code := null; -- ignore org code if id is given
    end if;

l_stmt_num  := 30;
    -- now p_org_id is always available
    l_xst := true;
    l_xst := WSMPLCVA.v_org.exists(p_org_id);
    if l_xst = false then
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'Organization ID');
        x_error_msg := fnd_message.get;
        x_error_code := -1;
        return;
    end if;
EXCEPTION
    when others then
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'Organization ID');
        x_error_msg := fnd_message.get;
        x_error_msg := 'validate_org_id_name (#' || l_stmt_num || ') ' || x_error_msg ;
        x_error_code := -1;
END validate_org_id_name;


-- **********************************************************************************************
-- VALIDATE_WIP_ENTITY_ID_NAME: local validation procedure
-- **********************************************************************************************

-- For job creation, wip_entity_id will be ignored, if job_name is NULL, will default
-- Will validate whether the job_name is used or not in the organization
--
-- For job update, wip_entity_id and job_name cannot be NULL together.
-- Wip_entity_id is the driven information, only when wip_entity_id is NULL will
-- job_name be used to get wip_entity_id
-- Will validate the status of the job

PROCEDURE validate_wip_entity_id_name(
        p_load_type         in number,  -- 5 job creation, 6 job update
        p_org_id            in number,
        p_wip_entity_id     in out nocopy number,
        p_job_name          in out nocopy varchar2,
        x_error_code        out nocopy number,
        x_error_msg         out nocopy varchar2) is

l_temp_num          number;
l_xst               boolean;
l_stmt_num          number;
l_job_name_hash     number;
l_old_job_name      wsm_lot_job_interface.job_name%type; --fix for bug5990761
BEGIN

    x_error_code := 0;
    x_error_msg := '';

l_stmt_num := 10;
    -- Start : Fix for OPMConv project --
--    if LENGTH(p_job_name) > 30 then
--        fnd_message.set_name('WSM','WSM_JOB_NAME_THIRTY_CHAR');

    if LENGTH(p_job_name) > 80 then
        fnd_message.set_name('WSM','WSM_EXCEED_MAX_LEN');
        fnd_message.set_token('FLD_NAME', 'Job Name');
        fnd_message.set_token('VALUE', '80');
        x_error_msg := fnd_message.get;
        x_error_code := -1;
        return;
    end if;
    -- End : Fix for OPMConv project --

    if p_load_type = 5 then   -- Job creation
        if p_job_name is null then
l_stmt_num := 20;
            -- Derive Job_Name.
            select FND_Profile.value('WIP_JOB_PREFIX') || wip_job_number_s.nextval
            into   p_job_name
            from   dual;
        end if;

        -- Be sure the provided Job_Name is not already in use.
        l_temp_num := 0;
        begin
l_stmt_num := 30;
            select 1
            into   l_temp_num
            from   wip_entities
            where  wip_entity_name = p_job_name
            and    organization_id = p_org_id;
            if l_temp_num = 1 then
                fnd_message.set_name('WIP','WIP_ML_JOB_NAME');
                x_error_msg := fnd_message.get;
                x_error_code := -1;
                return;
            end if;
        exception
            when no_data_found then
                null;
            when others then
                fnd_message.set_name('WIP','WIP_ML_JOB_NAME');
                x_error_msg := fnd_message.get;
                x_error_code := -1;
                return;
        end;
        p_wip_entity_id := null; -- Ignore wip_entity_id

    elsif p_load_type = 6 then    -- Job update

        l_xst := false;
        if p_wip_entity_id is null then
            if p_job_name is null then
                fnd_message.set_name('WSM','WSM_NULL_FIELD');
                fnd_message.set_token('FLD_NAME', 'Wip_Entity_Id and Job Name');
                x_error_msg := fnd_message.get;
                x_error_code := -1;
                return;
            end if;

            l_job_name_hash := dbms_utility.get_hash_value(
                                    p_job_name || p_org_id,
                                    37, 1073741824);
            l_xst := g_v_job_name.exists(l_job_name_hash);
            if( NOT l_xst ) then
                begin
l_stmt_num := 40;
                    -- Get wip_entity_id by wip_entity_name
                    select wip_entity_id
                    into   p_wip_entity_id
                    from   wip_entities
                    where  wip_entity_name = p_job_name
                    and    organization_id = p_org_id;
                exception
                    when others then
                        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
                        fnd_message.set_token('FLD_NAME', 'Job_Name');
                        x_error_msg := fnd_message.get;
                        x_error_code := -1;
                        return;
                end;
            else
                p_wip_entity_id := g_v_wip_entity_id(l_job_name_hash);
            end if;
        end if;

        if( NOT l_xst ) then
            -- Now wip_entity_id is available, check job status
            begin
l_stmt_num := 50;

                  --fix for bug5990761  allow update of job name for unreleased jobs
                select decode(wdj.status_type, WIP_CONSTANTS.UNRELEASED,NVL(p_job_name,we.wip_entity_name),we.wip_entity_name),we.wip_entity_name
                into   p_job_name,l_old_job_name
                from   wip_discrete_jobs wdj,
                       wip_entities we
                where  wdj.wip_entity_id = p_wip_entity_id
                and    wdj.status_type in (
                        WIP_CONSTANTS.UNRELEASED,
                        WIP_CONSTANTS.RELEASED,
                        WIP_CONSTANTS.HOLD,
                        WIP_CONSTANTS.CANCELLED)
                and    wdj.wip_entity_id = we.wip_entity_id
                and    we.organization_id = p_org_id;
            exception
                when others then
                    fnd_message.set_name('WSM','WSM_INVALID_FIELD');
                    fnd_message.set_token('FLD_NAME', 'Wip_Entity_Id');
                    x_error_msg := fnd_message.get;
                    x_error_code := -1;
                    return;
            end;

	-- fix for bug5990761 if wip entity id and job name are populated in WLJI, raise error
       -- if job name in WLJI conflicts with wip entity name of some other job in the same org.
          if (l_old_job_name <> p_job_name) then
          l_temp_num := 0;
            begin
                select count(wip_entity_id)
                  into l_temp_num
                  from wip_entities
                 where wip_entity_name = p_job_name
                   and organization_id = p_org_id
                   and wip_entity_id <> p_wip_entity_id;

                if (l_temp_num = 1) then
                   fnd_message.set_name('WIP','WIP_ML_JOB_NAME');
                   x_error_msg := fnd_message.get;
                   x_error_code := -1;
                   return;
                end if;
            exception
                when others then
                     fnd_message.set_name('WSM','WSM_INVALID_FIELD');
                     fnd_message.set_token('FLD_NAME', 'Job_Name');
                     x_error_msg := fnd_message.get;
                     x_error_code := -1;
                     return;
            end;
          end if;
       -- end of additional validation added for 5990761


        end if;

        -- BA: 3512105
        if(WSMPUTIL.get_internal_copy_type(p_wip_entity_id) = 3) then
            fnd_message.set_name('WSM','WSM_NO_VALID_COPY');
            x_error_msg := fnd_message.get;
            x_error_code := -1;
            return;
        end if;
        -- BA: 3512105

    end if; -- Job update


EXCEPTION
    when others then
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'Wip_Entity_ID/Job_Name');
        x_error_msg := fnd_message.get;
        x_error_msg := 'validate_wip_entity_id_name (#' || l_stmt_num || ') ' || x_error_msg;
        x_error_code := -1;
END validate_wip_entity_id_name;


-- **********************************************************************************************
-- DEFAULT_WLJDI_FIELDS: local procedure
-- **********************************************************************************************

procedure default_wljdi_fields(
        p_wip_entity_id     in number,
        p_org_id            in number,
        p_parent_header_id  in number,      -- header_id in WLJI, pass null if N/A
        p_group_id          in number,
        p_wo_records_exist  in varchar2,
        p_error_code        out nocopy number,
        p_error_msg         out nocopy varchar2) is

cursor c_wljdi is
    select  record_id,
            -- ST Fix for bug 4285032 :
        -- APS will be populating 8 for resource instance information
        -- and 9 resource instance usage information..
        -- Map it to WSM load type 7 --> resource instance
        --                         4 --> resource instance usage..
            decode(load_type,8,7,
                         9,4,
                 load_type) load_type,
            substitution_type,
            job_op_seq_num,
            routing_op_seq_num,
            next_routing_op_seq_num,
            inventory_item_id_new,
            inventory_item_new,
            primary_item,
            primary_item_id,
            src_phantom_item,
            src_phantom_item_id,
            component_sequence_id,
            date_required,
            scheduled_quantity,
            required_quantity,
            batch_id,
            assigned_units,
            instance_id_new,
            operation_completion_date,
            operation_start_date,
            operation_yield,
            resource_code_new,
            resource_id_new,
            resource_seq_num,
            substitute_group_num,
            replacement_group_num,
            serial_number_new,
            start_date,
            completion_date,
            -- ST :  Detailed scheduling : start
            firm_type,
            setup_id,
            setup_code,
            group_sequence_id,
            group_sequence_num,
            max_assigned_units,
            parent_resource_seq_num,
            resource_hours,
            -- ST : Detailed Scheduling : Added for resource adding changes
            department_id          ,
            department_code ,
            -- ST : Detailed Scheduling : Added for resource adding changes : end
            -- Added For LBJ Interface Alcoa Enhancement
            recommended,
            standard_operation_code,
            standard_operation_id,
            operation_yield_enabled,
            minimum_transfer_quantity,
            backflush_flag,
            count_point_type,
            description,
            include_in_rollup,
            option_dependent_flag,
            inventory_item_id_old,
            inventory_item_old,
            wip_supply_type,
            cumulative_yield,/*Added for bugfix:7248992 */
            reverse_cumulative_yield/*Added for bugfix:7248992 */
    from    wsm_lot_job_dtl_interface
    where   parent_header_id = p_parent_header_id
    and     process_status = WIP_CONSTANTS.RUNNING;

cursor c_wljdi_indp is
    select  record_id,
            -- ST Fix for bug 4285032 :
            -- APS will be populating 8 for resource instance information
            -- and 9 resource instance usage information..
            -- Map it to WSM load type 7 --> resource instance
            --                         4 --> resource instance usage..
            decode(load_type,8,7,
                             9,4,
                             load_type) load_type,
            substitution_type,
            job_op_seq_num,
            routing_op_seq_num,
            next_routing_op_seq_num,
            inventory_item_id_new,
            inventory_item_new,
            primary_item,
            primary_item_id,
            src_phantom_item,
            src_phantom_item_id,
            component_sequence_id,
            date_required,
            scheduled_quantity,
            required_quantity,
            batch_id,
            assigned_units,
            instance_id_new,
            operation_completion_date,
            operation_start_date,
            operation_yield,
            resource_code_new,
            resource_id_new,
            resource_seq_num,
            substitute_group_num,
            replacement_group_num,
            serial_number_new,
            start_date,
            completion_date,
            /* ST :  Detailed scheduling : start */
            firm_type,
            setup_id,
            setup_code,
            group_sequence_id,
            group_sequence_num,
            max_assigned_units,
            parent_resource_seq_num,
            resource_hours,
            /* ST :  Detailed scheduling : END */
            /* ST : Detailed Scheduling : Added for resource adding changes */
            department_id          ,
            department_code ,
            /* ST : Detailed Scheduling : Added for resource adding changes : end */
            -- Added For LBJ Interface Alcoa Enhancement
            recommended,
            standard_operation_code,
            standard_operation_id,
            operation_yield_enabled,
            minimum_transfer_quantity,
            backflush_flag,
            count_point_type,
            description,
            include_in_rollup,
            option_dependent_flag,
            inventory_item_id_old,
            inventory_item_old,
            wip_supply_type,
            cumulative_yield,/*Added for bugfix:7248992 */
            reverse_cumulative_yield/*Added for bugfix:7248992 */
    from    wsm_lot_job_dtl_interface
    where   parent_header_id IS NULL
    and     wip_entity_id     = p_wip_entity_id
    and     organization_id   = p_org_id
    and     process_status    = WIP_CONSTANTS.RUNNING
    and     NVL(group_id, -1) = NVL(p_group_id, -1);

l_stmt_num                  number;
l_d                         number;
l_out                       number;
l_hash_value                number;

l_v_sub_grp_num             t_number;
l_v_rpl_grp_num             t_number;
l_v_res_seq_num             t_number;
l_v_ins_id                  t_number;
l_v_ser_num                 t_serial;
l_v_item_id                 t_number;
l_v_prm_item_id             t_number;
l_v_phm_item_id             t_number;
l_v_res_id                  t_number;
l_v_record_id               t_number;

/* ST : Detailed Scheduling start */
l_v_dept_id             t_number;
l_v_res_code            t_res_code;

l_v_setup_id               t_number;  -- Added for bug fix 4704289

l_index             number;
/* ST : Detailed Scheduling end */

l_load_type                 number;
l_sub_type                  number;
l_rtg_op_seq_num            number;
l_job_op_seq_num            number;
l_resource_id               number;
l_sub_grp_num               number;
l_rpl_grp_num               number;
l_res_seq_num               number;

/* ST : Detailed Scheduling : start */
l_dept_id               number;
l_par_res_seq_num       number;
/* ST : Detailed Scheduling : end */

l_setup_id				number;  -- Added for bug fix 4704289


e_invalid_sub_load_type     exception;
e_invalid_op_seq_num        exception;
e_wljdi_common_error        exception;
e_invalid_item_name         exception;
e_invalid_resource_code     exception;
e_no_res_seq_num            exception;

/* ST : Detailed Scheduling : start */
e_invalid_dept_code        exception;
e_invalid_resource_id      exception;
/* ST : Detailed Scheduling : end */

e_invalid_setup_code	   exception;	 -- Added for bug fix 4704289

-- Added For LBJ Interface Alcoa Enhancement
l_v_op_start_date          t_date;
l_v_op_completion_date     t_date;
l_v_min_trf_qty            t_number;
l_v_count_point_type       t_number;
l_v_description            t_desc;
l_v_backflush_flag         t_number;
l_v_op_yield_enable        t_number;
l_v_option_dep_flag        t_number;
l_v_inc_in_rollup          t_number;
l_v_std_op_id              t_number;
l_v_std_op_code            t_op_code;
l_v_recommended            t_recoflag;
l_v_item_old_id             t_number;
l_res_num                  number;
l_res_exist                number;

l_temp                     number;
l_job_start_date           date;
l_job_compl_date           date;
l_xst                      number;

e_inv_std_op               exception;
e_invalid_min_trf_qty      exception;
e_invalid_count_point      exception;
e_invalid_backflush_flag   exception;
e_dup_op_seq               exception;
e_invalid_op_date          exception;
--Alcoa Enhancement
e_invalid_res_seq_num      exception;
e_res_seq_num_exist        exception;
e_invalid_routing_op_seq   exception;
e_invalid_job_op_seq       exception;

BEGIN
    ------------------------------------
    -- empty v_wljdi, load wljdi records
    ------------------------------------
    -- BA: bug 3313463/3311695 8i compatibility
    v_wljdi_record_id               := t_wljdi_record_id();
    v_wljdi_load_type               := t_wljdi_load_type();
    v_wljdi_substitution_type       := t_wljdi_substitution_type();
    v_wljdi_job_op_seq_num          := t_wljdi_job_op_seq_num();
    v_wljdi_routing_op_seq_num      := t_wljdi_routing_op_seq_num();
    v_wljdi_next_rtg_op_seq_num     := t_wljdi_next_rtg_op_seq_num();

    v_wljdi_inventory_item_id_new   := t_wljdi_inventory_item_id_new();
    v_wljdi_inventory_item_new      := t_wljdi_inventory_item_new();
    v_wljdi_primary_item            := t_wljdi_primary_item();
    v_wljdi_primary_item_id         := t_wljdi_primary_item_id();
    v_wljdi_src_phantom_item        := t_wljdi_src_phantom_item();
    v_wljdi_src_phantom_item_id     := t_wljdi_src_phantom_item_id();
    v_wljdi_component_sequence_id   := t_wljdi_component_sequence_id();
    v_wljdi_date_required           := t_wljdi_date_required();
    v_wljdi_scheduled_quantity      := t_wljdi_scheduled_quantity();
    v_wljdi_required_quantity       := t_wljdi_required_quantity();
    v_wljdi_batch_id                := t_wljdi_batch_id();
    v_wljdi_assigned_units          := t_wljdi_assigned_units();
    v_wljdi_instance_id_new         := t_wljdi_instance_id_new();
    v_wljdi_op_completion_date      := t_wljdi_op_completion_date();
    v_wljdi_op_start_date           := t_wljdi_op_start_date();
    v_wljdi_op_yield                := t_wljdi_op_yield();
    v_wljdi_resource_code_new       := t_wljdi_resource_code_new();
    v_wljdi_resource_id_new         := t_wljdi_resource_id_new();
    v_wljdi_resource_seq_num        := t_wljdi_resource_seq_num();
    v_wljdi_substitute_group_num    := t_wljdi_substitute_group_num();
    v_wljdi_replacement_group_num   := t_wljdi_replacement_group_num();
    v_wljdi_serial_number_new       := t_wljdi_serial_number_new();
    v_wljdi_start_date              := t_wljdi_start_date();
    v_wljdi_completion_date         := t_wljdi_completion_date();

    /* ST :  Detailed scheduling : start */
    v_wljdi_resource_hours          := t_wljdi_resource_hours();
    v_wljdi_firm_type               := t_wljdi_firm_type();
    v_wljdi_setup_id                := t_wljdi_setup_id();
    v_wljdi_setup_code              := t_wljdi_setup_code();
    v_wljdi_grp_seq_id              := t_wljdi_grp_seq_id();
    v_wljdi_grp_seq_num             := t_wljdi_grp_seq_num();
    v_wljdi_max_assg_units          := t_wljdi_max_assg_units();
    v_wljdi_parent_seq_num          := t_wljdi_parent_seq_num();

    /* Batch_id is already taken care */

    /* ST : Detailed Scheduling : Considered for adding a setup resource.... */
    v_wljdi_department_id           := t_wljdi_department_id();
    v_wljdi_department_code         := t_wljdi_department_code();
    /* ST : Detailed scheduling : end */

    -- Added For LBJ Interface Alcoa Enhancement
    v_wljdi_recommended             := t_wljdi_recommended();
    v_wljdi_std_op_code             := t_wljdi_std_op_code();
    v_wljdi_std_op_id               := t_wljdi_std_op_id();
    v_wljdi_op_yield_enable         := t_wljdi_op_yield_enable();
    v_wljdi_min_trf_qty             := t_wljdi_min_trf_qty();
    v_wljdi_backflush_flag          := t_wljdi_backflush_flag();
    v_wljdi_count_point_type        := t_wljdi_count_point_type();
    v_wljdi_description             := t_wljdi_description();
    v_wljdi_inc_in_rollup           := t_wljdi_inc_in_rollup();
    v_wljdi_option_dep_flag         := t_wljdi_option_dep_flag();
    v_wljdi_inventory_item_id_old   := t_wljdi_inventory_item_id_old();
    v_wljdi_inventory_item_old      := t_wljdi_inventory_item_old();
    v_wljdi_wip_supply_type         := t_wljdi_wip_supply_type();

---Added for BugFix 7248992
    v_wljdi_cum_yield               := t_wljdi_cum_yield();
    v_wljdi_rev_cum_yield           := t_wljdi_rev_cum_yield();

    -- EA: bug 3313463/3311695 8i compatibility

    if(p_parent_header_id IS NULL) then
        l_stmt_num := 10.1;
        --BC: bug 3313463/3311695
        open c_wljdi_indp;
        fetch c_wljdi_indp bulk collect into
            v_wljdi_record_id,
            v_wljdi_load_type,
            v_wljdi_substitution_type,
            v_wljdi_job_op_seq_num,
            v_wljdi_routing_op_seq_num,
            v_wljdi_next_rtg_op_seq_num,
            v_wljdi_inventory_item_id_new,
            v_wljdi_inventory_item_new,
            v_wljdi_primary_item,
            v_wljdi_primary_item_id,
            v_wljdi_src_phantom_item,
            v_wljdi_src_phantom_item_id,
            v_wljdi_component_sequence_id,
            v_wljdi_date_required,
            v_wljdi_scheduled_quantity,
            v_wljdi_required_quantity,
            v_wljdi_batch_id,
            v_wljdi_assigned_units,
            v_wljdi_instance_id_new,
            v_wljdi_op_completion_date,
            v_wljdi_op_start_date,
            v_wljdi_op_yield,
            v_wljdi_resource_code_new,
            v_wljdi_resource_id_new,
            v_wljdi_resource_seq_num,
            v_wljdi_substitute_group_num,
            v_wljdi_replacement_group_num,
            v_wljdi_serial_number_new,
            v_wljdi_start_date,
            v_wljdi_completion_date,
            /* ST :  Detailed scheduling : start */
            v_wljdi_firm_type   ,
            v_wljdi_setup_id    ,
            v_wljdi_setup_code  ,
            v_wljdi_grp_seq_id  ,
            v_wljdi_grp_seq_num ,
            v_wljdi_max_assg_units,
            v_wljdi_parent_seq_num,
            v_wljdi_resource_hours,
            /* ST :  Detailed scheduling : END */
            /* ST : Detailed Scheduling : Considered for adding a resource */
            v_wljdi_department_id      ,
            v_wljdi_department_code,
            /* ST : Detailed Scheduling :  end adding a resource changes */
            -- Added For LBJ Interface Alcoa Enhancement
            v_wljdi_recommended,
            v_wljdi_std_op_code,
            v_wljdi_std_op_id,
            v_wljdi_op_yield_enable,
            v_wljdi_min_trf_qty,
            v_wljdi_backflush_flag,
            v_wljdi_count_point_type,
            v_wljdi_description,
            v_wljdi_inc_in_rollup,
            v_wljdi_option_dep_flag,
            v_wljdi_inventory_item_id_old,
            v_wljdi_inventory_item_old,
            v_wljdi_wip_supply_type,
	    v_wljdi_cum_yield,
	    v_wljdi_rev_cum_yield
        ;
        close c_wljdi_indp;
        --EC: bug 3313463/3311695
    else
l_stmt_num := 10.2;
        --BC: bug 3313463/3311695
        open c_wljdi;
        fetch c_wljdi bulk collect into
            v_wljdi_record_id,
            v_wljdi_load_type,
            v_wljdi_substitution_type,
            v_wljdi_job_op_seq_num,
            v_wljdi_routing_op_seq_num,
            v_wljdi_next_rtg_op_seq_num,
            v_wljdi_inventory_item_id_new,
            v_wljdi_inventory_item_new,
            v_wljdi_primary_item,
            v_wljdi_primary_item_id,
            v_wljdi_src_phantom_item,
            v_wljdi_src_phantom_item_id,
            v_wljdi_component_sequence_id,
            v_wljdi_date_required,
            v_wljdi_scheduled_quantity,
            v_wljdi_required_quantity,
            v_wljdi_batch_id,
            v_wljdi_assigned_units,
            v_wljdi_instance_id_new,
            v_wljdi_op_completion_date,
            v_wljdi_op_start_date,
            v_wljdi_op_yield,
            v_wljdi_resource_code_new,
            v_wljdi_resource_id_new,
            v_wljdi_resource_seq_num,
            v_wljdi_substitute_group_num,
            v_wljdi_replacement_group_num,
            v_wljdi_serial_number_new,
            v_wljdi_start_date,
            v_wljdi_completion_date,
            /* ST :  Detailed scheduling : start */
            v_wljdi_firm_type   ,
            v_wljdi_setup_id    ,
            v_wljdi_setup_code  ,
            v_wljdi_grp_seq_id  ,
            v_wljdi_grp_seq_num ,
            v_wljdi_max_assg_units,
            v_wljdi_parent_seq_num,
            v_wljdi_resource_hours,
            /* ST :  Detailed scheduling : END */
            /* ST : Detailed Scheduling : Considered for adding a resource */
            v_wljdi_department_id      ,
            v_wljdi_department_code,
            /* ST : Detailed Scheduling :  end adding a resource changes */
            -- Added For LBJ Interface Alcoa Enhancement
            v_wljdi_recommended,
            v_wljdi_std_op_code,
            v_wljdi_std_op_id,
            v_wljdi_op_yield_enable,
            v_wljdi_min_trf_qty,
            v_wljdi_backflush_flag,
            v_wljdi_count_point_type,
            v_wljdi_description,
            v_wljdi_inc_in_rollup,
            v_wljdi_option_dep_flag,
            v_wljdi_inventory_item_id_old,
            v_wljdi_inventory_item_old,
            v_wljdi_wip_supply_type,
	    v_wljdi_cum_yield,
	    v_wljdi_rev_cum_yield
        ;
        close c_wljdi;
        --EC: bug 3313463/3311695
    end if;


    ---------------------------------------
    -- validate required fields and default
    ---------------------------------------
l_stmt_num := 20;
    -- clear output PL/SQL table
    l_out := 1;
    l_v_sub_grp_num.delete;
    l_v_rpl_grp_num.delete;
    l_v_res_seq_num.delete;
    l_v_ins_id.delete;
    l_v_ser_num.delete;
    l_v_item_id.delete;
    l_v_prm_item_id.delete;
    l_v_phm_item_id.delete;
    l_v_res_id.delete;
    l_v_record_id.delete;

    /* ST : Detailed Scheduling start */
    l_v_dept_id.delete;
    l_v_res_code.delete;
	l_v_setup_id.delete;      -- Added for bug fix 4704289
    /* ST : Detailed Scheduling end */

    -- Added For LBJ Interface Alcoa Enhancement
    l_v_op_start_date.delete;
    l_v_op_completion_date.delete;
    l_v_min_trf_qty.delete;
    l_v_count_point_type.delete;
    l_v_description.delete;
    l_v_backflush_flag.delete;
    l_v_op_yield_enable.delete;
    l_v_option_dep_flag.delete;
    l_v_inc_in_rollup.delete;
    l_v_std_op_id.delete;
    l_v_std_op_code.delete;
    l_v_item_old_id.delete;
    l_v_recommended.delete;

    l_d := v_wljdi_record_id.first;
    while l_d IS NOT NULL
    loop
        l_load_type         := v_wljdi_load_type(l_d);
        l_sub_type          := v_wljdi_substitution_type(l_d);
        l_rtg_op_seq_num    := v_wljdi_routing_op_seq_num(l_d);
        l_job_op_seq_num    := v_wljdi_job_op_seq_num(l_d);

        -- We will ignore job_op_seq_num if p_wo_records_exist <> 'Y'
        if NOT(p_wo_records_exist = 'Y') then
            v_wljdi_job_op_seq_num(l_d) := NULL;
        end if;

        -- Added For LBJ Interface Alcoa Enhancement
        -- Validate job_op_seq_num.
        if v_wljdi_job_op_seq_num(l_d) is not null then
            begin
                select 1
                into l_xst
                from wip_operations
                where wip_entity_id = p_wip_entity_id
                and organization_id = p_org_id
                and operation_seq_num = v_wljdi_job_op_seq_num(l_d);
            exception
                when others then
                    raise e_invalid_job_op_seq;
            end;
        end if;

l_stmt_num := 30;
        -- validete substitution_type
        if l_sub_type not in (WSM_SUB_DEL, WSM_SUB_ADD, WSM_SUB_CHG,
                              WSM_SUB_REC, WSM_SUB_DIS)
        then
            -- get error message
            fnd_message.set_name('WSM','WSM_INVALID_FIELD');
            fnd_message.set_token('FLD_NAME', 'substitution_type');
            p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                           || fnd_message.get;
            p_error_code := -1;
            raise e_wljdi_common_error;
        end if;

        ---------------------------------------------------------------------------
        -- {{ validete load_type, substitution_type combination and required fields
        ---------------------------------------------------------------------------
        if (l_load_type = WSM_LOAD_RES) then        -- resource
l_stmt_num := 40.1;
            if l_sub_type NOT IN (WSM_SUB_DEL, WSM_SUB_ADD, WSM_SUB_CHG, WSM_SUB_REC)
            then
                raise e_invalid_sub_load_type;
            end if;
            if(l_rtg_op_seq_num IS NULL and l_job_op_seq_num IS NULL)
            then
                raise e_invalid_op_seq_num;
            end if;

            -- check resource_id_new/resource_code_new
            -- Modified For LBJ Interface Alcoa Enhancement
            -- Resource New is not used while deleting resource.
            if l_sub_type <> WSM_SUB_DEL then
                if( v_wljdi_resource_id_new(l_d) IS NULL) then
                    if v_wljdi_resource_code_new(l_d) IS NULL then
                        fnd_message.set_name('WSM','WSM_NULL_FIELD');
                        fnd_message.set_token('FLD_NAME', 'resource_id_new/resource_code_new');
                        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                                    || fnd_message.get;
                        p_error_code := -1;
                        raise e_wljdi_common_error;
                    else
                        -- get resource id from item name
                        l_hash_value := dbms_utility.get_hash_value(
                                                v_wljdi_resource_code_new(l_d) || p_org_id,
                                                37, 1073741824);
                        if(g_v_res_id.exists(l_hash_value)) then
                            v_wljdi_resource_id_new(l_d) := g_v_res_id(l_hash_value);
                        else
                            begin
l_stmt_num := 40.2;
                                select unique(resource_id)
                                into   v_wljdi_resource_id_new(l_d)
                                from   bom_resources
                                where  resource_code = v_wljdi_resource_code_new(l_d)
                                and    organization_id = p_org_id
                                and    cost_code_type in (3,4);
                            exception
                                when others then
                                    raise e_invalid_resource_code;
                            end;
                            g_v_res_id(l_hash_value) := v_wljdi_resource_id_new(l_d);
                        end if;
                    end if;
                --end if;
                /* ST : Detailed Scheduling..... */
                elsif v_wljdi_resource_code_new(l_d) IS NULL then
                        begin   /* unique why...? ..... */
                                    select unique(resource_code)
                                    into   v_wljdi_resource_code_new(l_d)
                                    from   bom_resources
                                    where  resource_id = v_wljdi_resource_id_new(l_d)
                                    and    organization_id = p_org_id
                                    and    cost_code_type in (3,4);

                        exception
                                    when others then
                                    raise e_invalid_resource_id;
                        end;
                end if;

                if(v_wljdi_resource_id_new(l_d) IS NULL) then
                    fnd_message.set_name('WSM','WSM_NULL_FIELD');
                    fnd_message.set_token('FLD_NAME', 'resource_id_new');
                    p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                                || fnd_message.get;
                    p_error_code := -1;
                    raise e_wljdi_common_error;
                end if;
            else
                if v_wljdi_resource_seq_num(l_d) is null then
                    raise e_invalid_res_seq_num;
                end if;

                if l_job_op_seq_num is not null then
                    BEGIN
                        l_xst := 0;

                        select resource_id
                        into v_wljdi_resource_id_new(l_d)
                        from   wip_operation_resources wor
                        where  wor.wip_entity_id = p_wip_entity_id
                        and    wor.operation_seq_num = l_job_op_seq_num
                        and    wor.resource_seq_num = v_wljdi_resource_seq_num(l_d);
                    EXCEPTION
                        when no_data_found then
                            l_xst := 1;
                        when others then
                            raise e_invalid_res_seq_num;
                    END;
                    if l_xst =1 then
                        begin
                            select resource_id
                            into v_wljdi_resource_id_new(l_d)
                            from   wip_sub_operation_resources wsor
                            where  wsor.wip_entity_id = p_wip_entity_id
                            and    wsor.operation_seq_num = l_job_op_seq_num
                            and    wsor.resource_seq_num = v_wljdi_resource_seq_num(l_d);
                        exception
                            when others then
                                raise e_invalid_res_seq_num;
                        end;
                    end if;
                elsif l_rtg_op_seq_num is not null then
                    BEGIN
                        l_xst := 0;
                        select  resource_id
                        into    v_wljdi_resource_id_new(l_d)
                        from    wsm_copy_op_resources wcor
                        where   wcor.wip_entity_id        = p_wip_entity_id
                        and     wcor.operation_seq_num    = l_rtg_op_seq_num
                        and     wcor.resource_seq_num = v_wljdi_resource_seq_num(l_d);
                    EXCEPTION
                        when others then
                            raise e_invalid_res_seq_num;
                    END;

                end if;

            end if;
            /* ST : Detailed Scheduling..... end */
            --if(v_wljdi_resource_id_new(l_d) IS NULL or
            --   v_wljdi_substitute_group_num(l_d) IS NULL )
            --then
            --    fnd_message.set_name('WSM','WSM_NULL_FIELD');
            --    fnd_message.set_token('FLD_NAME', 'resource_id_new/substitute_group_num');
            --    p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
            --                || fnd_message.get;
            --    p_error_code := -1;
            --    raise e_wljdi_common_error;
            --end if;
	    --Modiified for Alcoa Enhancement
--            if(v_wljdi_resource_id_new(l_d) IS NULL)
--            then
--                fnd_message.set_name('WSM','WSM_NULL_FIELD');
--                fnd_message.set_token('FLD_NAME', 'resource_id_new');
--                p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
--                            || fnd_message.get;
--                p_error_code := -1;
--                raise e_wljdi_common_error;
--            end if;

            /* ST : Detailed Scheduling : Add code here to default the dept id from dept code provided.... */
            if (v_wljdi_department_code(l_d) IS NOT NULL) then
                    begin
                             select unique(department_id)
                             into   l_dept_id
                             from   bom_departments
                             where  department_code = v_wljdi_department_code(l_d)
                             and    department_id   = nvl(v_wljdi_department_id(l_d),department_id)
                             and    organization_id = p_org_id;
                        exception
                             when others then
                                     raise e_invalid_dept_code;
                     end;
             end if;
             v_wljdi_department_id(l_d) := l_dept_id;
             /* ST : Detailed Scheduling : end */


			 /* SS : Detailed Scheduling : Add code here to default the setup id from
			    setup code if setup id is entered as null. Added for bug fix 4704289  */
            if (v_wljdi_setup_id(l_d) IS NULL and v_wljdi_setup_code(l_d) is NOT NULL) then
					begin

							select  bst.setup_id
							into    l_setup_id
							from    BOM_SETUP_TYPES bst
							where   bst.setup_code      = v_wljdi_setup_code(l_d)
							and     bst.organization_id = p_org_id;

							v_wljdi_setup_id(l_d) :=l_setup_id;
					exception
							when no_data_found then
								raise e_invalid_setup_code;
							when others then
								null;
					end;
			end if;
			/* SS : Detailed Scheduling : end.  Added for bug fix 4704289 */

        elsif (l_load_type = WSM_LOAD_COMP) then     -- component
l_stmt_num := 50.1;
            if l_sub_type NOT IN (WSM_SUB_DEL, WSM_SUB_ADD, WSM_SUB_CHG, WSM_SUB_REC)
            then
                raise e_invalid_sub_load_type;
            end if;
            if(l_rtg_op_seq_num IS NULL and l_job_op_seq_num IS NULL)
            then
                raise e_invalid_op_seq_num;
            end if;

           -- Added For LBJ Interface Alcoa Enhancement
            if l_sub_type = WSM_SUB_DEL then
                if(v_wljdi_inventory_item_id_old(l_d) IS NULL) then
                    if v_wljdi_inventory_item_old(l_d) IS NULL THEN
                        fnd_message.set_name('WSM','WSM_NULL_FIELD');
                        fnd_message.set_token('FLD_NAME', 'inventory_item_id_old/inventory_item_old');
                        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                                    || fnd_message.get;
                        p_error_code := -1;
                        raise e_wljdi_common_error;
                    else
l_stmt_num := 50;
                        begin
                            select unique(inventory_item_id)
                            into   v_wljdi_inventory_item_id_old(l_d)
                            from   mtl_system_items_kfv
                            where  concatenated_segments = v_wljdi_inventory_item_old(l_d)
                            and    organization_id = p_org_id;
                        exception
                            when others then
                                raise e_invalid_item_name;
                        end;
                    end if;
                else
                    begin
                        select concatenated_segments
                        into   v_wljdi_inventory_item_old(l_d)
                        from   mtl_system_items_kfv
                        where  inventory_item_id = v_wljdi_inventory_item_id_old(l_d)
                        and    organization_id = p_org_id;
                    exception
                        when others then
                            raise e_invalid_item_name;
                    end;
                end if;
            end if;

            -- check inventory_item_id_new/inventory_item_new
            -- Modified For LBJ Interface Alcoa Enhancement
            if l_sub_type not in (WSM_SUB_DEL) then
                if(v_wljdi_inventory_item_id_new(l_d) IS NULL) then
                    if v_wljdi_inventory_item_new(l_d) IS NULL then
                        fnd_message.set_name('WSM','WSM_NULL_FIELD');
                        fnd_message.set_token('FLD_NAME', 'inventory_item_id_new/inventory_item_new');
                        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                                    || fnd_message.get;
                        p_error_code := -1;
                        raise e_wljdi_common_error;
                    else
l_stmt_num := 50.2;
                        -- get item id from item name
                        l_hash_value := dbms_utility.get_hash_value(
                                                v_wljdi_inventory_item_new(l_d) || p_org_id,
                                                37, 1073741824);
                        if(g_v_item_id.exists(l_hash_value)) then
                            v_wljdi_inventory_item_id_new(l_d) := g_v_item_id(l_hash_value);
                        else
                            begin
                                select unique(inventory_item_id)
                                into   v_wljdi_inventory_item_id_new(l_d)
                                from   mtl_system_items_kfv
                                where  concatenated_segments = v_wljdi_inventory_item_new(l_d)
                                and    organization_id = p_org_id;
                            exception
                                when others then
                                    raise e_invalid_item_name;
                            end;
                            g_v_item_id(l_hash_value) := v_wljdi_inventory_item_id_new(l_d);
                        end if;
                    end if;
                else
                    begin
                        select concatenated_segments
                        into   v_wljdi_inventory_item_new(l_d)
                        from   mtl_system_items_kfv
                        where  inventory_item_id = v_wljdi_inventory_item_id_new(l_d)
                        and    organization_id = p_org_id;
                    exception
                        when others then
                            raise e_invalid_item_name;
                    end;
                end if;
            end if;

            -- check primary_item_id/primary_item
            if(v_wljdi_primary_item_id(l_d) IS NULL) then
                if v_wljdi_primary_item(l_d) IS NULL then
                    fnd_message.set_name('WSM','WSM_NULL_FIELD');
                    fnd_message.set_token('FLD_NAME', 'primary_item_id/primary_item');
                    p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                                || fnd_message.get;
                    p_error_code := -1;
                    raise e_wljdi_common_error;
                else
l_stmt_num := 50.3;
                    -- get primary item id from item name
                    l_hash_value := dbms_utility.get_hash_value(
                                            v_wljdi_primary_item(l_d) || p_org_id,
                                            37, 1073741824);
                    if(g_v_item_id.exists(l_hash_value)) then
                        v_wljdi_primary_item_id(l_d) := g_v_item_id(l_hash_value);
                    else
                        begin
                            select unique(inventory_item_id)
                            into   v_wljdi_primary_item_id(l_d)
                            from   mtl_system_items_kfv
                            where  concatenated_segments = v_wljdi_primary_item(l_d)
                            and    organization_id = p_org_id;
                        exception
                            when others then
                                raise e_invalid_item_name;
                        end;
                        g_v_item_id(l_hash_value) := v_wljdi_primary_item_id(l_d);
                    end if;
                end if;
            end if;

            -- Modified for Alcoa Enhancement
            -- check src_phantom_item_id/phantom_item
            if v_wljdi_src_phantom_item_id(l_d) IS NULL then
                if v_wljdi_src_phantom_item(l_d) IS NOT NULL then
l_stmt_num := 50.4;
                    -- get item id from item name
                    l_hash_value := dbms_utility.get_hash_value(
                                            v_wljdi_src_phantom_item(l_d) || p_org_id,
                                            37, 1073741824);
                    if(g_v_item_id.exists(l_hash_value)) then
                        v_wljdi_src_phantom_item_id(l_d) := g_v_item_id(l_hash_value);
                    else
                        begin
                            select unique(inventory_item_id)
                            into   v_wljdi_src_phantom_item_id(l_d)
                            from   mtl_system_items_kfv
                            where  concatenated_segments = v_wljdi_src_phantom_item(l_d)
                            and    organization_id = p_org_id;
                        exception
                            when others then
                                raise e_invalid_item_name;
                        end;
                        g_v_item_id(l_hash_value) := v_wljdi_src_phantom_item_id(l_d);
                    end if;
                end if;
            else
                begin
                    select concatenated_segments
                    into   v_wljdi_src_phantom_item(l_d)
                    from   mtl_system_items_kfv
                    where  inventory_item_id = v_wljdi_src_phantom_item_id(l_d)
                    and    organization_id = p_org_id;
                exception
                    when others then
                        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
                        fnd_message.set_token('FLD_NAME', 'Source_phantom_item_id/Source_phantom_item_name');
                        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '|| fnd_message.get;
                        p_error_code := -1;
                        raise e_wljdi_common_error;
                end;
            end if;

            -- Default source phantom Id for phantom component or it's child while deletion.
            if (l_sub_type = WSM_SUB_DEL AND v_wljdi_routing_op_seq_num(l_d) is not null) THEN
                 begin
                    select source_phantom_id
                    into   v_wljdi_src_phantom_item_id(l_d)
                    from   wsm_copy_requirement_ops
                    where  wip_entity_id=p_wip_entity_id
                    and    component_item_id = v_wljdi_inventory_item_id_old(l_d)
                    and    operation_seq_num in (v_wljdi_routing_op_seq_num(l_d), (-1)*v_wljdi_routing_op_seq_num(l_d));
                 exception
                    when others then
                      raise e_invalid_item_name;
                 end;
            end if;

            -- 1. For a parent phantom, phantom item id will be set to 0.
            -- 2. For a child of phantom, phantom item id will be set to parent phantom.
            -- 3. For a non-phantom, phantom item id will be set to -1.
            --  This will be used to sort the components in appropriate order when processing them.

            if v_wljdi_src_phantom_item_id(l_d) is not null then
                if ( (v_wljdi_src_phantom_item_id(l_d)= v_wljdi_inventory_item_id_old(l_d) and
                      l_sub_type = WSM_SUB_DEL) OR
                     (v_wljdi_wip_supply_type(l_d)= WIP_CONSTANTS.PHANTOM and
                      l_sub_type = WSM_SUB_ADD and
                      v_wljdi_src_phantom_item_id(l_d)= v_wljdi_inventory_item_id_new(l_d)) ) then
                        v_wljdi_src_phantom_item_id(l_d):=0;
                end if;
            else
                if (v_wljdi_wip_supply_type(l_d)= WIP_CONSTANTS.PHANTOM and
                      l_sub_type = WSM_SUB_ADD) then
                    v_wljdi_src_phantom_item_id(l_d):= 0;
                else
                    v_wljdi_src_phantom_item_id(l_d):= -1;
                end if;

            end if;

            -- ignore the following fields
            v_wljdi_substitute_group_num(l_d)  := NULL;
            v_wljdi_replacement_group_num(l_d) := NULL;
            v_wljdi_resource_id_new(l_d)       := NULL;
            /* ST : Detailed Scheduling..... */
            v_wljdi_resource_code_new(l_d)     := NULL;
            /* ST : Detailed Scheduling..... */
            v_wljdi_resource_seq_num(l_d)      := NULL;
            v_wljdi_instance_id_new(l_d)       := NULL;
            v_wljdi_serial_number_new(l_d)     := NULL;
            if lbji_debug = 'Y' then
                fnd_file.put_line(fnd_file.log,
                    'Ignore the following fields for load_type 2: substitute_group_num, '
                    || 'replacement_group_num, resource_id_new, resource_seq_num, '
                    || 'instance_id_new, serial_number_new');
            end if;


        elsif (l_load_type = WSM_LOAD_OP) then     -- operation: load_type 3 and 4 are the same
l_stmt_num := 60.1;
	    -- Modified For LBJ Interface Alcoa Enhancement
            if(l_sub_type NOT IN (WSM_SUB_CHG, WSM_SUB_REC, WSM_SUB_ADD, WSM_SUB_DEL)) then
                raise e_invalid_sub_load_type;
            end if;
            -- Modified For LBJ Interface Alcoa Enhancement
            if(l_rtg_op_seq_num IS NULL and l_job_op_seq_num IS NULL and l_sub_type <> WSM_SUB_ADD)
            then
                raise e_invalid_op_seq_num;
            end if;

            -- Added For LBJ Interface Alcoa Enhancement
            if (l_sub_type = WSM_SUB_ADD) then

                -- This code Defaults Standard operation Id.
                if (v_wljdi_std_op_code(l_d) is not null) then
                    begin
                        select standard_operation_id
                        into v_wljdi_std_op_id(l_d)
                        from bom_standard_operations
                        where organization_id = p_org_id
                        and operation_code = v_wljdi_std_op_code(l_d)
                        and standard_operation_id = nvl(v_wljdi_std_op_id(l_d),standard_operation_id);
                    exception
                        when others then
                            raise e_inv_std_op;
                    end;
                end if;

                if (v_wljdi_std_op_id(l_d) is not null and
                    v_wljdi_std_op_code(l_d) is null) then
                    begin
                        select operation_code
                        into v_wljdi_std_op_code(l_d)
                        from bom_standard_operations
                        where organization_id = p_org_id
                        and standard_operation_id = v_wljdi_std_op_id(l_d);
                    exception
                        when others then
                            raise e_inv_std_op;
                    end;
                end if;

                if (v_wljdi_std_op_id(l_d) is not null) then

                    begin
                        select department_id,
                               nvl(v_wljdi_min_trf_qty(l_d),minimum_transfer_quantity),
                               nvl(v_wljdi_count_point_type(l_d),count_point_type),
                               nvl(v_wljdi_description(l_d),operation_description),
                               nvl(v_wljdi_backflush_flag(l_d),backflush_flag),
                               nvl(v_wljdi_op_yield_enable(l_d),operation_yield_enabled),
                               nvl(v_wljdi_option_dep_flag(l_d),option_dependent_flag),
                               nvl(v_wljdi_inc_in_rollup(l_d),include_in_rollup)
                        into  v_wljdi_department_id(l_d),
                              v_wljdi_min_trf_qty(l_d),
                              v_wljdi_count_point_type(l_d),
                              v_wljdi_description(l_d),
                              v_wljdi_backflush_flag(l_d),
                              v_wljdi_op_yield_enable(l_d),
                              v_wljdi_option_dep_flag(l_d),
                              v_wljdi_inc_in_rollup(l_d)
                        from   bom_standard_operations
                        where standard_operation_id = v_wljdi_std_op_id(l_d)
                        and  organization_id = p_org_id;
                    exception
                        when others then
                            raise e_inv_std_op;
                    end;
                end if;
                -- Validate Department
                if (v_wljdi_department_code(l_d) IS NOT NULL) then
                    begin
                        select unique(department_id)
                        into   v_wljdi_department_id(l_d)
                        from   bom_departments
                        where  department_code = v_wljdi_department_code(l_d)
                        and    department_id   = nvl(v_wljdi_department_id(l_d),department_id)
                        and    organization_id = p_org_id;
                    exception
                        when others then
                            raise e_invalid_dept_code;
                    end;
                else
                    begin
                        select 1
                        into   l_temp
                        from   bom_departments
                        where  department_id   = v_wljdi_department_id(l_d)
                        and    organization_id = p_org_id;
                    exception
                        when others then
                            raise e_invalid_dept_code;
                    end;
                end if;
                -- Validate Min trf Qty.
                if (v_wljdi_min_trf_qty(l_d) < 0 ) then
                    raise e_invalid_min_trf_qty;
                end if;
                if (v_wljdi_min_trf_qty(l_d) is null) then
                    v_wljdi_min_trf_qty(l_d) := 0;
                end if;

                -- Validate Count Point
                if (v_wljdi_count_point_type(l_d) is not null and
                    v_wljdi_count_point_type(l_d) not in (WIP_CONSTANTS.YES_AUTO,
                                                          WIP_CONSTANTS.NO_AUTO,
                                                          WIP_CONSTANTS.NO_DIRECT)) then
                    raise e_invalid_count_point;
                end if;
                if (v_wljdi_count_point_type(l_d) is null) then
                    v_wljdi_count_point_type(l_d) :=0;
                end if;

                -- Validate Backflush flag.
                if (v_wljdi_backflush_flag(l_d) is not null and
                    v_wljdi_backflush_flag(l_d) not in (WIP_CONSTANTS.WBF_BF_NOPAGE ,
                                                        WIP_CONSTANTS.WBF_BF_PAGE)) then
                    raise e_invalid_backflush_flag;
                end if;
                if (v_wljdi_backflush_flag(l_d) is null) then
                    v_wljdi_backflush_flag(l_d) :=0;
                end if;

                if (v_wljdi_op_yield_enable(l_d) is null) then
                    v_wljdi_op_yield_enable(l_d) :=1;
                end if;

                if (v_wljdi_inc_in_rollup(l_d) is null) then
                    v_wljdi_inc_in_rollup(l_d) :=1;
                end if;

                if (v_wljdi_option_dep_flag(l_d) is null) then
                    v_wljdi_option_dep_flag(l_d) :=2;
                end if;
                l_temp :=0;
                if (v_wljdi_routing_op_seq_num(l_d) is not null) then
                    l_temp :=0;
                    begin
                        select 1
                        into l_temp
                        from wsm_copy_operations
                        where wip_entity_id = p_wip_entity_id
                        and organization_id = p_org_id
                        and operation_seq_num = v_wljdi_routing_op_seq_num(l_d);
                    exception
                        when no_data_found then
                            l_temp :=0;
                        when others then
                            l_temp :=1;
                    end;
                end if;

                if (l_temp =1) then
                    raise e_dup_op_seq;
                end if;

                select  scheduled_start_date,
                        scheduled_completion_date
                into    l_job_start_date,
                        l_job_compl_date
                from    wip_discrete_jobs
                where   wip_entity_id = p_wip_entity_id
                and     organization_id = p_org_id;

                if(v_wljdi_op_start_date(l_d) IS NOT NULL and v_wljdi_op_completion_date(l_d) IS NOT NULL) then

                    if( NVL(l_job_start_date, v_wljdi_op_start_date(l_d)) > v_wljdi_op_start_date(l_d) or
                        v_wljdi_op_start_date(l_d) > v_wljdi_op_completion_date(l_d) or
                        v_wljdi_op_completion_date(l_d) > NVL(l_job_compl_date, v_wljdi_op_completion_date(l_d)))
                    then
                        raise e_invalid_op_date;
                    end if;
                elsif(v_wljdi_op_start_date(l_d) IS NOT NULL and v_wljdi_op_completion_date(l_d) IS NULL) then

                    if( NVL(l_job_start_date, v_wljdi_op_start_date(l_d)) > v_wljdi_op_start_date(l_d) or
                        v_wljdi_op_start_date(l_d) > NVL(l_job_compl_date, v_wljdi_op_start_date(l_d)))
                    then
                        raise e_invalid_op_date;
                    end if;
                    v_wljdi_op_completion_date(l_d) := l_job_compl_date;

                elsif(v_wljdi_op_start_date(l_d) IS NULL and v_wljdi_op_completion_date(l_d) IS NOT NULL) then

                    if( NVL(l_job_start_date, v_wljdi_op_completion_date(l_d)) > v_wljdi_op_completion_date(l_d) or
                        v_wljdi_op_completion_date(l_d) > NVL(l_job_compl_date, v_wljdi_op_completion_date(l_d)))
                    then
                        raise e_invalid_op_date;
                    end if;
                    v_wljdi_op_start_date(l_d) := l_job_start_date;
                else
                    v_wljdi_op_start_date(l_d) := l_job_start_date;
                    v_wljdi_op_completion_date(l_d) := l_job_compl_date;
                end if;

            end if;


        elsif (l_load_type in (WSM_LOAD_RES_USE, WSM_LOAD_RES_INS)) then  -- resource usage/instance
l_stmt_num := 70.1;
            if l_sub_type NOT IN (WSM_SUB_DEL, WSM_SUB_ADD, WSM_SUB_REC)
            then
                raise e_invalid_sub_load_type;
            end if;
            if(l_rtg_op_seq_num IS NULL and l_job_op_seq_num IS NULL)
            then
                raise e_invalid_op_seq_num;
            end if;

            -- get resource_seq_num if it is null
            -- if l_job_op_seq_num IS NOT NULL, get from WOR
            -- otherwise get from WCOR
            l_res_seq_num := v_wljdi_resource_seq_num(l_d);

            -- ST : Bug fix 4240165 : Detailed Scheduling changes start
            l_par_res_seq_num := v_wljdi_parent_seq_num(l_d);
            -- ST : Bug fix 4240165 : Detailed Scheduling changes end


            if(l_res_seq_num IS NULL)
            then
                l_resource_id := v_wljdi_resource_id_new(l_d);
                l_sub_grp_num := v_wljdi_substitute_group_num(l_d);
                l_rpl_grp_num := v_wljdi_replacement_group_num(l_d);

                if(l_resource_id IS NULL) then
                    if v_wljdi_resource_code_new(l_d) IS NULL then
                        fnd_message.set_name('WSM','WSM_NULL_FIELD');
                        fnd_message.set_token('FLD_NAME', 'resource_id_new/resource_code_new');
                        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                                    || fnd_message.get;
                        p_error_code := -1;
                        raise e_wljdi_common_error;
                    else
                        -- get resource id from item name
                        l_hash_value := dbms_utility.get_hash_value(
                                                v_wljdi_resource_code_new(l_d) || p_org_id,
                                                37, 1073741824);
                        if(g_v_res_id.exists(l_hash_value)) then
                            l_resource_id := g_v_res_id(l_hash_value);
                        else
                            begin
l_stmt_num := 70.2;
                                select unique(resource_id)
                                into   l_resource_id
                                from   bom_resources
                                where  resource_code = v_wljdi_resource_code_new(l_d)
                                and    organization_id = p_org_id;
                            exception
                                when others then
                                    raise e_invalid_resource_code;
                            end;
                            g_v_res_id(l_hash_value) := l_resource_id;
                        end if;
                    end if;
                end if;


                -- ST : Bug fix 4240165 : Detailed Scheduling changes start
                IF (l_par_res_seq_num IS NULL) THEN
                -- ST : Bug fix 4240165 : Detailed Scheduling changes end

                        if( l_job_op_seq_num IS NULL) then
                                begin
                                        l_stmt_num  := 70.3;
                                        select  resource_seq_num
                                        into    l_res_seq_num
                                        from    wsm_copy_op_resources wcor
                                        where   wcor.wip_entity_id         = p_wip_entity_id
                                        and     wcor.organization_id       = p_org_id
                                        and     wcor.operation_seq_num     = l_rtg_op_seq_num
                                        and     wcor.resource_id           = l_resource_id
                                        and     NVL(wcor.substitute_group_num, -1) = NVL(l_sub_grp_num, -1)
                                        and     NVL(wcor.replacement_group_num, 0) = NVL(l_rpl_grp_num, 0);
                                exception
                                        when no_data_found then
                                                raise e_no_res_seq_num;

                                        when too_many_rows then
                                                raise e_no_res_seq_num;
                                end;
                        else
                                begin
                                        l_stmt_num  := 70.4;
                                        select  resource_seq_num
                                        into    l_res_seq_num
                                        from    wip_operation_resources wor
                                        where   wor.wip_entity_id         = p_wip_entity_id
                                        and     wor.organization_id       = p_org_id
                                        and     wor.operation_seq_num     = l_job_op_seq_num
                                        and     wor.resource_id           = l_resource_id
                                        and     NVL(wor.substitute_group_num, -1) = NVL(l_sub_grp_num, -1)
                                        and     NVL(wor.replacement_group_num, 0) = NVL(l_rpl_grp_num, 0);
                                exception
                                        when no_data_found then
                                                raise e_no_res_seq_num;
                                        when too_many_rows then
                                                raise e_no_res_seq_num;
                                end;
                        end if;
                        v_wljdi_resource_seq_num(l_d) := l_res_seq_num;
                end if;       -- l_parent_res_seq_num is NULL
                -- ST : Bug fix 4240165 : Detailed Scheduling changes end
            end if; -- l_res_seq_num IS NULL
l_stmt_num  := 70.5;

            -- ignore the following fields
            v_wljdi_substitute_group_num(l_d)  := NULL;
            v_wljdi_replacement_group_num(l_d) := NULL;

            -- ST : Bug fix 4240165 : Detailed Scheduling changes
            -- NULL it out only when Resource seq num is obtained...
            IF v_wljdi_resource_seq_num(l_d) IS NOT NULL THEN
                    v_wljdi_resource_id_new(l_d)       := NULL;
            END IF;

        elsif (l_load_type = WSM_LOAD_LINK) then     -- link: load_type must be 4 or 5
l_stmt_num := 80;
            -- Modified For LBJ Interface Alcoa Enhancement
            if l_sub_type NOT IN (WSM_SUB_DIS, WSM_SUB_REC, WSM_SUB_DEL, WSM_SUB_ADD) then
                raise e_invalid_sub_load_type;
            end if;
            if(--v_wljdi_routing_op_seq_num(l_d) IS NULL or
               v_wljdi_next_rtg_op_seq_num(l_d) IS NULL)
            then
                fnd_message.set_name('WSM','WSM_NULL_FIELD');
                --fnd_message.set_token('FLD_NAME', 'routing_op_seq_num and next_routing_op_seq_num');
                fnd_message.set_token('FLD_NAME', 'next_routing_op_seq_num');
                p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                            || fnd_message.get;
                p_error_code := -1;
                raise e_wljdi_common_error;
            end if;

        elsif (l_load_type = WSM_LOAD_LINK_OP) then     -- link or operation
l_stmt_num := 90;
            if(l_sub_type NOT IN (WSM_SUB_CHG, WSM_SUB_REC)) then
                raise e_invalid_sub_load_type;
            end if;
            if(l_rtg_op_seq_num IS NULL and l_job_op_seq_num IS NULL)
            then
                raise e_invalid_op_seq_num;
            end if;

        else
            fnd_message.set_name('WSM','WSM_INVALID_FIELD');
            fnd_message.set_token('FLD_NAME', 'load_type');
            p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                           || fnd_message.get;
            p_error_code := -1;
            raise e_wljdi_common_error;
        end if;
        ---------------------------------------------------------------------------
        -- }} validete load_type, substitution_type combination and required fields
        ---------------------------------------------------------------------------
l_stmt_num := 100;

        ---Added for Alcoa Enhancement
        if  upper(v_wljdi_recommended(l_d)) = 'Y' and l_sub_type= WSM_SUB_ADD then
            l_v_recommended(l_out) := 'Y';
        else
            l_v_recommended(l_out) := 'N';
        end if;

        l_v_sub_grp_num(l_out)  := v_wljdi_substitute_group_num(l_d);
        l_v_rpl_grp_num(l_out)  := v_wljdi_replacement_group_num(l_d);
        l_v_res_id(l_out)       := v_wljdi_resource_id_new(l_d);
        l_v_res_seq_num(l_out)  := v_wljdi_resource_seq_num(l_d);
        l_v_ins_id(l_out)       := v_wljdi_instance_id_new(l_d);
        l_v_ser_num(l_out)      := v_wljdi_serial_number_new(l_d);
        l_v_item_id(l_out)      := v_wljdi_inventory_item_id_new(l_d);
        l_v_prm_item_id(l_out)  := v_wljdi_primary_item_id(l_d);
        l_v_phm_item_id(l_out)  := v_wljdi_src_phantom_item_id(l_d);
        l_v_record_id(l_out)    := v_wljdi_record_id(l_d);

        /* ST : Detailed Scheduling start */
        l_v_dept_id(l_out)      := v_wljdi_department_id(l_d);
        l_v_res_code(l_out)     := v_wljdi_resource_code_new(l_d);
		l_v_setup_id(l_out)		:= v_wljdi_setup_id(l_d);     -- Added for bug fix 4704289

        /* ST : Detailed Scheduling end   */

        -- Added For LBJ Interface Alcoa Enhancement
        l_v_op_start_date(l_out)      := v_wljdi_op_start_date(l_d);
        l_v_op_completion_date(l_out) := v_wljdi_op_completion_date(l_d);
        l_v_min_trf_qty(l_out)        := v_wljdi_min_trf_qty(l_d);
        l_v_count_point_type(l_out)   := v_wljdi_count_point_type(l_d);
        l_v_description(l_out)        := v_wljdi_description(l_d);
        l_v_backflush_flag(l_out)     := v_wljdi_backflush_flag(l_d);
        l_v_op_yield_enable(l_out)    := v_wljdi_op_yield_enable(l_d);
        l_v_option_dep_flag(l_out)    := v_wljdi_option_dep_flag(l_d);
        l_v_inc_in_rollup(l_out)      := v_wljdi_inc_in_rollup(l_d);
        l_v_std_op_id(l_out)          := v_wljdi_std_op_id(l_d);
        l_v_std_op_code(l_out)        := v_wljdi_std_op_code(l_d);
        l_v_item_old_id(l_out)        := v_wljdi_inventory_item_id_old(l_d);

        l_out := l_out + 1;

        l_d := v_wljdi_record_id.next(l_d);
    end loop;

    ---------------------------------------
    -- bulk update WLJDI
    ---------------------------------------
l_stmt_num := 110;
    forall i in l_v_record_id.first..l_v_record_id.last
    update  wsm_lot_job_dtl_interface
    set     substitute_group_num    = l_v_sub_grp_num(i),
            replacement_group_num   = l_v_rpl_grp_num(i),
            resource_id_new         = l_v_res_id(i),
            resource_seq_num        = l_v_res_seq_num(i),
            instance_id_new         = l_v_ins_id(i),
            serial_number_new       = l_v_ser_num(i),
            inventory_item_id_new   = l_v_item_id(i),
            primary_item_id         = l_v_prm_item_id(i),
            src_phantom_item_id     = l_v_phm_item_id(i),
            /* ST : Detailed Scheduling start */
            resource_code_new       = l_v_res_code(i),
			/* Added NVL on department_id for Bug 5471556. It is done so that it's not cleared
			out if user entered department id alone so that it can be validated at later stage. */
            department_id           = nvl(l_v_dept_id(i),department_id),
			setup_id				= l_v_setup_id(i),    -- Added for bug fix 4704289
            /* ST : Detailed Scheduling end   */
            -- Added For LBJ Interface Alcoa Enhancement
            standard_operation_id     =  l_v_std_op_id(i),
            operation_start_date      =  l_v_op_start_date(i),
            operation_completion_date =  l_v_op_completion_date(i),
            minimum_transfer_quantity =  l_v_min_trf_qty(i),
            count_point_type          =  l_v_count_point_type(i),
            description               =  l_v_description(i),
            backflush_flag            =  l_v_backflush_flag(i),
            operation_yield_enabled   =  l_v_op_yield_enable(i),
            option_dependent_flag     =  l_v_option_dep_flag(i),
            include_in_rollup         =  l_v_inc_in_rollup(i),
            standard_operation_code   =  l_v_std_op_code(i),
            recommended               =  l_v_recommended(i),
            inventory_item_id_old   = l_v_item_old_id(i)
    where   record_id = l_v_record_id(i);

EXCEPTION
    when e_invalid_sub_load_type then
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'load_type and substitution_type');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                    || fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log, substr('default_wljdi_fields: (#'||l_stmt_num||') '|| p_error_msg, 1, 2000));

    when e_invalid_op_seq_num then
        fnd_message.set_name('WSM','WSM_NULL_FIELD');
        fnd_message.set_token('FLD_NAME', 'job_op_seq_num and routing_op_seq_num');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                    || fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,substr('default_wljdi_fields: (#'||l_stmt_num||') '
                || p_error_msg, 1, 2000));

    when e_invalid_resource_code then
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'resource_code_new');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                    || fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,
            substr('default_wljdi_fields: (#'||l_stmt_num||') '
                || p_error_msg, 1, 2000));

    /* ST : Detailed Scheduling start */

    when e_invalid_resource_id then
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'resource_id_new');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                    || fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,
            substr('default_wljdi_fields: (#'||l_stmt_num||') '
                || p_error_msg, 1, 2000));

    when e_invalid_dept_code then
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'department_code/department id combination');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                    || fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,
            substr('default_wljdi_fields: (#'||l_stmt_num||') '
                || p_error_msg, 1, 2000));

    /* ST : Detailed Scheduling end */

    when e_invalid_item_name then
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'item_id');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                    || fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,
            substr('default_wljdi_fields: (#'||l_stmt_num||') '
                || p_error_msg, 1, 2000));

    when e_no_res_seq_num then
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                    || 'resource_seq_num cannot be uniquely found'; -- CZHDBG_MSG
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,
            substr('default_wljdi_fields: (#'||l_stmt_num||') '
                || p_error_msg, 1, 2000));

    when e_wljdi_common_error then
        fnd_file.put_line(fnd_file.log,
            substr('default_wljdi_fields: (#'||l_stmt_num||') '
                || p_error_msg, 1, 2000));

	when e_invalid_setup_code then
		fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'Setup Code ');
		p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                    || fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,
            substr('default_wljdi_fields: (#'||l_stmt_num||') '
                || p_error_msg, 1, 2000));

   ---Added for LBJ Enhancement

    when e_res_seq_num_exist  then
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'resource_seq_num/job_op_seq_num combination');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                    || fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,
            substr('default_wljdi_fields: (#'||l_stmt_num||') '
                || p_error_msg, 1, 2000));

    when e_invalid_res_seq_num then
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'resource_seq_num/job_op_seq_num combination');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                    || fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,
            substr('default_wljdi_fields: (#'||l_stmt_num||') '
                || p_error_msg, 1, 2000));
    when e_inv_std_op then
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'standard_operation_id/standard_operation_code combination');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '|| fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,substr('default_wljdi_fields: (#'||l_stmt_num||') '|| p_error_msg, 1, 2000));
    when e_invalid_min_trf_qty then
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'minimum_transfer_quantity');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '|| fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,substr('default_wljdi_fields: (#'||l_stmt_num||') '|| p_error_msg, 1, 2000));
    when e_invalid_count_point then
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'count_point_type');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '|| fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,substr('default_wljdi_fields: (#'||l_stmt_num||') '|| p_error_msg, 1, 2000));
    when e_invalid_backflush_flag then
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'backflush_flag');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '|| fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,substr('default_wljdi_fields: (#'||l_stmt_num||') '|| p_error_msg, 1, 2000));
    when e_dup_op_seq then
        fnd_message.set_name('WSM','WSM_INVALID_OPERATION');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '|| fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,substr('default_wljdi_fields: (#'||l_stmt_num||') '|| p_error_msg, 1, 2000));
    when e_invalid_op_date then
        fnd_message.set_name('WSM','WSM_OP_BAD_DATES');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '|| fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,substr('default_wljdi_fields: (#'||l_stmt_num||') '|| p_error_msg, 1, 2000));
    when e_invalid_routing_op_seq then
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'Routing_op_seq_num');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '|| fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,substr('default_wljdi_fields: (#'||l_stmt_num||') '|| p_error_msg, 1, 2000));
    when e_invalid_job_op_seq then
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'Job_op_seq_num');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '|| fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,substr('default_wljdi_fields: (#'||l_stmt_num||') '|| p_error_msg, 1, 2000));

    when others then
        p_error_code := -1;
        p_error_msg := 'Error: default_wljdi_fields: (#'||
                        l_stmt_num||') '||SUBSTR(SQLERRM, 1,240);

END default_wljdi_fields;


-- **********************************************************************************************
-- VALIDATE_WLJDI_PATH: local validation procedure
-- **********************************************************************************************

-- a PL/SQL table is passed

PROCEDURE validate_wljdi_path (
        p_wip_entity_id     in number,
        p_end_op_seq_num    in number,
        p_links             in t_links,
        x_error_code        out nocopy number,
        x_error_msg         out nocopy varchar2) is

l_xst               number;
l_stmt_num          number;
l_idx               number;
l_to_op             number;
l_fm_op             number;
l_cnt               number := 0;

e_invalid_link          exception;
e_invalid_path_end      exception;

BEGIN

    x_error_code := 0;
    x_error_msg := '';

l_stmt_num  := 10;

    l_idx := p_end_op_seq_num;

    if(p_links.count = 0) then
        return; -- this means every link is discommended
    elsif NOT(p_links.EXISTS(l_idx)) then
        raise e_invalid_path_end;
    end if;

    while (p_links.EXISTS(l_idx))
    loop
        l_cnt := l_cnt + 1;

        l_fm_op := p_links(l_idx).from_op_seq_num;
        l_to_op := p_links(l_idx).to_op_seq_num;

        -- allow l_fm_op to be null, this is for jumped op
        exit when (l_fm_op IS NULL);
        BEGIN
            select  1
            into    l_xst
            from    wsm_copy_op_networks
            where   wip_entity_id = p_wip_entity_id
            and     from_op_seq_num = l_fm_op
            and     to_op_seq_num = l_to_op;
        EXCEPTION
            when others then
                raise e_invalid_link;
        END;

        l_idx := l_fm_op;
    end loop;

    if(l_cnt <>  p_links.COUNT) then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_EXTRA_LINKS');
        x_error_msg := fnd_message.get;
    end if;

EXCEPTION
    when e_invalid_path_end then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_COPY_NO_PATH_END');
        fnd_message.set_token('END',p_end_op_seq_num);
        x_error_msg := fnd_message.get;

    when e_invalid_link then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_RECO_LINK');
        x_error_msg := fnd_message.get;

    when others then
        x_error_code := -1;
        x_error_msg := 'Error: validate_wljdi_path: (#'|| l_stmt_num||') '
                       || SUBSTR(SQLERRM, 1,240);
END validate_wljdi_path;


-- **********************************************************************************************
-- VALIDATE_WLJDI_OPERATION: local validation procedure
-- **********************************************************************************************

PROCEDURE validate_wljdi_operation(
        p_wip_entity_id             in number,
        p_org_id                    in number,
        p_v_ops                     in t_ops,
        p_job_scheduled_start_date  in date,
        p_job_scheduled_compl_date  in date,
        p_job_scheduled_qty         in number,
        p_handle_wip_cur_op         in varchar2,
        x_error_code                out nocopy number,
        x_error_msg                 out nocopy varchar2) is

l_recommended           varchar2(1);
l_xst                   number;
l_stmt_num              number;
l_i                     number;

l_rtg_op_seq_num        number;
l_job_op_seq_num        number;
l_scheduled_qty         number;
l_op_yield              number;
l_op_start_date         date;
l_op_compl_date         date;
l_op_start_date_old     date;
l_op_compl_date_old     date;
l_job_start_date        date; -- bug 3423195

/*Added for bugfix:7248992 */
l_cum_yield             number;
l_rev_cum_yield         number;


e_invalid_operation     exception;
e_invalid_sche_qty      exception;
e_invalid_op_yield      exception;
e_invalid_date          exception;
e_sche_qty_not_upd      exception;
/*Added for bugfix:7248992 */
e_invalid_cum_yield      exception;
e_invalid_rev_cum_yield  exception;

BEGIN
    x_error_code := 0;
    x_error_msg := '';

    l_i := p_v_ops.first;
    if(l_i IS NULL) then return; end if;
    l_rtg_op_seq_num := p_v_ops(l_i).rtg_op_seq_num;
    l_job_op_seq_num := p_v_ops(l_i).job_op_seq_num;
    l_scheduled_qty  := p_v_ops(l_i).scheduled_quantity;
    l_op_yield       := p_v_ops(l_i).yield;
    l_op_start_date  := p_v_ops(l_i).start_date;
    l_op_compl_date  := p_v_ops(l_i).compltion_date;
     /*Added for bugfix:7248992 */
     l_cum_yield      := p_v_ops(l_i).cumulative_yield;
     l_rev_cum_yield  := p_v_ops(l_i).reverse_cumulative_yield;

l_stmt_num  := 10;
    -- do not check p_routing_op_seq_num and p_op_yield for current operation
    if(p_handle_wip_cur_op = 'N') then
        -- validate operation_seq_num
        BEGIN
            select  recommended,
                    reco_start_date,
                    reco_completion_date
            into    l_recommended,
                    l_op_start_date_old,
                    l_op_compl_date_old
            from    wsm_copy_operations
            where   wip_entity_id = p_wip_entity_id
            and     operation_seq_num = l_rtg_op_seq_num;
        EXCEPTION
            when others then
                raise e_invalid_operation;
        END;
        -- BD bug 3545531 we will allow user to nullify the dates on WCO
        --l_op_start_date := NVL(l_op_start_date, l_op_start_date_old);
        --l_op_compl_date := NVL(l_op_compl_date, l_op_compl_date_old);
        -- ED bug 3545531

l_stmt_num  := 20;
        -- validate op yield
        if l_op_yield IS NOT NULL then
            if (l_op_yield <= 0 or l_op_yield > 1) then
                raise e_invalid_op_yield;
            end if;
        end if;

 /*Added for bugfix:7248992,validate cumulative yield */
	 if l_cum_yield IS NOT NULL then
	    if (l_cum_yield <= 0 or l_cum_yield > 1) then
	       raise e_invalid_cum_yield;
	    end if;
	 end if;
	 /*Added for bugfix:6857061,validate reverse yield */
	 if l_rev_cum_yield IS NOT NULL then
	    if (l_rev_cum_yield <= 0 or l_rev_cum_yield > 1) then
	       raise e_invalid_rev_cum_yield;
	    end if;
	 end if;

l_stmt_num  := 30;
        -- validate op scheduled_quantity
        -- 1. if the current op is not on the path, should not allow this change
        -- 2. it should be less than job quantity

        if l_recommended <> 'Y' and l_scheduled_qty IS NOT NULL then
            raise e_sche_qty_not_upd;
        end if;

        if l_scheduled_qty IS NOT NULL then
            if l_scheduled_qty <= 0 or
               l_scheduled_qty > p_job_scheduled_qty
            then
                raise e_invalid_sche_qty;
            end if;
        end if;

    else    -- p_handle_wip_cur_op = 'Y'
        BEGIN
l_stmt_num  := 100;
            select  first_unit_start_date,
                    last_unit_start_date
            into    l_op_start_date_old,
                    l_op_compl_date_old
            from    wip_operations
            where   wip_entity_id = p_wip_entity_id
            and     operation_seq_num = l_job_op_seq_num;
        EXCEPTION
            when others then
                raise e_invalid_operation;
        END;
        l_op_start_date := NVL(l_op_start_date, l_op_start_date_old);
        l_op_compl_date := NVL(l_op_compl_date, l_op_compl_date_old);

        if l_scheduled_qty IS NOT NULL then
            if l_scheduled_qty <= 0 or
               l_scheduled_qty > p_job_scheduled_qty
            then
                raise e_invalid_sche_qty;
            end if;
        end if;

    end if; -- p_handle_wip_cur_op = 'Y'

l_stmt_num  := 200;
    -- validate op dates, null means 'do not change'
    -- BA: bug 3423195
    if(g_charges_exist_shopfloor) then
        l_job_start_date := g_job_released_date;
    else
        l_job_start_date := p_job_scheduled_start_date;
    end if;
    -- EA: bug 3423195

    if(l_op_start_date IS NOT NULL and l_op_compl_date IS NOT NULL) then
        --if( NVL(p_job_scheduled_start_date, l_op_start_date) > l_op_start_date or
        if( NVL(l_job_start_date, l_op_start_date) > l_op_start_date or
            l_op_start_date > l_op_compl_date or
            l_op_compl_date > NVL(p_job_scheduled_compl_date, l_op_compl_date))
        then
            raise e_invalid_date;
        end if;
    elsif(l_op_start_date IS NOT NULL and l_op_compl_date IS NULL) then
        --if( NVL(p_job_scheduled_start_date, l_op_start_date) > l_op_start_date or
        if( NVL(l_job_start_date, l_op_start_date) > l_op_start_date or
            l_op_start_date > NVL(p_job_scheduled_compl_date, l_op_start_date))
        then
            raise e_invalid_date;
        end if;
    elsif(l_op_start_date IS NULL and l_op_compl_date IS NOT NULL) then
        --if( NVL(p_job_scheduled_start_date, l_op_compl_date) > l_op_compl_date or
        if( NVL(l_job_start_date, l_op_compl_date) > l_op_compl_date or
            l_op_compl_date > NVL(p_job_scheduled_compl_date, l_op_compl_date))
        then
            raise e_invalid_date;
        end if;
    end if;

EXCEPTION
    when e_invalid_operation then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'job_op_seq_num or routing_op_seq_num');
        x_error_msg := fnd_message.get;

    when e_invalid_op_yield then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_OP_BAD_YIELD');
        x_error_msg := fnd_message.get;

    when e_invalid_sche_qty then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_OP_BAD_SCHQTY');
        x_error_msg := fnd_message.get;

    when e_sche_qty_not_upd then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_SCHQTY_NOT_UPDATABLE');
        x_error_msg := fnd_message.get;

    when e_invalid_date then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_OP_BAD_DATES');
        x_error_msg := fnd_message.get;

     /*Added for bugfix:7248992 */
     when e_invalid_cum_yield then
	 x_error_code := -1;
	 fnd_message.set_name('WSM','WSM_OP_BAD_CUM_YIELD');
	 x_error_msg := fnd_message.get;

     /*Added for bugfix:7248992 */
     when e_invalid_rev_cum_yield then
	 x_error_code := -1;
	 fnd_message.set_name('WSM','WSM_OP_BAD_REV_CUM_YIELD');
	 x_error_msg := fnd_message.get;

    when others then
        x_error_code := -1;
        x_error_msg := 'Error: validate_wljdi_operation: (#'||l_stmt_num||') '
                       || SUBSTR(SQLERRM, 1,240);
END validate_wljdi_operation;



-- **********************************************************************************************
-- VALIDATE_WLJDI_OP_RESOURCE: local validation procedure
-- **********************************************************************************************

PROCEDURE validate_wljdi_op_resource(
        p_wip_entity_id         in number,
        p_org_id                in number,
        p_v_res                 in out nocopy t_op_res,         -- indexed by resource_id
        p_handle_wip_cur_op     in varchar2,
        p_substitution_type     in number,
        x_error_code            out nocopy number,
        x_error_msg             out nocopy varchar2) is

l_xst                   number;
l_stmt_num              number;
l_i                     number;
l_j                     number;

l_op_sdate              date;
l_op_edate              date;
l_sdate                 date;
l_edate                 date;

l_rtg_op_seq_num        number;
l_job_op_seq_num        number;
l_sub_grp_num           number;
l_rpl_grp_num           number;
l_resource_id           number;

l_v_res_ids             t_number;
e_invalid_resource      exception;
e_invalid_rpl_grp       exception;
e_invalid_date          exception;

/* ST : Detailed Scheduling */
l_setup_id              number;
l_setup_code            VARCHAR2(10);
l_max_assg_units        number;
l_assg_units            number;
l_batch_id              number;
l_seq_id                number;
l_seq_num               number;
l_firm_type             number;

e_invalid_seq                   exception;
e_invalid_batch_max_assg_units  exception;
e_invalid_max_assg_units        exception;
e_invalid_setup_max_assg_units  exception;
e_invalid_setup_id              exception;
e_invalid_setup_code            exception;
e_invalid_firm_type             exception;
e_res_not_batchable             exception;
/* ST : Detailed Scheduling */

 ---Added for Alcoa Enhancement

l_app_res_units         number;
l_res_seq_num           number;
l_uom_code              VARCHAR2(5);
l_uom_exist             number;
l_autocharge_type       number;
l_autocharge_exist      number;
l_res_valid             number;
l_sched_flag            number;
l_sch_flag              number;
l_basis_type            number;
l_activity_id           number;
l_res_code              varchar2(10);
l_res_unit_of_measure     varchar2(3);
l_res_default_basis_type  number;
l_res_default_activity_id number;
l_res_autocharge_type     number;
l_res_standard_rate_flag  number;
l_res_batchable           number;
l_check_primary           number;
e_res_id_null                   exception;
e_assgnd_units_null             exception;
e_invalid_uom                   exception;  ---Need to Verify as this not used
e_invalid_autocharge            exception; ---Need to Verify as this not used
e_invalid_field                 exception;  ---Need to Verify as this not used
e_inv_appl_res_units             exception;
e_wt_or_wcit_rec_exists          exception;
e_po_req_rec_exists              exception;
e_invalid_res_sub_grp_num        exception;
e_invalid_res_reco_flag          exception;
e_inv_res_basis_type            exception;
e_inv_res_charge_type           exception;
e_inv_res_sch_flag              exception;
e_invalid_res_seq_num           exception;
e_invalid_usg_rate              exception;
e_invalid_res_dept              exception;
e_inv_resource_charge_type      exception;


cursor c_wsm_rpl_grp is
        select   resource_id
        from     wsm_copy_op_resources
        where    wip_entity_id         = p_wip_entity_id
        and      operation_seq_num     = l_rtg_op_seq_num
        and      NVL(substitute_group_num, -1) = NVL(l_sub_grp_num, -1)
        and      NVL(replacement_group_num, 0) = NVL(l_rpl_grp_num, 0)
        and      parent_resource_seq_num IS NULL;  -- ST : Detailed Scheduling.. Consider only the runtime resources

cursor c_wip_rpl_grp is
        select   resource_id
        from     wip_operation_resources
        where    wip_entity_id         = p_wip_entity_id
        and      operation_seq_num     = l_job_op_seq_num
        and      NVL(substitute_group_num, -1) = NVL(l_sub_grp_num, -1)
        and      NVL(replacement_group_num, 0) = NVL(l_rpl_grp_num, 0)
        and      parent_resource_seq IS NULL -- -- ST : Detailed Scheduling.. Consider only the runtime resources
        union
        select   resource_id
        from     wip_sub_operation_resources
        where    wip_entity_id         = p_wip_entity_id
        and      operation_seq_num     = l_job_op_seq_num
        and      NVL(substitute_group_num, -1) = NVL(l_sub_grp_num, -1)
        and      NVL(replacement_group_num, 0) = NVL(l_rpl_grp_num, 0);

BEGIN


    x_error_code := 0;
    x_error_msg := '';
    l_i := p_v_res.first;

    if(l_i IS NULL) then return; end if;

    l_rtg_op_seq_num := p_v_res(l_i).rtg_op_seq_num;
    l_job_op_seq_num := p_v_res(l_i).job_op_seq_num;
    l_sub_grp_num    := p_v_res(l_i).sub_grp_num;
    l_rpl_grp_num    := p_v_res(l_i).rpl_grp_num;
    --Alcoa Enhancement changes
    l_app_res_units  := 0;
    l_res_seq_num    := p_v_res(l_i).res_seq_num ;

    IF lbji_debug = 'Y' then
        fnd_file.put_line(fnd_file.log,'Validate_op_resource : l_rtg_op_seq_num : '|| l_rtg_op_seq_num || ' job op seq num ' || l_job_op_seq_num);
    END IF;

    -- get op start/completion date
    if( p_handle_wip_cur_op = 'Y') then
l_stmt_num  := 10;
        -- validate job operation_seq_num
        select  wo.first_unit_start_date,
                wo.last_unit_completion_date
        into    l_op_sdate,
                l_op_edate
        from    wip_operations wo
        where   wo.wip_entity_id     = p_wip_entity_id
        and     wo.operation_seq_num = l_job_op_seq_num;
    else    -- p_handle_wip_cur_op = 'N'
l_stmt_num  := 20;
        select  reco_start_date,
                reco_completion_date
        into    l_op_sdate,
                l_op_edate
        from    wsm_copy_operations
        where   wip_entity_id     = p_wip_entity_id
        and     operation_seq_num = l_rtg_op_seq_num;
    end if;

    IF lbji_debug = 'Y' then
        fnd_file.put_line(fnd_file.log,'Validate_op_resource : ');
    END IF;

    if(p_substitution_type = 3) then    -- update only
        l_resource_id := p_v_res(l_i).resource_id;

        if( p_handle_wip_cur_op = 'Y') then
            BEGIN
                l_xst := 0;
l_stmt_num  := 30;
                select  1
                into    l_xst
                from    dual
                where   exists (
                            select resource_id
                            from   wip_operation_resources wor
                            where  wor.wip_entity_id = p_wip_entity_id
                            and    wor.operation_seq_num = l_job_op_seq_num
                            and    wor.resource_id = l_resource_id
                            and    NVL(wor.substitute_group_num, -1) = NVL(l_sub_grp_num, -1)
                            and    NVL(wor.replacement_group_num, 0) = NVL(l_rpl_grp_num, 0)
                        ) or exists (
                            select resource_id
                            from   wip_sub_operation_resources wsor
                            where  wsor.wip_entity_id = p_wip_entity_id
                            and    wsor.operation_seq_num = l_job_op_seq_num
                            and    wsor.resource_id = l_resource_id
                            and    NVL(wsor.substitute_group_num, -1) = NVL(l_sub_grp_num, -1)
                            and    NVL(wsor.replacement_group_num, 0) = NVL(l_rpl_grp_num, 0)
                        );
                if (l_xst = 0) then
                    raise e_invalid_resource;
                end if;
            EXCEPTION
                when others then
                    raise e_invalid_resource;
            END;

        else -- p_handle_wip_cur_op = 'N'
l_stmt_num  := 40;
            BEGIN
                l_xst := 0;
                select  1
                into    l_xst
                from    wsm_copy_op_resources wcor
                where   wcor.wip_entity_id        = p_wip_entity_id
                and     wcor.operation_seq_num    = l_rtg_op_seq_num
                and     wcor.resource_id          = l_resource_id
                and     NVL(wcor.substitute_group_num, -1) = NVL(l_sub_grp_num, -1)
                and     NVL(wcor.replacement_group_num, 0) = NVL(l_rpl_grp_num, 0);
            EXCEPTION
                when no_data_found then
                    raise e_invalid_resource;
                when others then
                    null;
            END;
        end if;

l_stmt_num  := 50;
        -- validate dates
        l_sdate := p_v_res(l_i).start_date;
        l_edate := p_v_res(l_i).completion_date;

        if(l_sdate IS NOT NULL and l_edate IS NOT NULL) then
            if( NVL(l_op_sdate, l_sdate) > l_sdate or
                l_sdate > l_edate or
                l_edate > NVL(l_op_edate, l_edate))
            then
                raise e_invalid_date;
            end if;
        elsif(l_sdate IS NOT NULL and l_edate IS NULL) then
            if( NVL(l_op_sdate, l_sdate) > l_sdate or
                l_sdate > NVL(l_op_edate, l_sdate))
            then
                raise e_invalid_date;
            end if;
        elsif(l_sdate IS NULL and l_edate IS NOT NULL) then
            if( NVL(l_op_sdate, l_edate) > l_edate or
                l_edate > NVL(l_op_edate, l_edate))
            then
                raise e_invalid_date;
            end if;
        end if;

        /* ST : Detailed Scheduling : Place the validations here.....
           Firm_type        Default: Null
           Setup_id         Default : Null.

                            Check if there exists any record in bom_resource_setups
                            for the setup_id and resource_id.If Setup Id is not null,
                            assigned units and Max Assigned units should be 1.

           Batch Id          Default: Null
                             If not null, assigned units and Max Assigned units should be 1.

          Sequence Number    Default: Null
          Sequence ID
                             Is applicable only when setup type is not null.

           Maximum Assigned Units  Default:assigned_units.Max_assigned_units should be greater than or equal to assigned units.
        */

        l_setup_id       := p_v_res(l_i).setup_id;
        l_setup_code     := p_v_res(l_i).setup_code;
        l_max_assg_units := p_v_res(l_i).max_assg_units;
        l_batch_id       := p_v_res(l_i).batch_id;
        l_seq_id         := p_v_res(l_i).grp_seq_id;
        l_seq_num        := p_v_res(l_i).grp_seq_num;
        l_assg_units     := p_v_res(l_i).assigned_units;
        l_firm_type      := p_v_res(l_i).firm_type;

		-- bug fix 5471266: Start
        -- This allows max_assg_units and firm_type to be passed as null.

                if l_firm_type is null then
                    l_firm_type:=0;
                end if;

                if l_max_assg_units is null then
                    l_max_assg_units := l_assg_units;
                end if;
        -- bug fix 5471266: End


        if nvl(l_firm_type,-1) < 0 or  nvl(l_firm_type,-1)>7 then
                raise e_invalid_firm_type;
        end if;
        if l_setup_id is NULL and l_setup_code is NOT NULL then
             begin
                    select  bst.setup_id
                    into    l_setup_id
                    from    BOM_SETUP_TYPES bst
                    where   bst.setup_code      = l_setup_code
                    and     bst.organization_id = p_org_id;

             exception
                when no_data_found then
                        raise e_invalid_setup_code;
                    when others then
                        null;
             end;
        end if;

        if l_setup_id is not null then
                BEGIN

                    l_xst := 0;

                    select  1
                    into    l_xst
                    from    bom_resource_setups brs
                    where   brs.resource_id     = l_resource_id
                    and     brs.organization_id = p_org_id
                    and     brs.setup_id        = l_setup_id;

                EXCEPTION
                    when no_data_found then
                        raise e_invalid_setup_id;
                    when others then
                        null;
                END;
        end if;

        if (l_batch_id is not null ) then

                /* add a check if the resource is batchable.... */
                begin
                    l_xst := 0;

                    select br.batchable
                    into l_xst
                    from bom_resources br
                    where resource_id = l_resource_id;

                    if l_xst <> 1 then
                        /* error out... */
                        raise e_res_not_batchable;
                    end if;

                exception
                    when others then
                        /* error out.. */
                        raise e_res_not_batchable;
                end;

                if (l_max_assg_units <> 1 or l_assg_units <> 1) then
                    raise e_invalid_batch_max_assg_units;
                end if;
        end if;

        if (l_seq_num is not null and l_seq_id is not null) then

                if (l_setup_id is null)
                then
                     raise e_invalid_seq;
                end if;

                if (l_setup_id is not null)
                   and
                   (l_max_assg_units <> 1 or l_assg_units <> 1)
                then
                     raise e_invalid_setup_max_assg_units;

                end if;
        end if;

        if nvl(l_max_assg_units,0) < l_assg_units then
                raise e_invalid_max_assg_units;
        end if;

        /* ST : Detailed Scheduling end */

    elsif(p_substitution_type = 4) then    -- recommand

        if( p_handle_wip_cur_op = 'Y') then
l_stmt_num  := 60;
            -- get all the resource_id in the same replacement group
            open c_wip_rpl_grp;
            fetch c_wip_rpl_grp bulk collect into l_v_res_ids;
            if(c_wip_rpl_grp%rowcount <=0) then
                raise e_invalid_resource;
            end if;
            close c_wip_rpl_grp;
        else
l_stmt_num  := 70;
            -- get all the resource_id in the same replacement group
            open c_wsm_rpl_grp;
            fetch c_wsm_rpl_grp bulk collect into l_v_res_ids;
            if(c_wsm_rpl_grp%rowcount <=0) then
                raise e_invalid_resource;
            end if;
            close c_wsm_rpl_grp;
        end if;

l_stmt_num  := 80;
        if(l_v_res_ids.COUNT > p_v_res.COUNT) then
            raise e_invalid_rpl_grp;
        elsif(l_v_res_ids.COUNT < p_v_res.COUNT) then   -- BUG3600450
            raise e_invalid_resource;                   -- BUG3600450
        end if;

        l_j := l_v_res_ids.first;
        while (l_j IS NOT NULL)
        loop
l_stmt_num  := 90;
            l_resource_id := l_v_res_ids(l_j);
            if(NOT p_v_res.EXISTS(l_resource_id)) then
                --raise e_invalid_rpl_grp;              -- BUG3600450
                raise e_invalid_resource;               -- BUG3600450
            end if;

l_stmt_num  := 100;

            -- validate dates
            l_sdate := p_v_res(l_resource_id).start_date;
            l_edate := p_v_res(l_resource_id).completion_date;

            if(l_sdate IS NOT NULL and l_edate IS NOT NULL) then
                if( NVL(l_op_sdate, l_sdate) > l_sdate or
                    l_sdate > l_edate or
                    l_edate > NVL(l_op_edate, l_edate))
                then
                    raise e_invalid_date;
                end if;
            elsif(l_sdate IS NOT NULL and l_edate IS NULL) then
                if( NVL(l_op_sdate, l_sdate) > l_sdate or
                    l_sdate > NVL(l_op_edate, l_sdate))
                then
                    raise e_invalid_date;
                end if;
            elsif(l_sdate IS NULL and l_edate IS NOT NULL) then
                if( NVL(l_op_sdate, l_edate) > l_edate or
                    l_edate > NVL(l_op_edate, l_edate))
                then
                    raise e_invalid_date;
                end if;
            end if;

        l_stmt_num := 110;
        /* ST : Detailed Scheduling : Place the validations here.....
           Firm_type        Default: Null
           Setup_id         Default : Null.

                            Check if there exists any record in bom_resource_setups
                            for the setup_id and resource_id.If Setup Id is not null,
                            assigned units and Max Assigned units should be 1.

           Batch Id          Default: Null
                             If not null, assigned units and Max Assigned units should be 1.

          Sequence Number    Default: Null
          Sequence ID
                             Is applicable only when setup type is not null.

           Maximum Assigned Units  Default:assigned_units.Max_assigned_units should be greater than or equal to assigned units.
        */


        l_setup_id    := p_v_res(l_resource_id).setup_id;
        l_setup_code    := p_v_res(l_resource_id).setup_code;
        l_max_assg_units := p_v_res(l_resource_id).max_assg_units;
        l_batch_id    := p_v_res(l_resource_id).batch_id;
        l_seq_id      := p_v_res(l_resource_id).grp_seq_id;
        l_seq_num     := p_v_res(l_resource_id).grp_seq_num;
        l_assg_units  := p_v_res(l_resource_id).assigned_units;
        l_firm_type      := p_v_res(l_resource_id).firm_type;

        -- bug fix 5471266: Start
        -- This allows max_assg_units and firm_type to be passed as null.

                if l_firm_type is null then
                    l_firm_type:=0;
                end if;

                if l_max_assg_units is null then
                    l_max_assg_units := l_assg_units;
                end if;
        -- bug fix 5471266: End

		if nvl(l_firm_type,-1) < 0 or  nvl(l_firm_type,-1)>7 then
                raise e_invalid_firm_type;
        end if;

        l_stmt_num := 119.99;
         if l_setup_id is NULL and l_setup_code is NOT NULL then
             begin
                    select  bst.setup_id
                    into    l_setup_id
                    from    bom_setup_types bst
                    where   bst.setup_code      = l_setup_code
                    and     bst.organization_id = p_org_id;

             exception
                when no_data_found then
                        raise e_invalid_setup_code;
                    when others then
                        null;
             end;
        end if;

        l_stmt_num := 120;
        if l_setup_id is not null then
            BEGIN

                l_stmt_num := 130;

                l_xst := 0;

                select  1
                into    l_xst
                from    bom_resource_setups brs
                where   brs.resource_id     = l_resource_id
                and     brs.organization_id = p_org_id
                and     brs.setup_id        = l_setup_id;

            EXCEPTION
                when no_data_found then
                    raise e_invalid_setup_id;
                when others then
                    null;
            END;
       end if;
       if (l_batch_id is not null ) then

                /* add a check if the resource is batchable.... */
                begin
                    l_xst := 0;

                    l_stmt_num := 140;

                    select br.batchable
                    into l_xst
                    from bom_resources br
                    where resource_id = l_resource_id;

                    if l_xst <> 1 then
                        /* error out... */
                        raise e_res_not_batchable;
                    end if;

                exception
                    when others then
                        /* error out.. */
                        raise e_res_not_batchable;
                end;

                if (l_max_assg_units <> 1 or l_assg_units <> 1) then
                    raise e_invalid_batch_max_assg_units;
                end if;

       end if;
       l_stmt_num := 150;

       if (l_seq_num is not null and l_seq_id is not null) then

                if (l_setup_id is null)
                then
                     raise e_invalid_seq;
                end if;

                if (l_setup_id is not null)
                   and
                   (l_max_assg_units <> 1 or l_assg_units <> 1)
                then
                     raise e_invalid_setup_max_assg_units;

                end if;

        end if;

        if nvl(l_max_assg_units,0) < l_assg_units then
                raise e_invalid_max_assg_units;
        end if;
        /* ST : Detailed Scheduling end */

        l_j := l_v_res_ids.next(l_j);
      end loop;
    --Alcoa enahancement Start : Delete
    elsif(p_substitution_type = WSM_SUB_DEL) then    -- Delete only
        l_resource_id := p_v_res(l_i).resource_id;

        if l_res_seq_num is null then
            raise e_invalid_resource;
        end if;

        if( p_handle_wip_cur_op = 'Y') THEN

            BEGIN
                l_xst := 0;

                select 1,applied_resource_units
                into l_xst,l_app_res_units
                from   wip_operation_resources wor
                where  wor.wip_entity_id = p_wip_entity_id
                and    wor.operation_seq_num = l_job_op_seq_num
                and    wor.resource_seq_num = l_res_seq_num;

                if (l_xst=0) then
                    select 1,applied_resource_units
                    into l_xst,l_app_res_units
                    from   wip_sub_operation_resources wsor
                    where  wsor.wip_entity_id = p_wip_entity_id
                    and    wsor.operation_seq_num = l_job_op_seq_num
                    and    wsor.resource_seq_num = l_res_seq_num;
                end if;
                if (l_xst = 0) then
                    raise e_invalid_resource;
                end if;

            EXCEPTION
                when others then
                    raise e_invalid_resource;
            END;

            IF l_app_res_units <> 0 THEN
               raise e_inv_appl_res_units ;
            END IF  ;

            BEGIN -- Check whether there are any records in WT,WCTI

                l_xst := 0;

                select  1
                into    l_xst
                from    dual
                where   exists ( select transaction_id
                                 from   wip_transactions wt
                                 where  wt.wip_entity_id      = p_wip_entity_id
                                 and    wt.organization_id    = p_org_id
                                 AND    wt.operation_seq_num  = l_job_op_seq_num
                                 and    wt.resource_seq_num   = l_res_seq_num
                               )
                     or exists ( select transaction_id
                                 from  wip_cost_txn_interface wcti
                                 where wcti.wip_entity_id     = p_wip_entity_id
                                 AND   wcti.organization_id   = p_org_id
                                 and   wcti.operation_seq_num = l_job_op_seq_num
                                 and   wcti.resource_seq_num  = l_res_seq_num
                        );

                if (l_xst = 1 ) then
                    raise e_wt_or_wcit_rec_exists;
                end if;
            EXCEPTION
                when no_data_found then
                  null;
                when others then
                    raise e_wt_or_wcit_rec_exists;
            END;

            BEGIN -- Check whether there are any PO/REQ Linked transactions

                l_xst := 0;

                select  1
                into    l_xst
                from    dual
                where   exists ( select 'PO/REQ Linked'
                                 from    po_releases_all pr,
                                         po_headers_all ph,
                                         po_distributions_all pd,
                                         po_line_locations_all pll
                                 where  pd.po_line_id IS NOT NULL
                                 and    pd.line_location_id IS NOT NULL
                                 and    pd.wip_entity_id = p_wip_entity_id
                                 and    pd.destination_organization_id = p_org_id
                                 and    pd.wip_operation_seq_num = l_job_op_seq_num
                                 and    pd.wip_resource_seq_num = l_res_seq_num
                                 and    ph.po_header_id         = pd.po_header_id
                                 and    pll.line_location_id    = pd.line_location_id
                                 and    pr.po_release_id (+)    = pd.po_release_id
                                 and  ( pll.cancel_flag IS NULL OR
                                          pll.cancel_flag = 'N')
                                 and (pll.quantity_received <   (pll.quantity-pll.quantity_cancelled))
                                 and nvl(pll.closed_code,'OPEN') <> 'FINALLY CLOSED'
                                 UNION ALL
                                 select 'PO/REQ Linked'
                                 from   po_requisition_lines_all prl
                                 where  prl.wip_entity_id = p_wip_entity_id
                                 and    prl.destination_organization_id = p_org_id
                                 and    prl.wip_operation_seq_num = l_job_op_seq_num
                                 and    prl.wip_resource_seq_num  = l_res_seq_num
                                 and    nvl(PRL.cancel_flag, 'N') = 'N'
                                 and    prl.line_location_id is NULL
                                 UNION ALL
                                 select 'PO/REQ Linked'
                                 from   po_requisitions_interface_all pri
                                 where  pri.wip_entity_id = p_wip_entity_id
                                 and    pri.destination_organization_id = p_org_id
                                 and    pri.wip_operation_seq_num = l_job_op_seq_num
                                 and pri.wip_resource_seq_num = l_res_seq_num
                               );

                if (l_xst = 1) then
                    raise e_po_req_rec_exists;
                end if;

            EXCEPTION
                when no_data_found then
                    null;
                when others then
                    raise e_po_req_rec_exists;
            END;

        else -- p_handle_wip_cur_op = 'N'

            BEGIN
                l_xst := 0;
                select  1
                into    l_xst
                from    wsm_copy_op_resources wcor
                where   wcor.wip_entity_id        = p_wip_entity_id
                and     wcor.operation_seq_num    = l_rtg_op_seq_num
                and     wcor.resource_seq_num = l_res_seq_num;
            EXCEPTION
                when no_data_found then
                    raise e_invalid_resource;
                when others then
                    null;
            END;
        end if;
        --Alcoa enahancement End : Delete

    elsif (p_substitution_type = WSM_SUB_ADD) then

        l_resource_id    := p_v_res(l_i).resource_id;
        l_assg_units     := p_v_res(l_i).assigned_units;
        l_setup_id       := p_v_res(l_i).setup_id;
        l_setup_code     := p_v_res(l_i).setup_code;
        l_max_assg_units := p_v_res(l_i).max_assg_units;
        l_batch_id       := p_v_res(l_i).batch_id;
        l_seq_id         := p_v_res(l_i).grp_seq_id;
        l_seq_num        := p_v_res(l_i).grp_seq_num;
        l_assg_units     := p_v_res(l_i).assigned_units;
        l_sch_flag       := p_v_res(l_i).scheduled_flag;
        l_basis_type     := p_v_res(l_i).basis_type;
        l_activity_id    := p_v_res(l_i).activity_id;
        l_firm_type      := p_v_res(l_i).firm_type;

        --Validating the Resource
        if l_resource_id  is not null then
            begin
                select  unit_of_measure,
                        default_basis_type,
                        default_activity_id,
                        autocharge_type,
                        standard_rate_flag,
                        batchable,
                        resource_code
                into    l_res_unit_of_measure,
                        l_res_default_basis_type,
                        l_res_default_activity_id,
                        l_res_autocharge_type,
                        l_res_standard_rate_flag,
                        l_res_batchable,
                        l_res_code
                from    bom_resources
                where   resource_id=l_resource_id
                and     organization_id=p_org_id
                and     nvl(disable_date,sysdate+1) > sysdate;
            exception
                when others then
                    raise e_invalid_resource;
            end;
        else
            raise e_res_id_null;
        end if ;

        if l_activity_id is null then
            l_activity_id := l_res_default_activity_id;
        end if;

        if l_basis_type is null then
            l_basis_type := l_res_default_basis_type;
        elsif l_basis_type not in (WIP_CONSTANTS.PER_ITEM,
                                   WIP_CONSTANTS.PER_LOT) then
            raise e_inv_res_basis_type;
        end if;

        if l_res_autocharge_type = WIP_CONSTANTS.PO_MOVE then
            raise e_inv_res_charge_type;
        end if;

        if l_res_autocharge_type is null then
            raise e_inv_resource_charge_type;
        end if;

        if l_sch_flag is null then
            l_sch_flag := WIP_CONSTANTS.SCHED_NO;
        elsif l_sch_flag not in (WIP_CONSTANTS.SCHED_YES,
                                 WIP_CONSTANTS.SCHED_NO,
                                 WIP_CONSTANTS.SCHED_PRIOR,
                                 WIP_CONSTANTS.SCHED_NEXT) then
            raise e_inv_res_sch_flag;
        end if;

        if l_assg_units <=0 or l_assg_units is null then
                raise e_assgnd_units_null;
        end if;

        if p_v_res(l_i).usage_rate_or_amount <=0 or p_v_res(l_i).usage_rate_or_amount is null then
            raise e_invalid_usg_rate;
        end if;

        if l_firm_type is null then
            l_firm_type:=0;
        end if;

        if l_max_assg_units is null then
            l_max_assg_units := l_assg_units;
        end if;

        if l_firm_type < 0 or l_firm_type > 7 then
            raise e_invalid_firm_type;
        end if;

        -- ignore setup_id/setup_code for runtime resource.
        if l_setup_id is not null and l_setup_code is not null then
            l_setup_id   := null;
            l_setup_code := null;
        end if;

        if l_batch_id is not null then
            if l_res_batchable <> 1 then
                raise e_res_not_batchable;
            end if;
            if (l_max_assg_units <> 1 or l_assg_units <> 1) then
                    raise e_invalid_batch_max_assg_units;
            end if;
        end if;

        if l_seq_num is not null and l_seq_id is not null then
            raise e_invalid_seq;
        end if;

        if l_max_assg_units < l_assg_units then
                raise e_invalid_max_assg_units;
        end if;

        l_sdate := p_v_res(l_i).start_date;
        l_edate := p_v_res(l_i).completion_date;
        l_op_sdate := null;
        l_op_edate := null;
        -- get op start/completion date
        if p_handle_wip_cur_op = 'Y' then
l_stmt_num  := 10;

            begin
                select  wo.first_unit_start_date,
                        wo.last_unit_completion_date
                into    l_op_sdate,
                        l_op_edate
                from    wip_operations wo,
                        bom_department_resources bdr
                where   wo.wip_entity_id     = p_wip_entity_id
                and     wo.operation_seq_num = l_job_op_seq_num
                and     wo.organization_id   = p_org_id
                and     bdr.resource_id      = l_resource_id
                and     bdr.department_id    = wo.department_id;
            exception
                when others then
                    raise e_invalid_res_dept;
            end;
            if l_res_seq_num is null then
                select greatest(nvl(max(wor.resource_seq_num),0),nvl(max(wsor.resource_seq_num),0))+10
                into   l_res_seq_num
                from   wip_operation_resources wor,
                       wip_sub_operation_resources wsor
                where  wor.organization_id = p_org_id
                and    wor.wip_entity_id   = p_wip_entity_id
                and    wor.operation_seq_num   = l_job_op_seq_num
                and    wor.organization_id = wsor.organization_id
                and    wor.wip_entity_id   = wsor.wip_entity_id
                and    wor.operation_seq_num   = wsor.operation_seq_num;
            else
                l_xst := 0;
                begin
                    select 1
                    into   l_xst
                    from   wip_operation_resources wor
                    where  wor.organization_id = p_org_id
                    and    wor.wip_entity_id   = p_wip_entity_id
                    and    wor.operation_seq_num   = l_job_op_seq_num
                    and    wor.resource_seq_num  =l_res_seq_num;
                exception
                    when no_data_found then
                        null;
                    when others then
                        raise e_invalid_res_seq_num;
                end;
                if l_xst=1 then
                    raise e_invalid_res_seq_num;
                end if;
            end if;

            -- resource in the same sub/repl group should be recommended/decommended together.
            l_check_primary:=0;
            begin
                select 'N'
                into p_v_res(l_i).reco_flag
                from dual
                where exists( select 1
                              from wip_sub_operation_resources wsor
                              where wsor.organization_id   = p_org_id
                              and   wsor.wip_entity_id     = p_wip_entity_id
                              and   wsor.operation_seq_num = l_job_op_seq_num
                              and   nvl(wsor.substitute_group_num,-1)  = nvl(p_v_res(l_i).sub_grp_num,-1)
                              and   nvl(wsor.replacement_group_num,0)  = nvl(p_v_res(l_i).rpl_grp_num,0));
            exception
                when no_data_found then
                    l_check_primary := 1;
                when others then
                    raise e_invalid_res_sub_grp_num;
            end;
            if l_check_primary=1 then
                begin
                    select 'Y'
                    into p_v_res(l_i).reco_flag
                    from dual
                    where exists( select 1
                                  from wip_operation_resources wor
                                  where wor.organization_id   = p_org_id
                                  and   wor.wip_entity_id     = p_wip_entity_id
                                  and   wor.operation_seq_num = l_job_op_seq_num
                                  and   nvl(wor.substitute_group_num,-1)  = nvl(p_v_res(l_i).sub_grp_num,-1)
                                  and   nvl(wor.replacement_group_num,0)  = nvl(p_v_res(l_i).rpl_grp_num,0));
                exception
                    when no_data_found then
                        l_check_primary := 2;
                    when others then
                        raise e_invalid_res_sub_grp_num;
                end;
            end if;
            if l_check_primary=2 then
                begin
                    select 'N'
                    into p_v_res(l_i).reco_flag
                    from dual
                    where exists( select 1
                                  from wip_operation_resources wor
                                  where wor.organization_id   = p_org_id
                                  and   wor.wip_entity_id     = p_wip_entity_id
                                  and   wor.operation_seq_num = l_job_op_seq_num
                                  and   nvl(wor.substitute_group_num,-1)  = nvl(p_v_res(l_i).sub_grp_num,-1));
                exception
                    when no_data_found then
                        p_v_res(l_i).reco_flag := 'Y';
                    when others then
                        raise e_invalid_res_sub_grp_num;
                end;
            end if;
            if p_v_res(l_i).reco_flag ='N' then
                if p_v_res(l_i).sub_grp_num is null then
                    raise e_invalid_res_sub_grp_num;
                end if;
            end if;

        else    -- p_handle_wip_cur_op = 'N'
l_stmt_num  := 20;
           begin

               select  reco_start_date,
                       reco_completion_date
               into    l_op_sdate,
                       l_op_edate
               from    wsm_copy_operations wco,
                       bom_department_resources bdr
               where   wip_entity_id     = p_wip_entity_id
               and     operation_seq_num = l_rtg_op_seq_num
               and     organization_id   = p_org_id
               and     bdr.resource_id      = l_resource_id
               and     bdr.department_id    =wco.department_id;

           exception
                when others then
                    raise e_invalid_res_dept;
            end;

           if l_res_seq_num is null then
                select nvl(max(resource_seq_num),0)+10
                into   l_res_seq_num
                from   wsm_copy_op_resources wor
                where  wor.organization_id = p_org_id
                and    wor.wip_entity_id   = p_wip_entity_id
                and    wor.operation_seq_num   = l_rtg_op_seq_num;
            else
                l_xst := 0;
                begin
                    select 1
                    into   l_xst
                    from   wsm_copy_op_resources wor
                    where  wor.organization_id = p_org_id
                    and    wor.wip_entity_id   = p_wip_entity_id
                    and    wor.operation_seq_num   = l_rtg_op_seq_num
                    and    wor.resource_seq_num  =l_res_seq_num;
                exception
                    when no_data_found then
                        null;
                    when others then
                        raise e_invalid_res_seq_num;
                end;
                if l_xst=1 then
                    raise e_invalid_res_seq_num;
                end if;

            end if;

            -- resource in the same sub/repl group should be recommended/decommended together.
            l_check_primary:=0;
            begin
                select 'N'
                into p_v_res(l_i).reco_flag
                from dual
                where exists( select 1
                              from wsm_copy_op_resources wcor
                              where wcor.organization_id   = p_org_id
                              and   wcor.wip_entity_id     = p_wip_entity_id
                              and   wcor.operation_seq_num = l_rtg_op_seq_num
                              and   nvl(wcor.substitute_group_num,-1)  = nvl(p_v_res(l_i).sub_grp_num,-1)
                              and   nvl(wcor.replacement_group_num,0)  = nvl(p_v_res(l_i).rpl_grp_num,0)
                              and   wcor.recommended           = 'N');
            exception
                when no_data_found then
                    l_check_primary := 1;
                when others then
                                                                                                                                                                raise e_invalid_res_sub_grp_num;
            end;

            if l_check_primary=1 then
                begin
                    select 'Y'
                    into p_v_res(l_i).reco_flag
                    from dual
                    where exists( select 1
                                  from wsm_copy_op_resources wcor
                                  where wcor.organization_id   = p_org_id
                                  and   wcor.wip_entity_id     = p_wip_entity_id
                                  and   wcor.operation_seq_num = l_rtg_op_seq_num
                                  and   nvl(wcor.substitute_group_num,-1)  = nvl(p_v_res(l_i).sub_grp_num,-1)
                                  and   nvl(wcor.replacement_group_num,0)  = nvl(p_v_res(l_i).rpl_grp_num,0)
                                  and   wcor.recommended           = 'Y');
                exception
                    when no_data_found then
                        l_check_primary := 2;
                    when others then
                                                                                                                                                                                                raise e_invalid_res_sub_grp_num;
                end;
            end if;
            if l_check_primary=2 then
                begin
                    select 'N'
                    into p_v_res(l_i).reco_flag
                    from dual
                    where exists( select 1
                                  from wsm_copy_op_resources wcor
                                  where wcor.organization_id   = p_org_id
                                  and   wcor.wip_entity_id     = p_wip_entity_id
                                  and   wcor.operation_seq_num = l_rtg_op_seq_num
                                  and   nvl(wcor.substitute_group_num,-1)  = nvl(p_v_res(l_i).sub_grp_num,-1)
                                  and   wcor.recommended           = 'Y');
                exception
                    when no_data_found then
                        p_v_res(l_i).reco_flag := 'Y';
                    when others then
                                                                                                                                                                                                raise e_invalid_res_sub_grp_num;
                end;
            end if;
            if p_v_res(l_i).reco_flag ='N' then
                if p_v_res(l_i).sub_grp_num is null then
                    raise e_invalid_res_sub_grp_num;
                end if;
            end if;
        end if;

        if(l_sdate IS NOT NULL and l_edate IS NOT NULL) then
            if( NVL(l_op_sdate, l_sdate) > l_sdate or
                l_sdate > l_edate or
                l_edate > NVL(l_op_edate, l_edate))
            then
                raise e_invalid_date;
            end if;
        elsif(l_sdate IS NOT NULL and l_edate IS NULL) then
            if( NVL(l_op_sdate, l_sdate) > l_sdate or
                l_sdate > NVL(l_op_edate, l_sdate))
            then
                raise e_invalid_date;
            end if;
        elsif(l_sdate IS NULL and l_edate IS NOT NULL) then
            if( NVL(l_op_sdate, l_edate) > l_edate or
                l_edate > NVL(l_op_edate, l_edate))
            then
                raise e_invalid_date;
            end if;
        end if;

        if l_sdate is null then
            l_sdate := l_op_sdate;
        end if;

        if l_edate is null then
            l_edate := l_op_edate;
        end if;

        if p_v_res(l_i).rpl_grp_num is null then
            p_v_res(l_i).rpl_grp_num     := 0;
        end if;

        p_v_res(l_i).res_seq_num     := l_res_seq_num;
        p_v_res(l_i).autocharge_type := l_res_autocharge_type;
        p_v_res(l_i).standard_rate   := nvl(l_res_standard_rate_flag,1);
        p_v_res(l_i).activity_id     := l_activity_id;
        p_v_res(l_i).basis_type      := l_basis_type ;
        p_v_res(l_i).uom_code        := l_res_unit_of_measure;
        p_v_res(l_i).scheduled_flag  := l_sch_flag;
        p_v_res(l_i).max_assg_units  := l_max_assg_units;
        p_v_res(l_i).firm_type       := l_firm_type;
        p_v_res(l_i).setup_id        := l_setup_id;
        p_v_res(l_i).setup_code      := l_setup_code;
        p_v_res(l_i).start_date      := l_sdate;
        p_v_res(l_i).completion_date := l_edate;
        p_v_res(l_i).resource_code   := l_res_code;

    end if; -- p_substitution_type = WSM_SUB_ADD

EXCEPTION
    when e_invalid_resource then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_RES_NOT_REQUIRED');
        x_error_msg := 'Error: validate_wljdi_op_resource: (#'|| l_stmt_num||') ' || fnd_message.get;
        fnd_file.put_line(fnd_file.log,x_error_msg );

    when e_invalid_rpl_grp then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_RES_PARTIAL_RPLGRP');
        x_error_msg := 'Error: validate_wljdi_op_resource: (#'|| l_stmt_num||') ' || fnd_message.get;
        fnd_file.put_line(fnd_file.log,x_error_msg );

    when e_invalid_date then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_RES_BAD_DATES');
        x_error_msg := 'Error: validate_wljdi_op_resource: (#'|| l_stmt_num||') ' ||  fnd_message.get;
        fnd_file.put_line(fnd_file.log,x_error_msg );

   /* ST : Detailed Scheduling start */
   when e_invalid_max_assg_units then
       x_error_code := -1;
       fnd_message.set_name('WSM','WSM_INVALID_MAX_ASSG');
       x_error_msg := 'Error: validate_wljdi_op_resource: (#'|| l_stmt_num||') ' ||  fnd_message.get;
       fnd_file.put_line(fnd_file.log,x_error_msg );

   when e_invalid_setup_max_assg_units then
       x_error_code := -1;
       fnd_message.set_name('WSM','WSM_INVALID_SETUP_MAX_ASSG');
       x_error_msg := 'Error: validate_wljdi_op_resource: (#'|| l_stmt_num||') ' || fnd_message.get;
       fnd_file.put_line(fnd_file.log,x_error_msg );

   when e_invalid_seq then
       x_error_code := -1;
       fnd_message.set_name('WSM','WSM_INVALID_SEQ');  /* group seq nyum and group seq id... */
       x_error_msg := 'Error: validate_wljdi_op_resource: (#'|| l_stmt_num||') ' || fnd_message.get;
       fnd_file.put_line(fnd_file.log,x_error_msg );

   when e_invalid_batch_max_assg_units then
       x_error_code := -1;
       fnd_message.set_name('WSM','WSM_INVALID_BATCH_MAX_ASSG');
       x_error_msg := 'Error: validate_wljdi_op_resource: (#'|| l_stmt_num||') ' ||  fnd_message.get;
       fnd_file.put_line(fnd_file.log,x_error_msg );

   when e_invalid_setup_id then
       x_error_code := -1;
       --fnd_message.set_name('WSM','WSM_INVALID_SETUP');
       fnd_message.set_name('WSM','WSM_INVALID_FIELD'); /*Bug 5488082*/
       fnd_message.set_token('FLD_NAME', ' setup_id ');
       x_error_msg := 'Error: validate_wljdi_op_resource: (#'|| l_stmt_num||') ' ||  fnd_message.get;
       fnd_file.put_line(fnd_file.log,x_error_msg );

   when e_invalid_firm_type then
        x_error_code := -1;
        /* add the error message..... */
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', ' firm type ');
        x_error_msg := 'Error: validate_wljdi_op_resource: (#'|| l_stmt_num||') ' ||  fnd_message.get;
        fnd_file.put_line(fnd_file.log,x_error_msg );

   when e_res_not_batchable then
       x_error_code := -1;
       fnd_message.set_name('WSM','WSM_INVALID_FIELD');
       --fnd_message.set_token('FLD_NAME', ' batch id for resource');
       fnd_message.set_token('FLD_NAME', ' batch_id'); /*Bug 5487540 */
       --x_error_msg := fnd_message.get;
       x_error_msg := 'Error: validate_wljdi_op_resource: (#'|| l_stmt_num||') ' ||  fnd_message.get;
       fnd_file.put_line(fnd_file.log,x_error_msg );

   when e_invalid_setup_code then
            x_error_code := -1;
            /* add the error message..... */
            fnd_message.set_name('WSM','WSM_INVALID_FIELD');
            fnd_message.set_token('FLD_NAME', 'Setup Code ');
            x_error_msg := 'Error: validate_wljdi_op_resource: (#'|| l_stmt_num||') ' ||  fnd_message.get;
            fnd_file.put_line(fnd_file.log,x_error_msg );

   /* ST : Detailed Scheduling end */

   --Alcoa Enhancements Changes
   when e_res_id_null THEN
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'Resource_code/ Resource_id combination');
        x_error_msg := fnd_message.get;

   when e_assgnd_units_null then
       x_error_code := -1;
       fnd_message.set_name('WSM','WSM_INVALID_FIELD');
       fnd_message.set_token('FLD_NAME', 'Assigned_units');
       x_error_msg := 'Error: validate_wljdi_op_resource: (#'|| l_stmt_num||') ' ||  fnd_message.get;
       fnd_file.put_line(fnd_file.log,x_error_msg );

   when e_inv_appl_res_units THEN
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'Applied_units');
        x_error_msg := fnd_message.get;

     when e_wt_or_wcit_rec_exists THEN
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_WT_OR_WCIT_REC_EXIS');
        x_error_msg := fnd_message.get;

     when e_po_req_rec_exists THEN
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_PO_REC_REC_EXIS');
        x_error_msg := fnd_message.get;

   when e_invalid_res_sub_grp_num then
       x_error_code := -1;
       fnd_message.set_name('WSM','WSM_INVALID_FIELD');
       fnd_message.set_token('FLD_NAME', 'substitution_group_num');
       x_error_msg := 'Error: validate_wljdi_op_resource: (#'|| l_stmt_num||') ' ||  fnd_message.get;
       fnd_file.put_line(fnd_file.log,x_error_msg );

   when e_invalid_res_reco_flag then
       x_error_code := -1;
       fnd_message.set_name('WSM','WSM_INVALID_FIELD');
       fnd_message.set_token('FLD_NAME', 'recommended_flag');
       x_error_msg := 'Error: validate_wljdi_op_resource: (#'|| l_stmt_num||') ' ||  fnd_message.get;
       fnd_file.put_line(fnd_file.log,x_error_msg );

   when e_inv_res_basis_type then
       x_error_code := -1;
       fnd_message.set_name('WSM','WSM_INVALID_FIELD');
       fnd_message.set_token('FLD_NAME', 'basis_type');
       x_error_msg := 'Error: validate_wljdi_op_resource: (#'|| l_stmt_num||') ' ||  fnd_message.get;
       fnd_file.put_line(fnd_file.log,x_error_msg );

   when e_inv_res_charge_type then
       x_error_code := -1;
       fnd_message.set_name('WSM','WSM_CURR_OP_RES_PO_MOVE');
       x_error_msg := 'Error: validate_wljdi_op_resource: (#'|| l_stmt_num||') ' ||  fnd_message.get;
       fnd_file.put_line(fnd_file.log,x_error_msg );

   when e_inv_res_sch_flag then
       x_error_code := -1;
       fnd_message.set_name('WSM','WSM_INVALID_FIELD');
       fnd_message.set_token('FLD_NAME', 'scheduled_flag');
       x_error_msg := 'Error: validate_wljdi_op_resource: (#'|| l_stmt_num||') ' ||  fnd_message.get;
       fnd_file.put_line(fnd_file.log,x_error_msg );

    when e_invalid_res_seq_num then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'resource_seq_num');
        x_error_msg := fnd_message.get;
        fnd_file.put_line(fnd_file.log,x_error_msg );

   when e_invalid_usg_rate then
       x_error_code := -1;
       fnd_message.set_name('WSM','WSM_INVALID_FIELD');
       fnd_message.set_token('FLD_NAME', 'usage_rate_or_amount');
       x_error_msg := 'Error: validate_wljdi_op_resource: (#'|| l_stmt_num||') ' ||  fnd_message.get;
       fnd_file.put_line(fnd_file.log,x_error_msg );

     when e_invalid_res_dept THEN
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_RES_DEPT');
        x_error_msg := fnd_message.get;

   when e_inv_resource_charge_type then
       x_error_code := -1;
       fnd_message.set_name('WSM','WSM_INVALID_FIELD');
       fnd_message.set_token('FLD_NAME', 'Autocharge_type');
       x_error_msg := 'Error: validate_wljdi_op_resource: (#'|| l_stmt_num||') ' ||  fnd_message.get;
       fnd_file.put_line(fnd_file.log,x_error_msg );

    when others then
        x_error_code := -1;
        x_error_msg := 'Error: validate_wljdi_op_resource: (#'|| l_stmt_num||') '
                       || SUBSTR(SQLERRM, 1,240);

        fnd_file.put_line(fnd_file.log,x_error_msg );

END validate_wljdi_op_resource;


-- **********************************************************************************************
-- VALIDATE_WLJDI_RES_INSTANCE: local validation procedure
-- **********************************************************************************************

PROCEDURE validate_wljdi_res_instance(
        p_wip_entity_id         in number,
        p_org_id                in number,
        p_v_res_ins             in t_res_ins,
        p_substitution_type     in number,
        p_handle_wip_cur_op     in varchar2,
        -- ST : Bug fix 4240165 : Detailed Scheduling changes start
        -- In case of instance information being passed for setup resource that is added in the same run
        -- return the resurce seq num of the setup resource...
        p_parent_res_seq_num    IN NUMBER,
        p_resource_id           IN NUMBER,
        x_setup_res_seq_num     OUT nocopy number,
        -- ST : Bug fix 4240165 : Detailed Scheduling changes end
        x_error_code            out nocopy number,
        x_error_msg             out nocopy varchar2) is

l_stmt_num              number;
l_i                     number;
l_j                     number;
l_exists                number;

l_op_recommended        varchar2(1) := 'N';
l_res_recommended       varchar2(1) := 'N';
l_sdate_match           number;
l_edate_match           number;
l_res_sdate             date;
l_res_edate             date;
l_sdate                 date;
l_edate                 date;
l_instance_id           number;
l_serial_number         varchar2(30);
l_batch_id              number;

l_rtg_op_seq_num        number;
l_job_op_seq_num        number;
l_res_seq_num           number;
l_resource_id           number;
l_department_id         number;  /*Added Department Id for bug 5476647*/

e_null_date             exception;
e_invalid_date          exception;
e_null_ins_id           exception;
e_invalid_ins_id        exception;
e_invalid_res_seq_num   exception;
e_not_on_reco_path      exception;
e_res_not_reco          exception;
e_invalid_rtg_op_seq    exception;
e_invalid_time_slot     exception;
e_ins_not_exists        exception;
e_no_res_seq_num    exception;

BEGIN


    x_error_code := 0;
    x_error_msg := '';
    l_i := p_v_res_ins.first;

    IF lbji_debug = 'Y' then
        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance start ...');
    END IF;


    if(l_i IS NULL) then return; end if;

    -- in p_v_res_use, all records should have the same res_seq_num
    l_rtg_op_seq_num  := p_v_res_ins(l_i).rtg_op_seq_num;
    l_job_op_seq_num  := p_v_res_ins(l_i).job_op_seq_num;
    l_res_seq_num     := p_v_res_ins(l_i).res_seq_num;

    -- ST : Bug fix 4240165 : Detailed Scheduling changes start
    IF l_res_seq_num IS NULL THEN
        IF lbji_debug = 'Y' then
                fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : Setup resopurce : '
                             || ' Parent_res_seq_num : ' || p_parent_res_seq_num
                             || ' Parent res ID  : ' ||  p_resource_id
                             || ' l_rtg_op_seq_num : ' || l_rtg_op_seq_num);
        END IF;

        -- call is for a setup resource...
        IF p_handle_wip_cur_op = 'N' THEN
                l_stmt_num  := 5;
                BEGIN
                    select resource_seq_num
                    into l_res_seq_num
                    from wsm_copy_op_resources WCOR
                    where WCOR.wip_entity_id     = p_wip_entity_id
                    and   WCOR.organization_id   = p_org_id
                    and   WCOR.operation_seq_num = l_rtg_op_seq_num
                    and   WCOR.parent_resource_seq_num = p_parent_res_seq_num
                    and   WCOR.resource_id        = p_resource_id;

                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                         IF lbji_debug = 'Y' then
                                fnd_file.put_line(fnd_file.log,' No Resource...');
                         END IF;
                         raise e_no_res_seq_num;
                    WHEN TOO_MANY_ROWS THEN
                        IF lbji_debug = 'Y' then
                                fnd_file.put_line(fnd_file.log,' No Unique Resource...');
                        END IF;
                        raise e_no_res_seq_num;
                END;
        ELSE
                l_stmt_num  := 6;

                BEGIN
                    select resource_seq_num
                    into l_res_seq_num
                    from  wip_operation_resources WOR
                    where WOR.wip_entity_id      = p_wip_entity_id
                    and   WOR.organization_id    = p_org_id
                    and   WOR.operation_seq_num  = l_job_op_seq_num
                    and   WOR.parent_resource_seq = p_parent_res_seq_num
                    and   WOR.resource_id         = p_resource_id;

                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        raise e_no_res_seq_num;
                    WHEN TOO_MANY_ROWS THEN
                        raise e_no_res_seq_num;
                END;
        END IF;

        x_setup_res_seq_num := l_res_seq_num;

    END IF;
    -- ST : Bug fix 4240165 : Detailed Scheduling changes end

    if p_substitution_type in (WSM_SUB_DEL ) then
        -- CZHDBG do we need to check if resourced is charged ???
l_stmt_num  := 10;
        l_exists := 0;
        if( p_handle_wip_cur_op = 'N') then
            BEGIN
l_stmt_num  := 20.1;
                select  1
                into    l_exists
                from    wsm_copy_op_resource_instances
                where   wip_entity_id     = p_wip_entity_id
                and     organization_id   = p_org_id
                and     operation_seq_num = l_rtg_op_seq_num
                and     resource_seq_num  = l_res_seq_num;
            EXCEPTION
                when no_data_found then
                    raise e_ins_not_exists;
                when others then
                    null;
            END;
        else    -- p_handle_wip_cur_op = 'Y'

            BEGIN
l_stmt_num  := 20.2;
                select  1
                into    l_exists
                from    wip_op_resource_instances
                where   wip_entity_id     = p_wip_entity_id
                and     organization_id   = p_org_id
                and     operation_seq_num = l_job_op_seq_num
                and     resource_seq_num  = l_res_seq_num;
            EXCEPTION
                when no_data_found then
                    raise e_ins_not_exists;
                when others then
                    null;
            END;
        end if;

    elsif p_substitution_type in (WSM_SUB_ADD, WSM_SUB_REC ) then

        -- check res seq num in job/copy, get resource start/end dates
        if( p_handle_wip_cur_op = 'N') then

            -- check if the operation is on the recommended path
            BEGIN
l_stmt_num  := 30.0;
                /*Added Department Id for bug 5476647*/
                select  wco.recommended,wco.department_id
                into    l_op_recommended,l_department_id
                from    wsm_copy_operations wco
                where   wco.wip_entity_id     = p_wip_entity_id
                and     wco.operation_seq_num = l_rtg_op_seq_num;
            EXCEPTION
                when others then
                    raise e_invalid_rtg_op_seq;
            END;
            if(l_op_recommended <> 'Y') then
                raise e_not_on_reco_path;
            end if;

            BEGIN
l_stmt_num  := 30.1;
                select  reco_start_date,
                        reco_completion_date,
                        resource_id,
                        recommended
                into    l_res_sdate,
                        l_res_edate,
                        l_resource_id,       -- this is used for validate instance_id
                        l_res_recommended
                from    wsm_copy_op_resources
                where   wip_entity_id     = p_wip_entity_id
                and     organization_id   = p_org_id
                and     operation_seq_num = l_rtg_op_seq_num
                and     resource_seq_num  = l_res_seq_num;
            EXCEPTION
                when no_data_found then
                    raise e_invalid_res_seq_num;
                when others then
                    null;
            END;

            IF lbji_debug = 'Y' then
                fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : handling curr op : l_rtg_op_seq_num ' || l_rtg_op_seq_num || ' resource seq num : '|| l_res_seq_num || ' wip entity id : ' || p_wip_entity_id);
            END IF;

            if(l_res_recommended <> 'Y') then
                raise e_res_not_reco;
            end if;

        else    -- p_handle_wip_cur_op = 'Y'

            IF lbji_debug = 'Y' then
                fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : handling curr op : job op seq num ' || l_job_op_seq_num || ' resource seq num : '|| l_res_seq_num || ' wip entity id : ' || p_wip_entity_id);
            END IF;

            BEGIN
l_stmt_num  := 30.2;
                select  wor.start_date,
                        wor.completion_date,
                        wor.resource_id,
                        wo.department_id
                into    l_res_sdate,
                        l_res_edate,
                        l_resource_id,   -- this is used for validate instance_id
                        l_department_id    /*Added Department Id for bug 5476647*/
                from    wip_operation_resources wor, wip_operations wo
                where   wor.wip_entity_id     = p_wip_entity_id
                and     wor.organization_id   = p_org_id
                and     wor.operation_seq_num = l_job_op_seq_num
                and     wor.resource_seq_num  = l_res_seq_num
                and     wor.wip_entity_id     = wo.wip_entity_id
                and     wor.organization_id   = wo.organization_id
                and     wor.operation_seq_num = wo.operation_seq_num;
            EXCEPTION
                when no_data_found then
                    raise e_invalid_res_seq_num;
                when others then
                    raise e_invalid_res_seq_num;
            END;

			IF lbji_debug = 'Y' then
                fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : ' || l_stmt_num || ' start date : ' || to_char(l_res_sdate,'DD-MON-YYYY HH24:MI:SS'));
                fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : ' || l_stmt_num || ' end  date : ' || to_char(l_res_edate,'DD-MON-YYYY HH24:MI:SS'));
            END IF;

        END IF;

        -- check all the records
        l_sdate_match := 0;
        l_edate_match := 0;
        while (l_i IS NOT NULL)
        loop
            l_instance_id   := p_v_res_ins(l_i).instance_id;
            l_serial_number := p_v_res_ins(l_i).serial_number;
            l_batch_id      := p_v_res_ins(l_i).batch_id;
            l_sdate         := p_v_res_ins(l_i).start_date;
            l_edate         := p_v_res_ins(l_i).completion_date;

            l_stmt_num  := 40.1;

            IF lbji_debug = 'Y' then
                fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : op seq num ' || l_rtg_op_seq_num || ' res seq num : ' || l_res_seq_num);
                fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : ' || l_stmt_num || ' start date : ' || to_char(l_sdate,'DD-MON-YYYY HH24:MI:SS'));
                fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : ' || l_stmt_num || ' end  date : ' || to_char(l_edate,'DD-MON-YYYY HH24:MI:SS'));
                fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : ' || l_stmt_num || ' Resource start date : ' || to_char(l_res_sdate,'DD-MON-YYYY HH24:MI:SS'));
                fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : ' || l_stmt_num || ' Resource end  date : ' || to_char(l_res_edate,'DD-MON-YYYY HH24:MI:SS'));
            END IF;

            -- check instance_id and serial_number
            if(l_instance_id IS NULL ) then
                raise e_null_ins_id;
            end if;
l_stmt_num  := 40.2;
            IF lbji_debug = 'Y' then
                fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : ' || l_stmt_num || ' Resource id : ' || l_resource_id || ' Instance id : ' || l_instance_id || ' serial number : ' || l_serial_number);
            END IF;

             BEGIN
                /* Modified SQL for Bug 5476647. Since the SQL before was checking only whether the given instance
                   is valid for the resource. Now modified the SQL to check whether given instance is valid for the
                   department, resource combination */
                select  1
                into    l_exists
                from    bom_dept_res_instances  bdri
                where   bdri.resource_id = l_resource_id
                and     bdri.department_id = l_department_id
                and     bdri.instance_id = l_instance_id
                and     NVL(bdri.serial_number, g_nvl_str) = NVL(l_serial_number, g_nvl_str);

                /*l_exists :=0;

                select  1
                into    l_exists
                from dual
                where exists( select instance_id
                              from  bom_dept_res_instances  bdri
                              where bdri.resource_id = l_resource_id
                              and   bdri.instance_id = l_instance_id
                              and   NVL(bdri.serial_number, g_nvl_str) = NVL(l_serial_number, g_nvl_str) );

               if l_exists=0 then
                    raise e_invalid_ins_id;
               end if;*/


            EXCEPTION
                when others then
                    raise e_invalid_ins_id;
            END;

l_stmt_num  := 50.1;

            -- check start_date/completion_date
            if(l_sdate IS NULL or l_edate IS NULL) then
                raise e_null_date;
            end if;
            if(l_sdate > l_edate or -- bug 3323417, was >=
               l_sdate < NVL(l_res_sdate, l_sdate) or
               l_edate > NVL(l_res_edate, l_edate))
            then
                raise e_invalid_date;
            end if;
l_stmt_num  := 50.2;
            -- check time slot


            if(l_sdate = l_res_sdate) then
                l_sdate_match := 1;
            end if;
            if(l_edate = l_res_edate) then
                l_edate_match := 1;
            end if;

            l_i := p_v_res_ins.next(l_i);
        end loop;

l_stmt_num  := 60;


        if(l_sdate_match = 0 or l_edate_match = 0) then
            raise e_invalid_time_slot;
        end if;

    end if; -- p_substitution_type in (WSM_SUB_ADD, WSM_SUB_REC)

EXCEPTION
    when e_res_not_reco then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INS_USE_NON_RECO');
        x_error_msg := fnd_message.get;
        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : ' || l_stmt_num  || ' error : ' || x_error_msg);

    when e_not_on_reco_path then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INS_USE_NON_RECO');
        x_error_msg := fnd_message.get;
        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : ' || l_stmt_num  || ' error : ' || x_error_msg);


    when e_invalid_rtg_op_seq then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'routing_op_seq_num');
        x_error_msg := fnd_message.get;

        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : ' || l_stmt_num  || ' error : ' || x_error_msg);


    when e_invalid_res_seq_num then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_RES_NOT_REQUIRED');
        x_error_msg := fnd_message.get;

        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : ' || l_stmt_num  || ' error : ' || x_error_msg);


    when e_ins_not_exists then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INS_NOT_EXISTS');
        x_error_msg := fnd_message.get;

        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : ' || l_stmt_num  || ' error : ' || x_error_msg);


    when e_null_ins_id then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_NULL_FIELD');
        fnd_message.set_token('FLD_NAME', 'Instance_id');
        x_error_msg := fnd_message.get;

        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : ' || l_stmt_num  || ' error : ' || x_error_msg);


    when e_invalid_ins_id then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'Instance_id and Serial_number');
        x_error_msg := fnd_message.get;

        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : ' || l_stmt_num  || ' error : ' || x_error_msg);


    when e_null_date then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_NULL_FIELD');
        fnd_message.set_token('FLD_NAME', 'Start date and Completion date');
        x_error_msg := fnd_message.get;

        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : ' || l_stmt_num  || ' error : ' || x_error_msg);


    when e_invalid_date then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'Resource instance scheduled dates');
        x_error_msg := fnd_message.get;

        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : ' || l_stmt_num  || ' error : ' || x_error_msg);


    when e_invalid_time_slot then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INS_BAD_TIME_SLOT');
        x_error_msg := fnd_message.get;

        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : ' || l_stmt_num  || ' error : ' || x_error_msg);

    -- ST : Detailed Scheduling...
    when e_no_res_seq_num then
        x_error_msg := 'resource_seq_num cannot be uniquely found'; -- CZHDBG_MSG
        x_error_code := -1;
        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : ' || l_stmt_num  || ' error : ' || x_error_msg);
    -- ST : Detailed Scheduling...

	when others then
        x_error_code := -1;
        x_error_msg := 'Error: validate_wljdi_res_instance: (#'||l_stmt_num||') '
                       || SUBSTR(SQLERRM, 1,2000);

        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_instance : ' || l_stmt_num  || ' error : ' || x_error_msg);


END validate_wljdi_res_instance;


-- **********************************************************************************************
-- VALIDATE_WLJDI_RES_USAGE: local validation procedure
-- **********************************************************************************************

PROCEDURE validate_wljdi_res_usage(
        p_wip_entity_id         in number,
        p_org_id                in number,
        p_v_res_use             in t_res_use,
        -- ST : Bug fix 4240165 : Detailed Scheduling changes start
        -- In case of instance information being passed for setup resource that is added in the same run
        -- return the resurce seq num of the setup resource...
        p_parent_res_seq_num    IN NUMBER,
        p_resource_id           IN NUMBER,
        x_setup_res_seq_num     OUT nocopy number,
        -- ST : Bug fix 4240165 : Detailed Scheduling changes end
        p_substitution_type     in number,
        p_handle_wip_cur_op     in varchar2,
        x_error_code            out nocopy number,
        x_error_msg             out nocopy varchar2) is

l_stmt_num              number;
l_i                     number;
l_j                     number;
l_exists                number;

l_op_recommended        varchar2(1) := 'N';
l_res_recommended       varchar2(1) := 'N';
l_sdate_match           number;
l_edate_match           number;
l_the_sdate             date;
l_the_edate             date;
l_sdate                 date;
l_edate                 date;
l_assigned_units        number;

l_rtg_op_seq_num        number;
l_job_op_seq_num        number;
l_res_seq_num           number;
l_instance_id           number;
l_serial_num            varchar2(30);

e_invalid_date          exception;
e_null_date             exception;
e_invalid_rtg_op_seq    exception;
e_not_on_reco_path      exception;
e_res_not_reco          exception;
e_invalid_res_seq_num   exception;
e_invalid_instance_id   exception;
e_instances_exist       exception;
e_invalid_asgned_units  exception;
e_date_overlap          exception;
e_invalid_time_slot     exception;
e_usage_not_exists      exception;

/* ST : Detailed Scheduling : start */
e_invalid_ins_assigned_units  exception;
e_no_res_seq_num              exception;
/* ST : Detailed Scheduling : end  */

BEGIN

    x_error_code := 0;
    x_error_msg := '';
    l_i := p_v_res_use.first;
    if(l_i IS NULL) then return; end if;

    -- in p_v_res_use, all records should hev the same res_seq_num
    l_rtg_op_seq_num := p_v_res_use(l_i).rtg_op_seq_num;
    l_job_op_seq_num := p_v_res_use(l_i).job_op_seq_num;
    l_res_seq_num    := p_v_res_use(l_i).res_seq_num;
    l_instance_id    := p_v_res_use(l_i).instance_id;      -- for instance usage
    l_serial_num     := p_v_res_use(l_i).serial_number;    -- for instance usage

    -- ST : Bug fix 4240165 : Detailed Scheduling changes start
    IF l_res_seq_num IS NULL THEN

            -- call is for a setup resource...
            IF p_handle_wip_cur_op = 'N' THEN
                BEGIN
                    select resource_seq_num
                    into l_res_seq_num
                    from wsm_copy_op_resources WCOR
                    where WCOR.wip_entity_id     = p_wip_entity_id
                    and   WCOR.organization_id   = p_org_id
                    and   WCOR.operation_seq_num = l_rtg_op_seq_num
                    and   WCOR.parent_resource_seq_num = p_parent_res_seq_num
                    and   WCOR.resource_id        = p_resource_id;

                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        raise e_no_res_seq_num;
                    WHEN TOO_MANY_ROWS THEN
                        raise e_no_res_seq_num;
                END;
            ELSE
                BEGIN
                    select resource_seq_num
                    into l_res_seq_num
                    from  wip_operation_resources WOR
                    where WOR.wip_entity_id      = p_wip_entity_id
                    and   WOR.organization_id    = p_org_id
                    and   WOR.operation_seq_num  = l_job_op_seq_num
                    and   WOR.parent_resource_seq = p_parent_res_seq_num
                    and   WOR.resource_id         = p_resource_id;

                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        raise e_no_res_seq_num;
                    WHEN TOO_MANY_ROWS THEN
                        raise e_no_res_seq_num;
                END;
        END IF;

        x_setup_res_seq_num := l_res_seq_num;

    END IF;
    -- ST : Bug fix 4240165 : Detailed Scheduling changes end

    if p_substitution_type in (WSM_SUB_DEL ) then
        -- CZHDBG: do we need to chech if resourced is charged ???
l_stmt_num  := 10;
        l_exists := 0;
        if( p_handle_wip_cur_op = 'N') then
            BEGIN
l_stmt_num  := 20.1;
                select  1
                into    l_exists
                from    wsm_copy_op_resource_usage
                where   wip_entity_id     = p_wip_entity_id
                and     organization_id   = p_org_id
                and     operation_seq_num = l_rtg_op_seq_num
                and     resource_seq_num  = l_res_seq_num
                and     NVL(instance_id, -1)          = NVL(l_instance_id, -1)
                and     NVL(serial_number, g_nvl_str) = NVL(l_serial_num, g_nvl_str);
            EXCEPTION
                when no_data_found then
                    raise e_usage_not_exists;
                when others then
                    null;
            END;
        else    -- p_handle_wip_cur_op = 'Y'
            BEGIN
l_stmt_num  := 20.2;
                select  1
                into    l_exists
                from    wip_operation_resource_usage
                where   wip_entity_id     = p_wip_entity_id
                and     organization_id   = p_org_id
                and     operation_seq_num = l_job_op_seq_num
                and     resource_seq_num  = l_res_seq_num
                and     NVL(instance_id, -1)          = NVL(l_instance_id, -1)
                and     NVL(serial_number, g_nvl_str) = NVL(l_serial_num, g_nvl_str);
            EXCEPTION
                when no_data_found then
                    raise e_usage_not_exists;
                when others then
                    null;
            END;
        end if;

    elsif p_substitution_type in (WSM_SUB_ADD, WSM_SUB_REC ) then

        -- get resource or instance start/end dates
        if( p_handle_wip_cur_op = 'N') then
            BEGIN
l_stmt_num  := 30.1;
                select  wco.recommended,
                        wcor.recommended,
                        wcor.reco_start_date,
                        wcor.reco_completion_date
                into    l_op_recommended,
                        l_res_recommended,
                        l_the_sdate,
                        l_the_edate
                from    wsm_copy_operations   wco,
                        wsm_copy_op_resources wcor
                where   wco.wip_entity_id      = p_wip_entity_id
                and     wco.operation_seq_num  = l_rtg_op_seq_num
                and     wcor.wip_entity_id     = wco.wip_entity_id
                and     wcor.operation_seq_num = wco.operation_seq_num
                and     wcor.resource_seq_num  = l_res_seq_num;
            EXCEPTION
                when others then
                    raise e_invalid_rtg_op_seq;
            END;

l_stmt_num  := 30.2;
            -- check if the operation is on the recommended path
            if(l_op_recommended <> 'Y') then
                raise e_not_on_reco_path;
            end if;
            -- check if the the resource is recommended
            if(l_res_recommended <> 'Y') then
                raise e_res_not_reco;
            end if;

            -- check if the resource has instance information
            l_exists := 0;
            BEGIN
l_stmt_num  := 30.3;
                select  1
                into    l_exists
                from    wsm_copy_op_resource_instances  wcori
                where   wcori.wip_entity_id     = p_wip_entity_id
                and     wcori.organization_id   = p_org_id
                and     wcori.operation_seq_num = l_rtg_op_seq_num
                and     wcori.resource_seq_num  = l_res_seq_num;
            EXCEPTION
                when no_data_found then
                    l_exists := 0;
                when too_many_rows then
                    l_exists := 1;
                when others then
                    l_exists := 0;
            END;

l_stmt_num  := 30.4;
            /* ST : Detailed Scheduling commenting out this code as resource usage info can be obt. when instances exist
            -- do not accept resource usage when instance info is available
            if(l_instance_id IS NULL and l_exists = 1) then
                raise e_instances_exist;
            end if;
            */

            -- do not accept instance usage when instance info is not available
            if(l_instance_id IS NOT NULL and l_exists = 0) then
                raise e_invalid_instance_id;
            end if;

            if(l_instance_id IS NOT NULL) then
                -- get instance start/end dates
                BEGIN
l_stmt_num  := 30.5;
                    select  wcori.start_date,
                            wcori.completion_date
                    into    l_the_sdate,
                            l_the_edate
                    from    wsm_copy_op_resource_instances  wcori
                    where   wcori.wip_entity_id     = p_wip_entity_id
                    and     wcori.organization_id   = p_org_id
                    and     wcori.operation_seq_num = l_rtg_op_seq_num
                    and     wcori.resource_seq_num  = l_res_seq_num
                    and     wcori.instance_id       = l_instance_id
                    and     NVL(wcori.serial_number, g_nvl_str) = NVL(l_serial_num, g_nvl_str);
                EXCEPTION
                    when others then
                        raise e_invalid_instance_id;
                END;
            end if;

        else    -- p_handle_wip_cur_op = 'Y'
l_stmt_num  := 40.0;
            -- check if the resource has instance information
            l_exists := 0;
            -- Code for debug purpose.... ---- -- to uncomment replace all
            IF lbji_debug = 'Y' then
                fnd_file.put_line(fnd_file.log,'Wip entity id  : ' || p_wip_entity_id
                                               || ' op seq num : ' || l_job_op_seq_num
                                   || ' res seq num : ' ||l_res_seq_num
                                   );
            END IF;

            BEGIN
l_stmt_num  := 40.1;
                select  1
                into    l_exists
                from    wip_op_resource_instances  wori
                where   wori.wip_entity_id     = p_wip_entity_id
                and     wori.organization_id   = p_org_id
                and     wori.operation_seq_num = l_job_op_seq_num /* l_rtg_op_seq_num : ST : This has to be job op seq num */
                and     wori.resource_seq_num  = l_res_seq_num;
            EXCEPTION
                when no_data_found then
                    l_exists := 0;
                when too_many_rows then
                    l_exists := 1;
                when others then
                    l_exists := 0;
            END;

l_stmt_num  := 40.2;
            -- do not accept resource usage when instance info is available
            /*
            if(l_instance_id IS NULL and l_exists = 1) then
                raise e_instances_exist;
            end if;
            */
            -- do not accept instance usage when instance info is not available
            if(l_instance_id IS NOT NULL and l_exists = 0) then
                raise e_invalid_instance_id;
            end if;

            if(l_instance_id IS NOT NULL) then
                -- get instance start/end dates
                BEGIN
l_stmt_num  := 40.3;
                    select  start_date,
                            completion_date
                    into    l_the_sdate,
                            l_the_edate
                    from    wip_op_resource_instances
                    where   wip_entity_id     = p_wip_entity_id
                    and     organization_id   = p_org_id
                    and     operation_seq_num = l_job_op_seq_num
                    and     resource_seq_num  = l_res_seq_num
                    and     instance_id       = l_instance_id
                    and     NVL(serial_number, g_nvl_str) = NVL(l_serial_num, g_nvl_str);
                EXCEPTION
                    when others then
                        raise e_invalid_instance_id;
                END;
            else
                -- get resource start/end dates
                BEGIN
l_stmt_num  := 40.4;
                    select  start_date,
                            completion_date
                    into    l_the_sdate,
                            l_the_edate
                    from    wip_operation_resources wor
                    where   wip_entity_id     = p_wip_entity_id
                    and     organization_id   = p_org_id
                    and     operation_seq_num = l_job_op_seq_num
                    and     resource_seq_num  = l_res_seq_num;
                EXCEPTION
                    when others then
                        raise e_invalid_res_seq_num;
                END;
            end if;
        end if;

        -- first loop check single record
        l_sdate_match := 0;
        l_edate_match := 0;
        while (l_i IS NOT NULL)
        loop
            l_assigned_units := p_v_res_use(l_i).assigned_units;
            l_sdate          := p_v_res_use(l_i).start_date;
            l_edate          := p_v_res_use(l_i).completion_date;

            /* ST : Detailed scheduling : start */
            l_instance_id    := p_v_res_use(l_i).instance_id;
            /* ST : Detailed scheduling : end */

l_stmt_num  := 50;
            -- check start_date/completion_date
            if(l_sdate IS NULL or l_edate IS NULL) then
                raise e_null_date;
            end if;
            if(l_sdate > l_edate or         -- bug 3323417, was >=
               l_sdate < NVL(l_the_sdate, l_sdate) or
               l_edate > NVL(l_the_edate, l_edate))
            then
                --fnd_file.put_line(fnd_file.log, 'CZHDBG: XXX'
                --    || ' l_the_sdate = ' || TO_CHAR(l_the_sdate, 'DD-MON-YYYY HH24:MI:SS')
                --    || ',l_the_edate = ' || TO_CHAR(l_the_edate, 'DD-MON-YYYY HH24:MI:SS')
                --    || ' l_sdate = '     || TO_CHAR(l_sdate, 'DD-MON-YYYY HH24:MI:SS')
                --    || ' l_edate = '     || TO_CHAR(l_edate, 'DD-MON-YYYY HH24:MI:SS')
                --);
                raise e_invalid_date;
            end if;

l_stmt_num  := 60;
            -- check assigned_units
            if(l_assigned_units IS NULL or l_assigned_units <= 0) then
                raise e_invalid_asgned_units;
            end if;

            -- check time slot
            if(l_sdate = l_the_sdate) then
                l_sdate_match := 1;
            end if;
            if(l_edate = l_the_edate) then
                l_edate_match := 1;
            end if;

            /* ST : Detailed scheduling : start */
            /* for resource instance usage assigned units should be equal to 1 */
            if l_instance_id is not null and l_assigned_units <> 1 then
                  raise e_invalid_ins_assigned_units;
            end if;
            /* ST : Detailed scheduling : end  */
            l_i := p_v_res_use.next(l_i);
        end loop;

l_stmt_num  := 70;
        if(l_sdate_match = 0 or l_edate_match = 0) then
            raise e_invalid_time_slot;
        end if;

        -- second loop check relation between records
        l_i := p_v_res_use.first;
        while (l_i IS NOT NULL)
        loop
            l_sdate := p_v_res_use(l_i).start_date;
            l_edate := p_v_res_use(l_i).completion_date;

l_stmt_num  := 80;
            -- check time overlap
            l_j := p_v_res_use.next(l_i);
            while (l_j IS NOT NULL)
            loop
                if(p_v_res_use(l_j).start_date < l_sdate and
                   p_v_res_use(l_j).completion_date > l_sdate) or
                  (l_sdate < p_v_res_use(l_j).start_date and
                   l_edate > p_v_res_use(l_j).start_date)
                then
                    raise e_date_overlap;
                end if;

                l_j := p_v_res_use.next(l_j);
            end loop;

            l_i := p_v_res_use.next(l_i);
        end loop;
    end if; -- p_substitution_type in (WSM_SUB_ADD, WSM_SUB_REC)

EXCEPTION
    when e_not_on_reco_path then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INS_USE_NON_RECO');
        x_error_msg := fnd_message.get;
        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_usage : ' ||  l_stmt_num || ' : ' || x_error_msg);

    when e_res_not_reco then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INS_USE_NON_RECO');
        x_error_msg := fnd_message.get;
        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_usage : ' ||  l_stmt_num || ' : ' || x_error_msg);

    when e_invalid_rtg_op_seq then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'routing_op_seq_num');
        x_error_msg := fnd_message.get;
        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_usage : ' ||  l_stmt_num || ' : ' || x_error_msg);

    when e_invalid_res_seq_num then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_RES_NOT_REQUIRED');
        x_error_msg := fnd_message.get;
        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_usage : ' ||  l_stmt_num || ' : ' || x_error_msg);

    when e_instances_exist then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INS_EXISTS');
        x_error_msg := fnd_message.get;
        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_usage : ' ||  l_stmt_num || ' : ' || x_error_msg);

    when e_invalid_instance_id then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        --fnd_message.set_token('FLD_NAME', ' l_stmt_num : ' || l_stmt_num || ' Resource_seq_num / Instance_id / Serial_number');
        fnd_message.set_token('FLD_NAME', ' Resource_seq_num / Instance_id / Serial_number'); /*Bug 5488016 */
        x_error_msg := fnd_message.get;
        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_usage : ' ||  l_stmt_num || ' : ' || x_error_msg);

    when e_invalid_asgned_units then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_USE_BAD_ASGN_UNITS');
        x_error_msg := fnd_message.get;
        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_usage : ' ||  l_stmt_num || ' : ' || x_error_msg);

    /* ST : Detailed Scheduling start */
    when e_invalid_ins_assigned_units then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_INS_ASSG_UNITS');
        x_error_msg := fnd_message.get;
        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_usage : ' ||  l_stmt_num || ' : ' || x_error_msg);

    when e_no_res_seq_num then
        x_error_msg := 'validate_wljdi_res_usage :  resource_seq_num cannot be uniquely found'; -- CZHDBG_MSG
        x_error_code := -1;
        fnd_file.put_line(fnd_file.log,substrb(x_error_msg, 1, 2000));

    /* ST : Detailed Scheduling end */

    when e_usage_not_exists then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_USE_NOT_EXISTS');
        x_error_msg := fnd_message.get;
        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_usage : ' ||  l_stmt_num || ' : ' || x_error_msg);

    when e_null_date then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_NULL_FIELD');
        fnd_message.set_token('FLD_NAME', 'Start date and Completion date');
        x_error_msg := fnd_message.get;
        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_usage : ' ||  l_stmt_num || ' : ' || x_error_msg);

    when e_invalid_date then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'Resource usage scheduled dates');
        x_error_msg := fnd_message.get;
        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_usage : ' ||  l_stmt_num || ' : ' || x_error_msg);

    when e_date_overlap then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_USE_TIME_OVERLAP');
        x_error_msg := fnd_message.get;
        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_usage : ' ||  l_stmt_num || ' : ' || x_error_msg);

    when e_invalid_time_slot then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_USE_BAD_TIME_SLOT');
        x_error_msg := fnd_message.get;
        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_usage : ' ||  l_stmt_num || ' : ' || x_error_msg);

    when others then
        x_error_code := -1;
        x_error_msg := 'Error: validate_wljdi_res_usage: (#'||l_stmt_num||') '
                       || SUBSTR(SQLERRM, 1,240);
        fnd_file.put_line(fnd_file.log,'validate_wljdi_res_usage : ' ||  l_stmt_num || ' : ' || x_error_msg);

END validate_wljdi_res_usage;


-- **********************************************************************************************
-- VALIDATE_WLJDI_OP_COMPONENT: local validation procedure
-- **********************************************************************************************

PROCEDURE validate_wljdi_op_component(
        p_wip_entity_id         in number,
        p_org_id                in number,
        p_v_comp                in out nocopy t_op_comp,
        p_substitution_type     in number,
        p_handle_wip_cur_op     in varchar2,
        x_error_code            out nocopy number,
        x_error_msg             out nocopy varchar2) is

l_stmt_num              number;
l_i                     number;

l_op_sdate              date;
l_op_edate              date;
l_op_qty                number;
l_op_recommended        varchar2(1) := 'N';

l_rtg_op_seq_num        number;
l_job_op_seq_num        number;
l_item_id               number;
l_primary_item_id       number;
l_src_phm_item_id       number;
l_component_seq_id      number;
l_date_req              date;
l_req_qty               number;
l_qpa                   number;
l_bom_qpa               number; -- ADD: bug 3347985
l_scheduled_qty         number;
l_component_yield       number;

-- Added For LBJ Interface Alcoa Enhancement
l_item_old_id     number;
l_comp_exist      number;
l_quantity_issued number;
l_temp            number;
l_comp_duplicate  number;
l_wip_valid       number;
l_wip_supply_type number;
l_job_qty         number;
l_mrp_net_flag    number;
l_phan_exist      number;
l_src_phm_id      number;
l_quantity_per_assembly number;
l_supply_subinventory   varchar2(10);
l_supply_locator_id     number;
l_sched_qty        number;

e_parent_phantom          exception;
e_parent_phantom_comp     exception;
e_no_parent_phantom       exception;
e_invalid_item            exception;
e_quantity_issued_error   exception;
e_material_trans_err      exception;
e_phantom_comp            exception;
e_invalid_wip_supply_type exception;
e_invalid_qpa             exception;
e_inv_supply_info         exception;
e_invalid_job             exception;
e_dup_component           exception;
e_no_assy_as_comp         exception;
e_invalid_mrp_net_flag  exception;

cursor c_wsm_phm_grp (
        c_wip_entity_id     number,
        c_rtg_op_seq_num    number,
        c_src_phm_item_id   number) is
    select   component_sequence_id,
             bill_quantity_per_assembly -- bug 3347985, was 'quantity_per_assembly'
    from     wsm_copy_requirement_ops
    where    wip_entity_id      = c_wip_entity_id
    and      operation_seq_num  = c_rtg_op_seq_num
    and      source_phantom_id  = c_src_phm_item_id
    order by component_sequence_id;

l_v_phm_comp_seqs       t_number;
l_v_phm_comp_qpa        t_number;

e_req_qty_zero          exception; -- bug 7197440
e_req_qty_sign_chg      exception; -- bug 7197440
e_invalid_component     exception;
e_invalid_phantom       exception;
e_invalid_date          exception;
e_req_qty_not_upd       exception;
--e_req_qty_negative      exception; Changed for Bug# 7197440
e_invalid_comp_yield    exception;

BEGIN

    x_error_code := 0;
    x_error_msg := '';
    l_i := p_v_comp.first;
    if(l_i IS NULL) then return; end if;

    l_rtg_op_seq_num   := p_v_comp(l_i).rtg_op_seq_num;
    l_job_op_seq_num   := p_v_comp(l_i).job_op_seq_num;
    l_item_id          := p_v_comp(l_i).item_id;
    l_primary_item_id  := p_v_comp(l_i).primary_item_id;
    l_src_phm_item_id  := p_v_comp(l_i).src_phm_item_id;
    l_component_seq_id := p_v_comp(l_i).component_seq_id;
    l_date_req         := p_v_comp(l_i).date_required;
    l_req_qty          := p_v_comp(l_i).required_qty;

    -- Added For LBJ Interface Alcoa Enhancement
    l_item_old_id      := p_v_comp(l_i).item_old_id;
    l_wip_supply_type  := p_v_comp(l_i).wip_supply_type;
    l_mrp_net_flag     := p_v_comp(l_i).mrp_net_flag;
    l_quantity_per_assembly := p_v_comp(l_i).qpa ;
    l_supply_subinventory   := p_v_comp(l_i).supply_subinventory;
    l_supply_locator_id     := p_v_comp(l_i).supply_locator ;

l_stmt_num  := 10;
    -- validate operation_seq_num, l_item_id
    if p_substitution_type in (WSM_SUB_CHG, WSM_SUB_REC) then

        -- get op start/end dates
        if( p_handle_wip_cur_op = 'Y') then
            BEGIN
l_stmt_num  := 20;
                select  wo.first_unit_start_date,
                        wo.last_unit_completion_date
                into    l_op_sdate,
                        l_op_edate
                from    wip_operations             wo,
                        wip_requirement_operations wro
                where   wo.wip_entity_id         = p_wip_entity_id
                and     wo.operation_seq_num     = l_job_op_seq_num
                and     wro.wip_entity_id        = wo.wip_entity_id
                and     wro.operation_seq_num    = wo.operation_seq_num
                and     wro.inventory_item_id    = l_item_id;
            EXCEPTION
                when no_data_found then
                    raise e_invalid_component;
            END;

        else    -- p_handle_wip_cur_op = 'N'

            if(l_src_phm_item_id IS NOT NULL AND
               l_src_phm_item_id <> -1)
            then

                -- check l_rtg_op_seq_num
                BEGIN
l_stmt_num  := 30;
                    select  wco.reco_start_date,
                            wco.reco_completion_date,
                            wco.recommended,
                            wco.reco_scheduled_quantity
                    into    l_op_sdate,
                            l_op_edate,
                            l_op_recommended,
                            l_scheduled_qty
                    from    wsm_copy_operations wco
                    where   wco.wip_entity_id     = p_wip_entity_id
                    and     wco.operation_seq_num = l_rtg_op_seq_num;
                EXCEPTION
                    when no_data_found then
                        raise e_invalid_component;
                END;

l_stmt_num  := 40.1;
                -- get all the component_seq_id in the same phantom comp
                for rec in c_wsm_phm_grp (
                        p_wip_entity_id,
                        l_rtg_op_seq_num,
                        l_src_phm_item_id)
                loop
                    l_v_phm_comp_seqs(rec.component_sequence_id) := rec.component_sequence_id;
                    l_v_phm_comp_qpa(rec.component_sequence_id)  := rec.bill_quantity_per_assembly; -- bug 3347985
                end loop;

l_stmt_num  := 40.2;
                -- should check whether all the components within the phantom
                -- are send together
                if(l_v_phm_comp_seqs.COUNT <> p_v_comp.COUNT) then
                    raise e_invalid_phantom;
                end if;
                l_i := p_v_comp.first;
                while (l_i IS NOT NULL)
                loop
l_stmt_num  := 40.3;
                    l_component_seq_id := p_v_comp(l_i).component_seq_id;
                    if(NOT l_v_phm_comp_seqs.EXISTS(l_component_seq_id)) then
                        raise e_invalid_phantom;
                    end if;

                    -- check if component yield is going to be changed
                    -- by sending required_quantity
                    l_req_qty := p_v_comp(l_i).required_qty;
                    if(l_req_qty IS NOT NULL) then
                        -- bug 7197440 : Do not allow required quantity to be either zero or change of sign.
                        if(l_req_qty = 0) then
					 raise e_req_qty_zero;
		        elsif (sign(l_req_qty) <> sign(l_v_phm_comp_qpa(l_component_seq_id))) then
					 raise e_req_qty_sign_chg;
	                end if; -- end of fix for bug 7197440

                        if(l_op_recommended <> 'Y') then
                            raise e_req_qty_not_upd;
                        end if;
                        if(NVL(l_scheduled_qty, 0) <> 0) then
                            -- BC: bug 3347985
                            -- l_qpa             := l_v_phm_comp_qpa(l_component_seq_id);
                            -- l_component_yield := round(l_scheduled_qty*l_qpa/l_req_qty, 6);
                            l_bom_qpa         := l_v_phm_comp_qpa(l_component_seq_id);
                            l_component_yield := round(l_scheduled_qty*l_bom_qpa/l_req_qty, 6);
                            l_qpa             := l_req_qty/l_scheduled_qty;
                            -- EC: bug 3347985
                            if(l_component_yield <= 0) then
                                raise e_invalid_comp_yield;
                            else
                                p_v_comp(l_i).component_yield := l_component_yield;
                                p_v_comp(l_i).qpa             := l_qpa;
                            end if;
                        else
                            p_v_comp(l_i).component_yield := null;
                            p_v_comp(l_i).qpa             := null;  -- ADD: bug 3347985
                        end if;
                    else
                        p_v_comp(l_i).component_yield := null;
                        p_v_comp(l_i).qpa             := null;  -- ADD: bug 3347985
                    end if;

                    l_i := p_v_comp.next(l_i);
                end loop;

            else    -- l_src_phm_item_id IS NULL or -1

                BEGIN
l_stmt_num  := 50.1;
                    select  wco.reco_start_date,
                            wco.reco_completion_date,
                            wco.recommended,
                            wco.reco_scheduled_quantity,
                            wcro.bill_quantity_per_assembly -- bug 3347985 was 'quantity_per_assembly'
                    into    l_op_sdate,
                            l_op_edate,
                            l_op_recommended,
                            l_scheduled_qty,
                            l_bom_qpa
                    from    wsm_copy_operations      wco,
                            wsm_copy_requirement_ops wcro
                    where   wco.wip_entity_id         = p_wip_entity_id
                    and     wco.operation_seq_num     = l_rtg_op_seq_num
                    and     wcro.wip_entity_id        = wco.wip_entity_id
                    and     wcro.operation_seq_num    = wco.operation_seq_num
                    and     wcro.component_item_id    = l_item_id
                    and     wcro.primary_component_id = l_primary_item_id
                    and     wcro.source_phantom_id = -1; -- is NULL;
                EXCEPTION
                    when no_data_found then
                        raise e_invalid_component;
                END;

l_stmt_num  := 50.2;
                -- check if component yield is going to be changed
                if(l_req_qty IS NOT NULL) then
                        -- bug 7197440 : Do not allow required quantity to be either zero or change of sign.
                        if(l_req_qty = 0) then
					 raise e_req_qty_zero;
		        elsif (sign(l_req_qty) <> sign(l_bom_qpa)) then
					 raise e_req_qty_sign_chg;
	                end if; -- end of fix for bug 7197440
l_stmt_num  := 50.3;
                    if(l_op_recommended <> 'Y') then
                        raise e_req_qty_not_upd;
                    end if;
l_stmt_num  := 50.4;
                    if(NVL(l_scheduled_qty, 0) <> 0) then
                        -- BC: bug 3347985
                        --l_component_yield := round(l_scheduled_qty*l_qpa/l_req_qty, 6);
                        l_component_yield := round(l_scheduled_qty*l_bom_qpa/l_req_qty, 6);
                        l_qpa             := l_req_qty/l_scheduled_qty;
                        -- EC: bug 3347985
                        if(l_component_yield <= 0) then
                            raise e_invalid_comp_yield;
                        else
                            p_v_comp(l_i).component_yield := l_component_yield;
                            p_v_comp(l_i).qpa             := l_qpa; -- ADD: bug 3347985
                        end if;
                    else
                        p_v_comp(l_i).component_yield := null;
                        p_v_comp(l_i).qpa             := null; -- ADD: bug 3347985
                    end if;
                else
                    p_v_comp(l_i).component_yield := null;
                    p_v_comp(l_i).qpa             := null; -- ADD: bug 3347985
                end if;

            end if; -- l_src_phm_item_id IS NULL or -1

        end if;

l_stmt_num  := 60;
        -- validate dates
        if(l_date_req IS NOT NULL) then
            if( --NVL(l_op_sdate, l_date_req) > l_date_req or -- bug 3292689: removed per APS request
                l_date_req > NVL(l_op_edate, l_date_req))
            then
                raise e_invalid_date;
            end if;
        end if;

    end if; -- p_load_type in (WSM_SUB_CHG, WSM_SUB_REC)
    IF (p_substitution_type=WSM_SUB_DEL) THEN

        l_comp_exist := null;
        l_quantity_issued :=null;
        l_temp   :=null;
        if( p_handle_wip_cur_op = 'Y') then  --Current Operation  validation

            --Parent Phantom logic, not deleting the component of parent phantom
            if (l_job_op_seq_num<0) then
                raise e_parent_phantom;
            end if;

            --Check if the inventory item id old is valid
            /*
            begin
                select 1
                into l_comp_exist
                from mtl_system_items_kfv
                where organization_id = p_org_id
                and  inventory_item_id=l_item_old_id;
            exception
                when others then
                    raise e_invalid_item;
            end; */

            begin
                select  wro.quantity_issued
                into  l_quantity_issued
                from  wip_requirement_operations wro
                where wro.wip_entity_id = p_wip_entity_id
                and   wro.operation_seq_num = l_job_op_seq_num
                and   wro.inventory_item_id = l_item_old_id
                and   wro.organization_id = p_org_id;

            exception
                when no_data_found then
                    null;
            end;

            --Quantity Issued validate

            if(l_quantity_issued >0) then
                raise e_quantity_issued_error;
            end if;

            --Validation to check if the component has been Transacted
            begin

                select  1
                into  l_temp
                from  dual
                where  exists
                             (select 1
                             from  wip_requirement_operations wro
                             where  wro.wip_entity_id = p_wip_entity_id
                             and  wro.organization_id =p_org_id
                             and  wro.operation_seq_num = l_job_op_seq_num
                             and  wro.inventory_item_id = l_item_old_id
                             and  wro.quantity_issued <> 0)
                or exists
                            (select 1
                            from  mtl_material_transactions_temp mmtt
                            where mmtt.transaction_source_id = p_wip_entity_id
                            and  mmtt.organization_id = p_org_id
                            and  mmtt.operation_seq_num = l_job_op_seq_num
                            and  mmtt.inventory_item_id =  l_item_old_id);

            exception
                when no_data_found then
                    null;
            end;

            if (l_temp is not null) then
                raise e_material_trans_err;
            end if;

        elsif( p_handle_wip_cur_op = 'N') THEN
            /* Support deletion of Parent Phantom component
            if (l_rtg_op_seq_num<0) then
                raise e_parent_phantom;
            end if;

            --check if the inventory item id old is valid
            begin
                select 1
                into l_comp_exist
                from mtl_system_items_kfv
                where organization_id = p_org_id
                and  inventory_item_id=l_item_old_id;
            exception
                when others then
                    raise e_invalid_item;
            end;
            */
            -- Validate for parent phantom component that no child component exists.
            if l_src_phm_item_id=0 then
                begin
                    select 1
                    into   l_phan_exist
                    from   dual
                    where  exists (select component_item_id
                                   from   wsm_copy_requirement_ops
                                   where  wip_entity_id     = p_wip_entity_id
                                   and    source_phantom_id = l_item_old_id
                                   and    component_item_id <>l_item_old_id
                                   and    operation_seq_num = l_rtg_op_seq_num);
                    raise e_parent_phantom_comp;
                exception
                    when no_data_found then
                        null;
                end;
            end if;
        end if; --p_handle_wip_cur_op end if
    ELSIF (p_substitution_type=WSM_SUB_ADD) THEN

        -- For a standard job, assembly should not be a component.
        begin
            select 1
            into l_comp_exist
            from dual
            where exists ( select 1
                           from wip_discrete_jobs
                           where wip_entity_id = p_wip_entity_id
                           and organization_id = p_org_id
                           and job_type = WIP_CONSTANTS.STANDARD
                           and primary_item_id = l_item_id );

            raise e_no_assy_as_comp;

        exception
            when no_data_found then
                null;
        end;

        l_comp_exist := NULL;
        if( p_handle_wip_cur_op = 'Y') THEN

            /*begin
                select 1
                into l_comp_exist
                from mtl_system_items_kfv
                where inventory_item_id=l_item_id
                and organization_id=p_org_id;
            exception
                when others then
                    raise e_invalid_item;
            end;*/

            ---Validate wip supply type

            if l_wip_supply_type= WIP_CONSTANTS.PHANTOM then
                raise e_phantom_comp;
            end if;

            if l_wip_supply_type not in (WIP_CONSTANTS.PUSH,
                                         WIP_CONSTANTS.ASSY_PULL,
                                         WIP_CONSTANTS.OP_PULL,
                                         WIP_CONSTANTS.BULK,
                                         WIP_CONSTANTS.VENDOR) or l_wip_supply_type is null then
                raise e_invalid_wip_supply_type;
            end if;

            --check if component already defined for given job and operation.
            begin
                select  1
                into l_comp_duplicate
                from wip_requirement_operations wro
                where wro.wip_entity_id = p_wip_entity_id
                and wro.operation_seq_num =l_job_op_seq_num
                and wro.organization_id=p_org_id
                and wro.inventory_item_id=l_item_id;
            exception
                when others then
                    null;
            end;

            if l_comp_duplicate is not null then
                raise e_dup_component;
            end if;

            --Validate the component dates

            begin
                select wo.first_unit_start_date,
                       wo.last_unit_completion_date,
                       wo.scheduled_quantity
                into  l_op_sdate,
                      l_op_edate,
                      l_sched_qty
                from  wip_operations wo
                where wo.wip_entity_id    = p_wip_entity_id
                and  wo.operation_seq_num = l_job_op_seq_num;
            exception
                when no_data_found then
                    raise e_invalid_job;
            end;

            if(l_date_req IS NOT NULL) then
                if ( NVL(l_op_sdate, l_date_req) > l_date_req or
                    l_date_req > NVL(l_op_edate, l_date_req)) then

                    raise e_invalid_date;
                end if;
            else
                l_date_req := l_op_sdate ;
            end if;

            --Validating reqd qty

            if (l_req_qty=0 or l_req_qty is null) then
                raise e_req_qty_zero;
            end if;

            /*if l_quantity_per_assembly is null or l_quantity_per_assembly=0 then
                raise e_invalid_qpa;
            end if;*/
            l_quantity_per_assembly := (l_req_qty/l_sched_qty);

            if l_mrp_net_flag is null or l_mrp_net_flag not in (WIP_CONSTANTS.YES,WIP_CONSTANTS.NO)then
                raise e_invalid_mrp_net_flag;
            end if;

            -- For Adhoc components Bill QPA is considered as 1.
            --p_v_comp(l_i).component_yield := round(1/l_quantity_per_assembly,6);
            p_v_comp(l_i).component_yield := 1;
            p_v_comp(l_i).qpa:=l_quantity_per_assembly;

            if(l_wip_supply_type in (WIP_CONSTANTS.ASSY_PULL,WIP_CONSTANTS.OP_PULL) and
               l_supply_subinventory IS NULL) then

                select wip_supply_subinventory, wip_supply_locator_id
                into   l_supply_subinventory, l_supply_locator_id
                from mtl_system_items
                where inventory_item_id = l_item_id
                and organization_id = p_org_id;

                if l_supply_subinventory is null then
                    select default_pull_supply_subinv, default_pull_supply_locator_id
                    into l_supply_subinventory, l_supply_locator_id
                    from wip_parameters
                    where organization_id = p_org_id;
                end if;

                if l_supply_subinventory is null then
                    raise e_inv_supply_info;
                end if;
            end if;

            p_v_comp(l_i).supply_subinventory := l_supply_subinventory;
            p_v_comp(l_i).supply_locator := l_supply_locator_id;
            p_v_comp(l_i).date_required  := l_date_req;


        ELSIF ( p_handle_wip_cur_op = 'N') THEN     --Future Operation start

            /*begin
                select 1
                into l_comp_exist
                from mtl_system_items_kfv
                where inventory_item_id=l_item_id
                and organization_id=p_org_id;
            exception
                when others then
                    raise e_invalid_item;
            end;*/

            if l_wip_supply_type not in (WIP_CONSTANTS.PUSH,
                                         WIP_CONSTANTS.ASSY_PULL,
                                         WIP_CONSTANTS.OP_PULL,
                                         WIP_CONSTANTS.BULK,
                                         WIP_CONSTANTS.VENDOR,
                                         WIP_CONSTANTS.PHANTOM) or l_wip_supply_type is null then
                raise e_invalid_wip_supply_type;
            end if;

            --check if component already defined for given job and operation.

            begin
                select  1
                into  l_comp_duplicate
                from  wsm_copy_requirement_ops wcro
                where  wcro.wip_entity_id = p_wip_entity_id
                and  wcro.organization_id=p_org_id
                and  wcro.component_item_id=l_item_id
                and  (wcro.operation_seq_num =l_rtg_op_seq_num or
                      wcro.operation_seq_num = -1*l_rtg_op_seq_num);
            exception
                when others then
                    null;
            end;

            if l_comp_duplicate is not null then
            raise e_dup_component;
            end if;

            l_comp_duplicate := null;

            if l_src_phm_item_id <> -1 AND
               l_src_phm_item_id <> 0 then

                begin
                    select  1
                    into  l_comp_duplicate
                    from  wsm_copy_requirement_ops wcro
                    where  wcro.wip_entity_id = p_wip_entity_id
                    and  wcro.organization_id=p_org_id
                    and  wcro.component_item_id=l_src_phm_item_id
                    and  wcro.operation_seq_num = -1*l_rtg_op_seq_num;
                exception
                    when others then
                        raise e_no_parent_phantom;
                end;
            end if;

            --Validate the Component Dates

            begin
                select  wco.reco_start_date,wco.reco_completion_date,wco.reco_scheduled_quantity
                into    l_op_sdate,l_op_edate,l_sched_qty
                from    wsm_copy_operations wco
                where   wco.wip_entity_id         = p_wip_entity_id
                and     wco.organization_id       = p_org_id
                and     wco.operation_seq_num     = l_rtg_op_seq_num;
            exception
                when no_data_found then
                    raise e_invalid_job;
            end;

            if(l_date_req IS NOT NULL) then
                if( NVL(l_op_sdate, l_date_req) > l_date_req or
                    l_date_req > NVL(l_op_edate, l_date_req) )  then
                    raise e_invalid_date;
                end if;
            else
                l_date_req := l_op_sdate;
            end if;

            --Validating reqd qty
            if (l_req_qty=0 or l_req_qty is null) then
                raise e_req_qty_zero;
            end if;

            /* if l_quantity_per_assembly is null or l_quantity_per_assembly=0 then
                raise e_invalid_qpa;
               end if; */

            l_quantity_per_assembly := (l_req_qty/l_sched_qty);

            if l_mrp_net_flag is null or l_mrp_net_flag not in (WIP_CONSTANTS.YES,WIP_CONSTANTS.NO)then
                raise e_invalid_mrp_net_flag;
            end if;

            -- For Adhoc components Bill QPA is considered as 1.
            --p_v_comp(l_i).component_yield := round(1/l_quantity_per_assembly,6);

            p_v_comp(l_i).component_yield := 1;
	           p_v_comp(l_i).qpa:=l_quantity_per_assembly;

            if(l_wip_supply_type in (WIP_CONSTANTS.ASSY_PULL,WIP_CONSTANTS.OP_PULL) and
               l_supply_subinventory IS NULL) then

                select wip_supply_subinventory, wip_supply_locator_id
                into   l_supply_subinventory, l_supply_locator_id
                from mtl_system_items
                where inventory_item_id = l_item_id
                and organization_id = p_org_id;

                if l_supply_subinventory is null then
                    select default_pull_supply_subinv, default_pull_supply_locator_id
                    into l_supply_subinventory, l_supply_locator_id
                    from wip_parameters
                    where organization_id = p_org_id;
                end if;

                if l_supply_subinventory is null then
                    raise e_inv_supply_info;
                end if;
            end if;

            p_v_comp(l_i).supply_subinventory := l_supply_subinventory;
            p_v_comp(l_i).supply_locator := l_supply_locator_id;
            p_v_comp(l_i).date_required  := l_date_req;


        end if;--p handle wip cur op = y
    end if; -- sub_type=Del and add

EXCEPTION
    when e_invalid_component then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_COMP_NOT_REQUIRED');
        x_error_msg := fnd_message.get;

    when e_invalid_comp_yield then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_COMP_BAD_YIELD');
        x_error_msg := fnd_message.get;

    when e_req_qty_not_upd then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_COMP_REQQTY_NON_RECO');
        x_error_msg := fnd_message.get;

    /*when e_req_qty_negative then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_COMP_BAD_REQQTY');
        x_error_msg := fnd_message.get;*/

    when e_invalid_phantom then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_COMP_PARTIAL_PHANTOM');
        x_error_msg := fnd_message.get;

    when e_invalid_date then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_COMP_BAD_DATE');
        x_error_msg := fnd_message.get;

---Alcoa Enhancement Changes
    when e_parent_phantom then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_PARENT_PHANTOM');
        x_error_msg := fnd_message.get;

    when e_parent_phantom_comp then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_PARENT_PHANTOM_CHILD');
        x_error_msg := fnd_message.get;

    when e_no_parent_phantom then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_NO_PARENT_PHANTOM');
        x_error_msg := fnd_message.get;

    when e_invalid_item then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_ITEM');
        x_error_msg := fnd_message.get;

    when e_quantity_issued_error then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'Quantity_issued');
        x_error_msg := fnd_message.get;

    when e_material_trans_err then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_MATERIAL_TRX');
        x_error_msg := fnd_message.get;

       when e_phantom_comp then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_PHANTOM_COMPONENT');
        x_error_msg := fnd_message.get;

       when e_invalid_wip_supply_type then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'Supply_type');
        x_error_msg := fnd_message.get;

        when e_invalid_qpa then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'Quantity_per_assembly');
        x_error_msg := fnd_message.get;

       when e_inv_supply_info then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'Supply subinventory/locator combination');
        x_error_msg := fnd_message.get;

        when e_invalid_job  then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'Job_op_seq_num / Routing_op_seq_num');
        x_error_msg := fnd_message.get;

       when  e_dup_component then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_COMPONENT_DUP');
        x_error_msg := fnd_message.get;

       when  e_no_assy_as_comp then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_ASSY_AS_COMP');
        x_error_msg := fnd_message.get;

      when e_invalid_mrp_net_flag then
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'Mrp_net_flag');
        x_error_msg := fnd_message.get;

	--Added for bug Fix #7197440
    when e_req_qty_zero then  -- bug #7197440
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_COPY_QTY_NON_ZERO');
        x_error_msg := fnd_message.get;

    when e_req_qty_sign_chg then --  bug #7197440
        x_error_code := -1;
        fnd_message.set_name('WSM','WSM_COPY_QTY_SIGN');
        x_error_msg := fnd_message.get;

    when others then
        x_error_code := -1;
        x_error_msg := 'Error: validate_wljdi_op_component: (#'||l_stmt_num||') '
                       || SUBSTR(SQLERRM, 1,240);
END validate_wljdi_op_component;



procedure update_cumulative_time (
        p_wip_entity_id         in number,
        p_operation_seq_num     in number,
        p_resource_seq_num      in number,
        p_instance_id           in number,
        p_serial_num            in varchar2,
        p_handle_wip_cur_op     in varchar2 )IS

cursor wip_res_usage (p_wip_entity_id number,
                      p_operation_seq_num number,
                      p_resource_seq_num number) is
    select start_date,
           completion_date,
           cumulative_processing_time
    from   wip_operation_resource_usage
    where  wip_entity_id = p_wip_entity_id
    and    operation_seq_num = p_operation_seq_num
    and    resource_seq_num = p_resource_seq_num
    and    NVL(instance_id, -1)          = NVL(p_instance_id, -1)
    and    NVL(serial_number, g_nvl_str) = NVL(p_serial_num, g_nvl_str)
    order by start_date for update;

cursor wsm_res_usage (p_wip_entity_id number,
                      p_operation_seq_num number,
                      p_resource_seq_num number) is
    select start_date,
           completion_date,
           cumulative_processing_time
    from   wsm_copy_op_resource_usage
    where  wip_entity_id = p_wip_entity_id
    and    operation_seq_num = p_operation_seq_num
    and    resource_seq_num = p_resource_seq_num
    and    NVL(instance_id, -1)          = NVL(p_instance_id, -1)
    and    NVL(serial_number, g_nvl_str) = NVL(p_serial_num, g_nvl_str)
    order by start_date for update;

current_cpt number := 0;
l_stmt_num  number;

begin

    if (p_handle_wip_cur_op = 'Y') then
l_stmt_num  := 10;
        for wip_row in wip_res_usage(p_wip_entity_id, p_operation_seq_num, p_resource_seq_num)
        loop
           current_cpt := current_cpt + wip_datetimes.datetime_diff_to_mins(
                                                wip_row.completion_date,
                                                wip_row.start_date);
           update wip_operation_resource_usage
           set    cumulative_processing_time = current_cpt
           where current of wip_res_usage;
        end loop;
    else

l_stmt_num  := 20;
        for wsm_row in wsm_res_usage(p_wip_entity_id, p_operation_seq_num, p_resource_seq_num)
        loop
           current_cpt := current_cpt + wip_datetimes.datetime_diff_to_mins(
                                                wsm_row.completion_date,
                                                wsm_row.start_date);
           update wsm_copy_op_resource_usage
           set    cumulative_processing_time = current_cpt
           where current of wsm_res_usage;
        end loop;
    end if;

end update_cumulative_time;



-- **********************************************************************************************
-- PROCESS_INTERFACE_ROWS
-- **********************************************************************************************

PROCEDURE  process_lbji_rows (
        retcode             out nocopy number,
        errbuf              out nocopy varchar2,
        p_group_id          in  number) is

cursor c_wlji is
    select  header_id,
            group_id,
            organization_id,
            organization_code,
            wip_entity_id,
            job_name,
            load_type,
            process_status,
            error_code,
            error_msg,
            num_of_children
    from    wsm_lot_job_interface
    where   process_status = WIP_CONSTANTS.PENDING
    and     NVL(transaction_date, creation_date) <= sysdate+1
    and     NVL(group_id, -99) = NVL(p_group_id, NVL(group_id, -99))
    and     load_type in (5,6)
    order by load_type;

cursor c_wljdi_no_parent is
    select  record_id,
            group_id,
            organization_id,
            organization_code,
            wip_entity_id,
            job_name,
            process_status,
            error_code,
            error_msg
    from    wsm_lot_job_dtl_interface
    where   process_status = WIP_CONSTANTS.PENDING
    and     parent_header_id IS NULL
    and     NVL(group_id, -99) = NVL(p_group_id, NVL(group_id, -99))
    and     transaction_date <= sysdate+1;


l_header            number;
l_group_id          number;
l_worker_reqid      number;
l_stmt_num          number;
conc_status         boolean;
row_count           number := 0;
l_error_count       number := 0;

l_temp_num          number := 0;
l_h_rows            number := 0;
l_h_valid_rows      number := 0;    -- num of valid rows in WLJI
l_d_rows            number := 0;
l_d_valid_rows      number := 0;    -- num of valid rows in WLJDI
l_num_jobs          number;
l_num_jobs_per      number := 30;
l_err_msg           varchar2(2000);
l_err_code          number;
l_xst               boolean;
l_h                 number;
l_d                 number;
l_wrk_cnt           number;
l_job_cnt           number;

l_reqt_id           number := fnd_global.conc_request_id;
l_prog_id           number := fnd_global.conc_program_id;
l_prog_appl_id      number := fnd_global.prog_appl_id;
l_login_id          number := fnd_global.login_id;
l_user_id           number := fnd_global.user_id;
l_resp_id           number := fnd_global.resp_id;
l_resp_appl_id      number := fnd_global.resp_appl_id;

l_v_group_id        t_number;
l_v_job_gid         t_number;
l_v_group_no        t_number;

l_job_name_hash     number;
e_launch_worker     exception;


BEGIN

l_stmt_num := 10;

    fnd_file.put_line(fnd_file.log, 'Processing Interface rows...');
    retcode := 0;
    -- CZHDBG: comment out this because the completion status of the
    -- concurrent program cannot be set properly with this call. Why ???
    --fnd_global.apps_initialize(l_user_id, l_resp_id, l_resp_appl_id);

l_stmt_num := 20;
    -- load organization PL/SQL table
    WSMPLCVA.load_org_table;

    ----------------------------------------------------------------
    -- {{ Check PENDING WLJI records, validate org, job id/name
    ----------------------------------------------------------------
l_stmt_num := 30;
    open c_wlji;
    fetch c_wlji bulk collect into
        v_wlji_header_id,
        v_wlji_group_id,
        v_wlji_org_id,
        v_wlji_org_code,
        v_wlji_wip_entity_id,
        v_wlji_job_name,
        v_wlji_load_type,
        v_wlji_process_status,
        v_wlji_err_code,
        v_wlji_err_msg,
        v_wlji_num_of_children;
    if lbji_debug = 'Y' then
        fnd_file.put_line(fnd_file.log,
            'Number of records in WSM_LOT_JOB_INTERFACE: ' || c_wlji%rowcount);
    end if;
    l_h_rows := c_wlji%rowcount;
    close c_wlji;

    l_h_valid_rows := 0;
    if(l_h_rows > 0) then
        l_h := v_wlji_header_id.first;
        WHILE l_h <= v_wlji_header_id.last
        LOOP
            v_wlji_err_code(l_h)         := 0;
            v_wlji_err_msg(l_h)          := '';
            v_wlji_process_status(l_h)   := WIP_CONSTANTS.RUNNING;

            Declare
                e_org_weid_error        exception;
            Begin -- {{ check org/job_name for this header_id
l_stmt_num := 40;
                -- Valiadte Org Id
                validate_org_id_name (
                    v_wlji_org_id(l_h),
                    v_wlji_org_code(l_h),
                    l_err_code,
                    l_err_msg);
                if l_err_code = -1 then
                    raise e_org_weid_error;
                end if;
l_stmt_num := 50;
                -- Valiadte Job Name / WIP Entity ID
                validate_wip_entity_id_name (
                    v_wlji_load_type(l_h),
                    v_wlji_org_id(l_h),
                    v_wlji_wip_entity_id(l_h),
                    v_wlji_job_name(l_h),
                    l_err_code,
                    l_err_msg);
                if l_err_code = -1 then
                    raise e_org_weid_error;
                end if;
l_stmt_num := 60;
                -- add valid job name to g_v_job_name
                l_h_valid_rows := l_h_valid_rows + 1;
                l_job_name_hash := dbms_utility.get_hash_value(
                                    v_wlji_job_name(l_h) || v_wlji_org_id(l_h),
                                    37, 1073741824);
                g_v_job_name(l_job_name_hash)      := v_wlji_job_name(l_h);
                g_v_wip_entity_id(l_job_name_hash) := v_wlji_wip_entity_id(l_h);

            Exception

                when e_org_weid_error then
l_stmt_num := 70;
                    v_wlji_process_status(l_h) := WIP_CONSTANTS.ERROR;
                    v_wlji_err_code(l_h) := -1;
                    v_wlji_err_msg(l_h) := l_err_msg;
                    fnd_file.put_line(fnd_file.log,
                        'Error (WLJI.Header_Id = ' || v_wlji_header_id(l_h) || ') : '
                        || l_err_msg);
                    l_error_count := l_error_count + 1;
            End; -- }} check org/job_name for this header_id

            l_h := v_wlji_header_id.next(l_h);
        END LOOP;

    end if;  -- if l_h_rows <>0
    ----------------------------------------------------------------
    -- }} Check PENDING WLJI records, validate org, job id/name
    ----------------------------------------------------------------


    -----------------------------------------------------------------
    -- {{ Check PENDING WLJDI records with parent_header_id = NULL
    -----------------------------------------------------------------
    if lbji_debug = 'Y' then
        fnd_file.put_line(fnd_file.log,
            'Checking wsm_lot_job_dtl_interface..');
    end if;

l_stmt_num := 100;
    open c_wljdi_no_parent;
    fetch c_wljdi_no_parent bulk collect into
        v_wljdi_record_id,
        v_wljdi_group_id,
        v_wljdi_org_id,
        v_wljdi_org_code,
        v_wljdi_wip_entity_id,
        v_wljdi_job_name,
        v_wljdi_process_status,
        v_wljdi_err_code,
        v_wljdi_err_msg;
    if lbji_debug = 'Y' then
        fnd_file.put_line(fnd_file.log,
            'Number of independent records in WSM_LOT_JOB_DTL_INTERFACE: '
            || c_wljdi_no_parent%rowcount);
    end if;
    l_d_rows := c_wljdi_no_parent%rowcount;
    close c_wljdi_no_parent;

    l_d_valid_rows := 0;
    if(l_d_rows > 0) then
        l_d := v_wljdi_record_id.first;
        WHILE l_d <= v_wljdi_record_id.last
        LOOP
            v_wljdi_err_code(l_d)        := 0;
            v_wljdi_err_msg(l_d)         := NULL;
            v_wljdi_process_status(l_d)  := WIP_CONSTANTS.RUNNING;

            Declare
                e_org_weid_error        exception;
            Begin -- {{ check org/job_name for this header_id
l_stmt_num := 110;
                -- Valiadte Org Id
                validate_org_id_name (
                    v_wljdi_org_id(l_d),
                    v_wljdi_org_code(l_d),
                    l_err_code,
                    l_err_msg);
                if l_err_code = -1 then
                    raise e_org_weid_error;
                end if;
l_stmt_num := 120;
                -- Valiadte Job Name / WIP Entity ID
                validate_wip_entity_id_name (
                    6,  -- Job update
                    v_wljdi_org_id(l_d),
                    v_wljdi_wip_entity_id(l_d),
                    v_wljdi_job_name(l_d),
                    l_err_code,
                    l_err_msg);
                if l_err_code = -1 then
                    raise e_org_weid_error;
                end if;

                -- add valid job name to g_v_job_name
                l_d_valid_rows := l_d_valid_rows + 1;
                l_job_name_hash := dbms_utility.get_hash_value(
                                    v_wljdi_job_name(l_d) || v_wljdi_org_id(l_d),
                                    37, 1073741824);
                g_v_job_name(l_job_name_hash)      := v_wljdi_job_name(l_d);
                g_v_wip_entity_id(l_job_name_hash) := v_wljdi_wip_entity_id(l_d);

            Exception
                when e_org_weid_error then
l_stmt_num := 130;
                    v_wljdi_process_status(l_d) := WIP_CONSTANTS.ERROR;
                    v_wljdi_err_code(l_d) := -1;
                    v_wljdi_err_msg(l_d) := l_err_msg;
                    fnd_file.put_line(fnd_file.log,
                        'Error: WLJDI(Record_Id = ' || v_wljdi_record_id(l_d) ||') '
                        || l_err_msg);
                    fnd_file.new_line(fnd_file.log, 3);
                    l_error_count := l_error_count +1;

            End; -- }} check org/job_name for this header_id

            l_d := v_wljdi_record_id.next(l_d);
        END LOOP;

    end if; -- if l_d_rows <> 0
    -----------------------------------------------------------------
    -- }} Check PENDING WLJDI records with parent_header_id = NULL
    -----------------------------------------------------------------


    -- Now, all the valid records in WLJI and WLJDI has valid Job Name
    -- Will balance worker load according to the number of jobs, will
    -- assign all the records of the same job to one worker
    -- When p_group_id is given, assign all the job with that group_id to
    -- one worker
    l_num_jobs := g_v_job_name.COUNT;
    if lbji_debug = 'Y' then
        fnd_file.put_line(fnd_file.log,
            'Number of jobs to be processed: '|| l_num_jobs);
    end if;

    if p_group_id is not null then
        if(l_h_rows > 0) then
l_stmt_num := 200;
            -- Update WLJDI for all record with parent_header_id = header_id
            l_h := v_wlji_header_id.first;
            WHILE l_h <= v_wlji_header_id.last
            LOOP
                update wsm_lot_job_dtl_interface
                set     process_status      = v_wlji_process_status(l_h),
                        group_id            = p_group_id,
                        organization_id     = v_wlji_org_id(l_h),
                        organization_code   = v_wlji_org_code(l_h),
                        wip_entity_id       = v_wlji_wip_entity_id(l_h),
                        job_name            = v_wlji_job_name(l_h),
                        -- BUG3600450 commented
                        --error_code          = v_wlji_err_code(l_h),
                        --error_msg           = 'See header (header_id=' ||
                        --                      v_wlji_header_id(l_h) || ') for error message',
                        program_id          = l_prog_id,
                        program_update_date = sysdate
                where   parent_header_id = v_wlji_header_id(l_h);
                v_wlji_num_of_children(l_h) := SQL%ROWCOUNT;
                l_h := v_wlji_header_id.next(l_h);
            END LOOP;

l_stmt_num := 210;
            -- bulk update wsm_lot_job_interface
            forall l_h in v_wlji_header_id.first..v_wlji_header_id.last
            update  wsm_lot_job_interface
            set     process_status              = v_wlji_process_status(l_h),
                    organization_id             = v_wlji_org_id(l_h),
                    organization_code           = v_wlji_org_code(l_h),
                    wip_entity_id               = v_wlji_wip_entity_id(l_h),
                    job_name                    = v_wlji_job_name(l_h),
                    error_code                  = v_wlji_err_code(l_h),
                    error_msg                   = v_wlji_err_msg(l_h),
                    num_of_children             = v_wlji_num_of_children(l_h),
                    program_id                  = l_prog_id,
                    program_update_date         = sysdate
            where   header_id = v_wlji_header_id(l_h);

        end if;  -- if l_h_rows <>0

        if(l_d_rows > 0) then
l_stmt_num := 220;
            forall l_d in v_wljdi_record_id.first..v_wljdi_record_id.last
            update  wsm_lot_job_dtl_interface
            set     process_status              = v_wljdi_process_status(l_d),
                    organization_id             = v_wljdi_org_id(l_d),
                    organization_code           = v_wljdi_org_code(l_d),
                    wip_entity_id               = v_wljdi_wip_entity_id(l_d),
                    job_name                    = v_wljdi_job_name(l_d),
                    error_code                  = v_wljdi_err_code(l_d),
                    error_msg                   = v_wljdi_err_msg(l_d),
                    program_id                  = l_prog_id,
                    program_update_date         = sysdate
            where   record_id = v_wljdi_record_id(l_d);
        end if; -- if l_d_rows <> 0

l_stmt_num := 230;
        if l_num_jobs > 0 then
            l_worker_reqid := FND_REQUEST.SUBMIT_REQUEST (
                            application => 'WSM',
                            program     => 'WSMLNCHW',
                            sub_request => FALSE,
                            argument1   => p_group_id,
                            argument2   => l_num_jobs );
            if l_worker_reqid = 0 then
                raise e_launch_worker;
            else
                COMMIT;
            end if;
            fnd_file.put_line(fnd_file.log, 'Request_id: '||l_worker_reqid||' submitted');
        else -- l_num_jobs <= 0
            fnd_file.put_line(fnd_file.log, 'No rows found in interface table');
        end if;

    else -- p_group_id is null

        if l_num_jobs > 0 then
l_stmt_num := 300;

            if mod(l_num_jobs, g_no_of_workers) = 0 then
                l_num_jobs_per := l_num_jobs / g_no_of_workers;
            else
                l_num_jobs_per := floor(l_num_jobs / g_no_of_workers) + 1;
            end if;

            if l_num_jobs_per < g_batch_size then
                l_num_jobs_per := g_batch_size;
            end if;

            l_job_cnt := 0;
            l_wrk_cnt := 0;

l_stmt_num := 310;
            -- {{ balance load among workers by setting group_id
            if(l_h_rows > 0) then
                l_h := v_wlji_header_id.first;
                WHILE l_h <= v_wlji_header_id.last
                LOOP
                    if v_wlji_process_status(l_h) <> WIP_CONSTANTS.ERROR then
                        l_job_name_hash := dbms_utility.get_hash_value(
                                            v_wlji_job_name(l_h) || v_wlji_org_id(l_h),
                                            37, 1073741824);
                        if not l_v_job_gid.exists(l_job_name_hash) then -- one new job name
                            if mod(l_job_cnt, l_num_jobs_per) = 0 then
                                l_wrk_cnt := l_wrk_cnt + 1;  -- one more worker
                                -- get a new group id
                                select wsm_lot_job_interface_s.NEXTVAL
                                into   l_group_id
                                from   dual;
                                l_v_group_id(l_wrk_cnt) := l_group_id;
                                l_v_group_no(l_wrk_cnt) := 0;
                            end if;
                            l_job_cnt := l_job_cnt+1;
                            l_v_group_no(l_wrk_cnt) := l_v_group_no(l_wrk_cnt)+1;
                            l_v_job_gid(l_job_name_hash) := l_v_group_id(l_wrk_cnt);
                        end if;
                        v_wlji_group_id(l_h) := l_v_job_gid(l_job_name_hash);
                    end if;
                    l_h := v_wlji_header_id.next(l_h);
                END LOOP;
            end if;

l_stmt_num := 320;
            if(l_d_rows > 0) then
                l_d := v_wljdi_record_id.first;
                WHILE l_d <= v_wljdi_record_id.last
                LOOP
                    if v_wljdi_process_status(l_d) <> WIP_CONSTANTS.ERROR then
                        l_job_name_hash := dbms_utility.get_hash_value(
                                            v_wljdi_job_name(l_d) || v_wljdi_org_id(l_d),
                                            37, 1073741824);
                        if not l_v_job_gid.exists(l_job_name_hash) then -- a new job
                            if mod(l_job_cnt, l_num_jobs_per) = 0 then
                                l_wrk_cnt := l_wrk_cnt +1;  -- one more worker
                                select wsm_lot_job_interface_s.NEXTVAL
                                into   l_group_id
                                from   dual;
                                l_v_group_id(l_wrk_cnt) := l_group_id;
                                l_v_group_no(l_wrk_cnt) := 0;
                            end if;
                            l_job_cnt := l_job_cnt+1;
                            l_v_group_no(l_wrk_cnt) := l_v_group_no(l_wrk_cnt)+1;
                            l_v_job_gid(l_job_name_hash) := l_group_id;
                        end if;
                        v_wljdi_group_id(l_d) := l_v_job_gid(l_job_name_hash);
                    end if;
                    l_d := v_wljdi_record_id.next(l_d);
                END LOOP;
            end if;
            -- }} balance load among workers by setting group_id

        end if; -- if l_num_jobs > 0

        if(l_h_rows > 0) then

l_stmt_num := 330;
            -- Update WLJDI for all record with parent_header_id = header_id
            l_h := v_wlji_header_id.first;
            WHILE l_h <= v_wlji_header_id.last
            LOOP
                update wsm_lot_job_dtl_interface
                set     process_status          = v_wlji_process_status(l_h),
                        group_id                = v_wlji_group_id(l_h),
                        organization_id         = v_wlji_org_id(l_h),
                        organization_code       = v_wlji_org_code(l_h),
                        wip_entity_id           = v_wlji_wip_entity_id(l_h),
                        job_name                = v_wlji_job_name(l_h),
                        error_code              = v_wlji_err_code(l_h),
                        error_msg               = v_wlji_err_msg(l_h),
                        program_id              = l_prog_id,
                        program_update_date     = sysdate
                where   parent_header_id = v_wlji_header_id(l_h);
                v_wlji_num_of_children(l_h) := SQL%ROWCOUNT;
                l_h := v_wlji_header_id.next(l_h);
            END LOOP;

l_stmt_num := 340;
            -- bulk update wsm_lot_job_interface
            forall l_h in v_wlji_header_id.first..v_wlji_header_id.last
            update  wsm_lot_job_interface
            set     process_status              = v_wlji_process_status(l_h),
                    group_id                    = v_wlji_group_id(l_h), -- assigned gid
                    organization_id             = v_wlji_org_id(l_h),
                    organization_code           = v_wlji_org_code(l_h),
                    wip_entity_id               = v_wlji_wip_entity_id(l_h),
                    job_name                    = v_wlji_job_name(l_h),
                    error_code                  = v_wlji_err_code(l_h),
                    error_msg                   = v_wlji_err_msg(l_h),
                    num_of_children             = v_wlji_num_of_children(l_h),
                    program_id                  = l_prog_id,
                    program_update_date         = sysdate
            where   header_id = v_wlji_header_id(l_h);

        end if;  -- if l_h_rows <>0

        if(l_d_rows > 0) then
l_stmt_num := 350;
            forall l_d in v_wljdi_record_id.first..v_wljdi_record_id.last
            update  wsm_lot_job_dtl_interface
            set     process_status              = v_wljdi_process_status(l_d),
                    group_id                    = v_wljdi_group_id(l_d), -- assigned gid
                    organization_id             = v_wljdi_org_id(l_d),
                    organization_code           = v_wljdi_org_code(l_d),
                    wip_entity_id               = v_wljdi_wip_entity_id(l_d),
                    job_name                    = v_wljdi_job_name(l_d),
                    error_code                  = v_wljdi_err_code(l_d),
                    error_msg                   = v_wljdi_err_msg(l_d),
                    program_id                  = l_prog_id,
                    program_update_date         = sysdate
            where   record_id = v_wljdi_record_id(l_d);
        end if; -- if l_d_rows <> 0

        if l_num_jobs > 0 then
            fnd_file.put_line(fnd_file.log, 'Total pending jobs = '       || l_num_jobs);
            fnd_file.put_line(fnd_file.log, 'Number of workers = '        || g_no_of_workers);
            fnd_file.put_line(fnd_file.log, 'Batch size = '               || g_batch_size);
            fnd_file.put_line(fnd_file.log, 'Number of jobs per worker = '|| l_num_jobs_per);
            fnd_file.put_line(fnd_file.log, 'Number of workers launched= '|| l_wrk_cnt);

l_stmt_num := 360;
            l_temp_num := l_v_group_id.first;
            WHILE l_temp_num <= l_v_group_id.last
            LOOP
                l_worker_reqid := FND_REQUEST.SUBMIT_REQUEST (
                                application => 'WSM',
                                program     => 'WSMLNCHW',
                                sub_request => FALSE,
                                argument1   => l_v_group_id(l_temp_num),
                                argument2   => l_v_group_no(l_temp_num) );
                if l_worker_reqid = 0 then
                    raise e_launch_worker;
                end if;
                l_temp_num := l_v_group_id.next(l_temp_num);
            END LOOP;
            COMMIT;

        end if; -- if l_d_rows <> 0

    end if; -- p_group_id is null

    if l_error_count <> 0 then
        retcode := 1;
        errbuf := 'The manager marked at least one row as errored';
        fnd_file.put_line(fnd_file.log,errbuf);
        conc_status := FND_CONCURRENT.SET_COMPLETION_STATUS('WARNING',errbuf);
        COMMIT;
    end if;

EXCEPTION

    when e_launch_worker then
        rollback;
        retcode := 1;
        errbuf := 'Error: process_interface_rows: (#'||l_stmt_num||') fail to launch worker';
        fnd_file.put_line(fnd_file.log,errbuf);
        conc_status := FND_CONCURRENT.SET_COMPLETION_STATUS('ERROR',errbuf);
        COMMIT;

    when others then
        rollback;
        retcode := 1;
        errbuf := 'Error: process_interface_rows: (#'||l_stmt_num||') '
                  || SUBSTR(SQLERRM, 1,240);
        fnd_file.put_line(fnd_file.log,errbuf);
        conc_status := FND_CONCURRENT.SET_COMPLETION_STATUS('ERROR',errbuf);
        COMMIT;

END process_lbji_rows;



-- **********************************************************************************************
-- LAUNCH WORKER
-- **********************************************************************************************

PROCEDURE  launch_worker(
        retcode             out nocopy number,
        errbuf              out nocopy varchar2,
        p_group_id          in  number,
        p_alotted_jobs      in  number  ) is

-- ==============================================================================================
-- cursors used to bulk bind data from wlji to PL/SQL tables
-- ==============================================================================================
cursor csr_wlji is
    select   error_code,
             error_msg,
             --error,
             last_update_date,
             request_id,
             program_id,
             program_application_id,
             last_updated_by,
             creation_date,
             created_by,
             last_update_login,
             program_update_date,
             last_updated_by_name,
             created_by_name,
             organization_id,
             organization_code,
             wip_entity_id,
             job_name,
             lot_number,
             primary_item_id,
             header_id,
             process_status,
             --process_phase,
             routing_reference_id,
             completion_subinventory,
             completion_locator_id,
             mode_flag,
             group_id,
             load_type,
             status_type,
             --old_start_quantity,
             --old_completion_date,
             bom_reference_id,
             bom_revision_date,
             routing_revision_date,
             wip_supply_type,
             class_code,
             description,
             firm_planned_flag,
             alternate_routing_designator,
             alternate_bom_designator,
             demand_class,
             start_quantity,
             first_unit_start_date,
             --first_unit_completion_date,
             --last_unit_start_date,
             last_unit_completion_date,
             scheduling_method,
             routing_revision,
             bom_revision,
             schedule_group_id,
             schedule_group_name,
             build_sequence,
             net_quantity,
             allow_explosion,
             --old_status_type,
             --interface_id,
             coproducts_supply,
             source_code,
             source_line_id,
             process_type,
             --processing_work_days,
             --daily_production_rate,
             line_id,
             --line_code,
             --lot_control_code,
             --repetitive_schedule_id,
             --parent_group_id,
             attribute_category,
             attribute1,
             attribute2,
             attribute3,
             attribute4,
             attribute5,
             attribute6,
             attribute7,
             attribute8,
             attribute9,
             attribute10,
             attribute11,
             attribute12,
             attribute13,
             attribute14,
             attribute15,
             --primary_item_segments,
             --bom_reference_segments,
             --routing_reference_segments,
             --completion_locator_segments,
             --descriptive_flex_segments,
             project_id,
             --project_name,
             --project_number,
             --project_costed,
             task_id,
             --task_name,
             --task_number,
             delivery_id,
             end_item_unit_number,
             overcompletion_tolerance_type,
             overcompletion_tolerance_value,
             kanban_card_id,
             priority,
             due_date,
             job_type,
             date_released,
             transaction_date,
             num_of_children
             --, NVL(infinite_schedule_flag, 'N')
    from     wsm_lot_job_interface
    where    group_id = p_group_id
    and      process_status = 2 -- WIP_CONSTANTS.RUNNING;
    order by organization_id,
             load_type,
             NVL(transaction_date, creation_date),
             priority,
             due_date;

cursor c_wljdi_jobs_no_parent is
    select  unique
            wip_entity_id,
            organization_id
    from    wsm_lot_job_dtl_interface
    where   process_status = WIP_CONSTANTS.RUNNING
    and     parent_header_id IS NULL
    and     group_id = p_group_id
    and     transaction_date <= sysdate+1
    order by organization_id;

-- ==============================================================================================
-- other variables
-- ==============================================================================================

-- control variables
prev_rowcount                   number := 0;
req_phase                       varchar2(2000);
req_status                      varchar2(2000);
req_devphase                    varchar2(2000);
req_devstatus                   varchar2(2000);
req_message                     varchar2(1000);
req_wait                        boolean;
conc_status                     boolean;

l_del_int_prof_value            number;
l_stmt_num                      number;
l_error_count                   number := 0;
l_warning_count                 number := 0;
l_atleast_one_row_in_mmtt       number := 0;
l_inv_worker_req_id             number := 0;
l_mmtt_txn_hdr_id               number;
l_txn_tmp_hdr_id                number;
l_return_value                  number := 0;
l_error_code                    number := 0;
l_error_msg                     varchar2(2000) := null;
l_aux_mesg                      varchar2(240)  := null;
l_skip_update_wo                number;
l_return_status                 varchar2(1);
l_num_records                   number := 0;
l_batch_grp_id                  number;
l_wsli_loaded                   boolean;
l_req_request_id                number;
l_temp_num                      number := 0;
l_temp_class                    varchar2(10);
l_temp_boolean                  boolean;
l_date_text                     varchar2(100);
l_xst                           boolean := true;
l_user                          number := fnd_global.user_id;
l_h                             number;         -- index for WLJI records
l_d                             number;         -- index for WLJDI records

dummy_number                    number;
dummy_varchar                   varchar2(3);
dummy_date                      date;
dummy_err_code                  number;
dummy_err_msg                   varchar2(2000);
dummy_segs                      varchar2(10000); -- dummy large varchar2

-- local variables
hash_str                        varchar2(100);
hash_value                      number;
l_rtg_seq_id                    number;
l_common_rtg_seq_id             number;
l_common_bom_seq_id             number;
l_default_compl_subinv          varchar2(10);
l_default_compl_loc_id          number;
l_sub_loc_control               number;
l_org_loc_control               number;
l_item_loc_control              number;
l_restrict_locators_code        number;
l_item_id                       number;
l_min_op_seq_num                number;
l_department_id                 number;
l_scrap_account_10              number;
l_est_scrap_abs_account_10      number;
l_rev_date                      date;
l_source_item_rev               varchar2(3);
--l_source_item_rev_date        date;           -- Del: bug 2963225
l_rev_control_code              number;         -- Add: bug 2963225
l_start_lot_revision            number;         -- Add: bug 2963225
l_locator_id                    number;
l_job_type                      number;
l_kanban_size                   number;
l_qoh                           number;
l_att                           number;
l_atr                           number;
l_component_yield_factor        number;
l_component_quantity            number;
l_required_qpa                  number;
l_quantity_tobe_issued          number;
l_start_op_seq_id               number;
l_start_op_seq_num              number;
l_txnexist                      number;
l_qntydiff                      number;
l_mtl_locator_type              number;
l_osp_op_seq_num                number;
l_est_scrap_account             number;
l_est_scrap_var_account         number;
l_src_lot_number                wsm_starting_lots_interface.lot_number%type;
l_src_inv_item_id               NUMBER;
l_scheduling_mode               NUMBER; -- ADD BUG 3479666

l_job_type_code                 varchar2(30);
l_assembly_name                 varchar2(40);
l_org_code                      varchar2(3);
l_meaning                       varchar2(240);

-------------------------------------------------------------------
-- Attention: all these l_cur_% variables are used to store current
-- values of a job for UPDATE, please do not change their values !!
-------------------------------------------------------------------
l_cur_coprod_supply             number;
l_cur_schd_start_date           date;
l_cur_schd_compl_date           date;
l_cur_primary_item_id           number;
l_cur_class_code                varchar2(10);
l_cur_start_date                date;
l_cur_complete_date             date;
l_cur_start_qty                 number;
l_cur_net_qty                   number;
l_cur_bom_revision              varchar2(3);
l_cur_rtg_revision              varchar2(3);
l_cur_status_type               number:=0;
l_cur_firm_planned_flag         number;
l_cur_job_type                  number;
l_cur_date_released             date;
l_cur_bom_ref_id                number;
l_cur_alt_bom                   varchar2(10);
l_cur_rtg_ref_id                number;
l_cur_alt_rtg                   varchar2(10);
l_cur_bom_rev_date              date;
l_cur_rtg_rev_date              date;
l_cur_com_rtg_seq_id            number;
l_cur_com_bom_seq_id            number;
l_cur_wip_supply_type           number;
l_cur_compl_subinv              varchar2(10);
l_cur_compl_locator             number;
l_cur_kanban_card_id            number;
l_cur_schedule_group_id         number;
l_cur_build_sequence            number;
l_cur_line_id                   number;

l_chg_bom_alt                   number;
l_chg_rtg_alt                   number;
l_chg_alt_flag                  number;
l_chg_bom_ref                   number;
l_chg_rtg_ref                   number;
l_chg_ref_flag                  number;
l_chg_rtg_rev                   number;     -- Add: bug3202534
l_chg_bom_rev                   number;     -- Add: bug3202534
l_chg_rev_flag                  number;     -- Add: bug3202534
l_inf_sche_flag                 varchar2(1);
--Bug 5112899: added follwoing columns
l_basis_type                    NUMBER;
l_include_yield                 NUMBER;
l_bill_req_qpa                  NUMBER;
l_mo_org_id                     NUMBER;                                   -- Add: bug5485653
l_ou_id                         NUMBER;                                   -- Add: bug5485653
l_org_acct_ctxt                 VARCHAR2(30):= 'Accounting Information';  -- Add: bug5485653

l_wip_entity_name               varchar2(80); -- Add: bug 5242298
l_dummy_job_name		varchar2(80); -- Add: bug 5242298

/*  ADDED FOLLOWING VARIABLES FOR 12.1 SUBSTITUTE COMPONENT PROJECT ****************************************************
**********************************************************************************************************************/

l_is_src_lot_sub               NUMBER := 0;
l_primary_comp_item_id         NUMBER := 0;
l_sub_comp_bill_qpa            NUMBER := 0;
l_sub_comp_qpa                 NUMBER := 0;
l_segment1                     VARCHAR2(100);
l_segment2                     VARCHAR2(100);
l_segment3                     VARCHAR2(100);
l_segment4                     VARCHAR2(100);
l_segment5                     VARCHAR2(100);
l_segment6                     VARCHAR2(100);
l_segment7                     VARCHAR2(100);
l_segment8                     VARCHAR2(100);
l_segment9                     VARCHAR2(100);
l_segment10                    VARCHAR2(100);
l_segment11                    VARCHAR2(100);
l_segment12                    VARCHAR2(100);
l_segment13                    VARCHAR2(100);
l_segment14                    VARCHAR2(100);
l_segment15                    VARCHAR2(100);
l_segment16                    VARCHAR2(100);
l_segment17                    VARCHAR2(100);
l_segment18                    VARCHAR2(100);
l_segment19                    VARCHAR2(100);
l_segment20                    VARCHAR2(100);



/* END OF VARIABLES ADDED FOR 12.1 SUBSTITUTE COMPONENT PROJECT **********************************************************
***************************************************************************************************************************/
-- defined exceptions
e_invalid_id                    exception;
e_invalid_job_name              exception;
e_abort_request                 exception;
e_build_job                     exception;
e_update_job                    exception;
e_invalid_qty                   exception;


BEGIN   -- for launch_worker

    retcode := 0;       -- bugfix 2845397: set the code to 0 (success)

    SAVEPOINT savepoint_top;

-- ==============================================================================================
-- Bulk fetching data into PL/SQL tables for ease of validation
-- ==============================================================================================

    begin
l_stmt_num := 10;
        WSMPLCVA.load_org_table;

l_stmt_num := 20;
        WSMPLCVA.load_subinventory;

l_stmt_num := 30;
        WSMPLCVA.load_class_code;
        if lbji_debug = 'Y' then
            fnd_file.put_line(fnd_file.log,
                'Loading org/subinv/class-code values into memory (once per worker).. OK.');
        end if;
    exception
        when others then
            raise e_abort_request;
    end;


l_stmt_num := 40;
    open csr_wlji;
    LOOP  -- {{{ outer loop

        l_wsli_loaded := false; --i.e. run the load wsli routine for every batch

-- ==============================================================================================
-- Bulk fetching data from wlji to PL/SQL tables
-- ==============================================================================================

        fetch csr_wlji bulk collect into
            v_wlji_err_code,
            v_wlji_err_msg,
            --v_wlji_error,
            v_wlji_last_updt_date,
            v_wlji_request_id,
            v_wlji_program_id,
            v_wlji_program_appl_id,
            v_wlji_last_updt_by,
            v_wlji_creation_date,
            v_wlji_created_by,
            v_wlji_last_updt_login,
            v_wlji_prog_updt_date,
            v_wlji_last_updt_by_name,
            v_wlji_created_by_name,
            v_wlji_org_id,
            v_wlji_org_code,
            v_wlji_wip_entity_id,
            v_wlji_job_name,
            v_wlji_lot_number,
            v_wlji_item_id,
            v_wlji_header_id,
            v_wlji_process_status,
            --v_wlji_process_phase,
            v_wlji_rtg_ref_id,
            v_wlji_compl_subinv,
            v_wlji_compl_loc_id,
            v_wlji_mode_flag,
            v_wlji_group_id,
            v_wlji_load_type,
            v_wlji_status_type,
            --v_wlji_old_start_quantity,
            --v_wlji_old_completion_date,
            v_wlji_bom_ref_id,
            v_wlji_bom_rev_date,
            v_wlji_rtg_rev_date,
            v_wlji_wip_supply_type,
            v_wlji_class_code,
            v_wlji_description,
            v_wlji_firm_planned_flag,
            v_wlji_alt_rtg,
            v_wlji_alt_bom,
            v_wlji_demand_class,
            v_wlji_start_quantity,
            v_wlji_fusd,
            --v_wlji_fucd,
            --v_wlji_lusd,
            v_wlji_lucd,
            v_wlji_scheduling_method,
            v_wlji_rtg_revision,
            v_wlji_bom_revision,
            v_wlji_schedule_group_id,
            v_wlji_schedule_group_name,
            v_wlji_build_sequence,
            v_wlji_net_quantity,
            v_wlji_allow_explosion,
            --v_wlji_old_status_type,
            --v_wlji_interface_id,
            v_wlji_coproducts_supply,
            v_wlji_source_code,
            v_wlji_src_line_id,
            v_wlji_process_type,
            --v_wlji_processing_work_days,
            --v_wlji_daily_production_rate,
            v_wlji_line_id,
            --v_wlji_line_code,
            --v_wlji_lot_control_code,
            --v_wlji_repetitive_schedule_id,
            --v_wlji_parent_group_id,
            v_wlji_attribute_category,
            v_wlji_attribute1,
            v_wlji_attribute2,
            v_wlji_attribute3,
            v_wlji_attribute4,
            v_wlji_attribute5,
            v_wlji_attribute6,
            v_wlji_attribute7,
            v_wlji_attribute8,
            v_wlji_attribute9,
            v_wlji_attribute10,
            v_wlji_attribute11,
            v_wlji_attribute12,
            v_wlji_attribute13,
            v_wlji_attribute14,
            v_wlji_attribute15,
            --v_wlji_primary_item_segs,
            --v_wlji_bom_ref_segs,
            --v_wlji_rtg_ref_segs,
            --v_wlji_compl_loc_segs,
            --v_wlji_desc_flx_segs,
            v_wlji_project_id,
            --v_wlji_project_name,
            --v_wlji_project_number,
            --v_wlji_project_costed,
            v_wlji_task_id,
            --v_wlji_task_name,
            --v_wlji_task_number,
            v_wlji_delivery_id,
            v_wlji_end_item_unit_number,
            v_wlji_overcompl_tol_type,
            v_wlji_overcompl_tol_value,
            v_wlji_kanban_card_id,
            v_wlji_priority,
            v_wlji_due_date,
            v_wlji_job_type,
            v_wlji_date_released,   --bugfix 2697295
            v_wlji_transaction_date,
            v_wlji_num_of_children
            --, v_wlji_inf_schedule_flag
        limit g_batch_size;
        if lbji_debug = 'Y' then
            fnd_file.put_line(fnd_file.log,
                'Number of rows loaded for the current batch: '||csr_wlji%rowcount);
        end if;

        if csr_wlji%rowcount - prev_rowcount <> 0 then  -- {{ one batch
l_stmt_num := 50;
            -- getting the header_id to be populated for mmtt
            select mtl_material_transactions_s.nextval
            into   l_mmtt_txn_hdr_id
            from   dual;

l_stmt_num := 60;
            -- updating the group_id column of wlji with a number unique for this particular batch.
            -- This'll help when I select corresponding rows from wsli.

            select wsm_lot_job_interface_s.NEXTVAL
            into   l_batch_grp_id
            from   dual;

l_stmt_num := 60.1;
            forall indx in v_wlji_header_id.first..v_wlji_header_id.last
            update wsm_lot_job_interface
            set    group_id = l_batch_grp_id
            where  header_id = v_wlji_header_id(indx);

l_stmt_num := 60.2;
            l_h := v_wlji_header_id.first;
            WHILE l_h <= v_wlji_header_id.last
            LOOP
                if(v_wlji_num_of_children(l_h) > 0) then
                    update wsm_lot_job_dtl_interface
                    set     group_id                = l_batch_grp_id
                    where   parent_header_id = v_wlji_header_id(l_h);
                end if;
                l_h := v_wlji_header_id.next(l_h);
            END LOOP;


-- ==============================================================================================
-- BEGIN: Processing of data {{{
-- ==============================================================================================
l_stmt_num := 70;
            v_idx := v_wlji_header_id.first;
            while v_idx <= v_wlji_header_id.last
            loop  -- {{{ inner loop
                if lbji_debug = 'Y' then
                    fnd_file.put_line(fnd_file.log,'------------------------------------------------------');
                    fnd_file.put_line(fnd_file.log,' wlji.header_id: '|| v_wlji_header_id(v_idx));
                    fnd_file.put_line(fnd_file.log,' wlji.job name: ' || v_wlji_job_name(v_idx));
                    fnd_file.put_line(fnd_file.log,'------------------------------------------------------');
                end if;

                SAVEPOINT savepoint_skip_job;

                BEGIN  -- {{{ main block

                    l_rtg_seq_id := '';
                    l_common_bom_seq_id := 0;
                    l_common_rtg_seq_id := 0;
                    l_error_code := 0;
                    l_return_value := 0;
                    l_error_msg:= NULL;
                    l_aux_mesg:= NULL;
                    l_return_status := FND_API.G_RET_STS_SUCCESS;
                    l_temp_num:= 0;
                    l_xst:= true;
                    hash_str := '';
                    hash_value := 0;
                    l_num_records:= 0;

                    l_default_compl_subinv := '';
                    l_default_compl_loc_id := 0;
                    l_sub_loc_control := 0;
                    l_org_loc_control := 0;
                    l_item_loc_control := 0;
                    l_restrict_locators_code := 0;
                    l_item_id := 0;
                    l_locator_id := 0;
                    l_rev_date := '';
                    l_date_text := '';
                    l_component_quantity := 0;
                    l_qoh := 0;
                    l_att := 0;
                    l_atr := 0;
                    l_component_yield_factor := 0;
                    l_required_qpa := 0;
                    l_quantity_tobe_issued := 0;
                    l_start_op_seq_id := 0;
                    l_start_op_seq_num := 0;
                    l_department_id := 0;
                    l_skip_update_wo:=0;
                    l_est_scrap_account     := NULL;
                    l_est_scrap_var_account := NULL;
                    l_src_lot_number        := NULL;
                    l_src_inv_item_id       := NULL;

                    dummy_number:=0;
                    dummy_varchar:='';
                    dummy_date:=sysdate;
                    dummy_err_code := 0;
                    dummy_err_msg := NULL;
                    dummy_segs := '';

                    l_chg_bom_ref  := 0;
                    l_chg_rtg_ref  := 0;
                    l_chg_ref_flag := 0;

                    l_chg_bom_alt  := 0;
                    l_chg_rtg_alt  := 0;
                    l_chg_alt_flag := 0;

                    l_chg_rtg_rev  := 0;    -- Add: bug3202534
                    l_chg_bom_rev  := 0;    -- Add: bug3202534
                    l_chg_rev_flag := 0;    -- Add: bug3202534

                    g_charges_exist_all  := false;      -- ADD: bug 3423195
                    g_charges_exist_shopfloor := false; -- ADD: bug 3423195
                    g_job_released_date  := null;       -- ADD: bug 3423195

                    v_wlji_err_code(v_idx)               := l_error_code;
                    v_wlji_err_msg(v_idx)                := l_error_msg;
                    v_wlji_request_id(v_idx)             := fnd_global.conc_request_id;
                    v_wlji_program_id(v_idx)             := fnd_global.conc_program_id;
                    v_wlji_program_appl_id(v_idx)        := fnd_global.prog_appl_id;
                    v_wlji_creation_date(v_idx)          := sysdate;
                    v_wlji_last_updt_login(v_idx)        := fnd_global.login_id;
                    v_wlji_last_updt_date(v_idx)         := sysdate;
                    v_wlji_prog_updt_date(v_idx)         := sysdate;

                    l_mo_org_id                          := v_wlji_org_id(v_idx); -- Add: bug5485653
                    ------------------------------------------------------------------
                    -- {{{ Begin: Validate and Default constants (load_type = 5 and 6)
                    ------------------------------------------------------------------
l_stmt_num := 80;
                    if (v_wlji_load_type(v_idx) <> 5) AND (v_wlji_load_type(v_idx) <> 6) then
                        l_aux_mesg := 'Load Type must be either 5 or 6';
                        handle_invalid_field('LOAD TYPE', l_aux_mesg, l_stmt_num);
                        l_error_code := -1;
                        GOTO skip_validate_constants;
                    end if;

l_stmt_num := 85;
                    -- Dafault: job_type = 3 is non-standard job. Anything else/null => standard job
                    if (v_wlji_job_type(v_idx) is null) or (v_wlji_job_type(v_idx) <> 3) then
                        v_wlji_job_type(v_idx) := 1;
                    end if;

l_stmt_num := 95;
                    -- Validate: mode_flag cannot be 2 for non-standard jobs, can only be 1
                    if v_wlji_job_type(v_idx) = 3 then
                        if v_wlji_mode_flag(v_idx) = 2 then
                            l_aux_mesg := 'Mode Flag cannot be 2 for non-standard jobs';
                            handle_invalid_field('MODE FlAG', l_aux_mesg, l_stmt_num);
                            l_error_code := -1;
                            GOTO skip_validate_constants;
                        else
                            v_wlji_mode_flag(v_idx) := 1;
                        end if;
                    end if;

l_stmt_num := 100;
                    -- Validate: SCHEDULING METHOD
                    if(v_wlji_scheduling_method(v_idx) NOT IN (1, 2, 3) ) then
                        l_aux_mesg := 'Scheduling method must be 1(routing), 2(leadtime) or 3(manual)';
                        handle_invalid_field('SCHEDULING METHOD', l_aux_mesg, l_stmt_num);
                        l_error_code := -1;
                        GOTO skip_validate_constants;
                    end if;

l_stmt_num := 105;
                    -- Validate: ALLOW EXPLOSION
                    if UPPER(v_wlji_allow_explosion(v_idx)) = 'N' then
                        handle_errmsg_name('WSM', 'WSM_ALLOW_EXPL_Y', l_stmt_num);
                        l_error_code := -1;
                        GOTO skip_validate_constants;
                    else
                        v_wlji_allow_explosion(v_idx) := 'Y';
            end if;

l_stmt_num := 110;
                    -- Validate: WIP SUPPLY TYPE
                    if v_wlji_wip_supply_type(v_idx) is null then
                        v_wlji_wip_supply_type(v_idx) := 7;
                    elsif v_wlji_wip_supply_type(v_idx) not in (1,2,3,4,5,7) then
                        l_aux_mesg := '';
                        handle_invalid_field('Wip Supply Type', l_aux_mesg, l_stmt_num);
                        l_error_code := -1;
                        GOTO skip_validate_constants;
                    end if;

l_stmt_num := 115;
                    -- Validate: STATUS TYPE
                    if v_wlji_status_type(v_idx) not in (
                        WIP_CONSTANTS.UNRELEASED,
                        WIP_CONSTANTS.RELEASED,
                        WIP_CONSTANTS.HOLD,
                        WIP_CONSTANTS.CANCELLED
                    ) then
                        l_aux_mesg := '';
                        handle_invalid_field('STATUS TYPE', l_aux_mesg, l_stmt_num);
                        l_error_code := -1;
                        GOTO skip_validate_constants;
                    end if;

l_stmt_num := 120;
                    -- Validate: check kanban card id support status
                    if WSMPVERS.get_osfm_release_version < '110509'
                       and v_wlji_kanban_card_id(v_idx) is not null then
                        handle_errmsg_name('WSM', 'WSM_KANBAN_NOT ALLOWED', l_stmt_num);
                        l_error_code := -1;
                        GOTO skip_validate_constants;
                    end if;

<< skip_validate_constants >>

                    if l_error_code <> 0 then
                        l_error_count := l_error_count + 1;
                        GOTO abort_this_job;
                    end if;
                    if lbji_debug = 'Y' then
                        fnd_file.put_line(fnd_file.log, 'Validating Constants.. OK.');
                    end if;
                    ----------------------------------------------------------------
                    -- }}} End: Validate and Default constants (load_type = 5 and 6)
                    ----------------------------------------------------------------


l_stmt_num := 130;
                    ---------------------------------------------------------
                    -- Validate organization id  Mngr has done the validation
                    ---------------------------------------------------------
                    --validate_org_id_name (
                    --  v_wlji_org_id(v_idx),
                    --  v_wlji_org_code(v_idx),
                    --  l_err_code,
                    --  l_err_msg);
                    --if l_err_code = -1 then
                    --  handle_invalid_field('Organization Id', '', l_stmt_num);
                    --  l_error_count := l_error_count + 1;
                    --  GOTO abort_this_job;
                    --end if;
                    --if lbji_debug = 'Y' then
                    --  fnd_file.put_line(fnd_file.log, 'Check Organization Id.. OK');
                    --end if;

l_stmt_num := 130.5;
                    select nvl(OP_SEQ_NUM_INCREMENT, 10)
                    into   g_op_seq_incr
                    from   wsm_parameters
                    where  ORGANIZATION_ID = v_wlji_org_id(v_idx);

l_stmt_num := 140;
                    --------------------------------------
                    -- {{{ Begin: Validate job name and id
                    --------------------------------------
                    Begin
                        l_temp_num := 0;
                        if v_wlji_load_type(v_idx) = 5 then   -- Job creation
                            NULL;       -- Mngr has done the validation
                        elsif v_wlji_load_type(v_idx) = 6 then    -- Job update

                            if (v_wlji_wip_entity_id(v_idx) is null) then
                                begin
l_stmt_num := 140.1;
                                    -- Get wip_entity_id by wip_entity_name
                                    select wip_entity_id
                                    into   v_wlji_wip_entity_id(v_idx)
                                    from   wip_entities
                                    where  wip_entity_name = v_wlji_job_name(v_idx)
                                    and    organization_id = v_wlji_org_id(v_idx);
                                exception
                                    when others then
                                        raise e_invalid_job_name;
                                end;
                            end if;

                            -- Now wip_entity_id is available, check job status
                            begin
l_stmt_num := 140.2;
                            -- For unreleased jobs allow job name update if wip_entity_id is not null - fix for bug5990761
                              select decode(wdj.status_type, WIP_CONSTANTS.UNRELEASED, NVL(v_wlji_job_name(v_idx),we.wip_entity_name), we.wip_entity_name)
                                into   v_wlji_job_name(v_idx)
                                from   wip_discrete_jobs wdj,
                                       wip_entities we
                                where  wdj.wip_entity_id = v_wlji_wip_entity_id(v_idx)
                                and    wdj.status_type in (
                                        WIP_CONSTANTS.UNRELEASED,
                                        WIP_CONSTANTS.RELEASED,
                                        WIP_CONSTANTS.HOLD,
                                        WIP_CONSTANTS.CANCELLED)
                                and    wdj.wip_entity_id = we.wip_entity_id
                                and    we.organization_id = v_wlji_org_id(v_idx);
                            exception
                                when others then
                                    raise e_invalid_id;
                            end;
                        end if;

                    Exception
                        when e_invalid_id then
                            l_aux_mesg := '';
                            handle_invalid_field('Wip_Entity_Id', l_aux_mesg, l_stmt_num);
                            l_error_code := -1;
                            GOTO skip_job_id_valid;

                        when e_invalid_job_name then
                            l_aux_mesg := '';
                            handle_invalid_field('Job_Name', l_aux_mesg, l_stmt_num);
                            l_error_code := -1;
                            GOTO skip_job_id_valid;
                    End;

l_stmt_num := 140.3;
                    -- removed for performance improvement
                    --l_return_value := wsmputil.CHECK_WMTI(   -- CZH.I
                    --            p_wip_entity_id    => null,
                    --            p_wip_entity_name  => v_wlji_job_name(v_idx),
                    --            p_transaction_date => null,
                    --            x_err_code         => l_error_code,
                    --            x_err_msg          => l_error_msg,
                    --            p_organization_id  => v_wlji_org_id(v_idx) );
                    --IF (l_return_value <> 0) THEN
                    --    handle_errmsg_name('WSM', 'WSM_PENDING_MOVE_TXNS', l_stmt_num);
                    --    l_error_code := -1;
                    --    GOTO skip_job_id_valid;
                    --END IF;

l_stmt_num := 140.4;
                    -- bug 3453139 removed for this is no longer required
                    --l_return_value
                    --    := wsmputil.CHECK_WSMT(   -- CZH.I
                    --            p_wip_entity_id    => null,
                    --            p_wip_entity_name  => v_wlji_job_name(v_idx),
                    --            p_transaction_id   => null,
                    --            p_transaction_date => null,
                    --            x_err_code         => l_error_code,
                    --            x_err_msg          => l_error_msg,
                    --            p_organization_id  => v_wlji_org_id(v_idx) );
                    --IF (l_return_value <> 0) THEN
                    --    FND_MESSAGE.SET_NAME('WSM', 'WSM_PENDING_TXN');
                    --    fnd_message.set_token('TABLE', 'WSM_SPLIT_MERGE_TRANSACTIONS');
                    --    l_error_msg := fnd_message.get;
                    --    l_error_code := -1;
                    --    handle_error( l_error_code, l_error_msg, l_stmt_num);
                    --    GOTO skip_job_id_valid;
                    --ELSE
                    --    l_error_msg := null;
                    --END IF;

<< skip_job_id_valid >>

                    if l_error_code <> 0 then
                        l_error_count := l_error_count + 1;
                        GOTO abort_this_job;
                    end if;
                    if lbji_debug = 'Y' then
                        fnd_file.put_line(fnd_file.log, 'Validate Job Name and Id.. OK.');
                    end if;
                    -------------------------------------
                    -- }}} End: Validate job name and id
                    -------------------------------------


l_stmt_num := 150;
                    ---------------------------
                    --  Validate Start quantity
                    ---------------------------
                    if v_wlji_start_quantity(v_idx) < 0 then
                        l_error_code := -1;
                        l_aux_mesg := 'Start Quantity cannot be negative';
                        handle_invalid_field('Start_Quantity', l_aux_mesg, l_stmt_num);
                        l_error_count := l_error_count + 1;
                        GOTO abort_this_job;
                    end if;

                    if v_wlji_load_type(v_idx) = 5 and
                       (v_wlji_start_quantity(v_idx) is NULL or
                        v_wlji_start_quantity(v_idx) = 0)
                    then
                        l_error_code := -1;
                        l_aux_mesg := 'Start Quantity cannot be NULL or 0 for job creation';
                        handle_invalid_field( 'Start_Quantity', l_aux_mesg, l_stmt_num);
                        l_error_count := l_error_count + 1;
                        GOTO abort_this_job;
                    end if;
                    if lbji_debug = 'Y' and v_wlji_mode_flag(v_idx) = 1 then
                        fnd_file.put_line(fnd_file.log, 'Validate Start Quantity.. OK.');
                    end if;


l_stmt_num := 160;
                    -------------------------------------------------
                    -- For job update, save the current values in WDJ
                    -------------------------------------------------
                    if v_wlji_load_type(v_idx) = 6 then
                        select  primary_item_id,
                                class_code,
                                scheduled_start_date,
                                scheduled_completion_date,
                                start_quantity,
                                net_quantity,
                                status_type,
                                firm_planned_flag,
                                job_type,
                                bom_reference_id,
                                alternate_bom_designator,
                                routing_reference_id,
                                alternate_routing_designator,
                                bom_revision_date,
                                routing_revision_date,
                                bom_revision,
                                routing_revision,
                                common_routing_sequence_id,
                                common_bom_sequence_id,
                                wip_supply_type,
                                scheduled_start_date,
                                scheduled_completion_date,
                                coproducts_supply,
                                kanban_card_id,
                                completion_subinventory,
                                completion_locator_id,
                                date_released,
                                schedule_group_id,
                                build_sequence,
                                line_id
                        into    l_cur_primary_item_id,
                                l_cur_class_code,
                                l_cur_start_date,
                                l_cur_complete_date,
                                l_cur_start_qty,
                                l_cur_net_qty,
                                l_cur_status_type,
                                l_cur_firm_planned_flag,
                                l_cur_job_type,
                                l_cur_bom_ref_id,
                                l_cur_alt_bom,
                                l_cur_rtg_ref_id,
                                l_cur_alt_rtg,
                                l_cur_bom_rev_date,
                                l_cur_rtg_rev_date,
                                l_cur_bom_revision,
                                l_cur_rtg_revision,
                                l_cur_com_rtg_seq_id,
                                l_cur_com_bom_seq_id,
                                l_cur_wip_supply_type,
                                l_cur_schd_start_date,
                                l_cur_schd_compl_date,
                                l_cur_coprod_supply,
                                l_cur_kanban_card_id,
                                l_cur_compl_subinv,
                                l_cur_compl_locator,
                                l_cur_date_released,
                                l_cur_schedule_group_id,
                                l_cur_build_sequence,
                                l_cur_line_id
                        from    wip_discrete_jobs
                        where   wip_entity_id = v_wlji_wip_entity_id(v_idx)
                        and     organization_id = v_wlji_org_id(v_idx);

                        -- BA: bug 3423195
                        g_job_released_date := l_cur_date_released;
                        g_charges_exist_all := discrete_charges_exist(
                                        v_wlji_wip_entity_id(v_idx),
                                        v_wlji_org_id(v_idx),0);
                        g_charges_exist_shopfloor := discrete_charges_exist(
                                        v_wlji_wip_entity_id(v_idx),
                                        v_wlji_org_id(v_idx),1);
                        -- EA: bug 3423195

                        -- Currently changing job_type, wip_supply_type and
                        -- v_wlji_kanban_card_id is not supported
                        v_wlji_job_type(v_idx)        := l_cur_job_type;
                        v_wlji_wip_supply_type(v_idx) := l_cur_wip_supply_type;
                        v_wlji_kanban_card_id(v_idx)  := l_cur_kanban_card_id;

						-- Added for bug fix 5291888
						if l_cur_primary_item_id <> nvl(v_wlji_item_id(v_idx),l_cur_primary_item_id) then
							l_error_code := -1;
                            handle_invalid_field( 'PRIMARY_ITEM_ID', l_aux_mesg, l_stmt_num);
                            l_error_count := l_error_count + 1;
                            GOTO abort_this_job;
						end if;
                        -- For std job, assembly cannot be changed
                        if(l_cur_job_type = 1) then
                            v_wlji_item_id(v_idx) := l_cur_primary_item_id;
                        end if;
                    end if;


l_stmt_num := 170;
                    ---------------------------------------------------------
                    -- {{{ Begin: Validate schedule group and build sequence
                    ---------------------------------------------------------
                    if v_wlji_job_type(v_idx) = 1 then

                 -- Start Bug Fix : 6676148
                 -- Default schedule_group_id from schedule_group_name
                        if v_wlji_schedule_group_name(v_idx) is not null and
                         v_wlji_schedule_group_id(v_idx) is null then
                              begin
                                select schedule_group_id
                                into v_wlji_schedule_group_id(v_idx)
                                from wip_schedule_groups_val_v
                                where organization_id = v_wlji_org_id(v_idx)
                                and schedule_group_name =v_wlji_schedule_group_name(v_idx);
                              exception
                                when others then
                                   l_error_code := -1;
                                   handle_errmsg_name('WIP', 'WIP_ML_SCHEDULE_GROUP', l_stmt_num);
                                   l_error_count := l_error_count + 1;
                                   GOTO abort_this_job;
                              end;
                        end if;
                        -- End Bug Fix : 6676148

                        -- {{ validate schedule_group_id begin
                        if v_wlji_load_type(v_idx) = 6 then
                            v_wlji_schedule_group_id(v_idx)
                                := NVL(v_wlji_schedule_group_id(v_idx), l_cur_schedule_group_id);
                        end if;

                        if (v_wlji_source_code(v_idx) = 'WICDOL' and
                            v_wlji_schedule_group_name(v_idx) IS NULL and
                            v_wlji_schedule_group_id(v_idx) IS NULL)
                        then
l_stmt_num := 170.1;
                            insert into wip_schedule_groups (
                                    schedule_group_id,
                                    schedule_group_name,
                                    organization_id,
                                    description,
                                    created_by,
                                    last_updated_by,
                                    creation_date,
                                    last_update_date)
                            select  wip_schedule_groups_s.nextval,
                                    wds.name,
                                    v_wlji_org_id(v_idx),
                                    to_char(sysdate),
                                    l_user,
                                    l_user,
                                    sysdate,
                                    sysdate
                            from    wsh_new_deliveries wds
                            where   wds.delivery_id = v_wlji_delivery_id(v_idx)
                            and     not exists  (
                                        select  1
                                        from    wip_schedule_groups wsg
                                        where   wsg.organization_id = v_wlji_org_id(v_idx)
                                        and     wsg.schedule_group_name = wds.name);
l_stmt_num := 170.2;
                            select wsg.schedule_group_name,
                                   wsg.schedule_group_id
                            into   v_wlji_schedule_group_name(v_idx),
                                   v_wlji_schedule_group_id(v_idx)
                            from   wip_schedule_groups wsg,
                                   wsh_new_deliveries  wds
                            where  wds.delivery_id = v_wlji_delivery_id(v_idx)
                            and    wsg.schedule_group_name = wds.name
                            and    wsg.organization_id = v_wlji_org_id(v_idx);
                        end if;

                        -- Start Bug Fix : 6676148
               if (v_wlji_schedule_group_id(v_idx) is not NULL and
                            v_wlji_schedule_group_id(v_idx) <> fnd_api.g_miss_num) then
l_stmt_num := 170.3;
                            begin
                                select 1
                                into   l_temp_num
                                from   wip_schedule_groups_val_v wsg
                                where  wsg.schedule_group_id = v_wlji_schedule_group_id(v_idx)
                                and    wsg.organization_id = v_wlji_org_id(v_idx);
                            exception
                                when too_many_rows then
                                    l_temp_num := 1;
                                when no_data_found then
                                    l_temp_num := 0;
                            end;
                            if l_temp_num = 0 then
                                l_error_code := -1;
                                handle_errmsg_name('WIP', 'WIP_ML_SCHEDULE_GROUP', l_stmt_num);
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            end if;
                        end if;
                        if lbji_debug = 'Y' then
                            fnd_file.put_line(fnd_file.log, 'Schedule Group Id Verification.. OK');
                        end if;
                        -- }} validate schedule_group_id end

l_stmt_num := 170.4;
                        -- {{ validate build_seq_id begin
                        if v_wlji_load_type(v_idx) = 6 then
                            v_wlji_build_sequence(v_idx)
                                := NVL(v_wlji_build_sequence(v_idx), l_cur_build_sequence);
                            v_wlji_line_id(v_idx)
                                := NVL(v_wlji_line_id(v_idx), l_cur_line_id);
                            v_wlji_schedule_group_id(v_idx)
                                := NVL(v_wlji_schedule_group_id(v_idx), l_cur_schedule_group_id);
                        end if;

                        -- Only if v_wlji_build_sequence(v_idx) is not null, we want to execute
                        -- this WIP_VALIDATE function. Otherwise, DO NOT.
                        if v_wlji_build_sequence(v_idx) is not null and
                           v_wlji_build_sequence(v_idx) <> 0 Then
                            l_temp_boolean := WIP_Validate.build_sequence (
                                    p_build_sequence    => v_wlji_build_sequence(v_idx),
                                    p_wip_entity_id     => v_wlji_wip_entity_id(v_idx),
                                    p_organization_id   => v_wlji_org_id(v_idx),
                                    p_line_id           => v_wlji_line_id(v_idx),
                                    p_schedule_group_id => v_wlji_schedule_group_id(v_idx));

                            if NOT l_temp_boolean Then
                                l_error_code := -1;
                                handle_errmsg_name('WIP', 'WIP_ML_BUILD_SEQUENCE', l_stmt_num);
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            end if;
                        end if;
                        if lbji_debug = 'Y' then
                            fnd_file.put_line(fnd_file.log, 'Build Seq. Id Verification.. OK');
                        end if;
                        -- }} validate build_seq_id end
                    else -- job type = 3
                        -- previously we do not have validations for non-std job
                        v_wlji_build_sequence(v_idx)    := null;
                        v_wlji_line_id(v_idx)           := null;
                         -- Start Bug Fix : 6676148
                        --v_wlji_schedule_group_id(v_idx) := null;
                        -- Default schedule_group_id from schedule_group_name

                         if v_wlji_schedule_group_name(v_idx) is not null and
                            v_wlji_schedule_group_id(v_idx) is null then

                             begin

                             select schedule_group_id
                             into v_wlji_schedule_group_id(v_idx)
                             from wip_schedule_groups_val_v
                             where organization_id = v_wlji_org_id(v_idx)
                             and schedule_group_name =v_wlji_schedule_group_name(v_idx);

                             exception
                                when others then
                                   l_error_code := -1;
                                   handle_errmsg_name('WIP', 'WIP_ML_SCHEDULE_GROUP', l_stmt_num);
                                   l_error_count := l_error_count + 1;
                                   GOTO abort_this_job;
                         end;

                         end if;

                        -- {{ validate schedule_group_id begin
                        if v_wlji_load_type(v_idx) = 6 then
                            v_wlji_schedule_group_id(v_idx)
                                := NVL(v_wlji_schedule_group_id(v_idx), l_cur_schedule_group_id);
                        end if;

                        if (v_wlji_schedule_group_id(v_idx) is not NULL and
                            v_wlji_schedule_group_id(v_idx) <> fnd_api.g_miss_num) then
l_stmt_num := 170.5;
                            begin
                                select 1
                                into   l_temp_num
                                from   wip_schedule_groups_val_v wsg
                                where  wsg.schedule_group_id = v_wlji_schedule_group_id(v_idx)
                                and    wsg.organization_id = v_wlji_org_id(v_idx);
                            exception
                                when too_many_rows then
                                    l_temp_num := 1;
                                when no_data_found then
                                    l_temp_num := 0;
                            end;
                            if l_temp_num = 0 then
                                l_error_code := -1;
                                handle_errmsg_name('WIP', 'WIP_ML_SCHEDULE_GROUP', l_stmt_num);
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            end if;
                        end if;
                        if lbji_debug = 'Y' then
                            fnd_file.put_line(fnd_file.log, 'Schedule Group Id Verification.. OK');
                        end if;
                        -- }} validate schedule_group_id end
                        -- End Bug Fix : 6676148
                    end if; -- job type
                    ---------------------------------------------------------
                    -- }}} End: Validate schedule group and build sequence
                    ---------------------------------------------------------


-- ===========================================================================================
-- BEGIN: Job Creation Validations {{{
-- ===========================================================================================
                    if v_wlji_load_type(v_idx) = 5 then
                        -- for std lbj ignore v_wlji_bom_ref_id/v_wlji_rtg_ref_id
            if v_wlji_job_type(v_idx) = 1 then  -- added: bug 3862212
                            v_wlji_bom_ref_id(v_idx) := null;
                v_wlji_rtg_ref_id(v_idx) := null;
            end if;                             -- added: bug 3862212

l_stmt_num := 200;
                        -- Validate Mode: for job creation mode must be in (1, 2)
                        if v_wlji_mode_flag(v_idx) not in (1,2) then
                            l_aux_mesg := 'For job creation, Mode Flag should have value 1 or 2';
                            handle_invalid_field('MODE_FLAG', l_aux_mesg, l_stmt_num);
                            l_error_code := -1;
                            l_error_count := l_error_count + 1;
                            GOTO abort_this_job;
                        end if;

l_stmt_num := 210;
                        -- Default lot_number
                        v_wlji_lot_number(v_idx) := v_wlji_job_name(v_idx);
                        if lbji_debug = 'Y' then
                            fnd_file.put_line(fnd_file.log, 'Lot Number Defaulted as Job Name.');
                        end if;

l_stmt_num := 220;
                        -- Validate: FIRM_PLANNED_FLAG
                        if v_wlji_job_type(v_idx) = 1 then
                            if v_wlji_firm_planned_flag(v_idx) is null then
                                v_wlji_firm_planned_flag(v_idx) := 2;
                            elsif v_wlji_firm_planned_flag(v_idx) <> 1 and
                                  v_wlji_firm_planned_flag(v_idx) <> 2
                            then
                                l_aux_mesg := 'For job creation, Firm Planned Flag must be either 1 or 2';
                                handle_invalid_field('FIRM_PLANNED_FLAG', l_aux_mesg, l_stmt_num);
                                l_error_code := -1;
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            end if;
                        end if;


l_stmt_num := 230;
                        -- Check WLSMI
                        -- make sure that no one is trying to create a wip lot out of
                        -- an inventory lot by splitting/merging/etc.
                        l_num_records := 0;
                        begin
                            select  1
                            into    l_num_records
                            from    wsm_starting_lots_interface    wsli,
                                    wsm_lot_split_merges_interface wlsmi
                            where   wsli.lot_number = v_wlji_job_name(v_idx)
                            and     wsli.header_id = wlsmi.header_id
                            and     wlsmi.process_status in (1,2);
                        exception
                            when too_many_rows then
                                l_num_records := 1;
                            when no_data_found then
                                NULL;
                        end;
                        if l_num_records <> 0 then
                            l_error_code := -1;
                            handle_errmsg_name('WSM', 'WSM_LOT_EXISTS', l_stmt_num);
                            l_error_count := l_error_count + 1;
                            GOTO abort_this_job;
                        end if;
                        if lbji_debug = 'Y' then
                            fnd_file.put_line(fnd_file.log, 'Checking existance of inv lots of the same name.. OK');
                        end if;


                        -----------------------------------
                        -- {{{ Begin: Validate WHO columns
                        -----------------------------------
l_stmt_num := 240;
                        -- validate last_updt_by (job creation)
                        if v_wlji_last_updt_by(v_idx) is NULL then
                            v_wlji_last_updt_by(v_idx) := l_user;
                        else
                            l_num_records := 0;
                            l_xst := WSMPLCVA.v_user.exists(v_wlji_last_updt_by(v_idx));
                            if l_xst = false then
                                begin
                                    select 1
                                    into   l_num_records
                                    from   fnd_user
                                    where  user_id = v_wlji_last_updt_by(v_idx)
                                    and    sysdate between start_date and nvl(end_date,sysdate+1);
                                exception
                                    when too_many_rows then l_num_records := 1;
                                    when no_data_found then
                                        l_error_code := -1;
                                        l_aux_mesg := '';
                                        handle_invalid_field(
                                            'Last Updated By', l_aux_mesg, l_stmt_num);
                                end;
                            end if;

                            if l_xst = false AND l_num_records <> 0 then
                                WSMPLCVA.v_user(v_wlji_last_updt_by(v_idx))
                                    := v_wlji_last_updt_by(v_idx);
                            end if;

                            if l_error_code <> 0 then
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            end if;
                        end if;
                        if lbji_debug = 'Y' then
                            fnd_file.put_line(fnd_file.log, 'Last Updt By Validation.. OK.');
                        end if;

l_stmt_num := 245;
                        -- validate created_by (job creation)
                        if v_wlji_created_by(v_idx) is NULL then
                            v_wlji_created_by(v_idx) := l_user;
                        else
                            l_num_records := 0;
                            l_xst := WSMPLCVA.v_user.exists(v_wlji_created_by(v_idx));
                            if l_xst = false then
                                begin
                                    select 1
                                    into   l_num_records
                                    from   fnd_user
                                    where  user_id = v_wlji_created_by(v_idx)
                                    and    sysdate between start_date and nvl(end_date,sysdate+1);
                                exception
                                    when too_many_rows then l_num_records := 1;
                                    when no_data_found then
                                        l_error_code := -1;
                                        l_aux_mesg := '';
                                        handle_invalid_field(
                                            'Created By', l_aux_mesg, l_stmt_num);
                                end;
                            end if;

                            if l_xst = false AND l_num_records <> 0 then
                                WSMPLCVA.v_user(v_wlji_created_by(v_idx))
                                    := v_wlji_created_by(v_idx);
                            end if;

                            if l_error_code <> 0 then
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            end if;
                        end if;
                        if lbji_debug = 'Y' then
                            fnd_file.put_line(fnd_file.log, 'Created By Validation.. OK.');
                        end if;
                        --------------------------------
                        -- }}} End: Validate WHO columns
                        --------------------------------


                        if v_wlji_mode_flag(v_idx) = 2 then
l_stmt_num := 250;
                            -- Call load_wsli_data to load relevant rows from wsli into PL/SQL
                            -- tables for easy validation. This procedure will not be executed
                            -- if there's no mode_flag = 2 rec in wlji.
                            -- l_wsli_loaded (true/false) ensures that the procedure
                            -- is called only once per worker
                            if (l_wsli_loaded = false) then
                                if lbji_debug = 'Y' then
                                    fnd_file.put_line(fnd_file.log,
                                        'Loading wsli for batch group id: ' ||l_batch_grp_id||'..');
                                end if;

                                load_wsli_data(l_batch_grp_id);
                                l_wsli_loaded := true;
                            end if;

l_stmt_num := 260;
                            -- Check that there's a row in wsli for this mode 2 job
                            l_xst := true;
                            if v_wlji_src_line_id(v_idx) is NULL then
                                l_error_code := -1;
                                handle_errmsg_name('WSM', 'WSM_START_LOT_REQUIRED', l_stmt_num);
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            else
                                l_xst := v_wsli.exists(v_wlji_src_line_id(v_idx));
                                if l_xst = false then
                                    l_error_code := -1;
                                    handle_errmsg_name('WSM', 'WSM_START_LOT_REQUIRED', l_stmt_num);
                                    l_error_count := l_error_count + 1;
                                    GOTO abort_this_job;
                                end if;
                            end if;
                        end if;


l_stmt_num := 270;
                        -- {{ Validate schedule dates (creation)
                        -- this should be done after item_id is validated

                        l_error_msg := null;
                        IF v_wlji_fusd(v_idx) IS NOT NULL AND
                           v_wlji_lucd(v_idx) IS NOT NULL
                        THEN
l_stmt_num := 270.1;
                            if  v_wlji_fusd(v_idx) > v_wlji_lucd(v_idx) THEN
                                handle_errmsg_name('WSM', 'WSM_FUSD_GT_LUCD', l_stmt_num);
                                l_error_code := -1;
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            end if;
                        ELSIF v_wlji_fusd(v_idx) IS NULL AND
                              v_wlji_lucd(v_idx) IS NULL
                        THEN
l_stmt_num := 270.2;
                            handle_errmsg_name('WSM', 'WSM_DATES_NULL', l_stmt_num);
                            l_error_code := -1;
                            l_error_count := l_error_count + 1;
                            GOTO abort_this_job;
                        END IF;

                        if (v_wlji_scheduling_method(v_idx) = 1 ) then
                            -- Since infinite scheduler will be called, do not have to call
                            -- leadtime based scheduler
                            -- However, to default routing/bom revision date, v_wlji_fusd is
                            -- needed. We cannot call infinite scheduler if job-leve copy is
                            -- not available, but to create a job-level copy, routing/bom
                            -- revision is a must.
                            -- If v_wlji_scheduling_method = 1, v_wlji_fusd is NULL, the
                            -- routing/bom revision date will be default to SYSDATE
                            null;
                        else

                            IF v_wlji_fusd(v_idx) IS NOT NULL AND
                               v_wlji_lucd(v_idx) IS NULL THEN
    l_stmt_num := 270.3;
                                v_wlji_lucd(v_idx)
                                    := wsmputil.GET_SCHEDULED_DATE (
                                            v_wlji_org_id(v_idx),
                                            v_wlji_item_id(v_idx),
                                            'F',
                                            v_wlji_fusd(v_idx),
                                            l_error_code,
                                            l_error_msg,
                                            v_wlji_start_quantity(v_idx));     --Fixed bug # 2313574
                                if lbji_debug = 'Y' then
                                    fnd_file.put_line(fnd_file.log,
                                        'Getting complete date based on item lead time');
                                end if;
                            END IF;

                            IF v_wlji_fusd(v_idx) IS NULL AND
                               v_wlji_lucd(v_idx) IS NOT NULL THEN
    l_stmt_num := 270.4;
                                v_wlji_fusd(v_idx)
                                    := wsmputil.GET_SCHEDULED_DATE (
                                            v_wlji_org_id(v_idx),
                                            v_wlji_item_id(v_idx),
                                            'B',
                                            v_wlji_lucd(v_idx),
                                            l_error_code,
                                            l_error_msg,
                                            v_wlji_start_quantity(v_idx));     --Fixed bug # 2313574
                                if lbji_debug = 'Y' then
                                    fnd_file.put_line(fnd_file.log,
                                        'Getting start date based on item lead time');
                                end if;
                            END IF;
                            if l_error_code <> 0 OR l_error_msg IS NOT NULL then
                                handle_error( l_error_code, l_error_msg, l_stmt_num);
                                l_error_code := -1;
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            end if;

                        end if;

                        if lbji_debug = 'Y' then
                            fnd_file.put_line(fnd_file.log, 'Date Validation.. OK.');
                        end if;
                        -- }} Validate schedule dates


l_stmt_num := 280;
                        -- Validate coproduct-supply flag (creation)
                        IF v_wlji_coproducts_supply(v_idx) is NULL THEN
                            v_wlji_coproducts_supply(v_idx)
                                := WSMPLCVA.v_org(v_wlji_org_id(v_idx)).COPRODUCTS_SUPPLY_DEFAULT;
                        --Bug 5463925: OR is replaced by AND.
                        --ELSIF (v_wlji_coproducts_supply(v_idx) <> 1 OR
                        ELSIF (v_wlji_coproducts_supply(v_idx) <> 1 AND
                               v_wlji_coproducts_supply(v_idx) <> 2) THEN
                            v_wlji_coproducts_supply(v_idx) := 2;
                        END IF;

                        if l_error_code <> 0 then
                            l_error_count := l_error_count + 1;
                            GOTO abort_this_job;
                        end if;
                        if lbji_debug = 'Y' then
                            fnd_file.put_line(fnd_file.log,
                                'Co Product Supply Flag Validation.. OK.');
                        end if;


l_stmt_num := 290;
                        -- Default description
                        -- this is to be called only for job creation.
                        if RTRIM(v_wlji_description(v_idx)) is NULL then
                            l_date_text := fnd_date.date_to_charDT(sysdate);
                            fnd_message.set_name('WIP','WIP_MLD_DESC');
                            fnd_message.set_token('LOAD_DATE', l_date_text, false);
                            v_wlji_description(v_idx) := FND_Message.get;
                        else
                            v_wlji_description(v_idx) := RTRIM(v_wlji_description(v_idx));
                        end if;
                        if lbji_debug = 'Y' then
                            fnd_file.put_line(fnd_file.log, 'Default Description.');
                        end if;


l_stmt_num := 300;
                        --------------------------------------------------
                        -- {{{ Begin: Validation of a non-std job creation
                        --------------------------------------------------
                        if v_wlji_job_type(v_idx) = 3 then

                            -- validation_level = 0 => validations performed during job creation
                            -- Error Code and Message Guide
                            -- 1:  Routing Reference Cannot be Null
                            -- 2:  Invalid Assembly Item Id
                            -- 3:  Invalid Routing Reference Id
                            -- 4:  Invalid Bom Reference Id
                            -- 5:  Invalid Alternate Routing Designator
                            -- 0:  Invalid Alternate Bom Designator -- WARNING
                            -- 7:  Start Date cannot be greater than End Date
                            -- 8:  Both Start and End Dates must be Entered
                            -- 9:  Invalid Start Quantity
                            -- 10: Invalid Net Quantity
                            -- 11: Invalid Class Code
                            -- 12: Invalid Completion Locator Id
                            -- 13: Invalid Completion Subinventory
                            -- 14: Invalid Firm Planned Flag

                            l_error_code := 0;
                            l_error_msg := NULL;
                            wsmputil.validate_non_std_references(
                                p_assembly_item_id       => v_wlji_item_id(v_idx),
                                p_routing_reference_id   => v_wlji_rtg_ref_id(v_idx),
                                p_bom_reference_id       => v_wlji_bom_ref_id(v_idx),
                                p_alt_routing_designator => v_wlji_alt_rtg(v_idx),
                                p_alt_bom_designator     => v_wlji_alt_bom(v_idx),
                                p_organization_id        => v_wlji_org_id(v_idx),
                                p_start_date             => v_wlji_fusd(v_idx),
                                p_end_date               => v_wlji_lucd(v_idx),
                                p_start_quantity         => v_wlji_start_quantity(v_idx),
                                p_mrp_net_quantity       => v_wlji_net_quantity(v_idx),
                                p_class_code             => v_wlji_class_code(v_idx),
                                p_completion_subinventory=> v_wlji_compl_subinv(v_idx),
                                p_completion_locator_id  => v_wlji_compl_loc_id(v_idx),
                                p_firm_planned_flag      => v_wlji_firm_planned_flag(v_idx),
                                p_bom_revision           => v_wlji_bom_revision(v_idx),
                                p_bom_revision_date      => v_wlji_bom_rev_date(v_idx),
                                p_routing_revision       => v_wlji_rtg_revision(v_idx),
                                p_routing_revision_date  => v_wlji_rtg_rev_date(v_idx),
                                x_routing_seq_id         => l_rtg_seq_id,
                                x_bom_seq_id             => l_common_bom_seq_id, -- returns common bom
                                validation_level         => 0,
                                x_error_code             => l_error_code,
                                x_err_msg                => l_error_msg);
                            if l_error_code = 0 and l_error_msg is not null then
                                fnd_file.put_line(fnd_file.log, l_error_msg);
                                l_error_msg := NULL;
                            end if;
                            if l_error_code <> 0 then
                                handle_error( l_error_code, l_error_msg, l_stmt_num);
                                l_error_code := -1;
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            end if;

                            -- Get common routing seq id
                            wsmputil.find_common_routing(
                                p_routing_sequence_id        => l_rtg_seq_id,
                                p_common_routing_sequence_id => l_common_rtg_seq_id,
                                x_err_code                   => l_error_code,
                                x_err_msg                    => l_error_msg);
                            if l_error_code <> 0 OR l_error_msg IS NOT NULL then
                                handle_error( l_error_code, l_error_msg, l_stmt_num);
                                l_error_code := -1;
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            end if;
                            if lbji_debug = 'Y' then
                                fnd_file.put_line(fnd_file.log,
                                    'Validate Non-standard References.. OK.');
                            end if;

                        end if; -- non-standard validations end
                        ------------------------------------------------
                        -- }}} End: Validation of a non-std job creation
                        ------------------------------------------------

                        -----------------------------------------------------
                        -- {{{ Begin: validations for standard job creations
                        -----------------------------------------------------
                        if v_wlji_job_type(v_idx) = 1 then

l_stmt_num := 310;
                            -- {{ Validate item id (std job creation)
                            if v_wlji_mode_flag(v_idx) = 1 then
                                l_xst := WSMPLCVA.v_item.exists(v_wlji_item_id(v_idx));
                            else -- mode flag 2
                                hash_str   := to_char(v_wlji_item_id(v_idx)) ||
                                              to_char(v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id);
                                hash_value := dbms_utility.get_hash_value(hash_str, 37, 1073741824);

                                l_xst := WSMPLCVA.v_mode2_item.exists(hash_value) AND
                                         (WSMPLCVA.v_mode2_item(hash_value).INVENTORY_ITEM_ID
                                            = v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id) AND
                                         (WSMPLCVA.v_mode2_item(hash_value).PRIMARY_ITEM_ID
                                            = v_wlji_item_id(v_idx));
                            end if;
l_stmt_num := 310.1;
                            if l_xst = false then
                                l_num_records := 0;
                                begin
                                    select  1
                                    into    l_num_records
                                    from    mtl_system_items_kfv msi
                                    where   msi.inventory_item_id = v_wlji_item_id(v_idx)
                                    and     msi.organization_id   = v_wlji_org_id(v_idx)
                                    and     msi.lot_control_code  = 2;
                                exception
                                    when too_many_rows then
                                        l_num_records := 1;
                                    when no_data_found then
                                        l_error_code := -1;
                                        handle_errmsg_name(
                                            'WSM', 'WSM_ASSEMBLY_NO_LOT', l_stmt_num);
                                end;
l_stmt_num := 310.2;
                                if l_num_records <> 0 then
                                    l_num_records := 0;
                                    begin
                                        select  1
                                        into    l_num_records
                                        from    mtl_system_items_kfv msi
                                        where   msi.inventory_item_id = v_wlji_item_id(v_idx)
                                        and     msi.organization_id   = v_wlji_org_id(v_idx)
                    -- ST : Serial Support Project -----------------------------
                    -- In OSFM we do support Serial controlled assemblies.......
                                        and     msi.serial_number_control_code IN (1,2);
                    -- ST : Serial Support Project -----------------------------
                                    exception
                                        when too_many_rows then
                                            l_num_records := 1;
                                        when no_data_found then
                                            l_error_code := -1;
                                            handle_errmsg_name(
                                                'WSM', 'WSM_ASSEMBLY_NOT_SERIAL', l_stmt_num);
                                    end;
                                end if;
                            end if; -- l_xst = false

                            if l_xst = false AND l_num_records <> 0 then
                                if v_wlji_mode_flag(v_idx) = 2 then
                                    WSMPLCVA.v_mode2_item(hash_value).INVENTORY_ITEM_ID
                                        := v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id;
                                    WSMPLCVA.v_mode2_item(hash_value).PRIMARY_ITEM_ID
                                        := v_wlji_item_id(v_idx);
                                else -- mode flag = 1
                                    WSMPLCVA.v_item(v_wlji_item_id(v_idx)) := v_wlji_item_id(v_idx);
                                end if;
                            end if;

                            if l_error_code <> 0 then
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            end if;
                            if lbji_debug = 'Y' then
                                fnd_file.put_line(fnd_file.log, 'Validation of Item ID.. OK');
                            end if;
                            -- }} Validate item id


l_stmt_num := 320;
                            -- {{ Validate net quantity (std job creation)
                            if (v_wlji_net_quantity(v_idx) < 0) then
                                l_aux_mesg := 'Net Quantity should be > 0';
                                handle_invalid_field('NET QUANTITY', l_aux_mesg, l_stmt_num);
                                l_error_code := -1;
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            end if;

                            if (v_wlji_net_quantity(v_idx) IS NULL) then
                                v_wlji_net_quantity(v_idx) := v_wlji_start_quantity(v_idx);
                            end if;

                            if v_wlji_net_quantity(v_idx) > v_wlji_start_quantity(v_idx) then
                                l_aux_mesg := 'Net Quantity should be <= Start Quantity';
                                handle_invalid_field('NET QUANTITY', l_aux_mesg, l_stmt_num);
                                l_error_code := -1;
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            end if;

                            if lbji_debug = 'Y' then
                                fnd_file.put_line(fnd_file.log, 'Net Quantity Validation.. OK.');
                            end if;
                            -- }} Validate net quantity

l_stmt_num := 325;
               -- ST : Serial Support Project ----------------------
               --- Validate the start job qty and net qty ----------
               --- For serial controlled item have to be an integer...
               DECLARE
                l_serial_ctrl_code NUMBER;

               BEGIN
                select  msi.serial_number_control_code
                                into    l_serial_ctrl_code
                                from    mtl_system_items_kfv msi
                                where   msi.inventory_item_id = v_wlji_item_id(v_idx)
                                and     msi.organization_id   = v_wlji_org_id(v_idx);

                IF l_serial_ctrl_code = 2 THEN  -- Predefined serial control...

                    IF floor(v_wlji_start_quantity(v_idx)) <> v_wlji_start_quantity(v_idx) THEN
                        -- error out...
                        -- Start qty cannot be non-integer...
                         fnd_message.set_name('WSM','WSM_INVALID_JOB_TXN_QTY');
                         l_aux_mesg := fnd_message.get;
                         handle_invalid_field('START QUANTITY', l_aux_mesg, l_stmt_num);
                         l_error_code := -1;
                         l_error_count := l_error_count + 1;
                         GOTO abort_this_job;
                    END IF;

                    IF floor(v_wlji_net_quantity(v_idx)) <> v_wlji_net_quantity(v_idx) THEN
                        -- error out...
                        -- Start qty cannot be non-integer...
                         fnd_message.set_name('WSM','WSM_INVALID_JOB_TXN_QTY');
                         l_aux_mesg := fnd_message.get;
                         handle_invalid_field('NET QUANTITY', l_aux_mesg, l_stmt_num);
                         l_error_code := -1;
                         l_error_count := l_error_count + 1;
                         GOTO abort_this_job;
                    END IF;
                END IF;
               END;
               -- ST : Serial Support Project ----------------------
               --- Validate the start job qty and net qty ----------

l_stmt_num := 330;
                            -- {{ Get l_common_rtg_seq_id  (std job creation)
                            begin
                            -- bugfix 2681637 validation of alternate designator should
                            -- check disable_date. (original bug for form 2558447)
                            -- view bom_routing_alternates_v does not have designator
                            -- disable_date infor.

                               select bor.routing_sequence_id,
                                      bor.COMPLETION_SUBINVENTORY,
                                      bor.COMPLETION_LOCATOR_ID
                               into   l_rtg_seq_id,
                                      l_default_compl_subinv,
                                      l_default_compl_loc_id
                               from   bom_operational_routings  bor,
                                      bom_alternate_designators bad
                               where  ((bor.alternate_routing_designator is null and
                                        bad.alternate_designator_code is null and
                                        bad.organization_id = -1) or
                                       (bor.alternate_routing_designator
                                            = bad.alternate_designator_code and
                                        bor.organization_id = bad.organization_id))
                               and    bor.organization_id = v_wlji_org_id(v_idx)
                               and    bor.assembly_item_id = v_wlji_item_id(v_idx)
                               and    NVL(bor.alternate_routing_designator, '&*')
                                          = NVL(v_wlji_alt_rtg(v_idx), '&*')
                               and    bor.routing_type = 1
                               and    bor.cfm_routing_flag = 3;
                               --Bug 5107339: Disable_date validation is not applicable here.
                               --and    trunc(nvl(bad.disable_date, sysdate + 1)) > trunc(sysdate);

                            exception
                                when no_data_found then
                                    l_aux_mesg := '';
                                    handle_invalid_field(
                                        'ALTERNATE ROUTING DESIGNATOR', l_aux_mesg, l_stmt_num);
                                    l_error_code := -1;
                                    l_error_count := l_error_count + 1;
                                    GOTO abort_this_job;
                            end;

                            IF v_wlji_compl_subinv(v_idx) IS NULL AND
                               v_wlji_compl_loc_id(v_idx) IS NULL THEN
                                v_wlji_compl_subinv(v_idx) := l_default_compl_subinv;
                                v_wlji_compl_loc_id(v_idx) := l_default_compl_loc_id;
                            END IF;

                            IF v_wlji_compl_subinv(v_idx) IS NULL AND
                               v_wlji_compl_loc_id(v_idx) IS NOT NULL THEN
                                v_wlji_compl_subinv(v_idx) := l_default_compl_subinv;
                            END IF;

                            IF v_wlji_compl_subinv(v_idx) IS NOT NULL AND
                               v_wlji_compl_loc_id(v_idx) IS NULL THEN
l_stmt_num := 330.1;
                                -- {{ validation of subinv begin
                                hash_str   := to_char(v_wlji_org_id(v_idx))
                                              ||v_wlji_compl_subinv(v_idx);
                                hash_value := dbms_utility.get_hash_value(hash_str, 37, 1073741824);
                                if WSMPLCVA.v_subinv.exists(hash_value) then
                                    NULL;
                                else
                                    l_aux_mesg := '';
                                    handle_invalid_field(
                                        'COMPLETION SUBINVENTORY', l_aux_mesg, l_stmt_num);
                                    l_error_code := -1;
                                    l_error_count := l_error_count + 1;
                                    GOTO abort_this_job;
                                end if;
                                -- }} validation of subinv end
l_stmt_num := 330.2;
                                select locator_type
                                into   l_mtl_locator_type
                                from   mtl_secondary_inventories
                                where  secondary_inventory_name
                                        = v_wlji_compl_subinv(v_idx)
                                and    organization_id = v_wlji_org_id(v_idx);

                                if v_wlji_compl_subinv(v_idx) = l_default_compl_subinv
                                then
                                    v_wlji_compl_loc_id(v_idx) := l_default_compl_loc_id;
                                else
                                    if l_mtl_locator_type = 2 then
                                        l_aux_mesg := '';
                                        handle_invalid_field(
                                            'COMPLETION SUBINVENTORY', l_aux_mesg, l_stmt_num);
                                        l_error_code := -1;
                                        l_error_count := l_error_count + 1;
                                        GOTO abort_this_job;
                                    end if;
                                end if;
                            END IF;
l_stmt_num := 330.3;
                            -- Get common routing seq id
                            l_error_msg := NULL;
                            wsmputil.find_common_routing(
                                p_routing_sequence_id        => l_rtg_seq_id,
                                p_common_routing_sequence_id => l_common_rtg_seq_id,
                                x_err_code                   => l_error_code,
                                x_err_msg                    => l_error_msg);

                            if l_error_code <> 0 OR l_error_msg IS NOT NULL then
                                handle_error( l_error_code, l_error_msg, l_stmt_num);
                                l_error_code := -1;
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            end if;
                            if lbji_debug = 'Y' then
                                fnd_file.put_line(fnd_file.log,
                                    'Routing Sequence Id: '||l_rtg_seq_id ||
                                    ', Common Routing Sequence Id: '||l_common_rtg_seq_id);
                            end if;
                            -- }} get l_common_rtg_seq_id end


l_stmt_num := 340;
                            -- {{ Get l_common_bom_seq_id (std job creation)
                            -- if the alternate_bom_designator has NULL in wlji, bill_seq_id
                            -- can have either NULL or a primary bom value. But if the
                            -- designator has ALT, then there must be a bill id for the
                            -- alternate bom.
                            IF v_wlji_alt_bom(v_idx) is NULL THEN
                                begin
                                    SELECT  bom.common_bill_sequence_id
                                    INTO    l_common_bom_seq_id
                                    FROM    bom_bill_of_materials bom
                                    WHERE   bom.alternate_bom_designator is NULL
                                    AND     BOM.assembly_item_id = v_wlji_item_id(v_idx)
                                    AND     bom.organization_id = v_wlji_org_id(v_idx);
                                exception
                                    WHEN NO_DATA_FOUND THEN
                                        NULL;
                                end;
                            ELSE
l_stmt_num := 345.1;
                                begin
                                    SELECT  bom.common_bill_sequence_id
                                    INTO    l_common_bom_seq_id
                                    FROM    bom_bill_of_materials bom,
                                            bom_alternate_designators bad
                                    WHERE   ((bom.alternate_bom_designator is null and
                                              bad.alternate_designator_code is null and
                                              bad.organization_id = -1) OR
                                             (bom.alternate_bom_designator
                                                = bad.alternate_designator_code and
                                              bom.organization_id = bad.organization_id))
                                    AND     bom.alternate_bom_designator
                                                = v_wlji_alt_bom(v_idx)
                                    AND     BOM.assembly_item_id = v_wlji_item_id(v_idx)
                                    AND     bom.organization_id = v_wlji_org_id(v_idx);
                                    --Bug 5107339: Disable_date validation is not applicable here.
                                    --AND     trunc(nvl(bad.disable_date, sysdate + 1)) > trunc(sysdate);

                                exception
                                    WHEN no_data_found  THEN
                                        l_aux_mesg := '';
                                        handle_invalid_field(
                                            'ALTERNATE BOM DESIGNATOR', l_aux_mesg, l_stmt_num);
                                        l_error_code := -1;
                                        l_error_count := l_error_count + 1;
                                        GOTO abort_this_job;
                                end;
                            END IF;
                            if lbji_debug = 'Y' then
                                fnd_file.put_line(fnd_file.log,
                                    'Getting Bill Sequence Id: '||l_common_bom_seq_id);
                            end if;
                            -- }} get l_common_bom_seq_id


l_stmt_num := 350;
                            -- {{ Validate locator id (std job creation)
                            SELECT  nvl(msub.locator_type, 1) sub_loc_control,
                                    MP.stock_locator_control_code org_loc_control,
                                    MS.restrict_locators_code,
                                    MS.location_control_code item_loc_control
                            into    l_sub_loc_control,
                                    l_org_loc_control,
                                    l_restrict_locators_code,
                                    l_item_loc_control
                            FROM    mtl_system_items MS,
                                    mtl_secondary_inventories MSUB,
                                    mtl_parameters MP
                            WHERE   MP.organization_id = v_wlji_org_id(v_idx)
                            AND     MS.organization_id = v_wlji_org_id(v_idx)
                            AND     MS.inventory_item_id = v_wlji_item_id(v_idx)
                            AND     MSUB.secondary_inventory_name
                                        = v_wlji_compl_subinv(v_idx)
                            AND     MSUB.organization_id = v_wlji_org_id(v_idx);

                            l_locator_id := v_wlji_compl_loc_id(v_idx);

                            WIP_LOCATOR.validate(
                                    v_wlji_org_id(v_idx),
                                    v_wlji_item_id(v_idx),
                                    v_wlji_compl_subinv(v_idx),
                                    l_org_loc_control,
                                    l_sub_loc_control,
                                    l_item_loc_control,
                                    l_restrict_locators_code,
                                    NULL, NULL, NULL, NULL,
                                    l_locator_id,
                                    dummy_segs,
                                    l_temp_boolean);

                            IF not l_temp_boolean THEN
                                l_aux_mesg := '';
                                handle_invalid_field(
                                    'COMPLETION SUBINVENTORY', l_aux_mesg, l_stmt_num);
                                l_error_code := -1;
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            end if;
                            if lbji_debug = 'Y' then
                                fnd_file.put_line(fnd_file.log, 'Locator Id Validation.. OK.');
                            end if;
                            -- }} validate locator id


l_stmt_num := 360;
                            -- {{ validate class code (std job creation)
                            begin
                                IF v_wlji_class_code(v_idx) is NULL then
                                    begin
                                        select wse.default_acct_class_code
                                        into   v_wlji_class_code(v_idx)
                                        from   wsm_sector_extensions wse,
                                               wsm_item_extensions wie
                                        where  wie.inventory_item_id = v_wlji_item_id(v_idx)
                                        and    wie.organization_id = v_wlji_org_id(v_idx)
                                        and    wie.sector_extension_id = wse.sector_extension_id
                                        and    wie.organization_id = wse.organization_id;
                                    exception
                                        when no_data_found then
                                            v_wlji_class_code(v_idx) := NULL;
                                    end;

                                    IF v_wlji_class_code(v_idx) is NULL then
                                        begin
                                            select wse.default_acct_class_code
                                            into   v_wlji_class_code(v_idx)
                                            from   wsm_sector_extensions wse,
                                                   wsm_subinventory_extensions wve
                                            where  wve.secondary_inventory_name
                                                      = v_wlji_compl_subinv(v_idx)
                                            and    wve.organization_id = v_wlji_org_id(v_idx)
                                            and    wve.sector_extension_id = wse.sector_extension_id
                                            and    wve.organization_id = wse.organization_id;
                                        exception
                                            WHEN NO_DATA_FOUND THEN
                                                v_wlji_class_code(v_idx) := NULL;
                                        end;

                                        IF v_wlji_class_code(v_idx) is NULL then
                                            v_wlji_class_code(v_idx)
                                                := WSMPLCVA.v_org(v_wlji_org_id(v_idx)).DEFAULT_ACCT_CLASS_CODE;
                                        END IF;
                                    END IF;

                                    IF v_wlji_class_code(v_idx) IS NULL THEN
                                        raise no_data_found;
                                    END IF;

                                ELSE
                                    hash_str   := to_char(v_wlji_org_id(v_idx))
                                                  ||v_wlji_class_code(v_idx);
                                    hash_value := dbms_utility.get_hash_value(hash_str, 37, 1073741824);
                                    if WSMPLCVA.v_class_code.exists(hash_value) then
                                        NULL;
                                    else
                                        raise no_data_found;
                                    end if;
                                END IF;
                            exception
                                WHEN no_data_found  THEN
                                    l_aux_mesg := 'Class code may not be NULL';
                                    handle_invalid_field('CLASS_CODE', l_aux_mesg, l_stmt_num);
                                    l_error_code := -1;
                                    l_error_count := l_error_count + 1;
                                    GOTO abort_this_job;
                            end;
                            if lbji_debug = 'Y' then
                                fnd_file.put_line(fnd_file.log, 'Class Code Validation.. OK.');
                            end if;
                            -- }} validate class code


l_stmt_num := 370;
                            -- {{ Get revisions (std job creation)
                            -- this procedure is called only after date validation so that the
                            -- start date is not null. This is to be called only for job creation.
                            -- v_wlji_rtg_rev_date(v_idx) will be populated

                            if v_wlji_fusd(v_idx) > SYSDATE then
                                l_rev_date := v_wlji_fusd(v_idx);
                            else
                                l_rev_date := SYSDATE;
                            end if;

                            -- BA: bug 3437412 revision date should default to job start date
                            -- if v_wlji_fusd(v_idx) IS NULL (this situation can happen only when
                            -- scheduling_method=1 and fusd is not specified, l_rev_date = SYSDATE,
                            -- and routing/bom revision date will be default to SYSDATE,
                            if(v_wlji_rtg_rev_date(v_idx) IS NULL and
                               v_wlji_rtg_revision(v_idx) IS NULL) then
                                v_wlji_rtg_rev_date(v_idx) := l_rev_date;
                            end if;
                            if(v_wlji_bom_rev_date(v_idx) IS NULL and
                               v_wlji_bom_revision(v_idx) IS NULL) then
                                v_wlji_bom_rev_date(v_idx) := l_rev_date;
                            end if;
                            -- BA: bug 3437412 should default to job start date

                            wip_revisions.bom_revision (
                                    v_wlji_org_id(v_idx),
                                    v_wlji_item_id(v_idx),
                                    v_wlji_bom_revision(v_idx),
                                    v_wlji_bom_rev_date(v_idx),
                                    l_rev_date);
                            wip_revisions.routing_revision (
                                    v_wlji_org_id(v_idx),
                                    v_wlji_item_id(v_idx),
                                    v_wlji_rtg_revision(v_idx),
                                    v_wlji_rtg_rev_date(v_idx),
                                    l_rev_date);

                            if l_error_code <> 0 then
                                l_error_code := -1;
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            end if;
                            if lbji_debug = 'Y' then
                                fnd_file.put_line(fnd_file.log, 'Getting BOM/Routing Revisions.. OK.');
                            end if;
                            -- }} get revisions

                        end if; -- job type =1
                        -----------------------------------------------------
                        -- }}} End: validations for standard job creations
                        -----------------------------------------------------

l_stmt_num := 380;
                        -- {{ Validate Date_Released, job_type 1 and 3
                        if (v_wlji_status_type(v_idx) = WIP_CONSTANTS.UNRELEASED) and
                           (v_wlji_date_released(v_idx) is not null ) then

                            v_wlji_date_released(v_idx) := null;
                            if lbji_debug = 'Y' then
                                fnd_file.put_line(fnd_file.log,
                                    'Date_Released is ignored for unreleased job');
                            end if;
                        elsif (v_wlji_status_type(v_idx) = WIP_CONSTANTS.RELEASED ) then
                            if (v_wlji_date_released(v_idx) > sysdate ) then
                                l_error_code := -1;
                                handle_errmsg_name('WIP', 'WIP_INVALID_RELEASE_DATE', l_stmt_num);
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            elsif (v_wlji_date_released(v_idx) is null) then
                                v_wlji_date_released(v_idx) := sysdate;
                            end if;
                        end if;
                        if lbji_debug = 'Y' then
                            fnd_file.put_line(fnd_file.log,
                                'Date_Released Validation.. First Phase Done.');
                        end if;
                        -- }} Validate Date_Released

                        -- -------------------------------------------------------------------
                        -- {{{ Validations for the starting lot in wsli begin (std, creation)
                        -- -------------------------------------------------------------------
                        -- These validations are to be performed only for jobs of mode flag 2
                        -- Since mode 2 only support std job, v_wlji_job_type(v_indev) = 1

                        if v_wlji_mode_flag(v_idx) = 2 then
l_stmt_num := 400;
                            -- last_updated_by
                            l_num_records := 0;
                            l_xst := WSMPLCVA.v_user.exists(
                                        v_wsli(v_wlji_src_line_id(v_idx)).last_updated_by);
                            if l_xst = false then
                                begin
                                    select 1
                                    into   l_num_records
                                    from   fnd_user
                                    where  user_id = v_wsli(v_wlji_src_line_id(v_idx)).last_updated_by
                                    and    sysdate between start_date and nvl(end_date,sysdate+1);
                                exception
                                    when too_many_rows then l_num_records := 1;
                                    when no_data_found then
                                        l_error_code := -1;
                                        l_aux_mesg := '';
                                        handle_invalid_field(
                                            'Last Updated By in WSM_STARTING_LOTS_INTERFACE',
                                            l_aux_mesg,
                                            l_stmt_num);
                                        l_error_count := l_error_count + 1;
                                        GOTO abort_this_job;
                                end;
                            end if;

                            if l_xst = false AND l_num_records <> 0 then
                                WSMPLCVA.v_user(v_wsli(v_wlji_src_line_id(v_idx)).last_updated_by)
                                    := v_wsli(v_wlji_src_line_id(v_idx)).last_updated_by;
                            end if;
l_stmt_num := 410;
                            -- wsli.created_by
                            l_num_records := 0;
                            l_xst := WSMPLCVA.v_user.exists(v_wsli(v_wlji_src_line_id(v_idx)).created_by);
                            if l_xst = false then
                                begin
                                    select 1
                                    into   l_num_records
                                    from   fnd_user
                                    where  user_id = v_wsli(v_wlji_src_line_id(v_idx)).created_by
                                    and    sysdate between start_date and nvl(end_date,sysdate+1);
                                exception
                                    when too_many_rows then l_num_records := 1;
                                    when no_data_found then
                                        l_error_code := -1;
                                        l_aux_mesg := '';
                                        handle_invalid_field(
                                            'Created By in WSM_STARTING_LOTS_INTERFACE',
                                            l_aux_mesg,
                                            l_stmt_num);
                                        l_error_count := l_error_count + 1;
                                        GOTO abort_this_job;
                                end;
                            end if;

                            if l_xst = false AND l_num_records <> 0 then
                                WSMPLCVA.v_user(v_wsli(v_wlji_src_line_id(v_idx)).created_by)
                                    := v_wsli(v_wlji_src_line_id(v_idx)).created_by;
                            end if;

l_stmt_num := 420;
                            -- Check.MMTT
                            begin
                                select 1
                                into   l_temp_num
                                from   mtl_transaction_lots_temp
                                where  lot_number = v_wsli(v_wlji_src_line_id(v_idx)).lot_number
                                and    rownum = 1;

                                if l_temp_num <>0 then
                                    select 0
                                    into   l_temp_num
                                    from   mtl_material_transactions_temp mmtt
                                    where  mmtt.organization_id        = v_wsli(v_wlji_src_line_id(v_idx)).organization_id
                                    and    mmtt.inventory_item_id      = v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id
                                    and    nvl(mmtt.lot_number, '@#$') = v_wsli(v_wlji_src_line_id(v_idx)).lot_number
                                    and    mmtt.subinventory_code      = v_wsli(v_wlji_src_line_id(v_idx)).subinventory_code
                                    and    nvl(mmtt.locator_id, -9999) = nvl(v_wsli(v_wlji_src_line_id(v_idx)).locator_id, -9999)
                                    and    mmtt.transaction_type_id    = 42 -- miscellaneous receipt
                                    and    mmtt.transaction_action_id  = 27 -- receipt into stores
                                    and    mmtt.transaction_source_type_id = 13 -- inventory
                                    and    v_wsli(v_wlji_src_line_id(v_idx)).quantity = ((-1) * mmtt.transaction_quantity)
                                    and    mmtt.transaction_date = (
                                                select max(mmtt2.transaction_date)
                                                from   mtl_material_transactions_temp mmtt2
                                                where  mmtt2.organization_id        = v_wsli(v_wlji_src_line_id(v_idx)).organization_id
                                                and    mmtt2.inventory_item_id      = v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id
                                                and    nvl(mmtt2.lot_number, '@#$') = nvl(v_wsli(v_wlji_src_line_id(v_idx)).lot_number, '@#$')
                                                and    mmtt2.subinventory_code      = v_wsli(v_wlji_src_line_id(v_idx)).subinventory_code
                                                and    nvl(mmtt2.locator_id, -9999) = nvl(v_wsli(v_wlji_src_line_id(v_idx)).locator_id, -9999)
                                            );
                                end if;
                                If l_temp_num <> 0 then
                                    fnd_message.set_name('WSM', 'WSM_PENDING_TXN');
                                    fnd_message.set_token('TABLE','Starting Lot:' ||
                                        v_wsli(v_wlji_src_line_id(v_idx)).lot_number ||
                                        'Table: mtl_transaction_lots_temp ');
                                    l_error_msg := fnd_message.get;
                                    l_error_code := -1;
                                    handle_error( l_error_code, l_error_msg, l_stmt_num);
                                    l_error_count := l_error_count + 1;
                                    GOTO abort_this_job;
                                END IF;

                            exception
                                when no_data_found Then
                                    null;
                            end;
--Bug 5182520:Added validation on Material Status
l_stmt_num := 422;
                            IF (WSMPUTIL.is_status_applicable(p_wms_installed =>NULL,
                              p_trx_status_enabled    => NULL,
                              p_trx_type_id           => 35,
                              p_lot_status_enabled    => NULL,
                              p_serial_status_enabled => NULL,
                              p_organization_id       => v_wsli(v_wlji_src_line_id(v_idx)).organization_id,
                              p_inventory_item_id     => v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id,
                              p_sub_code              => v_wsli(v_wlji_src_line_id(v_idx)).subinventory_code,
                              p_locator_id            => v_wsli(v_wlji_src_line_id(v_idx)).locator_id,
                              p_lot_number            => v_wsli(v_wlji_src_line_id(v_idx)).lot_number,
                              p_serial_number         => NULL,
                              x_error_msg             => l_error_msg) = 'N') THEN

	                            l_error_code := -1;
                                    handle_error( l_error_code, l_error_msg, l_stmt_num);
                                    l_error_count := l_error_count + 1;
                                    GOTO abort_this_job;

                            END IF;

l_stmt_num := 430;
                            -- {{ kanban begin
                            if v_wlji_kanban_card_id(v_idx) is not null then
                                if WSMPLBJI.honor_kanban_size(
                                            v_wlji_org_id(v_idx),
                                            v_wlji_item_id(v_idx),
                                            v_wlji_compl_subinv(v_idx),
                                            v_wlji_compl_loc_id(v_idx),
                                            -1) = 1
                                then
l_stmt_num := 430.1;
                                    select kanban_size
                                    into   l_kanban_size
                                    from   mtl_kanban_cards
                                    where  kanban_card_id = v_wlji_kanban_card_id(v_idx);
                                    if v_wlji_start_quantity(v_idx) > l_kanban_size then
                                        v_wlji_start_quantity(v_idx) := l_kanban_size;
                                        v_wlji_net_quantity(v_idx)   := v_wlji_start_quantity(v_idx);
                                    end if;
                                end if;
                            end if;
                            -- }} Kanban end

l_stmt_num := 440;
                            -- ------------------------------------------------------------
                            -- Check if the component is required at first operation
                            -- Check component quantity
                            --
                            -- The code should be moved to where job details are imported
                            -- because user intention should be honored
                            -- ------------------------------------------------------------


                        end if; -- mode_flag 2
                        -- ----------------------------------------------------------------
                        -- }}} Validations for the starting lot in wsli end (std, creation)
                        -- ----------------------------------------------------------------

                    end if;  -- load_type = 5
-- ===========================================================================================
-- END: Job Creation Validations }}}
-- ===========================================================================================



-- ===========================================================================================
-- BEGIN: Reschedule (Update) Job Validations {{{
-- ===========================================================================================
                    if v_wlji_load_type(v_idx) = 6 then
                        --------------------------------------------
                        -- {{{ Begin: Update of alternates (std job)
                        --------------------------------------------
                        -- If the user wants to update an alternate to NULL value, he should
                        -- populate '-99' in the interface table. If NULL is populated, we
                        -- consider that user does not want to change ALT
                        if l_cur_job_type = 1 then  -- {{ if std-job
l_stmt_num := 500;
                            l_chg_bom_alt :=0;
                            l_chg_rtg_alt :=0;
                            l_chg_alt_flag:=0;

                            if v_wlji_alt_bom(v_idx) is NOT NULL AND
                               ((l_cur_alt_bom is NULL AND
                                 v_wlji_alt_bom(v_idx) <> '-99') OR
                                (l_cur_alt_bom is NOT NULL AND
                                 v_wlji_alt_bom(v_idx) <> l_cur_alt_bom))
                            then
                                l_chg_bom_alt := 1;
                            end if;

                            if v_wlji_alt_rtg(v_idx) is NOT NULL AND
                               ((l_cur_alt_rtg is NULL AND
                                 v_wlji_alt_rtg(v_idx) <> '-99') OR
                                (l_cur_alt_rtg is NOT NULL AND
                                 v_wlji_alt_rtg(v_idx) <> l_cur_alt_rtg))
                            then
                                l_chg_rtg_alt := 1;
                            end if;

                            -- {{ Change bom/rtg alternate
                            if (l_chg_bom_alt = 1 OR l_chg_rtg_alt = 1) and
                               l_cur_status_type = 1
                            then
                                l_chg_alt_flag := 1;

                                -- populate local variables
                                v_wlji_item_id(v_idx) := l_cur_primary_item_id;

                                if l_chg_bom_alt = 1 then
                                    if v_wlji_alt_bom(v_idx) = '-99' then
                                        v_wlji_alt_bom(v_idx) := null;
                                    end if;
                                else
                                    v_wlji_alt_bom(v_idx) := l_cur_alt_bom;
                                end if;

                                if l_chg_rtg_alt = 1 then
                                    if v_wlji_alt_rtg(v_idx) = '-99' then
                                        v_wlji_alt_rtg(v_idx) := null;
                                    end if;
                                else
                                    v_wlji_alt_rtg(v_idx) := l_cur_alt_rtg;
                                end if;

l_stmt_num := 510;
                                -- Now validate the alternate designators to get the NEW
                                -- common routing and bom sequence id.
                                -- Also get the completion subinventory and locator.
                                -- If the user has provided them, use them after validation,
                                -- else use these default values. Also validate/default
                                -- the bom/rtg revision and revision-dates
                                begin
                                    select bor.routing_sequence_id,
                                           bor.COMPLETION_SUBINVENTORY,
                                           bor.COMPLETION_LOCATOR_ID
                                    into   l_rtg_seq_id,
                                           l_default_compl_subinv,
                                           l_default_compl_loc_id
                                    from   bom_operational_routings bor,
                                           bom_alternate_designators bad
                                    where  ((bor.alternate_routing_designator is null and
                                             bad.alternate_designator_code is null and
                                             bad.organization_id = -1) OR
                                            (bor.alternate_routing_designator
                                                = bad.alternate_designator_code and
                                             bor.organization_id = bad.organization_id))
                                    and    bor.organization_id = v_wlji_org_id(v_idx)
                                    and    bor.assembly_item_id = v_wlji_item_id(v_idx)
                                    and    NVL(bor.alternate_routing_designator, '&*')
                                               = NVL(v_wlji_alt_rtg(v_idx), '&*')
                                    and    bor.routing_type = 1
                                    and    bor.cfm_routing_flag = 3;
                                    --Bug 5107339: Disable_date validation is not applicable here.
                                    --and    trunc(nvl(bad.disable_date, sysdate + 1))
                                     --           > trunc(sysdate);
                                exception
                                    when no_data_found then
                                        l_aux_mesg := '';
                                        handle_invalid_field(
                                            'Alternate Routing Designator',
                                            l_aux_mesg, l_stmt_num);
                                        l_error_code := -1;
                                        l_error_count := l_error_count + 1;
                                        GOTO skip_resched_validations;
                                end;
l_stmt_num := 520;
                                -- find l_common_rtg_seq_id
                                l_error_msg := NULL;
                                wsmputil.find_common_routing(
                                    p_routing_sequence_id        => l_rtg_seq_id,
                                    p_common_routing_sequence_id => l_common_rtg_seq_id,
                                    x_err_code                   => l_error_code,
                                    x_err_msg                    => l_error_msg);
                                if l_error_code <> 0 OR l_error_msg IS NOT NULL then
                                    handle_error( l_error_code, l_error_msg, l_stmt_num);
                                    l_error_code := -1;
                                    l_error_count := l_error_count + 1;
                                    GOTO skip_resched_validations;
                                end if;

l_stmt_num := 530;
                                IF v_wlji_compl_subinv(v_idx) IS NULL AND
                                   v_wlji_compl_loc_id(v_idx) IS NULL THEN
                                    v_wlji_compl_subinv(v_idx) := l_default_compl_subinv;
                                    v_wlji_compl_loc_id(v_idx) := l_default_compl_loc_id;
                                END IF;

                                IF v_wlji_compl_subinv(v_idx) IS NULL AND
                                   v_wlji_compl_loc_id(v_idx) IS NOT NULL THEN
                                    v_wlji_compl_subinv(v_idx) := l_default_compl_subinv;
                                END IF;

                                IF v_wlji_compl_subinv(v_idx) IS NOT NULL AND
                                   v_wlji_compl_loc_id(v_idx) IS NULL THEN

                                    hash_str   := to_char(v_wlji_org_id(v_idx))
                                                  ||v_wlji_compl_subinv(v_idx);
                                    hash_value := dbms_utility.get_hash_value(hash_str, 37, 1073741824);
                                    if WSMPLCVA.v_subinv.exists(hash_value) then
                                        NULL;
                                    else
                                        l_aux_mesg := '';
                                        handle_invalid_field(
                                            'COMPLETION SUBINVENTORY', l_aux_mesg, l_stmt_num);
                                        l_error_code := -1;
                                        l_error_count := l_error_count + 1;
                                        GOTO skip_resched_validations;
                                    end if;

l_stmt_num := 540;
                                    select locator_type
                                    into   l_mtl_locator_type
                                    from   mtl_secondary_inventories
                                    where  secondary_inventory_name
                                               = v_wlji_compl_subinv(v_idx)
                                    and    organization_id = v_wlji_org_id(v_idx);

                                    if v_wlji_compl_subinv(v_idx)
                                         = l_default_compl_subinv
                                    then
                                        v_wlji_compl_loc_id(v_idx)
                                             := l_default_compl_loc_id;
                                    else
                                        if l_mtl_locator_type = 2 then
                                            l_aux_mesg := '';
                                            handle_invalid_field(
                                                'COMPLETION SUBINVENTORY',
                                                l_aux_mesg, l_stmt_num);
                                            l_error_code := -1;
                                            l_error_count := l_error_count + 1;
                                            GOTO skip_resched_validations;
                                        end if;
                                    end if;
                                END IF;

l_stmt_num := 550;
                                IF v_wlji_alt_bom(v_idx) is NULL THEN
                                    begin
                                        select  bom.common_bill_sequence_id
                                        into    l_common_bom_seq_id
                                        from    bom_bill_of_materials bom
                                        where   bom.alternate_bom_designator is null
                                        and     bom.assembly_item_id = v_wlji_item_id(v_idx)
                                        and     bom.organization_id = v_wlji_org_id(v_idx);
                                    exception
                                        WHEN NO_DATA_FOUND THEN
                                            NULL;
                                    end;
                                ELSE
                                    begin
                                        select  bom.common_bill_sequence_id
                                        into    l_common_bom_seq_id
                                        from    bom_bill_of_materials bom,
                                                bom_alternate_designators bad
                                        where   ((bom.alternate_bom_designator is null and
                                                  bad.alternate_designator_code is null and
                                                  bad.organization_id = -1) or
                                                 (bom.alternate_bom_designator
                                                      = bad.alternate_designator_code and
                                                  bom.organization_id = bad.organization_id))
                                        and     bom.alternate_bom_designator
                                                    = v_wlji_alt_bom(v_idx)
                                        and     bom.assembly_item_id = v_wlji_item_id(v_idx)
                                        and     bom.organization_id = v_wlji_org_id(v_idx);
                                        --Bug 5107339: Disable_date validation is not applicable here.
                                        --  and     trunc(nvl(bad.disable_date, sysdate + 1))
                                        --             > trunc(sysdate);
                                    exception
                                        WHEN no_data_found  THEN
                                            l_aux_mesg := '';
                                            handle_invalid_field(
                                                'Alternate Bom Designator', l_aux_mesg, l_stmt_num);
                                            l_error_code := -1;
                                            l_error_count := l_error_count + 1;
                                            GOTO skip_resched_validations;
                                    end;
                                END IF;

l_stmt_num := 560;
                                SELECT  nvl(msub.locator_type, 1) sub_loc_control,
                                        MP.stock_locator_control_code org_loc_control,
                                        MS.restrict_locators_code,
                                        MS.location_control_code item_loc_control
                                into    l_sub_loc_control,
                                        l_org_loc_control,
                                        l_restrict_locators_code,
                                        l_item_loc_control
                                FROM    mtl_system_items MS,
                                        mtl_secondary_inventories MSUB,
                                        mtl_parameters MP
                                WHERE   MP.organization_id = v_wlji_org_id(v_idx)
                                AND     MS.organization_id = v_wlji_org_id(v_idx)
                                AND     MS.inventory_item_id = v_wlji_item_id(v_idx)
                                AND     MSUB.secondary_inventory_name
                                            = v_wlji_compl_subinv(v_idx)
                                AND     MSUB.organization_id = v_wlji_org_id(v_idx);

l_stmt_num := 570;
                                l_locator_id := v_wlji_compl_loc_id(v_idx);
                                WIP_LOCATOR.validate(
                                        v_wlji_org_id(v_idx),
                                        v_wlji_item_id(v_idx),
                                        v_wlji_compl_subinv(v_idx),
                                        l_org_loc_control,
                                        l_sub_loc_control,
                                        l_item_loc_control,
                                        l_restrict_locators_code,
                                        NULL, NULL, NULL, NULL,
                                        l_locator_id,
                                        dummy_segs,
                                        l_temp_boolean);
                                IF not l_temp_boolean THEN
                                    l_aux_mesg := '';
                                    handle_invalid_field(
                                        'COMPLETION SUBINVENTORY', l_aux_mesg, l_stmt_num);
                                    l_error_code := -1;
                                    l_error_count := l_error_count + 1;
                                    GOTO skip_resched_validations;
                                end if;

l_stmt_num := 580;
                                if v_wlji_fusd(v_idx) is null then
                                    v_wlji_fusd(v_idx) := l_cur_start_date;
                                end if;

                                if v_wlji_fusd(v_idx) > SYSDATE then
                                    l_rev_date := v_wlji_fusd(v_idx);
                                else
                                    l_rev_date := SYSDATE;
                                end if;
l_stmt_num := 590.1;
                                wip_revisions.bom_revision (
                                        v_wlji_org_id(v_idx),
                                        v_wlji_item_id(v_idx),
                                        v_wlji_bom_revision(v_idx),
                                        v_wlji_bom_rev_date(v_idx),
                                        l_rev_date);
l_stmt_num := 590.2;
                                wip_revisions.routing_revision (
                                        v_wlji_org_id(v_idx),
                                        v_wlji_item_id(v_idx),
                                        v_wlji_rtg_revision(v_idx),
                                        v_wlji_rtg_rev_date(v_idx),
                                        l_rev_date);

                            end if; -- }} Change bom/routing alternate

                            if (l_chg_bom_alt = 1 OR l_chg_rtg_alt = 1) and
                               l_cur_status_type <> 1
                            then
                                fnd_file.put_line(fnd_file.log,
                                    'Ignoring the following fields if provided by user: ' ||
                                    'Alternate_Routing_Designator, Alternate_Bom_Designator.');
                            end if;

                            v_wlji_bom_ref_id(v_idx) := null;
                            v_wlji_rtg_ref_id(v_idx) := null;
                            if l_chg_alt_flag = 0 then
                                l_common_bom_seq_id        := l_cur_com_bom_seq_id;
                                v_wlji_alt_bom(v_idx)      := l_cur_alt_bom;
                                --v_wlji_bom_rev_date(v_idx) := l_cur_bom_rev_date; -- DEL bug3202534
                                --v_wlji_bom_revision(v_idx) := l_cur_bom_revision; -- DEL bug3202534
                                l_common_rtg_seq_id        := l_cur_com_rtg_seq_id;
                                v_wlji_alt_rtg(v_idx)      := l_cur_alt_rtg;
                                --v_wlji_rtg_rev_date(v_idx) := l_cur_rtg_rev_date; -- DEL bug3202534
                                --v_wlji_rtg_revision(v_idx) := l_cur_rtg_revision; -- DEL bug3202534
                                --v_wlji_compl_subinv(v_idx) := l_cur_compl_subinv; Bug 4919218
                                --v_wlji_compl_loc_id(v_idx) := l_cur_compl_locator; Bug 4919218
                                -- Validation added for Bug 4919218: Start
l_stmt_num := 590.3;
                                IF v_wlji_compl_subinv(v_idx) IS NULL AND
                                   v_wlji_compl_loc_id(v_idx) IS NULL THEN
                                    v_wlji_compl_subinv(v_idx) := l_cur_compl_subinv;
                                    v_wlji_compl_loc_id(v_idx) := l_cur_compl_locator;
                                END IF;

                                IF v_wlji_compl_subinv(v_idx) IS NULL AND
                                   v_wlji_compl_loc_id(v_idx) IS NOT NULL THEN
                                    v_wlji_compl_subinv(v_idx) := l_cur_compl_subinv;
                                END IF;

                                IF v_wlji_compl_subinv(v_idx) IS NOT NULL AND
                                   v_wlji_compl_loc_id(v_idx) IS NULL THEN

                                    hash_str   := to_char(v_wlji_org_id(v_idx))
                                                  ||v_wlji_compl_subinv(v_idx);
                                    hash_value := dbms_utility.get_hash_value(hash_str, 37, 1073741824);
                                    if WSMPLCVA.v_subinv.exists(hash_value) then
                                        NULL;
                                    else
                                        l_aux_mesg := '';
                                        handle_invalid_field(
                                            'COMPLETION SUBINVENTORY', l_aux_mesg, l_stmt_num);
                                        l_error_code := -1;
                                        l_error_count := l_error_count + 1;
                                        GOTO skip_resched_validations;
                                    end if;

l_stmt_num := 590.4;
                                    select locator_type
                                    into   l_mtl_locator_type
                                    from   mtl_secondary_inventories
                                    where  secondary_inventory_name
                                               = v_wlji_compl_subinv(v_idx)
                                    and    organization_id = v_wlji_org_id(v_idx);

                                    if v_wlji_compl_subinv(v_idx)
                                         = l_cur_compl_subinv
                                    then
                                        v_wlji_compl_loc_id(v_idx)
                                             := l_cur_compl_locator;
                                    else
                                        if l_mtl_locator_type = 2 then
                                            l_aux_mesg := '';
                                            handle_invalid_field(
                                                'COMPLETION LOCATOR',
                                                l_aux_mesg, l_stmt_num);
                                            l_error_code := -1;
                                            l_error_count := l_error_count + 1;
                                            GOTO skip_resched_validations;
                                        end if;
                                    end if;
                                END IF;

l_stmt_num := 590.5;
                                SELECT  nvl(msub.locator_type, 1) sub_loc_control,
                                        MP.stock_locator_control_code org_loc_control,
                                        MS.restrict_locators_code,
                                        MS.location_control_code item_loc_control
                                into    l_sub_loc_control,
                                        l_org_loc_control,
                                        l_restrict_locators_code,
                                        l_item_loc_control
                                FROM    mtl_system_items MS,
                                        mtl_secondary_inventories MSUB,
                                        mtl_parameters MP
                                WHERE   MP.organization_id = v_wlji_org_id(v_idx)
                                AND     MS.organization_id = v_wlji_org_id(v_idx)
                                AND     MS.inventory_item_id = v_wlji_item_id(v_idx)
                                AND     MSUB.secondary_inventory_name
                                            = v_wlji_compl_subinv(v_idx)
                                AND     MSUB.organization_id = v_wlji_org_id(v_idx);

l_stmt_num := 590.6;
                                l_locator_id := v_wlji_compl_loc_id(v_idx);
                                WIP_LOCATOR.validate(
                                        v_wlji_org_id(v_idx),
                                        v_wlji_item_id(v_idx),
                                        v_wlji_compl_subinv(v_idx),
                                        l_org_loc_control,
                                        l_sub_loc_control,
                                        l_item_loc_control,
                                        l_restrict_locators_code,
                                        NULL, NULL, NULL, NULL,
                                        l_locator_id,
                                        dummy_segs,
                                        l_temp_boolean);
                                IF not l_temp_boolean THEN
                                    l_aux_mesg := '';
                                    handle_invalid_field(
                                        'COMPLETION LOCATOR', l_aux_mesg, l_stmt_num);
                                    l_error_code := -1;
                                    l_error_count := l_error_count + 1;
                                    GOTO skip_resched_validations;
                                end if;

l_stmt_num := 590.7;
                            -- Validation added for Bug 4919218: End
                            else
                                if lbji_debug = 'Y' then
                                    fnd_file.put_line(fnd_file.log,
                                        'Update BOM/Routing alternates for standard job..');
                                end if;
                            end if;

                        end if;     -- }} if std-job
                        ---------------------------------
                        -- }}} End: Update of alternates
                        ---------------------------------

                        --------------------------------------------
                        -- {{{ Begin: Update of references (non-std)
                        --------------------------------------------
                        -- Non standard job bom/routing reference update.
                        -- The assumption is that this module will NOT update the
                        -- qty/dates/etc.,they will be taken care in the later modules.
                        -- This module will just look at the reference info, and assume
                        -- qty/date/etc to be same as the old values.
                        -- Alt routing/bom will be taken care of here
                        if l_cur_job_type = 3 then      --  {{ if l_cur_job_type = 3
l_stmt_num:= 600;
                            l_chg_bom_ref  := 0;
                            l_chg_rtg_ref  := 0;
                            l_chg_ref_flag := 0;

                            if v_wlji_rtg_ref_id(v_idx) is not null then
                                l_chg_rtg_ref := 1;
                            end if;

                            if v_wlji_bom_ref_id(v_idx) is not null then
                                l_chg_bom_ref := 1;
                            end if;


                            -- {{ only allow change for unreleased job, l_cur_status_type = 1
                            if (l_chg_bom_ref = 1 or l_chg_rtg_ref = 1) and
                               l_cur_status_type = 1
                            then
                                l_chg_ref_flag := 1;
l_stmt_num:= 610;
                                if l_chg_bom_ref = 1 then
                                    wsmputil.validate_non_std_references(
                                        p_assembly_item_id       => null,
                                        p_routing_reference_id   => null,
                                        p_bom_reference_id       => v_wlji_bom_ref_id(v_idx),
                                        p_alt_routing_designator => null,
                                        p_alt_bom_designator     => v_wlji_alt_bom(v_idx),
                                        p_organization_id        => v_wlji_org_id(v_idx),
                                        p_start_date             => sysdate, -- not used after all
                                        p_end_date               => null,
                                        p_start_quantity         => null,
                                        p_mrp_net_quantity       => dummy_number,
                                        p_class_code             => null,
                                        p_completion_subinventory=> null,
                                        p_completion_locator_id  => null,
                                        p_firm_planned_flag      => dummy_number,
                                        p_bom_revision           => v_wlji_bom_revision(v_idx),
                                        p_bom_revision_date      => v_wlji_bom_rev_date(v_idx),
                                        p_routing_revision       => dummy_varchar,
                                        p_routing_revision_date  => dummy_date,
                                        x_routing_seq_id         => dummy_number,
                                        x_bom_seq_id             => l_common_bom_seq_id,
                                        validation_level         => 1,
                                        x_error_code             => l_error_code,
                                        x_err_msg                => l_error_msg);

                                    if l_error_code <> 0 then
                                        handle_error( l_error_code, l_error_msg, l_stmt_num);
                                        l_error_code := -1;
                                        GOTO skip_resched_validations;
                                    end if;
                                end if;
l_stmt_num:= 620;
                                if l_chg_rtg_ref = 1 then
                                    wsmputil.validate_non_std_references(
                                        p_assembly_item_id       => null,
                                        p_routing_reference_id   => v_wlji_rtg_ref_id(v_idx),
                                        p_bom_reference_id       => null,
                                        p_alt_routing_designator => v_wlji_alt_rtg(v_idx),
                                        p_alt_bom_designator     => null,
                                        p_organization_id        => v_wlji_org_id(v_idx),
                                        p_start_date             => sysdate, -- not used after all
                                        p_end_date               => null,
                                        p_start_quantity         => null,
                                        p_mrp_net_quantity       => dummy_number,
                                        p_class_code             => null,
                                        p_completion_subinventory=> null,
                                        p_completion_locator_id  => null,
                                        p_firm_planned_flag      => dummy_number,
                                        p_bom_revision           => dummy_varchar,
                                        p_bom_revision_date      => dummy_date,
                                        p_routing_revision       => v_wlji_rtg_revision(v_idx),
                                        p_routing_revision_date  => v_wlji_rtg_rev_date(v_idx),
                                        x_routing_seq_id         => l_rtg_seq_id,
                                        x_bom_seq_id             => dummy_number,
                                        validation_level         => 2,
                                        x_error_code             => l_error_code,
                                        x_err_msg                => l_error_msg);
                                    if l_error_code <> 0 then
                                        handle_error( l_error_code, l_error_msg, l_stmt_num);
                                        l_error_code := -1;
                                        GOTO skip_resched_validations;
                                    end if;
l_stmt_num:= 630;
                                    -- find the common rtg seq id
                                    l_error_msg := NULL;
                                    wsmputil.find_common_routing(
                                        p_routing_sequence_id        => l_rtg_seq_id,
                                        p_common_routing_sequence_id => l_common_rtg_seq_id,
                                        x_err_code                   => l_error_code,
                                        x_err_msg                    => l_error_msg);

                                     if l_error_code <> 0 OR l_error_msg IS NOT NULL then
                                        handle_error( l_error_code, l_error_msg, l_stmt_num);
                                        l_error_code := -1;
                                        GOTO skip_resched_validations;
                                    end if;
                                end if;

                                if l_chg_rtg_ref = 1 and l_chg_bom_ref = 0 then
                                    l_common_bom_seq_id        := l_cur_com_bom_seq_id;
                                    --v_wlji_bom_rev_date(v_idx) := l_cur_bom_rev_date; -- DEL bug3202534
                                    --v_wlji_bom_revision(v_idx) := l_cur_bom_revision; -- DEL bug3202534
                                    v_wlji_bom_ref_id(v_idx)   := l_cur_bom_ref_id;
                                    v_wlji_alt_bom(v_idx)      := l_cur_alt_bom;
                                end if;

                                if l_chg_rtg_ref = 0 AND l_chg_bom_ref = 1 then
                                    l_common_rtg_seq_id        := l_cur_com_rtg_seq_id;
                                    --v_wlji_rtg_rev_date(v_idx) := l_cur_rtg_rev_date; -- DEL bug3202534
                                    --v_wlji_rtg_revision(v_idx) := l_cur_rtg_revision; -- DEL bug3202534
                                    v_wlji_rtg_ref_id(v_idx)   := l_cur_rtg_ref_id;
                                    v_wlji_alt_rtg(v_idx)      := l_cur_alt_rtg;
                                end if;

                            end if; -- }} old_status_type = 1

                            -- user can update the bom_reference and the routing reference of a
                            -- non-standard job only if the job is unreleased.
                            if (l_chg_bom_ref = 1 or l_chg_rtg_ref = 1) and
                                l_cur_status_type <> 1
                            then
                                fnd_file.put_line(fnd_file.log,
                                    'Ignoring the following fields if provided by user: ' ||
                                    'Routing_Reference_Id, Bom_Reference_Id, ' ||
                                    'Alternate_Bom_Designator, Alternate_Routing_Designator');
                            end if;

                            if l_chg_ref_flag = 0 then
                                l_common_bom_seq_id        := l_cur_com_bom_seq_id;
                                --v_wlji_bom_rev_date(v_idx) := l_cur_bom_rev_date; -- DEL bug3202534
                                --v_wlji_bom_revision(v_idx) := l_cur_bom_revision; -- DEL bug3202534
                                v_wlji_bom_ref_id(v_idx)   := l_cur_bom_ref_id;
                                v_wlji_alt_bom(v_idx)      := l_cur_alt_bom;
                                l_common_rtg_seq_id        := l_cur_com_rtg_seq_id;
                                --v_wlji_rtg_rev_date(v_idx) := l_cur_rtg_rev_date; -- DEL bug3202534
                                --v_wlji_rtg_revision(v_idx) := l_cur_rtg_revision; -- DEL bug3202534
                                v_wlji_rtg_ref_id(v_idx)   := l_cur_rtg_ref_id;
                                v_wlji_alt_rtg(v_idx)      := l_cur_alt_rtg;
                            else
                                if lbji_debug = 'Y' then
                                    fnd_file.put_line(fnd_file.log,
                                        'Update BOM/Routing references for non-standard job..');
                                end if;
                            end if;

                        end if; -- }} job type = 3
                        ---------------------------------
                        -- }}} End: Update of references
                        ---------------------------------

                        --------------------------------------------------
                        -- {{{ Begin: Update of revision and revision_date
                        --------------------------------------------------
                        -- BA: bug3202534
                        begin

                            l_chg_rtg_rev  := 0;
                            l_chg_bom_rev  := 0;
                            l_chg_rev_flag := 0;

l_stmt_num:= 640;
                            if (v_wlji_rtg_revision(v_idx) is not null and
                                v_wlji_rtg_revision(v_idx) <> l_cur_rtg_revision) or
                               (v_wlji_rtg_rev_date(v_idx) is not null and
                                v_wlji_rtg_rev_date(v_idx) <> l_cur_rtg_rev_date)
                            then
                                l_chg_rtg_rev := 1;
                            end if;

                            if (v_wlji_bom_revision(v_idx) is not null and
                                v_wlji_bom_revision(v_idx) <> l_cur_bom_revision) or
                               (v_wlji_bom_rev_date(v_idx) is not null and
                                v_wlji_bom_rev_date(v_idx) <> l_cur_bom_rev_date)
                            then
                                l_chg_bom_rev := 1;
                            end if;

                            -- {{ only allow change for unreleased job, l_cur_status_type = 1
                            if (l_chg_bom_rev = 1 or l_chg_rtg_rev = 1) and
                               l_cur_status_type = 1
                            then
                                l_chg_rev_flag := 1;
l_stmt_num:= 650;
                                if v_wlji_fusd(v_idx) is null then
                                    v_wlji_fusd(v_idx) := l_cur_start_date;
                                end if;

                                if v_wlji_fusd(v_idx) > SYSDATE then
                                    l_rev_date := v_wlji_fusd(v_idx);
                                else
                                    l_rev_date := SYSDATE;
                                end if;

                                if l_chg_bom_rev = 1 then
                                    -- validate bom rev/rev_date
                                    if l_cur_job_type = 1 then -- standard job
l_stmt_num:= 660.1;
                                        wip_revisions.bom_revision (
                                                v_wlji_org_id(v_idx),
                                                v_wlji_item_id(v_idx),
                                                v_wlji_bom_revision(v_idx),
                                                v_wlji_bom_rev_date(v_idx),
                                                l_rev_date);
                                    else
                                        if(v_wlji_bom_ref_id(v_idx) IS NOT NULL) then
l_stmt_num:= 660.2;
                                            wip_revisions.bom_revision (
                                                    v_wlji_org_id(v_idx),
                                                    v_wlji_bom_ref_id(v_idx),
                                                    v_wlji_bom_revision(v_idx),
                                                    v_wlji_bom_rev_date(v_idx),
                                                    l_rev_date);
                                        end if;
                                    end if;
                                end if;

                                if l_chg_rtg_rev = 1 then
                                    -- validate rtg rev/rev_date
                                    if l_cur_job_type = 1 then -- standard job
l_stmt_num:= 670.1;
                                        wip_revisions.routing_revision (
                                                v_wlji_org_id(v_idx),
                                                v_wlji_item_id(v_idx),
                                                v_wlji_rtg_revision(v_idx),
                                                v_wlji_rtg_rev_date(v_idx),
                                                l_rev_date);
                                    else
                                        if(v_wlji_rtg_ref_id(v_idx) IS NOT NULL) then
l_stmt_num:= 670.2;
                                            wip_revisions.routing_revision (
                                                    v_wlji_org_id(v_idx),
                                                    v_wlji_rtg_ref_id(v_idx),
                                                    v_wlji_rtg_revision(v_idx),
                                                    v_wlji_rtg_rev_date(v_idx),
                                                    l_rev_date);
                                        end if;
                                    end if;
                                end if;

                                if l_chg_rtg_rev = 1 and l_chg_bom_rev = 0 then
                                    v_wlji_bom_rev_date(v_idx) := l_cur_bom_rev_date;
                                    v_wlji_bom_revision(v_idx) := l_cur_bom_revision;
                                end if;

                                if l_chg_rtg_rev = 0 and l_chg_bom_rev = 1 then
                                    v_wlji_rtg_rev_date(v_idx) := l_cur_rtg_rev_date;
                                    v_wlji_rtg_revision(v_idx) := l_cur_rtg_revision;
                                end if;

                            end if; -- }} old_status_type = 1

                            -- user can update the revision and revision date of a
                            -- job only if the job is unreleased.
                            if (l_chg_rtg_rev = 1 or l_chg_bom_rev = 1) and
                                l_cur_status_type <> 1
                            then
                                fnd_file.put_line(fnd_file.log,
                                    'Ignoring the following fields if provided by user: ' ||
                                    'Routing_Revision, Routing_Revision_Date, '||
                                    'Bom_Revision, Bom_Revision_Date, ' );
                            end if;

                            if l_chg_rev_flag = 0 then
                                v_wlji_bom_rev_date(v_idx) := l_cur_bom_rev_date;
                                v_wlji_bom_revision(v_idx) := l_cur_bom_revision;
                                v_wlji_rtg_rev_date(v_idx) := l_cur_rtg_rev_date;
                                v_wlji_rtg_revision(v_idx) := l_cur_rtg_revision;
                            else
                                if lbji_debug = 'Y' then
                                    fnd_file.put_line(fnd_file.log,
                                        'Update BOM/Routing revision or revision date ...');
                                end if;
                            end if;
                        end;
                        -- EA: bug3202534
                        ------------------------------------------------
                        -- }}} End: Update of revision and revision_date
                        ------------------------------------------------


l_stmt_num := 700;
                        -- Validation before updating other columns
                        -- if the user wants to update only the reference, the wo/wro/wor/woy
                        -- updates are not needed
                        if (l_cur_job_type = 3) AND
                           (
                            ((v_wlji_firm_planned_flag(v_idx) is null) or
                             (v_wlji_firm_planned_flag(v_idx) is not null and
                              v_wlji_firm_planned_flag(v_idx)=l_cur_firm_planned_flag))
                            and
                            ((v_wlji_status_type(v_idx) is null) or
                             (v_wlji_status_type(v_idx) is not null and
                              v_wlji_status_type(v_idx)=l_cur_status_type))
                            and
                            ((v_wlji_date_released(v_idx) is null) or
                             (v_wlji_date_released(v_idx) is not null and
                              v_wlji_date_released(v_idx)=l_cur_date_released))
                            and
                            ((v_wlji_start_quantity(v_idx) is null) or
                             (v_wlji_start_quantity(v_idx) is not null and
                              v_wlji_start_quantity(v_idx)=l_cur_start_qty))
                            and
                            ((v_wlji_net_quantity(v_idx) is null) or
                             (v_wlji_net_quantity(v_idx) is not null and
                              v_wlji_net_quantity(v_idx)=l_cur_net_qty))
                            and
                            ((v_wlji_lucd(v_idx) is null) or
                             (v_wlji_lucd(v_idx) is not null and
                              v_wlji_lucd(v_idx)=l_cur_schd_compl_date))
                            and
                            ((v_wlji_fusd(v_idx) is null) or
                             (v_wlji_fusd(v_idx) is not null and
                              v_wlji_fusd(v_idx)=l_cur_schd_start_date))
                            and
                            ((v_wlji_coproducts_supply(v_idx) is null) or
                             (v_wlji_coproducts_supply(v_idx) is not null and
                              v_wlji_coproducts_supply(v_idx)=l_cur_coprod_supply))
                           )
                        then
                            l_skip_update_wo:= 1;
                        end if;
                        if lbji_debug = 'Y' then
                            if l_skip_update_wo = 1 then
                                fnd_file.put_line(fnd_file.log,
                                    'Planning to skip update of wo, wor, wro');
                            else
                                fnd_file.put_line(fnd_file.log,
                                    'Planning to update wo, wor, wro');
                            end if;
                        end if;


l_stmt_num := 710;
                        -- if the old firm_planned flag was 1, and the user populated null
                        -- while updating the job, NO changes in quantity and date allowed.
                        -- If the user changed the flag, this change is considered BEFORE
                        -- making a decision whether to allow update of qnty/date or not.
                        if v_wlji_firm_planned_flag(v_idx) is NULL then
                            v_wlji_firm_planned_flag(v_idx) := l_cur_firm_planned_flag;
                        end if;

                        -- for non-std jobs, the firm flag is always 2. User cannot update it to 1.
                        if l_cur_job_type = 3 then
                            if v_wlji_firm_planned_flag(v_idx) is not null and
                               v_wlji_firm_planned_flag(v_idx) <> 2 then
                                l_aux_mesg := '';
                                handle_invalid_field('Firm_Planned_Flag', l_aux_mesg, l_stmt_num);
                                l_error_code := -1;
                                GOTO skip_resched_validations;
                            end if;
                        end if;

l_stmt_num := 720;
                        -- {{ Validate status
                        IF v_wlji_status_type(v_idx) is null THEN
                            v_wlji_status_type(v_idx) := l_cur_status_type;
                            -- update of released date only is not allowed
                            v_wlji_date_released(v_idx) := l_cur_date_released;
                        ELSIF v_wlji_status_type(v_idx) = l_cur_status_type THEN
                            -- update of released date only is not allowed
                            v_wlji_date_released(v_idx) := l_cur_date_released;
                        END IF;

                        -- status type should be one of RELEASED, HOLD, CANCELLED, UNRELEASED
                        if v_wlji_status_type(v_idx) not in (1,3,6,7) then
                            l_aux_mesg := '';
                            handle_invalid_field('Status Type', l_aux_mesg, l_stmt_num);
                            l_error_code := -1;
                            GOTO skip_resched_validations;
                        else  -- {{ valid status type
                            if l_cur_status_type = 7   then     -- cancelled
                                l_error_code := -1;
                                handle_errmsg_name(
                                    'WSM','WSM_RESCHEDULE_CANCEL_JOB',l_stmt_num);
                                GOTO skip_resched_validations;
                            end if;
l_stmt_num := 720.1;
                            -- if the job is being released from an unreleased state...
                            if l_cur_date_released is null and
                               v_wlji_status_type(v_idx) = 3
                            then
                                if (v_wlji_date_released(v_idx) is null ) then
                                    v_wlji_date_released(v_idx) := sysdate;
                                end if;
                                if (v_wlji_date_released(v_idx) > sysdate ) then
                                    l_error_code := -1;
                                    handle_errmsg_name(
                                        'WIP','WIP_INVALID_RELEASE_DATE',l_stmt_num);
                                    GOTO skip_resched_validations;
                                end if;

                                -- BEGIN: BUG3126650
                                l_temp_num := WSMPUTIL.GET_INV_ACCT_PERIOD(
                                                x_err_code         => l_error_code,
                                                x_err_msg          => l_error_msg,
                                                p_organization_id  => v_wlji_org_id(v_idx),
                                                p_date             => trunc(nvl(v_wlji_date_released(v_idx),sysdate)));
                                IF (l_error_code <> 0) THEN
                                    handle_error( l_error_code, l_error_msg, l_stmt_num);
                                    GOTO skip_resched_validations;
                                END IF;
                                -- END: BUG3126650

                            elsif l_cur_date_released is not null and
                                v_wlji_status_type(v_idx) = 1
                            then
                                v_wlji_date_released(v_idx) := null;
                            else
                                -- ignore release date populated by user otherwise
                                v_wlji_date_released(v_idx) := l_cur_date_released;
                            end if;

                            if ((l_cur_status_type = 3 and v_wlji_status_type(v_idx) = 1) OR
                                (l_cur_status_type = 6 and v_wlji_status_type(v_idx) = 1))
                            then
                                if (g_charges_exist_all) then
                                    l_error_code := -1;
                                    handle_errmsg_name(
                                        'WIP','WIP_UNRLS_JOB/SCHED',l_stmt_num);
                                    GOTO skip_resched_validations;

                                else
l_stmt_num := 720.2;
                                    -- osp begin
                                    if wip_osp.po_req_exists (
                                            v_wlji_wip_entity_id(v_idx),
                                            null,
                                            v_wlji_org_id(v_idx),
                                            null, 5)
                                    then
                                        fnd_message.set_name('WSM', 'WSM_JOB_PURCHASE_REQ');
                                        l_error_msg := fnd_message.get;
                                        l_warning_count := l_warning_count + 1;
                                        handle_warning(
                                            p_err_msg    => l_error_msg,
                                            p_header_id  => v_wlji_header_id(v_idx),
                                            p_request_id => v_wlji_request_id(v_idx),
                                            p_program_id => v_wlji_program_id(v_idx),
                                            p_program_application_id => v_wlji_program_appl_id(v_idx));
                                    end if;
                                    -- osp end
                                end if;
                            end if;
l_stmt_num := 720.3;
                            if (l_cur_status_type IN (1,6)) and
                               (v_wlji_status_type(v_idx) = 3) and
                                wsmputil.WSM_ESA_ENABLED(
                                            p_wip_entity_id => v_wlji_wip_entity_id(v_idx),
                                            err_code        => l_error_code,
                                            err_msg         => l_error_msg,
                                            p_org_id        => '',
                                            p_job_type      => '') = 1
                            then

                                if v_wlji_class_code(v_idx) is null then
                                    l_temp_class := l_cur_class_code;
                                else
                                    l_temp_class := v_wlji_class_code(v_idx);
                                end if;
l_stmt_num := 720.4;
                                select est_scrap_account,
                                       est_scrap_var_account
                                into   l_est_scrap_account,
                                       l_est_scrap_var_account
                                from   wip_accounting_classes
                                where  class_code = l_temp_class
                                and    organization_id = v_wlji_org_id(v_idx);

                                if l_est_scrap_account is null or
                                   l_est_scrap_var_account is null
                                then
                                    fnd_message.set_name('WSM','WSM_NO_WAC_SCRAP_ACC');
                                    fnd_message.set_token('CC', l_temp_class);
                                    l_error_msg := fnd_message.get;
                                    l_error_code := -1;
                                    handle_error(l_error_code, l_error_msg,  l_stmt_num);
                                    GOTO skip_resched_validations;
                                end if;
                                    if l_est_scrap_account is null or
                                    l_est_scrap_var_account is null
                                then
                                    fnd_message.set_name('WSM','WSM_NO_WAC_SCRAP_ACC');
                                    fnd_message.set_token('CC', l_temp_class);
                                    l_error_msg := fnd_message.get;
                                    l_error_code := -1;
                                    handle_error(l_error_code, l_error_msg,  l_stmt_num);
                                    GOTO skip_resched_validations;
                                end if;
                            end if;
                        end if;  -- }} valid status type
                        if lbji_debug = 'Y' then
                            fnd_file.put_line(fnd_file.log,
                                    'Validate reschedule Job_Status .. OK');
                        end if;
                        -- }} Validate status

l_stmt_num := 730;
                        -- {{ Validate quantity
                        IF v_wlji_start_quantity(v_idx) IS NULL THEN
                            v_wlji_start_quantity(v_idx) := l_cur_start_qty;
                        ELSIF  v_wlji_start_quantity(v_idx) = l_cur_start_qty THEN
                            NULL;
                        -- Bug 5661656: Allow Job to be rescheduled(Update Qty/Dates) when firm_planned_flag is also updated.
                        -- ELSIF v_wlji_firm_planned_flag(v_idx) = 1 THEN
                        ELSIF v_wlji_firm_planned_flag(v_idx) = 1 AND NVL(l_cur_firm_planned_flag, 2) = 1 THEN
                            l_error_code := -1;
                            handle_errmsg_name('WSM', 'WSM_JOB_FIRM', l_stmt_num);
                            GOTO skip_resched_validations;
                        ELSE
                            begin
                                if (l_cur_status_type IN (3,6) AND
                                    v_wlji_status_type(v_idx) IN (1,3,6)) then
                                    if (g_charges_exist_all) then
                                        raise e_invalid_qty;
                                    end if;
                                end if;
                            exception
                                when e_invalid_qty then
                                    l_error_code := -1;
                                    handle_errmsg_name('WSM', 'WSM_QNTY_NOCHANGE', l_stmt_num);
                                    GOTO skip_resched_validations;
                            end;
                        END IF;
                        if lbji_debug = 'Y' then
                            fnd_file.put_line(fnd_file.log,
                                    'Validate reschedule Start_Quantity .. OK');
                        end if;
                        -- }} Validate quantity

l_stmt_num := 740;
                        -- {{ osp begin
                        -- create requisitions/additional reuisitions under following conditions:
                        -- 1. user updates only status from unreleased to released, quantity unchanged
                        -- 2. user updates only quantity (increases) for a released job, status is unchanged
                        -- 3. user updates staus to released, and increases quantity.

                        if WSMPLCVA.v_org(v_wlji_org_id(v_idx)).PO_CREATION_TIME
                           <> WIP_CONSTANTS.MANUAL_CREATION
                        then
                            if (v_wlji_status_type(v_idx) = 3 and l_cur_status_type = 1) then
                                if wsmputil.check_osp_operation(
                                        v_wlji_wip_entity_id(v_idx),
                                        l_osp_op_seq_num,
                                        v_wlji_org_id(v_idx))
                                then
                                    g_num_of_osp_exists := g_num_of_osp_exists + 1;
                                    wip_osp.create_requisition(
                                        p_wip_entity_id          => v_wlji_wip_entity_id(v_idx),
                                        p_organization_id        => v_wlji_org_id(v_idx),
                                        p_repetitive_schedule_id => null,
                                        p_operation_seq_num      => l_osp_op_seq_num,
                                        p_resource_seq_num       => null,
                                        p_run_reqimport          => wip_constants.no);
                                end if; -- check_osp_operation
                            end if;
l_stmt_num := 740.1;
                            if (v_wlji_start_quantity(v_idx) > l_cur_start_qty) AND
                               v_wlji_status_type(v_idx) = 3
                            then
                                wip_osp.create_additional_req(
                                    p_wip_entity_id          => v_wlji_wip_entity_id(v_idx),
                                    p_organization_id        => v_wlji_org_id(v_idx),
                                    p_repetitive_schedule_id => null,
                                    p_added_quantity         => (v_wlji_start_quantity(v_idx) - l_cur_start_qty),
                                    p_op_seq                 => null);
                            end if;
                        end if; -- WIP_CONSTANTS.MANUAL_CREATION
                        -- }} osp end

l_stmt_num := 750;
                        -- {{ Validate net-quantity
                        if v_wlji_net_quantity(v_idx) < 0 or
                                v_wlji_net_quantity(v_idx) > v_wlji_start_quantity(v_idx) then
                                l_aux_mesg := '';
                                handle_invalid_field('Net Quantity', l_aux_mesg, l_stmt_num);
                                l_error_code := -1;
                                GOTO skip_resched_validations;
                        end if;

                        if l_cur_job_type = 1 then
                            if (v_wlji_net_quantity(v_idx) is not null) and
                               (v_wlji_net_quantity(v_idx) <> l_cur_start_qty) and
                               -- Bug 5661656: Allow Job to be rescheduled(Update Qty/Dates) when firm_planned_flag is also updated.
                               -- (v_wlji_firm_planned_flag(v_idx) = 1) then
                               (v_wlji_firm_planned_flag(v_idx) = 1 AND NVL(l_cur_firm_planned_flag, 2) = 1) then
                                l_error_code := -1;
                                handle_errmsg_name('WSM', 'WSM_JOB_FIRM', l_stmt_num);
                                GOTO skip_resched_validations;
                            end if;

                            if (v_wlji_net_quantity(v_idx) is not null) and
                               (v_wlji_start_quantity(v_idx) is null) and
                               (v_wlji_net_quantity(v_idx) > l_cur_start_qty) then
                                l_aux_mesg := '';
                                handle_invalid_field('Net Quantity', l_aux_mesg, l_stmt_num);
                                l_error_code := -1;
                                GOTO skip_resched_validations;
                            end if;
l_stmt_num := 750.1;
                            if v_wlji_net_quantity(v_idx) is null then
                                begin
                                    select decode(wdj.primary_item_id, null, 0,
                                                  decode(wdj.net_quantity,
                                                         wdj.start_quantity,
                                                         v_wlji_start_quantity(v_idx),
                                                         least(wdj.net_quantity,
                                                               nvl(v_wlji_start_quantity(v_idx),
                                                                   wdj.net_quantity))))
                                    into   v_wlji_net_quantity(v_idx)
                                    from   wip_discrete_jobs wdj
                                    where  wdj.wip_entity_id = v_wlji_wip_entity_id(v_idx)
                                    and    wdj.organization_id = v_wlji_org_id(v_idx);
                                exception
                                    when others then
                                        l_error_code := SQLCODE;
                                        l_error_msg  :=
                                            'WSM_LBJ_INTERFACE_PVT.launch_worker (stmt# '||l_stmt_num||') '
                                           ||SUBSTR(SQLERRM, 1,1000);
                                        handle_error(l_error_code, l_error_msg, l_stmt_num);
                                        GOTO skip_resched_validations;
                                end;
                            end if;
                        end if; -- job_type
                        if lbji_debug = 'Y' then
                            fnd_file.put_line(fnd_file.log,
                                    'Validate reschedule Net_Quantity .. OK');
                        end if;
                        -- }} Validate net-quantity

l_stmt_num := 750.2;
            -- ST : Serial Support Project ----------------------
            --- Validate the start job qty and net qty ----------
            --- For serial controlled item have to be an integer...
            DECLARE
                l_serial_ctrl_code NUMBER;

            BEGIN
                select  msi.serial_number_control_code
                                into    l_serial_ctrl_code
                                from    mtl_system_items_kfv msi,wip_discrete_jobs wdj
                                where   msi.inventory_item_id = wdj.primary_item_id
                                and     msi.organization_id   = v_wlji_org_id(v_idx)
                and     wdj.wip_entity_id = v_wlji_wip_entity_id(v_idx)
                and     wdj.organization_id = v_wlji_org_id(v_idx);

                IF l_serial_ctrl_code = 2 THEN  -- Predefined serial control...

                    IF (v_wlji_start_quantity(v_idx) IS NOT NULL) AND
                       (floor(v_wlji_start_quantity(v_idx)) <> v_wlji_start_quantity(v_idx))
                    THEN
                        -- error out...
                        -- Start qty cannot be non-integer...
                         fnd_message.set_name('WSM','WSM_INVALID_JOB_TXN_QTY');
                         l_aux_mesg := fnd_message.get;
                         handle_invalid_field('START QUANTITY', l_aux_mesg, l_stmt_num);
                         l_error_code := -1;
                         l_error_count := l_error_count + 1;
                         GOTO skip_resched_validations;
                    END IF;

                    IF (v_wlji_net_quantity(v_idx) IS NOT NULL) and
                       floor(v_wlji_net_quantity(v_idx)) <> v_wlji_net_quantity(v_idx)
                    THEN
                        -- error out...
                        -- Start qty cannot be non-integer...
                         fnd_message.set_name('WSM','WSM_INVALID_JOB_TXN_QTY');
                         l_aux_mesg := fnd_message.get;
                         handle_invalid_field('NET QUANTITY', l_aux_mesg, l_stmt_num);
                         l_error_code := -1;
                         l_error_count := l_error_count + 1;
                         GOTO skip_resched_validations;
                    END IF;
                END IF;
               END;
               -- ST : Serial Support Project ----------------------
               --- Validate the start job qty and net qty ----------

l_stmt_num := 760;
                        -- {{ Validate dates (for update)
                        -- Bug 5661656: Allow Job to be rescheduled(Update Qty/Dates) when firm_planned_flag is also updated.
                        -- if ((v_wlji_firm_planned_flag(v_idx) = 1) AND
                        if ((v_wlji_firm_planned_flag(v_idx) = 1 AND NVL(l_cur_firm_planned_flag, 2) = 1) AND
                            (((v_wlji_fusd(v_idx) IS NOT NULL) AND
                              (v_wlji_fusd(v_idx) <> l_cur_start_date))
                             OR
                             ((v_wlji_lucd(v_idx) IS NOT NULL) AND
                              (v_wlji_lucd(v_idx) <> l_cur_complete_date))))
                        then
                            l_error_code := -1;
                             handle_errmsg_name('WSM', 'WSM_JOB_FIRM', l_stmt_num);
                            GOTO skip_resched_validations;
                        end if;

                        IF ( ((v_wlji_fusd(v_idx) IS NULL) AND
                              (v_wlji_lucd(v_idx) IS NULL))
                             OR
                             ((v_wlji_fusd(v_idx) IS NOT NULL) AND
                              (v_wlji_lucd(v_idx) IS NOT NULL) AND
                              (v_wlji_scheduling_method(v_idx) <> 1)) )
                        THEN
                            v_wlji_scheduling_method(v_idx) := 3;
                        END IF;

                        l_error_msg := NULL;
                        IF v_wlji_scheduling_method(v_idx) = 3 THEN

                            if (v_wlji_fusd(v_idx) is null) then
                                v_wlji_fusd(v_idx) := l_cur_start_date;
                            end if;
                            if (v_wlji_lucd(v_idx) is null)  then
                                v_wlji_lucd(v_idx) := l_cur_complete_date;
                            end if;

                            if ((v_wlji_fusd(v_idx) <> l_cur_start_date) and
                                g_charges_exist_shopfloor)
                            then
                                -- bugfix 3284761, in option c, we will ignore v_wlji_fusd
                                -- if it is different form l_cur_start_date and charge exists
                                v_wlji_fusd(v_idx) := l_cur_start_date;
                            end if;

                            if  (NOT(g_charges_exist_shopfloor) and -- added bug 3423195
                                 v_wlji_fusd(v_idx) > v_wlji_lucd(v_idx)) then
                                l_aux_mesg := '';
                                handle_errmsg_name('WSM', 'WSM_FUSD_GT_LUCD', l_stmt_num);
                                l_error_code := -1;
                                GOTO skip_resched_validations;
                            end if;

                        -- BA: BUG 3479666
                        ELSIF v_wlji_scheduling_method(v_idx) = 1 THEN
                            if(v_wlji_fusd(v_idx) is not null) then
                                l_scheduling_mode := WIP_CONSTANTS.FORWARDS;
                            else
                                l_scheduling_mode := WIP_CONSTANTS.BACKWARDS;
                            end if;
                        -- EA: BUG 3479666

                        ELSIF v_wlji_scheduling_method(v_idx) = 2 THEN
                            if (v_wlji_fusd(v_idx) is not null) then
l_stmt_num := 760.1;
                                IF ((v_wlji_fusd(v_idx) <> l_cur_start_date) and g_charges_exist_shopfloor)
                                THEN
                                    l_aux_mesg := '';
                                    handle_invalid_field('Start Date', l_aux_mesg, l_stmt_num);
                                    l_error_code := -1;
                                    GOTO skip_resched_validations;
                                ELSE
l_stmt_num := 760.2;
                                    v_wlji_lucd(v_idx) := wsmputil.GET_SCHEDULED_DATE(
                                            v_wlji_org_id(v_idx),
                                            v_wlji_item_id(v_idx),
                                            'F',
                                            v_wlji_fusd(v_idx),
                                            l_error_code,
                                            l_error_msg,
                                            v_wlji_start_quantity(v_idx));  --Fixed bug # 2313574
                                END IF;
                            elsif (v_wlji_lucd(v_idx) is not null) then
l_stmt_num := 760.3;
                                v_wlji_fusd(v_idx) := wsmputil.GET_SCHEDULED_DATE (
                                        v_wlji_org_id(v_idx),
                                        v_wlji_item_id(v_idx),
                                        'B',
                                        v_wlji_lucd(v_idx),
                                        l_error_code,
                                        l_error_msg,
                                        v_wlji_start_quantity(v_idx));  --Fixed bug # 2313574
                            end if;

                        END IF;

                        if l_error_code <> 0 OR l_error_msg IS NOT NULL then
                            handle_error( l_error_code, l_error_msg, l_stmt_num);
                            l_error_code := -1;
                            GOTO skip_resched_validations;
                        end if;
                        if lbji_debug = 'Y' then
                            fnd_file.put_line(fnd_file.log,
                                    'Validate reschedule Dates .. OK');
                        end if;
                        -- }} Validate dates


l_stmt_num := 770;
                        -- {{ validate coproducts
                        if ((v_wlji_coproducts_supply(v_idx) IS NOT NULL) and
                           (v_wlji_coproducts_supply(v_idx) NOT IN (1,2))) then
                            l_aux_mesg := '';
                            handle_invalid_field('Coproducts Supply', l_aux_mesg, l_stmt_num);
                            l_error_code := -1;
                            GOTO skip_resched_validations;
                        end if;
                        if lbji_debug = 'Y' then
                            fnd_file.put_line(fnd_file.log,
                                    'Validate reschedule Coproducts_Supply .. OK');
                        end if;
                        -- }} validate coproducts

<< skip_resched_validations >>

                        if l_error_code <> 0 then
                            l_error_count := l_error_count + 1;
                            GOTO abort_this_job;
                        end if;

                        if l_cur_job_type = 3 then
                            if l_cur_status_type = 3 then
                                l_common_rtg_seq_id := l_cur_com_rtg_seq_id;
                                l_common_bom_seq_id := l_cur_com_bom_seq_id;
                            end if;
                            if l_cur_status_type = 1 then
                                if l_chg_bom_ref = 0 and l_chg_rtg_ref = 0 then
                                    l_common_rtg_seq_id := l_cur_com_rtg_seq_id;
                                    l_common_bom_seq_id := l_cur_com_bom_seq_id;
                                end if;
                            end if;
                        end if; -- job type=3

                    end if; --load_type 6

-- ===========================================================================================
-- END: Reschedule (Update) Job Validations  }}}
-- ===========================================================================================



-- ==============================================================================================
-- BEGIN: WRITING INTO BASE TABLES {{{
-- ==============================================================================================

                    -- ---------------------------------------------------
                    -- {{{ Begin: Write WE, WDJ etc. for job creation only
                    -- ---------------------------------------------------
                    if v_wlji_load_type(v_idx) = 5 then
l_stmt_num := 800;
            g_skip_wlbj := 1;   --OPTII-PERF
                        build_job_header_info(
                            p_common_routing_sequence_id=> l_common_rtg_seq_id,
                            p_common_bill_sequence_id   => l_common_bom_seq_id,
                            p_status_type               => v_wlji_status_type(v_idx),
                            p_class_code                => v_wlji_class_code(v_idx),
                            p_org_id                    => v_wlji_org_id(v_idx),
                            p_wip_entity_id             => v_wlji_wip_entity_id(v_idx),
                            p_last_updt_date            => v_wlji_last_updt_date(v_idx),
                            p_last_updt_by              => v_wlji_last_updt_by(v_idx),
                            p_creation_date             => v_wlji_creation_date(v_idx),
                            p_created_by                => v_wlji_created_by(v_idx),
                            p_last_updt_login           => v_wlji_last_updt_login(v_idx),
                            p_request_id                => v_wlji_request_id(v_idx),
                            p_program_appl_id           => v_wlji_program_appl_id(v_idx),
                            p_program_id                => v_wlji_program_id(v_idx),
                            p_prog_updt_date            => v_wlji_prog_updt_date(v_idx),
                            p_source_line_id            => v_wlji_src_line_id(v_idx),
                            p_source_code               => v_wlji_source_code(v_idx),
                            p_description               => v_wlji_description(v_idx),
                            p_item                      => v_wlji_item_id(v_idx),
                            p_job_type                  => v_wlji_job_type(v_idx),
                            p_bom_reference_id          => v_wlji_bom_ref_id(v_idx),
                            p_routing_reference_id      => v_wlji_rtg_ref_id(v_idx),
                            p_firm_planned_flag         => v_wlji_firm_planned_flag(v_idx),
                            p_wip_supply_type           => v_wlji_wip_supply_type(v_idx),
                            -- it can be null if we need to call infinite scheduler, but wip
                            -- does not allow inserting null, insert sysdate temporarily
                            p_job_scheduled_start_date  => nvl(v_wlji_fusd(v_idx), sysdate),
                            p_job_scheduled_compl_date  => nvl(v_wlji_lucd(v_idx), sysdate),
                            p_start_quantity            => v_wlji_start_quantity(v_idx),
                            p_net_quantity              => v_wlji_net_quantity(v_idx),
                            p_coproducts_supply         => v_wlji_coproducts_supply(v_idx),
                            p_bom_revision              => v_wlji_bom_revision(v_idx),
                            p_routing_revision          => v_wlji_rtg_revision(v_idx),
                            p_bom_revision_date         => v_wlji_bom_rev_date(v_idx),
                            p_routing_revision_date     => v_wlji_rtg_rev_date(v_idx),
                            p_lot_number                => v_wlji_lot_number(v_idx),
                            p_alt_bom_designator        => v_wlji_alt_bom(v_idx),
                            p_alt_routing_designator    => v_wlji_alt_rtg(v_idx),
                            p_priority                  => v_wlji_priority(v_idx),
                            p_due_date                  => v_wlji_due_date(v_idx),
                            p_attribute_category        => v_wlji_attribute_category(v_idx),
                            p_attribute1                => v_wlji_attribute1(v_idx),
                            p_attribute2                => v_wlji_attribute2(v_idx),
                            p_attribute3                => v_wlji_attribute3(v_idx),
                            p_attribute4                => v_wlji_attribute4(v_idx),
                            p_attribute5                => v_wlji_attribute5(v_idx),
                            p_attribute6                => v_wlji_attribute6(v_idx),
                            p_attribute7                => v_wlji_attribute7(v_idx),
                            p_attribute8                => v_wlji_attribute8(v_idx),
                            p_attribute9                => v_wlji_attribute9(v_idx),
                            p_attribute10               => v_wlji_attribute10(v_idx),
                            p_attribute11               => v_wlji_attribute11(v_idx),
                            p_attribute12               => v_wlji_attribute12(v_idx),
                            p_attribute13               => v_wlji_attribute13(v_idx),
                            p_attribute14               => v_wlji_attribute14(v_idx),
                            p_attribute15               => v_wlji_attribute15(v_idx),
                            p_job_name                  => v_wlji_job_name(v_idx),
                            p_completion_subinventory   => v_wlji_compl_subinv(v_idx),
                            p_completion_locator_id     => v_wlji_compl_loc_id(v_idx),
                            p_demand_class              => v_wlji_demand_class(v_idx),
                            p_project_id                => v_wlji_project_id(v_idx),
                            p_task_id                   => v_wlji_task_id(v_idx),
                            p_schedule_group_id         => v_wlji_schedule_group_id(v_idx),
                            p_build_sequence            => v_wlji_build_sequence(v_idx),
                            p_line_id                   => v_wlji_line_id(v_idx),
                            p_kanban_card_id            => v_wlji_kanban_card_id(v_idx),
                            p_overcompl_tol_type        => v_wlji_overcompl_tol_type(v_idx),
                            p_overcompl_tol_value       => v_wlji_overcompl_tol_value(v_idx),
                            p_end_item_unit_number      => v_wlji_end_item_unit_number(v_idx),
                            p_src_client_server         => 0,
                            p_po_creation_time          => WSMPLCVA.v_org(v_wlji_org_id(v_idx)).PO_CREATION_TIME,
                            p_date_released             => v_wlji_date_released(v_idx),
                            p_error_code                => l_error_code,
                            p_error_msg                 => l_error_msg);
                        g_skip_wlbj := NULL; --OPTII-PERF
                        if l_error_code <> 0 then
                            handle_error(l_error_code, l_error_msg,  l_stmt_num);
                            l_error_count := l_error_count + 1;
                            GOTO abort_this_job;
                        end if;


                    end if; -- load_type 5
                    -- ---------------------------------------------------
                    -- }}}   End: Write WE, WDJ etc. for job creation only
                    -- ---------------------------------------------------

                    -- ----------------------------------------------------------------
                    -- {{{ Begin: Write WO's and WCO's, job creation and alt/ref change
                    -- ----------------------------------------------------------------

                    -- in such cases, WCO records will be created first, and WO records
                    -- will be created by looking at WCO records

                    if v_wlji_load_type(v_idx) = 5 or
                       l_chg_alt_flag = 1 or
                       l_chg_ref_flag = 1 or
                       l_chg_rev_flag = 1       -- ADD: bug3202534
                    then
                       v_new_job := 1;
                        declare
                            temp_common_bom_seq_id   number;
                        begin
l_stmt_num := 810;
                            if(l_chg_alt_flag = 1 or l_chg_ref_flag = 1 or l_chg_rev_flag = 1) then
                                -- Delete WO records
                                delete from wip_operations
                                where  wip_entity_id = v_wlji_wip_entity_id(v_idx);
                                delete from wip_operation_yields
                                where  wip_entity_id = v_wlji_wip_entity_id(v_idx);
                                delete from wip_operation_resources
                                where  wip_entity_id = v_wlji_wip_entity_id(v_idx);
                                delete from wip_requirement_operations
                                where  wip_entity_id = v_wlji_wip_entity_id(v_idx);
                                delete from wip_sub_operation_resources
                                where  wip_entity_id = v_wlji_wip_entity_id(v_idx);
                                delete from wip_operation_resource_usage
                                where  wip_entity_id = v_wlji_wip_entity_id(v_idx);
                                delete from wip_op_resource_instances
                                where  wip_entity_id = v_wlji_wip_entity_id(v_idx);
                                v_new_job := 2;
                            end if;
l_stmt_num := 820;
                            -- {{ Check for disabled ops in the network,job_type 1 and 3
                            if (wsmputil.network_with_disabled_op(
                                    l_common_rtg_seq_id,
                                    v_wlji_rtg_rev_date(v_idx),
                                    l_error_code,
                                    l_error_msg) = 1)
                            then
                                fnd_message.set_name('WSM','WSM_NET_HAS_DISABLED_OP');
                                l_error_msg := fnd_message.get;
                                l_warning_count := l_warning_count + 1;
                                handle_warning(
                                    p_err_msg               => l_error_msg,
                                    p_header_id             => v_wlji_header_id(v_idx),
                                    p_request_id            => v_wlji_request_id(v_idx),
                                    p_program_id            => v_wlji_program_id(v_idx),
                                    p_program_application_id=> v_wlji_program_appl_id(v_idx));

                            end if;
                            -- }} Check for disabled ops in the network

                            if(l_chg_ref_flag = 1) then
                                temp_common_bom_seq_id := null;
                            else
                                temp_common_bom_seq_id := l_common_bom_seq_id;
                            end if;
l_stmt_num := 830;
                            if(v_wlji_scheduling_method(v_idx) = 1) then
                                l_inf_sche_flag := 'Y';
                            else
                                l_inf_sche_flag := 'N';
                            end if;
                            v_insert_wip := 1; --OPTII-PERF:By default,it is 1 for new jobs.
                                               --If phantom requirement exists, this will be Set to No.
                            build_job_copy_info(
                                p_common_routing_sequence_id    => l_common_rtg_seq_id,
                                p_common_bill_sequence_id       => temp_common_bom_seq_id,
                                p_org_id                        => v_wlji_org_id(v_idx),
                                p_wip_entity_id                 => v_wlji_wip_entity_id(v_idx),
                                p_last_updt_date                => v_wlji_last_updt_date(v_idx),
                                p_last_updt_by                  => v_wlji_last_updt_by(v_idx),
                                p_creation_date                 => v_wlji_creation_date(v_idx),
                                p_created_by                    => v_wlji_created_by(v_idx),
                                p_last_updt_login               => v_wlji_last_updt_login(v_idx),
                                p_request_id                    => v_wlji_request_id(v_idx),
                                p_program_appl_id               => v_wlji_program_appl_id(v_idx),
                                p_program_id                    => v_wlji_program_id(v_idx),
                                p_prog_updt_date                => v_wlji_prog_updt_date(v_idx),
                                p_item                          => v_wlji_item_id(v_idx),
                                p_bom_reference_id              => v_wlji_bom_ref_id(v_idx),
                                p_routing_reference_id          => v_wlji_rtg_ref_id(v_idx),
                                p_wip_supply_type               => v_wlji_wip_supply_type(v_idx),
                                p_job_scheduled_start_date      => v_wlji_fusd(v_idx),
                                p_job_scheduled_compl_date      => v_wlji_lucd(v_idx),
                                p_start_quantity                => v_wlji_start_quantity(v_idx),
                                p_bom_revision_date             => v_wlji_bom_rev_date(v_idx),
                                p_routing_revision_date         => v_wlji_rtg_rev_date(v_idx),
                                p_alt_bom_designator            => v_wlji_alt_bom(v_idx),
                                p_alt_routing_designator        => v_wlji_alt_rtg(v_idx),
                                p_header_id                     => v_wlji_header_id(v_idx),
                                p_num_of_children               => v_wlji_num_of_children(v_idx),
                                p_infinite_schedule             => l_inf_sche_flag,
                                p_error_code                    => l_error_code,
                                p_error_msg                     => l_error_msg);
                            if l_error_code <> 0 then
                                handle_error(l_error_code, l_error_msg,  l_stmt_num);
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            end if;


                            if v_wlji_mode_flag(v_idx) = 2 then
l_stmt_num := 840;
                                -- BA: bug 3299026 do not allow serial controlled component
                                select  SERIAL_NUMBER_CONTROL_CODE,
                                        revision_qty_control_code       -- Add bug 2963225
                                into    dummy_number,
                                        l_rev_control_code              -- Add bug 2963225
                                from    mtl_system_items_kfv msi
                                where   msi.inventory_item_id = v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id
                                and     msi.organization_id = v_wlji_org_id(v_idx);

                                if(dummy_number <> 1) then
                                    l_error_code := -1;
                                    handle_errmsg_name('WSM',
                                                       'WSM_SERIAL_COMP_NOT_SUPPORTED',
                                                       l_stmt_num);
                                    l_error_count := l_error_count + 1;
                                    GOTO abort_this_job;
                                end if;
                                --EA bug 3299026

                                -- {{ Check the component required at 1st op
l_stmt_num := 840.1;
                                find_copy_routing_start(
                                    v_wlji_wip_entity_id(v_idx),
                                    l_start_op_seq_num,
                                    l_start_op_seq_id,
                                    l_error_code,
                                    l_error_msg);
                                if l_error_code <> 0 OR l_error_msg IS NOT NULL then
                                    handle_error( l_error_code, l_error_msg, l_stmt_num);
                                    l_error_code := -1;
                                    l_error_count := l_error_count + 1;
                                    GOTO abort_this_job;
                                end if;
l_stmt_num := 840.2;

  /****************ADDED FOLLOWING CODE FOR 12.1 SUBSTITUTE COMPONENT PROJECT TO CHECK WHETHER THE SOURCE LOT IS OF PRIMARY COMPONENT
  OR SUBSTITUTE COMPONENT ***********************************************************************************************************/


                        BEGIN

                                SELECT 1,
                                       bic.component_item_id,
                                       bsc.substitute_item_quantity,
                                       (bsc.substitute_item_quantity/bic.component_yield_factor)
                                 INTO  l_is_src_lot_sub,
                                       l_primary_comp_item_id,
                                       l_sub_comp_bill_qpa,
                                       l_sub_comp_qpa
                                 FROM  bom_bill_of_materials bom,
                                       bom_inventory_components bic,
                                       bom_substitute_components bsc
                                 WHERE bsc.SUBSTITUTE_COMPONENT_ID = v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id
                                   AND bic.COMPONENT_SEQUENCE_ID = bsc.COMPONENT_SEQUENCE_ID
                                   AND bom.organization_id =v_wlji_org_id(v_idx)
                                   AND bic.bill_sequence_id = bom.common_bill_sequence_id
                                   AND bom.common_bill_sequence_id =l_common_bom_seq_id
                                   AND bic.implementation_date is not null
                                   AND bic.effectivity_date <= sysdate and nvl(bic.disable_date,sysdate +1) > sysdate
                                   AND (bic.operation_seq_num =  l_start_op_seq_num OR bic.operation_seq_num = 1)
                                   AND bic.item_num = (SELECT min(item_num)
                                                       FROM bom_bill_of_materials bom3,
                                                            bom_inventory_components bic3,
                                                            bom_substitute_components bsc3
                                                      WHERE bsc3.SUBSTITUTE_COMPONENT_ID = v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id
                                                        AND bic3.COMPONENT_SEQUENCE_ID = bsc3.COMPONENT_SEQUENCE_ID
                                                        AND bom3.organization_id =v_wlji_org_id(v_idx)
                                                        AND bic3.bill_sequence_id = bom3.common_bill_sequence_id
                                                        AND bom3.common_bill_sequence_id = l_common_bom_seq_id
                                                        AND bic3.implementation_date is not null
                                                        AND bic3.effectivity_date <= sysdate
                                                        AND nvl(bic3.disable_date,sysdate +1) > sysdate)
                                  AND NOT EXISTS
                                            ( SELECT 1  FROM bom_bill_of_materials bom2,
                                                             bom_inventory_components bic2
                                              WHERE bic2.component_item_id = v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id
                                              AND bom2.organization_id =v_wlji_org_id(v_idx)
                                              AND bic2.bill_sequence_id = bom2.common_bill_sequence_id
                                              AND bom2.common_bill_sequence_id =  l_common_bom_seq_id
                                              AND bic.effectivity_date <= sysdate and nvl(bic.disable_date,sysdate +1) > sysdate
                                              AND bic2.implementation_date is not null
                                              AND (bic2.operation_seq_num =  l_start_op_seq_num OR bic.operation_seq_num = 1));

                          EXCEPTION
                                  WHEN OTHERS THEN
                                    l_is_src_lot_sub :=0;



                          END;


/* END CHANGES FOR 12.1 SUBSTITUTE COMPONENT PROJECT**********************************************************
*************************************************************************************************************/

		                --Bug 5112899:Using the below sql to read
				-- BILL_QUANTITY_PER_ASSEMBLY and basis_type.
				--Sum is removed as there can not be more than
				--1 record in BOM for a given comp item id.
				--select  sum(quantity_per_assembly)

			     /* CHANGED TO DECODE FOR 12.1 SUBSTITUTE COMPONENT PROJECT */

			            /* 	select  quantity_per_assembly,BILL_QUANTITY_PER_ASSEMBLY, */
				select  decode(l_is_src_lot_sub,1,l_sub_comp_qpa,quantity_per_assembly),
                                        decode(l_is_src_lot_sub,1,l_sub_comp_bill_qpa,BILL_QUANTITY_PER_ASSEMBLY),
				        basis_type
				into   l_required_qpa,l_bill_req_qpa,l_basis_type
				from    wsm_copy_requirement_ops wcro
                                where   wcro.wip_entity_id = v_wlji_wip_entity_id(v_idx)
                               /* and     wcro.component_item_id = v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id */
                                and     wcro.component_item_id = decode(l_is_src_lot_sub,1,l_primary_comp_item_id,v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id)

                                and     source_phantom_id = -1  -- is null
                                and     recommended = 'Y'
				and     wcro.operation_seq_num = l_start_op_seq_num;
				--Bug 5112899:wcro.operation_seq_num equal to 1 need not be
				--start operation.
                                --and     (wcro.operation_seq_num = l_start_op_seq_num or
                                --         wcro.operation_seq_num= 1);
                                --if(l_required_qpa = 0) then           -- bug 2963225
                                if(NVL(l_required_qpa, 0) = 0) then     -- bug 2963225
                                    l_error_code := -1;
                                    fnd_message.set_name('WSM','WSM_INVALID_BOM_ROUT');
                                    l_error_msg := fnd_message.get;
                                    handle_error(l_error_code, l_error_msg, l_stmt_num);
                                    l_error_count := l_error_count + 1;
                                    GOTO abort_this_job;
                                end if;

                                if lbji_debug = 'Y' then
                                    fnd_file.put_line(fnd_file.log,
                                            'Verify if component is required at the first operation... OK');
                                end if;
                                -- }} Check the component required at first op
l_stmt_num := 850;
                                -- {{ validate starting lot is not phantom
                                l_temp_num := 0;
                                begin
                                    select  1
                                    into    l_temp_num
                                    from    wsm_copy_requirement_ops wcro
                                    where   wcro.wip_entity_id = v_wlji_wip_entity_id(v_idx)
                                    /*and     wcro.component_item_id = v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id */
                                    and     wcro.component_item_id = decode(l_is_src_lot_sub,1,l_primary_comp_item_id,v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id)
                                    and     recommended = 'Y'
                                    and     (wcro.operation_seq_num = l_start_op_seq_num or
                                             wcro.operation_seq_num= 1)
                                    and     nvl(wcro.wip_supply_type, 1) = 6;
                                exception
                                    when too_many_rows then
                                        l_temp_num := 1;
                                    when others then
                                        null;
                                end;
                                if(l_temp_num = 1) then
                                    l_error_code := -1;
                                    handle_errmsg_name(
                                        'WSM', 'WSM_PHANTOM_COMP_NOT_ALLOWED', l_stmt_num);
                                    l_error_count := l_error_count + 1;
                                    GOTO abort_this_job;
                                end if;
                                if lbji_debug = 'Y' then
                                    fnd_file.put_line(fnd_file.log,
                                        'Verify that the starting lot is not phantom.. OK');
                                end if;
                                -- }} validate starting lot is not phantom

                                -- {{ Validate component quantity
				--Bug 5112899: Start of changes
l_stmt_num := 860.1;
                               select include_component_yield
			       into   l_include_yield
			       from   wip_parameters
			       where  organization_id = v_wlji_org_id(v_idx);
l_stmt_num := 860.2;
			        --Bug 5112899: Start of changes
                                IF v_wsli(v_wlji_src_line_id(v_idx)).comp_issue_quantity IS NULL THEN
                                   if l_basis_type is NULL or l_basis_type = 1 then
					 If l_include_yield = 1 or l_include_yield is NULL then
			        --Bug 5112899: End of changes
					   l_quantity_tobe_issued
					    := l_required_qpa * v_wlji_start_quantity(v_idx);
				--Bug 5112899: Start of changes
					 else -- l_include_yield
					   l_quantity_tobe_issued
					    := l_bill_req_qpa * v_wlji_start_quantity(v_idx);
					 end if;-- l_include_yield
			           else --basis type
			              If l_include_yield is null or  l_include_yield = 1 then
					   l_quantity_tobe_issued:= l_required_qpa;
				      else
				           l_quantity_tobe_issued:= l_bill_req_qpa;
				      end if;
			           end if;--basis_type.
                                END IF; -- comp_issue_quantity
			       --Bug 5112899: End of changes
l_stmt_num := 860.3;
                                if v_wsli(v_wlji_src_line_id(v_idx)).comp_issue_quantity is not null then
                                    if v_wsli(v_wlji_src_line_id(v_idx)).comp_issue_quantity <= 0 then
                                        l_error_code := -1;
                                        handle_errmsg_name('WSM','WSM_QTY_ISSUE_NO_NEG', l_stmt_num);
                                    else
                                        l_quantity_tobe_issued
                                            := v_wsli(v_wlji_src_line_id(v_idx)).comp_issue_quantity;
                                    end if;
                                end if;

l_stmt_num := 870;
                                -- if the user does not provide a revision in wsm_starting_lots_interface
                                -- then get the current revision and use that to issue components. if user
                                -- provides one, validate it
                                l_source_item_rev := v_wsli(v_wlji_src_line_id(v_idx)).revision;
                                declare
                                    err_lot_revision    exception;  -- Add: bug 2963225
                                begin
                                    -- BC: bug 2963225 this is to validate the revision of the item
                                    -- which is not right, instead, we should validate / default
                                    -- the revision of the starting lot, so comment out the following

                                    --l_rev_date := sysdate;
                                    --wip_revisions.bom_revision (
                                    --    v_wlji_org_id(v_idx),
                                    --    v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id,
                                    --    l_source_item_rev,
                                    --    l_source_item_rev_date,
                                    --    l_rev_date);

                                    if l_rev_control_code = 1 then -- not revision control
                                        if(l_source_item_rev is not null) then
                                            raise err_lot_revision;
                                        end if;
                                    else    -- revision control item
                                        select  revision
                                        into    l_start_lot_revision
                                        from    WSM_source_lots_v
                                        where   lot_number = v_wsli(v_wlji_src_line_id(v_idx)).lot_number
                                        and     organization_id = v_wlji_org_id(v_idx)
                                        and     inventory_item_id = v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id;

                                        if(l_source_item_rev is null) then
                                            v_wsli(v_wlji_src_line_id(v_idx)).revision := l_start_lot_revision;
                                        elsif(l_source_item_rev <> l_start_lot_revision) then
                                            raise err_lot_revision;
                                        end if;
                                    end if;
                                    -- EC: bug 2963225

                                exception
                                    when err_lot_revision then  -- Add: bug 2963225
                                        l_error_code := -1;
                                        l_error_count := l_error_count +1;
                                        handle_invalid_field('Component Lot Revision', '', l_stmt_num);
                                        GOTO abort_this_job;

                                    when others then
                                        l_error_code := -1;
                                        l_error_count := l_error_count +1;
                                        handle_invalid_field('Component Lot Revision', '', l_stmt_num);
                                        GOTO abort_this_job;
                                end;
l_stmt_num := 880;
                                wsmputil.return_att_quantity(
                                    p_org_id     => v_wlji_org_id(v_idx),
                                    p_item_id    => v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id,
                                    p_rev        => v_wsli(v_wlji_src_line_id(v_idx)).revision,
                                    p_lot_no     => v_wsli(v_wlji_src_line_id(v_idx)).lot_number,
                                    p_subinv     => v_wsli(v_wlji_src_line_id(v_idx)).subinventory_code,
                                    p_locator_id => v_wsli(v_wlji_src_line_id(v_idx)).locator_id,
                                    p_qoh        => l_qoh,
                                    p_atr        => l_atr,
                                    p_att        => l_att,
                                    p_err_code   => l_error_code,
                                    p_err_msg    => l_error_msg );

                                if l_error_code <> 0 then
                                    handle_error( l_error_code, l_error_msg, l_stmt_num);
                                    l_error_count := l_error_count + 1;
                                    GOTO abort_this_job;
                                end if;
                                if l_quantity_tobe_issued > l_att then
                                    -- bug 3741740 remove this validation because we allow issue
                                    -- less quantity than job required quantity through form
                                    -- we will issue all the quantity if qty_tobe_issued > l_att
                                    l_quantity_tobe_issued := l_att;
                                    --l_error_code := -1;
                                    --handle_errmsg_name('WSM', 'WSM_INSUFFICIENT_QTY', l_stmt_num);
                                    --l_error_count := l_error_count + 1;
                                    --GOTO abort_this_job;
                                end if;
                                if lbji_debug = 'Y' then
                                    fnd_file.put_line(fnd_file.log, 'Mode 2 Quantity Verification... OK');
                                end if;
                                -- }} Validate component quantity
                                l_src_lot_number := v_wsli(v_wlji_src_line_id(v_idx)).lot_number;     -- LOTATTR
                                l_src_inv_item_id := v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id; -- LOTATTR

                            end if; -- mode_flag 2

l_stmt_num := 890;
                            build_job_detail_info(
                                p_common_routing_sequence_id    => l_common_rtg_seq_id,
                                p_common_bill_sequence_id       => temp_common_bom_seq_id,
                                p_status_type                   => v_wlji_status_type(v_idx),
                                p_org_id                        => v_wlji_org_id(v_idx),
                                p_wip_entity_id                 => v_wlji_wip_entity_id(v_idx),
                                p_last_updt_date                => v_wlji_last_updt_date(v_idx),
                                p_last_updt_by                  => v_wlji_last_updt_by(v_idx),
                                p_creation_date                 => v_wlji_creation_date(v_idx),
                                p_created_by                    => v_wlji_created_by(v_idx),
                                p_last_updt_login               => v_wlji_last_updt_login(v_idx),
                                p_request_id                    => v_wlji_request_id(v_idx),
                                p_program_appl_id               => v_wlji_program_appl_id(v_idx),
                                p_program_id                    => v_wlji_program_id(v_idx),
                                p_prog_updt_date                => v_wlji_prog_updt_date(v_idx),
                                p_item                          => v_wlji_item_id(v_idx),
                                p_job_type                      => v_wlji_job_type(v_idx),
                                p_bom_reference_id              => v_wlji_bom_ref_id(v_idx),
                                p_routing_reference_id          => v_wlji_rtg_ref_id(v_idx),
                                p_wip_supply_type               => v_wlji_wip_supply_type(v_idx),
                                p_job_scheduled_start_date      => v_wlji_fusd(v_idx),
                                p_job_scheduled_compl_date      => v_wlji_lucd(v_idx),
                                p_start_quantity                => v_wlji_start_quantity(v_idx),
                                p_bom_revision_date             => v_wlji_bom_rev_date(v_idx),
                                p_routing_revision_date         => v_wlji_rtg_rev_date(v_idx),
                                p_alt_bom_designator            => v_wlji_alt_bom(v_idx),
                                p_alt_routing_designator        => v_wlji_alt_rtg(v_idx),
                                p_rtg_op_seq_num                => null,
                                p_error_code                    => l_error_code,
                                p_error_msg                     => l_error_msg,
                                -- BA:bug 3311985, call build_job_detail_info with new parameter
                                p_src_client_server             => 0,
                                p_po_creation_time              => WSMPLCVA.v_org(v_wlji_org_id(v_idx)).PO_CREATION_TIME
                                -- EA:bug 3311985, call build_job_detail_info with new parameter
                            );
                            if l_error_code <> 0 then
                                handle_error(l_error_code, l_error_msg,  l_stmt_num);
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            end if;

/****************ADDED FOLLOWING CODE FOR 12.1 SUBSTITUTE COMPONENT PROJECT TO UPDATE WIP_REQIREMENT_OPERATIONS TO REPLACE REQUIREMENT OF PRIMARY COMPONENT
 ***********************************************************************************************************/

                             IF (l_is_src_lot_sub = 1 AND v_wlji_mode_flag(v_idx) = 2 ) THEN

                               BEGIN

                                   SELECT segment1,segment2,segment3,segment4,
                                          segment5,segment6,segment7,segment8,
                                          segment9,segment10,segment11,segment12,
                                          segment13,segment14,segment15,segment16,
                                          segment17,segment18,segment19,segment20
                                    INTO
                                          l_segment1,l_segment2,l_segment3,l_segment4,
                                          l_segment5,l_segment6,l_segment7,l_segment8,
                                          l_segment9,l_segment10,l_segment11,l_segment12,
                                          l_segment13,l_segment14,l_segment15,l_segment16,
                                          l_segment17,l_segment18,l_segment19,l_segment20
                                    FROM  mtl_system_items
                                    WHERE inventory_item_id =  v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id
                                     AND  organization_id=v_wlji_org_id(v_idx);

                                    EXCEPTION
                                     WHEN OTHERS THEN
                                       NULL;

                                 END;

                             UPDATE wip_requirement_operations
                               SET  inventory_item_id = v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id,
                                    required_quantity = ((required_quantity * l_sub_comp_bill_qpa)/quantity_per_assembly),
                                    quantity_per_assembly = l_sub_comp_bill_qpa,
                                    segment1 = l_segment1,
                                    segment2 = l_segment2,
                                    segment3 = l_segment3,
                                    segment4 = l_segment4,
                                    segment5 = l_segment5,
                                    segment6 = l_segment6,
                                    segment7 = l_segment7,
                                    segment8 = l_segment8,
                                    segment9 = l_segment9,
                                    segment10 = l_segment10,
                                    segment11 = l_segment11,
                                    segment12 = l_segment12,
                                    segment13 = l_segment13,
                                    segment14 = l_segment14,
                                    segment15 = l_segment15,
                                    segment16 = l_segment16,
                                    segment17 = l_segment17,
                                    segment18 = l_segment18,
                                    segment19 = l_segment19,
                                    segment20 = l_segment20,
                                    released_quantity = ((released_quantity * l_sub_comp_bill_qpa)/quantity_per_assembly)
                              WHERE wip_entity_id = v_wlji_wip_entity_id(v_idx)
                                AND inventory_item_id = l_primary_comp_item_id;



                              END IF;

/* END CHANGES FOR 12.1 SUBSTITUTE COMPONENT PROJECT**********************************************************
*************************************************************************************************************/

                        exception
                            when others then
                                l_error_code := SQLCODE;
                                l_error_msg  :=
                                    'WSM_LBJ_INTERFACE_PVT.launch_worker (stmt# '||l_stmt_num||') '
                                   ||SUBSTR(SQLERRM, 1,1000);
                                handle_error(l_error_code, l_error_msg, l_stmt_num);
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                        end;

                    end if;
                    -- ----------------------------------------------------------------
                    -- }}} End: Write WO's and WCO's, job creation and alt/ref change
                    -- ----------------------------------------------------------------

                    -- -------------------------------
                    -- {{{ Begin: Write for job update
                    -- -------------------------------
                    if v_wlji_load_type(v_idx) = 6 then

                        -- {{ do not skip update
                        -- if the user wants to update only the references, the following
                        -- updates are not needed
                        if (l_skip_update_wo = 0 and
                            v_wlji_allow_explosion(v_idx) = 'Y' and
                            v_wlji_status_type(v_idx) <> 7 and
                            l_chg_alt_flag <> 1 and
                            l_chg_ref_flag <> 1 and
                            l_chg_rev_flag <> 1)
                        then
                            Begin
l_stmt_num := 900;
                                if g_charges_exist_shopfloor then
                                    l_txnexist := 1;
                                else
                                    l_txnexist := 0;
                                end if;
l_stmt_num := 910;
                                if v_wlji_start_quantity(v_idx) is null then      --bug4540762: begin
                                   v_wlji_start_quantity(v_idx) := l_cur_start_qty;
                                end if;                                           --bug4540762: end

                                if v_wlji_start_quantity(v_idx) <> l_cur_start_qty then
                                    l_qntydiff := 1;
                                else
                                    l_qntydiff := 0;
                                end if;

                                update wip_operations
                                set    -- BD: BUG 3479666
                                       -- in option C, we should not change operation start/completion
                                       -- date based on job header level information
                                       --
                                       --first_unit_start_date
                                       --    = decode(l_txnexist,
                                       --             0, nvl(v_wlji_fusd(v_idx), first_unit_start_date),      -- bug 3394520
                                       --             first_unit_start_date),
                                       --first_unit_completion_date
                                       --    = decode(l_txnexist,
                                       --             0, nvl(v_wlji_lucd(v_idx), first_unit_completion_date), -- bug 3394520
                                       --             first_unit_completion_date),
                                       --last_unit_start_date
                                       --    = decode(l_txnexist,
                                       --             0, nvl(v_wlji_fusd(v_idx), last_unit_start_date),       -- bug 3394520
                                       --             last_unit_start_date),
                                       --last_unit_completion_date
                                       --    = decode(l_txnexist,
                                       --             0, nvl(v_wlji_lucd(v_idx), last_unit_completion_date),  -- bug 3394520
                                       --             last_unit_completion_date),
                                       -- ED: BUG 3479666
                                       scheduled_quantity
                                           = round(v_wlji_start_quantity(v_idx),
                                                   wip_constants.max_displayed_precision),
                                       quantity_in_queue
                                           = decode(v_wlji_status_type(v_idx),
                                                    1, 0,
                                                    3, decode(l_cur_status_type,
                                                              1, decode(operation_seq_num,
                                                                        g_op_seq_incr,
                                                                        round(v_wlji_start_quantity(v_idx),
                                                                              wip_constants.max_displayed_precision),
                                                                        quantity_in_queue),
                                                              decode(l_qntydiff,
                                                                     1, decode(operation_seq_num,
                                                                               g_op_seq_incr,
                                                                               round(v_wlji_start_quantity(v_idx),
                                                                                     wip_constants.max_displayed_precision),
                                                                               quantity_in_queue),
                                                                     quantity_in_queue)),
                                                    quantity_in_queue),
                                       last_updated_by        = v_wlji_last_updt_by(v_idx),
                                       last_update_date       = sysdate,
                                       last_update_login      = v_wlji_last_updt_login(v_idx),
                                       program_update_date    = sysdate,
                                       request_id             = v_wlji_request_id(v_idx),
                                       program_application_id = v_wlji_program_appl_id(v_idx),
                                       program_id             = v_wlji_program_id(v_idx)
                                where  organization_id        = v_wlji_org_id(v_idx)
                                and    wip_entity_id          = v_wlji_wip_entity_id(v_idx);
                                if lbji_debug = 'Y' then
                                    fnd_file.put_line(fnd_file.log,
                                        'Updated '||SQL%ROWCOUNT||' rows into wo');
                                end if;

l_stmt_num := 920.1;
                                -- bug 3203505 change order with updating wro
                                --Bug 5456260:In Option C,resource dates should not be
                                --updated with the header dates.
                                /*******************
                                update wip_operation_resources
                                set    start_date             = decode(l_txnexist,
                                                                       0, nvl(v_wlji_fusd(v_idx), start_date),      -- bug 3394520
                                                                       start_date),
                                       completion_date        = decode(l_txnexist,
                                                                       0, nvl(v_wlji_lucd(v_idx), completion_date), -- bug 3394520
                                                                       completion_date),
                                       last_updated_by        = v_wlji_last_updt_by(v_idx),
                                       last_update_date       = sysdate,
                                       last_update_login      = v_wlji_last_updt_login(v_idx),
                                       program_update_date    = sysdate,
                                       request_id             = v_wlji_request_id(v_idx),
                                       program_application_id = v_wlji_program_appl_id(v_idx),
                                       program_id             = v_wlji_program_id(v_idx)
                                where  organization_id = v_wlji_org_id(v_idx)
                                and    wip_entity_id = v_wlji_wip_entity_id(v_idx);
                                if lbji_debug = 'Y' then
                                    fnd_file.put_line(fnd_file.log,
                                        'Updated '||SQL%ROWCOUNT||' rows into wor');
                                end if;
                                *******************/
l_stmt_num := 920.2;
                                --LBM enh : changed the expression for required quantity
                                update wip_requirement_operations wro
                                set    wro.date_required = (
                                            select nvl(min(first_unit_start_date), v_wlji_fusd(v_idx))
                                            from   wip_operations
                                            where  organization_id = v_wlji_org_id(v_idx)
                                            and    wip_entity_id = v_wlji_wip_entity_id(v_idx)
                                            and    operation_seq_num = abs(wro.operation_seq_num)),
                                       last_updated_by        = v_wlji_last_updt_by(v_idx),
                                       last_update_date       = sysdate,
                                       last_update_login      = v_wlji_last_updt_login(v_idx),
                                       request_id             = v_wlji_request_id(v_idx),
                                       program_update_date    = sysdate,
                                       program_id             = v_wlji_program_id(v_idx),
                                       program_application_id = v_wlji_program_appl_id(v_idx),
                                       required_quantity      = ((wro.quantity_per_assembly/wro.component_yield_factor) * decode(
                                                          wro.basis_type, 2, 1, round(v_wlji_start_quantity(v_idx), 6)))
                                where  organization_id        = v_wlji_org_id(v_idx)
                                and    wip_entity_id = v_wlji_wip_entity_id(v_idx);
                                if lbji_debug = 'Y' then
                                    fnd_file.put_line(fnd_file.log,
                                        'Updated '||SQL%ROWCOUNT||' rows into wro');
                                end if;
l_stmt_num := 920.3;
                                -- abb H: optional scrap accounting

                                if (l_cur_status_type IN (1,6) and v_wlji_status_type(v_idx) = 3) and
                                    wsmputil.wsm_esa_enabled(
                                            p_wip_entity_id => v_wlji_wip_entity_id(v_idx),
                                            err_code        => l_error_code,
                                            err_msg         => l_error_msg,
                                            p_org_id        => '',
                                            p_job_type      => '') = 1
                                then
l_stmt_num := 920.31;
                                    select min(operation_seq_num)
                                    into   l_min_op_seq_num
                                    from   wip_operations
                                    where  wip_entity_id =  v_wlji_wip_entity_id(v_idx);
l_stmt_num := 920.32;
                                    select bd.scrap_account,
                                           bd.est_absorption_account,
                                           wo.department_id
                                    into   l_scrap_account_10,
                                           l_est_scrap_abs_account_10,
                                           l_department_id
                                    from   bom_departments bd,
                                           wip_operations wo
                                    where  wo.wip_entity_id = v_wlji_wip_entity_id(v_idx)
                                    and    wo.operation_seq_num = l_min_op_seq_num
                                    and    bd.department_id = wo.department_id;

                                    if l_scrap_account_10 is null or l_est_scrap_abs_account_10 is null then
                                        l_error_code := -1;
                                        fnd_message.set_name('WSM','WSM_NO_SCRAP_ACC');
                                        fnd_message.set_token('DEPT_ID',to_char(l_department_id));
                                        l_error_msg := fnd_message.get;
                                        handle_error(l_error_code, l_error_msg, l_stmt_num);
                                        l_error_count := l_error_count + 1;
                                        GOTO abort_this_job;
                                    end if;
l_stmt_num := 920.33;
                                    update wip_operation_yields woy
                                    set    scrap_account = nvl(l_scrap_account_10, woy.scrap_account),
                                           est_scrap_absorb_account = nvl(l_est_scrap_abs_account_10,
                                                                          woy.est_scrap_absorb_account)
                                    where  wip_entity_id = v_wlji_wip_entity_id(v_idx)
                                    and    operation_seq_num = l_min_op_seq_num;

                                    if lbji_debug = 'Y' then
                                        fnd_file.put_line(fnd_file.log, 'Updated '||SQL%ROWCOUNT||' rows into woy');
                                    end if;

                                end if;

                            Exception
                                when others then
                                    l_error_code := SQLCODE;
                                    l_error_msg  :=
                                        'WSM_LBJ_INTERFACE_PVT.launch_worker (stmt# '||l_stmt_num||') '
                                       ||SUBSTR(SQLERRM, 1,1000);
                                    handle_error(l_error_code, l_error_msg,  l_stmt_num);
                                    l_error_count := l_error_count + 1;
                                    GOTO abort_this_job;
                            End;
                        end if;
                        -- }} do not skip update

l_stmt_num := 930;
                        Begin
                            if l_cur_status_type <> 1 AND v_wlji_status_type(v_idx) = 1 then
                                delete from wip_period_balances
                                where  wip_entity_id = v_wlji_wip_entity_id(v_idx)
                                and    organization_id = v_wlji_org_id(v_idx);
                                if lbji_debug = 'Y' then
                                    fnd_file.put_line(fnd_file.log,
                                        'Deleted '||SQL%ROWCOUNT||' rows from WIP_PERIOD_BALANCES');
                                end if;
                            end if;

l_stmt_num := 940;
                            if v_wlji_status_type(v_idx) = 7 then --cancelled

                                -- {{ osp begin
                                if wip_osp.po_req_exists (
                                        v_wlji_wip_entity_id(v_idx),
                                        null,
                                        v_wlji_org_id(v_idx),
                                        null, 5)
                                then
                                    fnd_message.set_name('WIP', 'WIP_CANCEL_JOB/SCHED_OPEN_PO');
                                    l_error_msg := fnd_message.get;
                                    l_warning_count := l_warning_count + 1;
                                    handle_warning(
                                        p_err_msg    => l_error_msg,
                                        p_header_id  => v_wlji_header_id(v_idx),
                                        p_request_id => v_wlji_request_id(v_idx),
                                        p_program_id => v_wlji_program_id(v_idx),
                                        p_program_application_id => v_wlji_program_appl_id(v_idx));
                                end if;
                                -- }} osp end
l_stmt_num := 950.1;
                                wip_picking_pvt.cancel_allocations(
                                        v_wlji_wip_entity_id(v_idx),
                                        5,
                                        NULL,
                                        l_return_status,
                                        l_error_msg);

                                if l_return_status <> FND_API.G_RET_STS_SUCCESS then
                                    handle_error(l_return_status, l_error_msg, l_stmt_num);
                                    l_error_count := l_error_count + 1;
                                    GOTO abort_this_job;
                                else
l_stmt_num := 950.2;
                                --AH Add:SO LBJ changes--

                                If wsm_reservations_pvt.check_reservation_exists(p_wip_entity_id    => v_wlji_wip_entity_id(v_idx),
                                                         p_org_id       => v_wlji_org_id(v_idx),
                                                         p_inventory_item_id    => v_wlji_item_id(v_idx)
                                                        )
                                then
l_stmt_num := 950.3;
                                    wsm_reservations_pvt.modify_reservations_jobupdate (

                                            p_wip_entity_id     => v_wlji_wip_entity_id(v_idx),
                                            p_old_net_qty       => round(v_wlji_net_quantity(v_idx),wip_constants.max_displayed_precision),
                                            p_new_net_qty       => round(v_wlji_net_quantity(v_idx),wip_constants.max_displayed_precision),
                                            p_inventory_item_id     => v_wlji_item_id(v_idx),
                                            p_org_id        => v_wlji_org_id(v_idx),
                                            p_status_type       => v_wlji_status_type(v_idx),
                                            x_return_status     => l_return_status,
                                            x_msg_count         => l_error_count,
                                            x_msg_data      => l_error_msg
                                                                   );
                                    if l_return_status <> FND_API.G_RET_STS_SUCCESS then
                                        handle_error(l_return_status, l_error_msg, l_stmt_num);
                                        l_error_count := l_error_count + 1;
                                        GOTO abort_this_job;
                                    end if;
                                end if;

                                --AH Add:SO LBJ changes--
								--Added for Fixing bug 5242298. Txn type 2 adds sector extn for jobs which are cancelled
l_stmt_num := 950.4;
								l_wip_entity_name := WSMPOPRN.update_job_name
									   (p_wip_entity_id   => v_wlji_wip_entity_id(v_idx),
                       					p_subinventory    => v_wlji_compl_subinv(v_idx),
										p_org_id          => v_wlji_org_id(v_idx),
										p_txn_type        =>  2,  -- COMPLETION
              							p_update_flag     => TRUE,
      									p_dup_job_name    => l_dummy_job_name,
       									x_error_code      => l_error_code,
										x_error_msg       => l_error_msg);

								if l_error_code <> 0 then
										l_return_status := FND_API.G_RET_STS_ERROR;
                                        handle_error(l_return_status, l_error_msg, l_stmt_num);
                                        l_error_count := l_error_count + 1;
                                        GOTO abort_this_job;
                                end if;

								--Added for Fixing bug 5242298
l_stmt_num := 950.5;
                                update wip_discrete_jobs wdj
                                    set    status_type = 7
                                    where  wdj.wip_entity_id = v_wlji_wip_entity_id(v_idx);
                                    if lbji_debug = 'Y' then
                                        fnd_file.put_line(fnd_file.log,
                                            'Updated status type to 7 in wdj');
                                    end if;
                                end if;

l_stmt_num := 960;
                                --{{ Kanban begin
                                if v_wlji_kanban_card_id(v_idx) is not null then
                                    inv_kanban_pvt.update_card_supply_status(
                                        x_return_status  => l_return_status,
                                        p_kanban_card_id => v_wlji_kanban_card_id(v_idx),
                                        p_supply_status  => inv_kanban_pvt.g_supply_status_exception);

                                    if ( l_return_status <> fnd_api.g_ret_sts_success ) then
                                        l_error_code := -1;
                                        fnd_message.set_name('WSM', 'WSM_KNBN_CARD_STS_FAIL');
l_stmt_num := 960.1;
                                        select meaning
                                        into   l_meaning
                                        from   mfg_lookups
                                        where  lookup_type = 'MTL_KANBAN_SUPPLY_STATUS'
                                        and    lookup_code = 7
                                        and    upper(enabled_flag) = 'Y';

                                        fnd_message.set_token('STATUS',l_meaning);
                                        l_error_msg := fnd_message.get;
                                        handle_error(l_error_code, l_error_msg,  l_stmt_num);
                                        l_error_count := l_error_count + 1;
                                        GOTO abort_this_job;
                                    end if;

                                    update wip_discrete_jobs
                                    set    kanban_card_id = null
                                    where  wip_entity_id =  v_wlji_wip_entity_id(v_idx);

                                end if;
                                --}} Kanban end

                            else  -- v_wlji_status_type(v_idx) <> 7
l_stmt_num := 970.1;
                            --AH Add:SO LBJ changes--
                            DECLARE
                            l_net_qty_old NUMBER;
                            BEGIN

                            If wsm_reservations_pvt.check_reservation_exists(p_wip_entity_id    => v_wlji_wip_entity_id(v_idx),
                                                     p_org_id       => v_wlji_org_id(v_idx),
                                                     p_inventory_item_id    => v_wlji_item_id(v_idx)
                                                    )
                            then
                                select net_quantity
                                into   l_net_qty_old
                                from   WIP_DISCRETE_JOBS
                                where  wip_entity_id = v_wlji_wip_entity_id(v_idx);

                                if v_wlji_net_quantity(v_idx) < l_net_qty_old then --net qty has become lesser.So reduce rsvtn

										wsm_reservations_pvt.modify_reservations_jobupdate (
											p_wip_entity_id     => v_wlji_wip_entity_id(v_idx),
											p_old_net_qty       => l_net_qty_old ,
											p_new_net_qty       => round(v_wlji_net_quantity(v_idx),wip_constants.max_displayed_precision),
											p_inventory_item_id     => v_wlji_item_id(v_idx),
											p_org_id        => v_wlji_org_id(v_idx),
											p_status_type       => v_wlji_status_type(v_idx),
											x_return_status     => l_return_status,
											x_msg_count         => l_error_count,
											x_msg_data      => l_error_msg
														);
										if l_return_status <> FND_API.G_RET_STS_SUCCESS then
											handle_error(l_return_status, l_error_msg, l_stmt_num);
											l_error_count := l_error_count + 1;
											GOTO abort_this_job;
										end if;
								end if;
                            end if;

                            END;
                            --AH Add:SO LBJ changes--
                            UPDATE  WIP_DISCRETE_JOBS WDJ
                            set     last_updated_by             = v_wlji_last_updt_by(v_idx),
                                    last_update_login           = v_wlji_last_updt_login(v_idx),
                                    request_id                  = v_wlji_request_id(v_idx),
                                    program_application_id      = v_wlji_program_appl_id(v_idx),
                                    program_id                  = v_wlji_program_id(v_idx),
                                    program_update_date         = sysdate,
                                    last_update_date            = sysdate,
                                    bom_reference_id            = v_wlji_bom_ref_id(v_idx),
                                    routing_reference_id        = v_wlji_rtg_ref_id(v_idx),
                                    common_bom_sequence_id      = l_common_bom_seq_id,
                                    common_routing_sequence_id  = l_common_rtg_seq_id,
                                    bom_revision                = v_wlji_bom_revision(v_idx),
                                    routing_revision            = v_wlji_rtg_revision(v_idx),
                                    bom_revision_date           = v_wlji_bom_rev_date(v_idx),
                                    routing_revision_date       = v_wlji_rtg_rev_date(v_idx),
                                    alternate_bom_designator    = v_wlji_alt_bom(v_idx),
                                    alternate_routing_designator= v_wlji_alt_rtg(v_idx),
                                    firm_planned_flag           = v_wlji_firm_planned_flag(v_idx),
                                    start_quantity              = nvl(round(v_wlji_start_quantity(v_idx),
                                                                            wip_constants.max_displayed_precision),
                                                                  wdj.start_quantity),
                                    net_quantity                = nvl(round(v_wlji_net_quantity(v_idx),
                                                                            wip_constants.max_displayed_precision),
                                                                  wdj.net_quantity),
                                    lot_number                  = decode(wdj.status_type, WIP_CONSTANTS.UNRELEASED,
                                                                              v_wlji_job_name(v_idx),wdj.lot_number),   -- fix for bug5990761
                                    status_type                 = nvl(v_wlji_status_type(v_idx),wdj.status_type),
                                    date_released               = v_wlji_date_released(v_idx), -- bug 2697295
                                    scheduled_start_date        = decode(l_txnexist, 0,
                                                                         trunc(NVL(v_wlji_fusd(v_idx), wdj.scheduled_start_date),'MI'),
                                                                         wdj.scheduled_start_date),
                                    scheduled_completion_date   = trunc(NVL(v_wlji_lucd(v_idx),wdj.scheduled_completion_date), 'MI'),
                                    completion_locator_id       = v_wlji_compl_loc_id(v_idx),
                                    completion_subinventory     = v_wlji_compl_subinv(v_idx),
                                    coproducts_supply           = nvl(v_wlji_coproducts_supply(v_idx), wdj.coproducts_supply),
                                    -- BA: BUG3272873
                                    source_code = nvl(v_wlji_source_code(v_idx),wdj.source_code),
                                    source_line_id = nvl(v_wlji_src_line_id(v_idx),wdj.source_line_id),
                                    overcompletion_tolerance_type = nvl(v_wlji_overcompl_tol_type(v_idx),
                                                        wdj.overcompletion_tolerance_type),
                                    overcompletion_tolerance_value = nvl(v_wlji_overcompl_tol_value(v_idx),
                                                        wdj.overcompletion_tolerance_value),
                                    priority = nvl(v_wlji_priority(v_idx),wdj.priority),
                                    due_date = nvl(v_wlji_due_date(v_idx),wdj.due_date),
                                    attribute_category = nvl(v_wlji_attribute_category(v_idx),wdj.attribute_category),
                                    attribute1 = nvl(v_wlji_attribute1(v_idx),wdj.attribute1),
                                    attribute2 = nvl(v_wlji_attribute2(v_idx),wdj.attribute2),
                                    attribute3 = nvl(v_wlji_attribute3(v_idx),wdj.attribute3),
                                    attribute4 = nvl(v_wlji_attribute4(v_idx),wdj.attribute4),
                                    attribute5 = nvl(v_wlji_attribute5(v_idx),wdj.attribute5),
                                    attribute6 = nvl(v_wlji_attribute6(v_idx),wdj.attribute6),
                                    attribute7 = nvl(v_wlji_attribute7(v_idx),wdj.attribute7),
                                    attribute8 = nvl(v_wlji_attribute8(v_idx),wdj.attribute8),
                                    attribute9 = nvl(v_wlji_attribute9(v_idx),wdj.attribute9),
                                    attribute10 = nvl(v_wlji_attribute10(v_idx),wdj.attribute10),
                                    attribute11 = nvl(v_wlji_attribute11(v_idx),wdj.attribute11),
                                    attribute12 = nvl(v_wlji_attribute12(v_idx),wdj.attribute12),
                                    attribute13 = nvl(v_wlji_attribute13(v_idx),wdj.attribute13),
                                    attribute14 = nvl(v_wlji_attribute14(v_idx),wdj.attribute14),
                                    attribute15 = nvl(v_wlji_attribute15(v_idx),wdj.attribute15),
                                    -- EA: BUG3272873
                                    est_scrap_account           = nvl(l_est_scrap_account, wdj.est_scrap_account),
                                    est_scrap_var_account       = nvl(l_est_scrap_var_account, wdj.est_scrap_var_account),
                                    description                 = nvl(RTRIM(v_wlji_description(v_idx)), wdj.description),
                                    schedule_group_id           = decode(v_wlji_schedule_group_id(v_idx),fnd_api.g_miss_num,null,v_wlji_schedule_group_id(v_idx))  -- Bug : 6676148
                                    -- CZHDBG: how about fusd and lucd ???
                            where   wdj.wip_entity_id     = v_wlji_wip_entity_id(v_idx);

                            end if; -- update jobs for which status is not cancelled
                            if lbji_debug = 'Y' then
                                fnd_file.put_line(fnd_file.log,
                                    'Updated '||SQL%ROWCOUNT||' rows of wdj');
                            end if;
l_stmt_num := 970.2;
                            UPDATE WIP_ENTITIES WE
                            set    description            = nvl(v_wlji_description(v_idx), we.description),
			           wip_entity_name        = decode(nvl(v_wlji_status_type(v_idx),-1),7,wip_entity_name,
                                                                       decode(l_cur_status_type,1, v_wlji_job_name(v_idx),wip_entity_name)), --fix for bug5990761
                                   last_updated_by        = v_wlji_last_updt_by(v_idx),
                                   last_update_login      = v_wlji_last_updt_login(v_idx),
                                   request_id             = v_wlji_request_id(v_idx),
                                   program_application_id = v_wlji_program_appl_id(v_idx),
                                   program_id             = v_wlji_program_id(v_idx),
                                   program_update_date    = v_wlji_prog_updt_date(v_idx),
                                   last_update_date       = v_wlji_last_updt_date(v_idx)
                            where  we.wip_entity_id       = v_wlji_wip_entity_id(v_idx);
                            if lbji_debug = 'Y' then
                                fnd_file.put_line(fnd_file.log,
                                    'Updated '||SQL%ROWCOUNT||' rows into we');
                            end if;

                        Exception
                           when others then
                           l_error_code := SQLCODE;
                           l_error_msg  :=
                                'WSM_LBJ_INTERFACE_PVT.launch_worker (stmt# '||l_stmt_num||') '
                               ||SUBSTR(SQLERRM, 1,1000);
                           handle_error(l_error_code, l_error_msg,  l_stmt_num);
                           l_error_count := l_error_count + 1;
                           GOTO abort_this_job;
                        End;

                        ---------------------------------------------
                        -- Mark recommendations on the job level copy
                        ---------------------------------------------
                        -- this is for update only
                        if(v_wlji_num_of_children(v_idx) > 0) then
l_stmt_num := 980;
                            import_lot_job_details (
                                p_wip_entity_id             => v_wlji_wip_entity_id(v_idx),
                                p_org_id                    => v_wlji_org_id(v_idx),
                                p_wo_records_exist          => 'Y',            -- p_wo_records_exist
                                p_parent_header_id          => v_wlji_header_id(v_idx),
                                p_job_scheduled_start_date  => null,           -- p_job_scheduled_start_date
                                p_job_scheduled_compl_date  => null,           -- p_job_scheduled_compl_date
                                p_job_scheduled_quantity    => null,
                                p_group_id                  => null,
                                p_last_updt_date            => v_wlji_last_updt_date(v_idx),
                                p_last_updt_by              => v_wlji_last_updt_by(v_idx),
                                p_last_updt_login           => v_wlji_last_updt_login(v_idx),
                                p_creation_date             => v_wlji_creation_date(v_idx),
                                p_created_by                => v_wlji_created_by(v_idx),
                                p_request_id                => v_wlji_request_id(v_idx),
                                p_program_appl_id           => v_wlji_program_appl_id(v_idx),
                                p_program_id                => v_wlji_program_id(v_idx),
                                p_prog_updt_date            => v_wlji_prog_updt_date(v_idx),
                                p_error_code                => l_error_code,
                                p_error_msg                 => l_error_msg);
                            if (l_error_code <> 0) then
                                handle_error(l_error_code, l_error_msg,  l_stmt_num);
                                l_error_count := l_error_count + 1;
                                GOTO abort_this_job;
                            end if;
                        end if;

l_stmt_num := 985;
                        -- BA 3479666
                        -- OSFM will call infinite scheduler if scheduling_method = 1
                        -- and on_rec_path = Yes

                        if(v_wlji_scheduling_method(v_idx) = 1 ) then
                            DECLARE
                                l_returnstatus      varchar2(10);
                                l_on_reco_path      varchar2(10);
                                l_start_date        date := null;
                                l_end_date          date := null;

                            BEGIN
                                select on_rec_path
                                into   l_on_reco_path
                                from   wsm_lot_based_jobs
                                where  wip_entity_id = v_wlji_wip_entity_id(v_idx);
l_stmt_num := 985.1;
                                if(l_on_reco_path = 'Y' ) then
                                    if(l_scheduling_mode = WIP_CONSTANTS.FORWARDS) then
                                        l_start_date := v_wlji_fusd(v_idx);
                                        l_end_date   := null;
                                    else
                                        l_start_date := null;
                                        l_end_date   := v_wlji_lucd(v_idx);
                                    end if;

                                    wsm_infinite_scheduler_pvt.schedule (
                                            p_initmsglist   => fnd_api.g_true,
                                            p_enddebug      => fnd_api.g_true,
                                            p_orgID         => v_wlji_org_id(v_idx),
                                            p_wipEntityID   => v_wlji_wip_entity_id(v_idx),
                                            p_scheduleMode  => l_scheduling_mode,
                                            p_startDate     => l_start_date,
                                            p_endDate       => l_end_date,
                                            p_opSeqNum      => null,
                                            p_resSeqNum     => null,
                                            x_returnstatus  => l_returnstatus,
                                            x_errorMsg      => l_error_msg
                                    );
                                    if(l_returnstatus <> fnd_api.g_ret_sts_success) then
                                        handle_error(-1, l_error_msg,  l_stmt_num);
                                        l_error_count := l_error_count + 1;
                                        goto abort_this_job;
                                    end if;
                                end if;
                            END;
                        end if;
                        -- EA 3479666

                    end if; -- load_type 6
                    -- ----------------------------------
                    -- }}} End: Write for job update
                    -- ----------------------------------

l_stmt_num := 990;
                    -- {{ Releasing job, insert period balance
                    if (v_wlji_load_type(v_idx) = 6 AND
                        v_wlji_status_type(v_idx) = WIP_CONSTANTS.RELEASED and
                        l_cur_status_type = WIP_CONSTANTS.UNRELEASED)
                    then

                        --
                        -- Begin R12Dev Update to set the current_job/rtg_op_seq_num on WLBJ
                        --Bug 4748165
                      /*  update wsm_lot_based_jobs
                        set    (current_job_op_seq_num,
                                current_rtg_op_seq_num)
                               =(select wo.operation_seq_num,
                                         wo.wsm_op_seq_num
                                  from   wip_operations wo
                                  where  organization_id = v_wlji_org_id(v_idx)
                                  and    wip_entity_id   = v_wlji_wip_entity_id(v_idx)
                                  and    wo.quantity_in_queue
                                       + wo.quantity_running
                                       + wo.quantity_waiting_to_move  > 0)
                        where  wip_entity_id   = v_wlji_wip_entity_id(v_idx)
                        and    organization_id = v_wlji_org_id(v_idx); */
                        --Commented out above query since WSMPVCPY updates both. Bug 4748165
                        -- End R12Dev
                        --


                        if ((v_wlji_load_type(v_idx) = 6) AND (v_wlji_class_code(v_idx) is NULL)) then
                            v_wlji_class_code(v_idx) := l_cur_class_code;
                        end if;
                        fnd_file.put_line(fnd_file.log, 'Date Released: '||v_wlji_date_released(v_idx));
                        insert_into_period_balances (
                            p_wip_entity_id   => v_wlji_wip_entity_id(v_idx),
                            p_organization_id => v_wlji_org_id(v_idx),
                            p_class_code      => v_wlji_class_code(v_idx),
                            p_release_date    => v_wlji_date_released(v_idx),
                            p_error_code      => l_error_code,
                            p_err_msg         => l_error_msg);

                        if l_error_code <> 0 then
                            handle_error(l_error_code, l_error_msg,  l_stmt_num);
                            l_error_count := l_error_count + 1;
                            GOTO abort_this_job;
                        end if;
                    end if;
                    -- }} Releasing job, insert period balance

            /* LotAttr */
                    if l_cur_status_type in (0,1,3,6) THEN  -- Initialized Value,
                                        --Unreleased, released, Hold
l_stmt_num := 995;
                        IF (lbji_debug='Y') THEN
                            fnd_file.put_line(fnd_file.log, 'Before Calling WSM_LotAttr_PVT.create_update_lotattr');
                        END IF;
                        WSM_LotAttr_PVT.create_update_lotattr(
                                x_err_code          => l_error_code,
                                x_err_msg           => l_error_msg,
                                p_wip_entity_id     => v_wlji_wip_entity_id(v_idx),
                                p_org_id            => v_wlji_org_id(v_idx),
                                p_intf_txn_id       => v_wlji_header_id(v_idx),
                                p_intf_src_code     => 'WSM',
                                p_src_lot_number    => l_src_lot_number,
                                p_src_inv_item_id   => l_src_inv_item_id);
                        IF (l_error_code <> 0) THEN
                            handle_error(l_error_code, l_error_msg,  l_stmt_num);
                            l_error_count := l_error_count + 1;
                            GOTO abort_this_job;
                        END IF;
                        IF (lbji_debug='Y') THEN
                           fnd_file.put_line(fnd_file.log, 'WSM_LotAttr_PVT.create_update_lotattr returned Success');
                        END IF;

                    end if; -- l_cur_status_type in (1,3,6)

            -- Invoke the serial code...
            -- ST : Serial Support Project ...........................---------------------------------------------------------------
            DECLARE

            l_msg_count NUMBER := 0;
            l_return_status VARCHAR2(1);
            l_err_msg       VARCHAR2(2000);
            l_log_level     NUMBER := FND_LOG.G_CURRENT_RUNTIME_LEVEL;
            l_param_tbl WSM_Log_PVT.param_tbl_type;
            BEGIN

            IF (lbji_debug='Y') THEN
                fnd_file.put_line(fnd_file.log, 'Before WSM_Serial_support_PVT.LBJ_serial_intf_proc');
            END IF;
            l_stmt_num := 995.1;

            WSM_Serial_support_PVT.LBJ_serial_intf_proc( p_header_id         => v_wlji_header_id(v_idx),
                                     p_wip_entity_id         => v_wlji_wip_entity_id(v_idx),
                                     p_organization_id           => v_wlji_org_id(v_idx),
                                     p_inventory_item_id     => v_wlji_item_id(v_idx),
                                     x_return_status         => l_return_status,
                                     x_error_count       => l_msg_count,
                                     x_error_msg             => l_err_msg
                                    );
            l_stmt_num := 995.2;

            if l_return_status = FND_API.G_RET_STS_SUCCESS then
                IF (lbji_debug='Y') THEN
                    fnd_file.put_line(fnd_file.log, 'WSM_Serial_support_PVT.LBJ_serial_intf_proc returned Success');
                END IF;
                ELSE
                IF (lbji_debug='Y') THEN
                    fnd_file.put_line(fnd_file.log, 'WSM_Serial_support_PVT.LBJ_serial_intf_proc returned failure');
                END IF;

                IF (l_msg_count = 1)  THEN
                    handle_error(-1, l_err_msg,  l_stmt_num);
                ELSIF (l_msg_count > 1)  THEN
                    FOR i IN 1..l_msg_count LOOP
                    l_err_msg := fnd_msg_pub.get( p_msg_index => l_msg_count - i + 1,
                                          p_encoded   => FND_API.G_FALSE
                                     );
                    handle_error(-1, l_err_msg,  l_stmt_num);
                    END LOOP;
                ELSE
                    l_err_msg := 'WSM_Serial_support_PVT.LBJ_serial_intf_proc returned failure';
                    handle_error(-1, l_err_msg,  l_stmt_num);
                END IF;
                l_error_count := l_error_count + 1;
                GOTO abort_this_job;
            END IF;

           END;
           --------------------------------------------------------------------------------------------------------------------

-- ==============================================================================================
-- END: WRITING INTO BASE TABLES }}}
-- ==============================================================================================

l_stmt_num := 1000;
                    ---------------------------------------------------
                    -- {{{ Begin: material transaction for mode 2 jobs
                    ---------------------------------------------------
                    if v_wlji_mode_flag(v_idx) = 2 then
                        IF WSMPLCVA.v_org(v_wlji_org_id(v_idx)).MAX_ORG_ACC_PERIODS is null OR
                           WSMPLCVA.v_org(v_wlji_org_id(v_idx)).MAX_ORG_ACC_PERIODS = 0
                        then
                            l_error_code := -1;
                            handle_errmsg_name('WIP', 'WIP_NO_ACCT_PERIOD', l_stmt_num);
                            GOTO skip_mat_trans;
                        end if;
                        if WSMPLCVA.v_org(v_wlji_org_id(v_idx)).MAX_STK_LOC_CNTRL is null then
                            WSMPLCVA.v_org(v_wlji_org_id(v_idx)).MAX_STK_LOC_CNTRL := 1;
                        end if;

l_stmt_num := 1010;
                        Begin  -- material transaction
                            insert into mtl_material_transactions_temp(
                                last_update_date,
                                creation_date,
                                last_updated_by,
                                created_by,
                                last_update_login,
                                transaction_header_id,
                                transaction_source_id,
                                inventory_item_id,
                                organization_id,
                                revision,
                                subinventory_code,
                                locator_id,
                                transaction_quantity,
                                primary_quantity,
                                transaction_uom,
                                transaction_type_id,
                                transaction_action_id,
                                transaction_source_type_id,
                                transaction_date,
                                acct_period_id,
                                source_code,
                                source_line_id,
                                wip_entity_type,
                                negative_req_flag,
                                operation_seq_num,
                                wip_supply_type,
                                wip_commit_flag,
                                process_flag,
                                posting_flag,
                                transaction_temp_id
                            ) values (
                                v_wlji_last_updt_date(v_idx),
                                v_wlji_creation_date(v_idx),
                                v_wlji_last_updt_by(v_idx),
                                v_wlji_created_by(v_idx),
                                v_wlji_last_updt_login(v_idx),
                                l_mmtt_txn_hdr_id,
                                v_wlji_wip_entity_id(v_idx),
                                v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id,
                                v_wlji_org_id(v_idx),
                                v_wsli(v_wlji_src_line_id(v_idx)).revision,
                                v_wsli(v_wlji_src_line_id(v_idx)).subinventory_code,
                                v_wsli(v_wlji_src_line_id(v_idx)).locator_id,
                                -l_quantity_tobe_issued,
                                -l_quantity_tobe_issued,
                                v_wsli(v_wlji_src_line_id(v_idx)).primary_uom_code,
                                35,       -- Transaction_Type_Id
                                1,        -- Transaction_Action_Id
                                5,        -- Transaction_Source_Type_Id
                                SYSDATE,  -- Transaction_Date
                                WSMPLCVA.v_org(v_wlji_org_id(v_idx)).MAX_ORG_ACC_PERIODS,
                                'WSM',    -- Source_Code
                                to_char(v_wlji_src_line_id(v_idx)),
                                5,        -- Wip_Entity_Type
                                1,        -- Neg Req Flag
                                10,       -- Op Seq
                                '',       -- Supply Type
                                'N',      -- Wip_Commit_Flag
                                'Y',      -- Process_Flag
                                'Y',      -- Posting_Flag
                                mtl_material_transactions_s.nextval
                            ) RETURNING transaction_temp_id into l_txn_tmp_hdr_id;
                            if lbji_debug = 'Y' then
                                fnd_file.put_line(fnd_file.log,
                                    'Inserted '||SQL%ROWCOUNT||' rows into mmtt');
                            end if;

l_stmt_num := 1020;
                            INSERT INTO MTL_TRANSACTION_LOTS_TEMP (
                                transaction_temp_id,
                                last_update_date,
                                creation_date,
                                last_updated_by,
                                created_by,
                                last_update_login,
                                transaction_quantity,
                                primary_quantity,
                                lot_number
                            ) values (
                                l_txn_tmp_hdr_id,
                                v_wlji_last_updt_date(v_idx),
                                v_wlji_creation_date(v_idx),
                                v_wlji_last_updt_by(v_idx),
                                v_wlji_created_by(v_idx),
                                v_wlji_last_updt_login(v_idx),
                                -l_quantity_tobe_issued,
                                -l_quantity_tobe_issued,
                                v_wsli(v_wlji_src_line_id(v_idx)).lot_number);
                            if lbji_debug = 'Y' then
                                fnd_file.put_line(fnd_file.log,
                                    'Inserted '||SQL%ROWCOUNT||' rows into mtlt');
                            end if;

l_stmt_num := 1030;
                            UPDATE WIP_REQUIREMENT_OPERATIONS
                            set    wip_supply_type = 1
                            where  wip_entity_id = v_wlji_wip_entity_id(v_idx)
                            and    operation_seq_num = 10
                            and    inventory_item_id = v_wsli(v_wlji_src_line_id(v_idx)).inventory_item_id;

                        Exception  -- material transaction
                            when others then
                                l_error_code := SQLCODE;
                                l_error_msg  :=
                                    'WSM_LBJ_INTERFACE_PVT.launch_worker: stmt# '||l_stmt_num||' '
                                   ||SUBSTR(SQLERRM, 1,1000);
                                handle_error(l_error_code, l_error_msg,  l_stmt_num);
                                GOTO skip_mat_trans;
                        End; -- material transaction

<< skip_mat_trans >>

                        if l_error_code <> 0 then
                            l_error_count := l_error_count + 1;
                            GOTO abort_this_job;
                        end if;

                        l_atleast_one_row_in_mmtt := l_atleast_one_row_in_mmtt + 1;

                    end if; -- for mode 2
                    ---------------------------------------------------
                    -- }}} End: material transaction for mode 2 jobs
                    ---------------------------------------------------

                EXCEPTION
                    when others then
                        l_error_code := SQLCODE;
                        l_error_msg  :=
                            'WSM_LBJ_INTERFACE_PVT.launch_worker (stmt# '||l_stmt_num||') '
                           ||SUBSTR(SQLERRM, 1,1000);
                        handle_error(l_error_code, l_error_msg,  l_stmt_num);
                        l_error_count := l_error_count + 1;
                END; -- }}} main block


<<abort_this_job>>


l_stmt_num := 1040;
                -- {{ write into output file
                -- note that this is a rudimentary piece of commentary on the job created,
                -- or failed to create because there's no customer requirement on this.
                if v_wlji_load_type(v_idx) = 5 then
l_stmt_num := 1040.1;
	-- changed from org_organization_definitions to MTL_PARAMETERS for bug 5051885
	-- Performance issue on org_organization_definitions for full table scan on base tables
	-- SQL id 16641913

                    select organization_code
                    into   l_org_code
                    from   MTL_PARAMETERS
                    where  organization_id = v_wlji_org_id(v_idx);
    -- bug 5051885
l_stmt_num := 1040.2;
                    select meaning
                    into   l_job_type_code
                    from   mfg_lookups
                    where  lookup_type = 'WIP_DISCRETE_JOB'
                    and    lookup_code = v_wlji_job_type(v_idx);

l_stmt_num := 1040.3;
                    begin
                        select unique(concatenated_segments)
                        into   l_assembly_name
                        from   mtl_system_items_kfv
                        where  inventory_item_id = v_wlji_item_id(v_idx)
                        and    organization_id = v_wlji_org_id(v_idx);
                    exception
                        when others then
                            l_assembly_name := 'Unknown';
                    end;
                    fnd_file.put_line(fnd_file.output, '-------------------------------------------------------');
                    fnd_file.put_line(fnd_file.output, '                 Lot Based Job Creation                ');
                    fnd_file.put_line(fnd_file.output, '-------------------------------------------------------');
                    fnd_file.put_line(fnd_file.output, '   Organization: ' || l_org_code);
                    fnd_file.put_line(fnd_file.output, '       Job_name: ' || v_wlji_job_name(v_idx));
                    fnd_file.put_line(fnd_file.output, '       Job Type: ' || l_job_type_code);
                    fnd_file.put_line(fnd_file.output, '       Assembly: ' || l_assembly_name);
                    fnd_file.put_line(fnd_file.output, '       Quantity: ' || v_wlji_start_quantity(v_idx));
                    fnd_file.put_line(fnd_file.output, '     Start Date: ' || v_wlji_fusd(v_idx));
                    fnd_file.put_line(fnd_file.output, 'Completion Date: ' || v_wlji_lucd(v_idx));
                    fnd_file.put_line(fnd_file.output, '    Kanban Card: ' || v_wlji_kanban_card_id(v_idx));
                    if v_wlji_process_status(v_idx) <> 3 then
                        fnd_file.put_line(fnd_file.output, 'Process Status: Success');
                    else
                        fnd_file.put_line(fnd_file.output, 'Process Status: Falied To Create');
                    end if;
                    if v_wlji_process_status(v_idx) = 3 then
                        fnd_file.put_line(fnd_file.output, 'Error Message: ' || v_wlji_err_msg(v_idx));
                    end if;
                    fnd_file.put_line(fnd_file.output, '-------------------------------------------------------');
                end if; -- load type 5
                -- }} write into output file


                -- mark the rows without error to be deleted
                if v_wlji_err_code(v_idx) <> 0 then
                    rollback to savepoint_skip_job;
                end if;

l_stmt_num := 1050;
                if v_wlji_process_status(v_idx) <> 3 then
                    v_wlji_process_status(v_idx) := 5; -- 5 : complete without error
                    if lbji_debug = 'Y' then
                        fnd_file.put_line(fnd_file.log,
                            'Everything OK, changing the status of the row to 5..');
                    end if;
                else
                    -- {{ kanban begin
                    if v_wlji_kanban_card_id(v_idx) is not null then
                        inv_kanban_pvt.Update_Card_Supply_Status(
                                x_return_status  => l_return_status,
                                p_Kanban_Card_Id => v_wlji_kanban_card_id(v_idx),
                                p_Supply_Status  => inv_kanban_pvt.g_supply_status_Exception);

                        if ( l_return_status <> fnd_api.g_ret_sts_success ) then
                            l_error_code := -1;
                            fnd_message.set_name('WSM', 'WSM_KNBN_CARD_STS_FAIL');
                            select meaning
                            into   l_meaning
                            from   mfg_lookups
                            where  lookup_type = 'MTL_KANBAN_SUPPLY_STATUS'
                            and    lookup_code = 7
                            and    upper(enabled_flag) = 'Y';

                            fnd_message.set_token('STATUS',l_meaning);
                            l_error_msg := fnd_message.get;
                            handle_error(l_error_code, l_error_msg,  l_stmt_num);
                            l_error_count := l_error_count + 1;
                        end if;

                        update wip_discrete_jobs
                        set    kanban_card_id = null
                        where  wip_entity_id =  v_wlji_wip_entity_id(v_idx);

                    end if;
                    -- }} kanban end

                    dummy_err_code := 0;
                    dummy_err_msg := NULL;
                    wsmputil.WRITE_TO_WIE (
                        v_wlji_header_id(v_idx),
                        substr(v_wlji_err_msg(v_idx),1,2000),
                        v_wlji_request_id(v_idx),
                        v_wlji_program_id(v_idx),
                        v_wlji_program_appl_id(v_idx),
                        1,
                        dummy_err_code,
                        dummy_err_msg );

                    if dummy_err_code <> 0 then
                        fnd_file.put_line(fnd_file.log, 'WARNING ');
                        fnd_file.put_line(fnd_file.log,
                            'WSM_LBJ_INTERFACE_PVT.launch_worker: '||dummy_err_msg);
                        l_error_count := l_error_count + 1;
                    end if;
                end if;

                v_idx := v_wlji_header_id.next(v_idx);

            end loop; -- }}} inner loop

-- ==============================================================================================
-- END: Processing of data }}}
-- ==============================================================================================

            -- RETCODE return values
            --      0: success
            --      1: success with warning
            --      2: error
            -- RETCODE return values

            if l_warning_count <> 0 then
                retcode := 1;
                errbuf := 'The interface process produced at least one warning message';
                fnd_file.put_line(fnd_file.log,errbuf);
                conc_status := FND_CONCURRENT.SET_COMPLETION_STATUS('WARNING',errbuf);
            end if;

            if l_error_count <> 0 then
                retcode := 1;
                errbuf := 'The interface process marked at least one row as errored';
                fnd_file.put_line(fnd_file.log,errbuf);
                conc_status := FND_CONCURRENT.SET_COMPLETION_STATUS('WARNING',errbuf);
            end if;

l_stmt_num := 1060;
            -- bulk update wsm_lot_job_interface
            forall i in v_wlji_process_status.first..v_wlji_process_status.last
            update  wsm_lot_job_interface
            set     process_status = v_wlji_process_status(i),
                    error_code     = v_wlji_err_code(i),
                    error_msg      = v_wlji_err_msg(i),
                    request_id     = v_wlji_request_id(i),
                    program_id     = v_wlji_program_id(i),
                    program_application_id = v_wlji_program_appl_id(i)
            where   header_id = v_wlji_header_id(i);

        -- ST : Serial Support Project ...........................----------------------------------------------
        -- bulk update WSM_SERIAL_TXN_INTERFACE
        forall i in v_wlji_process_status.first..v_wlji_process_status.last
            update  WSM_SERIAL_TXN_INTERFACE
            set     process_status = v_wlji_process_status(i),
                    error_message  = v_wlji_err_msg(i),
                    request_id     = v_wlji_request_id(i),
                    program_id     = v_wlji_program_id(i),
                    program_application_id = v_wlji_program_appl_id(i)
            where   header_id = v_wlji_header_id(i);
        -- ST : Serial Support Project ...........................----------------------------------------------

l_stmt_num := 1060.1;

            forall i in v_wlji_process_status.first..v_wlji_process_status.last
            update  wsm_lot_job_dtl_interface
            set     process_status = v_wlji_process_status(i),
                    error_code     = v_wlji_err_code(i),
                    error_msg      = decode(v_wlji_process_status(i),   -- BUG3600450
                                            3, 'See header (header_id=' ||
                                                  v_wlji_header_id(i) || ') for error message',
                                            null),
                    request_id     = v_wlji_request_id(i),
                    program_id     = v_wlji_program_id(i),
                    program_application_id = v_wlji_program_appl_id(i)
            where   parent_header_id = v_wlji_header_id(i)
            and     v_wlji_num_of_children(i) > 0;


l_stmt_num := 1070;
            -- {{ launch INV worker
            if l_atleast_one_row_in_mmtt <>0 THEN
                fnd_file.put_line(fnd_file.log,
                    'Invoking Inventory API with header id: '||to_char(l_mmtt_txn_hdr_id));
                --OPTII-PERF:Call Inv API to reduce the waiting time.
                /*
                l_inv_worker_req_id := FND_REQUEST.submit_request (
                                    'INV', 'INCTCW', NULL, NULL, FALSE,
                                    to_char(l_mmtt_txn_hdr_id),
                                    --'1', NULL, NULL); -- bug 3733798
                    '4', NULL, NULL);   -- bug 3733798

                COMMIT; -- CZHDBG: why?

                fnd_file.put_line(fnd_file.log,
                    'Material Transaction temp_header_id is '||to_char(l_mmtt_txn_hdr_id));

                if l_inv_worker_req_id = 0 then
l_stmt_num := 1080;
                    retcode := 1;
                    errbuf:= 'Inventory worker returned failure '||
                             '(Transaction_header_id=' ||l_mmtt_txn_hdr_id||') : '
                             || SUBSTRB(SQLERRM,1,1000);
                    fnd_file.put_line(fnd_file.log,errbuf);
                    conc_status := FND_CONCURRENT.SET_COMPLETION_STATUS('WARNING',errbuf);
                    update  wsm_lot_job_interface
                    set     process_status = 4,
                            error_code = -2,
                            error_msg = l_error_msg
                    where   mode_flag = 2;

                else -- req_id <> 0
l_stmt_num := 1090;
                    fnd_file.put_line(fnd_file.log,'Inventory Transaction Worker request_id is '
                            ||to_char(l_inv_worker_req_id));
                    req_wait := FND_CONCURRENT.WAIT_FOR_REQUEST (
                                request_id => l_inv_worker_req_id,
                                interval   => 10, -- 10 seconds interval
                                max_wait   => 36000, -- 10 Hours maximum wait.
                                phase      => req_phase,
                                status     => req_status,
                                dev_phase  => req_devphase,
                                dev_status => req_devstatus,
                                message    => req_message);

                    fnd_file.put_line(fnd_file.log,
                        'Inventory Transaction Worker status is '||req_status);
                    fnd_file.put_line(fnd_file.log,
                        'Inventory Transaction Worker Completion Message: '||req_message);

                    if  req_devphase <> 'COMPLETE' OR  req_devstatus <> 'NORMAL' THEN
                        retcode := 1;
                        errbuf:= 'Inventory worker returned failure '||
                                 '(Transaction_header_id=' ||l_mmtt_txn_hdr_id||') : '||
                                 SUBSTRB(SQLERRM,1,1000);
                        fnd_file.put_line(fnd_file.log,errbuf);
                        conc_status := FND_CONCURRENT.SET_COMPLETION_STATUS('WARNING',errbuf);
                    end if;

                    check_errored_mmtt_records(l_mmtt_txn_hdr_id, l_error_code, l_error_msg);

                    if (l_error_code <> 0) or (l_error_msg is not null ) then
                        retcode := 1;
                        errbuf:= 'Errored Records in mmtt ' ||
                                 '(Transaction_header_id=' ||l_mmtt_txn_hdr_id||') : '||
                                 SUBSTRB(SQLERRM,1,1000);
                        fnd_file.put_line(fnd_file.log,errbuf);
                        conc_status := FND_CONCURRENT.SET_COMPLETION_STATUS('WARNING',errbuf);
                    end if;

                end if;  -- req_id
                */
                retcode := INV_LPN_TRX_PUB.PROCESS_LPN_TRX(
                                     p_trx_hdr_id =>l_mmtt_txn_hdr_id,
                                     p_commit => 'F',
                                     x_proc_msg => req_message,
                                     p_proc_mode => 1,
                                     p_process_trx => 'T',
                                     p_atomic => 'T',
                                     p_business_flow_code =>NULL);
                IF retcode <> 0 THEN
                   declare
                       x_msgcnt NUMBER;
                       x_msg_data VARCHAR2(256);
                   begin

                     FND_MSG_PUB.Count_And_Get(
                        p_encoded => 'T',
                        p_count => x_msgcnt,
                        p_data  => x_msg_data);

                       IF x_msgcnt > 0 THEN
                             -- There are messages in the stack so display them
                             for  x in 1..x_msgcnt LOOP
                               x_msg_data  := fnd_msg_pub.get(x, 'F');
                               fnd_file.put_line(fnd_file.log,'Inventory API Error at statement number ' || l_stmt_num || ' : ' || x_msg_data);
                             end loop;
                       ELSE
                           fnd_message.set_name(
                                                    application => 'INV',
                                                    name        => 'INV_PROCESS_FAILED');
                           fnd_message.set_token(
                                                    token    => 'PROCESS',
                                                    value    => 'TRXNS',
                                                    translate => TRUE);
                           x_msg_data := fnd_message.get;
                           fnd_file.put_line(fnd_file.log,'Inventory API Error at statement number ' || l_stmt_num || ' : ' || x_msg_data);
                       END IF;
                   end;

                END IF;--End of check on retcode


            end if; -- l_atleast_one_row_in_mmtt
            -- }} launch INV worker

            -- delete marked rows (without error rows) from wlji and wljdi
            Begin
                -- bug 3126758
                l_del_int_prof_value := fnd_profile.value('WSM_INTERFACE_HISTORY_DAYS');

                if l_atleast_one_row_in_mmtt <> 0 then
l_stmt_num := 1100;
                    delete from wsm_starting_lots_interface
                    where  header_id IN (
                            select  wlji.source_line_id
                            from    wsm_lot_job_interface wlji
                            where   wlji.process_status = 5
                            --and     wlji.group_id = l_batch_grp_id
                            and     NVL(transaction_date, creation_date)
                                        <= decode(l_del_int_prof_value,
                                                  null,
                                                  NVL(transaction_date, creation_date) -1,
                                                  SYSDATE-l_del_int_prof_value)
                           );
                    if lbji_debug = 'Y' then
                        fnd_file.put_line(fnd_file.log,
                            'Deleted '||SQL%ROWCOUNT||' rows from wsli');
                    end if;
                end if;

l_stmt_num := 1100.1;
                delete from wsm_lot_job_dtl_interface
                where  parent_header_id IN (
                        select  wlji.header_id
                        from    wsm_lot_job_interface wlji
                        where   wlji.process_status = 5
                        --and     wlji.group_id = l_batch_grp_id
                        and     NVL(transaction_date, creation_date)
                                    <= decode(l_del_int_prof_value,
                                              null,
                                              NVL(transaction_date, creation_date) -1,
                                              SYSDATE-l_del_int_prof_value)
                       );
l_stmt_num := 1100.2;

        -- ST : Serial Support Project ...........................----------------------------------------------
        -- Delete successful rows from WSM_SERIAL_TXN_INTERFACE
        delete from WSM_SERIAL_TXN_INTERFACE
        where header_id IN
                (select  wlji.header_id
                         from    wsm_lot_job_interface wlji
                         where   wlji.process_status = 5
                         and     NVL(transaction_date, creation_date)
                                    <= decode(l_del_int_prof_value,
                                              null,
                                              NVL(transaction_date, creation_date) -1,
                                              SYSDATE-l_del_int_prof_value)
                       );
        -- ST : Serial Support Project ...........................----------------------------------------------

l_stmt_num := 1100.25;

                delete  from wsm_lot_job_interface
                where   process_status = 5
                --and     group_id = l_batch_grp_id
                and     NVL(transaction_date, creation_date)
                            <= decode(l_del_int_prof_value,
                                      null,
                                      NVL(transaction_date, creation_date) -1,
                                      SYSDATE-l_del_int_prof_value);
                if lbji_debug = 'Y' then
                    fnd_file.put_line(fnd_file.log,
                        'Deleted '||SQL%ROWCOUNT||' rows from wlji');
                end if;

l_stmt_num := 1100.3;
                -- this is for those without header
                delete  from wsm_lot_job_dtl_interface
                where   process_status = 5
                --and     group_id = l_batch_grp_id
                and     NVL(transaction_date, creation_date)
                            <= decode(l_del_int_prof_value,
                                      null,
                                      NVL(transaction_date, creation_date) -1,
                                      SYSDATE-l_del_int_prof_value);
                if lbji_debug = 'Y' then
                    fnd_file.put_line(fnd_file.log,
                        'Deleted '||SQL%ROWCOUNT||' rows from wljdi');
                end if;

            Exception
                when others then
                    retcode := 1;
                    errbuf := 'Deletion of successful rows from interface table(s) failed';
                    fnd_file.put_line(fnd_file.log,errbuf);
                    conc_status := FND_CONCURRENT.SET_COMPLETION_STATUS('WARNING',errbuf);
            End;

            COMMIT; -- commit a batch

        else    -- }} if csr_wlji%rowcount - prev_rowcount <> 0, one batch
            exit;   -- exit the outer loop
        end if;

        prev_rowcount := csr_wlji%rowcount;

    END LOOP; -- }}} outer loop
    close csr_wlji;


-- ==============================================================================================
-- BEGIN: handle WLJDI records with parent_header_id = NULL {{{
-- ==============================================================================================
    -- reset savepoint savepoint_top since all the records with header are done.
    SAVEPOINT savepoint_top;

    DECLARE
        l_v_d_we_id_indp    t_number;
        l_v_d_org_id_indp   t_number;
        l_d_jobs            number := 0;
        l_v_d_we_id_err     t_number;
        l_v_d_org_id_err    t_number;
        l_v_d_emsg_err      t_errmsg;
        l_v_d_ecode_err     t_number;
        l_d_idx_err         number := 0;
        l_v_d_we_id_ok      t_number;
        l_v_d_org_id_ok     t_number;
        l_d_idx_ok          number := 0;
    BEGIN
l_stmt_num := 1200;
        open c_wljdi_jobs_no_parent;
        fetch c_wljdi_jobs_no_parent bulk collect into
                l_v_d_we_id_indp,
                l_v_d_org_id_indp;
        l_d_jobs := c_wljdi_jobs_no_parent%rowcount;
        close c_wljdi_jobs_no_parent;

        if(l_d_jobs > 0) then
            if lbji_debug = 'Y' then
                fnd_file.new_line(fnd_file.log, 2);
                fnd_file.put_line(fnd_file.log,
                    'Handling WLJDI records with parent_header_id = NULL...');
            end if;

            l_d := l_v_d_org_id_indp.first;
            l_d_idx_err := 1;
            l_d_idx_ok := 1;
            while (l_d IS NOT NULL)
            loop

                SAVEPOINT savepoint_skip_job2;
l_stmt_num := 1210;
                import_lot_job_details(
                    p_wip_entity_id             => l_v_d_we_id_indp(l_d),
                    p_org_id                    => l_v_d_org_id_indp(l_d),
                    p_wo_records_exist          => 'Y',            -- p_wo_records_exist
                    p_parent_header_id          => null,
                    p_job_scheduled_start_date  => null,           -- p_job_scheduled_start_date
                    p_job_scheduled_compl_date  => null,           -- p_job_scheduled_compl_date
                    p_job_scheduled_quantity    => null,
                    p_group_id                  => p_group_id,
                    p_last_updt_date            => sysdate,
                    p_last_updt_by              => fnd_global.user_id,
                    p_last_updt_login           => fnd_global.login_id,
                    p_creation_date             => sysdate,
                    p_created_by                => fnd_global.user_id,
                    p_request_id                => fnd_global.conc_request_id,
                    p_program_appl_id           => fnd_global.prog_appl_id,
                    p_program_id                => fnd_global.conc_program_id,
                    p_prog_updt_date            => sysdate,
                    p_error_code                => l_error_code,
                    p_error_msg                 => l_error_msg);
                if (l_error_code <> 0) then
                    l_error_count := l_error_count + 1;
                    l_v_d_we_id_err(l_d_idx_err)  := l_v_d_we_id_indp(l_d);
                    l_v_d_org_id_err(l_d_idx_err) := l_v_d_org_id_indp(l_d);
                    l_v_d_ecode_err(l_d_idx_err)  := l_error_code;
                    l_v_d_emsg_err(l_d_idx_err)   := l_error_msg;
                    l_d_idx_err := l_d_idx_err +1;
                    ROLLBACK to savepoint_skip_job2;
                else
                    l_v_d_we_id_ok(l_d_idx_ok)   := l_v_d_we_id_indp(l_d);
                    l_v_d_org_id_ok(l_d_idx_ok)  := l_v_d_org_id_indp(l_d);
                    l_d_idx_ok := l_d_idx_ok +1;
                    COMMIT;     -- commit each job
                end if;

                l_d := l_v_d_org_id_indp.next(l_d);
            end loop;

l_stmt_num := 1220;
            if(l_d_idx_err > 1) then
                forall i in l_v_d_we_id_err.first..l_v_d_we_id_err.last
                    update  wsm_lot_job_dtl_interface
                    set     process_status = 3,
                            error_code     = l_v_d_ecode_err(i),
                            error_msg      = l_v_d_emsg_err(i),
                            request_id     = fnd_global.conc_request_id,
                            program_id     = fnd_global.conc_program_id,
                            program_application_id = fnd_global.prog_appl_id
                    where   parent_header_id IS NULL
                    and     process_status = WIP_CONSTANTS.RUNNING
                    and     wip_entity_id = l_v_d_we_id_err(i)
                    and     organization_id = l_v_d_org_id_err(i);

                    errbuf := 'The interface process marked at least one row as errored';
                    fnd_file.put_line(fnd_file.log,errbuf);
                    conc_status := FND_CONCURRENT.SET_COMPLETION_STATUS('WARNING',errbuf);

            end if;
l_stmt_num := 1230;
            if(l_d_idx_ok > 1) then
                forall i in l_v_d_we_id_ok.first..l_v_d_we_id_ok.last
                    delete  from wsm_lot_job_dtl_interface
                    where   parent_header_id IS NULL
                    and     process_status = WIP_CONSTANTS.RUNNING
                    and     wip_entity_id = l_v_d_we_id_ok(i)
                    and     organization_id = l_v_d_org_id_ok(i);
            end if;
        end if; -- l_d_jobs > 0
    END;

-- ==============================================================================================
-- END: handle WLJDI records with parent_header_id = NULL }}}
-- ==============================================================================================


l_stmt_num := 1300;
    -- {{ osp begin, launch import requisition
    if g_num_of_osp_exists <> 0 then

        /*Added Code to set MOAC parameter for bug 5485653  */

        select to_number(ORG_INFORMATION3) into l_ou_id
        from HR_ORGANIZATION_INFORMATION
        where ORGANIZATION_ID = l_mo_org_id
        and ORG_INFORMATION_CONTEXT = l_org_acct_ctxt;

        FND_REQUEST.SET_ORG_ID (l_ou_id);

        l_req_request_id := fnd_request.submit_request(
                'PO', 'REQIMPORT', NULL, NULL, FALSE,'WIP', NULL, 'ITEM',
                NULL,'N', 'Y', chr(0), NULL, NULL, NULL,
                NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
                NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
        );

        fnd_file.put_line(fnd_file.log,'Concurrent Request for Requisition Inport Submitted');
        fnd_file.put_line(fnd_file.log,'Request_id: '||l_req_request_id);
    end if;
    -- }} osp end

l_stmt_num := 1310;
    -- phantom project
    delete from bom_explosion_temp
    where  group_id = wsmpwrot.explosion_group_id;
    wsmpwrot.explosion_group_id   := null;
    wsmpwrot.use_phantom_routings := null;

    if l_error_count = 0 then
        retcode := 0;
        errbuf := '';
        conc_status := FND_CONCURRENT.SET_COMPLETION_STATUS('SUCCESS',errbuf);
    end if;

    COMMIT;


EXCEPTION  -- for launch_worker
    when e_abort_request then
        rollback to savepoint_top;
        retcode := 2;
        errbuf := 'WSM_LBJ_INTERFACE_PVT.launch_worker (#'||l_stmt_num||') '
                  || SUBSTR(SQLERRM, 1,240);
        fnd_file.put_line(fnd_file.log,errbuf);
        conc_status := FND_CONCURRENT.SET_COMPLETION_STATUS('ERROR',errbuf);
        wsmputil.WRITE_TO_WIE (
            0,
            substr(errbuf,1,2000),
            fnd_global.conc_request_id,
            fnd_global.conc_program_id,
            fnd_global.prog_appl_id,
            1,
            dummy_err_code,
            dummy_err_msg );
        COMMIT;

    when others then
        rollback to savepoint_top;
        retcode := 2;
        errbuf := 'WSM_LBJ_INTERFACE_PVT.launch_worker (#'||l_stmt_num||') '
                  || SUBSTR(SQLERRM, 1,240);
        fnd_file.put_line(fnd_file.log,errbuf);
        conc_status := FND_CONCURRENT.SET_COMPLETION_STATUS('ERROR',errbuf);

        wsmputil.WRITE_TO_WIE (
            0,
            substr(errbuf,1,2000),
            fnd_global.conc_request_id,
            fnd_global.conc_program_id,
            fnd_global.prog_appl_id,
            1,
            dummy_err_code,
            dummy_err_msg );
        COMMIT;
END launch_worker;



-- **********************************************************************************************
-- PROCEDURE build_job_header_info
-- **********************************************************************************************

-------------------------------------------------------------------------------------------------
--
-- Note that a new wip_entity_id will be generated
--
-- p_src_client_server: 1     => this procedure is being called from client side,
--                      other => server side call.
--
-- p_po_creation_time: => pass the value of po_creation_time in wip_parameters for the org
-------------------------------------------------------------------------------------------------

--
-- R12Dev: for secondary quantity
-- Overload the procedure
--

procedure build_job_header_info(
        p_common_routing_sequence_id    in number,
        p_common_bill_sequence_id       in number,
        p_status_type                   in number,
        p_class_code                    in varchar2,
        p_org_id                        in number,
        p_wip_entity_id                 in out nocopy number,
        p_last_updt_date                in date,
        p_last_updt_by                  in number,
        p_creation_date                 in date,
        p_created_by                    in number,
        p_last_updt_login               in number,
        p_request_id                    in number,
        p_program_appl_id               in number,
        p_program_id                    in number,
        p_prog_updt_date                in date,
        p_source_line_id                in number,
        p_source_code                   in varchar2,
        p_description                   in varchar2,
        p_item                          in number,
        p_job_type                      in number,
        p_bom_reference_id              in number,
        p_routing_reference_id          in number,
        p_firm_planned_flag             in number,
        p_wip_supply_type               in number,
        p_job_scheduled_start_date      in date,
        p_job_scheduled_compl_date      in date,
        p_start_quantity                in number,
        p_net_quantity                  in number,
        p_coproducts_supply             in number,
        p_bom_revision                  in varchar2,
        p_routing_revision              in varchar2,
        p_bom_revision_date             in date,
        p_routing_revision_date         in date,
        p_lot_number                    in varchar2,
        p_alt_bom_designator            in varchar2,
        p_alt_routing_designator        in varchar2,
        p_priority                      in number,
        p_due_date                      in date,
        p_attribute_category            in varchar2,
        p_attribute1                    in varchar2,
        p_attribute2                    in varchar2,
        p_attribute3                    in varchar2,
        p_attribute4                    in varchar2,
        p_attribute5                    in varchar2,
        p_attribute6                    in varchar2,
        p_attribute7                    in varchar2,
        p_attribute8                    in varchar2,
        p_attribute9                    in varchar2,
        p_attribute10                   in varchar2,
        p_attribute11                   in varchar2,
        p_attribute12                   in varchar2,
        p_attribute13                   in varchar2,
        p_attribute14                   in varchar2,
        p_attribute15                   in varchar2,
        p_job_name                      in varchar2,
        p_completion_subinventory       in varchar2,
        p_completion_locator_id         in number,
        p_demand_class                  in varchar2,
        p_project_id                    in number,
        p_task_id                       in number,
        p_schedule_group_id             in number,
        p_build_sequence                in number,
        p_line_id                       in number,
        p_kanban_card_id                in number,
        p_overcompl_tol_type            in number,
        p_overcompl_tol_value           in number,
        p_end_item_unit_number          in number,
        p_src_client_server             in number,
        p_po_creation_time              in number,
        p_date_released                 in date,
        p_error_code                    out nocopy number,
        p_error_msg                     out nocopy varchar2) is

l_wjsq_uom_code         tbl_wjsq_uom_code;
l_wjsq_start_quantity   tbl_wjsq_start_quantity;

BEGIN

    l_wjsq_uom_code.delete();
    l_wjsq_start_quantity.delete();

    build_job_header_info(
        p_common_routing_sequence_id   =>  p_common_routing_sequence_id    ,
        p_common_bill_sequence_id      =>  p_common_bill_sequence_id       ,
        p_status_type                  =>  p_status_type                   ,
        p_class_code                   =>  p_class_code                    ,
        p_org_id                       =>  p_org_id                        ,
        p_wip_entity_id                =>  p_wip_entity_id                 ,
        p_last_updt_date               =>  p_last_updt_date                ,
        p_last_updt_by                 =>  p_last_updt_by                  ,
        p_creation_date                =>  p_creation_date                 ,
        p_created_by                   =>  p_created_by                    ,
        p_last_updt_login              =>  p_last_updt_login               ,
        p_request_id                   =>  p_request_id                    ,
        p_program_appl_id              =>  p_program_appl_id               ,
        p_program_id                   =>  p_program_id                    ,
        p_prog_updt_date               =>  p_prog_updt_date                ,
        p_source_line_id               =>  p_source_line_id                ,
        p_source_code                  =>  p_source_code                   ,
        p_description                  =>  p_description                   ,
        p_item                         =>  p_item                          ,
        p_job_type                     =>  p_job_type                      ,
        p_bom_reference_id             =>  p_bom_reference_id              ,
        p_routing_reference_id         =>  p_routing_reference_id          ,
        p_firm_planned_flag            =>  p_firm_planned_flag             ,
        p_wip_supply_type              =>  p_wip_supply_type               ,
        p_job_scheduled_start_date     =>  p_job_scheduled_start_date      ,
        p_job_scheduled_compl_date     =>  p_job_scheduled_compl_date      ,
        p_start_quantity               =>  p_start_quantity                ,
        p_net_quantity                 =>  p_net_quantity                  ,
        p_coproducts_supply            =>  p_coproducts_supply             ,
        p_bom_revision                 =>  p_bom_revision                  ,
        p_routing_revision             =>  p_routing_revision              ,
        p_bom_revision_date            =>  p_bom_revision_date             ,
        p_routing_revision_date        =>  p_routing_revision_date         ,
        p_lot_number                   =>  p_lot_number                    ,
        p_alt_bom_designator           =>  p_alt_bom_designator            ,
        p_alt_routing_designator       =>  p_alt_routing_designator        ,
        p_priority                     =>  p_priority                      ,
        p_due_date                     =>  p_due_date                      ,
        p_attribute_category           =>  p_attribute_category            ,
        p_attribute1                   =>  p_attribute1                    ,
        p_attribute2                   =>  p_attribute2                    ,
        p_attribute3                   =>  p_attribute3                    ,
        p_attribute4                   =>  p_attribute4                    ,
        p_attribute5                   =>  p_attribute5                    ,
        p_attribute6                   =>  p_attribute6                    ,
        p_attribute7                   =>  p_attribute7                    ,
        p_attribute8                   =>  p_attribute8                    ,
        p_attribute9                   =>  p_attribute9                    ,
        p_attribute10                  =>  p_attribute10                   ,
        p_attribute11                  =>  p_attribute11                   ,
        p_attribute12                  =>  p_attribute12                   ,
        p_attribute13                  =>  p_attribute13                   ,
        p_attribute14                  =>  p_attribute14                   ,
        p_attribute15                  =>  p_attribute15                   ,
        p_job_name                     =>  p_job_name                      ,
        p_completion_subinventory      =>  p_completion_subinventory       ,
        p_completion_locator_id        =>  p_completion_locator_id         ,
        p_demand_class                 =>  p_demand_class                  ,
        p_project_id                   =>  p_project_id                    ,
        p_task_id                      =>  p_task_id                       ,
        p_schedule_group_id            =>  p_schedule_group_id             ,
        p_build_sequence               =>  p_build_sequence                ,
        p_line_id                      =>  p_line_id                       ,
        p_kanban_card_id               =>  p_kanban_card_id                ,
        p_overcompl_tol_type           =>  p_overcompl_tol_type            ,
        p_overcompl_tol_value          =>  p_overcompl_tol_value           ,
        p_end_item_unit_number         =>  p_end_item_unit_number          ,
        p_src_client_server            =>  p_src_client_server             ,
        p_po_creation_time             =>  p_po_creation_time              ,
        p_date_released                =>  p_date_released                 ,
        p_wjsq_uom_code                =>  l_wjsq_uom_code                 ,
        p_wjsq_start_quantity          =>  l_wjsq_start_quantity           ,
        p_error_code                   =>  p_error_code                    ,
        p_error_msg                    =>  p_error_msg                     );

END build_job_header_info;



-- **********************************************************************************************
-- PROCEDURE build_job_copy_info
-- **********************************************************************************************

procedure build_job_copy_info (
        p_common_routing_sequence_id    in number,
        p_common_bill_sequence_id       in number,
        p_org_id                        in number,
        p_wip_entity_id                 in number,
        p_last_updt_date                in date,
        p_last_updt_by                  in number,
        p_creation_date                 in date,
        p_created_by                    in number,
        p_last_updt_login               in number,
        p_request_id                    in number,
        p_program_appl_id               in number,
        p_program_id                    in number,
        p_prog_updt_date                in date,
        p_item                          in number,
        p_bom_reference_id              in number,
        p_routing_reference_id          in number,
        p_wip_supply_type               in number,
        p_job_scheduled_start_date      in date,
        p_job_scheduled_compl_date      in date,
        p_start_quantity                in number,
        p_bom_revision_date             in date,
        p_routing_revision_date         in date,
        p_alt_bom_designator            in varchar2,
        p_alt_routing_designator        in varchar2,
        p_header_id                     in number,      -- header_id in WLJI, pass null if N/A
        p_num_of_children               in number,      -- number of children in WLJDI
        p_infinite_schedule             in varchar2,    -- call infinite scheduler or not
        p_error_code                    out nocopy number,
        p_error_msg                     out nocopy varchar2) is

l_stmt_num              number;
e_build_job_dtl         exception;

l_sch_mode              number  := null;
l_sch_date              date    := null;

l_scheduled_start_date  date;
l_scheduled_compl_date  date;

l_bill_sequence_id      number; -- BUG: 3341350/3286849
l_bill_item_id          number;
l_common_bill_seq_id    number; -- BUG: 3981616

l_op_seq_id             NUMBER; --Bug 5104459

BEGIN
    p_error_code := 0;
    p_error_msg := '';

    l_scheduled_start_date := p_job_scheduled_start_date;
    l_scheduled_compl_date := p_job_scheduled_compl_date;

    if(p_infinite_schedule = 'Y') then
        if(p_job_scheduled_start_date IS NULL) then
            l_sch_mode := WIP_CONSTANTS.BACKWARDS;
            l_sch_date := p_job_scheduled_compl_date;
        else
            l_sch_mode := WIP_CONSTANTS.FORWARDS;
            l_sch_date := p_job_scheduled_start_date;
        end if;
        -- force import_lot_job_details to get scheduled_start_date
        -- and scheduled_compl_date from WDJ in such case
        l_scheduled_start_date := null;
        l_scheduled_compl_date := null;
    end if;

    -- BA: BUG: 3341350/3286849
l_stmt_num := 5;
    l_bill_sequence_id := WSMPUTIL.GET_JOB_BOM_SEQ_ID(p_wip_entity_id);
    if(l_bill_sequence_id = -1) then
        p_error_msg  := 'Fail to get bill sequence id (wip_entity_id='||p_wip_entity_id ||')';
        p_error_code := -1;
        raise e_build_job_dtl;
    end if;
    -- EA: BUG: 3341350/3286849

   -- BA: BUG 3981616 l_common_bill_seq_id is set to be null if p_common_bill_sequence_id = 0
   if(p_common_bill_sequence_id = 0) then
      l_common_bill_seq_id := NULL;
   else
      l_common_bill_seq_id := p_common_bill_sequence_id;
   end if;
   -- EA: BUG 3981616

    if(p_routing_reference_id IS NULL) then
        l_bill_item_id := p_item;
    else
        l_bill_item_id := p_bom_reference_id;
    end if;

l_stmt_num := 10;
    -- Create the job level copy
    --OPTII-PERF:Find if phantom exists or not.
    begin
         select 1 into v_phantom_exists
         from  bom_inventory_components
         where bill_sequence_id = l_common_bill_seq_id
         and   p_bom_revision_date between effectivity_date and nvl(disable_date,p_bom_revision_date+1)
         and   wip_supply_type = 6
         and   rownum = 1;

         v_phantom_exists := 1;

    exception
         when others then
            v_phantom_exists := 2;

    end;

    if v_insert_wip = 1 then
       --if  v_phantom_exists = 1 then
       if  v_phantom_exists = 1 then
           v_insert_wip := 2;
       end if;
       --If job dtls are populated wo should be populated after the
       -- copy tables are updated with the data from dtls table.
       if  p_num_of_children > 0 then
           v_insert_wip := 2;
       end if;
    end if;
    --Start changes for Bug 5104459
    l_stmt_num := 11;

    wsmputil.FIND_ROUTING_START(
                            p_common_routing_sequence_id,
                            p_routing_revision_date,
                            l_op_seq_id,
                            p_error_code,
                            p_error_msg);

     if p_error_code <> 0 then
                    raise e_build_job_dtl;
     end if;

     l_stmt_num := 12;

     wsmputil.FIND_ROUTING_END(
                            p_common_routing_sequence_id,
                            p_routing_revision_date,
                            l_op_seq_id,
                            p_error_code,
                            p_error_msg);

     if p_error_code <> 0 then
              raise e_build_job_dtl;
     end if;

     --End changes for Bug 5104459

    wsm_jobcopies_pvt.create_jobcopies (
            x_err_buf               => p_error_msg,
            x_err_code              => p_error_code,
            p_wip_entity_id         => p_wip_entity_id,
            p_org_id                => p_org_id,
            p_primary_item_id       => p_item,
            p_routing_item_id       => nvl(p_routing_reference_id, p_item),      -- newly added ??
            p_alt_rtg_desig         => p_alt_routing_designator,    -- newly added
            p_rtg_seq_id            => null,                        -- newly added, not used in API
            p_common_rtg_seq_id     => p_common_routing_sequence_id,
            p_rtg_rev_date          => p_routing_revision_date,
            p_bill_item_id          => l_bill_item_id,              -- newly added ??
            p_alt_bom_desig         => p_alt_bom_designator,
            p_bill_seq_id           => l_bill_sequence_id,          -- newly added
            --p_common_bill_seq_id  => p_common_bill_sequence_id,   -- bug 3981616
            p_common_bill_seq_id    => l_common_bill_seq_id,        -- bug 3981616
            p_bom_rev_date          => p_bom_revision_date,
            p_wip_supply_type       => p_wip_supply_type,
            p_last_update_date      => p_last_updt_date,
            p_last_updated_by       => p_last_updt_by,
            p_last_update_login     => p_last_updt_login,
            p_creation_date         => p_creation_date,
            p_created_by            => p_created_by,
            p_request_id            => p_request_id,
            p_program_app_id        => p_program_appl_id,
            p_program_id            => p_program_id,
            p_program_update_date   => p_prog_updt_date,
            p_inf_sch_flag          => p_infinite_schedule,
            p_inf_sch_mode          => l_sch_mode,
            p_inf_sch_date          => l_sch_date,
            --OPTII-PERF:Following new arguments are added.
            p_new_job               => v_new_job,
            p_insert_wip            => v_insert_wip,
            p_phantom_exists        => v_phantom_exists,
            p_charges_exist         => 2);

            v_new_job := NULL;
            --v_insert_wip := NULL;
            --v_phantom_exists := NULL;
    -- BC: bug 3400858/3400858
    --if (p_error_code <> 0) then

    --if (p_error_code <> 0) OR (p_error_code IS NOT NULL) OR -- No error
    --    (p_error_code <> -1)    -- Warning
    --then
    --    raise e_build_job_dtl;
    --end if;

    if (p_error_code = 0) or
        (p_error_code is null) or -- no error
        (p_error_code = -1)    -- warning
    then
        p_error_code := 0;
        p_error_msg := null;
    else
        raise e_build_job_dtl;
    end if;
    -- EC: bug 3303267/3400858

    if lbji_debug = 'Y' then
        fnd_file.put_line(fnd_file.log, 'Make job-level BOM/RTG copy ...');
    end if;

l_stmt_num := 20;
    -- Mark recommendations on the job level copy
    if(p_num_of_children > 0) then
        import_lot_job_details (
            p_wip_entity_id             => p_wip_entity_id,
            p_org_id                    => p_org_id,
            p_wo_records_exist          => 'N',                -- p_wo_records_exist
            p_parent_header_id          => p_header_id,
            p_job_scheduled_start_date  => l_scheduled_start_date,
            p_job_scheduled_compl_date  => l_scheduled_compl_date,
            p_job_scheduled_quantity    => p_start_quantity,
            p_group_id                  => null,
            p_last_updt_date            => p_last_updt_date,
            p_last_updt_by              => p_last_updt_by,
            p_last_updt_login           => p_last_updt_login,
            p_creation_date             => p_creation_date,
            p_created_by                => p_created_by,
            p_request_id                => p_request_id,
            p_program_appl_id           => p_program_appl_id,
            p_program_id                => p_program_id,
            p_prog_updt_date            => p_prog_updt_date,
            p_error_code                => p_error_code,
            p_error_msg                 => p_error_msg);
        if (p_error_code <> 0) then
            raise e_build_job_dtl;
        end if;
    end if;

EXCEPTION
    when e_build_job_dtl then
        -- p_error_code/p_error_msg was set
        fnd_file.put_line(fnd_file.log,
            substr('build_job_copy_info: (#'||l_stmt_num||') '
                   ||p_error_msg, 1, 2000));

    when others then
        p_error_code := SQLCODE;
        p_error_msg := substr('build_job_copy_info: (#'||l_stmt_num||') '
                       ||SQLERRM, 1, 2000);
        fnd_file.put_line(fnd_file.log, substr(p_error_msg, 1, 2000));
END build_job_copy_info;


-- **********************************************************************************************
-- PROCEDURE build_job_detail_info
-- **********************************************************************************************

-------------------------------------------------------------------------------------------------
-- For job creation, p_rtg_op_seq_num = rtg op_seq_num of the first operation or null
-- For bouns, p_rtg_op_seq_num = rtg op_seq_num of the starting operation on 'the' path
-- This procedure is only called during
--     (1)job creation
--     (2)change bom/rtg alt
--     (3)change rbom/rtg reference
-- in all such cases, WO records are considered as not available
-------------------------------------------------------------------------------------------------

procedure build_job_detail_info(
        p_common_routing_sequence_id    in number,
        p_common_bill_sequence_id       in number,
        p_status_type                   in number,
        p_org_id                        in number,
        p_wip_entity_id                 in number,
        p_last_updt_date                in date,
        p_last_updt_by                  in number,
        p_creation_date                 in date,
        p_created_by                    in number,
        p_last_updt_login               in number,
        p_request_id                    in number,
        p_program_appl_id               in number,
        p_program_id                    in number,
        p_prog_updt_date                in date,
        p_item                          in number,
        p_job_type                      in number,
        p_bom_reference_id              in number,
        p_routing_reference_id          in number,
        p_wip_supply_type               in number,
        p_job_scheduled_start_date      in date,        -- not used
        p_job_scheduled_compl_date      in date,        -- not used
        p_start_quantity                in number,
        p_bom_revision_date             in date,
        p_routing_revision_date         in date,
        p_alt_bom_designator            in varchar2,
        p_alt_routing_designator        in varchar2,
        p_rtg_op_seq_num                in number,
        p_error_code                    out nocopy number,
        p_error_msg                     out nocopy varchar2) is

BEGIN

    build_job_detail_info(
            p_common_routing_sequence_id => p_common_routing_sequence_id,
            p_common_bill_sequence_id    => p_common_bill_sequence_id,
            p_status_type                => p_status_type,
            p_org_id                     => p_org_id,
            p_wip_entity_id              => p_wip_entity_id,
            p_last_updt_date             => p_last_updt_date,
            p_last_updt_by               => p_last_updt_by,
            p_creation_date              => p_creation_date,
            p_created_by                 => p_created_by,
            p_last_updt_login            => p_last_updt_login,
            p_request_id                 => p_request_id,
            p_program_appl_id            => p_program_appl_id,
            p_program_id                 => p_program_id,
            p_prog_updt_date             => p_prog_updt_date,
            p_item                       => p_item,
            p_job_type                   => p_job_type,
            p_bom_reference_id           => p_bom_reference_id,
            p_routing_reference_id       => p_routing_reference_id,
            p_wip_supply_type            => p_wip_supply_type,
            p_job_scheduled_start_date   => p_job_scheduled_start_date,
            p_job_scheduled_compl_date   => p_job_scheduled_compl_date,
            p_start_quantity             => p_start_quantity,
            p_bom_revision_date          => p_bom_revision_date,
            p_routing_revision_date      => p_routing_revision_date,
            p_alt_bom_designator         => p_alt_bom_designator,
            p_alt_routing_designator     => p_alt_routing_designator,
            p_rtg_op_seq_num             => p_rtg_op_seq_num,
            p_error_code                 => p_error_code,
            p_error_msg                  => p_error_msg,
            p_src_client_server          => 0,
            p_po_creation_time           => wip_constants.manual_creation); -- default is not to create PO

END build_job_detail_info;


/*******************************************************************************

   Procedure to check if a resource is costed.....

********************************************************************************/

Procedure check_resource_costed (p_wip_entity_id     in         number,
                     p_org_id            in         number,
                 p_res_op_seq_num    in         number,
                 p_op_seq_num        in         number,
                 x_error_code        out nocopy number,
                 x_error_msg         out nocopy varchar2
                )
                is

cursor c_lot_wcti_check is
      select 1
      from wip_cost_txn_interface
      where organization_id = p_org_id
      and wip_entity_id = p_wip_entity_id
      and operation_seq_num = p_op_seq_num
      and resource_seq_num = p_res_op_seq_num
      and rownum = 1;

cursor c_lot_wt_check is
      select 1
      from wip_transactions
      where organization_id = p_org_id
      and wip_entity_id = p_wip_entity_id
      and operation_seq_num = p_op_seq_num
      and resource_seq_num = p_res_op_seq_num
      and rownum = 1;

l_stmt_num number;
begin

    x_error_code := 0;
    x_error_msg  := null;

    l_stmt_num := 10;

    for c_lot_wcti_check_rec in c_lot_wcti_check loop
        x_error_code := -1;  /* costed .. */
    end loop;

    l_stmt_num := 20;

    for c_lot_wt_check_rec in c_lot_wt_check loop
        x_error_code := -1; /* costed.... */
    end loop;

exception
    when others then
        /* add the message also.... */

        x_error_code := -1;
        x_error_msg  := 'check_resource_costed : ' || l_stmt_num || ' : ' || SQLCODE || substrb(SQLERRM,1,1000);
        fnd_file.put_line(fnd_file.log,x_error_msg);

end check_resource_costed;

/*******************************************************************************************

    Procedure to delete the setup info of a resource that is being replaced or deleted...

********************************************************************************************/

Procedure delete_setup_info(p_wip_entity_id     in         number,
                p_org_id            in         number,
                p_par_res_seq_num   in     number,
                p_op_seq_num    in         number,
                p_handle_curr_op    in         varchar2,
                x_error_code        out nocopy number,
                x_error_msg         out nocopy varchar2
               )
               is

e_res_costed  exception;

l_setup_exists NUMBER := 0;
l_res_costed   number := 0;
cursor c_setup_res(c_par_res_seq_num NUMBER) is
       select resource_id,resource_seq_num,operation_seq_num,applied_resource_units
       from wip_operation_resources wor
       where  wor.organization_id = p_org_id
       and    wor.wip_entity_id   = p_wip_entity_id
       and    wor.operation_seq_num   = p_op_seq_num
       and    wor.parent_resource_seq  = c_par_res_seq_num;

l_stmt_num  number;

begin

    /* open the cursor and loop through the setup resources and check if any of them is costed...
      if so return an error....
    */
    l_stmt_num := 10;

    l_res_costed := 0;
    l_setup_exists := 0;

    if (p_handle_curr_op = 'Y') then
        IF lbji_debug = 'Y' then
                fnd_file.put_line(fnd_file.log,'delete setup info: WIP table change.... : ');
        END IF;

        l_stmt_num := 20;

        for l_setup_res in c_setup_res(p_par_res_seq_num) loop

            l_setup_exists := 1;
            /* call to check if costs exost for the particular setup resource... */
            if nvl(l_setup_res.applied_resource_units,0) <> 0 then
                /* error out as costed.... */
                l_stmt_num := 30;
                raise e_res_costed;
            else
                x_error_code := 0;
                x_error_msg  := null;

                l_res_costed := 0;

                l_stmt_num := 35;
                IF lbji_debug = 'Y' then
                        fnd_file.put_line(fnd_file.log,'delete setup info:call to check_resource_costed .... : '
                                  || ' Resource seq num : ' || l_setup_res.resource_seq_num
                                  || ' Operation seq num : ' || p_op_seq_num
                                  );
                END IF;

                check_resource_costed ( p_wip_entity_id     => p_wip_entity_id,
                            p_org_id            => p_org_id,
                            p_res_op_seq_num    => l_setup_res.resource_seq_num,
                            p_op_seq_num        => p_op_seq_num,
                            x_error_code        => x_error_code,
                            x_error_msg     => x_error_msg
                              );

                l_stmt_num := 40;

                if x_error_code <> 0 then
                    /* error out... */
                    l_res_costed := 1;
                    exit;
                end if;

            end if;
        end loop;

        l_stmt_num := 50;

        if l_res_costed = 0 and l_setup_exists <> 0 then

            l_stmt_num := 55;
            /* delete the instance information ... */
            delete from wip_op_resource_instances wori
            where wori.organization_id  = p_org_id
            and    wori.wip_entity_id   = p_wip_entity_id
            and    wori.operation_seq_num  = p_op_seq_num
            and    wori.RESOURCE_SEQ_NUM  in (select resource_seq_num
                              from wip_operation_resources wor
                              where wor.organization_id = p_org_id
                              and    wor.wip_entity_id   = p_wip_entity_id
                              and    wor.operation_seq_num   = p_op_seq_num
                              and    wor.parent_resource_seq = p_par_res_seq_num
                              );

            l_stmt_num := 60;

            /* delete the usage information .... */
            delete from wip_operation_resource_usage woru
            where woru.organization_id  = p_org_id
            and    woru.wip_entity_id   = p_wip_entity_id
            and    woru.operation_seq_num  = p_op_seq_num
            and    woru.resource_seq_num  in (select resource_seq_num
                              from wip_operation_resources wor
                              where wor.organization_id = p_org_id
                              and    wor.wip_entity_id   = p_wip_entity_id
                              and    wor.operation_seq_num   = p_op_seq_num
                              and    wor.parent_resource_seq = p_par_res_seq_num
                              );

            l_stmt_num := 70;

            /* delete the setup resources.... */
            delete from wip_operation_resources wor
            where wor.organization_id = p_org_id
            and    wor.wip_entity_id   = p_wip_entity_id
            and    wor.operation_seq_num   = p_op_seq_num
            and    wor.parent_resource_seq = p_par_res_seq_num;

        elsif l_res_costed <> 0 then
            l_stmt_num := 80;
            raise e_res_costed;
        end if;


    else

        /* delete the instance information ... */
        l_stmt_num := 90;

        l_setup_exists := 0;
        select count(*)
        into   l_setup_exists
        from   wsm_copy_op_resources wcor
        where  wcor.organization_id = p_org_id
        and    wcor.wip_entity_id   = p_wip_entity_id
        and    wcor.operation_seq_num   = p_op_seq_num
        and    wcor.parent_resource_seq_num = p_par_res_seq_num
        and    rownum = 1;

        IF l_setup_exists <> 0 THEN
                delete from wsm_copy_op_resource_instances wcori
                where wcori.organization_id  = p_org_id
                and    wcori.wip_entity_id   = p_wip_entity_id
                and    wcori.operation_seq_num  = p_op_seq_num
                and    wcori.resource_seq_num  in (select resource_seq_num
                                  from wsm_copy_op_resources wcor
                                  where wcor.organization_id = p_org_id
                                  and    wcor.wip_entity_id   = p_wip_entity_id
                                  and    wcor.operation_seq_num   = p_op_seq_num
                                  and    wcor.parent_resource_seq_num = p_par_res_seq_num
                                  );
                /* delete the usage information .... */
                l_stmt_num := 100;
                delete from wsm_copy_op_resource_usage wcoru
                where wcoru.organization_id  = p_org_id
                and    wcoru.wip_entity_id   = p_wip_entity_id
                and    wcoru.operation_seq_num  = p_op_seq_num
                and    wcoru.resource_seq_num  in (select resource_seq_num
                                  from wsm_copy_op_resources wcor
                                  where wcor.organization_id = p_org_id
                                  and    wcor.wip_entity_id   = p_wip_entity_id
                                  and    wcor.operation_seq_num   = p_op_seq_num
                                  and    wcor.parent_resource_seq_num = p_par_res_seq_num
                                  );
                /* delete the setup resources.... */
                l_stmt_num := 110;

                delete from wsm_copy_op_resources wcor
                where wcor.organization_id = p_org_id
                and    wcor.wip_entity_id   = p_wip_entity_id
                and    wcor.operation_seq_num   = p_op_seq_num
                and    wcor.parent_resource_seq_num = p_par_res_seq_num;
        END IF;

    end if;

    x_error_code := 0;

exception
    when e_res_costed then

        fnd_message.set_name('WSM','WSM_OP_RES_COSTED');
        x_error_msg := fnd_message.get;
        x_error_code := -1;
        fnd_file.put_line(fnd_file.log,'delete_setup_info : ' || l_stmt_num || ' : ' || x_error_msg);

    when others then
        x_error_code := -1;
        x_error_msg  := 'check_resource_costed : ' || l_stmt_num || ' : ' || SQLCODE || substrb(SQLERRM,1,1000);
        fnd_file.put_line(fnd_file.log,x_error_msg);

end delete_setup_info;

/**************************************************************************************

Procedure Added to validate the new resource + its setup resources being added (or)

 validate setup resources being added for a particular resource

***************************************************************************************/

Procedure validate_new_resource(p_wip_entity_id     in               number,
                                p_org_id            in               number,
                                -- p_par_res_index  in               number,
                                p_setup_index_tbl   in               t_number,
                                p_res_recom         in               t_res_recom,
                                p_handle_wip_cur_op in               varchar2,
                                p_job_op_seq_num    in               number,
                                p_rtg_op_seq_num    in               number,
                                p_new_res_tbl       in  out nocopy   new_res_tbl,
                                x_error_code        in  out nocopy   number,
                                x_error_msg         in  out nocopy   varchar2
                                ) is


l_par_res_seq_num       number;
l_exists                number;
l_setup_exists          number;
l_dummy                 number;
l_batchable             number;
l_field_name            varchar2(100);
l_error_code            number;
l_error_msg             varchar2(2000);
l_stmt_num              number;
l_index                 number;

l_max_resource_seq_num  number;

l_new_res_seq_tbl       t_number;

l_res_id                number;
l_res_recommended       varchar2(10);

l_hash_value            number;
l_hash_str              varchar2(500);

l_res_num1              number;
l_res_num2              number;

l_res_auto_charge_type  number;

l_hour_uom              varchar2(50);
l_hour_uom_class        varchar2(200);
l_uom_time_class_flag   boolean;
l_uom_class             varchar2(10);
l_autocharge_type       number;

e_no_po_move_res        exception;
e_invalid_res_seq_num   exception;
e_invalid_par_seq       exception;
e_invalid_res           exception;
e_invalid_res_dates     exception;
e_invalid_res_seq       exception;
e_invalid_seq           exception;
e_invalid_setup_id      exception;
e_invalid_setup_code    exception;
e_setup_costed          exception;

e_invalid_field         exception;

e_invalid_max_assg_units        exception;
e_invalid_setup_max_assg_units  exception;
e_invalid_batch_max_assg_units  exception;
e_res_not_batchable             exception;

cursor c_setup_res(c_par_res_seq_num NUMBER) is
       select resource_id,resource_seq_num,operation_seq_num
       from wip_operation_resources wor
       where  wor.organization_id = p_org_id
       and    wor.wip_entity_id   = p_wip_entity_id
       and    wor.operation_seq_num   = p_job_op_seq_num
       and    wor.parent_resource_seq  = c_par_res_seq_num;

begin
    if p_handle_wip_cur_op = 'Y' then

        l_stmt_num := 10;
        /* get the maximum resource seq num.... for the current operation...*/
        begin

            select max(resource_seq_num)
            into   l_res_num1
            from   wip_operation_resources wor
            where  wor.organization_id = p_org_id
            and    wor.wip_entity_id   = p_wip_entity_id
            and    wor.operation_seq_num   = p_job_op_seq_num;

        exception
            when no_data_found then
                null;
        end;

        /* get the parent resource seq num */
        l_par_res_seq_num := p_new_res_tbl(p_new_res_tbl.first).parent_seq_num;

        /* Indicates that there is no parent resource being added... ..... */
        /*
            Validations to be done...
            i)   check if any parent resource exists ( consider only WIP_OPERATION_RESOURCES )
            ii)  Check if any setup resources already exist....
            iii) Delete the setup resources...( if no cost incurred )
        */

        l_stmt_num := 20;
        begin

            l_exists := 0;

            select 1
            into   l_exists
            from   wip_operation_resources wor
            where  wor.organization_id = p_org_id
            and    wor.wip_entity_id   = p_wip_entity_id
            and    wor.operation_seq_num   = p_job_op_seq_num
            and    resource_seq_num    = l_par_res_seq_num;

        exception
            when no_data_found then
                raise e_invalid_par_seq;

        end;

        l_stmt_num := 30;
        begin
            l_setup_exists := 0;

            select 1
            into   l_setup_exists
            from   wip_operation_resources wor
            where  wor.organization_id = p_org_id
            and    wor.wip_entity_id   = p_wip_entity_id
            and    wor.operation_seq_num   = p_job_op_seq_num
            and    wor.parent_resource_seq = l_par_res_seq_num
            and    rownum =1 ;

        exception
            when no_data_found then
                l_setup_exists := 0;
        end;

        l_stmt_num := 40;
        IF lbji_debug = 'Y' THEN
                fnd_file.put_line(fnd_file.log,'validate new resource : ' || l_stmt_num || ' l_setup_exists at current op ..... ' || l_setup_exists);
        END IF;

        if l_setup_exists = 1  then
            /* open the cursor and loop through the setup resources and check if any of them is costed...
            if so return an error....*/

            l_error_code := 0;
            l_error_msg  := null;

            l_stmt_num := 50;
            IF lbji_debug = 'Y' THEN
                fnd_file.put_line(fnd_file.log,'validate new resource : ' || l_stmt_num || ' calling delete setup info ...' );
            END IF;

            delete_setup_info( p_wip_entity_id     => p_wip_entity_id,
                       p_org_id            => p_org_id,
                       p_par_res_seq_num   => l_par_res_seq_num,
                       p_op_seq_num        => p_job_op_seq_num,
                       p_handle_curr_op    => 'Y',
                       x_error_code        => l_error_code,
                       x_error_msg         => l_error_msg
                     );

            l_stmt_num := 60;

            if l_error_code <> 0 then
                raise e_setup_costed;
            end if;
            l_stmt_num := 70;

            /* delete the setup resources.... */
            delete from wip_operation_resources wor
            where wor.organization_id = p_org_id
            and    wor.wip_entity_id   = p_wip_entity_id
            and    wor.operation_seq_num   = p_job_op_seq_num
            and    wor.parent_resource_seq = l_par_res_seq_num;
        end if;

        l_stmt_num := 75;
        begin
            select max(resource_seq_num)
            into   l_res_num2
            from   wip_sub_operation_resources wsor
            where  wsor.organization_id = p_org_id
            and    wsor.wip_entity_id   = p_wip_entity_id
            and    wsor.operation_seq_num   = p_job_op_seq_num;

        exception
            when no_data_found then
                null;
        end;

        if l_res_num1 > l_res_num2 then
            l_max_resource_seq_num := l_res_num1;
        elsif l_res_num2 > l_res_num1 then
            l_max_resource_seq_num := l_res_num2;
        end if;

        l_max_resource_seq_num := nvl(l_max_resource_seq_num,10);

        l_stmt_num := 78;

        -- Code for debug purpose.... ----
        IF lbji_debug = 'Y' THEN
                fnd_file.put_line(fnd_file.log,'validate new resource : ' || l_stmt_num || ' l_max_resource_seq_num ..... '|| l_max_resource_seq_num);
        END IF;

    else
        l_par_res_seq_num := p_new_res_tbl(p_new_res_tbl.first).parent_seq_num;

        /* Indicates that there is no parent resource being added... ..... */
        /*
            Validations to be done...
            i)   check if any parent resource exists
            ii)  Check if any setup resources already exist....
            iii) Delete the setup resources...( if no cost incurred )
        */
        l_stmt_num := 100;

        begin

            l_res_id := 0;

            select wcor.resource_id,wcor.recommended
            into   l_res_id,l_res_recommended
            from   wsm_copy_op_resources wcor
            where  wcor.organization_id = p_org_id
            and    wcor.wip_entity_id   = p_wip_entity_id
            and    wcor.operation_seq_num    = p_rtg_op_seq_num
            and    wcor.resource_seq_num     = l_par_res_seq_num;

            /* sh. i add cond to check if recommeded res.... */

            if l_res_recommended = 'Y' then
                /* Ideally should check here if this resource is getting recommended...*/
                l_hash_str := to_char(p_wip_entity_id) || ':' || to_char(p_rtg_op_seq_num) || ':' || to_char(l_res_id);
                l_hash_value := dbms_utility.get_hash_value(l_hash_str,35,1048576);

                if (p_res_recom.exists(l_hash_value) and p_res_recom(l_hash_value) = 'N') then
                    raise e_invalid_par_seq;
                end if;

            elsif l_res_recommended = 'N' then

                /* Ideally should check here if this resource is getting recommended...*/
                l_hash_str := to_char(p_wip_entity_id) || ':' || to_char(p_rtg_op_seq_num) || ':' || to_char(l_res_id);
                l_hash_value := dbms_utility.get_hash_value(l_hash_str,35,1048576);

                if not(p_res_recom.exists(l_hash_value) and p_res_recom(l_hash_value) = 'Y') then
                    raise e_invalid_par_seq;
                end if;

            else
                raise e_invalid_par_seq;
            end if;
        exception
            when no_data_found then

                raise e_invalid_par_seq;

        end;

        l_stmt_num := 110;

        l_error_code := 0;
        l_error_msg  := null;
        delete_setup_info( p_wip_entity_id     => p_wip_entity_id,
                   p_org_id            => p_org_id,
                   p_par_res_seq_num   => l_par_res_seq_num,
                   p_op_seq_num        => p_rtg_op_seq_num,
                   p_handle_curr_op    => 'N',
                   x_error_code        => l_error_code,
                   x_error_msg         => l_error_msg
                 );

        if l_error_code <> 0 then
            raise e_setup_costed;
        end if;

        l_stmt_num := 120;

        begin
            select max(resource_seq_num)
            into   l_max_resource_seq_num
            from   wsm_copy_op_resources wcor
            where  wcor.organization_id = p_org_id
            and    wcor.wip_entity_id   = p_wip_entity_id
            and    wcor.operation_seq_num   = p_rtg_op_seq_num;

        exception
            when no_data_found then
                null;
        end;

        l_stmt_num := 122;

        l_max_resource_seq_num := nvl(l_max_resource_seq_num,10);

    end if;

    -- l_new_res_seq_tbl.delete;
    l_stmt_num := 125;

    /* get the maximum sequence number and add ten.... */
    /* Loop on each record... the validations will be common for all the parent resource and setup resource also....*/
    l_index := p_new_res_tbl.first;

    while l_index  is not null loop
        /* do all the validations here...... */

        /*  i)   resource seq num not nulll
            ii)  start date < completion date
            iii) validity of the resource... sh not be disabled..
            iv)  autocharge not null
            v)   UOM validation
            vi)  assigned units > 0
            vii) all DS validations....
        */

        l_stmt_num := 140.1;
        if p_new_res_tbl(l_index).res_seq_num is NULL then

            l_max_resource_seq_num := l_max_resource_seq_num + 10;
            p_new_res_tbl(l_index).res_seq_num := l_max_resource_seq_num;

            /* unfortunately have to update the global table also.... */
            v_wljdi_resource_seq_num(l_index) := l_max_resource_seq_num;

        elsif p_new_res_tbl(l_index).res_seq_num <=0 then
            /* error out... */
            l_field_name := 'res_seq_num -- invalid field value';
            raise e_invalid_field;
        end if;

        l_stmt_num := 140.2;
        if l_new_res_seq_tbl.exists(p_new_res_tbl(l_index).res_seq_num) then
            /* error out.... */
            l_field_name := 'res_seq_num -- duplicate';
            raise e_invalid_field;
        else
            l_new_res_seq_tbl(p_new_res_tbl(l_index).res_seq_num) := (p_new_res_tbl(l_index).res_seq_num);
        end if;

        if p_new_res_tbl(l_index).rpl_grp_num is NULL then
            /* error out */
            l_field_name := 'replacement_grp_num';
            raise e_invalid_field;
        end if;
        -- ST : Bug fix 4240165 : Detailed Scheduling changes start
        -- Query up the fields from BR and then validate them...
        BEGIN

            select (BR.autocharge_type),
                   (BR.unit_of_measure),
                   nvl(p_new_res_tbl(l_index).basis_type,BR.default_basis_type),
                   uom.uom_class,
                   br.batchable,
                   nvl(BR.standard_rate_flag,2)
            into   p_new_res_tbl(l_index).autocharge_type,
                   p_new_res_tbl(l_index).uom_code,
                   p_new_res_tbl(l_index).basis_type,
                   l_uom_class,
                   l_batchable,
                   p_new_res_tbl(l_index).standard_rate_flag
            from bom_resources BR,
                 mtl_units_of_measure_vl uom
            where br.resource_id =  p_new_res_tbl(l_index).resource_id
            and autocharge_type = nvl(p_new_res_tbl(l_index).autocharge_type,autocharge_type)
            and nvl(p_new_res_tbl(l_index).uom_code,br.unit_of_measure) = br.unit_of_measure -- uom.uom_code
            and br.unit_of_measure = uom.uom_code
            and nvl(BR.standard_rate_flag,-1) = nvl(nvl(p_new_res_tbl(l_index).standard_rate_flag,BR.standard_rate_flag),-1);

        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                l_field_name := 'Resource Information';
                raise e_invalid_field;

        END;

        if p_new_res_tbl(l_index).autocharge_type = 4 then
            raise e_no_po_move_res;
        end if;


        if nvl(p_new_res_tbl(l_index).assigned_units,-1) <= 0 then
            -- error out.... --
            l_field_name := 'assigned units';
            raise e_invalid_field;
        end if;

        if nvl(p_new_res_tbl(l_index).usage_rate_or_amount,-1) <=0 then
            -- error out --
            l_field_name := 'usage_rate_or_amount';
            raise e_invalid_field;
        end if;


        if p_new_res_tbl(l_index).basis_type <> 2 then
            -- error out --
            l_field_name := 'basis type for setup resource';
            raise e_invalid_field;
        end if;


        if p_new_res_tbl(l_index).scheduled_flag is NULL then
            -- error out --
            l_field_name := 'schedule_flag';
            raise e_invalid_field;
        else
            begin
                select 1
                into l_dummy
                from mfg_lookups
                where LOOKUP_TYPE  = 'BOM_RESOURCE_SCHEDULE_TYPE'
                and   lookup_code = p_new_res_tbl(l_index).scheduled_flag;
            exception
                when others then
                    -- error out --
                    l_field_name := 'schedule_flag';
                    raise e_invalid_field;
            end;
        end if;

        l_stmt_num := 142;

        -- Combined validations for UOM and autocharge... --
        l_hour_uom := FND_PROFILE.value('BOM:HOUR_UOM_CODE');
        l_hour_uom_class := wip_op_resources_utilities.get_uom_class(l_hour_uom);
        l_autocharge_type := p_new_res_tbl(l_index).autocharge_type;

        l_stmt_num := 145;

        if l_hour_uom_class = l_uom_class then
            l_uom_time_class_flag := true;
        else
            l_uom_time_class_flag := false;
        end if;

        l_stmt_num := 148;

        if (p_new_res_tbl(l_index).usage_rate_or_amount < 0 and (l_autocharge_type in (3,4) or l_uom_time_class_flag)) then
            /* error out... */
            l_field_name := 'Invalid usage rate for the autocharge/UOM combination';
            raise e_invalid_field;
        end if;

        l_stmt_num := 150;
        if p_handle_wip_cur_op = 'Y' then

            l_stmt_num := 155;
            /* check in WOR... */
            begin
                select 1
                into l_dummy
                from wip_operation_resources wor
                where wor.organization_id = p_org_id
                and wor.wip_entity_id  = p_wip_entity_id
                and wor.operation_seq_num = p_job_op_seq_num
                and wor.resource_seq_num = p_new_res_tbl(l_index).res_seq_num;

                raise e_invalid_res_seq_num;

            exception
                when no_data_found then
                    null;
            end;

            /* check in WSOR.... */
            l_stmt_num := 157;

            begin
                select 1
                into l_dummy
                from wip_sub_operation_resources wsor
                where wsor.organization_id = p_org_id
                and wsor.wip_entity_id  = p_wip_entity_id
                and wsor.operation_seq_num = p_job_op_seq_num
                and wsor.resource_seq_num = p_new_res_tbl(l_index).res_seq_num;

                raise e_invalid_res_seq_num;

            exception
                when no_data_found then
                   null;
            end;

            l_stmt_num := 160;

            begin

                select nvl(p_new_res_tbl(l_index).dept_id,wo.department_id)
                into p_new_res_tbl(l_index).dept_id
                from bom_resources br,bom_department_resources bdr, wip_operations wo
                where br.resource_id = p_new_res_tbl(l_index).resource_id
                and  br.resource_code = p_new_res_tbl(l_index).resource_code
                and (br.disable_date > sysdate  or br.disable_date is null)
                and br.organization_id = p_org_id
                and br.autocharge_type = p_new_res_tbl(l_index).autocharge_type
                and bdr.resource_id = p_new_res_tbl(l_index).resource_id
                and bdr.department_id = nvl(p_new_res_tbl(l_index).dept_id,wo.department_id)
                and wo.organization_id = p_org_id
                and wo.wip_entity_id  = p_wip_entity_id
                and wo.operation_seq_num = p_job_op_seq_num;

                l_stmt_num := 160.1;

            exception
                when no_data_found then
                    /* Not a valid resource error out...*/
                    raise e_invalid_res;

                when too_many_rows then
                    /* Ideally not possible */
                    /* what to do in this case..... */
                    raise e_invalid_res;
            end;

            l_stmt_num := 170;
            begin
                select 1
                into l_dummy
                from wip_operations wo
                where wo.wip_entity_id = p_wip_entity_id
                and   wo.organization_id = p_org_id
                and   wo.operation_seq_num = p_job_op_seq_num
                and   p_new_res_tbl(l_index).start_date >= wo.first_unit_start_date
                and   p_new_res_tbl(l_index).start_date <=  nvl(last_unit_start_date,p_new_res_tbl(l_index).start_date)
                and   p_new_res_tbl(l_index).completion_date <= nvl(wo.last_unit_completion_date,p_new_res_tbl(l_index).completion_date)
                and   p_new_res_tbl(l_index).completion_date >= nvl(wo.last_unit_start_date,p_new_res_tbl(l_index).completion_date);

            exception
                when no_data_found then
                    /* invlaid dates */
                    raise e_invalid_res_dates;
            end;
        else
            l_stmt_num := 180;
            begin
                select 1
                into l_dummy
                from wsm_copy_op_resources wcor
                where wcor.organization_id = p_org_id
                and wcor.wip_entity_id  = p_wip_entity_id
                and wcor.operation_seq_num = p_rtg_op_seq_num
                and wcor.resource_seq_num = p_new_res_tbl(l_index).res_seq_num;

                raise e_invalid_res_seq;

            exception
                when no_data_found then
                    null;
            end;

            l_stmt_num := 185;
            -- There are two SQLs for more meaningful messages...
            begin

                select nvl(p_new_res_tbl(l_index).dept_id,wco.department_id)
                into p_new_res_tbl(l_index).dept_id
                from bom_resources br,bom_department_resources bdr, wsm_copy_operations wco
                where br.resource_id = p_new_res_tbl(l_index).resource_id
                and  br.resource_code = p_new_res_tbl(l_index).resource_code
                and (br.disable_date > sysdate  or br.disable_date is null)
                and br.organization_id = p_org_id
                and bdr.resource_id = p_new_res_tbl(l_index).resource_id
                and bdr.department_id = nvl(nvl(p_new_res_tbl(l_index).dept_id,wco.department_id),bdr.department_id)
                and wco.organization_id = p_org_id
                and wco.wip_entity_id  = p_wip_entity_id
                and wco.operation_seq_num = p_rtg_op_seq_num;

            exception
                when no_data_found then
                    /* Not a valid resource error out...*/
                    raise e_invalid_res;

                when too_many_rows then
                    /* Not possible ideally */
                    /* what to do in this case..... */
                    raise e_invalid_res;
            end;

            l_stmt_num := 190;
            begin
                select 1
                into l_dummy
                from wsm_copy_operations wco
                where wco.organization_id = p_org_id
                and   wco.wip_entity_id   = p_wip_entity_id
                and   wco.operation_seq_num = p_rtg_op_seq_num
                and   p_new_res_tbl(l_index).start_date >= wco.reco_start_date
                and   p_new_res_tbl(l_index).start_date <=  nvl(reco_completion_date,p_new_res_tbl(l_index).start_date)
                -- and   nvl(p_new_res_tbl(l_index).completion_date,nvl(reco_completion_date,sysdate)) <= nvl(reco_completion_date,sysdate)
                and  ( (p_new_res_tbl(l_index).completion_date IS NULL and reco_completion_date IS NULL)
                       OR
                       ( (p_new_res_tbl(l_index).completion_date IS NOT NULL and reco_completion_date IS NOT NULL)
                          AND
                     (p_new_res_tbl(l_index).completion_date <= reco_completion_date)
                       )
                       OR
                       (p_new_res_tbl(l_index).completion_date IS NOT NULL and reco_completion_date IS NULL)
                      )
                and   nvl(p_new_res_tbl(l_index).completion_date,nvl(reco_completion_date,wco.reco_start_date)) >= wco.reco_start_date;

            exception
                when no_data_found then
                    /* invlaid dates */
                    raise e_invalid_res_dates;
            end;


        end if;

        /* Non-NULL validations */
        /* Prposed ones are ..
           i) sh we validate UOM code....
        */

        /* DS : validations */
        l_stmt_num := 200;
        if p_new_res_tbl(l_index).setup_id is NULL and p_new_res_tbl(l_index).setup_code is NOT NULL then
             begin
                    select  bst.setup_id
                    into    p_new_res_tbl(l_index).setup_id
                    from    bom_setup_types bst
                    where   bst.setup_code      = p_new_res_tbl(l_index).setup_code
                    and     bst.organization_id = p_org_id;

             exception
                when no_data_found then
                        raise e_invalid_setup_code;
                    when others then
                        null;
             end;
        end if;
        if p_new_res_tbl(l_index).setup_id is not null then

            l_stmt_num := 210;
            BEGIN

                select  1
                into    l_dummy
                from    bom_resource_setups brs
                where   brs.resource_id     = p_new_res_tbl(l_index).resource_id
                and     brs.organization_id = p_org_id
                and     brs.setup_id        = p_new_res_tbl(l_index).setup_id;

            EXCEPTION
                when no_data_found then
                    raise e_invalid_setup_id;

            END;
        end if;
        l_stmt_num := 220;

        if (p_new_res_tbl(l_index).batch_id is not null ) then

            l_stmt_num := 230;

            if l_batchable <> 1 then
                -- error out..
                raise e_res_not_batchable;
            end if;

            if (p_new_res_tbl(l_index).max_assg_units <> 1 or p_new_res_tbl(l_index).assigned_units <> 1)
            then
                 raise e_invalid_batch_max_assg_units;
            end if;
        end if;

        if (p_new_res_tbl(l_index).grp_seq_id is not null and p_new_res_tbl(l_index).grp_seq_num is not null) then
            l_stmt_num := 240;
            if (p_new_res_tbl(l_index).setup_id is null)
            then
                 raise e_invalid_seq;
            end if;

            if (p_new_res_tbl(l_index).setup_id  is not null)
               and
               (p_new_res_tbl(l_index).max_assg_units <> 1 or p_new_res_tbl(l_index).assigned_units <> 1)
            then
                 raise e_invalid_setup_max_assg_units;
             end if;

        end if;

        l_stmt_num := 250;
		-- Modified the condition for fixing bug 5471266.
		-- This allows max_assg_units to be passed as null while adding setup resource.
        /* if nvl(p_new_res_tbl(l_index).max_assg_units,0) < p_new_res_tbl(l_index).assigned_units then */
		if nvl(p_new_res_tbl(l_index).max_assg_units,p_new_res_tbl(l_index).assigned_units) < p_new_res_tbl(l_index).assigned_units then
                raise e_invalid_max_assg_units;
        end if;

        -- ST Fix for bug 4240165
        -- Now copy the values derived into the global table also..
        v_wljdi_uom_code(l_index)               := p_new_res_tbl(l_index).uom_code;
        v_wljdi_basis_type(l_index)             := p_new_res_tbl(l_index).basis_type;
        v_wljdi_res_autocharge_type(l_index)    := p_new_res_tbl(l_index).autocharge_type;
        v_wljdi_standard_rate_flag(l_index)     := p_new_res_tbl(l_index).standard_rate_flag;
        v_wljdi_department_id(l_index)          := p_new_res_tbl(l_index).dept_id;

        l_index := p_new_res_tbl.next(l_index);

    end loop;

    x_error_code := 0;

exception

    when e_invalid_res_seq_num then

        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', ' resource sequence number ');
        x_error_msg := ' validate_new_resource :  ' || l_stmt_num || ': ' || fnd_message.get;

        fnd_file.put_line(fnd_file.log,x_error_msg);

        x_error_code := -1;

    when e_invalid_par_seq  then
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', ' parent resource sequence number ');
        x_error_msg := ' validate_new_resource :  ' || l_stmt_num || ': ' || fnd_message.get;
        fnd_file.put_line(fnd_file.log,x_error_msg);
        x_error_code := -1;

    when e_invalid_res   then
        --Bug 4704351:Resource id validation is already done in the prev sql.So
        --this exception is used for resource and department mismatch.
        --fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        --fnd_message.set_token('FLD_NAME', ' resource id ');
        fnd_message.set_name('WSM','WSM_INVALID_RES_DEPT');
        --Set up Resource should be from the same department as Parent Resource
        x_error_msg := ' validate_new_resource :  ' || l_stmt_num || ': ' || fnd_message.get;
        fnd_file.put_line(fnd_file.log,x_error_msg);
        x_error_code := -1;

    when e_invalid_res_dates  then
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', ' resource start/completion dates ');
        x_error_msg := ' validate_new_resource :  ' || l_stmt_num || ': ' || fnd_message.get;
        fnd_file.put_line(fnd_file.log,x_error_msg);
        x_error_code := -1;

    when e_invalid_res_seq  then

        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', ' resource seq num ');
        x_error_msg := ' validate_new_resource :  ' || l_stmt_num || ': ' || fnd_message.get;
        fnd_file.put_line(fnd_file.log,x_error_msg);
        x_error_code := -1;

    when e_invalid_seq then
        fnd_message.set_name('WSM','WSM_INVALID_SEQ');
        x_error_msg := ' validate_new_resource :  ' || l_stmt_num || ': ' || fnd_message.get ;
        fnd_file.put_line(fnd_file.log,x_error_msg);
        x_error_code := -1;

    when e_invalid_setup_id then
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', ' setup id ');
        x_error_msg := ' validate_new_resource :  ' || l_stmt_num || ': ' || fnd_message.get ;
        fnd_file.put_line(fnd_file.log,x_error_msg);
        x_error_code := -1;

    when e_invalid_field  then
	    /*Modified error handling mechanism for bug 5469917. */
	    fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', l_field_name);
        x_error_msg := ' validate_new_resource :  ' || l_stmt_num || ': ' || fnd_message.get;
        fnd_file.put_line(fnd_file.log,x_error_msg);
        x_error_code := -1;

    when e_invalid_max_assg_units then

        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', ' maximum assigned units ');
        x_error_msg := ' validate_new_resource :  ' || l_stmt_num || ': ' || fnd_message.get;
        fnd_file.put_line(fnd_file.log,x_error_msg);
        x_error_code := -1;

    when e_invalid_setup_max_assg_units then

        fnd_message.set_name('WSM','WSM_INVALID_SETUP_MAX_ASSG');

        x_error_msg := ' validate_new_resource :  ' || l_stmt_num || ': ' || fnd_message.get;

        fnd_file.put_line(fnd_file.log,x_error_msg);
        x_error_code := -1;

    when e_setup_costed then

        fnd_message.set_name('WSM','WSM_INVALID_SETUP_MAX_ASSG');

        x_error_msg := ' validate_new_resource :  ' || l_stmt_num || ': ' || fnd_message.get;
        fnd_file.put_line(fnd_file.log,x_error_msg);
        x_error_code := -1;

    when e_invalid_batch_max_assg_units then

        fnd_message.set_name('WSM','WSM_INVALID_BATCH_MAX_ASSG');

        x_error_msg := ' validate_new_resource :  ' || l_stmt_num || ': ' || fnd_message.get;
        x_error_code := -1;
        fnd_file.put_line(fnd_file.log,x_error_msg);

    when e_res_not_batchable then

        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', ' batch id for resource ');

        x_error_msg := ' validate_new_resource :  ' || l_stmt_num || ': ' || fnd_message.get;
        fnd_file.put_line(fnd_file.log,x_error_msg);
        x_error_code := -1;

    when e_no_po_move_res then
        fnd_message.set_name('WSM','WSM_CURR_OP_RES_PO_MOVE');
        fnd_message.set_token('FLD_NAME', ' resource ');
        x_error_msg := ' validate_new_resource :  ' || l_stmt_num || ': ' || fnd_message.get;
        fnd_file.put_line(fnd_file.log,x_error_msg);
        x_error_code := -1;

    when others then
        x_error_msg := ' validate_new_resource :  ' || l_stmt_num || ': ' || SQLCODE || ' : ' || substrb(SQLERRM,1,1000) ;
        fnd_file.put_line(fnd_file.log,x_error_msg);
        x_error_code := -1;

end validate_new_resource;

/* ST : Detailed scheduling start */
/***************************************************************************

Procedure to take care of

i) setup resources to an existing resource

All these additions either at current op or future op

***************************************************************************/

Procedure add_resource(p_wip_entity_id      in      number,
                       p_org_id             in      number,
                       p_job_op_seq_num     in      number,
                       p_cur_job_op_seq_num in      number,
                       p_rtg_op_seq_num     in      number,
                       p_load_type          in      number,
                       p_sub_type           in      number,
                       p_res_recom          in      t_res_recom,
                       p_last_updt_date     in      date,
                       p_last_updt_by       in      number,
                       p_creation_date      in      date,
                       p_created_by         in      number,
                       p_last_updt_login    in      number,
                       p_request_id         in      number,
                       p_program_appl_id    in      number,
                       p_program_id         in      number,
                       p_prog_updt_date     in      date,
                       p_global_index       in out nocopy   number,
                       x_error_code         in out nocopy   number,
                       x_error_msg          in out nocopy   varchar2
                      )
                      is


l_new_res_tbl           new_res_tbl;
l_setup_index_tbl       t_number;
l_par_res_index         number;
l_temp                  number;

l_error_code            number;
l_error_msg             varchar2(2000);
l_stmt_num              number := 0;


l_index             number;
l_found             number;

begin

    l_stmt_num := 10;

    x_error_code := 0;
    x_error_msg  := null;

    /* This is primarily used to delete both the resource and its setup from the v_wldji... so that the Adding is once for the resource and
       its setup resource
    ... */

    l_new_res_tbl.delete;
    l_par_res_index := null;
    l_setup_index_tbl.delete;

    /* ST : Detailed Scheduling : Support adding resources to current op */
    /* Update the WIP tables in this case..... */
    --Bug 5474321: Setup resource should be imported even for previous operations.
    --if ( ((p_job_op_seq_num IS NOT NULL) and (p_job_op_seq_num = p_cur_job_op_seq_num) )
    if ( ((p_job_op_seq_num IS NOT NULL) )
         OR
         ((p_rtg_op_seq_num IS NOT NULL))
       )
    then

        l_stmt_num := 20;
        /*
          First clear the validation table of records
          First load it into the validation table of records ( index will be the resource_id )
          Check if has a setup res ( loop through.... )
          if found add that record also to the validation table of records
          call the validate_add_new_res procedure
          if successful then add the resources in the validation
          Load the resources into  local PL/SQL tables and delete them from v_wldji_
        */

        if v_wljdi_parent_seq_num(p_global_index) is not null then /* Indicates that it is a setup resource....*/

            l_stmt_num := 30;
            /* Search through the v_wldji_ for with similar load type for its parent resource...and also sibling setup resources*/
            /* Load this into the validation PL/SQL table... */

            l_temp := p_global_index;
            l_setup_index_tbl(l_temp) := p_global_index;

            l_new_res_tbl(l_temp).job_op_seq_num                := v_wljdi_job_op_seq_num(l_temp);
            l_new_res_tbl(l_temp).rtg_op_seq_num                := v_wljdi_routing_op_seq_num(l_temp);
            l_new_res_tbl(l_temp).resource_id                   := v_wljdi_resource_id_new(l_temp);
            l_new_res_tbl(l_temp).resource_code                 := v_wljdi_resource_code_new(l_temp);
            l_new_res_tbl(l_temp).dept_id                       := v_wljdi_department_id(l_temp);
            l_new_res_tbl(l_temp).dept_code                     := v_wljdi_department_code(l_temp);
            l_new_res_tbl(l_temp).res_seq_num                   := v_wljdi_resource_seq_num(l_temp);
            l_new_res_tbl(l_temp).sub_grp_num                   := v_wljdi_substitute_group_num(l_temp);
            l_new_res_tbl(l_temp).rpl_grp_num                   := v_wljdi_replacement_group_num(l_temp);
            l_new_res_tbl(l_temp).activity_id                   := v_wljdi_activity_id(l_temp);
            l_new_res_tbl(l_temp).standard_rate_flag            := v_wljdi_standard_rate_flag(l_temp);
            l_new_res_tbl(l_temp).assigned_units                := v_wljdi_assigned_units(l_temp);
            l_new_res_tbl(l_temp).usage_rate_or_amount          := v_wljdi_usage_rate_or_amt(l_temp);
            l_new_res_tbl(l_temp).usage_rate_or_amount_inverse  := 0; /* calculate it shiva ..... */
            l_new_res_tbl(l_temp).uom_code                      := v_wljdi_uom_code(l_temp);
            l_new_res_tbl(l_temp).basis_type                    := v_wljdi_basis_type(l_temp);
            l_new_res_tbl(l_temp).scheduled_flag                := v_wljdi_scheduled_flag(l_temp);
            l_new_res_tbl(l_temp).autocharge_type               := v_wljdi_res_autocharge_type(l_temp);
            l_new_res_tbl(l_temp).schedule_seq_num              := v_wljdi_schedule_seq_num(l_temp);
            l_new_res_tbl(l_temp).setup_id                      := v_wljdi_setup_id(l_temp);
            l_new_res_tbl(l_temp).setup_code                    := v_wljdi_setup_code(l_temp);
            l_new_res_tbl(l_temp).start_date                    := v_wljdi_start_date(l_temp);
            l_new_res_tbl(l_temp).firm_type                     := v_wljdi_firm_type(l_temp);
            l_new_res_tbl(l_temp).grp_seq_id                    := v_wljdi_grp_seq_id(l_temp);
            l_new_res_tbl(l_temp).grp_seq_num                   := v_wljdi_grp_seq_num(l_temp);
            l_new_res_tbl(l_temp).max_assg_units                := v_wljdi_max_assg_units(l_temp);
            l_new_res_tbl(l_temp).parent_seq_num                := v_wljdi_parent_seq_num(l_temp);
            l_new_res_tbl(l_temp).batch_id                      := v_wljdi_batch_id(l_temp);
            l_new_res_tbl(l_temp).completion_date               := v_wljdi_completion_date(l_temp);

            l_temp := v_wljdi_record_id.next(p_global_index);

            l_stmt_num := 35;
            /* start the search */
            while (l_temp is not null) loop

                   -- Removed the above code (see the previous revision)
                   -- Cannot add a parent resource...
                   if ( (v_wljdi_parent_seq_num(l_temp) = v_wljdi_parent_seq_num(p_global_index)) and
                    (v_wljdi_load_type(l_temp)     = p_load_type) and
                    (v_wljdi_substitution_type(l_temp)     = p_sub_type) and
                    ((v_wljdi_job_op_seq_num(l_temp)        = p_job_op_seq_num)
                       or
                          (v_wljdi_routing_op_seq_num(l_temp)   = p_rtg_op_seq_num)
                        )
                     )
                   then
                        l_stmt_num := 50;

                        /* indicates a sibling setup resource */
                        -- We are using a separate index so that it will be contiguous..
                        -- or else we will get an error during the BULK INSERT

                        l_setup_index_tbl(l_temp) := l_temp;

                        l_new_res_tbl(l_temp).job_op_seq_num                := v_wljdi_job_op_seq_num(l_temp);
                        l_new_res_tbl(l_temp).rtg_op_seq_num                := v_wljdi_routing_op_seq_num(l_temp);
                        l_new_res_tbl(l_temp).resource_id                   := v_wljdi_resource_id_new(l_temp);
                        l_new_res_tbl(l_temp).resource_code                 := v_wljdi_resource_code_new(l_temp);
                        l_new_res_tbl(l_temp).dept_id                       := v_wljdi_department_id(l_temp);
                        l_new_res_tbl(l_temp).dept_code                     := v_wljdi_department_code(l_temp);
                        l_new_res_tbl(l_temp).res_seq_num                   := v_wljdi_resource_seq_num(l_temp);
                        l_new_res_tbl(l_temp).sub_grp_num                   := v_wljdi_substitute_group_num(l_temp);
                        l_new_res_tbl(l_temp).rpl_grp_num                   := v_wljdi_replacement_group_num(l_temp);
                        l_new_res_tbl(l_temp).activity_id                   := v_wljdi_activity_id(l_temp);
                        l_new_res_tbl(l_temp).standard_rate_flag            := v_wljdi_standard_rate_flag(l_temp);
                        l_new_res_tbl(l_temp).assigned_units                := v_wljdi_assigned_units(l_temp);
                        l_new_res_tbl(l_temp).usage_rate_or_amount          := v_wljdi_usage_rate_or_amt(l_temp);
                        l_new_res_tbl(l_temp).usage_rate_or_amount_inverse  := 0; /* calculate it shiva ..... */
                        l_new_res_tbl(l_temp).uom_code                      := v_wljdi_uom_code(l_temp);
                        l_new_res_tbl(l_temp).basis_type                    := v_wljdi_basis_type(l_temp);
                        l_new_res_tbl(l_temp).scheduled_flag                := v_wljdi_scheduled_flag(l_temp);
                        l_new_res_tbl(l_temp).autocharge_type               := v_wljdi_res_autocharge_type(l_temp);
                        l_new_res_tbl(l_temp).schedule_seq_num              := v_wljdi_schedule_seq_num(l_temp);
                        l_new_res_tbl(l_temp).setup_id                      := v_wljdi_setup_id(l_temp);
                        l_new_res_tbl(l_temp).setup_code                    := v_wljdi_setup_code(l_temp);
                        l_new_res_tbl(l_temp).start_date                    := v_wljdi_start_date(l_temp);
                        l_new_res_tbl(l_temp).firm_type                     := v_wljdi_firm_type(l_temp);
                        l_new_res_tbl(l_temp).grp_seq_id                    := v_wljdi_grp_seq_id(l_temp);
                        l_new_res_tbl(l_temp).grp_seq_num                   := v_wljdi_grp_seq_num(l_temp);
                        l_new_res_tbl(l_temp).max_assg_units                := v_wljdi_max_assg_units(l_temp);
                        l_new_res_tbl(l_temp).parent_seq_num                := v_wljdi_parent_seq_num(l_temp);
                        l_new_res_tbl(l_temp).batch_id                      := v_wljdi_batch_id(l_temp);
                        l_new_res_tbl(l_temp).completion_date               := v_wljdi_completion_date(l_temp);

                   end if;

                   l_temp := v_wljdi_record_id.next(l_temp);

             end loop;

        end if;
    else
        /* error out.... */
        fnd_message.set_name('WSM','WSM_NULL_FIELD');
        fnd_message.set_token('FLD_NAME', 'job_op_seq_num/rtg_op_seq_num');
        x_error_msg := fnd_message.get;
        x_error_code := -1;
        return; --raise e_wljdi_common_error;
    end if;
    l_stmt_num := 80;

    --Bug 5474321: Setup resource should be imported even for previous operations.
    --if ( (p_job_op_seq_num IS NOT NULL) and (p_job_op_seq_num = p_cur_job_op_seq_num) ) then
    if ( p_job_op_seq_num IS NOT NULL) THEN


        l_stmt_num := 90;
        l_error_code := 0;
        l_error_msg  := null;

        l_stmt_num := 100;
        /* call the validate procedure now.... */
        validate_new_resource(p_wip_entity_id     => p_wip_entity_id,
                              p_org_id            => p_org_id,
                              p_new_res_tbl       => l_new_res_tbl,
                              p_setup_index_tbl   => l_setup_index_tbl,
                              p_res_recom         => p_res_recom,
                              p_handle_wip_cur_op => 'Y',
                              p_job_op_seq_num    => p_job_op_seq_num,
                              p_rtg_op_seq_num    => null,
                              x_error_code        => l_error_code,
                              x_error_msg         => l_error_msg);

        if l_error_code <> 0 then
            /* error out validation failed,,,, set p_error_msg to the error message */
            x_error_msg  := l_error_msg;
            x_error_code := -1;
            return; --raise e_wljdi_common_error;
        end if;
        l_stmt_num := 110;

        forall i in l_setup_index_tbl.first..l_setup_index_tbl.last

            /* issue the insert statement */
             insert into wip_operation_resources
             (
                wip_entity_id,
                operation_seq_num,
                resource_seq_num,
                organization_id,
                department_id,
                --repetitive_schedule_id,

                resource_id,
                uom_code,
                basis_type,
                usage_rate_or_amount,

                activity_id,
                scheduled_flag,
                assigned_units,

                maximum_assigned_units,
                batch_id,
                firm_flag,
                group_sequence_id,
                group_sequence_number,
                parent_resource_seq,

                autocharge_type,
                standard_rate_flag,
                applied_resource_units,
                applied_resource_value,
                start_date,
                completion_date,

                attribute_category,
                attribute1,
                attribute2,
                attribute3,
                attribute4,
                attribute5,
                attribute6,
                attribute7,
                attribute8,
                attribute9,
                attribute10,
                attribute11,
                attribute12,
                attribute13,
                attribute14,
                attribute15,

                schedule_seq_num,
                substitute_group_num,
                replacement_group_num,
                --principle_flag,
                setup_id,

                last_update_date,
                last_updated_by,
                creation_date,
                created_by,
                last_update_login,
                request_id,
                program_application_id,
                program_id,
                program_update_date
                )
            values
            (
               p_wip_entity_id,
               p_job_op_seq_num,
               v_wljdi_resource_seq_num(i),
               p_org_id,
               v_wljdi_department_id(i),
               -- check,

               v_wljdi_resource_id_new(i),
               v_wljdi_uom_code(i),
               v_wljdi_basis_type(i),
               v_wljdi_usage_rate_or_amt(i),

               v_wljdi_activity_id(i),
               v_wljdi_scheduled_flag(i),
               v_wljdi_assigned_units(i),
               /* Modified Query by Adding NVL during insert of max_assg_units. Bug 5471266 */
               nvl(v_wljdi_max_assg_units(i),v_wljdi_assigned_units(i)),
               v_wljdi_batch_id(i),
			   /* Modified Query by Adding NVL during insert of firm type. Bug 5471266 */
               nvl(v_wljdi_firm_type(i),0),
               v_wljdi_grp_seq_id(i),
               v_wljdi_grp_seq_num(i),
               v_wljdi_parent_seq_num(i),

               v_wljdi_res_autocharge_type(i),
               v_wljdi_standard_rate_flag(i),
               0,
               0,
               v_wljdi_start_date(i),
               v_wljdi_completion_date(i),

               v_wljdi_attribute_category(i),
               v_wljdi_attribute1(i),
               v_wljdi_attribute2(i),
               v_wljdi_attribute3(i),
               v_wljdi_attribute4(i),
               v_wljdi_attribute5(i),
               v_wljdi_attribute6(i),
               v_wljdi_attribute7(i),
               v_wljdi_attribute8(i),
               v_wljdi_attribute9(i),
               v_wljdi_attribute10(i),
               v_wljdi_attribute11(i),
               v_wljdi_attribute12(i),
               v_wljdi_attribute13(i),
               v_wljdi_attribute14(i),
               v_wljdi_attribute15(i),

               v_wljdi_schedule_seq_num(i),
               v_wljdi_substitute_group_num(i),
               v_wljdi_replacement_group_num(i),
               v_wljdi_setup_id(i),

               p_last_updt_date,
               p_last_updt_by,
               p_creation_date,
               p_created_by,
               p_last_updt_login,
               p_request_id,
               p_program_appl_id,
               p_program_id,
               p_prog_updt_date
            );

        l_index := l_setup_index_tbl.first;

        while l_index is not null loop
            if v_wljdi_res_autocharge_type(l_index) = 3 then

                wip_osp.create_requisition(
                                 p_wip_entity_id          => p_wip_entity_id,
                                 p_organization_id        => p_org_id,
                                 p_repetitive_schedule_id => null,
                                 p_operation_seq_num      => p_job_op_seq_num,
                                 p_resource_seq_num       => v_wljdi_resource_seq_num(l_index),
                                 p_run_reqimport          => wip_constants.no
                              );

                g_num_of_osp_exists := nvl(g_num_of_osp_exists,0) + 1;

            end if;

            l_index := l_setup_index_tbl.next(l_index);

        end loop;

    elsif (p_rtg_op_seq_num IS NOT NULL) then

        l_stmt_num := 120;

        l_error_code := 0;
        l_error_msg  := null;
        /* call the validate procedure now.... */
        validate_new_resource(p_wip_entity_id     => p_wip_entity_id,
                              p_org_id            => p_org_id,
                              p_new_res_tbl       => l_new_res_tbl,
                              p_setup_index_tbl   => l_setup_index_tbl,
                              p_res_recom         => p_res_recom,
                              p_handle_wip_cur_op => 'N',
                              p_job_op_seq_num    => null,
                              p_rtg_op_seq_num    => p_rtg_op_seq_num,
                              x_error_code        => l_error_code,
                              x_error_msg         => l_error_msg);

        if l_error_code <> 0 then
            /* error out validation failed,,,, set p_error_msg to the error message */
            x_error_msg  := l_error_msg;
            x_error_code := -1;
            return; --raise e_wljdi_common_error;
        end if;

        l_stmt_num := 130;
        forall i in l_setup_index_tbl.first..l_setup_index_tbl.last

            /* issue the insert statement */
             insert into wsm_copy_op_resources
             (
                wip_entity_id,
                operation_seq_num,
                resource_seq_num,
                organization_id,
                department_id,
                --repetitive_schedule_id,
                recommended,

                resource_id,
                resource_code,
                uom_code,
                basis_type,
                usage_rate_or_amount,
                usage_rate_or_amount_inverse,
                activity_id,
                schedule_flag,
                assigned_units,

                max_assigned_units,
                batch_id,
                firm_type,
                group_sequence_id,
                group_sequence_num,
                parent_resource_seq_num,

                autocharge_type,
                standard_rate_flag,
                reco_start_date,
                reco_completion_date,

                attribute_category,
                attribute1,
                attribute2,
                attribute3,
                attribute4,
                attribute5,
                attribute6,
                attribute7,
                attribute8,
                attribute9,
                attribute10,
                attribute11,
                attribute12,
                attribute13,
                attribute14,
                attribute15,

                schedule_seq_num,
                substitute_group_num,
                replacement_group_num,
                --principle_flag,
                setup_id,

                last_update_date,
                last_updated_by,
                creation_date,
                created_by,
                last_update_login,
                request_id,
                program_application_id,
                program_id,
                program_update_date
                )
            values
            (
               p_wip_entity_id,
               p_rtg_op_seq_num,
               v_wljdi_resource_seq_num(i),
               p_org_id,
               v_wljdi_department_id(i),
               -- check,
               'Y',

               v_wljdi_resource_id_new(i),
               v_wljdi_resource_code_new(i),
               v_wljdi_uom_code(i),
               v_wljdi_basis_type(i),
               v_wljdi_usage_rate_or_amt(i),
               round(1/v_wljdi_usage_rate_or_amt(i),6),
               v_wljdi_activity_id(i),
               v_wljdi_scheduled_flag(i),
               v_wljdi_assigned_units(i),
               /* Modified Query by Adding NVL during insert of max_assg_units. Bug 5471266 */
               nvl(v_wljdi_max_assg_units(i),v_wljdi_assigned_units(i)),
               v_wljdi_batch_id(i),
			   /* Modified Query by Adding NVL during insert of firm type. Bug 5471266 */
               nvl(v_wljdi_firm_type(i),0),
               v_wljdi_grp_seq_id(i),
               v_wljdi_grp_seq_num(i),
               v_wljdi_parent_seq_num(i),

               v_wljdi_res_autocharge_type(i),
               v_wljdi_standard_rate_flag(i),
               v_wljdi_start_date(i),
               v_wljdi_completion_date(i),

               v_wljdi_attribute_category(i),
               v_wljdi_attribute1(i),
               v_wljdi_attribute2(i),
               v_wljdi_attribute3(i),
               v_wljdi_attribute4(i),
               v_wljdi_attribute5(i),
               v_wljdi_attribute6(i),
               v_wljdi_attribute7(i),
               v_wljdi_attribute8(i),
               v_wljdi_attribute9(i),
               v_wljdi_attribute10(i),
               v_wljdi_attribute11(i),
               v_wljdi_attribute12(i),
               v_wljdi_attribute13(i),
               v_wljdi_attribute14(i),
               v_wljdi_attribute15(i),

               v_wljdi_schedule_seq_num(i),
               v_wljdi_substitute_group_num(i),
               v_wljdi_replacement_group_num(i),
               -- not there...
               v_wljdi_setup_id(i),

               p_last_updt_date,
               p_last_updt_by,
               p_creation_date,
               p_created_by,
               p_last_updt_login,
               p_request_id,
               p_program_appl_id,
               p_program_id,
               p_prog_updt_date
            );

    else

       /* error out.... cannt delete previous op resources.... */
       fnd_message.set_name('WSM','WSM_NULL_FIELD');
       fnd_message.set_token('FLD_NAME', 'job_op_seq_num/rtg_op_seq_num');
       x_error_msg := fnd_message.get;
       x_error_code := -1;
       return; --raise e_wljdi_common_error;

    end if;

    l_stmt_num := 140;

    --Bug 5474321: Setup resource should be imported even for previous operations.
    --if ( ((p_job_op_seq_num IS NOT NULL) and (p_job_op_seq_num = p_cur_job_op_seq_num) )
    if ( ((p_job_op_seq_num IS NOT NULL) )
         OR
         ((p_rtg_op_seq_num IS NOT NULL))
       )
    then

        l_stmt_num := 150;
        /* check if this part has to come under an if clause....*/
        /* no significance..... */
        l_index := p_global_index; /* current position of p_global_index which will be deleted... */
        p_global_index := null;

        IF l_setup_index_tbl.exists(l_index) THEN
            l_index := v_wljdi_record_id.next(l_index);
        END IF;

        -- Try to get a resource record...
        while l_index is not null loop

            IF lbji_debug = 'Y' THEN
                fnd_file.put_line(fnd_file.log,'Add Resource : Finding the next one : Current ID : ' || v_wljdi_record_id(l_index));
            END IF;

            IF (not(l_setup_index_tbl.exists(l_index))
                and v_wljdi_load_type(l_index) = WSM_LOAD_RES)
            Then
                -- ok.. this is for  Resource
                IF lbji_debug = 'Y' THEN
                        fnd_file.put_line(fnd_file.log,'Add Resource : Found the next record : ' ||  v_wljdi_record_id(l_index));
                END IF;
                p_global_index := l_index;
                exit;
            END IF;

            l_index := v_wljdi_record_id.next(l_index);
        end loop;
        IF lbji_debug = 'Y' THEN
                fnd_file.put_line(fnd_file.log,'Add Resource : Next Record ID : ' || p_global_index);
        END IF;

        /* delete the fetched records... */
        l_index := l_setup_index_tbl.first;

        while l_index is not null loop

            v_wljdi_record_id.delete(l_index);
            v_wljdi_load_type.delete(l_index);
            v_wljdi_substitution_type.delete(l_index);
            v_wljdi_job_op_seq_num.delete(l_index);
            v_wljdi_routing_op_seq_num.delete(l_index);
            v_wljdi_next_rtg_op_seq_num.delete(l_index);
            v_wljdi_inventory_item_id_new.delete(l_index);
            v_wljdi_inventory_item_new.delete(l_index);
            v_wljdi_primary_item.delete(l_index);
            v_wljdi_primary_item_id.delete(l_index);
            v_wljdi_src_phantom_item.delete(l_index);
            v_wljdi_src_phantom_item_id.delete(l_index);
            v_wljdi_component_sequence_id.delete(l_index);
            v_wljdi_date_required.delete(l_index);
            v_wljdi_scheduled_quantity.delete(l_index);
            v_wljdi_required_quantity.delete(l_index);
            v_wljdi_batch_id.delete(l_index);
            v_wljdi_assigned_units.delete(l_index);
            v_wljdi_instance_id_new.delete(l_index);
            v_wljdi_op_completion_date.delete(l_index);
            v_wljdi_op_start_date.delete(l_index);
            v_wljdi_op_yield.delete(l_index);
            v_wljdi_resource_code_new.delete(l_index);
            v_wljdi_resource_id_new.delete(l_index);
            v_wljdi_resource_seq_num.delete(l_index);
            v_wljdi_substitute_group_num.delete(l_index);
            v_wljdi_replacement_group_num.delete(l_index);
            v_wljdi_serial_number_new.delete(l_index);
            v_wljdi_start_date.delete(l_index);
            v_wljdi_completion_date.delete(l_index);

            v_wljdi_firm_type.delete(l_index);
            v_wljdi_setup_id.delete(l_index);
            v_wljdi_grp_seq_id.delete(l_index);
            v_wljdi_grp_seq_num.delete(l_index);
            v_wljdi_max_assg_units.delete(l_index);
            v_wljdi_parent_seq_num.delete(l_index);
            v_wljdi_resource_hours.delete(l_index);

            v_wljdi_department_id.delete(l_index);
            v_wljdi_department_code.delete(l_index);
            v_wljdi_activity_id.delete(l_index);
            v_wljdi_standard_rate_flag.delete(l_index);
            v_wljdi_usage_rate_or_amt.delete(l_index);
            v_wljdi_basis_type.delete(l_index);
            v_wljdi_uom_code.delete(l_index);
            v_wljdi_scheduled_flag.delete(l_index);
            v_wljdi_res_autocharge_type.delete(l_index);
            v_wljdi_schedule_seq_num.delete(l_index);

             v_wljdi_attribute_category.delete(l_index);
             v_wljdi_attribute1.delete(l_index);
             v_wljdi_attribute2.delete(l_index);
             v_wljdi_attribute3.delete(l_index);
             v_wljdi_attribute4.delete(l_index);
             v_wljdi_attribute5.delete(l_index);
             v_wljdi_attribute6.delete(l_index);
             v_wljdi_attribute7.delete(l_index);
             v_wljdi_attribute8.delete(l_index);
             v_wljdi_attribute9.delete(l_index);
             v_wljdi_attribute10.delete(l_index);
             v_wljdi_attribute11.delete(l_index);
             v_wljdi_attribute12.delete(l_index);
             v_wljdi_attribute13.delete(l_index);
             v_wljdi_attribute14.delete(l_index);
             v_wljdi_attribute15.delete(l_index);

             l_index := l_setup_index_tbl.next(l_index);

        end loop;
    end if;

    l_stmt_num := 160;

    x_error_code := 0;

exception

    when others then
        x_error_msg  := 'WSM_LBJ_INTERFACE_PVT : add_resource :: ' || l_stmt_num || ' : ' || substrb(SQLERRM,1,2000);
        fnd_file.put_line(fnd_file.log,x_error_msg);
        x_error_code := -1;

end add_resource;

-- **********************************************************************************************
-- PROCEDURE import_lot_job_details
-- **********************************************************************************************

-- If one line has a fetal error, we will abort all the process

procedure import_lot_job_details (
        p_wip_entity_id                 in number,
        p_org_id                        in number,
        p_wo_records_exist              in varchar2,    -- 'Y' or 'N'
        p_parent_header_id              in number,      -- header_id in WLJI, pass null if N/A
        p_job_scheduled_start_date      in date,
        p_job_scheduled_compl_date      in date,
        p_job_scheduled_quantity        in number,
        p_group_id                      in number,
        p_last_updt_date                in date,
        p_last_updt_by                  in number,
        p_creation_date                 in date,
        p_created_by                    in number,
        p_last_updt_login               in number,
        p_request_id                    in number,
        p_program_appl_id               in number,
        p_program_id                    in number,
        p_prog_updt_date                in date,
        p_error_code                    out nocopy number,
        p_error_msg                     out nocopy varchar2) is


l_stmt_num                  number;
l_d                         number;         -- index for WLJDI records
l_d_saved                   number;
l_temp                      number;
l_exists                    number := 0;
l_swap                      number := 0;    -- ADD: bug 3537390
l_in                        number;
l_out                       number;
l_idx_out_phm               number;
l_idx2                      number;
l_status                    VARCHAR2(10);
l_msg_count                 number;

l_hash_str                  varchar2(200);  -- bug 3373496
l_hash_value                number;         -- bug 3373496
l_v_dup_usage               t_number;       -- bug 3373496



l_res_first                 number  := NULL;
l_comp_first                number  := NULL;
l_op_first                  number  := NULL;
l_res_use_first             number  := NULL;
l_link_first                number  := NULL;
l_op_link_first             number  := NULL;
l_res_ins_first             number  := NULL;
l_change_path               boolean := false;
l_with_discommand           boolean := false;
l_path_changed              boolean := false;
l_job_status                number;
l_job_start_qty             number;
l_job_qty_scrapped          number;

l_load_type                 number;
l_sub_type                  number;
l_end_op_seq_num            number:= NULL;
l_end_op_seq_id             number:= NULL;
l_start_op_seq_num          number:= NULL;
l_start_op_seq_id           number:= NULL;
l_cur_op_seq_id             number := NULL;
l_cur_rtg_op_seq_num        number := NULL;
l_cur_job_op_seq_num        number := NULL;
l_on_reco_path              varchar2(1) := 'N';
l_cur_job_qty               number := NULL;
l_rtg_op_seq_num            number;
l_job_op_seq_num            number;
l_fm_op                     number;
l_to_op                     number;
l_op_sdate                  date;
l_op_edate                  date;
l_op_qty                    number;
l_op_yield                  number;
l_resource_id               number;
l_res_seq_num               number;
l_sub_grp_num               number;
l_rpl_grp_num               number;
l_instance_id               number;
l_serial_num                varchar2(30);
/*Added for bugfix:7248992 */
l_cum_yield                 number;
l_rev_cum_yield             number;

l_item_id                   number;
l_primary_item_id           number;
l_src_phm_item_id           number;
l_component_seq_id          number;
l_job_start_date            date;
l_job_compl_date            date;
l_reco_flag                 varchar2(1);
l_use_phantom_routings      number;

/* ST : Detailed Scheduling */
l_resource_hours            number;
l_index                     number;
l_parent_res_seq_num        number;
l_setup_res_seq_num         number;

l_v_disco_res_seq_num        t_number;
/* ST : Detailed Scheduling */

l_v_links                   t_links;
l_v_ops                     t_ops;
l_v_res                     t_op_res;
l_v_res_ins                 t_res_ins;
l_v_res_use                 t_res_use;
l_v_comp                    t_op_comp;

l_v_path_seq_num            t_number;
l_v_path_ops                t_number;
l_v_fm_ops                  t_number;
l_v_to_ops                  t_number;

l_v_rtg_op_seq              t_number;
l_v_res_seq_num             t_number;
l_v_instance_id             t_number;
l_v_serial_num              t_serial;
l_v_start_date              t_date;
l_v_compl_date              t_date;
l_v_recoflag                t_recoflag;

l_v_op_yield                t_number;
l_v_op_qty                  t_number;

l_v_res_ids                 t_number;
l_v_res_sub_grp             t_number;
l_v_res_rpl_grp             t_number;
l_v_disco_res_ids           t_number;
l_v_disco_res_rpl_grp       t_number;

-- ST : Detailed Scheduling....
l_v_res_seq_nums            t_number;

-- These two tables store the RES SEQ NUM and OP SEQ NUM for which setup resources where added..
type t_setup is table of varchar2(1) index by varchar2(100);

l_v_setup_op_res_num        t_setup;
l_temp_par_res_seq          number;
-- ST : Detailed Scheduling......

l_v_res_ins_batch_id        t_number;

l_v_res_use_asgn_units      t_number;

l_v_comp_item_id            t_number;
l_v_comp_prm_item_id        t_number;
l_v_comp_phm_item_id        t_number;
l_v_comp_comp_seq_id        t_number;
l_v_comp_reqd_date          t_date;
l_v_comp_yield              t_number;
l_v_comp_qpa                t_number; -- ADD bug 3347985
l_v_disco_item_id           t_number;
l_v_disco_comp_seq_id       t_number;
l_v_disco_src_phm_id        t_number;

/* ST : Detailed Scheduling start */
l_v_res_firm_type       t_number;
l_v_res_setup_id        t_number;
l_v_res_grp_seq_id      t_number;
l_v_res_grp_seq_num     t_number;
l_v_res_max_assg_units      t_number;
l_v_res_parent_seq_num      t_number;
l_v_res_batch_id        t_number;
l_v_res_assg_units      t_number;

l_v_resource_hours      t_number;
l_v_attribute_category   t_attribute_category;
l_v_attribute1   t_attribute;
l_v_attribute2   t_attribute;
l_v_attribute3   t_attribute;
l_v_attribute4   t_attribute;
l_v_attribute5   t_attribute;
l_v_attribute6   t_attribute;
l_v_attribute7   t_attribute;
l_v_attribute8   t_attribute;
l_v_attribute9   t_attribute;
l_v_attribute10 t_attribute;
l_v_attribute11  t_attribute;
l_v_attribute12  t_attribute;
l_v_attribute13  t_attribute;
l_v_attribute14  t_attribute;
l_v_attribute15  t_attribute;

l_v_res_recom              t_res_recom;
/* ST : Detailed Scheduling end */

/*Added for bugfix:7248992 */
l_v_cum_yield                 t_number;
l_v_rev_cum_yield            t_number;

cursor c_wljdi is
    select  record_id,
            -- ST Fix for bug 4285032 :
            -- APS will be populating 8 for resource instance information
            -- and 9 resource instance usage information..
            -- Map it to WSM load type 7 --> resource instance
            --                         4 --> resource instance usage..
            decode(load_type,8,7,
                             9,4,
                 load_type) load_type,
            substitution_type,
            job_op_seq_num,
            decode(job_op_seq_num,null,routing_op_seq_num,null) routing_op_seq_num,
            next_routing_op_seq_num,
            inventory_item_id_new,
            inventory_item_new,
            primary_item,
            primary_item_id,
            src_phantom_item,
            src_phantom_item_id,
            component_sequence_id,
            date_required,
            scheduled_quantity,
            required_quantity,
            batch_id,
            assigned_units,
            instance_id_new,
            operation_completion_date,
            operation_start_date,
            operation_yield,
            resource_code_new,
            resource_id_new,
            resource_seq_num,
            substitute_group_num,
            replacement_group_num,
            serial_number_new,
            start_date,
            completion_date,
            /* ST : Detailed Scheduling */
            firm_type,
            setup_id,
            setup_code,
            group_sequence_id,
            group_sequence_num,
            max_assigned_units,
            parent_resource_seq_num,
            resource_hours,
            /* ST : Detailed Scheduling */
            /* ST : Detailed Scheduling : Added for resource adding changes */
            department_id          ,
            department_code        ,
            activity_id        ,
            standard_rate_flag     ,
            usage_rate_or_amount   ,
            basis_type          ,
            uom_code            ,
            scheduled_flag      ,
            autocharge_type    ,
            schedule_seq_num       ,
            attribute_category     ,
            attribute1         ,
            attribute2         ,
            attribute3         ,
            attribute4         ,
            attribute5         ,
            attribute6         ,
            attribute7         ,
            attribute8         ,
            attribute9         ,
            attribute10        ,
            attribute11        ,
            attribute12        ,
            attribute13        ,
            attribute14        ,
            attribute15        ,
            /* ST : Detailed Scheduling : Added for resource adding changes : end */
            -- Added For LBJ Interface Alcoa Enhancement
            recommended,
            standard_operation_code,
            standard_operation_id,
            operation_yield_enabled,
            minimum_transfer_quantity,
            backflush_flag,
            count_point_type,
            description,
            include_in_rollup,
            option_dependent_flag,
            inventory_item_id_old,
            inventory_item_old,
            wip_supply_type,
            quantity_per_assembly,
            supply_subinventory,
            supply_locator_id,
            mrp_net_flag,
            auto_request_material,
            comments,
            applied_resource_units,
	    cumulative_yield, /*Added for bugfix:7248992 */
	    reverse_cumulative_yield/*Added for bugfix:7248992 */
    from    wsm_lot_job_dtl_interface
    where   parent_header_id = p_parent_header_id
    and     process_status = WIP_CONSTANTS.RUNNING
    order by load_type,
             NVL(parent_resource_seq_num,0), -- Detailed Scheduling Code review remark...
             -- (Moved parent resource_seq_num before substitution_type so that setup resources are processed after runtime resource
             -- ST : Detailed Scheduling Added to grpup the new setup resources for a runtime resource together
             -- Or else we'll get a error in the BULK INSERT of add_resource procedure
             substitution_type,
             NVL(job_op_seq_num, 0), NVL(routing_op_seq_num, 0),
             NVL(substitute_group_num, -1), NVL(replacement_group_num, 0),
             NVL(resource_seq_num, 0),
             NVL(instance_id_new, 0), NVL(serial_number_new, 0),
             DECODE(substitution_type,WSM_SUB_DEL,NVL(src_phantom_item_id, 0)) desc,
             DECODE(substitution_type,WSM_SUB_ADD,NVL(src_phantom_item_id, 0)
                                     ,WSM_SUB_REC,NVL(src_phantom_item_id, 0)
                                     ,WSM_SUB_DIS,NVL(src_phantom_item_id, 0)
                                     ,WSM_SUB_CHG,NVL(src_phantom_item_id, 0)) asc,
             transaction_date,
             record_id desc;

cursor c_wljdi_indp is
    select  record_id,
            -- ST Fix for bug 4285032 :
        -- APS will be populating 8 for resource instance information
        -- and 9 resource instance usage information..
        -- Map it to WSM load type 7 --> resource instance
        --                         4 --> resource instance usage..
            decode(load_type,8,7,
                         9,4,
                 load_type) load_type,
            substitution_type,
            job_op_seq_num,
            decode(job_op_seq_num,null,routing_op_seq_num,null) routing_op_seq_num,
            next_routing_op_seq_num,
            inventory_item_id_new,
            inventory_item_new,
            primary_item,
            primary_item_id,
            src_phantom_item,
            src_phantom_item_id,
            component_sequence_id,
            date_required,
            scheduled_quantity,
            required_quantity,
            batch_id,
            assigned_units,
            instance_id_new,
            operation_completion_date,
            operation_start_date,
            operation_yield,
            resource_code_new,
            resource_id_new,
            resource_seq_num,
            substitute_group_num,
            replacement_group_num,
            serial_number_new,
            start_date,
            completion_date,
            /* ST : Detailed Scheduling */
            firm_type,
            setup_id,
            setup_code,
            group_sequence_id,
            group_sequence_num,
            max_assigned_units,
            parent_resource_seq_num,
            resource_hours,
            /* ST : Detailed Scheduling */
            /* ST : Detailed Scheduling : Added for resource adding changes */
            department_id          ,
            department_code        ,
            activity_id        ,
            standard_rate_flag     ,
            usage_rate_or_amount   ,
            --usage_rate_or_amount_inve ,
            basis_type          ,
            uom_code            ,
            scheduled_flag      ,
            --resource_offset_percent   ,
            autocharge_type    ,
            schedule_seq_num       ,
            --principle_flag       ,
            --change_notice    ,
            --acd_type         ,
            --original_system_reference,
            attribute_category     ,
            attribute1         ,
            attribute2         ,
            attribute3         ,
            attribute4         ,
            attribute5         ,
            attribute6         ,
            attribute7         ,
            attribute8         ,
            attribute9         ,
            attribute10        ,
            attribute11        ,
            attribute12        ,
            attribute13        ,
            attribute14        ,
            attribute15        ,
            /* ST : Detailed Scheduling : Added for resource adding changes : end */
            -- Added For LBJ Interface Alcoa Enhancement
            recommended,
            standard_operation_code,
            standard_operation_id,
            operation_yield_enabled,
            minimum_transfer_quantity,
            backflush_flag,
            count_point_type,
            description,
            include_in_rollup,
            option_dependent_flag,
            inventory_item_id_old,
            inventory_item_old,
            wip_supply_type,
            quantity_per_assembly,
            supply_subinventory,
            supply_locator_id,
            mrp_net_flag,
            auto_request_material,
            comments,
            applied_resource_units,
	    cumulative_yield, /*Added for bugfix:7248992 */
	    reverse_cumulative_yield/*Added for bugfix:7248992 */
    from    wsm_lot_job_dtl_interface
    where   parent_header_id IS NULL
    and     wip_entity_id     = p_wip_entity_id
    and     organization_id   = p_org_id
    and     process_status    = WIP_CONSTANTS.RUNNING
    and     NVL(group_id, -1) = NVL(p_group_id, -1)
    order by load_type,
             NVL(parent_resource_seq_num,0),
             -- Detailed Scheduling Code review remark...
             -- (Moved parent resource_seq_num before substitution_type so that setup resources are processed after runtime resource
             -- ST : Detailed Scheduling Added to grpup the new setup resources for a runtime resource together
             -- Or else we'll get a error in the BULK INSERT of add_resource procedure
             substitution_type,
             NVL(job_op_seq_num, 0), NVL(routing_op_seq_num, 0),
             NVL(substitute_group_num, -1), NVL(replacement_group_num, 0),
             NVL(resource_seq_num, 0),
             NVL(instance_id_new, 0), NVL(serial_number_new, 0),
             DECODE(substitution_type,WSM_SUB_DEL,NVL(src_phantom_item_id, 0)) desc,
             DECODE(substitution_type,WSM_SUB_ADD,NVL(src_phantom_item_id, 0)
                                     ,WSM_SUB_REC,NVL(src_phantom_item_id, 0)
                                     ,WSM_SUB_DIS,NVL(src_phantom_item_id, 0)
                                     ,WSM_SUB_CHG,NVL(src_phantom_item_id, 0)) asc,
             transaction_date,
             record_id desc;

cursor c_the_path (
        c_wip_entity_id     number,
        c_end_op_seq_num    number) is
    select     from_op_seq_num,
               to_op_seq_num
    from       wsm_copy_op_networks
    start with (to_op_seq_num = c_end_op_seq_num and
                recommended = 'Y' and
                wip_entity_id = c_wip_entity_id)
    connect by (to_op_seq_num = prior from_op_seq_num and
                recommended = 'Y' and
                wip_entity_id = c_wip_entity_id);

cursor c_disco_res (
        c_wip_entity_id     number,
        c_rtg_op_seq_num    number,
        c_sub_grp_num       number,
        c_rpl_grp_num       number) is
    select   resource_id,
             replacement_group_num,
             resource_seq_num  /* ST : Detailed Scheduling added.... */
    from     wsm_copy_op_resources
    where    wip_entity_id          = c_wip_entity_id
    and      operation_seq_num      = c_rtg_op_seq_num
    and      nvl(substitute_group_num, -1)  = nvl(c_sub_grp_num, -1)
    and      nvl(replacement_group_num, 0) <> nvl(c_rpl_grp_num, 0);

cursor c_disco_comp (
        c_wip_entity_id     number,
        c_rtg_op_seq_num    number,
        c_item_id           number,
        c_primary_item_id   number,
        c_src_phantom_id    number) is
    select   wcro.component_item_id,
             wcro.component_sequence_id,
             wcro.source_phantom_id
    from     wsm_copy_requirement_ops wcro
    where    wcro.wip_entity_id     = c_wip_entity_id
    and      wcro.operation_seq_num = c_rtg_op_seq_num
    and      wcro.component_item_id <> c_item_id
    and      wcro.primary_component_id = c_primary_item_id
    and      wcro.source_phantom_id = -1 -- IS NULL
    union
    select   wcro.component_item_id,
             wcro.component_sequence_id,
             wcro.source_phantom_id
    from     wsm_copy_requirement_ops wcro
    where    wcro.wip_entity_id        = c_wip_entity_id
    and      wcro.operation_seq_num    = c_rtg_op_seq_num
    and      wcro.primary_component_id = c_primary_item_id
    and      wcro.source_phantom_id <> -1 -- IS NOT NULL
    and      wcro.source_phantom_id <> c_src_phantom_id;


e_wljdi_common_error        exception;
e_invalid_discommend_path   exception;
e_invalid_recommend_path    exception;
e_invalid_sub_load_type     exception;
e_invalid_op_seq_num        exception;
e_invalid_item_name         exception;
e_invalid_resource_name     exception;
e_null_comp_seq_id          exception;

-- Added For LBJ Interface Alcoa Enhancement
l_link_exists     number;
l_from_op_seq_id  number;
l_to_op_seq_id    number;
l_validate_network number := -1;
l_scrap_account   number;
l_est_absorption_account number;
l_department_code varchar2(10);
l_op_seq_id       number;
l_item_old_id     number;
x_return_status   varchar2(1);
l_Supply_subinventory     varchar2(20);
l_Supply_locator_id       number;
l_mrp_net_flag    number;
l_valid_comp      boolean;
l_applied_resource_units   number;
l_resource_seq_num         number;
--Modified for Alcoa Enhanement as the exception is not used
--e_no_supply_sub      exception;

BEGIN

    SAVEPOINT start_import_details;

    p_error_code         := 0;
    p_error_msg          := '';
    l_cur_job_op_seq_num := null;
    l_cur_rtg_op_seq_num := null;
    l_cur_op_seq_id      := null;

l_stmt_num := 5.1;
    -- get the op_seq_num of the routing end
    find_copy_routing_end(
        p_wip_entity_id,
        l_end_op_seq_num,
        l_end_op_seq_id,
        p_error_code,
        p_error_msg);
    if p_error_code <> 0 then
        raise e_wljdi_common_error;
    end if;

l_stmt_num := 5.2;
    -- get the op_seq_num of the routing start
    find_copy_routing_start(
        p_wip_entity_id,
        l_start_op_seq_num,
        l_start_op_seq_id,
        p_error_code,
        p_error_msg);
    if p_error_code <> 0 then
        raise e_wljdi_common_error;
    end if;


    -- if p_wo_records_exist = 'Y', get current operation information here!
    if p_wo_records_exist = 'Y' then

l_stmt_num := 10.1;
        select  status_type,
                start_quantity,
                quantity_scrapped
        into    l_job_status,
                l_job_start_qty,
                l_job_qty_scrapped
        from    wip_discrete_jobs
        where   wip_entity_id = p_wip_entity_id;

        if(l_job_status = WIP_CONSTANTS.UNRELEASED) then
            l_cur_job_op_seq_num := g_op_seq_incr;
            l_cur_rtg_op_seq_num := l_start_op_seq_num;
            l_cur_op_seq_id      := l_start_op_seq_id;
            l_cur_job_qty        := l_job_start_qty;

            /*For Unreleased jobs insert records for changes in wip tables */
            BEGIN

              insert into wsm_lot_job_dtl_interface (
                                      record_id,
                                      interface_id,
                                      group_id,
                                      parent_header_id,
                                      load_type,
                                      substitution_type,
                                      process_phase,
                                      process_status,
                                      job_name,
                                      wip_entity_id,
                                      organization_id,
                                      organization_code,
                                      department_id,
                                      department_code,
                                      description,
                                      job_op_seq_num,
                                      routing_op_seq_num,
                                      next_routing_op_seq_num,
                                      resource_seq_num,
                                      resource_id_old,
                                      resource_id_new,
                                      resource_code_old,
                                      resource_code_new,
                                      usage_rate_or_amount,
                                      scheduled_flag,
                                      assigned_units,
                                      applied_resource_units,
                                      applied_resource_value,
                                      uom_code,
                                      basis_type,
                                      activity_id,
                                      autocharge_type,
                                      standard_rate_flag,
                                      start_date,
                                      completion_date,
                                      schedule_seq_num,
                                      substitute_group_num,
                                      replacement_group_num,
                                      setup_id,
                                      batch_id,
                                      inventory_item_id_old,
                                      inventory_item_id_new,
                                      inventory_item_old,
                                      inventory_item_new,
                                      primary_item_id,
                                      primary_item,
                                      src_phantom_item_id,
                                      src_phantom_item,
                                      component_sequence_id,
                                      quantity_per_assembly,
                                      wip_supply_type,
                                      date_required,
                                      required_quantity,
                                      quantity_issued,
                                      supply_subinventory,
                                      supply_locator_id,
                                      mrp_net_flag,
                                      mps_required_quantity,
                                      mps_date_required,
                                      standard_operation_id,
                                      scheduled_quantity,
                                      operation_yield,
                                      operation_start_date,
                                      operation_completion_date,
                                      minimum_transfer_quantity,
                                      backflush_flag,
                                      count_point_type,
                                      planning_pct,
                                      transaction_date,
                                      last_update_date,
                                      last_updated_by_name,
                                      last_updated_by,
                                      creation_date,
                                      created_by_name,
                                      created_by,
                                      last_update_login,
                                      request_id,
                                      program_application_id,
                                      program_id,
                                      program_update_date,
                                      attribute_category,
                                      attribute1,
                                      attribute2,
                                      attribute3,
                                      attribute4,
                                      attribute5 ,
                                      attribute6,
                                      attribute7,
                                      attribute8,
                                      attribute9,
                                      attribute10,
                                      attribute11,
                                      attribute12,
                                      attribute13,
                                      attribute14,
                                      attribute15,
                                      instance_id_new,
                                      instance_id_old,
                                      serial_number_new,
                                      serial_number_old,
                                      auto_request_material,
                                      comments,
                                      error_code,
                                      error_msg,
                                      firm_type,
                                      group_sequence_id,
                                      group_sequence_num,
                                      max_assigned_units,
                                      parent_resource_seq_num,
                                      resource_hours,
                                      setup_code,
                                      cumulative_yield,
                                      reverse_cumulative_yield,
                                      standard_operation_code,
                                      operation_yield_enabled,
                                      include_in_rollup,
                                      option_dependent_flag,
                                      recommended)
                            (select   -1 * record_id,
                                      interface_id,
                                      group_id,
                                      parent_header_id,
                                      decode(load_type,6,3,load_type),
                                      substitution_type,
                                      process_phase,
                                      process_status,
                                      job_name,
                                      wip_entity_id,
                                      organization_id,
                                      organization_code,
                                      department_id,
                                      department_code,
                                      description,
                                      null,
                                      l_start_op_seq_num,
                                      next_routing_op_seq_num,
                                      resource_seq_num,
                                      resource_id_old,
                                      resource_id_new,
                                      resource_code_old,
                                      resource_code_new,
                                      usage_rate_or_amount,
                                      scheduled_flag,
                                      assigned_units,
                                      applied_resource_units,
                                      applied_resource_value,
                                      uom_code,
                                      basis_type,
                                      activity_id,
                                      autocharge_type,
                                      standard_rate_flag,
                                      start_date,
                                      completion_date,
                                      schedule_seq_num,
                                      substitute_group_num,
                                      replacement_group_num,
                                      setup_id,
                                      batch_id,
                                      inventory_item_id_old,
                                      inventory_item_id_new,
                                      inventory_item_old,
                                      inventory_item_new,
                                      primary_item_id,
                                      primary_item,
                                      src_phantom_item_id,
                                      src_phantom_item,
                                      component_sequence_id,
                                      quantity_per_assembly,
                                      wip_supply_type,
                                      date_required,
                                      required_quantity,
                                      quantity_issued,
                                      supply_subinventory,
                                      supply_locator_id,
                                      mrp_net_flag,
                                      mps_required_quantity,
                                      mps_date_required,
                                      standard_operation_id,
                                      scheduled_quantity,
                                      operation_yield,
                                      operation_start_date,
                                      operation_completion_date,
                                      minimum_transfer_quantity,
                                      backflush_flag,
                                      count_point_type,
                                      planning_pct,
                                      transaction_date,
                                      last_update_date,
                                      last_updated_by_name,
                                      last_updated_by,
                                      creation_date,
                                      created_by_name,
                                      created_by,
                                      last_update_login,
                                      request_id,
                                      program_application_id,
                                      program_id,
                                      program_update_date,
                                      attribute_category,
                                      attribute1,
                                      attribute2,
                                      attribute3,
                                      attribute4,
                                      attribute5 ,
                                      attribute6,
                                      attribute7,
                                      attribute8,
                                      attribute9,
                                      attribute10,
                                      attribute11,
                                      attribute12,
                                      attribute13,
                                      attribute14,
                                      attribute15,
                                      instance_id_new,
                                      instance_id_old,
                                      serial_number_new,
                                      serial_number_old,
                                      auto_request_material,
                                      comments,
                                      error_code,
                                      error_msg,
                                      firm_type,
                                      group_sequence_id,
                                      group_sequence_num,
                                      max_assigned_units,
                                      parent_resource_seq_num,
                                      resource_hours,
                                      setup_code,
                                      cumulative_yield,
                                      reverse_cumulative_yield,
                                      standard_operation_code,
                                      operation_yield_enabled,
                                      include_in_rollup,
                                      option_dependent_flag,
                                      recommended
                                 from wsm_lot_job_dtl_interface
                                 where ((parent_header_id = p_parent_header_id)
                                        or (parent_header_id IS NULL and wip_entity_id = p_wip_entity_id and organization_id = p_org_id and  NVL(group_id, -1) = NVL(p_group_id, -1)))
                                  and   process_status    = WIP_CONSTANTS.RUNNING
                                  and   (job_op_seq_num=g_op_seq_incr and routing_op_seq_num=l_start_op_seq_num)
                                  and   load_type <> 5
                                  and   ((load_type=3 and substitution_type not in (1,2))
                                       or (load_type=1 and substitution_type not in (1,2))));

                           EXCEPTION
                                 WHEN OTHERS THEN
                                  fnd_file.put_line(fnd_file.log, 'Inserting additional records into WLDJI failed');
                            END;
        else
            begin
l_stmt_num := 10.2;
                select  operation_seq_num,
                        operation_sequence_id,
                        quantity_in_queue + quantity_running + quantity_waiting_to_move
                into    l_cur_job_op_seq_num,
                        l_cur_op_seq_id,
                        l_cur_job_qty
                from    wip_operations
                where   wip_entity_id = p_wip_entity_id
                and     (quantity_in_queue <> 0 or
                         quantity_running <> 0 or
                         quantity_waiting_to_move <> 0);
                if(l_cur_op_seq_id IS NOT NULL) then
                    begin
l_stmt_num := 10.3;
                        select operation_seq_num
                        into   l_cur_rtg_op_seq_num
                        from   wsm_copy_operations
                        where  wip_entity_id = p_wip_entity_id
                        and    operation_sequence_id = l_cur_op_seq_id;
                    exception
                        when no_data_found then
                            NULL;
                    end;
                end if;
            exception
                when no_data_found then
                    if (l_job_status IN ( WIP_CONSTANTS.COMP_CHRG,
                                          WIP_CONSTANTS.COMP_NOCHRG,
                                          WIP_CONSTANTS.CLOSED) )
                    then
                        l_cur_job_op_seq_num := null;
                        l_cur_rtg_op_seq_num := l_end_op_seq_num;
                        l_cur_op_seq_id      := l_end_op_seq_id;
                        l_cur_job_qty        := l_job_start_qty - l_job_qty_scrapped;
                    end if;
            end;
        end if;

    else -- p_wo_records_exist = 'N'
        l_cur_rtg_op_seq_num := l_start_op_seq_num;
        l_cur_job_qty        := p_job_scheduled_quantity;
    end if;

    -- get job start/compl date if not specified
    l_job_start_date := p_job_scheduled_start_date;
    l_job_compl_date := p_job_scheduled_compl_date;
    if(l_job_start_date IS NULL or l_job_compl_date IS NULL) then
l_stmt_num := 10.4;
        select  scheduled_start_date,
                scheduled_completion_date
        into    l_job_start_date,
                l_job_compl_date
        from    wip_discrete_jobs
        where   wip_entity_id = p_wip_entity_id;
    end if;

    -----------------------------------------------------
    -- default WLJDI values, and validate required fields
    -----------------------------------------------------
l_stmt_num := 20;
    default_wljdi_fields(
        p_wip_entity_id    => p_wip_entity_id,
        p_org_id           => p_org_id,
        p_parent_header_id => p_parent_header_id,
        p_group_id         => p_group_id,
        p_wo_records_exist => p_wo_records_exist,
        p_error_code       => p_error_code,
        p_error_msg        => p_error_msg);
    if p_error_code <> 0 then
        raise e_wljdi_common_error;
    end if;



    ---------------------------------------
    -- empty v_wljdi and load WLJDI records
    ---------------------------------------
    -- BA: bug 3313463/3311695 8i compatibility
    v_wljdi_record_id               := t_wljdi_record_id();
    v_wljdi_load_type               := t_wljdi_load_type();
    v_wljdi_substitution_type       := t_wljdi_substitution_type();
    v_wljdi_job_op_seq_num          := t_wljdi_job_op_seq_num();
    v_wljdi_routing_op_seq_num      := t_wljdi_routing_op_seq_num();
    v_wljdi_next_rtg_op_seq_num     := t_wljdi_next_rtg_op_seq_num();

    v_wljdi_inventory_item_id_new   := t_wljdi_inventory_item_id_new();
    v_wljdi_inventory_item_new      := t_wljdi_inventory_item_new();
    v_wljdi_primary_item            := t_wljdi_primary_item();
    v_wljdi_primary_item_id         := t_wljdi_primary_item_id();
    v_wljdi_src_phantom_item        := t_wljdi_src_phantom_item();
    v_wljdi_src_phantom_item_id     := t_wljdi_src_phantom_item_id();
    v_wljdi_component_sequence_id   := t_wljdi_component_sequence_id();
    v_wljdi_date_required           := t_wljdi_date_required();
    v_wljdi_scheduled_quantity      := t_wljdi_scheduled_quantity();
    v_wljdi_required_quantity       := t_wljdi_required_quantity();
    v_wljdi_batch_id                := t_wljdi_batch_id();
    v_wljdi_assigned_units          := t_wljdi_assigned_units();
    v_wljdi_instance_id_new         := t_wljdi_instance_id_new();
    v_wljdi_op_completion_date      := t_wljdi_op_completion_date();
    v_wljdi_op_start_date           := t_wljdi_op_start_date();
    v_wljdi_op_yield                := t_wljdi_op_yield();
    v_wljdi_resource_code_new       := t_wljdi_resource_code_new();
    v_wljdi_resource_id_new         := t_wljdi_resource_id_new();
    v_wljdi_resource_seq_num        := t_wljdi_resource_seq_num();
    v_wljdi_substitute_group_num    := t_wljdi_substitute_group_num();
    v_wljdi_replacement_group_num   := t_wljdi_replacement_group_num();
    v_wljdi_serial_number_new       := t_wljdi_serial_number_new();
    v_wljdi_start_date              := t_wljdi_start_date();
    v_wljdi_completion_date         := t_wljdi_completion_date();
    -- EA: bug 3313463/3311695 8i compatibility

    /* ST : Detailed scheduling */
    v_wljdi_firm_type           := t_wljdi_firm_type();
    v_wljdi_setup_id            := t_wljdi_setup_id();
    v_wljdi_setup_code          := t_wljdi_setup_code();
    v_wljdi_grp_seq_id          := t_wljdi_grp_seq_id();
    v_wljdi_grp_seq_num         := t_wljdi_grp_seq_num();
    v_wljdi_max_assg_units      := t_wljdi_max_assg_units();
    v_wljdi_parent_seq_num      := t_wljdi_parent_seq_num();
    v_wljdi_resource_hours      := t_wljdi_resource_hours();

    /* ST : Detailed Scheduling : Considered for adding a setup resource.... */
    v_wljdi_department_id       := t_wljdi_department_id();
    v_wljdi_department_code     := t_wljdi_department_code();

    v_wljdi_activity_id         := t_wljdi_activity_id();
    v_wljdi_standard_rate_flag  := t_wljdi_standard_rate_flag();
    v_wljdi_usage_rate_or_amt   := t_wljdi_usage_rate_or_amt();
    v_wljdi_basis_type          := t_wljdi_basis_type();
    v_wljdi_uom_code            := t_wljdi_uom_code();
    v_wljdi_scheduled_flag      := t_wljdi_scheduled_flag();
    v_wljdi_res_autocharge_type := t_wljdi_res_autocharge_type();
    v_wljdi_schedule_seq_num    := t_wljdi_schedule_seq_num();

    v_wljdi_attribute_category  := t_wljdi_attribute_category();
    v_wljdi_attribute1          := t_wljdi_attribute1();
    v_wljdi_attribute2          := t_wljdi_attribute2();
    v_wljdi_attribute3          := t_wljdi_attribute3();
    v_wljdi_attribute4          := t_wljdi_attribute4();
    v_wljdi_attribute5          := t_wljdi_attribute5();
    v_wljdi_attribute6          := t_wljdi_attribute6();
    v_wljdi_attribute7          := t_wljdi_attribute7();
    v_wljdi_attribute8          := t_wljdi_attribute8();
    v_wljdi_attribute9          := t_wljdi_attribute9();
    v_wljdi_attribute10         := t_wljdi_attribute10();
    v_wljdi_attribute11         := t_wljdi_attribute11();
    v_wljdi_attribute12         := t_wljdi_attribute12();
    v_wljdi_attribute13         := t_wljdi_attribute13();
    v_wljdi_attribute14         := t_wljdi_attribute14();
    v_wljdi_attribute15         := t_wljdi_attribute15();
    /* ST : Detailed scheduling : end */

    -- Added For LBJ Interface Alcoa Enhancement
    v_wljdi_recommended         := t_wljdi_recommended();
    v_wljdi_std_op_code         := t_wljdi_std_op_code();
    v_wljdi_std_op_id           := t_wljdi_std_op_id();
    v_wljdi_op_yield_enable     := t_wljdi_op_yield_enable();
    v_wljdi_min_trf_qty         := t_wljdi_min_trf_qty();
    v_wljdi_backflush_flag      := t_wljdi_backflush_flag();
    v_wljdi_count_point_type    := t_wljdi_count_point_type();
    v_wljdi_description         := t_wljdi_description();
    v_wljdi_inc_in_rollup       := t_wljdi_inc_in_rollup();
    v_wljdi_option_dep_flag     := t_wljdi_option_dep_flag();
    v_wljdi_inventory_item_id_old   := t_wljdi_inventory_item_id_old();
    v_wljdi_inventory_item_old      := t_wljdi_inventory_item_old();
    v_wljdi_wip_supply_type         := t_wljdi_wip_supply_type();
    v_wljdi_quantity_per_assembly   := t_wljdi_quantity_per_assembly();
    v_wljdi_supply_subinventory     := t_wljdi_supply_subinventory();
    v_wljdi_supply_locator_id       := t_wljdi_supply_locator_id();
    v_wljdi_mrp_net_flag            := t_wljdi_mrp_net_flag();
    v_wljdi_auto_request_material   := t_wljdi_auto_request_material();
    v_wljdi_comments                := t_wljdi_comments();
    v_wljdi_applied_resource_units  := t_wljdi_applied_resource_units();

    /*Added for bugfix:6857061 */
    v_wljdi_cum_yield               := t_wljdi_cum_yield();
    v_wljdi_rev_cum_yield           := t_wljdi_rev_cum_yield();

    if(p_parent_header_id IS NULL) then
l_stmt_num := 20.1;
        --BC: bug 3313463/3311695
        open c_wljdi_indp;
        fetch c_wljdi_indp bulk collect into
            v_wljdi_record_id,
            v_wljdi_load_type,
            v_wljdi_substitution_type,
            v_wljdi_job_op_seq_num,
            v_wljdi_routing_op_seq_num,
            v_wljdi_next_rtg_op_seq_num,
            v_wljdi_inventory_item_id_new,
            v_wljdi_inventory_item_new,
            v_wljdi_primary_item,
            v_wljdi_primary_item_id,
            v_wljdi_src_phantom_item,
            v_wljdi_src_phantom_item_id,
            v_wljdi_component_sequence_id,
            v_wljdi_date_required,
            v_wljdi_scheduled_quantity,
            v_wljdi_required_quantity,
            v_wljdi_batch_id,
            v_wljdi_assigned_units,
            v_wljdi_instance_id_new,
            v_wljdi_op_completion_date,
            v_wljdi_op_start_date,
            v_wljdi_op_yield,
            v_wljdi_resource_code_new,
            v_wljdi_resource_id_new,
            v_wljdi_resource_seq_num,
            v_wljdi_substitute_group_num,
            v_wljdi_replacement_group_num,
            v_wljdi_serial_number_new,
            v_wljdi_start_date,
            v_wljdi_completion_date,
            /* ST : Detailed Scheduling start */
            v_wljdi_firm_type,
            v_wljdi_setup_id,
            v_wljdi_setup_code,
            v_wljdi_grp_seq_id,
            v_wljdi_grp_seq_num,
            v_wljdi_max_assg_units,
            v_wljdi_parent_seq_num,
            v_wljdi_resource_hours,
            /* ST : Detailed Scheduling end */
            /* ST : Detailed Scheduling : Considered for adding a resource */
            v_wljdi_department_id      ,
            v_wljdi_department_code        ,
            v_wljdi_activity_id        ,
            v_wljdi_standard_rate_flag     ,
            v_wljdi_usage_rate_or_amt      ,
            v_wljdi_basis_type         ,
            v_wljdi_uom_code           ,
            v_wljdi_scheduled_flag     ,
            v_wljdi_res_autocharge_type    ,
            v_wljdi_schedule_seq_num       ,

            v_wljdi_attribute_category     ,
            v_wljdi_attribute1         ,
            v_wljdi_attribute2         ,
            v_wljdi_attribute3         ,
            v_wljdi_attribute4         ,
            v_wljdi_attribute5         ,
            v_wljdi_attribute6         ,
            v_wljdi_attribute7         ,
            v_wljdi_attribute8         ,
            v_wljdi_attribute9         ,
            v_wljdi_attribute10            ,
            v_wljdi_attribute11        ,
            v_wljdi_attribute12        ,
            v_wljdi_attribute13        ,
            v_wljdi_attribute14        ,
            v_wljdi_attribute15        ,
            /* ST : Detailed Scheduling :  end adding a resource changes */
            -- Added For LBJ Interface Alcoa Enhancement
            v_wljdi_recommended,
            v_wljdi_std_op_code,
            v_wljdi_std_op_id,
            v_wljdi_op_yield_enable,
            v_wljdi_min_trf_qty,
            v_wljdi_backflush_flag,
            v_wljdi_count_point_type,
            v_wljdi_description,
            v_wljdi_inc_in_rollup,
            v_wljdi_option_dep_flag,
            v_wljdi_inventory_item_id_old,
            v_wljdi_inventory_item_old,
            v_wljdi_wip_supply_type,
            v_wljdi_quantity_per_assembly,
            v_wljdi_supply_subinventory,
            v_wljdi_supply_locator_id,
            v_wljdi_mrp_net_flag,
            v_wljdi_auto_request_material,
            v_wljdi_comments,
            v_wljdi_applied_resource_units,
	    v_wljdi_cum_yield,
	    v_wljdi_rev_cum_yield
        ;
        close c_wljdi_indp;
        --EC: bug 3313463/3311695
    else
l_stmt_num := 20.2;
        --BC: bug 3313463/3311695
        open c_wljdi;
        fetch c_wljdi bulk collect into
            v_wljdi_record_id,
            v_wljdi_load_type,
            v_wljdi_substitution_type,
            v_wljdi_job_op_seq_num,
            v_wljdi_routing_op_seq_num,
            v_wljdi_next_rtg_op_seq_num,
            v_wljdi_inventory_item_id_new,
            v_wljdi_inventory_item_new,
            v_wljdi_primary_item,
            v_wljdi_primary_item_id,
            v_wljdi_src_phantom_item,
            v_wljdi_src_phantom_item_id,
            v_wljdi_component_sequence_id,
            v_wljdi_date_required,
            v_wljdi_scheduled_quantity,
            v_wljdi_required_quantity,
            v_wljdi_batch_id,
            v_wljdi_assigned_units,
            v_wljdi_instance_id_new,
            v_wljdi_op_completion_date,
            v_wljdi_op_start_date,
            v_wljdi_op_yield,
            v_wljdi_resource_code_new,
            v_wljdi_resource_id_new,
            v_wljdi_resource_seq_num,
            v_wljdi_substitute_group_num,
            v_wljdi_replacement_group_num,
            v_wljdi_serial_number_new,
            v_wljdi_start_date,
            v_wljdi_completion_date,
            /* ST : Detailed Scheduling start */
            v_wljdi_firm_type,
            v_wljdi_setup_id,
            v_wljdi_setup_code,
            v_wljdi_grp_seq_id,
            v_wljdi_grp_seq_num,
            v_wljdi_max_assg_units,
            v_wljdi_parent_seq_num,
            v_wljdi_resource_hours,
            /* ST : Detailed Scheduling end */
            /* ST : Detailed Scheduling : Considered for adding a resource */
            v_wljdi_department_id      ,
            v_wljdi_department_code        ,
            v_wljdi_activity_id        ,
            v_wljdi_standard_rate_flag     ,
            v_wljdi_usage_rate_or_amt      ,
            v_wljdi_basis_type         ,
            v_wljdi_uom_code           ,
            v_wljdi_scheduled_flag     ,
            v_wljdi_res_autocharge_type    ,
            v_wljdi_schedule_seq_num       ,

            v_wljdi_attribute_category     ,
            v_wljdi_attribute1         ,
            v_wljdi_attribute2         ,
            v_wljdi_attribute3         ,
            v_wljdi_attribute4         ,
            v_wljdi_attribute5         ,
            v_wljdi_attribute6         ,
            v_wljdi_attribute7         ,
            v_wljdi_attribute8         ,
            v_wljdi_attribute9         ,
            v_wljdi_attribute10            ,
            v_wljdi_attribute11        ,
            v_wljdi_attribute12        ,
            v_wljdi_attribute13        ,
            v_wljdi_attribute14        ,
            v_wljdi_attribute15        ,
            /* ST : Detailed Scheduling :  end adding a resource changes */
            -- Added For LBJ Interface Alcoa Enhancement
            v_wljdi_recommended,
            v_wljdi_std_op_code,
            v_wljdi_std_op_id,
            v_wljdi_op_yield_enable,
            v_wljdi_min_trf_qty,
            v_wljdi_backflush_flag,
            v_wljdi_count_point_type,
            v_wljdi_description,
            v_wljdi_inc_in_rollup,
            v_wljdi_option_dep_flag,
            v_wljdi_inventory_item_id_old,
            v_wljdi_inventory_item_old,
            v_wljdi_wip_supply_type,
            v_wljdi_quantity_per_assembly,
            v_wljdi_supply_subinventory,
            v_wljdi_supply_locator_id,
            v_wljdi_mrp_net_flag,
            v_wljdi_auto_request_material,
            v_wljdi_comments,
            v_wljdi_applied_resource_units,
	    v_wljdi_cum_yield,
	    v_wljdi_rev_cum_yield
        ;
        close c_wljdi;
        --EC: bug 3313463/3311695
    end if;

    l_d := v_wljdi_record_id.first;
    while l_d IS NOT NULL
    loop
        l_load_type      := v_wljdi_load_type(l_d);
        l_sub_type       := v_wljdi_substitution_type(l_d);
        l_rtg_op_seq_num := v_wljdi_routing_op_seq_num(l_d);
        l_job_op_seq_num := v_wljdi_job_op_seq_num(l_d);

l_stmt_num := 40;
        if (l_load_type = WSM_LOAD_RES) then            -- resource
            if (l_res_first IS NULL) then
                l_res_first := l_d;
            end if;

        elsif (l_load_type = WSM_LOAD_COMP) then        -- component
            if (l_comp_first IS NULL) then
                l_comp_first := l_d;
            end if;

        elsif (l_load_type = WSM_LOAD_OP) then          -- operation: load_type 3 and 4 are the same
            if (l_op_first IS NULL) then
                l_op_first := l_d;
            end if;
       ---Added for Alcoa Enhancement
            if (l_sub_type = WSM_SUB_ADD) then
                l_validate_network := 0;
            end if;

        elsif (l_load_type = WSM_LOAD_RES_USE) then     -- resource usage
            if (l_res_use_first IS NULL) then
                l_res_use_first := l_d;
            end if;

        elsif (l_load_type = WSM_LOAD_LINK) then        -- link: load_type must be 4 or 5
            if (l_sub_type = WSM_SUB_DIS) then
                l_with_discommand := true;
            end if;
            if (l_link_first IS NULL) then
                l_link_first := l_d;
            end if;
            -- Added For LBJ Interface Alcoa Enhancement
            l_validate_network := 0;

        elsif (l_load_type = WSM_LOAD_LINK_OP) then     -- link or operation
            if (l_op_link_first IS NULL) then
                l_op_link_first := l_d;
            end if;
            -- Added For LBJ Interface Alcoa Enhancement
            l_validate_network := 0;
        elsif (l_load_type = WSM_LOAD_RES_INS) then     -- resource instance
            if (l_res_ins_first IS NULL) then
                l_res_ins_first := l_d;
            end if;

        else
            fnd_message.set_name('WSM','WSM_INVALID_FIELD');
            fnd_message.set_token('FLD_NAME', 'Load_type');
            p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                        || fnd_message.get;
            p_error_code := -1;
            raise e_wljdi_common_error;
        end if;
        ---------------------------------------------------------------------------
        -- }} validete load_type, substitution_type combination and required fields
        ---------------------------------------------------------------------------

        l_d := v_wljdi_record_id.next(l_d);
    end loop;
    ------------------------------------------------
    -- Add Operation should precede add operation link.
    -- Added For LBJ Interface Alcoa Enhancement
    ------------------------------------------------
    if NOT(l_op_first IS NULL) then
        l_d :=l_op_first;
        while (l_d IS NOT NULL and v_wljdi_load_type(l_d) =WSM_LOAD_OP)
        loop
            if (v_wljdi_substitution_type(l_d) = WSM_SUB_ADD) then

                select scrap_account,est_absorption_account,department_code
                into l_scrap_account,l_est_absorption_account,l_department_code
                from bom_departments
                where department_id = v_wljdi_department_id(l_d)
                and organization_id = p_org_id;

                select decode(sign(min(operation_sequence_id)),-1,min(operation_sequence_id)-1,-2),
                       decode(v_wljdi_routing_op_seq_num(l_d),null,max(operation_seq_num)+g_op_seq_incr,v_wljdi_routing_op_seq_num(l_d))
                into l_op_seq_id,v_wljdi_routing_op_seq_num(l_d)
                from wsm_copy_operations
                where wip_entity_id = p_wip_entity_id
                and organization_id = p_org_id;

                if v_wljdi_recommended(l_d) is null then
                    v_wljdi_recommended(l_d) :='N';
                end if;

                if v_wljdi_scheduled_quantity(l_d) IS NOT NULL then
                    if v_wljdi_scheduled_quantity(l_d) <= 0 or v_wljdi_scheduled_quantity(l_d) > l_cur_job_qty then
                        fnd_message.set_name('WSM','WSM_NULL_FIELD');
                        fnd_message.set_token('FLD_NAME', 'scheduled_quantity');
                        p_error_msg  := fnd_message.get;
                        p_error_code := - 1;
                        raise e_wljdi_common_error;
                    end if;
                else
                    v_wljdi_scheduled_quantity(l_d) := l_cur_job_qty;
                end if;

                insert into wsm_copy_operations
                (WIP_ENTITY_ID,
                 OPERATION_SEQ_NUM,
                 RECOMMENDED,
                 RECO_PATH_SEQ_NUM,
                 NETWORK_START_END,
                 RECO_SCHEDULED_QUANTITY,
                 RECO_START_DATE,
                 RECO_COMPLETION_DATE,
                 OPERATION_SEQUENCE_ID,
                 ROUTING_SEQUENCE_ID,
                 ORGANIZATION_ID,
                 STANDARD_OPERATION_ID,
                 STANDARD_OPERATION_CODE,
                 DEPARTMENT_ID,
                 DEPARTMENT_CODE,
                 SCRAP_ACCOUNT,
                 EST_ABSORPTION_ACCOUNT,
                 OPERATION_LEAD_TIME_PERCENT,
                 MINIMUM_TRANSFER_QUANTITY,
                 COUNT_POINT_TYPE,
                 OPERATION_DESCRIPTION,
                 EFFECTIVITY_DATE,
                 DISABLE_DATE,
                 BACKFLUSH_FLAG,
                 OPTION_DEPENDENT_FLAG,
                 OPERATION_TYPE,
                 REFERENCE_FLAG,
                 YIELD,
                 CUMULATIVE_YIELD,
                 REVERSE_CUMULATIVE_YIELD,
                 LABOR_TIME_CALC,
                 MACHINE_TIME_CALC,
                 TOTAL_TIME_CALC,
                 LABOR_TIME_USER,
                 MACHINE_TIME_USER,
                 TOTAL_TIME_USER,
                 NET_PLANNING_PERCENT,
                 X_COORDINATE,
                 Y_COORDINATE,
                 INCLUDE_IN_ROLLUP,
                 OPERATION_YIELD_ENABLED,
                 OLD_OPERATION_SEQUENCE_ID,
                 ACD_TYPE,
                 REVISED_ITEM_SEQUENCE_ID,
                 CHANGE_NOTICE,
                 ECO_FOR_PRODUCTION,
                 SHUTDOWN_TYPE,
                 ACTUAL_IPK,
                 CRITICAL_TO_QUALITY,
                 VALUE_ADDED,
                 LAST_UPDATE_DATE,
                 LAST_UPDATED_BY,
                 LAST_UPDATE_LOGIN,
                 CREATION_DATE,
                 CREATED_BY,
                 REQUEST_ID,
                 PROGRAM_APPLICATION_ID,
                 PROGRAM_ID,
                 PROGRAM_UPDATE_DATE,
                 ATTRIBUTE_CATEGORY,
                 ATTRIBUTE1,
                 ATTRIBUTE2,
                 ATTRIBUTE3,
                 ATTRIBUTE4,
                 ATTRIBUTE5,
                 ATTRIBUTE6,
                 ATTRIBUTE7,
                 ATTRIBUTE8,
                 ATTRIBUTE9,
                 ATTRIBUTE10,
                 ATTRIBUTE11,
                 ATTRIBUTE12,
                 ATTRIBUTE13,
                 ATTRIBUTE14,
                 ATTRIBUTE15,
                 ORIGINAL_SYSTEM_REFERENCE)
                values
                (p_wip_entity_id,
                 v_wljdi_routing_op_seq_num(l_d),
                 v_wljdi_recommended(l_d),        --recommended
                 null,
                 null,
                 v_wljdi_scheduled_quantity(l_d), --reco_scheduled_quantity
                 v_wljdi_op_start_date(l_d),      --reco_start_date
                 v_wljdi_op_completion_date(l_d), --reco_completion_date
                 l_op_seq_id,
                 -1,
                 p_org_id,
                 v_wljdi_std_op_id(l_d),
                 v_wljdi_std_op_code(l_d),
                 v_wljdi_department_id(l_d),
                 l_department_code,
                 l_scrap_account,
                 l_est_absorption_account,
                 null,
                 v_wljdi_min_trf_qty(l_d),
                 v_wljdi_count_point_type(l_d),
                 v_wljdi_description(l_d),
                 p_creation_date,
                 null,
                 v_wljdi_backflush_flag(l_d),
                 v_wljdi_option_dep_flag(l_d),
                 1,
                 2,
                 1,
                 v_wljdi_cum_yield(l_d),
                 v_wljdi_rev_cum_yield(l_d),
                 null,
                 null,
                 null,
                 null,
                 null,
                 null,
                 null,
                 null,
                 null,
                 v_wljdi_inc_in_rollup(l_d),
                 v_wljdi_op_yield_enable(l_d),
                 null,
                 null,
                 null,
                 null,
                 null,
                 null,
                 null,
                 null,
                 null,
                 p_last_updt_date,
                 p_last_updt_by,
                 p_last_updt_login,
                 p_creation_date,
                 p_created_by,
                 p_request_id,
                 p_program_appl_id,
                 p_program_id,
                 p_prog_updt_date,
                 v_wljdi_attribute_category(l_d),
                 v_wljdi_attribute1(l_d) ,
                 v_wljdi_attribute2(l_d) ,
                 v_wljdi_attribute3(l_d) ,
                 v_wljdi_attribute4(l_d) ,
                 v_wljdi_attribute5(l_d) ,
                 v_wljdi_attribute6(l_d) ,
                 v_wljdi_attribute7(l_d) ,
                 v_wljdi_attribute8(l_d) ,
                 v_wljdi_attribute9(l_d) ,
                 v_wljdi_attribute10(l_d),
                 v_wljdi_attribute11(l_d),
                 v_wljdi_attribute12(l_d),
                 v_wljdi_attribute13(l_d),
                 v_wljdi_attribute14(l_d),
                 v_wljdi_attribute15(l_d),
                 null);

                if (v_wljdi_std_op_id(l_d) is not null) then

                    -- Validate if a resource of charge type PO_MOVE is present.
                    begin
                        l_temp :=0;
                        select 1
                        into l_temp
                        from dual
                        where exists ( SELECT 1
                                       FROM   bom_std_op_resources  bsor
                                       WHERE  bsor.standard_operation_id = v_wljdi_std_op_id(l_d)
                                       AND    bsor.autocharge_type = WIP_CONSTANTS.PO_MOVE)
                           or exists ( SELECT 1
                                       FROM   bom_std_sub_op_resources  bsor
                                       WHERE  bsor.standard_operation_id = v_wljdi_std_op_id(l_d)
                                       AND    bsor.autocharge_type = WIP_CONSTANTS.PO_MOVE);
                        if l_temp=1 then
                            fnd_message.set_name('WSM','WSM_OP_PO_MOVE');
                            p_error_msg  := fnd_message.get;
                            p_error_code := - 1;
                            raise e_wljdi_common_error;
                        end if;
                    exception
                        when no_data_found then
                            null;
                        when others then
                            fnd_message.set_name('WSM','WSM_OP_PO_MOVE');
                            p_error_msg  := fnd_message.get;
                            p_error_code := - 1;
                            raise e_wljdi_common_error;
                    end;
                    l_temp :=0;
                    -- This insert statement adds primary resources for standard operation.

                    INSERT INTO WSM_COPY_OP_RESOURCES
                    (wip_entity_id,
                     operation_seq_num,
                     resource_seq_num,
                     organization_id,
                     substitute_group_num,
                     replacement_group_num,
                     recommended,
                     reco_start_date,
                     reco_completion_date,
                     resource_id,
                     resource_code,
                     department_id,
                     phantom_flag,
                     phantom_op_seq_num,
                     phantom_item_id,
                     activity_id,
                     standard_rate_flag,
                     assigned_units,
                     max_assigned_units,
                     firm_type,
                     usage_rate_or_amount,
                     usage_rate_or_amount_inverse,
                     uom_code,
                     basis_type,
                     schedule_flag,
                     resource_offset_percent,
                     autocharge_type,
                     schedule_seq_num,
                     principle_flag,
                     setup_id,
                     change_notice,
                     acd_type,
                     last_update_date,
                     last_updated_by,
                     last_update_login,
                     creation_date,
                     created_by,
                     request_id,
                     program_application_id,
                     program_id,
                     program_update_date,
                     attribute_category,
                     attribute1,
                     attribute2,
                     attribute3,
                     attribute4,
                     attribute5,
                     attribute6,
                     attribute7,
                     attribute8,
                     attribute9,
                     attribute10,
                     attribute11,
                     attribute12,
                     attribute13,
                     attribute14,
                     attribute15,
                     original_system_reference
                    )
                    select
                     wco.wip_entity_id,
                     wco.operation_seq_num,
                     bsor.resource_seq_num,
                     wco.organization_id,
                     bsor.substitute_group_num,
                     0,                              -- repl_grp_no
                     'Y',
                     v_wljdi_op_start_date(l_d),
                     v_wljdi_op_completion_date(l_d),
                     bsor.resource_id,
                     br.resource_code,
                     v_wljdi_department_id(l_d),
                     null,
                     null,
                     null,
                     bsor.activity_id,
                     bsor.standard_rate_flag,
                     bsor.assigned_units,
                     bsor.assigned_units,
                     0,                      -- Unfirmed
                     bsor.usage_rate_or_amount,
                     bsor.usage_rate_or_amount_inverse,
                     br.unit_of_measure,
                     bsor.basis_type,
                     bsor.schedule_flag,
                     null,
                     bsor.autocharge_type,
                     null,
                     null,
                     null,
                     null,
                     null,
                     p_last_updt_date,
                     p_last_updt_by,
                     p_last_updt_login,
                     p_creation_date,
                     p_created_by,
                     p_request_id,
                     p_program_appl_id,
                     p_program_id,
                     p_prog_updt_date,
                     bsor.attribute_category,
                     bsor.attribute1,
                     bsor.attribute2,
                     bsor.attribute3,
                     bsor.attribute4,
                     bsor.attribute5,
                     bsor.attribute6,
                     bsor.attribute7,
                     bsor.attribute8,
                     bsor.attribute9,
                     bsor.attribute10,
                     bsor.attribute11,
                     bsor.attribute12,
                     bsor.attribute13,
                     bsor.attribute14,
                     bsor.attribute15,
                     null
                    from   wsm_copy_operations wco,
                           bom_resources br,
                           bom_std_op_resources bsor
                    where  bsor.standard_operation_id = v_wljdi_std_op_id(l_d)
                    and    br.resource_id = bsor.resource_id
                    and    nvl(br.disable_date, SYSDATE + 1) > SYSDATE
                    and    wco.organization_id = p_org_id
                    and    wco.wip_entity_id = p_wip_entity_id
                    and    wco.operation_seq_num = v_wljdi_routing_op_seq_num(l_d);

                    -- This insert statement adds substitute resources for standard operation.

                    INSERT INTO WSM_COPY_OP_RESOURCES
                    (wip_entity_id,
                     operation_seq_num,
                     resource_seq_num,
                     organization_id,
                     substitute_group_num,
                     replacement_group_num,
                     recommended,
                     reco_start_date,
                     reco_completion_date,
                     resource_id,
                     resource_code,
                     department_id,
                     phantom_flag,
                     phantom_op_seq_num,
                     phantom_item_id,
                     activity_id,
                     standard_rate_flag,
                     assigned_units,
                     max_assigned_units,
                     firm_type,
                     usage_rate_or_amount,
                     usage_rate_or_amount_inverse,
                     uom_code,
                     basis_type,
                     schedule_flag,
                     resource_offset_percent,
                     autocharge_type,
                     schedule_seq_num,
                     principle_flag,
                     setup_id,
                     change_notice,
                     acd_type,
                     last_update_date,
                     last_updated_by,
                     last_update_login,
                     creation_date,
                     created_by,
                     request_id,
                     program_application_id,
                     program_id,
                     program_update_date,
                     attribute_category,
                     attribute1,
                     attribute2,
                     attribute3,
                     attribute4,
                     attribute5,
                     attribute6,
                     attribute7,
                     attribute8,
                     attribute9,
                     attribute10,
                     attribute11,
                     attribute12,
                     attribute13,
                     attribute14,
                     attribute15,
                     original_system_reference
                    )
                    select
                     wco.wip_entity_id,
                     wco.operation_seq_num,
                     wcor.resource_seq_num+rownum,
                     wco.organization_id,
                     bsor.substitute_group_num,
                     bsor.replacement_group_num,
                     'N',
                     v_wljdi_op_start_date(l_d),
                     v_wljdi_op_completion_date(l_d),
                     bsor.resource_id,
                     br.resource_code,
                     v_wljdi_department_id(l_d),
                     null,
                     null,
                     null,
                     bsor.activity_id,
                     bsor.standard_rate_flag,
                     bsor.assigned_units,
                     bsor.assigned_units,
                     0,                      -- Unfirmed
                     bsor.usage_rate_or_amount,
                     bsor.usage_rate_or_amount_inverse,
                     br.unit_of_measure,
                     bsor.basis_type,
                     bsor.schedule_flag,
                     null,
                     bsor.autocharge_type,
                     bsor.schedule_seq_num,
                     null,
                     null,
                     null,
                     null,
                     p_last_updt_date,
                     p_last_updt_by,
                     p_last_updt_login,
                     p_creation_date,
                     p_created_by,
                     p_request_id,
                     p_program_appl_id,
                     p_program_id,
                     p_prog_updt_date,
                     bsor.attribute_category,
                     bsor.attribute1,
                     bsor.attribute2,
                     bsor.attribute3,
                     bsor.attribute4,
                     bsor.attribute5,
                     bsor.attribute6,
                     bsor.attribute7,
                     bsor.attribute8,
                     bsor.attribute9,
                     bsor.attribute10,
                     bsor.attribute11,
                     bsor.attribute12,
                     bsor.attribute13,
                     bsor.attribute14,
                     bsor.attribute15,
                     null
                    from   wsm_copy_operations wco,
                           bom_resources br,
                           bom_std_sub_op_resources bsor,
                           wsm_copy_op_resources wcor
                    where  bsor.standard_operation_id = v_wljdi_std_op_id(l_d)
                    and    br.resource_id = bsor.resource_id
                    and    nvl(br.disable_date, SYSDATE + 1) > SYSDATE
                    and    wco.organization_id = p_org_id
                    and    wco.wip_entity_id = p_wip_entity_id
                    and    wco.operation_seq_num = v_wljdi_routing_op_seq_num(l_d)
                    and    exists (select 1
                                   from bom_std_op_resources bsor1
                                   where bsor1.standard_operation_id = bsor.standard_operation_id
                                   and bsor1.substitute_group_num = bsor.substitute_group_num )
                    and    wcor.wip_entity_id = wco.wip_entity_id
                    and    wcor.operation_seq_num = wco.operation_seq_num
                    and    wcor.resource_seq_num = (select max(resource_seq_num)
                                                    from   wsm_copy_op_resources wcor1
                                                    where  wip_entity_id = wco.wip_entity_id
                                                    and operation_seq_num = wco.operation_seq_num);

                    -- Create default Usages for the added primary resources having schedule flag other than 'No'.
                    insert into wsm_copy_op_resource_usage
                    (wip_entity_id,
                     operation_seq_num,
                     resource_seq_num,
                     organization_id,
                     start_date,
                     completion_date,
                     assigned_units,
                     cumulative_processing_time,
                     last_update_date,
                     last_updated_by,
                     creation_date,
                     created_by,
                     last_update_login,
                     request_id,
                     program_application_id,
                     program_id,
                     program_update_date)
                    select
                     wcor.wip_entity_id,
                     wcor.operation_seq_num,
                     wcor.resource_seq_num,
                     wcor.organization_id,
                     wcor.reco_start_date,
                     wcor.reco_completion_date,
                     wcor.assigned_units,
                     to_number(round((wcor.reco_completion_date - wcor.reco_start_date)*1440)), -- Convert to Minutes.
                     p_last_updt_date,
                     p_last_updt_by,
                     p_creation_date,
                     p_created_by,
                     p_last_updt_login,
                     p_request_id,
                     p_program_appl_id,
                     p_program_id,
                     p_prog_updt_date
                    from wsm_copy_op_resources wcor
                    where wcor.organization_id = p_org_id
                    and wcor.wip_entity_id = p_wip_entity_id
                    and wcor.operation_seq_num = v_wljdi_routing_op_seq_num(l_d)
                    and wcor.recommended = 'Y'
                    and wcor.schedule_flag <> WIP_CONSTANTS.SCHED_NO;

                end if;
            end if;
            l_d := v_wljdi_record_id.next(l_d);
        end loop;
    end if;

    l_d_saved := NULL;  -- hold the first l_d for link dis/recommendation
    l_path_changed := false;
    if NOT(l_link_first IS NULL ) then
        -- delete PL/SQL table
        l_v_links.delete;
        l_v_fm_ops.delete;
        l_v_to_ops.delete;
        l_v_path_ops.delete;
        l_v_path_seq_num.delete;

        -- Added For LBJ Interface Alcoa Enhancement
        -- Added to support Add/Delete links.
        l_d := l_link_first;
        while (l_d IS NOT NULL and
               v_wljdi_load_type(l_d) =WSM_LOAD_LINK and
               v_wljdi_substitution_type(l_d) in (WSM_SUB_ADD,WSM_SUB_DEL) )
        loop
            if v_wljdi_substitution_type(l_d) = WSM_SUB_DEL then

                delete wsm_copy_op_networks
                where wip_entity_id= p_wip_entity_id
                and from_op_seq_num= v_wljdi_routing_op_seq_num(l_d)
                and to_op_seq_num =  v_wljdi_next_rtg_op_seq_num(l_d);

                if sql%notfound then
                    fnd_message.set_name('WSM','WSM_INV_DEL_LINK');
                    p_error_msg  := fnd_message.get;
                    p_error_code := - 1;
                    raise e_wljdi_common_error;
                end if;
            else   /* This is for substitution_type add. */
                begin
                    select 1 into l_link_exists
                    from wsm_copy_op_networks
                    where wip_entity_id = p_wip_entity_id and
                    from_op_seq_num = v_wljdi_routing_op_seq_num(l_d) and
                    to_op_seq_num = v_wljdi_next_rtg_op_seq_num(l_d);
                exception
                    when no_data_found then
                        l_link_exists := 0;
                    when too_many_rows then
                        fnd_message.set_name('WSM','WSM_DUP_NETWORK_LINK');
                        p_error_msg  := fnd_message.get;
                        p_error_code := - 1;
                        raise e_wljdi_common_error;
                end;

                if l_link_exists <> 0 then
                    fnd_message.set_name('WSM','WSM_DUP_NETWORK_LINK');
                    p_error_msg  := fnd_message.get;
                    p_error_code := - 1;
                    raise e_wljdi_common_error;
                end if;

                begin

                    select operation_sequence_id
                    into l_from_op_seq_id
                    from wsm_copy_operations
                    where wip_entity_id = p_wip_entity_id
                    and operation_seq_num = v_wljdi_routing_op_seq_num(l_d);

                    select operation_sequence_id
                    into l_to_op_seq_id
                    from wsm_copy_operations
                    where wip_entity_id = p_wip_entity_id
                    and operation_seq_num = v_wljdi_next_rtg_op_seq_num(l_d);

                exception
                    when no_data_found then
                        fnd_message.set_name('WSM','WSM_DUP_NETWORK_LINK');
                        p_error_msg  := fnd_message.get;
                        p_error_code := - 1;
                        raise e_wljdi_common_error;
                    when others then
                        fnd_message.set_name('WSM','WSM_INV_NETWORK_LINK');
                        p_error_msg  := fnd_message.get;
                        p_error_code := - 1;
                        raise e_wljdi_common_error;
                end;

                insert into wsm_copy_op_networks(
                 wip_entity_id,
                 from_op_seq_num,
                 to_op_seq_num,
                 from_op_seq_id,
                 to_op_seq_id,
                 recommended,
                 routing_sequence_id,
                 transition_type,
                 planning_pct,
                 last_update_date,
                 last_updated_by,
                 last_update_login,
                 creation_date,
                 created_by,
                 request_id,
                 program_application_id,
                 program_id,
                 program_update_date,
                 attribute_category,
                 attribute1,
                 attribute2,
                 attribute3,
                 attribute4,
                 attribute5,
                 attribute6,
                 attribute7,
                 attribute8,
                 attribute9,
                 attribute10,
                 attribute11,
                 attribute12,
                 attribute13,
                 attribute14,
                 attribute15,
                 original_system_reference)
                values(
                 p_wip_entity_id,
                 v_wljdi_routing_op_seq_num(l_d),
                 v_wljdi_next_rtg_op_seq_num(l_d),
                 l_from_op_seq_id,
                 l_to_op_seq_id,
                 v_wljdi_recommended(l_d),
                 -1,
                 2,
                 null,
                 p_last_updt_date,
                 p_last_updt_by,
                 p_last_updt_login,
                 p_creation_date,
                 p_created_by,
                 p_request_id,
                 p_program_appl_id,
                 p_program_id,
                 p_prog_updt_date,
                 v_wljdi_attribute_category(l_d),
                 v_wljdi_attribute1(l_d),
                 v_wljdi_attribute2(l_d),
                 v_wljdi_attribute3(l_d),
                 v_wljdi_attribute4(l_d),
                 v_wljdi_attribute5(l_d),
                 v_wljdi_attribute6(l_d),
                 v_wljdi_attribute7(l_d),
                 v_wljdi_attribute8(l_d),
                 v_wljdi_attribute9(l_d),
                 v_wljdi_attribute10(l_d),
                 v_wljdi_attribute11(l_d),
                 v_wljdi_attribute12(l_d),
                 v_wljdi_attribute13(l_d),
                 v_wljdi_attribute14(l_d),
                 v_wljdi_attribute15(l_d),
                 null
                 );
            end if;
            l_d := v_wljdi_record_id.next(l_d);
        end loop;

---Modified for Alcoa Enhancement

    ------------------------------------------------
    -- {{ validete the path when the path is changed
    ------------------------------------------------
  /*  l_d_saved := NULL;  -- hold the first l_d for link dis/recommendation
    l_path_changed := false;
    if NOT(l_link_first IS NULL and l_op_link_first IS NULL) then
        -- delete PL/SQL table
        l_v_links.delete;
        l_v_fm_ops.delete;
        l_v_to_ops.delete;
        l_v_path_ops.delete;
        l_v_path_seq_num.delete;
     if l_with_discommand then   -- {{ with discommand record(s)
l_stmt_num := 60.1;
            -- get recommended path from WCON, and saved to PL/SQL table
            open c_the_path (
                p_wip_entity_id,
                l_end_op_seq_num);
            loop
                fetch c_the_path
                into  l_fm_op,
                      l_to_op;
                exit when c_the_path%notfound;
                l_v_links(l_to_op).from_op_seq_num := l_fm_op;
                l_v_links(l_to_op).to_op_seq_num   := l_to_op;
            end loop;
            close c_the_path;

l_stmt_num := 60.2;
            -- delete discommended paths from PL/SQL table
            l_d := l_link_first;
            while (l_d IS NOT NULL and v_wljdi_load_type(l_d) =WSM_LOAD_LINK)
            loop
                if(v_wljdi_substitution_type(l_d) = WSM_SUB_DIS) then
                    if(l_d_saved IS NULL) then
                        l_d_saved := l_d;
                    end if;
                    l_fm_op := v_wljdi_routing_op_seq_num(l_d);
                    l_to_op := v_wljdi_next_rtg_op_seq_num(l_d);
                    if( l_v_links.EXISTS(l_to_op) ) then
                        if(l_v_links(l_to_op).from_op_seq_num = l_fm_op) then
                            l_v_links.delete(l_to_op);
                            l_path_changed := true;
                        else
                            raise e_invalid_discommend_path;
                        end if;
                    else
                        raise e_invalid_discommend_path;
                    end if;
                end if;
                l_d := v_wljdi_record_id.next(l_d);
            end loop;
        end if;      */               -- }} with discommand record(s)

l_stmt_num := 60.3;
        -- add recommended paths to PL/SQL table
        l_d := NVL(l_link_first, l_op_link_first);
        while (l_d IS NOT NULL and
               v_wljdi_load_type(l_d) IN (WSM_LOAD_LINK, WSM_LOAD_LINK_OP))
        loop
            l_load_type := v_wljdi_load_type(l_d);
            l_sub_type  := v_wljdi_substitution_type(l_d);
            l_fm_op     := v_wljdi_routing_op_seq_num(l_d);
            l_to_op     := v_wljdi_next_rtg_op_seq_num(l_d);

            if(l_load_type = WSM_LOAD_LINK and l_sub_type in (WSM_SUB_REC,WSM_SUB_DIS)) or
              (l_load_type = WSM_LOAD_LINK_OP and l_sub_type in (WSM_SUB_CHG, WSM_SUB_REC) and
               (l_fm_op IS NOT NULL) and (l_to_op IS NOT NULL) )
            then
               ---Modified for Alcoa Enhancement
	      /*	if(l_d_saved IS NULL) then
                    l_d_saved := l_d;
                end if;
                if( l_v_links.EXISTS(l_to_op) ) then
                    if(l_v_links(l_to_op).from_op_seq_num <> l_fm_op) then
                        raise e_invalid_recommend_path;
                    end if;
                else
                    l_v_links(l_to_op).from_op_seq_num := l_fm_op;
                    l_v_links(l_to_op).to_op_seq_num   := l_to_op;
                    l_path_changed := true;
                end if;*/
                update  wsm_copy_op_networks
                set     recommended            = decode(l_sub_type,WSM_SUB_DIS,'N',
                                                                   WSM_SUB_REC,'Y',
                                                                   WSM_SUB_CHG,'Y',recommended),
                        last_update_date       = p_last_updt_date,
                        last_updated_by        = p_last_updt_by,
                        last_update_login      = p_last_updt_login,
                        request_id             = p_request_id,
                        program_application_id = p_program_appl_id,
                        program_id             = p_program_id,
                        program_update_date    = p_prog_updt_date,
                        attribute_category = nvl(attribute_category,v_wljdi_attribute_category(l_d)),
                        attribute1 = nvl(attribute1,v_wljdi_attribute1(l_d)),
                        attribute2 = nvl(attribute2,v_wljdi_attribute2(l_d)),
                        attribute3 = nvl(attribute3,v_wljdi_attribute3(l_d)),
                        attribute4 = nvl(attribute4,v_wljdi_attribute4(l_d)),
                        attribute5 = nvl(attribute5,v_wljdi_attribute5(l_d)),
                        attribute6 = nvl(attribute6,v_wljdi_attribute6(l_d)),
                        attribute7 = nvl(attribute7,v_wljdi_attribute7(l_d)),
                        attribute8 = nvl(attribute8,v_wljdi_attribute8(l_d)),
                        attribute9 = nvl(attribute9,v_wljdi_attribute9(l_d)),
                        attribute10 = nvl(attribute10,v_wljdi_attribute10(l_d)),
                        attribute11 = nvl(attribute11,v_wljdi_attribute11(l_d)),
                        attribute12 = nvl(attribute12,v_wljdi_attribute12(l_d)),
                        attribute13 = nvl(attribute13,v_wljdi_attribute13(l_d)),
                        attribute14 = nvl(attribute14,v_wljdi_attribute14(l_d)),
                        attribute15 = nvl(attribute15,v_wljdi_attribute15(l_d))
                where   wip_entity_id   = p_wip_entity_id
                and     from_op_seq_num = l_fm_op
                and     to_op_seq_num   = l_to_op;

                if sql%notfound and l_sub_type = WSM_SUB_DIS then
                    raise e_invalid_discommend_path;
                end if;

                if sql%notfound and l_sub_type in (WSM_SUB_CHG, WSM_SUB_REC) then
                    raise e_invalid_recommend_path;
                end if;
            else
                if ( (l_fm_op IS NULL) or (l_to_op IS NULL) )then
                    fnd_message.set_name('WSM','WSM_INVALID_FIELD');
                    fnd_message.set_token('FLD_NAME', 'Routing_op_seq and Next_routing_op_seq Combination.');
                    p_error_msg  := 'WLJDI(record_id ='||v_wljdi_record_id(l_d)||') '||fnd_message.get;
                    p_error_code := - 1;
                    raise e_wljdi_common_error;
		end if;
            end if;
            l_d := v_wljdi_record_id.next(l_d);
        end loop;

l_stmt_num := 60.4;
---Modified for Alcoa Enhancement
       /* if( l_path_changed = true) then

            -- validate the paths
            validate_wljdi_path(
                p_wip_entity_id  => p_wip_entity_id,
                p_end_op_seq_num => l_end_op_seq_num,
                p_links          => l_v_links,
                x_error_code     => p_error_code,
                x_error_msg      => p_error_msg);
            if p_error_code <> 0 then
                l_d := l_d_saved;   -- l_d can be set to null
                raise e_wljdi_common_error;
            end if;
            if lbji_debug = 'Y' then
                fnd_file.put_line(fnd_file.log, 'Mark new recommended path ... OK.');
            end if;


            -- {{ Begin: Update WCO, WCON to mark the recommended operation
l_stmt_num := 70;

            l_on_reco_path := 'N';

            if(l_v_links.count = 0) then    -- Every link is discommended
                l_out := 1;
                l_v_path_ops(l_out)     := l_end_op_seq_num;
                l_v_path_seq_num(l_out) := 1;
                if( nvl(l_cur_rtg_op_seq_num, -1) = l_end_op_seq_num )
                then
                    l_on_reco_path := 'Y';
                end if;
            else
                l_in := l_end_op_seq_num;
                l_out := 1;
                while ((l_in IS NOT NULL) and (l_v_links.exists(l_in)))
                loop
                    l_v_fm_ops(l_out)   := l_v_links(l_in).from_op_seq_num;
                    l_v_to_ops(l_out)   := l_v_links(l_in).to_op_seq_num;
                    l_v_path_ops(l_out) := l_v_to_ops(l_out);
                    if( nvl(l_cur_rtg_op_seq_num, -1) = l_v_to_ops(l_out) )
                    then
                        l_on_reco_path := 'Y';
                    end if;
                    l_out := l_out + 1;
                    l_in  := l_v_links(l_in).from_op_seq_num;
                end loop;

                -- l_in is now l_v_links(last).from_op_seq_num;
                if(l_in IS NOT NULL) then
                    l_v_path_ops(l_out) := l_in;
                    if(nvl(l_cur_rtg_op_seq_num, -1) = l_in )
                    then
                        l_on_reco_path := 'Y';
                    end if;
                end if;

                -- set the l_v_path_seq_num
                for l_out in 1..l_v_path_ops.count
                loop
                    l_v_path_seq_num(l_out) := l_v_path_ops.count +1 - l_out;
                end loop;

            end if;

            -- We should mark WCON and WCO
            -- OSFM will not nullify all the dates information when the path is
            -- changed, nor will infinite scheduler be called. User can go to
            -- Lot Based Job Form to infinte schedule a job if he chooses to

l_stmt_num := 70.1;
            -- reset WCON
            update  wsm_copy_op_networks
            set     recommended            = 'N',
                    last_update_date       = p_last_updt_date,
                    last_updated_by        = p_last_updt_by,
                    last_update_login      = p_last_updt_login,
                    request_id             = p_request_id,
                    program_application_id = p_program_appl_id,
                    program_id             = p_program_id,
                    program_update_date    = p_prog_updt_date
            where   wip_entity_id = p_wip_entity_id;

l_stmt_num := 70.2;
            -- update WCON
            if(l_v_fm_ops.count <> 0) then
                forall i in l_v_fm_ops.first..l_v_fm_ops.last
                    update  wsm_copy_op_networks
                    set     recommended            = 'Y',
                            last_update_date       = p_last_updt_date,
                            last_updated_by        = p_last_updt_by,
                            last_update_login      = p_last_updt_login,
                            request_id             = p_request_id,
                            program_application_id = p_program_appl_id,
                            program_id             = p_program_id,
                            program_update_date    = p_prog_updt_date
                    where   wip_entity_id = p_wip_entity_id
                    and     from_op_seq_num = l_v_fm_ops(i)
                    and     to_op_seq_num = l_v_to_ops(i);
            end if;

l_stmt_num := 70.3;
            -- reset WCO
            update  wsm_copy_operations
            set     recommended            = 'N',
                    reco_path_seq_num      = null,
                    last_update_date       = p_last_updt_date,
                    last_updated_by        = p_last_updt_by,
                    last_update_login      = p_last_updt_login,
                    request_id             = p_request_id,
                    program_application_id = p_program_appl_id,
                    program_id             = p_program_id,
                    program_update_date    = p_prog_updt_date
            where   wip_entity_id = p_wip_entity_id;

l_stmt_num := 70.4;
            -- mark the recomended operations
            forall i in 1..l_v_path_ops.count
                update  wsm_copy_operations
                set     recommended            = 'Y',
                        reco_path_seq_num      = l_v_path_seq_num(i),
                        last_update_date       = p_last_updt_date,
                        last_updated_by        = p_last_updt_by,
                        last_update_login      = p_last_updt_login,
                        request_id             = p_request_id,
                        program_application_id = p_program_appl_id,
                        program_id             = p_program_id,
                        program_update_date    = p_prog_updt_date
                where   wip_entity_id = p_wip_entity_id
                and     operation_seq_num = l_v_path_ops(i);
            -- }} End: Update WCO, WCON to mark the recommended operation

l_stmt_num := 70.5;
            -- mark wlbj.on_rec_path flag
            update  wsm_lot_based_jobs
            set     on_rec_path = l_on_reco_path
            where   wip_entity_id = p_wip_entity_id
            and     organization_id = p_org_id;

        end if; -- if( l_path_changed = true)*/

    end if;
    ------------------------------------------------
    -- }} validete the path when the path is changed
    ------------------------------------------------
l_stmt_num := 90;

    ------------------------------------------------
    -- {{ validate Network
    -- Added For LBJ Interface Alcoa Enhancement
    ------------------------------------------------
    if l_validate_network=0 then

        l_validate_network := WSMPUTIL.validate_job_network(p_wip_entity_id => p_wip_entity_id,
                                                            x_err_code      => p_error_code,
                                                            x_err_msg       => p_error_msg);

        if l_validate_network =1 then
            raise e_wljdi_common_error;
        end if;

        -- delete PL/SQL table
        l_v_links.delete;
        l_v_fm_ops.delete;
        l_v_to_ops.delete;
        l_v_path_ops.delete;
        l_v_path_seq_num.delete;
        l_on_reco_path :='N';

        -- Update WCO based on added or deleted links.

        open c_the_path (p_wip_entity_id,
                         l_end_op_seq_num);
        loop
            fetch c_the_path into  l_fm_op,l_to_op;
            exit when c_the_path%notfound;

            l_v_links(l_to_op).from_op_seq_num := l_fm_op;
            l_v_links(l_to_op).to_op_seq_num   := l_to_op;

        end loop;
        close c_the_path;

        if(l_v_links.count = 0) then    -- Every link is discommended

            l_out := 1;
            l_v_path_ops(l_out)     := l_end_op_seq_num;
            l_v_path_seq_num(l_out) := 1;
            if( nvl(l_cur_rtg_op_seq_num, -1) = l_end_op_seq_num )
            then
                l_on_reco_path := 'Y';
            end if;

        else

            l_in := l_end_op_seq_num;
            l_out := 1;
            while ((l_in IS NOT NULL) and (l_v_links.exists(l_in)))
            loop
                l_v_fm_ops(l_out)   := l_v_links(l_in).from_op_seq_num;
                l_v_to_ops(l_out)   := l_v_links(l_in).to_op_seq_num;
                l_v_path_ops(l_out) := l_v_to_ops(l_out);
                if( nvl(l_cur_rtg_op_seq_num, -1) = l_v_to_ops(l_out) )
                then
                    l_on_reco_path := 'Y';
                end if;
                l_out := l_out + 1;
                l_in  := l_v_links(l_in).from_op_seq_num;
            end loop;

            -- l_in should have from_op of last link in recommended path when traversed from last_op.
            if(l_in IS NOT NULL) then
                l_v_path_ops(l_out) := l_in;
                if(nvl(l_cur_rtg_op_seq_num, -1) = l_in )
                then
                    l_on_reco_path := 'Y';
                end if;
            end if;

            -- set path_seq_num
            for l_out in 1..l_v_path_ops.count
            loop
                l_v_path_seq_num(l_out) := l_v_path_ops.count +1 - l_out;
            end loop;

        end if;

        -- reset WCO
        update  wsm_copy_operations
        set     recommended            = 'N',
                reco_path_seq_num      = null,
                last_update_date       = p_last_updt_date,
                last_updated_by        = p_last_updt_by,
                last_update_login      = p_last_updt_login,
                request_id             = p_request_id,
                program_application_id = p_program_appl_id,
                program_id             = p_program_id,
                program_update_date    = p_prog_updt_date
        where   wip_entity_id = p_wip_entity_id;

        -- mark the recomended operations
        forall i in 1..l_v_path_ops.count
            update  wsm_copy_operations
            set     recommended            = 'Y',
                    reco_path_seq_num      = l_v_path_seq_num(i),
                    last_update_date       = p_last_updt_date,
                    last_updated_by        = p_last_updt_by,
                    last_update_login      = p_last_updt_login,
                    request_id             = p_request_id,
                    program_application_id = p_program_appl_id,
                    program_id             = p_program_id,
                    program_update_date    = p_prog_updt_date
            where   wip_entity_id = p_wip_entity_id
            and     operation_seq_num = l_v_path_ops(i);

        -- Null out dates for non-recommended operations.
        update  wsm_copy_operations
        set     reco_start_date      = null,
                reco_completion_date = null
        where   wip_entity_id = p_wip_entity_id
        and     recommended = 'N';

        -- mark wlbj.on_rec_path flag
        update  wsm_lot_based_jobs
        set     on_rec_path = l_on_reco_path
        where   wip_entity_id = p_wip_entity_id
        and     organization_id = p_org_id;

        -- delete PL/SQL table
        l_v_links.delete;
        l_v_fm_ops.delete;
        l_v_to_ops.delete;
        l_v_path_ops.delete;
        l_v_path_seq_num.delete;
        l_on_reco_path :='N';
    end if;
    ------------------------------------------------
    -- }} validate Network
    ------------------------------------------------

l_stmt_num := 100;
    ------------------------------------------------
    -- {{ validete operation
    ------------------------------------------------
    -- for load_type 3, sub_type 3 and 4,
    -- for load_type 6, sub_type 4,
    -- will only update operation_start_date, operation_completion_date,
    -- operation_yield, scheduled_quantity

    if NOT(l_op_first IS NULL and l_op_link_first IS NULL) then
        -- clear output PL/SQL table
        l_out := 0;
        l_v_rtg_op_seq.delete;
        l_v_op_yield.delete;
        l_v_op_qty.delete;
        l_v_start_date.delete;
        l_v_compl_date.delete;
 /*Added for bugfix:7248992 */
        l_v_cum_yield.delete;
        l_v_rev_cum_yield.delete;
        l_v_attribute_category.delete;
        l_v_attribute1.delete;
        l_v_attribute2.delete;
        l_v_attribute3.delete;
        l_v_attribute4.delete;
        l_v_attribute5.delete;
        l_v_attribute6.delete;
        l_v_attribute7.delete;
        l_v_attribute8.delete;
        l_v_attribute9.delete;
        l_v_attribute10.delete;
        l_v_attribute11.delete;
        l_v_attribute12.delete;
        l_v_attribute13.delete;
        l_v_attribute14.delete;
        l_v_attribute15.delete;


        l_d := NVL(l_op_first, l_op_link_first);
        while (l_d IS NOT NULL and v_wljdi_load_type(l_d) IN (WSM_LOAD_OP, WSM_LOAD_LINK_OP))
        loop
            l_load_type     := v_wljdi_load_type(l_d);
            l_sub_type      := v_wljdi_substitution_type(l_d);
            l_rtg_op_seq_num:= v_wljdi_routing_op_seq_num(l_d);
            l_job_op_seq_num:= v_wljdi_job_op_seq_num(l_d);
            l_op_qty        := v_wljdi_scheduled_quantity(l_d);
            l_op_yield      := v_wljdi_op_yield(l_d);
            l_op_sdate      := v_wljdi_op_start_date(l_d);
            l_op_edate      := v_wljdi_op_completion_date(l_d);
            /*Added for bugfix:7248992 */
            l_cum_yield     := v_wljdi_cum_yield(l_d);
            l_rev_cum_yield := v_wljdi_rev_cum_yield(l_d);


            l_v_ops.delete;
            l_v_ops(1).job_op_seq_num     := l_job_op_seq_num;
            l_v_ops(1).rtg_op_seq_num     := l_rtg_op_seq_num;
            l_v_ops(1).scheduled_quantity := l_op_qty;
            l_v_ops(1).yield              := l_op_yield;
            l_v_ops(1).start_date         := l_op_sdate;
            l_v_ops(1).compltion_date     := l_op_edate;
            /*Added for bugfix:7248992 */
            l_v_ops(1).cumulative_yield         := l_cum_yield;
            l_v_ops(1).reverse_cumulative_yield := l_rev_cum_yield;

            -- {{ Update WIP table
 -- Added For LBJ Interface Alcoa Enhancement
            if l_sub_type not in (WSM_SUB_DEL, WSM_SUB_ADD) then
		    if(l_job_op_seq_num IS NOT NULL) then
			if(l_job_op_seq_num = l_cur_job_op_seq_num) then
	l_stmt_num := 110.1;
			    validate_wljdi_operation (
				p_wip_entity_id            => p_wip_entity_id,
				p_org_id                   => p_org_id,
				p_v_ops                    => l_v_ops,
				p_job_scheduled_start_date => l_job_start_date,
				p_job_scheduled_compl_date => l_job_compl_date,
				p_job_scheduled_qty        => l_cur_job_qty,
				p_handle_wip_cur_op        => 'Y',
				x_error_code               => p_error_code,
				x_error_msg                => p_error_msg );
			    if p_error_code <> 0 then
				raise e_wljdi_common_error;
			    end if;
	l_stmt_num := 110.2;
			    -- update WO for current operation
			    UPDATE WIP_OPERATIONS
			    set     scheduled_quantity         = NVL(l_op_qty,   scheduled_quantity),
				    first_unit_start_date      = NVL(l_op_sdate, first_unit_start_date),
				    first_unit_completion_date = NVL(l_op_edate, first_unit_completion_date),
				    last_unit_start_date       = NVL(l_op_sdate, last_unit_start_date),
				    last_unit_completion_date  = NVL(l_op_edate, last_unit_completion_date),
				    last_update_date           = p_last_updt_date,
				    last_updated_by            = p_last_updt_by,
				    last_update_login          = p_last_updt_login,
				    request_id                 = p_request_id,
				    program_application_id     = p_program_appl_id,
				    program_id                 = p_program_id,
				    program_update_date        = p_prog_updt_date,
        attribute_category = nvl(attribute_category,v_wljdi_attribute_category(l_d)),
        attribute1 = nvl(attribute1,v_wljdi_attribute1(l_d)),
        attribute2 = nvl(attribute2,v_wljdi_attribute2(l_d)),
        attribute3 = nvl(attribute3,v_wljdi_attribute3(l_d)),
        attribute4 = nvl(attribute4,v_wljdi_attribute4(l_d)),
        attribute5 = nvl(attribute5,v_wljdi_attribute5(l_d)),
        attribute6 = nvl(attribute6,v_wljdi_attribute6(l_d)),
        attribute7 = nvl(attribute7,v_wljdi_attribute7(l_d)),
        attribute8 = nvl(attribute8,v_wljdi_attribute8(l_d)),
        attribute9 = nvl(attribute9,v_wljdi_attribute9(l_d)),
        attribute10 = nvl(attribute10,v_wljdi_attribute10(l_d)),
        attribute11 = nvl(attribute11,v_wljdi_attribute11(l_d)),
        attribute12 = nvl(attribute12,v_wljdi_attribute12(l_d)),
        attribute13 = nvl(attribute13,v_wljdi_attribute13(l_d)),
        attribute14 = nvl(attribute14,v_wljdi_attribute14(l_d)),
        attribute15 = nvl(attribute15,v_wljdi_attribute15(l_d))
			    where   wip_entity_id = p_wip_entity_id
			    and     operation_seq_num = l_job_op_seq_num;

			else    -- l_job_op_seq_num <> l_cur_job_op_seq_num
			    -- this can happen when recommendations arrive after the job
			    -- is moved. should give a warning message
			    fnd_file.put_line(fnd_file.log,
				'Warning: operation recommendations for current operation are ignored ' ||
				'(record_id = ' || l_d || ')' );
			end if;

		    -- }} Update WIP table
		    -- {{ Update WSM_COPY table
		    elsif(l_rtg_op_seq_num IS NOT NULL) then
	l_stmt_num := 120;
			validate_wljdi_operation (
			    p_wip_entity_id             => p_wip_entity_id,
			    p_org_id                    => p_org_id,
			    p_v_ops                     => l_v_ops,
			    p_job_scheduled_start_date  => l_job_start_date,
			    p_job_scheduled_compl_date  => l_job_compl_date,
			    p_job_scheduled_qty         => l_cur_job_qty,
			    p_handle_wip_cur_op         => 'N',
			    x_error_code                => p_error_code,
			    x_error_msg                 => p_error_msg );
			if p_error_code <> 0 then
			    raise e_wljdi_common_error;
			end if;

			-- save validated info to an array
			l_v_rtg_op_seq(l_out) := l_rtg_op_seq_num;
			l_v_op_yield(l_out)   := l_op_yield;
			l_v_op_qty(l_out)     := l_op_qty;
			l_v_start_date(l_out) := l_op_sdate;
			l_v_compl_date(l_out) := l_op_edate;

			/*Added for bugfix:7248992 */
			l_v_cum_yield(l_out)       := l_cum_yield;
			l_v_rev_cum_yield(l_out)   := l_rev_cum_yield;
   l_v_attribute_category(l_out) :=v_wljdi_attribute_category(l_d);
   l_v_attribute1(l_out)   := v_wljdi_attribute1(l_d) ;
   l_v_attribute2(l_out)   := v_wljdi_attribute2(l_d) ;
   l_v_attribute3(l_out)   := v_wljdi_attribute3(l_d) ;
   l_v_attribute4(l_out)   := v_wljdi_attribute4(l_d) ;
   l_v_attribute5(l_out)   := v_wljdi_attribute5(l_d) ;
   l_v_attribute6(l_out)   := v_wljdi_attribute6(l_d) ;
   l_v_attribute7(l_out)   := v_wljdi_attribute7(l_d) ;
   l_v_attribute8(l_out)   := v_wljdi_attribute8(l_d) ;
   l_v_attribute9(l_out)   := v_wljdi_attribute9(l_d) ;
   l_v_attribute10(l_out) := v_wljdi_attribute10(l_d);
   l_v_attribute11(l_out) := v_wljdi_attribute11(l_d);
   l_v_attribute12(l_out) := v_wljdi_attribute12(l_d);
   l_v_attribute13(l_out) := v_wljdi_attribute13(l_d);
   l_v_attribute14(l_out) := v_wljdi_attribute14(l_d);
   l_v_attribute15(l_out) := v_wljdi_attribute15(l_d);

			IF lbji_debug = 'Y' THEN
				 fnd_file.put_line(fnd_file.log,'After validate_wljdi_operation : ' || l_stmt_num ||
						   ' Operation start date : ' || to_char(l_op_sdate,'DD-MON-YYYY HH24:MI:SS') ||
						   ' Operation end date :' || to_char(l_op_edate,'DD-MON-YYYY HH24:MI:SS'));
			END IF;
			l_out := l_out +1;
		    end if;
		    -- }} Update WSM_COPY table
            -- Added For LBJ Interface Alcoa Enhancement
            else
                if l_sub_type = WSM_SUB_DEL then
                    if l_rtg_op_seq_num is null then
                        fnd_message.set_name('WSM','WSM_NULL_FIELD');
                        fnd_message.set_token('FLD_NAME', 'Routing_op_seq_num');
                        p_error_msg := fnd_message.get;
                        p_error_code := -1;
                        raise e_wljdi_common_error;
                    else
                        -- Validate for start or end operation.
                        l_temp :=0;
                        begin
                            select 1
                            into l_temp
                            from wsm_copy_operations wco
                            where wco.wip_entity_id = p_wip_entity_id
                            and wco.organization_id = p_org_id
                            and wco.operation_seq_num = l_rtg_op_seq_num
                            and wco.network_start_end is null;
                        exception
                            when others then
                                fnd_message.set_name('WSM','WSM_NW_START_END_NO_DEL');
                                p_error_msg := fnd_message.get;
                                p_error_code := -1;
                                raise e_wljdi_common_error;
                        end;
                        -- Validate for any existing links with this operation.
                        l_temp :=0;

                        begin

                            select 1
                            into l_temp
                            from dual
                            where exists ( select 1
                                           from wsm_copy_op_networks
                                           where wip_entity_id = p_wip_entity_id
                                           and from_op_seq_num = l_rtg_op_seq_num
                                           UNION ALL
                                           select 1
                                           from wsm_copy_op_networks
                                           where wip_entity_id = p_wip_entity_id
                                           and to_op_seq_num = l_rtg_op_seq_num);

                            if l_temp=1 THEN

                                fnd_message.set_name('WSM','WSM_NET_LINK_EXIST');
                                p_error_msg := fnd_message.get;
                                p_error_code := -1;
                                raise e_wljdi_common_error;
                            end if;

                        exception
                            when no_data_found then
                                null;
                            when others then
                                fnd_message.set_name('WSM','WSM_NET_LINK_EXIST');
                                p_error_msg := fnd_message.get;
                                p_error_code := -1;
                                raise e_wljdi_common_error;
                        end;
                    end if;

                    delete from wsm_copy_operations
                    where wip_entity_id = p_wip_entity_id
                    and operation_seq_num = l_rtg_op_seq_num;

                    delete from wsm_copy_op_resources
                    where wip_entity_id = p_wip_entity_id
                    and operation_seq_num = l_rtg_op_seq_num;

                    delete from wsm_copy_op_resource_instances
                    where wip_entity_id = p_wip_entity_id
                    and operation_seq_num = l_rtg_op_seq_num;

                    delete from wsm_copy_op_resource_usage
                    where wip_entity_id = p_wip_entity_id
                    and operation_seq_num = l_rtg_op_seq_num;

                    delete from wsm_copy_requirement_ops
                    where wip_entity_id = p_wip_entity_id
                    and operation_seq_num = l_rtg_op_seq_num;

                    delete from wsm_copy_requirement_ops
                    where wip_entity_id = p_wip_entity_id
                    and operation_seq_num = (-1)*l_rtg_op_seq_num;

                end if;
            end if;
            l_d := v_wljdi_record_id.next(l_d);
            if(l_d IS NOT NULL and v_wljdi_load_type(l_d) IN (4, 5)) then
                l_d := l_op_link_first;         -- skip load_type = 4, 5
            end if;
        end loop;
        if lbji_debug = 'Y' then
            fnd_file.put_line(fnd_file.log, 'Mark recommended operations ... OK.');
        end if;

l_stmt_num := 110;
        -- Update WCO, to mark changes
        if(l_out > 0) then
            forall i in l_v_rtg_op_seq.first..l_v_rtg_op_seq.last
                UPDATE  WSM_COPY_OPERATIONS
                set     yield                   = NVL(l_v_op_yield(i), yield),
                        reco_scheduled_quantity = NVL(l_v_op_qty(i),   reco_scheduled_quantity),
                        --BC: bug 3545531 we will allow user to nullify the dates on WCO
                        --reco_start_date         = NVL(l_v_start_date(i), reco_start_date),
                        --reco_completion_date    = NVL(l_v_compl_date(i), reco_completion_date),
                        cumulative_yield        = NVL(l_v_cum_yield(i), cumulative_yield),/*Added for bugfix:7248992 */
                        reverse_cumulative_yield= NVL(l_v_rev_cum_yield(i),reverse_cumulative_yield),/*Added for bugfix:7248992 */
                        reco_start_date         = l_v_start_date(i),
                        reco_completion_date    = l_v_compl_date(i),
                        --EC: bug 3545531
                        last_update_date        = p_last_updt_date,
                        last_updated_by         = p_last_updt_by,
                        last_update_login       = p_last_updt_login,
                        request_id              = p_request_id,
                        program_application_id  = p_program_appl_id,
                        program_id              = p_program_id,
                        program_update_date     = p_prog_updt_date,
                        attribute_category = nvl(attribute_category,l_v_attribute_category(i)),
                        attribute1 = nvl(attribute1,l_v_attribute1(i)),
                        attribute2 = nvl(attribute2,l_v_attribute2(i)),
                        attribute3 = nvl(attribute3,l_v_attribute3(i)),
                        attribute4 = nvl(attribute4,l_v_attribute4(i)),
                        attribute5 = nvl(attribute5,l_v_attribute5(i)),
                        attribute6 = nvl(attribute6,l_v_attribute6(i)),
                        attribute7 = nvl(attribute7,l_v_attribute7(i)),
                        attribute8 = nvl(attribute8,l_v_attribute8(i)),
                        attribute9 = nvl(attribute9,l_v_attribute9(i)),
                        attribute10 = nvl(attribute10,l_v_attribute10(i)),
                        attribute11 = nvl(attribute11,l_v_attribute11(i)),
                        attribute12 = nvl(attribute12,l_v_attribute12(i)),
                        attribute13 = nvl(attribute13,l_v_attribute13(i)),
                        attribute14 = nvl(attribute14,l_v_attribute14(i)),
                        attribute15 = nvl(attribute15,l_v_attribute15(i))
                where   wip_entity_id = p_wip_entity_id
                and     operation_seq_num = l_v_rtg_op_seq(i);
        end if;

    end if;
    ------------------------------------------------
    -- }} validete operation
    ------------------------------------------------

l_stmt_num := 200;
    ------------------------------------------------
    -- {{ validete operation resources
    ------------------------------------------------
    if l_res_first IS NOT NULL then
        -- clear output PL/SQL table
        l_out := 0;
        l_v_rtg_op_seq.delete;
        l_v_start_date.delete;
        l_v_compl_date.delete;
        l_v_recoflag.delete;
        l_v_res_ids.delete;
        l_v_res_sub_grp.delete;
        l_v_res_rpl_grp.delete;

        /* ST : Detailed Scheduling start */
        l_v_res_seq_nums.delete;
        l_v_res_firm_type.delete;
        l_v_res_setup_id.delete;
        l_v_res_grp_seq_id.delete;
        l_v_res_grp_seq_num.delete;
        l_v_res_max_assg_units.delete;
        l_v_res_parent_seq_num.delete;
        l_v_res_batch_id.delete;
        l_v_res_assg_units.delete;

        l_v_attribute_category.delete;
        l_v_attribute1.delete;
        l_v_attribute2.delete;
        l_v_attribute3.delete;
        l_v_attribute4.delete;
        l_v_attribute5.delete;
        l_v_attribute6.delete;
        l_v_attribute7.delete;
        l_v_attribute8.delete;
        l_v_attribute9.delete;
        l_v_attribute10.delete;
        l_v_attribute11.delete;
        l_v_attribute12.delete;
        l_v_attribute13.delete;
        l_v_attribute14.delete;
        l_v_attribute15.delete;

        /* will store the recommendations..... */
        l_v_res_recom.delete;

        -- ST : Detailed Scheduling..
        -- We'll store the data here quite simple..
        -- l_v_setup_op_res_num('Y-10-10') := 'Y';
        -- l_v_setup_op_res_num('(handle_curr_op)-(Op seq Num)-(resource seq num)') := 'Y';
        -- Indicates that setup resource has been added for the
        -- resource seq num 10, operation 10 in (WIP_OPERATIONS) --> handle curr op is Y'
        l_v_setup_op_res_num.delete;
        -- ST : Detailed Scheduling...


        l_d := l_res_first;
        while (l_d IS NOT NULL and v_wljdi_load_type(l_d) = WSM_LOAD_RES)
        loop

        l_stmt_num := 201;

            l_load_type       := v_wljdi_load_type(l_d);
            l_sub_type        := v_wljdi_substitution_type(l_d);
            l_job_op_seq_num  := v_wljdi_job_op_seq_num(l_d);     -- current op only
            l_rtg_op_seq_num  := v_wljdi_routing_op_seq_num(l_d); -- future op only
            l_resource_id     := v_wljdi_resource_id_new(l_d);
            l_sub_grp_num     := v_wljdi_substitute_group_num(l_d);
            l_rpl_grp_num     := nvl(v_wljdi_replacement_group_num(l_d), 0);
            --Alcoa Enhancement
            l_applied_resource_units := v_wljdi_applied_resource_units(l_d);
            l_resource_seq_num       := v_wljdi_resource_seq_num(l_d) ;

--          Modified for Alcoa Enhancement
--            if l_sub_type = (WSM_SUB_DEL) then
--                fnd_file.put_line(fnd_file.log,
--                                'Warning: deleting resources for current operation '||
--                                'is currently not supported and ignored.' -- CZHDBG_MSG
--                                );
--            end if;
---Added for Alcoa Enhancement
               --Alcoa Enhancement Resource Start : Delete
               if l_sub_type = WSM_SUB_DEL THEN
                   if (l_job_op_seq_num IS NOT NULL) then  -- Current Operation
                       if (l_job_op_seq_num = l_cur_job_op_seq_num) THEN

                           -- pack data into PL/SQL table l_v_res for validation
                           l_v_res.delete;
                           l_v_res(l_resource_id).job_op_seq_num  := l_job_op_seq_num;
                           l_v_res(l_resource_id).resource_id     := l_resource_id;
                           l_v_res(l_resource_id).sub_grp_num     := l_sub_grp_num;
                           l_v_res(l_resource_id).rpl_grp_num     := l_rpl_grp_num;
                           l_v_res(l_resource_id).start_date      := v_wljdi_start_date(l_d);
                           l_v_res(l_resource_id).completion_date := v_wljdi_completion_date(l_d);

                            /* ST : Detailed Scheduling start */
                           l_v_res(l_resource_id).res_seq_num     := v_wljdi_resource_seq_num(l_d);
                           l_v_res(l_resource_id).firm_type       := v_wljdi_firm_type(l_d);
                           l_v_res(l_resource_id).setup_id        := v_wljdi_setup_id(l_d);
                           l_v_res(l_resource_id).grp_seq_id      := v_wljdi_grp_seq_id(l_d);
                           l_v_res(l_resource_id).grp_seq_num     := v_wljdi_grp_seq_num(l_d);
                           l_v_res(l_resource_id).max_assg_units  := v_wljdi_max_assg_units(l_d);
                           l_v_res(l_resource_id).parent_seq_num  := v_wljdi_parent_seq_num(l_d);
                           l_v_res(l_resource_id).batch_id        := v_wljdi_batch_id(l_d);
                           l_v_res(l_resource_id).assigned_units  := v_wljdi_assigned_units(l_d);
                           l_v_res(l_resource_id).applied_resource_units  := v_wljdi_applied_resource_units(l_d);

                           /* ST : Detailed Scheduling end */

                           validate_wljdi_op_resource(
                                   p_wip_entity_id     => p_wip_entity_id,
                                   p_org_id            => p_org_id,
                                   p_v_res             => l_v_res,
                                   p_handle_wip_cur_op => 'Y',
                                   p_substitution_type => l_sub_type,
                                   x_error_code        => p_error_code,
                                   x_error_msg         => p_error_msg );

                           if p_error_code <> 0 then
                               raise e_wljdi_common_error;
                           end if;

                           delete from wip_operation_resources wor
                           where  wor.wip_entity_id     = p_wip_entity_id
                           and    wor.operation_seq_num = l_job_op_seq_num
                           and    wor.resource_seq_num  = l_resource_seq_num
                           and    wor.organization_id   = p_org_id;

                           delete from wip_sub_operation_resources wsor
                           where  wsor.wip_entity_id     = p_wip_entity_id
                           and    wsor.operation_seq_num = l_job_op_seq_num
                           and    wsor.resource_seq_num  = l_resource_seq_num
                           and    wsor.organization_id   = p_org_id;

                           delete from wip_op_resource_instances wori
                           where  wori.wip_entity_id     = p_wip_entity_id
                           and    wori.operation_seq_num = l_job_op_seq_num
                           and    wori.resource_seq_num  = l_resource_seq_num
                           and    wori.organization_id   = p_org_id;

                           delete from wip_operation_resource_usage woru
                           where  woru.wip_entity_id     = p_wip_entity_id
                           and    woru.operation_seq_num = l_job_op_seq_num
                           and    woru.resource_seq_num  = l_resource_seq_num
                           and    woru.organization_id   = p_org_id;

                           delete_setup_info( p_wip_entity_id     => p_wip_entity_id,
                                              p_org_id            => p_org_id,
                                              p_par_res_seq_num   => l_resource_seq_num,
                                              p_op_seq_num        => l_job_op_seq_num,
                                              p_handle_curr_op    => 'Y',
                                              x_error_code        => p_error_code,
                                              x_error_msg         => p_error_msg);

                           /* Need to verify if primary resources in a substitution group are completely deleted,
                              substitute resources in the same substitution group should also be deleted as they will
                              be orphaned records.*/

                           if p_error_code <> 0 then
                               raise e_wljdi_common_error;
                           end if;

                      else
                          fnd_file.put_line(fnd_file.log,
                          'Warning: Deleting or Adding resources for executed operations '||
                          'are currently not supported and ignored.');
                      end if;
                   elsif(l_rtg_op_seq_num IS NOT NULL) then  -- Future operation

                       -- pack data into PL/SQL table l_v_res for validation
                       l_v_res.delete;
                       l_v_res(l_resource_id).rtg_op_seq_num  := l_rtg_op_seq_num;
                       l_v_res(l_resource_id).resource_id     := l_resource_id;
                       l_v_res(l_resource_id).sub_grp_num     := l_sub_grp_num;
                       l_v_res(l_resource_id).rpl_grp_num     := l_rpl_grp_num;
                       l_v_res(l_resource_id).start_date      := v_wljdi_start_date(l_d);
                       l_v_res(l_resource_id).completion_date := v_wljdi_completion_date(l_d);
                        /* ST : Detailed Scheduling start */
                       l_v_res(l_resource_id).res_seq_num     := v_wljdi_resource_seq_num(l_d);
                       l_v_res(l_resource_id).firm_type       := v_wljdi_firm_type(l_d);
                       l_v_res(l_resource_id).setup_id        := v_wljdi_setup_id(l_d);
                       l_v_res(l_resource_id).grp_seq_id      := v_wljdi_grp_seq_id(l_d);
                       l_v_res(l_resource_id).grp_seq_num     := v_wljdi_grp_seq_num(l_d);
                       l_v_res(l_resource_id).max_assg_units  := v_wljdi_max_assg_units(l_d);
                       l_v_res(l_resource_id).parent_seq_num  := v_wljdi_parent_seq_num(l_d);
                       l_v_res(l_resource_id).batch_id        := v_wljdi_batch_id(l_d);
                       l_v_res(l_resource_id).assigned_units  := v_wljdi_assigned_units(l_d);
                       l_v_res(l_resource_id).applied_resource_units  := v_wljdi_applied_resource_units(l_d);

                       /* ST : Detailed Scheduling end */

                       validate_wljdi_op_resource(
                             p_wip_entity_id     => p_wip_entity_id,
                             p_org_id            => p_org_id,
                             p_v_res             => l_v_res,
                             p_handle_wip_cur_op => 'N',
                             p_substitution_type => l_sub_type,
                             x_error_code        => p_error_code,
                             x_error_msg         => p_error_msg );

                       if p_error_code <> 0 then
                         raise e_wljdi_common_error;
                       end if;

                       delete from wsm_copy_op_resource_usage wcoru
                       where  wcoru.wip_entity_id     = p_wip_entity_id
                       and    wcoru.operation_seq_num = l_rtg_op_seq_num
                       and    wcoru.resource_seq_num  = l_resource_seq_num
                       and    wcoru.organization_id   = p_org_id ;

                       delete from wsm_copy_op_resources wcor
                       where  wcor.wip_entity_id      = p_wip_entity_id
                       and    wcor.operation_seq_num  = l_rtg_op_seq_num
                       and    wcor.resource_seq_num   = l_resource_seq_num
                       and    wcor.organization_id    = p_org_id;

                       delete from wsm_copy_op_resource_instances wcori
                       where  wcori.wip_entity_id      = p_wip_entity_id
                       and    wcori.operation_seq_num  = l_rtg_op_seq_num
                       and    wcori.resource_seq_num   = l_resource_seq_num
                       and    wcori.organization_id    = p_org_id;

                       delete_setup_info( p_wip_entity_id     => p_wip_entity_id,
                                          p_org_id            => p_org_id,
                                          p_par_res_seq_num   => l_resource_seq_num,
                                          p_op_seq_num        => l_rtg_op_seq_num,
                                          p_handle_curr_op    => 'N',
                                          x_error_code        => p_error_code,
                                          x_error_msg         => p_error_msg);

                       if p_error_code <> 0 then
                           raise e_wljdi_common_error;
                       end if;

                   end if;

               end if;
 --Alcoa Enhancement Resource End : Delete

               --Alcoa Enhancement Resource Start : Add
               if l_sub_type  = (WSM_SUB_ADD) and v_wljdi_parent_seq_num(l_d) IS NULL THEN
l_stmt_num := 201;
                   if (l_job_op_seq_num IS NOT NULL) then  -- Current Operation
                       l_v_res.delete;
                       if (l_job_op_seq_num = l_cur_job_op_seq_num) then

                           l_v_res(l_resource_id).job_op_seq_num  := l_job_op_seq_num;
                           l_v_res(l_resource_id).resource_id     := l_resource_id;
                           l_v_res(l_resource_id).sub_grp_num     := l_sub_grp_num;
                           l_v_res(l_resource_id).rpl_grp_num     := l_rpl_grp_num;
                           l_v_res(l_resource_id).start_date      := v_wljdi_start_date(l_d);
                           l_v_res(l_resource_id).completion_date := v_wljdi_completion_date(l_d);

                            /* ST : Detailed Scheduling start */
                           l_v_res(l_resource_id).res_seq_num     := v_wljdi_resource_seq_num(l_d);
                           l_v_res(l_resource_id).firm_type       := v_wljdi_firm_type(l_d);
                           l_v_res(l_resource_id).setup_id        := v_wljdi_setup_id(l_d);
                           l_v_res(l_resource_id).grp_seq_id      := v_wljdi_grp_seq_id(l_d);
                           l_v_res(l_resource_id).grp_seq_num     := v_wljdi_grp_seq_num(l_d);
                           l_v_res(l_resource_id).max_assg_units  := v_wljdi_max_assg_units(l_d);
                           l_v_res(l_resource_id).parent_seq_num  := v_wljdi_parent_seq_num(l_d);
                           l_v_res(l_resource_id).batch_id        := v_wljdi_batch_id(l_d);
                           l_v_res(l_resource_id).assigned_units  := v_wljdi_assigned_units(l_d);
                           l_v_res(l_resource_id).applied_resource_units  := v_wljdi_applied_resource_units(l_d);
                           l_v_res(l_resource_id).uom_code         := v_wljdi_uom_code(l_d);
                           l_v_res(l_resource_id).autocharge_type  := v_wljdi_res_autocharge_type(l_d);
                           l_v_res(l_resource_id).usage_rate_or_amount :=v_wljdi_usage_rate_or_amt(l_d);
                           l_v_res(l_resource_id).scheduled_flag       := v_wljdi_scheduled_flag(l_d);
                           l_v_res(l_resource_id).reco_flag            := v_wljdi_recommended(l_d);
                           l_v_res(l_resource_id).basis_type            := v_wljdi_basis_type(l_d);
                           l_v_res(l_resource_id).res_seq_num     := v_wljdi_resource_seq_num(l_d);

                           validate_wljdi_op_resource(
                                   p_wip_entity_id     => p_wip_entity_id,
                                   p_org_id            => p_org_id,
                                   p_v_res             => l_v_res,
                                   p_handle_wip_cur_op => 'Y',
                                   p_substitution_type => l_sub_type,
                                   x_error_code        => p_error_code,
                                   x_error_msg         => p_error_msg );

                           if p_error_code <> 0 then
                               raise e_wljdi_common_error;
                           end if;

                           IF l_v_res(l_resource_id).reco_flag = 'Y' then

                               insert into wip_operation_resources
                               (wip_entity_id,
                                operation_seq_num,
                                resource_seq_num,
                                organization_id,
                                department_id,
                                resource_id,
                                uom_code,
                                basis_type,
                                usage_rate_or_amount,
                                activity_id,
                                scheduled_flag,
                                assigned_units,
                                maximum_assigned_units,
                                batch_id,
                                firm_flag,
                                group_sequence_id,
                                group_sequence_number,
                                parent_resource_seq,
                                autocharge_type,
                                standard_rate_flag,
                                applied_resource_units,
                                applied_resource_value,
                                start_date,
                                completion_date,
                                attribute_category,
                                attribute1,
                                attribute2,
                                attribute3,
                                attribute4,
                                attribute5,
                                attribute6,
                                attribute7,
                                attribute8,
                                attribute9,
                                attribute10,
                                attribute11,
                                attribute12,
                                attribute13,
                                attribute14,
                                attribute15,
                                schedule_seq_num,
                                substitute_group_num,
                                replacement_group_num,
                                setup_id,
                                last_update_date,
                                last_updated_by,
                                creation_date,
                                created_by,
                                last_update_login,
                                request_id,
                                program_application_id,
                                program_id,
                                program_update_date
                               )
                               values
                               (p_wip_entity_id,
                                l_job_op_seq_num,
                                l_v_res(l_resource_id).res_seq_num,
                                p_org_id,
                                v_wljdi_department_id(l_d),
                                v_wljdi_resource_id_new(l_d),
                                l_v_res(l_resource_id).uom_code,
                                l_v_res(l_resource_id).basis_type,
                                v_wljdi_usage_rate_or_amt(l_d),
                                l_v_res(l_resource_id).activity_id,
                                l_v_res(l_resource_id).scheduled_flag,
                                v_wljdi_assigned_units(l_d),
                                l_v_res(l_resource_id).max_assg_units,
                                v_wljdi_batch_id(l_d),
                                l_v_res(l_resource_id).firm_type,
                                v_wljdi_grp_seq_id(l_d),
                                v_wljdi_grp_seq_num(l_d),
                                null,
                                l_v_res(l_resource_id).autocharge_type,
                                l_v_res(l_resource_id).standard_rate,
                                0,
                                0,
                                l_v_res(l_resource_id).start_date,
                                l_v_res(l_resource_id).completion_date,
                                v_wljdi_attribute_category(l_d),
                                v_wljdi_attribute1(l_d),
                                v_wljdi_attribute2(l_d),
                                v_wljdi_attribute3(l_d),
                                v_wljdi_attribute4(l_d),
                                v_wljdi_attribute5(l_d),
                                v_wljdi_attribute6(l_d),
                                v_wljdi_attribute7(l_d),
                                v_wljdi_attribute8(l_d),
                                v_wljdi_attribute9(l_d),
                                v_wljdi_attribute10(l_d),
                                v_wljdi_attribute11(l_d),
                                v_wljdi_attribute12(l_d),
                                v_wljdi_attribute13(l_d),
                                v_wljdi_attribute14(l_d),
                                v_wljdi_attribute15(l_d),
                                v_wljdi_schedule_seq_num(l_d),
                                v_wljdi_substitute_group_num(l_d),
                                l_v_res(l_resource_id).rpl_grp_num,
                                l_v_res(l_resource_id).setup_id,
                                p_last_updt_date,
                                p_last_updt_by,
                                p_creation_date,
                                p_created_by,
                                p_last_updt_login,
                                p_request_id,
                                p_program_appl_id,
                                p_program_id,
                                p_prog_updt_date);

                                -- If resource is PO_RECIPT, we should create requisition.
                                if l_v_res(l_resource_id).autocharge_type = WIP_CONSTANTS.PO_RECEIPT then

                                    wip_osp.create_requisition(
                                       p_wip_entity_id          => p_wip_entity_id,
                                       p_organization_id        => p_org_id,
                                       p_repetitive_schedule_id => null,
                                       p_operation_seq_num      => l_job_op_seq_num,
                                       p_resource_seq_num       => l_v_res(l_resource_id).res_seq_num,
                                       p_run_reqimport          => wip_constants.no);

                                    g_num_of_osp_exists := nvl(g_num_of_osp_exists,0) + 1;

                                end if;
                           ELSE
                               insert into wip_sub_operation_resources
                               (wip_entity_id,
                                operation_seq_num,
                                resource_seq_num,
                                organization_id,
                                department_id,
                                last_update_date,
                                last_updated_by,
                                creation_date,
                                created_by,
                                last_update_login,
                                resource_id,
                                uom_code,
                                basis_type,
                                usage_rate_or_amount,
                                activity_id,
                                scheduled_flag,
                                assigned_units,
                                maximum_assigned_units,
                                autocharge_type,
                                standard_rate_flag,
                                applied_resource_units,
                                applied_resource_value,
                                attribute_category,
                                attribute1,
                                attribute2,
                                attribute3,
                                attribute4,
                                attribute5,
                                attribute6,
                                attribute7,
                                attribute8,
                                attribute9,
                                attribute10,
                                attribute11,
                                attribute12,
                                attribute13,
                                attribute14,
                                attribute15,
                                completion_date,
                                start_date,
                                schedule_seq_num,
                                substitute_group_num,
                                replacement_group_num,
                                setup_id,
                                request_id,
                                program_application_id,
                                program_id,
                                program_update_date
                                )
                               values
                               (p_wip_entity_id,
                                l_job_op_seq_num,
                                l_v_res(l_resource_id).res_seq_num,
                                p_org_id,
                                v_wljdi_department_id(l_d),
                                p_last_updt_date,
                                p_last_updt_by,
                                p_creation_date,
                                p_created_by,
                                p_last_updt_login,
                                v_wljdi_resource_id_new(l_d),
                                l_v_res(l_resource_id).uom_code,
                                l_v_res(l_resource_id).basis_type,
                                v_wljdi_usage_rate_or_amt(l_d),
                                l_v_res(l_resource_id).activity_id,
                                l_v_res(l_resource_id).scheduled_flag,
                                v_wljdi_assigned_units(l_d),
                                l_v_res(l_resource_id).max_assg_units,
                                l_v_res(l_resource_id).autocharge_type,
                                l_v_res(l_resource_id).standard_rate,
                                0,
                                0,
                                v_wljdi_attribute_category(l_d),
                                v_wljdi_attribute1(l_d),
                                v_wljdi_attribute2(l_d),
                                v_wljdi_attribute3(l_d),
                                v_wljdi_attribute4(l_d),
                                v_wljdi_attribute5(l_d),
                                v_wljdi_attribute6(l_d),
                                v_wljdi_attribute7(l_d),
                                v_wljdi_attribute8(l_d),
                                v_wljdi_attribute9(l_d),
                                v_wljdi_attribute10(l_d),
                                v_wljdi_attribute11(l_d),
                                v_wljdi_attribute12(l_d),
                                v_wljdi_attribute13(l_d),
                                v_wljdi_attribute14(l_d),
                                v_wljdi_attribute15(l_d),
                                l_v_res(l_resource_id).start_date,
                                l_v_res(l_resource_id).completion_date,
                                v_wljdi_schedule_seq_num(l_d),
                                v_wljdi_substitute_group_num(l_d),
                                l_v_res(l_resource_id).rpl_grp_num,
                                l_v_res(l_resource_id).setup_id,
                                p_request_id,
                                p_program_appl_id,
                                p_program_id,
                                p_prog_updt_date);
                          END IF;

                          if l_v_res(l_resource_id).scheduled_flag <> WIP_CONSTANTS.SCHED_NO and
                             l_v_res(l_resource_id).reco_flag = 'Y' then

                              insert into wip_operation_resource_usage
                              (wip_entity_id,
                               operation_seq_num,
                               resource_seq_num,
                               organization_id,
                               start_date,
                               completion_date,
                               assigned_units,
                               last_update_date,
                               last_updated_by,
                               creation_date,
                               created_by,
                               last_update_login,
                               request_id,
                               program_application_id,
                               program_id,
                               program_update_date,
                               cumulative_processing_time)
                              values
                              (p_wip_entity_id,
                               l_job_op_seq_num,
                               l_v_res(l_resource_id).res_seq_num,
                               p_org_id,
                               l_v_res(l_resource_id).start_date,
                               l_v_res(l_resource_id).completion_date,
                               v_wljdi_assigned_units(l_d),
                               p_last_updt_date,
                               p_last_updt_by,
                               p_creation_date,
                               p_created_by,
                               p_last_updt_login,
                               p_request_id,
                               p_program_appl_id,
                               p_program_id,
                               p_prog_updt_date,
                               to_number(round((l_v_res(l_resource_id).completion_date - l_v_res(l_resource_id).start_date)*1440)));
                           end if;
                      else
                          fnd_file.put_line(fnd_file.log,
                                 'Warning: Deleting or Adding resources for executed operations '||
                                 'is currently not supported and ignored.');
                      END if;
                  ELSIF(l_rtg_op_seq_num IS NOT NULL) THEN

                      l_v_res.delete;
                      l_v_res(l_resource_id).rtg_op_seq_num  := l_rtg_op_seq_num;
                      l_v_res(l_resource_id).resource_id     := l_resource_id;
                      l_v_res(l_resource_id).sub_grp_num     := l_sub_grp_num;
                      l_v_res(l_resource_id).rpl_grp_num     := l_rpl_grp_num;
                      l_v_res(l_resource_id).start_date      := v_wljdi_start_date(l_d);
                      l_v_res(l_resource_id).completion_date := v_wljdi_completion_date(l_d);

                       /* ST : Detailed Scheduling start */
                      l_v_res(l_resource_id).res_seq_num     := v_wljdi_resource_seq_num(l_d);
                      l_v_res(l_resource_id).firm_type       := v_wljdi_firm_type(l_d);
                      l_v_res(l_resource_id).setup_id        := v_wljdi_setup_id(l_d);
                      l_v_res(l_resource_id).grp_seq_id      := v_wljdi_grp_seq_id(l_d);
                      l_v_res(l_resource_id).grp_seq_num     := v_wljdi_grp_seq_num(l_d);
                      l_v_res(l_resource_id).max_assg_units  := v_wljdi_max_assg_units(l_d);
                      l_v_res(l_resource_id).parent_seq_num  := v_wljdi_parent_seq_num(l_d);
                      l_v_res(l_resource_id).batch_id        := v_wljdi_batch_id(l_d);
                      l_v_res(l_resource_id).assigned_units  := v_wljdi_assigned_units(l_d);
                      l_v_res(l_resource_id).applied_resource_units  := v_wljdi_applied_resource_units(l_d);
                      l_v_res(l_resource_id).uom_code         := v_wljdi_uom_code(l_d);
                      l_v_res(l_resource_id).autocharge_type  := v_wljdi_res_autocharge_type(l_d);
                      l_v_res(l_resource_id).usage_rate_or_amount :=v_wljdi_usage_rate_or_amt(l_d);
                      l_v_res(l_resource_id).scheduled_flag := v_wljdi_scheduled_flag(l_d);
                      l_v_res(l_resource_id).reco_flag      := v_wljdi_recommended(l_d);
                      l_v_res(l_resource_id).resource_code  := v_wljdi_resource_code_new(l_d);
                      l_v_res(l_resource_id).basis_type     := v_wljdi_basis_type(l_d);
                      l_v_res(l_resource_id).res_seq_num     := v_wljdi_resource_seq_num(l_d);

                      validate_wljdi_op_resource(
                              p_wip_entity_id     => p_wip_entity_id,
                              p_org_id            => p_org_id,
                              p_v_res             => l_v_res,
                              p_handle_wip_cur_op => 'N',
                              p_substitution_type => l_sub_type,
                              x_error_code        => p_error_code,
                              x_error_msg         => p_error_msg );

                      if p_error_code <> 0 then
                          raise e_wljdi_common_error;
                      end if;

                      INSERT INTO WSM_COPY_OP_RESOURCES
                      (wip_entity_id,
                       operation_seq_num,
                       resource_seq_num,
                       organization_id,
                       substitute_group_num,
                       replacement_group_num,
                       recommended,
                       reco_start_date,
                       reco_completion_date,
                       resource_id,
                       resource_code,
                       department_id,
                       phantom_flag,
                       phantom_op_seq_num,
                       phantom_item_id,
                       activity_id,
                       standard_rate_flag,
                       assigned_units,
                       max_assigned_units,
                       firm_type,
                       usage_rate_or_amount,
                       usage_rate_or_amount_inverse,
                       uom_code,
                       basis_type,
                       schedule_flag,
                       resource_offset_percent,
                       autocharge_type,
                       schedule_seq_num,
                       principle_flag,
                       setup_id,
                       change_notice,
                       acd_type,
                       last_update_date,
                       last_updated_by,
                       last_update_login,
                       creation_date,
                       created_by,
                       request_id,
                       program_application_id,
                       program_id,
                       program_update_date,
                       attribute_category,
                       attribute1,
                       attribute2,
                       attribute3,
                       attribute4,
                       attribute5,
                       attribute6,
                       attribute7,
                       attribute8,
                       attribute9,
                       attribute10,
                       attribute11,
                       attribute12,
                       attribute13,
                       attribute14,
                       attribute15,
                       original_system_reference
                       )
                       values
                       (p_wip_entity_id,
                        l_rtg_op_seq_num,
                        l_v_res(l_resource_id).res_seq_num,
                        p_org_id,
                        v_wljdi_substitute_group_num(l_d),
                        nvl(v_wljdi_replacement_group_num(l_d),0),
                        l_v_res(l_resource_id).reco_flag,
                        l_v_res(l_resource_id).start_date,
                        l_v_res(l_resource_id).completion_date,
                        v_wljdi_resource_id_new(l_d),
                        l_v_res(l_resource_id).resource_code,
                        v_wljdi_department_id(l_d),
                        null,
                        null,
                        null,
                        l_v_res(l_resource_id).activity_id,
                        l_v_res(l_resource_id).standard_rate,
                        v_wljdi_assigned_units(l_d),
                        l_v_res(l_resource_id).max_assg_units,
                        l_v_res(l_resource_id).firm_type,
                        v_wljdi_usage_rate_or_amt(l_d),
                        1/v_wljdi_usage_rate_or_amt(l_d),
                        l_v_res(l_resource_id).uom_code,
                        l_v_res(l_resource_id).basis_type,
                        l_v_res(l_resource_id).scheduled_flag,
                        null,
                        l_v_res(l_resource_id).autocharge_type,
                        v_wljdi_schedule_seq_num(l_d),
                        null,
                        l_v_res(l_resource_id).setup_id,
                        null,
                        null,
                        p_last_updt_date,
                        p_last_updt_by,
                        p_last_updt_login,
                        p_creation_date,
                        p_created_by,
                        p_request_id,
                        p_program_appl_id,
                        p_program_id,
                        p_prog_updt_date,
                        v_wljdi_attribute_category(l_d),
                        v_wljdi_attribute1(l_d),
                        v_wljdi_attribute2(l_d),
                        v_wljdi_attribute3(l_d),
                        v_wljdi_attribute4(l_d),
                        v_wljdi_attribute5(l_d),
                        v_wljdi_attribute6(l_d),
                        v_wljdi_attribute7(l_d),
                        v_wljdi_attribute8(l_d),
                        v_wljdi_attribute9(l_d),
                        v_wljdi_attribute10(l_d),
                        v_wljdi_attribute11(l_d),
                        v_wljdi_attribute12(l_d),
                        v_wljdi_attribute13(l_d),
                        v_wljdi_attribute14(l_d),
                        v_wljdi_attribute15(l_d),
                        null);

                        if l_v_res(l_resource_id).reco_flag='Y' and
                           l_v_res(l_resource_id).scheduled_flag <> WIP_CONSTANTS.SCHED_NO then

                            insert into wsm_copy_op_resource_usage
                            (wip_entity_id,
                             operation_seq_num,
                             resource_seq_num,
                             organization_id,
                             start_date,
                             completion_date,
                             assigned_units,
                             cumulative_processing_time,
                             last_update_date,
                             last_updated_by,
                             creation_date,
                             created_by,
                             last_update_login,
                             request_id,
                             program_application_id,
                             program_id,
                             program_update_date)
                            values
                            (p_wip_entity_id,
                            l_rtg_op_seq_num,
                            l_v_res(l_resource_id).res_seq_num,
                            p_org_id,
                            l_v_res(l_resource_id).start_date,
                            l_v_res(l_resource_id).completion_date,
                            v_wljdi_assigned_units(l_d),
                            to_number(round((l_v_res(l_resource_id).completion_date - l_v_res(l_resource_id).start_date)*1440)),
                            p_last_updt_date,
                            p_last_updt_by,
                            p_creation_date,
                            p_created_by,
                            p_last_updt_login,
                            p_request_id,
                            p_program_appl_id,
                            p_program_id,
                            p_prog_updt_date);

                       end if;

                   END if; --l_job_op_seq_num not null
               END if; --wsm_sub_add
               --Alcoa Enhancement Resource End : Add

            -- can only a setup resource..
            if l_sub_type  = (WSM_SUB_ADD) and v_wljdi_parent_seq_num(l_d) IS NOT NULL then

                /* This is primarily used to delete both the resource and its setup from the v_wldji... so that the Adding is once for the resource and
                its setup resource
                ... */

                l_stmt_num := 202;

                p_error_code := 0;
                p_error_msg  := null;

                l_temp_par_res_seq := v_wljdi_parent_seq_num(l_d);

                add_resource (p_wip_entity_id       => p_wip_entity_id,
                              p_org_id              => p_org_id,
                              p_job_op_seq_num      => l_job_op_seq_num,
                              p_cur_job_op_seq_num  => l_cur_job_op_seq_num,
                              p_rtg_op_seq_num      => l_rtg_op_seq_num,
                              p_load_type           => l_load_type,
                              p_sub_type            => l_sub_type,
                              p_res_recom           => l_v_res_recom,
                              p_last_updt_date      => p_last_updt_date,
                              p_last_updt_by        => p_last_updt_by,
                              p_creation_date       => p_creation_date,
                              p_created_by          => p_created_by,
                              p_last_updt_login     => p_last_updt_login,
                              p_request_id          => p_request_id,
                              p_program_appl_id     => p_program_appl_id,
                              p_program_id          => p_program_id,
                              p_prog_updt_date      => p_prog_updt_date,
                              p_global_index        => l_d,
                              x_error_code          => p_error_code,
                              x_error_msg           => p_error_msg
                             );

                l_stmt_num := 203;

                if p_error_code <> 0 then
                        raise e_wljdi_common_error;
                end if;

                -- ST : Detailed Scheduling ...
                -- If setup resources are added for a resource, keep track of it..
                IF l_job_op_seq_num IS NOT NULL THEN

                        -- Added to WIP Operations...
                        fnd_file.put_line(fnd_file.log,'Adding : ' || 'Y'||'-'||l_job_op_seq_num||'-'||l_temp_par_res_seq);
                        l_v_setup_op_res_num('Y'||'-'||l_job_op_seq_num||'-'||l_temp_par_res_seq) := 'Y';

                ELSIF l_rtg_op_seq_num IS NOT NULL THEN

                        fnd_file.put_line(fnd_file.log,'Adding : ' || 'N'||'-'||l_rtg_op_seq_num||'-'||l_temp_par_res_seq);
                        l_v_setup_op_res_num('N'||'-'||l_rtg_op_seq_num||'-'||l_temp_par_res_seq) := 'Y';

                END IF;

                l_stmt_num := 204;
--        Modified for Alcoa Enhancement
--        elsif l_sub_type  = (WSM_SUB_ADD) and v_wljdi_parent_seq_num(l_d) IS NULL then
--                fnd_file.put_line(fnd_file.log,
--                                'Warning: Add a runtime resources is currently not supported and ignored.' -- CZHDBG_MSG
--                                 );
--
--                l_d := v_wljdi_record_id.next(l_d);

        elsif l_sub_type in (WSM_SUB_CHG, WSM_SUB_REC) then
                -- {{ Update WIP table
                if(l_job_op_seq_num IS NOT NULL) then

                    if(l_job_op_seq_num = l_cur_job_op_seq_num) then
l_stmt_num := 250.1;
                        -- pack data into PL/SQL table l_v_res for validation
                        l_v_res.delete;
                        l_v_res(l_resource_id).job_op_seq_num  := l_job_op_seq_num;
                        l_v_res(l_resource_id).resource_id     := l_resource_id;
                        l_v_res(l_resource_id).sub_grp_num     := l_sub_grp_num;
                        l_v_res(l_resource_id).rpl_grp_num     := l_rpl_grp_num;
                        l_v_res(l_resource_id).start_date      := v_wljdi_start_date(l_d);
                        l_v_res(l_resource_id).completion_date := v_wljdi_completion_date(l_d);

                        /* ST : Detailed Scheduling start */
                        l_v_res(l_resource_id).res_seq_num     := v_wljdi_resource_seq_num(l_d);
                        l_v_res(l_resource_id).firm_type       := v_wljdi_firm_type(l_d);
                        l_v_res(l_resource_id).setup_id        := v_wljdi_setup_id(l_d);
                        l_v_res(l_resource_id).grp_seq_id      := v_wljdi_grp_seq_id(l_d);
                        l_v_res(l_resource_id).grp_seq_num     := v_wljdi_grp_seq_num(l_d);
                        l_v_res(l_resource_id).max_assg_units  := v_wljdi_max_assg_units(l_d);
                        l_v_res(l_resource_id).parent_seq_num  := v_wljdi_parent_seq_num(l_d);
                        l_v_res(l_resource_id).batch_id        := v_wljdi_batch_id(l_d);
                        l_v_res(l_resource_id).assigned_units  := v_wljdi_assigned_units(l_d);
                        /* ST : Detailed Scheduling end */

                        if(l_sub_type = WSM_SUB_REC) then
                            -- get all the resource in the same rpl grp
                            -- this local search will change index l_d
                            l_temp := v_wljdi_record_id.next(l_d);
                            while(l_temp IS NOT NULL and
                                  v_wljdi_load_type(l_temp)             = l_load_type and
                                  v_wljdi_substitution_type(l_temp)     = l_sub_type and
                                  v_wljdi_job_op_seq_num(l_temp)        = l_job_op_seq_num and
                                  nvl(v_wljdi_substitute_group_num(l_temp), -1) = nvl(l_sub_grp_num, -1) and
                                  nvl(v_wljdi_replacement_group_num(l_temp), 0) = nvl(l_rpl_grp_num, 0) )
                            loop
                                l_d := l_temp;
                                l_resource_id := v_wljdi_resource_id_new(l_d);
                                l_v_res(l_resource_id).job_op_seq_num  := l_job_op_seq_num;
                                l_v_res(l_resource_id).resource_id     := l_resource_id;
                                l_v_res(l_resource_id).sub_grp_num     := l_sub_grp_num;
                                l_v_res(l_resource_id).rpl_grp_num     := l_rpl_grp_num;
                                l_v_res(l_resource_id).start_date      := v_wljdi_start_date(l_d);
                                l_v_res(l_resource_id).completion_date := v_wljdi_completion_date(l_d);

                                /* ST : Detailed Scheduling start */
                                l_v_res(l_resource_id).res_seq_num     := v_wljdi_resource_seq_num(l_d);
                                l_v_res(l_resource_id).firm_type       := v_wljdi_firm_type(l_d);
                                l_v_res(l_resource_id).setup_id        := v_wljdi_setup_id(l_d);
                                l_v_res(l_resource_id).grp_seq_id      := v_wljdi_grp_seq_id(l_d);
                                l_v_res(l_resource_id).grp_seq_num     := v_wljdi_grp_seq_num(l_d);
                                l_v_res(l_resource_id).max_assg_units  := v_wljdi_max_assg_units(l_d);
                                l_v_res(l_resource_id).parent_seq_num  := v_wljdi_parent_seq_num(l_d);
                                l_v_res(l_resource_id).batch_id        := v_wljdi_batch_id(l_d);
                                l_v_res(l_resource_id).assigned_units  := v_wljdi_assigned_units(l_d);
                                /* ST : Detailed Scheduling end */

                                l_temp := v_wljdi_record_id.next(l_d);
                            end loop;
                        end if;

                        l_stmt_num := 250.2;

                        validate_wljdi_op_resource( p_wip_entity_id     => p_wip_entity_id,
                                                    p_org_id            => p_org_id,
                                                    p_v_res             => l_v_res,
                                                    p_handle_wip_cur_op => 'Y',
                                                    p_substitution_type => l_sub_type,
                                                    x_error_code        => p_error_code,
                                                    x_error_msg         => p_error_msg );
                        if p_error_code <> 0 then
                            raise e_wljdi_common_error;
                        end if;


                        -- Delete only for resources for which setup resources are not added..
                        -- Delete the all the setup resources of the resources which are being updated...
                        l_index := l_v_res.first;
                        while l_index is not null loop
                                IF not(l_v_setup_op_res_num.exists('Y'||'-'||l_job_op_seq_num||'-'||l_v_res(l_index).res_seq_num)) THEN
                                        p_error_code := 0;
                                        p_error_msg  := null;
                                        IF lbji_debug = 'Y' THEN
                                                fnd_file.put_line(fnd_file.log,'import job details : before calling delete setup resource '
                                                                || ' parent res.... : ' || l_v_res(l_index).res_seq_num );
                                        END IF;

                                        -- ST : Detailed Scheduling... should we remove the resources' setup resources that are being replaced....

                                        delete_setup_info( p_wip_entity_id             => p_wip_entity_id,
                                                           p_org_id                    => p_org_id,
                                                           p_par_res_seq_num           => l_v_res(l_index).res_seq_num,
                                                           p_op_seq_num                => l_job_op_seq_num,
                                                           p_handle_curr_op            => 'Y',
                                                           x_error_code                => p_error_code,
                                                           x_error_msg                 => p_error_msg
                                                         );

                                         if p_error_code <> 0 then
                                                -- error out...
                                                raise e_wljdi_common_error;
                                         end if;
                                END IF;
                                l_index := l_v_res.next(l_index);
                        end loop;

                        if(l_sub_type = WSM_SUB_REC) then
                            -- swap the records in WOR and WSOR
                            -- This wip procdure will take care of applied_resource_units
                            -- and WORU/WORI records

                            -- BA: bug 3537390 should check if we need to call REPLACE_RESOURCES
                            l_swap := 0;
                            begin
                                l_stmt_num := 250.3;
                                select   0
                                into     l_swap
                                from     wip_operation_resources
                                where    wip_entity_id         = p_wip_entity_id
                                and      operation_seq_num     = l_job_op_seq_num
                                and      NVL(substitute_group_num, -1) = NVL(l_sub_grp_num, -1)
                                and      NVL(replacement_group_num, 0) = NVL(l_rpl_grp_num, 0);
                            exception
                                when no_data_found then
                                    l_swap := 1;
                                when too_many_rows then
                                    l_swap := 0;
                            end;
                            -- EA: bug 3537390

                            if(l_swap = 1) then         -- bug 3537390
                                begin
                                    l_stmt_num := 250.4;
                                    select  1
                                    into    l_exists
                                    from    wip_cost_txn_interface
                                    where   wip_entity_id = p_wip_entity_id
                                    and     transaction_type = 1
                                    and     operation_seq_num = l_job_op_seq_num
                                    and     organization_id = p_org_id;
                                exception
                                    when no_data_found then
                                        l_exists := 0;
                                    when too_many_rows then
                                        l_exists := 1;
                                end;
                                if(l_exists = 1) then
                                    fnd_message.set_name(application => 'WIP',
                                                         name        => 'WIP_REPLACE_APPLIED_RES');
                                    p_error_msg := fnd_message.get;
                                    p_error_code := -1;
                                    raise e_wljdi_common_error;
                                end if;
                                l_stmt_num := 250.5;

                                WIP_SUB_OP_RESOURCES_PKG.REPLACE_RESOURCES(
                                    l_wip_entity_id           => p_wip_entity_id,
                                    l_operation_seq_num       => l_job_op_seq_num,
                                    l_substitute_group_num    => l_sub_grp_num,
                                    l_replacement_group_num   => l_rpl_grp_num,
                                    x_status                  => l_status,
                                    x_msg_count               => l_msg_count,
                                    x_msg_data                => p_error_msg);

                                if(l_status <> fnd_api.g_ret_sts_success) then
                                    p_error_code := -1;
                                    p_error_msg := 'Error: WIP_SUB_OP_RESOURCES_PKG.REPLACE_RESOURCES ' || p_error_msg;
                                    raise e_wljdi_common_error;
                                end if;

                            end if; -- l_swap = 1 (bug 3537390)
                        end if;


                        if(l_sub_type in (WSM_SUB_CHG, WSM_SUB_REC)) then
                            -- update the records in WOR or WSOR
                                l_resource_id := l_v_res.first;
                                l_stmt_num := 250.6;
                                while(l_resource_id IS NOT NULL)    -- bug 3736602 added loop
                                loop

                                        UPDATE WIP_OPERATION_RESOURCES
                                        set     start_date              = NVL(l_v_res(l_resource_id).start_date,
                                                                                start_date),
                                                completion_date         = NVL(l_v_res(l_resource_id).completion_date,
                                                                                completion_date),

                                                /* ST : Detailed Scheduling start */
                                                firm_flag               =  NVL(l_v_res(l_resource_id).firm_type,firm_flag),
                                                setup_id                =  NVL(l_v_res(l_resource_id).setup_id,setup_id),
                                                group_sequence_id       =  NVL(l_v_res(l_resource_id).grp_seq_id, group_sequence_id),
                                                group_sequence_number   =  NVL(l_v_res(l_resource_id).grp_seq_num, group_sequence_number),
                                                assigned_units          =  NVL(l_v_res(l_resource_id).assigned_units,assigned_units),
                                                maximum_assigned_units  =  NVL(l_v_res(l_resource_id).max_assg_units,maximum_assigned_units),
                                                --parent_resource_seq   =  NVL(l_v_res(l_resource_id).parent_seq_num,parent_resource_seq),
                                                batch_id                =  NVL(l_v_res(l_resource_id).batch_id,batch_id),
                                                /* ST : Detailed Scheduling end */
                                                last_update_date        = p_last_updt_date,
                                                last_updated_by         = p_last_updt_by,
                                                last_update_login       = p_last_updt_login,
                                                creation_date           = p_creation_date,
                                                created_by              = p_created_by,
                                                request_id              = p_request_id,
                                                program_application_id  = p_program_appl_id,
                                                program_id              = p_program_id,
                                                program_update_date     = p_prog_updt_date,
                                                attribute_category = v_wljdi_attribute_category(l_d),
                                                attribute1 = v_wljdi_attribute1(l_d) ,
                                                attribute2 = v_wljdi_attribute2(l_d) ,
                                                attribute3 = v_wljdi_attribute3(l_d) ,
                                                attribute4 = v_wljdi_attribute4(l_d) ,
                                                attribute5 = v_wljdi_attribute5(l_d),
                                                attribute6 = v_wljdi_attribute6(l_d) ,
                                                attribute7 = v_wljdi_attribute7(l_d) ,
                                                attribute8 = v_wljdi_attribute8(l_d),
                                                attribute9 = v_wljdi_attribute9(l_d) ,
                                                attribute10 = v_wljdi_attribute10(l_d),
                                                attribute11 = v_wljdi_attribute11(l_d),
                                                attribute12 = v_wljdi_attribute12(l_d),
                                                attribute13 = v_wljdi_attribute13(l_d),
                                                attribute14 = v_wljdi_attribute14(l_d),
                                                attribute15 = v_wljdi_attribute15(l_d)
                                            where   wip_entity_id         = p_wip_entity_id
                                            and     organization_id       = p_org_id
                                            and     operation_seq_num     = l_job_op_seq_num
                                            and     resource_id           = l_resource_id
                                            -- ST : Detailed Scheduling .. use resource seq num when possible...
                                            and     resource_seq_num      = nvl(l_v_res(l_resource_id).res_seq_num,resource_seq_num)
                                            -- ST : Detailed Scheduling end...
                                            and     nvl(substitute_group_num, -1) = nvl(l_sub_grp_num, -1)
                                            and     nvl(replacement_group_num, 0) = nvl(l_rpl_grp_num, 0);

                                            l_resource_id := l_v_res.next(l_resource_id);
                                end loop;
                                -- bug 3736602 added loop
                                l_stmt_num := 250.7;
                                if(SQL%ROWCOUNT = 0) then
                                        -- change should be made in WSOR
                                        l_resource_id := l_v_res.first;
                                        while(l_resource_id IS NOT NULL)    -- bug 3736602 added loop
                                        loop

                                                UPDATE WIP_SUB_OPERATION_RESOURCES
                                                set     start_date              = NVL(l_v_res(l_resource_id).start_date,
                                                                                      start_date),
                                                        completion_date         = NVL(l_v_res(l_resource_id).completion_date,
                                                                                      completion_date),
                                                        /* ST : Detailed Scheduling start */
                                                        assigned_units          = NVL(l_v_res(l_resource_id).assigned_units,assigned_units),
                                                        maximum_assigned_units  = NVL(l_v_res(l_resource_id).max_assg_units,maximum_assigned_units),
                                                        /* ST : Detailed Scheduling end */
                                                        last_update_date        = p_last_updt_date,
                                                        last_updated_by         = p_last_updt_by,
                                                        last_update_login       = p_last_updt_login,
                                                        creation_date           = p_creation_date,
                                                        created_by              = p_created_by,
                                                        request_id              = p_request_id,
                                                        program_application_id  = p_program_appl_id,
                                                        program_id              = p_program_id,
                                                        program_update_date     = p_prog_updt_date,
                                                        attribute_category = v_wljdi_attribute_category(l_d),
                                                        attribute1 = v_wljdi_attribute1(l_d) ,
                                                        attribute2 = v_wljdi_attribute2(l_d) ,
                                                        attribute3 = v_wljdi_attribute3(l_d) ,
                                                        attribute4 = v_wljdi_attribute4(l_d) ,
                                                        attribute5 = v_wljdi_attribute5(l_d),
                                                        attribute6 = v_wljdi_attribute6(l_d) ,
                                                        attribute7 = v_wljdi_attribute7(l_d) ,
                                                        attribute8 = v_wljdi_attribute8(l_d),
                                                        attribute9 = v_wljdi_attribute9(l_d) ,
                                                        attribute10 = v_wljdi_attribute10(l_d),
                                                        attribute11 = v_wljdi_attribute11(l_d),
                                                        attribute12 = v_wljdi_attribute12(l_d),
                                                        attribute13 = v_wljdi_attribute13(l_d),
                                                        attribute14 = v_wljdi_attribute14(l_d),
                                                        attribute15 = v_wljdi_attribute15(l_d)
                                                where   wip_entity_id         = p_wip_entity_id
                                                and     organization_id       = p_org_id
                                                and     operation_seq_num     = l_job_op_seq_num
                                                and     resource_id           = l_resource_id
                                                -- ST : Detailed Scheduling .. use resource seq num when possible...
                                                and     resource_seq_num      = nvl(l_v_res(l_resource_id).res_seq_num,resource_seq_num)
                                                -- ST : Detailed Scheduling end...
                                                and     nvl(substitute_group_num, -1) = nvl(l_sub_grp_num, -1)
                                                and     nvl(replacement_group_num, 0) = nvl(l_rpl_grp_num, 0);

                                                l_resource_id := l_v_res.next(l_resource_id);
                                        end loop;                       -- bug 3736602 added loop
                                end if;
                        end if;

                    else    -- l_job_op_seq_num <> l_cur_job_op_seq_num
                        -- this can happen when recommendations arrive after the job
                        -- is moved. should give a warning message
                        fnd_file.put_line(fnd_file.log,
                            'Warning: resource recommendations for current operation are ignored ' ||
                            '(record_id = ' || l_d || ')' );
                    end if;
                    -- }} Update WIP table

                -- {{ Update WSM_COPY table
                elsif(l_rtg_op_seq_num IS NOT NULL) then
l_stmt_num := 260.1;
                    fnd_file.put_line(fnd_file.log,'import job details : Resource Updation...' || ' Rtg Op seq Num : ' || l_rtg_op_seq_num);

                    -- pack data into PL/SQL table l_v_res for validation
                    l_v_res.delete;
                    l_v_res(l_resource_id).rtg_op_seq_num  := l_rtg_op_seq_num;
                    l_v_res(l_resource_id).resource_id     := l_resource_id;
                    l_v_res(l_resource_id).sub_grp_num     := l_sub_grp_num;
                    l_v_res(l_resource_id).rpl_grp_num     := l_rpl_grp_num;
                    l_v_res(l_resource_id).start_date      := v_wljdi_start_date(l_d);
                    l_v_res(l_resource_id).completion_date := v_wljdi_completion_date(l_d);

                    /* ST : Detailed Scheduling start */
                    l_v_res(l_resource_id).res_seq_num     := v_wljdi_resource_seq_num(l_d);
                    l_v_res(l_resource_id).firm_type       := v_wljdi_firm_type(l_d);
                    l_v_res(l_resource_id).setup_id        := v_wljdi_setup_id(l_d);
                    l_v_res(l_resource_id).grp_seq_id      := v_wljdi_grp_seq_id(l_d);
                    l_v_res(l_resource_id).grp_seq_num     := v_wljdi_grp_seq_num(l_d);
                    l_v_res(l_resource_id).max_assg_units  := v_wljdi_max_assg_units(l_d);
                    l_v_res(l_resource_id).parent_seq_num  := v_wljdi_parent_seq_num(l_d);
                    l_v_res(l_resource_id).batch_id        := v_wljdi_batch_id(l_d);
                    l_v_res(l_resource_id).assigned_units  := v_wljdi_assigned_units(l_d);
                    /* ST : Detailed Scheduling end */

                    if(l_sub_type = WSM_SUB_REC) then
                        -- get all the resource in the same rpl grp
                        -- this local search will change index l_d
                        l_temp := v_wljdi_record_id.next(l_d);
                        while(l_temp IS NOT NULL and
                              v_wljdi_load_type(l_temp)             = l_load_type and
                              v_wljdi_substitution_type(l_temp)     = l_sub_type and
                              v_wljdi_routing_op_seq_num(l_temp)    = l_rtg_op_seq_num and
                              nvl(v_wljdi_substitute_group_num(l_temp), -1) = nvl(l_sub_grp_num, -1) and
                              nvl(v_wljdi_replacement_group_num(l_temp), 0) = nvl(l_rpl_grp_num, 0) )
                        loop
                            l_d := l_temp;
                            l_resource_id := v_wljdi_resource_id_new(l_d);
                            l_v_res(l_resource_id).rtg_op_seq_num  := l_rtg_op_seq_num;
                            l_v_res(l_resource_id).resource_id     := l_resource_id;
                            l_v_res(l_resource_id).sub_grp_num     := l_sub_grp_num;
                            l_v_res(l_resource_id).rpl_grp_num     := l_rpl_grp_num;
                            l_v_res(l_resource_id).start_date      := v_wljdi_start_date(l_d);
                            l_v_res(l_resource_id).completion_date := v_wljdi_completion_date(l_d);

                            /* ST : Detailed Scheduling start */
                            l_v_res(l_resource_id).res_seq_num     := v_wljdi_resource_seq_num(l_d);
                            l_v_res(l_resource_id).firm_type       := v_wljdi_firm_type(l_d);
                            l_v_res(l_resource_id).setup_id    := v_wljdi_setup_id(l_d);
                            l_v_res(l_resource_id).grp_seq_id      := v_wljdi_grp_seq_id(l_d);
                            l_v_res(l_resource_id).grp_seq_num     := v_wljdi_grp_seq_num(l_d);
                            l_v_res(l_resource_id).max_assg_units  := v_wljdi_max_assg_units(l_d);
                            l_v_res(l_resource_id).parent_seq_num  := v_wljdi_parent_seq_num(l_d);
                            l_v_res(l_resource_id).batch_id    := v_wljdi_batch_id(l_d);
                            l_v_res(l_resource_id).assigned_units  := v_wljdi_assigned_units(l_d);
                            /* ST : Detailed Scheduling end */

                            IF lbji_debug = 'Y' THEN
                                    fnd_file.put_line(fnd_file.log,'import job details : Recomm. the resource..' || ' Rtg Op seq Num : ' || l_rtg_op_seq_num
                                            || ' Res ID .... : ' || l_resource_id
                                            || ' date : ' || v_wljdi_start_date(l_d) );
                            END IF;

                            l_temp := v_wljdi_record_id.next(l_d);
                        end loop;
                    end if;

                    l_stmt_num := 260.2;

                    validate_wljdi_op_resource(
                            p_wip_entity_id     => p_wip_entity_id,
                            p_org_id            => p_org_id,
                            p_v_res             => l_v_res,
                            p_handle_wip_cur_op => 'N',
                            p_substitution_type => l_sub_type,
                            x_error_code        => p_error_code,
                            x_error_msg         => p_error_msg );

                    if p_error_code <> 0 then
                        raise e_wljdi_common_error;
                    end if;

                    l_stmt_num := 260.21;


                    -- Delete the setup resources for the resources for whci setup resources where not added in this run...
                    -- these resources are recommended one..
                    -- Delete the all the setup resources of the resources which are being updated...

                    l_index :=  l_v_res.first;

                    while l_index is not null loop
                        --- fnd_file.put_line(fnd_file.log,'import job details : Loop resource counter : ' ||  l_index);
                        IF not(l_v_setup_op_res_num.exists('N'||'-'||l_rtg_op_seq_num||'-'||l_v_res(l_index).res_seq_num)) THEN

                            p_error_code := 0;
                            p_error_msg  := null;
                            l_stmt_num := 260.22;
                            -- ST : Detailed Scheduling... should we remove the resources' setup resources that are being replaced....
                            delete_setup_info( p_wip_entity_id             => p_wip_entity_id,
                                       p_org_id                    => p_org_id,
                                       p_par_res_seq_num           => l_v_res(l_index).res_seq_num,
                                       p_op_seq_num                => l_rtg_op_seq_num,
                                       p_handle_curr_op            => 'N',
                                       x_error_code                => p_error_code,
                                       x_error_msg                 => p_error_msg
                                     );

                            l_stmt_num := 260.23;

                            if p_error_code <> 0 then
                                -- error out...
                                raise e_wljdi_common_error;
                            end if;
                        END IF;
                        l_stmt_num := 260.24;
                        l_index := l_v_res.next(l_index);
                    end loop;

                    l_stmt_num := 260.3;

                    -- save validated info to an array
                    if(l_sub_type = WSM_SUB_CHG) then
                        l_resource_id := l_v_res.first;
                        l_v_rtg_op_seq(l_out)  := l_rtg_op_seq_num;
                        l_v_res_ids(l_out)     := l_resource_id;
                        l_v_res_sub_grp(l_out) := l_sub_grp_num;
                        l_v_res_rpl_grp(l_out) := l_rpl_grp_num;
                        l_v_start_date(l_out)  := l_v_res(l_resource_id).start_date;
                        l_v_compl_date(l_out)  := l_v_res(l_resource_id).completion_date;

                        /* ST : Detailed Scheduling start */
                        l_v_res_seq_nums(l_out)         := l_v_res(l_resource_id).res_seq_num ;
                        l_v_res_firm_type(l_out)        := l_v_res(l_resource_id).firm_type ;
                        l_v_res_setup_id(l_out)         := l_v_res(l_resource_id).setup_id ;
                        l_v_res_grp_seq_id(l_out)       := l_v_res(l_resource_id).grp_seq_id  ;
                        l_v_res_grp_seq_num(l_out)      := l_v_res(l_resource_id).grp_seq_num  ;
                        l_v_res_max_assg_units(l_out)   := l_v_res(l_resource_id).max_assg_units ;
                        l_v_res_parent_seq_num(l_out)   := l_v_res(l_resource_id).parent_seq_num ;
                        l_v_res_batch_id(l_out)         := l_v_res(l_resource_id).batch_id;
                        l_v_res_assg_units(l_out)       := l_v_res(l_resource_id).assigned_units;
                        /* ST : Detailed Scheduling end */

                        l_v_attribute_category(l_out) :=v_wljdi_attribute_category(l_d);
                        l_v_attribute1(l_out)   := v_wljdi_attribute1(l_d) ;
                        l_v_attribute2(l_out)   := v_wljdi_attribute2(l_d) ;
                        l_v_attribute3(l_out)   := v_wljdi_attribute3(l_d) ;
                        l_v_attribute4(l_out)   := v_wljdi_attribute4(l_d) ;
                        l_v_attribute5(l_out)   := v_wljdi_attribute5(l_d) ;
                        l_v_attribute6(l_out)   := v_wljdi_attribute6(l_d) ;
                        l_v_attribute7(l_out)   := v_wljdi_attribute7(l_d) ;
                        l_v_attribute8(l_out)   := v_wljdi_attribute8(l_d) ;
                        l_v_attribute9(l_out)   := v_wljdi_attribute9(l_d) ;
                        l_v_attribute10(l_out) := v_wljdi_attribute10(l_d);
                        l_v_attribute11(l_out) := v_wljdi_attribute11(l_d);
                        l_v_attribute12(l_out) := v_wljdi_attribute12(l_d);
                        l_v_attribute13(l_out) := v_wljdi_attribute13(l_d);
                        l_v_attribute14(l_out) := v_wljdi_attribute14(l_d);
                        l_v_attribute15(l_out) := v_wljdi_attribute15(l_d);

                        l_v_recoflag(l_out)    := NULL;
                        l_out := l_out +1;

                    elsif(l_sub_type = WSM_SUB_REC) then
                        l_resource_id := l_v_res.first;
                        while (l_resource_id IS NOT NULL)
                        loop
                            l_v_rtg_op_seq(l_out)  := l_rtg_op_seq_num;
                            l_v_res_ids(l_out)     := l_resource_id;
                            l_v_res_sub_grp(l_out) := l_sub_grp_num;
                            l_v_res_rpl_grp(l_out) := l_rpl_grp_num;
                            l_v_start_date(l_out)  := l_v_res(l_resource_id).start_date;
                            l_v_compl_date(l_out)  := l_v_res(l_resource_id).completion_date;

                            /* ST : Detailed Scheduling start */
                            l_v_res_seq_nums(l_out)   := l_v_res(l_resource_id).res_seq_num ;
                            l_v_res_firm_type(l_out)      := l_v_res(l_resource_id).firm_type ;
                            l_v_res_setup_id(l_out)       := l_v_res(l_resource_id).setup_id ;
                            l_v_res_grp_seq_id(l_out)     := l_v_res(l_resource_id).grp_seq_id  ;
                            l_v_res_grp_seq_num(l_out)    := l_v_res(l_resource_id).grp_seq_num  ;
                            l_v_res_max_assg_units(l_out) := l_v_res(l_resource_id).max_assg_units ;
                            l_v_res_parent_seq_num(l_out) := l_v_res(l_resource_id).parent_seq_num ;
                            l_v_res_batch_id(l_out)       := l_v_res(l_resource_id).batch_id;
                            l_v_res_assg_units(l_out)     := l_v_res(l_resource_id).assigned_units;
                            /* ST : Detailed Scheduling end */

                            l_v_attribute_category(l_out) :=v_wljdi_attribute_category(l_d);
                            l_v_attribute1(l_out)   := v_wljdi_attribute1(l_d) ;
                            l_v_attribute2(l_out)   := v_wljdi_attribute2(l_d) ;
                            l_v_attribute3(l_out)   := v_wljdi_attribute3(l_d) ;
                            l_v_attribute4(l_out)   := v_wljdi_attribute4(l_d) ;
                            l_v_attribute5(l_out)   := v_wljdi_attribute5(l_d) ;
                            l_v_attribute6(l_out)   := v_wljdi_attribute6(l_d) ;
                            l_v_attribute7(l_out)   := v_wljdi_attribute7(l_d) ;
                            l_v_attribute8(l_out)   := v_wljdi_attribute8(l_d) ;
                            l_v_attribute9(l_out)   := v_wljdi_attribute9(l_d) ;
                            l_v_attribute10(l_out) := v_wljdi_attribute10(l_d);
                            l_v_attribute11(l_out) := v_wljdi_attribute11(l_d);
                            l_v_attribute12(l_out) := v_wljdi_attribute12(l_d);
                            l_v_attribute13(l_out) := v_wljdi_attribute13(l_d);
                            l_v_attribute14(l_out) := v_wljdi_attribute14(l_d);
                            l_v_attribute15(l_out) := v_wljdi_attribute15(l_d);

                            IF lbji_debug = 'Y' THEN
                                    fnd_file.put_line(fnd_file.log,'import job details : Recomm. the resource..' || ' Rtg Op seq Num : ' || l_rtg_op_seq_num
                                                        || ' Res ID .... : ' || l_resource_id
                                                        || ' date : ' || l_v_res(l_resource_id).start_date );
                            END IF;

                            l_v_recoflag(l_out)    := 'Y';

                            /* here do it..... */
                            l_hash_str := to_char(p_wip_entity_id) || ':' || to_char(l_rtg_op_seq_num) || ':' || to_char(l_resource_id);
                            l_hash_value := dbms_utility.get_hash_value(l_hash_str,35,1048576); /* 2^20 */
                            l_v_res_recom(l_hash_value) := 'Y';
                            /* ........................... */

                            l_resource_id := l_v_res.NEXT(l_resource_id);
                            l_out := l_out +1;

                        end loop;
                        l_stmt_num := 260.4;
                        -- get the other resource with different l_rpl_grp_num
                        l_v_disco_res_ids.delete;
                        l_v_disco_res_rpl_grp.delete;

                        /* ST : Detailed Scheduling added... */
                        l_v_disco_res_seq_num.delete;
                        /* ST : Detailed Scheduling added... */

                        open c_disco_res (
                            p_wip_entity_id,
                            l_rtg_op_seq_num,
                            l_sub_grp_num,
                            l_rpl_grp_num);

                        fetch c_disco_res bulk collect into
                            l_v_disco_res_ids,
                            l_v_disco_res_rpl_grp,
                            l_v_disco_res_seq_num; /* ST : Detailed Scheduling added... */

                         if(c_disco_res%rowcount > 0) then
                                l_idx2 := l_v_disco_res_ids.first;

                                while(l_idx2 IS NOT NULL)
                                loop
                                       l_v_rtg_op_seq(l_out)  := l_rtg_op_seq_num;
                                       l_v_res_ids(l_out)     := l_v_disco_res_ids(l_idx2);

                                       l_v_res_sub_grp(l_out) := l_sub_grp_num;
                                       l_v_res_rpl_grp(l_out) := l_v_disco_res_rpl_grp(l_idx2);
                                       l_v_start_date(l_out)  := NULL;     -- CZHDBG: why nullify?
                                       l_v_compl_date(l_out)  := NULL;     -- CZHDBG: why nullify?
                                       l_v_recoflag(l_out)    := 'N';

                                       /* ST : Detailed scheduling... if we have to change the DS populated data.. add code here to
                                          null the new fields
                                       */
                                       l_v_res_seq_nums(l_out)     := l_v_disco_res_seq_num(l_idx2);
                                       l_v_res_firm_type(l_out)    := 0; /* none */
                                       l_v_res_setup_id(l_out)     := null;
                                       l_v_res_grp_seq_id(l_out)   := null;
                                       l_v_res_grp_seq_id(l_out)   := null;
                                       l_v_res_batch_id(l_out)     := null;
                                       l_v_res_max_assg_units(l_out)   := null;
                                       l_v_res_assg_units(l_out)   := null;
                                       l_v_attribute_category(l_out) :=null;
                                       l_v_attribute1(l_out)   := null;
                                       l_v_attribute2(l_out)   := null;
                                       l_v_attribute3(l_out)   := null;
                                       l_v_attribute4(l_out)   := null;
                                       l_v_attribute5(l_out)   := null;
                                       l_v_attribute6(l_out)   := null;
                                       l_v_attribute7(l_out)   := null;
                                       l_v_attribute8(l_out)   := null;
                                       l_v_attribute9(l_out)   := null;
                                       l_v_attribute10(l_out) := null;
                                       l_v_attribute11(l_out) := null;
                                       l_v_attribute12(l_out) := null;
                                       l_v_attribute13(l_out) := null;
                                       l_v_attribute14(l_out) := null;
                                       l_v_attribute15(l_out) := null;

                                        IF lbji_debug = 'Y' THEN
                                               fnd_file.put_line(fnd_file.log,'import job details : Replacing the resource..' || ' Rtg Op seq Num : ' || l_rtg_op_seq_num
                                                                || ' parent res.... : ' || l_v_disco_res_seq_num(l_idx2) );
                                        END IF;
                                        /* here do it..... */
                                        /* not required... but check it with maruthi...
                                        since
                                        i) Add setup resources to resource X
                                        ii) Replace resource X.

                                        This shouldnt be a problem only that we will still insert setup resources and then delete it here...
                                        */

                                        l_hash_str := to_char(p_wip_entity_id) || ':' || to_char(l_rtg_op_seq_num) || ':' || to_char(l_v_disco_res_ids(l_idx2));
                                        l_hash_value := dbms_utility.get_hash_value(l_hash_str,35,1048576); -- 2^20
                                        l_v_res_recom(l_hash_value) := 'N';
                                        /* ........................... */
                                        /* Add code here to delete the setup resource info.....*/
                                        p_error_code := 0;
                                        p_error_msg  := null;

                                        /* ST : Detailed Scheduling... should we remove the resources' setup resources that are being replaced.... */

                                        delete_setup_info( p_wip_entity_id             => p_wip_entity_id,
                                                           p_org_id                    => p_org_id,
                                                           p_par_res_seq_num           => l_v_disco_res_seq_num(l_idx2),
                                                           p_op_seq_num                => l_rtg_op_seq_num,
                                                           p_handle_curr_op            => 'N',
                                                           x_error_code                => p_error_code,
                                                           x_error_msg                 => p_error_msg
                                                         );

                                        if p_error_code <> 0 then
                                                /* error out... */
                                                raise e_wljdi_common_error;
                                        end if;
                                        l_out := l_out +1;
                                        l_idx2 := l_v_disco_res_ids.next(l_idx2);

                                end loop;
                        end if;
                        close c_disco_res;
                    end if;  -- l_sub_type = WSM_SUB_REC
                end if;     -- l_rtg_op_seq_num IS NOT NULL
                -- }} Update WSM_COPY table
                ---l_d := v_wljdi_record_id.next(l_d);  Updated for Alcoa Enhancement
            end if; -- l_sub_type in (WSM_SUB_CHG, WSM_SUB_REC)
	    l_d := v_wljdi_record_id.next(l_d);    ---Added for Alcoa Enhancement
        end loop;

        -- Update WCOR
        if(l_v_rtg_op_seq.first IS NOT NULL) then
            l_stmt_num := 270.1;
            forall i in l_v_rtg_op_seq.first..l_v_rtg_op_seq.last
                UPDATE  WSM_COPY_OP_RESOURCES
                set     reco_start_date         = l_v_start_date(i),
                        reco_completion_date    = l_v_compl_date(i),
                        recommended             = NVL(l_v_recoflag(i),  recommended),

                        /* ST : Detailed Scheduling start */
						/* Modified Query by Adding NVL during update for firm_type. bug 5471266
						   Already assig_units, max_assg_units were having nvl in it.*/
                        firm_type           = NVL( l_v_res_firm_type(i) , firm_type),
                        setup_id            = l_v_res_setup_id(i),
                        group_sequence_id   = l_v_res_grp_seq_id(i),
                        group_sequence_num  = l_v_res_grp_seq_id(i),
                        max_assigned_units  = nvl( l_v_res_max_assg_units(i) , max_assigned_units),
                        assigned_units      = nvl( l_v_res_assg_units(i)   , assigned_units),
                        batch_id            = l_v_res_batch_id(i),
                        /* ST : Detailed Scheduling end */

                        last_update_date        = p_last_updt_date,
                        last_updated_by         = p_last_updt_by,
                        last_update_login       = p_last_updt_login,
                        request_id              = p_request_id,
                        program_application_id  = p_program_appl_id,
                        program_id              = p_program_id,
                        program_update_date     = p_prog_updt_date,
                        attribute_category = nvl(attribute_category,l_v_attribute_category(i)),
                        attribute1 = nvl(attribute1,l_v_attribute1(i)),
                        attribute2 = nvl(attribute2,l_v_attribute2(i)),
                        attribute3 = nvl(attribute3,l_v_attribute3(i)),
                        attribute4 = nvl(attribute4,l_v_attribute4(i)),
                        attribute5 = nvl(attribute5,l_v_attribute5(i)),
                        attribute6 = nvl(attribute6,l_v_attribute6(i)),
                        attribute7 = nvl(attribute7,l_v_attribute7(i)),
                        attribute8 = nvl(attribute8,l_v_attribute8(i)),
                        attribute9 = nvl(attribute9,l_v_attribute9(i)),
                        attribute10 = nvl(attribute10,l_v_attribute10(i)),
                        attribute11 = nvl(attribute11,l_v_attribute11(i)),
                        attribute12 = nvl(attribute12,l_v_attribute12(i)),
                        attribute13 = nvl(attribute13,l_v_attribute13(i)),
                        attribute14 = nvl(attribute14,l_v_attribute14(i)),
                        attribute15 = nvl(attribute15,l_v_attribute15(i))
                where   wip_entity_id         = p_wip_entity_id
                and     operation_seq_num     = l_v_rtg_op_seq(i)
                and     resource_id           = l_v_res_ids(i)
                and     resource_seq_num      = nvl(l_v_res_seq_nums(i),resource_seq_num)
                and     nvl(substitute_group_num, -1) = nvl(l_v_res_sub_grp(i), -1)
                and     nvl(replacement_group_num, 0) = nvl(l_v_res_rpl_grp(i), 0);

                -- will not delete this because resource dates on non-reco operation
                -- will be kept. Gantt will not show and usage/instance on non-reco
                -- path

                l_stmt_num := 270.2;
                -- delete resource usage/instance records
                --delete  WSM_COPY_OP_RESOURCE_USAGE
                --where   wip_entity_id         = p_wip_entity_id
                --and     (operation_seq_num,
                --         resource_seq_num) in (
                --        select operation_seq_num,
                --               resource_seq_num
                --        from   WSM_COPY_OP_RESOURCES
                --        where  wip_entity_id = p_wip_entity_id
                --        and    recommended <> 'Y' );
                l_stmt_num := 270.3;
                --delete  WSM_COPY_OP_RESOURCE_INSTANCES
                --where   wip_entity_id         = p_wip_entity_id
                --and     (operation_seq_num,
                --         resource_seq_num) in (
                --        select operation_seq_num,
                --               resource_seq_num
                --        from   WSM_COPY_OP_RESOURCES
                --        where  wip_entity_id = p_wip_entity_id
                --        and    recommended <> 'Y' );

        end if;
        if lbji_debug = 'Y' then
            fnd_file.put_line(fnd_file.log, 'Mark recommended operation resources ... OK.');
        end if;

    end if;
    ------------------------------------------------
    -- }} validete operation resources
    ------------------------------------------------

l_stmt_num := 300;
    ------------------------------------------------
    -- {{ validete operation resources instances
    ------------------------------------------------
    if l_res_ins_first IS NOT NULL then
        -- clear output PL/SQL table
        l_out := 0;
        l_v_rtg_op_seq.delete;
        l_v_res_seq_num.delete;
        l_v_start_date.delete;
        l_v_compl_date.delete;
        l_v_instance_id.delete;
        l_v_serial_num.delete;
    l_v_res_ins_batch_id.delete;

        l_d := l_res_ins_first;
        while (l_d IS NOT NULL and v_wljdi_load_type(l_d) = WSM_LOAD_RES_INS)
        loop
            l_load_type      := v_wljdi_load_type(l_d);
            l_sub_type       := v_wljdi_substitution_type(l_d);
            l_job_op_seq_num := v_wljdi_job_op_seq_num(l_d);     -- current op only
            l_rtg_op_seq_num := v_wljdi_routing_op_seq_num(l_d); -- future op only
            l_res_seq_num    := v_wljdi_resource_seq_num(l_d);

            -- ST : Bug fix 4240165 : Detailed Scheduling changes start
            l_resource_id               := v_wljdi_resource_id_new(l_d);
            l_parent_res_seq_num    := v_wljdi_parent_seq_num(l_d);
            -- ST : Bug fix 4240165 : Detailed Scheduling changes end

            -- {{ Update WIP table
            if(l_job_op_seq_num IS NOT NULL) then

                if(l_job_op_seq_num = l_cur_job_op_seq_num) then
                    l_stmt_num := 310.1;
                    -- pack data into PL/SQL table l_v_res_ins for validation
                    l_v_res_ins.delete;
                    l_in := 1;
                    l_v_res_ins(l_in).job_op_seq_num := l_job_op_seq_num;
                    l_v_res_ins(l_in).res_seq_num    := l_res_seq_num;
                    l_v_res_ins(l_in).instance_id    := v_wljdi_instance_id_new(l_d);
                    l_v_res_ins(l_in).serial_number  := v_wljdi_serial_number_new(l_d);
                    l_v_res_ins(l_in).start_date     := v_wljdi_start_date(l_d);
                    l_v_res_ins(l_in).completion_date:= v_wljdi_completion_date(l_d);
                    l_v_res_ins(l_in).batch_id       := v_wljdi_batch_id(l_d);

                    l_stmt_num := 310.2;
                    l_temp := v_wljdi_record_id.next(l_d);

                    -- get all records with the same res_seq_num or belonging to the same resource...
                    while(l_temp IS NOT NULL and
                          v_wljdi_load_type(l_temp)         = l_load_type and
                          v_wljdi_substitution_type(l_temp) = l_sub_type and
                          v_wljdi_job_op_seq_num(l_temp)    = l_job_op_seq_num and
                          ( (v_wljdi_resource_seq_num(l_temp)  = l_res_seq_num)
                             -- ST : Bug fix 4240165 : Detailed Scheduling changes start
                             OR
                             ( nvl(v_wljdi_resource_seq_num(l_temp),-1) = nvl(l_res_seq_num,-1) and
                               v_wljdi_parent_seq_num(l_d)              = l_parent_res_seq_num   and
                               v_wljdi_resource_id_new(l_d)             = l_resource_id
                             )
                           -- ST : Bug fix 4240165 : Detailed Scheduling changes end
                          )
                         )
                    loop
                        l_d  := l_temp;      -- move index l_d!!
                        l_in := l_in+1;
                        l_v_res_ins(l_in).job_op_seq_num := l_job_op_seq_num;
                        l_v_res_ins(l_in).res_seq_num    := l_res_seq_num;
                        l_v_res_ins(l_in).instance_id    := v_wljdi_instance_id_new(l_d);
                        l_v_res_ins(l_in).serial_number  := v_wljdi_serial_number_new(l_d);
                        l_v_res_ins(l_in).start_date     := v_wljdi_start_date(l_d);
                        l_v_res_ins(l_in).completion_date:= v_wljdi_completion_date(l_d);
                        l_v_res_ins(l_in).batch_id       := v_wljdi_batch_id(l_d);

                        l_temp := v_wljdi_record_id.next(l_d);
                    end loop;

                    l_stmt_num := 310.3;
                    -- valid resource usage
                    validate_wljdi_res_instance(
                        p_wip_entity_id     => p_wip_entity_id,
                        p_org_id            => p_org_id,
                        p_v_res_ins         => l_v_res_ins,
                        p_substitution_type => l_sub_type,
                        p_handle_wip_cur_op => 'Y',
                        -- ST : Bug fix 4240165 : Detailed Scheduling changes start
                        p_parent_res_seq_num => l_parent_res_seq_num,
                        p_resource_id        => l_resource_id,
                        x_setup_res_seq_num  => l_setup_res_seq_num,
                        -- ST : Bug fix 4240165 : Detailed Scheduling changes end
                        x_error_code        => p_error_code,
                        x_error_msg         => p_error_msg);

                    if p_error_code <> 0 then
                        raise e_wljdi_common_error;
                    end if;

                    -- ST : Bug fix 4240165 : Detailed Scheduling changes start
                    if l_res_seq_num IS NULL THEN
                        l_res_seq_num := l_setup_res_seq_num;
                    end if;
                    -- ST : Bug fix 4240165 : Detailed Scheduling changes end

                    l_stmt_num := 310.4;
                    -- delete all existing records for that resource_seq_num
                    -- CZHDBG: do we need to check if resource is charged ???
                    delete from wip_op_resource_instances
                    where  wip_entity_id     = p_wip_entity_id
                    and    organization_id   = p_org_id
                    and    operation_seq_num = l_job_op_seq_num
                    and    resource_seq_num  = l_res_seq_num;

                    l_stmt_num := 310.5;
                    delete from wip_operation_resource_usage
                    where  wip_entity_id     = p_wip_entity_id
                    and    organization_id   = p_org_id
                    and    operation_seq_num = l_job_op_seq_num
                    and    resource_seq_num  = l_res_seq_num;

                    if l_sub_type in (WSM_SUB_ADD, WSM_SUB_REC) then
                           l_in := l_v_res_ins.first;

                            while (l_in IS NOT NULL)
                            loop
                                    l_stmt_num := 310.6;
                                    insert into wip_op_resource_instances(
                                        wip_entity_id  ,
                                        organization_id,
                                        operation_seq_num,
                                        resource_seq_num,
                                        instance_id,
                                        serial_number,
                                        start_date,
                                        completion_date,
                                        batch_id ,
                                        last_update_date,
                                        last_updated_by,
                                        creation_date,
                                        created_by,
                                        last_update_login
                                    ) values (
                                        p_wip_entity_id,
                                        p_org_id,
                                        l_job_op_seq_num,
                                        l_res_seq_num,
                                        l_v_res_ins(l_in).instance_id,
                                        l_v_res_ins(l_in).serial_number,
                                        l_v_res_ins(l_in).start_date,
                                        l_v_res_ins(l_in).completion_date,
                                        l_v_res_ins(l_in).batch_id,
                                        p_last_updt_date,
                                        p_last_updt_by,
                                        p_creation_date,
                                        p_created_by,
                                        p_last_updt_login);

                                    l_in  := l_v_res_ins.next(l_in);
                            end loop;
                    end if;

                else    -- l_job_op_seq_num <> l_cur_job_op_seq_num
                    -- this can happen when recommendations arrive after the job
                    -- is moved. should give a warning message
                    fnd_file.put_line(fnd_file.log,
                        'Warning: resource instance recommendations for current operation are ignored ' ||
                        '(record_id = ' || l_d || ')' );
                end if;
                -- }} Update WIP table

            -- {{ Update WSM_COPY table
            elsif(l_rtg_op_seq_num IS NOT NULL) then

                l_stmt_num := 320.1;
                -- pack data into PL/SQL table l_v_res for validation
                l_v_res_ins.delete;
                l_in := 1;
                l_v_res_ins(l_in).rtg_op_seq_num := l_rtg_op_seq_num;
                l_v_res_ins(l_in).res_seq_num    := l_res_seq_num;
                l_v_res_ins(l_in).instance_id    := v_wljdi_instance_id_new(l_d);
                l_v_res_ins(l_in).serial_number  := v_wljdi_serial_number_new(l_d);
                l_v_res_ins(l_in).start_date     := v_wljdi_start_date(l_d);
                l_v_res_ins(l_in).completion_date:= v_wljdi_completion_date(l_d);
                l_v_res_ins(l_in).batch_id       := v_wljdi_batch_id(l_d);


                l_stmt_num := 320.2;
                l_temp := v_wljdi_record_id.next(l_d);
                -- get all records with the same res_seq_num
                while(l_temp IS NOT NULL and
                      v_wljdi_load_type(l_temp)          = l_load_type and
                      v_wljdi_substitution_type(l_temp)  = l_sub_type and
                      v_wljdi_routing_op_seq_num(l_temp) = l_rtg_op_seq_num and
                      (  (  v_wljdi_resource_seq_num(l_temp)   = l_res_seq_num)
                         -- ST : Bug fix 4240165 : Detailed Scheduling changes start
                         OR
                         (  (nvl(v_wljdi_resource_seq_num(l_temp),-1) = nvl(l_res_seq_num,-1)   and
                            (v_wljdi_parent_seq_num(l_d)              = l_parent_res_seq_num)   and
                            (v_wljdi_resource_id_new(l_d)             = l_resource_id))
                         -- ST : Bug fix 4240165 : Detailed Scheduling changes end
                         )
                      )
                     )
                loop
                    l_d := l_temp;      -- move index l_d!!
                    l_in := l_in+1;
                    l_v_res_ins(l_in).rtg_op_seq_num := l_rtg_op_seq_num;
                    l_v_res_ins(l_in).res_seq_num    := l_res_seq_num;
                    l_v_res_ins(l_in).instance_id    := v_wljdi_instance_id_new(l_d);
                    l_v_res_ins(l_in).serial_number  := v_wljdi_serial_number_new(l_d);
                    l_v_res_ins(l_in).start_date     := v_wljdi_start_date(l_d);
                    l_v_res_ins(l_in).completion_date:= v_wljdi_completion_date(l_d);
                    l_v_res_ins(l_in).batch_id       := v_wljdi_batch_id(l_d);
                    l_temp := v_wljdi_record_id.next(l_d);
                end loop;


l_stmt_num := 320.3;

                -- valid resource usage
                validate_wljdi_res_instance(
                    p_wip_entity_id     => p_wip_entity_id,
                    p_org_id            => p_org_id,
                    p_v_res_ins         => l_v_res_ins,
                    p_substitution_type => l_sub_type,
                    p_handle_wip_cur_op => 'N',
                    -- ST : Bug fix 4240165 : Detailed Scheduling changes start
                    p_parent_res_seq_num => l_parent_res_seq_num,
                    p_resource_id        => l_resource_id,
                    x_setup_res_seq_num  => l_setup_res_seq_num,
                    -- ST : Bug fix 4240165 : Detailed Scheduling changes end
                    x_error_code        => p_error_code,
                    x_error_msg         => p_error_msg);

                if p_error_code <> 0 then
                    raise e_wljdi_common_error;
                end if;

                -- l_res_seq_num should always be available now
                l_res_seq_num := l_v_res_ins(1).res_seq_num;

                -- ST : Bug fix 4240165 : Detailed Scheduling changes start
                if l_res_seq_num IS NULL THEN
                        l_res_seq_num := l_setup_res_seq_num;
                end if;
                -- ST : Bug fix 4240165 : Detailed Scheduling changes end

                l_stmt_num := 320.4;
                -- delete all existing records for that resource_seq_num
                delete from wsm_copy_op_resource_instances
                where  wip_entity_id     = p_wip_entity_id
                and    organization_id   = p_org_id
                and    operation_seq_num = l_rtg_op_seq_num
                and    resource_seq_num  = l_res_seq_num;
l_stmt_num := 320.5;
                delete from wsm_copy_op_resource_usage
                where  wip_entity_id     = p_wip_entity_id
                and    organization_id   = p_org_id
                and    operation_seq_num = l_rtg_op_seq_num
                and    resource_seq_num  = l_res_seq_num;
l_stmt_num := 320.6;
                -- save validated data into an array for balk update
                if l_sub_type in (WSM_SUB_ADD, WSM_SUB_REC) then
                    l_in := l_v_res_ins.first;
                    while (l_in IS NOT NULL)
                    loop
                        l_v_rtg_op_seq(l_out)       := l_rtg_op_seq_num;
                        l_v_res_seq_num(l_out)      := l_res_seq_num;
                        l_v_instance_id(l_out)      := l_v_res_ins(l_in).instance_id;
                        l_v_serial_num(l_out)       := l_v_res_ins(l_in).serial_number;
                        l_v_start_date(l_out)       := l_v_res_ins(l_in).start_date;
                        l_v_compl_date(l_out)       := l_v_res_ins(l_in).completion_date;
                        l_v_res_ins_batch_id(l_out) := l_v_res_ins(l_in).batch_id;
                        l_out := l_out +1;
                        l_in  := l_v_res_ins.next(l_in);
                    end loop;
                end if;
            end if;
            -- }} Update WSM_COPY table

            l_d := v_wljdi_record_id.next(l_d);
        end loop;

        -- creating WCORI records
        if(l_v_rtg_op_seq.first IS NOT NULL) then
            l_stmt_num := 330;
            forall i in l_v_rtg_op_seq.first..l_v_rtg_op_seq.last
                insert into wsm_copy_op_resource_instances(
                    wip_entity_id  ,
                    organization_id,
                    operation_seq_num,
                    resource_seq_num,
                    instance_id,
                    serial_number,
                    start_date ,
                    completion_date,
                    batch_id,
                    last_update_date,
                    last_updated_by,
                    creation_date,
                    created_by,
                    last_update_login,
                    request_id,
                    program_application_id,
                    program_id,
                    program_update_date
                ) values (
                    p_wip_entity_id,
                    p_org_id,
                    l_v_rtg_op_seq(i),
                    l_v_res_seq_num(i),
                    l_v_instance_id(i),
                    l_v_serial_num(i),
                    l_v_start_date(i),
                    l_v_compl_date(i),
                    l_v_res_ins_batch_id(i),
                    p_last_updt_date,
                    p_last_updt_by,
                    p_creation_date,
                    p_created_by,
                    p_last_updt_login,
                    p_request_id,
                    p_program_appl_id,
                    p_program_id,
                    p_prog_updt_date);

         if lbji_debug = 'Y' then
            fnd_file.put_line(fnd_file.log, 'Inserted resource instance ... OK.');
         end if;

        end if;
        if lbji_debug = 'Y' then
            fnd_file.put_line(fnd_file.log, 'Mark recommended resource instance ... OK.');
        end if;

    end if; -- resource instance recommendations exist
    ------------------------------------------------
    -- }} validete operation resources instances
    ------------------------------------------------


l_stmt_num := 400;
    ------------------------------------------------
    -- {{ validete operation resources usage
    ------------------------------------------------

    if l_res_use_first IS NOT NULL then
        -- clear output PL/SQL table
        l_out := 0;
        l_v_rtg_op_seq.delete;
        l_v_res_seq_num.delete;
        l_v_instance_id.delete;
        l_v_serial_num.delete;
        l_v_start_date.delete;
        l_v_compl_date.delete;
        l_v_res_use_asgn_units.delete;

        /* ST : Detailed scheduling : start */
        l_v_resource_hours.delete;
        /* ST : Detailed scheduling : end */

        l_d := l_res_use_first;
        while (l_d IS NOT NULL and v_wljdi_load_type(l_d) = WSM_LOAD_RES_USE)
        loop
            l_load_type      := v_wljdi_load_type(l_d);
            l_sub_type       := v_wljdi_substitution_type(l_d);
            l_job_op_seq_num := v_wljdi_job_op_seq_num(l_d);     -- current op only
            l_rtg_op_seq_num := v_wljdi_routing_op_seq_num(l_d); -- future op only
            l_res_seq_num    := v_wljdi_resource_seq_num(l_d);
            l_instance_id    := v_wljdi_instance_id_new(l_d);
            l_serial_num     := v_wljdi_serial_number_new(l_d);

            /* ST : Detailed scheduling : start */
            l_resource_hours := v_wljdi_resource_hours(l_d);
            /* ST : Detailed scheduling : end */

            -- ST : Bug fix 4240165 : Detailed Scheduling changes start
            l_resource_id               := v_wljdi_resource_id_new(l_d);
            l_parent_res_seq_num    := v_wljdi_parent_seq_num(l_d);
            -- ST : Bug fix 4240165 : Detailed Scheduling changes end

            if l_sub_type in (WSM_SUB_ADD, WSM_SUB_REC, WSM_SUB_DEL) then

                -- {{ Update WIP table
                if(l_job_op_seq_num IS NOT NULL) then

                    if(l_job_op_seq_num = l_cur_job_op_seq_num) then
                        l_stmt_num := 410.1;
                        -- pack data into PL/SQL table l_v_res_use for validation
                        l_v_res_use.delete;
                        l_in := 1;
                        l_v_res_use(l_in).job_op_seq_num := l_job_op_seq_num;
                        l_v_res_use(l_in).res_seq_num    := l_res_seq_num;
                        l_v_res_use(l_in).instance_id    := l_instance_id;
                        l_v_res_use(l_in).serial_number  := l_serial_num;
                        l_v_res_use(l_in).assigned_units := v_wljdi_assigned_units(l_d);
                        l_v_res_use(l_in).start_date     := v_wljdi_start_date(l_d);
                        l_v_res_use(l_in).completion_date:= v_wljdi_completion_date(l_d);

                        /* ST : Detailed scheduling : start */
                        l_v_res_use(l_in).resource_hours := v_wljdi_resource_hours(l_d);
                        /* ST : Detailed scheduling : end */

                        -- BA: bug 3373496 to filter duplicated resource usage records
                        l_v_dup_usage.delete;
                        l_hash_str   := to_char(l_v_res_use(l_in).start_date, 'DD-MON-YYYY HH24:MI:SS') ||
                                        to_char(l_v_res_use(l_in).completion_date, 'DD-MON-YYYY HH24:MI:SS');
                        l_hash_value := dbms_utility.get_hash_value(l_hash_str, 37, 1073741824);
                        l_v_dup_usage(l_hash_value) := l_hash_value;
                        -- EA: bug 3373496

l_stmt_num := 410.2;
                        l_temp := v_wljdi_record_id.next(l_d);
                        -- get all records with the same res_seq_num, instance_id and serial_num
                        while(l_temp IS NOT NULL and
                              v_wljdi_load_type(l_temp)         = l_load_type and
                              v_wljdi_substitution_type(l_temp) = l_sub_type and
                              v_wljdi_job_op_seq_num(l_temp)    = l_job_op_seq_num and
                              ( (v_wljdi_resource_seq_num(l_temp)  = l_res_seq_num)
                                -- ST : Bug fix 4240165 : Detailed Scheduling changes start
                                OR
                                ( nvl(v_wljdi_resource_seq_num(l_temp),-1) = nvl(l_res_seq_num,-1) and
                                 (v_wljdi_parent_seq_num(l_d) = l_parent_res_seq_num)              and
                                 (v_wljdi_resource_id_new(l_d)     = l_resource_id)
                                )
                                -- ST : Bug fix 4240165 : Detailed Scheduling changes end
                              ) and
                              NVL(v_wljdi_instance_id_new(l_temp), -1)= NVL(l_instance_id, -1) and
                              NVL(v_wljdi_serial_number_new(l_temp), g_nvl_str) = NVL(l_serial_num, g_nvl_str)
                             )
                        loop
                            l_d := l_temp;      -- move index l_d!!

                            -- BA: bug 3373496 to filter duplicated resource usage records
                            l_hash_str   := to_char(v_wljdi_start_date(l_d), 'DD-MON-YYYY HH24:MI:SS') ||
                                            to_char(v_wljdi_completion_date(l_d), 'DD-MON-YYYY HH24:MI:SS');
                            l_hash_value := dbms_utility.get_hash_value(l_hash_str, 37, 1073741824);
                            -- EA: bug 3373496

                            -- BC: bug 3373496 to filter duplicated resource usage records
                            -- only new value will be added

                            --if(l_v_dup_usage(l_hash_value) IS NULL) then      -- bug 3401727
                            if(NOT l_v_dup_usage.exists(l_hash_value)) then     -- bug 3401727
                                l_in := l_in+1;
                                l_v_res_use(l_in).job_op_seq_num := l_job_op_seq_num;
                                l_v_res_use(l_in).res_seq_num    := l_res_seq_num;
                                l_v_res_use(l_in).instance_id    := l_instance_id;
                                l_v_res_use(l_in).serial_number  := l_serial_num;
                                l_v_res_use(l_in).assigned_units := v_wljdi_assigned_units(l_d);
                                l_v_res_use(l_in).start_date     := v_wljdi_start_date(l_d);
                                l_v_res_use(l_in).completion_date:= v_wljdi_completion_date(l_d);

                                /* ST : Detailed scheduling : start */
                                l_v_res_use(l_in).resource_hours := v_wljdi_resource_hours(l_d);
                                /* ST : Detailed scheduling : end */

                                l_v_dup_usage(l_hash_value) := l_hash_value;
                            else
                                -- dup usage record
                                fnd_file.put_line(fnd_file.log,
                                    'Warning: duplicated resource usage recommendations are ignored ' ||
                                    '(record_id = ' || l_d || ').');
                            end if;
                            -- EC: bug 3373496

                            l_temp := v_wljdi_record_id.next(l_d);
                        end loop;

l_stmt_num := 410.3;
                        -- valid resource usage
                        validate_wljdi_res_usage(
                            p_wip_entity_id     => p_wip_entity_id,
                            p_org_id            => p_org_id,
                            p_v_res_use         => l_v_res_use,
                            p_substitution_type => l_sub_type,
                            p_handle_wip_cur_op => 'Y',
                            -- ST : Bug fix 4240165 : Detailed Scheduling changes start
                            p_parent_res_seq_num => l_parent_res_seq_num,
                            p_resource_id    => l_resource_id,
                            x_setup_res_seq_num  => l_setup_res_seq_num,
                            -- ST : Bug fix 4240165 : Detailed Scheduling changes end
                            x_error_code        => p_error_code,
                            x_error_msg         => p_error_msg);
                        if p_error_code <> 0 then
                            raise e_wljdi_common_error;
                        end if;

                        -- ST : Bug fix 4240165 : Detailed Scheduling changes start
                        if l_res_seq_num IS NULL THEN
                                l_res_seq_num := l_setup_res_seq_num;
                        end if;
                        -- ST : Bug fix 4240165 : Detailed Scheduling changes end

l_stmt_num := 410.4;
                        -- delete all existing records for that resource_seq_num
                        delete from wip_operation_resource_usage
                        where  wip_entity_id        = p_wip_entity_id
                        and    organization_id      = p_org_id
                        and    operation_seq_num    = l_job_op_seq_num
                        and    resource_seq_num     = l_res_seq_num
                        and    NVL(instance_id, -1) = NVL(l_instance_id, -1)
                        and    NVL(serial_number, g_nvl_str) = NVL(l_serial_num, g_nvl_str);

                        if l_sub_type in (WSM_SUB_ADD, WSM_SUB_REC) then
                            l_in := l_v_res_use.first;
                            while (l_in IS NOT NULL)
                            loop
l_stmt_num := 410.5;
                                insert into wip_operation_resource_usage(
                                    wip_entity_id  ,
                                    organization_id,
                                    operation_seq_num,
                                    resource_seq_num,
                                    instance_id,
                                    serial_number,
                                    start_date ,
                                    completion_date,
                                    assigned_units ,
                                    -- resource_hours,  /* ST : Added for Detailed Scheduling */
                                    last_update_date,
                                    last_updated_by,
                                    creation_date,
                                    created_by,
                                    last_update_login,
                                    request_id,
                                    program_application_id,
                                    program_id,
                                    program_update_date
                                ) values (
                                    p_wip_entity_id,
                                    p_org_id,
                                    l_job_op_seq_num,
                                    l_res_seq_num,
                                    l_instance_id,
                                    l_serial_num,
                                    l_v_res_use(l_in).start_date,
                                    l_v_res_use(l_in).completion_date,
                                    l_v_res_use(l_in).assigned_units,
                                    -- l_v_res_use(l_in).resource_hours, /* ST : Added for Detailed Scheduling */
                                    p_last_updt_date,
                                    p_last_updt_by,
                                    p_creation_date,
                                    p_created_by,
                                    p_last_updt_login,
                                    p_request_id,
                                    p_program_appl_id,
                                    p_program_id,
                                    p_prog_updt_date);

                                update_cumulative_time(
                                    p_wip_entity_id      => p_wip_entity_id,
                                    p_operation_seq_num  => l_job_op_seq_num,
                                    p_resource_seq_num   => l_res_seq_num,
                                    p_instance_id        => l_instance_id,
                                    p_serial_num         => l_serial_num,
                                    p_handle_wip_cur_op  => 'Y' );

                                l_in  := l_v_res_use.next(l_in);
                            end loop;
                        end if;

                    else -- l_job_op_seq_num <> l_cur_job_op_seq_num
                        -- this can happen when recommendations arrive after the job
                        -- is moved. should give a warning message
                        fnd_file.put_line(fnd_file.log,
                            'Warning: resource usage recommendations for current operation is ignored ' ||
                            '(record_id = ' || l_d || ').');
                    end if;
                -- }} Update WIP table

                -- {{ Update WSM_COPY table
                elsif(l_rtg_op_seq_num IS NOT NULL) then
                    l_stmt_num := 420.1;
                    -- pack data into PL/SQL table l_v_res for validation
                    l_v_res_use.delete;
                    l_in := 1;
                    l_v_res_use(l_in).rtg_op_seq_num := l_rtg_op_seq_num;
                    l_v_res_use(l_in).res_seq_num    := l_res_seq_num;
                    l_v_res_use(l_in).instance_id    := l_instance_id;
                    l_v_res_use(l_in).serial_number  := l_serial_num;
                    l_v_res_use(l_in).assigned_units := v_wljdi_assigned_units(l_d);
                    l_v_res_use(l_in).start_date     := v_wljdi_start_date(l_d);
                    l_v_res_use(l_in).completion_date:= v_wljdi_completion_date(l_d);

                    /* ST : Detailed scheduling : start */
                    l_v_res_use(l_in).resource_hours := v_wljdi_resource_hours(l_d);
                    /* ST : Detailed scheduling : end */

                    -- BA: bug 3373496 to filter duplicated resource usage records
                    l_v_dup_usage.delete;
                    l_hash_str   := to_char(l_v_res_use(l_in).start_date, 'DD-MON-YYYY HH24:MI:SS') ||
                                    to_char(l_v_res_use(l_in).completion_date, 'DD-MON-YYYY HH24:MI:SS');
                    l_hash_value := dbms_utility.get_hash_value(l_hash_str, 37, 1073741824);
                    l_v_dup_usage(l_hash_value) := l_hash_value;
                    -- EA: bug 3373496

l_stmt_num := 420.2;
                    l_temp := v_wljdi_record_id.next(l_d);
                    -- get all records with the same res_seq_num
                    while(l_temp IS NOT NULL and
                          v_wljdi_load_type(l_temp)          = l_load_type and
                          v_wljdi_substitution_type(l_temp)  = l_sub_type and
                          v_wljdi_routing_op_seq_num(l_temp) = l_rtg_op_seq_num and
                          (  (v_wljdi_resource_seq_num(l_temp)   = l_res_seq_num)
                              -- ST : Bug fix 4240165 : Detailed Scheduling changes start
                              OR
                              ( nvl(v_wljdi_resource_seq_num(l_temp),-1) = nvl(l_res_seq_num,-1)        and
                                (v_wljdi_parent_seq_num(l_d) = l_parent_res_seq_num)                      and
                                 (v_wljdi_resource_id_new(l_d)     = l_resource_id)
                              )
                              -- ST : Bug fix 4240165 : Detailed Scheduling changes end
                          )
                          and
                          NVL(v_wljdi_instance_id_new(l_temp), -1) = NVL(l_instance_id, -1) and
                          NVL(v_wljdi_serial_number_new(l_temp), g_nvl_str) = NVL(l_serial_num, g_nvl_str))
                    loop
                        l_d := l_temp;      -- move index l_d!!

                        -- BA: bug 3373496 to filter duplicated resource usage records
                        l_hash_str   := to_char(v_wljdi_start_date(l_d), 'DD-MON-YYYY HH24:MI:SS') ||
                                        to_char(v_wljdi_completion_date(l_d), 'DD-MON-YYYY HH24:MI:SS');
                        l_hash_value := dbms_utility.get_hash_value(l_hash_str, 37, 1073741824);
                        -- EA: bug 3373496

                        -- BC: bug 3373496 to filter duplicated resource usage records
                        -- only new value will be added

                        --if(l_v_dup_usage(l_hash_value) IS NULL) then          -- bug 3401727
                        if(NOT l_v_dup_usage.exists(l_hash_value)) then         -- bug 3401727
                            l_in := l_in+1;
                            l_v_res_use(l_in).rtg_op_seq_num := l_rtg_op_seq_num;
                            l_v_res_use(l_in).res_seq_num    := l_res_seq_num;
                            l_v_res_use(l_in).instance_id    := l_instance_id;
                            l_v_res_use(l_in).serial_number  := l_serial_num;
                            l_v_res_use(l_in).assigned_units := v_wljdi_assigned_units(l_d);
                            l_v_res_use(l_in).start_date     := v_wljdi_start_date(l_d);
                            l_v_res_use(l_in).completion_date:= v_wljdi_completion_date(l_d);

                            /* ST : Detailed scheduling : start */
                            l_v_res_use(l_in).resource_hours := v_wljdi_resource_hours(l_d);
                            /* ST : Detailed scheduling : end */

                            l_v_dup_usage(l_hash_value) := l_hash_value;
                        else
                            -- dup usage record
                            fnd_file.put_line(fnd_file.log,
                                'Warning: duplicated resource usage recommendations are ignored ' ||
                                '(record_id = ' || l_d || ').');
                        end if;
                        -- EC: bug 3373496

                        l_temp := v_wljdi_record_id.next(l_d);
                    end loop;

l_stmt_num := 420.3;
                    -- valid resource usage
                    validate_wljdi_res_usage(
                        p_wip_entity_id     => p_wip_entity_id,
                        p_org_id            => p_org_id,
                        p_v_res_use         => l_v_res_use,
                        p_substitution_type => l_sub_type,
                        p_handle_wip_cur_op => 'N',
                        -- ST : Bug fix 4240165 : Detailed Scheduling changes start
                        p_parent_res_seq_num => l_parent_res_seq_num,
                        p_resource_id        => l_resource_id,
                        x_setup_res_seq_num  => l_setup_res_seq_num,
                        -- ST : Bug fix 4240165 : Detailed Scheduling changes end
                        x_error_code        => p_error_code,
                        x_error_msg         => p_error_msg);
                    if p_error_code <> 0 then
                        raise e_wljdi_common_error;
                    end if;

                    -- ST : Bug fix 4240165 : Detailed Scheduling changes start
                    if l_res_seq_num IS NULL THEN
                        l_res_seq_num := l_setup_res_seq_num;
                    end if;
                    -- ST : Bug fix 4240165 : Detailed Scheduling changes end

l_stmt_num := 420.4;
                    -- delete all existing records for that resource_seq_num
                    delete from wsm_copy_op_resource_usage
                    where  wip_entity_id     = p_wip_entity_id
                    and    organization_id   = p_org_id
                    and    operation_seq_num = l_rtg_op_seq_num
                    and    resource_seq_num  = l_res_seq_num;

                    -- save validated data into an array for balk update
                    if l_sub_type in (WSM_SUB_ADD, WSM_SUB_REC) then
                        l_in := l_v_res_use.first;
                        while (l_in IS NOT NULL)
                        loop
                            l_v_rtg_op_seq(l_out)         := l_rtg_op_seq_num;
                            l_v_res_seq_num(l_out)        := l_res_seq_num;
                            l_v_instance_id(l_out)        := l_instance_id;
                            l_v_serial_num(l_out)         := l_serial_num;
                            l_v_start_date(l_out)         := l_v_res_use(l_in).start_date;
                            l_v_compl_date(l_out)         := l_v_res_use(l_in).completion_date;
                            l_v_res_use_asgn_units(l_out) := l_v_res_use(l_in).assigned_units;

                            /* ST : Detailed scheduling : start */
                            l_v_resource_hours(l_out)     := l_v_res_use(l_in).resource_hours;
                            /* ST : Detailed scheduling : end */

                            l_out := l_out +1;
                            l_in  := l_v_res_use.next(l_in);
                        end loop;
                    end if;
                end if;
                -- }} Update WSM_COPY table

            end if; -- p_substitution_type in (WSM_SUB_ADD, WSM_SUB_REC, WSM_SUB_DEL)
            l_d := v_wljdi_record_id.next(l_d);
        end loop;

        -- creating WCORU records
        if(l_v_rtg_op_seq.first IS NOT NULL) then
l_stmt_num := 430;
            forall i in l_v_rtg_op_seq.first..l_v_rtg_op_seq.last
                insert into wsm_copy_op_resource_usage(
                    wip_entity_id  ,
                    organization_id,
                    operation_seq_num,
                    resource_seq_num,
                    instance_id,
                    serial_number,
                    start_date ,
                    completion_date,
                    assigned_units ,
                    resource_hours,  /* ST : Added for Detailed Scheduling */
                    last_update_date,
                    last_updated_by,
                    creation_date,
                    created_by,
                    last_update_login,
                    request_id,
                    program_application_id,
                    program_id,
                    program_update_date
                ) values (
                    p_wip_entity_id,
                    p_org_id,
                    l_v_rtg_op_seq(i),
                    l_v_res_seq_num(i),
                    l_v_instance_id(i),
                    l_v_serial_num(i),
                    l_v_start_date(i),
                    l_v_compl_date(i),
                    l_v_res_use_asgn_units(i),
                    l_v_resource_hours(i),  /* ST : Added for Detailed Scheduling */
                    p_last_updt_date,
                    p_last_updt_by,
                    p_creation_date,
                    p_created_by,
                    p_last_updt_login,
                    p_request_id,
                    p_program_appl_id,
                    p_program_id,
                    p_prog_updt_date);

            for i in l_v_rtg_op_seq.first..l_v_rtg_op_seq.last
            loop
                update_cumulative_time(
                    p_wip_entity_id      => p_wip_entity_id,
                    p_operation_seq_num  => l_v_rtg_op_seq(i),
                    p_resource_seq_num   => l_v_res_seq_num(i),
                    p_instance_id        => l_v_instance_id(i),
                    p_serial_num         => l_v_serial_num(i),
                    p_handle_wip_cur_op  => 'N' );
            end loop;

        end if;
        if lbji_debug = 'Y' then
            fnd_file.put_line(fnd_file.log, 'Mark recommended resource usage ... OK.');
        end if;

    end if; -- resource usage recommendations exist
    ------------------------------------------------
    -- }} validete operation resources usage
    ------------------------------------------------


l_stmt_num := 500;
    ------------------------------------------------
    -- {{ validete component
    ------------------------------------------------
    if l_comp_first IS NOT NULL then
        -- clear output PL/SQL table
        l_out := 0;
        l_v_rtg_op_seq.delete;
        l_v_comp_item_id.delete;
        l_v_comp_prm_item_id.delete;
        l_v_comp_phm_item_id.delete;
        l_v_comp_reqd_date.delete;
        l_v_recoflag.delete;
        l_v_comp_yield.delete;
        l_v_comp_qpa.delete;
        l_v_attribute_category.delete;
        l_v_attribute1.delete;
        l_v_attribute2.delete;
        l_v_attribute3.delete;
        l_v_attribute4.delete;
        l_v_attribute5.delete;
        l_v_attribute6.delete;
        l_v_attribute7.delete;
        l_v_attribute8.delete;
        l_v_attribute9.delete;
        l_v_attribute10.delete;
        l_v_attribute11.delete;
        l_v_attribute12.delete;
        l_v_attribute13.delete;
        l_v_attribute14.delete;
        l_v_attribute15.delete;
        l_d := l_comp_first;
        while (l_d IS NOT NULL and v_wljdi_load_type(l_d) = WSM_LOAD_COMP)
        loop
            l_load_type       := v_wljdi_load_type(l_d);
            l_sub_type        := v_wljdi_substitution_type(l_d);
            l_job_op_seq_num  := v_wljdi_job_op_seq_num(l_d);         -- current op only
            l_rtg_op_seq_num  := v_wljdi_routing_op_seq_num(l_d);     -- future op only
            l_item_id         := v_wljdi_inventory_item_id_new(l_d);  -- should not be null
            l_primary_item_id := v_wljdi_primary_item_id(l_d);        -- should not be null
            l_src_phm_item_id := v_wljdi_src_phantom_item_id(l_d);    -- can be null
            l_component_seq_id:= v_wljdi_component_sequence_id(l_d);  -- should not be null
            -- Added For LBJ Interface Alcoa Enhancement
            l_item_old_id         := v_wljdi_inventory_item_id_old(l_d);

            if l_sub_type in (WSM_SUB_DEL, WSM_SUB_ADD) then
--               Modified for Alcoa Enhancement
--                if(l_job_op_seq_num IS NULL) then
--l_stmt_num := 510;
--                    fnd_message.set_name('WSM','WSM_NULL_FIELD');
--                    fnd_message.set_token('FLD_NAME', 'job_op_seq_num');
--                    p_error_msg := fnd_message.get;
--                    p_error_code := -1;
--                    raise e_wljdi_common_error;
--                else
--                    fnd_file.put_line(fnd_file.log,
--                        'Warning: deleting or adding components for current operation '||
--                        'is currently not supported and ignored.' -- CZHDBG_MSG
--                    );
--                end if;
			l_stmt_num := 510;
			-- Added For LBJ Interface Alcoa Enhancement
			IF(l_job_op_seq_num IS NOT NULL) THEN
			    IF (l_job_op_seq_num=l_cur_job_op_seq_num) THEN
				IF (l_sub_type=WSM_SUB_DEL) THEN
				    l_in := 1;
					l_v_comp.delete;
					l_v_comp(l_in).job_op_seq_num   := l_job_op_seq_num;
					l_v_comp(l_in).item_id          := l_item_id;
					l_v_comp(l_in).item_old_id      := l_item_old_id;
					l_v_comp(l_in).primary_item_id  := l_primary_item_id;
					l_v_comp(l_in).date_required    := v_wljdi_date_required(l_d);
					l_v_comp(l_in).required_qty     := v_wljdi_required_quantity(l_d);
	l_stmt_num := 750.2;
					validate_wljdi_op_component(
					    p_wip_entity_id     => p_wip_entity_id,
					    p_org_id            => p_org_id,
					    p_v_comp            => l_v_comp,
					    p_substitution_type => l_sub_type,
					    p_handle_wip_cur_op => 'Y',
					    x_error_code        => p_error_code,
					    x_error_msg         => p_error_msg);
					if p_error_code <> 0 then
					    raise e_wljdi_common_error;
					end if;

					delete wip_requirement_operations
					where wip_entity_id = p_wip_entity_id
					and organization_id   = p_org_id
					and operation_seq_num = l_job_op_seq_num
					and inventory_item_id = l_item_old_id;

					wip_picking_pvt.cancel_comp_allocations(
					    p_wip_entity_id     => p_wip_entity_id,
					    p_operation_seq_num => l_job_op_seq_num,
					    p_inventory_item_id => l_item_old_id,
					    p_wip_entity_type   => WIP_CONSTANTS.LOTBASED,
					    x_return_status     => x_return_status,
					    x_msg_data          => p_error_msg);

					if (x_return_status <> fnd_api.g_ret_sts_success) then
					    raise e_wljdi_common_error;
					end if;

				ELSIF (l_sub_type=WSM_SUB_ADD) then
	l_stmt_num:=59.9;
				    l_in := 1;
				    l_v_comp.delete;
				    l_v_comp(l_in).job_op_seq_num   := l_job_op_seq_num;
				    l_v_comp(l_in).item_id          := l_item_id;
				    l_v_comp(l_in).date_required    := v_wljdi_date_required(l_d);
				    l_v_comp(l_in).required_qty     := v_wljdi_required_quantity(l_d);
				    l_v_comp(l_in).wip_supply_type  := v_wljdi_wip_supply_type(l_d);
				    l_v_comp(l_in).qpa                  := v_wljdi_quantity_per_assembly(l_d);
				    l_v_comp(l_in).supply_subinventory  := v_wljdi_supply_subinventory(l_d);
				    l_v_comp(l_in).supply_locator       := v_wljdi_supply_locator_id(l_d);
				    l_v_comp(l_in).mrp_net_flag         := v_wljdi_mrp_net_flag(l_d);

				    if v_wljdi_recommended(l_d) = 'N' then
					fnd_file.put_line(fnd_file.log,'Warning: Addition of non-recommended component for current operation are ignored ' || '(record_id = ' || l_d || ').' );
					l_valid_comp := false;
				    else
					l_valid_comp := true;
				    end if;
	l_stmt_num := 750.2;
				    if l_valid_comp then

					validate_wljdi_op_component(
					p_wip_entity_id     => p_wip_entity_id,
					p_org_id            => p_org_id,
					p_v_comp            => l_v_comp,
					p_substitution_type => l_sub_type,
					p_handle_wip_cur_op => 'Y',
					x_error_code        => p_error_code,
					x_error_msg         => p_error_msg);

					if p_error_code <> 0 then
					    raise e_wljdi_common_error;
					end if;

					INSERT INTO WIP_REQUIREMENT_OPERATIONS
					(inventory_item_id,
						organization_id,
						wip_entity_id,
						operation_seq_num,
						repetitive_schedule_id,
						last_update_date,
						last_updated_by,
						creation_date,
						created_by,
						last_update_login,
						component_sequence_id,
						wip_supply_type,
						date_required,
						required_quantity,
						quantity_issued,
						quantity_per_assembly,
						supply_subinventory,
						supply_locator_id,
						mrp_net_flag,
						auto_request_material,
						comments,
						attribute_category,
						attribute1,
						attribute2,
						attribute3,
						attribute4,
						attribute5,
						attribute6,
						attribute7,
						attribute8,
						attribute9,
						attribute10,
						attribute11,
						attribute12,
						attribute13,
						attribute14,
						attribute15,
						request_id,
						program_application_id,
						program_id,
						program_update_date,
						segment1,
						segment2,
						segment3,
						segment4,
						segment5,
						segment6,
						segment7,
						segment8,
						segment9,
						segment10,
						segment11,
						segment12,
						segment13,
						segment14,
						segment15,
						segment16,
						segment17,
						segment18,
						segment19,
						segment20,
						department_id,
						costed_quantity_issued,
						costed_quantity_relieved,
						released_quantity)
					       select
						l_v_comp(l_in).item_id,
						p_org_id,
						p_wip_entity_id,
						l_v_comp(l_in).job_op_seq_num,
						null,
						p_last_updt_date,
						p_last_updt_by,
						p_creation_date,
						p_created_by,
						p_last_updt_login,
						null,
						l_v_comp(l_in).wip_supply_type,
						l_v_comp(l_in).date_required,
						l_v_comp(l_in).required_qty,
						0,
						l_v_comp(l_in).qpa,
						l_v_comp(l_in).supply_subinventory,
						l_v_comp(l_in).supply_locator,
						v_wljdi_mrp_net_flag(l_d),
						v_wljdi_auto_request_material(l_d),
						v_wljdi_comments(l_d),
						v_wljdi_attribute_category(l_d),
						v_wljdi_attribute1(l_d),
						v_wljdi_attribute2(l_d),
						v_wljdi_attribute3(l_d),
						v_wljdi_attribute4(l_d),
						v_wljdi_attribute5(l_d),
						v_wljdi_attribute6(l_d),
						v_wljdi_attribute7(l_d),
						v_wljdi_attribute8(l_d),
						v_wljdi_attribute9(l_d),
						v_wljdi_attribute10(l_d),
						v_wljdi_attribute11(l_d),
						v_wljdi_attribute12(l_d),
						v_wljdi_attribute13(l_d),
						v_wljdi_attribute14(l_d),
						v_wljdi_attribute15(l_d),
						p_request_id,
						p_program_appl_id,
						p_program_id,
						p_prog_updt_date,
						msi.segment1,
						msi.segment2,
						msi.segment3,
						msi.segment4,
						msi.segment5,
						msi.segment6,
						msi.segment7,
						msi.segment8,
						msi.segment9,
						msi.segment10,
						msi.segment11,
						msi.segment12,
						msi.segment13,
						msi.segment14,
						msi.segment15,
						msi.segment16,
						msi.segment17,
						msi.segment18,
						msi.segment19,
						msi.segment20,
						wo.department_id,
						null,
						null,
						round(l_cur_job_qty*l_v_comp(l_in).qpa, 6)
					from    wip_operations wo,
						mtl_system_items msi
					where   wo.operation_seq_num = l_v_comp(l_in).job_op_seq_num
					and     wo.wip_entity_id= p_wip_entity_id
					and     msi.inventory_item_id = l_v_comp(l_in).item_id
					and     msi.organization_id = wo.organization_id
					and     msi.organization_id = p_org_id;
				    end if;
				end if; -- WSM_SUB_DEL AND ADD
			    else
				fnd_file.put_line(fnd_file.log,
				'Warning: Deleting or Adding components for executed operations '||
				'is currently not supported and ignored.');
			    end if;  --current operation
			ELSIF (l_rtg_op_seq_num IS NOT NULL) THEN
			    IF (l_sub_type=WSM_SUB_DEL) THEN
				l_in := 1;
				l_v_comp.delete;
				l_v_comp(l_in).rtg_op_seq_num   := l_rtg_op_seq_num;
				l_v_comp(l_in).item_id          := l_item_id;
				l_v_comp(l_in).item_old_id      := l_item_old_id;
				l_v_comp(l_in).src_phm_item_id :=v_wljdi_src_phantom_item_id(l_d);
				l_v_comp(l_in).wip_supply_type  := v_wljdi_wip_supply_type(l_d);
			      --l_v_comp(l_in).primary_item_id  := l_primary_item_id;
			      --l_v_comp(l_in).date_required    := v_wljdi_date_required(l_d);
			      --l_v_comp(l_in).required_qty     := v_wljdi_required_quantity(l_d);
	l_stmt_num := 750.21;

				validate_wljdi_op_component(
				    p_wip_entity_id     => p_wip_entity_id,
				    p_org_id            => p_org_id,
				    p_v_comp            => l_v_comp,
				    p_substitution_type => l_sub_type,
				    p_handle_wip_cur_op => 'N',
				    x_error_code        => p_error_code,
				    x_error_msg         => p_error_msg);

				if p_error_code <> 0 then
				    raise e_wljdi_common_error;
				end if;

				if v_wljdi_src_phantom_item_id(l_d)=0 then
				    delete  wsm_copy_requirement_ops
				    where  operation_seq_num=(-1)*l_rtg_op_seq_num
				    and  wip_entity_id =p_wip_entity_id
				    and  component_item_id =l_item_old_id;
				else
				    delete  wsm_copy_requirement_ops
				    where  operation_seq_num=l_rtg_op_seq_num
				    and  wip_entity_id =p_wip_entity_id
				    and  component_item_id =l_item_old_id;
				end if;

			ELSIF (l_sub_type=WSM_SUB_ADD) THEN
	l_stmt_num:=79.9;
			    l_in := 1;
			    l_v_comp.delete;
			    l_v_comp(l_in).rtg_op_seq_num   := l_rtg_op_seq_num;
			    l_v_comp(l_in).item_id          := l_item_id;
			    l_v_comp(l_in).date_required    := v_wljdi_date_required(l_d);
			    l_v_comp(l_in).required_qty     := v_wljdi_required_quantity(l_d);
			    l_v_comp(l_in).wip_supply_type  := v_wljdi_wip_supply_type(l_d);
			    l_v_comp(l_in).qpa                  := v_wljdi_quantity_per_assembly(l_d);
			    l_v_comp(l_in).supply_subinventory  := v_wljdi_supply_subinventory(l_d);
			    l_v_comp(l_in).supply_locator       := v_wljdi_supply_locator_id(l_d);
			    l_v_comp(l_in).mrp_net_flag         := v_wljdi_mrp_net_flag(l_d);
			    l_v_comp(l_in).src_phm_item_id    := v_wljdi_src_phantom_item_id(l_d);

	l_stmt_num := 750.2;
			    validate_wljdi_op_component(
				p_wip_entity_id     => p_wip_entity_id,
				p_org_id            => p_org_id,
				p_v_comp            => l_v_comp,
				p_substitution_type => l_sub_type,
				p_handle_wip_cur_op => 'N',
				x_error_code        => p_error_code,
				x_error_msg         => p_error_msg);
			    if p_error_code <> 0 then
				raise e_wljdi_common_error;
			    end if;

			     INSERT INTO WSM_COPY_REQUIREMENT_OPS
			     (wip_entity_id,
			      operation_seq_num,
			      component_item_id,
			      primary_component_id,
			      component_sequence_id,
			      source_phantom_id,
			      bill_sequence_id,
			      effectivity_date,
			      planning_factor,
			      quantity_related,
			      include_in_cost_rollup,
			      check_atp,
			      bom_item_type,
			      recommended,
			      reco_date_required,
			      department_id,
			      organization_id,
			      wip_supply_type,
			      supply_subinventory,
			      supply_locator_id,
			      quantity_per_assembly,
			      bill_quantity_per_assembly,
			      component_yield_factor,
			      component_remarks,
			      last_update_date,
			      last_updated_by,
			      last_update_login,
			      creation_date,
			      created_by,
			      request_id,
			      program_application_id,
			      program_id,
			      program_update_date,
			      attribute_category,
			      attribute1,
			      attribute2,
			      attribute3,
			      attribute4,
			      attribute5,
			      attribute6,
			      attribute7,
			      attribute8,
			      attribute9,
			      attribute10,
			      attribute11,
			      attribute12,
			      attribute13,
			      attribute14,
			      attribute15)
			      select
			       p_wip_entity_id,
			       decode(l_v_comp(l_in).wip_supply_type, WIP_CONSTANTS.PHANTOM,(-1*l_rtg_op_seq_num),l_rtg_op_seq_num),
			       l_v_comp(l_in).item_id,
			       decode(nvl(v_wljdi_src_phantom_item_id(l_d),-1),-1,l_v_comp(l_in).item_id,
									0,l_v_comp(l_in).item_id, v_wljdi_src_phantom_item_id(l_d)),
			       -1,               -- Since not in bill
			       decode(nvl(v_wljdi_src_phantom_item_id(l_d),-1), 0 , l_v_comp(l_in).item_id,
									       -1, -1, v_wljdi_src_phantom_item_id(l_d)),
			       -1,               -- Since not in bill
			       p_creation_date,  -- Effective as on created date for job
			       0,                -- Since it's not a planned component
			       2,                -- No quantity relation
			       1,                -- Include in cost rollup
			       2,                -- No ATP
			       4,                -- Standard component
			       v_wljdi_recommended(l_d),
			       l_v_comp(l_in).date_required,
			       wco.department_id,
			       p_org_id,
			       l_v_comp(l_in).wip_supply_type,
			       l_v_comp(l_in).supply_subinventory,
			       l_v_comp(l_in).supply_locator,
			       l_v_comp(l_in).qpa,
			       l_v_comp(l_in).qpa,
			       l_v_comp(l_in).component_yield,
			       v_wljdi_comments(l_d),
			       p_last_updt_date,
			       p_last_updt_by,
			       p_last_updt_login,
			       p_creation_date,
			       p_created_by,
			       p_request_id,
			       p_program_appl_id,
			       p_program_id,
			       p_prog_updt_date,
			       v_wljdi_attribute_category(l_d),
			       v_wljdi_attribute1(l_d),
			       v_wljdi_attribute2(l_d),
			       v_wljdi_attribute3(l_d),
			       v_wljdi_attribute4(l_d),
			       v_wljdi_attribute5(l_d),
			       v_wljdi_attribute6(l_d),
			       v_wljdi_attribute7(l_d),
			       v_wljdi_attribute8(l_d),
			       v_wljdi_attribute9(l_d),
			       v_wljdi_attribute10(l_d),
			       v_wljdi_attribute11(l_d),
			       v_wljdi_attribute12(l_d),
			       v_wljdi_attribute13(l_d),
			       v_wljdi_attribute14(l_d),
			       v_wljdi_attribute15(l_d)
			      from
			      wsm_copy_operations wco
			      where wco.wip_entity_id = p_wip_entity_id
			      and wco.organization_id = p_org_id
			      and wco.operation_seq_num= l_rtg_op_seq_num;

			END IF;
		    END if;
            elsif l_sub_type in (WSM_SUB_CHG, WSM_SUB_REC) then

                -- {{ Update WIP table
                if(l_job_op_seq_num IS NOT NULL) then
                    if(l_job_op_seq_num = l_cur_job_op_seq_num) then
l_stmt_num := 550.1;
                        -- pack data into PL/SQL table l_v_comp for validation
                        -- for current operation src_phantom_item_id is ignored
                        -- bacause we insert consolidated componet info into WRO
                        -- also, only item in WRO can be updated/recommeded
                        l_in := 1;
                        l_v_comp.delete;
                        l_v_comp(l_in).job_op_seq_num   := l_job_op_seq_num;
                        l_v_comp(l_in).item_id          := l_item_id;
                        l_v_comp(l_in).primary_item_id  := l_primary_item_id;
                        l_v_comp(l_in).date_required    := v_wljdi_date_required(l_d);
                        l_v_comp(l_in).required_qty     := v_wljdi_required_quantity(l_d);
l_stmt_num := 550.2;
                        validate_wljdi_op_component(
                            p_wip_entity_id     => p_wip_entity_id,
                            p_org_id            => p_org_id,
                            p_v_comp            => l_v_comp,
                            p_substitution_type => l_sub_type,
                            p_handle_wip_cur_op => 'Y',
                            x_error_code        => p_error_code,
                            x_error_msg         => p_error_msg);
                        if p_error_code <> 0 then
                            raise e_wljdi_common_error;
                        end if;

l_stmt_num := 550.3;
                        UPDATE WIP_REQUIREMENT_OPERATIONS
                        set     date_required           = l_v_comp(l_in).date_required,
                                last_update_date        = p_last_updt_date,
                                last_updated_by         = p_last_updt_by,
                                last_update_login       = p_last_updt_login,
                                request_id              = p_request_id,
                                program_application_id  = p_program_appl_id,
                                program_id              = p_program_id,
                                program_update_date     = p_prog_updt_date,
                                attribute_category = v_wljdi_attribute_category(l_d),
                                attribute1 = v_wljdi_attribute1(l_d) ,
                                attribute2 = v_wljdi_attribute2(l_d) ,
                                attribute3 = v_wljdi_attribute3(l_d) ,
                                attribute4 = v_wljdi_attribute4(l_d) ,
                                attribute5 = v_wljdi_attribute5(l_d),
                                attribute6 = v_wljdi_attribute6(l_d) ,
                                attribute7 = v_wljdi_attribute7(l_d) ,
                                attribute8 = v_wljdi_attribute8(l_d),
                                attribute9 = v_wljdi_attribute9(l_d) ,
                                attribute10 = v_wljdi_attribute10(l_d),
                                attribute11 = v_wljdi_attribute11(l_d),
                                attribute12 = v_wljdi_attribute12(l_d),
                                attribute13 = v_wljdi_attribute13(l_d),
                                attribute14 = v_wljdi_attribute14(l_d),
                                attribute15 = v_wljdi_attribute15(l_d)
                        where   wip_entity_id     = p_wip_entity_id
                        and     organization_id   = p_org_id
                        and     operation_seq_num = l_job_op_seq_num
                        and     inventory_item_id = l_item_id;

                    else -- l_job_op_seq_num <> l_cur_job_op_seq_num
                        -- this can happen when recommendations arrive after the job is moved.
                        -- OSFM will give a warning message, and ignore this record
                        fnd_file.put_line(fnd_file.log,
                            'Warning: component recommendations for current operation are ignored ' ||
                            '(record_id = ' || l_d || ').' );
                    end if;
                -- }} Update WIP table

                -- {{ Update WSM_COPY table
                elsif(l_rtg_op_seq_num IS NOT NULL) then
l_stmt_num := 560.1;
                    -- pack data into PL/SQL table l_v_comp for validation
                    if(l_src_phm_item_id IS NULL) then
                        l_component_seq_id := NULL;
                    end if;
                    l_in := 1;
                    l_v_comp.delete;
                    l_v_comp(l_in).rtg_op_seq_num   := l_rtg_op_seq_num;
                    l_v_comp(l_in).item_id          := l_item_id;
                    l_v_comp(l_in).primary_item_id  := l_primary_item_id;
                    l_v_comp(l_in).src_phm_item_id  := l_src_phm_item_id;
                    l_v_comp(l_in).component_seq_id := l_component_seq_id;
                    l_v_comp(l_in).date_required    := v_wljdi_date_required(l_d);
                    l_v_comp(l_in).required_qty     := v_wljdi_required_quantity(l_d);
                    l_v_comp(l_in).component_yield  := NULL;

                    -- handle phantom components, l_component_seq_id is required
                    if(l_src_phm_item_id IS NOT NULL) then

l_stmt_num := 560.2;
                        SELECT  nvl(use_phantom_routings, 0)
                        INTO    l_use_phantom_routings
                        FROM    BOM_PARAMETERS
                        WHERE   ORGANIZATION_ID = p_org_id;

                        IF (l_use_phantom_routings = 1 and l_sub_type = WSM_SUB_REC) THEN
                            fnd_message.set_name('WSM','WSM_COMP_USE_PHANTOM_RTG');
                            p_error_msg := fnd_message.get;
                            p_error_code := -1;
                            raise e_wljdi_common_error;
                        end if;

                        if(l_component_seq_id IS NULL) then
                            raise e_null_comp_seq_id;
                        end if;

                        -- should send all the component with the same l_src_phm_item_id
                        -- hence, a local search should be done
                        -- this local search will change index l_d
                        l_temp := v_wljdi_record_id.next(l_d);
                        while(l_temp IS NOT NULL and
                              v_wljdi_load_type(l_temp)           = l_load_type and
                              v_wljdi_substitution_type(l_temp)   = l_sub_type and
                              v_wljdi_routing_op_seq_num(l_temp)  = l_rtg_op_seq_num and
                              v_wljdi_src_phantom_item_id(l_temp) = l_src_phm_item_id)
                        loop
                            l_d := l_temp;
                            l_component_seq_id := v_wljdi_component_sequence_id(l_d);
                            if(l_component_seq_id IS NULL) then
                                raise e_null_comp_seq_id;
                            end if;
                            l_in := l_in +1;
                            l_v_comp(l_in).rtg_op_seq_num   := l_rtg_op_seq_num;
                            l_v_comp(l_in).item_id          := v_wljdi_inventory_item_id_new(l_d) ;
                            l_v_comp(l_in).primary_item_id  := l_primary_item_id;
                            l_v_comp(l_in).src_phm_item_id  := l_src_phm_item_id;
                            l_v_comp(l_in).component_seq_id := l_component_seq_id;
                            l_v_comp(l_in).date_required    := v_wljdi_date_required(l_d);
                            l_v_comp(l_in).required_qty     := v_wljdi_required_quantity(l_d);
                            l_v_comp(l_in).component_yield  := NULL;
                            l_temp := v_wljdi_record_id.next(l_d);
                        end loop;
                    end if;

l_stmt_num := 560.3;
                    validate_wljdi_op_component(
                        p_wip_entity_id     => p_wip_entity_id,
                        p_org_id            => p_org_id,
                        p_v_comp            => l_v_comp,
                        p_substitution_type => l_sub_type,
                        p_handle_wip_cur_op => 'N',
                        x_error_code        => p_error_code,
                        x_error_msg         => p_error_msg);
                    if p_error_code <> 0 then
                        raise e_wljdi_common_error;
                    end if;

l_stmt_num := 560.4;
                    -- save validated data into an array for balk update
                    if(l_sub_type = WSM_SUB_CHG) then
                        l_reco_flag := NULL;
                    elsif(l_sub_type = WSM_SUB_REC) then
                        l_reco_flag := 'Y';
                    end if;

                    l_in := l_v_comp.first;
                    while (l_in IS NOT NULL)
                    loop
                        l_v_rtg_op_seq (l_out)      := l_v_comp(l_in).rtg_op_seq_num;
                        l_v_comp_item_id(l_out)     := l_v_comp(l_in).item_id;
                        l_v_comp_prm_item_id(l_out) := l_v_comp(l_in).primary_item_id;
                        l_v_comp_phm_item_id(l_out) := l_v_comp(l_in).src_phm_item_id;
                        l_v_comp_comp_seq_id(l_out) := l_v_comp(l_in).component_seq_id;
                        l_v_comp_reqd_date(l_out)   := l_v_comp(l_in).date_required;
                        l_v_comp_yield(l_out)       := l_v_comp(l_in).component_yield;
                        l_v_comp_qpa(l_out)         := l_v_comp(l_in).qpa;  -- ADD bug 3347985
                        l_v_recoflag(l_out)         := l_reco_flag;
                        l_v_attribute_category(l_out) :=v_wljdi_attribute_category(l_d);
                        l_v_attribute1(l_out)   := v_wljdi_attribute1(l_d) ;
                        l_v_attribute2(l_out)   := v_wljdi_attribute2(l_d) ;
                        l_v_attribute3(l_out)   := v_wljdi_attribute3(l_d) ;
                        l_v_attribute4(l_out)   := v_wljdi_attribute4(l_d) ;
                        l_v_attribute5(l_out)   := v_wljdi_attribute5(l_d) ;
                        l_v_attribute6(l_out)   := v_wljdi_attribute6(l_d) ;
                        l_v_attribute7(l_out)   := v_wljdi_attribute7(l_d) ;
                        l_v_attribute8(l_out)   := v_wljdi_attribute8(l_d) ;
                        l_v_attribute9(l_out)   := v_wljdi_attribute9(l_d) ;
                        l_v_attribute10(l_out) := v_wljdi_attribute10(l_d);
                        l_v_attribute11(l_out) := v_wljdi_attribute11(l_d);
                        l_v_attribute12(l_out) := v_wljdi_attribute12(l_d);
                        l_v_attribute13(l_out) := v_wljdi_attribute13(l_d);
                        l_v_attribute14(l_out) := v_wljdi_attribute14(l_d);
                        l_v_attribute15(l_out) := v_wljdi_attribute15(l_d);
                        l_out := l_out +1;
                        l_in  := l_v_comp.next(l_in);
                    end loop;

                    if(l_sub_type = WSM_SUB_REC) then
l_stmt_num := 560.5;
                        -- get the discommended components
                        l_v_disco_item_id.delete;
                        l_v_disco_comp_seq_id.delete;
                        l_v_disco_src_phm_id.delete;
                        open c_disco_comp(
                            p_wip_entity_id,
                            l_rtg_op_seq_num,
                            l_item_id,
                            l_primary_item_id,
                            l_src_phm_item_id);
                        fetch c_disco_comp bulk collect into
                            l_v_disco_item_id,
                            l_v_disco_comp_seq_id,
                            l_v_disco_src_phm_id;
                        if(c_disco_comp%rowcount > 0) then
                            l_in := l_v_disco_item_id.first;
                            while(l_in IS NOT NULL)
                            loop
                                l_v_rtg_op_seq(l_out)       := l_rtg_op_seq_num;
                                l_v_comp_item_id(l_out)     := l_v_disco_item_id(l_in);
                                l_v_comp_prm_item_id(l_out) := l_primary_item_id;
                                l_v_comp_phm_item_id(l_out) := l_v_disco_src_phm_id(l_in);
                                l_v_comp_comp_seq_id(l_out) := l_v_disco_comp_seq_id(l_in);
                                l_v_comp_yield(l_out)       := NULL;
                                l_v_comp_qpa(l_out)         := NULL; -- ADD bug 3347985
                                l_v_comp_reqd_date(l_out)   := NULL;
                                l_v_recoflag(l_out)         := 'N';
                                l_v_attribute_category(l_out) :=NULL;
                                l_v_attribute1(l_out)   := NULL;
                                l_v_attribute2(l_out)   := NULL;
                                l_v_attribute3(l_out)   := NULL;
                                l_v_attribute4(l_out)   := NULL;
                                l_v_attribute5(l_out)   := NULL;
                                l_v_attribute6(l_out)   := NULL;
                                l_v_attribute7(l_out)   := NULL;
                                l_v_attribute8(l_out)   := NULL;
                                l_v_attribute9(l_out)   := NULL;
                                l_v_attribute10(l_out) := NULL;
                                l_v_attribute11(l_out) := NULL;
                                l_v_attribute12(l_out) := NULL;
                                l_v_attribute13(l_out) := NULL;
                                l_v_attribute14(l_out) := NULL;
                                l_v_attribute15(l_out) := NULL;
                                l_out := l_out +1;
                                l_in := l_v_disco_item_id.next(l_in);
                            end loop;
                        end if;
                        close c_disco_comp;
                    end if;  -- l_sub_type = WSM_SUB_REC
                end if;     -- l_rtg_op_seq_num IS NOT NULL
                -- }} Update WSM_COPY table

            end if; -- l_sub_type in (WSM_SUB_CHG, WSM_SUB_REC)

            l_d := v_wljdi_record_id.next(l_d);
        end loop;

l_stmt_num := 570;
        -- Update WCRO
        if(l_v_rtg_op_seq.first IS NOT NULL) then
            forall i in l_v_rtg_op_seq.first..l_v_rtg_op_seq.last

                -- Note: wcro.source_phantom_id is a NOT NULL column now,
                --       l_v_comp_phm_item_id(i) can be null or -1,
                --       should treate them as the same,

                update  wsm_copy_requirement_ops
                set     reco_date_required      = NVL(l_v_comp_reqd_date(i), reco_date_required),
                        component_yield_factor  = nvl(l_v_comp_yield(i), component_yield_factor),
                        quantity_per_assembly   = nvl(l_v_comp_qpa(i), quantity_per_assembly), -- ADD bug 3347985
                        recommended             = NVL(l_v_recoflag(i), recommended),
                        last_update_date        = p_last_updt_date,
                        last_updated_by         = p_last_updt_by,
                        last_update_login       = p_last_updt_login,
                        request_id              = p_request_id,
                        program_application_id  = p_program_appl_id,
                        program_id              = p_program_id,
                        program_update_date     = p_prog_updt_date,
                        attribute_category = nvl(attribute_category,l_v_attribute_category(i)),
                        attribute1 = nvl(attribute1,l_v_attribute1(i)),
                        attribute2 = nvl(attribute2,l_v_attribute2(i)),
                        attribute3 = nvl(attribute3,l_v_attribute3(i)),
                        attribute4 = nvl(attribute4,l_v_attribute4(i)),
                        attribute5 = nvl(attribute5,l_v_attribute5(i)),
                        attribute6 = nvl(attribute6,l_v_attribute6(i)),
                        attribute7 = nvl(attribute7,l_v_attribute7(i)),
                        attribute8 = nvl(attribute8,l_v_attribute8(i)),
                        attribute9 = nvl(attribute9,l_v_attribute9(i)),
                        attribute10 = nvl(attribute10,l_v_attribute10(i)),
                        attribute11 = nvl(attribute11,l_v_attribute11(i)),
                        attribute12 = nvl(attribute12,l_v_attribute12(i)),
                        attribute13 = nvl(attribute13,l_v_attribute13(i)),
                        attribute14 = nvl(attribute14,l_v_attribute14(i)),
                        attribute15 = nvl(attribute15,l_v_attribute15(i))
                where   wip_entity_id         = p_wip_entity_id
                and     operation_seq_num     = l_v_rtg_op_seq(i)
                and     component_item_id     = l_v_comp_item_id(i)
                and     primary_component_id  = l_v_comp_prm_item_id(i)
                --and   nvl(source_phantom_id, -1)
                --          = nvl(nvl(l_v_comp_phm_item_id(i), source_phantom_id), -1)
                and     source_phantom_id = nvl(l_v_comp_phm_item_id(i), -1)
                and     component_sequence_id = decode(l_v_comp_phm_item_id(i),
                                                       null, component_sequence_id,
                                                       -1, component_sequence_id,
                                                       l_v_comp_comp_seq_id(i));
        end if;
        if lbji_debug = 'Y' then
            fnd_file.put_line(fnd_file.log, 'Mark recommended operation components ... OK.');
        end if;

    end if;
    ------------------------------------------------
    -- }} validete component
    ------------------------------------------------


EXCEPTION
    when e_invalid_recommend_path then
        ROLLBACK to start_import_details;
        fnd_message.set_name('WSM','WSM_INVALID_RECO_LINK');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                    || fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,
            substr('import_lot_job_details: (#'||l_stmt_num||') '
                   || p_error_msg, 1, 2000));

    when e_invalid_discommend_path then
        ROLLBACK to start_import_details;
        fnd_message.set_name('WSM','WSM_INVALID_DISCO_LINK');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                       || fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,
            substr('import_lot_job_details: (#'||l_stmt_num||') '
                   || p_error_msg, 1, 2000));


    when e_invalid_sub_load_type then
        ROLLBACK to start_import_details;
        fnd_message.set_name('WSM','WSM_INVALID_FIELD');
        fnd_message.set_token('FLD_NAME', 'load_type and substitution_type');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                       || fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,
            substr('import_lot_job_details: (#'||l_stmt_num||') '
                   || p_error_msg, 1, 2000));

    when e_invalid_op_seq_num then
        ROLLBACK to start_import_details;
        fnd_message.set_name('WSM','WSM_NULL_FIELD');
        fnd_message.set_token('FLD_NAME', 'job_op_seq_num and routing_op_seq_num');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                       || fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,
            substr('import_lot_job_details: (#'||l_stmt_num||') '
                   || p_error_msg, 1, 2000));

    when e_invalid_resource_name then
        ROLLBACK to start_import_details;
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                    || 'Error: Cannot get resource_id from resource name';
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,
            substr('import_lot_job_details: (#'||l_stmt_num||') '
                   || p_error_msg, 1, 2000));

    when e_null_comp_seq_id then
        ROLLBACK to start_import_details;
        fnd_message.set_name('WSM','WSM_NULL_FIELD');
        fnd_message.set_token('FLD_NAME', 'component_seq_id');
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                       || fnd_message.get;
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,
            substr('import_lot_job_details: (#'||l_stmt_num||') '
                   || p_error_msg, 1, 2000));

    when e_invalid_item_name then
        ROLLBACK to start_import_details;
        p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                       || 'Error: Cannot get item_id from item name';
        p_error_code := -1;
        fnd_file.put_line(fnd_file.log,
            substr('import_lot_job_details: (#'||l_stmt_num||') '
                   || p_error_msg, 1, 2000));

    when e_wljdi_common_error then
        ROLLBACK to start_import_details;
        -- p_error_code/p_error_msg was set
        if(l_d IS NOT NULL) then
            p_error_msg := 'WLJDI(record_id =' || v_wljdi_record_id(l_d) || ') '
                           || p_error_msg;
        end if;
        fnd_file.put_line(fnd_file.log,
            substr('import_lot_job_details: (#'||l_stmt_num||') '
                   || p_error_msg, 1, 2000));

    when others then
        ROLLBACK to start_import_details;
        p_error_code := SQLCODE;
        p_error_msg := substr('import_lot_job_details: (#'||l_stmt_num||') '
                              ||SQLERRM, 1, 2000);
        fnd_file.put_line(fnd_file.log, p_error_msg);
END import_lot_job_details;




-- **********************************************************************************************
-- PROCEDURE load_wsli_data
-- **********************************************************************************************

PROCEDURE load_wsli_data (p_group_id IN NUMBER) IS

-- ==============================================================================================
-- cursors used to bulk bind data from wsli to PL/SQL tables
-- ==============================================================================================
cursor c_wsli_1 is
select
        wsli.header_id,
        wsli.lot_number,
        wsli.inventory_item_id,
        wsli.organization_id,
        wsli.quantity,
        wsli.subinventory_code,
        wsli.locator_id,
        wsli.revision,
        wsli.last_updated_by,
        wsli.created_by,
        msi.primary_uom_code,
        wsli.component_issue_quantity
from    wsm_starting_lots_interface wsli,
        wsm_lot_job_interface wlji,
        mtl_system_items msi
where   wsli.header_id = wlji.source_line_id
and     wlji.group_id = p_group_id
and     wlji.process_status = 2 -- WIP_CONSTANTS.running
and     wlji.mode_flag = 2
and     msi.inventory_item_id = wsli.inventory_item_id
and     msi.organization_id = wsli.organization_id;

BEGIN

-- ==============================================================================================
-- bulk fetching data from wsli to PL/SQL tables
-- ==============================================================================================
    open c_wsli_1;
    fetch c_wsli_1 bulk collect into
        v_wsli_hdr_id,
        v_wsli_lot_number,
        v_wsli_inventory_item_id,
        v_wsli_organization_id,
        v_wsli_quantity,
        v_wsli_subinventory_code,
        v_wsli_locator_id,
        v_wsli_revision,
        v_wsli_last_updated_by,
        v_wsli_created_by,
        v_wsli_primary_uom_code,
        v_wsli_comp_issue_qty;

-- ==============================================================================================
-- transfering wsli data into index by PL/SQL table for ease of validation
-- ==============================================================================================
    v_wsli_idx := v_wsli_hdr_id.first;
    while v_wsli_idx <= v_wsli_hdr_id.last
    loop
        v_wsli(v_wsli_hdr_id(v_wsli_idx)).lot_number          := v_wsli_lot_number(v_wsli_idx);
        v_wsli(v_wsli_hdr_id(v_wsli_idx)).inventory_item_id   := v_wsli_inventory_item_id(v_wsli_idx);
        v_wsli(v_wsli_hdr_id(v_wsli_idx)).organization_id     := v_wsli_organization_id(v_wsli_idx);
        v_wsli(v_wsli_hdr_id(v_wsli_idx)).quantity            := v_wsli_quantity(v_wsli_idx);
        v_wsli(v_wsli_hdr_id(v_wsli_idx)).subinventory_code   := v_wsli_subinventory_code(v_wsli_idx);
        v_wsli(v_wsli_hdr_id(v_wsli_idx)).locator_id          := v_wsli_locator_id(v_wsli_idx);
        v_wsli(v_wsli_hdr_id(v_wsli_idx)).revision            := v_wsli_revision(v_wsli_idx);
        v_wsli(v_wsli_hdr_id(v_wsli_idx)).last_updated_by     := v_wsli_last_updated_by(v_wsli_idx);
        v_wsli(v_wsli_hdr_id(v_wsli_idx)).created_by          := v_wsli_created_by(v_wsli_idx);
        v_wsli(v_wsli_hdr_id(v_wsli_idx)).primary_uom_code    := v_wsli_primary_uom_code(v_wsli_idx);
        v_wsli(v_wsli_hdr_id(v_wsli_idx)).comp_issue_quantity := v_wsli_comp_issue_qty(v_wsli_idx);

        v_wsli_idx := v_wsli_hdr_id.next(v_wsli_idx);
    end loop;

    close c_wsli_1;

END load_wsli_data;



-- **********************************************************************************************
-- PROCEDURE check_errored_mmtt_records
-- **********************************************************************************************

PROCEDURE check_errored_mmtt_records (
        p_header_id         in number,
        x_err_code          out nocopy number,
        x_err_msg           out nocopy varchar2) is
l_transaction_temp_id   NUMBER;
l_wsli_header_id        NUMBER;
l_wlji_header_id        NUMBER;
l_interface_id          NUMBER;
l_err_code              VARCHAR2(240);
l_err_explanation       VARCHAR2(240);
l_stmt_num              NUMBER;

cursor recs is
        select  mmtt.transaction_temp_id,
                mmtt.error_code,
                mmtt.error_explanation,
                wsli.header_id,
                wlji.header_id
        from    mtl_material_transactions_temp mmtt,
                wsm_starting_lots_interface wsli,
                wsm_lot_job_interface wlji
        where   mmtt.transaction_header_id = p_header_id
        and     mmtt.source_line_id = wsli.header_id
        and     wsli.header_id = wlji.source_line_id;
BEGIN

    open recs;
    loop
        fetch recs
        into    l_transaction_temp_id,
                l_err_code,
                l_err_explanation,
                l_wsli_header_id,
                l_wlji_header_id;

        exit when recs%notfound;

        update  wsm_lot_job_interface wljia
        set     wljia.process_status = 4,
                wljia.error_code = -2,
                wljia.error_msg = substr(l_err_explanation,1,240)
        where   wljia.header_id = l_wlji_header_id;

        x_err_code := -2;
    close recs;
    END LOOP;

EXCEPTION

    when others then
        x_err_code := SQLCODE;
        x_err_msg := 'check_errored_mmtt_records' ||
                     '(#'||l_stmt_num||'), (Header_Id=' || l_wlji_header_id||') '
                     || SUBSTRB(SQLERRM,1,1000);
END check_errored_mmtt_records;






-- **********************************************************************************************
-- FUNCTION DISCRETE_CHARGES_EXIST
-- **********************************************************************************************


FUNCTION discrete_charges_exist(
        p_wip_entity_id         in  number,
        p_organization_id       in  number,
        p_check_mode            in  number )
return boolean is

retnvalue       boolean;
charges_exist   varchar2(2);
l_stmt_num      number;

cursor check_discrete_charges is
        select  distinct 'x'
        from    wip_discrete_jobs   wdj,
                wip_period_balances wpb
        where   wdj.wip_entity_id = wpb.wip_entity_id
                and wdj.organization_id = wpb.organization_id
                and wdj.wip_entity_id = p_wip_entity_id
                and wdj.organization_id = p_organization_id
                and (  wdj.quantity_completed <> 0
                    or wdj.quantity_scrapped <> 0
                    or wpb.tl_resource_in <> 0
                    or wpb.tl_overhead_in <> 0
                    or wpb.tl_outside_processing_in <> 0
                    or wpb.pl_material_in <> 0
                    or wpb.pl_material_overhead_in <> 0
                    or wpb.pl_resource_in <> 0
                    or wpb.pl_overhead_in <> 0
                    or wpb.pl_outside_processing_in <> 0
                    or wpb.tl_material_out <> 0
                    or wpb.tl_resource_out <> 0
                    or wpb.tl_overhead_out <> 0
                    or wpb.tl_outside_processing_out <> 0
                    or wpb.pl_material_out <> 0
                    or wpb.pl_material_overhead_out <> 0
                    or wpb.pl_resource_out <> 0
                    or wpb.pl_overhead_out <> 0
                    or wpb.pl_outside_processing_out <> 0
                    or exists (
                        select 'x'
                        from   wip_requirement_operations
                        where  organization_id = p_organization_id
                        and    wip_entity_id = p_wip_entity_id
                        and    quantity_issued <> 0)
                    or exists (
                        select 'x'
                        from   wip_move_txn_interface
                        where  organization_id = p_organization_id
                        and    wip_entity_id = p_wip_entity_id)
                    or exists (
                        select 'x'
                        from   wsm_lot_move_txn_interface
                        where  organization_id = p_organization_id
                        and    wip_entity_id = p_wip_entity_id)
                    or exists (
                        select 'x'
                        from   wip_cost_txn_interface
                        where  organization_id = p_organization_id
                        and    wip_entity_id = p_wip_entity_id)
                    or exists (
                        select 'x'
                        from   mtl_material_transactions_temp
                        where  organization_id = p_organization_id
                        and    transaction_source_type_id = 5
                        and    transaction_source_id = p_wip_entity_id)
                    or exists (
                        select 'x'
                        from   wip_move_transactions
                        where  organization_id = p_organization_id
                        and    wip_entity_id = p_wip_entity_id)
                    /* ST bug fix 3493984 : commented this code */
            /*or exists (
                        select 'x'
                        from   wsm_sm_resulting_jobs
                        where  organization_id = p_organization_id
                        and    wip_entity_id = p_wip_entity_id) */
            /* ST bug fix 3493984 : Added code to consider only successful WIP lot transactions */
            or exists (
                select 'x'
                        from  wsm_sm_resulting_jobs wsrj
                        where  wsrj.organization_id = p_organization_id
                        and    wsrj.wip_entity_id = p_wip_entity_id
            and    exists (select transaction_id
                       from wsm_split_merge_transactions wsmt
                       where wsmt.transaction_id = wsrj.transaction_id
                       and wsmt.status = 4 )
                )
           /* ST bug fix 3493984 : end */
           or exists (
                        select 'x'
                        from   wip_operation_resources
                        where  organization_id = p_organization_id
                        and    wip_entity_id = p_wip_entity_id
                        and    applied_resource_units <> 0));

--check for only shop floor transactions

cursor check_discrete_charges_1 is
        select  distinct 'x'
        from    wip_discrete_jobs   wdj,
                wip_period_balances wpb
        where   wdj.wip_entity_id = wpb.wip_entity_id
                and wdj.organization_id = wpb.organization_id
                and wdj.wip_entity_id = p_wip_entity_id
                and wdj.organization_id = p_organization_id
                and (  wdj.quantity_completed <> 0
                    or wdj.quantity_scrapped <> 0
                    or wpb.tl_resource_in <> 0
                    or wpb.tl_overhead_in <> 0
                    or wpb.tl_outside_processing_in <> 0
                    or wpb.pl_resource_in <> 0
                    or wpb.pl_overhead_in <> 0
                    or wpb.pl_outside_processing_in <> 0
                    or wpb.tl_resource_out <> 0
                    or wpb.tl_overhead_out <> 0
                    or wpb.tl_outside_processing_out <> 0
                    or wpb.pl_resource_out <> 0
                    or wpb.pl_overhead_out <> 0
                    or wpb.pl_outside_processing_out <> 0
                    or exists (
                        select 'x'
                        from   wip_move_txn_interface
                        where  organization_id = p_organization_id
                        and    wip_entity_id = p_wip_entity_id)
                    or exists (
                        select 'x'
                        from   wsm_lot_move_txn_interface
                        where  organization_id = p_organization_id
                        and    wip_entity_id = p_wip_entity_id)
                    or exists (
                        select 'x'
                        from   wip_cost_txn_interface
                        where  organization_id = p_organization_id
                        and    wip_entity_id = p_wip_entity_id)
                    or exists (
                        select 'x'
                        from   wip_move_transactions
                        where  organization_id = p_organization_id
                        and    wip_entity_id = p_wip_entity_id)
                    or exists (
                        select 'x'
                        from   wsm_sm_resulting_jobs
                        where  organization_id = p_organization_id
                        and    wip_entity_id = p_wip_entity_id)
                    or exists (
                        select 'x'
                        from   wip_operation_resources
                        where  organization_id = p_organization_id
                        and    wip_entity_id = p_wip_entity_id
                        and    applied_resource_units <> 0));
BEGIN

    retnvalue := FALSE;

    if (p_check_mode = 1) then
        open check_discrete_charges_1;
        fetch check_discrete_charges_1 into charges_exist;

        IF (check_discrete_charges_1%FOUND) THEN
            retnvalue := TRUE;
            close  check_discrete_charges_1;
            RETURN retnvalue;
        ELSE
            close  check_discrete_charges_1;
        END IF;

    else
        open check_discrete_charges;
        fetch check_discrete_charges into charges_exist;

        IF (check_discrete_charges%FOUND) THEN
            retnvalue := TRUE;
            close  check_discrete_charges;
            RETURN retnvalue;
        ELSE
            close  check_discrete_charges;
        END IF;

    end if;

    RETURN retnvalue;

END discrete_charges_exist;



-- **********************************************************************************************
-- PROCEDURE insert_into_period_balances
-- **********************************************************************************************

PROCEDURE insert_into_period_balances (
        p_wip_entity_id         in number,
        p_organization_id       in number,
        p_class_code            in varchar2,
        p_release_date          in date,
        p_error_code            out nocopy number,
        p_err_msg               out nocopy varchar2 ) is

x_user_id       number := fnd_global.user_id;
x_login_id      number := fnd_global.login_id;
--l_inv_period_id number;   -- BUG3126650
l_cnt           number;     -- bug 3571360

BEGIN

    -- BD: bugfix 3299811, this is a regression of bugfix 3126650
    --l_inv_period_id := wsmputil.get_inv_acct_period (
    --        x_err_code         => p_error_code,
    --        x_err_msg          => p_err_msg,
    --        p_organization_id  => p_organization_id,
    --        p_date             => trunc(nvl(p_release_date, sysdate)) );
    --if(p_error_code <> 0) then
    --    p_error_code := -1;
    --    fnd_message.set_name('WIP', 'WIP_NO_ACCT_PERIOD');
    --    fnd_message.set_token('FLD_NAME','Wip Accounting Period');
    --    p_err_msg := fnd_message.get;
    --    return;
    --end if;
    -- ED: bugfix 3299811

    insert into wip_period_balances (
            acct_period_id,
            wip_entity_id,
            last_update_date,
            last_updated_by,
            creation_date,
            created_by,
            last_update_login,
            organization_id,
            class_type,
            tl_resource_in,
            tl_overhead_in,
            tl_outside_processing_in,
            pl_material_in,
            pl_material_overhead_in,
            pl_resource_in,
            pl_overhead_in,
            pl_outside_processing_in,
            tl_material_out,
            tl_resource_out,
            tl_overhead_out,
            tl_outside_processing_out,
            pl_material_out,
            pl_material_overhead_out,
            pl_resource_out,
            pl_overhead_out,
            pl_outside_processing_out,
            pl_material_overhead_var,
            pl_material_var,
            pl_outside_processing_var,
            pl_overhead_var,
            pl_resource_var,
            tl_material_var,
            tl_outside_processing_var,
            tl_overhead_var,
            tl_resource_var,
            tl_material_overhead_out,
            tl_material_overhead_var)
    select  oap.acct_period_id,
            p_wip_entity_id,
            sysdate, x_user_id,
            sysdate, x_user_id, x_login_id,
            p_organization_id, wc.class_type,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0
     from   org_acct_periods oap,
            wip_accounting_classes wc
     where  wc.class_code = p_class_code
     and    wc.organization_id = p_organization_id
     and    oap.organization_id = p_organization_id
     and    oap.schedule_close_date >=
                 trunc(inv_le_timezone_pub.get_le_day_for_inv_org(
                        nvl(p_release_date, sysdate),
                        p_organization_id))
     and    oap.period_close_date is null
     and    not exists (
                 select 'balance record already there'
                 from   wip_period_balances wpb
                 where  wpb.wip_entity_id = p_wip_entity_id
                 and    wpb.acct_period_id = oap.acct_period_id
                 and    wpb.organization_id = oap.organization_id);

    l_cnt := SQL%ROWCOUNT;      -- bug 3571360

    -- BD: bugfix 3299811, this is a regression of bugfix 3126650
    --select  l_inv_period_id,
    --        p_wip_entity_id,
    --        sysdate, x_user_id,
    --        sysdate, x_user_id, x_login_id,
    --        p_organization_id,
    --        wc.class_type,
    --        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    --        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    --        0, 0, 0, 0, 0, 0, 0, 0
    --from    wip_accounting_classes wc
    --where   wc.class_code = p_class_code
    --and     wc.organization_id = p_organization_id
    --and     not exists (
    --             select 'balance record already there'
    --             from   wip_period_balances wpb
    --             where  wpb.wip_entity_id = p_wip_entity_id
    --             and    wpb.acct_period_id = l_inv_period_id
    --             and    wpb.organization_id = p_organization_id);
    -- ED: bugfix 3299811


    if lbji_debug = 'Y' then
        fnd_file.put_line(fnd_file.log, 'Inserted '||l_cnt||' rows into wip_period_balances');
    end if;

    --if SQL%NOTFOUND then      -- bug 3571360
    if l_cnt <= 0 then          -- bug 3571360
        p_error_code := -1;
        fnd_message.set_name('WIP', 'WIP_NO_ACCT_PERIOD');
        fnd_message.set_token('FLD_NAME','Wip Accounting Period');
        p_err_msg := fnd_message.get;
    end if;

exception
    when others then
        p_err_msg := 'insert_into_period_balances: '|| substr(SQLERRM,1,200);
        p_error_code := SQLCODE;

end insert_into_period_balances;



-- **********************************************************************************************
-- PROCEDURE build_job_detail_info (overloaded)
-- **********************************************************************************************

procedure build_job_detail_info(
        p_common_routing_sequence_id    in number,
        p_common_bill_sequence_id       in number,
        p_status_type                   in number,
        p_org_id                        in number,
        p_wip_entity_id                 in number,
        p_last_updt_date                in date,
        p_last_updt_by                  in number,
        p_creation_date                 in date,
        p_created_by                    in number,
        p_last_updt_login               in number,
        p_request_id                    in number,
        p_program_appl_id               in number,
        p_program_id                    in number,
        p_prog_updt_date                in date,
        p_item                          in number,      -- not used
        p_job_type                      in number,
        p_bom_reference_id              in number,      -- not used
        p_routing_reference_id          in number,      -- not used
        p_wip_supply_type               in number,
        p_job_scheduled_start_date      in date,        -- not used
        p_job_scheduled_compl_date      in date,        -- not used
        p_start_quantity                in number,
        p_bom_revision_date             in date,
        p_routing_revision_date         in date,
        p_alt_bom_designator            in varchar2,
        p_alt_routing_designator        in varchar2,
        p_rtg_op_seq_num                in number,
        p_error_code                    out nocopy number,
        p_error_msg                     out nocopy varchar2,
        p_src_client_server             in number,      -- bug 3311985 new parameter
        p_po_creation_time              in number) IS   -- bug 3311985 new parameter

l_stmt_num              number;
l_job_op_seq_num        number;
l_rtg_op_seq_num0       number;
l_rtg_op_seq_num        number;
l_start_op_seq_num      number;
l_start_op_seq_id       number;
l_op_seq_id             number;
l_temp_num              number;
l_max_op_seq_num        number;
e_build_job_dtl         exception;

cursor the_path_cur is (
    select     from_op_seq_num,
               from_op_seq_id,
               level
    from       wsm_copy_op_networks
    start with (to_op_seq_num = l_rtg_op_seq_num0 and
                recommended = 'Y' and
                wip_entity_id = p_wip_entity_id)
    connect by (to_op_seq_num = prior from_op_seq_num and
                recommended = 'Y' and
                wip_entity_id = p_wip_entity_id)
    union
    select     l_rtg_op_seq_num0 "from_op_seq_num",
               l_op_seq_id,
               -1
    from       dual
) order by 2 desc;

BEGIN
    p_error_code := 0;
    p_error_msg := '';

l_stmt_num := 10;
    -- The following two call should be called when job copy is available
    find_copy_routing_start(
        p_wip_entity_id,
        l_start_op_seq_num,
        l_start_op_seq_id,
        p_error_code,
        p_error_msg);
    if p_error_code <> 0 then
        raise e_build_job_dtl;
    end if;

l_stmt_num := 20;
    if p_rtg_op_seq_num is null then -- first operation
        l_rtg_op_seq_num0 := l_start_op_seq_num;
    else
        l_rtg_op_seq_num0 := p_rtg_op_seq_num;
    end if;

    find_copy_op_seq_id (
        p_wip_entity_id,
        l_rtg_op_seq_num0,
        l_op_seq_id,
        p_error_code,
        p_error_msg);
    if p_error_code <> 0 then
        raise e_build_job_dtl;
    end if;

l_stmt_num := 30;
    -- osp begin
    if(l_op_seq_id <> -1) then
        if wsmputil.check_po_move (
                p_sequence_id      => l_op_seq_id,
                p_sequence_id_type => 'O',
                p_routing_rev_date => p_routing_revision_date,
                x_err_code         => p_error_code,
                x_err_msg          => p_error_msg)
        then
            fnd_message.set_name('WSM','WSM_FIRST_OP_PO_MOVE');
            p_error_code := -1;
            p_error_msg := fnd_message.get;
            raise e_build_job_dtl;
        end if;
    end if;
    --osp end

    --l_job_op_seq_num := 0; This initialization has been moved inside the if loop for bug 4647901

    IF v_insert_wip is NULL or v_insert_wip  = 2 THEN

	l_job_op_seq_num := 0;
    --OPTII-PERF: For jobs without phantom requirement,
    --WIP Tables are updated while creating the job copies
l_stmt_num := 40;
        OPEN the_path_cur;
        LOOP
            FETCH the_path_cur
            INTO  l_rtg_op_seq_num,
                  l_op_seq_id,
                  l_temp_num;
            EXIT when the_path_cur%NOTFOUND;

            l_job_op_seq_num := l_job_op_seq_num + g_op_seq_incr;

l_stmt_num := 50;
            -- will call new procedure to insert WO, WOR, WRO, WOY, WSOR
            WSMPOPRN.copy_plan_to_execution(
                    x_error_code                => p_error_code,
                    x_error_msg                 => p_error_msg,
                    p_org_id                    => p_org_id,
                    p_wip_entity_id             => p_wip_entity_id,
                    p_to_job_op_seq_num         => l_job_op_seq_num,
                    p_to_rtg_op_seq_num         => l_rtg_op_seq_num,
                    p_to_op_seq_id              => l_op_seq_id,
                    p_reco_op_flag              => 'Y',
                    p_txn_quantity              => p_start_quantity,
                    p_txn_date                  => p_last_updt_date,
                    p_user                      => p_last_updt_by,
                    p_login                     => p_last_updt_login,
                    p_request_id                => p_request_id,
                    p_program_application_id    => p_program_appl_id,
                    p_program_id                => p_program_id,
                    p_dup_val_ignore            => 'N',
                    p_start_quantity            => p_start_quantity);

            if p_error_code <> 0 then
                raise e_build_job_dtl;
            end if;

        END LOOP;
        CLOSE the_path_cur;

        -- {{ Update quantity
l_stmt_num := 80;
        select max(operation_seq_num)
        into   l_max_op_seq_num
        from   wip_operations
        where  wip_entity_id = p_wip_entity_id;

l_stmt_num := 90;
        update  wip_operations wo
        set     wo.previous_operation_seq_num = (
                    select max(operation_seq_num)
                    from   wip_operations
                    where  wip_entity_id = p_wip_entity_id
                    and    operation_seq_num < wo.operation_seq_num),
                wo.next_operation_seq_num = (
                    select min(operation_seq_num)
                    from   wip_operations
                    where  wip_entity_id = p_wip_entity_id
                    and    operation_seq_num > wo.operation_seq_num),
                wo.quantity_in_queue =
                    decode(operation_seq_num,
                           l_max_op_seq_num,
                           (decode(p_status_type,
                                   3, round(p_start_quantity,
                                            wip_constants.max_displayed_precision),
                                   0)),
                           0)
        where   wo.wip_entity_id = p_wip_entity_id;
        if lbji_debug = 'Y' then
            fnd_file.put_line(fnd_file.log,'Update Quantity, Prev/Next Op in wo(l_stmt_num='
                                           ||l_stmt_num||'): '|| SQL%ROWCOUNT);
        end if;

l_stmt_num := 100;
        /*This SQL is commneted as per bug 5125991
		update wip_operations
        set    quantity_completed = p_start_quantity
        where  wip_entity_id = p_wip_entity_id
        and    operation_seq_num  < l_max_op_seq_num;
        if lbji_debug = 'Y' then
            fnd_file.put_line(fnd_file.log,'Update Quantity_Completed in wo(l_stmt_num='
                                            ||l_stmt_num||'): '|| SQL%ROWCOUNT);
        end if;   */

l_stmt_num := 110;
        update wip_requirement_operations
        set    quantity_issued = required_quantity
        where  wip_entity_id = p_wip_entity_id
        and    operation_seq_num < l_max_op_seq_num
        and    wip_supply_type not in (2, 4, 5, 6); -- Fix for bug #2685463
        if lbji_debug = 'Y' then
            fnd_file.put_line(fnd_file.log,'Update Quantity_Issued in wro(l_stmt_num='
                                           ||l_stmt_num||'): '|| SQL%ROWCOUNT);
        end if;
        -- }} Update quantity
        if (p_status_type = 3) then
                update wsm_lot_based_jobs
                set    (current_job_op_seq_num,
                        current_rtg_op_seq_num)
                       =(select wo.operation_seq_num,
                                 wo.wsm_op_seq_num
                          from   wip_operations wo
                          where  organization_id = p_org_id
                          and    wip_entity_id   = p_wip_entity_id
                          and    wo.quantity_in_queue
                               + wo.quantity_running
                               + wo.quantity_waiting_to_move  > 0)
                where  wip_entity_id   = p_wip_entity_id
                and    organization_id = p_org_id;
       end if;
    END IF;--Check on v_insert_wip
            v_insert_wip := NULL;
            v_phantom_exists := NULL;

--OPTII-PERF: Updating current job and routing op seq num is moved inside the
--check on v_insert_wip
    --
    -- Begin R12Dev Update to set the current_job/rtg_op_seq_num on WLBJ
    --
    /*
    if (p_status_type = 3) then

        update wsm_lot_based_jobs
        set    (current_job_op_seq_num,
                current_rtg_op_seq_num)
               =(select wo.operation_seq_num,
                         wo.wsm_op_seq_num
                  from   wip_operations wo
                  where  organization_id = p_org_id
                  and    wip_entity_id   = p_wip_entity_id
                  and    wo.quantity_in_queue
                       + wo.quantity_running
                       + wo.quantity_waiting_to_move  > 0)
        where  wip_entity_id   = p_wip_entity_id
        and    organization_id = p_org_id;
    end if;
*/
    --
    -- End R12Dev
    --

    -- bug 3311985: osp code moved from build_job_header_info
    -- osp begin -- this has to be put after insertion into wip_entities
    if p_status_type = 3 and p_po_creation_time <> wip_constants.manual_creation then
        if p_src_client_server = 1 then
l_stmt_num := 130;
            if wsmputil.check_osp_operation(p_wip_entity_id, l_job_op_seq_num, p_org_id) then
                g_num_of_osp_exists := g_num_of_osp_exists + 1;
                wip_osp.create_requisition(
                        p_wip_entity_id          => p_wip_entity_id,
                        p_organization_id        => p_org_id,
                        p_repetitive_schedule_id => null,
                        p_operation_seq_num      => l_job_op_seq_num,
                        p_resource_seq_num       => null,
                        p_run_reqimport          => wip_constants.yes);
            end if; -- check_osp_operation
        else
l_stmt_num := 140;
            -- if build_job_info is called from form, only then P_Run_ReqImport should be YES, i.e.
            -- the requisition import concurrent request should be launched immediately.
            if wsmputil.check_osp_operation(p_wip_entity_id, l_job_op_seq_num, p_org_id) then
                g_num_of_osp_exists := g_num_of_osp_exists + 1;
                wip_osp.create_requisition(
                        p_wip_entity_id          => p_wip_entity_id,
                        p_organization_id        => p_org_id,
                        p_repetitive_schedule_id => null,
                        p_operation_seq_num      => l_job_op_seq_num,
                        p_resource_seq_num       => null,
                        p_run_reqimport          => wip_constants.no);
            end if; -- check_osp_operation
        end if; --  p_src_client_server
    end if; --  p_status_type = 3
    -- osp end

EXCEPTION
    when e_build_job_dtl then
        -- p_error_code/p_error_msg was set
        fnd_file.put_line(fnd_file.log,
            substr('build_job_detail_info (#'||l_stmt_num||') '
                   ||p_error_msg, 1, 2000));

    when others then
        p_error_code := SQLCODE;
        p_error_msg := substr('build_job_detail_info (#'||l_stmt_num||') '
                              || SQLERRM, 1, 2000);
        fnd_file.put_line(fnd_file.log, substr(p_error_msg, 1, 2000));
END build_job_detail_info;


-- **********************************************************************************************
-- PROCEDURE build_job_header_info (overloaded)
-- **********************************************************************************************

procedure build_job_header_info(
        p_common_routing_sequence_id    in number,
        p_common_bill_sequence_id       in number,
        p_status_type                   in number,
        p_class_code                    in varchar2,
        p_org_id                        in number,
        p_wip_entity_id                 in out nocopy number,
        p_last_updt_date                in date,
        p_last_updt_by                  in number,
        p_creation_date                 in date,
        p_created_by                    in number,
        p_last_updt_login               in number,
        p_request_id                    in number,
        p_program_appl_id               in number,
        p_program_id                    in number,
        p_prog_updt_date                in date,
        p_source_line_id                in number,
        p_source_code                   in varchar2,
        p_description                   in varchar2,
        p_item                          in number,
        p_job_type                      in number,
        p_bom_reference_id              in number,
        p_routing_reference_id          in number,
        p_firm_planned_flag             in number,
        p_wip_supply_type               in number,
        p_job_scheduled_start_date      in date,
        p_job_scheduled_compl_date      in date,
        p_start_quantity                in number,
        p_net_quantity                  in number,
        p_coproducts_supply             in number,
        p_bom_revision                  in varchar2,
        p_routing_revision              in varchar2,
        p_bom_revision_date             in date,
        p_routing_revision_date         in date,
        p_lot_number                    in varchar2,
        p_alt_bom_designator            in varchar2,
        p_alt_routing_designator        in varchar2,
        p_priority                      in number,
        p_due_date                      in date,
        p_attribute_category            in varchar2,
        p_attribute1                    in varchar2,
        p_attribute2                    in varchar2,
        p_attribute3                    in varchar2,
        p_attribute4                    in varchar2,
        p_attribute5                    in varchar2,
        p_attribute6                    in varchar2,
        p_attribute7                    in varchar2,
        p_attribute8                    in varchar2,
        p_attribute9                    in varchar2,
        p_attribute10                   in varchar2,
        p_attribute11                   in varchar2,
        p_attribute12                   in varchar2,
        p_attribute13                   in varchar2,
        p_attribute14                   in varchar2,
        p_attribute15                   in varchar2,
        p_job_name                      in varchar2,
        p_completion_subinventory       in varchar2,
        p_completion_locator_id         in number,
        p_demand_class                  in varchar2,
        p_project_id                    in number,
        p_task_id                       in number,
        p_schedule_group_id             in number,
        p_build_sequence                in number,
        p_line_id                       in number,
        p_kanban_card_id                in number,
        p_overcompl_tol_type            in number,
        p_overcompl_tol_value           in number,
        p_end_item_unit_number          in number,
        p_src_client_server             in number,
        p_po_creation_time              in number,
        p_date_released                 in date,
        p_wjsq_uom_code                 in tbl_wjsq_uom_code,
        p_wjsq_start_quantity           in tbl_wjsq_start_quantity,
        p_error_code                    out nocopy number,
        p_error_msg                     out nocopy varchar2) is


l_stmt_num                      number;
l_material_account              number;
l_material_overhead_account     number;
l_resource_account              number;
l_outside_processing_account    number;
l_material_variance_account     number;
l_resource_variance_account     number;
l_outside_proc_var_acc          number;
l_std_cost_adjustment_account   number;
l_overhead_account              number;
l_overhead_variance_account     number;
l_po_creation_time              number;
l_est_scrap_account             number;
l_est_scrap_var_account         number;
l_job_op_seq_num                number := NULL;
l_return_status                 varchar2(1);
l_translated_meaning            varchar2(240);

e_build_job                     exception;


BEGIN
    p_error_code := 0;
    p_error_msg := '';


l_stmt_num := 100;
    -- get a new wip entity id
    select wip_entities_s.nextval
    into   p_wip_entity_id
    from   dual;


l_stmt_num := 110;
    -- get wip accounting class information
    select  wac.material_account,
            wac.material_overhead_account,
            wac.resource_account,
            wac.outside_processing_account,
            wac.material_variance_account,
            wac.resource_variance_account,
            wac.outside_proc_variance_account,
            wac.std_cost_adjustment_account,
            wac.overhead_account,
            wac.overhead_variance_account,
            params.po_creation_time,
            wac.est_scrap_account,
            wac.est_scrap_var_account
    into    l_material_account,
            l_material_overhead_account,
            l_resource_account,
            l_outside_processing_account,
            l_material_variance_account,
            l_resource_variance_account,
            l_outside_proc_var_acc,
            l_std_cost_adjustment_account,
            l_overhead_account,
            l_overhead_variance_account,
            l_po_creation_time,
            l_est_scrap_account,
            l_est_scrap_var_account
    from    wip_accounting_classes wac,
            wip_parameters params
    where   wac.class_code(+)= p_class_code
    and     wac.organization_id(+)= p_org_id
    and     params.organization_id = p_org_id;


l_stmt_num := 120;
    -- check scrap account
    if wsmputil.wsm_esa_enabled(
            p_wip_entity_id => null,
            err_code        => p_error_code,
            err_msg         => p_error_msg,
            p_org_id        => p_org_id,
            p_job_type      => p_job_type) = 1 and
       (l_est_scrap_account is null or l_est_scrap_var_account is null)
    then
        fnd_message.set_name('WSM','WSM_NO_WAC_SCRAP_ACC');
        fnd_message.set_token('CC',p_class_code);
        p_error_code := -1;
        p_error_msg := fnd_message.get;
        raise e_build_job;
    end if;


l_stmt_num := 130;
    -- insert into WDJ
    insert into wip_discrete_jobs (
        wip_entity_id,
        organization_id,
        last_update_date,
        last_updated_by,
        creation_date,
        created_by,
        last_update_login,
        request_id,
        program_application_id,
        program_id,
        program_update_date,
        source_line_id,
        source_code,
        description,
        status_type,
        date_released,
        primary_item_id,
        bom_reference_id,
        routing_reference_id,
        firm_planned_flag,
        job_type,
        wip_supply_type,
        class_code,
        material_account,
        material_overhead_account,
        resource_account,
        outside_processing_account,
        material_variance_account,
        resource_variance_account,
        outside_proc_variance_account,
        std_cost_adjustment_account,
        overhead_account,
        overhead_variance_account,
        scheduled_start_date,
        scheduled_completion_date,
        start_quantity,
        quantity_completed,
        quantity_scrapped,
        net_quantity,
        common_bom_sequence_id,
        common_routing_sequence_id,
        bom_revision,
        routing_revision,
        bom_revision_date,
        routing_revision_date,
        lot_number,
        alternate_bom_designator,
        alternate_routing_designator,
        completion_subinventory,
        completion_locator_id,
        demand_class,
        project_id,
        task_id,
        schedule_group_id,
        build_sequence,
        line_id,
        kanban_card_id,
        overcompletion_tolerance_type,
        overcompletion_tolerance_value,
        end_item_unit_number,
        po_creation_time,
        priority,
        due_date,
        attribute_category,
        attribute1,
        attribute2,
        attribute3,
        attribute4,
        attribute5,
        attribute6,
        attribute7,
        attribute8,
        attribute9,
        attribute10,
        attribute11,
        attribute12,
        attribute13,
        attribute14,
        attribute15,
        est_scrap_account,
        est_scrap_var_account,
        coproducts_supply
    ) values (
        p_wip_entity_id,
        p_org_id,
        p_last_updt_date,
        p_last_updt_by,
        p_creation_date,
        p_created_by,
        p_last_updt_login,
        p_request_id,
        p_program_appl_id,
        p_program_id,
        p_prog_updt_date,
        p_source_line_id,
        p_source_code,
        p_description,
        p_status_type,
        -- BC: bug 3382472
        --NVL(p_date_released, decode(p_status_type, wip_constants.unreleased, null, sysdate)),
        NVL(p_date_released, decode(p_status_type,
                                    wip_constants.released, sysdate,
                                    null)),
        -- EC: bug 3382472
        p_item,
        decode(p_job_type, 3, p_bom_reference_id, null),
        decode(p_job_type, 3, p_routing_reference_id, null),
        p_firm_planned_flag,
        decode(p_job_type, 3, wip_constants.nonstandard, wip_constants.standard),
        p_wip_supply_type,
        p_class_code,
        l_material_account,
        l_material_overhead_account,
        l_resource_account,
        l_outside_processing_account,
        l_material_variance_account,
        l_resource_variance_account,
        l_outside_proc_var_acc,
        l_std_cost_adjustment_account,
        l_overhead_account,
        l_overhead_variance_account,
        trunc(p_job_scheduled_start_date,'mi'),     --round(p_job_scheduled_start_date,'mi'),
        trunc(p_job_scheduled_compl_date,'mi'),     --round(p_job_scheduled_compl_date,'mi'),
        round(p_start_quantity, wip_constants.max_displayed_precision),
        0, -- quantity_completed
        0, -- quantity_scrapped
        round(p_net_quantity, wip_constants.max_displayed_precision),
        p_common_bill_sequence_id,
        p_common_routing_sequence_id,
        p_bom_revision,
        p_routing_revision,
        p_bom_revision_date,
        p_routing_revision_date,
        p_lot_number,
        p_alt_bom_designator,
        p_alt_routing_designator,
        p_completion_subinventory,
        p_completion_locator_id,
        p_demand_class,
        p_project_id,
        p_task_id,
        p_schedule_group_id,
        p_build_sequence,
        p_line_id,
        p_kanban_card_id,
        p_overcompl_tol_type,
        p_overcompl_tol_value,
        p_end_item_unit_number,
        l_po_creation_time,
        p_priority,
        p_due_date,
        p_attribute_category,
        p_attribute1,
        p_attribute2,
        p_attribute3,
        p_attribute4,
        p_attribute5,
        p_attribute6,
        p_attribute7,
        p_attribute8,
        p_attribute9,
        p_attribute10,
        p_attribute11,
        p_attribute12,
        p_attribute13,
        p_attribute14,
        p_attribute15,
        l_est_scrap_account,
        l_est_scrap_var_account,
        p_coproducts_supply
    );
    if lbji_debug = 'Y' then
        fnd_file.put_line(fnd_file.log, 'Inserted '||SQL%ROWCOUNT||' rows into wdj');
    end if;


l_stmt_num := 135;
    -- insert into WLBJ
    if g_skip_wlbj <> 1 THEN --OPTII-PERF: This will be created in create_jobcopies
        insert into wsm_lot_based_jobs (
        wip_entity_id,
        organization_id,
        on_rec_path,
        internal_copy_type,
        last_update_date,
        last_updated_by,
        creation_date,
        created_by,
        last_update_login,
        request_id,
        program_application_id,
        program_id,
        program_update_date
        ) values (
        p_wip_entity_id,
        p_org_id,
        'Y',
        1,
        p_last_updt_date,
        p_last_updt_by,
        p_creation_date,
        p_created_by,
        p_last_updt_login,
        p_request_id,
        p_program_appl_id,
        p_program_id,
        p_prog_updt_date
        );
        if lbji_debug = 'Y' then
        fnd_file.put_line(fnd_file.log, 'Inserted '||SQL%ROWCOUNT||' rows into wlbj');
        end if;
    END IF;--Check on g_skip_wlbj
   g_skip_wlbj := 0; --OPTII-PERF
l_stmt_num := 140;
    -- insert into WE
   /* Added for bug 6861458.*/
   begin
    insert into wip_entities (
        wip_entity_id,
        organization_id,
        last_update_date,
        last_updated_by,
        creation_date,
        created_by,
        last_update_login,
        request_id,
        program_application_id,
        program_id,
        program_update_date,
        wip_entity_name,
        entity_type,
        description,
        primary_item_id,
        gen_object_id
    ) values (
        p_wip_entity_id,
        p_org_id,
        p_last_updt_date,
        p_last_updt_by,
        p_creation_date,
        p_created_by,
        p_last_updt_login,
        p_request_id,
        p_program_appl_id,
        p_program_id,
        p_prog_updt_date,
        p_job_name,
        5,
        p_description,
        p_item,
        mtl_gen_object_id_s.nextval
    );
   exception
   when others then
       fnd_message.set_name('WSM', 'WSM_UNIQUE_LOT_CREATE');
       p_error_code := -1;
       p_error_msg := fnd_message.get;
       raise e_build_job;
   end;
    if lbji_debug = 'Y' then
        fnd_file.put_line(fnd_file.log, 'Inserted '||SQL%ROWCOUNT||' rows into we');
    end if;


l_stmt_num := 150;
    -- call update_card_supply_status to set the status of the kanban card to InProcess,
    -- if a card reference exists
    if ( p_kanban_card_id is not null ) then
        inv_kanban_pvt.update_card_supply_status(
                x_return_status      => l_return_status,
                p_kanban_card_id     => p_kanban_card_id,
                p_supply_status      => inv_kanban_pvt.g_supply_status_InProcess,
                p_document_type      => inv_kanban_pvt.G_Doc_type_lot_job,
                p_document_header_id => p_wip_entity_id,
                p_Document_detail_Id => null,
                p_replenish_quantity => p_start_quantity);

        if ( l_return_status <> fnd_api.g_ret_sts_success ) then
            select meaning
            into   l_translated_meaning
            from   mfg_lookups
            where  lookup_type = 'MTL_KANBAN_SUPPLY_STATUS'
            and    lookup_code = 5
            and    upper(enabled_flag) = 'Y';

            fnd_message.set_name('WSM', 'WSM_KNBN_CARD_STS_FAIL');
            fnd_message.set_token('STATUS',l_translated_meaning);
            p_error_code := -1;
            p_error_msg := fnd_message.get;
            raise e_build_job;
        end if;
    end if;

l_stmt_num := 160;
    if p_status_type = WIP_CONSTANTS.RELEASED then
        insert_into_period_balances (
                p_wip_entity_id   => p_wip_entity_id,
                p_organization_id => p_org_id,
                p_class_code      => p_class_code,
                p_release_date    => p_date_released,
                p_error_code      => p_error_code,
                p_err_msg         => p_error_msg );
        if p_error_code <> 0 then
            raise e_build_job;
        end if;
    end if;

    -- bug 3311985: osp code moved to build_job_detail_info


--
-- Begin R12Dev: for secondary quantity
--
l_stmt_num := 170;
    if(p_wjsq_uom_code.COUNT = 0) then -- No secondary quantities are passed
        insert INTO WSM_JOB_SECONDARY_QUANTITIES (
               WIP_ENTITY_ID,
               ORGANIZATION_ID,
               UOM_CODE,
               START_QUANTITY,
               CURRENT_QUANTITY,
               CURRENTLY_ACTIVE,
               LAST_UPDATE_DATE,
               LAST_UPDATED_BY,
               LAST_UPDATE_LOGIN,
               CREATION_DATE,
               CREATED_BY
        )
        select
               p_wip_entity_id,
               p_org_id,
               wsu.UOM_CODE,
               null,
               null,
               1, -- CURRENTLY_ACTIVE = Yes
               p_last_updt_date,
               p_last_updt_by,
               p_last_updt_login,
               p_creation_date,
               p_created_by
        from   WSM_SECONDARY_UOMS wsu
        where  INVENTORY_ITEM_ID = p_item
        and    ORGANIZATION_ID   = p_org_id;
    else
        forall i in p_wjsq_uom_code.first..p_wjsq_uom_code.last
            insert into WSM_JOB_SECONDARY_QUANTITIES
            (
               WIP_ENTITY_ID,
               ORGANIZATION_ID,
               UOM_CODE,
               START_QUANTITY,
               CURRENT_QUANTITY,
               CURRENTLY_ACTIVE,
               LAST_UPDATE_DATE,
               LAST_UPDATED_BY,
               LAST_UPDATE_LOGIN,
               CREATION_DATE,
               CREATED_BY
            ) values (
               p_wip_entity_id,
               p_org_id,
               p_wjsq_uom_code(i),
               p_wjsq_start_quantity(i),
               null,
               1, -- CURRENTLY_ACTIVE = Yes
               p_last_updt_date,
               p_last_updt_by,
               p_last_updt_login,
               p_creation_date,
               p_created_by
            );
    end if;
--
-- End R12Dev: for secondary quantity
--

EXCEPTION

    when e_build_job then
        -- p_error_code and p_error_msg were set
        fnd_file.put_line(fnd_file.log,substr('build_job_header_info: (#'||l_stmt_num||') '
                          ||p_error_msg, 1, 2000));


    when others then
        p_error_code := SQLCODE;
        p_error_msg := substr('build_job_header_info: (#'||l_stmt_num||') '
                              ||SQLERRM, 1, 2000);
        fnd_file.put_line(fnd_file.log, substr(p_error_msg, 1, 2000));

END build_job_header_info;


END WSM_LBJ_INTERFACE_PVT;

/
