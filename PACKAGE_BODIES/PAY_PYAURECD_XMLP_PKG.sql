--------------------------------------------------------
--  DDL for Package Body PAY_PYAURECD_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."PAY_PYAURECD_XMLP_PKG" AS
/* $Header: PYAURECDB.pls 120.1 2008/03/31 09:48:11 amakrish noship $ */

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    REQ_ID NUMBER;
    L_PACT_ID NUMBER;
    Rep_name varchar2(50);
  BEGIN
  /*added as fix:*/
  select concurrent_program_name into Rep_name  from fnd_concurrent_programs fc,FND_CONCURRENT_REQUESTS fn
where  fn.concurrent_program_id=fc.concurrent_program_id
and request_id= FND_GLOBAL.conc_request_id;
if Rep_name='PYAUREPSR_XML' then
  select
  SUBSTR(argument1,INSTR(argument1,'=',1)+1,LENGTH(argument1)),
  SUBSTR(argument2,INSTR(argument2,'=',1)+1,LENGTH(argument2)),
  SUBSTR(argument3,INSTR(argument3,'=',1)+1,LENGTH(argument3)),
  SUBSTR(argument4,INSTR(argument4,'=',1)+1,LENGTH(argument4)),
  SUBSTR(argument5,INSTR(argument5,'=',1)+1,LENGTH(argument5)),
  SUBSTR(argument6,INSTR(argument6,'=',1)+1,LENGTH(argument6)),
  SUBSTR(argument7,INSTR(argument7,'=',1)+1,LENGTH(argument7)),
  SUBSTR(argument8,INSTR(argument8,'=',1)+1,LENGTH(argument8)),
  SUBSTR(argument9,INSTR(argument9,'=',1)+1,LENGTH(argument9)),
  SUBSTR(argument10,INSTR(argument10,'=',1)+1,LENGTH(argument10)),
  SUBSTR(argument11,INSTR(argument11,'=',1)+1,LENGTH(argument11)),
  substr(argument12,instr(argument12,'=',1)+1,LENGTH(argument12)),
  substr(argument13,instr(argument13,'=',1)+1,LENGTH(argument13)),
  substr(argument14,instr(argument14,'=',1)+1,LENGTH(argument14)),
  substr(argument15,instr(argument15,'=',1)+1,LENGTH(argument15)),
  substr(argument16,instr(argument16,'=',1)+1,LENGTH(argument16)),
  substr(argument17,instr(argument17,'=',1)+1,LENGTH(argument17)),
  substr(argument18,instr(argument18,'=',1)+1,LENGTH(argument18)),
  substr(argument19,instr(argument19,'=',1)+1,LENGTH(argument19)),
  substr(argument20,instr(argument20,'=',1)+1,LENGTH(argument20)),
  substr(argument21,instr(argument21,'=',1)+1,LENGTH(argument21))
  into
  LP_PAYROLL_ACTION_ID,
  LP_BUSINESS_GROUP_ID,
  LP_ORGANIZATION_ID,
  LP_PAYROLL_ID,
  LP_REGISTERED_EMPLOYER,
  LP_ASSIGNMENT_ID,
  LP_START_DATE_D,
  LP_END_DATE_D,
  LP_PAYROLL_RUN_ID,
  LP_PERIOD_END_DATE_D,
  LP_EMPLOYEE_TYPE,
  LP_YTD_TOTALS,
  LP_ZERO_RECORDS,
  LP_NEGATIVE_RECORDS,
  LP_SORT_ORDER_1,
  LP_SORT_ORDER_2,
  LP_SORT_ORDER_3,
  LP_SORT_ORDER_4,
  P_PAYSUM_FLAG,
  LP_LST_YEAR_TERM,
  LP_DELETE_ACTIONS

    from FND_CONCURRENT_REQUESTS
where request_id= FND_GLOBAL.conc_request_id;

end if;
if Rep_name='PYAURECD_XML' then
  select
  SUBSTR(argument1,INSTR(argument1,'=',1)+1,LENGTH(argument1)),
  SUBSTR(argument2,INSTR(argument2,'=',1)+1,LENGTH(argument2)),
  SUBSTR(argument3,INSTR(argument3,'=',1)+1,LENGTH(argument3)),
  SUBSTR(argument4,INSTR(argument4,'=',1)+1,LENGTH(argument4)),
  SUBSTR(argument5,INSTR(argument5,'=',1)+1,LENGTH(argument5)),
  SUBSTR(argument6,INSTR(argument6,'=',1)+1,LENGTH(argument6)),
  SUBSTR(argument7,INSTR(argument7,'=',1)+1,LENGTH(argument7)),
  SUBSTR(argument8,INSTR(argument8,'=',1)+1,LENGTH(argument8)),
  SUBSTR(argument9,INSTR(argument9,'=',1)+1,LENGTH(argument9)),
  SUBSTR(argument10,INSTR(argument10,'=',1)+1,LENGTH(argument10)),
  SUBSTR(argument11,INSTR(argument11,'=',1)+1,LENGTH(argument11)),
  substr(argument12,instr(argument12,'=',1)+1,LENGTH(argument12)),
  substr(argument13,instr(argument13,'=',1)+1,LENGTH(argument13)),
  substr(argument14,instr(argument14,'=',1)+1,LENGTH(argument14)),
  substr(argument15,instr(argument15,'=',1)+1,LENGTH(argument15)),
  substr(argument16,instr(argument16,'=',1)+1,LENGTH(argument16)),
  substr(argument17,instr(argument17,'=',1)+1,LENGTH(argument17)),
  substr(argument18,instr(argument18,'=',1)+1,LENGTH(argument18)),
  substr(argument21,instr(argument21,'=',1)+1,LENGTH(argument21))
  into
  LP_PAYROLL_ACTION_ID,
  LP_BUSINESS_GROUP_ID,
  LP_ORGANIZATION_ID,
  LP_PAYROLL_ID,
  LP_REGISTERED_EMPLOYER,
  LP_ASSIGNMENT_ID,
  LP_START_DATE_D,
  LP_END_DATE_D,
  LP_PAYROLL_RUN_ID,
  LP_PERIOD_END_DATE_D,
  LP_EMPLOYEE_TYPE,
  LP_YTD_TOTALS,
  LP_ZERO_RECORDS,
  LP_NEGATIVE_RECORDS,
  LP_SORT_ORDER_1,
  LP_SORT_ORDER_2,
  LP_SORT_ORDER_3,
  LP_SORT_ORDER_4,
  LP_DELETE_ACTIONS

    from FND_CONCURRENT_REQUESTS
where request_id= FND_GLOBAL.conc_request_id;

end if;

LP_START_DATE := to_date(LP_START_DATE_D,'YYYY/MM/DD');
LP_END_DATE := to_date(LP_END_DATE_D,'YYYY/MM/DD');
LP_PERIOD_END_DATE := to_date(LP_PERIOD_END_DATE_D,'YYYY/MM/DD');
LP_START_DATE_D:=to_char(LP_START_DATE,'DD-MON-YYYY');
LP_END_DATE_D:=to_char(LP_END_DATE,'DD-MON-YYYY');
/*fix ends*/
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    ORDERBY_CLAUSE := ' ';
    IF (P_PAYSUM_FLAG IS NULL) THEN
      P_PAYSUM_FLAG := 'N';
    END IF;
    IF (LP_SORT_ORDER_1 IS NOT NULL) THEN
      IF (LP_SORT_ORDER_1 = 'EMPLOYEE') THEN
        ORDERBY_CLAUSE := 'Order By pai_asg.action_information1';
      ELSIF (LP_SORT_ORDER_1 = 'LEGAL_EMPLOYER') THEN
        ORDERBY_CLAUSE := 'Order By pai_asg.action_information9';
        LP_SORT_ORDER_1 := 'LEGAL EMPLOYER';
      ELSIF (LP_SORT_ORDER_1 = 'ORGANIZATION') THEN
        ORDERBY_CLAUSE := 'Order By pai_asg.action_information8';
      ELSE
        ORDERBY_CLAUSE := 'Order By pai_asg.action_information10';
      END IF;
    END IF;
    IF (LP_SORT_ORDER_2 IS NOT NULL) THEN
      IF (LP_SORT_ORDER_2 = 'EMPLOYEE') THEN
        ORDERBY_CLAUSE := ORDERBY_CLAUSE || ',pai_asg.action_information1';
      ELSIF (LP_SORT_ORDER_2 = 'LEGAL_EMPLOYER') THEN
        ORDERBY_CLAUSE := ORDERBY_CLAUSE || ',pai_asg.action_information9';
        LP_SORT_ORDER_2 := 'LEGAL EMPLOYER';
      ELSIF (LP_SORT_ORDER_2 = 'ORGANIZATION') THEN
        ORDERBY_CLAUSE := ORDERBY_CLAUSE || ',pai_asg.action_information8';
      ELSE
        ORDERBY_CLAUSE := ORDERBY_CLAUSE || ',pai_asg.action_information10';
      END IF;
    END IF;
    IF (LP_SORT_ORDER_3 IS NOT NULL) THEN
      IF (LP_SORT_ORDER_3 = 'EMPLOYEE') THEN
        ORDERBY_CLAUSE := ORDERBY_CLAUSE || ',pai_asg.action_information1';
      ELSIF (LP_SORT_ORDER_3 = 'LEGAL_EMPLOYER') THEN
        ORDERBY_CLAUSE := ORDERBY_CLAUSE || ',pai_asg.action_information9';
        LP_SORT_ORDER_3 := 'LEGAL EMPLOYER';
      ELSIF (LP_SORT_ORDER_3 = 'ORGANIZATION') THEN
        ORDERBY_CLAUSE := ORDERBY_CLAUSE || ',pai_asg.action_information8';
      ELSE
        ORDERBY_CLAUSE := ORDERBY_CLAUSE || ',pai_asg.action_information10';
      END IF;
    END IF;
    IF (LP_SORT_ORDER_4 IS NOT NULL) THEN
      IF (LP_SORT_ORDER_4 = 'EMPLOYEE') THEN
        ORDERBY_CLAUSE := ORDERBY_CLAUSE || ',pai_asg.action_information1';
      ELSIF (LP_SORT_ORDER_4 = 'LEGAL_EMPLOYER') THEN
        ORDERBY_CLAUSE := ORDERBY_CLAUSE || ',pai_asg.action_information9';
        LP_SORT_ORDER_4 := 'LEGAL EMPLOYER';
      ELSIF (LP_SORT_ORDER_4 = 'ORGANIZATION') THEN
        ORDERBY_CLAUSE := ORDERBY_CLAUSE || ',pai_asg.action_information8';
      ELSE
        ORDERBY_CLAUSE := ORDERBY_CLAUSE || ',pai_asg.action_information10';
      END IF;
    END IF;
    IF (P_PAYSUM_FLAG = 'Y') THEN
      ORDERBY_CLAUSE := 'Order by pai_asg.assignment_id';
    END IF;
    CP_PS_PAYSUM_GROSS := 0;
    CP_PS_WORKPLACE_GIVING := 0;
    CP_PS_REP_ALLOWANCES := 0;
    CP_PS_ETP := 0;
    CP_PS_RFB := 0;
    CP_PS_ASSESSABLE_ETP := 0;
    CP_PS_CDEP := 0;
    CP_PS_OTHER_INCOME := 0;
    CP_PS_UNION_FEES := 0;
    CP_PS_LUMPSUM_PAYMENTS := 0;
    CP_MAN_PS_PAYSUM_GROSS := 0;
    CP_MAN_PS_WORKPLACE_GIVING := 0;
    CP_MAN_PS_REP_ALLOWANCES := 0;
    CP_MAN_PS_ETP := 0;
    CP_MAN_PS_RFB := 0;
    CP_MAN_PS_ASSESSABLE_ETP := 0;
    CP_MAN_PS_CDEP := 0;
    CP_MAN_PS_OTHER_INCOME := 0;
    CP_MAN_PS_UNION_FEES := 0;
    CP_MAN_PS_LUMPSUM_PAYMENTS := 0;
    CP_PRINTED_COUNT := 0;
    CP_MANUAL_COUNT := 0;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    IF LP_DELETE_ACTIONS = 'Y' THEN
      BEGIN
        DELETE FROM PAY_ACTION_INFORMATION
         WHERE ACTION_INFORMATION_CATEGORY = 'AU_EMPLOYEE_RECON_DETAILS'
           AND ACTION_CONTEXT_ID = LP_PAYROLL_ACTION_ID;
        IF P_PAYSUM_FLAG = 'Y' THEN
          DELETE FROM PAY_ACTION_INFORMATION
           WHERE ACTION_INFORMATION_CATEGORY in ( 'AU_ELEMENT_RECON_DETAILS' , 'AU_BALANCE_RECON_DETAILS_YTD' , 'AU_PS_BALANCE_RECON_DETAILS' )
             AND ACTION_CONTEXT_ID in (
             SELECT
               PAA.ASSIGNMENT_ACTION_ID
             FROM
               PAY_ASSIGNMENT_ACTIONS PAA
             WHERE PAYROLL_ACTION_ID = LP_PAYROLL_ACTION_ID
               AND PAA.ACTION_STATUS = 'C' );
        ELSE
          DELETE FROM PAY_ACTION_INFORMATION
           WHERE ACTION_INFORMATION_CATEGORY in ( 'AU_ELEMENT_RECON_DETAILS' , 'AU_BALANCE_RECON_DETAILS_RUN' , 'AU_BALANCE_RECON_DETAILS_YTD' )
             AND ACTION_CONTEXT_ID in (
             SELECT
               PAA.ASSIGNMENT_ACTION_ID
             FROM
               PAY_ASSIGNMENT_ACTIONS PAA
             WHERE PAA.PAYROLL_ACTION_ID = LP_PAYROLL_ACTION_ID
               AND PAA.ACTION_STATUS = 'C' );
          DELETE FROM PAY_ACTION_INFORMATION
           WHERE ACTION_INFORMATION_CATEGORY = 'AU_ARCHIVE_ASG_DETAILS'
             AND ACTION_INFORMATION2 = TO_CHAR(LP_PAYROLL_ACTION_ID);
        END IF;
      EXCEPTION
        WHEN OTHERS THEN
          NULL;
      END;
      BEGIN
        DELETE FROM PAY_ASSIGNMENT_ACTIONS PAA
         WHERE PAA.PAYROLL_ACTION_ID = LP_PAYROLL_ACTION_ID;
        DELETE FROM PAY_PAYROLL_ACTIONS PPA
         WHERE PPA.PAYROLL_ACTION_ID = LP_PAYROLL_ACTION_ID;
      EXCEPTION
        WHEN OTHERS THEN
          NULL;
      END;
      COMMIT;
    END IF;
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION CF_BUSINESS_GROUPFORMULA RETURN VARCHAR2 IS
    V_BUSINESS_GROUP HR_ALL_ORGANIZATION_UNITS.NAME%TYPE;
  BEGIN
    V_BUSINESS_GROUP := HR_REPORTS.GET_BUSINESS_GROUP(LP_BUSINESS_GROUP_ID);
    RETURN V_BUSINESS_GROUP;
  END CF_BUSINESS_GROUPFORMULA;

  FUNCTION CF_LEGISLATION_CODEFORMULA RETURN VARCHAR2 IS
    V_LEGISLATION_CODE HR_ORGANIZATION_INFORMATION.ORG_INFORMATION9%TYPE := NULL;
    CURSOR LEGISLATION_CODE(C_BUSINESS_GROUP_ID IN HR_ORGANIZATION_INFORMATION.ORGANIZATION_ID%TYPE) IS
      SELECT
        ORG_INFORMATION9
      FROM
        HR_ORGANIZATION_INFORMATION
      WHERE ORGANIZATION_ID = C_BUSINESS_GROUP_ID
        AND ORG_INFORMATION9 is not null
        AND ORG_INFORMATION_CONTEXT = 'Business Group Information';
  BEGIN
    OPEN LEGISLATION_CODE(LP_BUSINESS_GROUP_ID);
    FETCH LEGISLATION_CODE
     INTO
       V_LEGISLATION_CODE;
    CLOSE LEGISLATION_CODE;
    RETURN V_LEGISLATION_CODE;
  END CF_LEGISLATION_CODEFORMULA;

  FUNCTION CF_CURRENCY_FORMAT_MASKFORMULA(CF_LEGISLATION_CODE IN VARCHAR2) RETURN VARCHAR2 IS
    V_CURRENCY_CODE FND_CURRENCIES.CURRENCY_CODE%TYPE;
    V_FORMAT_MASK VARCHAR2(100) := NULL;
    V_FIELD_LENGTH NUMBER(3) := 14;
    CURSOR CURRENCY_FORMAT_MASK(C_TERRITORY_CODE IN FND_CURRENCIES.ISSUING_TERRITORY_CODE%TYPE) IS
      SELECT
        CURRENCY_CODE
      FROM
        FND_CURRENCIES
      WHERE ISSUING_TERRITORY_CODE = C_TERRITORY_CODE;
  BEGIN
    OPEN CURRENCY_FORMAT_MASK(CF_LEGISLATION_CODE);
    FETCH CURRENCY_FORMAT_MASK
     INTO
       V_CURRENCY_CODE;
    CLOSE CURRENCY_FORMAT_MASK;
    V_FORMAT_MASK := FND_CURRENCY.GET_FORMAT_MASK(V_CURRENCY_CODE
                                                 ,V_FIELD_LENGTH);
    RETURN V_FORMAT_MASK;
  END CF_CURRENCY_FORMAT_MASKFORMULA;

  PROCEDURE SET_CURRENCY_FORMAT_MASK IS
  BEGIN
    NULL;
  END SET_CURRENCY_FORMAT_MASK;

  FUNCTION P_BUSINESS_GROUP_IDVALIDTRIGGE RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END P_BUSINESS_GROUP_IDVALIDTRIGGE;

  FUNCTION CF_EMPLOYEE_TYPE_DISPLAYFORMUL RETURN CHAR IS
  BEGIN
    IF (LP_EMPLOYEE_TYPE = 'B') THEN
      RETURN ('Both Current and Terminated Employees');
    END IF;
    IF (LP_EMPLOYEE_TYPE = 'C') THEN
      RETURN ('Only Current Employees');
    END IF;
    IF (LP_EMPLOYEE_TYPE = 'T') THEN
      RETURN ('Only Terminated Employees');
    END IF;
  END CF_EMPLOYEE_TYPE_DISPLAYFORMUL;

  FUNCTION CF_EMP_DISPLAYFORMULA RETURN CHAR IS
    L_EMP_NAME VARCHAR2(80) := NULL;
    CURSOR GET_EMP_NAME(C_ASS_ID IN PER_ASSIGNMENTS_F.ASSIGNMENT_ID%TYPE) IS
      SELECT
        SUBSTR(PPF.FULL_NAME
              ,1
              ,80)
      FROM
        PER_PEOPLE_F PPF,
        PER_ASSIGNMENTS_F PAF
      WHERE PAF.PERSON_ID = PPF.PERSON_ID
        AND PAF.ASSIGNMENT_ID = C_ASS_ID;
  BEGIN
    IF (LP_ASSIGNMENT_ID IS NOT NULL) THEN
      OPEN GET_EMP_NAME(LP_ASSIGNMENT_ID);
      FETCH GET_EMP_NAME
       INTO
         L_EMP_NAME;
      CLOSE GET_EMP_NAME;
    END IF;
    RETURN L_EMP_NAME;
  END CF_EMP_DISPLAYFORMULA;

  FUNCTION CF_LEG_EMP_DISPLAYFORMULA RETURN CHAR IS
    L_LEG_EMP_NAME VARCHAR2(80) := NULL;
    CURSOR GET_LEG_EMP_NAME(C_LEG_EMP_ID IN HR_ORGANIZATION_UNITS.ORGANIZATION_ID%TYPE) IS
      SELECT
        SUBSTR(NAME
              ,1
              ,80)
      FROM
        HR_ORGANIZATION_UNITS
      WHERE ORGANIZATION_ID = C_LEG_EMP_ID;
  BEGIN
    IF (LP_REGISTERED_EMPLOYER IS NOT NULL) THEN
      OPEN GET_LEG_EMP_NAME(LP_REGISTERED_EMPLOYER);
      FETCH GET_LEG_EMP_NAME
       INTO
         L_LEG_EMP_NAME;
      CLOSE GET_LEG_EMP_NAME;
    END IF;
    RETURN L_LEG_EMP_NAME;
  END CF_LEG_EMP_DISPLAYFORMULA;

  FUNCTION CF_NEG_RECORDS_DISPLAYFORMULA RETURN CHAR IS
  BEGIN
    IF (LP_NEGATIVE_RECORDS = 'Y') THEN
      RETURN ('Yes');
    END IF;
    IF (LP_NEGATIVE_RECORDS = 'N') THEN
      RETURN ('No');
    END IF;
  END CF_NEG_RECORDS_DISPLAYFORMULA;

  FUNCTION CF_NO_DATA_END_REPORTFORMULA(CS_DATA_EXISTS IN NUMBER) RETURN CHAR IS
  BEGIN
    IF (CS_DATA_EXISTS = 0) THEN
      RETURN (CP_NO_DATA_FOUND);
    ELSE
      RETURN (CP_END_REPORT);
    END IF;
  END CF_NO_DATA_END_REPORTFORMULA;

  FUNCTION CF_ORG_ID_DISPLAYFORMULA RETURN CHAR IS
    L_ORG_NAME VARCHAR2(80) := NULL;
    CURSOR GET_ORG_NAME(C_ORGANIZATION_ID IN HR_ORGANIZATION_UNITS.ORGANIZATION_ID%TYPE) IS
      SELECT
        SUBSTR(NAME
              ,1
              ,80)
      FROM
        HR_ORGANIZATION_UNITS
      WHERE ORGANIZATION_ID = C_ORGANIZATION_ID;
  BEGIN
    IF (LP_ORGANIZATION_ID IS NOT NULL) THEN
      OPEN GET_ORG_NAME(LP_ORGANIZATION_ID);
      FETCH GET_ORG_NAME
       INTO
         L_ORG_NAME;
      CLOSE GET_ORG_NAME;
    END IF;
    RETURN L_ORG_NAME;
  END CF_ORG_ID_DISPLAYFORMULA;

  FUNCTION CF_PAYROLL_NAMEFORMULA RETURN VARCHAR2 IS
    L_PAYROLL_NAME VARCHAR2(80) := NULL;
    CURSOR GET_PAYROLL_NAME(C_PAYROLL_ID IN PAY_ALL_PAYROLLS_F.PAYROLL_ID%TYPE) IS
      SELECT
        SUBSTR(PAYROLL_NAME
              ,1
              ,80)
      FROM
        PAY_ALL_PAYROLLS_F
      WHERE PAYROLL_ID = C_PAYROLL_ID;
  BEGIN
    IF (LP_PAYROLL_ID IS NOT NULL) THEN
      OPEN GET_PAYROLL_NAME(LP_PAYROLL_ID);
      FETCH GET_PAYROLL_NAME
       INTO
         L_PAYROLL_NAME;
      CLOSE GET_PAYROLL_NAME;
    END IF;
    RETURN L_PAYROLL_NAME;
  END CF_PAYROLL_NAMEFORMULA;

  FUNCTION CF_PAYROLL_RUN_DISPLAYFORMUL RETURN CHAR IS
    L_PAYROLL_RUN VARCHAR2(80) := NULL;
    CURSOR PAYROLL_RUN(C_PAYROLL_ACTION_ID IN PAY_PAYROLL_ACTIONS.PAYROLL_ACTION_ID%TYPE) IS
      SELECT
        SUBSTR(PAP.PAYROLL_NAME
              ,1
              ,71 - LENGTH(PTP.PERIOD_NAME) - LENGTH(HRL.MEANING)) || ' - ' || PTP.PERIOD_NAME || ' (' || HRL.MEANING || ' ' || TO_CHAR(PPA.DISPLAY_RUN_NUMBER) || ')' DISPLAY
      FROM
        PAY_ALL_PAYROLLS_F PAP,
        PER_TIME_PERIODS PTP,
        PAY_PAYROLL_ACTIONS PPA,
        HR_LOOKUPS HRL
      WHERE PPA.PAYROLL_ACTION_ID = C_PAYROLL_ACTION_ID
        AND PAP.PAYROLL_ID = PPA.PAYROLL_ID
        AND PAP.PAYROLL_ID = PTP.PAYROLL_ID
        AND PPA.DATE_EARNED between PTP.START_DATE
        AND PTP.END_DATE
        AND HRL.LOOKUP_TYPE = 'ACTION_TYPE'
        AND HRL.LOOKUP_CODE = PPA.ACTION_TYPE;
  BEGIN
    IF (LP_PAYROLL_RUN_ID IS NOT NULL) THEN
      OPEN PAYROLL_RUN(LP_PAYROLL_RUN_ID);
      FETCH PAYROLL_RUN
       INTO
         L_PAYROLL_RUN;
      CLOSE PAYROLL_RUN;
    END IF;
    RETURN L_PAYROLL_RUN;
  END CF_PAYROLL_RUN_DISPLAYFORMUL;

  FUNCTION CF_PERIOD_PAYROLLFORMULA(CF_PAYROLL_RUN_DISPLAY IN VARCHAR2) RETURN CHAR IS
    L_PERIOD_PAYROLL VARCHAR2(100);
  BEGIN
    IF (LP_START_DATE IS NOT NULL) THEN
      L_PERIOD_PAYROLL := 'Period Dates: ' || TO_CHAR(LP_START_DATE
                                 ,'DD-MON-RRRR') || ' to ' || TO_CHAR(LP_END_DATE
                                 ,'DD-MON-RRRR');
    ELSE
      L_PERIOD_PAYROLL := 'Payroll Run: ' || CF_PAYROLL_RUN_DISPLAY;
    END IF;
    RETURN (L_PERIOD_PAYROLL);
  END CF_PERIOD_PAYROLLFORMULA;

  FUNCTION CF_YTD_TOTALS_DISPLAYFORMULA RETURN CHAR IS
  BEGIN
    IF (LP_YTD_TOTALS = 'Y') THEN
      RETURN ('Yes');
    END IF;
    IF (LP_YTD_TOTALS = 'N') THEN
      RETURN ('No');
    END IF;
  END CF_YTD_TOTALS_DISPLAYFORMULA;

  FUNCTION CF_ZERO_RECORDS_DISPLAYFORMULA RETURN CHAR IS
  BEGIN
    IF (LP_ZERO_RECORDS = 'Y') THEN
      RETURN ('Yes');
    END IF;
    IF (LP_ZERO_RECORDS = 'N') THEN
      RETURN ('No');
    END IF;
  END CF_ZERO_RECORDS_DISPLAYFORMULA;

  FUNCTION CF_RETURN_BALANCESFORMULA(CS_ASG_TAXABLE_EARNINGS IN NUMBER
                                    ,CS_ASG_NON_TAX_EARNINGS IN NUMBER
                                    ,CS_ASG_DEDUCTIONS IN NUMBER
                                    ,CS_ASG_TAX IN NUMBER
                                    ,CS_ASG_NET_PAYMENT_RUN IN NUMBER
                                    ,CS_ASG_EMP_CHG IN NUMBER
                                    ,CS_ASG_GROSS_EARNINGS IN NUMBER
                                    ,CS_ASG_PRE_TAX_DEDUCTIONS IN NUMBER
                                    ,CS_ASG_DIRECT_PAYMENTS IN NUMBER
                                    ,CS_ASG_YTD_GROSS_EARNINGS IN NUMBER
                                    ,CS_ASG_YTD_PRE_TAX_DEDUCTIONS IN NUMBER
                                    ,CS_ASG_YTD_DIRECT_PAYMENTS IN NUMBER
                                    ,CS_ASG_YTD_TAX_EARN IN NUMBER
                                    ,CS_ASG_YTD_NON_TAX IN NUMBER
                                    ,CS_ASG_YTD_DEDUCTIONS IN NUMBER
                                    ,CS_ASG_YTD_TAX IN NUMBER
                                    ,CS_ASG_YTD_NET_PAY IN NUMBER
                                    ,CS_ASG_YTD_EMP_CHG IN NUMBER
                                    ,MANUAL_PS_ISSUED IN VARCHAR2
                                    ,CS_PS_PAYSUM_GROSS IN NUMBER
                                    ,CS_PS_WORKPLACE_GIVING IN NUMBER
                                    ,CS_PS_REP_ALLOWANCES IN NUMBER
                                    ,CS_PS_ETP IN NUMBER
                                    ,CS_PS_RFB IN NUMBER
                                    ,CS_PS_ASSESSABLE_ETP IN NUMBER
                                    ,CS_PS_CDEP IN NUMBER
                                    ,CS_PS_OTHER_INCOME IN NUMBER
                                    ,CS_PS_UNION_FEES IN NUMBER
                                    ,CS_PS_LUMPSUM_PAYMENTS IN NUMBER) RETURN NUMBER IS
  --PRAGMA autonomous_transaction;
  BEGIN
    CP_TAXABLE_EARNINGS := CS_ASG_TAXABLE_EARNINGS;
    CP_NON_TAXABLE_EARNINGS := CS_ASG_NON_TAX_EARNINGS;
    CP_DEDUCTIONS := CS_ASG_DEDUCTIONS;
    CP_TAX := CS_ASG_TAX;
    CP_NET_PAYMENT := CS_ASG_NET_PAYMENT_RUN;
    CP_EMP_CHG := CS_ASG_EMP_CHG;
    CP_GROSS_EARNINGS := CS_ASG_GROSS_EARNINGS;
    CP_PRE_TAX_DEDUCTIONS := CS_ASG_PRE_TAX_DEDUCTIONS;
    CP_DIRECT_PAYMENTS := CS_ASG_DIRECT_PAYMENTS;
    CP_YTD_GROSS_EARNINGS := CS_ASG_YTD_GROSS_EARNINGS;
--INSERT INTO LOG_MSG VALUES('SAMPATH','PYAURECD','CP_YTD_GROSS_EARNINGS',CP_YTD_GROSS_EARNINGS);COMMIT;
    CP_YTD_PRE_TAX_DEDUCTIONS := CS_ASG_YTD_PRE_TAX_DEDUCTIONS;
    CP_YTD_DIRECT_PAYMENTS := CS_ASG_YTD_DIRECT_PAYMENTS;
    CP_YTD_TAXABLE_EARNINGS := CS_ASG_YTD_TAX_EARN;
    CP_YTD_NON_TAXABLE_EARNINGS := CS_ASG_YTD_NON_TAX;
    CP_YTD_DEDUCTIONS := CS_ASG_YTD_DEDUCTIONS;
    CP_YTD_TAX := CS_ASG_YTD_TAX;
    CP_YTD_NET_PAYMENT := CS_ASG_YTD_NET_PAY;
    CP_YTD_EMP_CHG := CS_ASG_YTD_EMP_CHG;
    IF (LP_ZERO_RECORDS = 'Y' AND CS_ASG_NET_PAYMENT_RUN = 0) THEN
      CP_TAXABLE_EARNINGS := 0;
      CP_NON_TAXABLE_EARNINGS := 0;
      CP_DEDUCTIONS := 0;
      CP_TAX := 0;
      CP_NET_PAYMENT := 0;
      CP_EMP_CHG := 0;
      CP_GROSS_EARNINGS := 0;
      CP_PRE_TAX_DEDUCTIONS := 0;
      CP_DIRECT_PAYMENTS := 0;
      CP_YTD_GROSS_EARNINGS := 0;
      CP_YTD_DIRECT_PAYMENTS := 0;
      CP_YTD_PRE_TAX_DEDUCTIONS := 0;
      CP_YTD_TAXABLE_EARNINGS := 0;
      CP_YTD_NON_TAXABLE_EARNINGS := 0;
      CP_YTD_DEDUCTIONS := 0;
      CP_YTD_TAX := 0;
      CP_YTD_NET_PAYMENT := 0;
      CP_YTD_EMP_CHG := 0;
    END IF;
    IF (LP_NEGATIVE_RECORDS = 'Y' AND CS_ASG_NET_PAYMENT_RUN < 0) THEN
      CP_TAXABLE_EARNINGS := 0;
      CP_NON_TAXABLE_EARNINGS := 0;
      CP_DEDUCTIONS := 0;
      CP_TAX := 0;
      CP_NET_PAYMENT := 0;
      CP_EMP_CHG := 0;
      CP_GROSS_EARNINGS := 0;
      CP_PRE_TAX_DEDUCTIONS := 0;
      CP_DIRECT_PAYMENTS := 0;
      CP_YTD_DIRECT_PAYMENTS := 0;
      CP_YTD_GROSS_EARNINGS := 0;
      CP_YTD_PRE_TAX_DEDUCTIONS := 0;
      CP_YTD_TAXABLE_EARNINGS := 0;
      CP_YTD_NON_TAXABLE_EARNINGS := 0;
      CP_YTD_DEDUCTIONS := 0;
      CP_YTD_TAX := 0;
      CP_YTD_NET_PAYMENT := 0;
      CP_YTD_EMP_CHG := 0;
    END IF;
    IF (P_PAYSUM_FLAG = 'Y') THEN
      IF MANUAL_PS_ISSUED = 'Y' THEN
        CP_MAN_PS_PAYSUM_GROSS := CP_MAN_PS_PAYSUM_GROSS + CS_PS_PAYSUM_GROSS;
        CP_MAN_PS_WORKPLACE_GIVING := CP_MAN_PS_WORKPLACE_GIVING + CS_PS_WORKPLACE_GIVING;
        CP_MAN_PS_REP_ALLOWANCES := CP_MAN_PS_REP_ALLOWANCES + CS_PS_REP_ALLOWANCES;
        CP_MAN_PS_ETP := CP_MAN_PS_ETP + CS_PS_ETP;
        CP_MAN_PS_RFB := CP_MAN_PS_RFB + CS_PS_RFB;
        CP_MAN_PS_ASSESSABLE_ETP := CP_MAN_PS_ASSESSABLE_ETP + CS_PS_ASSESSABLE_ETP;
        CP_MAN_PS_CDEP := CP_MAN_PS_CDEP + CS_PS_CDEP;
        CP_MAN_PS_OTHER_INCOME := CP_MAN_PS_OTHER_INCOME + CS_PS_OTHER_INCOME;
        CP_MAN_PS_UNION_FEES := CP_MAN_PS_UNION_FEES + CS_PS_UNION_FEES;
        CP_MAN_PS_LUMPSUM_PAYMENTS := CP_MAN_PS_LUMPSUM_PAYMENTS + CS_PS_LUMPSUM_PAYMENTS;
        CP_MANUAL_COUNT := CP_MANUAL_COUNT + 1;
      ELSE
        CP_PS_PAYSUM_GROSS := CP_PS_PAYSUM_GROSS + CS_PS_PAYSUM_GROSS;
        CP_PS_WORKPLACE_GIVING := CP_PS_WORKPLACE_GIVING + CS_PS_WORKPLACE_GIVING;
        CP_PS_REP_ALLOWANCES := CP_PS_REP_ALLOWANCES + CS_PS_REP_ALLOWANCES;
        CP_PS_ETP := CP_PS_ETP + CS_PS_ETP;
        CP_PS_RFB := CP_PS_RFB + CS_PS_RFB;
        CP_PS_ASSESSABLE_ETP := CP_PS_ASSESSABLE_ETP + CS_PS_ASSESSABLE_ETP;
        CP_PS_CDEP := CP_PS_CDEP + CS_PS_CDEP;
        CP_PS_OTHER_INCOME := CP_PS_OTHER_INCOME + CS_PS_OTHER_INCOME;
        CP_PS_UNION_FEES := CP_PS_UNION_FEES + CS_PS_UNION_FEES;
        CP_PS_LUMPSUM_PAYMENTS := CP_PS_LUMPSUM_PAYMENTS + CS_PS_LUMPSUM_PAYMENTS;
        CP_PRINTED_COUNT := CP_PRINTED_COUNT + 1;
      END IF;
    END IF;
    RETURN (NULL);
  END CF_RETURN_BALANCESFORMULA;

  FUNCTION CF_FIN_YEAR_DISPLAYFORMULA RETURN CHAR IS
    L_FIN_YEAR VARCHAR2(80);
  BEGIN
    IF (LP_START_DATE IS NOT NULL AND LP_END_DATE IS NOT NULL) THEN
      L_FIN_YEAR := TO_CHAR(LP_START_DATE
                           ,'YYYY') || '/' || TO_CHAR(LP_END_DATE
                           ,'YYYY');
    END IF;
    RETURN L_FIN_YEAR;
  END CF_FIN_YEAR_DISPLAYFORMULA;

  FUNCTION CF_LST_YEAR_TERM_DISPLAYFORMUL RETURN CHAR IS
  BEGIN
    IF (LP_LST_YEAR_TERM = 'Y' OR LP_LST_YEAR_TERM IS NULL) THEN
      RETURN ('Yes');
    ELSE
      RETURN ('No');
    END IF;
  END CF_LST_YEAR_TERM_DISPLAYFORMUL;

  FUNCTION CF_TITLE_DISPLAYFORMULA RETURN CHAR IS
    L_TITLE VARCHAR2(100);
  BEGIN
    IF (P_PAYSUM_FLAG = 'Y') THEN
      L_TITLE := 'End of Year Reconciliation Detail Report (AUD)';
    ELSE
      L_TITLE := 'Payroll Reconciliation Detail Report (AUD) ';
    END IF;
    RETURN (L_TITLE);
  END CF_TITLE_DISPLAYFORMULA;

  FUNCTION CP_TAXABLE_EARNINGS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TAXABLE_EARNINGS;
  END CP_TAXABLE_EARNINGS_P;

  FUNCTION CP_NON_TAXABLE_EARNINGS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_NON_TAXABLE_EARNINGS;
  END CP_NON_TAXABLE_EARNINGS_P;

  FUNCTION CP_DEDUCTIONS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_DEDUCTIONS;
  END CP_DEDUCTIONS_P;

  FUNCTION CP_PRE_TAX_DEDUCTIONS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PRE_TAX_DEDUCTIONS;
  END CP_PRE_TAX_DEDUCTIONS_P;

  FUNCTION CP_DIRECT_PAYMENTS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_DIRECT_PAYMENTS;
  END CP_DIRECT_PAYMENTS_P;

  FUNCTION CP_TAX_P RETURN NUMBER IS
  BEGIN
    RETURN CP_TAX;
  END CP_TAX_P;

  FUNCTION CP_GROSS_EARNINGS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_GROSS_EARNINGS;
  END CP_GROSS_EARNINGS_P;

  FUNCTION CP_NET_PAYMENT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_NET_PAYMENT;
  END CP_NET_PAYMENT_P;

  FUNCTION CP_YTD_TAXABLE_EARNINGS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_YTD_TAXABLE_EARNINGS;
  END CP_YTD_TAXABLE_EARNINGS_P;

  FUNCTION CP_YTD_NON_TAXABLE_EARNINGS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_YTD_NON_TAXABLE_EARNINGS;
  END CP_YTD_NON_TAXABLE_EARNINGS_P;

  FUNCTION CP_YTD_GROSS_EARNINGS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_YTD_GROSS_EARNINGS;
  END CP_YTD_GROSS_EARNINGS_P;

  FUNCTION CP_YTD_PRE_TAX_DEDUCTIONS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_YTD_PRE_TAX_DEDUCTIONS;
  END CP_YTD_PRE_TAX_DEDUCTIONS_P;

  FUNCTION CP_YTD_DIRECT_PAYMENTS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_YTD_DIRECT_PAYMENTS;
  END CP_YTD_DIRECT_PAYMENTS_P;

  FUNCTION CP_YTD_DEDUCTIONS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_YTD_DEDUCTIONS;
  END CP_YTD_DEDUCTIONS_P;

  FUNCTION CP_YTD_TAX_P RETURN NUMBER IS
  BEGIN
    RETURN CP_YTD_TAX;
  END CP_YTD_TAX_P;

  FUNCTION CP_YTD_NET_PAYMENT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_YTD_NET_PAYMENT;
  END CP_YTD_NET_PAYMENT_P;

  FUNCTION CP_EMP_CHG_P RETURN NUMBER IS
  BEGIN
    RETURN CP_EMP_CHG;
  END CP_EMP_CHG_P;

  FUNCTION CP_YTD_EMP_CHG_P RETURN NUMBER IS
  BEGIN
    RETURN CP_YTD_EMP_CHG;
  END CP_YTD_EMP_CHG_P;

  FUNCTION CP_END_REPORT_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_END_REPORT;
  END CP_END_REPORT_P;

  FUNCTION CP_NO_DATA_FOUND_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_NO_DATA_FOUND;
  END CP_NO_DATA_FOUND_P;

  FUNCTION CP_PS_WORKPLACE_GIVING_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PS_WORKPLACE_GIVING;
  END CP_PS_WORKPLACE_GIVING_P;

  FUNCTION CP_MAN_PS_WORKPLACE_GIVING_P RETURN NUMBER IS
  BEGIN
    RETURN CP_MAN_PS_WORKPLACE_GIVING;
  END CP_MAN_PS_WORKPLACE_GIVING_P;

  FUNCTION CP_PS_PAYSUM_GROSS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PS_PAYSUM_GROSS;
  END CP_PS_PAYSUM_GROSS_P;

  FUNCTION CP_MAN_PS_PAYSUM_GROSS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_MAN_PS_PAYSUM_GROSS;
  END CP_MAN_PS_PAYSUM_GROSS_P;

  FUNCTION CP_PS_REP_ALLOWANCES_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PS_REP_ALLOWANCES;
  END CP_PS_REP_ALLOWANCES_P;

  FUNCTION CP_MAN_PS_REP_ALLOWANCES_P RETURN NUMBER IS
  BEGIN
    RETURN CP_MAN_PS_REP_ALLOWANCES;
  END CP_MAN_PS_REP_ALLOWANCES_P;

  FUNCTION CP_PS_ETP_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PS_ETP;
  END CP_PS_ETP_P;

  FUNCTION CP_MAN_PS_ETP_P RETURN NUMBER IS
  BEGIN
    RETURN CP_MAN_PS_ETP;
  END CP_MAN_PS_ETP_P;

  FUNCTION CP_PS_RFB_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PS_RFB;
  END CP_PS_RFB_P;

  FUNCTION CP_MAN_PS_RFB_P RETURN NUMBER IS
  BEGIN
    RETURN CP_MAN_PS_RFB;
  END CP_MAN_PS_RFB_P;

  FUNCTION CP_PS_ASSESSABLE_ETP_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PS_ASSESSABLE_ETP;
  END CP_PS_ASSESSABLE_ETP_P;

  FUNCTION CP_MAN_PS_ASSESSABLE_ETP_P RETURN NUMBER IS
  BEGIN
    RETURN CP_MAN_PS_ASSESSABLE_ETP;
  END CP_MAN_PS_ASSESSABLE_ETP_P;

  FUNCTION CP_PS_CDEP_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PS_CDEP;
  END CP_PS_CDEP_P;

  FUNCTION CP_MAN_PS_CDEP_P RETURN NUMBER IS
  BEGIN
    RETURN CP_MAN_PS_CDEP;
  END CP_MAN_PS_CDEP_P;

  FUNCTION CP_PS_OTHER_INCOME_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PS_OTHER_INCOME;
  END CP_PS_OTHER_INCOME_P;

  FUNCTION CP_MAN_PS_OTHER_INCOME_P RETURN NUMBER IS
  BEGIN
    RETURN CP_MAN_PS_OTHER_INCOME;
  END CP_MAN_PS_OTHER_INCOME_P;

  FUNCTION CP_PS_UNION_FEES_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PS_UNION_FEES;
  END CP_PS_UNION_FEES_P;

  FUNCTION CP_MAN_PS_UNION_FEES_P RETURN NUMBER IS
  BEGIN
    RETURN CP_MAN_PS_UNION_FEES;
  END CP_MAN_PS_UNION_FEES_P;

  FUNCTION CP_PS_LUMPSUM_PAYMENTS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PS_LUMPSUM_PAYMENTS;
  END CP_PS_LUMPSUM_PAYMENTS_P;

  FUNCTION CP_MAN_PS_LUMPSUM_PAYMENTS_P RETURN NUMBER IS
  BEGIN
    RETURN CP_MAN_PS_LUMPSUM_PAYMENTS;
  END CP_MAN_PS_LUMPSUM_PAYMENTS_P;

  FUNCTION CP_PRINTED_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_PRINTED_COUNT;
  END CP_PRINTED_COUNT_P;

  FUNCTION CP_MANUAL_COUNT_P RETURN NUMBER IS
  BEGIN
    RETURN CP_MANUAL_COUNT;
  END CP_MANUAL_COUNT_P;

END PAY_PYAURECD_XMLP_PKG;


/
