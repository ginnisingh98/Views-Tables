--------------------------------------------------------
--  DDL for Package Body DPP_BPEL_POPCOVINV
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."DPP_BPEL_POPCOVINV" AS
/* $Header: dppvbpib.pls 120.1 2007/12/12 06:01:33 sdasan noship $ */
	FUNCTION PL_TO_SQL7(aPlsqlItem DPP_COVEREDINVENTORY_PVT.DPP_INV_HDR_REC_TYPE)
 	RETURN DPP_COVEREDINVENTORY_PVT_DPP7 IS
	aSqlItem DPP_COVEREDINVENTORY_PVT_DPP7;
	BEGIN
		-- initialize the object
		aSqlItem := DPP_COVEREDINVENTORY_PVT_DPP7(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
		aSqlItem.TRANSACTION_HEADER_ID := aPlsqlItem.TRANSACTION_HEADER_ID;
		aSqlItem.EFFECTIVE_START_DATE := aPlsqlItem.EFFECTIVE_START_DATE;
		aSqlItem.EFFECTIVE_END_DATE := aPlsqlItem.EFFECTIVE_END_DATE;
		aSqlItem.ORG_ID := aPlsqlItem.ORG_ID;
		aSqlItem.EXECUTION_DETAIL_ID := aPlsqlItem.EXECUTION_DETAIL_ID;
		aSqlItem.OUTPUT_XML := aPlsqlItem.OUTPUT_XML;
		aSqlItem.PROVIDER_PROCESS_ID := aPlsqlItem.PROVIDER_PROCESS_ID;
		aSqlItem.PROVIDER_PROCESS_INSTANCE_ID := aPlsqlItem.PROVIDER_PROCESS_INSTANCE_ID;
		aSqlItem.LAST_UPDATED_BY := aPlsqlItem.LAST_UPDATED_BY;
		RETURN aSqlItem;
	END PL_TO_SQL7;
	FUNCTION SQL_TO_PL7(aSqlItem DPP_COVEREDINVENTORY_PVT_DPP7)
	RETURN DPP_COVEREDINVENTORY_PVT.DPP_INV_HDR_REC_TYPE IS
	aPlsqlItem DPP_COVEREDINVENTORY_PVT.DPP_INV_HDR_REC_TYPE;
	BEGIN
		aPlsqlItem.TRANSACTION_HEADER_ID := aSqlItem.TRANSACTION_HEADER_ID;
		aPlsqlItem.EFFECTIVE_START_DATE := aSqlItem.EFFECTIVE_START_DATE;
		aPlsqlItem.EFFECTIVE_END_DATE := aSqlItem.EFFECTIVE_END_DATE;
		aPlsqlItem.ORG_ID := aSqlItem.ORG_ID;
		aPlsqlItem.EXECUTION_DETAIL_ID := aSqlItem.EXECUTION_DETAIL_ID;
		aPlsqlItem.OUTPUT_XML := aSqlItem.OUTPUT_XML;
		aPlsqlItem.PROVIDER_PROCESS_ID := aSqlItem.PROVIDER_PROCESS_ID;
		aPlsqlItem.PROVIDER_PROCESS_INSTANCE_ID := aSqlItem.PROVIDER_PROCESS_INSTANCE_ID;
		aPlsqlItem.LAST_UPDATED_BY := aSqlItem.LAST_UPDATED_BY;
		RETURN aPlsqlItem;
	END SQL_TO_PL7;
	FUNCTION PL_TO_SQL8(aPlsqlItem DPP_COVEREDINVENTORY_PVT.DPP_INV_COV_RCT_REC_TYPE)
 	RETURN DPP_COVEREDINVENTORY_PVT_DP13 IS
	aSqlItem DPP_COVEREDINVENTORY_PVT_DP13;
	BEGIN
		-- initialize the object
		aSqlItem := DPP_COVEREDINVENTORY_PVT_DP13(NULL, NULL);
		aSqlItem.DATE_RECEIVED := aPlsqlItem.DATE_RECEIVED;
		aSqlItem.ONHAND_QUANTITY := aPlsqlItem.ONHAND_QUANTITY;
		RETURN aSqlItem;
	END PL_TO_SQL8;
	FUNCTION SQL_TO_PL9(aSqlItem DPP_COVEREDINVENTORY_PVT_DP13)
	RETURN DPP_COVEREDINVENTORY_PVT.DPP_INV_COV_RCT_REC_TYPE IS
	aPlsqlItem DPP_COVEREDINVENTORY_PVT.DPP_INV_COV_RCT_REC_TYPE;
	BEGIN
		aPlsqlItem.DATE_RECEIVED := aSqlItem.DATE_RECEIVED;
		aPlsqlItem.ONHAND_QUANTITY := aSqlItem.ONHAND_QUANTITY;
		RETURN aPlsqlItem;
	END SQL_TO_PL9;
	FUNCTION PL_TO_SQL9(aPlsqlItem DPP_COVEREDINVENTORY_PVT.DPP_INV_COV_RCT_TBL_TYPE)
 	RETURN DPPCOVEREDINVENTORYPVTDP11_DP IS
	aSqlItem DPPCOVEREDINVENTORYPVTDP11_DP;
	BEGIN
		-- initialize the table
		aSqlItem := DPPCOVEREDINVENTORYPVTDP11_DP();
		aSqlItem.EXTEND(aPlsqlItem.COUNT);
		FOR I IN aPlsqlItem.FIRST..aPlsqlItem.LAST LOOP
			aSqlItem(I + 1 - aPlsqlItem.FIRST) := PL_TO_SQL8(aPlsqlItem(I));
		END LOOP;
		RETURN aSqlItem;
	END PL_TO_SQL9;
	FUNCTION SQL_TO_PL10(aSqlItem DPPCOVEREDINVENTORYPVTDP11_DP)
	RETURN DPP_COVEREDINVENTORY_PVT.DPP_INV_COV_RCT_TBL_TYPE IS
	aPlsqlItem DPP_COVEREDINVENTORY_PVT.DPP_INV_COV_RCT_TBL_TYPE;
	BEGIN
		FOR I IN 1..aSqlItem.COUNT LOOP
			aPlsqlItem(I) := SQL_TO_PL9(aSqlItem(I));
		END LOOP;
		RETURN aPlsqlItem;
	END SQL_TO_PL10;
	FUNCTION PL_TO_SQL10(aPlsqlItem DPP_COVEREDINVENTORY_PVT.DPP_INV_COV_WH_REC_TYPE)
 	RETURN DPP_COVEREDINVENTORY_PVT_DP11 IS
	aSqlItem DPP_COVEREDINVENTORY_PVT_DP11;
	BEGIN
		-- initialize the object
		aSqlItem := DPP_COVEREDINVENTORY_PVT_DP11(NULL, NULL, NULL, NULL);
		aSqlItem.WAREHOUSE_ID := aPlsqlItem.WAREHOUSE_ID;
		aSqlItem.WAREHOUSE_NAME := aPlsqlItem.WAREHOUSE_NAME;
		aSqlItem.COVERED_QUANTITY := aPlsqlItem.COVERED_QUANTITY;
		aSqlItem.RCT_LINE_TBL := PL_TO_SQL9(aPlsqlItem.RCT_LINE_TBL);
		RETURN aSqlItem;
	END PL_TO_SQL10;
	FUNCTION SQL_TO_PL11(aSqlItem DPP_COVEREDINVENTORY_PVT_DP11)
	RETURN DPP_COVEREDINVENTORY_PVT.DPP_INV_COV_WH_REC_TYPE IS
	aPlsqlItem DPP_COVEREDINVENTORY_PVT.DPP_INV_COV_WH_REC_TYPE;
	BEGIN
		aPlsqlItem.WAREHOUSE_ID := aSqlItem.WAREHOUSE_ID;
		aPlsqlItem.WAREHOUSE_NAME := aSqlItem.WAREHOUSE_NAME;
		aPlsqlItem.COVERED_QUANTITY := aSqlItem.COVERED_QUANTITY;
		aPlsqlItem.RCT_LINE_TBL := SQL_TO_PL10(aSqlItem.RCT_LINE_TBL);
		RETURN aPlsqlItem;
	END SQL_TO_PL11;
	FUNCTION PL_TO_SQL11(aPlsqlItem DPP_COVEREDINVENTORY_PVT.DPP_INV_COV_WH_TBL_TYPE)
 	RETURN DPPCOVEREDINVENTORYPVTDPP9_DP IS
	aSqlItem DPPCOVEREDINVENTORYPVTDPP9_DP;
	BEGIN
		-- initialize the table
		aSqlItem := DPPCOVEREDINVENTORYPVTDPP9_DP();
		aSqlItem.EXTEND(aPlsqlItem.COUNT);
		FOR I IN aPlsqlItem.FIRST..aPlsqlItem.LAST LOOP
			aSqlItem(I + 1 - aPlsqlItem.FIRST) := PL_TO_SQL10(aPlsqlItem(I));
		END LOOP;
		RETURN aSqlItem;
	END PL_TO_SQL11;
	FUNCTION SQL_TO_PL12(aSqlItem DPPCOVEREDINVENTORYPVTDPP9_DP)
	RETURN DPP_COVEREDINVENTORY_PVT.DPP_INV_COV_WH_TBL_TYPE IS
	aPlsqlItem DPP_COVEREDINVENTORY_PVT.DPP_INV_COV_WH_TBL_TYPE;
	BEGIN
		FOR I IN 1..aSqlItem.COUNT LOOP
			aPlsqlItem(I) := SQL_TO_PL11(aSqlItem(I));
		END LOOP;
		RETURN aPlsqlItem;
	END SQL_TO_PL12;
	FUNCTION PL_TO_SQL12(aPlsqlItem DPP_COVEREDINVENTORY_PVT.DPP_INV_COV_REC_TYPE)
 	RETURN DPP_COVEREDINVENTORY_PVT_DPP9 IS
	aSqlItem DPP_COVEREDINVENTORY_PVT_DPP9;
	BEGIN
		-- initialize the object
		aSqlItem := DPP_COVEREDINVENTORY_PVT_DPP9(NULL, NULL, NULL, NULL, NULL, NULL);
		aSqlItem.TRANSACTION_LINE_ID := aPlsqlItem.TRANSACTION_LINE_ID;
		aSqlItem.INVENTORY_ITEM_ID := aPlsqlItem.INVENTORY_ITEM_ID;
		aSqlItem.UOM_CODE := aPlsqlItem.UOM_CODE;
		aSqlItem.ONHAND_QUANTITY := aPlsqlItem.ONHAND_QUANTITY;
		aSqlItem.COVERED_QUANTITY := aPlsqlItem.COVERED_QUANTITY;
		aSqlItem.WH_LINE_TBL := PL_TO_SQL11(aPlsqlItem.WH_LINE_TBL);
		RETURN aSqlItem;
	END PL_TO_SQL12;
	FUNCTION SQL_TO_PL13(aSqlItem DPP_COVEREDINVENTORY_PVT_DPP9)
	RETURN DPP_COVEREDINVENTORY_PVT.DPP_INV_COV_REC_TYPE IS
	aPlsqlItem DPP_COVEREDINVENTORY_PVT.DPP_INV_COV_REC_TYPE;
	BEGIN
		aPlsqlItem.TRANSACTION_LINE_ID := aSqlItem.TRANSACTION_LINE_ID;
		aPlsqlItem.INVENTORY_ITEM_ID := aSqlItem.INVENTORY_ITEM_ID;
		aPlsqlItem.UOM_CODE := aSqlItem.UOM_CODE;
		aPlsqlItem.ONHAND_QUANTITY := aSqlItem.ONHAND_QUANTITY;
		aPlsqlItem.COVERED_QUANTITY := aSqlItem.COVERED_QUANTITY;
		aPlsqlItem.WH_LINE_TBL := SQL_TO_PL12(aSqlItem.WH_LINE_TBL);
		RETURN aPlsqlItem;
	END SQL_TO_PL13;
	FUNCTION PL_TO_SQL13(aPlsqlItem DPP_COVEREDINVENTORY_PVT.DPP_INV_COV_TBL_TYPE)
 	RETURN DPP_COVEREDINVENTORY_PVT_DPP8 IS
	aSqlItem DPP_COVEREDINVENTORY_PVT_DPP8;
	BEGIN
		-- initialize the table
		aSqlItem := DPP_COVEREDINVENTORY_PVT_DPP8();
		aSqlItem.EXTEND(aPlsqlItem.COUNT);
		FOR I IN aPlsqlItem.FIRST..aPlsqlItem.LAST LOOP
			aSqlItem(I + 1 - aPlsqlItem.FIRST) := PL_TO_SQL12(aPlsqlItem(I));
		END LOOP;
		RETURN aSqlItem;
	END PL_TO_SQL13;
	FUNCTION SQL_TO_PL8(aSqlItem DPP_COVEREDINVENTORY_PVT_DPP8)
	RETURN DPP_COVEREDINVENTORY_PVT.DPP_INV_COV_TBL_TYPE IS
	aPlsqlItem DPP_COVEREDINVENTORY_PVT.DPP_INV_COV_TBL_TYPE;
	BEGIN
		FOR I IN 1..aSqlItem.COUNT LOOP
			aPlsqlItem(I) := SQL_TO_PL13(aSqlItem(I));
		END LOOP;
		RETURN aPlsqlItem;
	END SQL_TO_PL8;

   PROCEDURE DPP_COVEREDINVENTORY_PVT$POPU (P_API_VERSION NUMBER,P_INIT_MSG_LIST VARCHAR2,P_COMMIT VARCHAR2,
   P_VALIDATION_LEVEL NUMBER,X_RETURN_STATUS OUT NOCOPY VARCHAR2,X_MSG_COUNT OUT NOCOPY NUMBER,X_MSG_DATA OUT NOCOPY VARCHAR2,
   P_INV_HDR_REC DPP_COVEREDINVENTORY_PVT_DPP7,P_COVERED_INV_TBL DPP_COVEREDINVENTORY_PVT_DPP8) IS
      P_INV_HDR_REC_ APPS.DPP_COVEREDINVENTORY_PVT.DPP_INV_HDR_REC_TYPE;
      P_COVERED_INV_TBL_ APPS.DPP_COVEREDINVENTORY_PVT.DPP_INV_COV_TBL_TYPE;
   BEGIN
      P_INV_HDR_REC_ := DPP_BPEL_POPCOVINV.SQL_TO_PL7(P_INV_HDR_REC);
      P_COVERED_INV_TBL_ := DPP_BPEL_POPCOVINV.SQL_TO_PL8(P_COVERED_INV_TBL);
      APPS.DPP_COVEREDINVENTORY_PVT.POPULATE_COVEREDINVENTORY(P_API_VERSION,P_INIT_MSG_LIST,P_COMMIT,P_VALIDATION_LEVEL,X_RETURN_STATUS,X_MSG_COUNT,X_MSG_DATA,P_INV_HDR_REC_,P_COVERED_INV_TBL_);
   END DPP_COVEREDINVENTORY_PVT$POPU;

END DPP_BPEL_POPCOVINV;

/
