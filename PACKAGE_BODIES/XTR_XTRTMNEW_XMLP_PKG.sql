--------------------------------------------------------
--  DDL for Package Body XTR_XTRTMNEW_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."XTR_XTRTMNEW_XMLP_PKG" AS
/* $Header: XTRTMNEWB.pls 120.1 2007/12/28 13:02:27 npannamp noship $ */
  FUNCTION CF_SET_PARAFORMULA RETURN VARCHAR2 IS
  BEGIN
    SELECT
      SUBSTR(USER
            ,1
            ,10)
    INTO
      CP_PARA
    FROM
      DUAL;
    RETURN (CP_PARA);
  END CF_SET_PARAFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_DMMY_NUM NUMBER;
    L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
    apf boolean;
    CURSOR GET_LANGUAGE_DESC IS
      SELECT
        ITEM_NAME,
        SUBSTR(TEXT
              ,1
              ,100) LANG_NAME
      FROM
        XTR_SYS_LANGUAGES_VL
      WHERE MODULE_NAME = 'XTRTMNEW';
  BEGIN
    P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;
    apf := AFTERPFORM;
    CP_NEW_DEALS_FROM := to_char(P_NEW_DEALS_FROM,'DD-MON-YY');
    CP_NEW_DEALS_TO := to_char(P_NEW_DEALS_TO,'DD-MON-YY');
    CP_DEALS_REPAID_FROM := to_char(P_DEALS_REPAID_FROM,'DD-MON-YY');
    BEGIN
      COMPANY_NAME_HEADER := CEP_STANDARD.GET_WINDOW_SESSION_TITLE;
    EXCEPTION
      WHEN OTHERS THEN
        FND_MESSAGE.SET_NAME('XTR'
                            ,'XTR_LOOKUP_ERR');
        L_MESSAGE := FND_MESSAGE.GET;
        RAISE_APPLICATION_ERROR(-20101
                               ,NULL);
    END;
    IF (P_DISPLAY_DEBUG = 'Y') THEN
      NULL;
    END IF;
    FOR c IN GET_LANGUAGE_DESC LOOP
      IF C.ITEM_NAME = 'Z1NEW_DEALS_FROM' THEN
        Z1NEW_DEALS_FROM1 := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1NEW_SETTLED_BOTH' THEN
        Z1NEW_SETTLED_BOTH := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1ORDER_BY' THEN
        Z1ORDER_BY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1PARAMETERS' THEN
        Z1PARAMETERS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1SETTLED_DEALS_FROM' THEN
        Z1SETTLED_DEALS_FROM := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1TO' THEN
        Z1TO := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2CCY' THEN
        Z2CCY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2CLIENT' THEN
        Z2CLIENT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2DEAL_NO' THEN
        Z2DEAL_NO := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2END_OF_REPORT' THEN
        Z2END_OF_REPORT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2FACE_VALUE' THEN
        Z2FACE_VALUE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2INTEREST_RATE' THEN
        Z2INTEREST_RATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2MATURITY_DATE' THEN
        Z2MATURITY_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2NAME' THEN
        Z2NAME := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2NEW_TRANSACTIONS' THEN
        Z2NEW_TRANSACTIONS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PAYMENT_FREQUENCY' THEN
        Z2PAYMENT_FREQUENCY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PRODUCT' THEN
        Z2PRODUCT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PRODUCT_TYPE' THEN
        Z2PRODUCT_TYPE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2P_I_AMOUNT' THEN
        Z2P_I_AMOUNT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2SETTLED_TRANSACTIONS' THEN
        Z2SETTLED_TRANSACTIONS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2SETTLE_DATE' THEN
        Z2SETTLE_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2START_DATE' THEN
        Z2START_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PAGE' THEN
        Z2PAGE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'REPORT_DATE' THEN
        REPORT_DATE := C.LANG_NAME;
      END IF;
    END LOOP;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
  BEGIN
    IF P_NEW_DEALS_FROM IS NOT NULL THEN
      IF P_NEW_DEALS_TO IS NOT NULL THEN
        LP_START_DATE_Q1 := 'AND d.start_date between ''' || P_NEW_DEALS_FROM || ''' and ''' || P_NEW_DEALS_TO || '''';
      ELSE
        LP_START_DATE_Q1 := 'AND d.start_date > ''' || P_NEW_DEALS_FROM || '''';
      END IF;
    ELSE
      IF P_NEW_DEALS_TO IS NOT NULL THEN
        LP_START_DATE_Q1 := 'AND d.start_date < ''' || P_NEW_DEALS_TO || '''';
      END IF;
    END IF;
    IF P_DEALS_REPAID_FROM IS NOT NULL THEN
      IF P_DEALS_REPAID_TO IS NOT NULL THEN
        LP_SETTLED_DATE_Q2 := 'AND r.settle_date between ''' || P_DEALS_REPAID_FROM || ''' and ''' || P_DEALS_REPAID_TO || '''';
      ELSE
        LP_SETTLED_DATE_Q2 := 'AND r.settle_date > ''' || P_DEALS_REPAID_FROM || '''';
      END IF;
    ELSE
      IF P_DEALS_REPAID_TO IS NOT NULL THEN
        LP_SETTLED_DATE_Q2 := 'AND r.settle_date < ''' || P_DEALS_REPAID_TO || '''';
      END IF;
    END IF;

    if LP_SETTLED_DATE_Q2 is null then
    	LP_SETTLED_DATE_Q2 := 'and 1 = 1 ';
    end if;

    if LP_START_DATE_Q1 is null then
    	LP_START_DATE_Q1 := 'and 1 = 1 ';
    end if;

    SELECT
      substr(CP.USER_CONCURRENT_PROGRAM_NAME,1,instr(CP.USER_CONCURRENT_PROGRAM_NAME,' (XML)'))
    INTO
      REPORT_SHORT_NAME
    FROM
      FND_CONCURRENT_PROGRAMS_VL CP,
      FND_CONCURRENT_REQUESTS CR
    WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
      AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
      AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
    IF FALSE THEN
      NULL;
    END IF;
    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION CP_PARA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PARA;
  END CP_PARA_P;

END XTR_XTRTMNEW_XMLP_PKG;


/
