--------------------------------------------------------
--  DDL for Package Body HRDPP_UPDATE_ELEMENT_ENTRY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."HRDPP_UPDATE_ELEMENT_ENTRY" as
/*
 * Generated by hr_pump_meta_mapper at: 2018/06/16 10:06:07
 * Generated for API: PY_ELEMENT_ENTRY_API.UPDATE_ELEMENT_ENTRY
 */
--
dh constant date := hr_api.g_date;
nh constant number := hr_api.g_number;
vh constant varchar2(64) := hr_api.g_varchar2;
c_sot constant date := to_date('01010001','DDMMYYYY');
cn constant varchar2(32) := '<NULL>';
dn constant date := null;
nn constant number := null;
vn constant varchar2(1) := null;
--
function dc(p in date) return varchar2 is
begin
if p<c_sot then
 if p<>trunc(p) then
  return to_char(p,'SYYYY/MM/DD HH24:MI:SS');
 end if;
 return to_char(p,'SYYYY/MM/DD');
elsif p<>trunc(p) then
 return to_char(p,'YYYY/MM/DD HH24:MI:SS');
end if;
return to_char(p,'YYYY/MM/DD');
end dc;
function d(p in varchar2) return date is
begin
if length(p)=10 then
return to_date(p,'YYYY/MM/DD');
elsif length(p)=19 then
return to_date(p,'YYYY/MM/DD HH24:MI:SS');
elsif length(p)=11 then
return to_date(p,'SYYYY/MM/DD');
elsif length(p)=20 then
return to_date(p,'SYYYY/MM/DD HH24:MI:SS');
end if;
-- Try default format as last resort.
return to_date(p,'YYYY/MM/DD');
end d;
function n(p in varchar2) return number is
begin
return to_number(p);
end n;
function dd(p in date,i in varchar2)
return varchar2 is
begin
if upper(i) = 'N' then return dc(p);
else return cn; end if;
end dd;
function nd(p in number,i in varchar2)
return varchar2 is
begin
if upper(i) = 'N' then return to_char(p);
else return cn; end if;
end nd;
--
procedure iuk
(p_batch_line_id  in number,
p_user_key_value in varchar2,
p_unique_key_id  in number)
is
begin
hr_data_pump.entry('ins_user_key');
insert into hr_pump_batch_line_user_keys
(user_key_id, batch_line_id,user_key_value,unique_key_id)
values
(hr_pump_batch_line_user_keys_s.nextval,
p_batch_line_id,
p_user_key_value,
p_unique_key_id);
hr_data_pump.exit('ins_user_key');
end iuk;
--
procedure insert_batch_lines
(p_batch_id      in number
,p_data_pump_batch_line_id in number default null
,p_data_pump_business_grp_name in varchar2 default null
,p_user_sequence in number default null
,p_link_value    in number default null
,P_DATETRACK_UPDATE_MODE in varchar2
,P_EFFECTIVE_DATE in date
,P_UPDATING_ACTION_TYPE in varchar2 default null
,P_CREATOR_TYPE in varchar2 default null
,P_REASON in varchar2 default null
,P_SUBPRIORITY in number default null
,I_SUBPRIORITY in varchar2 default 'N'
,P_DATE_EARNED in date default null
,I_DATE_EARNED in varchar2 default 'N'
,P_ATTRIBUTE_CATEGORY in varchar2 default null
,P_ATTRIBUTE1 in varchar2 default null
,P_ATTRIBUTE2 in varchar2 default null
,P_ATTRIBUTE3 in varchar2 default null
,P_ATTRIBUTE4 in varchar2 default null
,P_ATTRIBUTE5 in varchar2 default null
,P_ATTRIBUTE6 in varchar2 default null
,P_ATTRIBUTE7 in varchar2 default null
,P_ATTRIBUTE8 in varchar2 default null
,P_ATTRIBUTE9 in varchar2 default null
,P_ATTRIBUTE10 in varchar2 default null
,P_ATTRIBUTE11 in varchar2 default null
,P_ATTRIBUTE12 in varchar2 default null
,P_ATTRIBUTE13 in varchar2 default null
,P_ATTRIBUTE14 in varchar2 default null
,P_ATTRIBUTE15 in varchar2 default null
,P_ATTRIBUTE16 in varchar2 default null
,P_ATTRIBUTE17 in varchar2 default null
,P_ATTRIBUTE18 in varchar2 default null
,P_ATTRIBUTE19 in varchar2 default null
,P_ATTRIBUTE20 in varchar2 default null
,P_ENTRY_VALUE1 in varchar2 default null
,P_ENTRY_VALUE2 in varchar2 default null
,P_ENTRY_VALUE3 in varchar2 default null
,P_ENTRY_VALUE4 in varchar2 default null
,P_ENTRY_VALUE5 in varchar2 default null
,P_ENTRY_VALUE6 in varchar2 default null
,P_ENTRY_VALUE7 in varchar2 default null
,P_ENTRY_VALUE8 in varchar2 default null
,P_ENTRY_VALUE9 in varchar2 default null
,P_ENTRY_VALUE10 in varchar2 default null
,P_ENTRY_VALUE11 in varchar2 default null
,P_ENTRY_VALUE12 in varchar2 default null
,P_ENTRY_VALUE13 in varchar2 default null
,P_ENTRY_VALUE14 in varchar2 default null
,P_ENTRY_VALUE15 in varchar2 default null
,P_ENTRY_INFORMATION_CATEGORY in varchar2 default null
,P_ENTRY_INFORMATION1 in varchar2 default null
,P_ENTRY_INFORMATION2 in varchar2 default null
,P_ENTRY_INFORMATION3 in varchar2 default null
,P_ENTRY_INFORMATION4 in varchar2 default null
,P_ENTRY_INFORMATION5 in varchar2 default null
,P_ENTRY_INFORMATION6 in varchar2 default null
,P_ENTRY_INFORMATION7 in varchar2 default null
,P_ENTRY_INFORMATION8 in varchar2 default null
,P_ENTRY_INFORMATION9 in varchar2 default null
,P_ENTRY_INFORMATION10 in varchar2 default null
,P_ENTRY_INFORMATION11 in varchar2 default null
,P_ENTRY_INFORMATION12 in varchar2 default null
,P_ENTRY_INFORMATION13 in varchar2 default null
,P_ENTRY_INFORMATION14 in varchar2 default null
,P_ENTRY_INFORMATION15 in varchar2 default null
,P_ENTRY_INFORMATION16 in varchar2 default null
,P_ENTRY_INFORMATION17 in varchar2 default null
,P_ENTRY_INFORMATION18 in varchar2 default null
,P_ENTRY_INFORMATION19 in varchar2 default null
,P_ENTRY_INFORMATION20 in varchar2 default null
,P_ENTRY_INFORMATION21 in varchar2 default null
,P_ENTRY_INFORMATION22 in varchar2 default null
,P_ENTRY_INFORMATION23 in varchar2 default null
,P_ENTRY_INFORMATION24 in varchar2 default null
,P_ENTRY_INFORMATION25 in varchar2 default null
,P_ENTRY_INFORMATION26 in varchar2 default null
,P_ENTRY_INFORMATION27 in varchar2 default null
,P_ENTRY_INFORMATION28 in varchar2 default null
,P_ENTRY_INFORMATION29 in varchar2 default null
,P_ENTRY_INFORMATION30 in varchar2 default null
,P_OVERRIDE_USER_ENT_CHK in varchar2 default null
,P_ELEMENT_ENTRY_USER_KEY in varchar2
,P_COST_ALLOC_KEYFLEX_USER_KEY in varchar2 default null
,P_UPDATING_ACTION_USER_KEY in varchar2 default null
,P_ORIGINAL_ENTRY_USER_KEY in varchar2 default null
,P_COMMENT_USER_KEY in varchar2 default null
,P_PERSONAL_PAY_METHOD_USER_KEY in varchar2 default null
,P_INPUT_VALUE_NAME1 in varchar2 default null
,P_ELEMENT_NAME in varchar2 default null
,P_LANGUAGE_CODE in varchar2 default null
,P_INPUT_VALUE_NAME2 in varchar2 default null
,P_INPUT_VALUE_NAME3 in varchar2 default null
,P_INPUT_VALUE_NAME4 in varchar2 default null
,P_INPUT_VALUE_NAME5 in varchar2 default null
,P_INPUT_VALUE_NAME6 in varchar2 default null
,P_INPUT_VALUE_NAME7 in varchar2 default null
,P_INPUT_VALUE_NAME8 in varchar2 default null
,P_INPUT_VALUE_NAME9 in varchar2 default null
,P_INPUT_VALUE_NAME10 in varchar2 default null
,P_INPUT_VALUE_NAME11 in varchar2 default null
,P_INPUT_VALUE_NAME12 in varchar2 default null
,P_INPUT_VALUE_NAME13 in varchar2 default null
,P_INPUT_VALUE_NAME14 in varchar2 default null
,P_INPUT_VALUE_NAME15 in varchar2 default null) is
blid number := p_data_pump_batch_line_id;
begin
if blid is not null then
delete from hr_pump_batch_lines where batch_line_id = blid;
delete from hr_pump_batch_exceptions
where source_type = 'BATCH_LINE' and source_id = blid;
end if;
insert into hr_pump_batch_lines
(batch_id
,batch_line_id
,business_group_name
,api_module_id
,line_status
,user_sequence
,link_value
,pval001
,pval002
,pval003
,pval004
,pval005
,pval006
,pval007
,pval008
,pval009
,pval010
,pval011
,pval012
,pval013
,pval014
,pval015
,pval016
,pval017
,pval018
,pval019
,pval020
,pval021
,pval022
,pval023
,pval024
,pval025
,pval026
,pval027
,pval028
,pval029
,pval030
,pval031
,pval032
,pval033
,pval034
,pval035
,pval036
,pval037
,pval038
,pval039
,pval040
,pval041
,pval042
,pval043
,pval044
,pval045
,pval046
,pval047
,pval048
,pval049
,pval050
,pval051
,pval052
,pval053
,pval054
,pval055
,pval056
,pval057
,pval058
,pval059
,pval060
,pval061
,pval062
,pval063
,pval064
,pval065
,pval066
,pval067
,pval068
,pval069
,pval070
,pval071
,pval072
,pval073
,pval074
,pval075
,pval079
,pval080
,pval081
,pval082
,pval083
,pval084
,pval085
,pval086
,pval087
,pval088
,pval089
,pval090
,pval091
,pval092
,pval093
,pval094
,pval095
,pval096
,pval097
,pval098
,pval099
,pval100
,pval101)
values
(p_batch_id
,nvl(blid,hr_pump_batch_lines_s.nextval)
,p_data_pump_business_grp_name
,1383
,'U'
,p_user_sequence
,p_link_value
,P_DATETRACK_UPDATE_MODE
,dc(P_EFFECTIVE_DATE)
,P_UPDATING_ACTION_TYPE
,P_CREATOR_TYPE
,P_REASON
,nd(P_SUBPRIORITY,I_SUBPRIORITY)
,dd(P_DATE_EARNED,I_DATE_EARNED)
,P_ATTRIBUTE_CATEGORY
,P_ATTRIBUTE1
,P_ATTRIBUTE2
,P_ATTRIBUTE3
,P_ATTRIBUTE4
,P_ATTRIBUTE5
,P_ATTRIBUTE6
,P_ATTRIBUTE7
,P_ATTRIBUTE8
,P_ATTRIBUTE9
,P_ATTRIBUTE10
,P_ATTRIBUTE11
,P_ATTRIBUTE12
,P_ATTRIBUTE13
,P_ATTRIBUTE14
,P_ATTRIBUTE15
,P_ATTRIBUTE16
,P_ATTRIBUTE17
,P_ATTRIBUTE18
,P_ATTRIBUTE19
,P_ATTRIBUTE20
,P_ENTRY_VALUE1
,P_ENTRY_VALUE2
,P_ENTRY_VALUE3
,P_ENTRY_VALUE4
,P_ENTRY_VALUE5
,P_ENTRY_VALUE6
,P_ENTRY_VALUE7
,P_ENTRY_VALUE8
,P_ENTRY_VALUE9
,P_ENTRY_VALUE10
,P_ENTRY_VALUE11
,P_ENTRY_VALUE12
,P_ENTRY_VALUE13
,P_ENTRY_VALUE14
,P_ENTRY_VALUE15
,P_ENTRY_INFORMATION_CATEGORY
,P_ENTRY_INFORMATION1
,P_ENTRY_INFORMATION2
,P_ENTRY_INFORMATION3
,P_ENTRY_INFORMATION4
,P_ENTRY_INFORMATION5
,P_ENTRY_INFORMATION6
,P_ENTRY_INFORMATION7
,P_ENTRY_INFORMATION8
,P_ENTRY_INFORMATION9
,P_ENTRY_INFORMATION10
,P_ENTRY_INFORMATION11
,P_ENTRY_INFORMATION12
,P_ENTRY_INFORMATION13
,P_ENTRY_INFORMATION14
,P_ENTRY_INFORMATION15
,P_ENTRY_INFORMATION16
,P_ENTRY_INFORMATION17
,P_ENTRY_INFORMATION18
,P_ENTRY_INFORMATION19
,P_ENTRY_INFORMATION20
,P_ENTRY_INFORMATION21
,P_ENTRY_INFORMATION22
,P_ENTRY_INFORMATION23
,P_ENTRY_INFORMATION24
,P_ENTRY_INFORMATION25
,P_ENTRY_INFORMATION26
,P_ENTRY_INFORMATION27
,P_ENTRY_INFORMATION28
,P_ENTRY_INFORMATION29
,P_ENTRY_INFORMATION30
,P_OVERRIDE_USER_ENT_CHK
,P_ELEMENT_ENTRY_USER_KEY
,P_COST_ALLOC_KEYFLEX_USER_KEY
,P_UPDATING_ACTION_USER_KEY
,P_ORIGINAL_ENTRY_USER_KEY
,P_COMMENT_USER_KEY
,P_PERSONAL_PAY_METHOD_USER_KEY
,P_INPUT_VALUE_NAME1
,P_ELEMENT_NAME
,P_LANGUAGE_CODE
,P_INPUT_VALUE_NAME2
,P_INPUT_VALUE_NAME3
,P_INPUT_VALUE_NAME4
,P_INPUT_VALUE_NAME5
,P_INPUT_VALUE_NAME6
,P_INPUT_VALUE_NAME7
,P_INPUT_VALUE_NAME8
,P_INPUT_VALUE_NAME9
,P_INPUT_VALUE_NAME10
,P_INPUT_VALUE_NAME11
,P_INPUT_VALUE_NAME12
,P_INPUT_VALUE_NAME13
,P_INPUT_VALUE_NAME14
,P_INPUT_VALUE_NAME15);
end insert_batch_lines;
--
procedure call
(p_business_group_id in number,
p_batch_line_id     in number) is
cursor cr is
select l.rowid myrowid,
decode(l.pval001,cn,vn,l.pval001) p1,
decode(l.pval002,cn,dn,d(l.pval002)) p2,
decode(l.pval003,cn,vn,vn,vh,l.pval003) p3,
l.pval003 d3,
decode(l.pval004,cn,vn,vn,vh,l.pval004) p4,
l.pval004 d4,
decode(l.pval005,cn,vn,vn,vh,
 hr_pump_get.gl(l.pval005,'ELE_ENTRY_REASON',d(l.pval002),l.pval087)) p5,
l.pval005 d5,
decode(l.pval006,cn,nn,vn,nh,n(l.pval006)) p6,
l.pval006 d6,
decode(l.pval007,cn,dn,vn,dh,d(l.pval007)) p7,
l.pval007 d7,
decode(l.pval008,cn,vn,vn,vh,l.pval008) p8,
l.pval008 d8,
decode(l.pval009,cn,vn,vn,vh,l.pval009) p9,
l.pval009 d9,
decode(l.pval010,cn,vn,vn,vh,l.pval010) p10,
l.pval010 d10,
decode(l.pval011,cn,vn,vn,vh,l.pval011) p11,
l.pval011 d11,
decode(l.pval012,cn,vn,vn,vh,l.pval012) p12,
l.pval012 d12,
decode(l.pval013,cn,vn,vn,vh,l.pval013) p13,
l.pval013 d13,
decode(l.pval014,cn,vn,vn,vh,l.pval014) p14,
l.pval014 d14,
decode(l.pval015,cn,vn,vn,vh,l.pval015) p15,
l.pval015 d15,
decode(l.pval016,cn,vn,vn,vh,l.pval016) p16,
l.pval016 d16,
decode(l.pval017,cn,vn,vn,vh,l.pval017) p17,
l.pval017 d17,
decode(l.pval018,cn,vn,vn,vh,l.pval018) p18,
l.pval018 d18,
decode(l.pval019,cn,vn,vn,vh,l.pval019) p19,
l.pval019 d19,
decode(l.pval020,cn,vn,vn,vh,l.pval020) p20,
l.pval020 d20,
decode(l.pval021,cn,vn,vn,vh,l.pval021) p21,
l.pval021 d21,
decode(l.pval022,cn,vn,vn,vh,l.pval022) p22,
l.pval022 d22,
decode(l.pval023,cn,vn,vn,vh,l.pval023) p23,
l.pval023 d23,
decode(l.pval024,cn,vn,vn,vh,l.pval024) p24,
l.pval024 d24,
decode(l.pval025,cn,vn,vn,vh,l.pval025) p25,
l.pval025 d25,
decode(l.pval026,cn,vn,vn,vh,l.pval026) p26,
l.pval026 d26,
decode(l.pval027,cn,vn,vn,vh,l.pval027) p27,
l.pval027 d27,
decode(l.pval028,cn,vn,vn,vh,l.pval028) p28,
l.pval028 d28,
decode(l.pval029,cn,vn,vn,NULL,l.pval029) p29,
l.pval029 d29,
decode(l.pval030,cn,vn,vn,NULL,l.pval030) p30,
l.pval030 d30,
decode(l.pval031,cn,vn,vn,NULL,l.pval031) p31,
l.pval031 d31,
decode(l.pval032,cn,vn,vn,NULL,l.pval032) p32,
l.pval032 d32,
decode(l.pval033,cn,vn,vn,NULL,l.pval033) p33,
l.pval033 d33,
decode(l.pval034,cn,vn,vn,NULL,l.pval034) p34,
l.pval034 d34,
decode(l.pval035,cn,vn,vn,NULL,l.pval035) p35,
l.pval035 d35,
decode(l.pval036,cn,vn,vn,NULL,l.pval036) p36,
l.pval036 d36,
decode(l.pval037,cn,vn,vn,NULL,l.pval037) p37,
l.pval037 d37,
decode(l.pval038,cn,vn,vn,NULL,l.pval038) p38,
l.pval038 d38,
decode(l.pval039,cn,vn,vn,NULL,l.pval039) p39,
l.pval039 d39,
decode(l.pval040,cn,vn,vn,NULL,l.pval040) p40,
l.pval040 d40,
decode(l.pval041,cn,vn,vn,NULL,l.pval041) p41,
l.pval041 d41,
decode(l.pval042,cn,vn,vn,NULL,l.pval042) p42,
l.pval042 d42,
decode(l.pval043,cn,vn,vn,NULL,l.pval043) p43,
l.pval043 d43,
decode(l.pval044,cn,vn,vn,vh,l.pval044) p44,
l.pval044 d44,
decode(l.pval045,cn,vn,vn,vh,l.pval045) p45,
l.pval045 d45,
decode(l.pval046,cn,vn,vn,vh,l.pval046) p46,
l.pval046 d46,
decode(l.pval047,cn,vn,vn,vh,l.pval047) p47,
l.pval047 d47,
decode(l.pval048,cn,vn,vn,vh,l.pval048) p48,
l.pval048 d48,
decode(l.pval049,cn,vn,vn,vh,l.pval049) p49,
l.pval049 d49,
decode(l.pval050,cn,vn,vn,vh,l.pval050) p50,
l.pval050 d50,
decode(l.pval051,cn,vn,vn,vh,l.pval051) p51,
l.pval051 d51,
decode(l.pval052,cn,vn,vn,vh,l.pval052) p52,
l.pval052 d52,
decode(l.pval053,cn,vn,vn,vh,l.pval053) p53,
l.pval053 d53,
decode(l.pval054,cn,vn,vn,vh,l.pval054) p54,
l.pval054 d54,
decode(l.pval055,cn,vn,vn,vh,l.pval055) p55,
l.pval055 d55,
decode(l.pval056,cn,vn,vn,vh,l.pval056) p56,
l.pval056 d56,
decode(l.pval057,cn,vn,vn,vh,l.pval057) p57,
l.pval057 d57,
decode(l.pval058,cn,vn,vn,vh,l.pval058) p58,
l.pval058 d58,
decode(l.pval059,cn,vn,vn,vh,l.pval059) p59,
l.pval059 d59,
decode(l.pval060,cn,vn,vn,vh,l.pval060) p60,
l.pval060 d60,
decode(l.pval061,cn,vn,vn,vh,l.pval061) p61,
l.pval061 d61,
decode(l.pval062,cn,vn,vn,vh,l.pval062) p62,
l.pval062 d62,
decode(l.pval063,cn,vn,vn,vh,l.pval063) p63,
l.pval063 d63,
decode(l.pval064,cn,vn,vn,vh,l.pval064) p64,
l.pval064 d64,
decode(l.pval065,cn,vn,vn,vh,l.pval065) p65,
l.pval065 d65,
decode(l.pval066,cn,vn,vn,vh,l.pval066) p66,
l.pval066 d66,
decode(l.pval067,cn,vn,vn,vh,l.pval067) p67,
l.pval067 d67,
decode(l.pval068,cn,vn,vn,vh,l.pval068) p68,
l.pval068 d68,
decode(l.pval069,cn,vn,vn,vh,l.pval069) p69,
l.pval069 d69,
decode(l.pval070,cn,vn,vn,vh,l.pval070) p70,
l.pval070 d70,
decode(l.pval071,cn,vn,vn,vh,l.pval071) p71,
l.pval071 d71,
decode(l.pval072,cn,vn,vn,vh,l.pval072) p72,
l.pval072 d72,
decode(l.pval073,cn,vn,vn,vh,l.pval073) p73,
l.pval073 d73,
decode(l.pval074,cn,vn,vn,vh,l.pval074) p74,
l.pval074 d74,
decode(l.pval075,cn,vn,vn,'N',l.pval075) p75,
l.pval075 d75,
decode(l.pval076,cn,dn,d(l.pval076)) p76,
decode(l.pval077,cn,dn,d(l.pval077)) p77,
l.pval078 p78,
decode(l.pval079,cn,vn,l.pval079) p79,
decode(l.pval080,cn,vn,vn,vn,l.pval080) p80,
l.pval080 d80,
decode(l.pval081,cn,vn,vn,vn,l.pval081) p81,
l.pval081 d81,
decode(l.pval082,cn,vn,vn,vn,l.pval082) p82,
l.pval082 d82,
decode(l.pval083,cn,vn,vn,vn,l.pval083) p83,
l.pval083 d83,
decode(l.pval084,cn,vn,vn,vn,l.pval084) p84,
l.pval084 d84,
decode(l.pval085,cn,vn,vn,vh,l.pval085) p85,
l.pval085 d85,
decode(l.pval086,cn,vn,vn,vh,l.pval086) p86,
l.pval086 d86,
decode(l.pval087,cn,vn,vn,vh,l.pval087) p87,
l.pval087 d87,
decode(l.pval088,cn,vn,vn,vh,l.pval088) p88,
l.pval088 d88,
decode(l.pval089,cn,vn,vn,vh,l.pval089) p89,
l.pval089 d89,
decode(l.pval090,cn,vn,vn,vh,l.pval090) p90,
l.pval090 d90,
decode(l.pval091,cn,vn,vn,vh,l.pval091) p91,
l.pval091 d91,
decode(l.pval092,cn,vn,vn,vh,l.pval092) p92,
l.pval092 d92,
decode(l.pval093,cn,vn,vn,vh,l.pval093) p93,
l.pval093 d93,
decode(l.pval094,cn,vn,vn,vh,l.pval094) p94,
l.pval094 d94,
decode(l.pval095,cn,vn,vn,vh,l.pval095) p95,
l.pval095 d95,
decode(l.pval096,cn,vn,vn,vh,l.pval096) p96,
l.pval096 d96,
decode(l.pval097,cn,vn,vn,vh,l.pval097) p97,
l.pval097 d97,
decode(l.pval098,cn,vn,vn,vh,l.pval098) p98,
l.pval098 d98,
decode(l.pval099,cn,vn,vn,vh,l.pval099) p99,
l.pval099 d99,
decode(l.pval100,cn,vn,vn,vh,l.pval100) p100,
l.pval100 d100,
decode(l.pval101,cn,vn,vn,vh,l.pval101) p101,
l.pval101 d101
from hr_pump_batch_lines l
where l.batch_line_id = p_batch_line_id;
--
c cr%rowtype;
l_validate boolean := false;
L_UPDATE_WARNING boolean;
L_ELEMENT_ENTRY_ID number;
L_OBJECT_VERSION_NUMBER number;
L_COST_ALLOCATION_KEYFLEX_ID number;
L_UPDATING_ACTION_ID number;
L_ORIGINAL_ENTRY_ID number;
L_COMMENT_ID number;
L_CREATOR_ID number;
L_PERSONAL_PAYMENT_METHOD_ID number;
L_INPUT_VALUE_ID1 number;
L_INPUT_VALUE_ID2 number;
L_INPUT_VALUE_ID3 number;
L_INPUT_VALUE_ID4 number;
L_INPUT_VALUE_ID5 number;
L_INPUT_VALUE_ID6 number;
L_INPUT_VALUE_ID7 number;
L_INPUT_VALUE_ID8 number;
L_INPUT_VALUE_ID9 number;
L_INPUT_VALUE_ID10 number;
L_INPUT_VALUE_ID11 number;
L_INPUT_VALUE_ID12 number;
L_INPUT_VALUE_ID13 number;
L_INPUT_VALUE_ID14 number;
L_INPUT_VALUE_ID15 number;
--
begin
hr_data_pump.entry('call');
open cr;
fetch cr into c;
if cr%notfound then
hr_utility.set_message(800,'HR_50326_DP_NO_ROW');
hr_utility.set_message_token('TABLE','HR_PUMP_BATCH_LINES');
hr_utility.set_message_token('COLUMN','P_BATCH_LINE_ID');
hr_utility.set_message_token('VALUE',p_batch_line_id);
hr_utility.raise_error;
end if;
--
if c.p79 is null then
L_ELEMENT_ENTRY_ID:=nn;
else
L_ELEMENT_ENTRY_ID := 
hr_pump_get.get_element_entry_id
(P_ELEMENT_ENTRY_USER_KEY => c.p79);
end if;
--
if c.p79 is null or
c.p2 is null then
L_OBJECT_VERSION_NUMBER:=nn;
else
L_OBJECT_VERSION_NUMBER := 
hr_pump_get.GET_ELEMENT_ENTRY_OVN
(P_ELEMENT_ENTRY_USER_KEY => c.p79
,P_EFFECTIVE_DATE => c.p2);
end if;
--
if c.d80=cn then
L_COST_ALLOCATION_KEYFLEX_ID:=nn;
elsif c.d80 is null then 
L_COST_ALLOCATION_KEYFLEX_ID:=nh;
else
L_COST_ALLOCATION_KEYFLEX_ID := 
hr_pump_get.get_cost_allocation_keyflex_id
(P_COST_ALLOC_KEYFLEX_USER_KEY => c.p80);
end if;
--
if c.d81=cn then
L_UPDATING_ACTION_ID:=nn;
elsif c.d81 is null then 
L_UPDATING_ACTION_ID:=nh;
else
L_UPDATING_ACTION_ID := 
hr_pump_get.get_updating_action_id
(P_UPDATING_ACTION_USER_KEY => c.p81);
end if;
--
if c.d82=cn then
L_ORIGINAL_ENTRY_ID:=nn;
elsif c.d82 is null then 
L_ORIGINAL_ENTRY_ID:=nh;
else
L_ORIGINAL_ENTRY_ID := 
hr_pump_get.get_original_entry_id
(P_ORIGINAL_ENTRY_USER_KEY => c.p82);
end if;
--
if c.d83=cn then
L_COMMENT_ID:=nn;
elsif c.d83 is null then 
L_COMMENT_ID:=nh;
else
L_COMMENT_ID := 
hr_pump_get.get_comment_id
(P_COMMENT_USER_KEY => c.p83);
end if;
--
L_CREATOR_ID := 
hr_pump_get.get_creator_id;
--
if c.d84=cn then
L_PERSONAL_PAYMENT_METHOD_ID:=nn;
elsif c.d84 is null then 
L_PERSONAL_PAYMENT_METHOD_ID:=nh;
else
L_PERSONAL_PAYMENT_METHOD_ID := 
hr_pump_get.get_personal_payment_method_id
(P_PERSONAL_PAY_METHOD_USER_KEY => c.p84);
end if;
--
if c.d85 is null or
c.d85=cn or
c.d86 is null or
c.d86=cn or
c.p2 is null or
c.d87 is null or
c.d87=cn then
L_INPUT_VALUE_ID1:=nn;
else
L_INPUT_VALUE_ID1 := 
hr_pump_get.GET_INPUT_VALUE_ID1
(P_INPUT_VALUE_NAME1 => c.p85
,P_ELEMENT_NAME => c.p86
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p2
,P_LANGUAGE_CODE => c.p87);
end if;
--
if c.d88 is null or
c.d88=cn or
c.d86 is null or
c.d86=cn or
c.p2 is null or
c.d87 is null or
c.d87=cn then
L_INPUT_VALUE_ID2:=nn;
else
L_INPUT_VALUE_ID2 := 
hr_pump_get.GET_INPUT_VALUE_ID2
(P_INPUT_VALUE_NAME2 => c.p88
,P_ELEMENT_NAME => c.p86
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p2
,P_LANGUAGE_CODE => c.p87);
end if;
--
if c.d89 is null or
c.d89=cn or
c.d86 is null or
c.d86=cn or
c.p2 is null or
c.d87 is null or
c.d87=cn then
L_INPUT_VALUE_ID3:=nn;
else
L_INPUT_VALUE_ID3 := 
hr_pump_get.GET_INPUT_VALUE_ID3
(P_INPUT_VALUE_NAME3 => c.p89
,P_ELEMENT_NAME => c.p86
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p2
,P_LANGUAGE_CODE => c.p87);
end if;
--
if c.d90 is null or
c.d90=cn or
c.d86 is null or
c.d86=cn or
c.p2 is null or
c.d87 is null or
c.d87=cn then
L_INPUT_VALUE_ID4:=nn;
else
L_INPUT_VALUE_ID4 := 
hr_pump_get.GET_INPUT_VALUE_ID4
(P_INPUT_VALUE_NAME4 => c.p90
,P_ELEMENT_NAME => c.p86
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p2
,P_LANGUAGE_CODE => c.p87);
end if;
--
if c.d91 is null or
c.d91=cn or
c.d86 is null or
c.d86=cn or
c.p2 is null or
c.d87 is null or
c.d87=cn then
L_INPUT_VALUE_ID5:=nn;
else
L_INPUT_VALUE_ID5 := 
hr_pump_get.GET_INPUT_VALUE_ID5
(P_INPUT_VALUE_NAME5 => c.p91
,P_ELEMENT_NAME => c.p86
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p2
,P_LANGUAGE_CODE => c.p87);
end if;
--
if c.d92 is null or
c.d92=cn or
c.d86 is null or
c.d86=cn or
c.p2 is null or
c.d87 is null or
c.d87=cn then
L_INPUT_VALUE_ID6:=nn;
else
L_INPUT_VALUE_ID6 := 
hr_pump_get.GET_INPUT_VALUE_ID6
(P_INPUT_VALUE_NAME6 => c.p92
,P_ELEMENT_NAME => c.p86
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p2
,P_LANGUAGE_CODE => c.p87);
end if;
--
if c.d93 is null or
c.d93=cn or
c.d86 is null or
c.d86=cn or
c.p2 is null or
c.d87 is null or
c.d87=cn then
L_INPUT_VALUE_ID7:=nn;
else
L_INPUT_VALUE_ID7 := 
hr_pump_get.GET_INPUT_VALUE_ID7
(P_INPUT_VALUE_NAME7 => c.p93
,P_ELEMENT_NAME => c.p86
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p2
,P_LANGUAGE_CODE => c.p87);
end if;
--
if c.d94 is null or
c.d94=cn or
c.d86 is null or
c.d86=cn or
c.p2 is null or
c.d87 is null or
c.d87=cn then
L_INPUT_VALUE_ID8:=nn;
else
L_INPUT_VALUE_ID8 := 
hr_pump_get.GET_INPUT_VALUE_ID8
(P_INPUT_VALUE_NAME8 => c.p94
,P_ELEMENT_NAME => c.p86
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p2
,P_LANGUAGE_CODE => c.p87);
end if;
--
if c.d95 is null or
c.d95=cn or
c.d86 is null or
c.d86=cn or
c.p2 is null or
c.d87 is null or
c.d87=cn then
L_INPUT_VALUE_ID9:=nn;
else
L_INPUT_VALUE_ID9 := 
hr_pump_get.GET_INPUT_VALUE_ID9
(P_INPUT_VALUE_NAME9 => c.p95
,P_ELEMENT_NAME => c.p86
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p2
,P_LANGUAGE_CODE => c.p87);
end if;
--
if c.d96 is null or
c.d96=cn or
c.d86 is null or
c.d86=cn or
c.p2 is null or
c.d87 is null or
c.d87=cn then
L_INPUT_VALUE_ID10:=nn;
else
L_INPUT_VALUE_ID10 := 
hr_pump_get.GET_INPUT_VALUE_ID10
(P_INPUT_VALUE_NAME10 => c.p96
,P_ELEMENT_NAME => c.p86
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p2
,P_LANGUAGE_CODE => c.p87);
end if;
--
if c.d97 is null or
c.d97=cn or
c.d86 is null or
c.d86=cn or
c.p2 is null or
c.d87 is null or
c.d87=cn then
L_INPUT_VALUE_ID11:=nn;
else
L_INPUT_VALUE_ID11 := 
hr_pump_get.GET_INPUT_VALUE_ID11
(P_INPUT_VALUE_NAME11 => c.p97
,P_ELEMENT_NAME => c.p86
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p2
,P_LANGUAGE_CODE => c.p87);
end if;
--
if c.d98 is null or
c.d98=cn or
c.d86 is null or
c.d86=cn or
c.p2 is null or
c.d87 is null or
c.d87=cn then
L_INPUT_VALUE_ID12:=nn;
else
L_INPUT_VALUE_ID12 := 
hr_pump_get.GET_INPUT_VALUE_ID12
(P_INPUT_VALUE_NAME12 => c.p98
,P_ELEMENT_NAME => c.p86
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p2
,P_LANGUAGE_CODE => c.p87);
end if;
--
if c.d99 is null or
c.d99=cn or
c.d86 is null or
c.d86=cn or
c.p2 is null or
c.d87 is null or
c.d87=cn then
L_INPUT_VALUE_ID13:=nn;
else
L_INPUT_VALUE_ID13 := 
hr_pump_get.GET_INPUT_VALUE_ID13
(P_INPUT_VALUE_NAME13 => c.p99
,P_ELEMENT_NAME => c.p86
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p2
,P_LANGUAGE_CODE => c.p87);
end if;
--
if c.d100 is null or
c.d100=cn or
c.d86 is null or
c.d86=cn or
c.p2 is null or
c.d87 is null or
c.d87=cn then
L_INPUT_VALUE_ID14:=nn;
else
L_INPUT_VALUE_ID14 := 
hr_pump_get.GET_INPUT_VALUE_ID14
(P_INPUT_VALUE_NAME14 => c.p100
,P_ELEMENT_NAME => c.p86
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p2
,P_LANGUAGE_CODE => c.p87);
end if;
--
if c.d101 is null or
c.d101=cn or
c.d86 is null or
c.d86=cn or
c.p2 is null or
c.d87 is null or
c.d87=cn then
L_INPUT_VALUE_ID15:=nn;
else
L_INPUT_VALUE_ID15 := 
hr_pump_get.GET_INPUT_VALUE_ID15
(P_INPUT_VALUE_NAME15 => c.p101
,P_ELEMENT_NAME => c.p86
,P_BUSINESS_GROUP_ID => P_BUSINESS_GROUP_ID
,P_EFFECTIVE_DATE => c.p2
,P_LANGUAGE_CODE => c.p87);
end if;
--
hr_data_pump.api_trc_on;
PY_ELEMENT_ENTRY_API.UPDATE_ELEMENT_ENTRY
(p_validate => l_validate
,P_DATETRACK_UPDATE_MODE => c.p1
,P_EFFECTIVE_DATE => c.p2
,p_business_group_id => p_business_group_id
,P_ELEMENT_ENTRY_ID => L_ELEMENT_ENTRY_ID
,P_OBJECT_VERSION_NUMBER => L_OBJECT_VERSION_NUMBER
,P_COST_ALLOCATION_KEYFLEX_ID => L_COST_ALLOCATION_KEYFLEX_ID
,P_UPDATING_ACTION_ID => L_UPDATING_ACTION_ID
,P_UPDATING_ACTION_TYPE => c.p3
,P_ORIGINAL_ENTRY_ID => L_ORIGINAL_ENTRY_ID
,P_CREATOR_TYPE => c.p4
,P_COMMENT_ID => L_COMMENT_ID
,P_CREATOR_ID => L_CREATOR_ID
,P_REASON => c.p5
,P_SUBPRIORITY => c.p6
,P_DATE_EARNED => c.p7
,P_PERSONAL_PAYMENT_METHOD_ID => L_PERSONAL_PAYMENT_METHOD_ID
,P_ATTRIBUTE_CATEGORY => c.p8
,P_ATTRIBUTE1 => c.p9
,P_ATTRIBUTE2 => c.p10
,P_ATTRIBUTE3 => c.p11
,P_ATTRIBUTE4 => c.p12
,P_ATTRIBUTE5 => c.p13
,P_ATTRIBUTE6 => c.p14
,P_ATTRIBUTE7 => c.p15
,P_ATTRIBUTE8 => c.p16
,P_ATTRIBUTE9 => c.p17
,P_ATTRIBUTE10 => c.p18
,P_ATTRIBUTE11 => c.p19
,P_ATTRIBUTE12 => c.p20
,P_ATTRIBUTE13 => c.p21
,P_ATTRIBUTE14 => c.p22
,P_ATTRIBUTE15 => c.p23
,P_ATTRIBUTE16 => c.p24
,P_ATTRIBUTE17 => c.p25
,P_ATTRIBUTE18 => c.p26
,P_ATTRIBUTE19 => c.p27
,P_ATTRIBUTE20 => c.p28
,P_INPUT_VALUE_ID1 => L_INPUT_VALUE_ID1
,P_INPUT_VALUE_ID2 => L_INPUT_VALUE_ID2
,P_INPUT_VALUE_ID3 => L_INPUT_VALUE_ID3
,P_INPUT_VALUE_ID4 => L_INPUT_VALUE_ID4
,P_INPUT_VALUE_ID5 => L_INPUT_VALUE_ID5
,P_INPUT_VALUE_ID6 => L_INPUT_VALUE_ID6
,P_INPUT_VALUE_ID7 => L_INPUT_VALUE_ID7
,P_INPUT_VALUE_ID8 => L_INPUT_VALUE_ID8
,P_INPUT_VALUE_ID9 => L_INPUT_VALUE_ID9
,P_INPUT_VALUE_ID10 => L_INPUT_VALUE_ID10
,P_INPUT_VALUE_ID11 => L_INPUT_VALUE_ID11
,P_INPUT_VALUE_ID12 => L_INPUT_VALUE_ID12
,P_INPUT_VALUE_ID13 => L_INPUT_VALUE_ID13
,P_INPUT_VALUE_ID14 => L_INPUT_VALUE_ID14
,P_INPUT_VALUE_ID15 => L_INPUT_VALUE_ID15
,P_ENTRY_VALUE1 => c.p29
,P_ENTRY_VALUE2 => c.p30
,P_ENTRY_VALUE3 => c.p31
,P_ENTRY_VALUE4 => c.p32
,P_ENTRY_VALUE5 => c.p33
,P_ENTRY_VALUE6 => c.p34
,P_ENTRY_VALUE7 => c.p35
,P_ENTRY_VALUE8 => c.p36
,P_ENTRY_VALUE9 => c.p37
,P_ENTRY_VALUE10 => c.p38
,P_ENTRY_VALUE11 => c.p39
,P_ENTRY_VALUE12 => c.p40
,P_ENTRY_VALUE13 => c.p41
,P_ENTRY_VALUE14 => c.p42
,P_ENTRY_VALUE15 => c.p43
,P_ENTRY_INFORMATION_CATEGORY => c.p44
,P_ENTRY_INFORMATION1 => c.p45
,P_ENTRY_INFORMATION2 => c.p46
,P_ENTRY_INFORMATION3 => c.p47
,P_ENTRY_INFORMATION4 => c.p48
,P_ENTRY_INFORMATION5 => c.p49
,P_ENTRY_INFORMATION6 => c.p50
,P_ENTRY_INFORMATION7 => c.p51
,P_ENTRY_INFORMATION8 => c.p52
,P_ENTRY_INFORMATION9 => c.p53
,P_ENTRY_INFORMATION10 => c.p54
,P_ENTRY_INFORMATION11 => c.p55
,P_ENTRY_INFORMATION12 => c.p56
,P_ENTRY_INFORMATION13 => c.p57
,P_ENTRY_INFORMATION14 => c.p58
,P_ENTRY_INFORMATION15 => c.p59
,P_ENTRY_INFORMATION16 => c.p60
,P_ENTRY_INFORMATION17 => c.p61
,P_ENTRY_INFORMATION18 => c.p62
,P_ENTRY_INFORMATION19 => c.p63
,P_ENTRY_INFORMATION20 => c.p64
,P_ENTRY_INFORMATION21 => c.p65
,P_ENTRY_INFORMATION22 => c.p66
,P_ENTRY_INFORMATION23 => c.p67
,P_ENTRY_INFORMATION24 => c.p68
,P_ENTRY_INFORMATION25 => c.p69
,P_ENTRY_INFORMATION26 => c.p70
,P_ENTRY_INFORMATION27 => c.p71
,P_ENTRY_INFORMATION28 => c.p72
,P_ENTRY_INFORMATION29 => c.p73
,P_ENTRY_INFORMATION30 => c.p74
,P_OVERRIDE_USER_ENT_CHK => c.p75
,P_EFFECTIVE_START_DATE => c.p76
,P_EFFECTIVE_END_DATE => c.p77
,P_UPDATE_WARNING => L_UPDATE_WARNING);
hr_data_pump.api_trc_off;
--
if L_UPDATE_WARNING then
c.p78 := 'TRUE';
else
c.p78 := 'FALSE';
end if;
--
update hr_pump_batch_lines l set
l.pval076 = decode(c.p76,null,cn,dc(c.p76)),
l.pval077 = decode(c.p77,null,cn,dc(c.p77)),
l.pval078 = decode(c.p78,null,cn,c.p78)
where l.rowid = c.myrowid;
--
close cr;
--
hr_data_pump.exit('call');
exception
 when hr_multi_message.error_message_exist then
   if cr%isopen then
    close cr;
   end if;
   hr_pump_utils.set_multi_msg_error_flag(true);
 when others then
 if cr%isopen then
  close cr;
 end if;
 raise;
end call;
end hrdpp_UPDATE_ELEMENT_ENTRY;

/
