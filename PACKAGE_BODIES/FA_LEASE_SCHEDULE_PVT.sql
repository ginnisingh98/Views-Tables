--------------------------------------------------------
--  DDL for Package Body FA_LEASE_SCHEDULE_PVT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."FA_LEASE_SCHEDULE_PVT" AS
/* $Header: FAVLSCB.pls 120.3.12010000.2 2009/07/19 11:25:37 glchen ship $ */

-------------------------------------------
-- CHECK FOR PAYMENT SCHEDULE NAME
-------------------------------------------
FUNCTION CHECK_PAYMENT_SCHEDULE (
P_PAYMENT_SCHEDULE_NAME	IN     FA_LEASE_SCHEDULES.PAYMENT_SCHEDULE_NAME%TYPE
,p_log_level_rec       IN     fa_api_types.log_level_rec_type default null
) RETURN BOOLEAN AS

	CURSOR C_PAYMENT_SCHEDULE_ID IS
	SELECT PAYMENT_SCHEDULE_ID
	FROM FA_LEASE_SCHEDULES
	WHERE PAYMENT_SCHEDULE_NAME =  P_PAYMENT_SCHEDULE_NAME;

	L_PAYMENT_SCHEDULE_ID NUMBER;
	PAYMENT_SCHEDULE_FOUND EXCEPTION;

BEGIN
	OPEN C_PAYMENT_SCHEDULE_ID ;

	FETCH C_PAYMENT_SCHEDULE_ID
	INTO L_PAYMENT_SCHEDULE_ID;

	-------------------------------------------
	-- IF PAYMENT SCHEDULE IS FOUND RAISE ERROR
	-------------------------------------------
	IF C_PAYMENT_SCHEDULE_ID%FOUND THEN
	   RAISE PAYMENT_SCHEDULE_FOUND;
	END IF;

	CLOSE C_PAYMENT_SCHEDULE_ID ;
	RETURN (TRUE);

EXCEPTION
    WHEN PAYMENT_SCHEDULE_FOUND THEN
       FND_MESSAGE.SET_NAME ('OFA','FA_DUPLICATE_PAYMENT_SCH');
       FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_PAYMENT_SCHEDULE');
       FND_MSG_PUB.ADD;
       RETURN (FALSE);
    WHEN OTHERS THEN
       FA_SRVR_MSG.ADD_SQL_ERROR('CHECK_PAYMENT_SCHEDULE', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END CHECK_PAYMENT_SCHEDULE;

-------------------------------------------
-- CHECK FOR CURRENCY CODE
-------------------------------------------
FUNCTION CHECK_CURRENCY_CODE(
   P_CURRENCY_CODE		IN     FA_LEASE_SCHEDULES.CURRENCY_CODE%TYPE
,p_log_level_rec       IN     fa_api_types.log_level_rec_type default null
) RETURN BOOLEAN AS

	L_CURRENCY_CODE		FA_LEASE_SCHEDULES.CURRENCY_CODE%TYPE;

BEGIN
      	-------------------------------------------
	-- CHECK IF CURRENCY CODE IS VALID
	-------------------------------------------
	SELECT CURRENCY_CODE INTO L_CURRENCY_CODE
	FROM
	FND_CURRENCIES_VL
	WHERE CURRENCY_CODE =  P_CURRENCY_CODE
	AND ENABLED_FLAG = 'Y';

	RETURN (TRUE);

EXCEPTION
    WHEN NO_DATA_FOUND THEN
       FND_MESSAGE.SET_NAME ('OFA','FA_DYN_CURRENCY');
       FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_CURRENCY_CODE');
       FND_MSG_PUB.ADD;
       RETURN (FALSE);
    WHEN OTHERS THEN
       FA_SRVR_MSG.ADD_SQL_ERROR('CHECK_CURRENCY_CODE', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END CHECK_CURRENCY_CODE;

-------------------------------------------
-- CHECK FOR LEASE FREQUENCY
-------------------------------------------
FUNCTION CHECK_LEASE_FREQUENCY(
   P_FREQUENCY 	IN     FA_LEASE_SCHEDULES.FREQUENCY%TYPE
,p_log_level_rec       IN     fa_api_types.log_level_rec_type default null
) RETURN BOOLEAN AS

	L_FRQUENCY		VARCHAR2(15);

BEGIN

	-------------------------------------------
	-- CHECK IF FREQUENCY IS VALID
	-------------------------------------------
	SELECT LOOKUP_CODE
	INTO L_FRQUENCY
	FROM FA_LOOKUPS
	WHERE LOOKUP_TYPE ='LEASE FREQUENCY'
	AND LOOKUP_CODE=UPPER(P_FREQUENCY);

	RETURN (TRUE);

EXCEPTION
    WHEN NO_DATA_FOUND THEN
       FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_LEASE_FREQUENCY');
       FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_LEASE_FREQUENCY');
       FND_MSG_PUB.ADD;
       RETURN (FALSE);
    WHEN OTHERS THEN
       FA_SRVR_MSG.ADD_SQL_ERROR('CHECK_LEASE_FREQUENCY', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END CHECK_LEASE_FREQUENCY;

-------------------------------------------
-- CHECK FOR START DATE
-------------------------------------------
FUNCTION CHECK_START_DATE (
   P_LEASE_PAYMENTS_TBL IN     FA_API_TYPES.LEASE_PAYMENTS_TBL_TYPE,
   P_LEASE_INCEPTION_DATE IN 	DATE,
   P_MONTHS_PER_PERIOD	IN	NUMBER
, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type) RETURN BOOLEAN AS
	L_RETURN_FLAG BOOLEAN:=TRUE;
BEGIN

	------------------------------------------------------------
	-- VALIDATE START DATE 1. NEEDS TO BE >= THAN INCEPTION DATE
	-- 2. FIRST DAY OF THE MONTH
	-- 3. SHOULD FALL ON A DATE BASED ON FREQUENCY
	------------------------------------------------------------
	FOR TBL_INDEX IN 1..P_LEASE_PAYMENTS_TBL.COUNT LOOP

        IF P_LEASE_PAYMENTS_TBL(TBL_INDEX).START_DATE IS NULL THEN
			FND_MESSAGE.SET_NAME ('OFA','FA_LEASE_ST_DT_NULL');
      			FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_START_DATE');
			FND_MSG_PUB.ADD;
            		L_RETURN_FLAG:=FALSE;
                        GOTO END_OF_LOOP;
        END IF;

  	IF P_LEASE_PAYMENTS_TBL(TBL_INDEX).START_DATE >= P_LEASE_INCEPTION_DATE   THEN
     	    IF TO_CHAR(P_LEASE_PAYMENTS_TBL(TBL_INDEX).START_DATE,'DD') = 1 THEN
      	   	IF (MOD (MONTHS_BETWEEN(P_LEASE_INCEPTION_DATE,P_LEASE_PAYMENTS_TBL(TBL_INDEX).START_DATE),P_MONTHS_PER_PERIOD) <> 0 ) THEN
			FND_MESSAGE.SET_NAME ('OFA','FA_LEASE_ST_DT_BEGIN_OF_PERIOD');
			FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_START_DATE');
			FND_MSG_PUB.ADD;
            		L_RETURN_FLAG:=FALSE;
         	 END IF;
     	     ELSE
	  	   FND_MESSAGE.SET_NAME ('OFA','FA_LEASE_DATE_FIRST_OF_MONTH');
		   FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_START_DATE');
        	   FND_MSG_PUB.ADD;
        	   L_RETURN_FLAG:=FALSE;
     	     END IF;
  	ELSE
     		FND_MESSAGE.SET_NAME('OFA','FA_LEASE_ST_LEASE_DATE_OVERLAP');
		FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_START_DATE');
     		FND_MSG_PUB.ADD;
     		L_RETURN_FLAG:=FALSE;
   	END IF;

	END LOOP;

	<<END_OF_LOOP>>

	RETURN(L_RETURN_FLAG);

EXCEPTION
    WHEN OTHERS THEN
       FA_SRVR_MSG.ADD_SQL_ERROR('CHECK_START_DATE', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END CHECK_START_DATE;

-------------------------------------------
-- CHECK FOR PAYMENT AMOUNT
-------------------------------------------
FUNCTION   CHECK_PAYMENT_AMOUNT(
	P_LEASE_PAYMENTS_TBL IN     FA_API_TYPES.LEASE_PAYMENTS_TBL_TYPE
, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type) RETURN BOOLEAN AS
	L_RETURN_FLAG BOOLEAN:=TRUE;
BEGIN
	------------------------------------------------------------
	-- PAYMENT AMOUNT CAN NOT BE NULL
	------------------------------------------------------------
  	FOR TBL_INDEX IN 1..P_LEASE_PAYMENTS_TBL.COUNT LOOP
  	IF P_LEASE_PAYMENTS_TBL(TBL_INDEX).PAYMENT_AMOUNT IS NULL  OR
		P_LEASE_PAYMENTS_TBL(TBL_INDEX).PAYMENT_AMOUNT < 0 THEN
     		FND_MESSAGE.SET_NAME('OFA','FA_INCORRECT_PAYMENT_AMOUNT');
		FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_PAYMENT_AMOUNT');
     		FND_MSG_PUB.ADD;
     		L_RETURN_FLAG:=FALSE;
  	END IF;
  	END LOOP;

  	RETURN(L_RETURN_FLAG);

EXCEPTION
       WHEN OTHERS THEN
       	FA_SRVR_MSG.ADD_SQL_ERROR('CHECK_PAYMENT_AMOUNT', p_log_level_rec => p_log_level_rec);
       	RETURN (FALSE);
END CHECK_PAYMENT_AMOUNT;

-------------------------------------------
-- CHECK FOR NUMBER OF PAYMENTS
-------------------------------------------
FUNCTION   CHECK_NO_OF_PAYMENTS (
	P_LEASE_PAYMENTS_TBL IN     FA_API_TYPES.LEASE_PAYMENTS_TBL_TYPE
, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type) RETURN BOOLEAN AS

	L_RETURN_FLAG BOOLEAN:=TRUE;

BEGIN

	------------------------------------------------------------
	-- NUMBER OF PAYMENTS SHOULD BE > 0
	------------------------------------------------------------

  	FOR TBL_INDEX IN 1..P_LEASE_PAYMENTS_TBL.COUNT LOOP

		IF P_LEASE_PAYMENTS_TBL(TBL_INDEX).NUMBER_OF_PAYMENTS IS NULL  THEN
     			FND_MESSAGE.SET_NAME('OFA','FA_INCORRECT_NO_OF_PAYMENTS');
			FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_NO_OF_PAYMENTS');
     			FND_MSG_PUB.ADD;
     			L_RETURN_FLAG:=FALSE;
		ELSIF P_LEASE_PAYMENTS_TBL(TBL_INDEX).NUMBER_OF_PAYMENTS <= 0  THEN
     			FND_MESSAGE.SET_NAME('OFA','FA_INCORRECT_NO_OF_PAYMENTS');
			FND_MESSAGE.SET_TOKEN ('CALLING_FN','CHECK_NO_OF_PAYMENTS');
     			FND_MSG_PUB.ADD;
     			L_RETURN_FLAG:=FALSE;
  		END IF;
  	END LOOP;

  	RETURN(L_RETURN_FLAG);

EXCEPTION
     WHEN OTHERS THEN
       	FA_SRVR_MSG.ADD_SQL_ERROR('CHECK_NO_OF_PAYMENTS', p_log_level_rec => p_log_level_rec);
       	RETURN (FALSE);
END CHECK_NO_OF_PAYMENTS ;

-------------------------------------------
-- CHECK FOR LEASE PAYMENT TYPE
-------------------------------------------
FUNCTION   CHECK_PERIODS (
	P_LEASE_PAYMENTS_TBL IN     FA_API_TYPES.LEASE_PAYMENTS_TBL_TYPE
	, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type) RETURN BOOLEAN AS

	L_RETURN_FLAG BOOLEAN:=TRUE;
	L_PERIOD VARCHAR2(1);

	CURSOR C1 IS
	SELECT LOOKUP_CODE
	FROM FA_LOOKUPS
	WHERE  LOOKUP_CODE = L_PERIOD AND
	LOOKUP_TYPE = 'LEASE PAYMENT TYPE';

BEGIN
	------------------------------------------------------------
	-- IF PROVIDED, PERIOD SHOULD BE A VALID ONE
	------------------------------------------------------------
   FOR TBL_INDEX IN 1..P_LEASE_PAYMENTS_TBL.COUNT LOOP
      IF P_LEASE_PAYMENTS_TBL(TBL_INDEX).PAYMENT_TYPE IS NULL THEN
         NULL;
      ELSE
        L_PERIOD:=P_LEASE_PAYMENTS_TBL(TBL_INDEX).PAYMENT_TYPE;
        OPEN C1;
        FETCH C1 INTO L_PERIOD;
        IF  C1%NOTFOUND THEN
   	    FND_MESSAGE.SET_NAME('OFA','FA_INCORRECT_PAYMENT_TYPE');
	    FND_MESSAGE.SET_TOKEN ('CALLING_FN',' CHECK_PERIODS');
            FND_MSG_PUB.ADD;
            L_RETURN_FLAG:=FALSE;
	  END IF;
        CLOSE C1;
     END IF;
   END LOOP;

   RETURN(L_RETURN_FLAG);

EXCEPTION
     WHEN OTHERS THEN
       	FA_SRVR_MSG.ADD_SQL_ERROR('CHECK_PERIODS', p_log_level_rec => p_log_level_rec);
       	RETURN (FALSE);
END  CHECK_PERIODS;

-------------------------------------------
-- CALCULATE END DATE
-------------------------------------------
FUNCTION CALC_END_DATE (
	P_NUMBER_OF_PAYMENTS IN NUMBER,
	P_MONTHS_PER_PERIOD IN NUMBER,
	P_START_DATE IN DATE
	, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type) RETURN DATE AS
	L_MONTHS_IN_LEASE	INTEGER;
	L_END_DATE		DATE;
BEGIN
	------------------------------------------------------------
	-- CALCULATE  END DATE
	------------------------------------------------------------

      L_MONTHS_IN_LEASE := P_NUMBER_OF_PAYMENTS * P_MONTHS_PER_PERIOD;
      L_END_DATE := (ADD_MONTHS(P_START_DATE, (L_MONTHS_IN_LEASE - P_MONTHS_PER_PERIOD)));

      RETURN L_END_DATE;
EXCEPTION
     WHEN OTHERS THEN
       	FA_SRVR_MSG.ADD_SQL_ERROR('CALC_END_DATE', p_log_level_rec => p_log_level_rec);
       	RETURN (NULL);
END CALC_END_DATE;

-------------------------------------------
-- VALIDATE SCHEDULE ID
-------------------------------------------
FUNCTION VALIDATE_SCHEDULE_ID
	(P_PAYMENT_SCHEDULE_ID IN NUMBER,
	X_MONTHS_PER_PERIOD OUT NOCOPY NUMBER,
	X_CURRENCY_PRECISION OUT NOCOPY NUMBER,
	X_PERIODS_PER_YEAR OUT NOCOPY NUMBER
	, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type)  RETURN BOOLEAN AS

	CURSOR C1 IS
	SELECT FREQUENCY,CURRENCY_CODE
	FROM FA_LEASE_SCHEDULES
	WHERE PAYMENT_SCHEDULE_ID = P_PAYMENT_SCHEDULE_ID;

	C1_NOT_FOUND EXCEPTION;
	PAYMENTS_NOT_FOUND EXCEPTION;

	L_CURRENCY_CODE     VARCHAR2(5);
	L_FREQUENCY         VARCHAR2(15);
	L_EXT_PRECISION		NUMBER;
	L_MIN_ACCT_UNIT		NUMBER;
BEGIN

	--------------------------------------------------------------
	-- CHECK IF SCHDULE ID IS VALID, ALSO RETURN MONTHS PER PERIOD
	-- PERIODS PER YEAR AND CURRENCY PRECISION
	--------------------------------------------------------------
	OPEN C1;

	FETCH C1 INTO L_FREQUENCY,L_CURRENCY_CODE;

	IF C1%NOTFOUND THEN
   		RAISE C1_NOT_FOUND;
	END IF;

	IF (L_FREQUENCY = 'MONTHLY') THEN
    		X_MONTHS_PER_PERIOD := 1;
    		X_PERIODS_PER_YEAR := 12;
	ELSIF (L_FREQUENCY = 'QUARTERLY') THEN
    		X_MONTHS_PER_PERIOD := 3;
    		X_PERIODS_PER_YEAR := 4;
	ELSIF (L_FREQUENCY = 'SEMI-ANNUALLY') THEN
    		X_MONTHS_PER_PERIOD := 6;
    		X_PERIODS_PER_YEAR := 2;
	ELSIF (L_FREQUENCY = 'ANNUALLY') THEN
    		X_MONTHS_PER_PERIOD := 12;
    		X_PERIODS_PER_YEAR := 1;
	END IF;

	FND_CURRENCY.GET_INFO(L_CURRENCY_CODE, X_CURRENCY_PRECISION,L_EXT_PRECISION,L_MIN_ACCT_UNIT);

	RETURN(TRUE);

EXCEPTION
    WHEN C1_NOT_FOUND THEN
       FND_MESSAGE.SET_NAME ('OFA','FA_LEASE_SCHEDULE_NOT_FOUND');
       FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATE_SCHEDULE_ID');
       FND_MSG_PUB.ADD;
       RETURN (FALSE);
    WHEN OTHERS THEN
       	FA_SRVR_MSG.ADD_SQL_ERROR('VALIDATE_SCHEDULE_ID', p_log_level_rec => p_log_level_rec);
       	RETURN (FALSE);
END VALIDATE_SCHEDULE_ID;

-------------------------------------------
-- CALCULATE INTEREST
-------------------------------------------
FUNCTION CALCULATE_INTEREST
	(P_PRINCIPAL 		IN NUMBER,
	 P_RATE_PER_PERIOD 	IN NUMBER,
	 P_NUM_PERIODS 		IN NUMBER, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type)
RETURN NUMBER IS
    INTEREST_AMOUNT NUMBER := 0;
    RATE_FACTOR   NUMBER := 0;
BEGIN
	--------------------------------------------------------------
    	-- INTEREST_AMOUNT IS:
    	--
    	--   I =  (P * ((1 + I)**N)) - P
    	--   CALCULATE (1 + I)**N
	--------------------------------------------------------------
    SELECT (POWER((1 + P_RATE_PER_PERIOD), P_NUM_PERIODS))
    INTO   RATE_FACTOR
    FROM   DUAL;

    INTEREST_AMOUNT := (P_PRINCIPAL * (RATE_FACTOR)) - P_PRINCIPAL;
    INTEREST_AMOUNT := INTEREST_AMOUNT;

    RETURN(INTEREST_AMOUNT);

EXCEPTION
   WHEN OTHERS THEN
       	FA_SRVR_MSG.ADD_SQL_ERROR('CALCULATE_INTEREST', p_log_level_rec => p_log_level_rec);
       	RETURN (NULL);
END CALCULATE_INTEREST;

-------------------------------------------
-- DO MINIMUM OF TWO NUMBERS
-------------------------------------------
FUNCTION AMINIMUM2
	(P_X 		NUMBER,
	 P_Y 		NUMBER, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type)
RETURN NUMBER IS
    	MIN_NUMBER NUMBER;
BEGIN

	--------------------------------------------------------------
	-- CALCULATE MIN OF TWO
	--------------------------------------------------------------

    IF (P_X <= P_Y) THEN
             MIN_NUMBER := P_X;
    ELSE
             MIN_NUMBER := P_Y;
    END IF;

    RETURN (MIN_NUMBER);

EXCEPTION
   WHEN OTHERS THEN
       	FA_SRVR_MSG.ADD_SQL_ERROR('AMINIMUM2', p_log_level_rec => p_log_level_rec);
       	RETURN (NULL);
END AMINIMUM2;

-------------------------------------------
-- DO MINIMUM OF THREE NUMBERS
-------------------------------------------
FUNCTION AMINIMUM3
	(P_X 		NUMBER,
	 P_Y 		NUMBER,
	 P_Z 		NUMBER, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type)
RETURN NUMBER IS
    MIN_NUMBER NUMBER;
BEGIN
	--------------------------------------------------------------
	-- CALCULATE MIN OF THREE
	--------------------------------------------------------------

    IF (P_X <= P_Y) AND (P_X <= P_Z) THEN
         MIN_NUMBER := P_X;
    ELSE
        IF (P_Y <= P_X) AND (P_Y <= P_Z) THEN
            MIN_NUMBER := P_Y;
        ELSE
            IF (P_Z <= P_X) AND (P_Z <= P_Y) THEN
            MIN_NUMBER := P_Z;
            END IF;
        END IF;
    END IF;

    RETURN (MIN_NUMBER);

EXCEPTION
   WHEN OTHERS THEN
       	FA_SRVR_MSG.ADD_SQL_ERROR('AMINIMUM3', p_log_level_rec => p_log_level_rec);
       	RETURN (NULL);
END AMINIMUM3;

-------------------------------------------
-- DO LUMP SUM CALCULATIONS
-------------------------------------------
FUNCTION LUMP_SUM
		(P_PAYMENT_AMOUNT 	IN NUMBER,
		  P_NUMBER_PAYMENTS 	IN NUMBER,
		  P_INTEREST_RATE 	IN NUMBER,
		  P_CURRENCY_PRECISION  IN NUMBER , p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type)
RETURN NUMBER IS
	H_ROW_PV		NUMBER := 0;
	H_DENOMINATOR	NUMBER := 0;
BEGIN

	-------------------------------------------------------------
	-- CALCULATE THE DENOMINATOR FIRST "(1 + I) EXP N"
	--------------------------------------------------------------
	IF (P_NUMBER_PAYMENTS = 0) THEN
	    H_DENOMINATOR := 1;
	ELSE
	    SELECT (POWER((1 + P_INTEREST_RATE), P_NUMBER_PAYMENTS)) INTO H_DENOMINATOR FROM DUAL;
	END IF;

	H_ROW_PV := (1/H_DENOMINATOR) * P_PAYMENT_AMOUNT;
	H_ROW_PV := ROUND(H_ROW_PV, P_CURRENCY_PRECISION);
	RETURN(H_ROW_PV);


EXCEPTION
   WHEN OTHERS THEN
       	FA_SRVR_MSG.ADD_SQL_ERROR('LUMP_SUM', p_log_level_rec => p_log_level_rec);
       	RETURN (NULL);
END LUMP_SUM;

-------------------------------------------
-- DO ORDINARY ANNUITY CALCULATIONS
-------------------------------------------
FUNCTION ORDINARY_ANNUITY
		(P_PAYMENT_AMOUNT	IN NUMBER,
    	    	P_NUMBER_PAYMENTS	IN NUMBER,
    	    	P_INTEREST_RATE	IN NUMBER,
	    	P_CURRENCY_PRECISION IN NUMBER, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type) RETURN NUMBER IS
	H_ROW_PV		NUMBER := 0 ;
	H_NUMERATOR		NUMBER := 0 ;
	H_DENOMINATOR		NUMBER := 0 ;
	H_SUBDENOMINATOR	NUMBER := 0 ;
BEGIN
	-------------------------------------------------------------
	-- 	CALCULATE ORDINARY ANNUITY
	--------------------------------------------------------------
	H_DENOMINATOR := P_INTEREST_RATE;
	--------------------------------------------------------------
	--	H_SUBDENOMINATOR := 1;
	-- 	CALCULATE THE SUBDENOMINATOR "(1 + I) EXP N"
	--------------------------------------------------------------

	IF (P_NUMBER_PAYMENTS = 0) THEN
	    H_SUBDENOMINATOR := 1;
	ELSE
	    --H_SUBDENOMINATOR := ((1 + P_INTEREST_RATE) ** P_NUMBER_PAYMENTS);
	    SELECT (POWER((1 + P_INTEREST_RATE), P_NUMBER_PAYMENTS)) INTO H_SUBDENOMINATOR FROM DUAL;
	END IF;
	--
	H_NUMERATOR := 1 - (1 / H_SUBDENOMINATOR);
	H_ROW_PV := ((H_NUMERATOR / H_DENOMINATOR) * P_PAYMENT_AMOUNT);
	H_ROW_PV := ROUND(H_ROW_PV, P_CURRENCY_PRECISION);

	RETURN(H_ROW_PV);
EXCEPTION
   WHEN OTHERS THEN
       	FA_SRVR_MSG.ADD_SQL_ERROR('ORDINARY_ANNUITY', p_log_level_rec => p_log_level_rec);
       	RETURN (NULL);
	--
END ORDINARY_ANNUITY;

-------------------------------------------
-- DO ANNUITY DUE CALCULATIONS
-------------------------------------------
FUNCTION ANNUITY_DUE  (P_PAYMENT_AMOUNT	 	IN NUMBER,
		       P_NUMBER_PAYMENTS	IN NUMBER,
		       P_INTEREST_RATE		IN NUMBER,
			 P_CURRENCY_PRECISION IN NUMBER, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type) RETURN NUMBER IS
	H_ROW_PV		NUMBER := 0 ;
	H_NUMERATOR		NUMBER := 0 ;
	H_DENOMINATOR	NUMBER := 0 ;
	H_SUBDENOMINATOR	NUMBER := 0 ;
BEGIN
	-------------------------------------------------------------
	-- CALCULATE ANNUITY DUE
	--------------------------------------------------------------
	H_DENOMINATOR := P_INTEREST_RATE;
	H_SUBDENOMINATOR := 1;

	-- CALCULATE THE SUBDENOMINATOR "(1 + I) EXP N"
	--
	IF (P_NUMBER_PAYMENTS = 0) THEN
	    H_SUBDENOMINATOR := 1;
	ELSIF (P_NUMBER_PAYMENTS = 1) THEN
	    H_SUBDENOMINATOR := (1 + P_INTEREST_RATE);
	ELSIF (P_NUMBER_PAYMENTS > 1) THEN
	   --THE FOLLOWING STATEMENT DOES NOT WORK. SO THE SELECT ST. IS NECESSARY
	   -- H_SUBDENOMINATOR := ((1 + P_INTEREST_RATE) ** (P_NUMBER_PAYMENTS - 1));
	   SELECT (POWER((1 + P_INTEREST_RATE), (P_NUMBER_PAYMENTS - 1)))
			INTO H_SUBDENOMINATOR FROM DUAL;
 	END IF;

	H_NUMERATOR := 1 - (1 / H_SUBDENOMINATOR);
	H_ROW_PV := (1 + (H_NUMERATOR/H_DENOMINATOR)) * P_PAYMENT_AMOUNT;
	H_ROW_PV := ROUND(H_ROW_PV, P_CURRENCY_PRECISION);
	RETURN(H_ROW_PV);
EXCEPTION
   WHEN OTHERS THEN
       	FA_SRVR_MSG.ADD_SQL_ERROR('ANNUITY_DUE', p_log_level_rec => p_log_level_rec);
       	RETURN (NULL);
END ANNUITY_DUE;

-------------------------------------------
-- DO PRESENT VALUE CALCULATIONS
-------------------------------------------
PROCEDURE PRESENT_VALUE_CALC
	(P_PAYMENT_SCHEDULE_ID 	IN NUMBER
	,P_MONTHS_PER_PERIOD 	IN NUMBER
	,P_INTEREST_PER_PERIOD IN NUMBER
	,P_CURRENCY_PRECISION IN NUMBER, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type)
	IS
	CURSOR C_SCHEDULE IS
        SELECT LEASE_INCEPTION_DATE,PRESENT_VALUE
        FROM     FA_LEASE_SCHEDULES
        WHERE    PAYMENT_SCHEDULE_ID = P_PAYMENT_SCHEDULE_ID
        FOR UPDATE OF PRESENT_VALUE;

	CURSOR C_PAYMENT IS
        SELECT START_DATE,PAYMENT_AMOUNT,NUMBER_OF_PAYMENTS
        FROM     FA_LEASE_PAYMENTS
        WHERE    PAYMENT_SCHEDULE_ID = P_PAYMENT_SCHEDULE_ID
        ORDER BY PAYMENT_LINE_NUMBER
        FOR UPDATE OF ROW_PRESENT_VALUE;

	H_PV_OF_ANNUITY_DUE  NUMBER := 0 ;
	L_DEFERRED_PERIOD	NUMBER:=0;
	L_ROW_PRESENT_VALUE NUMBER:=0;
	L_TOTAL_ROW_PRESENT_VALUE NUMBER:=0;

BEGIN

      	--------------------------------------------------------------------
	-- CALCULATE ROW_PRESENT VLAUE FOR EACH ROW IN FA_LEASE_PAYMENTS AND
	-- SUM ALL THE ROW_PRESENT VALUE FOR FA_LEASE_SHCEDULE.PRESENT_VALUE
	--------------------------------------------------------------------

  FOR SCHEDULE_REC IN C_SCHEDULE LOOP
     FOR PAYMENT_REC IN C_PAYMENT LOOP
    -- CALCULATE DEFERRED PERIOD FOR EACH PAYMENT.IT WILL BE PASSED INTO PRESENT VALUE FUNCTIONS
     L_DEFERRED_PERIOD := ((MONTHS_BETWEEN(PAYMENT_REC.START_DATE ,SCHEDULE_REC.LEASE_INCEPTION_DATE))/ P_MONTHS_PER_PERIOD);
    -- DEPENDING ON LEASING STRUCTURE CHOSEN BY THE USER, CALL THE
    -- APPROPRIATE FUNCTIONS TO CALCULATE PRESENT VALUE
   	-----------------------------
	-- FIRST PAYMENT IN SCHEDULE
	-----------------------------
	IF ((PAYMENT_REC.START_DATE = SCHEDULE_REC.LEASE_INCEPTION_DATE) AND
	       (PAYMENT_REC.NUMBER_OF_PAYMENTS = 1)) THEN
	       L_ROW_PRESENT_VALUE := PAYMENT_REC.PAYMENT_AMOUNT;

	-----------------------------
	-- LUMP SUM PAYMENT
	-----------------------------
	ELSIF  (PAYMENT_REC.NUMBER_OF_PAYMENTS = 1) THEN
	    L_ROW_PRESENT_VALUE := LUMP_SUM(PAYMENT_REC.PAYMENT_AMOUNT,
			      				  L_DEFERRED_PERIOD,
			      				  P_INTEREST_PER_PERIOD,
							  P_CURRENCY_PRECISION,
                                                          p_log_level_rec);
	-----------------------------
	-- ANNUITY DUE
	-----------------------------
	ELSIF (PAYMENT_REC.START_DATE = SCHEDULE_REC.LEASE_INCEPTION_DATE) AND
	       (PAYMENT_REC.NUMBER_OF_PAYMENTS > 1) THEN
            IF P_INTEREST_PER_PERIOD <> 0 THEN
	      L_ROW_PRESENT_VALUE := ANNUITY_DUE(PAYMENT_REC.PAYMENT_AMOUNT,
					     		PAYMENT_REC.NUMBER_OF_PAYMENTS,
					     		P_INTEREST_PER_PERIOD,P_CURRENCY_PRECISION,
                                                        p_log_level_rec);
           ELSE
	      L_ROW_PRESENT_VALUE := PAYMENT_REC.PAYMENT_AMOUNT * PAYMENT_REC.NUMBER_OF_PAYMENTS;
           END IF;
	-----------------------------
	-- ORDINARY ANNUITY
	-----------------------------
	ELSIF (PAYMENT_REC.START_DATE = ADD_MONTHS(SCHEDULE_REC.LEASE_INCEPTION_DATE,
							P_MONTHS_PER_PERIOD)) AND
	       (PAYMENT_REC.NUMBER_OF_PAYMENTS > 1) THEN
            IF P_INTEREST_PER_PERIOD <> 0 THEN
	      L_ROW_PRESENT_VALUE := ORDINARY_ANNUITY(PAYMENT_REC.PAYMENT_AMOUNT,
						        	PAYMENT_REC.NUMBER_OF_PAYMENTS,
						  		P_INTEREST_PER_PERIOD,P_CURRENCY_PRECISION,
                                                                p_log_level_rec);
           ELSE
	      L_ROW_PRESENT_VALUE := PAYMENT_REC.PAYMENT_AMOUNT * PAYMENT_REC.NUMBER_OF_PAYMENTS;
           END IF;
	-----------------------------------------------------------------------------------
	-- CALCULATE THE PRESENT VALUE OF THE ANNUITY IGNORING THE DEFERRED PERIOD
	-- THEN CALCULATE THE PRESENT VALUE OF THIS LUMP SUM AMOUNT WITH THE
 	-- NUMBER_OF_PAYMENTS = THE DEFERRED PERIOD
	----------------------------------------------------------------------------------
	ELSIF (  (PAYMENT_REC.START_DATE >
 		ADD_MONTHS(SCHEDULE_REC.LEASE_INCEPTION_DATE, P_MONTHS_PER_PERIOD)) AND
	      		(PAYMENT_REC.NUMBER_OF_PAYMENTS > 1)  )  OR
		(  (PAYMENT_REC.START_DATE <> SCHEDULE_REC.LEASE_INCEPTION_DATE)  AND
			(PAYMENT_REC.NUMBER_OF_PAYMENTS > 1)  ) THEN
           IF P_INTEREST_PER_PERIOD <> 0 THEN
  	      H_PV_OF_ANNUITY_DUE := ANNUITY_DUE(PAYMENT_REC.PAYMENT_AMOUNT,
						 PAYMENT_REC.NUMBER_OF_PAYMENTS,
					 	 P_INTEREST_PER_PERIOD,P_CURRENCY_PRECISION,
                                                 p_log_level_rec);
	      L_ROW_PRESENT_VALUE := LUMP_SUM(H_PV_OF_ANNUITY_DUE,
					  	   L_DEFERRED_PERIOD,
					  	   P_INTEREST_PER_PERIOD,P_CURRENCY_PRECISION,
                                                   p_log_level_rec);
           ELSE
	      L_ROW_PRESENT_VALUE := PAYMENT_REC.PAYMENT_AMOUNT * PAYMENT_REC.NUMBER_OF_PAYMENTS;
           END IF;
	END IF;

        L_ROW_PRESENT_VALUE := ROUND(L_ROW_PRESENT_VALUE,
						   P_CURRENCY_PRECISION);
             UPDATE FA_LEASE_PAYMENTS
            SET ROW_PRESENT_VALUE = L_ROW_PRESENT_VALUE
            WHERE CURRENT OF C_PAYMENT;
        L_TOTAL_ROW_PRESENT_VALUE :=  L_TOTAL_ROW_PRESENT_VALUE + L_ROW_PRESENT_VALUE;

    END LOOP;
    UPDATE FA_LEASE_SCHEDULES
    SET PRESENT_VALUE = L_TOTAL_ROW_PRESENT_VALUE
    WHERE CURRENT OF C_SCHEDULE;
 END LOOP;

EXCEPTION
   WHEN OTHERS THEN
       	FA_SRVR_MSG.ADD_SQL_ERROR('PRESENT_VALUE_CALC', p_log_level_rec => p_log_level_rec);
END PRESENT_VALUE_CALC;

------------------------------------------------------------
-- VALIDATE ALL THE SUPPLIED DATA
------------------------------------------------------------

FUNCTION VALIDATE_PAYMENTS (
 	PX_LEASE_SCHEDULES_REC     	IN OUT NOCOPY FA_API_TYPES.LEASE_SCHEDULES_REC_TYPE,
   	P_LEASE_PAYMENTS_TBL       	IN      FA_API_TYPES.LEASE_PAYMENTS_TBL_TYPE,
	P_MONTHS_PER_PERIOD		   OUT NOCOPY NUMBER, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type)
        RETURN BOOLEAN IS
	VALUE_ERROR_EXCEPTION		EXCEPTION;
	L_MONTHS_PER_PERIOD 		NUMBER;
	L_PERIODS_PER_YEAR 		NUMBER;

BEGIN


	------------------------------------------------------------
	-- VALIDATE PAYMENT SCHEDULE NAME
	------------------------------------------------------------

	IF PX_LEASE_SCHEDULES_REC.PAYMENT_SCHEDULE_NAME IS NULL THEN
	   	FND_MESSAGE.SET_NAME ('OFA','FA_NULL_PAYMENT_SCH');
       		FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATE_PAYMENTS');
		FND_MSG_PUB.ADD;
		RAISE VALUE_ERROR_EXCEPTION;

	ELSE
     		IF NOT CHECK_PAYMENT_SCHEDULE(PX_LEASE_SCHEDULES_REC.PAYMENT_SCHEDULE_NAME) THEN
      	 		RAISE VALUE_ERROR_EXCEPTION;
     		END IF;
    	END IF;

	------------------------------------------------------------
	-- VALIDATE PRESENT VALUE
	------------------------------------------------------------

 	IF PX_LEASE_SCHEDULES_REC.PRESENT_VALUE IS NULL THEN
      		FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_PRESENT_VALUE');
       		FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATE_PAYMENTS');
		FND_MSG_PUB.ADD;
		RAISE VALUE_ERROR_EXCEPTION;
 	ELSIF PX_LEASE_SCHEDULES_REC.PRESENT_VALUE < 0 THEN
      		FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_PRESENT_VALUE');
       		FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATE_PAYMENTS');
		FND_MSG_PUB.ADD;
		RAISE VALUE_ERROR_EXCEPTION;
 	END IF;

	------------------------------------------------------------
	-- VALIDATE INTEREST RATE
	------------------------------------------------------------

 	IF PX_LEASE_SCHEDULES_REC.INTEREST_RATE IS NULL THEN
      		FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_INT_RATE');
       		FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATE_PAYMENTS');
		FND_MSG_PUB.ADD;
		RAISE VALUE_ERROR_EXCEPTION;
  	ELSIF ( PX_LEASE_SCHEDULES_REC.INTEREST_RATE < 0
        	OR PX_LEASE_SCHEDULES_REC.INTEREST_RATE > 100 ) THEN
      		FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_INT_RATE');
       		FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATE_PAYMENTS');
		FND_MSG_PUB.ADD;
		RAISE VALUE_ERROR_EXCEPTION;
  	END IF;

	------------------------------------------------------------
	-- VALIDATE LEASE INCEPTION DATE
	------------------------------------------------------------

 	IF PX_LEASE_SCHEDULES_REC.LEASE_INCEPTION_DATE IS NULL THEN
     		FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_INCEPTION_DATE');
       		FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATE_PAYMENTS');
     		FND_MSG_PUB.ADD;
     		RAISE VALUE_ERROR_EXCEPTION;
 	ELSIF TO_CHAR(PX_LEASE_SCHEDULES_REC.LEASE_INCEPTION_DATE ,'DD') <> 1 THEN
     		FND_MESSAGE.SET_NAME ('OFA','FA_LEASE_DATE_FIRST_OF_MONTH');
       		FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATE_PAYMENTS');
     		FND_MSG_PUB.ADD;
     		RAISE VALUE_ERROR_EXCEPTION;
 	END IF;

	------------------------------------------------------------
	-- VALIDATE CURRENCY CODE
	------------------------------------------------------------

 	IF PX_LEASE_SCHEDULES_REC.CURRENCY_CODE IS NULL THEN
		FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_CURRENCY_CODE');
       		FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATE_PAYMENTS');
		FND_MSG_PUB.ADD;
		RAISE VALUE_ERROR_EXCEPTION;
        ELSE
     		IF NOT CHECK_CURRENCY_CODE(PX_LEASE_SCHEDULES_REC.CURRENCY_CODE) THEN
         	  	RAISE VALUE_ERROR_EXCEPTION;
     		END IF;
    	END IF;

	------------------------------------------------------------
	-- VALIDATE FREQUENCY
	------------------------------------------------------------

	IF PX_LEASE_SCHEDULES_REC.FREQUENCY IS NULL THEN
		FND_MESSAGE.SET_NAME ('OFA','FA_INCORRECT_LEASE_FREQUENCY');
       		FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATE_PAYMENTS');
		FND_MSG_PUB.ADD;
		RAISE VALUE_ERROR_EXCEPTION;
        ELSE
     		IF NOT CHECK_LEASE_FREQUENCY(PX_LEASE_SCHEDULES_REC.FREQUENCY) THEN
          	   RAISE VALUE_ERROR_EXCEPTION;
     		END IF;
  	END IF;

	--------------------------------------------------------------------
	-- BASED ON FREQUENCY DETERMINE MONTHS PER PERIOD , PERIODS PER YEAR
	--------------------------------------------------------------------

	IF (UPPER(PX_LEASE_SCHEDULES_REC.FREQUENCY) = 'MONTHLY') THEN
    		L_MONTHS_PER_PERIOD := 1;
    		L_PERIODS_PER_YEAR := 12;
		P_MONTHS_PER_PERIOD:=L_MONTHS_PER_PERIOD;
	ELSIF (UPPER(PX_LEASE_SCHEDULES_REC.FREQUENCY) = 'QUARTERLY') THEN
    		L_MONTHS_PER_PERIOD := 3;
    		L_PERIODS_PER_YEAR := 4;
		P_MONTHS_PER_PERIOD:=L_MONTHS_PER_PERIOD;
	ELSIF (UPPER(PX_LEASE_SCHEDULES_REC.FREQUENCY) = 'SEMI-ANNUALLY') THEN
    		L_MONTHS_PER_PERIOD := 6;
    		L_PERIODS_PER_YEAR := 2;
		P_MONTHS_PER_PERIOD:=L_MONTHS_PER_PERIOD;
	ELSIF (UPPER(PX_LEASE_SCHEDULES_REC.FREQUENCY) = 'ANNUALLY') THEN
    		L_MONTHS_PER_PERIOD := 12;
    		L_PERIODS_PER_YEAR := 1;
		P_MONTHS_PER_PERIOD:=L_MONTHS_PER_PERIOD;
	END IF;

	------------------------------------------------------------
	-- ATLEAST ONE PAYMENT ROW MUST EXIST
	------------------------------------------------------------

	IF P_LEASE_PAYMENTS_TBL.COUNT <	1 THEN
   		FND_MESSAGE.SET_NAME ('OFA','FA_ATLEAST_ONE_PAYMENT');
       		FND_MESSAGE.SET_TOKEN ('CALLING_FN','VALIDATE_PAYMENTS');
   		FND_MSG_PUB.ADD;
   		RAISE VALUE_ERROR_EXCEPTION;
	END IF;

	------------------------------------------------------------
	-- CHECK ALL START DATE'S
	------------------------------------------------------------

	IF  NOT CHECK_START_DATE (P_LEASE_PAYMENTS_TBL,PX_LEASE_SCHEDULES_REC.LEASE_INCEPTION_DATE,L_MONTHS_PER_PERIOD, p_log_level_rec ) THEN
  		RAISE VALUE_ERROR_EXCEPTION;
	END IF;

	------------------------------------------------------------
	-- CHECK ALL PAYMENT AMOUNT'S
	------------------------------------------------------------
	IF  NOT CHECK_PAYMENT_AMOUNT(P_LEASE_PAYMENTS_TBL, p_log_level_rec) THEN
  		RAISE VALUE_ERROR_EXCEPTION;
	END IF;

	------------------------------------------------------------
	-- CHECK ALL NUMBER OF PAYMENTS
	------------------------------------------------------------

	IF  NOT CHECK_NO_OF_PAYMENTS(P_LEASE_PAYMENTS_TBL, p_log_level_rec) THEN
  		RAISE VALUE_ERROR_EXCEPTION;
	END IF;


	------------------------------------------------------------
	-- CHECK ALL LEASE PERIODS
	------------------------------------------------------------
	IF  NOT CHECK_PERIODS(P_LEASE_PAYMENTS_TBL, p_log_level_rec) THEN
  		RAISE VALUE_ERROR_EXCEPTION;
	END IF;

	RETURN (TRUE);

EXCEPTION
    WHEN VALUE_ERROR_EXCEPTION THEN
       RETURN (FALSE);
    WHEN OTHERS THEN
       	FA_SRVR_MSG.ADD_SQL_ERROR('VALIDATE_PAYMENTS', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END VALIDATE_PAYMENTS;

FUNCTION AMORTIZE(
	P_PAYMENT_SCHEDULE_ID     	IN  NUMBER,
	P_TRANS_REC		      	IN  FA_API_TYPES.TRANS_REC_TYPE, p_log_level_rec        IN     FA_API_TYPES.log_level_rec_type)
	RETURN BOOLEAN IS

	VALUE_ERROR_EXCEPTION           EXCEPTION;
	L_MONTHS_PER_PERIOD		NUMBER:=NULL;
	L_CURRENCY_PRECISION		NUMBER:=NULL;
	L_CURRENT_PAYMENT_DATE  	DATE;
	L_NUM_OF_PAYMENTS		NUMBER:=NULL;
	L_LINE_NUMBER			NUMBER:=1;
	L_PAYMENT_AMOUNT		NUMBER:=NULL;
	L_PERIODS_PER_YEAR		NUMBER:=NULL;
	L_INTEREST_RATE			NUMBER:=NULL;
	L_PREVIOUS_PAYMENT_DATE 	DATE;
	L_LEASE_OBLIGATION      	NUMBER := 0;
	L_CURRENT_INTEREST      	NUMBER := 0;
	L_TOT_INT_MAX           	NUMBER := 0;
	L_NUMBER_OF_PERIODS		NUMBER;
	L_TOT_PAY_CALC 			NUMBER:=0;
	L_TOT_PAY_MAX           	NUMBER := 0;
	L_INTEREST_PER_PERIOD		NUMBER;
	L_LINE_NUM              	NUMBER := 0;
	L_PRINCIPAL_PAID        	NUMBER := 0;
	L_INTEREST_PAID         	NUMBER := 0;
	L_TOT_PRIN_MAX          	NUMBER := 0;
	L_LEASE_INCEPTION_DATE		DATE;
	L_PAY_AMOUNT            	NUMBER := 0;
	L_PRESENT_VALUE			NUMBER:=NULL;
	L_TOTAL_PAYMENT         	NUMBER := 0;
        L_TOTAL_INTEREST        	NUMBER := 0;
        L_TOTAL_PRINCIPAL       	NUMBER := 0;
	L_AMORT_COUNT			NUMBER := 0;

	CURSOR C1 IS
	SELECT
	START_DATE,
	NUMBER_OF_PAYMENTS,
	PAYMENT_AMOUNT
	FROM FA_LEASE_PAYMENTS
	WHERE PAYMENT_SCHEDULE_ID=P_PAYMENT_SCHEDULE_ID
	ORDER BY PAYMENT_LINE_NUMBER;

	CURSOR C IS
        SELECT AMORTIZATION_LINE_NUM, PAYMENT_DATE, PAYMENT_AMOUNT,
               INTEREST, PRINCIPAL, LEASE_OBLIGATION ,
               LAST_UPDATE_DATE, LAST_UPDATED_BY, CREATION_DATE,
               CREATED_BY, LAST_UPDATE_LOGIN
        FROM     FA_AMORT_SCHEDULES
        WHERE    PAYMENT_SCHEDULE_ID = P_PAYMENT_SCHEDULE_ID
        ORDER BY PAYMENT_DATE
        FOR UPDATE OF AMORTIZATION_LINE_NUM, PAYMENT_DATE, PAYMENT_AMOUNT,
                      INTEREST, PRINCIPAL, LEASE_OBLIGATION ,
                      LAST_UPDATE_DATE, LAST_UPDATED_BY, CREATION_DATE,
                      CREATED_BY, LAST_UPDATE_LOGIN;

BEGIN

	-------------------------------------------------------------------------------
	-- MAKE SURE THAT NO AMORTIZATION CALCULATION EXISTS FOR THIS PAYMENT SCHEDULE
	-------------------------------------------------------------------------------

	SELECT COUNT(*)
	INTO L_AMORT_COUNT
	FROM FA_AMORT_SCHEDULES
	WHERE PAYMENT_SCHEDULE_ID = P_PAYMENT_SCHEDULE_ID;

	IF L_AMORT_COUNT > 0 THEN
		FND_MESSAGE.SET_NAME ('OFA','FA_AMORT_EXISTS');
      		FND_MESSAGE.SET_TOKEN ('CALLING_FN','AMORTIZE');
		FND_MSG_PUB.ADD;
		RAISE VALUE_ERROR_EXCEPTION;
	END IF;


	-------------------------------------------------------------------------------
	-- MAKE SURE THAT PAYMENT SCHEDULE ID IS VALID
	-------------------------------------------------------------------------------

	IF P_PAYMENT_SCHEDULE_ID IS NULL THEN
		FND_MESSAGE.SET_NAME ('OFA','FA_NULL_PAYMENT_SCH');
		FND_MESSAGE.SET_TOKEN ('CALLING_FN','AMORTIZE');
   		FND_MSG_PUB.ADD;
   		RAISE VALUE_ERROR_EXCEPTION;
	END IF;

	IF NOT VALIDATE_SCHEDULE_ID(P_PAYMENT_SCHEDULE_ID,L_MONTHS_PER_PERIOD,L_CURRENCY_PRECISION,L_PERIODS_PER_YEAR, p_log_level_rec) THEN
        	RAISE VALUE_ERROR_EXCEPTION;
 	END IF;

	FOR C1_REC IN C1 LOOP

            L_CURRENT_PAYMENT_DATE := C1_REC.START_DATE;
            L_NUM_OF_PAYMENTS      := C1_REC.NUMBER_OF_PAYMENTS;


            FOR J IN 1..L_NUM_OF_PAYMENTS LOOP

                L_PAYMENT_AMOUNT:=ROUND(C1_REC.PAYMENT_AMOUNT,L_CURRENCY_PRECISION);
		L_TOT_PAY_CALC := L_TOT_PAY_CALC + L_PAYMENT_AMOUNT;

                INSERT INTO FA_AMORT_SCHEDULES
                    (PAYMENT_SCHEDULE_ID
			, AMORTIZATION_LINE_NUM
			, PAYMENT_DATE
			, PAYMENT_AMOUNT
			, INTEREST
			, PRINCIPAL
			, LEASE_OBLIGATION
			, CREATED_BY
			,CREATION_DATE
			,LAST_UPDATE_LOGIN
			,LAST_UPDATE_DATE
			,LAST_UPDATED_BY )
                VALUES
                    (P_PAYMENT_SCHEDULE_ID
		     	,L_LINE_NUMBER
                     	,L_CURRENT_PAYMENT_DATE
		     	,L_PAYMENT_AMOUNT
                    	,0
		     	,0
                     	,0
                     	,P_TRANS_REC.WHO_INFO.CREATED_BY
			,P_TRANS_REC.WHO_INFO.CREATION_DATE
			,P_TRANS_REC.WHO_INFO.LAST_UPDATE_LOGIN
			,P_TRANS_REC.WHO_INFO.LAST_UPDATE_DATE
			,P_TRANS_REC.WHO_INFO.LAST_UPDATED_BY );

                L_CURRENT_PAYMENT_DATE := ADD_MONTHS(L_CURRENT_PAYMENT_DATE, L_MONTHS_PER_PERIOD);

                L_LINE_NUMBER := L_LINE_NUMBER + 1;

            END LOOP;

	END LOOP ;


	L_TOT_PAY_MAX :=  ROUND(L_TOT_PAY_CALC,L_CURRENCY_PRECISION);

	SELECT INTEREST_RATE
	,LEASE_INCEPTION_DATE
	,PRESENT_VALUE
	INTO
	L_INTEREST_RATE
	,L_LEASE_INCEPTION_DATE
	,L_PRESENT_VALUE
	FROM FA_LEASE_SCHEDULES
	WHERE PAYMENT_SCHEDULE_ID=P_PAYMENT_SCHEDULE_ID;

	L_INTEREST_PER_PERIOD := (L_INTEREST_RATE/100) / L_PERIODS_PER_YEAR;

 	UPDATE FA_AMORT_SCHEDULES
 	SET AMORTIZATION_LINE_NUM = AMORTIZATION_LINE_NUM + 100000
	WHERE PAYMENT_SCHEDULE_ID = P_PAYMENT_SCHEDULE_ID;

        L_LINE_NUM              := 0;
        L_PRINCIPAL_PAID        := 0;
        L_INTEREST_PAID         := 0;
        L_PREVIOUS_PAYMENT_DATE := L_LEASE_INCEPTION_DATE;
        L_LEASE_OBLIGATION      := ROUND(L_PRESENT_VALUE, L_CURRENCY_PRECISION);
        L_CURRENT_INTEREST      := 0;
        L_TOT_INT_MAX           := ROUND(L_TOT_PAY_MAX - L_LEASE_OBLIGATION, L_CURRENCY_PRECISION);
        L_TOT_PRIN_MAX          := ROUND(L_PRESENT_VALUE, L_CURRENCY_PRECISION);

        FOR REC IN C LOOP

            L_LINE_NUM := L_LINE_NUM + 1;

            -- ONLY CALCULATE INTEREST FOR PERIOD WHEN DATE HAS CHANGED
            IF (REC.PAYMENT_DATE <> L_PREVIOUS_PAYMENT_DATE) THEN

                L_NUMBER_OF_PERIODS := (MONTHS_BETWEEN(REC.PAYMENT_DATE, L_PREVIOUS_PAYMENT_DATE)/L_MONTHS_PER_PERIOD);
                L_CURRENT_INTEREST := CALCULATE_INTEREST(L_LEASE_OBLIGATION + L_CURRENT_INTEREST,
                                   L_INTEREST_PER_PERIOD, L_NUMBER_OF_PERIODS,
                                   p_log_level_rec) + L_CURRENT_INTEREST;

                L_CURRENT_INTEREST := ROUND(L_CURRENT_INTEREST, L_CURRENCY_PRECISION);

            END IF;

            L_PAY_AMOUNT := ROUND(REC.PAYMENT_AMOUNT, L_CURRENCY_PRECISION);
            L_INTEREST_PAID := AMINIMUM3(L_PAY_AMOUNT, L_CURRENT_INTEREST, L_TOT_INT_MAX - L_TOTAL_INTEREST,p_log_level_rec);
            L_PRINCIPAL_PAID   := AMINIMUM2(L_PAY_AMOUNT - L_INTEREST_PAID, L_TOT_PRIN_MAX - L_TOTAL_PRINCIPAL,p_log_level_rec);
            L_INTEREST_PAID := L_PAY_AMOUNT - L_PRINCIPAL_PAID;
            L_CURRENT_INTEREST := L_CURRENT_INTEREST - L_INTEREST_PAID;
            L_LEASE_OBLIGATION := L_LEASE_OBLIGATION - L_PRINCIPAL_PAID;

            -- NOW UPDATE COMPUTED VALUES INTO CURSOR
            UPDATE FA_AMORT_SCHEDULES
            SET AMORTIZATION_LINE_NUM = L_LINE_NUM,
                PAYMENT_DATE          = REC.PAYMENT_DATE,
                PAYMENT_AMOUNT        = REC.PAYMENT_AMOUNT,
                INTEREST              = L_INTEREST_PAID,
                PRINCIPAL             = L_PRINCIPAL_PAID,
                LEASE_OBLIGATION      = L_LEASE_OBLIGATION,
                LAST_UPDATE_DATE      = SYSDATE,
                LAST_UPDATED_BY       = P_TRANS_REC.WHO_INFO.LAST_UPDATED_BY,
                CREATION_DATE         = SYSDATE,
                CREATED_BY            = P_TRANS_REC.WHO_INFO.CREATED_BY,
                LAST_UPDATE_LOGIN     = P_TRANS_REC.WHO_INFO.LAST_UPDATE_LOGIN
            WHERE CURRENT OF C;

            L_PREVIOUS_PAYMENT_DATE := REC.PAYMENT_DATE;
            ---- UPDATE TOTALS
            L_TOTAL_PAYMENT   := L_TOTAL_PAYMENT   +  REC.PAYMENT_AMOUNT;
            L_TOTAL_INTEREST  := L_TOTAL_INTEREST  +  L_INTEREST_PAID;
            L_TOTAL_PRINCIPAL := L_TOTAL_PRINCIPAL +  L_PRINCIPAL_PAID;

        END LOOP;


	PRESENT_VALUE_CALC
	(P_PAYMENT_SCHEDULE_ID,L_MONTHS_PER_PERIOD,L_INTEREST_PER_PERIOD,L_CURRENCY_PRECISION,p_log_level_rec);

	RETURN (TRUE);

EXCEPTION
    WHEN VALUE_ERROR_EXCEPTION THEN
       RETURN (FALSE);
    WHEN OTHERS THEN
       FA_SRVR_MSG.ADD_SQL_ERROR('AMORTIZE', p_log_level_rec => p_log_level_rec);
       RETURN (FALSE);
END AMORTIZE;

END FA_LEASE_SCHEDULE_PVT;

/
