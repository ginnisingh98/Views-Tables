--------------------------------------------------------
--  DDL for Package Body XTR_XTRCFCCY_XMLP_PKG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "APPS"."XTR_XTRCFCCY_XMLP_PKG" AS
/* $Header: XTRCFCCYB.pls 120.1 2007/12/28 12:44:12 npannamp noship $ */
  --FUNCTION ROLLING_BAL1FORMULA RETURN VARCHAR2 IS
  FUNCTION ROLLING_BAL1FORMULA(ACCOUNT_BAL_p in number) RETURN VARCHAR2 IS
  BEGIN
      SELECT OPEN_BAL + ACCOUNT_BAL_p INTO ROLLING_BAL FROM DUAL;
    RETURN ('');
  END ROLLING_BAL1FORMULA;

  FUNCTION ROLLING_BALFORMULA RETURN NUMBER IS
  BEGIN
    RETURN NULL;
  END ROLLING_BALFORMULA;

  FUNCTION OPEN_BAL1FORMULA(ccy_p in varchar2,COMPANY_p in varchar2) RETURN VARCHAR2 IS
  BEGIN
      SELECT NVL(round(sum(NVL(B.OPENING_BALANCE,0)),0),0)/amt_unit2 INTO OPEN_BAL FROM XTR_BANK_ACCOUNTS_V B where B.PARTY_CODE = COMPANY_P and B.CURRENCY = CCY_p;
    RETURN ('');
  END OPEN_BAL1FORMULA;

  FUNCTION OPEN_BALFORMULA RETURN NUMBER IS
  BEGIN
    RETURN NULL;
  END OPEN_BALFORMULA;

  FUNCTION CF_SET_PARAFORMULA RETURN VARCHAR2 IS
  BEGIN
    SELECT
      SUBSTR(USER
            ,1
            ,10)
    INTO
      CP_PARA
    FROM
      DUAL;
    RETURN (CP_PARA);
  END CF_SET_PARAFORMULA;

  FUNCTION BEFOREREPORT RETURN BOOLEAN IS
    L_DMMY_NUM NUMBER;
    L_MESSAGE FND_NEW_MESSAGES.MESSAGE_TEXT%TYPE;
    CURSOR GET_LANGUAGE_DESC IS
      SELECT
        ITEM_NAME,
        SUBSTR(TEXT
              ,1
              ,100) LANG_NAME
      FROM
        XTR_SYS_LANGUAGES_VL
      WHERE MODULE_NAME = 'XTRCFCCY';
  BEGIN
    BEGIN
      COMPANY_NAME_HEADER := CEP_STANDARD.GET_WINDOW_SESSION_TITLE;
    EXCEPTION
      WHEN OTHERS THEN
        FND_MESSAGE.SET_NAME('XTR'
                            ,'XTR_LOOKUP_ERR');
        L_MESSAGE := FND_MESSAGE.GET;
        RAISE_APPLICATION_ERROR(-20101
                               ,NULL);
    END;
    IF (P_DISPLAY_DEBUG = 'Y') THEN
      NULL;
    END IF;
    FND_MESSAGE.SET_NAME('XTR'
                        ,'XTR_CASH_DEPOSIT');
    Z2CURRENT_CASH_DEPOSITS_MSG := FND_MESSAGE.GET;
    FOR c IN GET_LANGUAGE_DESC LOOP
      IF C.ITEM_NAME = 'Z1CCY' THEN
        Z1CCY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1COMPANY' THEN
        Z1COMPANY := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1EXP_TYPES' THEN
        Z1EXP_TYPES := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1INCLUDE_CCY_OPTION' THEN
        Z1INCLUDE_CCY_OPTION := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1PARAMETERS' THEN
        Z1PARAMETERS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1SETTLE_FROM' THEN
        Z1SETTLE_FROM := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1SUMMARISED' THEN
        Z1SUMMARISED := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1SUMMARISE_BY_DAY_WEEK_MONTH' THEN
        Z1SUMMARISE_BY_DAY_WEEK_MONTH := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1TO' THEN
        Z1TO := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2AC_BALANCE' THEN
        Z2AC_BALANCE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2CASHFLOWS' THEN
        Z2CASHFLOWS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2DATE_OR' THEN
        Z2DATE_OR := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2ENDING' THEN
        Z2ENDING := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2END_OF_REPORT' THEN
        Z2END_OF_REPORT := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2NET_CASHFLOW' THEN
        Z2NET_CASHFLOW := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2NET_EXPOSURE' THEN
        Z2NET_EXPOSURE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2NET_FX' THEN
        Z2NET_FX := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2NET_MM' THEN
        Z2NET_MM := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2NET_TOTALS' THEN
        Z2NET_TOTALS := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2NUMBER_OF' THEN
        Z2NUMBER_OF := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2WEEK_MONTH' THEN
        Z2WEEK_MONTH := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z2PAGE' THEN
        Z2PAGE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'REPORT_DATE' THEN
        REPORT_DATE := C.LANG_NAME;
      ELSIF C.ITEM_NAME = 'Z1P_FACTOR' THEN
        Z1P_FACTOR := C.LANG_NAME;
      END IF;
    END LOOP;
    RETURN (TRUE);
  END BEFOREREPORT;

  FUNCTION AFTERREPORT RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END AFTERREPORT;

  FUNCTION AFTERPFORM RETURN BOOLEAN IS
    TEMP NUMBER(15) := 1000;
  BEGIN
      P_CONC_REQUEST_ID := FND_GLOBAL.CONC_REQUEST_ID;

    IF P_FACTOR IS NOT NULL THEN
      SELECT
        SUBSTR(DESCRIPTION
              ,1
              ,20),
        DECODE(SUBSTRB(P_FACTOR
                      ,1
                      ,1)
              ,'U'
              ,1
              ,'T'
              ,1000
              ,'M'
              ,1000000
              ,'B'
              ,100000000)
      INTO
        LP_FACTOR_DESC
        ,TEMP
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'XTR_FACTOR'
        AND LOOKUP_CODE = SUBSTRB(P_FACTOR
             ,1
             ,1);
    ELSE
      SELECT
        SUBSTR(DESCRIPTION
              ,1
              ,20)
      INTO
        LP_FACTOR_DESC
      FROM
        FND_LOOKUPS
      WHERE LOOKUP_TYPE = 'XTR_FACTOR'
        AND LOOKUP_CODE = 'T';
      TEMP := 1000;
    END IF;
    AMT_UNIT2 := TEMP;
    SETTLE_FROM_DATE2 := NVL(TO_DATE(P_PERIOD_FROM
                                    ,'YYYY/MM/DD HH24:MI:SS')
                            ,TRUNC(SYSDATE));
    SETTLE_TO_DATE2 := NVL(TO_DATE(P_PERIOD_TO
                                  ,'YYYY/MM/DD HH24:MI:SS')
                          ,TRUNC(SYSDATE) + 7);
    CURRENCY2 := P_CURRENCY;
    COMPANY_CODE2 := P_COMPANY;
    EXP_TYPES2 := P_EXPOSURE_TYPE;
    INCL_CCY_OPT2 := P_INCLUDE_FX_OPTION_BUY_SELL;
    DAY_WEEK_MONTH2 := P_SUMMARIZE_BY;
    IF EXP_TYPES2 = 'FIRM' THEN
      P_1 := 'and d.dda_deal_subtype like ''FIRM''';
    ELSIF EXP_TYPES2 = 'INDICATIVE' THEN
      P_1 := 'and d.dda_deal_subtype like ''INDIC''';
    ELSIF EXP_TYPES2 = 'NONE' THEN
      P_1 := 'and d.dda_deal_subtype not in (''FIRM'',''INDIC'')';
    ELSIF EXP_TYPES2 = 'ALL' THEN
      P_1 := NULL;
    END IF;
    SELECT
      CP.USER_CONCURRENT_PROGRAM_NAME
    INTO
      REPORT_SHORT_NAME
    FROM
      FND_CONCURRENT_PROGRAMS_VL CP,
      FND_CONCURRENT_REQUESTS CR
    WHERE CR.REQUEST_ID = P_CONC_REQUEST_ID
      AND CP.APPLICATION_ID = CR.PROGRAM_APPLICATION_ID
      AND CP.CONCURRENT_PROGRAM_ID = CR.CONCURRENT_PROGRAM_ID;
                  REPORT_SHORT_NAME := substr(REPORT_SHORT_NAME,1,instr(REPORT_SHORT_NAME,' (XML)'));

    RETURN (TRUE);
  END AFTERPFORM;

  FUNCTION BEFOREPFORM RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BEFOREPFORM;

  FUNCTION BETWEENPAGE RETURN BOOLEAN IS
  BEGIN
    RETURN (TRUE);
  END BETWEENPAGE;

  FUNCTION OPEN_BAL_P RETURN NUMBER IS
  BEGIN
    RETURN OPEN_BAL;
  END OPEN_BAL_P;

  FUNCTION ROLLING_BAL_P RETURN NUMBER IS
  BEGIN
    RETURN ROLLING_BAL;
  END ROLLING_BAL_P;

  FUNCTION CP_PARA_P RETURN VARCHAR2 IS
  BEGIN
    RETURN CP_PARA;
  END CP_PARA_P;

END XTR_XTRCFCCY_XMLP_PKG;


/
